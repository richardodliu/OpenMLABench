{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    if len(a[0]) != len(b):\n        return -1\n    result = []\n    for row in a:\n        dot_product = sum((x * y for (x, y) in zip(row, b)))\n        result.append(dot_product)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    return [[a[j][i] for j in range(len(a))] for i in range(len(a[0]))]"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    try:\n        a = np.array(a)\n        a = a.reshape(new_shape)\n        a = a.tolist()\n        return a\n    except ValueError:\n        return []"}
{"task_id": 4, "completion_id": 0, "solution": "def calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    if mode == 'row':\n        return [sum(row) / len(row) for row in matrix]\n    elif mode == 'column':\n        return [sum(col) / len(matrix) for col in zip(*matrix)]\n    else:\n        raise ValueError(\"Invalid mode. Please choose 'row' or 'column'.\")"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    result = []\n    for row in matrix:\n        new_row = [element * scalar for element in row]\n        result.append(new_row)\n    return result"}
{"task_id": 6, "completion_id": 0, "solution": "import numpy as np\ndef calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    matrix = np.array(matrix)\n    eigenvalues = np.linalg.eigvals(matrix)\n    eigenvalues = sorted(eigenvalues, reverse=True)\n    return eigenvalues"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    A = np.array(A)\n    T = np.array(T)\n    S = np.array(S)\n    if np.linalg.det(T) == 0 or np.linalg.det(S) == 0:\n        return -1\n    T_inv = np.linalg.inv(T)\n    T_inv_A = np.dot(T_inv, A)\n    result = np.dot(T_inv_A, S)\n    result = np.round(result, 4)\n    result = result.tolist()\n    return result"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    det = a * d - b * c\n    if det == 0:\n        return None\n    else:\n        return [[d / det, -b / det], [-c / det, a / det]]"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    if len(a[0]) != len(b):\n        return -1\n    result = [[0 for _ in range(len(b[0]))] for _ in range(len(a))]\n    for i in range(len(a)):\n        for j in range(len(b[0])):\n            for k in range(len(b)):\n                result[i][j] += a[i][k] * b[k][j]\n    return result"}
{"task_id": 10, "completion_id": 0, "solution": "import numpy as np\ndef calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    vectors_transposed = np.array(vectors).T.tolist()\n    covariance_matrix = np.cov(vectors_transposed).tolist()\n    return covariance_matrix"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    A = np.array(A)\n    b = np.array(b)\n    x = np.zeros_like(b)\n    for _ in range(n):\n        x_new = np.zeros_like(x)\n        for i in range(A.shape[0]):\n            x_new[i] = (b[i] - np.dot(A[i, :i], x[:i]) - np.dot(A[i, i + 1:], x[i + 1:])) / A[i, i]\n        x = x_new\n    x = np.round(x, 4)\n    return x.tolist()"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    U = np.identity(2)\n    V = np.identity(2)\n    for _ in range(100):\n        max_val = 0\n        (p, q) = (0, 1)\n        for i in range(2):\n            for j in range(i + 1, 2):\n                if abs(A[i][j]) > max_val:\n                    max_val = abs(A[i][j])\n                    (p, q) = (i, j)\n        if max_val < 1e-10:\n            break\n        theta = 0.5 * np.arctan2(2 * A[p][q], A[q][q] - A[p][p])\n        c = np.cos(theta)\n        s = np.sin(theta)\n        R = np.identity(2)\n        R[p][p] = c\n        R[q][q] = c\n        R[p][q] = s\n        R[q][p] = -s\n        A = np.dot(np.dot(R.T, A), R)\n        U = np.dot(U, R)\n        V = R.T\n    sigma = np.sqrt(np.diag(A))\n    return (U, sigma, V)"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n\n    def determinant_3x3(m):\n        return m[0][0] * (m[1][1] * m[2][2] - m[1][2] * m[2][1]) - m[0][1] * (m[1][0] * m[2][2] - m[1][2] * m[2][0]) + m[0][2] * (m[1][0] * m[2][1] - m[1][1] * m[2][0])\n    det = 0\n    for c in range(4):\n        sub_matrix = matrix[1:]\n        for i in range(len(sub_matrix)):\n            sub_matrix[i] = sub_matrix[i][0:c] + sub_matrix[i][c + 1:]\n        sign = -1 if c % 2 else 1\n        det += sign * matrix[0][c] * determinant_3x3(sub_matrix)\n    return det"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    X = np.array(X)\n    y = np.array(y)\n    X = np.c_[np.ones(X.shape[0]), X]\n    beta = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(y)\n    beta = [round(coef, 4) for coef in beta]\n    return beta"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> np.ndarray:\n    theta = np.zeros(X.shape[1])\n    for _ in range(iterations):\n        gradient = 2.0 / X.shape[0] * X.T.dot(X.dot(theta) - y)\n        theta = theta - alpha * gradient\n    return np.round(theta, 4).tolist()"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    standardized_data = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    standardized_data = np.round(standardized_data, 4).tolist()\n    normalized_data = (data - np.min(data, axis=0)) / (np.max(data, axis=0) - np.min(data, axis=0))\n    normalized_data = np.round(normalized_data, 4).tolist()\n    return (standardized_data, normalized_data)"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n    points = np.array(points)\n    centroids = np.array(initial_centroids)\n    clusters = [[] for _ in range(k)]\n    for _ in range(max_iterations):\n        clusters = [[] for _ in range(k)]\n        for point in points:\n            distances = np.linalg.norm(centroids - point, axis=1)\n            closest_centroid_index = np.argmin(distances)\n            clusters[closest_centroid_index].append(point)\n        for (i, cluster) in enumerate(clusters):\n            if cluster:\n                centroids[i] = np.mean(cluster, axis=0)\n    final_centroids = [tuple(np.round(centroid, 4)) for centroid in centroids]\n    return final_centroids"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    if shuffle:\n        if random_seed:\n            np.random.seed(random_seed)\n        indices = np.random.permutation(len(X))\n    else:\n        indices = np.arange(len(X))\n    fold_size = len(X) // k\n    folds = []\n    for i in range(k):\n        start = i * fold_size\n        end = (i + 1) * fold_size\n        if i == k - 1:\n            end = len(X)\n        test_indices = indices[start:end]\n        train_indices = np.concatenate([indices[:start], indices[end:]])\n        folds.append((train_indices, test_indices))\n    return folds"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    data = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    covariance_matrix = np.cov(data.T)\n    (eigenvalues, eigenvectors) = np.linalg.eig(covariance_matrix)\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    principal_components = eigenvectors[:, :k]\n    principal_components = np.round(principal_components, 4)\n    return principal_components.tolist()"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef entropy(data):\n    total = len(data)\n    count = Counter(data)\n    entropy = 0.0\n    for i in count.values():\n        p_i = i / total\n        entropy += -p_i * math.log2(p_i)\n    return entropy\ndef information_gain(data, attr):\n    total = len(data)\n    attr_values = set(data[attr])\n    gain = entropy(data)\n    for value in attr_values:\n        subset = [example for example in data if example[attr] == value]\n        gain -= len(subset) / total * entropy(subset)\n    return gain\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n    data = [example[target_attr] for example in examples]\n    if len(set(data)) == 1:\n        return data[0]\n    if not attributes:\n        return max(set(data), key=data.count)\n    best_attr = max(attributes, key=lambda attr: information_gain(examples, attr))\n    tree = {best_attr: {}}\n    remaining_attr = [attr for attr in attributes if attr != best_attr]\n    for value in set([example[best_attr] for example in examples]):\n        subset = [example for example in examples if example[best_attr] == value]\n        subtree = learn_decision_tree(subset, remaining_attr, target_attr)\n        tree[best_attr][value] = subtree\n    return tree"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    alpha = np.zeros(data.shape[0])\n    bias = 0\n    if kernel == 'linear':\n\n        def kernel_func(x, y):\n            return np.dot(x, y)\n    elif kernel == 'rbf':\n\n        def kernel_func(x, y):\n            return np.exp(-np.linalg.norm(x - y) ** 2 / (2 * sigma ** 2))\n    for _ in range(iterations):\n        for i in range(data.shape[0]):\n            prediction = bias + np.sum(alpha * labels * kernel_func(data, data[i]))\n            if labels[i] * prediction < 1:\n                alpha[i] += 1\n                bias += labels[i]\n        alpha /= 2 * lambda_val\n    alpha = np.round(alpha, 4)\n    bias = np.round(bias, 4)\n    return (alpha.tolist(), bias)"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    return round(1 / (1 + math.exp(-z)), 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    exp_scores = [math.exp(score) for score in scores]\n    sum_exp_scores = sum(exp_scores)\n    softmax_values = [round(exp_score / sum_exp_scores, 4) for exp_score in exp_scores]\n    return softmax_values"}
{"task_id": 24, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    weighted_sums = [sum([features[i][j] * weights[j] for j in range(len(weights))]) + bias for i in range(len(features))]\n    probabilities = [1 / (1 + math.exp(-x)) for x in weighted_sums]\n    mse = sum([(probabilities[i] - labels[i]) ** 2 for i in range(len(labels))]) / len(labels)\n    probabilities = [round(x, 4) for x in probabilities]\n    mse = round(mse, 4)\n    return (probabilities, mse)\nfeatures = [[0.5, 1.0], [-1.5, -2.0], [2.0, 1.5]]\nlabels = [0, 1, 0]\nweights = [0.7, -0.4]\nbias = -0.1"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\ndef sigmoid_derivative(x):\n    return x * (1 - x)\ndef train_neuron(features, labels, initial_weights, initial_bias, learning_rate, epochs):\n    weights = np.array(initial_weights)\n    bias = initial_bias\n    mse_values = []\n    for _ in range(epochs):\n        weighted_sum = np.dot(features, weights) + bias\n        predictions = sigmoid(weighted_sum)\n        mse = np.mean((predictions - labels) ** 2)\n        mse_values.append(round(mse, 4))\n        error = predictions - labels\n        d_weights = 1 / len(features) * np.dot(features.T, error * sigmoid_derivative(predictions))\n        d_bias = 1 / len(features) * np.sum(error * sigmoid_derivative(predictions))\n        weights -= learning_rate * d_weights\n        bias -= learning_rate * d_bias\n    return (weights.tolist(), round(bias, 4), mse_values)"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        out = Value(self.data + other.data, (self, other), '+')\n\n        def _backward():\n            self.grad += 1.0 * out.grad\n            other.grad += 1.0 * out.grad\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        out = Value(self.data * other.data, (self, other), '*')\n\n        def _backward():\n            self.grad += other.data * out.grad\n            other.grad += self.data * out.grad\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')\n\n        def _backward():\n            self.grad += (out.data > 0) * out.grad\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1\n        for node in reversed(topo):\n            node._backward()"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    B = np.array(B)\n    C = np.array(C)\n    C_inv = np.linalg.inv(C)\n    P = np.dot(C_inv, B)\n    P = np.round(P, 4)\n    return P.tolist()"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    A_transpose_A = np.dot(A.T, A)\n    (eigenvalues, eigenvectors) = np.linalg.eig(A_transpose_A)\n    singular_values = np.sqrt(eigenvalues)\n    V = eigenvectors\n    U = []\n    for i in range(V.shape[1]):\n        if singular_values[i] != 0:\n            U.append(np.dot(A, V[:, i]) / singular_values[i])\n        else:\n            U.append(np.zeros(A.shape[0]))\n    U = np.array(U).T\n    S = np.diag(singular_values)\n    U = np.round(U, 4)\n    S = np.round(S, 4)\n    V = np.round(V, 4)\n    return (U.tolist(), S.tolist(), V.tolist())"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    assert len(X) == len(y)\n    if seed is not None:\n        np.random.seed(seed)\n    p = np.random.permutation(len(X))\n    return (X[p].tolist(), y[p].tolist())\nX = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\ny = np.array([1, 2, 3, 4])"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    num_samples = X.shape[0]\n    num_batches = num_samples // batch_size\n    if num_samples % batch_size != 0:\n        num_batches += 1\n    output = []\n    for i in range(num_batches):\n        start = i * batch_size\n        end = min((i + 1) * batch_size, num_samples)\n        batch_X = X[start:end]\n        if y is not None:\n            batch_y = y[start:end]\n            output.append([batch_X.tolist(), batch_y.tolist()])\n        else:\n            output.append(batch_X.tolist())\n    return output"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    feature = X[:, feature_i]\n    mask = feature >= threshold\n    subset1 = X[mask].tolist()\n    subset2 = X[~mask].tolist()\n    return [subset1, subset2]\nX = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])\nfeature_i = 0\nthreshold = 5"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    (n_samples, n_features) = X.shape\n\n    def index_combinations():\n        combs = [combinations_with_replacement(range(n_features), i) for i in range(0, degree + 1)]\n        flat_combs = [combi for sublist in combs for combi in sublist]\n        return flat_combs\n    new_X = np.empty((n_samples, len(index_combinations())))\n    for (i, index_combs) in enumerate(index_combinations()):\n        new_X[:, i] = np.prod(X[:, index_combs], axis=1)\n    return new_X.tolist()"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    np.random.seed(seed)\n    subsets = []\n    n_samples = X.shape[0]\n    for _ in range(n_subsets):\n        if replacements:\n            indices = np.random.choice(n_samples, size=n_samples // 2)\n        else:\n            indices = np.random.choice(n_samples, size=n_samples // 2, replace=False)\n        X_subset = X[indices]\n        y_subset = y[indices]\n        subsets.append((X_subset.tolist(), y_subset.tolist()))\n    return subsets"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    if not n_col:\n        n_col = np.max(x) + 1\n    one_hot = np.zeros((x.shape[0], n_col))\n    one_hot[np.arange(x.shape[0]), x] = 1\n    return one_hot.tolist()"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    return np.diagflat(x).tolist()"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    if len(y_true) != len(y_pred):\n        raise ValueError('Lengths of y_true and y_pred must be equal')\n    correct_predictions = np.sum(y_true == y_pred)\n    accuracy = correct_predictions / len(y_true)\n    return round(accuracy, 4)\ny_true = np.array([1, 0, 1, 1, 0, 1])\ny_pred = np.array([1, 0, 0, 1, 0, 1])"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    if Y is None:\n        Y = X\n    X = X - X.mean(axis=0)\n    Y = Y - Y.mean(axis=0)\n    covariance = np.dot(X.T, Y) / (X.shape[0] - 1)\n    std_X = np.std(X, axis=0)\n    std_Y = np.std(Y, axis=0)\n    correlation = covariance / np.outer(std_X, std_Y)\n    return np.around(correlation, decimals=4).tolist()"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_fit(X, y, n_clf):\n    (n_samples, n_features) = X.shape\n    w = np.full(n_samples, 1 / n_samples)\n    classifiers = []\n    for _ in range(n_clf):\n        best_error = float('inf')\n        for feature_i in range(n_features):\n            feature_values = np.expand_dims(X[:, feature_i], axis=1)\n            unique_values = np.unique(feature_values)\n            for threshold in unique_values:\n                polarity = 1\n                predictions = np.ones(np.shape(y))\n                predictions[X[:, feature_i] < threshold] = -1\n                error = sum(w[predictions != y])\n                if error > 0.5:\n                    error = 1 - error\n                    polarity = -1\n                if error < best_error:\n                    best_error = error\n                    best_feature_i = feature_i\n                    best_threshold = threshold\n                    best_polarity = polarity\n        alpha = 0.5 * np.log((1.0 - best_error) / max(best_error, 1e-16))\n        predictions = np.ones(np.shape(y))\n        negative_idx = best_polarity * X[:, best_feature_i] < best_polarity * best_threshold\n        predictions[negative_idx] = -1\n        w *= np.exp(-alpha * y * predictions)\n        w /= np.sum(w)\n        classifiers.append({'polarity': best_polarity, 'threshold': best_threshold, 'feature_index': best_feature_i, 'alpha': round(alpha, 4)})\n    return classifiers"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: np.ndarray):\n    scores = scores - np.max(scores)\n    softmax = np.exp(scores) / np.sum(np.exp(scores))\n    log_softmax = np.log(softmax)\n    log_softmax = np.round(log_softmax, 4)\n    return log_softmax.tolist()"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.optimizer = None\n\n    def initialize(self, optimizer):\n        limit = 1 / np.sqrt(self.input_shape[0])\n        self.W = np.random.uniform(-limit, limit, (self.input_shape[0], self.n_units))\n        self.w0 = np.zeros((1, self.n_units))\n        self.optimizer = optimizer\n\n    def parameters(self):\n        return np.prod(self.W.shape) + np.prod(self.w0.shape)\n\n    def forward_pass(self, X, training=True):\n        self.layer_input = X\n        return X.dot(self.W) + self.w0\n\n    def backward_pass(self, accum_grad):\n        W = self.W\n        if self.trainable:\n            grad_w = self.layer_input.T.dot(accum_grad)\n            grad_w0 = np.sum(accum_grad, axis=0, keepdims=True)\n            self.W = self.optimizer.update(self.W, grad_w)\n            self.w0 = self.optimizer.update(self.w0, grad_w0)\n        accum_grad = accum_grad.dot(W.T)\n        return accum_grad\n\n    def output_shape(self):\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    input_matrix = np.pad(input_matrix, padding, mode='constant')\n    (input_height, input_width) = input_matrix.shape\n    (kernel_height, kernel_width) = kernel.shape\n    output_height = (input_height - kernel_height) // stride + 1\n    output_width = (input_width - kernel_width) // stride + 1\n    output_matrix = np.zeros((output_height, output_width))\n    for i in range(0, input_height - kernel_height + 1, stride):\n        for j in range(0, input_width - kernel_width + 1, stride):\n            sub_matrix = input_matrix[i:i + kernel_height, j:j + kernel_width]\n            output_matrix[i // stride, j // stride] = np.sum(sub_matrix * kernel)\n    output_matrix = np.round(output_matrix, 4)\n    return output_matrix.tolist()"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    return max(0, z)"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    mse = np.mean((np.dot(X, w) - y_true) ** 2)\n    ridge_loss = mse + alpha * np.dot(w, w)\n    ridge_loss = round(ridge_loss, 4)\n    return ridge_loss"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float | int:\n    return max(alpha * z, z)"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    return np.dot(x1, x2)"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    TP = np.sum(np.logical_and(y_true == 1, y_pred == 1))\n    FP = np.sum(np.logical_and(y_true == 0, y_pred == 1))\n    precision = TP / (TP + FP)\n    return precision"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    X = np.c_[np.ones(X.shape[0]), X]\n    weights = weights.reshape(-1, 1)\n    for _ in range(n_iterations):\n        if method == 'batch':\n            gradient = 2 / X.shape[0] * X.T @ (X @ weights - y.reshape(-1, 1))\n        elif method == 'stochastic':\n            random_index = np.random.randint(X.shape[0])\n            xi = X[random_index:random_index + 1]\n            yi = y[random_index:random_index + 1]\n            gradient = 2 * xi.T @ (xi @ weights - yi.reshape(-1, 1))\n        elif method == 'mini-batch':\n            random_indices = np.random.randint(0, X.shape[0], batch_size)\n            X_batch = X[random_indices]\n            y_batch = y[random_indices]\n            gradient = 2 / batch_size * X_batch.T @ (X_batch @ weights - y_batch.reshape(-1, 1))\n        else:\n            raise ValueError(\"Invalid method. Choose from 'batch', 'stochastic', or 'mini-batch'.\")\n        weights = weights - learning_rate * gradient\n    return np.round(weights.flatten().tolist(), 4)"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    matrix = matrix.astype(float)\n    if len(matrix) == 0:\n        return matrix\n    (num_rows, num_cols) = matrix.shape\n    pivot_row = 0\n    pivot_col = 0\n    while pivot_row < num_rows and pivot_col < num_cols:\n        pivot = np.argmax(np.abs(matrix[pivot_row:, pivot_col])) + pivot_row\n        matrix[[pivot_row, pivot], :] = matrix[[pivot, pivot_row], :]\n        if matrix[pivot_row, pivot_col] == 0:\n            pivot_col += 1\n        else:\n            matrix[pivot_row, :] = matrix[pivot_row, :] / matrix[pivot_row, pivot_col]\n            for row in range(num_rows):\n                if row != pivot_row:\n                    factor = matrix[row, pivot_col] / matrix[pivot_row, pivot_col]\n                    matrix[row, :] = matrix[row, :] - factor * matrix[pivot_row, :]\n            pivot_row += 1\n            pivot_col += 1\n    return matrix.tolist()"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=1000):\n    m = np.zeros_like(x0)\n    v = np.zeros_like(x0)\n    x = x0\n    for t in range(1, num_iterations + 1):\n        g = grad(x)\n        m = beta1 * m + (1 - beta1) * g\n        v = beta2 * v + (1 - beta2) * np.square(g)\n        m_hat = m / (1 - np.power(beta1, t))\n        v_hat = v / (1 - np.power(beta2, t))\n        x = x - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    return np.round(x.tolist(), 4)"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    weights = np.zeros(X.shape[1])\n    bias = 0.0\n    for _ in range(max_iter):\n        predictions = np.dot(X, weights) + bias\n        d_weights = -np.dot(y - predictions, X) / X.shape[0] + alpha * np.sign(weights)\n        d_bias = -np.sum(y - predictions) / X.shape[0]\n        weights_new = weights - learning_rate * d_weights\n        bias_new = bias - learning_rate * d_bias\n        if np.sum(np.abs(weights_new - weights)) + np.abs(bias_new - bias) < tol:\n            break\n        (weights, bias) = (weights_new, bias_new)\n    return (weights.tolist(), round(bias, 4))"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    matrix = np.zeros((len(source) + 1, len(target) + 1))\n    for i in range(len(source) + 1):\n        matrix[i, 0] = i\n    for j in range(len(target) + 1):\n        matrix[0, j] = j\n    for i in range(1, len(source) + 1):\n        for j in range(1, len(target) + 1):\n            if source[i - 1] == target[j - 1]:\n                cost = 0\n            else:\n                cost = 1\n            matrix[i, j] = min(matrix[i - 1, j] + 1, matrix[i, j - 1] + 1, matrix[i - 1, j - 1] + cost)\n            if i > 1 and j > 1 and (source[i - 1] == target[j - 2]) and (source[i - 2] == target[j - 1]):\n                matrix[i, j] = min(matrix[i, j], matrix[i - 2, j - 2] + 1)\n    return matrix[len(source), len(target)]"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    TP = np.sum(np.logical_and(y_pred == 1, y_true == 1))\n    FN = np.sum(np.logical_and(y_pred == 0, y_true == 1))\n    if TP + FN == 0:\n        recall = 0.0\n    else:\n        recall = TP / (TP + FN)\n    return round(recall, 3)"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    Q = np.dot(W_q, X)\n    K = np.dot(W_k, X)\n    V = np.dot(W_v, X)\n    scores = np.dot(Q.T, K)\n    scores = np.exp(scores) / np.sum(np.exp(scores), axis=0)\n    output = np.dot(V, scores.T)\n    output = np.round(output, 4)\n    return output.tolist()"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    input_sequence = np.array(input_sequence)\n    initial_hidden_state = np.array(initial_hidden_state)\n    Wx = np.array(Wx)\n    Wh = np.array(Wh)\n    b = np.array(b)\n    hidden_state = initial_hidden_state\n    for input_vector in input_sequence:\n        hidden_state = np.tanh(np.dot(Wx, input_vector) + np.dot(Wh, hidden_state) + b)\n    return np.around(hidden_state, 4).tolist()"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    translation_matrix = np.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])\n    translated_points = []\n    for point in points:\n        homogeneous_point = np.array([point[0], point[1], 1])\n        translated_point = np.dot(translation_matrix, homogeneous_point)\n        translated_points.append([translated_point[0], translated_point[1]])\n    return translated_points"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    return 0.5 * (sigma_p ** 2 / sigma_q ** 2 + (mu_p - mu_q) ** 2 / sigma_q ** 2 - 1 - np.log(sigma_p / sigma_q))"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    n_size = len(A)\n    if x_ini is None:\n        x = np.zeros(n_size)\n    else:\n        x = x_ini\n    for _ in range(n):\n        for i in range(n_size):\n            x[i] = (b[i] - np.dot(A[i, :i], x[:i]) - np.dot(A[i, i + 1:], x[i + 1:])) / A[i, i]\n    return np.round(x, 4).tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    n = len(b)\n    for k in range(n - 1):\n        maxindex = abs(A[k:, k]).argmax() + k\n        if A[maxindex, k] == 0:\n            raise ValueError('Matrix is singular!')\n        if maxindex != k:\n            A[[k, maxindex]] = A[[maxindex, k]]\n            b[[k, maxindex]] = b[[maxindex, k]]\n        for row in range(k + 1, n):\n            multiplier = A[row, k] / A[k, k]\n            A[row, k:] = A[row, k:] - multiplier * A[k, k:]\n            b[row] = b[row] - multiplier * b[k]\n    x = np.zeros(n)\n    for k in range(n - 1, -1, -1):\n        x[k] = (b[k] - np.dot(A[k, k + 1:], x[k + 1:])) / A[k, k]\n    return x.round(4).tolist()"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\ndef tanh(x):\n    return np.tanh(x)\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \"\"\"\n        sequence_length = x.shape[0]\n        hidden_states = []\n        h_t = initial_hidden_state\n        c_t = initial_cell_state\n        for t in range(sequence_length):\n            x_t = x[t].reshape(-1, 1)\n            input_data = np.concatenate((h_t, x_t), axis=0)\n            ft = sigmoid(self.Wf @ input_data + self.bf)\n            it = sigmoid(self.Wi @ input_data + self.bi)\n            Ct_candidate = tanh(self.Wc @ input_data + self.bc)\n            ot = sigmoid(self.Wo @ input_data + self.bo)\n            c_t = ft * c_t + it * Ct_candidate\n            h_t = ot * tanh(c_t)\n            hidden_states.append(h_t.tolist())\n        return (np.round(hidden_states, 4), np.round(h_t.tolist(), 4), np.round(c_t.tolist(), 4))"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef compute_tf_idf(corpus, query):\n    if len(corpus) == 0:\n        return []\n    tf_corpus = [Counter(doc) for doc in corpus]\n    df_corpus = Counter()\n    for doc in corpus:\n        df_corpus.update(set(doc))\n    tf_idf_scores = []\n    for tf_doc in tf_corpus:\n        scores = []\n        for term in query:\n            tf = tf_doc[term] / sum(tf_doc.values())\n            df = df_corpus[term]\n            idf = np.log((len(corpus) + 1) / (df + 1)) + 1\n            tf_idf = round(tf * idf, 5)\n            scores.append(tf_idf)\n        tf_idf_scores.append(scores)\n    return tf_idf_scores"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    tp = np.sum(np.logical_and(y_pred == 1, y_true == 1))\n    fp = np.sum(np.logical_and(y_pred == 1, y_true == 0))\n    fn = np.sum(np.logical_and(y_pred == 0, y_true == 1))\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0\n    f_score = (1 + beta ** 2) * (precision * recall) / (beta ** 2 * precision + recall) if beta ** 2 * precision + recall > 0 else 0\n    return round(f_score, 3)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, x):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n        \"\"\"\n        h = np.zeros((self.hidden_size, 1))\n        outputs = []\n        for i in range(len(x)):\n            h = np.tanh(np.dot(self.W_xh, x[i]) + np.dot(self.W_hh, h) + self.b_h)\n            y = np.dot(self.W_hy, h) + self.b_y\n            outputs.append(y)\n        return (outputs, h)\n\n    def backward(self, x, y, outputs, h, learning_rate=0.01):\n        \"\"\"\n        Backward pass through the RNN for a given sequence of inputs.\n        \"\"\"\n        dW_xh = np.zeros_like(self.W_xh)\n        dW_hh = np.zeros_like(self.W_hh)\n        dW_hy = np.zeros_like(self.W_hy)\n        db_h = np.zeros_like(self.b_h)\n        db_y = np.zeros_like(self.b_y)\n        dh_next = np.zeros_like(h)\n        for t in reversed(range(len(x))):\n            dy = outputs[t] - y[t]\n            dh = np.dot(self.W_hy.T, dy) + dh_next\n            dW_hy += np.dot(dy, h.T)\n            db_y += dy\n            dh_raw = (1 - h ** 2) * dh\n            db_h += dh_raw\n            dW_xh += np.dot(dh_raw, x[t].T)\n            dW_hh += np.dot(dh_raw, h.T)\n            dh_next = np.dot(self.W_hh.T, dh_raw)\n        for dparam in [dW_xh, dW_hh, dW_hy, db_h, db_y]:\n            np.clip(dparam, -5, 5, out=dparam)\n        self.W_xh -= learning_rate * dW_xh\n        self.W_hh -= learning_rate * dW_hh\n        self.W_hy -= learning_rate * dW_hy\n        self.b_h -= learning_rate * db_h\n        self.b_y -= learning_rate * db_y"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    if not x0:\n        x = np.zeros_like(b)\n    else:\n        x = x0\n    r = b - np.dot(A, x)\n    p = r\n    r_k_norm = np.dot(r, r)\n    for i in range(n):\n        Ap = np.dot(A, p)\n        alpha = r_k_norm / np.dot(p, Ap)\n        x += alpha * p\n        r -= alpha * Ap\n        r_kplus1_norm = np.dot(r, r)\n        if np.sqrt(r_kplus1_norm) < tol:\n            break\n        p = r + r_kplus1_norm / r_k_norm * p\n        r_k_norm = r_kplus1_norm\n    return x.round(8).tolist()"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    (_, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    impurity = 1 - np.sum(np.square(probabilities))\n    return round(impurity, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    values = []\n    col_indices = []\n    row_pointers = [0]\n    for (i, row) in enumerate(dense_matrix):\n        for (j, val) in enumerate(row):\n            if val != 0:\n                values.append(val)\n                col_indices.append(j)\n        row_pointers.append(len(values))\n    return (values, col_indices, row_pointers)"}
{"task_id": 66, "completion_id": 0, "solution": "def orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    dot_product = sum((x * y for (x, y) in zip(v, L)))\n    L_magnitude_squared = sum((x * x for x in L))\n    projection_vector = [dot_product / L_magnitude_squared * x for x in L]\n    return [round(x, 3) for x in projection_vector]"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    values = []\n    row_indices = []\n    column_pointer = [0]\n    for column in zip(*dense_matrix):\n        for (row_index, value) in enumerate(column):\n            if value != 0:\n                values.append(value)\n                row_indices.append(row_index)\n        column_pointer.append(len(values))\n    return (values, row_indices, column_pointer)"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    rref_A = np.around(np.linalg.matrix_rank(A), 8)\n    basis_vectors = []\n    for i in range(rref_A.shape[1]):\n        if np.count_nonzero(rref_A[:, i]) == 1:\n            basis_vectors.append(A[:, i].tolist())\n    return basis_vectors"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    y_true_mean = np.mean(y_true)\n    total_sum_of_squares = np.sum((y_true - y_true_mean) ** 2)\n    residual_sum_of_squares = np.sum((y_true - y_pred) ** 2)\n    r_squared_value = 1 - residual_sum_of_squares / total_sum_of_squares\n    return round(r_squared_value, 3)"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    if not img:\n        return -1\n    row_lengths = [len(row) for row in img]\n    if len(set(row_lengths)) > 1:\n        return -1\n    for row in img:\n        for pixel in row:\n            if pixel < 0 or pixel > 255:\n                return -1\n    total_brightness = sum((sum(row) for row in img))\n    num_pixels = len(img) * len(img[0])\n    average_brightness = total_brightness / num_pixels\n    return round(average_brightness, 2)"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    if not isinstance(y_true, np.ndarray) or not isinstance(y_pred, np.ndarray):\n        raise TypeError('Inputs must be numpy arrays.')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Input arrays must have the same shape.')\n    if y_true.size == 0 or y_pred.size == 0:\n        raise ValueError('Input arrays must not be empty.')\n    mse = np.mean((y_true - y_pred) ** 2)\n    rmse = np.sqrt(mse)\n    return round(rmse, 3)"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    intersection = np.logical_and(y_true, y_pred)\n    union = np.logical_or(y_true, y_pred)\n    jaccard_index = intersection.sum() / float(union.sum())\n    return round(jaccard_index, 3)"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    intersection = np.logical_and(y_true, y_pred)\n    num_intersection = np.sum(intersection)\n    num_true = np.sum(y_true)\n    num_pred = np.sum(y_pred)\n    if num_true == 0 and num_pred == 0:\n        return 1.0\n    elif num_true == 0 or num_pred == 0:\n        return 0.0\n    dice_score = 2.0 * num_intersection / (num_true + num_pred)\n    return round(dice_score, 3)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef create_row_hv(row, dim, random_seeds):\n    hv = np.zeros(dim)\n    for (feature, value) in row.items():\n        seed = random_seeds[feature]\n        rng = np.random.RandomState(seed)\n        feature_hv = rng.choice([-1, 1], size=dim)\n        hv += feature_hv\n    return hv.tolist()"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    confusion_matrix = [[0, 0], [0, 0]]\n    for pair in data:\n        (y_true, y_pred) = pair\n        if y_true == 1 and y_pred == 1:\n            confusion_matrix[0][0] += 1\n        elif y_true == 0 and y_pred == 1:\n            confusion_matrix[1][0] += 1\n        elif y_true == 1 and y_pred == 0:\n            confusion_matrix[0][1] += 1\n        elif y_true == 0 and y_pred == 0:\n            confusion_matrix[1][1] += 1\n    return confusion_matrix\ndata = [[1, 1], [1, 0], [0, 1], [0, 0], [0, 1]]"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    if v1.shape != v2.shape:\n        raise ValueError('Both vectors must have the same shape')\n    if v1.size == 0 or v2.size == 0:\n        raise ValueError('Vectors cannot be empty')\n    if np.linalg.norm(v1) == 0 or np.linalg.norm(v2) == 0:\n        raise ValueError('Vectors cannot have zero magnitude')\n    similarity = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n    return round(similarity, 3)"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\nfrom sklearn.metrics import confusion_matrix, f1_score\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    conf_matrix = confusion_matrix(actual, predicted)\n    accuracy = (conf_matrix[0, 0] + conf_matrix[1, 1]) / (conf_matrix[0, 0] + conf_matrix[1, 1] + conf_matrix[1, 0] + conf_matrix[0, 1])\n    f1 = f1_score(actual, predicted)\n    specificity = conf_matrix[0, 0] / (conf_matrix[0, 0] + conf_matrix[0, 1])\n    npv = conf_matrix[0, 0] / (conf_matrix[0, 0] + conf_matrix[1, 0])\n    accuracy = round(accuracy, 3)\n    f1 = round(f1, 3)\n    specificity = round(specificity, 3)\n    npv = round(npv, 3)\n    return (conf_matrix.tolist(), accuracy, f1, specificity, npv)"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\nfrom scipy import stats\ndef descriptive_statistics(data):\n    mean = np.mean(data)\n    median = np.median(data)\n    mode = stats.mode(data)[0][0]\n    variance = np.var(data)\n    standard_deviation = np.std(data)\n    percentiles = np.percentile(data, [25, 50, 75])\n    iqr = percentiles[2] - percentiles[0]\n    result = {'mean': round(mean, 4), 'median': round(median, 4), 'mode': round(mode, 4), 'variance': round(variance, 4), 'standard_deviation': round(standard_deviation, 4), '25th_percentile': round(percentiles[0], 4), '50th_percentile': round(percentiles[1], 4), '75th_percentile': round(percentiles[2], 4), 'interquartile_range': round(iqr, 4)}\n    return result\ndata = [10, 20, 30, 40, 50]"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials\n    \"\"\"\n    binomial_coeff = math.comb(n, k)\n    probability = binomial_coeff * p ** k * (1 - p) ** (n - k)\n    return round(probability, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    \"\"\"\n    coefficient = 1.0 / (std_dev * math.sqrt(2 * math.pi))\n    exponential = math.exp(-(math.pow(x - mean, 2) / (2 * math.pow(std_dev, 2))))\n    return round(coefficient * exponential, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    \"\"\"\n    k_factorial = math.factorial(k)\n    probability = math.exp(-lam) * lam ** k / k_factorial\n    return round(probability, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    \"\"\"\n    max_pixel = np.max(img)\n    min_pixel = np.min(img)\n    contrast = max_pixel - min_pixel\n    return contrast\nimg = np.array([[0, 50], [200, 255]])"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    \"\"\"\n    return np.dot(vec1, vec2)\nvec1 = np.array([1, 2, 3])\nvec2 = np.array([4, 5, 6])"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n    \"\"\"\n    if degree < 0:\n        return []\n    transformed_data = []\n    for point in data:\n        transformed_point = [round(point ** i, 8) for i in range(degree + 1)]\n        transformed_data.append(transformed_point)\n    return transformed_data"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    if position == 0 or d_model <= 0:\n        return -1\n    pos_encoding_matrix = np.zeros((position, d_model), dtype=np.float16)\n    for pos in range(position):\n        for i in range(d_model):\n            if i % 2 == 0:\n                pos_encoding_matrix[pos, i] = np.sin(pos / 10000 ** (2 * i / d_model))\n            else:\n                pos_encoding_matrix[pos, i] = np.cos(pos / 10000 ** (2 * i / d_model))\n    return pos_encoding_matrix.tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    elif training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    else:\n        return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * np.square(grad)\n    m_hat = m / (1 - np.power(beta1, t))\n    v_hat = v / (1 - np.power(beta2, t))\n    parameter = parameter - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    return (np.round(parameter, 5).tolist(), np.round(m, 5).tolist(), np.round(v, 5).tolist())"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    tokens = encoder.encode(prompt)\n    for _ in range(n_tokens_to_generate):\n        tokens.append(np.random.randint(0, 3))\n    generated_text = encoder.decode(tokens)\n    return generated_text"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        e_x = np.exp(values - np.max(values))\n        return e_x / e_x.sum(axis=0)\n\n    def self_attention(query, key, value):\n        scores = np.dot(query, key.T) / np.sqrt(dimension)\n        probabilities = softmax(scores)\n        return np.dot(probabilities, value)\n    crystal_values = np.array(crystal_values).reshape(n, 1)\n    attention_scores = self_attention(crystal_values, crystal_values, crystal_values)\n    final_patterns = np.sum(attention_scores, axis=1)\n    return [round(pattern, 4) for pattern in final_patterns]"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    avgdl = sum((len(doc) for doc in corpus)) / len(corpus)\n    doc_lengths = [len(doc) for doc in corpus]\n    term_freqs = Counter()\n    for doc in corpus:\n        term_freqs.update(doc)\n    idf = {term: np.log((len(corpus) - freq + 0.5) / (freq + 0.5)) for (term, freq) in term_freqs.items()}\n    scores = []\n    for doc in corpus:\n        score = 0\n        for term in query:\n            if term in doc:\n                tf = doc.count(term)\n                score += idf[term] * (tf * (k1 + 1) / (tf + k1 * (1 - b + b * (len(doc) / avgdl))))\n        scores.append(round(score, 3))\n    return scores"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    tp = sum([1 for (yt, yp) in zip(y_true, y_pred) if yt == yp == 1])\n    fp = sum([1 for (yt, yp) in zip(y_true, y_pred) if yt == 0 and yp == 1])\n    fn = sum([1 for (yt, yp) in zip(y_true, y_pred) if yt == 1 and yp == 0])\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0\n    f1_score = 2 * (precision * recall) / (precision + recall) if precision + recall > 0 else 0\n    return round(f1_score, 3)"}
{"task_id": 92, "completion_id": 0, "solution": "import math\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef power_grid_forecast(consumption_data):\n    detrended_data = [consumption_data[i] - 10 * math.sin(2 * math.pi * (i + 1) / 10) for i in range(10)]\n    X = np.array(range(1, 11)).reshape((-1, 1))\n    model = LinearRegression().fit(X, detrended_data)\n    day15_base_consumption = model.predict([[15]])[0]\n    day15_consumption = day15_base_consumption + 10 * math.sin(2 * math.pi * 15 / 10)\n    final_consumption = math.ceil(day15_consumption * 1.05)\n    return final_consumption"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    return round(np.mean(np.abs(y_true - y_pred)), 3)"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef compute_qkv(X, W_q, W_k, W_v):\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    return (Q, K, V)\ndef self_attention(Q, K, V):\n    d_k = Q.shape[1]\n    scores = np.dot(Q, K.T) / np.sqrt(d_k)\n    attention = np.dot(scores, V)\n    return attention\ndef multi_head_attention(X, W_q, W_k, W_v, n_heads):\n    heads = []\n    for _ in range(n_heads):\n        (Q, K, V) = compute_qkv(X, W_q, W_k, W_v)\n        heads.append(self_attention(Q, K, V))\n    return np.concatenate(heads, axis=1).round(4).tolist()\nn_heads = 2\nX = np.random.permutation(X.flatten()).reshape(m, n)\nW_q = np.random.randint(0, 4, size=(n, n))\nW_k = np.random.randint(0, 5, size=(n, n))\nW_v = np.random.randint(0, 6, size=(n, n))"}
{"task_id": 95, "completion_id": 0, "solution": "def phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    n00 = n01 = n10 = n11 = 0\n    for i in range(len(x)):\n        if x[i] == 0 and y[i] == 0:\n            n00 += 1\n        elif x[i] == 0 and y[i] == 1:\n            n01 += 1\n        elif x[i] == 1 and y[i] == 0:\n            n10 += 1\n        elif x[i] == 1 and y[i] == 1:\n            n11 += 1\n    phi = (n11 * n00 - n10 * n01) / ((n10 + n11) * (n00 + n01) * (n01 + n11) * (n00 + n10)) ** 0.5\n    return round(phi, 4)"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    if x < -2.5:\n        return 0.0\n    elif x > 2.5:\n        return 1.0\n    else:\n        return 0.2 * x + 0.5"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value\n    \"\"\"\n    if x >= 0:\n        return x\n    else:\n        return alpha * (math.exp(x) - 1)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    return alpha * x if x < 0 else x"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x)\n    \"\"\"\n    if x > 500:\n        return x\n    elif x < -500:\n        return 0.0\n    else:\n        return round(math.log(1 + math.exp(x)), 4)"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input\n    \"\"\"\n    return round(x / (1 + abs(x)), 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    clipped_rhos = np.clip(rhos, 1 - epsilon, 1 + epsilon)\n    min_terms = np.minimum(clipped_rhos * A, np.zeros_like(A))\n    avg_min_terms = np.mean(min_terms)\n    kl_div = np.mean(pi_theta_old * (np.log(pi_theta_old) - np.log(pi_theta_ref)))\n    grpo_obj = avg_min_terms - beta * kl_div\n    grpo_obj = round(grpo_obj, 6)\n    return grpo_obj\nrhos = [1.2, 0.8, 1.1]\nA = [1.0, 1.0, 1.0]\npi_theta_old = [0.9, 1.1, 1.0]\npi_theta_ref = [1.0, 0.5, 1.5]\nepsilon = 0.2\nbeta = 0.01\ngrpo_obj = grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon, beta)"}
{"task_id": 102, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value\n    \"\"\"\n    sigmoid = 1 / (1 + math.exp(-x))\n    swish_value = x * sigmoid\n    return round(swish_value, 4)"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x >= 0:\n        return scale * x\n    else:\n        return scale * alpha * (math.exp(x) - 1)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"\n    Computes the sigmoid of z.\n    \"\"\"\n    return 1 / (1 + np.exp(-z))\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N x D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    z = np.dot(X, weights) + bias\n    probabilities = sigmoid(z)\n    predictions = [1 if p >= 0.5 else 0 for p in probabilities]\n    return predictions\nX = np.array([[1, 1], [2, 2], [-1, -1], [-2, -2]])\nweights = np.array([1, 1])\nbias = 0"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef softmax(z):\n    return np.exp(z) / np.sum(np.exp(z), axis=1, keepdims=True)\ndef cross_entropy(y_pred, y_true):\n    m = y_true.shape[0]\n    p = softmax(y_pred)\n    log_likelihood = -np.log(p[range(m), y_true])\n    loss = np.sum(log_likelihood) / m\n    return loss\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    X = np.hstack((np.ones((X.shape[0], 1)), X))\n    theta = np.random.rand(X.shape[1], len(np.unique(y)))\n    y_onehot = np.zeros((y.shape[0], len(np.unique(y))))\n    y_onehot[np.arange(y.shape[0]), y] = 1\n    losses = []\n    for i in range(iterations):\n        y_pred = np.dot(X, theta)\n        loss = cross_entropy(y_pred, y)\n        losses.append(round(loss, 4))\n        error = softmax(y_pred) - y_onehot\n        gradient = np.dot(X.T, error) / X.shape[0]\n        theta -= learning_rate * gradient\n    return (theta.tolist(), losses)"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\ndef binary_cross_entropy(y_true, y_pred):\n    return -np.mean(y_true * np.log(y_pred) + (1 - y_true) * np.log(1 - y_pred))\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \"\"\"\n    weights = np.zeros(X.shape[1])\n    bias = 0\n    loss_values = []\n    for i in range(iterations):\n        linear_model = np.dot(X, weights) + bias\n        y_pred = sigmoid(linear_model)\n        dw = 1 / X.shape[0] * np.dot(X.T, y_pred - y)\n        db = 1 / X.shape[0] * np.sum(y_pred - y)\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n        loss = binary_cross_entropy(y, y_pred)\n        loss_values.append(round(loss, 4))\n    return (weights.tolist(), round(bias, 4), loss_values)\nX = np.array([[1.0, 0.5], [-0.5, -1.5], [2.0, 1.5], [-2.0, -1.0]])\ny = np.array([1, 0, 1, 0])"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    scores = np.matmul(Q, K.T)\n    scores = np.where(mask, scores, -np.inf)\n    scores = np.exp(scores) / np.sum(np.exp(scores), axis=-1, keepdims=True)\n    output = np.matmul(scores, V)\n    return output\nmask = np.array([[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]])\noutput = masked_attention(Q, K, V, mask)"}
{"task_id": 108, "completion_id": 0, "solution": "def disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    \"\"\"\n    unique_colors = len(set(apples))\n    disorder = round(1 - unique_colors / len(apples), 4)\n    return disorder"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    mean = np.mean(X, axis=-1, keepdims=True)\n    variance = np.var(X, axis=-1, keepdims=True)\n    normalized = (X - mean) / np.sqrt(variance + epsilon)\n    output = gamma * normalized + beta\n    return output.round(5).tolist()\nX = np.random.randn(2, 2, 3)\ngamma = np.ones(3).reshape(1, 1, -1)\nbeta = np.zeros(3).reshape(1, 1, -1)"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    ref_words = reference.lower().split()\n    cand_words = candidate.lower().split()\n    ref_counter = Counter(ref_words)\n    cand_counter = Counter(cand_words)\n    matching_words = list((ref_counter & cand_counter).elements())\n    precision = len(matching_words) / len(cand_words)\n    recall = len(matching_words) / len(ref_words)\n    fmean = precision * recall / (alpha * precision + (1 - alpha) * recall)\n    matching_word_pairs = list(zip(ref_words, cand_words))\n    matching_word_pairs = [pair for pair in matching_word_pairs if pair[0] in matching_words and pair[1] in matching_words]\n    num_chunks = len(set([pair[0] for pair in matching_word_pairs]))\n    penalty = np.power(num_chunks / len(cand_words), beta)\n    score = fmean * penalty\n    return round(score, 3)"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    p_xy = joint_counts / total_samples\n    p_x = total_counts_x / total_samples\n    p_y = total_counts_y / total_samples\n    pmi = np.log2(p_xy / (p_x * p_y))\n    return round(pmi, 3)"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    min_val = min(x)\n    max_val = max(x)\n    return [round((i - min_val) / (max_val - min_val), 4) for i in x]"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    x = np.matmul(w1, x)\n    x = np.maximum(x, 0)\n    x = np.matmul(w2, x)\n    x = x + np.matmul(w1, x)\n    x = np.maximum(x, 0)\n    x = np.round(x, 4).tolist()\n    return x"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray):\n    return np.mean(x, axis=(0, 1))\nx = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    mean = np.mean(X, axis=(0, 2, 3), keepdims=True)\n    var = np.var(X, axis=(0, 2, 3), keepdims=True)\n    X_hat = (X - mean) / np.sqrt(var + epsilon)\n    Y = gamma * X_hat + beta\n    return Y.round(4).tolist()\nX = np.array([[[[0.4967, -0.1383], [0.6477, 1.523]], [[-0.2342, -0.2341], [1.5792, 0.7674]]], [[[-0.4695, 0.5426], [-0.4634, -0.4657]], [[0.242, -1.9133], [-1.7249, -0.5623]]]])\ngamma = np.array([[[[1.0]], [[1.0]]]])\nbeta = np.array([[[[0.0]], [[0.0]]]])"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    derivative = c * n * x ** (n - 1)\n    return round(derivative, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10):\n    basis = []\n    for v in vectors:\n        w = np.array(v, dtype=float)\n        for vi in basis:\n            vi = np.array(vi)\n            w = w - np.dot(w, vi) * vi\n        if np.linalg.norm(w) > tol:\n            basis.append(list(w / np.linalg.norm(w)))\n    return basis"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    a = np.array(a)\n    b = np.array(b)\n    cross_product = np.cross(a, b)\n    cross_product = np.round(cross_product, 4)\n    cross_product = cross_product.tolist()\n    return cross_product"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    A = np.array(A)\n    b = np.array(b)\n    detA = np.linalg.det(A)\n    if detA == 0:\n        return -1\n    solutions = []\n    for i in range(A.shape[1]):\n        A_i = A.copy()\n        A_i[:, i] = b\n        detA_i = np.linalg.det(A_i)\n        x_i = detA_i / detA\n        solutions.append(x_i)\n    return np.round(solutions, 4).tolist()"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    if len(p) != len(q) or len(p) == 0 or len(q) == 0:\n        return 0.0\n    bc = np.sum(np.sqrt(p * q))\n    distance = -np.log(bc)\n    return round(distance, 4)"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float]:\n    if len(a) != len(b):\n        return -1\n    else:\n        return [a[i] + b[i] for i in range(len(a))]"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    (num_states, num_actions) = theta.shape\n    policy_gradient = np.zeros_like(theta)\n    for episode in episodes:\n        episode_gradient = np.zeros_like(theta)\n        T = len(episode)\n        G = 0\n        for t in reversed(range(T)):\n            (state, action, reward) = episode[t]\n            G += reward\n            prob = np.exp(theta[state, :]) / np.sum(np.exp(theta[state, :]))\n            for a in range(num_actions):\n                if a == action:\n                    episode_gradient[state, a] += (1 - prob[a]) * G\n                else:\n                    episode_gradient[state, a] -= prob[a] * G\n        policy_gradient += episode_gradient\n    policy_gradient /= len(episodes)\n    return policy_gradient.round(4).tolist()"}
{"task_id": 123, "completion_id": 0, "solution": "def compute_efficiency(n_experts, k_active, d_in, d_out):\n    dense_flops = n_experts * d_in * d_out\n    moe_flops = k_active * d_in * d_out\n    savings = (dense_flops - moe_flops) / dense_flops * 100\n    return round(savings, 1)"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    G = np.dot(X, W_g.T)\n    G_noisy = G + np.dot(N, W_noise.T)\n    G_topk = np.zeros_like(G_noisy)\n    for i in range(G_noisy.shape[0]):\n        topk_indices = np.argsort(G_noisy[i])[-k:]\n        G_topk[i, topk_indices] = 1.0\n    G_final = G_topk / np.sum(G_topk, axis=1, keepdims=True)\n    G_final = np.round(G_final, 4)\n    return G_final.tolist()"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    gating_scores = np.einsum('ij,kj->ik', Wg, x.reshape(-1, x.shape[-1]))\n    gating_probabilities = np.exp(gating_scores) / np.exp(gating_scores).sum(axis=-1, keepdims=True)\n    top_k_experts = np.argpartition(gating_probabilities, -top_k, axis=-1)[:, -top_k:]\n    expert_outputs = np.einsum('ijk,ilk->ijl', We[top_k_experts], x)\n    aggregated_output = np.einsum('ij,ijk->ik', gating_probabilities, expert_outputs)\n    aggregated_output = np.round(aggregated_output, 4)\n    return aggregated_output.tolist()"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    (B, C, H, W) = X.shape\n    X = X.reshape(B, num_groups, C // num_groups, H, W)\n    mean = np.mean(X, axis=(2, 3, 4), keepdims=True)\n    var = np.var(X, axis=(2, 3, 4), keepdims=True)\n    X_hat = (X - mean) / np.sqrt(var + epsilon)\n    Y = gamma * X_hat + beta\n    Y = Y.reshape(B, C, H, W)\n    return Y.round(4).tolist()"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n\n    def f(x):\n        return x ** 4 - 3 * x ** 3 + 2\n\n    def df(x):\n        return 4 * x ** 3 - 9 * x ** 2\n    x = start_x\n    for _ in range(max_iters):\n        grad = df(x)\n        if np.abs(grad) < tolerance:\n            break\n        x -= learning_rate * grad\n    return round(x, 4)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: np.ndarray, beta: np.ndarray) -> list[float]:\n    x = x * alpha\n    x = np.tanh(x)\n    x = x * gamma\n    x = x + beta\n    x = np.round(x, 4)\n    x = x.tolist()\n    return x\nx = np.array([[[0.14115588, 0.00372817, 0.24126647, 0.22183601]]])\nalpha = 0.5\ngamma = np.ones((4,))\nbeta = np.zeros((4,))"}
