{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    if not a or not b or len(a[0]) != len(b):\n        return -1\n    result = []\n    for row in a:\n        dot_product = sum((x * y for (x, y) in zip(row, b)))\n        result.append(dot_product)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    if not a or not a[0]:\n        return []\n    transposed = [[a[j][i] for j in range(len(a))] for i in range(len(a[0]))]\n    return transposed"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    array = np.array(a)\n    if array.size != np.prod(new_shape):\n        return []\n    reshaped_array = array.reshape(new_shape)\n    return reshaped_array.tolist()"}
{"task_id": 4, "completion_id": 0, "solution": "def calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    if not matrix or not matrix[0]:\n        return []\n    if mode == 'row':\n        return [sum(row) / len(row) for row in matrix]\n    elif mode == 'column':\n        num_columns = len(matrix[0])\n        column_sums = [0] * num_columns\n        for row in matrix:\n            for i in range(num_columns):\n                column_sums[i] += row[i]\n        return [column_sum / len(matrix) for column_sum in column_sums]\n    else:\n        raise ValueError(\"Mode must be 'row' or 'column'\")\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    result = [[0 for _ in range(len(matrix[0]))] for _ in range(len(matrix))]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            result[i][j] = matrix[i][j] * scalar\n    return result"}
{"task_id": 6, "completion_id": 0, "solution": "def calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    trace = a + d\n    det = a * d - b * c\n    import math\n    eigenvalue1 = (trace + math.sqrt(trace ** 2 - 4 * det)) / 2\n    eigenvalue2 = (trace - math.sqrt(trace ** 2 - 4 * det)) / 2\n    return sorted([eigenvalue1, eigenvalue2], reverse=True)"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    A_np = np.array(A)\n    T_np = np.array(T)\n    S_np = np.array(S)\n    if T_np.shape[0] != T_np.shape[1] or S_np.shape[0] != S_np.shape[1]:\n        return -1\n    if np.linalg.det(T_np) == 0 or np.linalg.det(S_np) == 0:\n        return -1\n    T_inv = np.linalg.inv(T_np)\n    S_inv = np.linalg.inv(S_np)\n    transformed_matrix = T_inv @ A_np @ S_np\n    transformed_matrix_rounded = np.round(transformed_matrix, 4)\n    return transformed_matrix_rounded.tolist()\nA = [[1, 2], [3, 4]]\nT = [[2, 0], [0, 2]]\nS = [[1, 1], [0, 1]]"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    determinant = a * d - b * c\n    if determinant == 0:\n        return None\n    inverse = [[d / determinant, -b / determinant], [-c / determinant, a / determinant]]\n    return inverse\nmatrix = [[4, 7], [2, 6]]"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    (rows_a, cols_a) = (len(a), len(a[0]))\n    (rows_b, cols_b) = (len(b), len(b[0]))\n    if cols_a != rows_b:\n        return -1\n    result = [[0 for _ in range(cols_b)] for _ in range(rows_a)]\n    for i in range(rows_a):\n        for j in range(cols_b):\n            for k in range(cols_a):\n                result[i][j] += a[i][k] * b[k][j]\n    return result"}
{"task_id": 10, "completion_id": 0, "solution": "def calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    import numpy as np\n    data = np.array(vectors)\n    means = np.mean(data, axis=1, keepdims=True)\n    centered_data = data - means\n    n = data.shape[1]\n    covariance_matrix = 1 / (n - 1) * np.dot(centered_data, centered_data.T)\n    return covariance_matrix.tolist()"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    N = len(b)\n    x = np.zeros(N, dtype=float)\n    for _ in range(n):\n        x_new = np.zeros(N, dtype=float)\n        for i in range(N):\n            s = sum((A[i, j] * x[j] for j in range(N) if j != i))\n            x_new[i] = (b[i] - s) / A[i, i]\n        x = x_new\n    x_rounded = np.round(x, 4)\n    return x_rounded.tolist()\nA = [[5, -2, 3], [-3, 9, 1], [2, -1, -7]]\nb = [-1, 2, 3]\nn = 2"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    if A.shape != (2, 2):\n        raise ValueError('Input matrix must be 2x2.')\n    U = np.eye(2)\n    V = np.eye(2)\n    max_iterations = 1000\n    tolerance = 1e-10\n    for _ in range(max_iterations):\n        ATA = np.dot(A.T, A)\n        (eigenvalues, eigenvectors) = np.linalg.eig(ATA)\n        idx = eigenvalues.argsort()[::-1]\n        eigenvalues = eigenvalues[idx]\n        eigenvectors = eigenvectors[:, idx]\n        V = eigenvectors\n        singular_values = np.sqrt(eigenvalues)\n        AV = np.dot(A, V)\n        (eigenvalues, eigenvectors) = np.linalg.eig(AV)\n        idx = eigenvalues.argsort()[::-1]\n        eigenvalues = eigenvalues[idx]\n        eigenvectors = eigenvectors[:, idx]\n        U = eigenvectors\n        if np.allclose(np.dot(U.T, U), np.eye(2), atol=tolerance) and np.allclose(np.dot(V.T, V), np.eye(2), atol=tolerance):\n            break\n    idx = singular_values.argsort()[::-1]\n    singular_values = singular_values[idx]\n    U = U[:, idx]\n    V = V[:, idx]\n    U = np.round(U, 4)\n    singular_values = np.round(singular_values, 4)\n    V = np.round(V, 4)\n    return (U, singular_values, V)\nA = np.array([[2, 1], [1, 2]])"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n\n    def determinant_3x3(minor: list[list[int | float]]) -> float:\n        (a, b, c) = minor[0]\n        (d, e, f) = minor[1]\n        (g, h, i) = minor[2]\n        return a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g)\n    det = 0\n    for c in range(4):\n        minor = [row[:c] + row[c + 1:] for row in matrix[1:]]\n        det += (-1) ** c * matrix[0][c] * determinant_3x3(minor)\n    return det\nmatrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    X_np = np.array(X)\n    y_np = np.array(y)\n    X_transpose = X_np.T\n    X_transpose_X = np.dot(X_transpose, X_np)\n    X_transpose_X_inv = np.linalg.inv(X_transpose_X)\n    X_transpose_y = np.dot(X_transpose, y_np)\n    theta = np.dot(X_transpose_X_inv, X_transpose_y)\n    theta_rounded = np.round(theta, 4)\n    return theta_rounded.tolist()"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> list:\n    theta = np.zeros(X.shape[1])\n    m = len(y)\n    for _ in range(iterations):\n        predictions = X.dot(theta)\n        errors = predictions - y\n        theta -= alpha / m * X.T.dot(errors)\n    return theta.round(4).tolist()\ny = np.array([1, 2, 3])\nalpha = 0.01\niterations = 1000"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0)\n    standardized_data = (data - mean) / std\n    standardized_data = np.round(standardized_data, 4).tolist()\n    min_val = np.min(data, axis=0)\n    max_val = np.max(data, axis=0)\n    min_max_data = (data - min_val) / (max_val - min_val)\n    min_max_data = np.round(min_max_data, 4).tolist()\n    return (standardized_data, min_max_data)\ndata = np.array([[1, 2], [3, 4], [5, 6]])"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n    points = np.array(points)\n    centroids = np.array(initial_centroids)\n    for _ in range(max_iterations):\n        distances = np.linalg.norm(points[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([points[labels == i].mean(axis=0) for i in range(k)])\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n    final_centroids = np.round(centroids, 4).tolist()\n    return final_centroids\npoints = [(1, 2), (1, 4), (1, 0), (10, 2), (10, 4), (10, 0)]\nk = 2\ninitial_centroids = [(1, 1), (10, 1)]\nmax_iterations = 10\nfinal_centroids = k_means_clustering(points, k, initial_centroids, max_iterations)"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    if k <= 0 or k > len(X):\n        raise ValueError('Number of folds must be between 1 and the number of samples')\n    if shuffle:\n        if random_seed is not None:\n            np.random.seed(random_seed)\n        indices = np.random.permutation(len(X))\n    else:\n        indices = np.arange(len(X))\n    fold_size = len(X) // k\n    remainder = len(X) % k\n    splits = []\n    start = 0\n    for i in range(k):\n        end = start + fold_size + (1 if i < remainder else 0)\n        test_indices = indices[start:end]\n        train_indices = np.concatenate((indices[:start], indices[end:]))\n        splits.append((train_indices.tolist(), test_indices.tolist()))\n        start = end\n    return splits\nX = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nk = 5\nshuffle = False"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    mean = np.mean(data, axis=0)\n    std_dev = np.std(data, axis=0)\n    standardized_data = (data - mean) / std_dev\n    covariance_matrix = np.cov(standardized_data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eig(covariance_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    principal_components = sorted_eigenvectors[:, :k]\n    return principal_components.round(4).tolist()\ndata = np.array([[1, 2], [3, 4], [5, 6]])\nk = 1"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n\n    def entropy(class_counts):\n        total = sum(class_counts.values())\n        return -sum((count / total * math.log2(count / total) for count in class_counts.values() if count > 0))\n\n    def information_gain(examples, attribute, target_attr):\n        total_entropy = entropy(Counter((example[target_attr] for example in examples)))\n        value_counts = Counter((example[attribute] for example in examples))\n        weighted_entropy = 0.0\n        for value in value_counts:\n            subset = [example for example in examples if example[attribute] == value]\n            subset_entropy = entropy(Counter((example[target_attr] for example in subset)))\n            weighted_entropy += value_counts[value] / len(examples) * subset_entropy\n        return total_entropy - weighted_entropy\n\n    def most_common_class(examples, target_attr):\n        return Counter((example[target_attr] for example in examples)).most_common(1)[0][0]\n\n    def build_tree(examples, attributes, target_attr):\n        class_counts = Counter((example[target_attr] for example in examples))\n        if len(class_counts) == 1:\n            return next(iter(class_counts))\n        if not attributes:\n            return most_common_class(examples, target_attr)\n        best_attribute = max(attributes, key=lambda attr: information_gain(examples, attr, target_attr))\n        tree = {best_attribute: {}}\n        remaining_attributes = [attr for attr in attributes if attr != best_attribute]\n        for value in set((example[best_attribute] for example in examples)):\n            subset = [example for example in examples if example[best_attribute] == value]\n            subtree = build_tree(subset, remaining_attributes, target_attr)\n            tree[best_attribute][value] = subtree\n        return tree\n    return build_tree(examples, attributes, target_attr)\nexamples = [{'Outlook': 'Sunny', 'Temperature': 'Hot', 'Humidity': 'High', 'Wind': 'Weak', 'PlayTennis': 'No'}, {'Outlook': 'Sunny', 'Temperature': 'Hot', 'Humidity': 'High', 'Wind': 'Strong', 'PlayTennis': 'No'}, {'Outlook': 'Overcast', 'Temperature': 'Hot', 'Humidity': 'High', 'Wind': 'Weak', 'PlayTennis': 'Yes'}, {'Outlook': 'Rain', 'Temperature': 'Mild', 'Humidity': 'High', 'Wind': 'Weak', 'PlayTennis': 'Yes'}]\nattributes = ['Outlook', 'Temperature', 'Humidity', 'Wind']\ntarget_attr = 'PlayTennis'"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n\n    def linear_kernel(x1, x2):\n        return np.dot(x1, x2)\n\n    def rbf_kernel(x1, x2, sigma=1.0):\n        return np.exp(-np.linalg.norm(x1 - x2) ** 2 / (2 * sigma ** 2))\n    (n_samples, n_features) = data.shape\n    alphas = np.zeros(n_samples)\n    bias = 0.0\n    for t in range(1, iterations + 1):\n        learning_rate = 1.0 / (lambda_val * t)\n        for i in range(n_samples):\n            if kernel == 'linear':\n                kernel_value = linear_kernel(data[i], data)\n            elif kernel == 'rbf':\n                kernel_value = np.array([rbf_kernel(data[i], data[j], sigma) for j in range(n_samples)])\n            else:\n                raise ValueError(\"Unsupported kernel type. Choose 'linear' or 'rbf'.\")\n            prediction = np.sum(alphas * labels * kernel_value) + bias\n            margin = labels[i] * prediction\n            if margin < 1:\n                alphas[i] += learning_rate * labels[i]\n                bias += learning_rate * labels[i]\n        alphas = np.maximum(0, 1 - learning_rate * lambda_val / (2 * n_samples)) * alphas\n    alphas = alphas.round(4).tolist()\n    bias = round(bias, 4)\n    return (alphas, bias)\ndata = np.array([[1, 2], [2, 3], [3, 1], [4, 1]])\nlabels = np.array([1, 1, -1, -1])"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    result = 1 / (1 + math.exp(-z))\n    return round(result, 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    exp_scores = [math.exp(score) for score in scores]\n    sum_exp_scores = sum(exp_scores)\n    softmax_values = [round(exp_score / sum_exp_scores, 4) for exp_score in exp_scores]\n    return softmax_values"}
{"task_id": 24, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n\n    def sigmoid(x):\n        return 1 / (1 + math.exp(-x))\n    predictions = []\n    for feature_vector in features:\n        weighted_sum = sum((w * x for (w, x) in zip(weights, feature_vector))) + bias\n        probability = sigmoid(weighted_sum)\n        predictions.append(probability)\n    mse = sum(((p - y) ** 2 for (p, y) in zip(predictions, labels))) / len(labels)\n    predictions_rounded = [round(p, 4) for p in predictions]\n    mse_rounded = round(mse, 4)\n    return (predictions_rounded, mse_rounded)\nfeatures = [[0.5, 1.0], [-1.5, -2.0], [2.0, 1.5]]\nlabels = [0, 1, 0]\nweights = [0.7, -0.4]\nbias = -0.1"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\ndef sigmoid_derivative(x):\n    return x * (1 - x)\ndef mean_squared_error(predictions, labels):\n    return np.mean((predictions - labels) ** 2)\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    features = np.array(features)\n    labels = np.array(labels)\n    weights = np.array(initial_weights)\n    bias = initial_bias\n    mse_values = []\n    for epoch in range(epochs):\n        weighted_sum = np.dot(features, weights) + bias\n        predictions = sigmoid(weighted_sum)\n        mse = mean_squared_error(predictions, labels)\n        mse_values.append(round(mse, 4))\n        error = predictions - labels\n        d_loss_d_pred = 2 * error / len(labels)\n        d_pred_d_z = sigmoid_derivative(predictions)\n        d_loss_d_z = d_loss_d_pred * d_pred_d_z\n        d_loss_d_weights = np.dot(features.T, d_loss_d_z)\n        d_loss_d_bias = np.sum(d_loss_d_z)\n        weights -= learning_rate * d_loss_d_weights\n        bias -= learning_rate * d_loss_d_bias\n    return (weights.tolist(), round(bias, 4), mse_values)"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data + other.data, (self, other), '+')\n\n        def _backward():\n            self.grad += out.grad\n            other.grad += out.grad\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data * other.data, (self, other), '*')\n\n        def _backward():\n            self.grad += other.data * out.grad\n            other.grad += self.data * out.grad\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')\n\n        def _backward():\n            self.grad += (out.data > 0) * out.grad\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1\n        for node in reversed(topo):\n            node._backward()"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    B_matrix = np.array(B)\n    C_matrix = np.array(C)\n    C_inv = np.linalg.inv(C_matrix)\n    P = C_inv @ B_matrix\n    P_rounded = np.round(P, 4)\n    P_list = P_rounded.tolist()\n    return P_list\nB = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\nC = [[1, 2.3, 3], [4.4, 25, 6], [7.4, 8, 9]]"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    A_transpose_A = np.dot(A.T, A)\n    (eigenvalues, eigenvectors) = np.linalg.eig(A_transpose_A)\n    singular_values = np.sqrt(eigenvalues)\n    V = eigenvectors\n    U = np.zeros((2, 2))\n    for i in range(2):\n        if singular_values[i] != 0:\n            U[:, i] = np.dot(A, V[:, i]) / singular_values[i]\n        else:\n            U[:, i] = np.zeros(2)\n    sort_indices = np.argsort(singular_values)[::-1]\n    singular_values = singular_values[sort_indices]\n    U = U[:, sort_indices]\n    V = V[:, sort_indices]\n    U = np.round(U, 4)\n    singular_values = np.round(singular_values, 4)\n    V = np.round(V, 4)\n    U_list = U.tolist()\n    singular_values_list = singular_values.tolist()\n    V_list = V.tolist()\n    return (U_list, singular_values_list, V_list)\nA = np.array([[-10, 8], [10, -1]])"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    if seed is not None:\n        np.random.seed(seed)\n    num_samples = X.shape[0]\n    indices = np.random.permutation(num_samples)\n    X_shuffled = X[indices]\n    y_shuffled = y[indices]\n    X_shuffled_list = X_shuffled.tolist()\n    y_shuffled_list = y_shuffled.tolist()\n    return (X_shuffled_list, y_shuffled_list)\nX = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\ny = np.array([1, 2, 3, 4])"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    \"\"\"\n    Yields batches of specified size from the dataset X and optionally y.\n    \n    Parameters:\n    - X: numpy array, the dataset to batch.\n    - y: numpy array, optional, the labels corresponding to the dataset.\n    - batch_size: int, the size of each batch.\n    \n    Yields:\n    - If y is provided, yields tuples of (X_batch, y_batch).\n    - If y is not provided, yields X_batch.\n    \"\"\"\n    num_samples = X.shape[0]\n    for start_idx in range(0, num_samples, batch_size):\n        end_idx = min(start_idx + batch_size, num_samples)\n        X_batch = X[start_idx:end_idx]\n        if y is not None:\n            y_batch = y[start_idx:end_idx]\n            yield [X_batch.tolist(), y_batch.tolist()]\n        else:\n            yield X_batch.tolist()\nX = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])\ny = np.array([1, 2, 3, 4, 5])\nbatch_size = 2"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    X = np.array(X)\n    meet_condition = X[:, feature_i] >= threshold\n    not_meet_condition = X[:, feature_i] < threshold\n    subset_meet = X[meet_condition]\n    subset_not_meet = X[not_meet_condition]\n    subset_meet_list = subset_meet.tolist()\n    subset_not_meet_list = subset_not_meet.tolist()\n    return [subset_meet_list, subset_not_meet_list]\nX = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])\nfeature_i = 0\nthreshold = 5"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    (n_samples, n_features) = X.shape\n    feature_combinations = combinations_with_replacement(range(n_features), degree)\n    polynomial_feature_list = []\n    for sample in X:\n        sample_features = [1]\n        for combination in feature_combinations:\n            feature_value = np.prod([sample[i] ** (j + 1) for (i, j) in enumerate(combination)])\n            sample_features.append(feature_value)\n        polynomial_feature_list.append(sample_features)\n    return np.array(polynomial_feature_list).tolist()\nX = np.array([[2, 3], [3, 4], [5, 6]])\ndegree = 2"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    np.random.seed(seed)\n    subsets = []\n    n_samples = X.shape[0]\n    subset_size = n_samples // 2\n    for _ in range(n_subsets):\n        if replacements:\n            indices = np.random.choice(n_samples, subset_size, replace=True)\n        else:\n            indices = np.random.choice(n_samples, subset_size, replace=False)\n        X_subset = X[indices]\n        y_subset = y[indices]\n        subsets.append((X_subset.tolist(), y_subset.tolist()))\n    return subsets\nX = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])\ny = np.array([1, 2, 3, 4, 5])\nn_subsets = 3\nreplacements = False"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    if n_col is None:\n        n_col = np.max(x) + 1\n    one_hot_encoded = np.zeros((x.size, n_col))\n    one_hot_encoded[np.arange(x.size), x] = 1\n    return one_hot_encoded.tolist()\nx = np.array([0, 1, 2, 1, 0])"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    diagonal_matrix = np.diag(x)\n    return diagonal_matrix.tolist()\nx = np.array([1, 2, 3])"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    correct_predictions = np.sum(y_true == y_pred)\n    total_predictions = len(y_true)\n    accuracy = correct_predictions / total_predictions\n    return round(accuracy, 4)\ny_true = np.array([1, 0, 1, 1, 0, 1])\ny_pred = np.array([1, 0, 0, 1, 0, 1])"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    if Y is None:\n        Y = X\n    mean_X = np.mean(X, axis=0)\n    mean_Y = np.mean(Y, axis=0)\n    centered_X = X - mean_X\n    centered_Y = Y - mean_Y\n    covariance_matrix = np.dot(centered_X.T, centered_Y) / (X.shape[0] - 1)\n    std_X = np.std(X, axis=0, ddof=1)\n    std_Y = np.std(Y, axis=0, ddof=1)\n    correlation_matrix = covariance_matrix / np.outer(std_X, std_Y)\n    correlation_matrix_rounded = np.round(correlation_matrix, 4)\n    correlation_matrix_list = correlation_matrix_rounded.tolist()\n    return correlation_matrix_list\nX = np.array([[1, 2], [3, 4], [5, 6]])"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_fit(X, y, n_clf):\n    (n_samples, n_features) = X.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    classifiers = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_clf = {}\n        for feature_index in range(n_features):\n            thresholds = np.unique(X[:, feature_index])\n            for threshold in thresholds:\n                polarity = 1\n                predictions = np.ones(n_samples)\n                predictions[X[:, feature_index] < threshold] = -1\n                error = np.sum(sample_weights[y != predictions])\n                if error > 0.5:\n                    error = 1 - error\n                    polarity = -1\n                if error < min_error:\n                    min_error = error\n                    best_clf = {'polarity': polarity, 'threshold': threshold, 'feature_index': feature_index}\n        alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n        best_clf['alpha'] = alpha\n        predictions = np.ones(n_samples)\n        feature_values = X[:, best_clf['feature_index']]\n        predictions[feature_values < best_clf['threshold']] = best_clf['polarity']\n        sample_weights *= np.exp(-alpha * y * predictions)\n        sample_weights /= np.sum(sample_weights)\n        classifiers.append(best_clf)\n    for clf in classifiers:\n        clf['alpha'] = round(clf['alpha'], 4)\n    return classifiers\nX = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\ny = np.array([1, 1, -1, -1])\nn_clf = 3"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list):\n    scores = np.array(scores)\n    max_score = np.max(scores)\n    log_softmax_values = scores - max_score - np.log(np.sum(np.exp(scores - max_score)))\n    log_softmax_values_rounded = np.round(log_softmax_values, 4)\n    return log_softmax_values_rounded.tolist()"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport copy\nimport math\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.W_opt = None\n        self.w0_opt = None\n\n    def initialize(self, optimizer):\n        limit = 1 / math.sqrt(self.input_shape[0])\n        self.W = np.random.uniform(-limit, limit, (self.input_shape[0], self.n_units))\n        self.w0 = np.zeros((1, self.n_units))\n        self.W_opt = copy.deepcopy(optimizer)\n        self.w0_opt = copy.deepcopy(optimizer)\n\n    def parameters(self):\n        return np.prod(self.W.shape) + np.prod(self.w0.shape)\n\n    def forward_pass(self, X, training=True):\n        self.layer_input = X\n        return np.dot(X, self.W) + self.w0\n\n    def backward_pass(self, accum_grad):\n        weight_grad = np.dot(self.layer_input.T, accum_grad)\n        input_grad = np.dot(accum_grad, self.W.T)\n        if self.trainable:\n            self.W = self.W_opt.update(self.W, weight_grad)\n            self.w0 = self.w0_opt.update(self.w0, accum_grad)\n        return input_grad\n\n    def output_shape(self):\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    padded_matrix = np.pad(input_matrix, padding, mode='constant', constant_values=0)\n    (input_height, input_width) = input_matrix.shape\n    (kernel_height, kernel_width) = kernel.shape\n    output_height = (input_height + 2 * padding - kernel_height) // stride + 1\n    output_width = (input_width + 2 * padding - kernel_width) // stride + 1\n    output_matrix = np.zeros((output_height, output_width))\n    for i in range(output_height):\n        for j in range(output_width):\n            region = padded_matrix[i * stride:i * stride + kernel_height, j * stride:j * stride + kernel_width]\n            output_matrix[i, j] = np.sum(region * kernel)\n    output_matrix = np.round(output_matrix, 4)\n    return output_matrix.tolist()\ninput_matrix = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])\nkernel = np.array([[1, 0], [-1, 1]])\npadding = 1\nstride = 2"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    \"\"\"\n    Implements the Rectified Linear Unit (ReLU) activation function.\n    \n    Parameters:\n    z (float): The input value to which the ReLU function is applied.\n    \n    Returns:\n    float: The output value after applying the ReLU function.\n    \"\"\"\n    return z if z > 0 else 0"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    y_pred = np.dot(X, w)\n    mse = np.mean((y_true - y_pred) ** 2)\n    regularization = alpha * np.sum(w ** 2)\n    ridge_loss_value = mse + regularization\n    return round(ridge_loss_value, 4)\nX = np.array([[1, 1], [2, 1], [3, 1], [4, 1]])\nw = np.array([0.2, 2])\ny_true = np.array([2, 3, 4, 5])\nalpha = 0.1"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float:\n    \"\"\"\n    Implements the Leaky Rectified Linear Unit (Leaky ReLU) activation function.\n\n    Parameters:\n    z (float): The input value to the activation function.\n    alpha (float): The slope for negative inputs, default is 0.01.\n\n    Returns:\n    float: The output value after applying the Leaky ReLU function.\n    \"\"\"\n    return z if z >= 0 else alpha * z"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    \"\"\"\n    Computes the linear kernel between two input vectors x1 and x2.\n    \n    Parameters:\n    x1 (np.array): The first input vector.\n    x2 (np.array): The second input vector.\n    \n    Returns:\n    float: The linear kernel (dot product) of x1 and x2.\n    \"\"\"\n    return np.dot(x1, x2)\nx1 = np.array([1, 2, 3])\nx2 = np.array([4, 5, 6])"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    TP = np.sum((y_true == 1) & (y_pred == 1))\n    FP = np.sum((y_true == 0) & (y_pred == 1))\n    if TP + FP == 0:\n        return 0.0\n    precision_value = TP / (TP + FP)\n    return precision_value\ny_true = np.array([1, 0, 1, 1, 0, 1])\ny_pred = np.array([1, 0, 1, 0, 0, 1])"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    X = np.array(X)\n    y = np.array(y)\n    weights = np.array(weights)\n    (n_samples, n_features) = X.shape\n    for _ in range(n_iterations):\n        if method == 'batch':\n            y_pred = np.dot(X, weights)\n            error = y_pred - y\n            gradient = 2 / n_samples * np.dot(X.T, error)\n            weights -= learning_rate * gradient\n        elif method == 'stochastic':\n            for i in range(n_samples):\n                xi = X[i:i + 1]\n                yi = y[i:i + 1]\n                y_pred = np.dot(xi, weights)\n                error = y_pred - yi\n                gradient = 2 * np.dot(xi.T, error)\n                weights -= learning_rate * gradient\n        elif method == 'mini-batch':\n            for i in range(0, n_samples, batch_size):\n                xi = X[i:i + batch_size]\n                yi = y[i:i + batch_size]\n                y_pred = np.dot(xi, weights)\n                error = y_pred - yi\n                gradient = 2 / batch_size * np.dot(xi.T, error)\n                weights -= learning_rate * gradient\n        else:\n            raise ValueError(\"Invalid method. Choose 'batch', 'stochastic', or 'mini-batch'.\")\n    return weights.round(4).tolist()\nX = np.array([[1, 1], [2, 1], [3, 1], [4, 1]])\ny = np.array([2, 3, 4, 5])\nweights = np.zeros(2)\nlearning_rate = 0.01\nn_iterations = 1000"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    matrix = np.array(matrix, dtype=float)\n    (rows, cols) = matrix.shape\n    r = 0\n    for c in range(cols):\n        if r >= rows:\n            break\n        pivot_row = r\n        while pivot_row < rows and matrix[pivot_row, c] == 0:\n            pivot_row += 1\n        if pivot_row == rows:\n            continue\n        matrix[[r, pivot_row]] = matrix[[pivot_row, r]]\n        pivot = matrix[r, c]\n        matrix[r] /= pivot\n        for i in range(rows):\n            if i != r:\n                factor = matrix[i, c]\n                matrix[i] -= factor * matrix[r]\n        r += 1\n    return matrix.tolist()\nmatrix = np.array([[1, 2, -1, -4], [2, 3, -1, -11], [-2, 0, -3, 22]])"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=1000):\n    x = x0.astype(float)\n    m = np.zeros_like(x)\n    v = np.zeros_like(x)\n    for t in range(1, num_iterations + 1):\n        g = grad(x)\n        m = beta1 * m + (1 - beta1) * g\n        v = beta2 * v + (1 - beta2) * g ** 2\n        m_hat = m / (1 - beta1 ** t)\n        v_hat = v / (1 - beta2 ** t)\n        x -= learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    return x.round(4).tolist()"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    (n_samples, n_features) = X.shape\n    weights = np.zeros(n_features)\n    bias = 0.0\n\n    def l1_penalty(weights):\n        return alpha * np.sum(np.abs(weights))\n\n    def l1_penalty_gradient(weights):\n        return alpha * np.sign(weights)\n    for _ in range(max_iter):\n        y_pred = np.dot(X, weights) + bias\n        error = y_pred - y\n        grad_weights = 1 / n_samples * np.dot(X.T, error)\n        grad_bias = 1 / n_samples * np.sum(error)\n        weights -= learning_rate * (grad_weights + l1_penalty_gradient(weights))\n        bias -= learning_rate * grad_bias\n        if np.linalg.norm(grad_weights) < tol:\n            break\n    return (np.round(weights, 4).tolist(), np.round(bias, 4))\nX = np.array([[0, 0], [1, 1], [2, 2]])\ny = np.array([0, 1, 2])\nalpha = 0.1\nlearning_rate = 0.01\nmax_iter = 1000"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    (m, n) = (len(source), len(target))\n    dp = np.zeros((m + 1, n + 1), dtype=int)\n    for i in range(m + 1):\n        dp[i][0] = i\n    for j in range(n + 1):\n        dp[0][j] = j\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if source[i - 1] == target[j - 1]:\n                cost = 0\n            else:\n                cost = 1\n            dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + cost)\n            if i > 1 and j > 1 and (source[i - 1] == target[j - 2]) and (source[i - 2] == target[j - 1]):\n                dp[i][j] = min(dp[i][j], dp[i - 2][j - 2] + 1)\n    return dp[m][n]"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    TP = np.sum((y_true == 1) & (y_pred == 1))\n    FN = np.sum((y_true == 1) & (y_pred == 0))\n    if TP + FN == 0:\n        return 0.0\n    else:\n        recall_value = TP / (TP + FN)\n        return round(recall_value, 3)"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    d_k = K.shape[-1]\n    scores = np.dot(Q, K.T) / np.sqrt(d_k)\n    attention_weights = np.exp(scores) / np.sum(np.exp(scores), axis=1, keepdims=True)\n    output = np.dot(attention_weights, V)\n    output_rounded = np.round(output, 4)\n    return output_rounded.tolist()\nX = np.array([[1, 0], [0, 1]])\nW_q = np.array([[1, 0], [0, 1]])\nW_k = np.array([[1, 0], [0, 1]])\nW_v = np.array([[1, 2], [3, 4]])"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    input_sequence = np.array(input_sequence)\n    initial_hidden_state = np.array(initial_hidden_state)\n    Wx = np.array(Wx)\n    Wh = np.array(Wh)\n    b = np.array(b)\n    h = initial_hidden_state\n    for x in input_sequence:\n        h = np.tanh(np.dot(Wx, x) + np.dot(Wh, h) + b)\n    return h.round(4).tolist()"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    translation_matrix = np.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])\n    homogeneous_points = np.array([[x, y, 1] for (x, y) in points]).T\n    translated_homogeneous_points = translation_matrix @ homogeneous_points\n    translated_points = translated_homogeneous_points[:2, :].T\n    return translated_points.tolist()\npoints = [[0, 0], [1, 0], [0.5, 1]]\ntx = 2\nty = 3\ntranslated_points = translate_object(points, tx, ty)"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    Calculate the Kullback-Leibler (KL) divergence between two normal distributions.\n    \n    Parameters:\n    mu_p (float): Mean of the first normal distribution P.\n    sigma_p (float): Standard deviation of the first normal distribution P.\n    mu_q (float): Mean of the second normal distribution Q.\n    sigma_q (float): Standard deviation of the second normal distribution Q.\n    \n    Returns:\n    float: The KL divergence from Q to P.\n    \"\"\"\n    kl_div = np.log(sigma_q / sigma_p) + (sigma_p ** 2 + (mu_p - mu_q) ** 2) / (2 * sigma_q ** 2) - 0.5\n    return kl_div"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    N = len(b)\n    if x_ini is None:\n        x = np.zeros(N, dtype=float)\n    else:\n        x = x_ini.copy()\n    for _ in range(n):\n        x_new = x.copy()\n        for i in range(N):\n            s1 = np.dot(A[i, :i], x_new[:i])\n            s2 = np.dot(A[i, i + 1:], x[i + 1:])\n            x_new[i] = (b[i] - s1 - s2) / A[i, i]\n        x = x_new\n    return x.round(4).tolist()\nA = np.array([[4, 1, 2], [3, 5, 1], [1, 1, 3]], dtype=float)\nb = np.array([4, 7, 3], dtype=float)\nn = 100"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    n = len(b)\n    Ab = np.hstack([A, b.reshape(-1, 1)])\n    for i in range(n):\n        max_row = np.argmax(np.abs(Ab[i:, i])) + i\n        Ab[[i, max_row]] = Ab[[max_row, i]]\n        for j in range(i + 1, n):\n            factor = Ab[j, i] / Ab[i, i]\n            Ab[j, i:] -= factor * Ab[i, i:]\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        x[i] = (Ab[i, -1] - np.dot(Ab[i, i + 1:n], x[i + 1:n])) / Ab[i, i]\n    x = np.round(x, 4)\n    return x.tolist()\nA = np.array([[2, 8, 4], [2, 5, 1], [4, 10, -1]], dtype=float)\nb = np.array([2, 5, 1], dtype=float)"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \"\"\"\n        hidden_states = []\n        h = initial_hidden_state\n        c = initial_cell_state\n        for t in range(x.shape[0]):\n            x_t = x[t].reshape(-1, 1)\n            combined = np.vstack((x_t, h))\n            f_t = self.sigmoid(np.dot(self.Wf, combined) + self.bf)\n            i_t = self.sigmoid(np.dot(self.Wi, combined) + self.bi)\n            c_tilde_t = np.tanh(np.dot(self.Wc, combined) + self.bc)\n            o_t = self.sigmoid(np.dot(self.Wo, combined) + self.bo)\n            c = f_t * c + i_t * c_tilde_t\n            h = o_t * np.tanh(c)\n            hidden_states.append(h.copy())\n        hidden_states_rounded = [hs.round(4).tolist() for hs in hidden_states]\n        final_hidden_state_rounded = h.round(4).tolist()\n        final_cell_state_rounded = c.round(4).tolist()\n        return (hidden_states_rounded, final_hidden_state_rounded, final_cell_state_rounded)\n\n    def sigmoid(self, x):\n        return 1 / (1 + np.exp(-x))\nx = np.array([[1.0], [2.0], [3.0]])\ninitial_hidden_state = np.zeros((1, 1))\ninitial_cell_state = np.zeros((1, 1))"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict\ndef compute_tf_idf(corpus, query):\n    if not corpus:\n        raise ValueError('Corpus is empty. Please provide a non-empty list of documents.')\n    df = defaultdict(int)\n    num_docs = len(corpus)\n    for doc in corpus:\n        unique_terms = set(doc)\n        for term in unique_terms:\n            df[term] += 1\n    tf_idf_scores = []\n    for doc in corpus:\n        doc_tf_idf = []\n        doc_length = len(doc)\n        if doc_length == 0:\n            doc_tf_idf.extend([0.0] * len(query))\n            tf_idf_scores.append(doc_tf_idf)\n            continue\n        tf = defaultdict(int)\n        for term in doc:\n            tf[term] += 1\n        for term in query:\n            tf_value = tf[term] / doc_length\n            idf_value = np.log((num_docs + 1) / (df[term] + 1))\n            tf_idf = tf_value * idf_value\n            doc_tf_idf.append(tf_idf)\n        tf_idf_scores.append(doc_tf_idf)\n    tf_idf_scores = np.array(tf_idf_scores).round(5).tolist()\n    return tf_idf_scores\ncorpus = [['the', 'cat', 'sat', 'on', 'the', 'mat'], ['the', 'dog', 'chased', 'the', 'cat'], ['the', 'bird', 'flew', 'over', 'the', 'mat']]\nquery = ['cat']"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fp = np.sum((y_true == 0) & (y_pred == 1))\n    fn = np.sum((y_true == 1) & (y_pred == 0))\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0\n    if precision + recall == 0:\n        f_score_value = 0\n    else:\n        f_score_value = (1 + beta ** 2) * (precision * recall) / (beta ** 2 * precision + recall)\n    return round(f_score_value, 3)\ny_true = np.array([1, 0, 1, 1, 0, 1])\ny_pred = np.array([1, 0, 1, 0, 0, 1])\nbeta = 1"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, input_sequence):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n        \"\"\"\n        hidden_states = []\n        outputs = []\n        h_prev = np.zeros((self.hidden_size, 1))\n        for x in input_sequence:\n            x = x.reshape(-1, 1)\n            h = np.tanh(np.dot(self.W_xh, x) + np.dot(self.W_hh, h_prev) + self.b_h)\n            y = np.dot(self.W_hy, h) + self.b_y\n            hidden_states.append(h)\n            outputs.append(y)\n            h_prev = h\n        return (np.array(outputs), input_sequence, np.array(hidden_states))\n\n    def backward(self, input_sequence, expected_output, outputs, last_inputs, last_hiddens, learning_rate):\n        \"\"\"\n        Backpropagation through time (BPTT) to adjust the weights based on the loss.\n        \"\"\"\n        dW_xh = np.zeros_like(self.W_xh)\n        dW_hh = np.zeros_like(self.W_hh)\n        dW_hy = np.zeros_like(self.W_hy)\n        db_h = np.zeros_like(self.b_h)\n        db_y = np.zeros_like(self.b_y)\n        dh_next = np.zeros_like(last_hiddens[0])\n        for t in reversed(range(len(input_sequence))):\n            dy = outputs[t] - expected_output[t].reshape(-1, 1)\n            dW_hy += np.dot(dy, last_hiddens[t].T)\n            db_y += dy\n            dh = np.dot(self.W_hy.T, dy) + dh_next\n            dh_raw = (1 - last_hiddens[t] * last_hiddens[t]) * dh\n            db_h += dh_raw\n            dW_xh += np.dot(dh_raw, last_inputs[t].T)\n            dW_hh += np.dot(dh_raw, last_hiddens[t - 1].T) if t > 0 else np.zeros_like(dW_hh)\n            dh_next = np.dot(self.W_hh.T, dh_raw)\n        self.W_xh -= learning_rate * dW_xh\n        self.W_hh -= learning_rate * dW_hh\n        self.W_hy -= learning_rate * dW_hy\n        self.b_h -= learning_rate * db_h\n        self.b_y -= learning_rate * db_y\ninput_sequence = np.array([[1.0], [2.0], [3.0], [4.0]])"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    if x0 is None:\n        x = np.zeros_like(b)\n    else:\n        x = x0\n    r = b - A @ x\n    p = r\n    rsold = r.T @ r\n    for i in range(n):\n        Ap = A @ p\n        alpha = rsold / (p.T @ Ap)\n        x = x + alpha * p\n        r = r - alpha * Ap\n        rsnew = r.T @ r\n        if np.sqrt(rsnew) < tol:\n            break\n        p = r + rsnew / rsold * p\n        rsold = rsnew\n    return x.tolist()\nA = np.array([[4, 1], [1, 3]])\nb = np.array([1, 2])"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    if not y:\n        return 0.0\n    class_counts = np.bincount(y)\n    total_samples = len(y)\n    probabilities = class_counts / total_samples\n    gini = 1 - np.sum(probabilities ** 2)\n    return round(gini, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    values = []\n    column_indices = []\n    row_pointers = [0]\n    for row in dense_matrix:\n        current_row_non_zeros = 0\n        for (col_index, value) in enumerate(row):\n            if value != 0:\n                values.append(value)\n                column_indices.append(col_index)\n                current_row_non_zeros += 1\n        row_pointers.append(row_pointers[-1] + current_row_non_zeros)\n    return (values, column_indices, row_pointers)\ndense_matrix = [[1, 0, 0, 0], [0, 2, 0, 0], [3, 0, 4, 0], [1, 0, 0, 5]]"}
{"task_id": 66, "completion_id": 0, "solution": "def orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    import numpy as np\n    v = np.array(v)\n    L = np.array(L)\n    dot_product = np.dot(v, L)\n    dot_product_L_L = np.dot(L, L)\n    scalar_projection = dot_product / dot_product_L_L\n    projection = scalar_projection * L\n    return [round(coord, 3) for coord in projection]"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    if not dense_matrix or not dense_matrix[0]:\n        return ([], [], [0])\n    num_rows = len(dense_matrix)\n    num_cols = len(dense_matrix[0])\n    values = []\n    row_indices = []\n    column_pointer = [0] * (num_cols + 1)\n    for col in range(num_cols):\n        for row in range(num_rows):\n            if dense_matrix[row][col] != 0:\n                values.append(dense_matrix[row][col])\n                row_indices.append(row)\n        column_pointer[col + 1] = len(values)\n    return (values, row_indices, column_pointer)\ndense_matrix = [[0, 0, 3, 0], [1, 0, 0, 4], [0, 2, 0, 0]]"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    A = np.array(A, dtype=float)\n    (_, pivots) = np.linalg.qr(A.T, mode='r')\n    rank = np.linalg.matrix_rank(A)\n    pivots = pivots[:rank]\n    basis_vectors = A[:, pivots]\n    basis_vectors_rounded = np.round(basis_vectors, 8).tolist()\n    return basis_vectors_rounded\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    y_mean = np.mean(y_true)\n    tss = np.sum((y_true - y_mean) ** 2)\n    rss = np.sum((y_true - y_pred) ** 2)\n    r2 = 1 - rss / tss\n    return round(r2, 3)\ny_true = np.array([1, 2, 3, 4, 5])\ny_pred = np.array([1.1, 2.1, 2.9, 4.2, 4.8])"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    if not img or not img[0]:\n        return -1\n    total_brightness = 0\n    total_pixels = 0\n    for row in img:\n        if len(row) != len(img[0]):\n            return -1\n        for pixel in row:\n            if not 0 <= pixel <= 255:\n                return -1\n            total_brightness += pixel\n            total_pixels += 1\n    average_brightness = round(total_brightness / total_pixels, 2)\n    return average_brightness"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    if not isinstance(y_true, np.ndarray) or not isinstance(y_pred, np.ndarray):\n        raise ValueError('Both y_true and y_pred must be numpy arrays.')\n    if y_true.size == 0 or y_pred.size == 0:\n        raise ValueError('Input arrays must not be empty.')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Input arrays must have the same shape.')\n    n = y_true.size\n    residuals = y_true - y_pred\n    mse = np.sum(residuals ** 2) / n\n    rmse_value = np.sqrt(mse)\n    return round(rmse_value, 3)\ny_true = np.array([3, -0.5, 2, 7])\ny_pred = np.array([2.5, 0.0, 2, 8])"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    intersection = np.sum(np.logical_and(y_true, y_pred))\n    union = np.sum(np.logical_or(y_true, y_pred))\n    if union == 0:\n        return 1.0\n    jaccard = intersection / union\n    return round(jaccard, 3)\ny_true = np.array([1, 0, 1, 1, 0, 1])\ny_pred = np.array([1, 0, 1, 0, 0, 1])"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    intersection = np.sum(y_true * y_pred)\n    sum_true = np.sum(y_true)\n    sum_pred = np.sum(y_pred)\n    if sum_true == 0 and sum_pred == 0:\n        return 1.0\n    elif sum_true == 0 or sum_pred == 0:\n        return 0.0\n    else:\n        dice_score_value = 2 * intersection / (sum_true + sum_pred)\n        return round(dice_score_value, 3)\ny_true = np.array([1, 1, 0, 1, 0, 1])\ny_pred = np.array([1, 1, 0, 0, 0, 1])"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef create_row_hv(row, dim, random_seeds):\n\n    def generate_hv(seed, dim):\n        np.random.seed(seed)\n        return 2 * (np.random.rand(dim) > 0.5).astype(int) - 1\n\n    def bind_hv(hv1, hv2):\n        return hv1 * hv2\n    composite_hv = np.ones(dim)\n    for (feature, value) in row.items():\n        feature_seed = random_seeds.get(feature, None)\n        if feature_seed is None:\n            raise ValueError(f\"Seed for feature '{feature}' not provided in random_seeds.\")\n        feature_hv = generate_hv(feature_seed, dim)\n        value_seed = hash(value) ^ feature_seed\n        value_hv = generate_hv(value_seed, dim)\n        feature_value_hv = bind_hv(feature_hv, value_hv)\n        composite_hv = bind_hv(composite_hv, feature_value_hv)\n    return composite_hv.tolist()\ndim = 5"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    tp = 0\n    fn = 0\n    fp = 0\n    tn = 0\n    for (y_true, y_pred) in data:\n        if y_true == 1 and y_pred == 1:\n            tp += 1\n        elif y_true == 1 and y_pred == 0:\n            fn += 1\n        elif y_true == 0 and y_pred == 1:\n            fp += 1\n        elif y_true == 0 and y_pred == 0:\n            tn += 1\n    return [[tp, fp], [fn, tn]]\ndata = [[1, 1], [1, 0], [0, 1], [0, 0], [0, 1]]"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    if v1.shape != v2.shape:\n        raise ValueError('Input vectors must have the same shape.')\n    if v1.size == 0 or v2.size == 0:\n        raise ValueError('Input vectors cannot be empty.')\n    dot_product = np.dot(v1, v2)\n    magnitude_v1 = np.linalg.norm(v1)\n    magnitude_v2 = np.linalg.norm(v2)\n    if magnitude_v1 == 0 or magnitude_v2 == 0:\n        raise ValueError('Input vectors cannot have zero magnitude.')\n    cos_sim = dot_product / (magnitude_v1 * magnitude_v2)\n    return round(cos_sim, 3)\nv1 = np.array([1, 2, 3])\nv2 = np.array([2, 4, 6])"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import List, Tuple\ndef performance_metrics(actual: List[int], predicted: List[int]) -> Tuple[List[List[int]], float, float, float, float]:\n    if len(actual) != len(predicted):\n        raise ValueError(\"The 'actual' and 'predicted' lists must have the same length.\")\n    if not all((x in [0, 1] for x in actual + predicted)):\n        raise ValueError(\"All elements in 'actual' and 'predicted' lists must be either 0 or 1.\")\n    true_positives = 0\n    true_negatives = 0\n    false_positives = 0\n    false_negatives = 0\n    for (a, p) in zip(actual, predicted):\n        if a == 1 and p == 1:\n            true_positives += 1\n        elif a == 0 and p == 0:\n            true_negatives += 1\n        elif a == 0 and p == 1:\n            false_positives += 1\n        elif a == 1 and p == 0:\n            false_negatives += 1\n    confusion_matrix = [[true_positives, false_negatives], [false_positives, true_negatives]]\n    accuracy = (true_positives + true_negatives) / (true_positives + true_negatives + false_positives + false_negatives)\n    if true_positives + false_positives == 0 or true_positives + false_negatives == 0:\n        f1_score = 0.0\n    else:\n        precision = true_positives / (true_positives + false_positives)\n        recall = true_positives / (true_positives + false_negatives)\n        f1_score = 2 * (precision * recall) / (precision + recall)\n    if true_negatives + false_positives == 0:\n        specificity = 0.0\n    else:\n        specificity = true_negatives / (true_negatives + false_positives)\n    if true_negatives + false_negatives == 0:\n        negative_predictive_value = 0.0\n    else:\n        negative_predictive_value = true_negatives / (true_negatives + false_negatives)\n    return (confusion_matrix, round(accuracy, 3), round(f1_score, 3), round(specificity, 3), round(negative_predictive_value, 3))\nactual = [1, 0, 1, 0, 1]\npredicted = [1, 0, 0, 1, 1]"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\nfrom scipy import stats\ndef descriptive_statistics(data):\n    data = np.array(data)\n    mean = np.mean(data)\n    median = np.median(data)\n    mode_result = stats.mode(data)\n    mode = mode_result.mode[0] if mode_result.count[0] > 1 else data[0]\n    variance = np.var(data, ddof=0)\n    standard_deviation = np.std(data, ddof=0)\n    percentiles = np.percentile(data, [25, 50, 75])\n    percentile_25 = percentiles[0]\n    percentile_50 = percentiles[1]\n    percentile_75 = percentiles[2]\n    iqr = percentile_75 - percentile_25\n    result = {'mean': round(mean, 4), 'median': round(median, 4), 'mode': mode, 'variance': round(variance, 4), 'standard_deviation': round(standard_deviation, 4), '25th_percentile': round(percentile_25, 4), '50th_percentile': round(percentile_50, 4), '75th_percentile': round(percentile_75, 4), 'interquartile_range': round(iqr, 4)}\n    return result\ndata = [10, 20, 30, 40, 50]"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials\n    \"\"\"\n    binom_coeff = math.comb(n, k)\n    probability = binom_coeff * p ** k * (1 - p) ** (n - k)\n    return round(probability, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    :return: The PDF value rounded to 5 decimal places.\n    \"\"\"\n    coefficient = 1 / (std_dev * math.sqrt(2 * math.pi))\n    exponent = -(x - mean) ** 2 / (2 * std_dev ** 2)\n    pdf_value = coefficient * math.exp(exponent)\n    return round(pdf_value, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    :return: Probability of observing exactly k events, rounded to 5 decimal places\n    \"\"\"\n    if k < 0 or lam <= 0:\n        raise ValueError('k must be a non-negative integer and lam must be a positive number.')\n    probability = math.exp(-lam) * lam ** k / math.factorial(k)\n    return round(probability, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        int: The contrast of the image, calculated as the difference between the maximum and minimum pixel values.\n    \"\"\"\n    if img.ndim != 2:\n        raise ValueError('Input image must be a 2D array.')\n    max_pixel = np.max(img)\n    min_pixel = np.min(img)\n    contrast = max_pixel - min_pixel\n    return contrast"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    Returns:\n        int or float: The dot product of the two vectors.\n    \"\"\"\n    if vec1.ndim != 1 or vec2.ndim != 1:\n        raise ValueError('Both inputs must be 1D arrays.')\n    if vec1.shape != vec2.shape:\n        raise ValueError('Both vectors must have the same length.')\n    dot_product = np.dot(vec1, vec2)\n    return dot_product\nvec1 = np.array([1, 2, 3])\nvec2 = np.array([4, 5, 6])"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef phi_transform(data: list[float], degree: int) -> list[list[float]]:\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n    \n    Returns:\n        list[list[float]]: A nested list where each inner list contains the polynomial features of the corresponding data point.\n    \"\"\"\n    if degree < 0:\n        return []\n    transformed_data = []\n    for point in data:\n        features = [point ** i for i in range(degree + 1)]\n        features = [round(feature, 8) for feature in features]\n        transformed_data.append(features)\n    return transformed_data"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    if position == 0 or d_model <= 0:\n        return -1\n    pe = np.zeros((position, d_model), dtype=np.float16)\n    for pos in range(position):\n        for i in range(0, d_model, 2):\n            if i < d_model:\n                pe[pos, i] = np.sin(pos / 10000 ** (2 * i / d_model))\n            if i + 1 < d_model:\n                pe[pos, i + 1] = np.cos(pos / 10000 ** (2 * (i + 1) / d_model))\n    return pe.tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    elif training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    else:\n        return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    parameter = np.array(parameter)\n    grad = np.array(grad)\n    m = np.array(m)\n    v = np.array(v)\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    parameter = parameter - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    updated_parameter = parameter.round(5).tolist()\n    updated_m = m.round(5).tolist()\n    updated_v = v.round(5).tolist()\n    return (updated_parameter, updated_m, updated_v)\nparameter = 1.0\ngrad = 0.1\nm = 0.0\nv = 0.0\nt = 1"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef layer_norm(x, g, b, eps=1e-05):\n    mean = np.mean(x, axis=-1, keepdims=True)\n    variance = np.var(x, axis=-1, keepdims=True)\n    x = (x - mean) / np.sqrt(variance + eps)\n    return g * x + b\ndef multi_head_attention(q, k, v, n_head):\n    (batch_size, seq_len, d_model) = q.shape\n    d_k = d_model // n_head\n    q = q.reshape(batch_size, seq_len, n_head, d_k).transpose(0, 2, 1, 3)\n    k = k.reshape(batch_size, seq_len, n_head, d_k).transpose(0, 2, 1, 3)\n    v = v.reshape(batch_size, seq_len, n_head, d_k).transpose(0, 2, 1, 3)\n    scores = np.matmul(q, k.transpose(0, 1, 3, 2)) / np.sqrt(d_k)\n    attention_weights = np.exp(scores - np.max(scores, axis=-1, keepdims=True))\n    attention_weights /= np.sum(attention_weights, axis=-1, keepdims=True)\n    output = np.matmul(attention_weights, v)\n    output = output.transpose(0, 2, 1, 3).reshape(batch_size, seq_len, d_model)\n    return output\ndef feed_forward(x, d_model, d_ff):\n    w1 = np.random.rand(d_model, d_ff)\n    b1 = np.random.rand(d_ff)\n    w2 = np.random.rand(d_ff, d_model)\n    b2 = np.random.rand(d_model)\n    return np.matmul(np.maximum(0, np.matmul(x, w1) + b1), w2) + b2\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    n_ctx = hparams['n_ctx']\n    n_head = hparams['n_head']\n    wte = params['wte']\n    wpe = params['wpe']\n    ln_f_g = params['ln_f']['g']\n    ln_f_b = params['ln_f']['b']\n    input_ids = encoder.encode(prompt)\n    input_ids = input_ids[-n_ctx:]\n    input_ids = np.array(input_ids).reshape(1, -1)\n    for _ in range(n_tokens_to_generate):\n        position_ids = np.arange(input_ids.shape[1]).reshape(1, -1)\n        token_embeddings = wte[input_ids]\n        position_embeddings = wpe[position_ids]\n        x = token_embeddings + position_embeddings\n        attn_output = multi_head_attention(x, x, x, n_head)\n        x = layer_norm(x + attn_output, ln_f_g, ln_f_b)\n        ff_output = feed_forward(x, x.shape[-1], 20)\n        x = layer_norm(x + ff_output, ln_f_g, ln_f_b)\n        logits = np.matmul(x[:, -1, :], wte.T)\n        next_token_id = np.argmax(logits, axis=-1)\n        input_ids = np.concatenate([input_ids, next_token_id.reshape(1, 1)], axis=1)\n        if input_ids.shape[1] > n_ctx:\n            input_ids = input_ids[:, -n_ctx:]\n    generated_text = encoder.decode(input_ids[0])\n    return generated_text"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        exp_values = np.exp(values - np.max(values))\n        return exp_values / np.sum(exp_values)\n    crystal_values = np.array(crystal_values)\n    weighted_patterns = np.zeros(n)\n    for i in range(n):\n        attention_scores = np.dot(crystal_values, crystal_values[i])\n        attention_probs = softmax(attention_scores)\n        weighted_pattern = np.sum(attention_probs * crystal_values)\n        weighted_patterns[i] = weighted_pattern\n    return [round(wp, 4) for wp in weighted_patterns]\nn = 5\ncrystal_values = [4, 2, 7, 1, 9]"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    doc_freq = Counter()\n    for doc in corpus:\n        unique_terms = set(doc)\n        for term in unique_terms:\n            doc_freq[term] += 1\n    num_docs = len(corpus)\n    idf = {}\n    for (term, freq) in doc_freq.items():\n        idf[term] = np.log((num_docs - freq + 0.5) / (freq + 0.5))\n    avg_doc_len = np.mean([len(doc) for doc in corpus])\n    scores = []\n    for doc in corpus:\n        doc_len = len(doc)\n        doc_score = 0\n        for term in query:\n            if term in doc:\n                f_q_d = doc.count(term)\n                term_idf = idf.get(term, 0)\n                doc_score += term_idf * (f_q_d * (k1 + 1)) / (f_q_d + k1 * (1 - b + b * (doc_len / avg_doc_len)))\n        scores.append(round(doc_score, 3))\n    return scores\ncorpus = [['the', 'cat', 'sat'], ['the', 'dog', 'ran'], ['the', 'bird', 'flew']]\nquery = ['the', 'cat']"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    true_positives = 0\n    false_positives = 0\n    false_negatives = 0\n    for (true, pred) in zip(y_true, y_pred):\n        if true == 1 and pred == 1:\n            true_positives += 1\n        elif true == 0 and pred == 1:\n            false_positives += 1\n        elif true == 1 and pred == 0:\n            false_negatives += 1\n    precision = true_positives / (true_positives + false_positives) if true_positives + false_positives > 0 else 0\n    recall = true_positives / (true_positives + false_negatives) if true_positives + false_negatives > 0 else 0\n    f1_score = 2 * (precision * recall) / (precision + recall) if precision + recall > 0 else 0\n    return round(f1_score, 3)"}
{"task_id": 92, "completion_id": 0, "solution": "import math\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\nPI = 3.14159\ndef power_grid_forecast(consumption_data):\n    detrended_data = []\n    for (i, consumption) in enumerate(consumption_data, start=1):\n        fluctuation = 10 * math.sin(2 * PI * i / 10)\n        detrended_data.append(consumption - fluctuation)\n    days = np.array(range(1, 11)).reshape(-1, 1)\n    model = LinearRegression()\n    model.fit(days, detrended_data)\n    day_15_base = model.predict(np.array([[15]]))[0]\n    day_15_fluctuation = 10 * math.sin(2 * PI * 15 / 10)\n    day_15_consumption = day_15_base + day_15_fluctuation\n    final_consumption = math.ceil(day_15_consumption * 1.05)\n    return final_consumption"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    absolute_errors = np.abs(y_true - y_pred)\n    mean_absolute_error = np.mean(absolute_errors)\n    return round(mean_absolute_error, 3)\ny_true = np.array([3, -0.5, 2, 7])\ny_pred = np.array([2.5, 0.0, 2, 8])"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray) -> tuple:\n    Q = X @ W_q\n    K = X @ W_k\n    V = X @ W_v\n    return (Q, K, V)\ndef self_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray) -> np.ndarray:\n    d_k = K.shape[-1]\n    scores = Q @ K.T / np.sqrt(d_k)\n    attention_weights = np.softmax(scores, axis=-1)\n    output = attention_weights @ V\n    return output\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    (m, n) = X.shape\n    head_dim = n // n_heads\n    W_q_heads = np.array_split(W_q, n_heads, axis=1)\n    W_k_heads = np.array_split(W_k, n_heads, axis=1)\n    W_v_heads = np.array_split(W_v, n_heads, axis=1)\n    head_outputs = []\n    for i in range(n_heads):\n        (Q, K, V) = compute_qkv(X, W_q_heads[i], W_k_heads[i], W_v_heads[i])\n        head_output = self_attention(Q, K, V)\n        head_outputs.append(head_output)\n    concatenated_output = np.concatenate(head_outputs, axis=-1)\n    result = concatenated_output.reshape(m, n).round(4).tolist()\n    return result\nn_heads = 2\nX = np.random.permutation(X.flatten()).reshape(m, n)\nW_q = np.random.randint(0, 4, size=(n, n))\nW_k = np.random.randint(0, 5, size=(n, n))\nW_v = np.random.randint(0, 6, size=(n, n))\noutput = multi_head_attention(X, W_q, W_k, W_v, n_heads)"}
{"task_id": 95, "completion_id": 0, "solution": "def phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError('Both lists must have the same length.')\n    a = sum((xi == 1 and yi == 1 for (xi, yi) in zip(x, y)))\n    b = sum((xi == 1 and yi == 0 for (xi, yi) in zip(x, y)))\n    c = sum((xi == 0 and yi == 1 for (xi, yi) in zip(x, y)))\n    d = sum((xi == 0 and yi == 0 for (xi, yi) in zip(x, y)))\n    n = len(x)\n    numerator = a * d - b * c\n    denominator = ((a + b) * (a + c) * (b + d) * (c + d)) ** 0.5\n    if denominator == 0:\n        return 0.0\n    phi = numerator / denominator\n    return round(phi, 4)"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    return max(0, min(1, 0.2 * x + 0.5))"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value\n    \"\"\"\n    if x >= 0:\n        return round(x, 4)\n    else:\n        return round(alpha * (math.exp(x) - 1), 4)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    if x >= 0:\n        return x\n    else:\n        return alpha * x"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x)\n    \"\"\"\n    if x > 20:\n        return x\n    else:\n        return round(math.log(1 + math.exp(x)), 4)"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input, rounded to 4 decimal places\n    \"\"\"\n    result = x / (1 + abs(x))\n    return round(result, 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    rhos = np.array(rhos)\n    A = np.array(A)\n    pi_theta_old = np.array(pi_theta_old)\n    pi_theta_ref = np.array(pi_theta_ref)\n    clipped_rhos = np.clip(rhos, 1 - epsilon, 1 + epsilon)\n    min_terms = np.minimum(rhos * A, clipped_rhos * A)\n    J_pi = np.mean(min_terms)\n    kl_divergence = np.mean(pi_theta_old * np.log(pi_theta_old / pi_theta_ref))\n    grpo_obj = J_pi - beta * kl_divergence\n    return round(grpo_obj, 6)\nrhos = [1.2, 0.8, 1.1]\nA = [1.0, 1.0, 1.0]\npi_theta_old = [0.9, 1.1, 1.0]\npi_theta_ref = [1.0, 0.5, 1.5]\nepsilon = 0.2\nbeta = 0.01"}
{"task_id": 102, "completion_id": 0, "solution": "import math\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value rounded to the nearest 4th decimal\n    \"\"\"\n    sigmoid = 1 / (1 + math.exp(-x))\n    swish_value = x * sigmoid\n    return round(swish_value, 4)"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x >= 0:\n        return round(scale * x, 4)\n    else:\n        return round(scale * alpha * (math.exp(x) - 1), 4)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00d7 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    z = np.dot(X, weights) + bias\n    probabilities = 1 / (1 + np.exp(-z))\n    predictions = (probabilities >= 0.5).astype(int)\n    return predictions.tolist()"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    n_classes = len(np.unique(y))\n    B = np.random.randn(n_features + 1, n_classes)\n    X = np.c_[np.ones(n_samples), X]\n    losses = []\n    y_one_hot = np.eye(n_classes)[y]\n    for _ in range(iterations):\n        scores = np.dot(X, B)\n        exp_scores = np.exp(scores - np.max(scores, axis=1, keepdims=True))\n        probs = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)\n        loss = -np.sum(y_one_hot * np.log(probs)) / n_samples\n        losses.append(round(loss, 4))\n        error = probs - y_one_hot\n        grad = np.dot(X.T, error) / n_samples\n        B -= learning_rate * grad\n    B_rounded = np.round(B, 4).tolist()\n    return (B_rounded, losses)\nX = np.array([[0.5, -1.2], [-0.3, 1.1], [0.8, -0.6]])\ny = np.array([0, 1, 2])\nlearning_rate = 0.01\niterations = 10"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \"\"\"\n    X = np.hstack([np.ones((X.shape[0], 1)), X])\n    weights = np.zeros(X.shape[1])\n    loss_values = []\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n\n    def compute_loss(y_true, y_pred):\n        return -np.mean(y_true * np.log(y_pred) + (1 - y_true) * np.log(1 - y_pred))\n    for _ in range(iterations):\n        z = np.dot(X, weights)\n        y_pred = sigmoid(z)\n        loss = compute_loss(y, y_pred)\n        loss_values.append(round(loss, 4))\n        gradients = np.dot(X.T, y_pred - y) / y.size\n        weights -= learning_rate * gradients\n    return (weights.tolist(), loss_values)\nX = np.array([[1.0, 0.5], [-0.5, -1.5], [2.0, 1.5], [-2.0, -1.0]])\ny = np.array([1, 0, 1, 0])\nlearning_rate = 0.01\niterations = 20"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    scores = np.dot(Q, K.T) / np.sqrt(K.shape[-1])\n    scores = scores + mask\n    exp_scores = np.exp(scores - np.max(scores, axis=-1, keepdims=True))\n    softmax_scores = exp_scores / np.sum(exp_scores, axis=-1, keepdims=True)\n    output = np.dot(softmax_scores, V)\n    return output.tolist()"}
{"task_id": 108, "completion_id": 0, "solution": "def disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    \"\"\"\n    from collections import Counter\n    color_counts = Counter(apples)\n    total_apples = len(apples)\n    probabilities = [count / total_apples for count in color_counts.values()]\n    disorder_value = -sum((p * (p if p != 0 else 0) for p in probabilities))\n    return round(disorder_value, 4)"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    mean = np.mean(X, axis=2, keepdims=True)\n    variance = np.var(X, axis=2, keepdims=True)\n    X_normalized = (X - mean) / np.sqrt(variance + epsilon)\n    X_normalized = gamma * X_normalized + beta\n    return X_normalized.round(5).tolist()\nX = np.random.randn(2, 2, 3)\ngamma = np.ones(3).reshape(1, 1, -1)\nbeta = np.zeros(3).reshape(1, 1, -1)"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    ref_tokens = reference.lower().split()\n    cand_tokens = candidate.lower().split()\n    ref_counter = Counter(ref_tokens)\n    cand_counter = Counter(cand_tokens)\n    matches = 0\n    for word in cand_counter:\n        matches += min(cand_counter[word], ref_counter[word])\n    precision = matches / len(cand_tokens) if cand_tokens else 0\n    recall = matches / len(ref_tokens) if ref_tokens else 0\n    if precision + recall == 0:\n        f_mean = 0\n    else:\n        f_mean = (1 + beta ** 2) * (precision * recall) / (beta ** 2 * precision + recall)\n\n    def get_chunks(tokens):\n        chunks = []\n        chunk = []\n        for token in tokens:\n            if token in ref_counter and ref_counter[token] > 0:\n                chunk.append(token)\n                ref_counter[token] -= 1\n            elif chunk:\n                chunks.append(chunk)\n                chunk = []\n        if chunk:\n            chunks.append(chunk)\n        return chunks\n    ref_chunks = get_chunks(ref_tokens.copy())\n    cand_chunks = get_chunks(cand_tokens.copy())\n    chunk_count = min(len(ref_chunks), len(cand_chunks))\n    chunk_penalty = gamma * chunk_count / len(ref_chunks)\n    meteor = (1 - alpha) * f_mean + alpha * chunk_penalty\n    return round(meteor, 3)"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    joint_prob = joint_counts / total_samples\n    prob_x = total_counts_x / total_samples\n    prob_y = total_counts_y / total_samples\n    expected_joint_prob = prob_x * prob_y\n    if expected_joint_prob == 0:\n        pmi = float('-inf')\n    else:\n        pmi = np.log2(joint_prob / expected_joint_prob)\n    return round(pmi, 3)"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    if not x:\n        return []\n    min_val = min(x)\n    max_val = max(x)\n    if min_val == max_val:\n        return [0.0] * len(x)\n    normalized = [(val - min_val) / (max_val - min_val) for val in x]\n    return [round(val, 4) for val in normalized]"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray) -> list:\n    z1 = np.dot(w1, x)\n    a1 = np.maximum(0, z1)\n    z2 = np.dot(w2, a1)\n    a2 = np.maximum(0, z2)\n    z3 = a2 + x\n    a3 = np.maximum(0, z3)\n    return a3.round(4).tolist()\nx = np.array([1.0, 2.0])\nw1 = np.array([[1.0, 0.0], [0.0, 1.0]])\nw2 = np.array([[0.5, 0.0], [0.0, 0.5]])"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray):\n    if x.ndim != 3:\n        raise ValueError('Input must be a 3D array of shape (height, width, channels)')\n    avg_pooled = np.mean(x, axis=(0, 1))\n    return avg_pooled\nx = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    mean = np.mean(X, axis=(0, 2, 3), keepdims=True)\n    variance = np.var(X, axis=(0, 2, 3), keepdims=True)\n    X_normalized = (X - mean) / np.sqrt(variance + epsilon)\n    X_normalized = gamma * X_normalized + beta\n    return X_normalized.round(4).tolist()\nX = np.array([[[[0.4967, -0.1383], [0.6477, 1.523]], [[-0.2342, -0.2341], [1.5792, 0.7674]]], [[[-0.4695, 0.5426], [-0.4634, -0.4657]], [[0.242, -1.9133], [-1.7249, -0.5623]]]])\ngamma = np.array([[[[1.0]], [[1.0]]]])\nbeta = np.array([[[[0.0]], [[0.0]]]])"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    derivative = c * n * x ** (n - 1)\n    return round(derivative, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10):\n    vectors = np.array(vectors, dtype=float)\n    orthonormal_vectors = []\n    for v in vectors:\n        for u in orthonormal_vectors:\n            v = v - np.dot(v, u) * u\n        norm = np.linalg.norm(v)\n        if norm > tol:\n            orthonormal_vectors.append(v / norm)\n    orthonormal_vectors = [np.round(u, 4).tolist() for u in orthonormal_vectors]\n    return orthonormal_vectors"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    a_np = np.array(a)\n    b_np = np.array(b)\n    result_np = np.cross(a_np, b_np)\n    result = np.round(result_np, 4).tolist()\n    return result\na = [1, 0, 0]\nb = [0, 1, 0]"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    A = np.array(A)\n    b = np.array(b)\n    det_A = np.linalg.det(A)\n    if det_A == 0:\n        return -1\n    x = []\n    for i in range(len(b)):\n        A_i = A.copy()\n        A_i[:, i] = b\n        det_A_i = np.linalg.det(A_i)\n        x_i = det_A_i / det_A\n        x.append(round(x_i, 4))\n    return x\nA = [[2, -1, 3], [4, 2, 1], [-6, 1, -2]]\nb = [5, 10, -3]"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    if len(p) != len(q) or not p or (not q):\n        return 0.0\n    bc = np.sum(np.sqrt(np.array(p) * np.array(q)))\n    bd = -np.log(bc)\n    return round(bd, 4)"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float]:\n    if len(a) != len(b):\n        return -1\n    result = [x + y for (x, y) in zip(a, b)]\n    return result"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    (num_states, num_actions) = theta.shape\n    gradient_sum = np.zeros_like(theta, dtype=float)\n    total_episodes = len(episodes)\n    for episode in episodes:\n        G = 0\n        returns = []\n        for t in reversed(range(len(episode))):\n            (state, action, reward) = episode[t]\n            G = reward + G\n            returns.append(G)\n        returns.reverse()\n        for (t, (state, action, reward)) in enumerate(episode):\n            G = returns[t]\n            probs = np.exp(theta[state, :]) / np.sum(np.exp(theta[state, :]))\n            gradient = np.zeros(num_actions)\n            gradient[action] = 1 - probs[action]\n            gradient_sum[state, :] += G * probs * gradient\n    average_gradient = gradient_sum / total_episodes\n    return np.round(average_gradient, 4).tolist()\ntheta = np.zeros((2, 2))\nepisodes = [[(0, 1, 0), (1, 0, 1)], [(0, 0, 0)]]"}
{"task_id": 123, "completion_id": 0, "solution": "def compute_efficiency(n_experts, k_active, d_in, d_out):\n    dense_flops = n_experts * d_in * d_out\n    moe_flops = k_active * d_in * d_out\n    savings_percentage = (dense_flops - moe_flops) / dense_flops * 100\n    savings_percentage_rounded = round(savings_percentage, 1)\n    return savings_percentage_rounded"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    gate_values = X @ W_g\n    noisy_gate_values = gate_values + X @ W_noise * N\n    exp_noisy_gate_values = np.exp(noisy_gate_values - np.max(noisy_gate_values, axis=1, keepdims=True))\n    softmax_noisy_gate_values = exp_noisy_gate_values / np.sum(exp_noisy_gate_values, axis=1, keepdims=True)\n    topk_indices = np.argsort(-softmax_noisy_gate_values)[:, :k]\n    topk_mask = np.zeros_like(softmax_noisy_gate_values)\n    np.put_along_axis(topk_mask, topk_indices, 1, axis=1)\n    sparse_softmax_values = softmax_noisy_gate_values * topk_mask\n    sparse_softmax_values /= np.sum(sparse_softmax_values, axis=1, keepdims=True)\n    result = np.round(sparse_softmax_values, 4)\n    return result.tolist()\nX = np.array([[1.0, 2.0]])\nW_g = np.array([[1.0, 0.0], [0.0, 1.0]])\nW_noise = np.array([[0.5, 0.5], [0.5, 0.5]])\nN = np.array([[1.0, -1.0]])\nk = 2"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    (batch_size, seq_len, input_dim) = x.shape\n    gating_scores = np.dot(x.reshape(batch_size * seq_len, input_dim), Wg.T)\n    gating_probs = np.exp(gating_scores) / np.sum(np.exp(gating_scores), axis=1, keepdims=True)\n    top_k_indices = np.argsort(gating_probs, axis=1)[:, -top_k:]\n    top_k_probs = np.take_along_axis(gating_probs, top_k_indices, axis=1)\n    top_k_probs /= np.sum(top_k_probs, axis=1, keepdims=True)\n    output = np.zeros((batch_size * seq_len, input_dim))\n    for i in range(batch_size * seq_len):\n        for j in range(top_k):\n            expert_idx = top_k_indices[i, j]\n            prob = top_k_probs[i, j]\n            output[i] += prob * np.dot(x.reshape(batch_size * seq_len, input_dim)[i], We[expert_idx])\n    output = output.reshape(batch_size, seq_len, input_dim)\n    output = np.round(output, 4)\n    return output.tolist()\nWe = np.ones((4, 2, 2))\ntop_k = 1"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    (B, C, H, W) = X.shape\n    channels_per_group = C // num_groups\n    X_reshaped = X.reshape(B, num_groups, channels_per_group, H, W)\n    mean = X_reshaped.mean(axis=(2, 3, 4), keepdims=True)\n    var = X_reshaped.var(axis=(2, 3, 4), keepdims=True)\n    X_normalized = (X_reshaped - mean) / np.sqrt(var + epsilon)\n    X_normalized = X_normalized.reshape(B, C, H, W)\n    X_normalized = gamma.reshape(1, -1, 1, 1) * X_normalized + beta.reshape(1, -1, 1, 1)\n    X_normalized = np.round(X_normalized, 4)\n    result = X_normalized.tolist()\n    return result\nnum_groups = 2"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n\n    def f(x):\n        return x ** 4 - 3 * x ** 3 + 2\n\n    def df(x):\n        return 4 * x ** 3 - 9 * x ** 2\n    x = start_x\n    for _ in range(max_iters):\n        gradient = df(x)\n        new_x = x - learning_rate * gradient\n        if abs(new_x - x) < tolerance:\n            break\n        x = new_x\n    return round(x, 4)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: np.ndarray, beta: np.ndarray) -> list[float]:\n    scaled_x = alpha * x\n    tanh_x = np.tanh(scaled_x)\n    dyt_x = gamma * tanh_x + beta\n    rounded_dyt_x = np.round(dyt_x, 4)\n    result = rounded_dyt_x.tolist()\n    return result\nx = np.array([[[0.14115588, 0.00372817, 0.24126647, 0.22183601]]])\nalpha = 0.5\ngamma = np.ones((4,))\nbeta = np.zeros((4,))"}
