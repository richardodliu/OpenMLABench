{"task_id": 0, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Implement Ridge (L2-regularised) Linear Regression using its closed-form solution.\n    \n    Parameters:\n    - data: np.ndarray, where the last column is the target y and all preceding columns are the features X.\n    - alpha: float, the regularisation strength.\n    \n    Returns:\n    - A list of coefficients rounded to 4 decimal places, or -1 if the matrix is not invertible.\n    \"\"\"\n    # Split the data into features and target\n    X = data[:, :-1]\n    y = data[:, -1]\n    \n    # Add a bias term (intercept) to the features\n    X = np.hstack((np.ones((X.shape[0], 1)), X))\n    \n    # Compute the number of features including the bias term\n    n_features = X.shape[1]\n    \n    # Compute the identity matrix with the appropriate size\n    I = np.identity(n_features)\n    \n    # Compute the matrix (X^T X + alpha * I)\n    A = X.T @ X + alpha * I\n    \n    # Check if the matrix A is invertible\n    if np.linalg.det(A) == 0:\n        return -1\n    \n    # Compute the weight vector using the closed-form solution\n    w = np.linalg.inv(A) @ X.T @ y\n    \n    # Return the weight vector rounded to 4 decimal places as a list\n    return [round(coef, 4) for coef in w]\n\n# Example usage:\ndata = np.array([[1, 2], [2, 3], [3, 5]], dtype=float)\nalpha = 0\nprint(ridge_regression(data, alpha))  # Output: [1.5, 0.3333]\n```\n\nThis script defines a function `ridge_regression` that takes a numpy array `data` and a regularization strength `alpha`, and returns the weight vector for Ridge Regression rounded to four decimal places. If the matrix is not invertible, it returns `-1`. The example usage demonstrates how to call the function with a sample dataset."}
{"task_id": 1, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    \n    # Compute the Gram matrix\n    K = np.dot(X_train, X_train.T)\n    \n    for _ in range(n_iter):\n        updated = False\n        for i in range(n_samples):\n            # Compute the activation using the dual form\n            activation = np.sum(alpha * y_train * K[:, i]) + b\n            # Check the margin\n            if y_train[i] * (activation + b) <= 0:\n                # Update alpha and b\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n                # Restart the scan\n                break\n        # If no updates were made, the algorithm has converged\n        if not updated:\n            break\n    \n    # Compute the primal weight vector w\n    w = np.sum(alpha * y_train[:, np.newaxis] * X_train, axis=0)\n    \n    # Return w and b rounded to 4 decimal places\n    return [round(wi, 4) for wi in w], round(b, 4)\n\n# Example usage:\nX_train = np.array([[2, 2], [4, 4], [4, 0], [0, 0]])\ny_train = np.array([1, 1, -1, -1])\nw, b = perceptron_dual(X_train, y_train)\nprint(w, b)  # Output should be ([-2.0, 6.0], -1.0)\n```\n\nThis script implements the dual-form perceptron learning algorithm as described. It initializes the dual parameters `alpha` and `b`, computes the Gram matrix, and iteratively updates the parameters based on misclassified samples. The algorithm stops when no updates are made in a full pass over the data or after a maximum number of iterations. Finally, it computes the primal weight vector `w` and returns it along with `b`, both rounded to four decimal places."}
{"task_id": 2, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1 / (1 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return 1 / (mu * (1 - mu))\n\n    return {\n        \"identity\": {\n            \"link\": identity_link,\n            \"inv_link\": identity_inv_link,\n            \"derivative\": identity_derivative\n        },\n        \"log\": {\n            \"link\": log_link,\n            \"inv_link\": log_inv_link,\n            \"derivative\": log_derivative\n        },\n        \"logit\": {\n            \"link\": logit_link,\n            \"inv_link\": logit_inv_link,\n            \"derivative\": logit_derivative\n        }\n    }\n\n# Example usage:\nif __name__ == \"__main__\":\n    links = glm_links()\n    mu = np.array([0.2, 0.8])\n    eta = links[\"logit\"][\"link\"](mu)\n    print(np.round(eta, 4))  # Output: [-1.3863  1.3863]\n    mu2 = links[\"logit\"][\"inv_link\"](eta)\n    print(np.round(mu2, 4))  # Output: [0.2 0.8]\n```\n\nThis script defines the required GLM link functions for the identity, log, and logit links, along with their inverses and derivatives. The functions are designed to work with both numpy scalars and arrays, and the example usage demonstrates how to use the returned dictionary to perform transformations."}
{"task_id": 3, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    \n    def build_tree(indices):\n        if len(indices) < 3:\n            return {'indices': indices}\n        \n        feature_index = np.random.choice(data.shape[1])\n        feature_values = data[indices, feature_index]\n        down, up = np.min(feature_values), np.max(feature_values)\n        v = np.random.uniform(down, up)\n        \n        left_indices = indices[feature_values <= v]\n        right_indices = indices[feature_values > v]\n        \n        return {\n            'feature_index': feature_index,\n            'value': v,\n            'left': build_tree(left_indices),\n            'right': build_tree(right_indices)\n        }\n    \n    def traverse_tree(node, sample_index, depth):\n        if 'indices' in node:\n            return depth\n        feature_index = node['feature_index']\n        value = node['value']\n        if data[sample_index, feature_index] <= value:\n            return traverse_tree(node['left'], sample_index, depth + 1)\n        else:\n            return traverse_tree(node['right'], sample_index, depth + 1)\n    \n    n_samples = data.shape[0]\n    tree = build_tree(np.arange(n_samples))\n    depths = [traverse_tree(tree, i, 0) for i in range(n_samples)]\n    \n    return depths\n\n# Example usage:\ndata = np.arange(5).reshape(-1, 1)\nprint(isolation_tree_path_length(data))  # Output: [2, 2, 2, 1, 1]\n```\n\nThis script defines a function `isolation_tree_path_length` that constructs an isolation tree from the given data and computes the depth of the leaf node for each sample. The function ensures reproducibility by setting the random seed to 0. The example usage demonstrates how to use the function with a simple dataset."}
{"task_id": 7, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    min_support_count = math.ceil(minsup * N)\n    \n    # Flatten the list of transactions to find all unique items\n    all_items = set(item for transaction in transactions for item in transaction)\n    \n    # Initialize the frequent itemsets dictionary\n    frequent_itemsets = {}\n    \n    # Check all possible itemsets\n    for k in range(1, len(all_items) + 1):\n        # Generate all possible combinations of items of length k\n        for itemset in combinations(all_items, k):\n            # Count the support of the current itemset\n            support_count = sum(set(itemset).issubset(set(transaction)) for transaction in transactions)\n            # If the itemset is frequent, add it to the dictionary\n            if support_count >= min_support_count:\n                frequent_itemsets[tuple(sorted(itemset))] = support_count\n    \n    return frequent_itemsets\n\n# Example usage\ntransactions = [\n    ['bread', 'milk'],\n    ['bread', 'diaper', 'beer', 'egg'],\n    ['milk', 'diaper', 'beer', 'coke'],\n    ['bread', 'milk', 'diaper', 'beer'],\n    ['bread', 'milk', 'diaper', 'coke']\n]\nminsup = 0.6\n\nprint(find_frequent_itemsets(transactions, minsup))\n```\n\nThis script defines the `find_frequent_itemsets` function, which takes a list of transactions and a minimum support threshold as input and returns a dictionary of frequent itemsets with their support counts. The function uses combinations to generate all possible itemsets and checks their support against the threshold."}
{"task_id": 11, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    # Step 1: Initialize the centres with the first k samples\n    centres = data[:k].copy()\n    \n    for _ in range(max_iter):\n        # Step 2: Assign each sample to the nearest centre\n        labels = []\n        for sample in data:\n            distances = np.sum((sample - centres) ** 2, axis=1)\n            labels.append(np.argmin(distances))\n        \n        # Step 3: Recompute each centre as the mean of the samples assigned to it\n        new_centres = np.zeros_like(centres)\n        counts = np.zeros(k, dtype=int)\n        \n        for label, sample in zip(labels, data):\n            new_centres[label] += sample\n            counts[label] += 1\n        \n        # Handle empty clusters by reinitializing them with a random sample\n        for i in range(k):\n            if counts[i] == 0:\n                random_index = np.random.randint(0, len(data))\n                new_centres[i] = data[random_index]\n            else:\n                new_centres[i] /= counts[i]\n        \n        # Check for convergence\n        max_change = np.max(np.sum((new_centres - centres) ** 2, axis=1))\n        if max_change < epsilon:\n            break\n        \n        centres = new_centres\n    \n    # Round the centres to 4 decimal places\n    centres = np.round(centres, 4)\n    \n    return centres.tolist(), labels\n\n# Example usage:\ndata = np.array([[1, 2], [1, 4], [1, 0], [10, 2], [10, 4], [10, 0]])\nk = 2\ncentres, labels = kmeans(data, k)\nprint(centres, labels)\n```\n\nThis script implements the K-Means clustering algorithm from scratch, following the specified requirements. It initializes the cluster centers with the first `k` samples, assigns each sample to the nearest center, updates the centers, and handles empty clusters by reinitializing them with a random sample. The algorithm stops when the maximum change in any center is smaller than `epsilon` or when `max_iter` iterations are reached. The final centers are rounded to 4 decimal places before being returned."}
{"task_id": 13, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_user, n_item = data.shape\n    \n    # Step 1: Build the item-item similarity matrix S\n    S = np.zeros((n_item, n_item))\n    \n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            # Find users who rated both items i and j\n            users_who_rated_both = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            \n            if len(users_who_rated_both) == 0:\n                S[i, j] = S[j, i] = 0\n            else:\n                v1 = data[users_who_rated_both, i]\n                v2 = data[users_who_rated_both, j]\n                \n                if criterion == 'cosine':\n                    std_v1 = np.std(v1)\n                    std_v2 = np.std(v2)\n                    if std_v1 > 1e-3 and std_v2 > 1e-3:\n                        v1_centered = v1 - np.mean(v1)\n                        v2_centered = v2 - np.mean(v2)\n                        S[i, j] = np.dot(v1_centered, v2_centered) / (np.linalg.norm(v1_centered) * np.linalg.norm(v2_centered))\n                    else:\n                        S[i, j] = 0\n                elif criterion == 'pearson':\n                    S[i, j] = np.corrcoef(v1, v2)[0, 1]\n                S[j, i] = S[i, j]\n    \n    # Step 2: Collect the indices of the items the active user has already rated\n    rated_items = np.where(data[user_ind, :] > 0)[0]\n    unrated_items = np.where(data[user_ind, :] == 0)[0]\n    \n    if len(unrated_items) == 0:\n        return []\n    \n    # Step 3: Compute the predicted attractiveness score for each unrated item\n    scores = defaultdict(float)\n    \n    for t in unrated_items:\n        numerator = 0\n        denominator = 0\n        for i in rated_items:\n            numerator += data[user_ind, i] * S[t, i]\n            denominator += abs(S[t, i])\n        if denominator > 0:\n            scores[t] = numerator / denominator\n    \n    # Step 4: Return the indices of the k most promising items\n    sorted_items = sorted(scores, key=scores.get, reverse=True)\n    return sorted_items[:k]\n\n# Example usage:\ndata = np.array([\n    [5, 0, 5],\n    [4, 0, 4],\n    [0, 3, 3],\n    [0, 2, 2]\n])\nuser_ind = 0\nk = 1\ncriterion = 'cosine'\nprint(knn_recommend(data, user_ind, k, criterion))  # Output: [1]\n```\n\nThis script implements the item-based k-NN collaborative filtering recommender as described. It constructs the item-item similarity matrix based on the specified criterion, computes the predicted attractiveness scores for unrated items, and returns the top `k` items with the highest scores."}
{"task_id": 19, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_gain = -np.inf\n    best_feature = None\n    best_threshold = None\n\n    # Calculate the loss for the current node\n    G = np.sum(g)\n    H = np.sum(h)\n    current_loss = -0.5 * (G**2) / (H + lam) + gamma\n\n    for feature_index in range(n_features):\n        # Get unique values of the feature and sort them\n        unique_values = np.unique(X[:, feature_index])\n        if len(unique_values) < 2:\n            continue\n\n        # Sort the data based on the feature values\n        sorted_indices = np.argsort(X[:, feature_index])\n        sorted_g = g[sorted_indices]\n        sorted_h = h[sorted_indices]\n        sorted_X = X[sorted_indices, feature_index]\n\n        # Initialize left and right sums\n        G_L = 0\n        H_L = 0\n        G_R = G\n        H_R = H\n\n        # Try each unique value as a threshold\n        for i in range(1, n_samples):\n            G_L += sorted_g[i - 1]\n            H_L += sorted_h[i - 1]\n            G_R -= sorted_g[i - 1]\n            H_R -= sorted_h[i - 1]\n\n            # Check if the split is valid\n            if i < 2 or i > n_samples - 2:\n                continue\n\n            # Calculate the loss for the left and right nodes\n            loss_L = -0.5 * (G_L**2) / (H_L + lam) + gamma\n            loss_R = -0.5 * (G_R**2) / (H_R + lam) + gamma\n\n            # Calculate the gain\n            gain = current_loss - loss_L - loss_R\n\n            # Update the best split if the current gain is better\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature_index\n                best_threshold = (sorted_X[i - 1] + sorted_X[i]) / 2\n\n    return (best_feature, best_threshold) if best_gain > 0 else None\n\n# Example usage\nX = np.array([[2], [4], [6], [8]])\ng = np.array([1, 1, -1, -1])\nh = np.array([1, 1, 1, 1])\ngamma = 0.1\nlam = 1.0\n\nprint(best_split(X, g, h, gamma, lam))  # Output: (0, 4.0)\n```\n\nThis code defines the `best_split` function, which calculates the best split for a gradient boosting tree node based on the given criteria. It iterates over each feature, considers each unique value as a potential threshold, and calculates the gain for each possible split. The function returns the split with the highest gain if it is positive, otherwise it returns `None`."}
{"task_id": 20, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Convert input to a NumPy array if it's not already\n    if isinstance(x, (int, float)):\n        x = np.array([x])\n    elif isinstance(x, list):\n        x = np.array(x)\n    \n    # Compute the sigmoid values\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    \n    # Compute the gradient of the sigmoid function\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    \n    # Round the results to 4 decimal places\n    sigmoid_x_rounded = np.round(sigmoid_x, 4)\n    gradient_x_rounded = np.round(gradient_x, 4)\n    \n    # Convert back to scalar if the input was a scalar\n    if isinstance(x, np.ndarray) and x.size == 1:\n        return (float(sigmoid_x_rounded), float(gradient_x_rounded))\n    \n    # Convert NumPy arrays to Python lists for non-scalar inputs\n    return (sigmoid_x_rounded.tolist(), gradient_x_rounded.tolist())\n\n# Example usage:\nx = [-1, 0, 1]\nsigmoid_values, gradient_values = sigmoid_activation(x)\nprint(sigmoid_values, gradient_values)  # Output: [0.2689, 0.5, 0.7311] [0.1966, 0.25, 0.1966]\n```"}
{"task_id": 21, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef adaboost_1d_predict(x_train: list[float],\n                        y_train: list[int],\n                        x_test: list[float],\n                        epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n_samples = len(x_train)\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n\n    def predict_stump(x, d, theta):\n        if d == 0:\n            return 1 if x <= theta else -1\n        else:\n            return 1 if x > theta else -1\n\n    def weighted_error(stump, weights):\n        d, theta = stump\n        predictions = np.array([predict_stump(x, d, theta) for x in x_train])\n        return np.sum(weights[predictions != y_train])\n\n    while True:\n        best_stump = None\n        min_error = float('inf')\n        sorted_indices = np.argsort(x_train)\n        sorted_x = np.array(x_train)[sorted_indices]\n        sorted_y = np.array(y_train)[sorted_indices]\n        sorted_weights = np.array(weights)[sorted_indices]\n\n        for i in range(n_samples - 1):\n            theta = (sorted_x[i] + sorted_x[i + 1]) / 2.0\n            for d in [0, 1]:\n                stump = (d, theta)\n                error = weighted_error(stump, sorted_weights)\n                if error < min_error:\n                    min_error = error\n                    best_stump = stump\n\n        if min_error == 0:\n            alpha = float('inf')\n        else:\n            alpha = 0.5 * math.log((1 - min_error) / min_error)\n\n        alphas.append(alpha)\n        stumps.append(best_stump)\n\n        predictions = np.array([predict_stump(x, best_stump[0], best_stump[1]) for x in x_train])\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n\n        ensemble_predictions = np.sum([alpha * predict_stump(x, d, theta) for d, theta, alpha in zip(*stumps, alphas)], axis=0)\n        training_error = np.mean(np.sign(ensemble_predictions) != y_train)\n\n        if training_error <= epsilon:\n            break\n\n    def predict(x):\n        return np.sign(np.sum([alpha * predict_stump(x, d, theta) for d, theta, alpha in zip(*stumps, alphas)]))\n\n    return [predict(x) for x in x_test]\n\n# Example usage:\nx_train = [1, 2, 3, 4]\ny_train = [1, 1, -1, -1]\nx_test = [1.5, 3.5]\nepsilon = 0.0\nprint(adaboost_1d_predict(x_train, y_train, x_test, epsilon))  # Output: [1, -1]\n```\n\nThis code implements the AdaBoost algorithm using one-dimensional decision stumps as weak learners. It trains the ensemble on the provided training data and returns predictions for the test data. The training process stops when the training error of the ensemble is not larger than the specified `epsilon`."}
{"task_id": 25, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    # Compute the Euclidean distance squared between each pair of X_train and X_test\n    diff = X_train[:, np.newaxis, :] - X_test[np.newaxis, :, :]\n    norm_squared = np.sum(diff ** 2, axis=2)\n    \n    # Compute the Gaussian kernel matrix\n    K = np.exp(-gamma * norm_squared)\n    \n    # Compute the decision function for each test sample\n    g_z = np.sum(alpha * y_train * K, axis=0) + b\n    \n    # Predict the labels based on the sign of the decision function\n    predictions = np.sign(g_z).astype(int)\n    \n    # Convert predictions to a list of integers\n    return predictions.tolist()\n\n# Example usage:\nX_train = np.array([[1, 2], [2, 3]])\ny_train = np.array([1, -1])\nalpha = np.array([0.6, 0.4])\nb = 0.1\ngamma = 0.5\nX_test = np.array([[1.5, 2.5]])\n\nprint(gaussian_svm_predict(X_train, y_train, alpha, b, gamma, X_test))  # Output: [1]\n```\n\nThis script defines the `gaussian_svm_predict` function, which computes the predicted labels for test samples using a Gaussian-kernel SVM. The function is fully vectorized and uses only NumPy for computations. The example usage demonstrates how to call the function and obtain the predicted labels."}
{"task_id": 28, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    # Convert the input list of lists to a numpy array\n    X_np = np.array(X)\n    m, n = X_np.shape\n    \n    # Check if k is within the valid range\n    if k < 1 or k > min(m, n):\n        return -1\n    \n    # Perform truncated SVD\n    U, s, Vt = np.linalg.svd(X_np, full_matrices=False)\n    \n    # Truncate the SVD to keep only the first k singular values/vectors\n    U_k = U[:, :k]\n    s_k = s[:k]\n    Vt_k = Vt[:k, :]\n    \n    # Reconstruct the matrix\n    X_hat_np = U_k @ np.diag(s_k) @ Vt_k\n    \n    # Calculate the mean squared error\n    mse = np.mean((X_np - X_hat_np) ** 2)\n    \n    # Round the reconstructed matrix and the MSE to four decimals\n    X_hat = np.round(X_hat_np, 4).tolist()\n    mse = np.round(mse, 4)\n    \n    return X_hat, mse\n\n# Example usage:\nX = [[3, 1], [1, 3]]\nk = 1\nprint(linear_autoencoder(X, k))  # Output: ([[2.0, 2.0], [2.0, 2.0]], 1.0)\n```\n\nThis script defines the `linear_autoencoder` function, which performs the required operations to compute the rank-\\(k\\) reconstruction of a given matrix \\(X\\) using truncated SVD and calculates the mean squared error of the reconstruction. The function checks if \\(k\\) is within the valid range and returns \\(-1\\) if it is not. The reconstructed matrix and the MSE are rounded to four decimal places before being returned."}
{"task_id": 29, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                           y_train: list[float] | np.ndarray,\n                           x_query: float,\n                           epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    \n    # Sort the training data by the feature values\n    sorted_indices = np.argsort(x_train)\n    x_train = x_train[sorted_indices]\n    y_train = y_train[sorted_indices]\n    \n    # Initialize residuals as the target values\n    residuals = y_train.copy()\n    \n    # Initialize the prediction for the query point\n    prediction = 0.0\n    \n    # Calculate initial RSS\n    current_rss = np.sum(residuals ** 2)\n    \n    # Iterate until the RSS is below the tolerance\n    while current_rss > epsilon:\n        best_rss = float('inf')\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n        \n        # Consider all midpoints between consecutive x values as candidate splits\n        for i in range(len(x_train) - 1):\n            split = (x_train[i] + x_train[i + 1]) / 2.0\n            \n            # Calculate c1 and c2 for the current split\n            left_indices = x_train <= split\n            right_indices = x_train > split\n            \n            c1 = np.mean(residuals[left_indices])\n            c2 = np.mean(residuals[right_indices])\n            \n            # Calculate the RSS for the current split\n            rss = np.sum(residuals[left_indices] ** 2) + np.sum(residuals[right_indices] ** 2)\n            \n            # Update the best split if the current one is better\n            if rss < best_rss:\n                best_rss = rss\n                best_split = split\n                best_c1 = c1\n                best_c2 = c2\n        \n        # Add the best stump to the ensemble\n        if best_split is not None:\n            if x_query <= best_split:\n                prediction += best_c1\n            else:\n                prediction += best_c2\n            \n            # Update the residuals\n            residuals[x_train <= best_split] -= best_c1\n            residuals[x_train > best_split] -= best_c2\n        \n        # Update the current RSS\n        current_rss = best_rss\n    \n    # Return the prediction rounded to 4 decimal places\n    return round(prediction, 4)\n\n# Example usage:\nx_train = np.array([1, 2, 3, 4])\ny_train = np.array([1.5, 1.5, 3.5, 3.5])\nx_query = 3\nprint(predict_boosting_tree(x_train, y_train, x_query))  # Output: 3.5\n```\n\nThis script implements the one-dimensional gradient boosting regressor using decision stumps as described in the task. It sorts the training data, iteratively adds the best stump to the ensemble based on minimizing the residual sum of squares, and predicts the target for a given query point. The prediction is rounded to four decimal places as required."}
{"task_id": 34, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None) -> np.ndarray:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s based on the specified shape and sparsity.\n    \n    Parameters:\n    - shape: A tuple representing the desired shape of the tensor.\n    - sparsity: A float in the range [0, 1] representing the probability of generating a 1.0.\n    - seed: An optional integer seed for reproducibility.\n    \n    Returns:\n    - A NumPy array of the specified shape with entries 1.0 with probability equal to sparsity and 0.0 otherwise.\n    - Returns -1 if sparsity is outside the range [0, 1].\n    \"\"\"\n    if not (0 <= sparsity <= 1):\n        return -1\n    \n    if seed is not None:\n        np.random.seed(seed)\n    \n    random_tensor = np.random.rand(*shape)\n    binary_tensor = (random_tensor < sparsity).astype(float)\n    \n    return binary_tensor\n\n# Example usage:\nshape = (2, 3)\nsparsity = 0.3\nseed = 42\noutput = random_binary_tensor(shape, sparsity, seed)\nprint(output)\n```\n\nThis script defines the `random_binary_tensor` function, which generates a binary tensor with the specified shape and sparsity. It includes input validation for the sparsity parameter and supports optional seeding for reproducibility. The example usage demonstrates how to call the function and print the resulting tensor."}
{"task_id": 39, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    # Use argpartition to find the median index\n    median_index = n_samples // 2\n    indices = np.arange(n_samples)\n    partitioned_indices = np.argpartition(data[:, d], median_index)\n    \n    # The median index in the partitioned array\n    pivot_index = partitioned_indices[median_index]\n    pivot_value = data[pivot_index, d]\n    \n    # Separate indices into left and right\n    left_indices = partitioned_indices[partitioned_indices < median_index]\n    right_indices = partitioned_indices[partitioned_indices > median_index]\n    \n    # Filter out the pivot value from left and right\n    left_indices = [i for i in left_indices if data[i, d] < pivot_value]\n    right_indices = [i for i in right_indices if data[i, d] > pivot_value]\n    \n    # Sort the left and right indices\n    left_indices = sorted(left_indices)\n    right_indices = sorted(right_indices)\n    \n    return pivot_index, left_indices, right_indices\n\n# Example usage:\ndata = np.array([[2, 3],\n                 [1, 5],\n                 [4, 1],\n                 [0, 2],\n                 [3, 4]])\nd = 0\nprint(get_split(data, d))  # Output: (0, [1, 3], [2, 4])\n```\n\nThis code defines the `get_split` function which performs a median split on a given two-dimensional NumPy array `data` along a specified column `d`. It uses `numpy.argpartition` to efficiently find the median index and then separates the indices into left and right based on the median value. The resulting lists of indices are sorted to ensure determinism."}
{"task_id": 40, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    # Assertions to check pre-conditions\n    assert x.ndim == 1, \"Input array must be one-dimensional.\"\n    assert stride >= 1, \"Stride must be a positive integer.\"\n    assert len(x) >= frame_width, \"Input array must be at least as long as the frame width.\"\n\n    # Calculate the number of frames\n    n_frames = (len(x) - frame_width) // stride + 1\n\n    # Create the view using as_strided\n    frames = as_strided(x, shape=(n_frames, frame_width), strides=(x.strides[0] * stride, x.strides[0]))\n\n    # Set the writeable flag\n    frames.flags.writeable = writeable\n\n    return frames\n\n# Example usage:\nx = np.arange(6)\nframe_width = 5\nstride = 1\nresult = to_frames(x, frame_width, stride)\nprint(result)\n```\n\nThis script defines the `to_frames` function, which takes a 1-D NumPy array `x`, a `frame_width`, a `stride`, and an optional `writeable` flag. It uses `numpy.lib.stride_tricks.as_strided` to create a view of the input array that represents overlapping frames. The function includes assertions to ensure that the input meets the specified pre-conditions. The example usage demonstrates how to call the function and print the resulting framed signal."}
{"task_id": 48, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Convert input to a numpy array if it's not already\n    X = np.array(X)\n    \n    # Check if the matrix is two-dimensional\n    if X.ndim != 2:\n        return False\n    \n    # Check if all elements are between 0 and 1 inclusive\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    \n    # Check if each row sums to 1 within a tolerance of 1e-8\n    if not np.allclose(np.sum(X, axis=1), 1, atol=1e-8):\n        return False\n    \n    return True\n\n# Example usage:\nX1 = [[0.2, 0.8], [0.5, 0.5]]\nX2 = [[0.2, 0.8], [0.5, 0.6]]\nX3 = [[0.2, 0.8, 0.0], [0.5, 0.5, 0.0]]\nX4 = np.array([[0.2, 0.8], [0.5, 0.5]])\n\nprint(is_stochastic(X1))  # Output: True\nprint(is_stochastic(X2))  # Output: False\nprint(is_stochastic(X3))  # Output: True\nprint(is_stochastic(X4))  # Output: True\n```\n\nThis script defines the `is_stochastic` function, which checks if a given matrix is row-stochastic according to the specified criteria. The function handles both list of lists and NumPy array inputs, ensuring that the matrix is two-dimensional, all elements are within the range [0, 1], and each row sums to 1 within a tolerance of `1e-8`."}
{"task_id": 55, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n, d = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    \n    for iteration in range(max_iter):\n        # Determine the batch indices\n        start_idx = (iteration * batch_size) % n\n        end_idx = (start_idx + batch_size) % n\n        \n        if start_idx < end_idx:\n            X_batch = X[start_idx:end_idx]\n            y_batch = y[start_idx:end_idx]\n        else:\n            X_batch = np.vstack((X[start_idx:], X[:end_idx]))\n            y_batch = np.concatenate((y[start_idx:], y[:end_idx]))\n        \n        # Compute the gradient\n        n_batch = X_batch.shape[0]\n        gradient = (1 / n_batch) * X_batch.T @ (X_batch @ w - y_batch)\n        \n        # Update the running average of squared gradients\n        s = rho * s + (1 - rho) * (gradient ** 2)\n        \n        # Update the weights\n        w -= eta * gradient / (np.sqrt(s) + eps_station)\n        \n        # Check for early stopping\n        if np.linalg.norm(gradient) < epsilon:\n            break\n    \n    return [round(weight, 4) for weight in w]\n\n# Example usage:\nX = np.array([[1, 0], [1, 1], [1, 2], [1, 3]], dtype=float)\ny = np.array([1, 3, 5, 7], dtype=float)\nprint(rms_prop(X, y))  # Output: [1.0, 2.0]\n```\n\nThis script defines the `rms_prop` function, which implements the RMSprop optimization algorithm for linear regression. The function takes a feature matrix `X` and a target vector `y`, along with several hyperparameters, and returns the learned weight vector rounded to four decimal places. The example usage demonstrates how to call the function with a simple dataset."}
{"task_id": 56, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n    \"\"\"Compute the SoftPlus activation or its gradient.\n    \n    Args:\n        x (scalar, list, or np.array): Input values.\n        deriv (bool): If True, compute the gradient of SoftPlus.\n    \n    Returns:\n        list or float: SoftPlus values or their gradients, rounded to 4 decimal places.\n    \"\"\"\n    # Convert input to a NumPy array for vectorized operations\n    x = np.array(x, dtype=float)\n    \n    if deriv:\n        # Compute the gradient (sigmoid function)\n        result = 1 / (1 + np.exp(-x))\n    else:\n        # Compute the SoftPlus function using a numerically stable formulation\n        result = np.where(x > 0, np.log1p(np.exp(-x)) + x, np.log1p(np.exp(x)))\n    \n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n    \n    # Return a list if the input was a list or a NumPy array, otherwise return a float\n    if isinstance(x, (list, np.ndarray)):\n        return result.tolist()\n    else:\n        return float(result)\n\n# Example usage:\nx = np.array([-1, 0, 1])\nprint(softplus(x, deriv=False))  # Output: [0.3133, 0.6931, 1.3133]\nprint(softplus(x, deriv=True))   # Output: [0.2689, 0.5, 0.7311]\n```\n\nThis script defines the `softplus` function, which computes the SoftPlus activation or its gradient based on the `deriv` flag. It handles both scalar and array inputs, ensuring numerical stability and rounding the results to four decimal places."}
{"task_id": 58, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    if N < 1:\n        raise ValueError(\"N must be at least 1\")\n    \n    # Create N-gram and (N-1)-gram counters\n    ngram_counter = Counter(tuple(corpus[i:i+N]) for i in range(len(corpus) - N + 1))\n    if N > 1:\n        n1gram_counter = Counter(tuple(corpus[i:i+N-1]) for i in range(len(corpus) - N + 2))\n    else:\n        n1gram_counter = Counter(corpus)\n    \n    total_log_prob = 0.0\n    \n    # Calculate the log-probability of each N-gram in the sequence\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i+N])\n        if N == 1:\n            count_ngram = ngram_counter[ngram[0]]\n            count_n1gram = len(corpus)\n        else:\n            count_ngram = ngram_counter[ngram]\n            count_n1gram = n1gram_counter[ngram[:-1]]\n        \n        if count_ngram == 0 or count_n1gram == 0:\n            return float('-inf')\n        \n        prob = count_ngram / count_n1gram\n        total_log_prob += np.log(prob)\n    \n    return round(total_log_prob, 4)\n\n# Example usage:\ncorpus = [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\nsequence = [\"the\", \"lazy\", \"dog\"]\nN = 2\nprint(unsmoothed_ngram_log_prob(corpus, sequence, N))  # Output: -0.6931\n```\n\nThis script defines the function `unsmoothed_ngram_log_prob` which calculates the log-probability of a given sequence under an unsmoothed Maximum-Likelihood Estimation (MLE) N-gram model trained on a provided corpus. The function handles both unigrams (N=1) and higher-order n-grams (N>1) and returns the log-probability rounded to four decimal places, or negative infinity if any required count is zero."}
{"task_id": 62, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef lasso_regression(X: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\", degree: int, reg_factor: float, n_iterations: int = 1000, tol: float = 1e-6) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    m = len(y)\n    \n    # Build the design matrix\n    design_matrix = np.vander(X, degree + 1, increasing=True)\n    \n    # Initialize weights\n    weights = np.zeros(degree + 1)\n    \n    for _ in range(n_iterations):\n        # Update the bias term\n        weights[0] = np.mean(y - design_matrix[:, 1:].dot(weights[1:]))\n        \n        # Store the previous weights for convergence check\n        prev_weights = np.copy(weights)\n        \n        # Update the other coefficients\n        for j in range(1, degree + 1):\n            X_j = design_matrix[:, j]\n            rho = X_j.T.dot(y - design_matrix.dot(weights) + weights[j] * X_j)\n            weights[j] = np.sign(rho) * max(abs(rho) - reg_factor, 0) / X_j.T.dot(X_j)\n        \n        # Check for convergence\n        if np.max(np.abs(weights - prev_weights)) < tol:\n            break\n    \n    return [round(w, 4) for w in weights]\n\n# Example usage:\nX = [0, 1, 2, 3]\ny = [1, 3, 5, 7]\ndegree = 1\nreg_factor = 0.0\nprint(lasso_regression(X, y, degree, reg_factor))  # Output: [1.0, 2.0]\n```\n\nThis script defines the `lasso_regression` function, which performs univariate Lasso regression with polynomial feature expansion using coordinate descent. The function takes in the input data `X`, target values `y`, polynomial degree `degree`, regularization strength `reg_factor`, and optional parameters for the maximum number of iterations and tolerance for early stopping. It returns the learned coefficients rounded to four decimal places. The example usage demonstrates how to call the function with a simple linear dataset."}
{"task_id": 63, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector \u03b2_t for a given time index t in a Hidden Markov Model.\n\n    Parameters:\n    A (list[list[float]]): Transition probability matrix of shape (N, N).\n    B (list[list[float]]): Emission probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices of length T.\n    t (int): Time index for which to calculate the backward probability vector (0 \u2264 t < T).\n\n    Returns:\n    list[float]: List of N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    N = len(A)  # Number of states\n    T = len(obs)  # Length of the observation sequence\n\n    # Initialize the backward probability vector for the last time step\n    beta = np.ones(N)\n\n    # Calculate the backward probabilities from T-2 to t\n    for time in range(T - 2, t - 1, -1):\n        next_beta = beta\n        beta = np.zeros(N)\n        for i in range(N):\n            for j in range(N):\n                beta[i] += A[i][j] * B[j][obs[time + 1]] * next_beta[j]\n\n    # If t is the last time step, return the initial beta values\n    if t == T - 1:\n        return [round(b, 4) for b in np.ones(N)]\n\n    return [round(b, 4) for b in beta]\n\n# Example usage:\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.5, 0.5], [0.1, 0.9]]\nobs = [0, 1, 0]\nt = 0\nprint(backward_beta(A, B, obs, t))  # Output: [0.2032, 0.2164]\n```\n\nThis script defines the `backward_beta` function, which calculates the backward probability vector \\(\\beta_t\\) for a given time index \\(t\\) in a Hidden Markov Model. The function uses the transition and emission probability matrices, along with the observation sequence, to compute the desired probabilities. The results are rounded to four decimal places as specified."}
{"task_id": 65, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    # Check for empty inputs\n    if not A or not B or not pi or not obs:\n        return 0.0\n\n    # Convert lists to numpy arrays for easier manipulation\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    obs = np.array(obs)\n\n    N = A.shape[0]  # Number of states\n    T = len(obs)    # Length of the observation sequence\n\n    # Initialize the backward variables\n    beta = np.zeros((T, N))\n    beta[T-1, :] = 1.0  # Base case\n\n    # Fill the beta table using the recursive formula\n    for t in range(T-2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t+1]] * beta[t+1, :])\n\n    # Calculate the probability of the observation sequence\n    prob = np.sum(pi * B[:, obs[0]] * beta[0, :])\n\n    return round(prob, 6)\n\n# Example usage\nA = [[0.7, 0.3],\n     [0.4, 0.6]]\n\nB = [[0.1, 0.4, 0.5],\n     [0.6, 0.3, 0.1]]\n\npi = [0.6, 0.4]\n\nobs = [0, 1, 2]\n\nprint(backward_prob(A, B, pi, obs))  # Output: 0.033612\n```"}
{"task_id": 69, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # Validate input dimensions\n    n = len(S)\n    if not A or len(A) != n or any(len(row) != n for row in A):\n        return -1\n    if not B or len(B) != n or not all(isinstance(row, list) for row in B):\n        return -1\n    m = len(B[0])\n    if any(len(row) != m for row in B):\n        return -1\n    if not observations:\n        return -1\n    if any(obs < 0 or obs >= m for obs in observations):\n        return -1\n\n    # Convert inputs to numpy arrays for easier manipulation\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    observations = np.array(observations)\n\n    # Initialize the forward variables\n    T = len(observations)\n    alpha = np.zeros((T, n))\n    alpha[0] = S * B[:, observations[0]]\n\n    # Compute the forward variables recursively\n    for t in range(1, T):\n        alpha[t] = (alpha[t-1] @ A) * B[:, observations[t]]\n\n    # Compute the total probability of the observation sequence\n    likelihood = np.sum(alpha[-1])\n    return round(likelihood, 4)\n\n# Example usage\nS = [0.6, 0.4]\nA = [[0.7, 0.3],\n     [0.4, 0.6]]\nB = [[0.5, 0.4, 0.1],\n     [0.1, 0.3, 0.6]]\nobservations = [0, 1, 2]\nprint(forward_algorithm(S, A, B, observations))  # Output: 0.0363\n```\n\nThis script defines the `forward_algorithm` function, which computes the likelihood of an observation sequence given an HMM using the forward algorithm. It includes input validation to ensure the dimensions are correct and the observations are within the valid range. If the input is invalid, it returns -1. Otherwise, it calculates the likelihood and returns it rounded to four decimal places."}
{"task_id": 70, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that implements the FP-Growth algorithm to discover frequent item-sets from a given list of transactions. The script follows the requirements and constraints specified in the task description.\n\n```python\nfrom collections import Counter, defaultdict\n\nclass FPNode:\n    def __init__(self, item, support, parent=None):\n        self.item = item\n        self.support = support\n        self.parent = parent\n        self.children = defaultdict(FPNode)\n        self.link = None\n\nclass FPTree:\n    def __init__(self):\n        self.root = FPNode(None, 0)\n        self.header_table = defaultdict(lambda: None)\n\n    def insert_transaction(self, transaction, support):\n        current_node = self.root\n        for item in transaction:\n            if item in current_node.children:\n                current_node.children[item].support += support\n            else:\n                new_node = FPNode(item, support, current_node)\n                current_node.children[item] = new_node\n                if self.header_table[item] is None:\n                    self.header_table[item] = new_node\n                else:\n                    self._update_link(self.header_table[item], new_node)\n            current_node = current_node.children[item]\n\n    def _update_link(self, old_node, new_node):\n        while old_node.link is not None:\n            old_node = old_node.link\n        old_node.link = new_node\n\ndef build_fp_tree(transactions, min_support):\n    fp_tree = FPTree()\n    frequency = Counter(item for transaction in transactions for item in transaction)\n    frequent_items = {item: support for item, support in frequency.items() if support >= min_support}\n    sorted_transactions = [sorted(transaction, key=lambda x: frequent_items[x], reverse=True) for transaction in transactions]\n    for transaction in sorted_transactions:\n        filtered_transaction = [item for item in transaction if item in frequent_items]\n        fp_tree.insert_transaction(filtered_transaction, 1)\n    return fp_tree, frequent_items\n\ndef find_frequent_patterns(fp_tree, frequent_items, min_support):\n    frequent_itemsets = []\n    def mine_tree(prefix, node, min_support):\n        if node is not None:\n            prefix.append(node.item)\n            support = node.support\n            if support >= min_support:\n                frequent_itemsets.append(prefix[:])\n            conditional_pattern_base = []\n            while node.link is not None:\n                path = []\n                current_node = node.link.parent\n                while current_node.parent is not None:\n                    path.append(current_node.item)\n                    current_node = current_node.parent\n                conditional_pattern_base.append((path, node.link.support))\n                node = node.link\n            if conditional_pattern_base:\n                conditional_tree, _ = build_fp_tree([path for path, _ in conditional_pattern_base], min_support)\n                if conditional_tree.root.children:\n                    mine_tree(prefix[:], conditional_tree.root, min_support)\n    for item, node in sorted(fp_tree.header_table.items(), key=lambda x: frequent_items[x[0]]):\n        support = node.support\n        if support >= min_support:\n            frequent_itemsets.append([item])\n        conditional_pattern_base = []\n        while node.link is not None:\n            path = []\n            current_node = node.link.parent\n            while current_node.parent is not None:\n                path.append(current_node.item)\n                current_node = current_node.parent\n            conditional_pattern_base.append((path, node.link.support))\n            node = node.link\n        if conditional_pattern_base:\n            conditional_tree, _ = build_fp_tree([path for path, _ in conditional_pattern_base], min_support)\n            if conditional_tree.root.children:\n                mine_tree([item], conditional_tree.root, min_support)\n    return frequent_itemsets\n\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    if not transactions or min_support <= 0:\n        return []\n    \n    fp_tree, frequent_items = build_fp_tree(transactions, min_support)\n    frequent_itemsets = find_frequent_patterns(fp_tree, frequent_items, min_support)\n    frequent_itemsets = [sorted(itemset) for itemset in frequent_itemsets]\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\n\n# Example usage:\ntransactions = [\n    [\"bread\", \"milk\"],\n    [\"bread\", \"diaper\", \"beer\", \"egg\"],\n    [\"milk\", \"diaper\", \"beer\", \"coke\"],\n    [\"bread\", \"milk\", \"diaper\", \"beer\"],\n    [\"bread\", \"milk\", \"diaper\", \"coke\"]\n]\nmin_support = 3\nprint(fp_growth(transactions, min_support))\n```\n\nThis script defines the necessary classes and functions to build and mine an FP-tree, and it returns the frequent item-sets in the required format. The example usage at the end demonstrates how to call the `fp_growth` function with a sample dataset."}
{"task_id": 75, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    # Check if k is valid\n    if k <= 0 or k > len(X_train):\n        return -1\n    \n    # Convert lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Initialize the list to store predictions\n    predictions = []\n    \n    # Iterate over each test sample\n    for test_sample in X_test:\n        # Compute the squared Euclidean distance from the test sample to all training samples\n        distances = np.sum((X_train - test_sample) ** 2, axis=1)\n        \n        # Get the indices of the k nearest neighbors\n        k_nearest_indices = np.argsort(distances)[:k]\n        \n        # Get the class labels of the k nearest neighbors\n        k_nearest_labels = y_train[k_nearest_indices]\n        \n        # Find the most common class label among the k nearest neighbors\n        # In case of a tie, np.bincount will return the smallest label\n        predicted_label = np.bincount(k_nearest_labels).argmax()\n        \n        # Append the predicted label to the predictions list\n        predictions.append(predicted_label)\n    \n    return predictions\n\n# Example usage:\nX_train = [[1, 2], [2, 3], [3, 4]]\ny_train = [0, 1, 1]\nX_test = [[2, 2]]\nk = 2\nprint(knn_predict(X_train, y_train, X_test, k))  # Output: [0]\n```\n\nThis script defines the `knn_predict` function, which implements the k-Nearest Neighbour algorithm as described. It checks for valid `k`, computes distances, finds the nearest neighbors, and determines the majority class label for each test sample. In case of a tie, it returns the smallest class label."}
{"task_id": 76, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    \n    # Define a small epsilon value for numerical stability\n    epsilon = np.finfo(float).eps\n    \n    # Calculate the loss using the formula\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    \n    # Return the loss rounded to 4 decimal places\n    return round(loss, 4)\n\n# Example usage:\ny = [[1, 0, 0], [0, 1, 0]]\ny_pred = [[0.8, 0.1, 0.1], [0.2, 0.5, 0.3]]\nprint(cross_entropy_loss(y, y_pred))  # Output: 0.9163\n```\n\nThis script defines a function `cross_entropy_loss` that calculates the unnormalised categorical cross-entropy loss for a batch of one-hot encoded targets and predicted probabilities. The function uses NumPy for efficient computation and ensures numerical stability by adding a small epsilon value to the predicted probabilities before taking the logarithm. The result is rounded to four decimal places as required."}
{"task_id": 77, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef relu(Z: np.ndarray) -> np.ndarray:\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(0, Z)\n\ndef sigmoid(Z: np.ndarray) -> np.ndarray:\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\n\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2  # number of layers in the network\n\n    # Implement [LINEAR -> RELU]*(L-1). Add \"cache\" to the \"caches\" list.\n    for l in range(1, L):\n        A_prev = A\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A_prev) + b\n        A = relu(Z)\n        caches.append((A_prev, W, b, Z))\n\n    # Implement LINEAR -> SIGMOID. Add \"cache\" to the \"caches\" list.\n    W = parameters[f'W{L}']\n    b = parameters[f'b{L}']\n    Z = np.dot(W, A) + b\n    AL = sigmoid(Z)\n    caches.append((A, W, b, Z))\n\n    # Convert AL to a list and round to 4 decimal places\n    AL_rounded = np.round(AL, 4).tolist()\n\n    return AL_rounded, caches\n\n# Example usage\nX = np.array([[ 1, -1],\n              [ 2,  0],\n              [ 0,  1],\n              [-1, -3]])\nparameters = {\n  'W1': np.array([[ 0.2, -0.4,  0.1,  0.5],\n                  [-0.3,  0.2, -0.2,  0.3],\n                  [ 0.4, -0.1,  0.2, -0.5]]),\n  'b1': np.array([[ 0.10],[-0.20],[ 0.05]]),\n  'W2': np.array([[ 0.3, -0.7, 0.2]]),\n  'b2': np.array([[0.]])\n}\n\nAL, caches = L_model_forward(X, parameters)\nprint(AL)  # Output should be [[0.5374, 0.5671]]\n```\n\nThis script defines the forward propagation for an L-layer neural network with ReLU activations in the hidden layers and a sigmoid activation in the output layer. It includes helper functions for the ReLU and sigmoid activations, and the main function `L_model_forward` performs the forward pass, storing intermediate results in `caches` for potential use in backpropagation. The final output is rounded to four decimal places and converted to a regular Python list."}
{"task_id": 81, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    # Ensure A2 is clipped to avoid log(0) issues\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    \n    # Number of samples\n    m = A2.shape[1] if A2.ndim == 2 else A2.size\n    \n    # Compute the binary cross-entropy cost\n    cost = -1/m * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    \n    # Return the cost rounded to 6 decimal places\n    return round(cost, 6)\n\n# Example usage:\nA2 = np.array([[0.8, 0.9, 0.4, 0.2]])\nY  = np.array([[1,   1,   0,   0]])\nprint(compute_cost(A2, Y))  # Output: 0.265618\n```\n\nThis script defines the `compute_cost` function, which calculates the binary cross-entropy cost between predicted probabilities `A2` and ground-truth labels `Y`. The function clips the predicted probabilities to avoid taking the logarithm of zero, computes the cost, and returns it rounded to six decimal places. The example usage demonstrates how to call the function with sample data."}
{"task_id": 82, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | \"np.ndarray\", epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    n = len(Q)\n    greedy_index = np.argmax(Q)  # Get the index of the first maximum Q-value\n    base_prob = epsilon / n\n    probabilities = np.full(n, base_prob)\n    probabilities[greedy_index] = 1 - epsilon + base_prob\n    \n    # Ensure the probabilities sum to 1 within the required tolerance\n    probabilities = probabilities / np.sum(probabilities)\n    \n    # Round to 4 decimal places\n    probabilities = np.round(probabilities, 4)\n    \n    return probabilities.tolist()\n\n# Example usage:\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1\nprint(epsilon_soft(Q, epsilon))  # Output: [0.925, 0.025, 0.025, 0.025]\n```\n\nThis script defines the `epsilon_soft` function, which calculates the \u03b5-soft probabilities for a given set of Q-values and an exploration parameter \u03b5. The function ensures that the probabilities are rounded to four decimal places and sum to 1 within a numerical tolerance of 1\u00d710\u207b\u00b9\u00b2. The example usage demonstrates how to call the function and verify its output."}
{"task_id": 86, "completion_id": 0, "completion": "Certainly! Below is the complete Python script that implements the `aggregate_random_forest_votes` function as described in the task:\n\n```python\nfrom collections import Counter\n\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    # Number of samples\n    num_samples = len(predictions[0])\n    \n    # Initialize the result list\n    aggregated_predictions = []\n    \n    # Iterate over each sample\n    for sample_index in range(num_samples):\n        # Collect votes for the current sample\n        votes = [tree_predictions[sample_index] for tree_predictions in predictions]\n        \n        # Count the votes for each class label\n        vote_counts = Counter(votes)\n        \n        # Find the class label with the highest vote count\n        # In case of a tie, the smallest label is chosen\n        most_common_votes = vote_counts.most_common()\n        max_count = most_common_votes[0][1]\n        best_label = min(label for label, count in most_common_votes if count == max_count)\n        \n        # Append the best label to the result list\n        aggregated_predictions.append(best_label)\n    \n    return aggregated_predictions\n\n# Example usage:\npredictions = [\n    [1, 0, 1, 1],\n    [0, 0, 1, 1],\n    [1, 1, 1, 0]\n]\n\nprint(aggregate_random_forest_votes(predictions))  # Output: [1, 0, 1, 1]\n```\n\n### Explanation:\n1. **Initialization**: We determine the number of samples by checking the length of the first inner list.\n2. **Iterate Over Samples**: For each sample, we collect the predictions from all trees.\n3. **Count Votes**: We use `Counter` from the `collections` module to count the occurrences of each class label for the current sample.\n4. **Determine Majority Vote**: We find the class label with the highest vote count. In case of a tie, we use the `min` function to select the smallest label.\n5. **Store Result**: The determined label is appended to the result list.\n6. **Return Result**: Finally, the function returns the list of aggregated predictions.\n\nThis script should work for any valid input as specified in the task description."}
{"task_id": 88, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    # Convert input to a numpy array if it's not already\n    if isinstance(z, (int, float)):\n        z = np.array([z])\n    elif isinstance(z, list):\n        z = np.array(z)\n    \n    # Compute the softplus using np.logaddexp for numerical stability\n    result = np.logaddexp(0.0, z)\n    \n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n    \n    # Convert the result to a list if the input was not a scalar\n    if isinstance(z, np.ndarray) and z.size > 1:\n        return result.tolist()\n    else:\n        return float(result[0])\n\n# Example usage:\nz = np.array([-1000, 0, 3])\nprint(softplus(z))  # Output: [0.0, 0.6931, 3.0486]\n```\n\nThis script defines the `softplus` function, which computes the softplus activation in a numerically stable manner using `np.logaddexp`. It handles scalar, list, and NumPy array inputs, and returns the results rounded to 4 decimal places. For non-scalar inputs, the result is converted to a pure Python list."}
{"task_id": 90, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Check if policy has ev_estimates and if it is not empty\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    \n    # Extract true expected values and policy estimates\n    true_evs = bandit['arm_evs']\n    estimates = policy['ev_estimates']\n    \n    # Sort the estimates based on arm index\n    sorted_estimates = [estimates[i] for i in sorted(estimates.keys())]\n    \n    # Calculate squared errors\n    squared_errors = [(true - est) ** 2 for true, est in zip(true_evs, sorted_estimates)]\n    \n    # Compute mean-squared error\n    mse_value = np.mean(squared_errors)\n    \n    # Return the result rounded to 4 decimal places\n    return round(mse_value, 4)\n\n# Example usage:\nbandit = {\"arm_evs\": [0.5, 0.2, 0.9]}\npolicy = {\"ev_estimates\": {0: 0.4, 1: 0.25, 2: 0.8}}\nprint(mse(bandit, policy))  # Output: 0.0075\n```\n\nThis script defines the `mse` function as specified, which calculates the mean-squared error between the true expected values of the arms and the policy's estimates. It handles cases where the policy does not have any estimates by returning `numpy.nan`. The function sorts the estimates by arm index before computing the squared errors to ensure correct comparison with the true expected values."}
{"task_id": 96, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # Step 1: Build vocabulary and N-gram frequency tables\n    vocab = set()\n    ngram_counts = defaultdict(Counter)\n    unigram_counts = Counter()\n    \n    for sentence in corpus:\n        words = sentence.split()\n        vocab.update(words)\n        unigram_counts.update(words)\n        \n        for n in range(1, N + 1):\n            for i in range(len(words) - n + 1):\n                ngram = tuple(words[i:i + n])\n                ngram_counts[n][ngram] += 1\n    \n    # Add <UNK> to vocabulary\n    vocab.add(\"<UNK>\")\n    vocab_size = len(vocab)\n    \n    # Step 2: Handle the target sentence\n    target_words = sequence.split()\n    if len(target_words) < N:\n        return 0.0\n    \n    log_prob = 0.0\n    \n    for n in range(1, N + 1):\n        for i in range(len(target_words) - n + 1):\n            ngram = tuple(target_words[i:i + n])\n            context = ngram[:-1]\n            word = ngram[-1]\n            \n            # Replace unseen words with <UNK>\n            if word not in vocab:\n                word = \"<UNK>\"\n                ngram = context + (word,)\n            \n            count_ngram = ngram_counts[n][ngram]\n            count_context = sum(ngram_counts[n-1][context]) if n > 1 else len(target_words) - n + 1\n            \n            # Additive smoothing\n            prob = (count_ngram + K) / (count_context + K * vocab_size)\n            log_prob += math.log(prob)\n    \n    return round(log_prob, 4)\n\n# Example usage:\ncorpus = [\"the cat sat on the mat\", \"the dog sat on the log\"]\nsequence = \"the cat sat on the log\"\nN = 2\nK = 1\nprint(additive_ngram_log_prob(corpus, sequence, N, K))  # Output: -6.9930\n```"}
{"task_id": 108, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    N, M = X.shape\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    \n    def compute_loss(X, W, H, alpha):\n        return np.linalg.norm(X - W @ H, 'fro')**2 + alpha * (np.linalg.norm(W, 'fro')**2 + np.linalg.norm(H, 'fro')**2)\n    \n    for iteration in range(max_iter):\n        # Fix H, solve for W\n        for i in range(N):\n            W[i, :] = np.linalg.solve(H @ H.T + alpha * np.eye(K), H @ X[i, :])\n        \n        # Fix W, solve for H\n        for j in range(M):\n            H[:, j] = np.linalg.solve(W.T @ W + alpha * np.eye(K), W.T @ X[:, j])\n        \n        # Compute the loss\n        loss = compute_loss(X, W, H, alpha)\n        \n        # Check for convergence\n        if loss < tol:\n            break\n    \n    # Reconstruct the matrix\n    X_hat = W @ H\n    return X_hat.round(4).tolist()\n\n# Example usage:\nX = np.array([[1., 2.], [3., 4.]])\nK = 2\nalpha = 0.0\nmax_iter = 1000\ntol = 1e-6\nprint(als_factorization(X, K, alpha, max_iter, tol))\n```\n\nThis script defines the `als_factorization` function, which performs regularized Alternating Least Squares (ALS) matrix factorization. The function initializes the factor matrices `W` and `H` with a fixed random seed, iteratively updates them, and checks for convergence based on the specified tolerance and maximum number of iterations. The reconstructed matrix is returned as a list of lists, rounded to four decimal places."}
{"task_id": 109, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n\n    def kmeans_plus_plus(X, K):\n        # Step 1: Choose one center uniformly at random from among the data points.\n        centroids = [X[np.random.choice(X.shape[0])]]\n        \n        # Step 2: For each data point x, compute D(x), the distance between x and the nearest center that has already been chosen.\n        for _ in range(1, K):\n            distances = np.array([min([np.linalg.norm(x - c) for c in centroids]) for x in X])\n            # Step 3: Choose one new data point at random as a new center, using a weighted probability distribution where a point x is chosen with probability proportional to D(x)^2.\n            probabilities = distances ** 2 / np.sum(distances ** 2)\n            new_centroid = X[np.random.choice(X.shape[0], p=probabilities)]\n            centroids.append(new_centroid)\n        \n        return np.array(centroids)\n\n    def assign_clusters(X, centroids):\n        return np.argmin(np.linalg.norm(X[:, np.newaxis] - centroids, axis=2), axis=1)\n\n    def update_centroids(X, labels, centroids):\n        new_centroids = np.array([X[labels == k].mean(axis=0) if np.any(labels == k) else centroids[k] for k in range(K)])\n        return new_centroids\n\n    # Initialize centroids using K-Means++\n    centroids = kmeans_plus_plus(X, K)\n    \n    for _ in range(max_iter):\n        # Assign clusters\n        labels = assign_clusters(X, centroids)\n        # Update centroids\n        new_centroids = update_centroids(X, labels, centroids)\n        \n        # Check for convergence\n        if np.all(centroids == new_centroids):\n            break\n        \n        centroids = new_centroids\n\n    # Round centroids to 4 decimal places and sort them\n    centroids = np.round(centroids, 4)\n    sorted_centroids = sorted(centroids, key=lambda x: (x[0], tuple(x)))\n    \n    return sorted_centroids\n\n# Example usage:\nX = np.array([[1, 2], [1, 4], [1, 0], [10, 2], [10, 4], [10, 0]])\nK = 2\nrandom_state = 42\nprint(kmeans(X, K, random_state=random_state))\n```\n\nThis script implements the K-Means clustering algorithm with K-Means++ initialization. It includes functions for initializing centroids, assigning clusters, and updating centroids. The main function `kmeans` orchestrates these steps and ensures reproducibility by setting random seeds. The final centroids are rounded to four decimal places and sorted as specified."}
{"task_id": 111, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes a string into a fixed-length list of integer token ids.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text]\n    # Truncate or pad the sequence to the desired length\n    return encoded[:time_steps] + [0] * max(0, time_steps - len(encoded))\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list of integer ids back to a human-readable string.\"\"\"\n    return ''.join(inverse_vocab.get(index, '') for index in indices if index != 0)\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes the input text, runs it through the model, and decodes the output.\"\"\"\n    # Encode the input text\n    encoded_input = string_to_int(text, TIME_STEPS, input_vocabulary)\n    # Convert to a numpy array and add a batch dimension\n    encoded_input = np.array(encoded_input).reshape(1, -1)\n    # Get the model prediction\n    prediction = model.predict(encoded_input)\n    # Apply argmax to get the predicted ids\n    predicted_ids = np.argmax(prediction, axis=-1)[0]\n    # Decode the predicted ids to a string\n    decoded_output = int_to_string(predicted_ids, inv_output_vocabulary)\n    return decoded_output\n\n# Example identity model for demonstration purposes\ndef identity_model(input_data):\n    \"\"\"An identity model that returns the input data as the output.\"\"\"\n    return input_data\n\n# Example usage\nif __name__ == \"__main__\":\n    input_vocabulary = {'a': 1, 'b': 2, 'c': 3, ' ': 27}\n    inv_output_vocabulary = {1: 'a', 2: 'b', 3: 'c', 27: ' '}\n    text = \"hello\"\n    # Since the identity model returns the input as output, the result should be the same as the input\n    result = run_example(identity_model, input_vocabulary, inv_output_vocabulary, text)\n    print(result)  # Output: \"hello\"\n```\n\nThis script defines the required functions `string_to_int`, `int_to_string`, and `run_example` to handle character-level sequence encoding and decoding. The `run_example` function demonstrates how to use these functions with a simple identity model that returns the input as the output."}
{"task_id": 113, "completion_id": 0, "completion": "```python\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n\n    predictions = []\n    for example in examples:\n        # Call the run_example function to get the list of characters\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        # Concatenate the characters into a single string\n        predicted_string = ''.join(output_chars)\n        # Print the input and output\n        print(f\"input:  {example}\")\n        print(f\"output: {predicted_string}\")\n        # Collect the predicted string\n        predictions.append(predicted_string)\n    \n    return predictions\n\n# Assuming run_example is defined somewhere in the environment\ndef run_example(model, input_vocabulary, inv_output_vocabulary, example):\n    # This is a placeholder for the actual implementation of run_example\n    # For demonstration purposes, we'll just call the model directly\n    return list(model(example))\n\n# Example usage\nif __name__ == \"__main__\":\n    # Define a simple model for demonstration\n    model = lambda s: s[::-1]\n    input_vocabulary = None\n    inv_output_vocabulary = None\n    examples = [\"hello\", \"world\"]\n\n    # Run the examples\n    predictions = run_examples(model, input_vocabulary, inv_output_vocabulary, examples)\n    print(predictions)\n```\n\nIn this script, the `run_examples` function processes each input string using the provided `model` and prints the input and output. It collects all predictions in a list and returns it. The `run_example` function is assumed to be defined elsewhere and is used to get the model's output as a list of characters. For demonstration purposes, `run_example` is implemented to simply call the model and convert the result to a list of characters."}
{"task_id": 115, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    # Ensure y is a column vector\n    y = y.reshape(-1, 1)\n    \n    # Compute the linear combination z = X \u00b7 w\n    z = X @ w\n    \n    # Compute the predicted probabilities p = \u03c3(z)\n    p = 1 / (1 + np.exp(-z))\n    \n    # Avoid numerical issues by clamping probabilities to [\u03b5, 1-\u03b5]\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    \n    # Compute the average binary cross-entropy loss\n    m = X.shape[0]\n    loss = -1/m * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    \n    # Compute the gradient of the loss with respect to the weights\n    gradient = 1/m * X.T @ (p - y)\n    \n    # Return the loss and gradient rounded to 4 decimals\n    return round(loss.item(), 4), gradient.round(4).tolist()\n\n# Example usage:\nX = np.array([[0,0], [0,1], [1,0], [1,1]])\ny = np.array([0, 0, 0, 1])\nw = np.array([[0.5], [0.5]])\n\nloss, gradient = logistic_loss_and_gradient(X, y, w)\nprint(loss, gradient)  # Output: 0.7386 [[0.0884], [0.0884]]\n```\n\nThis script defines the `logistic_loss_and_gradient` function, which calculates the binary cross-entropy loss and its gradient for logistic regression. The function handles numerical stability by clamping predicted probabilities to a small range away from 0 and 1. The example usage demonstrates how to call the function and print the results."}
{"task_id": 118, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n\n    m, n = X_train.shape\n    weights = np.ones(m) / m\n    stumps = []\n    alphas = []\n\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = None\n        best_threshold = None\n        best_polarity = None\n\n        for feature_i in range(n):\n            thresholds = np.unique(X_train[:, feature_i])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(m)\n                    predictions[X_train[:, feature_i] * polarity < threshold * polarity] = -1\n\n                    weighted_error = np.sum(weights[predictions != y_train])\n\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        polarity = -polarity\n\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump = feature_i\n                        best_threshold = threshold\n                        best_polarity = polarity\n\n        epsilon = min_error + 1e-10  # To avoid division by zero\n        alpha = 0.5 * np.log((1.0 - epsilon) / epsilon)\n        alphas.append(alpha)\n\n        predictions = np.ones(m)\n        predictions[X_train[:, best_stump] * best_polarity < best_threshold * best_polarity] = -1\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n\n        stumps.append((best_stump, best_threshold, best_polarity))\n\n    # Predict on X_test\n    m_test, _ = X_test.shape\n    final_predictions = np.zeros(m_test)\n\n    for alpha, (feature_i, threshold, polarity) in zip(alphas, stumps):\n        predictions = np.ones(m_test)\n        predictions[X_test[:, feature_i] * polarity < threshold * polarity] = -1\n        final_predictions += alpha * predictions\n\n    return [1 if pred >= 0 else -1 for pred in final_predictions]\n\n# Example usage:\nX_train = np.array([[0, 0], [1, 1], [1, 0], [0, 1]])\ny_train = np.array([-1, 1, 1, -1])\nX_test = np.array([[0.8, 0.8], [0.2, 0.1]])\nn_clf = 3\n\nprint(adaboost_predict(X_train, y_train, X_test, n_clf))  # Output: [1, -1]\n```\n\nThis script implements the AdaBoost algorithm using decision stumps as weak learners. It trains the model on the provided training data and predicts the labels for the test data. The function handles the case where `n_clf` is less than 1 by setting it to 1. The predictions are aggregated by the sign of the weighted sum of the stump votes."}
{"task_id": 128, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    # Step 1: Compute the within-class scatter matrix S_W\n    unique_classes = np.unique(y)\n    d = X.shape[1]\n    S_W = np.zeros((d, d))\n    for c in unique_classes:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        S_W += np.sum((X_c - mean_c).T @ (X_c - mean_c), axis=1)\n\n    # Step 2: Compute the between-class scatter matrix S_B\n    mean_overall = np.mean(X, axis=0)\n    S_B = np.zeros((d, d))\n    for c in unique_classes:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        N_c = X_c.shape[0]\n        S_B += N_c * (mean_c - mean_overall).reshape(-1, 1) @ (mean_c - mean_overall).reshape(1, -1)\n\n    # Step 3: Form the matrix A = pinv(S_W) * S_B\n    A = np.linalg.pinv(S_W) @ S_B\n\n    # Step 4: Perform eigen-decomposition of A\n    eigenvalues, eigenvectors = np.linalg.eigh(A)\n\n    # Step 5: Sort the eigen-pairs in descending order of the eigen-values\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[sorted_indices]\n    eigenvectors = eigenvectors[:, sorted_indices]\n\n    # Step 6: Deterministic sign fix\n    for i in range(eigenvectors.shape[1]):\n        first_non_zero_idx = np.where(eigenvectors[:, i] != 0)[0][0]\n        if eigenvectors[first_non_zero_idx, i] < 0:\n            eigenvectors[:, i] *= -1\n\n    # Step 7: Project X on the first `n_components` eigenvectors\n    if n_components == 0:\n        return []\n    W = eigenvectors[:, :n_components]\n    X_projected = X @ W\n\n    # Round every element to four decimal places\n    X_projected_rounded = np.round(X_projected, 4)\n\n    # Convert to list of lists\n    return X_projected_rounded.tolist()\n\n# Example usage\nX = np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]])\ny = np.array([0,0,0,0,1,1,1,1])\nn_components = 1\nprint(multi_class_lda(X, y, n_components))\n```\n\nThis script implements the multi-class Linear Discriminant Analysis (LDA) as described in the task. It computes the within-class and between-class scatter matrices, solves the generalized eigenvalue problem, and projects the data onto the first `n_components` discriminant directions. The results are rounded to four decimal places and returned as a list of lists."}
{"task_id": 140, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that solves the \"Escape from Fire Maze\" problem. The script uses breadth-first search (BFS) to simulate the spread of fire and the movement of the agent.\n\n```python\nfrom collections import deque\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if grid[0][0] == 'F' or grid[n-1][n-1] == 'F':\n        return -1\n    if n == 1 and grid[0][0] == '.':\n        return 0\n\n    # Directions for moving up, down, left, right\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    # Initialize fire queue and agent queue\n    fire_queue = deque()\n    agent_queue = deque([(0, 0, 0)])  # (row, col, time)\n\n    # Initialize fire times\n    fire_times = [[math.inf] * n for _ in range(n)]\n\n    # Add all initial fire sources to the fire queue\n    for r in range(n):\n        for c in range(n):\n            if grid[r][c] == 'F':\n                fire_queue.append((r, c, 0))\n                fire_times[r][c] = 0\n\n    # BFS to spread fire\n    while fire_queue:\n        r, c, t = fire_queue.popleft()\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < n and 0 <= nc < n and grid[nr][nc] == '.' and fire_times[nr][nc] == math.inf:\n                fire_times[nr][nc] = t + 1\n                fire_queue.append((nr, nc, t + 1))\n\n    # BFS for the agent\n    visited = set()\n    while agent_queue:\n        r, c, t = agent_queue.popleft()\n        if (r, c) in visited:\n            continue\n        visited.add((r, c))\n\n        # Check if the agent has reached the goal\n        if r == n - 1 and c == n - 1:\n            return t\n\n        # Move the agent\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < n and 0 <= nc < n and grid[nr][nc] == '.' and (nr, nc) not in visited:\n                # Agent can only move to a cell if it is not on fire at that time\n                if t + 1 < fire_times[nr][nc]:\n                    agent_queue.append((nr, nc, t + 1))\n\n    return -1\n\n# Example usage:\ngrid = [\"..\", \"..\"]\nprint(escape_fire_maze(grid))  # Output: 2\n```\n\n### Explanation:\n1. **Initialization**:\n   - We initialize a queue for the fire and another for the agent.\n   - We also initialize a `fire_times` matrix to keep track of when each cell catches fire.\n\n2. **Fire Spread Simulation**:\n   - We use BFS to simulate the spread of fire from all initial fire sources. Each cell that catches fire is marked with the time it catches fire.\n\n3. **Agent Movement Simulation**:\n   - We use BFS to simulate the agent's movement. The agent can only move to a cell if it is not on fire at that time.\n   - If the agent reaches the goal, we return the time taken.\n\n4. **Edge Cases**:\n   - If the start or goal cell is on fire, the agent cannot escape, so we return `-1`.\n   - If the maze is 1x1 and the single cell is free, the agent is already at the goal, so we return `0`.\n\nThis solution efficiently handles the problem constraints and ensures that the agent finds the shortest path to the goal while avoiding fire."}
{"task_id": 141, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n    \n    def euclidean_distance(a, b):\n        return np.linalg.norm(a - b, ord=2)\n    \n    def manhattan_distance(a, b):\n        return np.linalg.norm(a - b, ord=1)\n    \n    def cosine_distance(a, b):\n        dot_product = np.dot(a, b)\n        norm_a = np.linalg.norm(a)\n        norm_b = np.linalg.norm(b)\n        cosine_sim = dot_product / (norm_a * norm_b) if (norm_a * norm_b) != 0 else 0\n        return 1 - cosine_sim\n    \n    # Choose the distance function based on the metric\n    if metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        distance_func = euclidean_distance\n    \n    predictions = []\n    \n    for test_sample in X_test:\n        # Calculate distances from the test sample to all training samples\n        distances = [distance_func(test_sample, train_sample) for train_sample in X_train]\n        \n        # Get the indices of the k nearest neighbors\n        k_nearest_indices = np.argsort(distances)[:k]\n        \n        # Get the labels of the k nearest neighbors\n        k_nearest_labels = y_train[k_nearest_indices]\n        \n        # Determine the most common label among the k nearest neighbors\n        unique_labels, counts = np.unique(k_nearest_labels, return_counts=True)\n        most_common_label = unique_labels[np.argmax(counts)]\n        \n        # In case of a tie, return the smallest label value\n        if len(unique_labels) > 1 and np.max(counts) == 1:\n            most_common_label = np.min(unique_labels)\n        \n        predictions.append(most_common_label)\n    \n    return np.array(predictions)\n\n# Example usage:\nX_train = np.array([[0, 0], [1, 1], [0, 1], [1, 0]])\ny_train = np.array([0, 0, 1, 1])\nX_test  = np.array([[0.9, 0.9]])\nk = 3\nmetric = 'euclidean'\n\nprint(knn_predict(X_train, y_train, X_test, k, metric))  # Output: [1]\n```\n\nThis script defines a `knn_predict` function that implements the k-Nearest Neighbors algorithm with support for Euclidean, Manhattan, and Cosine distance metrics. It handles ties by returning the smallest label value and defaults to Euclidean distance if an unknown metric is provided."}
{"task_id": 146, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n    \n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b))\n    \n    def cosine_distance(a, b, eps=1e-12):\n        dot_product = np.dot(a, b)\n        norm_a = np.linalg.norm(a)\n        norm_b = np.linalg.norm(b)\n        return 1 - dot_product / (norm_a * norm_b + eps)\n    \n    # Choose the appropriate distance function\n    if metric == 'euclidean':\n        distance_func = euclidean_distance\n    elif metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        raise ValueError(\"Unsupported distance metric. Choose from 'euclidean', 'manhattan', or 'cosine'.\")\n    \n    predictions = []\n    \n    for test_sample in X_test:\n        # Compute distances from the test sample to all training samples\n        distances = [distance_func(test_sample, train_sample) for train_sample in X]\n        \n        # Get the indices of the k nearest neighbors\n        nearest_indices = np.argsort(distances)[:k]\n        \n        # Get the labels of the k nearest neighbors\n        nearest_labels = y[nearest_indices]\n        \n        # Perform majority vote\n        unique_labels, counts = np.unique(nearest_labels, return_counts=True)\n        majority_vote = unique_labels[np.argmax(counts)]\n        \n        # In case of a tie, return the smallest label\n        if np.sum(counts == np.max(counts)) > 1:\n            majority_vote = unique_labels[np.argmin(unique_labels[counts == np.max(counts)])]\n        \n        predictions.append(majority_vote)\n    \n    return predictions\n\n# Example usage:\nX = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\ny = np.array([0, 0, 0, 1])\nX_test = np.array([[0.9, 0.9]])\nk = 3\nmetric = 'euclidean'\nprint(knn_predict(X, y, X_test, k, metric))  # Output: [0]\n```\n\nThis script defines a `knn_predict` function that implements the k-Nearest Neighbors algorithm from scratch using NumPy. It supports three distance metrics: Euclidean, Manhattan, and Cosine. The function computes the distances between each test sample and all training samples, finds the k nearest neighbors, and performs a majority vote to determine the predicted label for each test sample. In case of a tie, it returns the smallest label."}
{"task_id": 155, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a numpy array if it isn't already\n    state = np.array(state)\n    \n    # First layer: Linear transformation followed by ReLU\n    hidden1 = np.maximum(0, np.dot(state, weights['W1']) + weights['b1'])\n    \n    # Second layer: Linear transformation followed by ReLU\n    hidden2 = np.maximum(0, np.dot(hidden1, weights['W2']) + weights['b2'])\n    \n    # Output layer: Linear transformation followed by tanh\n    action = np.tanh(np.dot(hidden2, weights['W3']) + weights['b3'])\n    \n    # Return the action vector rounded to 4 decimal places\n    return [round(a, 4) for a in action]\n\n# Example usage:\nstate = [0.5, -0.5]\nweights = {\n    \"W1\": np.array([[1.0, 0.0],\n                    [0.0, 1.0]]),\n    \"b1\": np.array([0.0, 0.0]),\n    \"W2\": np.array([[1.0, 0.0],\n                    [0.0, 1.0]]),\n    \"b2\": np.array([0.0, 0.0]),\n    \"W3\": np.array([[1.0],\n                    [1.0]]),\n    \"b3\": np.array([0.0])\n}\n\n# Expected output: [0.4621]\nprint(actor_forward(state, weights))\n```\n\nThis script defines the `actor_forward` function, which performs the forward pass of a two-hidden-layer actor network using NumPy. The function takes a state vector and a dictionary of weights and biases, computes the action vector through the specified network architecture, and returns the action vector rounded to four decimal places. The example usage demonstrates how to call the function with a sample state and weights, and prints the expected output."}
{"task_id": 160, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    m, n = X.shape\n    \n    # Add intercept column if required\n    if fit_intercept:\n        X = np.hstack([np.ones((m, 1)), X])\n    else:\n        X = np.hstack([np.zeros((m, 1)), X])\n    \n    # Initialize weights to zero\n    w = np.zeros(n + 1)\n    \n    # Coordinate descent\n    for _ in range(max_iters):\n        for j in range(n + 1):\n            if j == 0 and fit_intercept:\n                # Recompute intercept\n                w[j] = np.mean(y - X[:, 1:].dot(w[1:]))\n            else:\n                # Temporarily set the current weight to 0\n                w_j_old = w[j]\n                w[j] = 0\n                \n                # Compute partial residual\n                r_j = y - X.dot(w)\n                \n                # Update weight using soft-thresholding\n                a = X[:, j].dot(r_j)\n                tau = lambda_param * m\n                w[j] = np.sign(a) * max(abs(a) - tau, 0) / np.sum(X[:, j] ** 2)\n    \n    # Extract intercept and weights\n    bias = w[0] if fit_intercept else 0.0\n    weights = w[1:] if fit_intercept else w\n    \n    # Round the results to 4 decimal places\n    weights_list = [round(weight, 4) for weight in weights]\n    bias_float = round(bias, 4)\n    \n    return weights_list, bias_float\n\n# Example usage\nX = np.array([[1], [2], [3]])\ny = np.array([2, 4, 6])\nlambda_param = 0.0\nmax_iters = 100\nfit_intercept = True\n\nweights, bias = fit_lasso(X, y, lambda_param, max_iters, fit_intercept)\nprint(weights, bias)  # Output should be ([2.0], 0.0)\n```\n\nThis script implements the Lasso regression using coordinate descent as described in the task. It handles the intercept appropriately and uses the soft-thresholding operator to update the weights. The results are rounded to four decimal places as required."}
{"task_id": 165, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are not already\n    x = np.array(x) if not isinstance(x, np.ndarray) else x\n    y = np.array(y) if not isinstance(y, np.ndarray) else y\n    \n    # Check if the lengths of the vectors are the same\n    if len(x) != len(y):\n        return -1\n    \n    # Calculate the Hamming distance\n    distance = np.mean(x != y)\n    \n    # Return the distance rounded to 4 decimal places\n    return round(distance, 4)\n\n# Example usage:\nx = [1, 0, 1, 1]\ny = [1, 1, 0, 1]\nprint(hamming_distance(x, y))  # Output: 0.5\n```\n\nThis script defines a function `hamming_distance` that computes the normalized Hamming distance between two 1-D integer vectors. It handles both Python lists and NumPy arrays, checks for equal lengths, and returns the distance rounded to four decimal places. If the input vectors have different lengths, it returns -1."}
{"task_id": 169, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if N <= 0:\n        raise ValueError(\"N must be a positive integer.\")\n    \n    if window == \"hamming\":\n        w = [0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1)) for n in range(N)]\n    elif window == \"hann\":\n        w = [0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1)) for n in range(N)]\n    elif window == \"blackman_harris\":\n        a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n        w = [a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + \n             a2 * np.cos(4 * np.pi * n / (N - 1)) - \n             a3 * np.cos(6 * np.pi * n / (N - 1)) for n in range(N)]\n    elif window == \"generalized_cosine\":\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be provided for generalized_cosine window.\")\n        M = len(coefficients)\n        w = [sum(a_k * np.cos(2 * k * np.pi * n / (N - 1)) for k, a_k in enumerate(coefficients)) for n in range(N)]\n    else:\n        raise ValueError(f\"Unknown window type: {window}\")\n    \n    return [round(coef, 4) for coef in w]\n\n# Example usage:\n# print(generate_window(\"blackman_harris\", 5))\n# Output: [0.0001, 0.2175, 1.0, 0.2175, 0.0001]\n```\n\nThis script defines the `generate_window` function, which generates window coefficients for the specified window type and number of samples `N`. It handles the special cases and ensures that the coefficients are rounded to four decimal places before returning them as a regular Python list."}
{"task_id": 171, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    \n    # Convert inputs to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Check if all labels are the same\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) == 1:\n        return [unique_labels[0]] * len(X_test)\n    \n    # Map labels to {0, 1}\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train_mapped = np.array([label_map[label] for label in y_train])\n    \n    # Add intercept term (bias) to the data\n    X_train = np.hstack([np.ones((X_train.shape[0], 1)), X_train])\n    X_test = np.hstack([np.ones((X_test.shape[0], 1)), X_test])\n    \n    # Initialize weights\n    weights = np.zeros(X_train.shape[1])\n    \n    # Sigmoid function\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    \n    # Mini-batch Gradient Descent\n    for epoch in range(epochs):\n        # Shuffle the training data\n        indices = np.arange(X_train.shape[0])\n        np.random.shuffle(indices)\n        X_train_shuffled = X_train[indices]\n        y_train_shuffled = y_train_mapped[indices]\n        \n        # Mini-batches\n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train_shuffled[i:i + batch_size]\n            y_batch = y_train_shuffled[i:i + batch_size]\n            \n            # Predict probabilities\n            z = np.dot(X_batch, weights)\n            y_pred = sigmoid(z)\n            \n            # Compute gradient\n            gradient = np.dot(X_batch.T, (y_pred - y_batch)) / y_batch.size\n            \n            # Update weights\n            weights -= learning_rate * gradient\n    \n    # Predict on test set\n    z_test = np.dot(X_test, weights)\n    y_pred_test = sigmoid(z_test)\n    y_pred_test_labels = (y_pred_test >= 0.5).astype(int)\n    \n    # Map predictions back to original labels\n    reverse_label_map = {v: k for k, v in label_map.items()}\n    y_pred_test_original_labels = [reverse_label_map[label] for label in y_pred_test_labels]\n    \n    return y_pred_test_original_labels\n\n# Example usage:\nX_train = [[0], [1], [2], [3]]\ny_train = [0, 0, 1, 1]\nX_test  = [[1.5], [2.5]]\nprint(logistic_regression_train_predict(X_train, y_train, X_test))  # Output: [0, 1]\n```\n\nThis script implements a binary logistic regression classifier using mini-batch gradient descent. It handles the special case where all training labels are identical by predicting that unique label for every test sample. The function maps the input labels to `{0, 1}` for internal processing and maps them back to the original labels before returning predictions."}
{"task_id": 176, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    \"\"\"Fill in here. The final implementation must follow the specification given in the task\n    description and return a list with the predicted class labels for *X_test*.\"\"\"\n    \n    # Convert inputs to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Initialize sample weights\n    n_samples, n_features = X_train.shape\n    weights = np.ones(n_samples) / n_samples\n    \n    # List to store the weak learners (stumps)\n    stumps = []\n    \n    for _ in range(n_estimators):\n        # Initialize variables to find the best stump\n        min_error = float('inf')\n        best_feature_index = None\n        best_threshold = None\n        best_polarity = None\n        \n        # Iterate over all features\n        for feature_index in range(n_features):\n            # Get unique values in the current feature column\n            thresholds = np.unique(X_train[:, feature_index])\n            \n            # Iterate over all possible thresholds\n            for threshold in thresholds:\n                # Try both polarities\n                for polarity in [1, -1]:\n                    # Predictions for the current stump\n                    predictions = np.ones(n_samples)\n                    if polarity == 1:\n                        predictions[X_train[:, feature_index] >= threshold] = -1\n                    else:\n                        predictions[X_train[:, feature_index] < threshold] = -1\n                    \n                    # Calculate weighted error\n                    weighted_error = np.sum(weights[predictions != y_train])\n                    \n                    # Update the best stump if the current one has a smaller error\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_feature_index = feature_index\n                        best_threshold = threshold\n                        best_polarity = polarity\n        \n        # If a perfect stump is found, stop early\n        if min_error == 0:\n            break\n        \n        # Calculate alpha (importance) of the best stump\n        alpha = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n        \n        # Update sample weights\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)  # Normalize weights\n        \n        # Store the best stump\n        stumps.append((alpha, best_feature_index, best_threshold, best_polarity))\n    \n    # Make predictions for the test set\n    n_test_samples = X_test.shape[0]\n    test_predictions = np.zeros(n_test_samples)\n    \n    for alpha, feature_index, threshold, polarity in stumps:\n        predictions = np.ones(n_test_samples)\n        if polarity == 1:\n            predictions[X_test[:, feature_index] >= threshold] = -1\n        else:\n            predictions[X_test[:, feature_index] < threshold] = -1\n        test_predictions += alpha * predictions\n    \n    # Convert aggregated predictions to class labels {0, 1}\n    final_predictions = [1 if pred > 0 else 0 for pred in test_predictions]\n    \n    return final_predictions\n\n# Example usage:\nX_train = [[0, 0], [1, 0], [0, 1], [1, 1]]\ny_train = [0, 1, 1, 1]\nX_test = [[0, 0], [1, 1]]\nn_estimators = 3\nprint(adaboost_predict(X_train, y_train, X_test, n_estimators))  # Output: [0, 1]\n```\n\nThis script implements the AdaBoost algorithm using decision stumps as weak learners. It follows the specified rules for selecting the best stump in each iteration, updating sample weights, and making predictions on the test set. The final predictions are returned as a list of integers representing the class labels."}
{"task_id": 178, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n\n    rng = np.random.default_rng(seed)\n    \n    # Initialize particles' positions and velocities\n    positions = rng.uniform(-1, 1, (num_particles, n_dims))\n    velocities = rng.uniform(-0.1, 0.1, (num_particles, n_dims))\n    \n    # Initialize personal best positions and values\n    pbest_positions = positions.copy()\n    pbest_values = np.sum(positions**2, axis=1)\n    \n    # Initialize global best position and value\n    gbest_index = np.argmin(pbest_values)\n    gbest_position = pbest_positions[gbest_index]\n    gbest_value = pbest_values[gbest_index]\n    \n    # PSO parameters\n    w = 0.5  # inertia weight\n    c1 = 1.5  # cognitive weight\n    c2 = 1.5  # social weight\n    \n    for _ in range(num_iterations):\n        # Update velocities and positions\n        r1 = rng.uniform(0, 1, (num_particles, n_dims))\n        r2 = rng.uniform(0, 1, (num_particles, n_dims))\n        \n        velocities = (w * velocities +\n                      c1 * r1 * (pbest_positions - positions) +\n                      c2 * r2 * (gbest_position - positions))\n        \n        positions = np.clip(positions + velocities, -1, 1)\n        \n        # Update personal bests\n        current_values = np.sum(positions**2, axis=1)\n        improved = current_values < pbest_values\n        pbest_values[improved] = current_values[improved]\n        pbest_positions[improved] = positions[improved]\n        \n        # Update global best\n        gbest_index = np.argmin(pbest_values)\n        gbest_position = pbest_positions[gbest_index]\n        gbest_value = pbest_values[gbest_index]\n    \n    return round(gbest_value, 4)\n\n# Example usage:\n# print(particle_swarm_optimisation(n_dims=2, num_particles=30, num_iterations=100, seed=42))\n```\n\nThis script defines a function `particle_swarm_optimisation` that implements the Particle Swarm Optimization (PSO) algorithm to minimize the Sphere function. The function checks for valid input and returns the best value found, rounded to four decimal places. If any input parameter is non-positive, it returns -1. The example usage at the end demonstrates how to call the function with specific parameters."}
{"task_id": 180, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((np.array(point1) - np.array(point2)) ** 2))\n    \n    predictions = []\n    n_train = len(X_train)\n    \n    # Adjust k if it's 0 or larger than the number of training samples\n    if k == 0 or k > n_train:\n        k = n_train\n    \n    for test_point in X_test:\n        # Calculate distances from the test point to all training points\n        distances = [(euclidean_distance(test_point, train_point), index) for index, train_point in enumerate(X_train)]\n        \n        # Sort distances and get the indices of the k nearest neighbors\n        distances.sort(key=lambda x: x[0])\n        k_nearest_indices = [index for _, index in distances[:k]]\n        \n        # Get the labels/values of the k nearest neighbors\n        k_nearest_labels = [y_train[i] for i in k_nearest_indices]\n        \n        if task == \"classification\":\n            # Majority vote for classification\n            most_common = Counter(k_nearest_labels).most_common()\n            max_count = most_common[0][1]\n            # Find the smallest label in case of a tie\n            smallest_label = min(label for label, count in most_common if count == max_count)\n            predictions.append(smallest_label)\n        elif task == \"regression\":\n            # Average for regression\n            average_value = np.mean(k_nearest_labels)\n            predictions.append(round(average_value, 4))\n    \n    return predictions\n\n# Example usage:\nX_train = [[1, 1], [2, 2], [3, 3]]\ny_train = [1, 1, 2]\nX_test = [[2, 2]]\nk = 2\ntask = \"regression\"\nprint(knn_predict(X_train, y_train, X_test, k, task))  # Output: [1.5]\n```"}
{"task_id": 184, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gini_impurity(y):\n    \"\"\"Calculate the Gini impurity for a list of class labels.\"\"\"\n    m = len(y)\n    if m == 0:\n        return 0.0\n    counts = np.bincount(y)\n    probabilities = counts / m\n    return 1.0 - np.sum(probabilities ** 2)\n\ndef weighted_gini(left_y, right_y):\n    \"\"\"Calculate the weighted Gini impurity for a split.\"\"\"\n    m_left, m_right = len(left_y), len(right_y)\n    m_total = m_left + m_right\n    return (m_left / m_total) * gini_impurity(left_y) + (m_right / m_total) * gini_impurity(right_y)\n\ndef best_split(X, y):\n    \"\"\"Find the best feature and threshold to split the data.\"\"\"\n    best_gini = float('inf')\n    best_feature = None\n    best_threshold = None\n    n_features = X.shape[1]\n    \n    for feature in range(n_features):\n        # Sort the data by the current feature\n        sorted_indices = np.argsort(X[:, feature])\n        X_sorted = X[sorted_indices]\n        y_sorted = y[sorted_indices]\n        \n        # Try every possible split point\n        for i in range(1, len(y_sorted)):\n            if X_sorted[i, feature] == X_sorted[i - 1, feature]:\n                continue\n            \n            # Split the data\n            left_y = y_sorted[:i]\n            right_y = y_sorted[i:]\n            \n            # Calculate Gini impurity\n            current_gini = weighted_gini(left_y, right_y)\n            \n            # Update the best split if the current one is better\n            if current_gini < best_gini:\n                best_gini = current_gini\n                best_feature = feature\n                best_threshold = (X_sorted[i, feature] + X_sorted[i - 1, feature]) / 2\n    \n    return best_feature, best_threshold\n\ndef majority_class(y):\n    \"\"\"Return the majority class label.\"\"\"\n    return np.bincount(y).argmax()\n\nclass Node:\n    def __init__(self, feature=None, threshold=None, left=None, right=None, value=None):\n        self.feature = feature\n        self.threshold = threshold\n        self.left = left\n        self.right = right\n        self.value = value\n\ndef build_tree(X, y, depth=0, max_depth=None):\n    \"\"\"Recursively build the decision tree.\"\"\"\n    n_samples, n_features = X.shape\n    n_labels = len(np.unique(y))\n    \n    # Stopping criteria\n    if n_labels == 1 or (max_depth is not None and depth >= max_depth):\n        return Node(value=majority_class(y))\n    \n    # Find the best split\n    best_feature, best_threshold = best_split(X, y)\n    if best_feature is None:\n        return Node(value=majority_class(y))\n    \n    # Split the data\n    left_indices = X[:, best_feature] < best_threshold\n    right_indices = X[:, best_feature] >= best_threshold\n    left_X, left_y = X[left_indices], y[left_indices]\n    right_X, right_y = X[right_indices], y[right_indices]\n    \n    # Create child nodes\n    left_node = build_tree(left_X, left_y, depth + 1, max_depth)\n    right_node = build_tree(right_X, right_y, depth + 1, max_depth)\n    \n    return Node(best_feature, best_threshold, left_node, right_node)\n\ndef predict(node, X):\n    \"\"\"Predict the class label for a single sample.\"\"\"\n    if node.value is not None:\n        return node.value\n    if X[node.feature] < node.threshold:\n        return predict(node.left, X)\n    else:\n        return predict(node.right, X)\n\ndef decision_tree_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    max_depth: int | None = None,\n) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n    root = build_tree(X_train, y_train, max_depth=max_depth)\n    return [predict(root, x) for x in X_test]\n\n# Example usage:\nX_train = np.array([[5.1, 3.5, 1.4],\n                    [4.9, 3.0, 1.4],\n                    [6.2, 3.4, 5.4],\n                    [5.9, 3.0, 5.1]])\n\ny_train = np.array([0, 0, 1, 1])\n\nX_test = np.array([[5.0, 3.4, 1.5],\n                   [6.0, 3.1, 5.0]])\n\nprint(decision_tree_predict(X_train, y_train, X_test))  # Output: [0, 1]\n```\n\nThis script implements a binary decision tree classifier using the CART algorithm from scratch. It includes functions to calculate Gini impurity, find the best split, build the tree recursively, and make predictions. The `decision_tree_predict` function is the main entry point, which constructs the tree and predicts the class labels for the test data."}
{"task_id": 190, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n    \n    # Calculate Gini impurity of the whole dataset\n    def gini(labels):\n        m = len(labels)\n        if m == 0:\n            return 0.0\n        counts = np.bincount(labels)\n        probabilities = counts / m\n        return 1.0 - np.sum(probabilities ** 2)\n    \n    G_whole_dataset = gini(y)\n    best_gini = G_whole_dataset\n    best_feature_index = -1\n    best_threshold_value = None\n    \n    for j in range(n_features):\n        feature_values = X[:, j]\n        unique_values = np.unique(feature_values)\n        \n        for v in unique_values:\n            left_mask = feature_values <= v\n            right_mask = feature_values > v\n            \n            if np.any(left_mask) and np.any(right_mask):\n                y_left = y[left_mask]\n                y_right = y[right_mask]\n                \n                n_left = len(y_left)\n                n_right = len(y_right)\n                n_total = n_left + n_right\n                \n                G_left = gini(y_left)\n                G_right = gini(y_right)\n                \n                G_split = (n_left / n_total) * G_left + (n_right / n_total) * G_right\n                \n                if G_split < best_gini or (np.isclose(G_split, best_gini, atol=1e-12) and (j < best_feature_index or (j == best_feature_index and v < best_threshold_value))):\n                    best_gini = G_split\n                    best_feature_index = j\n                    best_threshold_value = v\n    \n    return (best_feature_index, best_threshold_value, round(best_gini, 4))\n\n# Example usage:\nX = [[2], [3], [10], [19]]\ny = [0, 0, 1, 1]\nprint(best_gini_split(X, y))  # Output: (0, 3, 0.0)\n```\n\nThis script defines the `best_gini_split` function, which calculates the best binary split for a given feature matrix `X` and class labels `y` based on minimizing the weighted Gini impurity. The function handles tie-breaking rules and returns the best feature index, threshold value, and the Gini impurity of the best split, rounded to four decimal places. If no valid split exists, it returns the Gini impurity of the whole dataset."}
{"task_id": 191, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    \n    def validate_vectors(vec1, vec2):\n        try:\n            vec1 = np.array(vec1, dtype=float)\n            vec2 = np.array(vec2, dtype=float)\n        except (ValueError, TypeError):\n            return False\n        \n        if vec1.ndim != 1 or vec2.ndim != 1:\n            return False\n        if len(vec1) != len(vec2) or len(vec1) == 0:\n            return False\n        return True\n\n    def euclidean(vec1, vec2):\n        if not validate_vectors(vec1, vec2):\n            return -1\n        return round(np.linalg.norm(vec1 - vec2), 4)\n\n    def manhattan(vec1, vec2):\n        if not validate_vectors(vec1, vec2):\n            return -1\n        return round(np.sum(np.abs(vec1 - vec2)), 4)\n\n    def chebyshev(vec1, vec2):\n        if not validate_vectors(vec1, vec2):\n            return -1\n        return round(np.max(np.abs(vec1 - vec2)), 4)\n\n    def cosine(vec1, vec2):\n        if not validate_vectors(vec1, vec2):\n            return -1\n        norm1 = np.linalg.norm(vec1)\n        norm2 = np.linalg.norm(vec2)\n        if norm1 == 0 or norm2 == 0:\n            return -1\n        return round(1 - np.dot(vec1, vec2) / (norm1 * norm2), 4)\n\n    metrics = {\n        'euclidean': euclidean,\n        'manhattan': manhattan,\n        'chebyshev': chebyshev,\n        'cosine': cosine\n    }\n\n    return metrics.get(name, lambda *args: -1)\n\n# Example usage:\n# print(metric('euclidean')([1, 2, 3], [4, 5, 6]))  # \u279e 5.1962\n# print(metric('manhattan')([1, 2, 3], [4, 5, 6]))  # \u279e 9.0\n# print(metric('chebyshev')([1, 2, 3], [4, 5, 6]))  # \u279e 5.0\n# print(metric('cosine')([1, 2, 3], [4, 5, 6]))    # \u279e 0.0957\n```\n\nThis script defines a `metric` function that returns a callable for computing one of four specified distance metrics between two vectors. The callable includes validation to ensure the inputs are valid numeric vectors of the same length and handles the cosine metric's additional requirement of non-zero norms. If the metric name is unsupported or validation fails, the callable returns `-1`."}
{"task_id": 197, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\nfrom types import SimpleNamespace\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n\n    if md_action:\n        action_dim = len(env.action_space.spaces)\n        for space in env.action_space.spaces:\n            if hasattr(space, 'n'):\n                n_actions_per_dim.append(space.n)\n            elif hasattr(space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n                action_ids = None\n        if all(isinstance(n, int) for n in n_actions_per_dim):\n            action_ids = list(product(*(range(n) for n in n_actions_per_dim)))\n    else:\n        if cont_action:\n            action_dim = env.action_space.shape[0]\n            n_actions_per_dim = [np.inf] * action_dim\n            action_ids = None\n        else:\n            action_dim = 1\n            n_actions_per_dim = [env.action_space.n]\n            action_ids = list(product(range(env.action_space.n)))\n\n    return n_actions_per_dim, action_ids, action_dim\n\n# Example usage:\nenv1 = SimpleNamespace(action_space=SimpleNamespace(spaces=[SimpleNamespace(n=2), SimpleNamespace(n=3)]))\nprint(action_stats(env1, md_action=True, cont_action=False))  # Output: ([2, 3], [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)], 2)\n\nenv2 = SimpleNamespace(action_space=SimpleNamespace(shape=(2,)))\nprint(action_stats(env2, md_action=True, cont_action=True))  # Output: ([inf, inf], None, 2)\n\nenv3 = SimpleNamespace(action_space=SimpleNamespace(n=4))\nprint(action_stats(env3, md_action=False, cont_action=False))  # Output: ([4], [(0,), (1,), (2,), (3,)], 1)\n```\n\nThis script defines the `action_stats` function as required, handling both continuous and discrete action spaces, and both single- and multi-dimensional cases. It also includes example usage to demonstrate the function's behavior."}
{"task_id": 198, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # Initialize the beta matrix with zeros\n    beta = np.zeros((V, phi[0].shape[1]))\n    \n    # Accumulate the values for beta\n    for d in range(len(corpus)):\n        for n in range(len(corpus[d])):\n            word_index = corpus[d][n]\n            beta[word_index] += phi[d][n]\n    \n    # Normalize the columns of beta\n    column_sums = beta.sum(axis=0)\n    column_sums[column_sums == 0] = 1  # Avoid division by zero\n    beta /= column_sums\n    \n    # Round the values to 4 decimal places\n    beta_rounded = np.round(beta, 4)\n    \n    # Convert to a list of lists\n    beta_list = beta_rounded.tolist()\n    \n    return beta_list\n\n# Example usage\ncorpus = [[0, 1, 1], [1, 2]]\nphi = [\n    np.array([[0.7, 0.3], [0.2, 0.8], [0.1, 0.9]]),\n    np.array([[0.6, 0.4], [0.3, 0.7]])\n]\nV = 3\n\nprint(update_beta(phi, corpus, V))\n```\n\nThis script defines the `update_beta` function, which updates the word-topic distribution matrix $\\beta$ in Latent Dirichlet Allocation. The function takes the variational parameter $\\phi$, the corpus, and the vocabulary size $V$ as inputs and returns the updated $\\beta$ matrix as a list of lists, with each column normalized to sum to one and each entry rounded to four decimal places. The example usage demonstrates how to call the function with a sample input."}
{"task_id": 202, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    n = X.shape[0]\n    \n    # Step 1: Initialize medoids as the first k samples\n    medoids = list(range(k))\n    \n    def compute_cost():\n        cost = 0\n        for i in range(n):\n            distances = [np.linalg.norm(X[i] - X[j]) for j in medoids]\n            cost += min(distances)\n        return cost\n    \n    def assign_labels():\n        labels = []\n        for i in range(n):\n            distances = [np.linalg.norm(X[i] - X[j]) for j in medoids]\n            labels.append(distances.index(min(distances)))\n        return labels\n    \n    # Initial cost\n    current_cost = compute_cost()\n    \n    # Step 2: Iteratively improve the medoids\n    while True:\n        best_swap = None\n        best_cost_reduction = 0\n        \n        for i in range(k):\n            for j in range(k, n):\n                # Try swapping medoid i with non-medoid j\n                medoids[i], medoids[j] = medoids[j], medoids[i]\n                new_cost = compute_cost()\n                cost_reduction = current_cost - new_cost\n                \n                if cost_reduction > best_cost_reduction:\n                    best_cost_reduction = cost_reduction\n                    best_swap = (i, j)\n                \n                # Swap back to original configuration\n                medoids[i], medoids[j] = medoids[j], medoids[i]\n        \n        if best_swap is None:\n            break\n        \n        # Perform the best swap\n        i, j = best_swap\n        medoids[i], medoids[j] = medoids[j], medoids[i]\n        current_cost -= best_cost_reduction\n    \n    # Step 3: Assign labels after convergence\n    return assign_labels()\n\n# Example usage\nX = np.array([[0,0], [1,0], [0,1], [5,5], [6,5], [5,6]])\nk = 2\nprint(pam_clustering(X, k))  # Output: [0, 0, 0, 1, 1, 1]\n```\n\nThis script implements the Partitioning Around Medoids (PAM) clustering algorithm as described. It initializes the medoids as the first `k` samples, iteratively attempts to improve the clustering by swapping medoids with non-medoids, and finally assigns each sample to the nearest medoid. The function returns a list of cluster labels."}
{"task_id": 216, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    \n    # Convert inputs to numpy arrays\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    \n    # Check for valid input shapes and n_iterations\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n    \n    # Polynomial feature expansion\n    def polynomial_features(x, degree):\n        if degree == 1:\n            return x\n        else:\n            return np.column_stack([x**i for i in range(1, degree + 1)])\n    \n    x_train_poly = polynomial_features(x_train, degree)\n    x_test_poly = polynomial_features(x_test, degree)\n    \n    # Standardize features (zero-mean, unit-variance)\n    def standardize_features(x):\n        mean = np.mean(x, axis=0)\n        std = np.std(x, axis=0)\n        std[std == 0] = 1  # Avoid division by zero\n        return (x - mean) / std, mean, std\n    \n    x_train_std, mean, std = standardize_features(x_train_poly)\n    x_test_std = (x_test_poly - mean) / std\n    \n    # Add bias term (column of ones)\n    x_train_std = np.column_stack((np.ones(x_train_std.shape[0]), x_train_std))\n    x_test_std = np.column_stack((np.ones(x_test_std.shape[0]), x_test_std))\n    \n    # Initialize weights\n    weights = np.zeros(x_train_std.shape[1])\n    \n    # Gradient descent\n    for _ in range(n_iterations):\n        predictions = x_train_std.dot(weights)\n        errors = predictions - y_train\n        \n        # Compute gradients\n        gradient = (2 / x_train_std.shape[0]) * x_train_std.T.dot(errors)\n        \n        # Apply L1 and L2 regularization\n        l1_penalty = l1_ratio * reg_factor * np.sign(weights[1:])  # Exclude bias term\n        l2_penalty = (1 - l1_ratio) * reg_factor * 2 * weights[1:]  # Exclude bias term\n        \n        # Update weights\n        weights[0] -= learning_rate * gradient[0]  # Update bias term without regularization\n        weights[1:] -= learning_rate * (gradient[1:] + l1_penalty + l2_penalty)\n    \n    # Make predictions on test set\n    predictions_test = x_test_std.dot(weights)\n    \n    return np.round(predictions_test, 4).tolist()\n\n# Example usage\nx_train = [[1], [2], [3], [4]]\ny_train = [2, 4, 6, 8]\nx_test = [[5], [6]]\ndegree = 1\nreg_factor = 0.0\nl1_ratio = 0.5\nn_iterations = 5000\nlearning_rate = 0.1\n\nprint(elastic_net_regression(x_train, y_train, x_test, degree, reg_factor, l1_ratio, n_iterations, learning_rate))\n```\n\nThis script implements Elastic Net regression from scratch using batch gradient descent. It includes polynomial feature expansion, standardization of features, and handles both L1 and L2 regularization. The function returns predictions for the test set rounded to four decimal places. If the input shapes are incompatible or `n_iterations` is less than 1, it returns `-1`."}
{"task_id": 217, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to numpy arrays for vectorized computation\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Compute the sigmoid function\n    sigmoid = 1 / (1 + np.exp(-predicted))\n    \n    # Compute the gradient\n    gradient = actual * np.exp(-actual * predicted) / (1 + np.exp(-actual * predicted))\n    \n    # Compute the Hessian\n    hessian = sigmoid * (1 - sigmoid)\n    \n    # Round the results to 6 decimal places\n    gradient_rounded = np.round(gradient, 6)\n    hessian_rounded = np.round(hessian, 6)\n    sigmoid_rounded = np.round(sigmoid, 6)\n    \n    # Convert the results back to lists\n    gradient_list = gradient_rounded.tolist()\n    hessian_list = hessian_rounded.tolist()\n    probability_list = sigmoid_rounded.tolist()\n    \n    return (gradient_list, hessian_list, probability_list)\n\n# Example usage:\nactual = [1, -1]\npredicted = [0.5, -0.5]\nresult = logistic_components(actual, predicted)\nprint(result)\n```\n\nThis script defines the `logistic_components` function, which computes the gradient, Hessian, and probability for logistic loss given the actual labels and predicted scores. The function handles inputs as lists, tuples, or NumPy arrays, performs vectorized computations using NumPy, and returns the results rounded to six decimal places as plain Python lists. The example usage demonstrates how to call the function and print the results."}
{"task_id": 218, "completion_id": 0, "completion": "```python\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    \n    def hand_value(hand: list[int]) -> int:\n        \"\"\"Calculate the best possible value of a hand in Blackjack.\"\"\"\n        value = sum(hand)\n        aces = hand.count(1)\n        \n        # Adjust for aces if the value is over 21\n        while value > 21 and aces > 0:\n            value -= 10\n            aces -= 1\n        \n        return value\n    \n    def is_natural_blackjack(hand: list[int]) -> bool:\n        \"\"\"Check if a hand is a natural blackjack.\"\"\"\n        return len(hand) == 2 and 1 in hand and 10 in hand\n    \n    player_value = hand_value(player)\n    dealer_value = hand_value(dealer)\n    \n    # Check for player bust\n    if player_value > 21:\n        return -1.0\n    \n    # Check for dealer bust\n    if dealer_value > 21:\n        return 1.0\n    \n    # Check for natural blackjack\n    if is_natural_blackjack(player):\n        return 1.5\n    \n    # Compare scores\n    if player_value > dealer_value:\n        return 1.0\n    elif player_value < dealer_value:\n        return -1.0\n    else:\n        return 0.0\n\n# Example usage:\nplayer = [1, 10]\ndealer = [10, 7]\nprint(blackjack_outcome(player, dealer))  # Output: 1.5\n```\n\nThis script defines the `blackjack_outcome` function, which calculates the outcome of a Blackjack game based on the rules provided. It includes helper functions to determine the hand value and check for a natural blackjack. The function then uses these helpers to determine the appropriate reward for the player."}
{"task_id": 221, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper function that returns element-wise squared log errors.\"\"\"\n    try:\n        actual = np.array(actual)\n        predicted = np.array(predicted)\n        \n        # Check if all values are non-negative\n        if np.any(actual < 0) or np.any(predicted < 0):\n            return -1\n        \n        # Calculate element-wise squared log errors\n        return (np.log1p(actual) - np.log1p(predicted)) ** 2\n    \n    except Exception as e:\n        return -1\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\"\"\"\n    try:\n        actual = np.array(actual)\n        predicted = np.array(predicted)\n        \n        # Check if the shapes are the same\n        if actual.shape != predicted.shape:\n            return -1\n        \n        # Get element-wise squared log errors\n        squared_errors = squared_log_error(actual, predicted)\n        \n        # If there was an error in validation, return -1\n        if squared_errors == -1:\n            return -1\n        \n        # Calculate the mean of the squared log errors\n        msle = np.mean(squared_errors)\n        \n        # Return the result rounded to 4 decimal places\n        return round(float(msle), 4)\n    \n    except Exception as e:\n        return -1\n\n# Example usage:\nactual = [3, 5]\npredicted = [2.5, 5.5]\nprint(mean_squared_log_error(actual, predicted))  # Output: 0.0121\n```\n\nThis script defines the required functions `squared_log_error` and `mean_squared_log_error` to compute the Mean Squared Logarithmic Error (MSLE) as specified. It includes input validation to ensure that the inputs are of the same length and contain only non-negative values. If any validation fails, the function returns `-1`. The result is rounded to four decimal places as required."}
{"task_id": 222, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    # Helper function to compute sigmoid in a numerically stable way\n    def stable_sigmoid(x):\n        if x >= 0:\n            return 1 / (1 + np.exp(-x))\n        else:\n            return np.exp(x) / (1 + np.exp(x))\n    \n    # Convert input to a NumPy array for vectorized operations\n    z_array = np.array(z, dtype=float)\n    \n    # Apply the stable sigmoid function element-wise\n    sigmoid_values = np.vectorize(stable_sigmoid)(z_array)\n    \n    # Round the results to 4 decimal places\n    rounded_values = np.round(sigmoid_values, 4)\n    \n    # Return the result as a float if the input was a scalar, otherwise as a list\n    if isinstance(z, (int, float)):\n        return float(rounded_values)\n    else:\n        return rounded_values.tolist()\n\n# Example usage:\nz = np.array([-1000, 0, 2])\nprint(sigmoid(z))  # Output: [0.0, 0.5, 0.8808]\n```\n\nThis script defines the `sigmoid` function, which computes the sigmoid activation function in a numerically stable manner for both scalar and array-like inputs. The function uses a helper function `stable_sigmoid` to handle the computation differently for positive and negative inputs, ensuring numerical stability. The results are rounded to four decimal places, and the output format matches the input type (scalar or list)."}
{"task_id": 224, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    # Convert input to a numpy array for element-wise operations\n    z_array = np.array(z, dtype=float)\n    \n    # Apply the Leaky ReLU activation function\n    activated_array = np.where(z_array >= 0, z_array, a * z_array)\n    \n    # Convert the result back to a list with the same structure as the input\n    return activated_array.tolist()\n\n# Example usage:\nz = np.array([-2, -1, 0, 1, 2])\na = 0.1\noutput = leaky_relu(z, a)\nprint(output)  # Output: [-0.2, -0.1, 0.0, 1.0, 2.0]\n```\n\nThis script defines the `leaky_relu` function, which applies the Leaky ReLU activation to each element of the input `z`. The function handles inputs that are scalars, lists, or `numpy.ndarray` objects and returns the result as a plain Python list with the same structure as the input. The example usage demonstrates how to call the function and print the output."}
{"task_id": 226, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    \n    def decision_stump_predict(X, feature_index, threshold, polarity):\n        return polarity * ((X[:, feature_index] < threshold) * 2 - 1)\n    \n    n_samples, n_features = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    \n    stumps = []\n    alphas = []\n    \n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = {}\n        \n        for feature_index in range(n_features):\n            thresholds = np.unique(X_train[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = decision_stump_predict(X_train, feature_index, threshold, polarity)\n                    weighted_error = np.sum(sample_weights * (predictions != y_train))\n                    \n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': polarity}\n        \n        alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n        alphas.append(alpha)\n        stumps.append(best_stump)\n        \n        predictions = decision_stump_predict(X_train, **best_stump)\n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        sample_weights /= np.sum(sample_weights)\n    \n    def predict_sample(sample):\n        stump_predictions = [alpha * decision_stump_predict(np.array([sample]), **stump)[0] for stump, alpha in zip(stumps, alphas)]\n        return np.sign(np.sum(stump_predictions))\n    \n    return [predict_sample(sample) for sample in X_test]\n\n# Example usage:\nX_train = np.array([[0, 1], [1, 1], [1, 0], [0, 0]])\ny_train = np.array([1, 1, -1, -1])\nX_test = np.array([[1, 0], [0, 1]])\nn_clf = 3\n\nprint(adaboost_predict(X_train, y_train, X_test, n_clf))  # Output: [-1, 1]\n```\n\nThis script implements the AdaBoost algorithm using decision stumps as weak learners. It trains the ensemble on the provided training data and predicts the labels for the test data. The predictions are returned as a list of integers, each being either -1 or 1."}
{"task_id": 241, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    \n    # Flatten the shape into a 2D matrix shape\n    d0 = shape[0]\n    d1_to_dn = np.prod(shape[1:])\n    A = np.random.randn(d0, d1_to_dn)\n    \n    # Compute the SVD of A\n    U, _, Vt = np.linalg.svd(A, full_matrices=False)\n    \n    # Choose the SVD factor that has the same size as A\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt.T\n    \n    # Reshape Q back to the requested tensor shape and multiply by scale\n    Q_reshaped = Q.reshape(shape)\n    result = Q_reshaped * scale\n    \n    # Convert to list before returning\n    return result.tolist()\n\n# Example usage\nnp.random.seed(0)\nshape = (2, 2)\nscale = 0.5\noutput = orthogonal(shape, scale)\nprint(output)\n```\n\nThis script defines the `orthogonal` function as specified, which initializes a tensor with an orthogonal matrix using the method described by Saxe et al. (2014). The function checks if the input shape has at least two dimensions, computes the SVD of a randomly generated matrix, selects the appropriate orthogonal factor, reshapes it, scales it, and returns it as a list. The example usage demonstrates how to use the function with a fixed random seed to produce the expected output."}
{"task_id": 243, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a numpy array for easier computation\n    state = np.array(state)\n    \n    # Define weights and biases (all weights = 1.0, all biases = 0.0)\n    W1 = np.ones((3, 4))\n    b1 = np.zeros(4)\n    W2 = np.ones((4, 4))\n    b2 = np.zeros(4)\n    W3 = np.ones((4, 4))\n    b3 = np.zeros(4)\n    Wa = np.ones((4, 3))\n    ba = np.zeros(3)\n    Wc = np.ones((4, 1))\n    bc = np.zeros(1)\n    \n    # Perform the forward pass\n    z1 = np.maximum(0, np.dot(state, W1) + b1)  # ReLU activation\n    z2 = np.maximum(0, np.dot(z1, W2) + b2)  # ReLU activation\n    z3 = np.maximum(0, np.dot(z2, W3) + b3)  # ReLU activation\n    \n    # Actor head\n    logits = np.dot(z3, Wa) + ba\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))  # Softmax activation\n    \n    # Critic head\n    state_value = np.dot(z3, Wc) + bc\n    \n    # Return the results rounded to 4 decimal places\n    return [round(prob, 4) for prob in action_probs], round(state_value[0], 4)\n\n# Example usage\nstate = [1.0, -1.0, 0.5]\nprint(actor_critic_forward(state))  # Output: ([0.3333, 0.3333, 0.3333], 32.0)\n```\n\nThis script defines the `actor_critic_forward` function, which performs the forward pass of the specified Actor-Critic network using basic NumPy operations. The function takes a state vector as input and returns the action probabilities and state value, both rounded to four decimal places. The example usage demonstrates how to call the function and verify its output."}
{"task_id": 249, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    # Convert state to a numpy array\n    state = np.array(state)\n    \n    # Shared layers\n    W1, b1 = np.array(params['W1']), np.array(params['b1'])\n    W2, b2 = np.array(params['W2']), np.array(params['b2'])\n    W3, b3 = np.array(params['W3']), np.array(params['b3'])\n    \n    # Actor head\n    Wa, ba = np.array(params['Wa']), np.array(params['ba'])\n    \n    # Critic head\n    Wc, bc = np.array(params['Wc']), np.array(params['bc'])\n    \n    # Forward pass through shared layers\n    h1 = np.maximum(0, np.dot(state, W1) + b1)  # ReLU activation\n    h2 = np.maximum(0, np.dot(h1, W2) + b2)   # ReLU activation\n    h3 = np.maximum(0, np.dot(h2, W3) + b3)   # ReLU activation\n    \n    # Actor head: compute action probabilities\n    action_scores = np.dot(h3, Wa) + ba\n    exp_scores = np.exp(action_scores - np.max(action_scores))  # for numerical stability\n    probabilities = exp_scores / np.sum(exp_scores)\n    \n    # Critic head: compute state value\n    value = np.dot(h3, Wc) + bc\n    \n    # Round the probabilities and the state value to four decimal places\n    probabilities = [round(p, 4) for p in probabilities]\n    value = round(value[0], 4)\n    \n    # Ensure 0.0 and 1.0 are represented correctly\n    probabilities = [0.0 if p == 0 else 1.0 if p == 1 else p for p in probabilities]\n    value = 0.0 if value == 0 else 1.0 if value == 1 else value\n    \n    return probabilities, value\n\n# Example usage\nstate = [1, 0]\nparams = {\n    \"W1\": [[1, 0], [0, 1]], \"b1\": [0, 0],\n    \"W2\": [[1, 0], [0, 1]], \"b2\": [0, 0],\n    \"W3\": [[1, 0], [0, 1]], \"b3\": [0, 0],\n    \"Wa\": [[1, 0], [0, 1]], \"ba\": [0, 0],\n    \"Wc\": [[1], [1]],        \"bc\": [0]\n}\n\nprint(actor_critic_forward(state, params))  # Output: ([0.7311, 0.2689], 1.0)\n```\n\nThis script defines the `actor_critic_forward` function, which performs the forward pass through the specified Actor-Critic network using NumPy. The function takes the current state and network parameters as input and returns the action probabilities and state value, rounded to four decimal places. The example usage demonstrates how to call the function with a sample state and parameters."}
{"task_id": 253, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)  # Ensure w is a NumPy array for vectorized operations\n    l2_ratio = 1 - l1_ratio\n    \n    if gradient:\n        # Compute the gradient\n        grad = alpha * (l1_ratio * np.sign(w) + l2_ratio * w)\n        return [round(g, 4) for g in grad]\n    else:\n        # Compute the penalty value\n        l1_term = np.sum(np.abs(w))\n        l2_term = np.sum(w ** 2)\n        penalty = alpha * (l1_ratio * l1_term + l2_ratio * 0.5 * l2_term)\n        return round(penalty, 4)\n\n# Example usage:\nw = np.array([1, -2, 3])\nalpha = 0.1\nl1_ratio = 0.5\n\n# Compute penalty\npenalty = elastic_net_regularization(w, alpha, l1_ratio, gradient=False)\nprint(penalty)  # Output: 0.5371\n\n# Compute gradient\ngrad = elastic_net_regularization(w, alpha, l1_ratio, gradient=True)\nprint(grad)  # Output: [0.05, -0.15, 0.25]\n```\n\nThis script defines the `elastic_net_regularization` function, which computes either the Elastic-Net penalty or its gradient based on the `gradient` flag. The function handles both list and NumPy array inputs for the weight vector `w` and ensures that the output is rounded to four decimal places. The example usage demonstrates how to compute both the penalty and the gradient for a given weight vector, regularization strength, and L1 ratio."}
{"task_id": 256, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    # Handle special cases\n    if param_name in [\"X\", \"y\"]:\n        return None\n    if param_name in [\"Ba\", \"Bx\"]:\n        param_name = param_name.lower()\n    \n    # Get the parameter to check\n    param = model.parameters[param_name]\n    grad = np.zeros_like(param, dtype=np.float64)\n    \n    # Iterate over each element of the parameter\n    for i in range(param.size):\n        # Flatten the parameter for easy indexing\n        param_flat = param.flatten()\n        original_value = param_flat[i]\n        \n        # Perturb the parameter by +epsilon\n        param_flat[i] = original_value + epsilon\n        model.parameters[param_name] = param_flat.reshape(param.shape)\n        model.flush_gradients()\n        preds_plus = [model.forward(X[:, :, t]) for t in range(n_t)]\n        loss_plus = loss_func(preds_plus)\n        \n        # Perturb the parameter by -epsilon\n        param_flat[i] = original_value - epsilon\n        model.parameters[param_name] = param_flat.reshape(param.shape)\n        model.flush_gradients()\n        preds_minus = [model.forward(X[:, :, t]) for t in range(n_t)]\n        loss_minus = loss_func(preds_minus)\n        \n        # Compute the numerical gradient\n        grad_flat = grad.flatten()\n        grad_flat[i] = (loss_plus - loss_minus) / (2 * epsilon)\n        grad = grad_flat.reshape(param.shape)\n        \n        # Restore the original value\n        param_flat[i] = original_value\n        model.parameters[param_name] = param_flat.reshape(param.shape)\n    \n    return grad.T\n\n# Example usage\na_batch  = 1        # number of samples\nin_dim   = 1        # input size\nout_dim  = 1        # output size\nn_t      = 1        # number of time-steps\n\n# minimal model holding a single weight matrix P = [[2.0]]\nclass ToyModel:\n    def __init__(self):\n        self.parameters = {'P': np.array([[2.0]], dtype=np.float64)}\n    def forward(self, x_t):\n        return x_t @ self.parameters['P']\n    def flush_gradients(self):\n        pass\n\nmodel = ToyModel()\nX     = np.array([[[3.0]]], dtype=np.float64)     # shape (1, 1, 1)\nloss  = lambda preds: sum(np.sum(y**2) for y in preds)\n\ngrad = grad_check_RNN(model, loss, 'P', n_t, X)\nprint(grad)  # Output should be array([[36.]])\n```\n\nThis script defines the `grad_check_RNN` function, which numerically estimates the gradient of a specified parameter in a Recurrent Neural Network (RNN) model using the centered finite-difference formula. The function handles special cases for parameter names and ensures that all intermediate tensors are in `float64` to minimize numerical noise. The example usage demonstrates how to use the function with a simple toy model."}
{"task_id": 257, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n\n    m, n = X_train.shape\n    weights = np.ones(m) / m\n    stumps = []\n    alphas = []\n\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = None\n        best_threshold = None\n        best_polarity = None\n\n        for feature_i in range(n):\n            thresholds = np.unique(X_train[:, feature_i])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(m)\n                    predictions[X_train[:, feature_i] * polarity < threshold * polarity] = -1\n\n                    weighted_error = np.sum(weights[predictions != y_train])\n\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        polarity = -polarity\n\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump = feature_i\n                        best_threshold = threshold\n                        best_polarity = polarity\n\n        epsilon = min_error + 1e-10  # To avoid division by zero\n        alpha = 0.5 * np.log((1.0 - epsilon) / epsilon)\n        alphas.append(alpha)\n\n        predictions = np.ones(m)\n        predictions[X_train[:, best_stump] * best_polarity < best_threshold * best_polarity] = -1\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n\n        stumps.append((best_stump, best_threshold, best_polarity))\n\n    # Predict on X_test\n    m_test, _ = X_test.shape\n    final_predictions = np.zeros(m_test)\n\n    for alpha, (feature_i, threshold, polarity) in zip(alphas, stumps):\n        predictions = np.ones(m_test)\n        predictions[X_test[:, feature_i] * polarity < threshold * polarity] = -1\n        final_predictions += alpha * predictions\n\n    return [1 if pred >= 0 else -1 for pred in final_predictions]\n\n# Example usage:\nX_train = np.array([[0, 0], [1, 1], [1, 0], [0, 1]])\ny_train = np.array([-1, 1, 1, -1])\nX_test = np.array([[0.8, 0.8], [0.2, 0.1]])\nn_clf = 3\n\nprint(adaboost_predict(X_train, y_train, X_test, n_clf))  # Output: [1, -1]\n```\n\nThis script implements the AdaBoost algorithm using decision stumps as weak learners. It trains the model on the provided training data and predicts the labels for the test data. The function handles the case where `n_clf` is less than 1 by setting it to 1. The predictions are aggregated by the sign of the weighted sum of the stump votes."}
{"task_id": 261, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError(\"Shape must have at least two dimensions\")\n\n    fan_in = shape[1]\n    fan_out = shape[0]\n    \n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n\n    s = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(0, s, shape)\n\n# Example usage:\nshape = (3, 2)\nweights = glorot_normal(shape)\nprint(\"Generated weights:\", weights)\nprint(\"Mean of weights:\", np.mean(weights))\nprint(\"Standard deviation of weights:\", np.std(weights))\n```\n\nThis script defines the `glorot_normal` function, which initializes a NumPy array with weights according to the Glorot/Xavier normal initialization method. The function calculates the `fan_in` and `fan_out` based on the provided shape and computes the standard deviation `s`. It then generates a NumPy array with the specified shape, where the elements are drawn from a normal distribution with mean 0 and standard deviation `s`. The example usage demonstrates how to call the function and prints the generated weights, their mean, and standard deviation to verify the implementation."}
{"task_id": 266, "completion_id": 0, "completion": "Certainly! Below is the complete Python script that implements the `build_adj_list` function as described in the task. The function constructs an adjacency list for an undirected graph from the given vertex list `V` and edge list `E`.\n\n```python\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    # Create a dictionary to map each vertex to its index in V\n    vertex_index = {vertex: idx for idx, vertex in enumerate(V)}\n    \n    # Initialize the adjacency list with empty sets to avoid duplicates\n    adj_list = [[] for _ in V]\n    \n    # Add edges to the adjacency list\n    for u, v in E:\n        if u != v:  # Avoid self-loops\n            if v not in adj_list[vertex_index[u]]:\n                adj_list[vertex_index[u]].append(v)\n            if u not in adj_list[vertex_index[v]]:\n                adj_list[vertex_index[v]].append(u)\n    \n    # Sort the neighbors according to their order in V\n    for i in range(len(adj_list)):\n        adj_list[i].sort(key=lambda x: V.index(x))\n    \n    return adj_list\n\n# Example usage\nif __name__ == \"__main__\":\n    V = [\"A\", \"B\", \"C\", \"D\"]\n    E = [(\"A\", \"B\"), (\"B\", \"C\"), (\"C\", \"A\"), (\"B\", \"A\")]\n    print(build_adj_list(V, E))  # Output: [['B', 'C'], ['A', 'C'], ['A', 'B'], []]\n```\n\n### Explanation:\n1. **Vertex Index Mapping**: We first create a dictionary `vertex_index` to map each vertex to its index in the list `V`. This helps in quickly accessing the position of any vertex in the adjacency list.\n\n2. **Adjacency List Initialization**: We initialize an adjacency list `adj_list` with empty lists for each vertex. Using sets initially would help in avoiding duplicates, but since we need to sort the neighbors later, we use lists and handle duplicates manually.\n\n3. **Adding Edges**: For each edge `(u, v)` in `E`, we add `v` to the adjacency list of `u` and `u` to the adjacency list of `v` if they are not already present. This ensures that each edge is only added once.\n\n4. **Sorting Neighbors**: After adding all edges, we sort the neighbors of each vertex according to their order in `V` to ensure the output is deterministic and easy to test.\n\n5. **Example Usage**: The example provided in the task is used to demonstrate the function. The output matches the expected result.\n\nThis script should work for any valid input as per the constraints provided in the task."}
{"task_id": 267, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_error = float('inf')\n    best_feature_index = 0\n    best_threshold = 0.0\n    best_polarity = 1\n\n    for feature_index in range(n_features):\n        # Extract the feature column and sort it along with the corresponding labels and weights\n        feature_values = X[:, feature_index]\n        sorted_indices = np.argsort(feature_values)\n        sorted_feature_values = feature_values[sorted_indices]\n        sorted_y = y[sorted_indices]\n        sorted_weights = sample_weights[sorted_indices]\n\n        # Try all unique feature values as thresholds\n        unique_values = np.unique(sorted_feature_values)\n        for i in range(len(unique_values)):\n            if i < len(unique_values) - 1:\n                threshold = (unique_values[i] + unique_values[i + 1]) / 2.0\n            else:\n                threshold = unique_values[i] + 1e-6  # To handle the edge case\n\n            # Calculate weighted error for polarity 1\n            predictions = np.where(sorted_feature_values < threshold, 1, -1)\n            error_pos = np.sum(sorted_weights * (predictions != sorted_y))\n\n            # Calculate weighted error for polarity -1\n            predictions = np.where(sorted_feature_values < threshold, -1, 1)\n            error_neg = np.sum(sorted_weights * (predictions != sorted_y))\n\n            # Determine the best polarity and error\n            if error_pos < error_neg:\n                error = error_pos\n                polarity = 1\n            else:\n                error = error_neg\n                polarity = -1\n\n            # Update the best stump if a better one is found\n            if error < best_error:\n                best_error = error\n                best_feature_index = feature_index\n                best_threshold = threshold\n                best_polarity = polarity\n\n    return {\n        \"feature_index\": best_feature_index,\n        \"threshold\": round(best_threshold, 4),\n        \"polarity\": best_polarity,\n        \"weighted_error\": round(best_error, 4)\n    }\n\n# Example usage:\nX = np.array([[1.0], [2.0], [3.0], [4.0]])\ny = np.array([-1, -1, 1, 1])\nw = np.ones(4) / 4\nprint(train_decision_stump(X, y, w))\n```\n\nThis script defines a function `train_decision_stump` that finds the optimal weighted decision stump for a binary classification task. It iterates over each feature, sorts the data based on the feature values, and tries all unique feature values as thresholds. It calculates the weighted error for both polarities and keeps track of the best stump found. The function returns a dictionary with the best feature index, threshold, polarity, and weighted error, all rounded to four decimal places."}
{"task_id": 273, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    feature = np.array(feature)\n    target = np.array(target)\n    \n    # Sort feature and target based on feature values\n    sorted_indices = np.argsort(feature)\n    sorted_feature = feature[sorted_indices]\n    sorted_target = target[sorted_indices]\n    \n    # Calculate the entropy of the parent node\n    def entropy(labels):\n        counts = Counter(labels)\n        total = len(labels)\n        return -sum((count / total) * math.log2(count / total) for count in counts.values())\n    \n    parent_entropy = entropy(sorted_target)\n    n = len(sorted_feature)\n    \n    best_threshold = None\n    max_information_gain = 0.0\n    \n    # Evaluate each candidate threshold\n    for i in range(n - 1):\n        if sorted_feature[i] != sorted_feature[i + 1]:\n            threshold = (sorted_feature[i] + sorted_feature[i + 1]) / 2.0\n            \n            # Split the data\n            left_indices = sorted_indices[:i + 1]\n            right_indices = sorted_indices[i + 1:]\n            \n            left_labels = sorted_target[:i + 1]\n            right_labels = sorted_target[i + 1:]\n            \n            # Calculate the entropy of the left and right subsets\n            left_entropy = entropy(left_labels)\n            right_entropy = entropy(right_labels)\n            \n            # Calculate the information gain\n            information_gain = parent_entropy - (len(left_labels) / n) * left_entropy - (len(right_labels) / n) * right_entropy\n            \n            # Update the best threshold if this one is better\n            if information_gain > max_information_gain:\n                max_information_gain = information_gain\n                best_threshold = threshold\n    \n    # Return the best threshold and information gain rounded to 4 decimal places\n    return (round(best_threshold, 4), round(max_information_gain, 4)) if best_threshold is not None else (None, 0.0)\n\n# Example usage:\nfeature = [2, 3, 10, 19]\ntarget = [0, 0, 1, 1]\nprint(best_split(feature, target))  # Output: (6.5, 1.0)\n```\n\nThis script defines the `best_split` function, which calculates the optimal numerical threshold for splitting a dataset in a decision tree based on information gain. The function handles edge cases where no useful split exists and returns the threshold and information gain rounded to four decimal places."}
{"task_id": 286, "completion_id": 0, "completion": "```\npython\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    return [[0.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    return [[1.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    return [[random.uniform(low, high) for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError(\"Invalid initialization function.\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    name = \"ones_init\"\n    shape = (2, 2)\n    init_fn = get_initializer(name)  # returns the function ones_init\n    output = init_fn(shape)          # [[1.0, 1.0], [1.0, 1.0]]\n    print(output)\n```\n\nThis script defines the required initializer functions and the `get_initializer` function. The `get_initializer` function looks up the function in the global namespace, checks if it is callable, and returns it if it is. If not, it raises a `ValueError`. The example usage at the bottom demonstrates how to use the `get_initializer` function to get and use an initializer."}
{"task_id": 287, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n    \n    # Calculate output dimensions\n    H_out = (H - p_h) // s_h + 1\n    W_out = (W - p_w) // s_w + 1\n    \n    # Initialize pooled output\n    pooled_output = np.zeros((N, C, H_out, W_out))\n    \n    # Forward pass\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_out):\n                for w in range(W_out):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    pooled_output[n, c, h, w] = np.mean(X[n, c, h_start:h_end, w_start:w_end])\n    \n    # Initialize gradient input\n    grad_input = np.zeros_like(X)\n    \n    # Backward pass\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_out):\n                for w in range(W_out):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += accum_grad[n, c, h, w] / (p_h * p_w)\n    \n    # Round and convert to lists\n    pooled_output = np.round(pooled_output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    \n    return pooled_output, grad_input\n\n# Example usage\nX = np.array([[[[1, 2], [3, 4]]]])\npool_shape = (2, 2)\nstride = (1, 1)\naccum_grad = np.array([[[[1]]]])\n\noutput, grad_input = average_pool2d(X, pool_shape, stride, accum_grad)\nprint(output)\nprint(grad_input)\n```\n\nThis script defines the `average_pool2d` function, which performs both the forward and backward passes of a 2-D average-pooling layer. The function takes the input tensor `X`, pooling window shape `pool_shape`, stride `stride`, and accumulated gradient `accum_grad` as inputs. It computes the pooled output and the gradient input, rounds them to the nearest 4th decimal, and returns them as Python lists. The example usage demonstrates how to call the function with a specific input and prints the results."}
{"task_id": 290, "completion_id": 0, "completion": "```\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-8)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        return (tree_a.feature == tree_b.feature and\n                np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-8) and\n                compare_trees(tree_a.left, tree_b.left) and\n                compare_trees(tree_a.right, tree_b.right))\n    else:\n        return False\n\n# Example usage:\ntree_1 = Node(0, 3.5,\n                Leaf(np.array([1.0, 0.0])),\n                Leaf(np.array([0.0, 1.0])))\n\n# an identical copy of tree_1\ntree_2 = Node(0, 3.5,\n                Leaf(np.array([1.0, 0.0])),\n                Leaf(np.array([0.0, 1.0])))\n\nprint(compare_trees(tree_1, tree_2))  # Output: True\n```\n\nThis script defines the `Leaf` and `Node` classes and implements the `compare_trees` function to recursively compare two decision trees based on the given criteria. The function checks if both nodes are leaves and compares their values using `np.allclose` with a tolerance of \\(1 \\times 10^{-8}\\). If both nodes are internal nodes, it compares their feature indices, thresholds, and recursively compares their left and right children. If the nodes are of different types, it returns `False`."}
{"task_id": 292, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                            parent2: list[list[int | float]],\n                            cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    # Convert parent lists to numpy arrays for easier manipulation\n    np_parent1 = np.array(parent1)\n    np_parent2 = np.array(parent2)\n    \n    # Validate that the two parent matrices have the same shape\n    if np_parent1.shape != np_parent2.shape:\n        return -1\n    \n    # Get the number of columns\n    num_columns = np_parent1.shape[1]\n    \n    # Ensure the cutoff is within the valid range\n    if cutoff < 0 or cutoff > num_columns:\n        return -1\n    \n    # Create the children matrices using numpy slicing\n    child1 = np.concatenate((np_parent1[:, :cutoff], np_parent2[:, cutoff:]), axis=1)\n    child2 = np.concatenate((np_parent2[:, :cutoff], np_parent1[:, cutoff:]), axis=1)\n    \n    # Convert the children matrices back to lists\n    child1_list = child1.tolist()\n    child2_list = child2.tolist()\n    \n    return (child1_list, child2_list)\n\n# Example usage:\nparent1 = [[1, 2, 3], [4, 5, 6]]\nparent2 = [[7, 8, 9], [10, 11, 12]]\ncutoff = 2\nprint(single_point_crossover(parent1, parent2, cutoff))\n# Output: ([[1, 2, 9], [4, 5, 12]], [[7, 8, 3], [10, 11, 6]])\n```\n\nThis script defines the `single_point_crossover` function, which performs the specified single-point column crossover on two parent weight matrices. It includes validation to ensure the matrices have the same shape and handles the conversion between NumPy arrays and Python lists as required."}
{"task_id": 294, "completion_id": 0, "completion": "Certainly! Below is the self-contained Python script that converts a custom graph dictionary into a plain adjacency dictionary as described in the task:\n\n```python\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {label: [] for label in G['_V2I'].keys()}\n    \n    for source_index, edges in enumerate(G['_G']):\n        source_label = list(G['_V2I'].keys())[source_index]\n        for source, target, weight in edges:\n            adj[source].append((target, weight))\n            if not G['is_directed']:\n                adj[target].append((source, weight))\n    \n    # Remove duplicates and sort the neighbour lists\n    for label in adj:\n        adj[label] = sorted(set(adj[label]))\n    \n    return adj\n\n# Example usage:\ng = {\n    'is_directed': False,\n    '_V2I': {'A': 0, 'B': 1, 'C': 2},\n    '_G': [\n        [('A', 'B', 3), ('A', 'C', 2)],   # outgoing edges of vertex 'A'\n        [('B', 'A', 3), ('B', 'C', 4)],   # outgoing edges of vertex 'B'\n        [('C', 'A', 2), ('C', 'B', 4)]    # outgoing edges of vertex 'C'\n    ]\n}\n\nresult = to_networkx(g)\nprint(result)\n```\n\n### Explanation:\n1. **Initialization**: We initialize the adjacency dictionary `adj` with all vertex labels as keys and empty lists as values.\n2. **Iterate through edges**: We iterate through each vertex's outgoing edges stored in `G['_G']`.\n3. **Add edges**: For each edge, we add the target and weight to the adjacency list of the source vertex.\n4. **Handle undirected graphs**: If the graph is undirected, we also add the reverse edge to the adjacency list of the target vertex.\n5. **Remove duplicates and sort**: We convert each adjacency list to a set to remove duplicates and then back to a sorted list to ensure the neighbour lists are sorted alphabetically.\n6. **Return the adjacency dictionary**: Finally, we return the constructed adjacency dictionary.\n\nThis script will correctly convert the custom graph representation into the desired adjacency dictionary format."}
{"task_id": 296, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    # Convert the array to a NumPy array if it's not already\n    x = np.asarray(x)\n    \n    # Check if all elements are either 0 or 1\n    return np.all((x == 0) | (x == 1))\n\n# Example usage:\nx1 = np.array([[0, 1, 0], [1, 0, 1]])\nx2 = np.array([0, 1, 2, 3])\nx3 = np.array([True, False, True])\nx4 = np.array([0.0, 1.0, 0.0, 1.0])\nx5 = np.array([0.5, 1.0])\n\nprint(is_binary(x1))  # Output: True\nprint(is_binary(x2))  # Output: False\nprint(is_binary(x3))  # Output: True\nprint(is_binary(x4))  # Output: True\nprint(is_binary(x5))  # Output: False\n```\n\nThis script defines the `is_binary` function, which checks if all elements in a given NumPy array are either `0` or `1`. The function works for arrays of integers, floats, and booleans. The example usage demonstrates the function with different types of input arrays."}
{"task_id": 298, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    if N < 1:\n        raise ValueError(\"N must be at least 1\")\n\n    # Tokenize the corpus and query\n    tokenized_corpus = []\n    for sentence in corpus:\n        tokens = sentence.split()\n        if N > 1:\n            tokens = [\"<bol>\"] * (N - 1) + tokens + [\"<eol>\"]\n        tokenized_corpus.append(tokens)\n\n    query_tokens = query.split()\n    if N > 1:\n        query_tokens = [\"<bol>\"] * (N - 1) + query_tokens + [\"<eol>\"]\n\n    # If the query is too short for the requested N, return -inf\n    if len(query_tokens) < N:\n        return float('-inf')\n\n    # Count N-grams and (N-1)-grams\n    ngram_counts = Counter()\n    n1gram_counts = Counter()\n\n    for sentence in tokenized_corpus:\n        for i in range(len(sentence) - N + 1):\n            ngram = tuple(sentence[i:i + N])\n            ngram_counts[ngram] += 1\n            if N > 1:\n                n1gram = tuple(sentence[i:i + N - 1])\n                n1gram_counts[n1gram] += 1\n\n    # Calculate the log-probability of the query\n    log_prob = 0.0\n    for i in range(len(query_tokens) - N + 1):\n        ngram = tuple(query_tokens[i:i + N])\n        if N == 1:\n            count_ngram = ngram_counts[ngram]\n            total_tokens = sum(ngram_counts.values())\n            prob = count_ngram / total_tokens\n        else:\n            n1gram = tuple(query_tokens[i:i + N - 1])\n            count_ngram = ngram_counts[ngram]\n            count_n1gram = n1gram_counts[n1gram]\n            if count_n1gram == 0:\n                return float('-inf')\n            prob = count_ngram / count_n1gram\n\n        if prob == 0:\n            return float('-inf')\n        log_prob += math.log(prob)\n\n    return round(log_prob, 4)\n\n\n# Example usage:\ncorpus = [\"a b a\", \"b a b\"]\nquery = \"a b\"\nN = 1\nprint(ngram_log_prob(corpus, query, N))  # Output: -1.3863\n```\n\nThis script defines the `ngram_log_prob` function, which calculates the log-probability of a query sentence under an N-gram Maximum Likelihood Estimation (MLE) model. The function handles tokenization, padding, counting, and probability calculation, returning the log-probability rounded to four decimal places or negative infinity if any necessary N-gram is unseen."}
{"task_id": 302, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n, d = X.shape\n    \n    # Step 1: Build the weighted adjacency matrix W\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                W[i, j] = 1 / (1 + np.linalg.norm(X[i] - X[j]))\n    \n    # Step 2: Compute the unnormalized graph Laplacian L\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    \n    # Step 3: Obtain the first k eigenvectors of L\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    \n    # Step 4: Run k-means on the rows of E\n    # Initialize centroids with the first k rows of E\n    centroids = E[:k].copy()\n    labels = np.zeros(n, dtype=int)\n    \n    for _ in range(100):\n        # Assign labels based on the nearest centroid\n        for i in range(n):\n            distances = np.linalg.norm(E[i] - centroids, axis=1)\n            labels[i] = np.argmin(distances)\n        \n        # Update centroids\n        new_centroids = np.zeros_like(centroids)\n        counts = np.zeros(k, dtype=int)\n        for i in range(n):\n            new_centroids[labels[i]] += E[i]\n            counts[labels[i]] += 1\n        \n        # Handle empty clusters by re-initializing centroids\n        for i in range(k):\n            if counts[i] == 0:\n                new_centroids[i] = E[np.random.randint(n)]\n            else:\n                new_centroids[i] /= counts[i]\n        \n        # Check for convergence\n        if np.all(centroids == new_centroids):\n            break\n        \n        centroids = new_centroids\n    \n    return labels.tolist()\n\n# Example usage:\nX = np.array([[0, 0], [0.1, 0.1], [5, 5], [5.1, 5]])\nk = 2\nprint(spectral_clustering(X, k))  # Output: [0, 0, 1, 1]\n```\n\nThis script implements the Spectral Clustering algorithm from scratch, following the steps outlined in the task description. It uses NumPy for numerical operations but avoids any other external libraries. The function `spectral_clustering` takes a 2-D NumPy array `X` and an integer `k` as input and returns a list of cluster labels."}
{"task_id": 303, "completion_id": 0, "completion": "```\npython\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_label, prev_mine = params[prev_ix]\n    curr_label, curr_mine = params[ix]\n\n    debug_str = (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_mine}\\n\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{golds[prev_label]}\\n\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_mine}\\n\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{golds[curr_label]}{warn_str}\\n\"\n        \"----------------------- END DEBUG -----------------------\"\n    )\n    \n    return debug_str\n```\n\nThis function constructs the required debugging string by extracting the necessary information from the `params` list and `golds` dictionary, and then formats it according to the specified layout. The `warn_str` is appended exactly as provided, ensuring that any leading newlines or other formatting are preserved."}
{"task_id": 304, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n    \n    N, M = X.shape\n    \n    # Handle different types of V\n    if V is None:\n        V_inv = np.eye(M)\n    elif isinstance(V, (int, float)):\n        V_inv = V * np.eye(M)\n    elif isinstance(V, (list, tuple)):\n        V_inv = np.diag(V)\n    else:\n        V_inv = np.linalg.inv(V)\n    \n    # Handle different types of mu\n    if isinstance(mu, (int, float)):\n        mu = np.full(M, mu)\n    \n    # Compute posterior mean and covariance\n    XTX = X.T @ X\n    XTy = X.T @ y\n    \n    Sigma_b = np.linalg.inv(V_inv + XTX)\n    mu_b = Sigma_b @ (V_inv @ mu + XTy)\n    \n    return [round(coef, 4) for coef in mu_b]\n\n# Example usage\nX = np.array([[1.0], [2.0], [3.0]])\ny = np.array([2.0, 4.0, 6.0])\nalpha = 1.0\nbeta = 2.0\nmu = 0.0\nV = 1.0\nfit_intercept = True\n\nprint(bayesian_posterior_mean(X, y, alpha, beta, mu, V, fit_intercept))\n```\n\nThis script defines the `bayesian_posterior_mean` function, which computes the posterior mean of the regression coefficients in Bayesian linear regression with an unknown noise variance. The function handles different types of prior specifications for `V` and `mu`, and optionally adds an intercept column to the design matrix `X`. The example usage demonstrates how to call the function with a simple dataset."}
{"task_id": 308, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(m):\n        return 700 * (10**(m / 2595) - 1)\n\n    # Convert min and max frequencies to Mel scale\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n\n    # Generate n_filters+2 equally spaced Mel values\n    mel_points = np.linspace(min_mel, max_mel, n_filters + 2)\n\n    # Convert Mel values back to Hz\n    hz_points = mel_to_hz(mel_points)\n\n    # Initialize the filterbank matrix\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n\n    for i in range(n_filters):\n        f_left = hz_points[i]\n        f_center = hz_points[i + 1]\n        f_right = hz_points[i + 2]\n\n        for k in range(N // 2 + 1):\n            f_k = k * fs / N\n\n            if f_left < f_k <= f_center:\n                filterbank[i, k] = (f_k - f_left) / (f_center - f_left)\n            elif f_center < f_k <= f_right:\n                filterbank[i, k] = (f_right - f_k) / (f_right - f_center)\n\n        if normalize:\n            filterbank[i] *= 2 / (f_right - f_left)\n\n    # Round to 4 decimal places and convert to a list of lists\n    filterbank = np.round(filterbank, 4).tolist()\n\n    return filterbank\n\n# Example usage\nN = 8\nn_filters = 3\nfs = 8000\nmin_freq = 0\nmax_freq = None\nnormalize = False\n\nprint(mel_filterbank(N, n_filters, fs, min_freq, max_freq, normalize))\n```\n\nThis script defines the `mel_filterbank` function according to the specified requirements. It includes the conversion between Hz and Mel scales, the creation of triangular filters, and the optional normalization step. The output is a list of lists with each element rounded to four decimal places. The example usage at the end demonstrates how to call the function with the given parameters."}
{"task_id": 312, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    \n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n    \n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    \n    n = np.arange(window_len)\n    bh_window = (a0 - a1 * np.cos(2 * np.pi * n / N) +\n                 a2 * np.cos(4 * np.pi * n / N) -\n                 a3 * np.cos(6 * np.pi * n / N))\n    \n    if not symmetric:\n        bh_window = bh_window[:-1]\n    \n    return [round(x, 4) for x in bh_window]\n\n# Example usage:\nprint(blackman_harris(5, symmetric=True))  # Output: [0.0001, 0.2175, 1.0, 0.2175, 0.0001]\nprint(blackman_harris(5, symmetric=False)) # Output: [0.0884, 0.5446, 1.0, 0.5446, 0.0884]\n```\n\nThis script defines the `blackman_harris` function, which generates a Blackman-Harris window of a specified length and type (symmetric or periodic). The function handles special cases for window lengths less than or equal to 1 and ensures that all values in the returned window are rounded to four decimal places."}
{"task_id": 313, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef digamma(x):\n    \"\"\"Compute the digamma function using recursion and asymptotic expansion.\"\"\"\n    # Shift x to a moderate value using the recursion \u03c8(x) = \u03c8(x+1) - 1/x\n    while x < 6:\n        x += 1\n        result = -1 / x\n    else:\n        result = 0\n    \n    # Apply the asymptotic expansion for large x\n    result += math.log(x) - 0.5 / x - 1 / (12 * x**2) + 1 / (120 * x**4) - 1 / (252 * x**6)\n    return result\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    gamma_d = gamma[d]\n    gamma_dt = gamma_d[t]\n    sum_gamma_d = sum(gamma_d)\n    \n    # Compute the expectation using the digamma function\n    expectation = digamma(gamma_dt) - digamma(sum_gamma_d)\n    \n    # Return the result rounded to 4 decimal places\n    return round(expectation, 4)\n\n# Example usage:\ngamma = np.array([[4, 5, 6],\n                  [1, 1, 1]])\nd = 0\nt = 2\nprint(expected_log_dirichlet(gamma, d, t))  # Output: -0.9682\n```\n\nThis script defines a `digamma` function that computes the digamma function using recursion and asymptotic expansion, and an `expected_log_dirichlet` function that calculates the expected logarithm of a Dirichlet component using the provided parameters. The example usage demonstrates how to use the `expected_log_dirichlet` function with a sample input."}
{"task_id": 317, "completion_id": 0, "completion": "```python\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    # Determine the previous index\n    prev_ix = max(ix - 1, 0)\n    \n    # Extract previous and current predictions and labels\n    prev_prediction, prev_label = params[prev_ix]\n    curr_prediction, curr_label = params[ix]\n    \n    # Get the gold values for the previous and current labels\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    \n    # Construct the formatted string\n    report = (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_prediction}\\n\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{prev_gold}\\n\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_prediction}\\n\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{curr_gold}{warn_str}\\n\"\n        \"----------------------- END DEBUG -----------------------\"\n    )\n    \n    return report\n\n# Example usage:\nparams = [(\"cat\", \"A\"), (\"dog\", \"B\")]\ngolds  = {\"A\": \"feline\", \"B\": \"canine\"}\nix     = 1\nprint(err_fmt(params, golds, ix))\n```\n\nThis script defines the `err_fmt` function as specified, which constructs a detailed debug report comparing predictions to gold values. The function handles the formatting exactly as described in the task, including the optional warning string. The example usage at the end demonstrates how the function can be called and what output it produces."}
{"task_id": 318, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    weights = np.ones(n_samples) / n_samples\n    alpha = np.zeros(n_estimators)\n    stumps = []\n\n    for m in range(n_estimators):\n        min_error = float('inf')\n        best_feature = None\n        best_threshold = None\n        best_polarity = None\n\n        for feature in range(n_features):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = np.ones(n_samples)\n                    predictions[X_train[:, feature] * polarity < threshold * polarity] = -1\n                    weighted_error = np.sum(weights[predictions != y_train])\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        polarity = -polarity\n\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_feature = feature\n                        best_threshold = threshold\n                        best_polarity = polarity\n\n        epsilon = min_error\n        alpha[m] = 0.5 * math.log((1 - epsilon) / epsilon)\n        predictions = np.ones(n_samples)\n        predictions[X_train[:, best_feature] * best_polarity < best_threshold * best_polarity] = -1\n        weights *= np.exp(-alpha[m] * y_train * predictions)\n        weights /= np.sum(weights)\n        stumps.append((best_feature, best_threshold, best_polarity))\n\n    final_predictions = np.zeros(X_test.shape[0])\n    for m in range(n_estimators):\n        feature, threshold, polarity = stumps[m]\n        predictions = np.ones(X_test.shape[0])\n        predictions[X_test[:, feature] * polarity < threshold * polarity] = -1\n        final_predictions += alpha[m] * predictions\n\n    return [1 if pred >= 0 else -1 for pred in final_predictions]\n\n# Example usage:\nX_train = np.array([[ 1,  2],\n                    [ 2,  1],\n                    [-1, -2],\n                    [-2, -1]])\ny_train = np.array([ 1, 1, -1, -1])\nX_test  = np.array([[ 1,  1],\n                   [-1, -1]])\nn_estimators = 3\n\nprint(adaboost_predict(X_train, y_train, X_test, n_estimators))  # Output: [1, -1]\n```\n\nThis script implements the AdaBoost.M1 algorithm using decision stumps as weak learners. It trains the model on the provided training data and predicts the labels for the test data. The predictions are returned as a list of `-1` and `1`."}
{"task_id": 329, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    \n    df = fs / N\n    if positive_only:\n        # Non-negative frequencies\n        freqs = np.arange(0, N // 2 + 1) * df\n    else:\n        # Full list of frequencies\n        freqs = np.fft.fftfreq(N, d=1/fs)\n    \n    return [round(freq, 4) for freq in freqs.tolist()]\n\n# Example usage:\nprint(dft_bins(8, 8000, positive_only=True))  # Output: [0.0, 1000.0, 2000.0, 3000.0, 4000.0]\nprint(dft_bins(8, 8000, positive_only=False)) # Output: [0.0, 1000.0, 2000.0, 3000.0, -4000.0, -3000.0, -2000.0, -1000.0]\n```\n\nThis script defines the `dft_bins` function which calculates the center frequencies of DFT bins based on the given parameters. It handles both positive-only and full frequency modes, and ensures the output is rounded to four decimal places. The function also checks for valid input values for `N` and `fs`, returning an empty list if either is non-positive."}
{"task_id": 331, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    \n    n_samples = y_true.shape[0]\n    \n    # Initialize an array to store the sum of OOB predictions for each sample\n    oob_sums = np.zeros(n_samples)\n    # Initialize an array to store the count of OOB predictions for each sample\n    oob_counts = np.zeros(n_samples)\n    \n    # Iterate over each sample and each tree\n    for i in range(n_samples):\n        for j in range(predictions.shape[1]):\n            if oob_mask[i, j]:\n                oob_sums[i] += predictions[i, j]\n                oob_counts[i] += 1\n    \n    # Calculate the mean of OOB predictions for each sample\n    oob_means = np.divide(oob_sums, oob_counts, where=oob_counts != 0)\n    \n    # Calculate the squared errors for samples with at least one OOB prediction\n    squared_errors = (oob_means[oob_counts > 0] - y_true[oob_counts > 0]) ** 2\n    \n    # If no sample has an OOB prediction, return -1\n    if squared_errors.size == 0:\n        return -1\n    \n    # Calculate the OOB-MSE\n    oob_mse_value = np.mean(squared_errors)\n    \n    return round(oob_mse_value, 4)\n\n# Example usage:\ny_true = [3, 5, 2, 7]\npredictions = [[2.5, 3.2],\n               [4.8, 5.1],\n               [2.1, 2.5],\n               [6.5, 7.2]]\noob_mask = [[True, False],\n            [False, True],\n            [True, True],\n            [False, False]]\n\nprint(oob_mse(y_true, predictions, oob_mask))  # Output: 0.1167\n```"}
{"task_id": 332, "completion_id": 0, "completion": "```\npython\nfrom collections import Counter\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    # Step 1: Compute the support for every item\n    item_support = Counter(item for transaction in transactions for item in transaction)\n    \n    # Step 2: Discard items whose support is smaller than min_support\n    frequent_items = {item: support for item, support in item_support.items() if support >= min_support}\n    \n    # Step 3: Create a global ordering of the remaining items\n    # First by decreasing support, then alphabetically to break ties\n    ordered_items = sorted(frequent_items, key=lambda x: (-frequent_items[x], x))\n    \n    # Step 4: Build the FP-Tree\n    root = {\"support\": 0, \"children\": {}}\n    \n    for transaction in transactions:\n        # Remove duplicates, keep only frequent items, and reorder them according to the global ordering\n        filtered_transaction = sorted(set(transaction) & set(frequent_items), key=lambda x: ordered_items.index(x))\n        \n        # Walk from the root and update/extend the path\n        current_node = root\n        for item in filtered_transaction:\n            if item not in current_node[\"children\"]:\n                current_node[\"children\"][item] = {\"support\": 0, \"children\": {}}\n            current_node = current_node[\"children\"][item]\n            current_node[\"support\"] += 1\n    \n    return root\n\n# Example usage:\ntransactions = [['a','b','c'], ['a','b'], ['a','c']]\nmin_support = 2\nfp_tree = build_fp_tree(transactions, min_support)\nprint(fp_tree)\n```\n\nThis script defines a function `build_fp_tree` that constructs an FP-Tree from a list of transactions and a minimum support threshold. The tree is represented as a nested dictionary, and the function follows the steps outlined in the task description. The example usage at the end demonstrates how to call the function and print the resulting FP-Tree."}
{"task_id": 336, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", Y: list[list[int | float]] | \"np.ndarray\" | None = None, c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    # Convert inputs to NumPy arrays for easier manipulation\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    \n    # Check if the number of columns in X and Y are the same\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # Compute the kernel matrix\n    K = np.dot(X, Y.T) + c0\n    \n    # Round the results to 4 decimal places and convert to list of lists\n    K_rounded = np.round(K, 4).tolist()\n    \n    return K_rounded\n\n# Example usage:\nX = [[1, 2, 3], [4, 5, 6]]\nY = [[7, 8, 9]]\nc0 = 0\nprint(linear_kernel(X, Y, c0))  # Output: [[50.0], [122.0]]\n```\n\nThis script defines the `linear_kernel` function, which computes the linear kernel matrix for given input vectors `X` and `Y` (or `X` and `X` if `Y` is not provided). It handles both Python lists and NumPy arrays, checks for compatible dimensions, and returns the kernel matrix rounded to four decimal places. If the dimensions are incompatible, it returns `-1`."}
{"task_id": 340, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n\n    # Update the first moment estimate\n    m_t = beta1 * m + (1 - beta1) * grad\n    \n    # Update the second moment estimate\n    v_t = beta2 * v + (1 - beta2) * grad**2\n    \n    # Compute the bias-corrected first moment estimate\n    m_hat_t = m_t / (1 - beta1**t)\n    \n    # Compute the bias-corrected second moment estimate\n    v_hat_t = v_t / (1 - beta2**t)\n    \n    # Update the parameter\n    param_t = param - lr * m_hat_t / (np.sqrt(v_hat_t) + eps)\n    \n    # Return the updated parameter and moment estimates as lists rounded to 8 decimal places\n    return (\n        param_t.round(8).tolist(),\n        m_t.round(8).tolist(),\n        v_t.round(8).tolist()\n    )\n\n# Example usage\nparam = np.array([0.1, -0.2])\ngrad = np.array([0.01, -0.01])\nt = 1\nm = np.array([0., 0.])\nv = np.array([0., 0.])\nlr = 0.001\nbeta1 = 0.9\nbeta2 = 0.999\neps = 1e-8\n\nupdated_param, new_m, new_v = adam_update(param, grad, t, m, v, lr, beta1, beta2, eps)\nprint(updated_param)  # [0.099, -0.199]\nprint(new_m)          # [0.001, -0.001]\nprint(new_v)          # [1e-07, 1e-07]\n```\n\nThis script defines the `adam_update` function, which performs a single step of the Adam optimization algorithm. It updates the parameter, first moment estimate, and second moment estimate according to the Adam update rules and returns them as lists rounded to 8 decimal places. The example usage demonstrates how to call the function and print the results."}
{"task_id": 343, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                          rewards: list[float] | np.ndarray,\n                          retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # Determine the number of samples to retain\n    num_samples_to_retain = int(retain_prcnt * len(theta_samples))\n    \n    # Get the indices of the samples with the highest rewards\n    elite_indices = np.argsort(rewards)[-num_samples_to_retain:]\n    \n    # Retain the top samples\n    elite_samples = theta_samples[elite_indices]\n    \n    # Compute the mean and variance of the retained samples\n    mean = np.mean(elite_samples, axis=0)\n    variance = np.var(elite_samples, axis=0)\n    \n    # Round the results to four decimal places\n    mean_rounded = [round(m, 4) for m in mean]\n    variance_rounded = [round(v, 4) for v in variance]\n    \n    return mean_rounded, variance_rounded\n\n# Example usage:\ntheta_samples = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])\nrewards = [10, 20, 30, 40, 50]\nretain_prcnt = 0.4\nprint(cross_entropy_update(theta_samples, rewards, retain_prcnt))  # Output: ([8.0, 9.0], [1.0, 1.0])\n```\n\nThis script defines the `cross_entropy_update` function, which performs the required operations to update the mean and variance of the parameter samples based on their rewards, as described in the task. The function sorts the samples by their rewards, retains the top `retain_prcnt` fraction, and then calculates the mean and variance of these retained samples, rounding the results to four decimal places."}
{"task_id": 353, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    \n    label_counts = Counter(labels)\n    total_count = len(labels)\n    entropy_value = 0.0\n    \n    for count in label_counts.values():\n        probability = count / total_count\n        entropy_value -= probability * math.log2(probability)\n    \n    return round(entropy_value, 5)\n\n# Example usage:\nlabels = [0, 0, 1, 1, 1]\nprint(entropy(labels))  # Output: 0.97095\n```\n\nThis script defines the `entropy` function, which calculates the base-2 Shannon entropy of a given sequence of class labels. It handles the special cases of an empty input and identical labels, and rounds the result to five decimal places. The example usage demonstrates how to call the function and print the result."}
{"task_id": 354, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kernel_rows, kernel_cols, _, out_ch = W.shape\n\n    # Handle padding\n    if isinstance(pad, int):\n        pad = (pad, pad, pad, pad)\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pad = (pad[0], pad[0], pad[1], pad[1])\n    elif isinstance(pad, tuple) and len(pad) == 4:\n        pass\n    elif pad == 'same':\n        pr1 = (out_rows - 1) * stride + kernel_rows - in_rows\n        pr2 = (out_rows - 1) * stride + kernel_rows - in_rows\n        pc1 = (out_cols - 1) * stride + kernel_cols - in_cols\n        pc2 = (out_cols - 1) * stride + kernel_cols - in_cols\n        pr1, pr2 = pr1 // 2, pr2 // 2\n        pc1, pc2 = pc1 // 2, pc2 // 2\n        pad = (pr1, pr2, pc1, pc2)\n    else:\n        pad = (0, 0, 0, 0)  # Invalid pad, use no padding\n\n    # Apply padding\n    X_padded = np.pad(X, ((0, 0), (pad[0], pad[1]), (pad[2], pad[3]), (0, 0)), mode='constant')\n\n    # Compute output dimensions\n    out_rows = (in_rows + pad[0] + pad[1] - (kernel_rows - 1) * (dilation + 1)) // stride + 1\n    out_cols = (in_cols + pad[2] + pad[3] - (kernel_cols - 1) * (dilation + 1)) // stride + 1\n\n    # Perform im2col\n    X_col = np.zeros((kernel_rows * kernel_cols * in_ch, out_rows * out_cols * n_ex))\n    for ex in range(n_ex):\n        for i in range(out_rows):\n            for j in range(out_cols):\n                r_start = i * stride\n                c_start = j * stride\n                r_end = r_start + (kernel_rows - 1) * (dilation + 1) + 1\n                c_end = c_start + (kernel_cols - 1) * (dilation + 1) + 1\n                X_col[:, i * out_cols * n_ex + j * n_ex + ex] = X_padded[ex, r_start:r_end:dilation+1, c_start:c_end:dilation+1, :].flatten()\n\n    # Reshape W for GEMM\n    W_col = W.transpose(3, 2, 0, 1).reshape(out_ch, -1)\n\n    # Perform GEMM\n    out_col = W_col @ X_col\n\n    # Reshape output\n    out = out_col.reshape(out_ch, out_rows, out_cols, n_ex).transpose(3, 1, 2, 0)\n\n    return out.tolist()\n\n# Example usage\nX = np.array([[[[1.],[2.],[3.]], \n                [[4.],[5.],[6.]],\n                [[7.],[8.],[9.]]]])\nW = np.array([[[[1.]],[[0.]]],\n              [[[0.]],[[-1.]]]])\nstride = 1\npad = 0\n\nresult = conv2D(X, W, stride, pad)\nprint(result)\n```\n\nThis script defines the `conv2D` function that performs 2-D convolution using the im2col + GEMM strategy. It handles different padding specifications and dilation factors. The example usage at the end demonstrates how to use the function with a simple input and kernel."}
{"task_id": 355, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # Step 1: Standardise the data\n    mean = np.mean(data, axis=0)\n    centred_data = data - mean\n\n    if solver == \"svd\":\n        # Step 2: Use SVD to get principal directions\n        U, S, Vt = np.linalg.svd(centred_data, full_matrices=False)\n        # The principal directions are the columns of Vt\n        principal_directions = Vt.T\n        # The explained variance is the square of the singular values divided by n-1\n        explained_variance = S**2 / (centred_data.shape[0] - 1)\n    elif solver == \"eigen\":\n        # Step 2: Use eigen-decomposition of the covariance matrix\n        cov_matrix = np.cov(centred_data, rowvar=False, ddof=1)\n        eigenvalues, eigenvectors = np.linalg.eigh(cov_matrix)\n        # Sort eigenvalues and eigenvectors in descending order\n        idx = np.argsort(eigenvalues)[::-1]\n        eigenvalues = eigenvalues[idx]\n        eigenvectors = eigenvectors[:, idx]\n        # The principal directions are the eigenvectors\n        principal_directions = eigenvectors\n        # The explained variance is the eigenvalues\n        explained_variance = eigenvalues\n    else:\n        raise ValueError(\"Solver must be either 'svd' or 'eigen'\")\n\n    # Step 3: Sort the directions in descending order of their importance\n    sorted_indices = np.argsort(explained_variance)[::-1]\n    principal_directions = principal_directions[:, sorted_indices]\n    explained_variance = explained_variance[sorted_indices]\n\n    # Step 4: Keep the first n_components directions\n    n_components = min(n_components, principal_directions.shape[1])\n    principal_directions = principal_directions[:, :n_components]\n    explained_variance = explained_variance[:n_components]\n\n    # Step 5: Make the sign of every kept direction deterministic\n    for i in range(n_components):\n        first_non_zero_idx = np.where(principal_directions[:, i] != 0)[0][0]\n        if principal_directions[first_non_zero_idx, i] < 0:\n            principal_directions[:, i] *= -1\n\n    # Step 6: Project the centred data onto the retained directions\n    scores = centred_data @ principal_directions\n\n    # Step 7: Calculate the explained variance ratio\n    total_variance = np.sum(explained_variance)\n    explained_variance_ratio = explained_variance / total_variance\n\n    # Step 8: Round the final results\n    scores_rounded = np.round(scores, 4).tolist()\n    explained_variance_ratio_rounded = np.round(explained_variance_ratio, 4).tolist()\n\n    return scores_rounded, explained_variance_ratio_rounded\n\n# Example usage:\ndata = np.array([[1, 2], [3, 4], [5, 6]])\nn_components = 1\nsolver = \"svd\"\nprint(pca_transform(data, n_components, solver))\n```\n\nThis script implements the PCA transformation with the specified requirements, including the deterministic sign fix for the principal components. The example usage at the end demonstrates how to call the function with a sample dataset."}
{"task_id": 356, "completion_id": 0, "completion": "```\npython\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # For classification, return the index of the maximum probability\n        return int(numpy.argmax(leaf.value))\n    else:\n        # For regression, return the scalar value\n        return leaf.value\n\n# Example usage:\n# Classification example\nleaf_class = Leaf([0.25, 0.55, 0.20])\nprint(leaf_predict(leaf_class, classifier=True))  # Output: 1\n\n# Regression example\nleaf_reg = Leaf(3.14)\nprint(leaf_predict(leaf_reg, classifier=False))  # Output: 3.14\n```\n\nNote: The provided solution assumes that `numpy` is imported. If `numpy` is not available, you can replace `numpy.argmax` with a pure Python alternative. Here is the updated code without `numpy`:\n\n```python\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # For classification, return the index of the maximum probability\n        return int(max(range(len(leaf.value)), key=leaf.value.__getitem__))\n    else:\n        # For regression, return the scalar value\n        return leaf.value\n\n# Example usage:\n# Classification example\nleaf_class = Leaf([0.25, 0.55, 0.20])\nprint(leaf_predict(leaf_class, classifier=True))  # Output: 1\n\n# Regression example\nleaf_reg = Leaf(3.14)\nprint(leaf_predict(leaf_reg, classifier=False))  # Output: 3.14\n```"}
{"task_id": 357, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    # Step 1: Initialize centroids with the first K samples\n    centroids = data[:K].copy()\n    \n    for _ in range(max_iters):\n        # Step 2: Assign each sample to the closest centroid\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Step 3: Recompute centroids\n        new_centroids = np.array([data[labels == k].mean(axis=0) if np.any(labels == k) else centroids[k] for k in range(K)])\n        \n        # Check for convergence\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 1e-6):\n            break\n        \n        centroids = new_centroids\n    \n    # Sort centroids lexicographically and round to four decimals\n    sorted_centroids = sorted(centroids, key=lambda x: tuple(x))\n    rounded_centroids = [[round(coord, 4) for coord in centroid] for centroid in sorted_centroids]\n    \n    return rounded_centroids\n\n# Example usage:\ndata = np.array([[1, 1], [1, 2], [2, 1], [8, 8], [9, 8], [8, 9]])\nK = 2\nprint(kmeans(data, K))  # Output: [[1.3333, 1.3333], [8.3333, 8.3333]]\n```\n\nThis script implements the K-Means clustering algorithm from scratch, following the specified steps and constraints. It initializes centroids using the first K samples, iteratively assigns samples to the nearest centroid, updates centroids, and checks for convergence. Finally, it sorts and rounds the centroids before returning them."}
{"task_id": 362, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | \"np.ndarray\") -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert input to a float NumPy array\n    matrix = np.array(data, dtype=float)\n    \n    # Compute the sum of each row\n    row_sums = np.sum(matrix, axis=1)\n    \n    # Check if any row sum is zero\n    if np.any(row_sums == 0):\n        return -1\n    \n    # Divide each element by its row sum\n    stochastic_matrix = matrix / row_sums[:, np.newaxis]\n    \n    # Round to 4 decimal places\n    stochastic_matrix_rounded = np.round(stochastic_matrix, 4)\n    \n    # Convert to a list of lists and return\n    return stochastic_matrix_rounded.tolist()\n\n# Example usage:\ndata = [[1, 2, 3], [4, 5, 6]]\nprint(row_stochastic_matrix(data))  # Output: [[0.1667, 0.3333, 0.5], [0.2667, 0.3333, 0.4]]\n```\n\nThis script defines the `row_stochastic_matrix` function, which processes a 2-D list or NumPy array to convert it into a row-stochastic matrix, ensuring each row sums to 1. If any row sum is zero, it returns -1. The result is rounded to four decimal places and returned as a list of lists."}
{"task_id": 363, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    \n    def is_box_space(space: Space) -> bool:\n        if isinstance(space, Box):\n            return True\n        elif isinstance(space, (Tuple, Dict)):\n            sub_spaces = space.spaces if isinstance(space, Dict) else space.spaces\n            return all(is_box_space(sub_space) for sub_space in sub_spaces)\n        else:\n            return False\n    \n    cont_action = is_box_space(env.action_space) if tuple_action else isinstance(env.action_space, Box)\n    cont_obs = is_box_space(env.observation_space) if tuple_obs else isinstance(env.observation_space, Box)\n    \n    return (cont_action, cont_obs)\n\n# Example usage:\nenv1 = Env(Box(low=-1.0, high=1.0, shape=(3,)), tuple_action=False, tuple_obs=False)\nprint(is_continuous(env1, tuple_action=False, tuple_obs=False))  # Output: (True, True)\n\nenv2 = Env(Tuple([Box(low=-1.0, high=1.0, shape=(3,)), Box(low=-1.0, high=1.0, shape=(2,))]), tuple_action=True, tuple_obs=False)\nprint(is_continuous(env2, tuple_action=True, tuple_obs=False))  # Output: (True, False)\n\nenv3 = Env(Dict({'a': Box(low=-1.0, high=1.0, shape=(3,)), 'b': Discrete(5)}), tuple_action=True, tuple_obs=False)\nprint(is_continuous(env3, tuple_action=True, tuple_obs=False))  # Output: (False, False)\n```\n\nThis script defines the necessary classes and the `is_continuous` function to determine if the action and observation spaces of an environment are continuous based on the given flags. The function checks if the spaces are instances of `Box` or if they are composite spaces (`Tuple` or `Dict`) where all sub-spaces are `Box`."}
{"task_id": 369, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    # Initialize the running prediction with zeros of the same shape as a single update\n    running_pred = np.zeros_like(updates[0])\n    \n    # Aggregate the updates\n    for u in updates:\n        running_pred -= learning_rate * u\n    \n    if regression:\n        # For regression, return the running prediction rounded to 4 decimals\n        return np.round(running_pred, 4)\n    else:\n        # For classification, apply softmax and return the predicted class labels\n        probabilities = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        probabilities /= np.sum(probabilities, axis=1, keepdims=True)\n        return np.argmax(probabilities, axis=1)\n\n# Example usage:\nupdates = [np.array([[0.2, -0.1, 0.1],\n                     [-0.3, 0.4, -0.1]]),\n          np.array([[0.1, 0.2, -0.3],\n                    [0.2, -0.2, 0.0]])]\nlearning_rate = 0.5\nregression = False\n\n# Expected output: [2, 0]\nprint(gradient_boosting_predict(updates, learning_rate, regression))\n```\n\nThis script defines the `gradient_boosting_predict` function as specified, handling both regression and classification cases. The function uses NumPy operations to ensure it is fully vectorized and efficient. The example usage demonstrates how to call the function and verify its output."}
{"task_id": 371, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, _, out_channels = W.shape\n\n    # Calculate effective kernel width with dilation\n    effective_kernel_width = (kernel_width - 1) * dilation + 1\n\n    # Determine padding\n    if isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple):\n        p_left, p_right = pad\n    elif pad == \"same\":\n        out_len = np.ceil(signal_length / stride).astype(int)\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel_width - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    else:\n        raise ValueError(\"Invalid padding argument\")\n\n    # Pad the input signals\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n\n    # Calculate output length\n    output_length = (signal_length + p_left + p_right - effective_kernel_width) // stride + 1\n\n    # Initialize output volume\n    output = np.zeros((n_examples, output_length, out_channels))\n\n    # Perform the convolution\n    for example in range(n_examples):\n        for out_channel in range(out_channels):\n            for i in range(output_length):\n                start = i * stride\n                end = start + effective_kernel_width\n                x_slice = X_padded[example, start:end:1+dilation, :]\n                output[example, i, out_channel] = np.sum(x_slice * W[:, :, out_channel])\n\n    return output.tolist()\n\n# Example usage\nX = np.array([[[1], [2], [3], [4], [5]]])\nW = np.array([[[1]], [[0]], [[-1]]])\nstride = 1\npad = \"same\"\ndilation = 0\n\nresult = conv1D(X, W, stride, pad, dilation)\nprint(result)\n```\n\nThis script defines the `conv1D` function, which performs a 1-D cross-correlation between a batch of 1-D, multi-channel signals and a bank of kernels, supporting various padding options, strides, and dilation. The example usage demonstrates how to use the function with a specific input and kernel, and prints the resulting output."}
{"task_id": 373, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gini(y: list[int] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if not y:\n        return 0.0\n    \n    # Convert to numpy array if it's not already\n    y = np.array(y)\n    \n    # Calculate the number of samples\n    N = len(y)\n    \n    # Calculate the number of samples for each class\n    unique_classes, counts = np.unique(y, return_counts=True)\n    \n    # Calculate the relative frequencies\n    p_c = counts / N\n    \n    # Calculate the Gini impurity\n    gini_impurity = 1 - np.sum(p_c ** 2)\n    \n    return round(gini_impurity, 4)\n\n# Example usage:\ny = [0, 1, 1, 0, 2]\nprint(gini(y))  # Output: 0.64\n```"}
{"task_id": 374, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\"\"\"\n    # Check if the number of samples in X and y are consistent\n    if X.shape[0] != y.shape[0]:\n        return -1\n    \n    # Initialize parameters\n    m, n = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n    \n    # Perform gradient descent\n    for _ in range(n_iterations):\n        # Calculate predictions\n        y_pred = X @ theta + b\n        \n        # Calculate errors\n        errors = y_pred - y\n        \n        # Calculate gradients\n        dw = (2 / m) * (X.T @ errors)\n        db = (2 / m) * np.sum(errors)\n        \n        # Update parameters\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    \n    # Return the learned parameters rounded to 4 decimal places\n    return (theta.round(4).tolist(), round(b, 4))\n\n# Example usage:\nX = np.array([[1, 2], [2, 0], [3, 1]])\ny = np.array([5, 6, 7])\nlearning_rate = 0.01\nn_iterations = 10000\n\nresult = linear_regression_gd(X, y, learning_rate, n_iterations)\nprint(result)  # Output should be close to ([1.0, 0.0], 4.0)\n```\n\nThis script defines a function `linear_regression_gd` that trains a multiple linear regression model using batch gradient descent. It checks for consistency in the input data, initializes the parameters, and iteratively updates them using the gradient descent algorithm. The final parameters are returned, rounded to four decimal places. The example usage demonstrates how to call the function and print the result."}
{"task_id": 376, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Convert the input list of lists to a NumPy array\n    np_array = np.array(X)\n    \n    # Check if the matrix is square\n    if np_array.shape[0] != np_array.shape[1]:\n        return False\n    \n    # Check if the matrix is symmetric using np.allclose to handle floating-point precision\n    return np.allclose(np_array, np_array.T, atol=1e-8)\n\n# Example usage:\nA = [[1, 2, 3], [2, 5, 6], [3, 6, 9]]\nprint(is_symmetric(A))  # Output: True\n\nB = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(is_symmetric(B))  # Output: False\n\nC = [[1.0, 2.0], [2.0000000001, 1.0]]\nprint(is_symmetric(C))  # Output: True\n```\n\nThis script defines a function `is_symmetric` that checks if a given 2-D numeric array is symmetric with respect to its main diagonal. It uses NumPy to handle the matrix operations and floating-point precision comparisons. The function first checks if the matrix is square, and then it uses `np.allclose` to compare the matrix with its transpose, allowing for a small tolerance to account for potential floating-point errors."}
{"task_id": 377, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Calculate the negative gradient of the logistic loss for binary classification.\n    \n    Parameters:\n    y (list): Binary class labels (0 or 1).\n    f (list): Current prediction scores (floats).\n    \n    Returns:\n    list: List of negative gradients rounded to four decimal places.\n          Returns -1 if the label array contains values other than 0 or 1.\n    \"\"\"\n    # Check if all labels are either 0 or 1\n    if not all(label in [0, 1] for label in y):\n        return -1\n    \n    # Convert labels to the set {-1, 1}\n    y_prime = [2 * label - 1 for label in y]\n    \n    # Calculate the negative gradient for each sample\n    gradients = []\n    for y_i, f_i in zip(y_prime, f):\n        gradient = y_i / (1 + np.exp(y_i * f_i))\n        gradients.append(round(gradient, 4))\n    \n    return gradients\n\n# Example usage:\ny = [0, 1, 0]\nf = [0.0, 0.5, -0.5]\nprint(logistic_negative_gradient(y, f))  # Output: [-0.5, 0.3775, -0.3775]\n```\n\nThis script defines a function `logistic_negative_gradient` that calculates the negative gradient of the logistic loss for binary classification. It first checks if the labels are valid (0 or 1), converts them to the set {-1, 1}, and then computes the negative gradient for each sample. The results are rounded to four decimal places and returned as a list. If the labels are invalid, the function returns -1."}
{"task_id": 380, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    # Constants\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n    \n    # Convert input to numpy array for element-wise operations\n    x = np.array(x, dtype=float)\n    \n    # Compute SELU, first derivative, and second derivative\n    if order == 0:\n        # SELU(x) = scale * ELU(x, alpha)\n        selu_x = np.where(x > 0, scale * x, scale * alpha * (np.exp(x) - 1))\n    elif order == 1:\n        # First derivative of SELU\n        selu_x = np.where(x > 0, scale, scale * alpha * np.exp(x))\n    elif order == 2:\n        # Second derivative of SELU\n        selu_x = np.where(x > 0, 0, scale * alpha * np.exp(x))\n    else:\n        raise ValueError(\"Order must be 0, 1, or 2.\")\n    \n    # Round to 4 decimal places and convert to list\n    result = np.round(selu_x, 4).tolist()\n    \n    return result\n\n# Example usage:\nx = np.array([-1.0, 0.0, 1.0])\nprint(selu(x, order=0))  # Output: [-1.1113, 0.0, 1.0507]\nprint(selu(x, order=1))  # Output: [0.6219, 1.0507, 1.0507]\nprint(selu(x, order=2))  # Output: [1.7576, 0.0, 0.0]\n```\n\nThis script defines the `selu` function, which computes the SELU activation and its first and second derivatives for a given input `x` and `order`. The function handles scalar, 1-D, and multi-D inputs and returns the results as Python lists, rounded to four decimal places."}
{"task_id": 387, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Initial prediction: mean of the target values\n    y_pred = np.full_like(y, y.mean())\n    \n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y - y_pred\n        \n        # Sort indices by x values\n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        sorted_residuals = residuals[sorted_indices]\n        \n        # Initialize variables to track the best split\n        best_split = None\n        best_mse = float('inf')\n        best_left_mean = None\n        best_right_mean = None\n        \n        # Evaluate all possible splits\n        for i in range(len(sorted_x) - 1):\n            if sorted_x[i] == sorted_x[i + 1]:\n                continue\n            \n            # Calculate the split point\n            split_point = (sorted_x[i] + sorted_x[i + 1]) / 2.0\n            \n            # Calculate means of residuals on both sides of the split\n            left_residuals = sorted_residuals[:i + 1]\n            right_residuals = sorted_residuals[i + 1:]\n            \n            left_mean = left_residuals.mean()\n            right_mean = right_residuals.mean()\n            \n            # Calculate the mean squared error for this split\n            mse = (left_residuals - left_mean).var() * len(left_residuals) + \\\n                  (right_residuals - right_mean).var() * len(right_residuals)\n            \n            # Update the best split if this one is better\n            if mse < best_mse:\n                best_mse = mse\n                best_split = split_point\n                best_left_mean = left_mean\n                best_right_mean = right_mean\n        \n        # If no valid split was found, use the global mean residual\n        if best_split is None:\n            best_left_mean = residuals.mean()\n            best_right_mean = residuals.mean()\n            best_split = sorted_x[0]  # Arbitrarily choose the first point\n        \n        # Apply the best split to update predictions\n        stump_predictions = np.where(x <= best_split, best_left_mean, best_right_mean)\n        y_pred += learning_rate * stump_predictions\n    \n    # Return the final predictions rounded to 4 decimal places\n    return np.round(y_pred, 4).tolist()\n\n# Example usage:\nx = [1, 2]\ny = [2, 4]\nn_estimators = 1\nlearning_rate = 0.5\nprint(gradient_boosting_1d(x, y, n_estimators, learning_rate))  # Output: [2.5, 3.5]\n```"}
{"task_id": 394, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    # Initialize Eg if it is None\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    \n    # Update the running average of the squared gradients\n    Eg = rho * Eg + (1 - rho) * (grad ** 2)\n    \n    # Update the parameters\n    epsilon = 1e-8\n    w = w - (learning_rate * grad) / np.sqrt(Eg + epsilon)\n    \n    # Round the results to 4 decimal places and convert to lists\n    w_next = np.round(w, 4).tolist()\n    Eg_next = np.round(Eg, 4).tolist()\n    \n    return w_next, Eg_next\n\n# Example usage:\nw = np.array([1.0, 2.0])\ngrad = np.array([0.1, -0.2])\nEg = None\nlearning_rate = 0.01\nrho = 0.9\n\nupdated_params, updated_Eg = rmsprop_update(w, grad, Eg, learning_rate, rho)\nprint(updated_params)  # Output: [0.9684, 2.0316]\nprint(updated_Eg)      # Output: [0.001, 0.004]\n```\n\nThis script defines the `rmsprop_update` function, which performs a single update step of the RMSprop optimizer. It initializes the running average of squared gradients if necessary, updates the parameters and the running average according to the RMSprop formula, and returns the updated parameters and running average as lists rounded to four decimal places."}
{"task_id": 398, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    \n    if derivative:\n        # Compute the derivative of ELU\n        elu_values = elu(x, alpha, derivative=False)\n        gradient = np.where(x >= 0, 1.0, elu_values + alpha)\n    else:\n        # Compute the ELU activation\n        gradient = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    \n    # Round the results to 4 decimal places and convert to a list\n    return [round(value, 4) for value in gradient]\n\n# Example usage:\nx = np.array([-2, -1, 0, 1, 2])\nalpha = 0.1\nprint(elu(x, alpha, derivative=False))  # Output: [-0.0865, -0.0632, 0.0, 1.0, 2.0]\nprint(elu(x, alpha, derivative=True))   # Output: [0.1135, 0.1368, 1.0, 1.0, 1.0]\n```\n\nThis script defines the `elu` function, which computes either the ELU activation or its gradient based on the `derivative` flag. The function handles both NumPy arrays and Python lists as input, processes each element according to the ELU formula, and returns the results rounded to four decimal places."}
{"task_id": 411, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    \n    def analyze(data):\n        tuple_data = any(isinstance(x, (list, tuple, np.ndarray)) for x in data)\n        if tuple_data:\n            flattened_data = [item for sublist in data for item in sublist]\n            dim = len(data[0])\n        else:\n            flattened_data = data\n            dim = 1\n        \n        multidim_data = dim > 1\n        continuous_data = any(isinstance(x, float) and not x.is_integer() for x in flattened_data)\n        \n        unique_values_per_dim = []\n        ids_per_dim = []\n        if multidim_data:\n            for d in range(dim):\n                unique_values = set(data[i][d] for i in range(len(data)))\n                unique_values_per_dim.append(len(unique_values))\n                ids_per_dim.append(sorted(unique_values))\n        else:\n            unique_values = set(flattened_data)\n            unique_values_per_dim.append(len(unique_values))\n            ids_per_dim.append(sorted(unique_values))\n        \n        return {\n            'tuple': tuple_data,\n            'multidim': multidim_data,\n            'continuous': continuous_data,\n            'n_per_dim': unique_values_per_dim,\n            'dim': dim,\n            'ids': ids_per_dim\n        }\n    \n    action_stats = analyze(actions)\n    observation_stats = analyze(observations)\n    \n    return {\n        'tuple_actions': action_stats['tuple'],\n        'tuple_observations': observation_stats['tuple'],\n        'multidim_actions': action_stats['multidim'],\n        'multidim_observations': observation_stats['multidim'],\n        'continuous_actions': action_stats['continuous'],\n        'continuous_observations': observation_stats['continuous'],\n        'n_actions_per_dim': action_stats['n_per_dim'],\n        'action_dim': action_stats['dim'],\n        'n_obs_per_dim': observation_stats['n_per_dim'],\n        'obs_dim': observation_stats['dim'],\n        'action_ids': action_stats['ids'],\n        'obs_ids': observation_stats['ids']\n    }\n\n# Example usage:\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]\nprint(env_stats(actions, observations))\n```\n\nThis script defines the `env_stats` function, which analyzes the provided actions and observations lists to compute and return the required statistics in a dictionary format. The function handles both scalar and multi-dimensional data, checks for continuity, and calculates unique values per dimension."}
{"task_id": 413, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    \n    def mean_squared_error(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n    \n    def best_split(X, y):\n        best_feature, best_threshold, best_mse = None, None, float('inf')\n        n_samples, n_features = X.shape\n        \n        for feature in range(n_features):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                left_indices = X[:, feature] < threshold\n                right_indices = X[:, feature] >= threshold\n                \n                if np.any(left_indices) and np.any(right_indices):\n                    y_left, y_right = y[left_indices], y[right_indices]\n                    mse = (len(y_left) * mean_squared_error(y_left, np.mean(y_left)) +\n                           len(y_right) * mean_squared_error(y_right, np.mean(y_right))) / n_samples\n                    \n                    if mse < best_mse:\n                        best_mse = mse\n                        best_feature = feature\n                        best_threshold = threshold\n        \n        return best_feature, best_threshold\n    \n    def build_tree(X, y, depth=0):\n        if depth >= max_depth or len(np.unique(y)) == 1:\n            return np.mean(y)\n        \n        best_feature, best_threshold = best_split(X, y)\n        if best_feature is None:\n            return np.mean(y)\n        \n        left_indices = X[:, best_feature] < best_threshold\n        right_indices = X[:, best_feature] >= best_threshold\n        \n        left_tree = build_tree(X[left_indices], y[left_indices], depth + 1)\n        right_tree = build_tree(X[right_indices], y[right_indices], depth + 1)\n        \n        return (best_feature, best_threshold, left_tree, right_tree)\n    \n    def predict_tree(tree, X):\n        if isinstance(tree, float):\n            return tree\n        \n        feature, threshold, left_tree, right_tree = tree\n        if X[feature] < threshold:\n            return predict_tree(left_tree, X)\n        else:\n            return predict_tree(right_tree, X)\n    \n    def predict_trees(trees, X):\n        return np.array([sum(predict_tree(tree, x) for tree in trees) for x in X])\n    \n    # Initialize predictions with the mean of y_train\n    y_pred = np.full_like(y_train, np.mean(y_train))\n    trees = []\n    \n    for _ in range(n_estimators):\n        residuals = y_train - y_pred\n        tree = build_tree(X_train, residuals)\n        trees.append(tree)\n        y_pred += learning_rate * predict_trees([tree], X_train)\n    \n    final_predictions = predict_trees(trees, X_test)\n    return [round(pred, 4) for pred in final_predictions]\n\n# Example usage:\nX_train = np.array([[0], [1]])\ny_train = np.array([0, 1])\nX_test = np.array([[0], [1]])\nn_estimators = 1\nlearning_rate = 1.0\nmax_depth = 1\n\nprint(gbdt_regression(X_train, y_train, X_test, n_estimators, learning_rate, max_depth))\n```\n\nThis script implements a simplified version of Gradient Boosting Decision Trees (GBDT) for regression using only NumPy. The function `gbdt_regression` takes training data, test data, and hyperparameters to return predictions for the test data. The internal regression trees are built using a simple binary split criterion based on mean squared error."}
{"task_id": 416, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that implements the multivariate Gaussian PDF as described in the task. The script includes the necessary functions to compute the determinant and inverse of a matrix, as well as the main function to evaluate the PDF for each data point in `X`.\n\n```python\nimport numpy as np\nimport math\n\ndef matrix_determinant(matrix):\n    \"\"\"Compute the determinant of a square matrix.\"\"\"\n    if len(matrix) == 1:\n        return matrix[0][0]\n    det = 0\n    for c in range(len(matrix)):\n        det += ((-1) ** c) * matrix[0][c] * matrix_determinant(minor(matrix, 0, c))\n    return det\n\ndef minor(matrix, i, j):\n    \"\"\"Compute the minor of a matrix after removing the i-th row and j-th column.\"\"\"\n    return [row[:j] + row[j+1:] for row in (matrix[:i] + matrix[i+1:])]\n\ndef matrix_inverse(matrix):\n    \"\"\"Compute the inverse of a square matrix.\"\"\"\n    det = matrix_determinant(matrix)\n    if det == 0:\n        raise ValueError(\"Matrix is not invertible\")\n    if len(matrix) == 1:\n        return [[1 / matrix[0][0]]]\n    cofactors = []\n    for r in range(len(matrix)):\n        cofactor_row = []\n        for c in range(len(matrix)):\n            minor_matrix = minor(matrix, r, c)\n            cofactor_row.append(((-1) ** (r + c)) * matrix_determinant(minor_matrix))\n        cofactors.append(cofactor_row)\n    cofactors = transpose(cofactors)\n    for r in range(len(cofactors)):\n        for c in range(len(cofactors)):\n            cofactors[r][c] = cofactors[r][c] / det\n    return cofactors\n\ndef transpose(matrix):\n    \"\"\"Compute the transpose of a matrix.\"\"\"\n    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Compute the probability density function (PDF) of a multivariate Gaussian distribution.\n    \n    Parameters:\n    X (np.array): Data points of shape (n_samples, n_features).\n    mean (list): Mean vector of the distribution of length n_features.\n    cov (list of lists): Covariance matrix of shape (n_features, n_features).\n    \n    Returns:\n    list: List of PDF values for each data point in X, rounded to four decimal places.\n    \"\"\"\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n    \n    n_features = len(mean)\n    det_cov = matrix_determinant(cov)\n    inv_cov = matrix_inverse(cov)\n    norm_factor = 1 / math.sqrt((2 * math.pi) ** n_features * det_cov)\n    \n    pdf_values = []\n    for x in X:\n        diff = np.array(x) - np.array(mean)\n        exponent = -0.5 * np.dot(np.dot(diff, inv_cov), diff)\n        pdf_value = norm_factor * math.exp(exponent)\n        pdf_values.append(round(pdf_value, 4))\n    \n    return pdf_values\n\n# Example usage:\nX = np.array([[0, 0], [1, 1]])\nmean = [0, 0]\ncov = [[1, 0], [0, 1]]\nprint(multivariate_gaussian_pdf(X, mean, cov))  # Output: [0.1592, 0.0585]\n```\n\n### Explanation:\n1. **Matrix Determinant**: The `matrix_determinant` function computes the determinant of a square matrix using recursion.\n2. **Matrix Minor**: The `minor` function computes the minor of a matrix by removing a specified row and column.\n3. **Matrix Inverse**: The `matrix_inverse` function computes the inverse of a square matrix using the determinant and cofactors.\n4. **Transpose**: The `transpose` function computes the transpose of a matrix.\n5. **Multivariate Gaussian PDF**: The `multivariate_gaussian_pdf` function computes the PDF for each data point in `X` using the given mean and covariance matrix. It handles both 1D and 2D input for `X`.\n\nThis script should work for the given task and examples."}
{"task_id": 419, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    # Add intercept column if required\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n    \n    # Handle different types of V\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, (int, float)):\n        V = V * np.eye(X.shape[1])\n    elif isinstance(V, np.ndarray) and V.ndim == 1:\n        V = np.diag(V)\n    \n    # Compute the posterior mean and covariance\n    V_inv = np.linalg.inv(V)\n    Sigma_p = np.linalg.inv(V_inv + X.T @ X)\n    mu_p = Sigma_p @ (V_inv @ np.array(mu) + X.T @ y)\n    \n    # Compute the MAP predictive mean for X_new\n    y_pred = X_new @ mu_p\n    \n    # Return the predictions rounded to 4 decimal places\n    return [round(pred, 4) for pred in y_pred]\n\n# Example usage\nX = np.array([[1], [2]])\ny = np.array([1, 3])\nX_new = np.array([[3]])\nmu = 0\nsigma = 1\nV = None\nfit_intercept = True\n\nprint(bayesian_linear_regression_pred(X, y, X_new, mu, sigma, V, fit_intercept))\n```\n\nThis script defines the `bayesian_linear_regression_pred` function, which performs Bayesian linear regression with a conjugate Gaussian prior and known observation variance. It handles different types of prior covariance matrices `V` and optionally adds an intercept column to the design matrices. The function returns the MAP predictive means for new data points, rounded to four decimal places."}
{"task_id": 423, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculate the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\"\"\"\n    # Check if both lists have the same length\n    if len(actual) != len(predicted):\n        return -1\n    \n    # Check if all elements in both lists are non-negative\n    if any(a < 0 for a in actual) or any(p < 0 for p in predicted):\n        return -1\n    \n    # Calculate the RMSLE\n    n = len(actual)\n    log_diffs = [(np.log1p(pred) - np.log1p(act)) ** 2 for act, pred in zip(actual, predicted)]\n    rmsle = np.sqrt((1/n) * sum(log_diffs))\n    \n    # Return the result rounded to four decimal places\n    return round(rmsle, 4)\n\n# Example usage:\nactual = [3, 5, 2.5, 7]\npredicted = [2.5, 5, 4, 8]\nprint(root_mean_squared_log_error(actual, predicted))  # Output: 0.1981\n```\n\nThis script defines a function `root_mean_squared_log_error` that calculates the RMSLE between two lists of non-negative numbers, `actual` and `predicted`. It first checks if the lists are of the same length and contain only non-negative numbers. If these conditions are met, it computes the RMSLE using the formula provided and returns the result rounded to four decimal places. If the conditions are not met, it returns -1."}
{"task_id": 428, "completion_id": 0, "completion": "```\npython\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    \n    if symmetric:\n        n = np.arange(window_len)\n        window = 0.5 - 0.5 * np.cos(2 * math.pi * n / (window_len - 1))\n    else:\n        n = np.arange(window_len + 1)\n        window = 0.5 - 0.5 * np.cos(2 * math.pi * n / window_len)\n        window = window[:-1]  # Drop the last sample for periodicity\n    \n    # Round each coefficient to 4 decimal places\n    window = np.round(window, 4)\n    \n    return window.tolist()\n\n# Example usage:\nprint(hann(4, symmetric=True))  # Output: [0.0, 0.75, 0.75, 0.0]\nprint(hann(4, symmetric=False)) # Output: [0.0, 0.5, 1.0, 0.5]\n```\n\nThis script defines the `hann` function which generates a Hann window of a specified length and type (symmetric or periodic). The function handles special cases for window lengths less than or equal to 1 and ensures that all coefficients are rounded to four decimal places before returning them as a regular Python list."}
{"task_id": 433, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        # Assuming the shape is (out_channels, in_channels, kernel_height, kernel_width)\n        out_channels, in_channels, kernel_height, kernel_width = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        # For other shapes, take the first two dimensions directly\n        fan_in, fan_out = shape[0], shape[1]\n    \n    return float(fan_in), float(fan_out)\n\n# Example usage:\nshape1 = (64, 3, 7, 7)\nprint(glorot_fan(shape1))  # Output: (147.0, 3136.0)\n\nshape2 = (128, 64)\nprint(glorot_fan(shape2))  # Output: (128.0, 64.0)\n```\n\nThis script defines the `glorot_fan` function according to the problem statement. It handles both 4-dimensional convolutional kernel shapes and other shapes by calculating `fan_in` and `fan_out` appropriately. The example usage demonstrates how the function works with different input shapes."}
{"task_id": 435, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]],\n                               y: list[float],\n                               n_estimators: int = 10,\n                               learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    \n    # Special cases\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4)] * len(y)\n    \n    # Initialize the current prediction with the mean of y\n    y_pred = np.full_like(y, np.mean(y))\n    \n    for t in range(n_estimators):\n        # Compute the residuals\n        residuals = y - y_pred\n        \n        # Fit an OLS linear model to predict the residuals\n        # Add a column of ones for the intercept\n        X_with_intercept = np.hstack((np.ones((X.shape[0], 1)), X))\n        # Compute the OLS solution\n        beta = np.linalg.inv(X_with_intercept.T @ X_with_intercept) @ (X_with_intercept.T @ residuals)\n        \n        # Obtain the weak-learner prediction\n        h_t = X_with_intercept @ beta\n        \n        # Update the overall prediction\n        y_pred += learning_rate * h_t\n    \n    # Return the final prediction vector rounded to 4 decimal places\n    return [round(val, 4) for val in y_pred]\n\n# Example usage:\nX = [[1], [2], [3], [4]]\ny = [2, 3, 4, 5]\nn_estimators = 2\nlearning_rate = 0.5\nprint(gradient_boosting_regressor(X, y, n_estimators, learning_rate))\n```\n\nThis script implements the tiny Gradient Boosting Regressor as described in the task. It uses NumPy for numerical operations and follows the outlined procedure to compute the predictions. The special cases are handled at the beginning of the function. The final predictions are rounded to four decimal places and returned as a regular Python list."}
{"task_id": 437, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    # Convert input to a NumPy array for consistent processing\n    is_scalar = np.isscalar(x)\n    x = np.array(x, dtype=float)\n    \n    # Compute the sigmoid function\n    sigma = 1 / (1 + np.exp(-x))\n    \n    # Compute the requested derivative\n    if order == 0:\n        result = sigma\n    elif order == 1:\n        result = sigma * (1 - sigma)\n    elif order == 2:\n        result = sigma * (1 - sigma) * (1 - 2 * sigma)\n    else:\n        return -1\n    \n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n    \n    # Return the result in the appropriate format\n    if is_scalar:\n        return float(result)\n    else:\n        return result.tolist()\n\n# Example usage:\n# x = np.array([-1, 0, 1])\n# print(sigmoid(x, order=0))  # Output: [0.2689, 0.5, 0.7311]\n# print(sigmoid(x, order=1))  # Output: [0.1966, 0.25, 0.1966]\n# print(sigmoid(x, order=2))  # Output: [-0.0452, -0.125, -0.0452]\n```\n\nThis script defines the `sigmoid` function that computes the logistic sigmoid function and its first and second derivatives, based on the `order` parameter. It handles scalar, list, and NumPy array inputs, and returns the results in the appropriate format, rounded to four decimal places."}
{"task_id": 438, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already\n    y = np.array(y)\n    \n    # Determine the number of classes if not provided\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    \n    # Check if the provided num_classes is sufficient\n    if num_classes < np.max(y) + 1:\n        return -1\n    \n    # Initialize the one-hot encoded matrix with zeros\n    one_hot_matrix = np.zeros((y.size, num_classes), dtype=int)\n    \n    # Set the appropriate indices to 1\n    one_hot_matrix[np.arange(y.size), y] = 1\n    \n    # Convert the result to a list of lists and return\n    return one_hot_matrix.tolist()\n\n# Example usage:\ny = [0, 2, 1, 2]\nprint(to_categorical(y))  # Output: [[1, 0, 0], [0, 0, 1], [0, 1, 0], [0, 0, 1]]\n\n# Test cases\nprint(to_categorical([0, 1, 2, 3], 4))  # Output: [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]\nprint(to_categorical([0, 1, 2, 3], 3))  # Output: -1\nprint(to_categorical([0, 0, 0], 1))     # Output: [[1]]\nprint(to_categorical([1, 0, 2], None))  # Output: [[0, 1, 0], [1, 0, 0], [0, 0, 1]]\n```\n\nThis script defines the `to_categorical` function as specified, handling the conversion of class labels to one-hot encoding and checking for the validity of the `num_classes` parameter. The example usage and test cases demonstrate the function's behavior with different inputs."}
{"task_id": 439, "completion_id": 0, "completion": "Certainly! Below is the complete implementation of the Apriori algorithm in Python, following the specified requirements. The code is provided in a markdown code block as requested.\n\n```python\nimport itertools\nfrom typing import List, Tuple, Hashable\n\ndef apriori_frequent_itemsets(transactions: List[List[Hashable]], min_sup: float) -> List[Tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    def support(itemset: Tuple, transactions: List[List[Hashable]]) -> float:\n        \"\"\"Calculate the support of an itemset.\"\"\"\n        return sum(1 for transaction in transactions if set(itemset).issubset(set(transaction))) / len(transactions)\n\n    def generate_candidates(frequent_itemsets: List[Tuple], k: int) -> List[Tuple]:\n        \"\"\"Generate candidate itemsets of size k from frequent itemsets of size k-1.\"\"\"\n        candidates = set()\n        for itemset1 in frequent_itemsets:\n            for itemset2 in frequent_itemsets:\n                candidate = tuple(sorted(set(itemset1).union(set(itemset2))))\n                if len(candidate) == k:\n                    # Prune candidate if any (k-1)-subset is infrequent\n                    if all(tuple(sorted(subset)) in frequent_itemsets for subset in itertools.combinations(candidate, k-1)):\n                        candidates.add(candidate)\n        return list(candidates)\n\n    # Step 1: Generate frequent 1-itemsets\n    all_items = set(item for transaction in transactions for item in transaction)\n    frequent_itemsets = [itemset for itemset in itertools.combinations(all_items, 1) if support(itemset, transactions) >= min_sup]\n    \n    # Step 2: Generate frequent k-itemsets for k > 1\n    k = 2\n    while frequent_itemsets:\n        candidates = generate_candidates(frequent_itemsets, k)\n        frequent_itemsets = [candidate for candidate in candidates if support(candidate, transactions) >= min_sup]\n        k += 1\n\n    # Collect all frequent itemsets\n    all_frequent_itemsets = []\n    k = 1\n    while True:\n        frequent_itemsets = [itemset for itemset in itertools.combinations(all_items, k) if support(itemset, transactions) >= min_sup]\n        if not frequent_itemsets:\n            break\n        all_frequent_itemsets.extend(frequent_itemsets)\n        k += 1\n\n    # Sort the result by length and then lexicographically\n    all_frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return all_frequent_itemsets\n\n# Example usage:\ntransactions = [[1, 2, 3], [1, 2], [2, 3], [1, 3]]\nmin_sup = 0.5\nprint(apriori_frequent_itemsets(transactions, min_sup))\n```\n\n### Explanation:\n1. **Support Calculation**: The `support` function calculates the empirical support of an itemset by counting how many transactions contain the itemset and dividing by the total number of transactions.\n2. **Candidate Generation**: The `generate_candidates` function generates candidate itemsets of size `k` by self-joining frequent itemsets of size `k-1` and pruning any candidate that contains an infrequent subset.\n3. **Main Loop**: The main loop starts with generating frequent 1-itemsets and then iteratively generates larger frequent itemsets until no more frequent itemsets can be found.\n4. **Sorting**: The final list of frequent itemsets is sorted by length and then lexicographically.\n\nThis implementation ensures that the output is in the required format and handles any hashable items."}
{"task_id": 440, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    # Convert the input list to a NumPy array for easier manipulation\n    predictions_array = np.array(predictions)\n    \n    # Average the probabilities over the estimators\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n    \n    # Round the averaged probabilities to 4 decimal places\n    averaged_probabilities_rounded = np.round(averaged_probabilities, 4)\n    \n    # Determine the predicted class for each sample\n    predicted_classes = np.argmax(averaged_probabilities_rounded, axis=1)\n    \n    # Convert the NumPy arrays back to regular Python lists\n    averaged_probabilities_list = averaged_probabilities_rounded.tolist()\n    predicted_classes_list = predicted_classes.tolist()\n    \n    return averaged_probabilities_list, predicted_classes_list\n\n# Example usage:\npredictions = [\n    [[0.8, 0.2], [0.4, 0.6]],\n    [[0.7, 0.3], [0.3, 0.7]],\n    [[0.9, 0.1], [0.2, 0.8]]\n]\n\nresult = aggregate_predictions(predictions)\nprint(result)  # Output: ([[0.8, 0.2], [0.3, 0.7]], [0, 1])\n```\n\nThis script defines the `aggregate_predictions` function, which takes a three-level nested list of predictions, averages the probabilities over the estimators for each sample, rounds the results to four decimal places, and returns both the averaged probabilities and the predicted class labels. The example usage demonstrates how the function works with a sample input."}
{"task_id": 444, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    \n    # Check if feature dimensions match\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # Determine the number of features\n    C = X.shape[1]\n    \n    # Validate and set sigma\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n    elif isinstance(sigma, (list, np.ndarray)):\n        if len(sigma) != C or any(s <= 0 for s in sigma):\n            return -1\n    else:\n        return -1\n    \n    # Compute the squared Euclidean distance matrix\n    if isinstance(sigma, (int, float)):\n        sigma = np.full(C, sigma)\n    else:\n        sigma = np.array(sigma)\n    \n    # Compute the kernel matrix\n    diff = X[:, np.newaxis, :] - Y[np.newaxis, :, :]\n    squared_diff = (diff / sigma) ** 2\n    exp_arg = -0.5 * np.sum(squared_diff, axis=2)\n    kernel_matrix = np.exp(exp_arg)\n    \n    # Round to 4 decimal places and convert to nested list\n    kernel_matrix_rounded = np.round(kernel_matrix, 4).tolist()\n    \n    return kernel_matrix_rounded\n\n# Example usage:\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0\nprint(rbf_kernel(X, Y, sigma))  # Output: [[1.0, 0.3679], [0.3679, 1.0]]\n```\n\nThis script defines the `rbf_kernel` function, which computes the Radial Basis Function (RBF) kernel matrix for given input matrices `X` and `Y` with a specified scale parameter `sigma`. The function handles both isotropic and anisotropic kernels and validates the inputs accordingly. The output is a nested list of the kernel matrix rounded to four decimal places."}
{"task_id": 446, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of labels.\"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    total = len(labels)\n    return -sum((count / total) * np.log2(count / total) for count in label_counts.values())\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n    \n    # Calculate the entropy of the parent node\n    parent_entropy = entropy(y)\n    best_gain = 0.0\n    best_feature_index = -1\n    best_threshold = None\n    left_majority_label = None\n    right_majority_label = None\n    \n    # Majority label in case no split is possible\n    majority_label = Counter(y).most_common(1)[0][0]\n    \n    for j in range(n_features):\n        # Sort the feature column and corresponding labels\n        sorted_indices = np.argsort(X[:, j])\n        sorted_X = X[sorted_indices, j]\n        sorted_y = y[sorted_indices]\n        \n        # Consider midpoints between successive distinct values as thresholds\n        for i in range(n_samples - 1):\n            if sorted_X[i] != sorted_X[i + 1]:\n                t = (sorted_X[i] + sorted_X[i + 1]) / 2.0\n                left_y = sorted_y[:i + 1]\n                right_y = sorted_y[i + 1:]\n                \n                # Calculate the entropy of left and right nodes\n                p_left = len(left_y) / n_samples\n                p_right = len(right_y) / n_samples\n                left_entropy = entropy(left_y)\n                right_entropy = entropy(right_y)\n                \n                # Calculate information gain\n                gain = parent_entropy - (p_left * left_entropy + p_right * right_entropy)\n                \n                # Update best split if this one is better\n                if gain > best_gain:\n                    best_gain = gain\n                    best_feature_index = j\n                    best_threshold = round(t, 4)\n                    left_majority_label = Counter(left_y).most_common(1)[0][0]\n                    right_majority_label = Counter(right_y).most_common(1)[0][0]\n    \n    if best_gain == 0.0:\n        return (-1, None, majority_label, majority_label)\n    \n    return (best_feature_index, best_threshold, left_majority_label, right_majority_label)\n\n# Example usage:\nX = [[1], [2], [3], [4]]\ny = [0, 0, 1, 1]\nprint(decision_stump(X, y))  # Output: (0, 2.5, 0, 1)\n```\n\nThis script defines a function `decision_stump` that calculates the best single-level split for a decision tree based on information gain. It considers midpoints between successive distinct values in each feature column as potential thresholds and returns the feature index, threshold, and majority labels for the left and right child nodes. If no split improves information gain, it returns the majority label for the entire dataset."}
{"task_id": 452, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List, Union\n\ndef divide_on_feature(X: Union[np.ndarray, List[List]], feature_i: int, threshold) -> List[List]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    # Convert X to a NumPy array if it's not already\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    \n    # Initialize the two subsets\n    subset1 = []\n    subset2 = []\n    \n    # Iterate over each sample in X\n    for sample in X:\n        if isinstance(threshold, (int, float)):\n            # Numeric threshold\n            if sample[feature_i] >= threshold:\n                subset1.append(sample.tolist())\n            else:\n                subset2.append(sample.tolist())\n        else:\n            # Categorical threshold\n            if sample[feature_i] == threshold:\n                subset1.append(sample.tolist())\n            else:\n                subset2.append(sample.tolist())\n    \n    return [subset1, subset2]\n\n# Example usage:\nX_numeric = np.array([[1, 5], [3, 2], [4, 6], [2, 1]])\nfeature_i_numeric = 0\nthreshold_numeric = 3\nprint(divide_on_feature(X_numeric, feature_i_numeric, threshold_numeric))\n# Output: [[[3, 2], [4, 6]], [[1, 5], [2, 1]]]\n\nX_categorical = np.array([[1, \"A\"], [2, \"B\"], [3, \"A\"], [4, \"C\"]])\nfeature_i_categorical = 1\nthreshold_categorical = \"A\"\nprint(divide_on_feature(X_categorical, feature_i_categorical, threshold_categorical))\n# Output: [[[1, 'A'], [3, 'A']], [[2, 'B'], [4, 'C']]]\n```\n\nThis script defines the `divide_on_feature` function, which splits a dataset `X` into two subsets based on a specified feature and threshold. The function handles both numeric and categorical thresholds and returns the subsets as lists of lists, preserving the original order of samples."}
{"task_id": 453, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    # Check for input consistency\n    if not (Q.shape == Q_next.shape and len(actions) == len(rewards) == len(dones) == Q.shape[0]):\n        return -1\n    if not (0 <= gamma <= 1):\n        return -1\n\n    # Initialize the target Q-values as a copy of the original Q-values\n    Q_target = np.copy(Q)\n\n    # Update the target Q-values for each sample in the batch\n    for i in range(len(actions)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        Q_target[i, actions[i]] = target\n\n    # Round the result to 4 decimal places and convert to a nested list\n    return np.round(Q_target, 4).tolist()\n\n# Example usage\nQ = np.array([[1.0, 2.0], [0.5, 0.2]])\nQ_next = np.array([[1.5, 1.0], [0.4, 0.9]])\nactions = [1, 0]\nrewards = [1.0, 0.0]\ndones = [False, True]\ngamma = 0.99\n\nprint(update_q_values(Q, Q_next, actions, rewards, dones, gamma))\n```\n\nThis script defines the `update_q_values` function, which computes the target Q-values for a batch of experiences in a Deep Q-Network. It checks for input consistency and calculates the target values based on whether the next state is terminal. The result is rounded to four decimal places and returned as a nested Python list."}
{"task_id": 458, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    # Convert labels to a numpy array for easier manipulation\n    labels = np.array(labels)\n    \n    # Check for negative labels\n    if np.any(labels < 0):\n        return -1\n    \n    # Infer num_classes if not provided\n    if num_classes is None:\n        num_classes = np.max(labels) + 1\n    \n    # Check if num_classes is too small\n    if num_classes < np.max(labels) + 1:\n        return -1\n    \n    # Initialize the one-hot encoded matrix with zeros\n    one_hot_matrix = np.zeros((len(labels), num_classes), dtype=int)\n    \n    # Set the appropriate indices to 1\n    one_hot_matrix[np.arange(len(labels)), labels] = 1\n    \n    # Convert the numpy array to a list of lists\n    return one_hot_matrix.tolist()\n\n# Example usage:\nlabels = [0, 2, 1, 3]\nnum_classes = 4\nprint(to_categorical(labels, num_classes))  # Output: [[1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1]]\n```\n\nThis script defines the `to_categorical` function, which converts a list of integer labels into a one-hot encoded matrix. It handles the optional `num_classes` parameter, checks for invalid inputs, and returns the result as a list of lists of integers."}
{"task_id": 461, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Step 1: Initialize predictions to the mean of the targets\n    y_pred = np.full_like(y, np.mean(y))\n    \n    # If n_estimators is 0 or negative, return the mean target for every sample\n    if n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n    \n    # Step 2: Repeat n_estimators times\n    for _ in range(n_estimators):\n        # Step 2a: Compute the residuals\n        residuals = y - y_pred\n        \n        # Step 2b: Find unique x values except the greatest one\n        unique_x = np.unique(x)[:-1]\n        \n        # Initialize variables to track the best split\n        best_sse = float('inf')\n        best_t = None\n        best_vL = None\n        best_vR = None\n        \n        # Step 2c: Evaluate each possible split\n        for t in unique_x:\n            left_mask = x <= t\n            right_mask = x > t\n            \n            # Ignore splits if either side is empty\n            if not np.any(left_mask) or not np.any(right_mask):\n                continue\n            \n            # Calculate mean residuals for left and right\n            vL = np.mean(residuals[left_mask])\n            vR = np.mean(residuals[right_mask])\n            \n            # Calculate SSE for this split\n            sse = np.sum(residuals[left_mask] ** 2) + np.sum(residuals[right_mask] ** 2)\n            \n            # Step 2d: Pick the split with the smallest SSE\n            if sse < best_sse:\n                best_sse = sse\n                best_t = t\n                best_vL = vL\n                best_vR = vR\n        \n        # Step 2e: If no valid split exists, set the stump prediction to the mean residual\n        if best_t is None:\n            stump_pred = np.full_like(y, np.mean(residuals))\n        else:\n            stump_pred = np.where(x <= best_t, best_vL, best_vR)\n        \n        # Step 2f: Update the ensemble prediction\n        y_pred += learning_rate * stump_pred\n    \n    # Return the final predictions rounded to 4 decimal places\n    return np.round(y_pred, 4).tolist()\n\n# Example usage\nx = [1, 2]\ny = [1, 2]\nn_estimators = 1\nlearning_rate = 1.0\nprint(gradient_boosting_regressor(x, y, n_estimators, learning_rate))  # Output: [1.0, 2.0]\n```\n\nThis script implements the gradient boosting algorithm using decision stumps for one-dimensional regression data. It follows the steps outlined in the task description and handles special cases as specified. The final predictions are rounded to four decimal places before being returned."}
{"task_id": 471, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    \n    if next_state is not None:\n        # Find the greedy action in the next state\n        greedy_action = np.argmax(q_table[next_state])\n        \n        # Calculate the expected value of Q[next_state][a'] under the epsilon-soft policy\n        expected_value = 0.0\n        for a in range(num_actions):\n            if a == greedy_action:\n                expected_value += (1 - epsilon + epsilon / num_actions) * q_table[next_state][a]\n            else:\n                expected_value += (epsilon / num_actions) * q_table[next_state][a]\n        \n        # Calculate the target\n        target = reward + gamma * expected_value\n    else:\n        # If next_state is None, the target is just the reward\n        target = reward\n    \n    # Update the Q-table\n    q_table[state][action] += lr * (target - q_table[state][action])\n    \n    # Round all entries to four decimal places\n    q_table = [[round(q, 4) for q in row] for row in q_table]\n    \n    return q_table\n\n# Example usage:\nq_table = [[0.5, 0.2, 0.1], [0.3, 0.4, 0.1]]\nstate = 0\naction = 1\nreward = 1.0\nnext_state = 1\nepsilon = 0.1\nlr = 0.4\ngamma = 0.99\n\nupdated_q_table = expected_sarsa_update(q_table, state, action, reward, next_state, epsilon, lr, gamma)\nprint(updated_q_table)  # Output: [[0.5, 0.6731, 0.1], [0.3, 0.4, 0.1]]\n```"}
{"task_id": 474, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n\n    for i in range(m):\n        x_min = (i // 2 + 0.1) * 10\n        x_max = (i // 2 + 0.9) * 10\n        y_min = (i % 2 * interval + 0.1) * 10\n        y_max = (i % 2 * interval + 0.9) * 10\n        label = (i - 0.5) * 2\n\n        # Generate training data\n        x_train = np.random.uniform(x_min, x_max, n_train)\n        y_train = np.random.uniform(y_min, y_max, n_train)\n        X_train.extend(zip(x_train, y_train))\n        Y_train.extend([label] * n_train)\n\n        # Generate validation data\n        x_val = np.random.uniform(x_min, x_max, n_val)\n        y_val = np.random.uniform(y_min, y_max, n_val)\n        X_val.extend(zip(x_val, y_val))\n        Y_val.extend([label] * n_val)\n\n    X_train = np.round(np.array(X_train), 4)\n    X_val = np.round(np.array(X_val), 4)\n    Y_train = np.array(Y_train)\n    Y_val = np.array(Y_val)\n\n    return X_train, X_val, Y_train, Y_val\n\n# Example usage:\nX_train, X_val, Y_train, Y_val = generate_data(m=2, n_train=2, n_val=1, interval=1, seed=0)\nprint(\"X_train:\", X_train)\nprint(\"X_val:\", X_val)\nprint(\"Y_train:\", Y_train)\nprint(\"Y_val:\", Y_val)\n```\n\nThis script defines the `generate_data` function, which generates a 2-D toy dataset according to the specified parameters. The function ensures that the data is reproducible if a seed is provided, and all coordinates are rounded to four decimal places. The example usage at the end demonstrates how to call the function and print the generated data."}
{"task_id": 475, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    # Initialize m_prev and v_prev to zeros if they are None\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    \n    # Update the first and second moments\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * (grad ** 2)\n    \n    # Compute bias-corrected first and second moments\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    \n    # Update the parameters\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    \n    return w_new, m_new, v_new\n\n# Example usage\nw_new, m_new, v_new = adam_update(1.0, 0.1, 0.0, 0.0, 1)\nprint(round(w_new, 9))  # \u2248 0.999000001\nprint(m_new)  # \u2248 0.01\nprint(v_new)  # \u2248 1e-05\n```\n\nThis script defines the `adam_update` function, which performs a single step of the Adam optimization algorithm. It handles both scalar and NumPy array inputs for the parameters and gradients, and it initializes the first and second moments to zero if they are not provided. The function returns the updated parameters and moments, ensuring numerical stability with the addition of a small constant `eps` in the denominator."}
{"task_id": 479, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    \n    N = len(rewards[0])  # Number of arms\n    value_estimates = [ev_prior] * N  # Initial estimates of expected values\n    pull_counts = [0] * N  # Number of times each arm has been pulled\n\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            # Explore: choose a random arm\n            chosen_arm = np.random.randint(N)\n        else:\n            # Exploit: choose the arm with the highest estimated value\n            chosen_arm = np.argmax(value_estimates)\n        \n        # Receive the reward for the chosen arm\n        reward = rewards[t][chosen_arm]\n        \n        # Update the pull count for the chosen arm\n        pull_counts[chosen_arm] += 1\n        \n        # Update the estimated value for the chosen arm using incremental sample mean\n        value_estimates[chosen_arm] += (reward - value_estimates[chosen_arm]) / pull_counts[chosen_arm]\n    \n    # Return the final estimated values rounded to 4 decimal places\n    return [round(value, 4) for value in value_estimates]\n\n# Example usage:\nrewards = [[1, 0, 0],\n           [0, 1, 0],\n           [1, 0, 0],\n           [0, 1, 0],\n           [1, 0, 0]]\nepsilon = 0\nev_prior = 0.5\nseed = 42\n\nprint(epsilon_greedy_bandit(rewards, epsilon, ev_prior, seed))  # Output: [0.6, 0.5, 0.5]\n```\n\nThis script implements the \u03b5-greedy multi-armed bandit algorithm as described. It initializes the expected values and pull counts for each arm, iterates through each time step, and updates the estimates based on the rewards received. The final estimates are rounded to four decimal places before being returned."}
{"task_id": 481, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((point1 - point2) ** 2))\n\n    def region_query(point_index):\n        neighbors = []\n        for i in range(len(data)):\n            if euclidean_distance(data[point_index], data[i]) <= eps:\n                neighbors.append(i)\n        return neighbors\n\n    def expand_cluster(point_index, neighbors, cluster_id):\n        labels[point_index] = cluster_id\n        i = 0\n        while i < len(neighbors):\n            neighbor_index = neighbors[i]\n            if labels[neighbor_index] == -1:\n                labels[neighbor_index] = cluster_id\n            elif labels[neighbor_index] == 0:\n                labels[neighbor_index] = cluster_id\n                new_neighbors = region_query(neighbor_index)\n                if len(new_neighbors) >= min_samples:\n                    neighbors.extend(new_neighbors)\n            i += 1\n\n    labels = [0] * len(data)\n    cluster_id = 0\n\n    for point_index in range(len(data)):\n        if labels[point_index] != 0:\n            continue\n\n        neighbors = region_query(point_index)\n\n        if len(neighbors) < min_samples:\n            labels[point_index] = -1\n        else:\n            cluster_id += 1\n            expand_cluster(point_index, neighbors, cluster_id)\n\n    return labels\n\n# Example usage:\ndata = np.array([[1, 1], [1.1, 1.1], [0.9, 1], [5, 5], [5.2, 5.1], [4.9, 5], [8, 0]])\neps = 0.3\nmin_samples = 2\nprint(dbscan(data, eps, min_samples))  # Output: [1, 1, 1, 2, 2, 2, -1]\n```\n\nThis script implements the DBSCAN algorithm from scratch, following the provided guidelines and examples. The function `dbscan` takes a two-dimensional NumPy array `data`, a distance threshold `eps`, and an integer `min_samples`, and returns a list of cluster labels for every sample. The implementation includes helper functions for calculating Euclidean distance, querying the region of a point, and expanding clusters."}
{"task_id": 482, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    \n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError(\"Labels must be non-negative and less than num_classes.\")\n    \n    one_hot = np.zeros((y.size, num_classes), dtype=int)\n    one_hot[np.arange(y.size), y] = 1\n    return one_hot\n\n# Example usage:\ny = np.array([0, 2, 1, 3])\nnum_classes = None\nprint(to_categorical(y, num_classes))\n```\n\nThis script defines the `to_categorical` function, which converts a vector of integer class labels into a 2-D array of one-hot encoded vectors. The function handles the optional `num_classes` parameter and raises a `ValueError` if any label is out of the valid range. The example usage demonstrates how to call the function with a sample input."}
{"task_id": 485, "completion_id": 0, "completion": "```python\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    \n    def sse(y):\n        mean = sum(y) / len(y)\n        return sum((yi - mean) ** 2 for yi in y)\n    \n    def best_split(X, y):\n        best_sse = float('inf')\n        best_split_point = None\n        for i in range(1, len(X)):\n            left_y = y[:i]\n            right_y = y[i:]\n            current_sse = sse(left_y) + sse(right_y)\n            if current_sse < best_sse:\n                best_sse = current_sse\n                best_split_point = X[i]\n        return best_split_point\n    \n    def build_tree(X, y, depth):\n        if depth == max_depth or len(X) < 2:\n            return sum(y) / len(y)\n        \n        split_point = best_split(X, y)\n        if split_point is None:\n            return sum(y) / len(y)\n        \n        left_indices = [i for i, xi in enumerate(X) if xi < split_point]\n        right_indices = [i for i, xi in enumerate(X) if xi >= split_point]\n        \n        left_X = [X[i] for i in left_indices]\n        left_y = [y[i] for i in left_indices]\n        right_X = [X[i] for i in right_indices]\n        right_y = [y[i] for i in right_indices]\n        \n        left_child = build_tree(left_X, left_y, depth + 1)\n        right_child = build_tree(right_X, right_y, depth + 1)\n        \n        return (split_point, left_child, right_child)\n    \n    def predict_tree(tree, x):\n        if isinstance(tree, float):\n            return tree\n        split_point, left_child, right_child = tree\n        if x < split_point:\n            return predict_tree(left_child, x)\n        else:\n            return predict_tree(right_child, x)\n    \n    if not X_train or not y_train:\n        return []\n    \n    sorted_indices = sorted(range(len(X_train)), key=lambda i: X_train[i])\n    X_train_sorted = [X_train[i] for i in sorted_indices]\n    y_train_sorted = [y_train[i] for i in sorted_indices]\n    \n    tree = build_tree(X_train_sorted, y_train_sorted, 0)\n    \n    return [predict_tree(tree, x) for x in X_test]\n\n# Example usage:\nX_train = [1, 2, 3, 4, 5, 6, 7]\ny_train = [2, 2, 2, 8, 8, 8, 8]\nX_test  = [2, 3, 5, 7]\nmax_depth = 1\nprint(regression_tree_predict(X_train, y_train, X_test, max_depth))  # Output: [2.0, 2.0, 8.0, 8.0]\n```\n\nThis script defines a function `regression_tree_predict` that builds a univariate regression tree using the CART algorithm and predicts the target values for a given set of test points. The function handles the constraints and requirements specified in the task description."}
{"task_id": 490, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    \n    # Check if the input is empty\n    if x.size == 0:\n        return []\n    \n    # Create a diagonal matrix using NumPy\n    diagonal_matrix = np.diag(x)\n    \n    # Convert the NumPy array to a list of lists\n    return diagonal_matrix.tolist()\n\n# Example usage:\nx = [1, 2, 3]\nprint(make_diagonal(x))  # Output: [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n```"}
{"task_id": 491, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that implements the FP-Growth algorithm to mine all frequent item-sets from a collection of transactions. The script follows the provided task description and constraints.\n\n```python\nfrom collections import Counter, defaultdict\nimport itertools\nimport numpy as np\n\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    \n    # Step 1: Count item frequencies and filter out items below min_sup\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_sup}\n    \n    # Step 2: Sort items by frequency (descending) and lexicographically\n    sorted_items = sorted(frequent_items, key=lambda x: (-frequent_items[x], x))\n    \n    # Step 3: Build the FP-tree\n    class FPNode:\n        def __init__(self, item, count=1):\n            self.item = item\n            self.count = count\n            self.parent = None\n            self.children = defaultdict(FPNode)\n            self.link = None\n    \n    root = FPNode(None)\n    header_table = defaultdict(list)\n    \n    for transaction in transactions:\n        # Filter and sort transaction items based on frequency\n        filtered_transaction = [item for item in transaction if item in frequent_items]\n        sorted_transaction = sorted(filtered_transaction, key=lambda x: sorted_items.index(x))\n        \n        # Insert transaction into the FP-tree\n        current_node = root\n        for item in sorted_transaction:\n            if item in current_node.children:\n                current_node.children[item].count += 1\n            else:\n                new_node = FPNode(item)\n                new_node.parent = current_node\n                current_node.children[item] = new_node\n                # Update header table\n                if header_table[item]:\n                    last_node = header_table[item][-1]\n                    last_node.link = new_node\n                header_table[item].append(new_node)\n            current_node = current_node.children[item]\n    \n    # Step 4: Recursive mining\n    def find_frequent_patterns(prefix, tree, header_table, min_sup, frequent_itemsets):\n        # If the tree has a single path, generate all combinations of items on that path\n        if is_single_path(tree):\n            path_items = get_path_items(tree)\n            for i in range(1, len(path_items) + 1):\n                for combination in itertools.combinations(path_items, i):\n                    frequent_itemsets.add(tuple(sorted(prefix + list(combination))))\n        else:\n            # Mine each frequent item in the header table\n            for item in sorted(header_table, key=lambda x: (frequent_items[x], x)):\n                # Generate conditional pattern base\n                conditional_pattern_base = []\n                for node in header_table[item]:\n                    path = []\n                    parent = node.parent\n                    while parent.item is not None:\n                        path.append(parent.item)\n                        parent = parent.parent\n                    if path:\n                        conditional_pattern_base.append((path, node.count))\n                \n                # Build conditional FP-tree\n                conditional_tree = FPNode(None)\n                conditional_header_table = defaultdict(list)\n                for path, count in conditional_pattern_base:\n                    sorted_path = sorted(path, key=lambda x: sorted_items.index(x))\n                    current_node = conditional_tree\n                    for item in sorted_path:\n                        if item in current_node.children:\n                            current_node.children[item].count += count\n                        else:\n                            new_node = FPNode(item, count)\n                            new_node.parent = current_node\n                            current_node.children[item] = new_node\n                            # Update header table\n                            if conditional_header_table[item]:\n                                last_node = conditional_header_table[item][-1]\n                                last_node.link = new_node\n                            conditional_header_table[item].append(new_node)\n                        current_node = current_node.children[item]\n                \n                # Recursively mine the conditional FP-tree\n                if conditional_tree.children:\n                    find_frequent_patterns(prefix + [item], conditional_tree, conditional_header_table, min_sup, frequent_itemsets)\n    \n    def is_single_path(node):\n        while node.children:\n            if len(node.children) > 1:\n                return False\n            node = next(iter(node.children.values()))\n        return True\n    \n    def get_path_items(node):\n        path_items = []\n        while node.children:\n            node = next(iter(node.children.values()))\n            path_items.append(node.item)\n        return path_items\n    \n    frequent_itemsets = set()\n    find_frequent_patterns([], root, header_table, min_sup, frequent_itemsets)\n    \n    # Convert set to sorted list of tuples\n    return sorted(frequent_itemsets, key=lambda x: (len(x), x))\n\n# Example usage\ntransactions = np.array([\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"A\", \"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"C\", \"D\", \"E\"],\n    [\"B\", \"C\", \"D\"]\n])\nmin_sup = 3\n\nresult = fp_growth(transactions, min_sup)\nprint(result)\n```\n\nThis script defines the `fp_growth` function, which constructs an FP-tree from the input transactions and recursively mines frequent item-sets. The function returns a sorted list of tuples representing the frequent item-sets, meeting the specified output constraints."}
{"task_id": 492, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n\n    n_samples, n_features = len(X), len(X[0])\n    feature_indices = list(range(n_features))\n    \n    # Generate all combinations of feature indices with replacement\n    # and filter them by the total degree\n    terms = []\n    for d in range(degree + 1):\n        for term in combinations_with_replacement(feature_indices, d):\n            terms.append(term)\n    \n    # Construct the polynomial feature matrix\n    polynomial_matrix = []\n    for sample in X:\n        polynomial_row = []\n        for term in terms:\n            # Calculate the product of the sample values raised to the power of the term\n            value = 1\n            for feature_index in term:\n                value *= sample[feature_index]\n            polynomial_row.append(value)\n        polynomial_matrix.append(polynomial_row)\n    \n    return polynomial_matrix\n\n# Example usage:\nX = [[2, 3]]\ndegree = 2\nprint(polynomial_features(X, degree))  # Output: [[1, 2, 3, 4, 6, 9]]\n```\n\nThis script defines the `polynomial_features` function, which generates a polynomial feature matrix for a given input matrix `X` and a specified `degree`. The function handles the case where the degree is negative by returning `-1`. The polynomial terms are generated in the required order, and the resulting matrix is returned as a list of lists."}
{"task_id": 493, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y:  # Check if the input is empty\n        return -1\n    \n    y = np.array(y)  # Convert to NumPy array if it isn't already\n    y_mean = np.mean(y)  # Calculate the mean of the array\n    mse_value = np.mean((y - y_mean) ** 2)  # Calculate the mean squared error\n    return round(mse_value, 4)  # Return the MSE rounded to 4 decimal places\n\n# Example usage:\n# y = [1, 2, 3]\n# print(mse(y))  # Output: 0.6667\n```\n\nThis script defines a function `mse` that calculates the mean-squared error of a given 1-D numeric sample. It handles both Python lists and NumPy arrays as input and returns the MSE rounded to four decimal places. If the input is empty, it returns -1."}
{"task_id": 496, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Ensure x is a numpy array for element-wise operations\n    x = np.array(x, dtype=float)\n    \n    # Calculate the affine activation\n    y = slope * x + intercept\n    \n    # The first derivative of the affine function is constant and equal to the slope\n    grad = np.full_like(x, slope)\n    \n    # The second derivative of the affine function is always 0\n    grad2 = np.zeros_like(x)\n    \n    # Round the results to 4 decimal places\n    y_rounded = np.round(y, 4).tolist()\n    grad_rounded = np.round(grad, 4).tolist()\n    grad2_rounded = np.round(grad2, 4).tolist()\n    \n    return y_rounded, grad_rounded, grad2_rounded\n\n# Example usage:\nx = [0, 1, 2]\nslope = 2\nintercept = 1\nresult = apply_affine(x, slope, intercept)\nprint(result)  # Output: ([1.0, 3.0, 5.0], [2.0, 2.0, 2.0], [0.0, 0.0, 0.0])\n```\n\nThis script defines the `apply_affine` function, which computes the affine activation and its derivatives for a given input vector `x`, slope, and intercept. The function handles both list and NumPy array inputs, ensuring the results are rounded to four decimal places. The example usage demonstrates how to call the function and print the results."}
{"task_id": 499, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    n_samples, n_features = data.shape\n    \n    # Check if k is within the valid range\n    if k < 1 or k > n_features:\n        return -1\n    \n    # Step 1: Standardise each feature\n    mean = np.mean(data, axis=0)\n    std_dev = np.std(data, axis=0, ddof=1)  # Population variance with Bessel's correction\n    std_dev[std_dev == 0] = 1  # Avoid division by zero for zero variance features\n    standardized_data = (data - mean) / std_dev\n    \n    # Step 2: Compute the sample covariance matrix\n    covariance_matrix = np.cov(standardized_data, rowvar=False)\n    \n    # Step 3: Perform eigen-decomposition\n    eigenvalues, eigenvectors = np.linalg.eigh(covariance_matrix)\n    \n    # Step 4: Sort eigenvalues in descending order and arrange eigenvectors accordingly\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    \n    # Step 5: Fix the sign of every eigenvector\n    for i in range(n_features):\n        max_abs_index = np.argmax(np.abs(sorted_eigenvectors[:, i]))\n        if sorted_eigenvectors[max_abs_index, i] < 0:\n            sorted_eigenvectors[:, i] *= -1\n    \n    # Step 6: Project the standardised data on the first k eigenvectors\n    projection_matrix = sorted_eigenvectors[:, :k]\n    projected_data = standardized_data @ projection_matrix\n    \n    # Return the projected matrix rounded to four decimal places\n    return np.round(projected_data, 4).tolist()\n\n# Example usage:\ndata = np.array([[1, 2], [3, 4], [5, 6]])\nk = 1\nprint(pca_transform(data, k))  # Output: [[-1.7321], [0.0], [1.7321]]\n```\n\nThis script implements the PCA dimensionality reduction routine as described in the task. It standardizes the data, computes the covariance matrix, performs eigen-decomposition, sorts the eigenvalues and eigenvectors, fixes the sign of the eigenvectors, and projects the data onto the first `k` principal components. The result is rounded to four decimal places and returned as a nested list."}
{"task_id": 500, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Initialize the model with the mean of the training labels\n    F = np.mean(y_train)\n    predictions = np.full(X_train.shape[0], F)\n    \n    # Function to fit a decision stump to the residuals\n    def fit_stump(X, residuals):\n        best_feature = None\n        best_threshold = None\n        best_left_val = None\n        best_right_val = None\n        min_error = float('inf')\n        \n        for feature in range(X.shape[1]):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                left_indices = X[:, feature] <= threshold\n                right_indices = X[:, feature] > threshold\n                \n                left_val = np.mean(residuals[left_indices])\n                right_val = np.mean(residuals[right_indices])\n                \n                error = np.sum((residuals[left_indices] - left_val) ** 2) + np.sum((residuals[right_indices] - right_val) ** 2)\n                \n                if error < min_error:\n                    min_error = error\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_left_val = left_val\n                    best_right_val = right_val\n        \n        def stump(x):\n            if x[best_feature] <= best_threshold:\n                return best_left_val\n            else:\n                return best_right_val\n        \n        return stump\n    \n    # Boosting loop\n    stumps = []\n    for _ in range(n_estimators):\n        residuals = y_train - predictions\n        stump = fit_stump(X_train, residuals)\n        stumps.append(stump)\n        \n        for i, x in enumerate(X_train):\n            predictions[i] += learning_rate * stump(x)\n    \n    # Make predictions on the test set\n    test_predictions = np.full(X_test.shape[0], F)\n    for stump in stumps:\n        for i, x in enumerate(X_test):\n            test_predictions[i] += learning_rate * stump(x)\n    \n    # Convert regression predictions to binary class labels\n    final_predictions = [1 if score >= 0.5 else 0 for score in test_predictions]\n    \n    return final_predictions\n\n# Example usage:\nX_train = [[0],[1],[2],[3]]\ny_train = [0,0,1,1]\nX_test = [[0.2],[2.8]]\nn_estimators = 20\nlearning_rate = 0.1\nprint(gradient_boosting_classifier(X_train, y_train, X_test, n_estimators, learning_rate))  # Output: [0, 1]\n```\n\nThis script implements a tiny Gradient Boosting Binary Classifier using decision stumps as weak learners. It fits the model to the training data by iteratively minimizing the squared error on the residuals and then predicts the class labels for the test data by thresholding the final regression score at 0.5."}
{"task_id": 505, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n\n    m, n_v = X.shape\n    n_h = hbias.size\n\n    # Positive phase\n    h0_prob = 1 / (1 + np.exp(-(X @ W + hbias)))\n    pos_grad = X.T @ h0_prob\n\n    # Gibbs sampling\n    v = X\n    for _ in range(k):\n        h_prob = 1 / (1 + np.exp(-(v @ W + hbias)))\n        h = h_prob  # Use probabilities directly\n        v_prob = 1 / (1 + np.exp(-(h @ W.T + vbias)))\n        v = v_prob  # Use probabilities directly\n\n    h_k_prob = h_prob\n    neg_grad = v.T @ h_k_prob\n\n    # Update weights\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n\n    # Return the updated weight matrix rounded to 4 decimal places\n    return np.round(W_new, 4).tolist()\n\n# Example usage\nX = np.array([[1, 1]])\nW = np.array([[0.0], [0.0]])\nhbias = np.array([0.0])\nvbias = np.array([0.0])\nlearning_rate = 0.1\nk = 1\n\nprint(contrastive_divergence(X, W, hbias, vbias, learning_rate, k))\n```\n\nThis script defines the `contrastive_divergence` function, which performs a single weight update for a binary Restricted Boltzmann Machine using the Contrastive Divergence (CD-k) algorithm. The function takes a mini-batch of visible vectors, the current weight matrix, visible and hidden bias vectors, a learning rate, and the number of Gibbs sampling steps as input. It returns the updated weight matrix rounded to 4 decimal places and converted to a plain Python list of lists. The example usage demonstrates how to call the function with a simple input."}
{"task_id": 509, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Check if the lengths of the vectors are the same\n    if len(x) != len(y):\n        return -1\n    \n    # Compute the Chebyshev distance\n    distance = np.max(np.abs(x - y))\n    \n    # Return the distance rounded to four decimal places\n    return round(float(distance), 4)\n\n# Example usage:\nx = [1, 2, 3]\ny = [2, 4, 6]\nprint(chebyshev(x, y))  # Output: 3.0\n```\n\nThis script defines a function `chebyshev` that calculates the Chebyshev distance between two vectors. It first checks if the vectors have the same length, and if not, it returns -1. Otherwise, it computes the maximum of the absolute differences between corresponding elements of the vectors and returns this value rounded to four decimal places."}
{"task_id": 510, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    # Clip y_pred to avoid log(0) or log(1)\n    epsilon = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n    \n    # Calculate the reconstruction loss (binary cross-entropy)\n    reconstruction_loss = -np.sum(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped))\n    \n    # Calculate the KL divergence\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var))\n    \n    # Calculate the total loss\n    total_loss = reconstruction_loss + kl_divergence\n    \n    # Return the average loss per sample\n    average_loss = total_loss / y.shape[0]\n    \n    # Round to 6 decimal places\n    return round(average_loss, 6)\n\n# Example usage\ny = np.array([[1, 0], [0, 1]])\ny_pred = np.array([[0.9, 0.2], [0.1, 0.8]])\nt_mean = np.zeros((2, 2))\nt_log_var = np.zeros((2, 2))\n\nprint(vae_loss(y, y_pred, t_mean, t_log_var))  # Output: 0.328504\n```\n\nThis script defines the `vae_loss` function, which computes the VAE loss for Bernoulli visible units as described in the task. The function clips the predicted probabilities to avoid numerical instability, calculates the reconstruction loss using binary cross-entropy, computes the KL divergence, and returns the average loss rounded to six decimal places. The example usage demonstrates how to call the function with sample data."}
{"task_id": 513, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    \n    n_samples, n_features = X.shape\n    k = V.shape[1]\n    \n    # Linear part\n    linear_part = np.dot(X, w)\n    \n    # Interaction part\n    interaction_part = 0.5 * np.sum(\n        (np.dot(X, V) ** 2) - np.dot(X ** 2, V ** 2),\n        axis=1\n    )\n    \n    # Full prediction\n    predictions = w0 + linear_part + interaction_part\n    \n    # Round to 4 decimal places\n    return np.round(predictions, 4).tolist()\n\n# Example usage:\nX = [[1, 0], [0, 1], [1, 1]]\nw0 = 0.5\nw = [1, 2]\nV = [[0.1, 0.2],\n     [0.3, 0.4]]\n\nprint(fm_predict(X, w0, w, V))  # Output: [1.5, 2.5, 3.61]\n```\n\nThis script defines the `fm_predict` function, which calculates the predictions for a batch of samples using the Factorization Machine regression formula. The function uses `numpy` for efficient numerical computations and ensures that the results are rounded to four decimal places. The example usage demonstrates how to call the function with a sample input."}
{"task_id": 517, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # Convert input to a numpy array for vectorized operations\n    if isinstance(z, (int, float)):\n        z = np.array([z])\n    elif isinstance(z, (list, tuple)):\n        z = np.array(z)\n    else:\n        z = np.asarray(z)\n    \n    # Numerically stable sigmoid function\n    # For large positive z, sigmoid(z) approaches 1\n    # For large negative z, sigmoid(z) approaches 0\n    sigmoid_values = np.where(z >= 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n    \n    # Round the results to four decimal places\n    sigmoid_values = np.round(sigmoid_values, 4)\n    \n    # Return the result in the appropriate format\n    if isinstance(z, np.ndarray) and z.size == 1:\n        return float(sigmoid_values)\n    else:\n        return sigmoid_values.tolist()\n\n# Example usage\nprint(sigmoid([-1, 0, 1]))  # Output: [0.2689, 0.5, 0.7311]\n```\n\nThis script defines the `sigmoid` function that handles different types of inputs, computes the sigmoid values in a numerically stable manner, and returns the results rounded to four decimal places while preserving the input structure."}
{"task_id": 518, "completion_id": 0, "completion": "```\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        # Check if actual is one-hot encoded and convert if necessary\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        \n        # Check if predicted is one-hot encoded and convert if necessary\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        \n        # Call the original function with the converted arrays\n        return function(actual, predicted)\n    \n    return wrapper\n\n# Example usage\n@unhot\ndef accuracy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Simple accuracy rounded to 4 decimals.\"\"\"\n    return float(np.round(np.mean(actual == predicted), 4))\n\nactual    = np.array([[0,1,0], [1,0,0], [0,0,1]])  # one-hot\npredicted = np.array([[0,1,0], [0,1,0], [0,0,1]])  # one-hot\nprint(accuracy(actual, predicted))  # 0.6667\n```\n\nThis script defines the `unhot` decorator, which converts one-hot encoded arrays to 1-D class labels before calling the wrapped metric function. The example usage demonstrates how the decorator works with a simple accuracy function."}
{"task_id": 520, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    def compute_gradient(value):\n        return np.round(value * (1 - value), 4)\n\n    if isinstance(z, (int, float)):\n        return compute_gradient(z)\n    elif isinstance(z, list):\n        if not z:  # Check for empty list\n            return []\n        return [sigmoid_grad(item) for item in z]\n    elif isinstance(z, np.ndarray):\n        return np.vectorize(compute_gradient)(z).tolist()\n    else:\n        raise ValueError(\"Input must be a float, list, or NumPy ndarray\")\n\n# Example usage:\nz_scalar = 0.5\nz_list = [0.5, 0.8]\nz_2d_list = [[0.5, 0.8], [0.3, 0.7]]\nz_array = np.array([[0.5, 0.8], [0.3, 0.7]])\n\nprint(sigmoid_grad(z_scalar))  # Output: 0.25\nprint(sigmoid_grad(z_list))    # Output: [0.25, 0.16]\nprint(sigmoid_grad(z_2d_list)) # Output: [[0.25, 0.16], [0.21, 0.21]]\nprint(sigmoid_grad(z_array))   # Output: [[0.25, 0.16], [0.21, 0.21]]\n```\n\nThis script defines the `sigmoid_grad` function, which computes the gradient of the sigmoid function for a given input. The function handles scalar inputs, lists, and NumPy arrays, and returns the result in the same structure as the input. The gradient is computed as `z * (1 - z)` and rounded to four decimal places."}
{"task_id": 528, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Convert X to a NumPy array for easier manipulation\n    X = np.array(X)\n    \n    # Determine the range for x1 and x2\n    x1_min, x1_max = X[:, 0].min(), X[:, 0].max()\n    x2_min, x2_max = X[:, 1].min(), X[:, 1].max()\n    \n    # Create equally spaced 1-D arrays for x1 and x2\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    \n    # Create a meshgrid from x1_plot and x2_plot\n    x1_grid, x2_grid = np.meshgrid(x1_plot, x2_plot)\n    \n    # Flatten the grid for easier computation\n    x1_flat = x1_grid.flatten()\n    x2_flat = x2_grid.flatten()\n    \n    # Compute the linear combination w1*x1 + w2*x2 + b\n    z = W[0] * x1_flat + W[1] * x2_flat + b\n    \n    # Apply the sign function to get the labels\n    labels_flat = np.where(z >= 0, 1, -1)\n    \n    # Reshape the labels back to the grid shape\n    labels_grid = labels_flat.reshape((grid_n, grid_n))\n    \n    # Convert the NumPy array to a list of lists\n    labels_list = labels_grid.tolist()\n    \n    return labels_list\n\n# Example usage:\nX = [[0, 0], [2, 2]]\nW = [1, -1]\nb = 0\ngrid_n = 3\nprint(decision_boundary_grid(X, W, b, grid_n))\n```\n\nThis script defines the `decision_boundary_grid` function, which generates a grid of predictions for a 2-D linear classifier. The function uses NumPy to handle array operations efficiently and returns a list of lists containing the predicted labels for each grid point. The example usage demonstrates how to call the function with a specific dataset, weights, bias, and grid resolution."}
{"task_id": 537, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    # Step 1: Calculate class priors\n    n_samples = len(y_train)\n    class_0_count = np.sum(y_train == 0)\n    class_1_count = np.sum(y_train == 1)\n    prior_0 = class_0_count / n_samples\n    prior_1 = class_1_count / n_samples\n    \n    # Step 2: Calculate mean and standard deviation for each feature for both classes\n    X_class_0 = X_train[y_train == 0]\n    X_class_1 = X_train[y_train == 1]\n    \n    mean_0 = np.mean(X_class_0, axis=0)\n    std_0 = np.std(X_class_0, axis=0) + 1e-9  # Adding epsilon to avoid division by zero\n    \n    mean_1 = np.mean(X_class_1, axis=0)\n    std_1 = np.std(X_class_1, axis=0) + 1e-9  # Adding epsilon to avoid division by zero\n    \n    # Step 3: Predict for each test sample\n    predictions = []\n    for x in X_test:\n        # Calculate likelihood for class 0\n        likelihood_0 = np.prod((1 / (np.sqrt(2 * np.pi) * std_0)) * \n                               np.exp(-((x - mean_0) ** 2) / (2 * std_0 ** 2)))\n        posterior_0 = prior_0 * likelihood_0\n        \n        # Calculate likelihood for class 1\n        likelihood_1 = np.prod((1 / (np.sqrt(2 * np.pi) * std_1)) * \n                               np.exp(-((x - mean_1) ** 2) / (2 * std_1 ** 2)))\n        posterior_1 = prior_1 * likelihood_1\n        \n        # Predict the class with the higher posterior probability\n        if posterior_0 > posterior_1:\n            predictions.append(0)\n        else:\n            predictions.append(1)\n    \n    return predictions\n\n# Example usage:\nX_train = np.array([[1.0, 20.0],\n                    [2.0, 21.0],\n                    [3.0, 22.0],\n                    [10.0,  5.0],\n                    [11.0,  6.0],\n                    [12.0,  7.0]])\ny_train = np.array([0, 0, 0, 1, 1, 1])\nX_test  = np.array([[ 2.5, 20.5],\n                    [11.5,  6.5]])\n\nprint(gaussian_naive_bayes(X_train, y_train, X_test))  # Output: [0, 1]\n```\n\nThis script implements a Gaussian Naive Bayes classifier from scratch, following the provided task description. It calculates the necessary parameters during the training phase and uses them to predict the class labels for the test data."}
{"task_id": 539, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost.\n\n    Parameters:\n    AL (np.ndarray): A numpy array of shape (1, m) or (m,) containing the predicted probabilities.\n    Y (np.ndarray): A numpy array of shape (1, m) or (m,) containing the true labels (0 or 1).\n\n    Returns:\n    float: The binary cross-entropy cost.\n    \"\"\"\n    # Ensure AL and Y have the same shape\n    assert AL.shape == Y.shape, \"AL and Y must have the same shape\"\n    \n    # Flatten the arrays if they are of shape (1, m)\n    AL = AL.flatten()\n    Y = Y.flatten()\n    \n    # Number of training examples\n    m = AL.shape[0]\n    \n    # Clip the probabilities to avoid numerical overflow\n    epsilon = 1e-15\n    AL = np.clip(AL, epsilon, 1 - epsilon)\n    \n    # Compute the binary cross-entropy cost\n    cost = -1 / m * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    \n    # Return the cost as a plain Python float rounded to 4 decimal places\n    return float(round(cost, 4))\n\n# Example usage\nAL = np.array([[0.8, 0.9, 0.4]])\nY = np.array([[1, 1, 0]])\nprint(compute_cost(AL, Y))  # Output: 0.2798\n```\n\nThis script defines the `compute_cost` function, which calculates the binary cross-entropy cost for a given set of predicted probabilities (`AL`) and true labels (`Y`). The function ensures that the inputs have the same shape, clips the probabilities to avoid numerical issues, and computes the cost using the provided formula. The result is returned as a plain Python float rounded to four decimal places."}
{"task_id": 552, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    T = len(observations)\n    N = len(pi)\n    \n    if t < 0 or t >= T:\n        return []\n    \n    # Forward algorithm\n    alpha = np.zeros((T, N))\n    alpha[0] = pi * B[:, observations[0]]\n    for i in range(1, T):\n        alpha[i] = np.dot(alpha[i-1], A) * B[:, observations[i]]\n    \n    # Backward algorithm\n    beta = np.zeros((T, N))\n    beta[T-1] = np.ones(N)\n    for i in range(T-2, -1, -1):\n        beta[i] = np.dot(A, B[:, observations[i+1]] * beta[i+1])\n    \n    # Compute gamma\n    gamma_t = alpha[t] * beta[t]\n    gamma_t /= np.sum(gamma_t)\n    \n    return [round(prob, 4) for prob in gamma_t]\n\n# Example usage:\nhmm = {\"pi\": [0.6, 0.4],\n       \"A\" : [[0.7, 0.3],\n               [0.4, 0.6]],\n       \"B\" : [[0.5, 0.4, 0.1],\n               [0.1, 0.3, 0.6]]}\nobservations = [0, 1, 2]\nt = 1\n\nprint(gamma_probabilities(hmm, observations, t))  # Output: [0.6229, 0.3771]\n```\n\nThis script defines the `gamma_probabilities` function, which calculates the posterior state distribution at a given time step `t` using the forward-backward algorithm. The function first computes the forward probabilities `alpha` and the backward probabilities `beta`, then combines them to find `gamma_t`, rounding each component to four decimal places. If `t` is out of bounds, it returns an empty list."}
{"task_id": 555, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import deque\nfrom scipy.spatial.distance import cdist\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples  # Initialize all points as noise\n    cluster_id = 0\n\n    # Compute pairwise Euclidean distances\n    distances = cdist(data, data, metric='euclidean')\n\n    # Build the neighborhood list for each sample\n    neighborhoods = [np.where(distances[i] <= eps)[0] for i in range(n_samples)]\n\n    # Identify core points\n    core_points = [i for i, neighborhood in enumerate(neighborhoods) if len(neighborhood) >= min_samples]\n\n    def expand_cluster(point, cluster_id):\n        labels[point] = cluster_id\n        to_process = deque([point])\n        while to_process:\n            current_point = to_process.popleft()\n            if len(neighborhoods[current_point]) < min_samples:\n                continue\n            for neighbor in neighborhoods[current_point]:\n                if labels[neighbor] == -1:\n                    labels[neighbor] = cluster_id\n                    to_process.append(neighbor)\n                elif labels[neighbor] == 0:\n                    labels[neighbor] = cluster_id\n\n    # Process each core point\n    for point in core_points:\n        if labels[point] == -1:  # If point is not yet labeled\n            cluster_id += 1\n            expand_cluster(point, cluster_id)\n\n    return labels\n\n# Example usage:\ndata = np.array([[0, 0], [0, 1], [1, 0], [1, 1], [5, 5]])\neps = 1.5\nmin_samples = 3\nprint(dbscan(data, eps, min_samples))  # Output: [1, 1, 1, 1, -1]\n```\n\nThis script implements the DBSCAN algorithm from scratch, following the provided task description. It uses `scipy.spatial.distance.cdist` to compute pairwise Euclidean distances efficiently. The algorithm identifies core points, expands clusters using a breadth-first search, and labels noise points as -1."}
{"task_id": 561, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"\n    Implements the Expectation-Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n\n    Parameters:\n    - data: np.ndarray, a 2-D array of shape (N, D) containing N samples with D features.\n    - k: int, the number of Gaussian components.\n    - max_iter: int, the maximum number of iterations for the EM algorithm.\n    - epsilon: float, the tolerance for convergence based on the change in mixture weights.\n\n    Returns:\n    - list[int], a list of length N containing the final cluster label of each sample.\n    \"\"\"\n    N, D = data.shape\n    \n    if k == 1:\n        return [0] * N\n    \n    # Step 1: Randomly initialize the parameters\n    np.random.seed(0)  # For reproducibility\n    weights = np.ones(k) / k\n    means = data[np.random.choice(N, k, replace=False)]\n    covariances = [np.eye(D) for _ in range(k)]\n    \n    def multivariate_gaussian(x, mean, cov):\n        det_cov = np.linalg.det(cov)\n        inv_cov = np.linalg.inv(cov)\n        diff = x - mean\n        exponent = -0.5 * np.dot(diff.T, np.dot(inv_cov, diff))\n        return (1.0 / (np.sqrt((2 * np.pi) ** D * det_cov))) * np.exp(exponent)\n    \n    for _ in range(max_iter):\n        # Step 2: Expectation (E) step\n        responsibilities = np.zeros((N, k))\n        for i in range(N):\n            for j in range(k):\n                responsibilities[i, j] = weights[j] * multivariate_gaussian(data[i], means[j], covariances[j])\n            responsibilities[i] /= np.sum(responsibilities[i])\n        \n        # Step 3: Maximization (M) step\n        new_weights = np.sum(responsibilities, axis=0) / N\n        new_means = np.dot(responsibilities.T, data) / np.sum(responsibilities, axis=0, keepdims=True)\n        new_covariances = np.zeros((k, D, D))\n        for j in range(k):\n            diff = data - new_means[j]\n            weighted_diff = diff * responsibilities[:, j][:, np.newaxis]\n            new_covariances[j] = np.dot(weighted_diff.T, diff) / np.sum(responsibilities[:, j])\n        \n        # Check for convergence\n        if np.allclose(new_weights, weights, atol=epsilon):\n            break\n        \n        weights, means, covariances = new_weights, new_means, new_covariances\n    \n    # Step 4: Assign labels based on the maximum responsibility\n    labels = np.argmax(responsibilities, axis=1)\n    \n    # Step 5: Sort components by the first coordinate of their mean and re-label\n    sorted_indices = np.argsort(means[:, 0])\n    labels = np.array([sorted_indices[label] for label in labels])\n    \n    return labels.tolist()\n\n# Example usage:\ndata = np.array([[1, 2], [1, 3], [2, 2], [8, 8], [9, 8], [9, 9]])\nk = 2\nprint(gmm_em(data, k))  # Output: [0, 0, 0, 1, 1, 1]\n```\n\nThis script implements the EM algorithm for a Gaussian Mixture Model, including initialization, the E-step, the M-step, and label assignment. It also ensures the output is deterministic by sorting the components by the first coordinate of their mean."}
{"task_id": 562, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef spectral_clustering(data: np.array, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n    \n    # Step 1: Build the similarity graph using the Gaussian kernel\n    N = data.shape[0]\n    pairwise_squared_distances = np.sum(data**2, axis=1).reshape(-1, 1) + np.sum(data**2, axis=1) - 2 * np.dot(data, data.T)\n    W = np.exp(-gamma * pairwise_squared_distances)\n    \n    # Step 2: Construct the Laplacian\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    \n    if method == 'normalized':\n        D_inv_sqrt = np.diag(1.0 / np.sqrt(np.sum(W, axis=1)))\n        L = D_inv_sqrt @ L @ D_inv_sqrt\n    \n    # Step 3: Compute the eigenvectors corresponding to the n_cluster smallest eigenvalues\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    U = eigenvectors[:, :n_cluster]\n    \n    if method == 'normalized':\n        U = U / np.linalg.norm(U, axis=1, keepdims=True)\n    \n    # Step 4: Run k-means in the eigenvector space\n    def kmeans(X, k, initial_centroids):\n        centroids = X[initial_centroids]\n        labels = np.zeros(X.shape[0], dtype=int)\n        while True:\n            # Assign labels\n            distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2)\n            new_labels = np.argmin(distances, axis=1)\n            if np.array_equal(labels, new_labels):\n                break\n            labels = new_labels\n            # Update centroids\n            for i in range(k):\n                centroids[i] = np.mean(X[labels == i], axis=0)\n        return labels\n    \n    initial_centroids = np.arange(n_cluster)\n    labels = kmeans(U, n_cluster, initial_centroids)\n    \n    # Step 5: Relabel clusters\n    unique_labels = np.unique(labels)\n    label_mapping = {old_label: new_label for new_label, old_label in enumerate(unique_labels)}\n    labels = [label_mapping[label] for label in labels]\n    \n    return labels\n\n# Example usage:\ndata = np.array([[1.0, 1.0], [1.1, 0.9], [5.0, 5.0], [5.2, 4.9]])\nn_cluster = 2\nprint(spectral_clustering(data, n_cluster))  # Output: [0, 0, 1, 1]\n```"}
{"task_id": 563, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = len(y_data)\n    alpha = np.zeros(N)\n    b = 0.0\n    \n    # Build the Gram matrix G\n    G = np.dot(X_data, X_data.T)\n    \n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            # Compute g = \u03a3\u2c7c \u03b1\u2c7c y\u2c7c G[j, i]\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    \n    # Recover the weight vector w\n    w = np.sum(alpha * y_data[:, np.newaxis] * X_data, axis=0)\n    \n    # Round every component of w and b to 4 decimal places\n    w_rounded = [round(wi, 4) for wi in w]\n    b_rounded = round(b, 4)\n    \n    return (w_rounded, b_rounded)\n\n# Example usage:\nX_data = np.array([[2, 1], [1, 2], [-2, -1], [-1, -2]])\ny_data = np.array([1, 1, -1, -1])\neta = 1.0\nresult = perceptron_dual_train(X_data, y_data, eta)\nprint(result)  # Output should be ([2.0, 1.0], 1.0)\n```\n\nThis script implements the dual-form perceptron learning algorithm as described in the task. It includes the construction of the Gram matrix, the iterative update of the alpha coefficients and bias, and the recovery of the weight vector. The final weight vector and bias are rounded to four decimal places before being returned."}
{"task_id": 564, "completion_id": 0, "completion": "```\npython\nclass Node:\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label\n        self.x = x\n        self.s = s\n        self.y = y\n        self.child = child if child is not None else []\n\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    current_node = root\n    \n    while current_node.y is None:  # Traverse until we reach a leaf node\n        if task_type == 'classification':\n            feature_value = features[current_node.label]\n            # Find the child with the matching x value\n            for child in current_node.child:\n                if child.x == feature_value:\n                    current_node = child\n                    break\n            else:\n                # If no matching child, default to the second child\n                current_node = current_node.child[1]\n        elif task_type == 'regression':\n            feature_value = features[current_node.label]\n            # Compare with the split point s\n            if feature_value <= current_node.s:\n                current_node = current_node.child[0]\n            else:\n                current_node = current_node.child[1]\n    \n    return current_node.y\n\n# Example usage:\n# Assuming we have a decision tree constructed and stored in `root`\n# features = ['red']\n# task_type = 'classification'\n# print(predict_sample(root, features, task_type))  # Output should be 'apple'\n```\n\nThis script defines the `Node` class and the `predict_sample` function as specified. The function traverses the decision tree based on the `task_type` and returns the value stored in the appropriate leaf node. The example usage at the end shows how the function might be called, assuming a decision tree is already constructed and stored in `root`."}
{"task_id": 565, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    \n    def entropy(labels):\n        \"\"\"Calculate the entropy of a label distribution.\"\"\"\n        value_counts = np.bincount(labels)\n        probabilities = value_counts / len(labels)\n        return -np.sum(probabilities * np.log2(probabilities + 1e-9))\n    \n    def conditional_entropy(X, y, feature_index):\n        \"\"\"Calculate the conditional entropy of y given a feature.\"\"\"\n        feature_values = np.unique(X[:, feature_index])\n        weighted_entropy = 0.0\n        for value in feature_values:\n            subset_y = y[X[:, feature_index] == value]\n            weighted_entropy += (len(subset_y) / len(y)) * entropy(subset_y)\n        return weighted_entropy\n    \n    # Calculate the entropy of the original label distribution\n    H_y = entropy(y)\n    \n    # Initialize variables to track the best feature and its information gain\n    best_feature_index = -1\n    max_information_gain = -1.0\n    \n    # Iterate over each feature to calculate information gain\n    for feature_index in range(X.shape[1]):\n        H_y_given_A = conditional_entropy(X, y, feature_index)\n        information_gain = H_y - H_y_given_A\n        \n        # Update the best feature if this one has higher information gain\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = feature_index\n    \n    return (best_feature_index, round(max_information_gain, 6))\n\n# Example usage:\nX = np.array([[0, 1],\n              [1, 0],\n              [0, 1],\n              [1, 1]])\ny = np.array([0, 1, 0, 1])\n\nprint(choose_best_feature(X, y))  # Output: (0, 1.0)\n```\n\nThis script defines a function `choose_best_feature` that calculates the information gain for each feature in the dataset and returns the feature with the highest information gain. The function uses helper functions to compute the entropy and conditional entropy, ensuring that the information gain is calculated correctly. The result is rounded to six decimal places as required."}
{"task_id": 566, "completion_id": 0, "completion": "```\nimport numpy as np\nimport math\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    \n    def c(n):\n        if n == 1:\n            return 0\n        return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n    \n    def build_tree(subsample):\n        if len(subsample) <= 1 or len(subsample) == sample_size:\n            return None, len(subsample)\n        \n        feature_idx = np.random.choice(data.shape[1])\n        feature_min, feature_max = np.min(subsample[:, feature_idx]), np.max(subsample[:, feature_idx])\n        \n        if feature_min == feature_max:\n            return None, len(subsample)\n        \n        threshold = np.random.uniform(feature_min, feature_max)\n        \n        left_indices = subsample[:, feature_idx] < threshold\n        right_indices = subsample[:, feature_idx] >= threshold\n        \n        left_subsample = subsample[left_indices]\n        right_subsample = subsample[right_indices]\n        \n        left_tree, left_size = build_tree(left_subsample)\n        right_tree, right_size = build_tree(right_subsample)\n        \n        return (feature_idx, threshold, left_tree, right_tree), left_size + right_size\n    \n    def path_length(x, tree, current_height=0):\n        if tree is None:\n            return current_height + c(len(x))\n        \n        feature_idx, threshold, left_tree, right_tree = tree\n        \n        if x[feature_idx] < threshold:\n            return path_length(x, left_tree, current_height + 1)\n        else:\n            return path_length(x, right_tree, current_height + 1)\n    \n    trees = []\n    for _ in range(n_trees):\n        if sample_size >= data.shape[0]:\n            subsample = data\n        else:\n            subsample_indices = np.random.choice(data.shape[0], sample_size, replace=False)\n            subsample = data[subsample_indices]\n        tree, _ = build_tree(subsample)\n        trees.append(tree)\n    \n    path_lengths = np.zeros(data.shape[0])\n    for i, x in enumerate(data):\n        path_lengths[i] = np.mean([path_length(x, tree) for tree in trees])\n    \n    height_limit = math.ceil(math.log2(sample_size))\n    phi = 2 * math.log(sample_size - 1) - 2 * (sample_size - 1) / sample_size\n    anomaly_scores = 2 ** (-path_lengths / phi)\n    \n    threshold = np.percentile(anomaly_scores, (1 - epsilon) * 100)\n    outliers = np.where(anomaly_scores >= threshold)[0]\n    \n    return sorted(outliers)\n\n# Example usage:\ndata = np.array([[1.0, 1.1], [0.9, 1.0], [1.2, 0.8], [8.0, 8.0]])\nn_trees = 50\nsample_size = 4\nepsilon = 0.25\nprint(detect_outliers(data, n_trees, sample_size, epsilon))  # Output: [3]\n```"}
{"task_id": 568, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that implements the Maximum Entropy (MaxEnt) classifier using the Generalized Iterative Scaling (GIS) algorithm. The script includes the `maxent_predict` function, which takes training data, test data, and hyperparameters to return the predicted labels for the test set.\n\n```python\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    # Step 1: Build empirical distributions\n    n_samples, n_features = X_train.shape\n    labels = np.unique(y_train)\n    n_labels = len(labels)\n    \n    # Empirical distribution of (x, y)\n    empirical_xy = defaultdict(float)\n    # Empirical distribution of x\n    empirical_x = defaultdict(float)\n    \n    for x, y in zip(X_train, y_train):\n        x_tuple = tuple(x)\n        empirical_xy[(x_tuple, y)] += 1\n        empirical_x[x_tuple] += 1\n    \n    for key in empirical_xy:\n        empirical_xy[key] /= n_samples\n    \n    for key in empirical_x:\n        empirical_x[key] /= n_samples\n    \n    # Step 2: Initialize weights\n    weights = defaultdict(float)\n    \n    # Step 3: Generalized Iterative Scaling (GIS)\n    for iteration in range(n_iter):\n        # Calculate expected distribution of (x, y) under the model\n        expected_xy = defaultdict(float)\n        Z_x = defaultdict(float)\n        \n        for x_tuple in empirical_x:\n            for y in labels:\n                feature_vector = [(i, x_tuple[i], y) for i in range(n_features)]\n                score = sum(weights[f] for f in feature_vector)\n                Z_x[x_tuple] += math.exp(score)\n            \n            for y in labels:\n                feature_vector = [(i, x_tuple[i], y) for i in range(n_features)]\n                score = sum(weights[f] for f in feature_vector)\n                expected_xy[(x_tuple, y)] = math.exp(score) / Z_x[x_tuple]\n        \n        # Update weights\n        max_update = 0.0\n        for (x_tuple, y) in empirical_xy:\n            feature_vector = [(i, x_tuple[i], y) for i in range(n_features)]\n            for f in feature_vector:\n                update = empirical_xy[(x_tuple, y)] - expected_xy[(x_tuple, y)]\n                weights[f] += update\n                max_update = max(max_update, abs(update))\n        \n        if max_update < epsilon:\n            break\n    \n    # Step 4: Predict labels for X_test\n    predictions = []\n    for x in X_test:\n        x_tuple = tuple(x)\n        max_score = -float('inf')\n        best_label = None\n        for y in labels:\n            feature_vector = [(i, x_tuple[i], y) for i in range(n_features)]\n            score = sum(weights[f] for f in feature_vector)\n            if score > max_score:\n                max_score = score\n                best_label = y\n        predictions.append(best_label)\n    \n    return predictions\n\n# Example usage:\nX_train = np.array([[0], [1]])\ny_train = np.array([0, 1])\nX_test = np.array([[1], [0]])\nprint(maxent_predict(X_train, y_train, X_test))  # Output: [1, 0]\n```\n\n### Explanation:\n1. **Empirical Distributions**: We calculate the empirical distributions of `(x, y)` pairs and `x` alone from the training data.\n2. **Weight Initialization**: We initialize the weights to zero.\n3. **GIS Algorithm**: We iteratively update the weights by comparing the empirical distribution of `(x, y)` pairs with the expected distribution under the current model. The updates continue until the maximum absolute update is smaller than `epsilon` or the number of iterations reaches `n_iter`.\n4. **Prediction**: For each test sample, we compute the score for each label and predict the label with the highest score.\n\nThis script should work for the given task and constraints."}
{"task_id": 569, "completion_id": 0, "completion": "```\npython\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    # Count the number of documents\n    num_documents = len(data)\n    \n    # Dictionary to count the number of documents each word appears in\n    word_doc_count = Counter()\n    \n    # Set to keep track of words seen in each document\n    words_in_doc = set()\n    \n    for _, words in data:\n        # Add words to the set for the current document\n        words_in_doc.update(words)\n        \n        # Once all words for the document are added, update the count\n        for word in words_in_doc:\n            word_doc_count[word] += 1\n        \n        # Clear the set for the next document\n        words_in_doc.clear()\n    \n    # Calculate the document-frequency ratio for each word\n    word_freq_ratios = [(word, round(count / num_documents, 4)) for word, count in word_doc_count.items()]\n    \n    # Sort the list by frequency ratio in descending order\n    word_freq_ratios.sort(key=lambda x: x[1], reverse=True)\n    \n    # Determine the set of most common words\n    if cut_off is None or cut_off >= len(word_freq_ratios):\n        most_common_words = {word for word, _ in word_freq_ratios}\n    else:\n        most_common_words = {word for word, _ in word_freq_ratios[:cut_off]}\n    \n    return word_freq_ratios, most_common_words\n\n\n# Example usage:\ndata = [\n    (1, {\"apple\", \"banana\"}),\n    (0, {\"banana\", \"cherry\"}),\n    (1, {\"banana\", \"dragon\"})\n]\ncut_off = 2\nprint(statistic_key_word(data, cut_off))\n```\n\nThis script defines the `statistic_key_word` function, which calculates the document-frequency ratio for each word across a collection of documents and returns a list of these ratios sorted from highest to lowest, along with a set of the most common words based on the specified `cut_off`. The function handles various edge cases, such as when `cut_off` is `None` or larger than the number of distinct words."}
{"task_id": 571, "completion_id": 0, "completion": "Certainly! Below is the complete Python script that implements the `compute_svm_parameters` function as described in the task:\n\n```python\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute the weight vector w\n    w = np.sum(alpha * y[:, np.newaxis] * X, axis=0)\n    \n    # Compute the bias term b\n    b = np.mean(y - np.dot(X, w))\n    \n    # Round the weight vector and bias term to 4 decimal places\n    w_rounded = np.round(w, 4)\n    b_rounded = np.round(b, 4)\n    \n    # Convert the weight vector to a list\n    w_list = w_rounded.tolist()\n    \n    return w_list, b_rounded\n\n# Example usage:\nX = np.array([[1, 2], [2, 3]])\ny = np.array([1, -1])\nalpha = np.array([0.5, 0.5])\n\nw_list, b = compute_svm_parameters(X, y, alpha)\nprint(w_list, b)  # Output: ([-0.5, -0.5], 2.0)\n```\n\n### Explanation:\n1. **Weight Vector Calculation**:\n   - The weight vector \\( \\mathbf{w} \\) is computed using the formula \\( \\mathbf{w} = \\sum_{i=1}^{n} \\alpha_i y_i \\mathbf{x}_i \\).\n   - This is achieved by multiplying the Lagrange multipliers \\( \\alpha \\) with the corresponding labels \\( y \\) and training samples \\( X \\), and then summing over all samples.\n\n2. **Bias Term Calculation**:\n   - The bias term \\( b \\) is computed using the formula \\( b = \\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\mathbf{w}^\\top \\mathbf{x}_i) \\).\n   - This involves computing the dot product of \\( \\mathbf{w} \\) with each sample \\( \\mathbf{x}_i \\), subtracting it from the corresponding label \\( y_i \\), and then averaging over all samples.\n\n3. **Rounding**:\n   - Both the weight vector \\( \\mathbf{w} \\) and the bias term \\( b \\) are rounded to 4 decimal places using `np.round`.\n\n4. **Output**:\n   - The weight vector is converted to a Python list before returning, ensuring the output format matches the requirements.\n\nThis script should work for any valid input matrices \\( X \\), label vectors \\( y \\), and Lagrange multiplier vectors \\( \\alpha \\) as specified in the task."}
{"task_id": 572, "completion_id": 0, "completion": "Certainly! Below is the complete implementation of the Local Outlier Factor (LOF) algorithm from scratch in Python, following the provided constraints and requirements.\n\n```python\nimport numpy as np\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Compute the Local Outlier Factor (LOF) for each sample in the dataset.\"\"\"\n    # Step 1: Compute the full pair-wise Euclidean distance matrix\n    n = len(data)\n    distance_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i + 1, n):\n            distance = np.sqrt(np.sum((np.array(data[i]) - np.array(data[j])) ** 2))\n            distance_matrix[i, j] = distance\n            distance_matrix[j, i] = distance\n\n    # Step 2: For every sample p, obtain its k-distance and the index list of those k nearest neighbours N_k(p)\n    k_distances = np.zeros(n)\n    k_neighbors = [None] * n\n    for i in range(n):\n        distances = distance_matrix[i]\n        sorted_indices = np.argsort(distances)\n        k_distances[i] = distances[sorted_indices[k]]\n        k_neighbors[i] = sorted_indices[1:k+1]  # Exclude the point itself\n\n    # Step 3: Define the reachability distance between two points\n    def reachability_distance(p, q):\n        return max(k_distances[q], distance_matrix[p, q])\n\n    # Step 4: Compute the Local Reachability Density (LRD) of p\n    lrd = np.zeros(n)\n    for i in range(n):\n        sum_reach_dist = 0\n        for neighbor in k_neighbors[i]:\n            sum_reach_dist += reachability_distance(i, neighbor)\n        lrd[i] = k / sum_reach_dist\n\n    # Step 5: Compute the Local Outlier Factor (LOF) for each sample\n    lof_scores = np.zeros(n)\n    for i in range(n):\n        sum_lrd_neighbors = 0\n        for neighbor in k_neighbors[i]:\n            sum_lrd_neighbors += lrd[neighbor]\n        lof_scores[i] = (sum_lrd_neighbors / k) / lrd[i]\n\n    # Round the LOF scores to 4 decimal places\n    lof_scores = np.round(lof_scores, 4)\n\n    # Find the indices of samples with LOF score > epsilon\n    outlier_indices = [i for i in range(n) if lof_scores[i] > epsilon]\n    outlier_indices.sort()\n\n    return list(lof_scores), outlier_indices\n\n# Example usage:\ndata = [[0], [1], [2], [10]]\nk = 1\nepsilon = 1.5\nresult = local_outlier_factor(data, k, epsilon)\nprint(result)  # Output: ([1.0, 1.0, 1.0, 8.0], [3])\n```\n\n### Explanation:\n1. **Distance Matrix**: We compute the Euclidean distance between every pair of points and store it in a matrix.\n2. **k-Distance and Neighbors**: For each point, we find its k-th nearest neighbor and the list of k nearest neighbors.\n3. **Reachability Distance**: This is defined as the maximum of the k-distance of the neighbor and the actual distance between the points.\n4. **Local Reachability Density (LRD)**: This is calculated as the inverse of the average reachability distance of the k-neighbors.\n5. **Local Outlier Factor (LOF)**: This is the average of the LRD of the k-neighbors divided by the LRD of the point itself.\n6. **Outlier Detection**: We identify points with LOF scores greater than `epsilon` and return their indices.\n\nThis script should work for any dataset and k value within the specified constraints."}
{"task_id": 574, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n\n    for c in range(m):\n        base = 10 * (c // 2)\n        x_train = np.random.uniform(base + 1, base + 9, n_train)\n        y_train = np.random.uniform(base + 1, base + 9, n_train)\n        X_train.append(np.column_stack((x_train, y_train)))\n        y_train_labels = np.full(n_train, c)\n        y_train.append(y_train_labels)\n\n        x_val = np.random.uniform(base + 1, base + 9, n_val)\n        y_val = np.random.uniform(base + 1, base + 9, n_val)\n        X_val.append(np.column_stack((x_val, y_val)))\n        y_val_labels = np.full(n_val, c)\n        y_val.append(y_val_labels)\n\n    X_train = np.round(np.vstack(X_train), 4)\n    y_train = np.concatenate(y_train)\n    X_val = np.round(np.vstack(X_val), 4)\n    y_val = np.concatenate(y_val)\n\n    return X_train, X_val, y_train, y_val\n\n# Example usage:\nm = 2\nn_train = 2\nn_val = 1\nseed = 42\nX_train, X_val, y_train, y_val = generate_data(m, n_train, n_val, seed)\nprint(X_train)\nprint(X_val)\nprint(y_train)\nprint(y_val)\n```\n\nThis script defines the `generate_data` function as specified, which generates synthetic 2-D data for a given number of classes, with specified numbers of training and validation points per class. The function uses a seed for reproducibility and rounds all coordinates to four decimal places. The example usage at the end demonstrates how to call the function and print the results."}
{"task_id": 579, "completion_id": 0, "completion": "Certainly! Below is the self-contained Python script implementing the K-Means clustering algorithm as described:\n\n```python\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    # Step 1: Initialization\n    centres = X[:k].copy()\n    \n    for _ in range(max_iters):\n        # Step 2: Assignment step\n        labels = []\n        for point in X:\n            distances = np.linalg.norm(point - centres, axis=1)\n            min_index = np.argmin(distances)\n            labels.append(min_index)\n        \n        # Step 3: Update step\n        new_centres = np.zeros_like(centres)\n        counts = np.zeros(k, dtype=int)\n        \n        for label, point in zip(labels, X):\n            new_centres[label] += point\n            counts[label] += 1\n        \n        for i in range(k):\n            if counts[i] > 0:\n                new_centres[i] /= counts[i]\n            else:\n                new_centres[i] = centres[i]  # Keep the centre unchanged if no points are assigned\n        \n        # Check for convergence\n        if np.allclose(centres, new_centres):\n            break\n        \n        centres = new_centres\n    \n    # Round the centres to 4 decimal places\n    centres = np.round(centres, 4).tolist()\n    \n    return labels, centres\n\n# Example usage:\nX = np.array([[1, 1], [1.5, 2], [3, 4], [5, 7], [3.5, 5], [4.5, 5], [3.5, 4.5]])\nk = 2\nmax_iters = 100\nlabels, centres = kmeans(X, k, max_iters)\nprint(labels, centres)\n```\n\n### Explanation:\n1. **Initialization**: The first `k` points from the dataset `X` are chosen as the initial cluster centers.\n2. **Assignment Step**: For each point in `X`, the Euclidean distance to each center is computed, and the point is assigned to the nearest center. In case of a tie, the center with the smaller index is chosen.\n3. **Update Step**: Each center is updated to be the mean of all points assigned to it. If a center has no points assigned, it remains unchanged.\n4. **Convergence Check**: The algorithm stops if the centers do not change between iterations or if the maximum number of iterations is reached.\n5. **Rounding**: The final centers are rounded to 4 decimal places for consistency.\n\nThis script should work for any valid input following the constraints provided."}
{"task_id": 581, "completion_id": 0, "completion": "Certainly! Below is the complete implementation of the Elastic-Net regularised linear regression using batch gradient descent in Python. The function `elastic_net_regression` takes the input features `X`, target values `y`, learning rate, number of iterations, and the L1 and L2 penalties, and returns the learned weights and bias rounded to four decimal places.\n\n```python\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number in the tuple is rounded to four decimal places.\n    \"\"\"\n    m, n = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n\n    if learning_rate == 0 or iterations == 0:\n        return [round(w, 4) for w in weights], round(bias, 4)\n\n    for _ in range(iterations):\n        predictions = np.dot(X, weights) + bias\n        residuals = y - predictions\n\n        # Compute gradients\n        gradient_weights = -2 * np.dot(X.T, residuals) / m + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights\n        gradient_bias = -2 * np.sum(residuals) / m\n\n        # Update weights and bias\n        weights -= learning_rate * gradient_weights\n        bias -= learning_rate * gradient_bias\n\n    return [round(w, 4) for w in weights], round(bias, 4)\n\n# Example usage:\nX = np.array([[1, 0], [0, 1]])\ny = np.array([1, 1])\nlearning_rate = 0.5\niterations = 1\nl1_penalty = 0.0\nl2_penalty = 0.0\n\nweights, bias = elastic_net_regression(X, y, learning_rate, iterations, l1_penalty, l2_penalty)\nprint(weights, bias)  # Output: [0.5, 0.5] 1.0\n```\n\n### Explanation:\n1. **Initialization**: The weights are initialized to a zero vector of length `n` (number of features), and the bias is initialized to `0.0`.\n2. **Edge Case Handling**: If the learning rate is `0` or the number of iterations is `0`, the function returns the initial parameters.\n3. **Gradient Descent Loop**:\n   - **Predictions**: Compute the predictions using the current weights and bias.\n   - **Residuals**: Calculate the residuals as the difference between the actual target values and the predictions.\n   - **Gradients**: Compute the gradients for the weights and bias using the provided formulas.\n   - **Updates**: Update the weights and bias using the computed gradients and the learning rate.\n4. **Rounding**: The final weights and bias are rounded to four decimal places before being returned.\n\nThis implementation ensures that the Elastic-Net regression is performed correctly using batch gradient descent, and the results are formatted as required."}
{"task_id": 591, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    # Convert input to a numpy array for easier manipulation\n    x = np.array(x)\n    \n    # Iterate over each layer in the network\n    for i, layer_weights in enumerate(weights):\n        # Convert layer weights to a numpy array\n        layer_weights = np.array(layer_weights)\n        \n        # Add bias term to the input\n        x = np.insert(x, 0, 1)\n        \n        # Perform dot product with the weight matrix\n        x = np.dot(layer_weights, x)\n        \n        # Apply ReLU activation function to all layers except the last one\n        if i < len(weights) - 1:\n            x = np.maximum(0, x)\n    \n    # Round the final output to four decimal places\n    if len(x) == 1:\n        return round(x[0], 4)\n    else:\n        return [round(val, 4) for val in x]\n\n# Example usage:\nweights = [\n    [[0.5, 0.2, 0.8], [1.0, -0.5, 0.3]],  # hidden layer (2 neurons)\n    [[0.7, 0.6, -1.2]]                     # output layer (1 neuron)\n]\n\nx = [0.1, 0.4]\nprint(neural_net_predict(weights, x))  # Output: -0.08\n```\n\nThis script defines the `neural_net_predict` function, which performs a forward pass through a fully-connected feed-forward neural network with ReLU activations in the hidden layers and a linear activation in the output layer. The function takes the network's weights and an input vector, computes the network's output, and returns the result rounded to four decimal places."}
{"task_id": 595, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Implement the K-Means clustering algorithm to compute centroids only.\"\"\"\n    \n    # Step 1: Initialize centroids with the first k samples in X\n    centroids = X[:k].copy()\n    \n    for _ in range(max_iters):\n        # Step 2.1: Assign every sample to the nearest centroid\n        distances = np.sum((X[:, np.newaxis] - centroids) ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Step 2.2: Update each centroid\n        new_centroids = np.array([X[labels == i].mean(axis=0) if np.any(labels == i) else centroids[i] for i in range(k)])\n        \n        # Step 3: Check for convergence\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 1e-4):\n            break\n        \n        centroids = new_centroids\n    \n    # Step 4: Sort the centroids in ascending lexicographical order\n    centroids = np.sort(centroids, axis=0)\n    \n    # Step 5: Round every coordinate to 4 decimal places\n    centroids = np.round(centroids, 4)\n    \n    return centroids.tolist()\n\n# Example usage:\nX = np.array([[1, 1], [2, 1], [4, 3], [5, 4]])\nk = 2\nprint(kmeans_centroids(X, k))  # Output: [[1.5, 1.0], [4.5, 3.5]]\n```\n\nThis script implements the K-Means clustering algorithm from scratch, following the specified requirements. It initializes centroids using the first `k` samples, iteratively assigns samples to the nearest centroid, updates centroids, checks for convergence, and finally sorts and rounds the centroids before returning them."}
