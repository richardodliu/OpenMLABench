{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    if len(a) == 0 or len(a[0]) != len(b):\n        return -1\n    result = []\n    for row in a:\n        dot_product = sum((x * y for (x, y) in zip(row, b)))\n        result.append(dot_product)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    return [[a[i][j] for i in range(len(a))] for j in range(len(a[0]))]"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    flat = [item for sublist in a for item in sublist]\n    if len(flat) != new_shape[0] * new_shape[1]:\n        return []\n    reshaped = np.array(flat).reshape(new_shape)\n    return reshaped.tolist()"}
{"task_id": 4, "completion_id": 0, "solution": "def calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    if mode == 'row':\n        return [sum(row) / len(row) for row in matrix]\n    elif mode == 'column':\n        transposed = list(zip(*matrix))\n        return [sum(col) / len(col) for col in transposed]\n    else:\n        raise ValueError(\"Mode must be 'row' or 'column'\")"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    \"\"\"\n    Multiplies each element of the matrix by the given scalar.\n    \n    Parameters:\n    matrix (list of list of int/float): The input matrix.\n    scalar (int/float): The scalar to multiply with the matrix.\n    \n    Returns:\n    list of list of int/float: The resulting matrix after scalar multiplication.\n    \"\"\"\n    return [[element * scalar for element in row] for row in matrix]"}
{"task_id": 6, "completion_id": 0, "solution": "def calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    trace = a + d\n    determinant = a * d - b * c\n    discriminant = trace ** 2 - 4 * determinant\n    sqrt_discriminant = discriminant ** 0.5\n    lambda1 = (trace + sqrt_discriminant) / 2\n    lambda2 = (trace - sqrt_discriminant) / 2\n    return [lambda1, lambda2] if lambda1 > lambda2 else [lambda2, lambda1]"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    try:\n        A_np = np.array(A, dtype=float)\n        T_np = np.array(T, dtype=float)\n        S_np = np.array(S, dtype=float)\n        if T_np.shape[0] != T_np.shape[1] or S_np.shape[0] != S_np.shape[1]:\n            return -1\n        if np.isclose(np.linalg.det(T_np), 0) or np.isclose(np.linalg.det(S_np), 0):\n            return -1\n        result = np.linalg.inv(T_np) @ A_np @ S_np\n        return np.round(result, 4).tolist()\n    except np.linalg.LinAlgError:\n        return -1"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    determinant = a * d - b * c\n    if determinant == 0:\n        return None\n    inv = 1 / determinant\n    return [[d * inv, -b * inv], [-c * inv, a * inv]]"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    if len(a[0]) != len(b):\n        return -1\n    result = [[0 for _ in range(len(b[0]))] for _ in range(len(a))]\n    for i in range(len(a)):\n        for j in range(len(b[0])):\n            for k in range(len(b)):\n                result[i][j] += a[i][k] * b[k][j]\n    return result"}
{"task_id": 10, "completion_id": 0, "solution": "def calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    \"\"\"\n    Calculate the covariance matrix for a given set of vectors.\n    \n    Parameters:\n    vectors (list of list of float): A list of feature vectors, where each inner list\n                                     represents a feature with its observations.\n    \n    Returns:\n    list of list of float: The covariance matrix.\n    \"\"\"\n    n_features = len(vectors)\n    n_observations = len(vectors[0])\n    for vec in vectors:\n        if len(vec) != n_observations:\n            raise ValueError('All feature vectors must have the same number of observations.')\n    means = [sum(feature) / n_observations for feature in vectors]\n    covariance_matrix = [[0.0 for _ in range(n_features)] for _ in range(n_features)]\n    for i in range(n_features):\n        for j in range(n_features):\n            covariance = 0.0\n            for k in range(n_observations):\n                covariance += (vectors[i][k] - means[i]) * (vectors[j][k] - means[j])\n            covariance /= n_observations - 1\n            covariance_matrix[i][j] = covariance\n    return covariance_matrix"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    N = A.shape[0]\n    x = np.zeros(N)\n    for _ in range(n):\n        x_new = np.zeros(N)\n        for i in range(N):\n            s = np.sum((A[i, j] * x[j] for j in range(N) if j != i))\n            x_new[i] = (b[i] - s) / A[i, i]\n        x = np.round(x_new, 4)\n    return x.tolist()"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    \"\"\"\n    Perform SVD on a 2x2 matrix using the Jacobian method.\n    Returns U, S, V such that A \u2248 U @ np.diag(S) @ V.T\n    \"\"\"\n\n    def jacobi_eigen(matrix, max_iter=1000, tol=1e-10):\n        \"\"\"\n        Compute eigenvalues and eigenvectors of a symmetric 2x2 matrix using the Jacobi method.\n        \"\"\"\n        A = matrix.copy()\n        n = A.shape[0]\n        V = np.eye(n)\n        for _ in range(max_iter):\n            off_diag = A[1, 0]\n            if abs(off_diag) < tol:\n                break\n            theta = 0.5 * np.arctan2(2 * off_diag, A[0, 0] - A[1, 1])\n            c = np.cos(theta)\n            s = np.sin(theta)\n            J = np.array([[c, s], [-s, c]])\n            A = J.T @ A @ J\n            V = V @ J\n        return (A.diagonal(), V)\n    A_T_A = A.T @ A\n    (S2, V) = jacobi_eigen(A_T_A)\n    S = np.sqrt(S2)\n    U = A @ V\n    for i in range(2):\n        U[:, i] /= S[i]\n    if np.linalg.det(V) < 0:\n        V[1, :] *= -1\n        U[1, :] *= -1\n    U = np.round(U, 4)\n    S = np.round(S, 4)\n    V = np.round(V, 4)\n    return (U, S, V)"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n\n    def determinant_3x3(mat: list[list[int | float]]) -> float:\n        return mat[0][0] * (mat[1][1] * mat[2][2] - mat[1][2] * mat[2][1]) - mat[0][1] * (mat[1][0] * mat[2][2] - mat[1][2] * mat[2][0]) + mat[0][2] * (mat[1][0] * mat[2][1] - mat[1][1] * mat[2][0])\n    det = 0\n    for col in range(4):\n        minor = [[matrix[i][j] for j in range(4) if j != col] for i in range(1, 4)]\n        sign = (-1) ** col\n        det += sign * matrix[0][col] * determinant_3x3(minor)\n    return det"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    X_np = np.array(X)\n    y_np = np.array(y)\n    theta = np.linalg.inv(X_np.T @ X_np) @ X_np.T @ y_np\n    theta_rounded = [round(val, 4) for val in theta]\n    return theta_rounded"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> np.ndarray:\n    m = len(y)\n    theta = np.zeros(X.shape[1])\n    for _ in range(iterations):\n        predictions = X @ theta\n        error = predictions - y\n        gradient = 1 / m * X.T @ error\n        theta -= alpha * gradient\n    return np.round(theta, 4).tolist()"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    standardized = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    min_vals = np.min(data, axis=0)\n    max_vals = np.max(data, axis=0)\n    min_max_scaled = (data - min_vals) / (max_vals - min_vals)\n    standardized = np.round(standardized, 4).tolist()\n    min_max_scaled = np.round(min_max_scaled, 4).tolist()\n    return (standardized, min_max_scaled)"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Tuple\ndef k_means_clustering(points: List[Tuple[float, float]], k: int, initial_centroids: List[Tuple[float, float]], max_iterations: int) -> List[Tuple[float, float]]:\n    points = np.array(points)\n    centroids = np.array(initial_centroids)\n    for _ in range(max_iterations):\n        distances = np.sqrt(((points[:, np.newaxis, :] - centroids[np.newaxis, :, :]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([points[labels == i].mean(axis=0) for i in range(k)])\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    final_centroids = [tuple(np.round(centroid, 4)) for centroid in centroids]\n    return final_centroids\npoints = [(1, 2), (1, 4), (1, 0), (10, 2), (10, 4), (10, 0)]\nk = 2\ninitial_centroids = [(1, 1), (10, 1)]\nmax_iterations = 10"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    \"\"\"\n    Generate train and test splits for K-Fold Cross-Validation.\n\n    Parameters:\n    - X: np.ndarray, the feature matrix.\n    - y: np.ndarray, the target vector.\n    - k: int, number of folds.\n    - shuffle: bool, whether to shuffle the data before splitting.\n    - random_seed: int, seed for random number generator for reproducibility.\n\n    Returns:\n    - List of tuples, each containing train indices and test indices for a fold.\n    \"\"\"\n    n_samples = X.shape[0]\n    indices = np.arange(n_samples)\n    if shuffle:\n        if random_seed is not None:\n            np.random.seed(random_seed)\n        np.random.shuffle(indices)\n    fold_size = n_samples // k\n    remainder = n_samples % k\n    start = 0\n    fold_indices = []\n    for i in range(k):\n        end = start + fold_size + (1 if i < remainder else 0)\n        test_idx = indices[start:end]\n        train_idx = np.concatenate((indices[:start], indices[end:]), axis=0)\n        fold_indices.append((train_idx.tolist(), test_idx.tolist()))\n        start = end\n    return fold_indices"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    mean = np.mean(data, axis=0)\n    standardized_data = data - mean\n    covariance_matrix = np.cov(standardized_data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eig(covariance_matrix)\n    idx = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvectors = eigenvectors[:, idx]\n    principal_components = sorted_eigenvectors[:, :k]\n    result = [[round(val, 4) for val in component] for component in principal_components.T]\n    return result"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom typing import Dict, List, Any\ndef entropy(values: List[Any]) -> float:\n    \"\"\"Calculate the entropy of a list of class values.\"\"\"\n    total = len(values)\n    if total == 0:\n        return 0.0\n    counts = Counter(values)\n    return -sum((count / total * math.log2(count / total) for count in counts.values()))\ndef information_gain(examples: List[dict], attribute: str, target_attr: str) -> float:\n    \"\"\"Calculate the information gain of an attribute.\"\"\"\n    total_entropy = entropy([example[target_attr] for example in examples])\n    values = set((example[attribute] for example in examples))\n    weighted_entropy = 0.0\n    for value in values:\n        subset = [example for example in examples if example[attribute] == value]\n        subset_entropy = entropy([example[target_attr] for example in subset])\n        weighted_entropy += len(subset) / len(examples) * subset_entropy\n    return total_entropy - weighted_entropy\ndef majority_value(examples: List[dict], target_attr: str) -> Any:\n    \"\"\"Return the most common target value in the examples.\"\"\"\n    return Counter((example[target_attr] for example in examples)).most_common(1)[0][0]\ndef learn_decision_tree(examples: List[dict], attributes: List[str], target_attr: str) -> Dict:\n    \"\"\"Learn a decision tree using entropy and information gain.\"\"\"\n    if not examples:\n        return majority_value(examples, target_attr)\n    if all((example[target_attr] == examples[0][target_attr] for example in examples)):\n        return examples[0][target_attr]\n    if not attributes:\n        return majority_value(examples, target_attr)\n    best_attr = max(attributes, key=lambda a: information_gain(examples, a, target_attr))\n    tree = {best_attr: {}}\n    remaining_attributes = [a for a in attributes if a != best_attr]\n    for value in set((example[best_attr] for example in examples)):\n        subset = [example for example in examples if example[best_attr] == value]\n        subtree = learn_decision_tree(subset, remaining_attributes, target_attr)\n        tree[best_attr][value] = subtree\n    return tree"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    n_samples = data.shape[0]\n    alphas = np.zeros(n_samples)\n    b = 0.0\n    for t in range(1, iterations + 1):\n        eta = 1.0 / (lambda_val * t)\n        if kernel == 'linear':\n            K = np.dot(data, data.T)\n        elif kernel == 'rbf':\n            K = np.zeros((n_samples, n_samples))\n            for i in range(n_samples):\n                for j in range(n_samples):\n                    K[i, j] = np.exp(-np.linalg.norm(data[i] - data[j]) ** 2 / (2 * sigma ** 2))\n        else:\n            raise ValueError(\"Unsupported kernel type. Use 'linear' or 'rbf'.\")\n        predictions = np.dot(alphas * labels, K) + b\n        subgradient = np.zeros(n_samples)\n        for i in range(n_samples):\n            if labels[i] * predictions[i] < 1:\n                subgradient[i] = -labels[i] * K[i, :].dot(alphas * labels) - b * labels[i]\n            else:\n                subgradient[i] = -b * labels[i]\n        alphas = (1 - eta * lambda_val) * alphas - eta * subgradient\n        alphas = np.clip(alphas, 0, None)\n        b = b - eta * np.mean(subgradient)\n    alphas_rounded = np.round(alphas, 4).tolist()\n    b_rounded = np.round(b, 4)\n    return (alphas_rounded, b_rounded)"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    \"\"\"\n    Computes the output of the sigmoid activation function for a given input z.\n    \n    Parameters:\n    z (float): The input value to the sigmoid function.\n    \n    Returns:\n    float: The output of the sigmoid function, rounded to four decimal places.\n    \"\"\"\n    result = 1 / (1 + math.exp(-z))\n    return round(result, 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    exp_scores = [math.exp(score) for score in scores]\n    sum_exp = sum(exp_scores)\n    softmax_values = [round(exp / sum_exp, 4) for exp in exp_scores]\n    return softmax_values"}
{"task_id": 24, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n\n    def sigmoid(x):\n        return 1 / (1 + math.exp(-x))\n    predictions = []\n    for x in features:\n        weighted_sum = sum((w * f for (w, f) in zip(weights, x))) + bias\n        prob = sigmoid(weighted_sum)\n        predictions.append(prob)\n    predictions = [round(p, 4) for p in predictions]\n    mse = sum(((p - y) ** 2 for (p, y) in zip(predictions, labels))) / len(labels)\n    mse = round(mse, 4)\n    return (predictions, mse)"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    weights = np.array(initial_weights, dtype=np.float64)\n    bias = initial_bias\n    mse_values = []\n\n    def sigmoid(x):\n        return 1 / (1 + np.exp(-x))\n\n    def sigmoid_derivative(x):\n        return x * (1 - x)\n    labels = np.array(labels, dtype=np.float64)\n    for epoch in range(epochs):\n        z = np.dot(features, weights) + bias\n        predictions = sigmoid(z)\n        mse = np.mean((predictions - labels) ** 2)\n        mse_values.append(round(mse, 4))\n        error = predictions - labels\n        d_predictions = error * 2 / len(labels)\n        d_z = d_predictions * sigmoid_derivative(predictions)\n        d_weights = np.dot(features.T, d_z)\n        d_bias = np.mean(d_z)\n        weights -= learning_rate * d_weights\n        bias -= learning_rate * d_bias\n    updated_weights = np.round(weights, 4).tolist()\n    updated_bias = round(bias, 4)\n    mse_values = [round(mse, 4) for mse in mse_values]\n    return (updated_weights, updated_bias, mse_values)\nfeatures = [[1.0, 2.0], [2.0, 1.0], [-1.0, -2.0]]\nlabels = [1, 0, 0]\ninitial_weights = [0.1, -0.2]\ninitial_bias = 0.0\nlearning_rate = 0.1\nepochs = 2"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data + other.data, _children=(self, other), _op='+')\n\n        def _backward():\n            self.grad += out.grad * 1\n            other.grad += out.grad * 1\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data * other.data, _children=(self, other), _op='*')\n\n        def _backward():\n            self.grad += out.grad * other.data\n            other.grad += out.grad * self.data\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(self.data if self.data > 0 else 0, _children=(self,), _op='ReLU')\n\n        def _backward():\n            self.grad += (out.data > 0) * out.grad\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1\n        for node in reversed(topo):\n            node._backward()\n\n    def __neg__(self):\n        return self * -1\n\n    def __radd__(self, other):\n        return self + other\n\n    def __sub__(self, other):\n        return self + -other\n\n    def __rsub__(self, other):\n        return other + -self\n\n    def __rmul__(self, other):\n        return self * other\n\n    def __truediv__(self, other):\n        return self * other ** (-1)\n\n    def __rtruediv__(self, other):\n        return other * self ** (-1)\n\n    def __pow__(self, other):\n        assert isinstance(other, (int, float)), 'Only int/float exponents are supported'\n        out = Value(self.data ** other, _children=(self,), _op=f'**{other}')\n\n        def _backward():\n            self.grad += out.grad * other * self.data ** (other - 1)\n        out._backward = _backward\n        return out\n\n    def __repr__(self):\n        return f'Value(data={self.data}, grad={self.grad})'"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    B_matrix = np.array(B, dtype=float)\n    C_matrix = np.array(C, dtype=float)\n    C_inv = np.linalg.inv(C_matrix)\n    P = np.dot(C_inv, B_matrix)\n    P_rounded = np.round(P, 4)\n    return P_rounded.tolist()"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    A_T_A = A.T @ A\n    (eigenvalues, eigenvectors) = np.linalg.eig(A_T_A)\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    singular_values = np.sqrt(eigenvalues)\n    S = np.diag(singular_values)\n    V = eigenvectors\n    U = np.zeros((2, 2))\n    for i in range(2):\n        if singular_values[i] > 1e-10:\n            u_i = A @ V[:, i]\n            u_i = u_i / np.linalg.norm(u_i)\n        else:\n            u_i = np.array([0.0, 0.0])\n        U[:, i] = u_i\n    if np.dot(U[:, 0], A @ V[:, 0]) < 0:\n        U[:, 0] *= -1\n    if np.dot(U[:, 1], A @ V[:, 1]) < 0:\n        U[:, 1] *= -1\n    U = np.round(U, 4)\n    S = np.round(S, 4)\n    V = np.round(V, 4)\n    return (U.tolist(), singular_values.tolist(), V.tolist())"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    \"\"\"\n    Shuffles the samples in X and y while maintaining the correspondence between them.\n    \n    Parameters:\n    - X: numpy array of shape (n_samples, n_features)\n    - y: numpy array of shape (n_samples,)\n    - seed: optional integer for random seed to ensure reproducibility\n    \n    Returns:\n    - A tuple of two lists: (X_shuffled, y_shuffled)\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    combined = np.column_stack((X, y))\n    np.random.shuffle(combined)\n    X_shuffled = combined[:, :-1]\n    y_shuffled = combined[:, -1]\n    return (X_shuffled.tolist(), y_shuffled.tolist())"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    \"\"\"\n    Yields batches of data from X and optionally y.\n    \n    Parameters:\n    - X: numpy array of shape (n_samples, n_features)\n    - y: numpy array of shape (n_samples,) or None\n    - batch_size: int, number of samples per batch\n    \n    Yields:\n    - If y is provided: (X_batch, y_batch)\n    - If y is not provided: X_batch\n    \"\"\"\n    n_samples = X.shape[0]\n    for i in range(0, n_samples, batch_size):\n        X_batch = X[i:i + batch_size]\n        if y is not None:\n            y_batch = y[i:i + batch_size]\n            yield (X_batch, y_batch)\n        else:\n            yield X_batch"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    \"\"\"\n    Divides the dataset X into two subsets based on whether the value of a specified feature\n    is greater than or equal to a given threshold.\n\n    Parameters:\n    - X: numpy.ndarray, the dataset to be divided.\n    - feature_i: int, the index of the feature to use for division.\n    - threshold: float or int, the threshold value for division.\n\n    Returns:\n    - A list of two lists: [left_subset, right_subset]\n    \"\"\"\n    left_mask = X[:, feature_i] >= threshold\n    right_mask = X[:, feature_i] < threshold\n    left_subset = X[left_mask].tolist()\n    right_subset = X[right_mask].tolist()\n    return [left_subset, right_subset]"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    (n_samples, n_features) = X.shape\n    feature_indices = list(range(n_features))\n    poly_indices = []\n    for total_degree in range(1, degree + 1):\n        for c in combinations_with_replacement(feature_indices, total_degree):\n            poly_indices.append(c)\n    X_poly = np.ones((n_samples, 1))\n    for indices in poly_indices:\n        terms = 1\n        for idx in indices:\n            terms *= X[:, idx]\n        X_poly = np.hstack((X_poly, terms.reshape(-1, 1)))\n    return X_poly.tolist()"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    \"\"\"\n    Generate random subsets of a dataset.\n\n    Parameters:\n    - X: 2D numpy array of shape (n_samples, n_features)\n    - y: 1D numpy array of shape (n_samples,)\n    - n_subsets: Number of subsets to generate\n    - replacements: Boolean indicating whether to sample with replacement\n    - seed: Random seed for reproducibility\n\n    Returns:\n    - List of tuples, where each tuple is (X_subset, y_subset)\n    \"\"\"\n    np.random.seed(seed)\n    n_samples = X.shape[0]\n    subsets = []\n    for _ in range(n_subsets):\n        if replacements:\n            indices = np.random.choice(n_samples, size=n_samples, replace=True)\n        else:\n            indices = np.random.choice(n_samples, size=n_samples, replace=False)\n        X_subset = X[indices]\n        y_subset = y[indices]\n        subsets.append((X_subset.tolist(), y_subset.tolist()))\n    return subsets"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    \"\"\"\n    Perform one-hot encoding of a 1D numpy array of integer values.\n    \n    Parameters:\n    x (np.ndarray): 1D numpy array of integer values.\n    n_col (int, optional): Number of columns for the one-hot encoded array. \n                           If not provided, it is determined from the input.\n    \n    Returns:\n    list: A list of one-hot encoded vectors.\n    \"\"\"\n    if n_col is None:\n        n_col = np.max(x) + 1\n    identity_matrix = np.eye(n_col)\n    one_hot = identity_matrix[x]\n    return one_hot.tolist()"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    \"\"\"\n    Converts a 1D numpy array into a diagonal matrix.\n\n    Parameters:\n    x (np.ndarray): A 1D numpy array.\n\n    Returns:\n    list: A 2D list representing the diagonal matrix.\n    \"\"\"\n    diagonal_matrix = np.diag(x)\n    return diagonal_matrix.tolist()"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    \"\"\"\n    Calculate the accuracy score between true and predicted labels.\n    \n    Parameters:\n    y_true (np.ndarray): 1D array of true labels.\n    y_pred (np.ndarray): 1D array of predicted labels.\n    \n    Returns:\n    float: Accuracy score rounded to 4 decimal places.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        raise ValueError('Input arrays must be of the same length.')\n    correct = np.sum(y_true == y_pred)\n    total = len(y_true)\n    accuracy = correct / total\n    return round(accuracy, 4)"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    \"\"\"\n    Calculate the correlation matrix between X and Y (or X with itself if Y is None).\n    \n    Parameters:\n    - X: 2D numpy array (n_samples, n_features)\n    - Y: Optional 2D numpy array (n_samples, m_features)\n    \n    Returns:\n    - Correlation matrix as a 2D list (rounded to 4 decimal places)\n    \"\"\"\n    if Y is None:\n        Y = X\n    X_centered = X - np.mean(X, axis=0)\n    Y_centered = Y - np.mean(Y, axis=0)\n    std_X = np.std(X, axis=0, ddof=0)\n    std_Y = np.std(Y, axis=0, ddof=0)\n    std_X[std_X == 0] = 1.0\n    std_Y[std_Y == 0] = 1.0\n    X_normalized = X_centered / std_X\n    Y_normalized = Y_centered / std_Y\n    correlation_matrix = np.dot(X_normalized.T, Y_normalized) / X.shape[0]\n    return np.round(correlation_matrix, 4).tolist()"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_fit(X, y, n_clf):\n    (n_samples, n_features) = X.shape\n    w = np.ones(n_samples) / n_samples\n    classifiers = []\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_polarity = 1\n        best_threshold = 0\n        best_feature_index = 0\n        for feature_index in range(n_features):\n            feature_values = X[:, feature_index]\n            unique_values = np.unique(feature_values)\n            thresholds = (unique_values[:-1] + unique_values[1:]) / 2\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.where(polarity * feature_values >= polarity * threshold, 1, -1)\n                    error = np.sum(w[y != predictions])\n                    if error < best_error:\n                        best_error = error\n                        best_polarity = polarity\n                        best_threshold = threshold\n                        best_feature_index = feature_index\n        if best_error == 0:\n            best_error = 1e-10\n        elif best_error >= 0.5:\n            break\n        epsilon = best_error\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n        predictions = np.where(best_polarity * X[:, best_feature_index] >= best_polarity * best_threshold, 1, -1)\n        w *= np.exp(-alpha * y * predictions)\n        w /= np.sum(w)\n        classifiers.append({'polarity': best_polarity, 'threshold': best_threshold, 'feature_index': best_feature_index, 'alpha': round(alpha, 4)})\n    return classifiers"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list):\n    scores = np.array(scores)\n    shifted_scores = scores - np.max(scores)\n    log_sum_exp = np.log(np.sum(np.exp(shifted_scores)))\n    log_softmax_values = shifted_scores - log_sum_exp\n    return np.round(log_softmax_values, 4).tolist()"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport copy\nimport math\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.optimizer = None\n\n    def initialize(self, optimizer):\n        input_dim = self.input_shape[0]\n        limit = 1 / math.sqrt(input_dim)\n        self.W = np.random.uniform(-limit, limit, size=(input_dim, self.n_units))\n        self.w0 = np.zeros((1, self.n_units))\n        self.optimizer = optimizer\n\n    def parameters(self):\n        input_dim = self.input_shape[0]\n        return input_dim * self.n_units + self.n_units\n\n    def forward_pass(self, X, training=True):\n        self.layer_input = X\n        return np.dot(X, self.W) + self.w0\n\n    def backward_pass(self, accum_grad):\n        grad_input = np.dot(accum_grad, self.W.T)\n        if self.trainable:\n            grad_W = np.dot(self.layer_input.T, accum_grad)\n            grad_w0 = np.sum(accum_grad, axis=0, keepdims=True)\n            self.W = self.optimizer.update(self.W, grad_W)\n            self.w0 = self.optimizer.update(self.w0, grad_w0)\n        return grad_input\n\n    def output_shape(self):\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    (in_height, in_width) = input_matrix.shape\n    (kernel_height, kernel_width) = kernel.shape\n    out_height = (in_height + 2 * padding - kernel_height) // stride + 1\n    out_width = (in_width + 2 * padding - kernel_width) // stride + 1\n    padded_input = np.pad(input_matrix, ((padding, padding), (padding, padding)), mode='constant')\n    output = np.zeros((out_height, out_width))\n    for i in range(out_height):\n        for j in range(out_width):\n            region = padded_input[i * stride:i * stride + kernel_height, j * stride:j * stride + kernel_width]\n            output[i, j] = np.sum(region * kernel)\n    return np.round(output, 4).tolist()"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    return max(0, z)"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    \"\"\"\n    Compute the Ridge Regression loss function.\n\n    Parameters:\n    - X: 2D numpy array of shape (n_samples, n_features)\n    - w: 1D numpy array of shape (n_features,)\n    - y_true: 1D numpy array of shape (n_samples,)\n    - alpha: float, regularization parameter\n\n    Returns:\n    - float: Ridge loss (MSE + regularization term)\n    \"\"\"\n    y_pred = X @ w\n    mse = np.mean((y_true - y_pred) ** 2)\n    regularization = alpha * np.sum(w ** 2)\n    total_loss = mse + regularization\n    return round(total_loss, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float | int:\n    \"\"\"\n    Applies the Leaky ReLU activation function to the input z.\n    \n    Parameters:\n    - z (float): The input value.\n    - alpha (float): The slope for negative inputs. Default is 0.01.\n    \n    Returns:\n    - float | int: The output after applying Leaky ReLU.\n    \"\"\"\n    if z > 0:\n        return z\n    else:\n        return alpha * z"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    return np.dot(x1, x2)"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fp = np.sum((y_true == 0) & (y_pred == 1))\n    if tp + fp == 0:\n        return 0.0\n    return tp / (tp + fp)"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    n_samples = X.shape[0]\n    weights = np.array(weights, dtype=np.float64)\n    for _ in range(n_iterations):\n        if method == 'stochastic':\n            idx = np.random.randint(n_samples)\n            X_i = X[idx, :].reshape(1, -1)\n            y_i = y[idx].reshape(1, -1)\n            samples = (X_i, y_i)\n        elif method == 'batch':\n            samples = (X, y)\n        elif method == 'mini-batch':\n            indices = np.random.choice(n_samples, batch_size, replace=False)\n            X_batch = X[indices, :]\n            y_batch = y[indices]\n            samples = (X_batch, y_batch)\n        else:\n            raise ValueError(\"Invalid method. Choose from 'batch', 'stochastic', or 'mini-batch'.\")\n        (X_batch, y_batch) = samples\n        predictions = X_batch @ weights\n        errors = predictions - y_batch\n        gradient = 2 / X_batch.shape[0] * X_batch.T @ errors\n        weights -= learning_rate * gradient\n    return np.round(weights, 4).tolist()"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    \"\"\"\n    Converts a given matrix into its Reduced Row Echelon Form (RREF).\n    \n    Parameters:\n    matrix (np.ndarray): A 2D NumPy array representing the matrix.\n    \n    Returns:\n    list: A Python list representation of the RREF matrix.\n    \"\"\"\n    matrix = matrix.astype(float)\n    (rows, cols) = matrix.shape\n    lead = 0\n    for r in range(rows):\n        if lead >= cols:\n            return matrix.tolist()\n        i = r\n        while matrix[i, lead] == 0:\n            i += 1\n            if i == rows:\n                i = r\n                lead += 1\n                if lead == cols:\n                    return matrix.tolist()\n        matrix[[i, r]] = matrix[[r, i]]\n        matrix[r] = matrix[r] / matrix[r, lead]\n        for i in range(rows):\n            if i != r and matrix[i, lead] != 0:\n                matrix[i] = matrix[i] - matrix[i, lead] * matrix[r]\n        lead += 1\n    return matrix.tolist()"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=10):\n    \"\"\"\n    Implements the Adam optimization algorithm to minimize a given function.\n\n    Parameters:\n    - f: Objective function to be minimized\n    - grad: Function that computes the gradient of f\n    - x0: Initial parameter values (numpy array)\n    - learning_rate: Step size (default: 0.001)\n    - beta1: Exponential decay rate for the first moment estimates (default: 0.9)\n    - beta2: Exponential decay rate for the second moment estimates (default: 0.999)\n    - epsilon: Small constant for numerical stability (default: 1e-8)\n    - num_iterations: Number of iterations to run the optimizer (default: 10)\n\n    Returns:\n    - Optimized parameters as a Python list (rounded to 4 decimal places)\n    \"\"\"\n    m = np.zeros_like(x0)\n    v = np.zeros_like(x0)\n    x = x0.copy()\n    for t in range(1, num_iterations + 1):\n        g = grad(x)\n        m = beta1 * m + (1 - beta1) * g\n        v = beta2 * v + (1 - beta2) * g ** 2\n        m_hat = m / (1 - beta1 ** t)\n        v_hat = v / (1 - beta2 ** t)\n        x = x - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    return np.round(x, 4).tolist()"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    (n_samples, n_features) = X.shape\n    w = np.zeros(n_features)\n    b = 0.0\n    for _ in range(max_iter):\n        y_pred = X @ w + b\n        dw = -1 / n_samples * X.T @ (y - y_pred) + alpha / n_samples * np.sign(w)\n        db = -1 / n_samples * np.sum(y - y_pred)\n        w_new = w - learning_rate * dw\n        b_new = b - learning_rate * db\n        if np.linalg.norm(w_new - w) < tol and abs(b_new - b) < tol:\n            break\n        (w, b) = (w_new, b_new)\n    w_rounded = np.round(w, 4).tolist()\n    b_rounded = round(b, 4)\n    return (w_rounded, b_rounded)"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    m = len(source)\n    n = len(target)\n    dp = np.zeros((m + 1, n + 1), dtype=int)\n    for i in range(m + 1):\n        dp[i][0] = i\n    for j in range(n + 1):\n        dp[0][j] = j\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            cost = 0 if source[i - 1] == target[j - 1] else 1\n            dp[i][j] = dp[i - 1][j - 1] + cost\n            if i > 1 and j > 1 and (source[i - 1] == target[j - 2]) and (source[i - 2] == target[j - 1]):\n                dp[i][j] = min(dp[i][j], dp[i - 2][j - 2] + 1)\n            dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1)\n            dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1)\n    return dp[m][n]"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    TP = np.sum((y_true == 1) & (y_pred == 1))\n    FN = np.sum((y_true == 1) & (y_pred == 0))\n    denominator = TP + FN\n    if denominator == 0:\n        return 0.0\n    else:\n        return round(TP / denominator, 3)"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    \"\"\"\n    Compute the self-attention output for a given input matrix X and weight matrices W_q, W_k, W_v.\n    \n    Parameters:\n    - X: Input matrix of shape (n, d)\n    - W_q: Query weight matrix of shape (d, d)\n    - W_k: Key weight matrix of shape (d, d)\n    - W_v: Value weight matrix of shape (d, d)\n    \n    Returns:\n    - Attention output as a Python list (rounded to 4 decimal places)\n    \"\"\"\n    (n, d) = X.shape\n    Q = X @ W_q\n    K = X @ W_k\n    V = X @ W_v\n    scores = Q @ K.T\n    exp_scores = np.exp(scores)\n    attention_weights = exp_scores / exp_scores.sum(axis=1, keepdims=True)\n    attention_output = attention_weights @ V\n    return np.round(attention_output, 4).tolist()"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    h_prev = np.array(initial_hidden_state)\n    Wx = np.array(Wx)\n    Wh = np.array(Wh)\n    b = np.array(b)\n    for x in input_sequence:\n        x_t = np.array(x)\n        h_prev = np.tanh(np.dot(Wx, x_t) + np.dot(Wh, h_prev) + b)\n    return np.round(h_prev, 4).tolist()"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    points_array = np.array(points, dtype=float)\n    translation_matrix = np.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])\n    homogeneous_points = np.hstack((points_array, np.ones((points_array.shape[0], 1))))\n    translated_points = np.dot(homogeneous_points, translation_matrix.T)\n    result = translated_points[:, :2].tolist()\n    return result"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    Compute the KL divergence between two univariate normal distributions.\n    \n    Parameters:\n    - mu_p: Mean of distribution P\n    - sigma_p: Standard deviation of distribution P\n    - mu_q: Mean of distribution Q\n    - sigma_q: Standard deviation of distribution Q\n    \n    Returns:\n    - KL divergence D_KL(P || Q)\n    \"\"\"\n    return np.log(sigma_q / sigma_p) + (sigma_p ** 2 + (mu_p - mu_q) ** 2) / (2 * sigma_q ** 2) - 0.5"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    \"\"\"\n    Solves the linear system Ax = b using the Gauss-Seidel iterative method.\n\n    Parameters:\n    - A: Square matrix of coefficients (numpy array)\n    - b: Right-hand side vector (numpy array)\n    - n: Number of iterations\n    - x_ini: Optional initial guess for x (default is zero vector)\n\n    Returns:\n    - x: Approximated solution vector after n iterations (as a Python list)\n    \"\"\"\n    m = len(b)\n    if x_ini is None:\n        x = np.zeros(m, dtype=float)\n    else:\n        x = np.array(x_ini, dtype=float)\n    for _ in range(n):\n        for i in range(m):\n            s1 = np.dot(A[i, :i], x[:i])\n            s2 = np.dot(A[i, i + 1:], x[i + 1:])\n            x[i] = (b[i] - s1 - s2) / A[i, i]\n    return np.round(x, 4).tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    n = len(b)\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    Ab = np.column_stack((A, b))\n    for i in range(n):\n        max_row = i + np.argmax(np.abs(Ab[i:, i]))\n        if Ab[max_row, i] == 0:\n            raise ValueError('Matrix is singular or nearly singular.')\n        Ab[[i, max_row]] = Ab[[max_row, i]]\n        for j in range(i + 1, n):\n            factor = Ab[j, i] / Ab[i, i]\n            Ab[j, i:] -= factor * Ab[i, i:]\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        x[i] = (Ab[i, n] - np.dot(Ab[i, i + 1:n], x[i + 1:n])) / Ab[i, i]\n    return np.round(x, 4).tolist()"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \"\"\"\n        h = initial_hidden_state\n        c = initial_cell_state\n        hidden_states = []\n        for t in range(x.shape[0]):\n            xt_ht = np.concatenate((x[t], h), axis=0)\n            xt_ht = xt_ht.reshape(-1, 1)\n            ft = self.sigmoid(np.dot(self.Wf, xt_ht) + self.bf)\n            it = self.sigmoid(np.dot(self.Wi, xt_ht) + self.bi)\n            cct = np.tanh(np.dot(self.Wc, xt_ht) + self.bc)\n            c = ft * c + it * cct\n            ot = self.sigmoid(np.dot(self.Wo, xt_ht) + self.bo)\n            h = ot * np.tanh(c)\n            hidden_states.append(h)\n        hidden_states = [np.round(h, 4).tolist() for h in hidden_states]\n        final_hidden_state = np.round(h, 4).tolist()\n        final_cell_state = np.round(c, 4).tolist()\n        return (hidden_states, final_hidden_state, final_cell_state)\n\n    def sigmoid(self, x):\n        return 1 / (1 + np.exp(-x))"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\ndef compute_tf_idf(corpus, query):\n    if not corpus:\n        raise ValueError('The corpus is empty. Cannot compute TF-IDF.')\n    vocabulary = set()\n    for doc in corpus:\n        vocabulary.update(doc)\n    vocabulary.update(query)\n    vocabulary = list(vocabulary)\n    tf_matrix = []\n    for doc in corpus:\n        tf = {}\n        doc_len = len(doc)\n        for word in doc:\n            tf[word] = tf.get(word, 0) + 1 / doc_len\n        tf_matrix.append(tf)\n    num_docs = len(corpus)\n    idf = {}\n    for word in vocabulary:\n        df = sum((1 for doc in corpus if word in doc))\n        idf[word] = np.log((num_docs + 1) / (df + 1))\n    tf_idf_scores = []\n    for doc_tf in tf_matrix:\n        doc_scores = []\n        for word in query:\n            tf = doc_tf.get(word, 0)\n            idf_score = idf.get(word, 0)\n            doc_scores.append(round(tf * idf_score, 5))\n        tf_idf_scores.append(doc_scores)\n    return np.array(tf_idf_scores).tolist()"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    true_positives = np.sum(np.logical_and(y_true == 1, y_pred == 1))\n    false_positives = np.sum(np.logical_and(y_true == 0, y_pred == 1))\n    false_negatives = np.sum(np.logical_and(y_true == 1, y_pred == 0))\n    precision = true_positives / (true_positives + false_positives) if true_positives + false_positives > 0 else 0\n    recall = true_positives / (true_positives + false_negatives) if true_positives + false_negatives > 0 else 0\n    f_score = (1 + beta ** 2) * precision * recall / (beta ** 2 * precision + recall) if beta ** 2 * precision + recall > 0 else 0\n    return round(f_score, 3)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\ndef initialize_weights(input_size, hidden_size, output_size):\n    \"\"\"\n    Initializes the RNN with random weights and zero biases.\n    \"\"\"\n    W_xh = np.random.randn(hidden_size, input_size) * 0.01\n    W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n    W_hy = np.random.randn(output_size, hidden_size) * 0.01\n    b_h = np.zeros((hidden_size, 1))\n    b_y = np.zeros((output_size, 1))\n    return (W_xh, W_hh, W_hy, b_h, b_y)\ndef tanh(x):\n    return np.tanh(x)\ndef tanh_derivative(x):\n    return 1.0 - np.tanh(x) ** 2\ndef rnn_forward(W_xh, W_hh, W_hy, b_h, b_y, hidden_size, input_sequence):\n    \"\"\"\n    Forward pass through the RNN for a given sequence of inputs.\n    Returns:\n        outputs: list of output vectors at each time step\n        last_inputs: list of input vectors at each time step\n        last_hiddens: list of hidden states at each time step\n    \"\"\"\n    T = input_sequence.shape[0]\n    h = np.zeros((hidden_size, 1))\n    outputs = []\n    last_inputs = []\n    last_hiddens = []\n    for t in range(T):\n        x = input_sequence[t].reshape(-1, 1)\n        h = np.tanh(W_xh @ x + W_hh @ h + b_h)\n        y = W_hy @ h + b_y\n        outputs.append(y)\n        last_inputs.append(x)\n        last_hiddens.append(h)\n    return (np.array(outputs), last_inputs, last_hiddens)\ndef rnn_backward(W_xh, W_hh, W_hy, b_h, b_y, hidden_size, input_sequence, expected_output, outputs, last_inputs, last_hiddens, learning_rate):\n    \"\"\"\n    Backward pass through the RNN using BPTT.\n    \"\"\"\n    T = input_sequence.shape[0]\n    dW_xh = np.zeros_like(W_xh)\n    dW_hh = np.zeros_like(W_hh)\n    dW_hy = np.zeros_like(W_hy)\n    db_h = np.zeros_like(b_h)\n    db_y = np.zeros_like(b_y)\n    dh_next = np.zeros_like(last_hiddens[0])\n    for t in reversed(range(T)):\n        x = last_inputs[t]\n        h = last_hiddens[t]\n        y = outputs[t]\n        dy = y - expected_output[t].reshape(-1, 1)\n        dW_hy += dy @ h.T\n        db_y += dy\n        dh = W_hy.T @ dy + dh_next\n        dh_raw = dh * tanh_derivative(W_xh @ x + W_hh @ last_hiddens[t - 1] + b_h) if t > 0 else dh * tanh_derivative(W_xh @ x + W_hh @ np.zeros_like(h) + b_h)\n        dW_xh += dh_raw @ x.T\n        dW_hh += dh_raw @ last_hiddens[t - 1].T if t > 0 else dh_raw @ np.zeros_like(h).T\n        db_h += dh_raw\n        dh_next = W_hh.T @ dh_raw\n    W_xh -= learning_rate * dW_xh\n    W_hh -= learning_rate * dW_hh\n    W_hy -= learning_rate * dW_hy\n    b_h -= learning_rate * db_h\n    b_y -= learning_rate * db_y\n    return (W_xh, W_hh, W_hy, b_h, b_y)\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        (self.W_xh, self.W_hh, self.W_hy, self.b_h, self.b_y) = initialize_weights(input_size, hidden_size, output_size)\n\n    def forward(self, x):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n        \"\"\"\n        (outputs, last_inputs, last_hiddens) = rnn_forward(self.W_xh, self.W_hh, self.W_hy, self.b_h, self.b_y, self.hidden_size, x)\n        return (outputs, last_inputs, last_hiddens)\n\n    def backward(self, input_sequence, expected_output, learning_rate):\n        \"\"\"\n        Backward pass through the RNN using BPTT.\n        \"\"\"\n        (outputs, last_inputs, last_hiddens) = self.forward(input_sequence)\n        (self.W_xh, self.W_hh, self.W_hy, self.b_h, self.b_y) = rnn_backward(self.W_xh, self.W_hh, self.W_hy, self.b_h, self.b_y, self.hidden_size, input_sequence, expected_output, outputs, last_inputs, last_hiddens, learning_rate)"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    A = np.array(A)\n    b = np.array(b)\n    if x0 is None:\n        x = np.zeros_like(b)\n    else:\n        x = np.array(x0)\n    r = b - A @ x\n    p = r.copy()\n    r_norm_squared = r @ r\n    tol_squared = tol ** 2\n    for i in range(n):\n        if r_norm_squared < tol_squared:\n            break\n        Ap = A @ p\n        alpha = r_norm_squared / (p @ Ap)\n        x = x + alpha * p\n        r = r - alpha * Ap\n        r_new_norm_squared = r @ r\n        beta = r_new_norm_squared / r_norm_squared\n        p = r + beta * p\n        r_norm_squared = r_new_norm_squared\n    return np.round(x, 8).tolist()"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\nfrom collections import Counter\ndef gini_impurity(y: List[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    if not y:\n        return 0.0\n    total_samples = len(y)\n    class_counts = Counter(y)\n    probabilities = [count / total_samples for count in class_counts.values()]\n    gini = 1.0 - sum((p ** 2 for p in probabilities))\n    return round(gini, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    num_rows = len(dense_matrix)\n    values = []\n    column_indices = []\n    row_pointer = [0]\n    for row in dense_matrix:\n        for (col_idx, val) in enumerate(row):\n            if val != 0:\n                values.append(val)\n                column_indices.append(col_idx)\n        row_pointer.append(row_pointer[-1] + len(values))\n    return (values, column_indices, row_pointer)"}
{"task_id": 66, "completion_id": 0, "solution": "def orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    dot_vL = sum((x * y for (x, y) in zip(v, L)))\n    dot_LL = sum((x * x for x in L))\n    if dot_LL == 0:\n        raise ValueError('The line vector L cannot be a zero vector.')\n    scalar_proj = dot_vL / dot_LL\n    proj_vector = [round(scalar_proj * x, 3) for x in L]\n    return proj_vector"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    if not dense_matrix or not dense_matrix[0]:\n        return ([], [], [0])\n    num_rows = len(dense_matrix)\n    num_cols = len(dense_matrix[0])\n    values = []\n    row_indices = []\n    col_ptr = [0]\n    for col in range(num_cols):\n        for row in range(num_rows):\n            val = dense_matrix[row][col]\n            if val != 0:\n                values.append(val)\n                row_indices.append(row)\n        col_ptr.append(len(values))\n    return (values, row_indices, col_ptr)"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    \"\"\"\n    Returns the basis vectors for the column space (image) of matrix A.\n    The basis vectors are the independent columns of A.\n    \"\"\"\n    A = np.array(A, dtype=float)\n    (_, pivots) = np.linalg.matrix_rank(A, tol=1e-08, return_rank=True)\n    (rref, pivots) = np.linalg.qr(A, mode='reduced')\n    independent_columns = A[:, pivots]\n    return np.round(independent_columns, 8).tolist()\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    y_mean = np.mean(y_true)\n    tss = np.sum((y_true - y_mean) ** 2)\n    rss = np.sum((y_true - y_pred) ** 2)\n    r2 = 1 - rss / tss\n    return round(r2, 3)"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    if not img:\n        return -1\n    num_rows = len(img)\n    if num_rows == 0:\n        return -1\n    total_pixels = 0\n    total_brightness = 0\n    expected_length = len(img[0])\n    for row in img:\n        if len(row) != expected_length:\n            return -1\n        for pixel in row:\n            if not 0 <= pixel <= 255:\n                return -1\n            total_brightness += pixel\n            total_pixels += 1\n    average = total_brightness / total_pixels\n    return round(average, 2)"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    \"\"\"\n    Calculate the Root Mean Square Error (RMSE) between y_true and y_pred.\n\n    Parameters:\n    y_true (array-like): Ground truth (correct) target values.\n    y_pred (array-like): Estimated target values.\n\n    Returns:\n    float: RMSE value rounded to three decimal places.\n\n    Raises:\n    ValueError: If inputs are not of the same length or are empty.\n    TypeError: If inputs are not array-like or not numeric.\n    \"\"\"\n    try:\n        y_true = np.asarray(y_true)\n        y_pred = np.asarray(y_pred)\n    except Exception as e:\n        raise TypeError('Input must be array-like.') from e\n    if not (np.issubdtype(y_true.dtype, np.number) and np.issubdtype(y_pred.dtype, np.number)):\n        raise TypeError('Input arrays must contain numeric values.')\n    if y_true.size == 0 or y_pred.size == 0:\n        raise ValueError('Input arrays cannot be empty.')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Input arrays must have the same shape.')\n    squared_errors = (y_true - y_pred) ** 2\n    mean_squared_error = np.mean(squared_errors)\n    root_mean_squared_error = np.sqrt(mean_squared_error)\n    return round(root_mean_squared_error, 3)"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    \"\"\"\n    Calculate the Jaccard Index between two binary arrays.\n    \n    Parameters:\n    y_true (np.ndarray): True binary labels.\n    y_pred (np.ndarray): Predicted binary labels.\n    \n    Returns:\n    float: Jaccard Index rounded to three decimal places.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    intersection = np.sum(np.logical_and(y_true, y_pred))\n    union = np.sum(np.logical_or(y_true, y_pred))\n    if union == 0:\n        return 1.0\n    jaccard = intersection / union\n    return round(jaccard, 3)"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    \"\"\"\n    Calculate the Dice Score (S\u00f8rensen-Dice coefficient) between two binary arrays.\n    \n    Parameters:\n    y_true (np.ndarray): Ground truth binary array.\n    y_pred (np.ndarray): Predicted binary array.\n    \n    Returns:\n    float: Dice Score rounded to 3 decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    intersection = np.sum(np.logical_and(y_true, y_pred))\n    sum_true = np.sum(y_true)\n    sum_pred = np.sum(y_pred)\n    if sum_true == 0 and sum_pred == 0:\n        return 1.0\n    dice = 2.0 * intersection / (sum_true + sum_pred)\n    return round(dice, 3)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef create_row_hv(row, dim, random_seeds):\n    \"\"\"\n    Creates a composite hypervector for a dataset row using Hyperdimensional Computing (HDC).\n    \n    Parameters:\n    - row (dict): A dictionary representing a dataset row.\n    - dim (int): The dimensionality of the hypervectors.\n    - random_seeds (dict): A dictionary of seeds for reproducibility.\n    \n    Returns:\n    - list: A composite hypervector representing the entire row.\n    \"\"\"\n    composite_hv = np.zeros(dim)\n    for (feature, value) in row.items():\n        seed = random_seeds.get(feature, 0)\n        np.random.seed(seed)\n        value_hv = 2 * np.random.randint(2, size=dim) - 1\n        np.random.seed(hash(feature) % 2 ** 32)\n        feature_hv = 2 * np.random.randint(2, size=dim) - 1\n        bound_hv = feature_hv * value_hv\n        composite_hv += bound_hv\n    composite_hv = np.sign(composite_hv)\n    return composite_hv.tolist()"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    cm = [[0, 0], [0, 0]]\n    for (y_true, y_pred) in data:\n        cm[y_true][y_pred] += 1\n    return cm"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    if v1.shape != v2.shape:\n        raise ValueError('Input vectors must have the same shape.')\n    if np.all(v1 == 0) or np.all(v2 == 0):\n        raise ValueError('Input vectors cannot be zero vectors.')\n    dot_product = np.dot(v1, v2)\n    magnitude_v1 = np.linalg.norm(v1)\n    magnitude_v2 = np.linalg.norm(v2)\n    similarity = dot_product / (magnitude_v1 * magnitude_v2)\n    return round(similarity, 3)"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    if len(actual) != len(predicted):\n        raise ValueError(\"The lengths of 'actual' and 'predicted' must be the same.\")\n    for label in actual + predicted:\n        if label not in {0, 1}:\n            raise ValueError(\"All elements in 'actual' and 'predicted' must be either 0 or 1.\")\n    tp = sum((1 for (a, p) in zip(actual, predicted) if a == 1 and p == 1))\n    fp = sum((1 for (a, p) in zip(actual, predicted) if a == 0 and p == 1))\n    tn = sum((1 for (a, p) in zip(actual, predicted) if a == 0 and p == 0))\n    fn = sum((1 for (a, p) in zip(actual, predicted) if a == 1 and p == 0))\n    confusion_matrix = [[tn, fp], [fn, tp]]\n    accuracy = (tp + tn) / (tp + tn + fp + fn) if tp + tn + fp + fn > 0 else 0.0\n    precision = tp / (tp + fp) if tp + fp > 0 else 0.0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0.0\n    f1_score = 2 * (precision * recall) / (precision + recall) if precision + recall > 0 else 0.0\n    specificity = tn / (tn + fp) if tn + fp > 0 else 0.0\n    negative_predictive_value = tn / (tn + fn) if tn + fn > 0 else 0.0\n    accuracy = round(accuracy, 3)\n    f1_score = round(f1_score, 3)\n    specificity = round(specificity, 3)\n    negative_predictive_value = round(negative_predictive_value, 3)\n    return (confusion_matrix, accuracy, f1_score, specificity, negative_predictive_value)\nactual = [1, 0, 1, 0, 1]\npredicted = [1, 0, 0, 1, 1]"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\nfrom scipy import stats\ndef descriptive_statistics(data):\n    data = np.array(data)\n    mean = np.mean(data)\n    median = np.median(data)\n    mode = stats.mode(data, keepdims=True).mode[0]\n    variance = np.var(data, ddof=0)\n    standard_deviation = np.std(data, ddof=0)\n    percentile_25 = np.percentile(data, 25)\n    percentile_50 = np.percentile(data, 50)\n    percentile_75 = np.percentile(data, 75)\n    iqr = percentile_75 - percentile_25\n    stats_dict = {'mean': round(mean, 4), 'median': round(median, 4), 'mode': mode, 'variance': round(variance, 4), 'standard_deviation': round(standard_deviation, 4), '25th_percentile': round(percentile_25, 4), '50th_percentile': round(percentile_50, 4), '75th_percentile': round(percentile_75, 4), 'interquartile_range': round(iqr, 4)}\n    return stats_dict"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials\n    \"\"\"\n    binom_coeff = math.comb(n, k)\n    probability = binom_coeff * p ** k * (1 - p) ** (n - k)\n    return round(probability, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    :return: The PDF value rounded to 5 decimal places.\n    \"\"\"\n    coefficient = 1 / (std_dev * math.sqrt(2 * math.pi))\n    exponent = -(x - mean) ** 2 / (2 * std_dev ** 2)\n    pdf_value = coefficient * math.exp(exponent)\n    return round(pdf_value, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    :return: Probability of observing exactly k events, rounded to 5 decimal places\n    \"\"\"\n    probability = math.exp(-lam) * lam ** k / math.factorial(k)\n    return round(probability, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        int: The contrast of the image, defined as the difference between the maximum and minimum pixel values.\n    \"\"\"\n    return np.max(img) - np.min(img)"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    \n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    \n    Returns:\n        float: The dot product of the two vectors.\n    \"\"\"\n    return np.dot(vec1, vec2)"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n\n    Returns:\n        list[list[float]]: A nested list where each inner list contains the polynomial features of the corresponding data point.\n    \"\"\"\n    if degree < 0:\n        return []\n    result = []\n    for x in data:\n        features = [x ** i for i in range(degree + 1)]\n        features = [round(val, 8) for val in features]\n        result.append(features)\n    return result"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    if position == 0 or d_model <= 0:\n        return -1\n    pe = np.zeros((position, d_model), dtype=np.float16)\n    for pos in range(position):\n        for i in range(0, d_model, 2):\n            denominator = np.power(10000, 2 * (i // 2) / d_model)\n            pe[pos, i] = np.sin(pos / denominator).astype(np.float16)\n            if i + 1 < d_model:\n                pe[pos, i + 1] = np.cos(pos / denominator).astype(np.float16)\n    return pe.tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    elif training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    else:\n        return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    parameter = parameter - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    return (np.round(parameter, 5).tolist(), np.round(m, 5).tolist(), np.round(v, 5).tolist())"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    token_ids = encoder.encode(prompt)\n    seq_len = len(token_ids)\n    for _ in range(n_tokens_to_generate):\n        token_embeddings = params['wte'][token_ids]\n        positional_embeddings = params['wpe'][:seq_len]\n        x = token_embeddings + positional_embeddings\n        mean = np.mean(x, axis=-1, keepdims=True)\n        variance = np.var(x, axis=-1, keepdims=True)\n        x = (x - mean) / np.sqrt(variance + 1e-08)\n        x = x * params['ln_f']['g'] + params['ln_f']['b']\n        logits = np.dot(x[-1], params['wte'].T)\n        probs = np.exp(logits - np.max(logits)) / np.sum(np.exp(logits - np.max(logits)))\n        next_token_id = np.random.choice(len(probs), p=probs)\n        token_ids.append(next_token_id)\n        seq_len += 1\n    return encoder.decode(token_ids)"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        exp_values = np.exp(values - np.max(values))\n        return exp_values / exp_values.sum(axis=1, keepdims=True)\n    Q = K = V = np.array(crystal_values).reshape(n, dimension)\n    attention_scores = Q @ K.T\n    attention_weights = softmax(attention_scores)\n    final_pattern = attention_weights @ V\n    final_pattern = np.round(final_pattern.flatten(), 4).tolist()\n    return final_pattern"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\nfrom math import log\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    N = len(corpus)\n    avgdl = np.mean([len(doc) for doc in corpus])\n    doc_freq = Counter()\n    doc_term_freq = []\n    for doc in corpus:\n        term_freq = Counter(doc)\n        doc_term_freq.append(term_freq)\n        for term in set(term_freq):\n            doc_freq[term] += 1\n    scores = []\n    for (i, doc) in enumerate(corpus):\n        score = 0.0\n        dl = len(doc)\n        for term in query:\n            if term not in doc_freq:\n                continue\n            ni = doc_freq[term]\n            fi = doc_term_freq[i][term]\n            score += log((N - ni + 0.5) / (ni + 0.5)) * (fi * (k1 + 1) / (fi + k1 * (1 - b + b * (dl / avgdl))))\n        scores.append(score)\n    return [round(score, 3) for score in scores]"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        raise ValueError('The lengths of y_true and y_pred must be the same.')\n    true_positives = 0\n    false_positives = 0\n    false_negatives = 0\n    for (true, pred) in zip(y_true, y_pred):\n        if true == 1 and pred == 1:\n            true_positives += 1\n        elif true == 0 and pred == 1:\n            false_positives += 1\n        elif true == 1 and pred == 0:\n            false_negatives += 1\n    if true_positives + false_positives == 0:\n        precision = 0.0\n    else:\n        precision = true_positives / (true_positives + false_positives)\n    if true_positives + false_negatives == 0:\n        recall = 0.0\n    else:\n        recall = true_positives / (true_positives + false_negatives)\n    if precision + recall == 0:\n        f1_score = 0.0\n    else:\n        f1_score = 2 * (precision * recall) / (precision + recall)\n    return round(f1_score, 3)"}
{"task_id": 92, "completion_id": 0, "solution": "import math\nPI = 3.14159\ndef power_grid_forecast(consumption_data):\n    detrended_data = []\n    for i in range(1, 11):\n        fluctuation = 10 * math.sin(2 * PI * i / 10)\n        detrended = consumption_data[i - 1] - fluctuation\n        detrended_data.append(detrended)\n    n = len(detrended_data)\n    x = list(range(1, n + 1))\n    y = detrended_data\n    x_mean = sum(x) / n\n    y_mean = sum(y) / n\n    numerator = sum(((x[i] - x_mean) * (y[i] - y_mean) for i in range(n)))\n    denominator = sum(((xi - x_mean) ** 2 for xi in x))\n    m = numerator / denominator\n    b = y_mean - m * x_mean\n    day_15_base = m * 15 + b\n    fluctuation_day_15 = 10 * math.sin(2 * PI * 15 / 10)\n    day_15_total = day_15_base + fluctuation_day_15\n    safety_margin = day_15_total * 1.05\n    final_forecast = math.ceil(safety_margin)\n    return final_forecast"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    absolute_errors = np.abs(y_true - y_pred)\n    mean_error = np.mean(absolute_errors)\n    return round(mean_error, 3)"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute scaled dot-product attention.\n    \"\"\"\n    d_k = K.shape[1]\n    scores = Q @ K.T / np.sqrt(d_k)\n    attention_weights = np.softmax(scores, axis=-1)\n    output = attention_weights @ V\n    return output\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Compute multi-head attention.\n    \"\"\"\n    (n, d) = X.shape\n    head_dim = d // n_heads\n    W_q_heads = np.split(W_q, n_heads, axis=1)\n    W_k_heads = np.split(W_k, n_heads, axis=1)\n    W_v_heads = np.split(W_v, n_heads, axis=1)\n    outputs = []\n    for i in range(n_heads):\n        Q_i = X @ W_q_heads[i]\n        K_i = X @ W_k_heads[i]\n        V_i = X @ W_v_heads[i]\n        head_output = self_attention(Q_i, K_i, V_i)\n        outputs.append(head_output)\n    output = np.hstack(outputs)\n    return np.round(output, 4).tolist()"}
{"task_id": 95, "completion_id": 0, "solution": "def phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError('Input lists must be of the same length.')\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    for (xi, yi) in zip(x, y):\n        if xi == 0 and yi == 0:\n            a += 1\n        elif xi == 0 and yi == 1:\n            b += 1\n        elif xi == 1 and yi == 0:\n            c += 1\n        elif xi == 1 and yi == 1:\n            d += 1\n    numerator = a * d - b * c\n    denominator = ((a + b) * (c + d) * (a + c) * (b + d)) ** 0.5\n    if denominator == 0:\n        return 0.0\n    phi = numerator / denominator\n    return round(phi, 4)"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    if x <= -2.5:\n        return 0.0\n    elif -2.5 < x < 2.5:\n        return 0.2 * x + 0.5\n    else:\n        return 1.0"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value\n    \"\"\"\n    if x >= 0:\n        return round(x, 4)\n    else:\n        return round(alpha * (math.exp(x) - 1), 4)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    if x < 0:\n        return alpha * x\n    else:\n        return x"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x)\n    \"\"\"\n    if x > 50:\n        return round(x, 4)\n    elif x < -50:\n        return round(0.0, 4)\n    else:\n        return round(math.log(1 + math.exp(x)), 4)"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input, rounded to 4 decimal places\n    \"\"\"\n    result = x / (1 + abs(x))\n    return round(result, 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    rhos = np.array(rhos)\n    A = np.array(A)\n    pi_theta_old = np.array(pi_theta_old)\n    pi_theta_ref = np.array(pi_theta_ref)\n    clipped_rhos = np.clip(rhos, 1 - epsilon, 1 + epsilon)\n    min_terms = np.minimum(rhos * A, clipped_rhos * A)\n    kl_divergence = np.sum(pi_theta_old * np.log(pi_theta_old / pi_theta_ref))\n    objective = np.mean(min_terms) - beta * kl_divergence\n    return round(objective, 6)"}
{"task_id": 102, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value\n    \"\"\"\n    sigma = 1 / (1 + math.exp(-x))\n    result = x * sigma\n    return round(result, 4)"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value rounded to 4 decimal places\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x > 0:\n        result = scale * x\n    else:\n        result = scale * alpha * (math.exp(x) - 1)\n    return round(result, 4)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00d7 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    z = np.dot(X, weights) + bias\n    probabilities = 1 / (1 + np.exp(-z))\n    predictions = (probabilities >= 0.5).astype(int)\n    return predictions.tolist()"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    (N, M) = X.shape\n    C = len(np.unique(y))\n    Y_one_hot = np.zeros((N, C))\n    Y_one_hot[np.arange(N), y] = 1\n    B = np.zeros((C, M))\n    b = np.zeros((C, 1))\n    losses = []\n    for _ in range(iterations):\n        Z = B @ X.T + b\n        exp_Z = np.exp(Z - np.max(Z, axis=0, keepdims=True))\n        A = exp_Z / np.sum(exp_Z, axis=0, keepdims=True)\n        loss = -np.sum(Y_one_hot * np.log(A + 1e-15)) / N\n        losses.append(round(loss, 4))\n        dZ = A - Y_one_hot.T\n        dB = dZ @ X / N\n        db = np.sum(dZ, axis=1, keepdims=True) / N\n        B -= learning_rate * dB\n        b -= learning_rate * db\n    B_full = np.hstack((B, b))\n    B_full_rounded = np.round(B_full, 4)\n    losses_rounded = [round(loss, 4) for loss in losses]\n    return (B_full_rounded.tolist(), losses_rounded)"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \n    Parameters:\n    - X: Input features (numpy array of shape [n_samples, n_features])\n    - y: Target labels (numpy array of shape [n_samples])\n    - learning_rate: Step size for gradient descent\n    - iterations: Number of iterations to perform\n\n    Returns:\n    - weights: Optimized model parameters (including bias)\n    - losses: List of loss values over iterations (rounded to 4 decimal places)\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    weights = np.zeros(n_features + 1)\n    X_b = np.c_[np.ones(n_samples), X]\n    losses = []\n    for _ in range(iterations):\n        linear_model = np.dot(X_b, weights)\n        y_pred = 1 / (1 + np.exp(-linear_model))\n        epsilon = 1e-15\n        y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n        loss = -np.mean(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n        losses.append(round(loss, 4))\n        gradient = np.dot(X_b.T, y_pred - y) / n_samples\n        weights -= learning_rate * gradient\n    weights = [round(w, 4) for w in weights]\n    return (weights, losses)"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    d_k = K.shape[1]\n    scores = np.dot(Q, K.T) / np.sqrt(d_k)\n    scores = np.where(mask == 0, -1000000000.0, scores)\n    attention_weights = np.exp(scores) / np.sum(np.exp(scores), axis=-1, keepdims=True)\n    output = np.dot(attention_weights, V)\n    return output\nmask = np.tril(np.ones((X.shape[0], X.shape[0])))\noutput = masked_attention(Q, K, V, mask)"}
{"task_id": 108, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    \"\"\"\n    if not apples:\n        return 0.0\n    total = len(apples)\n    color_counts = Counter(apples)\n    entropy = 0.0\n    for count in color_counts.values():\n        probability = count / total\n        entropy -= probability * math.log2(probability)\n    return round(entropy, 4)"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Perform Layer Normalization on a 3D input tensor.\n\n    Parameters:\n    - X: Input tensor of shape (batch_size, sequence_length, d_model)\n    - gamma: Scaling parameter of shape (1, 1, d_model)\n    - beta: Shifting parameter of shape (1, 1, d_model)\n    - epsilon: Small value to avoid division by zero\n\n    Returns:\n    - Normalized tensor of the same shape as X, rounded to 5 decimal places.\n    \"\"\"\n    mean = np.mean(X, axis=-1, keepdims=True)\n    variance = np.var(X, axis=-1, keepdims=True)\n    X_normalized = (X - mean) / np.sqrt(variance + epsilon)\n    X_scaled_shifted = gamma * X_normalized + beta\n    return np.round(X_scaled_shifted, 5).tolist()"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\nimport re\nimport math\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n\n    def tokenize(text):\n        return [word.lower() for word in re.findall('\\\\b\\\\w+\\\\b', text)]\n    ref_tokens = tokenize(reference)\n    can_tokens = tokenize(candidate)\n    ref_counter = Counter(ref_tokens)\n    can_counter = Counter(can_tokens)\n    matches = sum((min(ref_counter[word], can_counter[word]) for word in can_counter if word in ref_counter))\n    precision = matches / len(can_tokens) if can_tokens else 0\n    recall = matches / len(ref_tokens) if ref_tokens else 0\n    f_mean = precision * recall / (alpha * precision + (1 - alpha) * recall) if precision + recall > 0 else 0\n    aligned = []\n    ref_index = 0\n    for word in can_tokens:\n        if ref_index < len(ref_tokens) and word == ref_tokens[ref_index]:\n            aligned.append(True)\n            ref_index += 1\n        else:\n            aligned.append(False)\n    chunks = 0\n    in_chunk = False\n    for a in aligned:\n        if a and (not in_chunk):\n            chunks += 1\n            in_chunk = True\n        elif not a:\n            in_chunk = False\n    len_candidate = len(can_tokens)\n    if len_candidate > 0:\n        penalty = 1 - gamma * (math.log(chunks + 1) / math.log(len_candidate + 1))\n    else:\n        penalty = 0\n    score = f_mean * penalty\n    return round(score, 3)"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    prob_x = total_counts_x / total_samples\n    prob_y = total_counts_y / total_samples\n    prob_xy = joint_counts / total_samples\n    pmi = np.log2(prob_xy / (prob_x * prob_y))\n    return round(pmi, 3)"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    if not x:\n        return []\n    min_val = min(x)\n    max_val = max(x)\n    if min_val == max_val:\n        return [0.0 for _ in x]\n    normalized = [(val - min_val) / (max_val - min_val) for val in x]\n    return [round(val, 4) for val in normalized]"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    z1 = np.dot(w1, x)\n    a1 = np.maximum(0, z1)\n    z2 = np.dot(w2, a1)\n    z_out = z2 + x\n    a_out = np.maximum(0, z_out)\n    return np.round(a_out, 4).tolist()"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray):\n    \"\"\"\n    Perform Global Average Pooling on a 3D NumPy array.\n\n    Parameters:\n    x (np.ndarray): A 3D array of shape (height, width, channels).\n\n    Returns:\n    np.ndarray: A 1D array of shape (channels,) where each element is the average of the corresponding feature map.\n    \"\"\"\n    return np.mean(x, axis=(0, 1))"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    (batch_size, channels, height, width) = X.shape\n    X_normalized = np.zeros_like(X)\n    for c in range(channels):\n        X_channel = X[:, c, :, :]\n        X_flat = X_channel.reshape(-1)\n        mean = np.mean(X_flat)\n        var = np.var(X_flat)\n        X_normalized_channel = (X_channel - mean) / np.sqrt(var + epsilon)\n        X_normalized_channel = gamma[0, c, 0, 0] * X_normalized_channel + beta[0, c, 0, 0]\n        X_normalized[:, c, :, :] = X_normalized_channel\n    return np.round(X_normalized, 4).tolist()"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    derivative = c * n * x ** (n - 1)\n    return round(derivative, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10):\n    vectors = np.array(vectors, dtype=float)\n    (n, d) = vectors.shape\n    if d != 2:\n        raise ValueError('All vectors must be 2-dimensional.')\n    basis = []\n    for v in vectors:\n        v_orth = np.array(v)\n        for u in basis:\n            proj = np.dot(v_orth, u) / np.dot(u, u) * u\n            v_orth -= proj\n        if np.linalg.norm(v_orth) > tol:\n            v_unit = v_orth / np.linalg.norm(v_orth)\n            basis.append(v_unit)\n    return [np.round(vec, 4).tolist() for vec in basis]"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    a_np = np.array(a)\n    b_np = np.array(b)\n    result = np.cross(a_np, b_np)\n    return np.round(result, 4).tolist()"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    if A.shape[0] != A.shape[1]:\n        raise ValueError('Matrix A must be square.')\n    if A.shape[0] != b.shape[0]:\n        raise ValueError('Matrix A and vector b must have the same number of rows.')\n    det_A = np.linalg.det(A)\n    if abs(det_A) < 1e-10:\n        return -1\n    n = A.shape[0]\n    x = np.zeros(n)\n    for i in range(n):\n        A_i = A.copy()\n        A_i[:, i] = b\n        det_Ai = np.linalg.det(A_i)\n        x[i] = det_Ai / det_A\n    return np.round(x, 4).tolist()"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    if not p or not q or len(p) != len(q):\n        return 0.0\n    bc = sum((np.sqrt(p_i * q_i) for (p_i, q_i) in zip(p, q)))\n    distance = -np.log(bc)\n    return round(distance, 4)"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float]:\n    if len(a) != len(b):\n        return -1\n    return [x + y for (x, y) in zip(a, b)]"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    (num_states, num_actions) = theta.shape\n    gradient = np.zeros_like(theta)\n    total_episodes = len(episodes)\n    for episode in episodes:\n        T = len(episode)\n        returns = np.zeros(T)\n        for t in range(T):\n            G = 0\n            for k in range(t, T):\n                G += episode[k][2]\n            returns[t] = G\n        for t in range(T):\n            (s, a, _) = episode[t]\n            exp_theta = np.exp(theta[s, :])\n            pi = exp_theta / exp_theta.sum()\n            log_pi = np.log(pi[a])\n            grad_log_pi = np.zeros(num_actions)\n            grad_log_pi[a] = 1 - pi[a]\n            for i in range(num_actions):\n                if i != a:\n                    grad_log_pi[i] = -pi[i]\n            gradient[s, :] += log_pi * grad_log_pi * returns[t]\n    gradient /= total_episodes\n    return np.round(gradient, 4).tolist()"}
{"task_id": 123, "completion_id": 0, "solution": "def compute_efficiency(n_experts, k_active, d_in, d_out):\n    dense_flops = n_experts * d_in * d_out\n    moe_flops = k_active * d_in * d_out\n    savings_percentage = (dense_flops - moe_flops) / dense_flops * 100\n    return round(savings_percentage, 1)"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    \"\"\"\n    Implements the Noisy Top-K Gating Function for Mixture-of-Experts (MoE) models.\n\n    Parameters:\n    - X: Input matrix of shape (batch_size, input_dim)\n    - W_g: Gate weight matrix of shape (input_dim, num_experts)\n    - W_noise: Noise weight matrix of shape (input_dim, num_experts)\n    - N: Pre-sampled noise matrix of shape (batch_size, num_experts)\n    - k: Sparsity constraint (number of experts to activate per input)\n\n    Returns:\n    - A list of shape (batch_size, num_experts) representing the final gating probabilities.\n    \"\"\"\n    (batch_size, input_dim) = X.shape\n    num_experts = W_g.shape[1]\n    gate_values = X @ W_g\n    noise_values = X @ W_noise\n    noisy_gate_values = gate_values + noise_values * N\n    topk_indices = np.argsort(noisy_gate_values, axis=1)[:, -k:]\n    topk_mask = np.zeros_like(gate_values)\n    for i in range(batch_size):\n        topk_mask[i, topk_indices[i]] = 1\n    denominator = np.sum(np.exp(gate_values) * topk_mask, axis=1, keepdims=True)\n    gate_probs = np.exp(gate_values) * topk_mask / (denominator + 1e-08)\n    return np.round(gate_probs, 4).tolist()"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    \"\"\"\n    Implements a Mixture of Experts (MoE) layer with softmax gating and top-k routing.\n\n    Parameters:\n    - x: Input tensor of shape (batch_size, sequence_length, input_dim)\n    - We: Expert weight matrices of shape (n_experts, input_dim, output_dim)\n    - Wg: Gating weight matrix of shape (input_dim, n_experts)\n    - n_experts: Number of experts\n    - top_k: Number of top experts to select per token\n\n    Returns:\n    - Output tensor of shape (batch_size, sequence_length, output_dim)\n    \"\"\"\n    (batch_size, seq_len, input_dim) = x.shape\n    output_dim = We.shape[2]\n    gate_scores = x @ Wg\n    gate_probs = np.exp(gate_scores - np.max(gate_scores, axis=-1, keepdims=True))\n    gate_probs /= np.sum(gate_probs, axis=-1, keepdims=True)\n    top_k_indices = np.argsort(gate_probs, axis=-1)[:, :, -top_k:]\n    top_k_probs = np.take_along_axis(gate_probs, top_k_indices, axis=-1)\n    top_k_probs /= np.sum(top_k_probs, axis=-1, keepdims=True)\n    output = np.zeros((batch_size, seq_len, output_dim))\n    for b in range(batch_size):\n        for s in range(seq_len):\n            token = x[b, s]\n            for k in range(top_k):\n                expert_idx = top_k_indices[b, s, k]\n                weight = We[expert_idx]\n                expert_output = token @ weight\n                output[b, s] += top_k_probs[b, s, k] * expert_output\n    return np.round(output, 4).tolist()"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    \"\"\"\n    Perform Group Normalization on a 4D input tensor.\n\n    Parameters:\n    - X: Input tensor of shape (B, C, H, W)\n    - gamma: Scale parameter of shape (C,)\n    - beta: Shift parameter of shape (C,)\n    - num_groups: Number of groups to divide the channels into\n    - epsilon: Small value to avoid division by zero\n\n    Returns:\n    - Normalized output tensor as a Python list\n    \"\"\"\n    (B, C, H, W) = X.shape\n    assert C % num_groups == 0, 'Number of channels must be divisible by num_groups'\n    X_grouped = X.reshape(B, num_groups, C // num_groups, H, W)\n    mean = np.mean(X_grouped, axis=(2, 3, 4), keepdims=True)\n    var = np.var(X_grouped, axis=(2, 3, 4), keepdims=True)\n    X_normalized = (X_grouped - mean) / np.sqrt(var + epsilon)\n    X_normalized = X_normalized.reshape(B, C, H, W)\n    gamma = gamma.reshape(1, C, 1, 1)\n    beta = beta.reshape(1, C, 1, 1)\n    X_output = X_normalized * gamma + beta\n    return np.round(X_output, 4).tolist()"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n\n    def f(x):\n        return x ** 4 - 3 * x ** 3 + 2\n\n    def df(x):\n        return 4 * x ** 3 - 9 * x ** 2\n    x = start_x\n    for _ in range(max_iters):\n        grad = df(x)\n        new_x = x - learning_rate * grad\n        if abs(new_x - x) < tolerance:\n            break\n        x = new_x\n    return round(x, 4)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: np.ndarray, beta: np.ndarray) -> list[float]:\n    \"\"\"\n    Applies the Dynamic Tanh (DyT) transformation to the input tensor.\n    \n    Parameters:\n    - x: Input tensor (numpy array)\n    - alpha: Scaling factor before tanh\n    - gamma: Scaling factor after tanh (per feature)\n    - beta: Shift factor after tanh (per feature)\n    \n    Returns:\n    - Output tensor as a list of floats, rounded to 4 decimal places.\n    \"\"\"\n    scaled_x = alpha * x\n    tanh_output = np.tanh(scaled_x)\n    output = gamma * tanh_output + beta\n    return np.round(output, 4).tolist()"}
