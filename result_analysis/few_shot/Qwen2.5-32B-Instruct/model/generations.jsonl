{"task_id": 0, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Implements Ridge Regression using the closed-form solution.\n    \n    Parameters:\n    - data: np.ndarray, the input data where the last column is the target y and the preceding columns are the features X.\n    - alpha: float, the regularization strength.\n    \n    Returns:\n    - list[float]: The weight vector rounded to 4 decimal places.\n    - -1: If the matrix (X^T X + alpha I) is not invertible.\n    \"\"\"\n    # Separate features and target\n    X = data[:, :-1]\n    y = data[:, -1]\n    \n    # Add bias term\n    X = np.c_[np.ones(X.shape[0]), X]\n    \n    # Compute the closed-form solution\n    I = np.eye(X.shape[1])\n    A = np.dot(X.T, X) + alpha * I\n    if np.linalg.det(A) == 0:\n        return -1\n    w = np.dot(np.linalg.inv(A), np.dot(X.T, y))\n    \n    # Return the weight vector rounded to 4 decimal places\n    return [round(i, 4) for i in w]\n\n# Example usage\ndata = np.array([[1, 2], [2, 3], [3, 5]], dtype=float)\nalpha = 0\nprint(ridge_regression(data, alpha))\n```\n\nThis code snippet defines a function `ridge_regression` that implements Ridge Regression using the closed-form solution. It takes an input data array and a regularization strength `alpha`, separates the features and target, adds a bias term, computes the weight vector, and returns it rounded to 4 decimal places. If the matrix $(\\mathbf X^\\top\\mathbf X+\\alpha\\,\\mathbf I)$ is not invertible, it returns -1."}
{"task_id": 1, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    updates = 0\n    \n    # Compute the Gram matrix\n    K = np.dot(X_train, X_train.T)\n    \n    while updates < n_iter:\n        updated = False\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * K[:, i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n                updates += 1\n        if not updated:\n            break\n    \n    # Compute the primal weight vector w\n    w = np.dot(alpha * y_train, X_train)\n    \n    return [round(wi, 4) for wi in w], round(b, 4)\n\n# Example usage\nX_train = np.array([[2, 2], [4, 4], [4, 0], [0, 0]])\ny_train = np.array([1, 1, -1, -1])\nprint(perceptron_dual(X_train, y_train))\n```\n\nThis code implements the dual-form perceptron learning algorithm as described in the task. It uses the Gram matrix for computing the inner products and updates the dual parameters `alpha` and the bias `b` based on the margin condition. The primal weight vector `w` is computed after training and returned along with the bias `b`, both rounded to four decimal places."}
{"task_id": 2, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1 / (1 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return mu * (1 - mu)\n\n    return {\n        \"identity\": {\n            \"link\": identity_link,\n            \"inv_link\": identity_inv_link,\n            \"derivative\": identity_derivative\n        },\n        \"log\": {\n            \"link\": log_link,\n            \"inv_link\": log_inv_link,\n            \"derivative\": log_derivative\n        },\n        \"logit\": {\n            \"link\": logit_link,\n            \"inv_link\": logit_inv_link,\n            \"derivative\": logit_derivative\n        }\n    }\n\n# Example usage\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links[\"logit\"][\"link\"](mu)\nmu2 = links[\"logit\"][\"inv_link\"](eta)\nprint(np.round(eta, 4))  # Output: [-1.3863  1.3863]\nprint(np.round(mu2, 4))  # Output: [0.2 0.8]\n```"}
{"task_id": 3, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    \n    def build_tree(indices, depth=0):\n        if len(indices) < 3:\n            return depth, indices\n        f = np.random.randint(data.shape[1])\n        down, up = np.min(data[indices, f]), np.max(data[indices, f])\n        v = np.random.uniform(down, up)\n        left_indices = [i for i in indices if data[i, f] <= v]\n        right_indices = [i for i in indices if data[i, f] > v]\n        left_depth, left_leaf = build_tree(left_indices, depth + 1)\n        right_depth, right_leaf = build_tree(right_indices, depth + 1)\n        return max(left_depth, right_depth), left_leaf + right_leaf\n    \n    _, leaf_indices = build_tree(list(range(data.shape[0])))\n    depths = [0] * data.shape[0]\n    for depth, indices in enumerate(leaf_indices):\n        for index in indices:\n            depths[index] = depth\n    return depths\n\n# Example usage\ndata = np.arange(5).reshape(-1, 1)\nprint(isolation_tree_path_length(data))\n```\n\nThis solution defines a function `isolation_tree_path_length` that builds an isolation tree according to the specified rules and returns the depth of the leaf reached by each sample. The tree is built recursively, and the depth is recorded for each leaf. The function uses `numpy.random.seed(0)` to ensure reproducibility of the results."}
{"task_id": 7, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    # Calculate the minimum support count\n    min_support_count = math.ceil(minsup * len(transactions))\n    \n    # Flatten the list of transactions to get all unique items\n    all_items = set(item for transaction in transactions for item in transaction)\n    \n    # Initialize the frequent itemsets dictionary\n    frequent_itemsets = {}\n    \n    # Function to find frequent itemsets of a given size\n    def find_frequent(k):\n        if k == 1:\n            # For single items, count their occurrences directly\n            item_counts = Counter(item for transaction in transactions for item in set(transaction))\n            return {item: count for item, count in item_counts.items() if count >= min_support_count}\n        else:\n            # For itemsets of size k, generate candidate itemsets from frequent itemsets of size k-1\n            candidates = set(combinations(all_items, k))\n            candidate_counts = Counter()\n            for transaction in transactions:\n                transaction_set = set(transaction)\n                for candidate in candidates:\n                    if set(candidate).issubset(transaction_set):\n                        candidate_counts[candidate] += 1\n            return {itemset: count for itemset, count in candidate_counts.items() if count >= min_support_count}\n    \n    # Start with itemsets of size 1\n    k = 1\n    while True:\n        frequent = find_frequent(k)\n        if not frequent:\n            break\n        frequent_itemsets.update(frequent)\n        k += 1\n    \n    # Convert keys to sorted tuples\n    return {tuple(sorted(itemset)): count for itemset, count in frequent_itemsets.items()}\n\n# Example usage\ntransactions = [\n    ['bread', 'milk'],\n    ['bread', 'diaper', 'beer', 'egg'],\n    ['milk', 'diaper', 'beer', 'coke'],\n    ['bread', 'milk', 'diaper', 'beer'],\n    ['bread', 'milk', 'diaper', 'coke']\n]\nminsup = 0.6\nprint(find_frequent_itemsets(transactions, minsup))\n```\n\nThis Python script defines a function `find_frequent_itemsets` that takes a list of transactions and a minimum support threshold, and returns a dictionary of frequent itemsets and their support counts. The function iteratively finds frequent itemsets of increasing size until no more frequent itemsets can be found."}
{"task_id": 11, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    n_samples, n_features = data.shape\n    centres = np.array(data[:k].copy())\n    labels = np.zeros(n_samples, dtype=int)\n    for _ in range(max_iter):\n        # Assign each sample to the nearest centre\n        for i in range(n_samples):\n            distances = np.sum((data[i] - centres) ** 2, axis=1)\n            labels[i] = np.argmin(distances)\n        \n        # Recompute centres\n        new_centres = np.zeros((k, n_features))\n        counts = np.zeros(k)\n        for i in range(n_samples):\n            new_centres[labels[i]] += data[i]\n            counts[labels[i]] += 1\n        \n        for i in range(k):\n            if counts[i] > 0:\n                new_centres[i] /= counts[i]\n            else:\n                # If a cluster is empty, reinitialize its centre\n                new_centres[i] = data[np.random.randint(n_samples)]\n        \n        # Check for convergence\n        max_change = np.max(np.sum((new_centres - centres) ** 2, axis=1))\n        if max_change < epsilon:\n            break\n        centres = new_centres\n    \n    # Round the centres to 4 decimal places\n    centres = np.round(centres, 4)\n    return centres.tolist(), labels.tolist()\n\n# Example usage\ndata = np.array([[1, 2], [1, 4], [1, 0], [10, 2], [10, 4], [10, 0]])\nk = 2\ncentres, labels = kmeans(data, k)\nprint(\"Centres:\", centres)\nprint(\"Labels:\", labels)\n```\n\nThis script implements the K-Means clustering algorithm from scratch, adhering to the requirements specified in the task description. It includes the initialization of centres, the assignment of samples to the nearest centre, the recomputation of centres, and the handling of empty clusters by reinitializing their centres. The script also checks for convergence based on the maximum change in centre positions and rounds the final centres to 4 decimal places before returning them along with the cluster labels."}
{"task_id": 13, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_users, n_items = data.shape\n    S = np.zeros((n_items, n_items))\n\n    # Step 1: Build item-item similarity matrix\n    for i in range(n_items):\n        for j in range(i, n_items):\n            common_users = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(common_users) == 0:\n                S[i, j] = S[j, i] = 0\n            else:\n                v1 = data[common_users, i]\n                v2 = data[common_users, j]\n                if criterion == 'cosine':\n                    if np.std(v1) > 1e-3:\n                        v1 = v1 - np.mean(v1)\n                    if np.std(v2) > 1e-3:\n                        v2 = v2 - np.mean(v2)\n                    S[i, j] = S[j, i] = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n                elif criterion == 'pearson':\n                    S[i, j] = S[j, i] = np.corrcoef(v1, v2)[0, 1]\n\n    # Step 2: Collect rated items and ratings for the active user\n    rated_items = np.where(data[user_ind] > 0)[0]\n    ratings = data[user_ind, rated_items]\n\n    # Step 3: Compute predicted attractiveness for unrated items\n    scores = defaultdict(float)\n    for t in range(n_items):\n        if t not in rated_items:\n            numerator = np.sum(ratings * S[t, rated_items])\n            denominator = np.sum(np.abs(S[t, rated_items]))\n            if denominator != 0:\n                scores[t] = numerator / denominator\n\n    # Step 4: Return the top k items\n    top_items = sorted(scores.items(), key=lambda x: (-x[1], x[0]))[:k]\n    return [item[0] for item in top_items]\n\n# Example usage\ndata = np.array([\n    [5, 0, 5],\n    [4, 0, 4],\n    [0, 3, 3],\n    [0, 2, 2]\n])\nuser_ind = 0\nk = 1\ncriterion = 'cosine'\nprint(knn_recommend(data, user_ind, k, criterion))  # Output: [1]\n```"}
{"task_id": 19, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_gain = -np.inf\n    best_split = None\n\n    for feature_index in range(n_features):\n        # Sort the samples by the current feature\n        sorted_indices = np.argsort(X[:, feature_index])\n        sorted_g = g[sorted_indices]\n        sorted_h = h[sorted_indices]\n        sorted_X = X[sorted_indices, feature_index]\n\n        # Calculate the total sum of gradients and Hessians\n        total_g = np.sum(sorted_g)\n        total_h = np.sum(sorted_h)\n\n        # Initialize the left and right sums\n        left_g = 0\n        left_h = 0\n        right_g = total_g\n        right_h = total_h\n\n        for i in range(1, n_samples):\n            # Calculate the gain for the current split\n            left_g += sorted_g[i-1]\n            left_h += sorted_h[i-1]\n            right_g -= sorted_g[i-1]\n            right_h -= sorted_h[i-1]\n\n            # Skip if the split is not valid (less than 2 samples on either side)\n            if i < 2 or i >= n_samples - 1:\n                continue\n\n            # Calculate the gain for the current split\n            gain = calculate_gain(left_g, left_h, right_g, right_h, total_g, total_h, gamma, lam)\n\n            # Update the best split if the current gain is better\n            if gain > best_gain:\n                best_gain = gain\n                best_split = (feature_index, (sorted_X[i-1] + sorted_X[i]) / 2)\n\n    return best_split\n\ndef calculate_gain(left_g, left_h, right_g, right_h, total_g, total_h, gamma, lam):\n    left_loss = -0.5 * (left_g ** 2) / (left_h + lam) + gamma\n    right_loss = -0.5 * (right_g ** 2) / (right_h + lam) + gamma\n    total_loss = -0.5 * (total_g ** 2) / (total_h + lam) + gamma\n    gain = total_loss - left_loss - right_loss\n    return gain\n\n# Example usage\nX  = np.array([[2], [4], [6], [8]])\ng  = np.array([ 1,  1, -1, -1])\nh  = np.array([1, 1, 1, 1])\ngamma = 0.1\nlam   = 1.0\n\nprint(best_split(X, g, h, gamma, lam))  # Expected output: (0, 4)\n```\n\nThis code defines a function `best_split` that computes the best split for a node in a gradient-boosting tree based on the gain from the split. It iterates over all features and all possible thresholds, calculating the gain for each potential split and keeping track of the best one. The `calculate_gain` helper function computes the gain for a given split."}
{"task_id": 20, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Convert input to numpy array if it's a list\n    if isinstance(x, list):\n        x = np.array(x)\n    \n    # Compute sigmoid\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    \n    # Compute gradient of sigmoid\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    \n    # Round results to 4 decimal places\n    sigmoid_x = np.round(sigmoid_x, 4)\n    gradient_x = np.round(gradient_x, 4)\n    \n    # Convert back to list if input was not a numpy array\n    if not isinstance(x, np.ndarray):\n        sigmoid_x = sigmoid_x.tolist()\n        gradient_x = gradient_x.tolist()\n    \n    # If input was scalar, return floats\n    if isinstance(x, (int, float)):\n        sigmoid_x = float(sigmoid_x)\n        gradient_x = float(gradient_x)\n    \n    return sigmoid_x, gradient_x\n\n# Example usage\nx = [-1, 0, 1]\nsigmoid_x, gradient_x = sigmoid_activation(x)\nprint(sigmoid_x, gradient_x)\n```\n\nThis code snippet defines a function `sigmoid_activation` that computes the sigmoid of the input `x` and its gradient, adhering to the specified requirements. It handles scalar, list, and NumPy array inputs, and ensures the output is rounded to 4 decimal places and formatted as requested."}
{"task_id": 21, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n_samples = len(x_train)\n    sample_weights = np.full(n_samples, 1 / n_samples)\n    stumps = []\n    alphas = []\n\n    # Sort the training data\n    sorted_indices = np.argsort(x_train)\n    x_train_sorted = np.array(x_train)[sorted_indices]\n    y_train_sorted = np.array(y_train)[sorted_indices]\n\n    while True:\n        min_error = float('inf')\n        best_stump = None\n        best_alpha = None\n\n        # Enumerate all possible stumps\n        for i in range(n_samples - 1):\n            threshold = (x_train_sorted[i] + x_train_sorted[i + 1]) / 2\n            for d in [0, 1]:\n                stump = (d, threshold)\n                error = 0\n                for j in range(n_samples):\n                    prediction = 1 if (d == 0 and x_train_sorted[j] <= threshold) or (d == 1 and x_train_sorted[j] > threshold) else -1\n                    if prediction != y_train_sorted[j]:\n                        error += sample_weights[j]\n                if error < min_error:\n                    min_error = error\n                    best_stump = stump\n                    best_alpha = 0.5 * math.log((1 - error) / error)\n\n        # Update the sample weights\n        for i in range(n_samples):\n            prediction = 1 if (best_stump[0] == 0 and x_train_sorted[i] <= best_stump[1]) or (best_stump[0] == 1 and x_train_sorted[i] > best_stump[1]) else -1\n            if prediction == y_train_sorted[i]:\n                sample_weights[i] *= math.exp(-best_alpha)\n            else:\n                sample_weights[i] *= math.exp(best_alpha)\n        sample_weights /= np.sum(sample_weights)\n\n        stumps.append(best_stump)\n        alphas.append(best_alpha)\n\n        # Check training error\n        predictions = np.zeros(n_samples)\n        for i in range(len(stumps)):\n            for j in range(n_samples):\n                prediction = 1 if (stumps[i][0] == 0 and x_train_sorted[j] <= stumps[i][1]) or (stumps[i][0] == 1 and x_train_sorted[j] > stumps[i][1]) else -1\n                predictions[j] += alphas[i] * prediction\n        training_error = np.mean(np.sign(predictions) != y_train_sorted)\n        if training_error <= epsilon:\n            break\n\n    # Make predictions on the test set\n    test_predictions = np.zeros(len(x_test))\n    for i in range(len(stumps)):\n        for j in range(len(x_test)):\n            prediction = 1 if (stumps[i][0] == 0 and x_test[j] <= stumps[i][1]) or (stumps[i][0] == 1 and x_test[j] > stumps[i][1]) else -1\n            test_predictions[j] += alphas[i] * prediction\n    return np.sign(test_predictions).astype(int).tolist()\n\n# Example usage\nx_train = [1, 2, 3, 4]\ny_train = [1, 1, -1, -1]\nx_test = [1.5, 3.5]\nepsilon = 0.0\nprint(adaboost_1d_predict(x_train, y_train, x_test, epsilon))\n```\n\nThis code implements the AdaBoost algorithm with one-dimensional decision stumps as described in the task. It sorts the training data, iteratively selects the best stump based on the minimum weighted error, updates the sample weights, and stops when the training error is less than or equal to the specified `epsilon`. The function then returns the predictions for the test set."}
{"task_id": 25, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    n, d = X_train.shape\n    m, _ = X_test.shape\n    predictions = []\n\n    for z in X_test:\n        g_z = 0\n        for i in range(n):\n            norm_squared = np.sum((X_train[i] - z) ** 2)\n            g_z += alpha[i] * y_train[i] * np.exp(-gamma * norm_squared)\n        g_z += b\n        predictions.append(1 if g_z > 0 else -1)\n\n    return predictions\n\n# Example usage\nX_train = np.array([[1, 2], [2, 3]])\ny_train = np.array([1, -1])\nalpha = np.array([0.6, 0.4])\nb = 0.1\ngamma = 0.5\nX_test = np.array([[1.5, 2.5]])\n\nprint(gaussian_svm_predict(X_train, y_train, alpha, b, gamma, X_test))\n```\n\nThis code defines a function `gaussian_svm_predict` that takes in the necessary parameters to predict the labels of test samples using a Gaussian-kernel SVM. The function iterates over each test sample, computes the decision function value for each, and appends the sign of this value to the predictions list. The final list of predictions is returned."}
{"task_id": 28, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    # Convert the list of lists to a numpy array\n    X_np = np.array(X)\n    m, n = X_np.shape\n    \n    # Check if k is within the valid range\n    if k < 1 or k > min(m, n):\n        return -1\n    \n    # Compute the truncated SVD\n    U, S, VT = np.linalg.svd(X_np, full_matrices=False)\n    # Keep only the first k singular values and vectors\n    U_k = U[:, :k]\n    S_k = np.diag(S[:k])\n    VT_k = VT[:k, :]\n    \n    # Reconstruct the matrix\n    X_hat_np = U_k @ S_k @ VT_k\n    # Compute the mean squared error\n    mse = np.mean((X_np - X_hat_np) ** 2)\n    \n    # Convert the reconstructed matrix back to a list of lists and round\n    X_hat = np.round(X_hat_np, 4).tolist()\n    mse = round(mse, 4)\n    \n    return (X_hat, mse)\n\n# Example usage\nX = [[3, 1], [1, 3]]\nk = 1\nprint(linear_autoencoder(X, k))\n```\n\nThis script defines the `linear_autoencoder` function as specified in the task, which computes the rank-\\(k\\) reconstruction of a given matrix \\(X\\) using truncated SVD and returns the reconstructed matrix and the mean squared error. The example usage at the end demonstrates how to call the function with a sample input."}
{"task_id": 29, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                           y_train: list[float] | np.ndarray,\n                           x_query: float,\n                           epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    # Sort the training samples by the single feature x\n    sorted_indices = np.argsort(x_train)\n    x_train = x_train[sorted_indices]\n    y_train = y_train[sorted_indices]\n\n    # Initialize residuals and prediction\n    residuals = y_train.copy()\n    prediction = 0.0\n\n    # Determine all possible split points\n    split_points = (x_train[:-1] + x_train[1:]) / 2\n\n    while True:\n        best_rss = np.inf\n        best_stump = None\n\n        for s in split_points:\n            left_indices = x_train <= s\n            right_indices = x_train > s\n\n            c1 = np.mean(residuals[left_indices])\n            c2 = np.mean(residuals[right_indices])\n\n            rss = np.sum((residuals[left_indices] - c1) ** 2) + np.sum((residuals[right_indices] - c2) ** 2)\n\n            if rss < best_rss:\n                best_rss = rss\n                best_stump = (s, c1, c2)\n\n        if best_rss < epsilon:\n            break\n\n        # Add the best stump to the ensemble\n        s, c1, c2 = best_stump\n        prediction += c1 if x_query <= s else c2\n\n        # Update residuals\n        residuals = residuals - (c1 if x_train <= s else c2)\n\n    return round(prediction, 4)\n\n# Example usage\nx_train = np.array([1, 2, 3, 4])\ny_train = np.array([1.5, 1.5, 3.5, 3.5])\nx_query = 3\nprint(predict_boosting_tree(x_train, y_train, x_query))  # Output: 3.5\n```\n\nThis script defines the `predict_boosting_tree` function that implements a simple 1-D gradient boosting regressor using decision stumps as weak learners. The function sorts the training data, iteratively adds the best stump to the ensemble, and updates the residuals until the residual sum of squares is below a specified tolerance. The prediction for a query point is then returned, rounded to four decimal places."}
{"task_id": 34, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None) -> np.ndarray | int:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s based on the specified shape and sparsity.\n    \n    :param shape: A tuple specifying the shape of the tensor.\n    :param sparsity: A float in the range [0, 1] indicating the probability of generating a 1.0.\n    :param seed: An optional integer seed for reproducibility.\n    :return: A numpy.ndarray of floats with values 0.0 and 1.0, or -1 if sparsity is out of range.\n    \"\"\"\n    if not (0 <= sparsity <= 1):\n        return -1\n    \n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Generate a tensor of random floats in [0, 1)\n    random_tensor = np.random.rand(*shape)\n    \n    # Convert to binary tensor based on sparsity\n    binary_tensor = (random_tensor < sparsity).astype(float)\n    \n    return binary_tensor\n\n# Example usage\nshape = (2, 3)\nsparsity = 0.3\nseed = 42\nresult = random_binary_tensor(shape, sparsity, seed)\nprint(result)\n```\n\nThis script defines the `random_binary_tensor` function that generates a binary tensor according to the specified rules and examples. It includes a check for the sparsity value, optional seeding for reproducibility, and the conversion of a random float tensor into a binary tensor based on the sparsity threshold."}
{"task_id": 39, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    # Use numpy.argpartition to find the median index in O(n) time\n    median_idx = np.argpartition(data[:, d], len(data) // 2)[len(data) // 2]\n    pivot = median_idx\n    \n    # Get the median value\n    median_value = data[median_idx, d]\n    \n    # Find the indices of the left and right partitions\n    left = np.where(data[:, d] < median_value)[0].tolist()\n    right = np.where(data[:, d] > median_value)[0].tolist()\n    \n    # Sort the left and right lists\n    left.sort()\n    right.sort()\n    \n    return (pivot, left, right)\n\n# Example usage\ndata = np.array([[2, 3],\n                 [1, 5],\n                 [4, 1],\n                 [0, 2],\n                 [3, 4]])\nd = 0\nprint(get_split(data, d))\n```\n\nThis script defines the `get_split` function that performs a median split on a two-dimensional NumPy array `data` along a specified column `d`. The function uses `numpy.argpartition` to find the median index in linear time, ensuring the operation is efficient. The function then returns the row index of the median value and the sorted lists of row indices for the left and right partitions."}
{"task_id": 40, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, \"Input signal must be one-dimensional.\"\n    assert stride >= 1, \"Stride must be a positive integer.\"\n    assert len(x) >= frame_width, \"Input signal must be longer than frame width.\"\n\n    n_frames = (len(x) - frame_width) // stride + 1\n    if n_frames <= 0:\n        return np.array([])\n\n    # Calculate the strides for the new view\n    x_strides = x.strides[0]\n    new_strides = (x_strides * stride, x_strides)\n\n    # Create the new view\n    framed_signal = as_strided(x, shape=(n_frames, frame_width), strides=new_strides)\n\n    # Set writeable flag\n    framed_signal.flags.writeable = writeable\n\n    return framed_signal\n\n# Example usage\nx = np.arange(6)\nframe_width = 5\nstride = 1\nresult = to_frames(x, frame_width, stride)\nprint(result)\n```\n\nThis code snippet defines the `to_frames` function that takes a one-dimensional NumPy array `x`, a frame width, a stride, and a writeable flag, and returns a view on `x` with overlapping frames as specified. The function uses `numpy.lib.stride_tricks.as_strided` to create the view without copying the data, and it ensures that the returned array has the correct shape and writeability. The example usage demonstrates how to call the function and print the resulting framed signal."}
{"task_id": 48, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Convert input to numpy array if it's not already one\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    \n    # Check if the matrix is two-dimensional\n    if X.ndim != 2:\n        return False\n    \n    # Check if all elements are between 0 and 1 inclusive\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    \n    # Check if all rows sum to 1 within a tolerance\n    row_sums = X.sum(axis=1)\n    if not np.allclose(row_sums, 1, atol=1e-8):\n        return False\n    \n    return True\n\n# Example usage\nX = [[0.2, 0.8], [0.5, 0.5]]\nprint(is_stochastic(X))  # Expected output: True\n```"}
{"task_id": 55, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n, d = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    for _ in range(max_iter):\n        for i in range(0, n, batch_size):\n            end = min(i + batch_size, n)\n            X_batch = X[i:end]\n            y_batch = y[i:end]\n            g = (1 / n) * X_batch.T @ (X_batch @ w - y_batch)\n            s = rho * s + (1 - rho) * g ** 2\n            w -= eta * g / (np.sqrt(s) + eps_station)\n        if np.linalg.norm(g) < epsilon:\n            break\n    return [round(x, 4) for x in w.tolist()]\n\n# Example usage\nX = np.array([[1, 0], [1, 1], [1, 2], [1, 3]], dtype=float)\ny = np.array([1, 3, 5, 7], dtype=float)\nprint(rms_prop(X, y))\n```\n\nThis script defines the `rms_prop` function that implements the RMSprop optimization algorithm for linear regression. The function takes a feature matrix `X` and a target vector `y`, and returns the learned weight vector after training. The example usage demonstrates how to call the function with a simple dataset."}
{"task_id": 56, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n    \"\"\"\n    Compute the SoftPlus activation function or its derivative (sigmoid) for a given input.\n    \n    Parameters:\n    x (scalar, list, or np.ndarray): The input to the SoftPlus function.\n    deriv (bool): If True, compute the derivative (sigmoid) instead of the SoftPlus function.\n    \n    Returns:\n    list or float: The result of applying the SoftPlus function or its derivative to x, rounded to 4 decimal places.\n    \"\"\"\n    # Convert input to NumPy array if it's a list\n    if isinstance(x, list):\n        x = np.array(x)\n    # Ensure x is a NumPy array\n    x = np.array(x)\n    \n    if deriv:\n        # Compute the derivative (sigmoid)\n        result = 1 / (1 + np.exp(-x))\n    else:\n        # Compute the SoftPlus function\n        result = np.log1p(np.exp(x))\n    \n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n    \n    # Convert back to list if input was a list or scalar\n    if isinstance(x, np.ndarray) and x.size == 1:\n        return float(result)\n    else:\n        return result.tolist()\n\n# Example usage\nprint(softplus(np.array([-1, 0, 1]), deriv=False))  # Output: [0.3133, 0.6931, 1.3133]\nprint(softplus(np.array([-1, 0, 1]), deriv=True))   # Output: [0.2689, 0.5, 0.7311]\nprint(softplus(0, deriv=False))                     # Output: 0.6931\n```"}
{"task_id": 58, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    # Function to create n-grams from a list of tokens\n    def create_ngrams(tokens, n):\n        return [' '.join(tokens[i:i+n]) for i in range(len(tokens)-n+1)]\n    \n    # Create N-grams and (N-1)-grams from the corpus\n    ngrams = create_ngrams(corpus, N)\n    n_minus_1_grams = create_ngrams(corpus, N-1) if N > 1 else corpus\n    \n    # Count the occurrences of each N-gram and (N-1)-gram\n    ngram_counts = Counter(ngrams)\n    n_minus_1_gram_counts = Counter(n_minus_1_grams)\n    \n    # Calculate the log-probability of the sequence\n    log_prob = 0.0\n    for i in range(len(sequence)-N+1):\n        ngram = ' '.join(sequence[i:i+N])\n        n_minus_1_gram = ' '.join(sequence[i:i+N-1]) if N > 1 else sequence[i]\n        \n        if ngram_counts[ngram] == 0 or (N > 1 and n_minus_1_gram_counts[n_minus_1_gram] == 0):\n            return float('-inf')\n        \n        if N == 1:\n            log_prob += np.log(ngram_counts[ngram] / len(corpus))\n        else:\n            log_prob += np.log(ngram_counts[ngram] / n_minus_1_gram_counts[n_minus_1_gram])\n    \n    return round(log_prob, 4)\n\n# Example usage\ncorpus = [\"the\",\"quick\",\"brown\",\"fox\",\"jumps\",\"over\",\"the\",\"lazy\",\"dog\"]\nsequence = [\"the\",\"lazy\",\"dog\"]\nN = 2\nprint(unsmoothed_ngram_log_prob(corpus, sequence, N))\n```\n\nThis code defines the function `unsmoothed_ngram_log_prob` which calculates the unsmoothed MLE N-gram log-probability of a given sequence based on a provided corpus. It uses the `Counter` class from the `collections` module to count occurrences of N-grams and (N-1)-grams, and then computes the log-probability of the sequence. If any required count is zero, it returns `float('-inf')`. The result is rounded to 4 decimal places as required."}
{"task_id": 62, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef lasso_regression(X: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\", degree: int, reg_factor: float, n_iterations: int = 1000, tol: float = 1e-6) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X).reshape(-1, 1)\n    y = np.array(y).reshape(-1, 1)\n    m = len(X)\n    X_poly = np.hstack([X**i for i in range(degree + 1)])\n    w = np.zeros((degree + 1, 1))\n    \n    for _ in range(n_iterations):\n        w_prev = w.copy()\n        for j in range(degree + 1):\n            if j == 0:\n                w[j] = np.mean(y - X_poly[:, 1:] @ w[1:])\n            else:\n                rho = X_poly[:, j].T @ (y - X_poly @ w + w[j] * X_poly[:, j])\n                w[j] = np.sign(rho) * max(abs(rho) - reg_factor, 0) / (X_poly[:, j].T @ X_poly[:, j])\n        if np.max(np.abs(w - w_prev)) < tol:\n            break\n    \n    return [round(float(wi), 4) for wi in w]\n\n# Example usage\nX = [0, 1, 2, 3]\ny = [1, 3, 5, 7]\ndegree = 1\nreg_factor = 0.0\nprint(lasso_regression(X, y, degree, reg_factor))\n```\n\nThis script defines the `lasso_regression` function that implements the univariate Lasso regression with polynomial features using coordinate descent. The function takes the input `X`, target values `y`, polynomial degree `degree`, regularisation strength `reg_factor`, and optional parameters for the maximum number of iterations and tolerance for early stopping. The function returns the learned coefficients rounded to four decimal places."}
{"task_id": 63, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector for a given time index in a Hidden Markov Model.\n    \n    Parameters:\n    A (list of list of float): Transition probability matrix of shape (N, N).\n    B (list of list of float): Emission probability matrix of shape (N, M).\n    obs (list of int): List of observation indices.\n    t (int): Integer time index.\n    \n    Returns:\n    list of float: Backward probability vector rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    obs = np.array(obs)\n    T = len(obs)\n    N = A.shape[0]\n    \n    beta = np.zeros((T, N))\n    \n    # Initialize the last time step\n    beta[T-1, :] = 1\n    \n    # Calculate backward probabilities\n    for i in range(T-2, t-1, -1):\n        for j in range(N):\n            beta[i, j] = np.sum(A[j, :] * B[:, obs[i+1]] * beta[i+1, :])\n    \n    # Return the backward probability vector at time t, rounded to 4 decimal places\n    return [round(x, 4) for x in beta[t, :]]\n\n# Example usage\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.5, 0.5], [0.1, 0.9]]\nobs = [0, 1, 0]\nt = 0\nprint(backward_beta(A, B, obs, t))\n```\n\nThis code snippet defines a function `backward_beta` that calculates the backward probability vector for a given time index in a Hidden Markov Model, following the provided task description and examples."}
{"task_id": 65, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or not pi or not obs:\n        return 0.0\n\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    obs = np.array(obs)\n\n    N = A.shape[0]\n    T = len(obs)\n\n    beta = np.zeros((T, N))\n\n    # Initialize the backward variables\n    beta[T-1, :] = 1\n\n    # Compute the backward variables\n    for t in range(T-2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t+1]] * beta[t+1, :])\n\n    # Compute the sequence probability\n    prob = np.sum(pi * B[:, obs[0]] * beta[0, :])\n\n    return round(prob, 6)\n\n# Example usage\nA = [[0.7, 0.3],\n     [0.4, 0.6]]\n\nB = [[0.1, 0.4, 0.5],\n     [0.6, 0.3, 0.1]]\n\npi = [0.6, 0.4]\n\nobs = [0, 1, 2]\n\nprint(backward_prob(A, B, pi, obs))  # Output: 0.033612\n```"}
{"task_id": 69, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    observations = np.array(observations)\n    \n    # Validate input dimensions\n    n = len(S)\n    if A.shape != (n, n) or B.shape[0] != n:\n        return -1\n    \n    m = B.shape[1]\n    if not all(0 <= obs < m for obs in observations):\n        return -1\n    \n    if len(observations) == 0:\n        return -1\n    \n    # Initialize the forward variables\n    T = len(observations)\n    alpha = np.zeros((T, n))\n    \n    # Initialization step\n    alpha[0, :] = S * B[:, observations[0]]\n    \n    # Recursion step\n    for t in range(1, T):\n        for j in range(n):\n            alpha[t, j] = np.sum(alpha[t-1] * A[:, j]) * B[j, observations[t]]\n    \n    # Termination step\n    likelihood = np.sum(alpha[T-1])\n    \n    return round(likelihood, 4)\n\n# Example usage\nS = [0.6, 0.4]\nA = [[0.7, 0.3],\n     [0.4, 0.6]]\nB = [[0.5, 0.4, 0.1],\n     [0.1, 0.3, 0.6]]\nobservations = [0, 1, 2]\n\nprint(forward_algorithm(S, A, B, observations))  # Expected output: 0.0363\n```\n\nThis script defines the `forward_algorithm` function that implements the forward algorithm for Hidden Markov Models. It validates the input dimensions and checks the validity of the observation indices. If the input is valid, it proceeds to compute the likelihood of the observation sequence using the forward algorithm and returns the result rounded to 4 decimal places."}
{"task_id": 70, "completion_id": 0, "completion": "```python\nfrom collections import Counter, defaultdict\nfrom typing import List\n\ndef fp_growth(transactions: List[List[str]], min_support: int) -> List[List[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    def build_tree(transactions, headers):\n        root = FPNode(None, None)\n        for transaction in transactions:\n            sorted_items = sorted(transaction, key=lambda x: headers[x], reverse=True)\n            current = root\n            for item in sorted_items:\n                if item in current.children:\n                    current.children[item].increment()\n                else:\n                    current.children[item] = FPNode(item, current)\n                    if item in headers:\n                        headers[item].append(current.children[item])\n                    else:\n                        headers[item] = [current.children[item]]\n                current = current.children[item]\n        return root\n\n    def mine_tree(node, prefix, frequent_itemsets):\n        for item, nodes in node.items.items():\n            new_prefix = prefix.copy()\n            new_prefix.add(item)\n            frequent_itemsets.append(list(new_prefix))\n            conditional_patterns = []\n            for node in nodes:\n                path = []\n                current = node\n                while current.parent and current.parent.item is not None:\n                    path.append(current.parent.item)\n                    current = current.parent\n                if path:\n                    path_count = node.count\n                    conditional_patterns.append((path, path_count))\n            if conditional_patterns:\n                conditional_tree, conditional_headers = build_tree(conditional_patterns, defaultdict(list))\n                mine_tree(conditional_tree, new_prefix, frequent_itemsets)\n\n    # Count item frequencies and filter by min_support\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_support}\n\n    # Sort items by frequency\n    sorted_items = sorted(frequent_items.items(), key=lambda x: x[1], reverse=True)\n    headers = {item: [] for item, _ in sorted_items}\n\n    # Build the FP-tree\n    root = build_tree(transactions, headers)\n\n    # Mine the tree\n    frequent_itemsets = []\n    mine_tree(root, set(), frequent_itemsets)\n\n    # Sort the itemsets\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\n\nclass FPNode:\n    def __init__(self, item, parent):\n        self.item = item\n        self.parent = parent\n        self.children = {}\n        self.count = 0\n        self.link = None\n\n    def increment(self):\n        self.count += 1\n\n# Example usage\ntransactions = [\n    [\"bread\", \"milk\"],\n    [\"bread\", \"diaper\", \"beer\", \"egg\"],\n    [\"milk\", \"diaper\", \"beer\", \"coke\"],\n    [\"bread\", \"milk\", \"diaper\", \"beer\"],\n    [\"bread\", \"milk\", \"diaper\", \"coke\"]\n]\nmin_support = 3\nprint(fp_growth(transactions, min_support))\n```\n\nThis code defines the `fp_growth` function which implements the FP-Growth algorithm to find frequent item-sets in a given list of transactions. The function first counts the frequency of each item and filters out those that do not meet the minimum support threshold. It then builds an FP-tree and recursively mines the tree to find all frequent item-sets. The results are sorted as required by the task description."}
{"task_id": 75, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if not (1 <= k <= len(X_train)):\n        return [-1]\n    \n    predictions = []\n    for test_sample in X_test:\n        # Compute squared Euclidean distances from the test sample to all training samples\n        distances = [np.sum((np.array(train_sample) - np.array(test_sample))**2) for train_sample in X_train]\n        \n        # Get the indices of the k nearest training samples\n        k_nearest_indices = np.argsort(distances)[:k]\n        \n        # Get the labels of the k nearest training samples\n        k_nearest_labels = [y_train[i] for i in k_nearest_indices]\n        \n        # Find the most common label among the k nearest labels\n        # If there is a tie, the smallest label is chosen\n        label_counts = np.bincount(k_nearest_labels)\n        prediction = np.argmin(-label_counts)\n        predictions.append(prediction)\n    \n    return predictions\n\n# Example usage\nX_train = [[1, 2], [2, 3], [3, 4]]\ny_train = [0, 1, 1]\nX_test = [[2, 2]]\nk = 2\nprint(knn_predict(X_train, y_train, X_test, k))  # Output: [0]\n```"}
{"task_id": 76, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = np.finfo(float).eps  # Machine epsilon for numerical stability\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    return round(loss, 4)\n\n# Example usage\ny = [[1, 0, 0], [0, 1, 0]]\ny_pred = [[0.8, 0.1, 0.1], [0.2, 0.5, 0.3]]\nprint(cross_entropy_loss(y, y_pred))  # Output: 0.9163\n```\n\nThis code snippet defines a function `cross_entropy_loss` that calculates the unnormalised categorical cross-entropy loss for a batch of one-hot encoded targets and their predicted probabilities. The function takes two parameters, `y` and `y_pred`, which are the true labels and the predicted probabilities, respectively. It returns the total cross-entropy loss for the batch, rounded to four decimal places."}
{"task_id": 77, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef relu(Z):\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(0, Z)\n\ndef sigmoid(Z):\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\n\ndef linear_forward(A, W, b):\n    \"\"\"Linear forward step.\"\"\"\n    Z = np.dot(W, A) + b\n    cache = (A, W, b)\n    return Z, cache\n\ndef linear_activation_forward(A_prev, W, b, activation):\n    \"\"\"Linear followed by activation forward step.\"\"\"\n    Z, linear_cache = linear_forward(A_prev, W, b)\n    if activation == \"relu\":\n        A, activation_cache = relu(Z), Z\n    elif activation == \"sigmoid\":\n        A, activation_cache = sigmoid(Z), Z\n    cache = (linear_cache, activation_cache)\n    return A, cache\n\ndef L_model_forward(X, parameters):\n    \"\"\"Forward propagation for an L-layer neural network.\"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2  # number of layers in the neural network\n    \n    # Implement [LINEAR -> RELU]*(L-1). Add \"cache\" to the \"caches\" list.\n    for l in range(1, L):\n        A_prev = A\n        A, cache = linear_activation_forward(A_prev, parameters['W' + str(l)], parameters['b' + str(l)], activation=\"relu\")\n        caches.append(cache)\n    \n    # Implement LINEAR -> SIGMOID. Add \"cache\" to the \"caches\" list.\n    AL, cache = linear_activation_forward(A, parameters['W' + str(L)], parameters['b' + str(L)], activation=\"sigmoid\")\n    caches.append(cache)\n    \n    # Round the final activation matrix AL to 4 decimal places and convert it to a regular Python list\n    AL_rounded = np.round(AL, 4).tolist()\n    \n    return AL_rounded, caches\n\n# Example usage\nX = np.array([[ 1, -1],\n              [ 2,  0],\n              [ 0,  1],\n              [-1, -3]])\nparameters = {\n  'W1': np.array([[ 0.2, -0.4,  0.1,  0.5],\n                  [-0.3,  0.2, -0.2,  0.3],\n                  [ 0.4, -0.1,  0.2, -0.5]]),\n  'b1': np.array([[ 0.10],[-0.20],[ 0.05]]),\n  'W2': np.array([[ 0.3, -0.7, 0.2]]),\n  'b2': np.array([[0.]])\n}\n\nAL, caches = L_model_forward(X, parameters)\nprint(AL)\n```\n\nThis script defines the necessary functions to perform forward propagation in an L-layer neural network with ReLU activations in the hidden layers and a sigmoid activation in the output layer. The `L_model_forward` function takes an input matrix `X` and a dictionary of parameters, and returns the final activation `AL` rounded to 4 decimal places and converted to a regular Python list, along with the caches for each layer."}
{"task_id": 81, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    # Ensure A2 is within [\u03b5, 1-\u03b5]\n    epsilon = 1e-15\n    A2 = np.clip(A2, epsilon, 1 - epsilon)\n    \n    # Number of samples\n    m = Y.shape[1] if Y.ndim == 2 else Y.size\n    \n    # Compute the cost\n    cost = -1/m * np.sum(Y * np.log(A2) + (1 - Y) * np.log(1 - A2))\n    \n    # Return the cost rounded to 6 decimal places\n    return round(cost, 6)\n\n# Example usage\nA2 = np.array([[0.8, 0.9, 0.4, 0.2]])\nY  = np.array([[1,   1,   0,   0]])\nprint(compute_cost(A2, Y))  # Expected output: 0.265618\n```\n\nThis code snippet defines the `compute_cost` function that calculates the binary cross-entropy cost given the predicted probabilities `A2` and the ground-truth labels `Y`. It includes clipping the predicted probabilities to avoid taking the logarithm of zero or one, which would result in undefined values. The cost is then computed and returned rounded to six decimal places."}
{"task_id": 82, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | np.ndarray, epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    n = len(Q)\n    greedy_index = np.argmax(Q)  # Finds the index of the first maximum Q-value\n    base_prob = epsilon / n\n    greedy_prob = 1 - epsilon + base_prob\n    \n    probabilities = [base_prob] * n\n    probabilities[greedy_index] = greedy_prob\n    \n    # Rounding to 4 decimal places\n    probabilities = [round(p, 4) for p in probabilities]\n    \n    # Ensuring the sum of probabilities is 1 within numerical tolerance\n    if abs(sum(probabilities) - 1) > 1e-12:\n        probabilities[greedy_index] += 1 - sum(probabilities)\n    \n    return probabilities\n\n# Example usage\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1\nprint(epsilon_soft(Q, epsilon))\n```\n\nThis code snippet defines the `epsilon_soft` function that calculates the \u03b5-soft probabilities for a given set of Q-values and an exploration parameter \u03b5. The function ensures that the probabilities sum to 1 within a numerical tolerance and rounds the probabilities to 4 decimal places."}
{"task_id": 86, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nfrom typing import List, Union\n\ndef aggregate_random_forest_votes(predictions: List[List[Union[int, float, str]]]) -> List[Union[int, float, str]]:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    # Transpose the predictions list to group predictions by sample\n    transposed_predictions = list(zip(*predictions))\n    \n    # Aggregate predictions for each sample\n    aggregated_predictions = []\n    for sample_predictions in transposed_predictions:\n        # Count the occurrences of each prediction\n        prediction_counts = Counter(sample_predictions)\n        # Find the prediction with the highest count. In case of a tie, the smallest label is chosen automatically\n        most_common_prediction = prediction_counts.most_common(1)[0][0]\n        aggregated_predictions.append(most_common_prediction)\n    \n    return aggregated_predictions\n\n# Example usage\npredictions = [[1, 0, 1, 1],\n               [0, 0, 1, 1],\n               [1, 1, 1, 0]]\nprint(aggregate_random_forest_votes(predictions))\n# Output: [1, 0, 1, 1]\n```\n\nThis Python script defines a function `aggregate_random_forest_votes` that takes a two-dimensional list of predictions from a Random Forest classifier and returns a list of aggregated predictions using majority voting. The function handles ties by selecting the smallest label. The example usage demonstrates how to call the function with a sample input."}
{"task_id": 88, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already one\n    z = np.array(z) if not isinstance(z, np.ndarray) else z\n    # Compute the softplus values using the numerically stable identity\n    result = np.logaddexp(0.0, z)\n    # Round the result to 4 decimal places\n    result_rounded = np.round(result, 4)\n    # Convert back to a Python list if the input was not a scalar\n    if z.shape == ():\n        return float(result_rounded)\n    else:\n        return result_rounded.tolist()\n\n# Example usage\nz = np.array([-1000, 0, 3])\nprint(softplus(z))\n```\n\nThis code snippet defines a function `softplus` that computes the softplus activation function in a numerically stable way, using `numpy.logaddexp` to avoid overflow and underflow issues. The function accepts a scalar, Python list, or NumPy `ndarray` as input and returns the softplus values rounded to 4 decimal places, ensuring that the output format matches the input format (i.e., scalar input results in a scalar output, and list or array input results in a list output)."}
{"task_id": 90, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mse(bandit: dict, policy: dict) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : dict\n        Dictionary that stores the true expected payout of each arm\n        under the key ``arm_evs``.\n    policy : dict\n        Dictionary that stores the policy's current estimate of each\n        arm's expectation under the key ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Check if policy has any estimates\n    if not hasattr(policy, 'ev_estimates') or not policy['ev_estimates']:\n        return np.nan\n    \n    # Extract true expected values and policy estimates\n    true_evs = bandit['arm_evs']\n    estimates = policy['ev_estimates']\n    \n    # Sort estimates by arm index\n    sorted_estimates = [estimates[i] for i in sorted(estimates)]\n    \n    # Calculate squared errors\n    squared_errors = [(true - est) ** 2 for true, est in zip(true_evs, sorted_estimates)]\n    \n    # Compute mean squared error\n    mse_value = np.mean(squared_errors)\n    \n    # Return rounded MSE\n    return round(mse_value, 4)\n\n# Example usage\nbandit = {\"arm_evs\": [0.5, 0.2, 0.9]}\npolicy = {\"ev_estimates\": {0: 0.4, 1: 0.25, 2: 0.8}}\nprint(mse(bandit, policy))  # Output: 0.0075\n```"}
{"task_id": 96, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # Tokenize the corpus and the sequence\n    corpus_tokens = [sentence.split() for sentence in corpus]\n    sequence_tokens = sequence.split()\n    \n    # Create vocabulary and add <UNK> token\n    vocab = set()\n    for sentence in corpus_tokens:\n        vocab.update(sentence)\n    vocab.add(\"<UNK>\")\n    vocab_size = len(vocab)\n    \n    # Build n-gram frequency tables\n    ngram_counts = defaultdict(Counter)\n    for sentence in corpus_tokens:\n        for i in range(len(sentence) - N + 1):\n            ngram = tuple(sentence[i:i+N])\n            ngram_counts[N-1][ngram] += 1\n    \n    # Handle unseen words in the sequence\n    for i in range(len(sequence_tokens)):\n        if sequence_tokens[i] not in vocab:\n            sequence_tokens[i] = \"<UNK>\"\n    \n    # Calculate the log-probability of the sequence\n    log_prob = 0.0\n    for i in range(len(sequence_tokens) - N + 1):\n        ngram = tuple(sequence_tokens[i:i+N])\n        context = ngram[:-1]\n        word = ngram[-1]\n        context_count = sum(ngram_counts[N-2][context + (w,)] for w in vocab)\n        ngram_count = ngram_counts[N-1][ngram]\n        smoothed_prob = (ngram_count + K) / (context_count + K * vocab_size)\n        log_prob += math.log(smoothed_prob)\n    \n    return round(log_prob, 4)\n\n# Example usage\ncorpus = [\"the cat sat on the mat\", \"the dog sat on the log\"]\nsequence = \"the cat sat on the log\"\nN = 2\nK = 1.0\nprint(additive_ngram_log_prob(corpus, sequence, N, K))  # Output: -6.9930\n```\n\nThis Python script implements the additive-smoothed N-gram log-probability function as described in the task. It handles the creation of n-gram frequency tables, the inclusion of an `<UNK>` token for unseen words, and the calculation of the log-probability of the target sentence using additive smoothing."}
{"task_id": 108, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    N, M = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    \n    for _ in range(max_iter):\n        # Update W\n        for n in range(N):\n            W[n, :] = np.linalg.solve(np.dot(H, H.T) + alpha * np.eye(K), np.dot(X[n, :], H.T))\n        \n        # Update H\n        for m in range(M):\n            H[:, m] = np.linalg.solve(np.dot(W.T, W) + alpha * np.eye(K), np.dot(W.T, X[:, m]))\n        \n        # Compute the regularised loss\n        loss = np.linalg.norm(X - np.dot(W, H))**2 + alpha * (np.linalg.norm(W)**2 + np.linalg.norm(H)**2)\n        \n        if loss < tol:\n            break\n    \n    X_hat = np.dot(W, H)\n    return X_hat.round(4).tolist()\n\n# Example usage\nX = np.array([[1., 2.], [3., 4.]])\nK = 2\nalpha = 0.0\nmax_iter = 1000\ntol = 1e-6\nprint(als_factorization(X, K, alpha, max_iter, tol))\n```\n\nThis script defines the `als_factorization` function that implements the regularized Alternating Least Squares algorithm to factorize a given matrix `X` into two low-rank matrices `W` and `H`. The function iteratively updates `W` and `H` while monitoring the regularized loss. If the loss drops below a specified tolerance (`tol`) or the maximum number of iterations (`max_iter`) is reached, the algorithm stops and returns the reconstructed matrix `X_hat` rounded to four decimal places and converted to a Python list of lists."}
{"task_id": 109, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n\n    m, n = X.shape\n    centroids = [X[random.randint(0, m-1)].tolist()]\n\n    for _ in range(1, K):\n        dists = np.array([min([np.linalg.norm(x-c)**2 for c in centroids]) for x in X])\n        probs = dists / dists.sum()\n        cumprobs = probs.cumsum()\n        r = random.random()\n        for j, p in enumerate(cumprobs):\n            if r < p:\n                i = j\n                break\n        centroids.append(X[i].tolist())\n\n    old_centroids = None\n    for _ in range(max_iter):\n        clusters = [[] for _ in range(K)]\n        for x in X:\n            dists = [np.linalg.norm(x - c) for c in centroids]\n            cluster_idx = np.argmin(dists)\n            clusters[cluster_idx].append(x)\n\n        new_centroids = []\n        for i, cluster in enumerate(clusters):\n            if cluster:  # Only update if the cluster is not empty\n                new_centroids.append(np.mean(cluster, axis=0).tolist())\n            else:\n                new_centroids.append(centroids[i])\n\n        if np.array_equal(new_centroids, centroids):\n            break\n        else:\n            centroids = new_centroids\n\n    centroids = [list(map(lambda x: round(x, 4), c)) for c in centroids]\n    centroids.sort()\n    return centroids\n\n# Example usage\nX = np.array([[1, 2], [1, 4], [1, 0], [10, 2], [10, 4], [10, 0]])\nK = 2\nrandom_state = 42\nprint(kmeans(X, K, random_state=random_state))\n```\n\nThis script implements the K-Means clustering algorithm with K-Means++ initialization as described in the task. The function `kmeans` takes a two-dimensional NumPy array `X`, an integer `K` for the number of clusters, an optional `max_iter` for the maximum number of iterations, and an optional `random_state` for reproducibility. The function returns the final centroids rounded to four decimal places and sorted by their first coordinate."}
{"task_id": 111, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes a string into a fixed-length list of integer token ids.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text]\n    if len(encoded) < time_steps:\n        encoded += [0] * (time_steps - len(encoded))\n    else:\n        encoded = encoded[:time_steps]\n    return encoded\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Decodes a list of integer ids back into a string, ignoring padding tokens.\"\"\"\n    return ''.join(inverse_vocab.get(idx, '') for idx in indices if idx != 0)\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes text, predicts with model, and decodes the prediction.\"\"\"\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded_text = np.array([encoded_text])  # batch size 1\n    prediction = model.predict(encoded_text)\n    predicted_ids = np.argmax(prediction, axis=-1)[0]  # argmax over the last axis\n    decoded_text = int_to_string(predicted_ids, inv_output_vocabulary)\n    return decoded_text\n\n# Example usage:\n# Assuming `identity_model` is a model that returns the input as prediction\n# and `input_vocabulary` and `inv_output_vocabulary` are defined as in the example.\n# model = identity_model\n# input_vocabulary = {'a':1, ..., ' ':27}\n# inv_output_vocabulary = {1:'a', ..., 27:' '}\n# text = \"hello\"\n# print(run_example(model, input_vocabulary, inv_output_vocabulary, text))\n```\n\nThis script provides the implementation for the three functions as described in the task. The `string_to_int` function encodes the input string into a fixed-length list of integer token ids, the `int_to_string` function decodes a list of integer ids back into a string, and the `run_example` function ties everything together by encoding the input, predicting with the model, and decoding the output."}
{"task_id": 113, "completion_id": 0, "completion": "```python\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str], optional\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES  # Assume EXAMPLES is a global constant\n\n    predictions = []\n    for example in examples:\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_string = ''.join(output_chars)\n        print(f\"input:  {example}\")\n        print(f\"output: {predicted_string}\")\n        predictions.append(predicted_string)\n    return predictions\n\n# Example usage\nEXAMPLES = [\"hello\", \"world\"]\nmodel = lambda s: s[::-1]\ninput_vocabulary = None\ninv_output_vocabulary = None\n\n# Call the function and print the result\nprint(run_examples(model, input_vocabulary, inv_output_vocabulary))\n```\n\nThis script defines the `run_examples` function as specified in the task. It assumes the existence of a global constant `EXAMPLES` and a helper function `run_example` that is not implemented in this snippet but is expected to be available in the runtime environment. The function processes each example, prints the input and output, and collects the outputs in a list to return."}
{"task_id": 115, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    m = X.shape[0]  # Number of samples\n    z = X @ w  # Linear combination of features and weights\n    p = 1 / (1 + np.exp(-z))  # Predicted probabilities\n\n    # Avoid numerical issues by replacing 0 and 1 with small constants\n    p = np.clip(p, 1e-20, 1 - 1e-20)\n\n    # Compute the binary cross-entropy loss\n    loss = -1/m * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    loss = round(loss, 4)\n\n    # Compute the gradient of the loss with respect to the weights\n    gradient = 1/m * X.T @ (p - y)\n    gradient = np.round(gradient, 4).tolist()\n\n    return loss, gradient\n\n# Example usage\nX = np.array([[0,0], [0,1], [1,0], [1,1]])\ny = np.array([0, 0, 0, 1])\nw = np.array([[0.5], [0.5]])\nprint(logistic_loss_and_gradient(X, y, w))\n```\n\nThis code snippet defines the `logistic_loss_and_gradient` function that computes the binary cross-entropy loss and its gradient for logistic regression, as per the task description. It includes the necessary imports, the function definition, and an example usage that matches the provided example."}
{"task_id": 118, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    n_clf = max(1, n_clf)  # Ensure at least one classifier is built\n\n    # Initialize weights\n    weights = np.full(n_samples, 1 / n_samples)\n\n    # Initialize classifiers and their weights\n    classifiers = []\n    classifier_weights = []\n\n    for _ in range(n_clf):\n        # Find the best stump\n        best_stump = None\n        best_error = float('inf')\n        best_prediction = None\n\n        for feature in range(n_features):\n            for threshold in np.unique(X_train[:, feature]):\n                # Predict using the current stump\n                prediction = np.where(X_train[:, feature] > threshold, 1, -1)\n                error = np.sum(weights * (prediction != y_train))\n\n                # Update if this stump is better\n                if error < best_error:\n                    best_error = error\n                    best_stump = (feature, threshold)\n                    best_prediction = prediction\n\n        # Calculate alpha\n        alpha = 0.5 * np.log((1 - best_error) / best_error)\n        classifier_weights.append(alpha)\n        classifiers.append(best_stump)\n\n        # Update weights\n        weights *= np.exp(-alpha * y_train * best_prediction)\n        weights /= np.sum(weights)\n\n    # Make predictions on the test set\n    predictions = np.zeros(X_test.shape[0])\n    for i, (feature, threshold) in enumerate(classifiers):\n        prediction = np.where(X_test[:, feature] > threshold, 1, -1)\n        predictions += classifier_weights[i] * prediction\n\n    return list(np.sign(predictions))\n\n# Example usage\nX_train = np.array([[0, 0], [1, 1], [1, 0], [0, 1]])\ny_train = np.array([-1, 1, 1, -1])\nX_test = np.array([[0.8, 0.8], [0.2, 0.1]])\nn_clf = 3\n\npredictions = adaboost_predict(X_train, y_train, X_test, n_clf)\nprint(predictions)  # Output: [1, -1]\n```\n\nThis script implements the AdaBoost algorithm using decision stumps as weak learners. It takes the training data, labels, test data, and the number of classifiers to build as input, and returns the predicted labels for the test data."}
{"task_id": 128, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    # Calculate the global mean\n    global_mean = np.mean(X, axis=0)\n    \n    # Calculate the within-class scatter matrix\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    for c in np.unique(y):\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        S_W += (X_c - mean_c).T.dot(X_c - mean_c)\n    \n    # Calculate the between-class scatter matrix\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    for c in np.unique(y):\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        S_B += X_c.shape[0] * (mean_c - global_mean).T.dot(mean_c - global_mean)\n    \n    # Compute the matrix A = pinv(S_W) * S_B\n    A = np.linalg.pinv(S_W).dot(S_B)\n    \n    # Perform eigen-decomposition of A\n    eigenvalues, eigenvectors = np.linalg.eigh(A)\n    \n    # Sort eigenvalues and eigenvectors in descending order\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[sorted_indices]\n    eigenvectors = eigenvectors[:, sorted_indices]\n    \n    # Deterministic sign fix\n    for i in range(eigenvectors.shape[1]):\n        if eigenvectors[0, i] < 0:\n            eigenvectors[:, i] *= -1\n    \n    # Project X on the first n_components eigenvectors\n    W = eigenvectors[:, :n_components]\n    X_projected = X.dot(W)\n    \n    # Round to four decimal places and convert to list of lists\n    return np.round(X_projected, 4).tolist()\n\n# Example usage\nX = np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]])\ny = np.array([0,0,0,0,1,1,1,1])\nn_components = 1\nprint(multi_class_lda(X, y, n_components))\n```\n\nThis code snippet implements the multi-class Linear Discriminant Analysis (LDA) as described in the task. It computes the within-class and between-class scatter matrices, solves the generalised eigenvalue problem, applies a deterministic sign fix to the eigenvectors, and projects the data onto the first `n_components` eigenvectors. The result is rounded to four decimal places and returned as a list of lists."}
{"task_id": 140, "completion_id": 0, "completion": "```python\nfrom collections import deque\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    fire_queue = deque()\n    agent_queue = deque([(0, 0, 0)])  # (x, y, time)\n    visited = set()\n    fire_time = [[math.inf] * n for _ in range(n)]\n\n    # Initialize fire positions\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j, 0))\n                fire_time[i][j] = 0\n\n    # Spread fire\n    while fire_queue:\n        x, y, t = fire_queue.popleft()\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] != '#' and fire_time[nx][ny] == math.inf:\n                fire_time[nx][ny] = t + 1\n                fire_queue.append((nx, ny, t + 1))\n\n    # Check if start or end is on fire\n    if fire_time[0][0] == 0 or fire_time[n-1][n-1] == 0:\n        return -1\n\n    # Agent's BFS\n    while agent_queue:\n        x, y, t = agent_queue.popleft()\n        if (x, y) == (n-1, n-1):\n            return t\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] != '#' and (nx, ny) not in visited and fire_time[nx][ny] > t + 1:\n                visited.add((nx, ny))\n                agent_queue.append((nx, ny, t + 1))\n    return -1\n\n# Example usage\ngrid = [\"..\", \"..\"]\nprint(escape_fire_maze(grid))  # Output: 2\n```\n\nThis Python script defines a function `escape_fire_maze` that takes a grid as input and returns the minimum number of minutes required for the agent to reach the goal without entering a burning cell, or -1 if this is impossible. The script uses BFS to simulate the spread of fire and the movement of the agent, ensuring that the agent avoids cells that are on fire."}
{"task_id": 141, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"Implement k-Nearest Neighbors classifier.\"\"\"\n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((x1 - x2) ** 2, axis=1))\n    \n    def manhattan_distance(x1, x2):\n        return np.sum(np.abs(x1 - x2), axis=1)\n    \n    def cosine_distance(x1, x2):\n        dot_product = np.sum(x1 * x2, axis=1)\n        norm_x1 = np.sqrt(np.sum(x1 ** 2, axis=1))\n        norm_x2 = np.sqrt(np.sum(x2 ** 2, axis=1))\n        return 1 - (dot_product / (norm_x1 * norm_x2))\n    \n    # Select the distance metric\n    if metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:  # Default to 'euclidean'\n        distance_func = euclidean_distance\n    \n    # Compute distances between each test sample and every training sample\n    distances = np.array([distance_func(X_train, x) for x in X_test])\n    \n    # Find the k nearest neighbors for each test sample\n    nearest_indices = np.argsort(distances, axis=1)[:, :k]\n    \n    # Predict the class by majority vote\n    y_pred = []\n    for indices in nearest_indices:\n        labels = y_train[indices]\n        (values, counts) = np.unique(labels, return_counts=True)\n        max_count = np.max(counts)\n        # In case of a tie, return the smallest label value\n        y_pred.append(values[np.where(counts == max_count)[0][0]])\n    \n    return np.array(y_pred)\n\n# Example usage\nX_train = np.array([[0, 0], [1, 1], [0, 1], [1, 0]])\ny_train = np.array([0, 0, 1, 1])\nX_test = np.array([[0.9, 0.9]])\nk = 3\nmetric = 'euclidean'\nprint(knn_predict(X_train, y_train, X_test, k, metric))\n```\n\nThis script defines a function `knn_predict` that implements the k-Nearest Neighbors classifier according to the specifications provided. It includes the computation of distances using the specified metric, finding the k nearest neighbors, and predicting the class by majority vote. The example usage at the end demonstrates how to call the function with the given example data."}
{"task_id": 146, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2, axis=1))\n\n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b), axis=1)\n\n    def cosine_distance(a, b):\n        dot_product = np.sum(a * b, axis=1)\n        norm_a = np.linalg.norm(a, axis=1)\n        norm_b = np.linalg.norm(b, axis=1)\n        return 1 - dot_product / (norm_a * norm_b + 1e-12)\n\n    # Choose the distance metric\n    if metric == 'euclidean':\n        distance_func = euclidean_distance\n    elif metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        raise ValueError(\"Invalid metric. Choose 'euclidean', 'manhattan', or 'cosine'.\")\n\n    # Compute distances and predict labels\n    predictions = []\n    for test_sample in X_test:\n        distances = distance_func(X, test_sample)\n        sorted_indices = np.argsort(distances)\n        k_indices = sorted_indices[:min(k, len(sorted_indices))]\n        k_nearest_labels = y[k_indices]\n        label_counts = np.bincount(k_nearest_labels)\n        prediction = np.argmax(label_counts)\n        predictions.append(prediction)\n\n    return predictions\n\n# Example usage\nX = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\ny = np.array([0, 0, 0, 1])\nX_test = np.array([[0.9, 0.9]])\nk = 3\nmetric = 'euclidean'\nprint(knn_predict(X, y, X_test, k, metric))\n```\n\nThis script defines a `knn_predict` function that implements the k-Nearest Neighbours algorithm from scratch, using one of three distance metrics: Euclidean, Manhattan, or Cosine. The function takes training features and labels, test features, a neighbourhood size `k`, and a distance metric as input, and returns the predicted labels for the test samples. The example usage demonstrates how to call the function with a simple dataset."}
{"task_id": 155, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Convert state to numpy array if it's not already\n    state = np.array(state)\n    \n    # First layer: Linear transformation followed by ReLU\n    hidden1 = np.maximum(0, np.dot(state, weights['W1']) + weights['b1'])\n    \n    # Second layer: Linear transformation followed by ReLU\n    hidden2 = np.maximum(0, np.dot(hidden1, weights['W2']) + weights['b2'])\n    \n    # Output layer: Linear transformation followed by tanh\n    action = np.tanh(np.dot(hidden2, weights['W3']) + weights['b3'])\n    \n    # Convert action to list and round to 4 decimal places\n    return [round(x, 4) for x in action.tolist()]\n\n# Example usage\nstate = [0.5, -0.5]\nweights = {\n    \"W1\": np.array([[1.0, 0.0],\n                    [0.0, 1.0]]),\n    \"b1\": np.array([0.0, 0.0]),\n    \"W2\": np.array([[1.0, 0.0],\n                    [0.0, 1.0]]),\n    \"b2\": np.array([0.0, 0.0]),\n    \"W3\": np.array([[1.0],\n                    [1.0]]),\n    \"b3\": np.array([0.0])\n}\n\nprint(actor_forward(state, weights))  # Output: [0.4621]\n```"}
{"task_id": 160, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    m, n = X.shape\n    # Add intercept column\n    intercept_col = np.ones((m, 1)) if fit_intercept else np.zeros((m, 1))\n    X = np.hstack((intercept_col, X))\n    n += 1  # Adjust n to include intercept column\n\n    # Initialize weights\n    w = np.zeros(n)\n\n    for _ in range(max_iters):\n        if fit_intercept:\n            w[0] = np.mean(y - X[:, 1:] @ w[1:])\n        for j in range(1, n):  # Exclude intercept\n            X_j = X[:, j]\n            r_j = y - X @ w + w[j] * X_j\n            z_j = np.sum(X_j ** 2)\n            u_j = X_j.T @ r_j\n            w[j] = soft_threshold(u_j, lambda_param * m) / z_j\n\n    bias = w[0]\n    weights = w[1:].tolist()\n    return [round(w, 4) for w in weights], round(bias, 4)\n\ndef soft_threshold(a, tau):\n    return np.sign(a) * max(abs(a) - tau, 0)\n\n# Example usage\nX = np.array([[1], [2], [3]])\ny = np.array([2, 4, 6])\nlambda_param = 0.0\nmax_iters = 100\nweights, bias = fit_lasso(X, y, lambda_param, max_iters)\nprint(weights, bias)\n```\n\nThis script defines the `fit_lasso` function that implements Lasso regression using the coordinate descent method as described in the task. The function takes a feature matrix `X`, a target vector `y`, a regularisation strength `lambda_param`, a maximum number of iterations `max_iters`, and a boolean `fit_intercept` to determine whether to fit an intercept term. The function returns the learned weights and intercept, rounded to four decimal places."}
{"task_id": 165, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are not already\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Check if the lengths of the vectors are equal\n    if x.shape != y.shape:\n        return -1\n    \n    # Calculate the Hamming distance\n    distance = np.sum(x != y) / x.size\n    \n    # Return the distance rounded to 4 decimal places\n    return round(distance, 4)\n\n# Example usage\nx = [1, 0, 1, 1]\ny = [1, 1, 0, 1]\nprint(hamming_distance(x, y))  # Output: 0.5\n```\n\nThis code snippet defines a function `hamming_distance` that computes the normalized Hamming distance between two 1-D integer vectors, either as Python lists or NumPy arrays. It checks if the vectors have the same length and returns -1 if they do not. Otherwise, it calculates the distance as the proportion of differing elements, rounded to 4 decimal places."}
{"task_id": 169, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\"\"\"\n    if N <= 0:\n        raise ValueError(\"N must be a positive integer\")\n    \n    if window not in [\"hamming\", \"hann\", \"blackman_harris\", \"generalized_cosine\"]:\n        raise ValueError(\"Unknown window type\")\n    \n    if window == \"hamming\":\n        a0, a1 = 0.54, 0.46\n        w = [a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) for n in range(N)]\n    elif window == \"hann\":\n        a0, a1 = 0.5, 0.5\n        w = [a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) for n in range(N)]\n    elif window == \"blackman_harris\":\n        a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n        w = [a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1)) for n in range(N)]\n    elif window == \"generalized_cosine\":\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be provided for generalized_cosine window\")\n        w = [sum(a * np.cos(2 * np.pi * k * n / (N - 1)) for k, a in enumerate(coefficients)) for n in range(N)]\n    \n    # Special case for N = 1\n    if N == 1:\n        return [1.0]\n    \n    # Round to 4 decimal places\n    return [round(x, 4) for x in w]\n\n# Example usage\nprint(generate_window(\"blackman_harris\", 5))\n```\n\nThis script defines the `generate_window` function that generates the coefficients for the specified window type and number of coefficients, `N`. It handles the special cases and constraints as specified in the task description."}
{"task_id": 171, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Add intercept term (bias)\n    X_train = np.c_[np.ones(X_train.shape[0]), X_train]\n    X_test = np.c_[np.ones(X_test.shape[0]), X_test]\n    \n    # Map labels to {0, 1}\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) != 2:\n        raise ValueError(\"y_train must contain exactly two distinct labels.\")\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train_mapped = np.array([label_map[label] for label in y_train])\n    \n    # Handle the case where all labels are the same\n    if unique_labels[0] == unique_labels[1]:\n        return [unique_labels[0]] * len(X_test)\n    \n    # Initialize weights\n    weights = np.zeros(X_train.shape[1])\n    \n    # Mini-batch Gradient Descent\n    for _ in range(epochs):\n        # Shuffle the training data\n        indices = np.random.permutation(X_train.shape[0])\n        X_train = X_train[indices]\n        y_train_mapped = y_train_mapped[indices]\n        \n        # Split into mini-batches\n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train[i:i+batch_size]\n            y_batch = y_train_mapped[i:i+batch_size]\n            \n            # Compute predictions\n            predictions = 1 / (1 + np.exp(-np.dot(X_batch, weights)))\n            \n            # Compute gradients\n            gradients = np.dot(X_batch.T, (predictions - y_batch)) / len(y_batch)\n            \n            # Update weights\n            weights -= learning_rate * gradients\n    \n    # Predict on test set\n    test_predictions = 1 / (1 + np.exp(-np.dot(X_test, weights)))\n    test_predictions = (test_predictions > 0.5).astype(int)\n    \n    # Map predictions back to original labels\n    reverse_label_map = {0: unique_labels[0], 1: unique_labels[1]}\n    test_predictions = [reverse_label_map[pred] for pred in test_predictions]\n    \n    return test_predictions\n\n# Example usage\nX_train = [[0], [1], [2], [3]]\ny_train = [0, 0, 1, 1]\nX_test = [[1.5], [2.5]]\nprint(logistic_regression_train_predict(X_train, y_train, X_test))\n```\n\nThis Python script implements a binary Logistic Regression classifier from scratch using mini-batch Gradient Descent. It handles the addition of an intercept term, mapping of labels to `{0, 1}` for internal processing, and mapping predictions back to the original label set. The script also includes a special case for when all training labels are identical."}
{"task_id": 176, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    n_samples, n_features = X_train.shape\n    y_train = np.where(y_train == 0, -1, 1)  # Convert labels to -1 and 1\n    \n    # Initialize sample weights\n    sample_weights = np.full(n_samples, 1 / n_samples)\n    \n    weak_learners = []\n    learner_weights = []\n    \n    for _ in range(n_estimators):\n        min_error = float('inf')\n        best_stump = None\n        \n        for feature_idx in range(n_features):\n            for threshold in np.unique(X_train[:, feature_idx]):\n                for polarity in [-1, 1]:\n                    predictions = np.where((X_train[:, feature_idx] < threshold) == (polarity == 1), 1, -1)\n                    error = np.sum(sample_weights * (predictions != y_train))\n                    \n                    if error < min_error:\n                        min_error = error\n                        best_stump = (feature_idx, threshold, polarity)\n        \n        feature_idx, threshold, polarity = best_stump\n        predictions = np.where((X_train[:, feature_idx] < threshold) == (polarity == 1), 1, -1)\n        \n        if min_error == 0:\n            learner_weight = 1\n        else:\n            learner_weight = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n        \n        sample_weights *= np.exp(-learner_weight * y_train * predictions)\n        sample_weights /= np.sum(sample_weights)\n        \n        weak_learners.append(best_stump)\n        learner_weights.append(learner_weight)\n        \n        if min_error == 0:\n            break\n    \n    test_predictions = np.zeros(X_test.shape[0])\n    for (feature_idx, threshold, polarity), learner_weight in zip(weak_learners, learner_weights):\n        predictions = np.where((X_test[:, feature_idx] < threshold) == (polarity == 1), 1, -1)\n        test_predictions += learner_weight * predictions\n    \n    final_predictions = np.where(test_predictions >= 0, 1, 0)\n    return final_predictions.tolist()\n\n# Example usage\nX_train = [[0, 0], [1, 0], [0, 1], [1, 1]]\ny_train = [0, 1, 1, 1]\nX_test = [[0, 0], [1, 1]]\nn_estimators = 3\npredictions = adaboost_predict(X_train, y_train, X_test, n_estimators)\nprint(predictions)  # Output: [0, 1]\n```"}
{"task_id": 178, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n\n    rng = np.random.default_rng(seed)\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    lower_bound = -1\n    upper_bound = 1\n\n    # Initialize particles\n    positions = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    velocities = np.zeros((num_particles, n_dims))\n    personal_best_positions = positions.copy()\n    personal_best_values = np.array([np.sum(x**2) for x in positions])\n    global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n    global_best_value = np.min(personal_best_values)\n\n    for _ in range(num_iterations):\n        r1 = rng.uniform(0, 1, (num_particles, n_dims))\n        r2 = rng.uniform(0, 1, (num_particles, n_dims))\n\n        velocities = w * velocities + c1 * r1 * (personal_best_positions - positions) + c2 * r2 * (global_best_position - positions)\n        positions = np.clip(positions + velocities, lower_bound, upper_bound)\n\n        current_values = np.array([np.sum(x**2) for x in positions])\n        improved_particles = current_values < personal_best_values\n        personal_best_positions[improved_particles] = positions[improved_particles]\n        personal_best_values[improved_particles] = current_values[improved_particles]\n\n        new_global_best_value = np.min(personal_best_values)\n        if new_global_best_value < global_best_value:\n            global_best_value = new_global_best_value\n            global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n\n    return round(global_best_value, 4)\n\n# Example usage:\nprint(particle_swarm_optimisation(2, 30, 100, 42))\n```\n\nThis Python script implements the Particle Swarm Optimization (PSO) algorithm to minimize the Sphere function in a given number of dimensions. The function is deterministic with respect to the provided seed, ensuring reproducibility of results. The script includes checks for valid input parameters and returns the best Sphere-function value encountered, rounded to four decimal places."}
{"task_id": 180, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((np.array(x1) - np.array(x2)) ** 2))\n    \n    def predict_instance(x):\n        distances = [euclidean_distance(x, x_train) for x_train in X_train]\n        sorted_indices = np.argsort(distances)\n        if k == 0 or k > len(X_train):\n            k = len(X_train)\n        k_indices = sorted_indices[:k]\n        k_nearest_labels = [y_train[i] for i in k_indices]\n        if task == \"classification\":\n            most_common = Counter(k_nearest_labels).most_common(1)\n            return most_common[0][0]\n        else:  # regression\n            return round(np.mean(k_nearest_labels), 4)\n    \n    return [predict_instance(x) for x in X_test]\n\n# Example usage:\nX_train = [[1, 1], [2, 2], [3, 3]]\ny_train = [1, 1, 2]\nX_test = [[2, 2]]\nk = 2\ntask = \"regression\"\nprint(knn_predict(X_train, y_train, X_test, k, task))  # Output: [1.5]\n```"}
{"task_id": 184, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gini_impurity(y):\n    \"\"\"Calculate the Gini impurity for a set of labels.\"\"\"\n    _, counts = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    return 1 - np.sum(probabilities ** 2)\n\ndef find_best_split(X, y, max_depth=None, current_depth=0):\n    \"\"\"Find the best split for a node based on Gini impurity.\"\"\"\n    if len(np.unique(y)) == 1 or (max_depth is not None and current_depth >= max_depth):\n        return None, np.bincount(y).argmax()\n    \n    best_gain = -1\n    best_feature = None\n    best_threshold = None\n    parent_gini = gini_impurity(y)\n    \n    for feature in range(X.shape[1]):\n        unique_values = np.unique(X[:, feature])\n        for i in range(len(unique_values) - 1):\n            threshold = (unique_values[i] + unique_values[i + 1]) / 2\n            left_indices = X[:, feature] <= threshold\n            right_indices = X[:, feature] > threshold\n            \n            if not np.any(left_indices) or not np.any(right_indices):\n                continue\n            \n            left_gini = gini_impurity(y[left_indices])\n            right_gini = gini_impurity(y[right_indices])\n            weighted_gini = (len(y[left_indices]) * left_gini + len(y[right_indices]) * right_gini) / len(y)\n            gain = parent_gini - weighted_gini\n            \n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature\n                best_threshold = threshold\n    \n    if best_gain == -1:\n        return None, np.bincount(y).argmax()\n    \n    left_indices = X[:, best_feature] <= best_threshold\n    right_indices = X[:, best_feature] > best_threshold\n    \n    left_node = find_best_split(X[left_indices], y[left_indices], max_depth, current_depth + 1)\n    right_node = find_best_split(X[right_indices], y[right_indices], max_depth, current_depth + 1)\n    \n    return (best_feature, best_threshold, left_node, right_node)\n\ndef predict_single(x, node):\n    \"\"\"Predict the class of a single sample.\"\"\"\n    if isinstance(node, int):\n        return node\n    feature, threshold, left_node, right_node = node\n    if x[feature] <= threshold:\n        return predict_single(x, left_node)\n    else:\n        return predict_single(x, right_node)\n\ndef decision_tree_predict(X_train, y_train, X_test, max_depth=None):\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n    tree = find_best_split(X_train, y_train, max_depth)\n    return [predict_single(x, tree) for x in X_test]\n\n# Example usage\nX_train = np.array([[5.1, 3.5, 1.4],\n                    [4.9, 3.0, 1.4],\n                    [6.2, 3.4, 5.4],\n                    [5.9, 3.0, 5.1]])\ny_train = np.array([0, 0, 1, 1])\nX_test = np.array([[5.0, 3.4, 1.5],\n                   [6.0, 3.1, 5.0]])\n\npredictions = decision_tree_predict(X_train, y_train, X_test)\nprint(predictions)  # Output: [0, 1]\n```"}
{"task_id": 190, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gini_impurity(labels):\n    \"\"\"Calculate the Gini impurity for a set of labels.\"\"\"\n    _, counts = np.unique(labels, return_counts=True)\n    proportions = counts / len(labels)\n    return 1 - np.sum(proportions ** 2)\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n    best_gini = gini_impurity(y)\n    best_feature_index = -1\n    best_threshold_value = None\n\n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        for threshold in unique_values:\n            left_indices = X[:, feature_index] <= threshold\n            right_indices = X[:, feature_index] > threshold\n\n            if np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n                continue\n\n            left_gini = gini_impurity(y[left_indices])\n            right_gini = gini_impurity(y[right_indices])\n            gini_split = (np.sum(left_indices) / n_samples) * left_gini + (np.sum(right_indices) / n_samples) * right_gini\n\n            if gini_split < best_gini or (np.abs(gini_split - best_gini) < 1e-12 and feature_index < best_feature_index) or (np.abs(gini_split - best_gini) < 1e-12 and feature_index == best_feature_index and threshold < best_threshold_value):\n                best_gini = gini_split\n                best_feature_index = feature_index\n                best_threshold_value = threshold\n\n    return (best_feature_index, best_threshold_value, round(best_gini, 4))\n\n# Example usage\nX = [[2], [3], [10], [19]]\ny = [0, 0, 1, 1]\nprint(best_gini_split(X, y))\n```\n\nThis script defines a function `best_gini_split` that finds the best binary split of the data based on the Gini impurity criterion. It includes a helper function `gini_impurity` to calculate the Gini impurity for a set of labels. The script is self-contained and follows the guidelines provided."}
{"task_id": 191, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\"\"\"\n    def validate(vec1, vec2):\n        if not (isinstance(vec1, (list, tuple, np.ndarray)) and isinstance(vec2, (list, tuple, np.ndarray))):\n            return False\n        if len(vec1) != len(vec2) or len(vec1) == 0:\n            return False\n        try:\n            vec1 = np.array(vec1, dtype=float)\n            vec2 = np.array(vec2, dtype=float)\n        except ValueError:\n            return False\n        return vec1, vec2\n\n    def euclidean(vec1, vec2):\n        vec1, vec2 = validate(vec1, vec2)\n        if vec1 is False:\n            return -1\n        return round(np.sqrt(np.sum((vec1 - vec2) ** 2)), 4)\n\n    def manhattan(vec1, vec2):\n        vec1, vec2 = validate(vec1, vec2)\n        if vec1 is False:\n            return -1\n        return round(np.sum(np.abs(vec1 - vec2)), 4)\n\n    def chebyshev(vec1, vec2):\n        vec1, vec2 = validate(vec1, vec2)\n        if vec1 is False:\n            return -1\n        return round(np.max(np.abs(vec1 - vec2)), 4)\n\n    def cosine(vec1, vec2):\n        vec1, vec2 = validate(vec1, vec2)\n        if vec1 is False or np.linalg.norm(vec1) == 0 or np.linalg.norm(vec2) == 0:\n            return -1\n        return round(1 - np.dot(vec1, vec2) / (np.linalg.norm(vec1) * np.linalg.norm(vec2)), 4)\n\n    metrics = {\n        'euclidean': euclidean,\n        'manhattan': manhattan,\n        'chebyshev': chebyshev,\n        'cosine': cosine\n    }\n\n    if name not in metrics:\n        return lambda *args: -1\n    return metrics[name]\n```"}
{"task_id": 197, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n\n    if md_action:\n        # Multi-dimensional action space\n        for space in env.action_space.spaces:\n            if cont_action:\n                n_actions_per_dim.append(np.inf)\n            else:\n                n_actions_per_dim.append(space.n)\n        action_dim = len(n_actions_per_dim)\n        if not cont_action:\n            action_ids = list(product(*[range(n) for n in n_actions_per_dim]))\n    else:\n        # Single-dimensional action space\n        if cont_action:\n            n_actions_per_dim.append(np.inf)\n        else:\n            n_actions_per_dim.append(env.action_space.n)\n        action_dim = 1\n\n    return n_actions_per_dim, action_ids, action_dim\n\n# Example usage\nfrom types import SimpleNamespace\n\n# Example 1\nenv1 = SimpleNamespace(action_space=SimpleNamespace(spaces=[SimpleNamespace(n=2), SimpleNamespace(n=3)]))\nprint(action_stats(env1, md_action=True, cont_action=False))\n# Output: ([2, 3], [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)], 2)\n\n# Example 2\nenv2 = SimpleNamespace(action_space=SimpleNamespace(shape=(2,)))\nprint(action_stats(env2, md_action=True, cont_action=True))\n# Output: ([inf, inf], None, 2)\n```"}
{"task_id": 198, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = phi[0].shape[1]  # Number of topics\n    beta = np.zeros((V, T))  # Initialize the word-topic matrix\n\n    # Compute the sum of phi values for each word and topic\n    for d, doc in enumerate(corpus):\n        for n, word in enumerate(doc):\n            beta[word] += phi[d][n]\n\n    # Normalize each column of beta\n    beta += 1e-10  # Avoid division by zero\n    beta /= beta.sum(axis=0)\n\n    # Round to 4 decimal places and convert to list of lists\n    beta = np.round(beta, 4).tolist()\n\n    return beta\n\n# Example usage\ncorpus = [[0, 1, 1], [1, 2]]\nphi = [\n    np.array([[0.7, 0.3], [0.2, 0.8], [0.1, 0.9]]),\n    np.array([[0.6, 0.4], [0.3, 0.7]])\n]\nV = 3\n\nbeta = update_beta(phi, corpus, V)\nprint(beta)\n```\n\nThis code snippet defines a function `update_beta` that takes the variational parameters `phi`, a tokenized corpus, and the vocabulary size `V` as inputs, and returns the updated word-topic distribution matrix $\\beta$ as a list of lists, normalized and rounded to four decimal places. The example usage demonstrates how to call the function with a sample corpus and `phi` values."}
{"task_id": 202, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef euclidean_distance(x, y):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((x - y) ** 2))\n\ndef total_cost(X, medoids, labels):\n    \"\"\"Calculate the total cost of the clustering.\"\"\"\n    cost = 0\n    for i, label in enumerate(labels):\n        cost += euclidean_distance(X[i], medoids[label])\n    return cost\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    n_samples = X.shape[0]\n    medoids = X[:k].copy()\n    labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - medoids, axis=2), axis=1)\n    cost = total_cost(X, medoids, labels)\n    \n    improved = True\n    while improved:\n        improved = False\n        for i in range(k):\n            for j in range(n_samples):\n                if j not in medoids:\n                    new_medoids = medoids.copy()\n                    new_medoids[i] = X[j]\n                    new_labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - new_medoids, axis=2), axis=1)\n                    new_cost = total_cost(X, new_medoids, new_labels)\n                    if new_cost < cost:\n                        cost = new_cost\n                        medoids = new_medoids\n                        labels = new_labels\n                        improved = True\n                        break\n            if improved:\n                break\n    \n    return labels.tolist()\n\n# Example usage\nX = np.array([[0,0], [1,0], [0,1], [5,5], [6,5], [5,6]])\nk = 2\nprint(pam_clustering(X, k))\n```\n\nThis script defines a function `pam_clustering` that implements the PAM clustering algorithm as described. It uses helper functions to calculate the Euclidean distance and the total cost of the clustering. The main function iteratively tries to improve the clustering by swapping medoids and non-medoids, and it stops when no further improvement can be made."}
{"task_id": 216, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    # Convert inputs to numpy arrays\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    \n    # Check for valid input shapes\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n    \n    # Polynomial feature expansion\n    poly_features_train = np.vander(x_train.flatten(), degree+1, increasing=True)\n    poly_features_test = np.vander(x_test.flatten(), degree+1, increasing=True)\n    \n    # Standardize features (except bias term)\n    means = np.mean(poly_features_train, axis=0)\n    stds = np.std(poly_features_train, axis=0)\n    stds[0] = 1  # Keep bias term as is\n    poly_features_train = (poly_features_train - means) / stds\n    poly_features_test = (poly_features_test - means) / stds\n    \n    # Initialize weights\n    weights = np.zeros(poly_features_train.shape[1])\n    \n    # Batch gradient descent\n    for _ in range(n_iterations):\n        predictions = poly_features_train.dot(weights)\n        errors = predictions - y_train\n        gradient = (2 * poly_features_train.T.dot(errors) / len(y_train) +\n                    reg_factor * (l1_ratio * np.sign(weights) + (1 - l1_ratio) * 2 * weights))\n        gradient[0] = 2 * poly_features_train.T.dot(errors)[0] / len(y_train)  # No regularization for bias\n        weights -= learning_rate * gradient\n    \n    # Predictions for test set\n    predictions_test = poly_features_test.dot(weights)\n    return np.round(predictions_test, 4).tolist()\n\n# Example usage\nx_train = [[1],[2],[3],[4]]\ny_train = [2,4,6,8]\nx_test = [[5],[6]]\nprint(elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.0, l1_ratio=0.5, n_iterations=5000, learning_rate=0.1))\n```\n\nThis script defines the `elastic_net_regression` function that implements Elastic Net regression using batch gradient descent. It includes polynomial feature expansion, standardization of features, and the application of both L1 and L2 regularization penalties. The function returns predictions for a test set, rounded to four decimal places."}
{"task_id": 217, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to numpy arrays for vectorized computation\n    actual = np.array(actual, dtype=float)\n    predicted = np.array(predicted, dtype=float)\n\n    # Compute sigmoid\n    sigmoid_pred = 1 / (1 + np.exp(-predicted))\n    \n    # Compute gradient\n    grad = actual * (sigmoid( - actual * predicted ))\n    \n    # Compute Hessian\n    hess = sigmoid_pred * (1 - sigmoid_pred)\n    \n    # Compute probability\n    prob = sigmoid_pred\n    \n    # Round results to 6 decimal places and convert to lists\n    gradient_list = np.round(grad, 6).tolist()\n    hessian_list = np.round(hess, 6).tolist()\n    probability_list = np.round(prob, 6).tolist()\n    \n    return (gradient_list, hessian_list, probability_list)\n\n# Helper function for sigmoid\ndef sigmoid(z):\n    return 1 / (1 + np.exp(-z))\n\n# Example usage\nactual = [1, -1]\npredicted = [0.5, -0.5]\nprint(logistic_components(actual, predicted))\n```\n\nThis script defines the `logistic_components` function that computes the gradient, Hessian, and probability for logistic loss as per the task description. It also includes a helper function `sigmoid` for computing the sigmoid transformation. The example usage at the end demonstrates how to call the function with the provided example data."}
{"task_id": 218, "completion_id": 0, "completion": "```python\ndef calculate_score(hand: list[int]) -> int:\n    \"\"\"Calculate the score of a hand in Blackjack.\"\"\"\n    score = sum(hand)\n    aces = hand.count(1)\n    while score <= 11 and aces > 0:\n        score += 10\n        aces -= 1\n    return min(score, 21)\n\ndef is_natural_blackjack(hand: list[int]) -> bool:\n    \"\"\"Check if the hand is a natural blackjack.\"\"\"\n    return len(hand) == 2 and 1 in hand and 10 in hand\n\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    player_score = calculate_score(player)\n    dealer_score = calculate_score(dealer)\n    \n    if player_score > 21:\n        return -1\n    elif dealer_score > 21:\n        return 1\n    elif player_score > dealer_score:\n        return 1.5 if is_natural_blackjack(player) else 1\n    elif player_score < dealer_score:\n        return -1\n    else:\n        return 0\n\n# Example usage\nplayer = [1, 10]\ndealer = [10, 7]\nprint(blackjack_outcome(player, dealer))  # Output: 1.5\n```\n\nThis script defines a function `blackjack_outcome` that evaluates the outcome of a round of Blackjack based on the final hands of the player and the dealer. It uses helper functions to calculate the score of a hand and to check if a hand is a natural blackjack. The main function then applies the rules to determine the reward for the player."}
{"task_id": 221, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper function that returns element-wise squared log errors.\"\"\"\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    # Convert inputs to NumPy arrays for easier manipulation\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Input validation\n    if actual.shape != predicted.shape:\n        return -1\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    \n    # Calculate the squared log errors\n    squared_errors = squared_log_error(actual, predicted)\n    \n    # Calculate the mean of the squared errors\n    msle = np.mean(squared_errors)\n    \n    # Return the result rounded to 4 decimal places\n    return round(msle, 4)\n```\n\nThis code snippet provides a self-contained implementation of the Mean Squared Logarithmic Error (MSLE) metric, including the necessary input validation and rounding to 4 decimal places as specified in the task."}
{"task_id": 222, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    # Convert input to a NumPy array if it's a list\n    if isinstance(z, list):\n        z = np.array(z)\n    \n    # Define a helper function for the sigmoid calculation\n    def stable_sigmoid(x):\n        if x >= 0:\n            return 1 / (1 + np.exp(-x))\n        else:\n            return np.exp(x) / (1 + np.exp(x))\n    \n    # Apply the helper function element-wise\n    if isinstance(z, (int, float)):\n        result = stable_sigmoid(z)\n    else:\n        result = np.vectorize(stable_sigmoid)(z)\n    \n    # Round the result to 4 decimal places\n    if isinstance(z, (int, float)):\n        return round(result, 4)\n    else:\n        return [round(x, 4) for x in result.tolist()]\n\n# Example usage\nz = np.array([-1000, 0, 2])\nprint(sigmoid(z))  # Output: [0.0, 0.5, 0.8808]\n```"}
{"task_id": 224, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    # Convert input to numpy array if it's not already\n    if not isinstance(z, np.ndarray):\n        z = np.array(z)\n    \n    # Apply the Leaky ReLU activation\n    z = np.where(z >= 0, z, a * z)\n    \n    # Convert back to a plain Python list\n    return z.tolist()\n\n# Example usage\nz = np.array([-2, -1, 0, 1, 2])\na = 0.1\nprint(leaky_relu(z, a))\n```\n\nThis code snippet defines the `leaky_relu` function that applies the Leaky ReLU activation to the input `z` with an optional slope parameter `a`. The function handles inputs of various types (scalars, lists, and `numpy.ndarray`) and ensures the output is a Python list with the same structure as the input."}
{"task_id": 226, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    sample_weights = np.full(n_samples, 1 / n_samples)\n    stumps = []\n    alphas = []\n\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = None\n        for feature in range(n_features):\n            for threshold in np.unique(X_train[:, feature]):\n                for polarity in [-1, 1]:\n                    predictions = np.where(X_train[:, feature] > threshold, polarity, -polarity)\n                    error = np.sum(sample_weights[y_train != predictions])\n                    if error < min_error:\n                        min_error = error\n                        best_stump = (feature, threshold, polarity)\n        \n        feature_index, threshold, polarity = best_stump\n        predictions = np.where(X_train[:, feature_index] > threshold, polarity, -polarity)\n        error = np.sum(sample_weights[y_train != predictions])\n        alpha = 0.5 * math.log((1 - error) / (error + 1e-10))\n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        sample_weights /= np.sum(sample_weights)\n        \n        stumps.append(best_stump)\n        alphas.append(alpha)\n\n    def predict_single(x):\n        return sum(alpha * (1 if x[feature] > threshold else -1) for (feature, threshold, _), alpha in zip(stumps, alphas))\n    \n    predictions = [np.sign(predict_single(x)) for x in X_test]\n    return predictions.tolist()\n\n# Example usage\nX_train = np.array([[0, 1], [1, 1], [1, 0], [0, 0]])\ny_train = np.array([1, 1, -1, -1])\nX_test = np.array([[1, 0], [0, 1]])\nn_clf = 3\nprint(adaboost_predict(X_train, y_train, X_test, n_clf))\n```\n\nThis script implements the AdaBoost algorithm using decision stumps as weak learners. It trains the ensemble on the provided training data and then uses it to predict the labels of the test data. The predictions are returned as a list of integers, each being either -1 or 1."}
{"task_id": 241, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    \n    # Flatten the shape into a 2D matrix shape\n    d0 = shape[0]\n    d1 = np.prod(shape[1:])\n    # Create a 2D matrix with i.i.d. samples from the standard normal distribution\n    A = np.random.randn(d0, d1)\n    \n    # Compute the SVD of A\n    U, _, Vt = np.linalg.svd(A, full_matrices=False)\n    \n    # Choose the SVD factor that has the same size as A\n    Q = U if U.shape == A.shape else Vt\n    \n    # Reshape Q back to the requested tensor shape and multiply it by scale\n    result = (Q * scale).reshape(shape)\n    \n    return result.tolist()\n\n# Example usage\nnp.random.seed(0)\nshape = (2, 2)\nscale = 0.5\nprint(orthogonal(shape, scale))\n```\n\nThis code snippet defines a function `orthogonal` that generates an orthogonally initialized tensor according to the specified shape and scale, following the algorithm described in the task. The function returns a Python list representation of the tensor, or `-1` if the shape is not valid (i.e., has fewer than two dimensions). The example usage demonstrates how to call the function with a fixed random seed, shape, and scale, and prints the resulting tensor."}
{"task_id": 243, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Convert state to numpy array for easier manipulation\n    state = np.array(state)\n    \n    # Define the weights and biases (all weights = 1.0, all biases = 0.0)\n    W1 = np.ones((3, 4))\n    W2 = np.ones((4, 4))\n    W3 = np.ones((4, 4))\n    Wa = np.ones((4, 3))\n    Wc = np.ones((4, 1))\n    b1 = np.zeros(4)\n    b2 = np.zeros(4)\n    b3 = np.zeros(4)\n    ba = np.zeros(3)\n    bc = np.zeros(1)\n    \n    # Forward pass through the network\n    z1 = np.maximum(0, np.dot(state, W1) + b1)  # ReLU activation\n    z2 = np.maximum(0, np.dot(z1, W2) + b2)     # ReLU activation\n    z3 = np.maximum(0, np.dot(z2, W3) + b3)     # ReLU activation\n    logits = np.dot(z3, Wa) + ba\n    state_value = np.dot(z3, Wc) + bc\n    \n    # Softmax activation for actor head\n    exp_logits = np.exp(logits)\n    action_probs = exp_logits / np.sum(exp_logits)\n    \n    # Round the action probabilities and state value to 4 decimal places\n    action_probs = [round(prob, 4) for prob in action_probs]\n    state_value = round(state_value[0], 4)\n    \n    return action_probs, state_value\n\n# Example usage\nstate = [1.0, -1.0, 0.5]\nprint(actor_critic_forward(state))\n```\n\nThis script defines the `actor_critic_forward` function that implements the forward pass of the described Actor\u2013Critic network using basic NumPy operations. The function takes a state vector as input and returns the action probabilities and the state value, both rounded to four decimal places."}
{"task_id": 249, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    # Convert state and params to numpy arrays\n    state = np.array(state)\n    for key in params:\n        params[key] = np.array(params[key])\n\n    # Shared layers\n    z1 = np.dot(state, params['W1']) + params['b1']\n    a1 = np.maximum(z1, 0)  # ReLU activation\n    z2 = np.dot(a1, params['W2']) + params['b2']\n    a2 = np.maximum(z2, 0)  # ReLU activation\n    z3 = np.dot(a2, params['W3']) + params['b3']\n    a3 = np.maximum(z3, 0)  # ReLU activation\n\n    # Actor head\n    actor_output = np.dot(a3, params['Wa']) + params['ba']\n    exp_scores = np.exp(actor_output - np.max(actor_output))  # Subtract max for numerical stability\n    probabilities = exp_scores / np.sum(exp_scores)\n\n    # Critic head\n    value = np.dot(a3, params['Wc']) + params['bc']\n\n    # Round the results\n    probabilities = np.round(probabilities, 4)\n    value = np.round(value, 4)\n\n    # Ensure 0 or 1 values are represented with one decimal place\n    probabilities = [float(f\"{p:.1f}\" if p == 0 or p == 1 else f\"{p:.4f}\") for p in probabilities]\n    value = float(f\"{value:.1f}\" if value == 0 or value == 1 else f\"{value:.4f}\")\n\n    return probabilities, value\n\n# Example usage\nstate = [1, 0]\nparams = {\n    \"W1\": [[1, 0], [0, 1]], \"b1\": [0, 0],\n    \"W2\": [[1, 0], [0, 1]], \"b2\": [0, 0],\n    \"W3\": [[1, 0], [0, 1]], \"b3\": [0, 0],\n    \"Wa\": [[1, 0], [0, 1]], \"ba\": [0, 0],\n    \"Wc\": [[1], [1]],        \"bc\": [0]\n}\nprint(actor_critic_forward(state, params))\n```\n\nThis script defines the `actor_critic_forward` function that performs the forward pass through a three-layer Actor\u2013Critic network using NumPy. The function takes the current state and a dictionary of parameters, and returns the action probabilities and the state value, both rounded to four decimal places."}
{"task_id": 253, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l2_ratio = 1 - l1_ratio\n    \n    if gradient:\n        grad = alpha * (l1_ratio * np.sign(w) + l2_ratio * w)\n        return [round(x, 4) for x in grad.tolist()]\n    else:\n        penalty = alpha * (l1_ratio * np.linalg.norm(w, ord=1) + l2_ratio * 0.5 * np.dot(w, w))\n        return round(penalty, 4)\n\n# Example usage:\nw = np.array([1, -2, 3])\nalpha = 0.1\nl1_ratio = 0.5\n\n# Calculate penalty\npenalty = elastic_net_regularization(w, alpha, l1_ratio)\nprint(penalty)  # Output: 0.5371\n\n# Calculate gradient\ngrad = elastic_net_regularization(w, alpha, l1_ratio, gradient=True)\nprint(grad)  # Output: [0.075, -0.125, 0.175]\n```\n\nThis code snippet defines the `elastic_net_regularization` function as per the task description. It computes the Elastic-Net penalty or its gradient based on the input parameters and returns the result rounded to 4 decimal places as specified."}
{"task_id": 256, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n\n    # Adjust parameter name if necessary\n    if param_name in ['Ba', 'Bx']:\n        param_name = param_name.lower()\n\n    # Get the parameter to be checked\n    param = model.parameters[param_name]\n    param_shape = param.shape\n    grads = np.zeros_like(param, dtype=np.float64)\n\n    # Perform gradient checking\n    for i in range(param_shape[0]):\n        for j in range(param_shape[1]):\n            # Perturb the parameter by +\u03b5\n            param[i, j] += epsilon\n            model.parameters[param_name] = param\n            model.flush_gradients()\n            preds_pos = [model.forward(X[:, :, t]) for t in range(n_t)]\n            loss_pos = loss_func(preds_pos)\n\n            # Perturb the parameter by -\u03b5\n            param[i, j] -= 2 * epsilon\n            model.parameters[param_name] = param\n            model.flush_gradients()\n            preds_neg = [model.forward(X[:, :, t]) for t in range(n_t)]\n            loss_neg = loss_func(preds_neg)\n\n            # Restore the original parameter value\n            param[i, j] += epsilon\n            model.parameters[param_name] = param\n\n            # Calculate the numerical gradient\n            grads[i, j] = (loss_pos - loss_neg) / (2 * epsilon)\n\n    return grads.T\n\n# Example usage\na_batch  = 1        # number of samples\nin_dim   = 1        # input size\nout_dim  = 1        # output size\nn_t      = 1        # number of time\u2013steps\n\n# Minimal model holding a single weight matrix P = [[2.0]]\nclass ToyModel:\n    def __init__(self):\n        self.parameters = {'P': np.array([[2.0]], dtype=np.float64)}\n    def forward(self, x_t):\n        return x_t @ self.parameters['P']\n    def flush_gradients(self):\n        pass\n\nmodel = ToyModel()\nX     = np.array([[[3.0]]], dtype=np.float64)     # shape (1, 1, 1)\nloss  = lambda preds: sum(np.sum(y**2) for y in preds)\n\ngrad = grad_check_RNN(model, loss, 'P', n_t, X)\nprint(grad)\n```"}
{"task_id": 257, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    n_clf = max(1, n_clf)  # Ensure n_clf is at least 1\n    weights = np.full(n_samples, 1 / n_samples)\n    classifiers = []\n    alphas = []\n\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = None\n        best_alpha = None\n\n        for feature in range(n_features):\n            for threshold in np.unique(X_train[:, feature]):\n                for polarity in [-1, 1]:\n                    prediction = np.where(polarity * X_train[:, feature] > polarity * threshold, 1, -1)\n                    error = np.sum(weights[y_train != prediction])\n                    if error < min_error:\n                        min_error = error\n                        best_stump = (feature, threshold, polarity)\n                        best_alpha = 0.5 * np.log((1 - error) / error)\n\n        classifiers.append(best_stump)\n        alphas.append(best_alpha)\n\n        # Update weights\n        feature, threshold, polarity = best_stump\n        prediction = np.where(polarity * X_train[:, feature] > polarity * threshold, 1, -1)\n        weights *= np.exp(-best_alpha * y_train * prediction)\n        weights /= np.sum(weights)\n\n    # Predict for X_test\n    predictions = np.zeros(X_test.shape[0])\n    for (feature, threshold, polarity), alpha in zip(classifiers, alphas):\n        prediction = np.where(polarity * X_test[:, feature] > polarity * threshold, 1, -1)\n        predictions += alpha * prediction\n\n    return [1 if pred > 0 else -1 for pred in predictions]\n\n# Example usage\nX_train = np.array([[0, 0], [1, 1], [1, 0], [0, 1]])\ny_train = np.array([-1, 1, 1, -1])\nX_test = np.array([[0.8, 0.8], [0.2, 0.1]])\nn_clf = 3\n\npredictions = adaboost_predict(X_train, y_train, X_test, n_clf)\nprint(predictions)  # Output: [1, -1]\n```\n\nThis script implements the AdaBoost algorithm using decision stumps as weak learners. It takes the training data, labels, test data, and the number of classifiers to build as input, and returns the predicted labels for the test data."}
{"task_id": 261, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError(\"Shape must have at least two dimensions.\")\n    \n    fan_in = shape[1]\n    fan_out = shape[0]\n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n    \n    std = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(loc=0, scale=std, size=shape)\n\n# Example usage\nshape = (3, 2)\nweights = glorot_normal(shape)\nprint(\"Generated weights:\", weights)\nprint(\"Mean:\", np.mean(weights))\nprint(\"Standard Deviation:\", np.std(weights))\n```\n\nThis script defines the `glorot_normal` function that generates a tensor with the specified shape, using the Glorot/Xavier normal initialization method. The function calculates the `fan_in` and `fan_out` values based on the shape of the tensor, computes the standard deviation, and then samples from a normal distribution with mean 0 and the calculated standard deviation. The example usage demonstrates how to call the function and prints the generated weights along with their mean and standard deviation to verify the correctness of the initialization."}
{"task_id": 266, "completion_id": 0, "completion": "```python\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    # Create a dictionary to hold adjacency lists for each vertex\n    adj_dict = {vertex: set() for vertex in V}\n    \n    # Populate the adjacency dictionary\n    for u, v in E:\n        adj_dict[u].add(v)\n        adj_dict[v].add(u)\n    \n    # Convert the sets to sorted lists according to the order in V\n    adj_list = [[v for v in V if v in adj_dict[u]] for u in V]\n    \n    return adj_list\n\n# Test cases\nV1 = [\"A\", \"B\", \"C\", \"D\"]\nE1 = [(\"A\", \"B\"), (\"B\", \"C\"), (\"C\", \"A\"), (\"B\", \"A\")]\nprint(build_adj_list(V1, E1))  # Output: [[\"B\", \"C\"], [\"A\", \"C\"], [\"A\", \"B\"], []]\n\nV2 = [1, 2, 3, 4]\nE2 = [(1, 2), (2, 3), (3, 4), (4, 1)]\nprint(build_adj_list(V2, E2))  # Output: [[2, 4], [1, 3], [2, 4], [1, 3]]\n```\n\nThis Python script defines the function `build_adj_list` which takes a list of vertices `V` and a list of edges `E` to construct an adjacency list representation of an undirected graph. The adjacency list is returned as a list of lists, where each sublist contains the neighbors of the corresponding vertex in `V`, sorted by their order of appearance in `V`. The script also includes test cases to demonstrate the function's usage and verify its correctness."}
{"task_id": 267, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_stump = {\"feature_index\": 0, \"threshold\": 0.0, \"polarity\": 1, \"weighted_error\": float('inf')}\n    \n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n        thresholds = (unique_values[:-1] + unique_values[1:]) / 2.0\n        \n        for threshold in thresholds:\n            for polarity in [1, -1]:\n                y_pred = np.where((feature_values < threshold) == (polarity == 1), 1, -1)\n                error = np.sum(sample_weights * (y_pred != y))\n                if error < best_stump[\"weighted_error\"]:\n                    best_stump = {\n                        \"feature_index\": feature_index,\n                        \"threshold\": np.round(threshold, 4),\n                        \"polarity\": polarity,\n                        \"weighted_error\": np.round(error, 4)\n                    }\n    \n    return best_stump\n\n# Example usage\nX = np.array([[1.0], [2.0], [3.0], [4.0]])\ny = np.array([-1, -1, 1, 1])\nw = np.ones(4) / 4\nprint(train_decision_stump(X, y, w))\n```\n\nThis script defines the `train_decision_stump` function that implements the logic to find the optimal weighted decision stump as described in the task. It iterates over all features and all possible thresholds for each feature, considering both polarities, to find the stump with the minimal weighted error. The function returns a dictionary with the optimal stump's parameters."}
{"task_id": 273, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of labels.\"\"\"\n    label_counts = Counter(labels)\n    total = len(labels)\n    return -sum((count / total) * math.log2(count / total) for count in label_counts.values())\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    # Combine feature and target into a list of tuples for sorting\n    combined = sorted(zip(feature, target))\n    feature, target = zip(*combined)\n    \n    # Calculate the entropy of the parent node\n    parent_entropy = entropy(target)\n    \n    # Initialize variables to store the best split\n    best_threshold = None\n    best_ig = 0.0\n    \n    # Iterate over possible split points\n    for i in range(1, len(feature)):\n        if feature[i] != feature[i-1]:  # Ensure distinct values\n            threshold = (feature[i] + feature[i-1]) / 2\n            left_labels = target[:i]\n            right_labels = target[i:]\n            \n            # Calculate the information gain for this split\n            ig = parent_entropy - (len(left_labels) / len(target)) * entropy(left_labels) - \\\n                 (len(right_labels) / len(target)) * entropy(right_labels)\n            \n            # Update the best split if this one is better\n            if ig > best_ig:\n                best_ig = ig\n                best_threshold = threshold\n    \n    # Return the best threshold and information gain, rounded to 4 decimal places\n    return (round(best_threshold, 4), round(best_ig, 4)) if best_threshold is not None else (None, 0.0)\n\n# Example usage\nfeature = [2, 3, 10, 19]\ntarget = [0, 0, 1, 1]\nprint(best_split(feature, target))  # Output: (6.5, 1.0)\n```\n\nThis Python script defines a function `best_split` that calculates the optimal numerical threshold for a decision tree split based on the information gain criterion. It includes a helper function `entropy` to compute the Shannon entropy of a list of labels. The script is self-contained and includes an example usage that demonstrates how to call the function and interpret its output."}
{"task_id": 286, "completion_id": 0, "completion": "```python\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    return [[0.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    return [[1.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    return [[random.uniform(low, high) for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError(\"Invalid initialization function.\")\n\n# Example usage\nname = \"ones_init\"\nshape = (2, 2)\ninit_fn = get_initializer(name)\noutput = init_fn(shape)\nprint(output)\n```\n\nThis code snippet defines the three initializer functions `zeros_init`, `ones_init`, and `random_uniform_init`, and the `get_initializer` function that retrieves the correct initializer based on the provided name. The `get_initializer` function checks if the name corresponds to a callable function in the global namespace and raises a `ValueError` if it does not."}
{"task_id": 287, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n    out_h = (H - p_h) // s_h + 1\n    out_w = (W - p_w) // s_w + 1\n    \n    # Initialize output and gradient input arrays\n    output = np.zeros((N, C, out_h, out_w))\n    grad_input = np.zeros_like(X)\n    \n    # Forward pass\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    h_start, w_start = i * s_h, j * s_w\n                    h_end, w_end = h_start + p_h, w_start + p_w\n                    output[n, c, i, j] = np.mean(X[n, c, h_start:h_end, w_start:w_end])\n    \n    # Backward pass\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    h_start, w_start = i * s_h, j * s_w\n                    h_end, w_end = h_start + p_h, w_start + p_w\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += accum_grad[n, c, i, j] / (p_h * p_w)\n    \n    # Rounding and converting to list\n    output = np.round(output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    \n    return output, grad_input\n\n# Example usage\nX = np.array([[[[1, 2], [3, 4]]]])\npool_shape = (2, 2)\nstride = (1, 1)\naccum_grad = np.array([[[[1]]]])\noutput, grad_input = average_pool2d(X, pool_shape, stride, accum_grad)\nprint(output, grad_input)\n```\n\nThis code snippet defines a function `average_pool2d` that performs both the forward and backward passes of a 2-D average-pooling layer. The function takes as input a 4-D NumPy array `X` representing the input feature map, a tuple `pool_shape` for the pooling window size, a tuple `stride` for the stride, and a NumPy array `accum_grad` for the gradient of the loss with respect to the pooled output. The function returns a tuple `(output, grad_input)` where `output` is the result of the forward pass and `grad_input` is the gradient propagated back to the input, both rounded to the nearest 4th decimal and converted to Python lists."}
{"task_id": 290, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        return (tree_a.feature == tree_b.feature and\n                np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-8) and\n                compare_trees(tree_a.left, tree_b.left) and\n                compare_trees(tree_a.right, tree_b.right))\n    else:\n        return False\n\n# Example usage:\ntree_1 = Node(0, 3.5,\n              Leaf(np.array([1.0, 0.0])),\n              Leaf(np.array([0.0, 1.0])))\n\ntree_2 = Node(0, 3.5,\n              Leaf(np.array([1.0, 0.0])),\n              Leaf(np.array([0.0, 1.0])))\n\nprint(compare_trees(tree_1, tree_2))  # Output: True\n```\nThis script defines the `Leaf` and `Node` classes and implements the `compare_trees` function to recursively compare two decision trees for equivalence based on the criteria provided."}
{"task_id": 292, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                           parent2: list[list[int | float]],\n                           cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    # Convert the parent lists to numpy arrays for easier manipulation\n    p1 = np.array(parent1)\n    p2 = np.array(parent2)\n    \n    # Validate that the two parent matrices have the same shape\n    if p1.shape != p2.shape:\n        return -1\n    \n    # Create two new children matrices\n    child1 = p1.copy()\n    child2 = p2.copy()\n    \n    # Perform the crossover\n    child1[:, cutoff:] = p2[:, cutoff:]\n    child2[:, cutoff:] = p1[:, cutoff:]\n    \n    # Convert the children back to lists and return them\n    return child1.tolist(), child2.tolist()\n\n# Example usage\nparent1 = [[1, 2, 3], [4, 5, 6]]\nparent2 = [[7, 8, 9], [10, 11, 12]]\ncutoff = 2\nprint(single_point_crossover(parent1, parent2, cutoff))\n```\n\nThis code snippet defines the `single_point_crossover` function as per the task description. It performs the crossover operation on two given parent matrices and returns the offspring as Python lists. The function checks for the validity of the input matrices and performs the crossover operation using NumPy for efficient computation."}
{"task_id": 294, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {label: [] for label in G['_V2I']}\n    for i, edges in enumerate(G['_G']):\n        for edge in edges:\n            source, target, weight = edge\n            adj[source].append((target, weight))\n            if not G['is_directed']:\n                adj[target].append((source, weight))\n    \n    # Remove duplicates and sort the adjacency lists\n    for label in adj:\n        adj[label] = sorted(set(adj[label]), key=lambda x: x[0])\n    \n    return adj\n\n# Example usage\ng = {\n    'is_directed': False,\n    '_V2I': {'A': 0, 'B': 1, 'C': 2},\n    '_G': [\n        [('A', 'B', 3), ('A', 'C', 2)],   # outgoing edges of vertex 'A'\n        [('B', 'A', 3), ('B', 'C', 4)],   # outgoing edges of vertex 'B'\n        [('C', 'A', 2), ('C', 'B', 4)]    # outgoing edges of vertex 'C'\n    ]\n}\n\nresult = to_networkx(g)\nprint(result)\n```\n\nThis code snippet defines the `to_networkx` function that converts a custom graph dictionary into a plain adjacency dictionary as specified in the task. The function handles both directed and undirected graphs, ensuring that for undirected graphs, every edge appears once in each direction and the neighbour lists are sorted alphabetically."}
{"task_id": 296, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    # Convert input to numpy array to handle array-like inputs\n    x = np.asarray(x)\n    # Check if all elements are either 0 or 1\n    return np.all(np.logical_or(x == 0, x == 1))\n\n# Test cases to verify the correctness of the function\nx1 = np.array([[0, 1, 0], [1, 0, 1]])\nx2 = np.array([[0, 1, 2], [1, 0, 1]])\nx3 = np.array([True, False, True])\nx4 = np.array([0.0, 1.0, 0.5])\n\nprint(is_binary(x1))  # Expected: True\nprint(is_binary(x2))  # Expected: False\nprint(is_binary(x3))  # Expected: True\nprint(is_binary(x4))  # Expected: False\n```"}
{"task_id": 298, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    # Tokenize the corpus\n    tokenized_corpus = [sentence.split() for sentence in corpus]\n    \n    # Pad the sentences for N > 1\n    if N > 1:\n        pad_token = \"<bol>\"\n        end_token = \"<eol>\"\n        tokenized_corpus = [[pad_token] * (N-1) + sentence + [end_token] for sentence in tokenized_corpus]\n    \n    # Count N-grams and (N-1)-grams\n    ngram_counts = Counter()\n    prefix_counts = Counter()\n    for sentence in tokenized_corpus:\n        for i in range(len(sentence) - N + 1):\n            ngram = tuple(sentence[i:i+N])\n            ngram_counts[ngram] += 1\n            prefix = tuple(sentence[i:i+N-1])\n            prefix_counts[prefix] += 1\n    \n    # Tokenize and pad the query\n    tokenized_query = query.split()\n    if N > 1:\n        tokenized_query = [pad_token] * (N-1) + tokenized_query + [end_token]\n    \n    # Calculate the log-probability\n    log_prob = 0.0\n    for i in range(len(tokenized_query) - N + 1):\n        ngram = tuple(tokenized_query[i:i+N])\n        prefix = tuple(tokenized_query[i:i+N-1])\n        if ngram_counts[ngram] == 0 or prefix_counts[prefix] == 0:\n            return float('-inf')\n        prob = ngram_counts[ngram] / prefix_counts[prefix]\n        log_prob += math.log(prob)\n    \n    return round(log_prob, 4)\n\n\n# Example usage\ncorpus = [\"a b a\", \"b a b\"]\nquery = \"a b\"\nN = 1\nprint(ngram_log_prob(corpus, query, N))  # Output: -1.3863\n```\n\nThis Python script defines a function `ngram_log_prob` that calculates the total log-probability of a query sentence under an N-gram Maximum Likelihood Estimation (MLE) model trained on a given corpus. The function handles tokenization, padding for N > 1, counting of N-grams and their prefixes, and computes the log-probability of the query sentence. If any N-gram in the query is unseen in the corpus, the function returns negative infinity."}
{"task_id": 302, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n_samples = X.shape[0]\n    \n    # Step 1: Build the weighted adjacency matrix W\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i+1, n_samples):\n            dist = np.linalg.norm(X[i] - X[j])\n            W[i, j] = W[j, i] = 1 / (1 + dist)\n    \n    # Step 2: Compute the graph Laplacian L\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    \n    # Step 3: Obtain the first k eigenvectors of L\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    \n    # Step 4: Run k-means on the rows of E\n    centroids = E[:k].copy()\n    labels = np.zeros(n_samples, dtype=int)\n    for _ in range(100):\n        old_labels = labels.copy()\n        # Assign each point to the nearest centroid\n        for i in range(n_samples):\n            distances = np.linalg.norm(E[i] - centroids, axis=1)\n            labels[i] = np.argmin(distances)\n        # Update centroids\n        for i in range(k):\n            if np.sum(labels == i) > 0:\n                centroids[i] = np.mean(E[labels == i], axis=0)\n            else:\n                # Reinitialize empty cluster centroid\n                centroids[i] = E[np.random.choice(n_samples)]\n        if np.array_equal(old_labels, labels):\n            break\n    \n    return labels.tolist()\n\n# Example usage\nX = np.array([[0, 0], [0.1, 0.1], [5, 5], [5.1, 5]])\nk = 2\nprint(spectral_clustering(X, k))\n```\n\nThis script implements the Spectral Clustering algorithm from scratch, following the steps outlined in the task description. It uses NumPy for numerical operations and does not rely on any external libraries for the clustering process."}
{"task_id": 303, "completion_id": 0, "completion": "```python\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_mine, prev_label = params[prev_ix]\n    curr_mine, curr_label = params[ix]\n    \n    output = \"------------------------- DEBUG -------------------------\\n\"\n    output += f\"Mine (prev) [{prev_label}]:\\n{prev_mine}\\n\\n\"\n    output += f\"Theirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\n\"\n    output += f\"Mine [{curr_label}]:\\n{curr_mine}\\n\\n\"\n    output += f\"Theirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n\"\n    output += \"----------------------- END DEBUG -----------------------\"\n    \n    return output\n\n# Example usage\nparams = [(\"output1\",\"case1\"), (\"output2\",\"case2\"), (\"output3\",\"case3\")]\ngolds  = {\"case1\": \"expected1\", \"case2\": \"expected2\", \"case3\": \"expected3\"}\nix      = 1\nwarn_str = \"\\nWarning: mismatch detected.\"\n\nprint(err_fmt(params, golds, ix, warn_str))\n```\n\nThis Python function `err_fmt` follows the exact layout and requirements specified in the task description. It takes the `params` list, `golds` dictionary, an index `ix`, and an optional warning string `warn_str` to generate a formatted debugging string. The example usage demonstrates how to call the function with the provided inputs and prints the formatted output string."}
{"task_id": 304, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.column_stack((np.ones(X.shape[0]), X))\n    \n    N, M = X.shape\n    \n    if isinstance(mu, (int, float)):\n        mu = np.full(M, mu)\n    \n    if V is None:\n        V = np.eye(M)\n    elif isinstance(V, (int, float)):\n        V = V * np.eye(M)\n    elif isinstance(V, (list, tuple)):\n        V = np.diag(V)\n    \n    V_inv = np.linalg.inv(V)\n    X_T_X = X.T @ X\n    Sigma_b_inv = V_inv + X_T_X\n    Sigma_b = np.linalg.inv(Sigma_b_inv)\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    \n    return [round(x, 4) for x in mu_b]\n\n# Example usage\nX = np.array([[1.0], [2.0], [3.0]])\ny = np.array([2.0, 4.0, 6.0])\nalpha = 1.0\nbeta = 2.0\nmu = 0.0\nV = 1.0\nfit_intercept = True\n\nprint(bayesian_posterior_mean(X, y, alpha, beta, mu, V, fit_intercept))\n```\n\nThis script defines the function `bayesian_posterior_mean` that computes the posterior mean of the coefficients in Bayesian linear regression with an unknown noise variance, as per the task description. The function is self-contained and includes the necessary imports. It also includes an example usage that matches the provided example."}
{"task_id": 308, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(mel):\n        return 700 * (10**(mel / 2595) - 1)\n\n    # Convert limits to Mel scale and generate n_filters+2 equally-spaced values\n    mel_points = np.linspace(hz_to_mel(min_freq), hz_to_mel(max_freq), n_filters + 2)\n\n    # Convert Mel values back to Hertz\n    hz_points = mel_to_hz(mel_points)\n\n    # Initialize the filterbank matrix\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n\n    # Compute the center frequencies of the DFT bins\n    bin_frequencies = np.linspace(0, fs / 2, N // 2 + 1)\n\n    for i in range(n_filters):\n        # Find the points of the triangle\n        left_hz, center_hz, right_hz = hz_points[i], hz_points[i + 1], hz_points[i + 2]\n        for k, freq in enumerate(bin_frequencies):\n            # Compute the left and right slopes of the triangle\n            if freq <= left_hz:\n                filterbank[i, k] = 0\n            elif left_hz < freq <= center_hz:\n                filterbank[i, k] = (freq - left_hz) / (center_hz - left_hz)\n            elif center_hz < freq <= right_hz:\n                filterbank[i, k] = (right_hz - freq) / (right_hz - center_hz)\n            else:\n                filterbank[i, k] = 0\n\n    if normalize:\n        for i in range(n_filters):\n            filterbank[i] *= 2 / (hz_points[i + 2] - hz_points[i])\n\n    # Convert to list of lists and round to 4 decimal places\n    filterbank = [[round(val, 4) for val in row] for row in filterbank.tolist()]\n\n    return filterbank\n\n# Example usage\nN = 8\nn_filters = 3\nfs = 8000\nmin_freq = 0\nmax_freq = None\nnormalize = False\n\nprint(mel_filterbank(N, n_filters, fs, min_freq, max_freq, normalize))\n```\n\nThis script defines the `mel_filterbank` function that constructs a Mel filterbank matrix according to the specifications provided. The function uses helper functions to convert between Hertz and Mel scales, and it iterates over each filter and DFT bin to compute the triangular filter weights. The resulting matrix is normalized if specified and returned as a list of lists with values rounded to 4 decimal places."}
{"task_id": 312, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    \n    a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n        window_len += 1\n    \n    n = np.arange(window_len)\n    bh_window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    \n    if not symmetric:\n        bh_window = bh_window[:-1]\n    \n    return [round(x, 4) for x in bh_window]\n\n# Example usage\nprint(blackman_harris(5, symmetric=True))  # Output: [0.0001, 0.2175, 1.0, 0.2175, 0.0001]\nprint(blackman_harris(5, symmetric=False)) # Output: [0.0001, 0.2175, 1.0, 0.2175, 0.0001]\n```"}
{"task_id": 313, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef digamma(x):\n    \"\"\"Approximate the digamma function using recursion and asymptotic expansion.\"\"\"\n    # Shift x to a larger value if it is less than 6\n    if x < 6:\n        for _ in range(6 - int(x)):\n            x += 1\n            x -= 1 / x\n    # Apply the asymptotic expansion\n    return math.log(x) - 1 / (2 * x) - 1 / (12 * x**2) + 1 / (120 * x**4) - 1 / (252 * x**6)\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    # Compute the digamma values\n    digamma_t = digamma(gamma[d][t])\n    digamma_sum = digamma(sum(gamma[d]))\n    # Calculate the expected log and round to 4 decimal places\n    return round(digamma_t - digamma_sum, 4)\n\n# Example usage\ngamma = np.array([[4, 5, 6], [1, 1, 1]])\nd = 0\nt = 2\nprint(expected_log_dirichlet(gamma, d, t))  # Output: -0.9682\n```\n\nThis code defines a `digamma` function to approximate the digamma function using recursion and asymptotic expansion, and an `expected_log_dirichlet` function to compute the expectation of the logarithm of the *t*-th component of a Dirichlet-distributed vector with parameters specified by the *d*-th row of the `gamma` matrix. The result is rounded to four decimal places as required."}
{"task_id": 317, "completion_id": 0, "completion": "```python\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    header = '-' * 25 + ' DEBUG ' + '-' * 25 + '\\n'\n    footer = '\\n' + '-' * 23 + ' END DEBUG ' + '-' * 23 + '\\n'\n    \n    prev_ix = max(ix - 1, 0)\n    prev_prediction, prev_label = params[prev_ix]\n    prev_gold = golds[prev_label]\n    \n    curr_prediction, curr_label = params[ix]\n    curr_gold = golds[curr_label]\n    \n    prev_block = f\"Mine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\n\"\n    curr_block = f\"Mine [{curr_label}]:\\n{curr_prediction}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n\"\n    \n    return header + prev_block + curr_block + footer\n\n# Example usage\nparams = [(\"cat\", \"A\"), (\"dog\", \"B\")]\ngolds  = {\"A\": \"feline\", \"B\": \"canine\"}\nix     = 1\nprint(err_fmt(params, golds, ix))\n```\n\nThis code defines the `err_fmt` function as specified, which generates a formatted debug report string based on the provided parameters. The function constructs the report by first determining the previous and current predictions and their corresponding gold texts, then formatting these into the required structure with the header and footer."}
{"task_id": 318, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    estimators = []\n    estimator_weights = []\n\n    for _ in range(n_estimators):\n        best_error = float('inf')\n        best_stump = None\n        for feature in range(n_features):\n            for threshold in np.unique(X_train[:, feature]):\n                for polarity in [-1, 1]:\n                    prediction = polarity * np.sign(X_train[:, feature] - threshold)\n                    error = np.sum(weights[y_train != prediction])\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feature, threshold, polarity)\n        \n        feature, threshold, polarity = best_stump\n        prediction = polarity * np.sign(X_train[:, feature] - threshold)\n        error = np.sum(weights[y_train != prediction])\n        alpha = 0.5 * math.log((1 - error) / error)\n        weights *= np.exp(-alpha * y_train * prediction)\n        weights /= np.sum(weights)\n        \n        estimators.append(best_stump)\n        estimator_weights.append(alpha)\n\n    def predict_sample(sample):\n        return sum(alpha * polarity * np.sign(sample[feature] - threshold)\n                   for (feature, threshold, polarity), alpha in zip(estimators, estimator_weights))\n    \n    predictions = [1 if predict_sample(sample) > 0 else -1 for sample in X_test]\n    return predictions\n\n# Example usage:\nX_train = np.array([[ 1,  2],\n                    [ 2,  1],\n                    [-1, -2],\n                    [-2, -1]])\ny_train = np.array([ 1, 1, -1, -1])\nX_test  = np.array([[ 1,  1],\n                    [-1, -1]])\nn_estimators = 3\n\npredictions = adaboost_predict(X_train, y_train, X_test, n_estimators)\nprint(predictions)  # Output: [1, -1]\n```"}
{"task_id": 329, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    \n    if positive_only:\n        # Calculate the non-negative frequencies\n        freqs = np.fft.rfftfreq(N, d=1/fs)\n    else:\n        # Calculate all frequencies\n        freqs = np.fft.fftfreq(N, d=1/fs)\n    \n    # Round to 4 decimal places and convert to list\n    return np.round(freqs, 4).tolist()\n\n# Example usage\nprint(dft_bins(8, 8000, True))  # [0.0, 1000.0, 2000.0, 3000.0, 4000.0]\nprint(dft_bins(8, 8000, False))  # [0.0, 1000.0, 2000.0, 3000.0, -4000.0, -3000.0, -2000.0, -1000.0]\n```\n\nThis solution uses NumPy's `fft.rfftfreq` for the positive-only frequencies and `fft.fftfreq` for the full list of frequencies, ensuring the output matches the specified requirements."}
{"task_id": 331, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    \n    # Calculate the number of OOB predictions for each sample\n    num_oob_predictions = np.sum(oob_mask, axis=1)\n    \n    # Filter out samples with no OOB predictions\n    valid_samples = num_oob_predictions > 0\n    if not np.any(valid_samples):\n        return -1\n    \n    # Calculate the average OOB prediction for each valid sample\n    oob_predictions = predictions[valid_samples] * oob_mask[valid_samples]\n    avg_oob_predictions = np.sum(oob_predictions, axis=1) / num_oob_predictions[valid_samples]\n    \n    # Calculate the squared error for each valid sample\n    y_true_valid = y_true[valid_samples]\n    squared_errors = (y_true_valid - avg_oob_predictions) ** 2\n    \n    # Calculate the mean of the squared errors\n    mse = np.mean(squared_errors)\n    \n    return round(mse, 4)\n\n# Example usage\ny_true = [3, 5, 2, 7]\npredictions = [[2.5, 3.2],\n               [4.8, 5.1],\n               [2.1, 2.5],\n               [6.5, 7.2]]\noob_mask = [[True, False],\n            [False, True],\n            [True, True],\n            [False, False]]\n\nprint(oob_mse(y_true, predictions, oob_mask))\n```\n\nThis code snippet defines a function `oob_mse` that calculates the out-of-bag mean squared error for a Random Forest regressor, following the task description provided. It handles the case where no sample has an OOB prediction by returning -1, and it rounds the result to 4 decimal places as required."}
{"task_id": 332, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    # Step 1: Compute the support for every item\n    item_counts = Counter(item for transaction in transactions for item in set(transaction))\n    \n    # Step 2: Discard items whose support is smaller than min_support\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_support}\n    \n    # Step 3: Create a global ordering of the remaining items\n    ordered_items = sorted(frequent_items.items(), key=lambda x: (-x[1], x[0]))\n    \n    # Initialize the root of the FP-Tree\n    root = {\"support\": 0, \"children\": {}}\n    \n    # Step 4: For every transaction, update the tree\n    for transaction in transactions:\n        # Remove duplicates, keep only frequent items, and reorder them\n        filtered_transaction = [item for item in transaction if item in frequent_items]\n        filtered_transaction.sort(key=lambda x: ordered_items.index((x, frequent_items[x])))\n        \n        # Walk from the root and update/extend the path\n        current_node = root\n        for item in filtered_transaction:\n            if item not in current_node[\"children\"]:\n                current_node[\"children\"][item] = {\"support\": 0, \"children\": {}}\n            current_node = current_node[\"children\"][item]\n            current_node[\"support\"] += 1\n    \n    return root\n\n# Example usage\ntransactions = [['a','b','c'], ['a','b'], ['a','c']]\nmin_support = 2\nprint(build_fp_tree(transactions, min_support))\n```\n\nThis script defines the `build_fp_tree` function that constructs an FP-Tree from a list of transactions and a minimum support threshold. The function follows the steps outlined in the task description, ensuring that the tree is built according to the specified rules."}
{"task_id": 336, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", Y: list[list[int | float]] | \"np.ndarray\" | None = None, c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    # Convert inputs to NumPy arrays for easier manipulation\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    \n    # Check if the number of columns in X and Y are the same\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # Compute the kernel matrix\n    K = np.dot(X, Y.T) + c0\n    \n    # Round the kernel matrix to 4 decimal places and convert to list of lists\n    K_rounded = np.round(K, decimals=4).tolist()\n    \n    return K_rounded\n\n# Example usage\nX = [[1, 2, 3], [4, 5, 6]]\nY = [[7, 8, 9]]\nc0 = 0\nprint(linear_kernel(X, Y, c0))\n```\n\nThis code snippet defines the `linear_kernel` function as specified in the task, which computes the linear kernel matrix for given input vectors `X` and `Y` (or `X` alone if `Y` is not provided). It handles both Python lists and NumPy arrays as inputs, checks for compatibility in dimensions, and returns the kernel matrix rounded to 4 decimal places or `-1` if the input dimensions are incompatible."}
{"task_id": 340, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    # Update biased first and second moment estimates\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * (grad ** 2)\n    \n    # Compute bias-corrected first and second moment estimates\n    m_t_hat = m_t / (1 - beta1 ** t)\n    v_t_hat = v_t / (1 - beta2 ** t)\n    \n    # Update parameter\n    param_t = param - lr * m_t_hat / (np.sqrt(v_t_hat) + eps)\n    \n    # Convert to lists and round to 8 decimal places\n    param_t_list = np.round(param_t, 8).tolist()\n    m_t_list = np.round(m_t, 8).tolist()\n    v_t_list = np.round(v_t, 8).tolist()\n    \n    return (param_t_list, m_t_list, v_t_list)\n\n# Example usage\nparam = np.array([0.1, -0.2])\ngrad = np.array([0.01, -0.01])\nt = 1\nm = np.array([0., 0.])\nv = np.array([0., 0.])\nlr = 0.001\nbeta1 = 0.9\nbeta2 = 0.999\neps = 1e-8\n\nupdated_param, new_m, new_v = adam_update(param, grad, t, m, v, lr, beta1, beta2, eps)\nprint(updated_param, new_m, new_v)\n```\n\nThis code defines the `adam_update` function that performs a single step of the Adam optimization algorithm. It takes the current parameter values, gradients, moment estimates, and other hyperparameters as input, and returns the updated parameter and moment estimates as lists rounded to 8 decimal places. The example usage at the end demonstrates how to call the function with the provided parameters."}
{"task_id": 343, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                          rewards: list[float] | np.ndarray,\n                          retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # Calculate the number of samples to retain\n    num_retain = int(retain_prcnt * len(rewards))\n    \n    # Sort the rewards and get the indices of the top rewards\n    sorted_indices = np.argsort(rewards)[::-1][:num_retain]\n    \n    # Select the top theta_samples based on the sorted indices\n    elite_samples = theta_samples[sorted_indices]\n    \n    # Calculate the mean and variance of the elite samples\n    mean = np.mean(elite_samples, axis=0).round(4).tolist()\n    variance = np.var(elite_samples, axis=0).round(4).tolist()\n    \n    return mean, variance\n\n# Example usage\ntheta_samples = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])\nrewards = [10, 20, 30, 40, 50]\nretain_prcnt = 0.4\nprint(cross_entropy_update(theta_samples, rewards, retain_prcnt))\n```\n\nThis code snippet defines the function `cross_entropy_update` which implements the core numerical step of the Cross-Entropy Method (CEM) as described in the task. It takes in the `theta_samples`, `rewards`, and `retain_prcnt` as inputs and returns the mean and variance of the retained samples, rounded to four decimal places."}
{"task_id": 353, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    \n    label_counts = Counter(labels)\n    total_labels = len(labels)\n    entropy_value = 0.0\n    \n    for count in label_counts.values():\n        probability = count / total_labels\n        entropy_value -= probability * math.log2(probability)\n    \n    return round(entropy_value, 5)\n\n# Test cases to verify the correctness of the code\nassert entropy([0, 0, 1, 1, 1]) == 0.97095\nassert entropy([1, 1, 1, 1, 1]) == 0.0\nassert entropy([]) == 0.0\nassert entropy([0, 1, 2, 3, 4]) == 2.32193\nassert entropy([1, 2, 2, 3, 3, 3]) == 1.45915\n```"}
{"task_id": 354, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kernel_rows, kernel_cols, _, out_ch = W.shape\n\n    # Apply dilation\n    if dilation > 0:\n        W = np.pad(W, ((0, 0), (dilation, 0), (dilation, 0), (0, 0)), mode='constant')\n\n    # Adjust kernel size after dilation\n    kernel_rows, kernel_cols, _, _ = W.shape\n\n    # Handle padding\n    if isinstance(pad, int):\n        pad = (pad, pad, pad, pad)\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pad = (pad[0], pad[0], pad[1], pad[1])\n    elif pad == 'same':\n        pad = ((kernel_rows - 1) // 2, (kernel_rows - 1) // 2, (kernel_cols - 1) // 2, (kernel_cols - 1) // 2)\n\n    # Apply padding to X\n    X_padded = np.pad(X, ((0, 0), (pad[0], pad[1]), (pad[2], pad[3]), (0, 0)), mode='constant')\n\n    # Compute output dimensions\n    out_rows = (in_rows + pad[0] + pad[1] - kernel_rows) // stride + 1\n    out_cols = (in_cols + pad[2] + pad[3] - kernel_cols) // stride + 1\n\n    # Initialize output array\n    output = np.zeros((n_ex, out_rows, out_cols, out_ch))\n\n    # Convert X and W to im2col format\n    X_col = im2col(X_padded, kernel_rows, kernel_cols, stride)\n    W_col = W.reshape(-1, out_ch)\n\n    # Perform GEMM\n    output_col = X_col @ W_col\n\n    # Reshape output back to 4D\n    output = output_col.reshape(n_ex, out_rows, out_cols, out_ch)\n\n    return output.tolist()\n\ndef im2col(X: \"np.ndarray\", kernel_rows: int, kernel_cols: int, stride: int):\n    \"\"\"Converts an image to a column matrix.\n\n    Args:\n        X: Input image as a 4D NumPy array.\n        kernel_rows: Height of the kernel.\n        kernel_cols: Width of the kernel.\n        stride: Stride of the convolution.\n\n    Returns:\n        A 2D matrix where each column is a flattened patch of the image.\n    \"\"\"\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    out_rows = (in_rows - kernel_rows) // stride + 1\n    out_cols = (in_cols - kernel_cols) // stride + 1\n\n    # Initialize column matrix\n    cols = np.zeros((kernel_rows * kernel_cols * in_ch, out_rows * out_cols * n_ex))\n\n    # Fill column matrix\n    for index in range(n_ex):\n        image = X[index]\n        patch_index = 0\n        for i in range(0, in_rows - kernel_rows + 1, stride):\n            for j in range(0, in_cols - kernel_cols + 1, stride):\n                patch = image[i:i+kernel_rows, j:j+kernel_cols, :].reshape(-1)\n                cols[:, patch_index + index * out_rows * out_cols] = patch\n                patch_index += 1\n\n    return cols\n\n# Example usage\nX = np.array([[[[1.],[2.],[3.]], \n               [[4.],[5.],[6.]],\n               [[7.],[8.],[9.]]]])\nW = np.array([[[[1.]],[[0.]]],\n              [[[0.]],[[-1.]]]])\nstride = 1\npad = 0\n\nresult = conv2D(X, W, stride, pad)\nprint(result)\n```\n\nThis script defines a function `conv2D` that performs 2D convolution using the im2col + GEMM strategy. It also includes a helper function `im2col` to convert the input image into a column matrix format suitable for matrix multiplication. The function handles padding, dilation, and different padding specifications as described in the task. The output is returned as a Python list."}
{"task_id": 355, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # Standardize the data\n    centered_data = data - np.mean(data, axis=0)\n    \n    if solver == \"svd\":\n        # Use SVD\n        U, S, Vt = np.linalg.svd(centered_data, full_matrices=False)\n        components = Vt[:n_components]\n    elif solver == \"eigen\":\n        # Use Eigen-decomposition of the covariance matrix\n        cov_matrix = np.cov(centered_data, rowvar=False, ddof=1)\n        eigenvalues, eigenvectors = np.linalg.eigh(cov_matrix)\n        # Sort eigenvalues and eigenvectors\n        idx = eigenvalues.argsort()[::-1]\n        eigenvalues = eigenvalues[idx]\n        eigenvectors = eigenvectors[:, idx]\n        components = eigenvectors.T[:n_components]\n    else:\n        raise ValueError(\"Solver must be 'svd' or 'eigen'\")\n    \n    # Make the sign of every kept direction deterministic\n    for i in range(n_components):\n        if components[i][np.argmax(np.abs(components[i]))] < 0:\n            components[i] *= -1\n    \n    # Project the centred data onto the retained directions\n    scores = np.dot(centered_data, components.T)\n    \n    # Calculate explained variance ratio\n    total_variance = np.sum(np.var(centered_data, axis=0, ddof=1))\n    explained_variance = np.var(scores, axis=0, ddof=1)\n    explained_variance_ratio = explained_variance / total_variance\n    \n    # Round the results\n    scores_rounded = np.round(scores, 4).tolist()\n    explained_variance_ratio_rounded = np.round(explained_variance_ratio, 4).tolist()\n    \n    return scores_rounded, explained_variance_ratio_rounded\n\n# Example usage\ndata = np.array([[1, 2], [3, 4], [5, 6]])\nn_components = 1\nsolver = \"svd\"\nscores, explained_variance_ratio = pca_transform(data, n_components, solver)\nprint(scores, explained_variance_ratio)\n```\n\nThis script defines the `pca_transform` function that performs PCA with the specified constraints and examples. It handles both SVD and eigen-decomposition methods for finding the principal components, ensures the sign of the components is deterministic, and returns the projected data and explained variance ratios as required."}
{"task_id": 356, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # For classification, return the index of the maximum probability\n        return np.argmax(leaf.value)\n    else:\n        # For regression, return the scalar value\n        return leaf.value\n\n# Example usage:\n# Classification example\nleaf_classification = Leaf([0.25, 0.55, 0.20])\nprint(leaf_predict(leaf_classification, classifier=True))  # Output: 1\n\n# Regression example\nleaf_regression = Leaf(15.75)\nprint(leaf_predict(leaf_regression, classifier=False))  # Output: 15.75\n```\n\nThis code snippet defines a `Leaf` class to hold the value of a leaf node in a decision tree, and a function `leaf_predict` that returns the appropriate prediction based on whether the tree is a classification or regression tree. The function uses `numpy.argmax` to find the index of the maximum probability for classification tasks and simply returns the stored value for regression tasks."}
{"task_id": 357, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    # Initialize centroids with the first K samples\n    centroids = data[:K].copy()\n    \n    for _ in range(max_iters):\n        # Assign each sample to the nearest centroid\n        distances = np.sqrt(((data - centroids[:, np.newaxis])**2).sum(axis=2))\n        labels = np.argmin(distances, axis=0)\n        \n        # Recompute centroids as the mean of the samples assigned to them\n        new_centroids = np.array([data[labels == k].mean(axis=0) if np.any(labels == k) else centroids[k] for k in range(K)])\n        \n        # Check for convergence\n        if np.allclose(centroids, new_centroids, atol=1e-6):\n            break\n        \n        centroids = new_centroids\n    \n    # Sort centroids lexicographically and round to 4 decimals\n    sorted_centroids = np.round(np.sort(centroids, axis=0), decimals=4).tolist()\n    \n    return sorted_centroids\n\n# Example usage\ndata = np.array([[1, 1], [1, 2], [2, 1], [8, 8], [9, 8], [8, 9]])\nK = 2\nprint(kmeans(data, K))\n```\n\nThis code snippet implements the K-Means clustering algorithm as described in the task. It initializes the centroids with the first K samples, iteratively assigns each sample to the nearest centroid, recomputes the centroids, and checks for convergence. The final centroids are sorted lexicographically and rounded to four decimal places before being returned."}
{"task_id": 362, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | \"np.ndarray\") -> list[list[float]] | int:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert the input to a NumPy array of floats\n    matrix = np.array(data, dtype=float)\n    \n    # Compute the sum of every row\n    row_sums = matrix.sum(axis=1)\n    \n    # Check if any row sums to 0\n    if np.any(row_sums == 0):\n        return -1\n    \n    # Divide every element in a row by that row's sum\n    stochastic_matrix = matrix / row_sums[:, np.newaxis]\n    \n    # Round every entry to 4 decimal places\n    stochastic_matrix = np.round(stochastic_matrix, 4)\n    \n    # Convert the NumPy array back to a Python list of lists\n    return stochastic_matrix.tolist()\n\n# Example usage\ndata = [[1, 2, 3], [4, 5, 6]]\nprint(row_stochastic_matrix(data))\n```\n\nThis code snippet follows the task requirements and provides a solution for converting a 2-D list or NumPy array into a row-stochastic matrix, with the necessary checks and conversions as specified."}
{"task_id": 363, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    def check_continuous(space: Space) -> bool:\n        if isinstance(space, Box):\n            return True\n        elif isinstance(space, (Tuple, Dict)):\n            if isinstance(space, Tuple):\n                return all(check_continuous(sub_space) for sub_space in space.spaces)\n            else:  # Dict\n                return all(check_continuous(sub_space) for sub_space in space.spaces.values())\n        return False\n\n    cont_action = not tuple_action or check_continuous(env.action_space)\n    cont_obs = not tuple_obs or check_continuous(env.observation_space)\n\n    return cont_action, cont_obs\n\n# Example usage\nenv = Env(Box(low=-1.0, high=1.0, shape=(3,)), Box(low=-1.0, high=1.0, shape=(2,)))\nprint(is_continuous(env, False, False))  # (True, True)\n```"}
{"task_id": 369, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    # Determine the shape of the running prediction based on the first update\n    first_update = updates[0]\n    if regression:\n        running_pred = np.zeros(first_update.shape)\n    else:\n        running_pred = np.zeros((first_update.shape[0], first_update.shape[1]))\n    \n    # Aggregate the updates\n    for update in updates:\n        running_pred -= learning_rate * update\n    \n    # Return the final prediction\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        # Apply softmax to convert logits to probabilities\n        exps = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        probabilities = exps / np.sum(exps, axis=1, keepdims=True)\n        # Return the class with the highest probability\n        return np.argmax(probabilities, axis=1)\n\n# Example usage\nupdates = [np.array([[0.2, -0.1, 0.1],\n                     [-0.3, 0.4, -0.1]]),\n           np.array([[0.1, 0.2, -0.3],\n                     [0.2, -0.2, 0.0]])]\nlearning_rate = 0.5\nregression = False\n\nprint(gradient_boosting_predict(updates, learning_rate, regression))\n```\n\nThis code defines the `gradient_boosting_predict` function that aggregates the outputs of Gradient Boosting trees according to the specified rules. It handles both regression and classification tasks, applying the appropriate post-processing steps for each case."}
{"task_id": 371, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, _, out_channels = W.shape\n    effective_kernel_width = kernel_width + (kernel_width - 1) * dilation\n\n    if pad == \"same\":\n        out_length = int(np.ceil(signal_length / stride))\n        total_pad = max(0, (out_length - 1) * stride + effective_kernel_width - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    elif isinstance(pad, int):\n        p_left = p_right = pad\n    else:\n        p_left, p_right = pad\n\n    padded_signal_length = signal_length + p_left + p_right\n    X_padded = np.zeros((n_examples, padded_signal_length, in_channels))\n    X_padded[:, p_left:p_left+signal_length, :] = X\n\n    output_length = int((padded_signal_length - effective_kernel_width) / stride) + 1\n    output = np.zeros((n_examples, output_length, out_channels))\n\n    for i in range(n_examples):\n        for j in range(output_length):\n            for k in range(out_channels):\n                start = j * stride\n                end = start + effective_kernel_width\n                window = X_padded[i, start:end:dilation+1, :]\n                output[i, j, k] = np.sum(window * W[:, :, k])\n\n    return output.tolist()\n\n# Example usage\nX = np.array([[[1],[2],[3],[4],[5]]])\nW = np.array([[[1]],[[0]],[[-1]]])\nstride = 1\npad = \"same\"\ndilation = 0\n\nresult = conv1D(X, W, stride, pad, dilation)\nprint(result)\n```\n\nThis script defines a function `conv1D` that performs a 1-D cross-correlation with support for batches, multiple input/output channels, padding, stride, and dilation. The function returns the result as a Python list. The example usage at the end demonstrates how to call the function with the provided parameters and prints the result."}
{"task_id": 373, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gini(y: list[int] | np.ndarray) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    \n    # Convert to numpy array for easier manipulation\n    y = np.array(y)\n    # Count the number of unique classes and their occurrences\n    unique, counts = np.unique(y, return_counts=True)\n    # Calculate the relative frequencies\n    freqs = counts / len(y)\n    # Calculate the Gini impurity\n    gini_impurity = 1 - np.sum(freqs**2)\n    \n    return round(gini_impurity, 4)\n\n# Example usage\ny = [0, 1, 1, 0, 2]\nprint(gini(y))  # Output: 0.64\n```\n\nThis code snippet defines a function `gini` that calculates the Gini impurity of a given list or numpy array of integer labels. It handles the case of an empty input by returning `0.0` and uses numpy for efficient computation of unique labels and their frequencies. The Gini impurity is then calculated according to the formula provided and returned, rounded to four decimal places."}
{"task_id": 374, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\"\"\"\n    m, n = X.shape\n    if m != len(y):\n        return -1\n    \n    # Initialize parameters\n    theta = np.zeros(n)\n    b = 0.0\n    \n    for _ in range(n_iterations):\n        # Predictions\n        y_pred = np.dot(X, theta) + b\n        # Compute gradients\n        dw = 2/m * np.dot(X.T, (y_pred - y))\n        db = 2/m * np.sum(y_pred - y)\n        # Update parameters\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    \n    # Round the parameters to 4 decimal places\n    theta_rounded = [round(x, 4) for x in theta]\n    b_rounded = round(b, 4)\n    \n    return (theta_rounded, b_rounded)\n\n# Example usage\nX = np.array([[1, 2], [2, 0], [3, 1]])\ny = np.array([5, 6, 7])\nlearning_rate = 0.01\nn_iterations = 10000\nprint(linear_regression_gd(X, y, learning_rate, n_iterations))\n```\n\nThis code snippet defines a function `linear_regression_gd` that implements batch gradient descent for training a multiple linear regression model. The function takes a feature matrix `X`, a target vector `y`, a learning rate, and the number of iterations as input. It returns the learned parameters (weights and bias) rounded to four decimal places. If the input data are inconsistent (different number of samples in `X` and `y`), the function returns `-1`."}
{"task_id": 376, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Convert the list of lists to a NumPy array\n    X_np = np.array(X)\n    \n    # Check if the matrix is square\n    if X_np.shape[0] != X_np.shape[1]:\n        return False\n    \n    # Check if the matrix is equal to its transpose within a tolerance\n    return np.allclose(X_np, X_np.T, atol=1e-08)\n\n# Example usage\nA = [[1, 2, 3], [2, 5, 6], [3, 6, 9]]\nprint(is_symmetric(A))  # Output: True\n```\n\nThis code snippet defines a function `is_symmetric` that checks if a given 2-D numeric array is symmetric with respect to its main diagonal, considering the tolerance for floating-point comparisons as specified."}
{"task_id": 377, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Computes the negative gradient of the logistic loss function for binary classification.\n    \n    Parameters:\n    y (list): A list of binary class labels (0 or 1).\n    f (list): A list of current prediction scores (floats).\n    \n    Returns:\n    list: A list of negative gradients rounded to four decimal places.\n         Returns -1 if y contains values other than 0 or 1.\n    \"\"\"\n    # Check if y contains only 0 or 1\n    if not all(label in [0, 1] for label in y):\n        return -1\n    \n    # Convert y to {-1, 1}\n    y_prime = np.array(y) * 2 - 1\n    \n    # Compute the negative gradient\n    g = y_prime / (1 + np.exp(y_prime * np.array(f)))\n    \n    # Round to four decimal places\n    g_rounded = [round(gradient, 4) for gradient in g]\n    \n    return g_rounded\n\n# Example usage\ny = [0, 1, 0]\nf = [0.0, 0.5, -0.5]\nprint(logistic_negative_gradient(y, f))\n```\n\nThis code snippet defines a function `logistic_negative_gradient` that calculates the negative gradient of the logistic loss function for binary classification, as described in the task. It checks if the labels are valid, converts them to the {-1, 1} set, computes the negative gradient, and rounds the result to four decimal places."}
{"task_id": 380, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    # Constants from the SELU paper\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n\n    # Convert input to numpy array for easy manipulation\n    x = np.array(x)\n\n    if order == 0:\n        # SELU(x) = scale * ELU(x, alpha)\n        result = np.where(x > 0, scale * x, scale * alpha * (np.exp(x) - 1))\n    elif order == 1:\n        # First derivative\n        result = np.where(x > 0, scale, scale * alpha * np.exp(x))\n    elif order == 2:\n        # Second derivative\n        result = np.where(x > 0, 0, scale * alpha * np.exp(x))\n    else:\n        raise ValueError(\"Order must be 0, 1, or 2\")\n\n    # Round to 4 decimal places and convert to list\n    return np.round(result, 4).tolist()\n\n# Example usage\nx = np.array([-1.0, 0.0, 1.0])\nprint(selu(x, 0))  # Output: [-1.1113, 0.0, 1.0507]\nprint(selu(x, 1))  # Output: [0.3476, 1.0507, 1.0507]\nprint(selu(x, 2))  # Output: [0.3476, 0.0, 0.0]\n```"}
{"task_id": 387, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(x)\n    predictions = np.full(n_samples, np.mean(y))\n    \n    for _ in range(n_estimators):\n        residuals = y - predictions\n        \n        # Sort the samples by their x value\n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        sorted_residuals = residuals[sorted_indices]\n        \n        # Evaluate every possible split\n        best_split = None\n        best_error = float('inf')\n        for i in range(1, n_samples):\n            if sorted_x[i] != sorted_x[i-1]:\n                split = (sorted_x[i] + sorted_x[i-1]) / 2\n                left_mean = np.mean(sorted_residuals[:i])\n                right_mean = np.mean(sorted_residuals[i:])\n                error = np.sum((sorted_residuals[:i] - left_mean) ** 2) + np.sum((sorted_residuals[i:] - right_mean) ** 2)\n                if error < best_error:\n                    best_error = error\n                    best_split = split\n        \n        # If no valid split, predict the global mean residual\n        if best_split is None:\n            stump_predictions = np.full(n_samples, np.mean(residuals))\n        else:\n            stump_predictions = np.where(x <= best_split, np.mean(residuals[x <= best_split]), np.mean(residuals[x > best_split]))\n        \n        # Update the running prediction\n        predictions += learning_rate * stump_predictions\n    \n    return np.round(predictions, 4).tolist()\n\n# Example usage\nx = [1, 2]\ny = [2, 4]\nn_estimators = 1\nlearning_rate = 0.5\nprint(gradient_boosting_1d(x, y, n_estimators, learning_rate))\n```\n\nThis code implements a simple 1D gradient boosting regressor using decision stumps as base learners. It follows the specified procedure and constraints, including the use of `numpy` for calculations and the rounding of predictions to four decimal places."}
{"task_id": 394, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-8\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    \n    Eg = rho * Eg + (1 - rho) * grad**2\n    w = w - (learning_rate * grad) / (np.sqrt(Eg) + epsilon)\n    \n    return np.round(w, 4).tolist(), np.round(Eg, 4).tolist()\n\n# Example usage\nw = np.array([1.0, 2.0])\ngrad = np.array([0.1, -0.2])\nEg = None\nlearning_rate = 0.01\nrho = 0.9\n\nupdated_w, updated_Eg = rmsprop_update(w, grad, Eg, learning_rate, rho)\nprint(updated_w, updated_Eg)\n```\n\nThis code snippet defines the `rmsprop_update` function which performs one update step of the RMSprop optimizer. It takes the current parameters `w`, the gradient `grad`, the running average of the squared gradients `Eg`, the learning rate `learning_rate`, and the decay rate `rho` as inputs. The function initializes `Eg` if it is `None`, updates `w` and `Eg` according to the RMSprop algorithm, and returns the updated parameters and running average as rounded Python lists."}
{"task_id": 398, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if derivative:\n        # Compute the derivative of ELU\n        result = np.where(x >= 0, 1, alpha * np.exp(x) + alpha)\n    else:\n        # Compute the ELU activation\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    \n    # Round the result to 4 decimal places and convert to list\n    return [round(float(num), 4) for num in result]\n\n# Example usage\nx = np.array([-2, -1, 0, 1, 2])\nalpha = 0.1\nderivative = False\nprint(elu(x, alpha, derivative))  # Output: [-0.0865, -0.0632, 0.0, 1.0, 2.0]\n\nderivative = True\nprint(elu(x, alpha, derivative))  # Output: [0.1637, 0.1367, 1.0, 1.0, 1.0]\n```\n\nThis code snippet defines the `elu` function which computes the ELU activation function or its derivative based on the input parameters. The function uses NumPy for efficient computation and ensures the output is rounded to 4 decimal places as required."}
{"task_id": 411, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    def analyze_data(data):\n        is_tuple = any(isinstance(x, (list, tuple, np.ndarray)) for x in data)\n        is_multidim = is_tuple and len(data[0]) > 1 if is_tuple else False\n        is_continuous = any(isinstance(x, float) and not x.is_integer() for x in data)\n        if is_tuple:\n            data = [item for sublist in data for item in sublist]\n        unique_values = np.unique(data)\n        n_unique_per_dim = [len(np.unique(np.array(data)[:, i])) for i in range(len(data[0]))] if is_multidim else [len(unique_values)]\n        return is_tuple, is_multidim, is_continuous, n_unique_per_dim, len(unique_values), unique_values.tolist()\n\n    tuple_actions, multidim_actions, continuous_actions, n_actions_per_dim, action_dim, action_ids = analyze_data(actions)\n    tuple_observations, multidim_observations, continuous_observations, n_obs_per_dim, obs_dim, obs_ids = analyze_data(observations)\n\n    return {\n        'tuple_actions': tuple_actions,\n        'tuple_observations': tuple_observations,\n        'multidim_actions': multidim_actions,\n        'multidim_observations': multidim_observations,\n        'continuous_actions': continuous_actions,\n        'continuous_observations': continuous_observations,\n        'n_actions_per_dim': n_actions_per_dim,\n        'action_dim': action_dim,\n        'n_obs_per_dim': n_obs_per_dim,\n        'obs_dim': obs_dim,\n        'action_ids': [list(set(action_ids[i] for action_ids in actions)) for i in range(action_dim)] if multidim_actions else [action_ids],\n        'obs_ids': [list(set(obs_ids[i] for obs_ids in observations)) for i in range(obs_dim)] if multidim_observations else [obs_ids]\n    }\n\n# Example usage\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]\nprint(env_stats(actions, observations))\n```\n\nThis solution defines a helper function `analyze_data` to handle the common logic for analyzing both actions and observations. It then uses this function to compute the required statistics for both inputs and constructs the output dictionary accordingly. The `action_ids` and `obs_ids` are computed to ensure they are sorted lists of unique values per dimension, as required."}
{"task_id": 413, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    def mse(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n\n    def split_node(X, y, index, value):\n        left_mask = X[:, index] < value\n        right_mask = X[:, index] >= value\n        return X[left_mask], X[right_mask], y[left_mask], y[right_mask]\n\n    def get_split(X, y):\n        best_index, best_value, best_score, best_groups = 999, 999, 999, None\n        for index in range(X.shape[1]):\n            for value in np.unique(X[:, index]):\n                X_left, X_right, y_left, y_right = split_node(X, y, index, value)\n                if len(y_left) == 0 or len(y_right) == 0:\n                    continue\n                mse_left, mse_right = mse(y_left, np.mean(y_left)), mse(y_right, np.mean(y_right))\n                score = mse_left + mse_right\n                if score < best_score:\n                    best_index, best_value, best_score, best_groups = index, value, score, ((X_left, y_left), (X_right, y_right))\n        return {'index': best_index, 'value': best_value, 'groups': best_groups}\n\n    def build_tree(X, y, depth):\n        if depth == max_depth or len(y) == 0:\n            return np.mean(y)\n        split = get_split(X, y)\n        left, right = split['groups']\n        split['left'] = build_tree(left[0], left[1], depth + 1)\n        split['right'] = build_tree(right[0], right[1], depth + 1)\n        return split\n\n    def predict_tree(node, row):\n        if row[node['index']] < node['value']:\n            if isinstance(node['left'], dict):\n                return predict_tree(node['left'], row)\n            else:\n                return node['left']\n        else:\n            if isinstance(node['right'], dict):\n                return predict_tree(node['right'], row)\n            else:\n                return node['right']\n\n    def predict(X, tree):\n        return [predict_tree(tree, row) for row in X]\n\n    # Initialize predictions to the mean of y_train\n    F = np.full_like(y_train, np.mean(y_train))\n    predictions = np.zeros(X_test.shape[0])\n\n    for _ in range(n_estimators):\n        # Compute residuals (negative gradients of the squared error loss)\n        residuals = y_train - F\n\n        # Fit a CART regression tree to the residuals\n        tree = build_tree(X_train, residuals, 0)\n\n        # Update predictions\n        F += learning_rate * np.array(predict(X_train, tree))\n        predictions += learning_rate * np.array(predict(X_test, tree))\n\n    return [round(float(pred), 4) for pred in predictions]\n\n# Example usage:\nX_train = np.array([[0], [1]])\ny_train = np.array([0, 1])\nX_test = np.array([[0], [1]])\npredictions = gbdt_regression(X_train, y_train, X_test, n_estimators=1, learning_rate=1.0, max_depth=1)\nprint(predictions)  # Output: [0.0, 1.0]\n```"}
{"task_id": 416, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Calculates the multivariate Gaussian probability density function for a given set of data points.\n    \n    Parameters:\n    X (numpy.ndarray): A (n_samples, n_features) array of data points.\n    mean (list): A list of means for each feature.\n    cov (list of lists): A (n_features, n_features) covariance matrix.\n    \n    Returns:\n    list: A list of PDF values for each data point in X, rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    X = np.array(X)\n    mean = np.array(mean)\n    cov = np.array(cov)\n    \n    # Ensure X is a 2D array\n    if len(X.shape) == 1:\n        X = X.reshape(-1, 1)\n    \n    n_samples, n_features = X.shape\n    \n    # Calculate the determinant and inverse of the covariance matrix\n    cov_det = np.linalg.det(cov)\n    cov_inv = np.linalg.inv(cov)\n    \n    # Calculate the normalization factor\n    norm_factor = 1.0 / (math.sqrt((2 * math.pi) ** n_features * cov_det))\n    \n    # Initialize the output list\n    pdf_values = []\n    \n    # Calculate the PDF for each sample\n    for x in X:\n        # Calculate the exponent part\n        exp_factor = -0.5 * (x - mean).T @ cov_inv @ (x - mean)\n        \n        # Calculate the PDF value\n        pdf_value = norm_factor * math.exp(exp_factor)\n        \n        # Append the PDF value to the list, rounded to 4 decimal places\n        pdf_values.append(round(pdf_value, 4))\n    \n    return pdf_values\n\n# Example usage\nX = np.array([[0, 0], [1, 1]])\nmean = [0, 0]\ncov = [[1, 0], [0, 1]]\nprint(multivariate_gaussian_pdf(X, mean, cov))\n```\n\nThis code snippet defines a function `multivariate_gaussian_pdf` that calculates the probability density function values for a multivariate Gaussian distribution given a set of data points, a mean vector, and a covariance matrix. The function handles the input data appropriately, calculates the necessary components of the PDF formula, and returns the PDF values for each data point rounded to four decimal places."}
{"task_id": 419, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.column_stack([np.ones(X.shape[0]), X])\n        X_new = np.column_stack([np.ones(X_new.shape[0]), X_new])\n    \n    if isinstance(mu, float):\n        mu = np.full(X.shape[1], mu)\n    \n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, float):\n        V = V * np.eye(X.shape[1])\n    elif isinstance(V, np.ndarray) and V.ndim == 1:\n        V = np.diag(V)\n    \n    V_inv = np.linalg.inv(V)\n    Sigma_p = np.linalg.inv(V_inv + X.T @ X)\n    mu_p = Sigma_p @ (V_inv @ mu + X.T @ y)\n    \n    y_pred = X_new @ mu_p\n    return [round(pred, 4) for pred in y_pred]\n\n# Example usage\nX = np.array([[1], [2]])\ny = np.array([1, 3])\nX_new = np.array([[3]])\nmu = 0\nsigma = 1\nV = None\nfit_intercept = True\n\nprint(bayesian_linear_regression_pred(X, y, X_new, mu, sigma, V, fit_intercept))\n```\n\nThis code snippet implements the Bayesian linear regression as described in the task. It handles the optional intercept addition, prior specification, posterior computation, and prediction for new data points. The output is rounded to 4 decimal places and returned as a Python list."}
{"task_id": 423, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    # Validate input lengths\n    if len(actual) != len(predicted):\n        return -1\n    \n    # Validate non-negative numbers\n    if any(x < 0 for x in actual) or any(x < 0 for x in predicted):\n        return -1\n    \n    # Compute RMSLE\n    n = len(actual)\n    log_diffs = [(np.log(1 + predicted[i]) - np.log(1 + actual[i]))**2 for i in range(n)]\n    rmsle = np.sqrt(np.mean(log_diffs))\n    \n    # Return rounded result\n    return round(rmsle, 4)\n\n# Example usage\nactual = [3, 5, 2.5, 7]\npredicted = [2.5, 5, 4, 8]\nprint(root_mean_squared_log_error(actual, predicted))  # Output: 0.1981\n```\n\nThis Python script defines a function `root_mean_squared_log_error` that calculates the Root Mean Squared Logarithmic Error between two lists of non-negative numbers, as per the task description. It includes validation checks for the input lists and rounds the final result to four decimal places."}
{"task_id": 428, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    else:\n        if symmetric:\n            n = np.arange(window_len)\n        else:\n            n = np.arange(window_len + 1)[:-1]\n        hann_window = 0.5 - 0.5 * np.cos(2 * math.pi * n / (window_len - 1 if symmetric else window_len))\n        return [round(x, 4) for x in hann_window]\n\n# Example usage:\nprint(hann(4, symmetric=True))  # Output: [0.0, 0.75, 0.75, 0.0]\nprint(hann(4, symmetric=False))  # Output: [0.0, 0.5, 1.0, 0.5]\n```"}
{"task_id": 433, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:  # Convolutional kernel\n        in_channels, out_channels, kernel_height, kernel_width = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:  # Dense layer or other tensors\n        fan_in, fan_out = shape[0], shape[1]\n    \n    return float(fan_in), float(fan_out)\n\n# Example usage\nshape = (64, 3, 7, 7)\nprint(glorot_fan(shape))  # Output: (147.0, 3136.0)\n```"}
{"task_id": 435, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]],\n                                y: list[float],\n                                n_estimators: int = 10,\n                                learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    \n    # Initialize predictions to the mean of y\n    y_pred = np.full_like(y, np.mean(y), dtype=float)\n    \n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4) for _ in range(len(y))]\n    \n    for t in range(n_estimators):\n        # Compute residuals\n        residuals = y - y_pred\n        \n        # Fit a linear model to the residuals\n        model = np.linalg.lstsq(X, residuals, rcond=None)[0]\n        # Predict using the linear model\n        h_t = X @ model\n        \n        # Update predictions\n        y_pred += learning_rate * h_t\n    \n    return [round(pred, 4) for pred in y_pred]\n\n# Example usage\nX = [[1], [2], [3], [4]]\ny = [2, 3, 4, 5]\nn_estimators = 2\nlearning_rate = 0.5\nprint(gradient_boosting_regressor(X, y, n_estimators, learning_rate))\n```\n\nThis code snippet implements a small-scale version of the Gradient Boosting Regressor as described in the task. It uses ordinary least squares (OLS) linear regression as the weak learner and the squared error as the loss function. The predictions are returned as a list of floats, each rounded to four decimal places."}
{"task_id": 437, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    # Convert input to numpy array if it's a list\n    if isinstance(x, list):\n        x = np.array(x)\n    \n    # Check if order is valid\n    if order not in [0, 1, 2]:\n        return -1\n    \n    # Compute the sigmoid function\n    sig = 1 / (1 + np.exp(-x))\n    \n    # Compute the derivatives based on the order\n    if order == 0:\n        result = sig\n    elif order == 1:\n        result = sig * (1 - sig)\n    elif order == 2:\n        result = sig * (1 - sig) * (1 - 2 * sig)\n    \n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n    \n    # Return the result in the appropriate format\n    if isinstance(x, (int, float)):\n        return float(result)\n    else:\n        return result.tolist()\n\n# Example usage\nx = np.array([-1, 0, 1])\nprint(sigmoid(x, order=0))  # Output: [0.2689, 0.5, 0.7311]\nprint(sigmoid(x, order=1))  # Output: [0.1966, 0.25, 0.1966]\nprint(sigmoid(x, order=2))  # Output: [-0.0498, 0, -0.0498]\nprint(sigmoid(x, order=3))  # Output: -1\n```"}
{"task_id": 438, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if not y:  # Handle empty input\n        return []\n    \n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    elif num_classes < np.max(y) + 1:\n        return -1\n    \n    one_hot = np.eye(num_classes)[y]\n    return one_hot.tolist()\n\n# Test cases\nprint(to_categorical([0, 2, 1, 2]))  # [[1, 0, 0], [0, 0, 1], [0, 1, 0], [0, 0, 1]]\nprint(to_categorical([0, 2, 1, 2], 3))  # [[1, 0, 0], [0, 0, 1], [0, 1, 0], [0, 0, 1]]\nprint(to_categorical([0, 2, 1, 2], 2))  # -1\nprint(to_categorical([], 2))  # []\nprint(to_categorical([0, 1, 2, 3], 4))  # [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]\n```\n\nThis solution defines the `to_categorical` function as specified, handling the automatic determination of `num_classes` and the error case when `num_classes` is too small. It uses NumPy's `eye` function to create the one-hot encoding matrix and converts it to a list of lists before returning. The provided test cases demonstrate the function's behavior with various inputs."}
{"task_id": 439, "completion_id": 0, "completion": "```python\nimport itertools\n\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    # Calculate the minimum support count\n    min_sup_count = min_sup * len(transactions)\n    \n    # Generate candidate itemsets of size 1\n    candidates = set()\n    for transaction in transactions:\n        for item in transaction:\n            candidates.add(frozenset([item]))\n    \n    # Filter candidates to get frequent itemsets\n    frequent_itemsets = set()\n    for candidate in candidates:\n        if sum(1 for transaction in transactions if candidate.issubset(transaction)) >= min_sup_count:\n            frequent_itemsets.add(candidate)\n    \n    # Generate larger itemsets\n    k = 2\n    while True:\n        # Generate candidates by self-joining frequent itemsets\n        new_candidates = set()\n        for itemset1 in frequent_itemsets:\n            for itemset2 in frequent_itemsets:\n                candidate = itemset1.union(itemset2)\n                if len(candidate) == k and candidate not in new_candidates:\n                    new_candidates.add(candidate)\n        \n        # Prune candidates that contain infrequent subsets\n        pruned_candidates = set()\n        for candidate in new_candidates:\n            subsets = list(itertools.combinations(candidate, k-1))\n            if all(frozenset(subset) in frequent_itemsets for subset in subsets):\n                pruned_candidates.add(candidate)\n        \n        # Filter pruned candidates to get new frequent itemsets\n        new_frequent_itemsets = set()\n        for candidate in pruned_candidates:\n            if sum(1 for transaction in transactions if candidate.issubset(transaction)) >= min_sup_count:\n                new_frequent_itemsets.add(candidate)\n        \n        # If no new frequent itemsets are found, stop\n        if not new_frequent_itemsets:\n            break\n        \n        frequent_itemsets.update(new_frequent_itemsets)\n        k += 1\n    \n    # Convert frozensets to tuples and sort\n    result = [tuple(sorted(itemset)) for itemset in frequent_itemsets]\n    result.sort(key=lambda x: (len(x), x))\n    \n    return result\n\n# Example usage\ntransactions = [[1, 2, 3], [1, 2], [2, 3], [1, 3]]\nmin_sup = 0.5\nprint(apriori_frequent_itemsets(transactions, min_sup))\n```\n\nThis script implements the Apriori algorithm to find all frequent itemsets in a given transactional database, adhering to the specified constraints and requirements."}
{"task_id": 440, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    # Convert the list to a NumPy array for easier manipulation\n    predictions_array = np.array(predictions)\n    \n    # Compute the mean across the first axis (estimators)\n    averaged_probs = np.mean(predictions_array, axis=0)\n    \n    # Round the probabilities to 4 decimal places\n    rounded_probs = np.round(averaged_probs, 4)\n    \n    # Find the index of the maximum probability for each sample\n    predicted_classes = np.argmax(rounded_probs, axis=1)\n    \n    # Convert back to Python lists before returning\n    return rounded_probs.tolist(), predicted_classes.tolist()\n\n# Example usage\npredictions = [\n    [[0.8, 0.2], [0.4, 0.6]],\n    [[0.7, 0.3], [0.3, 0.7]],\n    [[0.9, 0.1], [0.2, 0.8]]\n]\n\naveraged_probs, predicted_classes = aggregate_predictions(predictions)\nprint(averaged_probs)\nprint(predicted_classes)\n```\n\nThis script defines the `aggregate_predictions` function as requested, which takes a three-level nested list of probability distributions and returns the averaged probabilities and the predicted class labels. The example usage demonstrates how to call the function and print the results."}
{"task_id": 444, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    X = np.array(X)\n    if Y is not None:\n        Y = np.array(Y)\n    else:\n        Y = X\n    \n    # Check if feature dimensions match\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # Determine the number of features\n    C = X.shape[1]\n    \n    # Validate and prepare the sigma parameter\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif isinstance(sigma, (int, float)):\n        sigma = np.array([sigma] * C)\n    elif isinstance(sigma, list):\n        sigma = np.array(sigma)\n        if len(sigma) != C:\n            return -1\n    else:\n        return -1\n    \n    if np.any(sigma <= 0):\n        return -1\n    \n    # Compute the kernel matrix\n    X_norm = np.sum(X**2, axis=-1)\n    Y_norm = np.sum(Y**2, axis=-1)\n    XY = np.dot(X, Y.T)\n    distances = X_norm[:, None] + Y_norm[None, :] - 2 * XY\n    distances /= np.sum(sigma**2)\n    kernel_matrix = np.exp(-0.5 * distances)\n    \n    # Round the kernel matrix to 4 decimal places and convert to list\n    kernel_matrix = np.round(kernel_matrix, 4).tolist()\n    \n    return kernel_matrix\n\n# Example usage\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0\nprint(rbf_kernel(X, Y, sigma))\n```\n\nThis code snippet follows the task description and implements the RBF kernel computation with the specified constraints and validations."}
{"task_id": 446, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of labels.\"\"\"\n    value, counts = np.unique(labels, return_counts=True)\n    norm_counts = counts / counts.sum()\n    return -(norm_counts * np.log2(norm_counts)).sum()\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n    best_gain = -1\n    best_feature_index = -1\n    best_threshold = None\n    left_majority_label = None\n    right_majority_label = None\n\n    # Calculate the entropy of the parent node\n    parent_entropy = entropy(y)\n\n    # Iterate over all features\n    for j in range(n_features):\n        # Sort the feature column and get unique values\n        sorted_values = np.unique(X[:, j])\n        # Consider midpoints between successive values as thresholds\n        thresholds = (sorted_values[:-1] + sorted_values[1:]) / 2\n\n        for t in thresholds:\n            # Split the dataset based on the threshold\n            left_indices = X[:, j] <= t\n            right_indices = X[:, j] > t\n\n            # Calculate the entropy of the left and right children\n            left_entropy = entropy(y[left_indices])\n            right_entropy = entropy(y[right_indices])\n\n            # Calculate the information gain\n            p_left = left_indices.sum() / n_samples\n            p_right = right_indices.sum() / n_samples\n            gain = parent_entropy - p_left * left_entropy - p_right * right_entropy\n\n            # Update the best split if the current gain is higher\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = round(t, 4)\n                left_majority_label = np.argmax(np.bincount(y[left_indices]))\n                right_majority_label = np.argmax(np.bincount(y[right_indices]))\n\n    # If no split can improve information gain\n    if best_gain == -1:\n        majority_label = np.argmax(np.bincount(y))\n        return (-1, None, majority_label, majority_label)\n\n    return (best_feature_index, best_threshold, left_majority_label, right_majority_label)\n\n# Example usage\nX = [[1], [2], [3], [4]]\ny = [0, 0, 1, 1]\nprint(decision_stump(X, y))\n```\n\nThis script defines a function `decision_stump` that implements the logic to find the best single-level split (decision stump) for a given dataset `X` and labels `y` based on information gain. The function calculates the entropy of the parent node and iterates over all features and possible thresholds to find the split that maximizes the information gain. If no split can improve the information gain, it returns a tuple indicating no split is possible."}
{"task_id": 452, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    # Convert X to a NumPy array if it's not already one\n    X = np.array(X)\n    \n    # Determine the condition based on the type of threshold\n    if isinstance(threshold, (int, float)):\n        condition = X[:, feature_i] >= threshold\n    else:\n        condition = X[:, feature_i] == threshold\n    \n    # Split the data based on the condition\n    subset1 = X[condition].tolist()\n    subset2 = X[~condition].tolist()\n    \n    return [subset1, subset2]\n\n# Example usage:\nX = np.array([[1, 5], [3, 2], [4, 6], [2, 1]])\nfeature_i = 0\nthreshold = 3\nprint(divide_on_feature(X, feature_i, threshold))  # Output: [[[3, 2], [4, 6]], [[1, 5], [2, 1]]]\n\nX = np.array([[1, \"A\"], [2, \"B\"], [3, \"A\"], [4, \"C\"]])\nfeature_i = 1\nthreshold = \"A\"\nprint(divide_on_feature(X, feature_i, threshold))  # Output: [[[1, 'A'], [3, 'A']], [[2, 'B'], [4, 'C']]]\n```"}
{"task_id": 453, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    # Check for input consistency and gamma validity\n    if not (len(Q) == len(Q_next) == len(actions) == len(rewards) == len(dones)):\n        return -1\n    if not (0 <= gamma <= 1):\n        return -1\n\n    # Initialize the target Q-values\n    Q_target = Q.copy()\n\n    # Compute the target Q-values\n    for i in range(len(Q)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        Q_target[i, actions[i]] = round(target, 4)\n\n    # Convert to list of lists and return\n    return Q_target.round(4).tolist()\n\n# Example usage\nQ = np.array([[1.0, 2.0], [0.5, 0.2]])\nQ_next = np.array([[1.5, 1.0], [0.4, 0.9]])\nactions = [1, 0]\nrewards = [1.0, 0.0]\ndones = [False, True]\ngamma = 0.99\n\nprint(update_q_values(Q, Q_next, actions, rewards, dones, gamma))\n```\n\nThis script defines the `update_q_values` function that computes the target Q-values for a batch of samples in a DQN setting. It checks for input consistency and the validity of the discount factor `gamma`. The function then computes the target Q-values based on the provided formula and returns the updated Q-values as a nested list, with each value rounded to four decimal places."}
{"task_id": 458, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if not labels:\n        return -1\n    \n    # Convert input to a numpy array for easier manipulation\n    labels = np.array(labels)\n    \n    # Check for negative labels\n    if np.any(labels < 0):\n        return -1\n    \n    # Infer num_classes if not provided\n    if num_classes is None:\n        num_classes = np.max(labels) + 1\n    else:\n        # Check if num_classes is smaller than max(labels) + 1\n        if num_classes < np.max(labels) + 1:\n            return -1\n    \n    # Initialize the one-hot encoded matrix\n    one_hot = np.zeros((labels.size, num_classes), dtype=int)\n    \n    # Set the appropriate indices to 1\n    one_hot[np.arange(labels.size), labels] = 1\n    \n    # Convert back to a list of lists\n    return one_hot.tolist()\n\n# Example usage\nlabels = [0, 2, 1, 3]\nnum_classes = 4\nprint(to_categorical(labels, num_classes))\n```\n\nThis solution meets the requirements by converting the labels into a one-hot encoded format, ensuring that the output is a list of lists of integers, and handling edge cases such as negative labels and insufficient `num_classes`."}
{"task_id": 461, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n = len(x)\n    predictions = np.full(n, np.mean(y))\n    \n    if n_estimators <= 0:\n        return np.round(predictions, 4).tolist()\n    \n    for _ in range(n_estimators):\n        residuals = y - predictions\n        if np.all(residuals == 0):\n            break\n        \n        best_sse = float('inf')\n        best_split = None\n        best_vl = np.mean(residuals)\n        best_vr = best_vl\n        \n        unique_x = np.unique(x)[:-1]  # Exclude the greatest value\n        for t in unique_x:\n            left_mask = x <= t\n            right_mask = x > t\n            \n            if np.any(left_mask) and np.any(right_mask):\n                left_res = residuals[left_mask]\n                right_res = residuals[right_mask]\n                \n                sse = np.sum(left_res ** 2) + np.sum(right_res ** 2)\n                if sse < best_sse:\n                    best_sse = sse\n                    best_split = t\n                    best_vl = np.mean(left_res)\n                    best_vr = np.mean(right_res)\n        \n        if best_split is not None:\n            predictions += learning_rate * np.where(x <= best_split, best_vl, best_vr)\n        else:\n            predictions += learning_rate * best_vl\n    \n    return np.round(predictions, 4).tolist()\n\n# Example usage\nx = [1, 2]\ny = [1, 2]\nn_estimators = 1\nlearning_rate = 1.0\nprint(gradient_boosting_regressor(x, y, n_estimators, learning_rate))\n```\n\nThis code snippet implements the gradient boosting algorithm for one-dimensional regression data using decision stumps as weak learners. It follows the algorithm described in the task, including the special cases and constraints."}
{"task_id": 471, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    # Convert q_table to numpy array for easier manipulation\n    q_table_np = np.array(q_table)\n    \n    # Calculate the target value\n    if next_state is not None:\n        # Get the number of actions\n        num_actions = len(q_table[next_state])\n        \n        # Get the maximum Q-value for the next state\n        max_q_next = np.max(q_table_np[next_state])\n        \n        # Calculate the expected value\n        expected_value = 0\n        for a in range(num_actions):\n            if q_table_np[next_state][a] == max_q_next:\n                expected_value += (1 - epsilon + epsilon / num_actions) * q_table_np[next_state][a]\n            else:\n                expected_value += (epsilon / num_actions) * q_table_np[next_state][a]\n        \n        target = reward + gamma * expected_value\n    else:\n        target = reward\n    \n    # Update the Q-value for the given state-action pair\n    q_table_np[state][action] += lr * (target - q_table_np[state][action])\n    \n    # Round the Q-table to 4 decimal places and convert back to list of lists\n    q_table_updated = np.round(q_table_np, 4).tolist()\n    \n    return q_table_updated\n\n# Example usage\nq_table = [[0.5, 0.2, 0.1], [0.3, 0.4, 0.1]]\nstate = 0\naction = 1\nreward = 1.0\nnext_state = 1\nepsilon = 0.1\nlr = 0.4\ngamma = 0.99\n\nupdated_q_table = expected_sarsa_update(q_table, state, action, reward, next_state, epsilon, lr, gamma)\nprint(updated_q_table)\n```\n\nThis script defines the `expected_sarsa_update` function which performs one step of the Expected\u2013SARSA algorithm. It takes the current Q-table, the state and action taken, the reward received, the next state (or `None` if the episode ends), and the SARSA hyperparameters as inputs. The function then calculates the expected value for the next state (if it exists) and updates the Q-value for the given state-action pair using the learning rate and discount factor. The updated Q-table is returned with all values rounded to four decimal places."}
{"task_id": 474, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n\n    X_train, Y_train = [], []\n    X_val, Y_val = [], []\n\n    for i in range(m):\n        label = (i - 0.5) * 2\n        x_range = [(i // 2 + 0.1) * 10, (i // 2 + 0.9) * 10]\n        y_range = [(i % 2) * interval * 10 + 0.1 * 10, (i % 2) * interval * 10 + 0.9 * 10]\n\n        # Generate training data\n        x_train = np.random.uniform(x_range[0], x_range[1], n_train)\n        y_train = np.random.uniform(y_range[0], y_range[1], n_train)\n        X_train.extend(np.column_stack((x_train, y_train)))\n        Y_train.extend([label] * n_train)\n\n        # Generate validation data\n        x_val = np.random.uniform(x_range[0], x_range[1], n_val)\n        y_val = np.random.uniform(y_range[0], y_range[1], n_val)\n        X_val.extend(np.column_stack((x_val, y_val)))\n        Y_val.extend([label] * n_val)\n\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n    Y_train = np.array(Y_train)\n    Y_val = np.array(Y_val)\n\n    return X_train, X_val, Y_train, Y_val\n\n# Example usage\nm = 2\nn_train = 2\nn_val = 1\ninterval = 1\nseed = 0\n\nX_train, X_val, Y_train, Y_val = generate_data(m, n_train, n_val, interval, seed)\nprint(\"X_train:\", X_train)\nprint(\"X_val:\", X_val)\nprint(\"Y_train:\", Y_train)\nprint(\"Y_val:\", Y_val)\n```\n\nThis script defines the `generate_data` function that generates a 2-D toy data set for a binary or multi-class classifier. The function accepts parameters for the number of classes, the number of training and validation samples per class, the vertical distance between class clusters, and an optional seed for reproducibility. The function returns four NumPy arrays: `X_train`, `X_val`, `Y_train`, and `Y_val`, which represent the training and validation data and their corresponding labels. The coordinates are rounded to four decimal places as required."}
{"task_id": 475, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    # Initialize m_prev and v_prev to zero if they are None\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    \n    # Update the first and second moments\n    m_t = b1 * m_prev + (1 - b1) * grad\n    v_t = b2 * v_prev + (1 - b2) * (grad ** 2)\n    \n    # Bias correction\n    m_t_hat = m_t / (1 - b1 ** t)\n    v_t_hat = v_t / (1 - b2 ** t)\n    \n    # Update the parameters\n    w_new = w - learning_rate * m_t_hat / (np.sqrt(v_t_hat) + eps)\n    \n    return w_new, m_t, v_t\n\n# Example usage\nw, grad, m_prev, v_prev, t = 1.0, 0.1, 0.0, 0.0, 1\nw_new, m_new, v_new = adam_update(w, grad, m_prev, v_prev, t)\nprint(f\"Updated w: {w_new}, m: {m_new}, v: {v_new}\")\n```\n\nThis script defines the `adam_update` function that performs a single step of the Adam optimization algorithm. It takes the current parameters, gradient, previous moments, time step, and hyper-parameters as input, and returns the updated parameters and moments. The example usage demonstrates how to call the function with a simple set of parameters."}
{"task_id": 479, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n\n    num_arms = len(rewards[0])\n    value_estimates = [ev_prior] * num_arms\n    pull_counts = [0] * num_arms\n\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            # Explore: choose a random arm\n            chosen_arm = np.random.randint(num_arms)\n        else:\n            # Exploit: choose the arm with the highest estimated value\n            chosen_arm = np.argmax(value_estimates)\n\n        reward = rewards[t][chosen_arm]\n        pull_counts[chosen_arm] += 1\n        # Update the value estimate for the chosen arm\n        value_estimates[chosen_arm] += (reward - value_estimates[chosen_arm]) / pull_counts[chosen_arm]\n\n    return [round(v, 4) for v in value_estimates]\n\n# Example usage\nrewards = [[1, 0, 0],\n           [0, 1, 0],\n           [1, 0, 0],\n           [0, 1, 0],\n           [1, 0, 0]]\nepsilon = 0\nev_prior = 0.5\nseed = 42\n\nprint(epsilon_greedy_bandit(rewards, epsilon, ev_prior, seed))\n```\n\nThis code defines the `epsilon_greedy_bandit` function that simulates the \u03b5-greedy strategy for a stationary multi-armed bandit problem. The function takes a matrix of rewards, an exploration probability (\u03b5), an initial expected value for each arm, and an optional seed for the random number generator. It returns the final estimated values for each arm after simulating the strategy over the provided rewards."}
{"task_id": 481, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled -1 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples  # Initialize all points as noise\n    cluster_id = 0\n\n    for point_idx in range(n_samples):\n        if labels[point_idx] != -1:\n            continue  # Skip already processed points\n\n        # Find all points within eps distance from the current point\n        neighbors = [neighbor_idx for neighbor_idx in range(n_samples)\n                     if np.linalg.norm(data[point_idx] - data[neighbor_idx]) <= eps]\n\n        if len(neighbors) < min_samples:\n            continue  # This point is noise\n\n        # This point is a core point, start a new cluster\n        labels[point_idx] = cluster_id\n        seeds = neighbors[1:]  # Exclude the point itself\n\n        while seeds:\n            current = seeds.pop(0)\n            if labels[current] == -1:\n                labels[current] = cluster_id\n            elif labels[current] == -2:  # Marked as to be processed\n                labels[current] = cluster_id\n                current_neighbors = [neighbor_idx for neighbor_idx in range(n_samples)\n                                     if np.linalg.norm(data[current] - data[neighbor_idx]) <= eps]\n                if len(current_neighbors) >= min_samples:\n                    seeds.extend([n for n in current_neighbors if labels[n] == -1 or labels[n] == -2])\n\n        cluster_id += 1\n\n    return labels\n\n# Example usage\ndata = np.array([[1, 1], [1.1, 1.1], [0.9, 1], [5, 5], [5.2, 5.1], [4.9, 5], [8, 0]])\neps = 0.3\nmin_samples = 2\nprint(dbscan(data, eps, min_samples))\n```\n\nThis Python script implements the DBSCAN algorithm from scratch, as per the requirements. It handles the clustering of data points into clusters based on their density, marking points that are not part of any dense region as noise. The script is self-contained and includes an example usage that demonstrates how to call the `dbscan` function with a sample dataset."}
{"task_id": 482, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError(\"y contains labels that are out of the range [0, num_classes - 1]\")\n    n = len(y)\n    categorical = np.zeros((n, num_classes), dtype=int)\n    categorical[np.arange(n), y] = 1\n    return categorical\n\n# Example usage\ny = np.array([0, 2, 1, 3])\nnum_classes = None\nprint(to_categorical(y, num_classes))\n```\n\nThis code snippet defines a function `to_categorical` that takes a vector of integer labels and an optional `num_classes` parameter to generate a one-hot encoded matrix. The function checks for the validity of the labels and raises a `ValueError` if any label is out of the specified range. The output is a NumPy array of integers (0s and 1s) representing the one-hot encoding of the input labels."}
{"task_id": 485, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    if not X_train:\n        return []\n\n    def sse(y):\n        mean_y = np.mean(y)\n        return np.sum((y - mean_y) ** 2)\n\n    def split_data(X, y, split_val):\n        left_idx = X <= split_val\n        right_idx = X > split_val\n        return X[left_idx], X[right_idx], y[left_idx], y[right_idx]\n\n    def build_tree(X, y, depth=0):\n        if depth == max_depth or len(X) < 2:\n            return np.mean(y)\n        \n        best_sse = float('inf')\n        best_split = None\n        for split_val in X:\n            X_left, X_right, y_left, y_right = split_data(X, y, split_val)\n            if len(X_left) == 0 or len(X_right) == 0:\n                continue\n            current_sse = sse(y_left) + sse(y_right)\n            if current_sse < best_sse:\n                best_sse = current_sse\n                best_split = (X_left, X_right, y_left, y_right, split_val)\n        \n        if best_split is None:\n            return np.mean(y)\n        \n        X_left, X_right, y_left, y_right, split_val = best_split\n        left_tree = build_tree(X_left, y_left, depth + 1)\n        right_tree = build_tree(X_right, y_right, depth + 1)\n        \n        return (split_val, left_tree, right_tree)\n\n    def predict_tree(tree, x):\n        if isinstance(tree, float):\n            return tree\n        split_val, left_tree, right_tree = tree\n        if x <= split_val:\n            return predict_tree(left_tree, x)\n        else:\n            return predict_tree(right_tree, x)\n\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    tree = build_tree(X_train, y_train)\n    predictions = [predict_tree(tree, x) for x in X_test]\n    \n    return predictions\n\n# Example usage\nX_train = [1, 2, 3, 4, 5, 6, 7]\ny_train = [2, 2, 2, 8, 8, 8, 8]\nX_test  = [2, 3, 5, 7]\nmax_depth = 1\nprint(regression_tree_predict(X_train, y_train, X_test, max_depth))\n```\n\nThis script defines a function `regression_tree_predict` that implements a univariate regression tree as described in the task. It includes the necessary logic to build the tree and make predictions, adhering to the constraints and requirements provided."}
{"task_id": 490, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:  # Check if the input is empty\n        return []\n    \n    # Convert input to NumPy array if it's not already one\n    x_np = np.array(x)\n    \n    # Create a square diagonal matrix using np.diag and convert it back to list of lists\n    diagonal_matrix = np.diag(x_np).tolist()\n    \n    return diagonal_matrix\n\n# Example usage\nx = [1, 2, 3]\nprint(make_diagonal(x))  # Output: [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n```\n\nThis Python script defines a function `make_diagonal` that takes a one-dimensional vector as input and returns a square diagonal matrix with the elements of the vector on its principal diagonal. The function handles inputs as lists, tuples, or NumPy arrays and ensures that the output is a list of lists, as required."}
{"task_id": 491, "completion_id": 0, "completion": "```python\nfrom collections import Counter, defaultdict\nimport itertools\n\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    # First pass: count item frequencies\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    # Filter items by min_sup\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_sup}\n    # Sort items by frequency (descending) and lexicographical order\n    sorted_items = sorted(frequent_items, key=lambda x: (-frequent_items[x], x))\n    \n    # Build the FP-tree\n    root = FPNode(None, None)\n    for transaction in transactions:\n        transaction = sorted([item for item in transaction if item in frequent_items], key=lambda x: sorted_items.index(x))\n        if transaction:\n            insert_transaction(root, transaction, frequent_items)\n    \n    # Header table for quick access to nodes\n    header_table = defaultdict(list)\n    for node in root.iter_nodes():\n        if node.item is not None:\n            header_table[node.item].append(node)\n    \n    # Recursive mining\n    def mine_tree(header_table, prefix, frequent_itemsets):\n        for item in sorted(header_table, key=lambda x: frequent_items[x]):\n            new_prefix = prefix + (item,)\n            frequent_itemsets.append(new_prefix)\n            suffix_patterns = construct_conditional_tree(header_table[item])\n            if suffix_patterns:\n                conditional_tree = build_tree(suffix_patterns)\n                mine_tree(conditional_tree.header_table, new_prefix, frequent_itemsets)\n    \n    frequent_itemsets = []\n    mine_tree(header_table, (), frequent_itemsets)\n    return sorted(frequent_itemsets, key=lambda x: (len(x), x))\n\nclass FPNode:\n    def __init__(self, item, count, parent):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.link = None\n    \n    def add(self, item, count):\n        if item in self.children:\n            self.children[item].count += count\n        else:\n            child = FPNode(item, count, self)\n            self.children[item] = child\n            if self.link is not None:\n                child.link = self.link\n    \n    def iter_nodes(self):\n        yield self\n        for child in self.children.values():\n            yield from child.iter_nodes()\n\ndef insert_transaction(root, transaction, item_counts):\n    current = root\n    for item in transaction:\n        current.add(item, 1)\n        current = current.children[item]\n    current.count += 1\n\ndef construct_conditional_tree(nodes):\n    conditional_patterns = []\n    for node in nodes:\n        pattern = []\n        while node.parent.item is not None:\n            pattern.append(node.parent.item)\n            node = node.parent\n        if pattern:\n            conditional_patterns.append((tuple(pattern), node.count))\n    return conditional_patterns\n\ndef build_tree(patterns):\n    root = FPNode(None, None)\n    for pattern, count in patterns:\n        insert_transaction(root, pattern, {})\n    return root\n\n# Example usage\ntransactions = [\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"A\", \"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"C\", \"D\", \"E\"],\n    [\"B\", \"C\", \"D\"]\n]\nmin_sup = 3\nprint(fp_growth(transactions, min_sup))\n```\n\nThis Python script implements the FP-Growth algorithm to mine frequent item-sets from a given set of transactions. The function `fp_growth` takes a list of transactions and a minimum support threshold as input and returns a sorted list of tuples representing the frequent item-sets. The script includes a class `FPNode` for constructing the FP-tree and helper functions for tree construction and mining."}
{"task_id": 492, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n\n    n_samples, n_features = len(X), len(X[0])\n    indices = list(combinations_with_replacement(range(n_features), degree))\n    n_output_features = len(indices) + 1\n    X_new = np.ones((n_samples, n_output_features))\n\n    for i, obs in enumerate(X):\n        for idx, index in enumerate(indices, 1):\n            X_new[i, idx] = np.prod([obs[j]**index.count(j) for j in range(n_features)])\n\n    return X_new.tolist()\n\n# Example usage\nX = [[2, 3]]\ndegree = 2\nprint(polynomial_features(X, degree))\n```\n\nThis code snippet defines a function `polynomial_features` that takes a 2D list `X` and an integer `degree` as input and returns a new list of lists containing all monomials of the original features up to the specified degree. The function uses `itertools.combinations_with_replacement` to generate the indices for the monomials and `numpy` for efficient computation. If the degree is negative, the function returns -1 as specified."}
{"task_id": 493, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1\n    y = np.array(y)\n    mean_y = np.mean(y)\n    mse_value = np.mean((y - mean_y) ** 2)\n    return round(mse_value, 4)\n\n# Example usage\ny = [1, 2, 3]\nprint(mse(y))  # Output: 0.6667\n```\n\nThis code snippet defines a function `mse` that calculates the mean-squared error of a given sample, either as a Python list or a 1-D NumPy array, and returns the result rounded to four decimal places. If the input is an empty sequence, it returns -1."}
{"task_id": 496, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Convert input to NumPy array if it's a list\n    x = np.array(x)\n    \n    # Ensure x is treated as a 1-D array\n    x = np.atleast_1d(x)\n    \n    # Calculate the affine activation\n    y = slope * x + intercept\n    \n    # The first derivative of the affine function is the slope\n    grad = np.full_like(x, slope, dtype=float)\n    \n    # The second derivative of the affine function is always 0\n    grad2 = np.zeros_like(x, dtype=float)\n    \n    # Round the results to 4 decimal places\n    y_rounded = np.round(y, 4).tolist()\n    grad_rounded = np.round(grad, 4).tolist()\n    grad2_rounded = np.round(grad2, 4).tolist()\n    \n    return y_rounded, grad_rounded, grad2_rounded\n\n# Example usage\nx = [0, 1, 2]\nslope = 2\nintercept = 1\nprint(apply_affine(x, slope, intercept))\n```\n\nThis code snippet defines the `apply_affine` function as requested, which takes a 1-D list or NumPy array `x`, and optional `slope` and `intercept` parameters. It returns a tuple of three lists containing the affine activation output, the first derivative, and the second derivative, each rounded to 4 decimal places. The example usage demonstrates how to call the function with a list `x`, a `slope` of 2, and an `intercept` of 1, and prints the output."}
{"task_id": 499, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    n_samples, n_features = data.shape\n    if k < 1 or k > n_features:\n        return -1\n\n    # Step 1: Standardise each feature\n    means = np.mean(data, axis=0)\n    stds = np.std(data, axis=0, ddof=1)  # Population variance\n    std_data = (data - means) / np.where(stds != 0, stds, 1)\n\n    # Step 2: Compute the sample covariance matrix\n    cov_matrix = np.cov(std_data, rowvar=False, ddof=1)\n\n    # Step 3: Perform eigen-decomposition\n    eigenvalues, eigenvectors = np.linalg.eigh(cov_matrix)\n\n    # Step 4: Sort eigenvalues and eigenvectors\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n\n    # Step 5: Fix the sign of every eigenvector\n    max_abs_indices = np.argmax(np.abs(sorted_eigenvectors), axis=0)\n    signs = np.sign(sorted_eigenvectors[max_abs_indices, np.arange(n_features)])\n    sorted_eigenvectors = sorted_eigenvectors * signs\n\n    # Step 6: Project the standardised data on the first k eigenvectors\n    projection_matrix = sorted_eigenvectors[:, :k]\n    projected_data = np.dot(std_data, projection_matrix)\n\n    # Return the projected data as a Python list\n    return np.round(projected_data, 4).tolist()\n\n# Example usage\ndata = np.array([[1, 2], [3, 4], [5, 6]])\nk = 1\nprint(pca_transform(data, k))\n```\n\nThis script defines a function `pca_transform` that performs PCA dimensionality reduction on a given 2-D NumPy array `data` and returns the projection of the data onto the first `k` principal components as a Python list. The function checks if `k` is within the valid range and handles the standardisation, covariance matrix computation, eigen-decomposition, and projection steps as described in the task."}
{"task_id": 500, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Initialize model with the average of the training labels\n    F = np.mean(y_train)\n    predictions = np.full(X_test.shape[0], F)\n    \n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y_train - F\n        \n        # Fit a decision stump to the residuals\n        best_feature, best_threshold, left_value, right_value = find_best_split(X_train, residuals)\n        \n        # Update the model\n        F += learning_rate * update_model(X_train, best_feature, best_threshold, left_value, right_value)\n        \n        # Update predictions for the test set\n        predictions += learning_rate * update_model(X_test, best_feature, best_threshold, left_value, right_value)\n    \n    # Convert regression scores to binary predictions\n    return [1 if pred >= 0.5 else 0 for pred in predictions]\n\ndef find_best_split(X, y):\n    best_feature, best_threshold, best_left_value, best_right_value = None, None, None, None\n    best_error = float('inf')\n    \n    for feature in range(X.shape[1]):\n        for threshold in np.unique(X[:, feature]):\n            left_indices = X[:, feature] <= threshold\n            right_indices = X[:, feature] > threshold\n            \n            if not left_indices.any() or not right_indices.any():\n                continue\n            \n            left_value = np.mean(y[left_indices])\n            right_value = np.mean(y[right_indices])\n            \n            error = np.sum((y[left_indices] - left_value) ** 2) + np.sum((y[right_indices] - right_value) ** 2)\n            \n            if error < best_error:\n                best_error = error\n                best_feature = feature\n                best_threshold = threshold\n                best_left_value = left_value\n                best_right_value = right_value\n    \n    return best_feature, best_threshold, best_left_value, best_right_value\n\ndef update_model(X, feature, threshold, left_value, right_value):\n    predictions = np.zeros(X.shape[0])\n    predictions[X[:, feature] <= threshold] = left_value\n    predictions[X[:, feature] > threshold] = right_value\n    return predictions\n\n# Example usage\nX_train = [[0],[1],[2],[3]]\ny_train = [0,0,1,1]\nX_test = [[0.2],[2.8]]\npredictions = gradient_boosting_classifier(X_train, y_train, X_test, n_estimators=20, learning_rate=0.1)\nprint(predictions)  # Output: [0, 1]\n```"}
{"task_id": 505, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n\n    m, n_v = X.shape\n    n_h = W.shape[1]\n\n    # Positive phase\n    h0_prob = sigmoid(X @ W + hbias)\n    pos_grad = X.T @ h0_prob\n\n    # Initialize the hidden and visible probabilities for Gibbs sampling\n    v_k_prob = X\n    h_k_prob = h0_prob\n\n    for _ in range(k):\n        # Gibbs sampling steps\n        v_k_prob = sigmoid(h_k_prob @ W.T + vbias)\n        h_k_prob = sigmoid(v_k_prob @ W + hbias)\n\n    # Negative phase\n    neg_grad = v_k_prob.T @ h_k_prob\n\n    # Update weights\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n\n    # Return the updated weights as a list of lists, rounded to 4 decimal places\n    return np.round(W_new, 4).tolist()\n\n# Example usage\nX = np.array([[1, 1]])\nW = np.array([[0.0], [0.0]])\nhbias = np.array([0.0])\nvbias = np.array([0.0])\nlearning_rate = 0.1\nk = 1\n\nprint(contrastive_divergence(X, W, hbias, vbias, learning_rate, k))\n```\n\nThis script defines a function `contrastive_divergence` that performs a single weight update step for a binary RBM using the Contrastive Divergence (CD-k) algorithm. The function takes as input a mini-batch of visible vectors, the current weight matrix, visible and hidden biases, a learning rate, and the number of Gibbs sampling steps. It returns the updated weight matrix as a list of lists, with each value rounded to the nearest 4th decimal place."}
{"task_id": 509, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef chebyshev(x: list[float] | np.ndarray, y: list[float] | np.ndarray) -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Convert inputs to NumPy arrays for easier manipulation\n    x_arr = np.array(x)\n    y_arr = np.array(y)\n    \n    # Check if the vectors have the same length\n    if x_arr.shape != y_arr.shape:\n        return -1\n    \n    # Calculate the Chebyshev distance\n    distance = np.max(np.abs(x_arr - y_arr))\n    \n    # Return the distance rounded to four decimal places\n    return round(float(distance), 4)\n\n# Example usage\nx = [1, 2, 3]\ny = [2, 4, 6]\nprint(chebyshev(x, y))  # Output: 3.0\n```\n\nThis code snippet defines a function `chebyshev` that calculates the Chebyshev distance between two vectors, ensuring they are of the same length and returning the distance rounded to four decimal places."}
{"task_id": 510, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    # Clip y_pred to avoid log(0) and log(1)\n    eps = np.finfo(float).eps\n    y_pred = np.clip(y_pred, eps, 1 - eps)\n    \n    # Compute the binary cross-entropy\n    reconstruction_loss = -np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred), axis=1)\n    \n    # Compute the KL divergence\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var), axis=1)\n    \n    # Compute the total loss\n    total_loss = reconstruction_loss + kl_divergence\n    \n    # Return the average loss rounded to 6 decimal places\n    return round(np.mean(total_loss), 6)\n\n# Example usage\ny = np.array([[1, 0], [0, 1]])\ny_pred = np.array([[0.9, 0.2], [0.1, 0.8]])\nt_mean = np.zeros((2, 2))\nt_log_var = np.zeros((2, 2))\n\nprint(vae_loss(y, y_pred, t_mean, t_log_var))\n```\n\nThis code snippet defines the `vae_loss` function that calculates the VAE loss for Bernoulli visible units, as described in the task. It includes the necessary steps to compute the reconstruction loss and the KL divergence, and it ensures numerical stability by clipping the predicted values. The function returns the mini-batch average of the total loss, rounded to six decimal places."}
{"task_id": 513, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    \n    # Linear term\n    linear_term = np.dot(X, w)\n    \n    # Interaction term\n    interaction_term = 0.5 * np.sum((np.dot(X, V) ** 2) - np.dot(X ** 2, V ** 2), axis=1)\n    \n    # Prediction\n    predictions = w0 + linear_term + interaction_term\n    \n    return [round(pred, 4) for pred in predictions]\n\n# Example usage\nX = [[1, 0], [0, 1], [1, 1]]\nw0 = 0.5\nw = [1, 2]\nV = [[0.1, 0.2], [0.3, 0.4]]\n\nprint(fm_predict(X, w0, w, V))\n```\n\nThis code snippet defines a function `fm_predict` that implements the Factorization Machine regression formula for a batch of samples. It uses `numpy` for efficient numerical computations and ensures the output is rounded to 4 decimal places as required."}
{"task_id": 517, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # Convert input to numpy array if it's not already one\n    z = np.array(z) if not isinstance(z, np.ndarray) else z\n    \n    # Numerically stable sigmoid function\n    def stable_sigmoid(x):\n        return np.where(x >= 0, \n                        1 / (1 + np.exp(-x)), \n                        np.exp(x) / (1 + np.exp(x)))\n    \n    # Apply the stable sigmoid function\n    result = stable_sigmoid(z)\n    \n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n    \n    # Convert back to scalar or list if necessary\n    if isinstance(z, (int, float)):\n        return float(result)\n    elif isinstance(z, (list, tuple)):\n        return result.tolist()\n    else:\n        return result.tolist()\n\n# Example usage\nprint(sigmoid([-1, 0, 1]))  # Output: [0.2689, 0.5, 0.7311]\n```"}
{"task_id": 518, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        # Convert actual if it's a one-hot encoded array\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        # Convert predicted if it's a one-hot encoded array\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        # Call the original function with the processed arrays\n        return function(actual, predicted)\n    return wrapper\n\n@unhot\ndef accuracy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Simple accuracy rounded to 4 decimals.\"\"\"\n    return float(np.round(np.mean(actual == predicted), 4))\n\n# Example usage\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])\nprint(accuracy(actual, predicted))  # 0.6667\n```"}
{"task_id": 520, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    def compute_grad(x):\n        return np.round(x * (1 - x), 4)\n    \n    if isinstance(z, (int, float)):\n        return float(compute_grad(z))\n    elif isinstance(z, np.ndarray):\n        return compute_grad(z).tolist()\n    elif isinstance(z, list):\n        if not z:  # Check for empty list\n            return []\n        elif isinstance(z[0], list):  # Check for nested list\n            return [sigmoid_grad(sublist) for sublist in z]\n        else:\n            return [compute_grad(item) for item in z]\n    else:\n        raise ValueError(\"Unsupported input type. Please provide a float, list, or NumPy ndarray.\")\n\n# Example usage:\n# z = [0.5, 0.8]\n# print(sigmoid_grad(z))  # Output: [0.25, 0.16]\n```"}
{"task_id": 528, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Convert X to a numpy array for easier manipulation\n    X = np.array(X)\n    # Extract the min and max values for each dimension\n    x1_min, x2_min = X.min(axis=0)\n    x1_max, x2_max = X.max(axis=0)\n    \n    # Create the equally spaced arrays for x1 and x2\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    \n    # Create the meshgrid\n    x1_mesh, x2_mesh = np.meshgrid(x1_plot, x2_plot)\n    \n    # Flatten the meshgrid for easier computation\n    x1_flat = x1_mesh.ravel()\n    x2_flat = x2_mesh.ravel()\n    \n    # Compute the decision function values\n    decision_values = W[0] * x1_flat + W[1] * x2_flat + b\n    \n    # Apply the sign function to get the labels\n    labels = np.sign(decision_values).reshape(grid_n, grid_n)\n    \n    # Convert the labels to a list of lists\n    labels_list = labels.tolist()\n    \n    return labels_list\n\n# Example usage\nX = [[0, 0], [2, 2]]\nW = [1, -1]\nb = 0\ngrid_n = 3\nprint(decision_boundary_grid(X, W, b, grid_n))\n```\n\nThis script defines the `decision_boundary_grid` function as specified in the task. It uses NumPy for efficient array manipulation and computation. The function generates a grid of points, computes the decision function values for each point, and applies the sign function to determine the labels. The result is returned as a list of lists, as required."}
{"task_id": 537, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    # Calculate class priors\n    class_priors = np.bincount(y_train) / len(y_train)\n    \n    # Separate the data by class\n    X_train_class_0 = X_train[y_train == 0]\n    X_train_class_1 = X_train[y_train == 1]\n    \n    # Calculate mean and std for each feature in each class\n    means_class_0 = np.mean(X_train_class_0, axis=0)\n    stds_class_0 = np.std(X_train_class_0, axis=0) + 1e-9  # Add epsilon to avoid division by zero\n    means_class_1 = np.mean(X_train_class_1, axis=0)\n    stds_class_1 = np.std(X_train_class_1, axis=0) + 1e-9  # Add epsilon to avoid division by zero\n    \n    # Function to calculate Gaussian probability\n    def gaussian_prob(x, mean, std):\n        exponent = np.exp(-((x - mean) ** 2) / (2 * std ** 2))\n        return (1 / (np.sqrt(2 * np.pi) * std)) * exponent\n    \n    # Predict the class for each test sample\n    predictions = []\n    for x in X_test:\n        likelihood_class_0 = np.prod(gaussian_prob(x, means_class_0, stds_class_0))\n        likelihood_class_1 = np.prod(gaussian_prob(x, means_class_1, stds_class_1))\n        posterior_class_0 = likelihood_class_0 * class_priors[0]\n        posterior_class_1 = likelihood_class_1 * class_priors[1]\n        \n        if posterior_class_0 > posterior_class_1:\n            predictions.append(0)\n        else:\n            predictions.append(1)\n    \n    return predictions\n\n# Example usage\nX_train = np.array([[1.0, 20.0],\n                    [2.0, 21.0],\n                    [3.0, 22.0],\n                    [10.0,  5.0],\n                    [11.0,  6.0],\n                    [12.0,  7.0]])\ny_train = np.array([0, 0, 0, 1, 1, 1])\nX_test  = np.array([[ 2.5, 20.5],\n                    [11.5,  6.5]])\n\npredictions = gaussian_naive_bayes(X_train, y_train, X_test)\nprint(predictions)  # Output: [0, 1]\n```"}
{"task_id": 539, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n    \n    Args:\n    AL: NumPy array of shape (1,m) or (m,) containing the model probabilities.\n    Y: NumPy array of shape (1,m) or (m,) containing the true labels (0 or 1).\n    \n    Returns:\n    The binary cross-entropy cost as a float.\n    \"\"\"\n    # Ensure the probabilities are within the valid range to avoid numerical issues\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    \n    # Number of training examples\n    m = Y.shape[1] if Y.ndim == 2 else Y.size\n    \n    # Compute the cost\n    cost = -1/m * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    \n    # Convert the cost to a float and return\n    return float(np.squeeze(cost))\n\n# Example usage\nAL = np.array([[0.8, 0.9, 0.4]])\nY  = np.array([[1,   1,   0]])\ncost = compute_cost(AL, Y)\nprint(f\"{cost:.4f}\")\n```\n\nThis code snippet defines a function `compute_cost` that calculates the binary cross-entropy cost given the model's predicted probabilities and the true labels. It includes the necessary clipping to avoid numerical issues when taking the logarithm of values close to 0 or 1. The function returns the cost as a float, rounded to 4 decimal places when printed."}
{"task_id": 552, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    T = len(observations)\n    N = len(pi)\n\n    if t < 0 or t >= T:\n        return []\n\n    # Initialize forward and backward probabilities\n    alpha = np.zeros((T, N))\n    beta = np.zeros((T, N))\n\n    # Compute forward probabilities\n    alpha[0] = pi * B[:, observations[0]]\n    for i in range(1, T):\n        alpha[i] = np.dot(alpha[i-1], A) * B[:, observations[i]]\n\n    # Compute backward probabilities\n    beta[T-1] = 1\n    for i in range(T-2, -1, -1):\n        beta[i] = np.dot(A, B[:, observations[i+1]] * beta[i+1])\n\n    # Compute gamma probabilities\n    gamma = (alpha * beta) / np.sum(alpha * beta, axis=1)[:, np.newaxis]\n\n    # Return the gamma probabilities for the given time step t, rounded to 4 decimal places\n    return [round(x, 4) for x in gamma[t]]\n\n# Example usage\nhmm = {\"pi\": [0.6, 0.4],\n       \"A\" : [[0.7, 0.3],\n              [0.4, 0.6]],\n       \"B\" : [[0.5, 0.4, 0.1],\n              [0.1, 0.3, 0.6]]}\nobservations = [0, 1, 2]\nt = 1\nprint(gamma_probabilities(hmm, observations, t))\n```\n\nThis Python script defines a function `gamma_probabilities` that computes the posterior state distribution \u03b3\u209c for a given Hidden Markov Model (HMM) and observation sequence. The function uses the forward-backward algorithm to calculate the forward and backward probabilities, and then combines them to compute the posterior probabilities. The result is rounded to four decimal places and returned as a list."}
{"task_id": 555, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import deque\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((point1 - point2) ** 2))\n    \n    def get_neighbors(point_index):\n        neighbors = []\n        for i in range(len(data)):\n            if euclidean_distance(data[point_index], data[i]) < eps:\n                neighbors.append(i)\n        return neighbors\n    \n    def expand_cluster(point_index, cluster_id):\n        queue = deque([point_index])\n        while queue:\n            current_point = queue.popleft()\n            for neighbor in neighbors_list[current_point]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    if len(neighbors_list[neighbor]) >= min_samples:\n                        queue.append(neighbor)\n                if labels[neighbor] == 0:\n                    labels[neighbor] = cluster_id\n    \n    n_samples = len(data)\n    labels = [0] * n_samples  # 0 means unvisited\n    visited = [False] * n_samples\n    neighbors_list = [get_neighbors(i) for i in range(n_samples)]\n    \n    cluster_id = 1\n    for i in range(n_samples):\n        if not visited[i]:\n            visited[i] = True\n            if len(neighbors_list[i]) >= min_samples:\n                labels[i] = cluster_id\n                expand_cluster(i, cluster_id)\n                cluster_id += 1\n            else:\n                labels[i] = -1  # noise\n    \n    return labels\n\n# Example usage\ndata = np.array([[0, 0], [0, 1], [1, 0], [1, 1], [5, 5]])\neps = 1.5\nmin_samples = 3\nprint(dbscan(data, eps, min_samples))\n```\n\nThis Python script implements the DBSCAN algorithm from scratch, as per the requirements. It includes a function to calculate the Euclidean distance between two points, a function to get the neighbors of a point within the \\(\\varepsilon\\)-radius, and the main DBSCAN function that performs the clustering. The example usage at the end demonstrates how to call the function with a sample dataset."}
{"task_id": 561, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom scipy.stats import multivariate_normal\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"\n    Fits a Gaussian Mixture Model to the data using the Expectation-Maximization algorithm.\n    \n    Parameters:\n    data (np.ndarray): The input data, a 2-D array of shape (N, D) where N is the number of samples and D is the number of features.\n    k (int): The number of Gaussian components in the mixture model.\n    max_iter (int): The maximum number of iterations for the EM algorithm.\n    epsilon (float): The tolerance for convergence based on the change in mixture weights.\n    \n    Returns:\n    list[int]: A list of length N containing the final cluster label of each sample.\n    \"\"\"\n    N, D = data.shape\n    np.random.seed(0)  # For deterministic results\n    \n    # Initialize parameters\n    weights = np.ones(k) / k\n    means = data[np.random.choice(N, k, replace=False)]\n    covariances = [np.cov(data.T) for _ in range(k)]\n    \n    for _ in range(max_iter):\n        # E-step: Compute responsibilities\n        responsibilities = np.zeros((N, k))\n        for i in range(k):\n            responsibilities[:, i] = weights[i] * multivariate_normal.pdf(data, mean=means[i], cov=covariances[i])\n        responsibilities /= responsibilities.sum(axis=1)[:, np.newaxis]\n        \n        # M-step: Update parameters\n        new_weights = responsibilities.sum(axis=0) / N\n        new_means = np.dot(responsibilities.T, data) / responsibilities.sum(axis=0)[:, np.newaxis]\n        new_covariances = []\n        for i in range(k):\n            diff = data - new_means[i]\n            new_covariances.append(np.dot(responsibilities[:, i] * diff.T, diff) / responsibilities[:, i].sum())\n        \n        # Check for convergence\n        if np.linalg.norm(new_weights - weights) < epsilon:\n            break\n        \n        weights, means, covariances = new_weights, new_means, new_covariances\n    \n    # Assign each sample to the component with the largest responsibility\n    labels = responsibilities.argmax(axis=1)\n    \n    # Sort components by the first coordinate of their mean\n    sorted_indices = np.argsort(means[:, 0])\n    sorted_labels = np.zeros_like(labels)\n    for new_label, old_label in enumerate(sorted_indices):\n        sorted_labels[labels == old_label] = new_label\n    \n    return sorted_labels.tolist()\n\n# Example usage\ndata = np.array([[1, 2], [1, 3], [2, 2], [8, 8], [9, 8], [9, 9]])\nk = 2\nprint(gmm_em(data, k))\n```\n\nThis script implements the EM algorithm for fitting a Gaussian Mixture Model to a given dataset. It initializes the parameters randomly, iteratively updates them through the E-step and M-step, and finally assigns each sample to the most likely component. The components are sorted by the first coordinate of their mean to ensure deterministic output."}
{"task_id": 562, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    N = data.shape[0]\n    if n_cluster == 1:\n        return [0] * N\n\n    # Step 1: Build a fully-connected similarity graph using the Gaussian kernel\n    pairwise_distances = np.sum(data**2, axis=1, keepdims=True) + np.sum(data**2, axis=1) - 2 * np.dot(data, data.T)\n    W = np.exp(-gamma * pairwise_distances)\n\n    # Step 2: Construct the Laplacian\n    D = np.diag(np.sum(W, axis=1))\n    if method == 'normalized':\n        L = np.dot(np.dot(np.linalg.inv(np.sqrt(D)), (D - W)), np.linalg.inv(np.sqrt(D)))\n    else:\n        L = D - W\n\n    # Step 3: Compute the eigenvectors corresponding to the smallest eigenvalues\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    eigenvectors = eigenvectors[:, :n_cluster]\n\n    if method == 'normalized':\n        eigenvectors = eigenvectors / np.linalg.norm(eigenvectors, axis=1, keepdims=True)\n\n    # Step 4: Run k-means in the eigenvector space\n    centroids = eigenvectors[:n_cluster]\n    labels = np.zeros(N, dtype=int)\n    for _ in range(100):  # max iterations\n        distances = np.linalg.norm(eigenvectors[:, np.newaxis] - centroids, axis=2)\n        new_labels = np.argmin(distances, axis=1)\n        if np.all(labels == new_labels):\n            break\n        labels = new_labels\n        for i in range(n_cluster):\n            centroids[i] = np.mean(eigenvectors[labels == i], axis=0)\n\n    # Relabel clusters\n    sorted_indices = np.argsort([np.min(np.where(labels == i)) for i in range(n_cluster)])\n    relabel_map = {old_label: new_label for new_label, old_label in enumerate(sorted_indices)}\n    labels = [relabel_map[label] for label in labels]\n\n    return labels\n\n# Example usage\ndata = np.array([[1.0, 1.0], [1.1, 0.9], [5.0, 5.0], [5.2, 4.9]])\nn_cluster = 2\nprint(spectral_clustering(data, n_cluster))\n```\n\nThis script implements the Spectral Clustering algorithm as per the requirements. It includes the Gaussian kernel for similarity, the construction of the Laplacian matrix, the computation of eigenvectors, and the k-means clustering in the eigenvector space. The script also handles the relabeling of clusters to ensure the smallest index cluster is labeled 0, and so on."}
{"task_id": 563, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N, d = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    \n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    \n    w = np.round(np.sum(alpha[:, np.newaxis] * y_data[:, np.newaxis] * X_data, axis=0), 4).tolist()\n    b = np.round(b, 4)\n    \n    return w, b\n\n# Example usage\nX_data = np.array([[2, 1], [1, 2], [-2, -1], [-1, -2]])\ny_data = np.array([1, 1, -1, -1])\neta = 1.0\nw, b = perceptron_dual_train(X_data, y_data, eta)\nprint(w, b)\n```\n\nThis script defines the `perceptron_dual_train` function that implements the dual-form perceptron learning algorithm as specified. It includes the necessary imports, the function definition with a detailed docstring, and an example usage that demonstrates how to call the function and print the results."}
{"task_id": 564, "completion_id": 0, "completion": "```python\nclass Node:\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label\n        self.x = x\n        self.s = s\n        self.y = y\n        self.child = child if child is not None else []\n\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    if task_type == 'classification':\n        for child in root.child:\n            if child.x == features[root.label]:\n                return predict_sample(child, features, task_type)\n        # Default to the second child if no match is found\n        return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        if features[root.label] <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)\n\n# Example usage:\n# Constructing a simple classification tree\nnode1 = Node(x='red', y='apple')\nnode2 = Node(x='green', y='pear')\nroot_classification = Node(label=0, child=[node1, node2])\n\n# Constructing a simple regression tree\nnode3 = Node(s=5, child=[Node(y=10), Node(y=20)])\nroot_regression = Node(label=0, s=5, child=[node3.child[0], node3.child[1]])\n\n# Predicting with the classification tree\nprint(predict_sample(root_classification, ['red'], 'classification'))  # Output: 'apple'\n\n# Predicting with the regression tree\nprint(predict_sample(root_regression, [3], 'regression'))  # Output: 10\n```"}
{"task_id": 565, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef entropy(labels):\n    \"\"\"Calculate the entropy of a label distribution.\"\"\"\n    value, counts = np.unique(labels, return_counts=True)\n    probabilities = counts / counts.sum()\n    return -np.sum(probabilities * np.log2(probabilities))\n\ndef conditional_entropy(X, y):\n    \"\"\"Calculate the conditional entropy H(y|X).\"\"\"\n    total_entropy = 0\n    for value in np.unique(X):\n        subset_y = y[X == value]\n        total_entropy += (len(subset_y) / len(y)) * entropy(subset_y)\n    return total_entropy\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    base_entropy = entropy(y)\n    max_gain = -1\n    best_feature = -1\n    for i in range(X.shape[1]):\n        feature = X[:, i]\n        gain = base_entropy - conditional_entropy(feature, y)\n        if gain > max_gain:\n            max_gain = gain\n            best_feature = i\n    return (best_feature, round(max_gain, 6))\n\n# Example usage\nX = np.array([[0, 1],\n              [1, 0],\n              [0, 1],\n              [1, 1]])\ny = np.array([0, 1, 0, 1])\nprint(choose_best_feature(X, y))  # Output: (0, 1.0)\n```\n\nThis script defines a function `choose_best_feature` that calculates the information gain for each feature in the dataset `X` with respect to the labels `y`, and returns the index of the feature with the highest information gain along with the gain value rounded to 6 decimal places. The helper functions `entropy` and `conditional_entropy` are used to calculate the entropy of the label distribution and the conditional entropy after splitting by the values of a feature, respectively."}
{"task_id": 566, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\nnp.random.seed(42)\n\ndef c(n):\n    if n == 1:\n        return 0\n    else:\n        return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n\ndef build_tree(data, height_limit, current_depth=0):\n    if current_depth >= height_limit or len(data) <= 1:\n        return {'data': data, 'depth': current_depth}\n    feature = np.random.randint(data.shape[1])\n    min_val, max_val = np.min(data[:, feature]), np.max(data[:, feature])\n    if min_val == max_val:\n        return {'data': data, 'depth': current_depth}\n    threshold = np.random.uniform(min_val, max_val)\n    left_data = data[data[:, feature] < threshold]\n    right_data = data[data[:, feature] >= threshold]\n    return {\n        'feature': feature,\n        'threshold': threshold,\n        'left': build_tree(left_data, height_limit, current_depth + 1),\n        'right': build_tree(right_data, height_limit, current_depth + 1),\n        'depth': current_depth\n    }\n\ndef path_length(tree, x, current_depth=0):\n    if 'data' in tree:\n        n = len(tree['data'])\n        return current_depth + c(n)\n    feature, threshold = tree['feature'], tree['threshold']\n    if x[feature] < threshold:\n        return path_length(tree['left'], x, current_depth + 1)\n    else:\n        return path_length(tree['right'], x, current_depth + 1)\n\ndef average_path_length(data, n_trees, sample_size, height_limit):\n    path_lengths = np.zeros(len(data))\n    for _ in range(n_trees):\n        if sample_size >= len(data):\n            sample = data\n        else:\n            sample = data[np.random.choice(len(data), sample_size, replace=False)]\n        tree = build_tree(sample, height_limit)\n        for i, x in enumerate(data):\n            path_lengths[i] += path_length(tree, x)\n    path_lengths /= n_trees\n    return path_lengths\n\ndef anomaly_score(path_lengths, n_samples):\n    phi = 2 * math.log(n_samples - 1) - 2 * (n_samples - 1) / n_samples\n    return 2 ** (-path_lengths / phi)\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    n_samples, n_features = data.shape\n    height_limit = math.ceil(math.log2(sample_size))\n    path_lengths = average_path_length(data, n_trees, sample_size, height_limit)\n    scores = anomaly_score(path_lengths, n_samples)\n    threshold = np.percentile(scores, (1 - epsilon) * 100)\n    outliers = np.where(scores > threshold)[0]\n    return sorted(outliers.tolist())\n\n# Example usage\ndata = np.array([[1.0, 1.1], [0.9, 1.0], [1.2, 0.8], [8.0, 8.0]])\nn_trees = 50\nsample_size = 4\nepsilon = 0.25\nprint(detect_outliers(data, n_trees, sample_size, epsilon))\n```"}
{"task_id": 568, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    # Extract unique feature values and labels\n    feature_values = set()\n    labels = set(y_train)\n    for x in X_train:\n        feature_values.update(x)\n    feature_values = sorted(feature_values)\n    labels = sorted(labels)\n    \n    # Initialize weights\n    weights = defaultdict(float)\n    \n    # Build empirical distributions\n    empirical_counts = defaultdict(int)\n    for x, y in zip(X_train, y_train):\n        for feature in x:\n            empirical_counts[(feature, y)] += 1\n    \n    # Normalize empirical counts\n    empirical_probs = {k: v / len(X_train) for k, v in empirical_counts.items()}\n    \n    # Iteratively update weights\n    for _ in range(n_iter):\n        largest_update = 0\n        for (feature, label), empirical_prob in empirical_probs.items():\n            model_prob = 0\n            for y in labels:\n                model_prob += math.exp(sum(weights[(f, y)] for f in X_train if f == feature))\n            model_prob = math.exp(weights[(feature, label)]) / model_prob\n            update = math.log(empirical_prob / model_prob)\n            weights[(feature, label)] += update\n            largest_update = max(largest_update, abs(update))\n        if largest_update < epsilon:\n            break\n    \n    # Predict labels for test set\n    predictions = []\n    for x in X_test:\n        max_prob = -float('inf')\n        predicted_label = None\n        for y in labels:\n            prob = sum(weights[(f, y)] for f in x)\n            if prob > max_prob:\n                max_prob = prob\n                predicted_label = y\n        predictions.append(predicted_label)\n    \n    return predictions\n```\n\nThis solution implements the Maximum Entropy classifier using the Generalized Iterative Scaling (GIS) algorithm. It first builds the empirical distributions from the training data, then iteratively updates the weights until convergence or until the maximum number of iterations is reached. Finally, it predicts the labels for the test set based on the learned weights."}
{"task_id": 569, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    word_count = Counter()\n    total_docs = len(data)\n    \n    # Count the number of documents each word appears in\n    for _, words in data:\n        word_count.update(set(words))\n    \n    # Calculate the document-frequency ratio for each word\n    word_freq = [(word, round(count / total_docs, 4)) for word, count in word_count.items()]\n    word_freq.sort(key=lambda x: (-x[1], x[0]))  # Sort by frequency, then alphabetically\n    \n    # Determine the set of top words\n    top_words = set(word for word, _ in word_freq[:cut_off]) if cut_off is not None else set(word for word, _ in word_freq)\n    \n    return word_freq, top_words\n\n\n# Example usage\ndata = [\n    (1, {\"apple\", \"banana\"}),\n    (0, {\"banana\", \"cherry\"}),\n    (1, {\"banana\", \"dragon\"})\n]\ncut_off = 2\nprint(statistic_key_word(data, cut_off))\n```\n\nThis code defines the `statistic_key_word` function as specified in the task. It uses the `Counter` class from the `collections` module to count the number of documents each word appears in. It then calculates the document-frequency ratio for each word, sorts the words by their frequency (and alphabetically if frequencies are equal), and determines the set of top words based on the `cut_off` parameter. The example usage at the end demonstrates how to call the function with a sample dataset and `cut_off` value."}
{"task_id": 571, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute the weight vector\n    w = np.dot(X.T, alpha * y)\n    \n    # Compute the bias term\n    wX = np.dot(X, w)\n    b = np.mean(y - wX)\n    \n    # Round the values to 4 decimal places\n    w_list = [round(val, 4) for val in w]\n    b = round(b, 4)\n    \n    return w_list, b\n\n# Example usage\nX = np.array([[1, 2], [2, 3]])\ny = np.array([1, -1])\nalpha = np.array([0.5, 0.5])\nw_list, b = compute_svm_parameters(X, y, alpha)\nprint(w_list, b)\n```\n\nThis script defines the `compute_svm_parameters` function that computes the weight vector and bias term for a linear SVM given the training samples, labels, and Lagrange multipliers. The function then rounds the results to four decimal places and returns them as specified."}
{"task_id": 572, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef euclidean_distance(point1, point2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((np.array(point1) - np.array(point2)) ** 2))\n\ndef pairwise_distance_matrix(data):\n    \"\"\"Compute the full pairwise Euclidean distance matrix.\"\"\"\n    n = len(data)\n    distance_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i, n):\n            distance_matrix[i, j] = euclidean_distance(data[i], data[j])\n            distance_matrix[j, i] = distance_matrix[i, j]\n    return distance_matrix\n\ndef k_distance(distance_matrix, k):\n    \"\"\"Compute the k-distance for each point and the index list of k nearest neighbors.\"\"\"\n    n = len(distance_matrix)\n    k_distances = []\n    k_nearest_neighbors = []\n    for i in range(n):\n        sorted_indices = np.argsort(distance_matrix[i])\n        k_distances.append(distance_matrix[i, sorted_indices[k]])\n        k_nearest_neighbors.append(sorted_indices[:k])\n    return k_distances, k_nearest_neighbors\n\ndef reachability_distance(distance_matrix, k_distances, k_nearest_neighbors):\n    \"\"\"Compute the reachability distance for each pair of points.\"\"\"\n    n = len(distance_matrix)\n    reachability_distances = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            reachability_distances[i, j] = max(k_distances[j], distance_matrix[i, j])\n    return reachability_distances\n\ndef local_reachability_density(reachability_distances, k_nearest_neighbors):\n    \"\"\"Compute the Local Reachability Density (LRD) for each point.\"\"\"\n    n = len(reachability_distances)\n    lrd = []\n    for i in range(n):\n        sum_reachability = sum(reachability_distances[i, j] for j in k_nearest_neighbors[i])\n        lrd.append(len(k_nearest_neighbors[i]) / sum_reachability)\n    return lrd\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Compute the Local Outlier Factor (LOF) for each point.\"\"\"\n    distance_matrix = pairwise_distance_matrix(data)\n    k_distances, k_nearest_neighbors = k_distance(distance_matrix, k)\n    reachability_distances = reachability_distance(distance_matrix, k_distances, k_nearest_neighbors)\n    lrd = local_reachability_density(reachability_distances, k_nearest_neighbors)\n    \n    lof_scores = []\n    for i in range(len(data)):\n        sum_lrd_neighbors = sum(lrd[j] for j in k_nearest_neighbors[i])\n        lof_score = (sum_lrd_neighbors / len(k_nearest_neighbors[i])) / lrd[i]\n        lof_scores.append(lof_score)\n    \n    lof_scores_rounded = np.round(lof_scores, 4)\n    outlier_indices = [i for i, score in enumerate(lof_scores_rounded) if score > epsilon]\n    \n    return lof_scores_rounded, outlier_indices\n\n# Example usage\ndata = [[0], [1], [2], [10]]\nk = 1\nepsilon = 1.5\nprint(local_outlier_factor(data, k, epsilon))\n```\n\nThis Python script implements the Local Outlier Factor (LOF) algorithm from scratch, as per the task description. It includes all the necessary steps to compute the LOF scores and identify outliers based on the `epsilon` threshold."}
{"task_id": 574, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    \n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n    \n    for c in range(m):\n        base = 10 * (c // 2)\n        \n        # Training data\n        for _ in range(n_train):\n            x = round(random.uniform(base + 1, base + 9), 4)\n            y = round(random.uniform(base + 1, base + 9), 4)\n            X_train.append([x, y])\n            y_train.append(c)\n        \n        # Validation data\n        for _ in range(n_val):\n            x = round(random.uniform(base + 1, base + 9), 4)\n            y = round(random.uniform(base + 1, base + 9), 4)\n            X_val.append([x, y])\n            y_val.append(c)\n    \n    return (np.array(X_train), np.array(X_val), np.array(y_train), np.array(y_val))\n\n# Example usage\nm = 2\nn_train = 2\nn_val = 1\nseed = 42\nX_train, X_val, y_train, y_val = generate_data(m, n_train, n_val, seed)\nprint(\"X_train:\", X_train)\nprint(\"X_val:\", X_val)\nprint(\"y_train:\", y_train)\nprint(\"y_val:\", y_val)\n```\n\nThis script defines the `generate_data` function as per the specifications provided. It generates synthetic 2-D data for a given number of classes, with specified numbers of training and validation points per class. The function ensures reproducibility by allowing a seed to be set, and it rounds all coordinates to 4 decimal places as required."}
{"task_id": 579, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    m, d = X.shape\n    centres = X[:k].copy()\n    labels = np.zeros(m, dtype=int)\n    for _ in range(max_iters):\n        old_labels = labels.copy()\n        # Assignment step\n        for i, point in enumerate(X):\n            distances = np.linalg.norm(point - centres, axis=1)\n            labels[i] = np.argmin(distances)\n        # Update step\n        for j in range(k):\n            if np.any(labels == j):\n                centres[j] = np.mean(X[labels == j], axis=0)\n        if np.array_equal(old_labels, labels):\n            break\n    centres = np.round(centres, 4).tolist()\n    labels = labels.tolist()\n    return labels, centres\n\n# Example usage\nX = np.array([[1, 1], [1.5, 2], [3, 4], [5, 7], [3.5, 5], [4.5, 5], [3.5, 4.5]])\nk = 2\nmax_iters = 100\nprint(kmeans(X, k, max_iters))\n```\n\nThis code defines a function `kmeans` that implements the K-Means clustering algorithm as specified in the task. It uses NumPy for efficient numerical operations and ensures that the results are deterministic by using the first *k* points as initial centres and rounding the final centres to 4 decimal places."}
{"task_id": 581, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    m, n = X.shape\n    w = np.zeros(n)\n    b = 0.0\n\n    if learning_rate == 0 or iterations == 0:\n        return [round(float(i), 4) for i in w], round(b, 4)\n\n    for _ in range(iterations):\n        y_pred = np.dot(X, w) + b\n        residuals = y - y_pred\n\n        for j in range(n):\n            grad_w = -2 * np.dot(X[:, j], residuals) + l1_penalty * np.sign(w[j]) + 2 * l2_penalty * w[j]\n            w[j] -= learning_rate * grad_w / m\n\n        grad_b = -2 * np.sum(residuals)\n        b -= learning_rate * grad_b / m\n\n    return [round(float(i), 4) for i in w], round(b, 4)\n\n# Example usage\nX = np.array([[1, 0], [0, 1]])\ny = np.array([1, 1])\nlearning_rate = 0.5\niterations = 1\nl1_penalty = 0.0\nl2_penalty = 0.0\n\nweights, bias = elastic_net_regression(X, y, learning_rate, iterations, l1_penalty, l2_penalty)\nprint(weights, bias)\n```\n\nThis script defines the `elastic_net_regression` function that implements the Elastic-Net regularised linear regression using batch gradient descent. The function takes the input features `X`, target values `y`, learning rate, number of iterations, and L1 and L2 penalties as arguments. It returns the learned weights and bias, each rounded to four decimal places. The example usage demonstrates how to call the function with a simple dataset and print the resulting weights and bias."}
{"task_id": 591, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    # Convert the input list to a numpy array for easier manipulation\n    x = np.array(x)\n    \n    # Iterate over each layer's weights\n    for layer_weights in weights[:-1]:  # Exclude the last layer\n        # Add the bias term to the input\n        x = np.insert(x, 0, 1)\n        # Compute the dot product of the input and the weights\n        x = np.dot(x, np.array([w[1:] for w in layer_weights]).T)\n        # Add the bias weights\n        x += np.array([w[0] for w in layer_weights])\n        # Apply ReLU activation function\n        x = np.maximum(0, x)\n    \n    # Process the last layer (linear activation)\n    last_layer_weights = weights[-1]\n    x = np.insert(x, 0, 1)\n    x = np.dot(x, np.array([w[1:] for w in last_layer_weights]).T)\n    x += np.array([w[0] for w in last_layer_weights])\n    \n    # Round the output to 4 decimal places\n    x = np.round(x, 4)\n    \n    # Return a float if there's only one output neuron, otherwise return a list\n    return x.item() if len(x) == 1 else x.tolist()\n\n# Example usage\nweights = [\n    [[0.5, 0.2, 0.8], [1.0, -0.5, 0.3]],  # hidden layer (2 neurons)\n    [[0.7, 0.6, -1.2]]                     # output layer (1 neuron)\n]\nx = [0.1, 0.4]\nprint(neural_net_predict(weights, x))  # Output: -0.08\n```"}
{"task_id": 595, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"\n    Implement the K-Means clustering algorithm from scratch to compute the centroids.\n    The function receives a 2-D NumPy array X and an integer k \u2013 the number of clusters.\n    The centroids are initialized with the first k samples in X.\n    The algorithm runs for at most max_iters iterations or until convergence.\n    Convergence is reached when all centroids move less than 1e-4 in a full iteration.\n    If a cluster becomes empty, its centroid remains unchanged.\n    After convergence, centroids are sorted in ascending lexicographical order and rounded to 4 decimal places.\n    \"\"\"\n    # Initialize centroids with the first k samples\n    centroids = X[:k].copy()\n    \n    for _ in range(max_iters):\n        # Assign each sample to the nearest centroid\n        distances = np.sum((X[:, np.newaxis] - centroids) ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Update centroids\n        new_centroids = centroids.copy()\n        for i in range(k):\n            if np.sum(labels == i) > 0:  # Check if cluster is not empty\n                new_centroids[i] = np.mean(X[labels == i], axis=0)\n        \n        # Check for convergence\n        if np.all(np.linalg.norm(centroids - new_centroids, axis=1) < 1e-4):\n            break\n        \n        centroids = new_centroids\n    \n    # Sort centroids and round to 4 decimal places\n    sorted_centroids = np.round(np.sort(centroids, axis=0), 4)\n    \n    # Convert to list of lists\n    return sorted_centroids.tolist()\n\n# Example usage\nX = np.array([[1, 1], [2, 1], [4, 3], [5, 4]])\nk = 2\nprint(kmeans_centroids(X, k))\n```\n\nThis code snippet follows the provided guidelines and implements the K-Means clustering algorithm from scratch, focusing on computing the centroids only. The centroids are initialized with the first `k` samples, and the algorithm runs for a maximum of `max_iters` iterations or until convergence. The centroids are sorted and rounded to 4 decimal places before being returned as a list of lists."}
