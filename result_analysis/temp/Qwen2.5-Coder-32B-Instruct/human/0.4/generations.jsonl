{"task_id": 1, "completion_id": 0, "completion": "```\npython\ndef matrix_dot_vector(a: list[list[int|float]], b: list[int|float]) -> list[int|float]:\n    # Check if the number of columns in the matrix matches the length of the vector\n    if not a or not b or len(a[0]) != len(b):\n        return -1\n    \n    # Initialize the result vector\n    result = []\n    \n    # Compute the dot product for each row in the matrix\n    for row in a:\n        dot_product = sum(x * y for x, y in zip(row, b))\n        result.append(dot_product)\n    \n    return result\n\n# Example usage:\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nvector = [1, 0, 1]\n\nresult = matrix_dot_vector(matrix, vector)\nprint(result)  # Output should be [4, 10, 16]\n```"}
{"task_id": 2, "completion_id": 0, "completion": "```\npython\ndef transpose_matrix(a: list[list[int|float]]) -> list[list[int|float]]:\n    # Check if the matrix is empty\n    if not a or not a[0]:\n        return []\n    \n    # Use list comprehension to compute the transpose\n    transposed = [[a[j][i] for j in range(len(a))] for i in range(len(a[0]))]\n    \n    return transposed\n\n# Example usage:\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\ntransposed_matrix = transpose_matrix(matrix)\nprint(transposed_matrix)\n```\n\nThis script defines a function `transpose_matrix` that takes a matrix `a` as input and returns its transpose. The function uses a list comprehension to iterate over the columns of the original matrix and create the rows of the transposed matrix. An example usage is also provided to demonstrate how the function works."}
{"task_id": 3, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef reshape_matrix(a: list[list[int|float]], new_shape: tuple[int, int]) -> list[list[int|float]]:\n    # Convert the input list to a numpy array\n    array = np.array(a)\n    \n    # Check if the total number of elements matches the new shape\n    if array.size != new_shape[0] * new_shape[1]:\n        return []\n    \n    # Reshape the array to the new shape\n    reshaped_array = array.reshape(new_shape)\n    \n    # Convert the reshaped numpy array back to a list and return\n    return reshaped_array.tolist()\n\n# Example usage:\n# matrix = [[1, 2], [3, 4]]\n# new_shape = (4, 1)\n# print(reshape_matrix(matrix, new_shape))  # Output: [[1], [2], [3], [4]]\n```"}
{"task_id": 4, "completion_id": 0, "completion": "```\npython\ndef calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    if mode not in ['row', 'column']:\n        raise ValueError(\"Mode must be either 'row' or 'column'\")\n    \n    if mode == 'row':\n        # Calculate mean for each row\n        means = [sum(row) / len(row) for row in matrix]\n    elif mode == 'column':\n        # Calculate mean for each column\n        if not matrix:\n            return []\n        num_columns = len(matrix[0])\n        means = [sum(matrix[row][col] for row in range(len(matrix))) / len(matrix) for col in range(num_columns)]\n    \n    return means\n\n# Example usage:\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nprint(calculate_matrix_mean(matrix, 'row'))    # Output: [2.0, 5.0, 8.0]\nprint(calculate_matrix_mean(matrix, 'column')) # Output: [4.0, 5.0, 6.0]\n```\n\nThis script defines a function `calculate_matrix_mean` that computes the mean of a matrix either by row or by column, depending on the specified mode. It includes error handling for invalid modes and provides example usage to demonstrate its functionality."}
{"task_id": 5, "completion_id": 0, "completion": "```\npython\ndef scalar_multiply(matrix: list[list[int|float]], scalar: int|float) -> list[list[int|float]]:\n    \"\"\"\n    Multiplies a matrix by a scalar and returns the resulting matrix.\n\n    :param matrix: A 2D list (list of lists) where each sublist represents a row of the matrix.\n    :param scalar: An integer or float by which the matrix is to be multiplied.\n    :return: A 2D list representing the matrix after scalar multiplication.\n    \"\"\"\n    return [[element * scalar for element in row] for row in matrix]\n\n# Example usage:\nif __name__ == \"__main__\":\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    scalar = 3\n    result = scalar_multiply(matrix, scalar)\n    for row in result:\n        print(row)\n```\n\nThis script defines a function `scalar_multiply` that takes a matrix and a scalar as inputs and returns the matrix after multiplying each element by the scalar. The example usage demonstrates how to use this function with a sample matrix and scalar."}
{"task_id": 6, "completion_id": 0, "completion": "```\npython\ndef calculate_eigenvalues(matrix: list[list[float|int]]) -> list[float]:\n    # Extract elements from the 2x2 matrix\n    a, b = matrix[0]\n    c, d = matrix[1]\n    \n    # Calculate the trace and determinant of the matrix\n    trace = a + d\n    determinant = a * d - b * c\n    \n    # Calculate the eigenvalues using the quadratic formula\n    import math\n    eigenvalue1 = (trace + math.sqrt(trace**2 - 4 * determinant)) / 2\n    eigenvalue2 = (trace - math.sqrt(trace**2 - 4 * determinant)) / 2\n    \n    # Return the eigenvalues sorted from highest to lowest\n    return sorted([eigenvalue1, eigenvalue2], reverse=True)\n\n# Example usage:\nmatrix = [[2, 1], [1, 2]]\neigenvalues = calculate_eigenvalues(matrix)\nprint(eigenvalues)  # Output: [3.0, 1.0]\n```"}
{"task_id": 7, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef transform_matrix(A: list[list[int|float]], T: list[list[int|float]], S: list[list[int|float]]) -> list[list[int|float]]:\n    # Convert input lists to numpy arrays for matrix operations\n    A_np = np.array(A, dtype=float)\n    T_np = np.array(T, dtype=float)\n    S_np = np.array(S, dtype=float)\n    \n    # Check if T and S are square matrices\n    if T_np.shape[0] != T_np.shape[1] or S_np.shape[0] != S_np.shape[1]:\n        return -1\n    \n    # Check if T and S are invertible by calculating their determinants\n    if np.linalg.det(T_np) == 0 or np.linalg.det(S_np) == 0:\n        return -1\n    \n    # Calculate the inverse of T and S\n    T_inv = np.linalg.inv(T_np)\n    S_inv = np.linalg.inv(S_np)\n    \n    # Perform the transformation T^(-1) * A * S\n    transformed_matrix = T_inv @ A_np @ S_np\n    \n    # Round the result to the nearest 4th decimal\n    transformed_matrix_rounded = np.round(transformed_matrix, 4)\n    \n    # Convert the result back to a list\n    result = transformed_matrix_rounded.tolist()\n    \n    return result\n\n# Example usage:\n# A = [[1, 2], [3, 4]]\n# T = [[1, 0], [0, 1]]\n# S = [[1, 0], [0, 1]]\n# print(transform_matrix(A, T, S))\n```\n\nThis script defines a function `transform_matrix` that takes three matrices `A`, `T`, and `S` as input, checks if `T` and `S` are invertible, and then performs the transformation $T^{-1}AS$. The result is rounded to the nearest 4th decimal and returned as a Python list. If `T` or `S` is not invertible, the function returns `-1`."}
{"task_id": 8, "completion_id": 0, "completion": "```\npython\ndef inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    # Extract elements from the matrix\n    a, b = matrix[0]\n    c, d = matrix[1]\n    \n    # Calculate the determinant\n    det = a * d - b * c\n    \n    # Check if the matrix is invertible\n    if det == 0:\n        return None\n    \n    # Calculate the inverse\n    inverse = [\n        [d / det, -b / det],\n        [-c / det, a / det]\n    ]\n    \n    return inverse\n\n# Example usage:\nmatrix = [[1, 2], [3, 4]]\ninverse = inverse_2x2(matrix)\nprint(inverse)  # Output: [[-2.0, 1.0], [1.5, -0.5]]\n\nnon_invertible_matrix = [[1, 2], [2, 4]]\nnon_invertible_inverse = inverse_2x2(non_invertible_matrix)\nprint(non_invertible_inverse)  # Output: None\n```"}
{"task_id": 9, "completion_id": 0, "completion": "```\npython\ndef matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    # Get the number of rows and columns for matrices a and b\n    rows_a, cols_a = len(a), len(a[0])\n    rows_b, cols_b = len(b), len(b[0])\n    \n    # Check if the matrices can be multiplied\n    if cols_a != rows_b:\n        return -1\n    \n    # Initialize the result matrix with zeros\n    result = [[0 for _ in range(cols_b)] for _ in range(rows_a)]\n    \n    # Perform matrix multiplication\n    for i in range(rows_a):\n        for j in range(cols_b):\n            for k in range(cols_a):\n                result[i][j] += a[i][k] * b[k][j]\n    \n    return result\n\n# Example usage:\n# a = [[1, 2, 3], [4, 5, 6]]\n# b = [[7, 8], [9, 10], [11, 12]]\n# print(matrixmul(a, b))  # Output: [[58, 64], [139, 154]]\n```"}
{"task_id": 10, "completion_id": 0, "completion": "```\npython\ndef calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    import numpy as np\n    \n    # Convert the list of lists into a numpy array for easier manipulation\n    data = np.array(vectors)\n    \n    # Calculate the mean of each feature\n    means = np.mean(data, axis=1)\n    \n    # Center the data by subtracting the mean from each observation\n    centered_data = data - means[:, np.newaxis]\n    \n    # Calculate the covariance matrix\n    # The formula for covariance matrix is (1/(n-1)) * (centered_data) * (centered_data.T)\n    n = data.shape[1]\n    covariance_matrix = (1 / (n - 1)) * np.dot(centered_data, centered_data.T)\n    \n    # Convert the result back to a list of lists\n    return covariance_matrix.tolist()\n\n# Test cases\ndef test_calculate_covariance_matrix():\n    # Test case 1: Simple 2x2 matrix\n    vectors1 = [\n        [1, 2, 3],\n        [4, 5, 6]\n    ]\n    expected1 = [\n        [0.6666666666666666, 0.6666666666666666],\n        [0.6666666666666666, 0.6666666666666666]\n    ]\n    result1 = calculate_covariance_matrix(vectors1)\n    assert np.allclose(result1, expected1), f\"Test case 1 failed: {result1}\"\n\n    # Test case 2: 3x3 matrix\n    vectors2 = [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [9, 10, 11, 12]\n    ]\n    expected2 = [\n        [1.6666666666666667, 1.6666666666666667, 1.6666666666666667],\n        [1.6666666666666667, 1.6666666666666667, 1.6666666666666667],\n        [1.6666666666666667, 1.6666666666666667, 1.6666666666666667]\n    ]\n    result2 = calculate_covariance_matrix(vectors2)\n    assert np.allclose(result2, expected2), f\"Test case 2 failed: {result2}\"\n\n    # Test case 3: Single feature\n    vectors3 = [\n        [1, 2, 3, 4, 5]\n    ]\n    expected3 = [\n        [2.0]\n    ]\n    result3 = calculate_covariance_matrix(vectors3)\n    assert np.allclose(result3, expected3), f\"Test case 3 failed: {result3}\"\n\n    # Test case 4: Two features with zero covariance\n    vectors4 = [\n        [1, 2, 3, 4, 5],\n        [5, 4, 3, 2, 1]\n    ]\n    expected4 = [\n        [2.0, -2.0],\n        [-2.0, 2.0]\n    ]\n    result4 = calculate_covariance_matrix(vectors4)\n    assert np.allclose(result4, expected4), f\"Test case 4 failed: {result4}\"\n\n    print(\"All test cases passed!\")\n\n# Run the test cases\ntest_calculate_covariance_matrix()\n```\n\nThis script defines a function `calculate_covariance_matrix` that computes the covariance matrix for a given set of vectors. It also includes a set of test cases to verify the correctness of the implementation. The test cases cover various scenarios, including simple matrices, single features, and features with zero covariance."}
{"task_id": 11, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    # Get the number of equations\n    N = len(b)\n    \n    # Initialize the solution vector with zeros\n    x = np.zeros(N)\n    \n    # Perform n iterations\n    for _ in range(n):\n        x_new = np.zeros(N)\n        for i in range(N):\n            s1 = np.dot(A[i, :i], x[:i])\n            s2 = np.dot(A[i, i + 1:], x[i + 1:])\n            x_new[i] = (b[i] - s1 - s2) / A[i, i]\n        # Update the solution vector and round to 4 decimal places\n        x = np.round(x_new, 4)\n    \n    # Convert the numpy array to a list and return\n    return x.tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    A = np.array([[4, 1, 2], [3, 5, 1], [1, 1, 3]], dtype=float)\n    b = np.array([4, 7, 3], dtype=float)\n    n = 10  # Number of iterations\n    solution = solve_jacobi(A, b, n)\n    print(\"Approximate solution:\", solution)\n```\n\nThis script defines a function `solve_jacobi` that uses the Jacobi method to solve a system of linear equations. The function takes a matrix `A`, a vector `b`, and the number of iterations `n` as inputs, and returns the approximate solution as a list. The solution is rounded to four decimal places at each iteration. The example usage at the bottom demonstrates how to call the function with a sample matrix and vector."}
{"task_id": 12, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that performs Singular Value Decomposition (SVD) on a 2x2 matrix using the Jacobian method. The script calculates the singular values and returns them in the specified format.\n\n```python\nimport numpy as np\n\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    # Ensure the input is a 2x2 matrix\n    if A.shape != (2, 2):\n        raise ValueError(\"Input matrix must be 2x2.\")\n    \n    # Initialize variables\n    U = np.eye(2)\n    V = np.eye(2)\n    A_hat = A.copy()\n    tol = 1e-10\n    max_iter = 1000\n    iter_count = 0\n    \n    # Jacobian method to approximate SVD\n    while iter_count < max_iter:\n        # Compute the Jacobian update for U\n        J_U = np.dot(A_hat, V.T) - np.dot(U, np.dot(U.T, np.dot(A_hat, V.T)))\n        # Compute the Jacobian update for V\n        J_V = np.dot(A_hat.T, U) - np.dot(V, np.dot(V.T, np.dot(A_hat.T, U)))\n        \n        # Update U and V\n        U += J_U\n        V += J_V\n        \n        # Orthogonalize U and V\n        U, _ = np.linalg.qr(U)\n        V, _ = np.linalg.qr(V)\n        \n        # Update A_hat\n        A_hat = np.dot(U.T, np.dot(A, V))\n        \n        # Check for convergence\n        if np.allclose(np.dot(U.T, np.dot(A, V)) - np.diag(np.diag(A_hat)), 0, atol=tol):\n            break\n        \n        iter_count += 1\n    \n    # Extract singular values\n    singular_values = np.diag(A_hat)\n    \n    # Ensure singular values are positive\n    singular_values = np.abs(singular_values)\n    \n    # Sort singular values in descending order\n    sort_indices = np.argsort(singular_values)[::-1]\n    singular_values = singular_values[sort_indices]\n    \n    # Round to the nearest 4th decimal\n    singular_values = np.round(singular_values, 4)\n    \n    return tuple(singular_values)\n\n# Example usage\nA = np.array([[1, 2], [3, 4]])\nsingular_values = svd_2x2_singular_values(A)\nprint(\"Singular Values:\", singular_values)\n```\n\nThis script defines a function `svd_2x2_singular_values` that takes a 2x2 matrix `A` as input and returns a tuple of its singular values, rounded to the nearest 4th decimal. The Jacobian method is used to iteratively approximate the SVD, and the process continues until convergence or a maximum number of iterations is reached."}
{"task_id": 13, "completion_id": 0, "completion": "```\npython\ndef determinant_4x4(matrix: list[list[int|float]]) -> float:\n    def determinant_3x3(minor: list[list[int|float]]) -> float:\n        # Calculate the determinant of a 3x3 matrix\n        a, b, c = minor[0]\n        d, e, f = minor[1]\n        g, h, i = minor[2]\n        return a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g)\n\n    # Ensure the matrix is 4x4\n    if len(matrix) != 4 or any(len(row) != 4 for row in matrix):\n        raise ValueError(\"Input must be a 4x4 matrix\")\n\n    # Laplace's Expansion along the first row\n    det = 0\n    for c in range(4):\n        # Create the 3x3 minor matrix by excluding the first row and the c-th column\n        minor = [row[:c] + row[c+1:] for row in matrix[1:]]\n        # Calculate the cofactor and add to the determinant\n        det += ((-1) ** c) * matrix[0][c] * determinant_3x3(minor)\n    \n    return det\n\n# Example usage:\nmatrix = [\n    [1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12],\n    [13, 14, 15, 16]\n]\n\nprint(\"Determinant of the matrix:\", determinant_4x4(matrix))\n```\n\nThis script defines a function `determinant_4x4` that calculates the determinant of a 4x4 matrix using Laplace's Expansion. It includes a helper function `determinant_3x3` to compute the determinant of 3x3 matrices, which are obtained as minors during the expansion. The example usage at the end demonstrates how to call the function with a sample 4x4 matrix."}
{"task_id": 14, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    # Convert the input lists to numpy arrays for easier manipulation\n    X_np = np.array(X)\n    y_np = np.array(y)\n    \n    # Add a column of ones to X_np to account for the intercept term\n    X_b = np.c_[np.ones((X_np.shape[0], 1)), X_np]\n    \n    # Calculate the coefficients using the normal equation\n    # theta = (X_b.T * X_b)^(-1) * X_b.T * y\n    theta = np.linalg.inv(X_b.T.dot(X_b)).dot(X_b.T).dot(y_np)\n    \n    # Round the coefficients to four decimal places\n    theta_rounded = np.round(theta, 4)\n    \n    # Convert the numpy array back to a list before returning\n    return theta_rounded.tolist()\n\n# Example usage:\n# X = [[1, 2], [2, 3], [3, 4]]\n# y = [2, 3, 4]\n# coefficients = linear_regression_normal_equation(X, y)\n# print(coefficients)\n```\n\nThis script defines a function `linear_regression_normal_equation` that performs linear regression using the normal equation. It takes a matrix `X` and a vector `y` as input, and returns the coefficients of the linear regression model, rounded to four decimal places. The example usage at the bottom shows how to call the function with sample data."}
{"task_id": 15, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> list:\n    # Initialize coefficients to zero\n    m, n = X.shape\n    theta = np.zeros(n)\n    \n    # Perform gradient descent\n    for _ in range(iterations):\n        # Calculate the predictions\n        predictions = X.dot(theta)\n        \n        # Calculate the errors\n        errors = predictions - y\n        \n        # Update the coefficients\n        gradient = (1 / m) * X.T.dot(errors)\n        theta -= alpha * gradient\n    \n    # Round the coefficients to four decimal places and convert to list\n    return np.round(theta, 4).tolist()\n\n# Example usage:\n# X = np.array([[1, 1], [1, 2], [1, 3]])\n# y = np.array([2, 3, 4])\n# alpha = 0.01\n# iterations = 1000\n# print(linear_regression_gradient_descent(X, y, alpha, iterations))\n```\n\nThis script defines a function `linear_regression_gradient_descent` that performs linear regression using gradient descent. It initializes the coefficients to zero, iteratively updates them using the gradient of the cost function, and returns the rounded coefficients as a list. The example usage at the bottom shows how to call the function with sample data."}
{"task_id": 16, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    # Standardization\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0)\n    standardized_data = (data - mean) / std\n    standardized_data_rounded = np.round(standardized_data, 4).tolist()\n    \n    # Min-Max Normalization\n    min_val = np.min(data, axis=0)\n    max_val = np.max(data, axis=0)\n    min_max_normalized_data = (data - min_val) / (max_val - min_val)\n    min_max_normalized_data_rounded = np.round(min_max_normalized_data, 4).tolist()\n    \n    return standardized_data_rounded, min_max_normalized_data_rounded\n\n# Example usage:\nif __name__ == \"__main__\":\n    data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    standardized, min_max_normalized = feature_scaling(data)\n    print(\"Standardized Data:\")\n    print(standardized)\n    print(\"Min-Max Normalized Data:\")\n    print(min_max_normalized)\n```\n\nThis script defines a function `feature_scaling` that takes a 2D NumPy array as input and returns two lists: one with the data standardized and the other with the data min-max normalized. Each value in the resulting lists is rounded to the nearest 4th decimal place. The example usage at the bottom demonstrates how to call the function and print the results."}
{"task_id": 17, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that implements the k-Means clustering algorithm as described. The script includes the function `k_means_clustering` which takes the specified inputs and returns the final centroids rounded to the nearest fourth decimal.\n\n```python\nimport numpy as np\n\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n    # Convert points and initial centroids to numpy arrays for easier manipulation\n    points = np.array(points)\n    centroids = np.array(initial_centroids)\n    \n    for _ in range(max_iterations):\n        # Calculate the distance from each point to each centroid\n        distances = np.linalg.norm(points[:, np.newaxis] - centroids, axis=2)\n        \n        # Assign each point to the nearest centroid\n        labels = np.argmin(distances, axis=1)\n        \n        # Calculate new centroids as the mean of all points assigned to each centroid\n        new_centroids = np.array([points[labels == i].mean(axis=0) for i in range(k)])\n        \n        # Check for convergence: if centroids do not change, break the loop\n        if np.all(centroids == new_centroids):\n            break\n        \n        # Update centroids\n        centroids = new_centroids\n    \n    # Round the final centroids to the nearest fourth decimal\n    final_centroids = np.round(centroids, 4)\n    \n    # Convert numpy array back to list of tuples\n    return [tuple(centroid) for centroid in final_centroids]\n\n# Example usage:\npoints = [(1.0, 2.0), (1.5, 1.8), (5.0, 8.0), (8.0, 8.0), (1.0, 0.6), (9.0, 11.0)]\nk = 2\ninitial_centroids = [(1.0, 2.0), (8.0, 8.0)]\nmax_iterations = 100\n\nfinal_centroids = k_means_clustering(points, k, initial_centroids, max_iterations)\nprint(final_centroids)\n```\n\n### Explanation:\n- **Input Conversion**: The input points and initial centroids are converted to NumPy arrays for efficient computation.\n- **Distance Calculation**: The Euclidean distance from each point to each centroid is calculated.\n- **Label Assignment**: Each point is assigned to the nearest centroid based on the calculated distances.\n- **Centroid Update**: New centroids are computed as the mean of all points assigned to each centroid.\n- **Convergence Check**: The algorithm checks if the centroids have changed. If not, it breaks out of the loop, indicating convergence.\n- **Rounding**: The final centroids are rounded to the nearest fourth decimal.\n- **Output**: The final centroids are returned as a list of tuples."}
{"task_id": 18, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    \"\"\"\n    Generate train and test splits for K-Fold Cross-Validation.\n\n    Parameters:\n    X (np.ndarray): The feature dataset.\n    y (np.ndarray): The target dataset.\n    k (int): The number of folds.\n    shuffle (bool): Whether to shuffle the data before splitting.\n    random_seed (int): Random seed for reproducibility if shuffling is enabled.\n\n    Returns:\n    list: A list of tuples, where each tuple contains the train and test indices for a fold.\n    \"\"\"\n    if random_seed is not None:\n        np.random.seed(random_seed)\n    \n    # Number of samples\n    n_samples = X.shape[0]\n    \n    # Shuffle the indices\n    indices = np.arange(n_samples)\n    if shuffle:\n        np.random.shuffle(indices)\n    \n    # Split indices into k folds\n    fold_size = n_samples // k\n    folds = []\n    for i in range(k):\n        # Determine start and end indices of the test set for the current fold\n        start = i * fold_size\n        end = (i + 1) * fold_size if i != k - 1 else n_samples\n        \n        # Test set indices\n        test_indices = indices[start:end]\n        \n        # Train set indices\n        train_indices = np.concatenate([indices[:start], indices[end:]])\n        \n        folds.append((train_indices, test_indices))\n    \n    return folds\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Create a sample dataset\n    X = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]])\n    y = np.array([0, 1, 0, 1, 0, 1, 0, 1, 0, 1])\n    \n    # Perform 5-fold cross-validation\n    folds = k_fold_cross_validation(X, y, k=5, shuffle=True, random_seed=42)\n    \n    # Print the folds\n    for i, (train_indices, test_indices) in enumerate(folds):\n        print(f\"Fold {i+1}:\")\n        print(f\"  Train indices: {train_indices}\")\n        print(f\"  Test indices: {test_indices}\")\n        print(f\"  X_train: {X[train_indices]}\")\n        print(f\"  y_train: {y[train_indices]}\")\n        print(f\"  X_test: {X[test_indices]}\")\n        print(f\"  y_test: {y[test_indices]}\")\n        print()\n```"}
{"task_id": 19, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    # Step 1: Standardize the data\n    mean = np.mean(data, axis=0)\n    std_dev = np.std(data, axis=0)\n    standardized_data = (data - mean) / std_dev\n    \n    # Step 2: Compute the covariance matrix\n    covariance_matrix = np.cov(standardized_data, rowvar=False)\n    \n    # Step 3: Find the eigenvalues and eigenvectors of the covariance matrix\n    eigenvalues, eigenvectors = np.linalg.eig(covariance_matrix)\n    \n    # Step 4: Sort the eigenvalues and eigenvectors in descending order\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    \n    # Step 5: Select the top k eigenvectors\n    principal_components = sorted_eigenvectors[:, :k]\n    \n    # Step 6: Round the principal components to the nearest 4th decimal\n    principal_components_rounded = np.round(principal_components, 4)\n    \n    return principal_components_rounded.tolist()\n\n# Example usage:\n# data = np.array([[1, 2], [3, 4], [5, 6]])\n# k = 1\n# print(pca(data, k))\n```\n\nThis script defines a function `pca` that performs Principal Component Analysis on a given dataset. It standardizes the data, computes the covariance matrix, finds the eigenvalues and eigenvectors, and returns the top `k` principal components rounded to four decimal places."}
{"task_id": 20, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter\n\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n    def entropy(class_counts: dict) -> float:\n        total = sum(class_counts.values())\n        return -sum((count / total) * math.log2(count / total) for count in class_counts.values() if count > 0)\n\n    def information_gain(examples: list[dict], attribute: str, target_attr: str) -> float:\n        class_counts = Counter(example[target_attr] for example in examples)\n        total_entropy = entropy(class_counts)\n        \n        value_counts = Counter(example[attribute] for example in examples)\n        weighted_entropy = 0.0\n        for value in value_counts:\n            subset = [example for example in examples if example[attribute] == value]\n            subset_entropy = entropy(Counter(example[target_attr] for example in subset))\n            weighted_entropy += (value_counts[value] / len(examples)) * subset_entropy\n        \n        return total_entropy - weighted_entropy\n\n    def choose_best_attribute(examples: list[dict], attributes: list[str], target_attr: str) -> str:\n        return max(attributes, key=lambda attr: information_gain(examples, attr, target_attr))\n\n    def majority_value(examples: list[dict], target_attr: str) -> str:\n        return Counter(example[target_attr] for example in examples).most_common(1)[0][0]\n\n    def build_tree(examples: list[dict], attributes: list[str], default: str) -> dict:\n        target_values = [example[target_attr] for example in examples]\n        \n        if not examples or not attributes:\n            return default\n        if target_values.count(target_values[0]) == len(target_values):\n            return target_values[0]\n        \n        best_attr = choose_best_attribute(examples, attributes, target_attr)\n        tree = {best_attr: {}}\n        \n        for value in set(example[best_attr] for example in examples):\n            subset = [example for example in examples if example[best_attr] == value]\n            subtree = build_tree(subset, [attr for attr in attributes if attr != best_attr], majority_value(examples, target_attr))\n            tree[best_attr][value] = subtree\n        \n        return tree\n\n    return build_tree(examples, attributes, majority_value(examples, target_attr))\n\n# Example usage:\n# examples = [\n#     {'outlook': 'sunny', 'temperature': 'hot', 'humidity': 'high', 'wind': 'weak', 'play': 'no'},\n#     {'outlook': 'sunny', 'temperature': 'hot', 'humidity': 'high', 'wind': 'strong', 'play': 'no'},\n#     {'outlook': 'overcast', 'temperature': 'hot', 'humidity': 'high', 'wind': 'weak', 'play': 'yes'},\n#     {'outlook': 'rain', 'temperature': 'mild', 'humidity': 'high', 'wind': 'weak', 'play': 'yes'},\n#     {'outlook': 'rain', 'temperature': 'cool', 'humidity': 'normal', 'wind': 'weak', 'play': 'yes'},\n#     {'outlook': 'rain', 'temperature': 'cool', 'humidity': 'normal', 'wind': 'strong', 'play': 'no'},\n#     {'outlook': 'overcast', 'temperature': 'cool', 'humidity': 'normal', 'wind': 'strong', 'play': 'yes'},\n#     {'outlook': 'sunny', 'temperature': 'mild', 'humidity': 'high', 'wind': 'weak', 'play': 'no'},\n#     {'outlook': 'sunny', 'temperature': 'cool', 'humidity': 'normal', 'wind': 'weak', 'play': 'yes'},\n#     {'outlook': 'rain', 'temperature': 'mild', 'humidity': 'normal', 'wind': 'weak', 'play': 'yes'},\n#     {'outlook': 'sunny', 'temperature': 'mild', 'humidity': 'normal', 'wind': 'strong', 'play': 'yes'},\n#     {'outlook': 'overcast', 'temperature': 'mild', 'humidity': 'high', 'wind': 'strong', 'play': 'yes'},\n#     {'outlook': 'overcast', 'temperature': 'hot', 'humidity': 'normal', 'wind': 'weak', 'play': 'yes'},\n#     {'outlook': 'rain', 'temperature': 'mild', 'humidity': 'high', 'wind': 'strong', 'play': 'no'}\n# ]\n# attributes = ['outlook', 'temperature', 'humidity', 'wind']\n# target_attr = 'play'\n# decision_tree = learn_decision_tree(examples, attributes, target_attr)\n# print(decision_tree)\n```\n\nThis script defines a function `learn_decision_tree` that constructs a decision tree using recursive binary splitting based on entropy and information gain. The function takes a list of examples, a list of attribute names, and the target attribute name as input and returns a nested dictionary representing the decision tree. The example usage at the bottom demonstrates how to use this function with a sample dataset."}
{"task_id": 21, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    def linear_kernel(x1, x2):\n        return np.dot(x1, x2)\n    \n    def rbf_kernel(x1, x2, sigma):\n        return np.exp(-np.linalg.norm(x1 - x2) ** 2 / (2 * sigma ** 2))\n    \n    def compute_kernel_matrix(data, kernel, sigma):\n        n_samples = data.shape[0]\n        K = np.zeros((n_samples, n_samples))\n        for i in range(n_samples):\n            for j in range(n_samples):\n                if kernel == 'linear':\n                    K[i, j] = linear_kernel(data[i], data[j])\n                elif kernel == 'rbf':\n                    K[i, j] = rbf_kernel(data[i], data[j], sigma)\n        return K\n    \n    n_samples, n_features = data.shape\n    alpha = np.zeros(n_samples)\n    bias = 0.0\n    t = 0\n    \n    K = compute_kernel_matrix(data, kernel, sigma)\n    \n    for t in range(1, iterations + 1):\n        step_size = 1.0 / (lambda_val * t)\n        G = np.zeros(n_samples)\n        \n        for i in range(n_samples):\n            prediction = np.sum(alpha * labels * K[:, i]) + bias\n            G[i] = labels[i] * prediction\n        \n        for i in range(n_samples):\n            if G[i] < 1:\n                alpha[i] = alpha[i] + step_size * labels[i]\n        \n        alpha = (1 - step_size * lambda_val) * alpha\n        \n        # Update bias\n        bias = np.sum((labels - np.sum(alpha * labels * K, axis=1)) / n_samples)\n    \n    # Round to the nearest 4th decimal\n    alpha = np.round(alpha, 4)\n    bias = np.round(bias, 4)\n    \n    return alpha.tolist(), bias.tolist()\n\n# Example usage:\n# data = np.array([[1, 2], [2, 3], [3, 3], [2, 1], [3, 2]])\n# labels = np.array([1, 1, 1, -1, -1])\n# alpha, bias = pegasos_kernel_svm(data, labels, kernel='rbf', lambda_val=0.01, iterations=100, sigma=1.0)\n# print(\"Alpha:\", alpha)\n# print(\"Bias:\", bias)\n```\n\nThis script defines a function `pegasos_kernel_svm` that implements a deterministic version of the Pegasos algorithm for training a kernel SVM. The function supports both linear and RBF kernels and returns the alpha coefficients and bias rounded to the nearest 4th decimal. The example usage at the bottom demonstrates how to call the function with a sample dataset."}
{"task_id": 22, "completion_id": 0, "completion": "```\npython\nimport math\n\ndef sigmoid(z: float) -> float:\n    \"\"\"Compute the sigmoid activation function for a given input z.\"\"\"\n    result = 1 / (1 + math.exp(-z))\n    return round(result, 4)\n\n# Example usage:\n# print(sigmoid(0))  # Output should be 0.5000\n# print(sigmoid(1))  # Output should be 0.7311\n# print(sigmoid(-1)) # Output should be 0.2689\n```"}
{"task_id": 23, "completion_id": 0, "completion": "```\npython\nimport math\n\ndef softmax(scores: list[float]) -> list[float]:\n    # Calculate the maximum score to improve numerical stability\n    max_score = max(scores)\n    # Calculate the exponentials of the scores minus the max score\n    exp_scores = [math.exp(score - max_score) for score in scores]\n    # Calculate the sum of the exponentials\n    sum_exp_scores = sum(exp_scores)\n    # Calculate the softmax values\n    softmax_values = [exp_score / sum_exp_scores for exp_score in exp_scores]\n    # Round each softmax value to four decimal places\n    return [round(value, 4) for value in softmax_values]\n\n# Example usage:\nscores = [2.0, 1.0, 0.1]\nprint(softmax(scores))  # Output: [0.6590, 0.2424, 0.0986]\n```"}
{"task_id": 24, "completion_id": 0, "completion": "```\npython\nimport math\nimport numpy as np\n\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    # Initialize a list to store predicted probabilities\n    predicted_probabilities = []\n    \n    # Iterate over each feature vector\n    for feature_vector in features:\n        # Calculate the weighted sum of inputs and add the bias\n        weighted_sum = sum(w * x for w, x in zip(weights, feature_vector)) + bias\n        \n        # Apply the sigmoid activation function\n        sigmoid_output = 1 / (1 + math.exp(-weighted_sum))\n        \n        # Append the result to the predicted probabilities list\n        predicted_probabilities.append(sigmoid_output)\n    \n    # Calculate the mean squared error\n    mse = sum((p - y) ** 2 for p, y in zip(predicted_probabilities, labels)) / len(labels)\n    \n    # Round the predicted probabilities and mse to four decimal places\n    predicted_probabilities_rounded = [round(p, 4) for p in predicted_probabilities]\n    mse_rounded = round(mse, 4)\n    \n    # Convert the list of predicted probabilities to a numpy array and then to a list\n    predicted_probabilities_rounded = np.array(predicted_probabilities_rounded).tolist()\n    \n    return predicted_probabilities_rounded, mse_rounded\n\n# Example usage:\nfeatures = [[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]]\nlabels = [0, 1, 0]\nweights = [0.5, -0.5]\nbias = 0.1\n\npredicted_probabilities, mse = single_neuron_model(features, labels, weights, bias)\nprint(\"Predicted Probabilities:\", predicted_probabilities)\nprint(\"Mean Squared Error:\", mse)\n```\n\nThis script defines a function `single_neuron_model` that simulates a single neuron with a sigmoid activation function for binary classification. It calculates the predicted probabilities for each input feature vector and computes the mean squared error between these predictions and the true labels. The results are rounded to four decimal places and returned as specified."}
{"task_id": 25, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n\ndef sigmoid_derivative(x):\n    return x * (1 - x)\n\ndef mean_squared_error(predictions, targets):\n    return np.mean((predictions - targets) ** 2)\n\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    weights = initial_weights.copy()\n    bias = initial_bias\n    mse_values = []\n\n    for epoch in range(epochs):\n        # Forward pass\n        weighted_sum = np.dot(features, weights) + bias\n        predictions = sigmoid(weighted_sum)\n        \n        # Calculate MSE\n        mse = mean_squared_error(predictions, labels)\n        mse_values.append(round(mse, 4))\n        \n        # Backward pass\n        error = predictions - labels\n        d_loss_d_pred = 2 * error / len(labels)\n        d_pred_d_sig = sigmoid_derivative(predictions)\n        d_sig_d_w = features\n        d_sig_d_b = 1\n        \n        # Gradients\n        d_loss_d_w = d_loss_d_pred * d_pred_d_sig * d_sig_d_w\n        d_loss_d_b = d_loss_d_pred * d_pred_d_sig * d_sig_d_b\n        \n        # Update weights and bias\n        weights -= learning_rate * np.mean(d_loss_d_w, axis=0)\n        bias -= learning_rate * np.mean(d_loss_d_b)\n    \n    return weights.round(4).tolist(), round(bias, 4), mse_values\n\n# Example usage:\n# features = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\n# labels = np.array([0, 1, 1, 0])\n# initial_weights = np.array([0.1, 0.2])\n# initial_bias = 0.3\n# learning_rate = 0.1\n# epochs = 1000\n# updated_weights, updated_bias, mse_values = train_neuron(features, labels, initial_weights, initial_bias, learning_rate, epochs)\n# print(\"Updated Weights:\", updated_weights)\n# print(\"Updated Bias:\", updated_bias)\n# print(\"MSE Values:\", mse_values)\n```\n\nThis script defines a function `train_neuron` that simulates a single neuron with a sigmoid activation function. It uses backpropagation to update the neuron's weights and bias based on the mean squared error (MSE) loss. The function returns the updated weights, bias, and a list of MSE values for each epoch, each rounded to four decimal places."}
{"task_id": 26, "completion_id": 0, "completion": "```\npython\nclass Value:\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda: None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data + other.data, (self, other), '+')\n\n        def _backward():\n            self.grad += out.grad\n            other.grad += out.grad\n        out._backward = _backward\n\n        return out\n\n    def __mul__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data * other.data, (self, other), '*')\n\n        def _backward():\n            self.grad += other.data * out.grad\n            other.grad += self.data * out.grad\n        out._backward = _backward\n\n        return out\n\n    def relu(self):\n        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')\n\n        def _backward():\n            self.grad += (out.data > 0) * out.grad\n        out._backward = _backward\n\n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n\n        self.grad = 1\n        for node in reversed(topo):\n            node._backward()\n\n    def __repr__(self):\n        return f\"Value(data={self.data}, grad={self.grad})\"\n\n# Example usage:\n# a = Value(-4.0)\n# b = Value(2.0)\n# c = a + b\n# d = Value(3.0)\n# e = c * d\n# f = e.relu()\n# f.backward()\n# print(f)  # Should print: Value(data=0, grad=0)\n# print(d)  # Should print: Value(data=3.0, grad=0)\n# print(c)  # Should print: Value(data=-2.0, grad=0)\n# print(b)  # Should print: Value(data=2.0, grad=0)\n# print(a)  # Should print: Value(data=-4.0, grad=0)\n\n# Another example:\n# a = Value(3.0)\n# b = a + a   # uses the same a twice!\n# c = b * b\n# d = c.relu()\n# d.backward()\n# print(f\"a.grad={a.grad}\")  # Should print: a.grad=12.0\n```\n\nThis script defines a `Value` class that supports basic autograd operations such as addition, multiplication, and ReLU activation. The `backward` method computes the gradients of the scalar value with respect to its inputs using automatic differentiation. The example usage at the bottom demonstrates how to use the class and compute gradients."}
{"task_id": 27, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    # Convert the basis lists to numpy arrays\n    B_matrix = np.array(B, dtype=float)\n    C_matrix = np.array(C, dtype=float)\n    \n    # Compute the inverse of B_matrix\n    B_inv = np.linalg.inv(B_matrix)\n    \n    # Compute the transformation matrix P from B to C\n    P = C_matrix @ B_inv\n    \n    # Round the result to the nearest 4th decimal\n    P_rounded = np.round(P, 4)\n    \n    # Convert the result to a list and return\n    return P_rounded.tolist()\n\n# Example usage:\nB = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]  # Standard basis\nC = [[1, 1, 1], [1, 0, 0], [0, 1, 0]]  # Another basis\n\nP = transform_basis(B, C)\nprint(P)\n```\n\nThis script defines a function `transform_basis` that computes the transformation matrix from basis B to basis C. It uses NumPy for matrix operations and ensures the result is rounded to four decimal places before returning it as a Python list."}
{"task_id": 28, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef svd_2x2(A: np.ndarray) -> tuple:\n    # Ensure A is a 2x2 matrix\n    if A.shape != (2, 2):\n        raise ValueError(\"Input matrix must be 2x2.\")\n    \n    # Step 1: Compute A^T A\n    A_T_A = np.dot(A.T, A)\n    \n    # Step 2: Perform eigendecomposition on A^T A\n    eigenvalues, eigenvectors = np.linalg.eig(A_T_A)\n    \n    # Step 3: Construct the singular values as the square roots of the eigenvalues\n    singular_values = np.sqrt(eigenvalues)\n    \n    # Sort singular values in descending order and reorder corresponding eigenvectors\n    sorted_indices = np.argsort(singular_values)[::-1]\n    singular_values = singular_values[sorted_indices]\n    eigenvectors = eigenvectors[:, sorted_indices]\n    \n    # Step 4: Construct matrix S\n    S = np.diag(singular_values)\n    \n    # Step 5: Construct matrix V\n    V = eigenvectors\n    \n    # Step 6: Compute matrix U\n    U = np.zeros((2, 2))\n    for i in range(2):\n        if singular_values[i] != 0:\n            U[:, i] = np.dot(A, V[:, i]) / singular_values[i]\n    \n    # Step 7: Round all results to the nearest 4th decimal\n    U = np.round(U, 4)\n    S = np.round(S, 4)\n    V = np.round(V, 4)\n    \n    # Convert to list\n    U_list = U.tolist()\n    S_list = S.tolist()\n    V_list = V.tolist()\n    \n    return U_list, S_list, V_list\n\n# Example usage:\nA = np.array([[1, 2], [3, 4]])\nU, S, V = svd_2x2(A)\nprint(\"U:\", U)\nprint(\"S:\", S)\nprint(\"V:\", V)\n```\n\nThis script defines a function `svd_2x2` that computes the Singular Value Decomposition (SVD) of a 2x2 matrix using the method based on eigendecomposition of \\(A^T A\\). The function returns the matrices \\(U\\), \\(S\\), and \\(V\\) as lists, rounded to the nearest 4th decimal place."}
{"task_id": 29, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef shuffle_data(X, y, seed=None):\n    \"\"\"\n    Shuffles the samples in two numpy arrays, X and y, while maintaining the corresponding order between them.\n    \n    Parameters:\n    X (numpy.ndarray): The feature dataset.\n    y (numpy.ndarray): The label dataset.\n    seed (int, optional): Seed for random number generator for reproducibility.\n    \n    Returns:\n    list: A list containing the shuffled X and y as numpy arrays converted to lists.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Get the number of samples\n    n_samples = X.shape[0]\n    \n    # Generate a random permutation of indices\n    indices = np.random.permutation(n_samples)\n    \n    # Shuffle X and y using the permutation\n    X_shuffled = X[indices]\n    y_shuffled = y[indices]\n    \n    # Convert the shuffled numpy arrays to lists\n    X_shuffled_list = X_shuffled.tolist()\n    y_shuffled_list = y_shuffled.tolist()\n    \n    return [X_shuffled_list, y_shuffled_list]\n\n# Example usage:\nif __name__ == \"__main__\":\n    X = np.array([[1, 2], [3, 4], [5, 6]])\n    y = np.array([0, 1, 0])\n    shuffled_data = shuffle_data(X, y, seed=42)\n    print(\"Shuffled X:\", shuffled_data[0])\n    print(\"Shuffled y:\", shuffled_data[1])\n```\n\nThis script defines a function `shuffle_data` that takes two numpy arrays `X` and `y`, and an optional `seed` parameter. It shuffles the rows of `X` and `y` while maintaining the correspondence between them, and returns the shuffled data as a list of lists. The example usage at the bottom demonstrates how to use the function."}
{"task_id": 30, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef batch_iterator(X, y=None, batch_size=64):\n    \"\"\"\n    Yields batches of specified size from the dataset X and optionally y.\n    \n    Parameters:\n    - X: numpy array, the input data.\n    - y: numpy array, the target data (optional).\n    - batch_size: int, the size of each batch.\n    \n    Yields:\n    - If y is provided, yields tuples of (X_batch, y_batch).\n    - If y is not provided, yields X_batch.\n    \"\"\"\n    num_samples = X.shape[0]\n    indices = np.arange(num_samples)\n    np.random.shuffle(indices)\n    \n    for start_idx in range(0, num_samples, batch_size):\n        end_idx = min(start_idx + batch_size, num_samples)\n        batch_indices = indices[start_idx:end_idx]\n        X_batch = X[batch_indices]\n        \n        if y is not None:\n            y_batch = y[batch_indices]\n            yield (X_batch.tolist(), y_batch.tolist())\n        else:\n            yield X_batch.tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Sample data\n    X = np.random.rand(100, 10)  # 100 samples, 10 features each\n    y = np.random.randint(0, 2, 100)  # 100 binary labels\n    \n    # Create a batch iterator\n    batch_gen = batch_iterator(X, y, batch_size=20)\n    \n    # Iterate over batches and print them\n    for batch in batch_gen:\n        print(batch)\n```\n\nThis script defines a `batch_iterator` function that takes in a dataset `X` and an optional target `y`, and yields batches of the specified size. The batches are shuffled to ensure randomness. The function uses `numpy` to handle the data and returns the batches as Python lists after reshaping with `tolist()`. The example usage demonstrates how to use the function with sample data."}
{"task_id": 31, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef divide_on_feature(X, feature_i, threshold):\n    \"\"\"\n    Divide the dataset X into two subsets based on whether the value of the specified feature\n    is greater than or equal to the given threshold.\n\n    Parameters:\n    X (numpy.ndarray): The dataset to be divided.\n    feature_i (int): The index of the feature to use for dividing the dataset.\n    threshold (float): The threshold value for dividing the dataset.\n\n    Returns:\n    tuple: A tuple containing two lists, the first with samples where the feature value is\n           greater than or equal to the threshold, and the second with samples where the feature\n           value is less than the threshold.\n    \"\"\"\n    # Convert X to a numpy array if it isn't already\n    X = np.array(X)\n    \n    # Find indices where the feature value is greater than or equal to the threshold\n    mask_greater_equal = X[:, feature_i] >= threshold\n    \n    # Find indices where the feature value is less than the threshold\n    mask_less = X[:, feature_i] < threshold\n    \n    # Split the dataset into two subsets based on the masks\n    subset_greater_equal = X[mask_greater_equal]\n    subset_less = X[mask_less]\n    \n    # Convert the subsets to lists and return\n    return subset_greater_equal.tolist(), subset_less.tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Sample dataset\n    X = np.array([[1, 2, 3],\n                  [4, 5, 6],\n                  [7, 8, 9],\n                  [10, 11, 12]])\n    \n    # Feature index and threshold\n    feature_i = 1\n    threshold = 6\n    \n    # Divide the dataset\n    subset_greater_equal, subset_less = divide_on_feature(X, feature_i, threshold)\n    \n    # Print the results\n    print(\"Subset with feature value >= threshold:\", subset_greater_equal)\n    print(\"Subset with feature value < threshold:\", subset_less)\n```\n\nThis script defines a function `divide_on_feature` that takes a dataset `X`, a feature index `feature_i`, and a `threshold` value. It divides the dataset into two subsets based on whether the specified feature's value is greater than or equal to the threshold. The function returns these subsets as lists. The example usage demonstrates how to use this function with a sample dataset."}
{"task_id": 32, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X, degree):\n    n_samples, n_features = X.shape\n    # Generate combinations of features up to the specified degree\n    feature_combinations = combinations_with_replacement(range(n_features), degree)\n    \n    # Initialize a list to store the polynomial features\n    poly_features = []\n    \n    # Iterate over each combination and compute the polynomial feature\n    for combination in feature_combinations:\n        # Compute the product of the features for the current combination\n        feature_product = np.prod(X[:, combination], axis=1)\n        # Append the computed feature to the list\n        poly_features.append(feature_product)\n    \n    # Stack the polynomial features horizontally to form the final feature matrix\n    poly_features_matrix = np.column_stack(poly_features)\n    \n    # Add the bias term (x^0 = 1) to the feature matrix\n    poly_features_matrix = np.hstack((np.ones((n_samples, 1)), poly_features_matrix))\n    \n    # Return the polynomial features as a list\n    return poly_features_matrix.tolist()\n\n# Example usage:\nX = np.array([[1, 2], [3, 4]])\ndegree = 2\nprint(polynomial_features(X, degree))\n```\n\nThis script defines a function `polynomial_features` that generates polynomial features for a given dataset `X` up to a specified `degree`. The function uses combinations of the input features to compute the polynomial terms and returns the result as a list after reshaping it using numpy's `tolist()` method. The example usage demonstrates how to call the function with a sample dataset."}
{"task_id": 33, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    \"\"\"\n    Generate random subsets of a given dataset.\n\n    Parameters:\n    X (numpy.ndarray): 2D numpy array of features.\n    y (numpy.ndarray): 1D numpy array of target values.\n    n_subsets (int): Number of random subsets to generate.\n    replacements (bool): Whether to sample with replacements.\n    seed (int): Random seed for reproducibility.\n\n    Returns:\n    list: List of n_subsets random subsets, each a tuple of (X_subset, y_subset).\n    \"\"\"\n    np.random.seed(seed)\n    n_samples = X.shape[0]\n    subsets = []\n\n    for _ in range(n_subsets):\n        indices = np.random.choice(n_samples, n_samples, replace=replacements)\n        X_subset = X[indices]\n        y_subset = y[indices]\n        subsets.append((X_subset.tolist(), y_subset.tolist()))\n\n    return subsets\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Sample dataset\n    X = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\n    y = np.array([0, 1, 0, 1])\n    \n    # Generate random subsets\n    subsets = get_random_subsets(X, y, n_subsets=3, replacements=True)\n    \n    # Print the subsets\n    for i, (X_subset, y_subset) in enumerate(subsets):\n        print(f\"Subset {i+1}:\")\n        print(\"X_subset:\", X_subset)\n        print(\"y_subset:\", y_subset)\n        print()\n```"}
{"task_id": 34, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef to_categorical(x, n_col=None):\n    # Determine the number of columns if not provided\n    if n_col is None:\n        n_col = np.max(x) + 1\n    \n    # Initialize the one-hot encoded array with zeros\n    one_hot_encoded = np.zeros((x.size, n_col), dtype=int)\n    \n    # Set the appropriate indices to 1\n    one_hot_encoded[np.arange(x.size), x] = 1\n    \n    # Convert to list and return\n    return one_hot_encoded.tolist()\n\n# Example usage:\n# x = np.array([0, 1, 2, 1])\n# print(to_categorical(x))\n# Output: [[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0]]\n```"}
{"task_id": 35, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef make_diagonal(x):\n    # Create a diagonal matrix from the 1D numpy array x\n    diagonal_matrix = np.diag(x)\n    # Convert the 2D numpy array to a python list\n    return diagonal_matrix.tolist()\n\n# Example usage:\n# x = np.array([1, 2, 3])\n# print(make_diagonal(x))\n# Output: [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n```"}
{"task_id": 36, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef accuracy_score(y_true, y_pred):\n    \"\"\"\n    Calculate the accuracy score of a model's predictions.\n    \n    Parameters:\n    y_true (numpy.ndarray): 1D array containing the true labels.\n    y_pred (numpy.ndarray): 1D array containing the predicted labels.\n    \n    Returns:\n    float: Accuracy score rounded to the nearest 4th decimal.\n    \"\"\"\n    if y_true.shape != y_pred.shape:\n        raise ValueError(\"y_true and y_pred must have the same shape.\")\n    \n    correct_predictions = np.sum(y_true == y_pred)\n    total_predictions = y_true.shape[0]\n    \n    accuracy = correct_predictions / total_predictions\n    return round(accuracy, 4)\n\n# Example usage:\n# y_true = np.array([0, 1, 2, 2, 0])\n# y_pred = np.array([0, 0, 2, 2, 1])\n# print(accuracy_score(y_true, y_pred))  # Output should be 0.6000\n```"}
{"task_id": 37, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef calculate_correlation_matrix(X, Y=None):\n    \"\"\"\n    Calculate the correlation matrix for a given dataset.\n    \n    Parameters:\n    X (numpy.ndarray): A 2D numpy array.\n    Y (numpy.ndarray, optional): A 2D numpy array. Defaults to None.\n    \n    Returns:\n    list: The correlation matrix as a 2D list rounded to the nearest 4th decimal.\n    \"\"\"\n    if Y is None:\n        # Calculate the correlation matrix of X with itself\n        correlation_matrix = np.corrcoef(X, rowvar=False)\n    else:\n        # Concatenate X and Y horizontally and calculate the correlation matrix\n        combined = np.hstack((X, Y))\n        correlation_matrix = np.corrcoef(combined, rowvar=False)\n    \n    # Round the correlation matrix to the nearest 4th decimal\n    rounded_matrix = np.round(correlation_matrix, 4)\n    \n    # Convert the numpy array to a list\n    correlation_matrix_list = rounded_matrix.tolist()\n    \n    return correlation_matrix_list\n\n# Example usage:\n# X = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n# Y = np.array([[9, 8, 7], [6, 5, 4], [3, 2, 1]])\n# print(calculate_correlation_matrix(X, Y))\n```\n\nThis script defines a function `calculate_correlation_matrix` that computes the correlation matrix for a given dataset. It handles both cases where a second dataset `Y` is provided and where it is not. The result is rounded to the nearest 4th decimal and returned as a 2D list."}
{"task_id": 38, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef adaboost_fit(X, y, n_clf):\n    n_samples, n_features = X.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    classifiers = []\n\n    for _ in range(n_clf):\n        best_feature = None\n        best_threshold = None\n        best_polarity = None\n        min_error = float('inf')\n\n        for feature in range(n_features):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(n_samples)\n                    predictions[X[:, feature] * polarity < threshold * polarity] = -1\n\n                    error = np.sum(sample_weights[y != predictions])\n\n                    if error > 0.5:\n                        error = 1 - error\n                        polarity *= -1\n\n                    if error < min_error:\n                        min_error = error\n                        best_feature = feature\n                        best_threshold = threshold\n                        best_polarity = polarity\n\n        alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n        predictions = np.ones(n_samples)\n        predictions[X[:, best_feature] * best_polarity < best_threshold * best_polarity] = -1\n\n        sample_weights *= np.exp(-alpha * y * predictions)\n        sample_weights /= np.sum(sample_weights)\n\n        classifiers.append({\n            'feature': best_feature,\n            'threshold': best_threshold,\n            'polarity': best_polarity,\n            'alpha': round(alpha, 4)\n        })\n\n    return classifiers\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y = np.array([1, 1, -1, -1])\n# classifiers = adaboost_fit(X, y, 3)\n# print(classifiers)\n```\n\nThis script defines the `adaboost_fit` function, which implements the AdaBoost algorithm to fit a classifier to the given dataset. It iteratively selects the best weak classifier (decision stump) based on the weighted error, updates the sample weights, and stores the classifier parameters. The function returns a list of classifiers, each represented as a dictionary with the feature index, threshold, polarity, and alpha value. All results are rounded to the nearest 4th decimal place."}
{"task_id": 39, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef log_softmax(scores: list):\n    # Convert the input list to a numpy array\n    scores_array = np.array(scores)\n    \n    # Subtract the maximum score for numerical stability\n    max_score = np.max(scores_array)\n    stable_scores = scores_array - max_score\n    \n    # Compute the softmax\n    softmax_values = np.exp(stable_scores) / np.sum(np.exp(stable_scores))\n    \n    # Compute the log-softmax\n    log_softmax_values = np.log(softmax_values)\n    \n    # Round the results to the nearest 4th decimal\n    rounded_log_softmax_values = np.round(log_softmax_values, 4)\n    \n    # Convert the numpy array back to a list\n    result_list = rounded_log_softmax_values.tolist()\n    \n    return result_list\n\n# Example usage:\n# scores = [1.0, 2.0, 3.0]\n# print(log_softmax(scores))\n```\n\nThis script defines a function `log_softmax` that computes the log-softmax of a given 1D list of scores. It uses numerical stability techniques by subtracting the maximum score from the scores before computing the exponential. The result is rounded to four decimal places and returned as a list."}
{"task_id": 40, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport copy\nimport math\n\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\n\nclass Dense(Layer):\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.W_opt = None\n        self.w0_opt = None\n\n    def initialize(self, optimizer):\n        limit = 1 / math.sqrt(self.input_shape[0])\n        self.W = np.random.uniform(-limit, limit, (self.input_shape[0], self.n_units))\n        self.w0 = np.zeros((1, self.n_units))\n        self.W_opt = copy.deepcopy(optimizer)\n        self.w0_opt = copy.deepcopy(optimizer)\n\n    def parameters(self):\n        return np.prod(self.W.shape) + np.prod(self.w0.shape)\n\n    def forward_pass(self, X, training=True):\n        self.layer_input = X\n        return np.dot(X, self.W) + self.w0\n\n    def backward_pass(self, accum_grad):\n        W = self.W\n        if self.trainable:\n            grad_w = np.dot(self.layer_input.T, accum_grad)\n            grad_w0 = np.sum(accum_grad, axis=0, keepdims=True)\n            self.W = self.W_opt.update(self.W, grad_w)\n            self.w0 = self.w0_opt.update(self.w0, grad_w0)\n        return np.dot(accum_grad, W.T)\n\n    def output_shape(self):\n        return (self.n_units,)\n\n# Example Optimizer class for demonstration purposes\nclass SGD:\n    def __init__(self, learning_rate=0.01):\n        self.learning_rate = learning_rate\n\n    def update(self, w, grad_w):\n        return w - self.learning_rate * grad_w\n\n# Example usage\nif __name__ == \"__main__\":\n    # Create a dense layer with 10 units and input shape of 5\n    dense_layer = Dense(n_units=10, input_shape=(5,))\n    \n    # Initialize the layer with an SGD optimizer\n    sgd_optimizer = SGD(learning_rate=0.01)\n    dense_layer.initialize(sgd_optimizer)\n    \n    # Example input\n    X = np.random.rand(1, 5)\n    \n    # Forward pass\n    output = dense_layer.forward_pass(X)\n    print(\"Output:\", np.round(output, 4).tolist())\n    \n    # Example accumulated gradient\n    accum_grad = np.random.rand(1, 10)\n    \n    # Backward pass\n    grad_input = dense_layer.backward_pass(accum_grad)\n    print(\"Gradient with respect to input:\", np.round(grad_input, 4).tolist())\n```\n\nThis script defines a `Dense` layer that extends the `Layer` class, implementing the required methods for weight initialization, parameter counting, forward and backward passes, and output shape determination. The `SGD` optimizer is provided as an example to demonstrate how the `Dense` layer can be initialized and used. The results are rounded to the nearest 4th decimal and returned as Python lists."}
{"task_id": 41, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    # Add padding to the input matrix\n    padded_input = np.pad(input_matrix, ((padding, padding), (padding, padding)), mode='constant')\n    \n    # Get dimensions\n    input_height, input_width = padded_input.shape\n    kernel_height, kernel_width = kernel.shape\n    \n    # Calculate output dimensions\n    output_height = (input_height - kernel_height) // stride + 1\n    output_width = (input_width - kernel_width) // stride + 1\n    \n    # Initialize output matrix\n    output = np.zeros((output_height, output_width))\n    \n    # Perform convolution\n    for i in range(output_height):\n        for j in range(output_width):\n            # Extract the region from the input matrix\n            region = padded_input[i*stride:i*stride+kernel_height, j*stride:j*stride+kernel_width]\n            # Perform element-wise multiplication and sum\n            output[i, j] = np.sum(region * kernel)\n    \n    # Round to the nearest 4th decimal and convert to list\n    return np.round(output, 4).tolist()\n\n# Example usage:\ninput_matrix = np.array([[1, 2, 3, 4],\n                         [5, 6, 7, 8],\n                         [9, 10, 11, 12],\n                         [13, 14, 15, 16]])\n\nkernel = np.array([[1, 0, -1],\n                   [1, 0, -1],\n                   [1, 0, -1]])\n\npadding = 1\nstride = 1\n\nresult = simple_conv2d(input_matrix, kernel, padding, stride)\nprint(result)\n```\n\nThis script defines a function `simple_conv2d` that performs a 2D convolution on an input matrix using a specified kernel, padding, and stride. The result is rounded to the nearest 4th decimal and returned as a Python list. The example usage demonstrates how to call the function with a sample input matrix and kernel."}
{"task_id": 42, "completion_id": 0, "completion": "```\npython\ndef relu(z: float) -> float:\n    return z if z > 0 else 0\n\n# Example usage:\n# print(relu(10))  # Output: 10\n# print(relu(-5))  # Output: 0\n```"}
{"task_id": 43, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    # Calculate the predictions\n    y_pred = np.dot(X, w)\n    \n    # Calculate the Mean Squared Error (MSE)\n    mse = np.mean((y_true - y_pred) ** 2)\n    \n    # Calculate the regularization term\n    regularization = alpha * np.sum(w ** 2)\n    \n    # Calculate the Ridge loss\n    ridge_loss_value = mse + regularization\n    \n    # Return the Ridge loss rounded to the nearest 4th decimal\n    return round(ridge_loss_value, 4)\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# w = np.array([0.1, 0.2])\n# y_true = np.array([3, 7, 11])\n# alpha = 0.1\n# print(ridge_loss(X, w, y_true, alpha))\n```\n\nThis script defines the `ridge_loss` function, which calculates the Ridge Regression loss by combining the Mean Squared Error (MSE) and a regularization term. The result is rounded to the nearest 4th decimal place as specified. You can test the function with the example usage provided in the comments."}
{"task_id": 44, "completion_id": 0, "completion": "```\npython\ndef leaky_relu(z: float, alpha: float = 0.01) -> float:\n    \"\"\"\n    Implements the Leaky Rectified Linear Unit (Leaky ReLU) activation function.\n\n    Parameters:\n    z (float): The input value.\n    alpha (float): The slope for negative inputs, default is 0.01.\n\n    Returns:\n    float: The output value after applying the Leaky ReLU function.\n    \"\"\"\n    return z if z >= 0 else alpha * z\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(leaky_relu(10))        # Expected output: 10\n    print(leaky_relu(-10))       # Expected output: -0.1\n    print(leaky_relu(0))         # Expected output: 0\n    print(leaky_relu(-5, 0.02))  # Expected output: -0.1\n```"}
{"task_id": 45, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef kernel_function(x1, x2):\n    \"\"\"\n    Computes the linear kernel between two input vectors x1 and x2.\n    \n    Parameters:\n    x1 (np.array): First input vector.\n    x2 (np.array): Second input vector.\n    \n    Returns:\n    float: The linear kernel value, which is the dot product of x1 and x2.\n    \"\"\"\n    return np.dot(x1, x2)\n\n# Example usage:\nx1 = np.array([1, 2, 3])\nx2 = np.array([4, 5, 6])\nprint(\"Linear Kernel:\", kernel_function(x1, x2))\n```\n\nThis script defines a function `kernel_function` that calculates the linear kernel (dot product) of two input vectors `x1` and `x2`. The example usage demonstrates how to use this function with two sample vectors."}
{"task_id": 46, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef precision(y_true, y_pred):\n    # Ensure the input arrays are numpy arrays\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    \n    # Calculate true positives and false positives\n    true_positives = np.sum((y_true == 1) & (y_pred == 1))\n    false_positives = np.sum((y_true == 0) & (y_pred == 1))\n    \n    # Calculate precision\n    if (true_positives + false_positives) == 0:\n        return 0.0  # To handle the case where there are no positive predictions\n    \n    precision_score = true_positives / (true_positives + false_positives)\n    return precision_score\n\n# Example usage:\n# y_true = np.array([1, 0, 1, 1, 0, 1])\n# y_pred = np.array([1, 0, 0, 1, 0, 1])\n# print(precision(y_true, y_pred))  # Output should be 0.75\n```"}
{"task_id": 47, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    # Convert inputs to numpy arrays\n    X = np.array(X)\n    y = np.array(y)\n    weights = np.array(weights)\n    \n    # Add bias term to X\n    X = np.c_[np.ones(X.shape[0]), X]\n    \n    # Number of samples\n    n_samples = X.shape[0]\n    \n    for _ in range(n_iterations):\n        if method == 'batch':\n            # Batch Gradient Descent\n            predictions = X.dot(weights)\n            errors = predictions - y\n            gradient = (2/n_samples) * X.T.dot(errors)\n            weights -= learning_rate * gradient\n            \n        elif method == 'stochastic':\n            # Stochastic Gradient Descent\n            for i in range(n_samples):\n                xi = X[i: i+1]\n                yi = y[i: i+1]\n                prediction = xi.dot(weights)\n                error = prediction - yi\n                gradient = 2 * xi.T.dot(error)\n                weights -= learning_rate * gradient\n                \n        elif method == 'mini_batch':\n            # Mini-Batch Gradient Descent\n            for i in range(0, n_samples, batch_size):\n                xi = X[i: i+batch_size]\n                yi = y[i: i+batch_size]\n                predictions = xi.dot(weights)\n                errors = predictions - yi\n                gradient = (2/batch_size) * xi.T.dot(errors)\n                weights -= learning_rate * gradient\n                \n        else:\n            raise ValueError(\"Invalid method. Choose 'batch', 'stochastic', or 'mini_batch'.\")\n    \n    # Return weights rounded to the nearest 4th decimal\n    return weights.round(4).tolist()\n\n# Example usage:\n# X = [[1, 2], [2, 3], [4, 5], [6, 7]]\n# y = [3, 5, 9, 13]\n# weights = [0, 0, 0]\n# learning_rate = 0.01\n# n_iterations = 1000\n# batch_size = 2\n# method = 'mini_batch'\n# print(gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size, method))\n```\n\nThis script defines a function `gradient_descent` that implements three variants of gradient descent: Batch Gradient Descent, Stochastic Gradient Descent, and Mini-Batch Gradient Descent. The function takes in the feature matrix `X`, target vector `y`, initial weights, learning rate, number of iterations, batch size (only relevant for mini-batch), and the method to use. It returns the optimized weights rounded to four decimal places."}
{"task_id": 48, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef rref(matrix):\n    # Convert the input matrix to a numpy array for easier manipulation\n    A = np.array(matrix, dtype=float)\n    rows, cols = A.shape\n    r = 0  # Initialize the row index\n\n    for c in range(cols):\n        # Find the pivot row\n        pivot_row = r\n        while pivot_row < rows and A[pivot_row, c] == 0:\n            pivot_row += 1\n\n        if pivot_row == rows:\n            # No pivot in this column, move to the next column\n            continue\n\n        # Swap the current row with the pivot row\n        A[[r, pivot_row]] = A[[pivot_row, r]]\n\n        # Normalize the pivot row\n        pivot = A[r, c]\n        A[r] /= pivot\n\n        # Eliminate all other entries in this column\n        for i in range(rows):\n            if i != r:\n                A[i] -= A[i, c] * A[r]\n\n        # Move to the next row\n        r += 1\n\n    # Convert the numpy array back to a list\n    return A.tolist()\n\n# Example usage:\nmatrix = [\n    [1, 2, 1, 0],\n    [2, 4, 3, 1],\n    [1, 2, 2, 1]\n]\n\nprint(rref(matrix))\n```\n\nThis script defines a function `rref` that takes a matrix as input and returns its Reduced Row Echelon Form (RREF). The function uses Gaussian elimination with partial pivoting to achieve this. The example usage at the end demonstrates how to use the function with a sample matrix."}
{"task_id": 49, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-8, num_iterations=1000):\n    # Initialize parameters\n    x = np.array(x0, dtype=float)\n    m = np.zeros_like(x)  # First moment vector\n    v = np.zeros_like(x)  # Second moment vector\n    t = 0  # Time step\n\n    for t in range(1, num_iterations + 1):\n        # Compute gradient\n        g = np.array(grad(x), dtype=float)\n\n        # Update biased first moment estimate\n        m = beta1 * m + (1 - beta1) * g\n\n        # Update biased second raw moment estimate\n        v = beta2 * v + (1 - beta2) * (g ** 2)\n\n        # Compute bias-corrected first moment estimate\n        m_hat = m / (1 - beta1 ** t)\n\n        # Compute bias-corrected second raw moment estimate\n        v_hat = v / (1 - beta2 ** t)\n\n        # Update parameters\n        x = x - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n\n    # Return the optimized parameters rounded to the nearest 4th decimal\n    return x.round(4).tolist()\n\n# Example usage:\n# Define a simple quadratic function and its gradient\ndef f(x):\n    return x[0]**2 + x[1]**2\n\ndef grad(x):\n    return [2*x[0], 2*x[1]]\n\n# Initial parameter values\nx0 = [1.0, 1.0]\n\n# Run Adam optimizer\noptimized_params = adam_optimizer(f, grad, x0, num_iterations=1000)\nprint(optimized_params)\n```\n\nThis script defines the `adam_optimizer` function, which implements the Adam optimization algorithm. It also includes an example usage with a simple quadratic function to demonstrate how the optimizer works. The optimized parameters are returned as a Python list, rounded to the nearest 4th decimal place."}
{"task_id": 50, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float = 0.1, learning_rate: float = 0.01, max_iter: int = 1000, tol: float = 1e-4) -> tuple:\n    # Number of samples and features\n    n, p = X.shape\n    \n    # Initialize weights and bias\n    w = np.zeros(p)\n    b = 0.0\n    \n    # Initialize previous loss for convergence check\n    prev_loss = float('inf')\n    \n    for iteration in range(max_iter):\n        # Calculate predictions\n        y_pred = np.dot(X, w) + b\n        \n        # Calculate the gradient of the loss with respect to weights and bias\n        error = y_pred - y\n        grad_w = (1/n) * np.dot(X.T, error)\n        grad_b = (1/n) * np.sum(error)\n        \n        # Apply L1 regularization (subgradient method for L1 norm)\n        # Update weights with L1 penalty\n        for j in range(p):\n            if w[j] > 0:\n                w[j] -= learning_rate * (grad_w[j] + alpha)\n            elif w[j] < 0:\n                w[j] -= learning_rate * (grad_w[j] - alpha)\n            else:\n                if grad_w[j] > alpha:\n                    w[j] -= learning_rate * (grad_w[j] - alpha)\n                elif grad_w[j] < -alpha:\n                    w[j] -= learning_rate * (grad_w[j] + alpha)\n                else:\n                    w[j] = 0\n        \n        # Update bias\n        b -= learning_rate * grad_b\n        \n        # Calculate the current loss\n        current_loss = (1/(2*n)) * np.sum(error**2) + alpha * np.sum(np.abs(w))\n        \n        # Check for convergence\n        if np.abs(prev_loss - current_loss) < tol:\n            break\n        \n        # Update previous loss\n        prev_loss = current_loss\n    \n    # Return the rounded weights and bias as lists\n    return w.round(4).tolist(), round(b, 4)\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4]])\n# y = np.array([1, 2, 3])\n# weights, bias = l1_regularization_gradient_descent(X, y, alpha=0.1, learning_rate=0.01, max_iter=1000, tol=1e-4)\n# print(\"Weights:\", weights)\n# print(\"Bias:\", bias)\n```\n\nThis script defines a function `l1_regularization_gradient_descent` that implements Lasso Regression using Gradient Descent with L1 regularization. The function takes in the feature matrix `X`, target vector `y`, regularization parameter `alpha`, learning rate, maximum number of iterations, and tolerance for convergence. It returns the optimized weights and bias, rounded to four decimal places."}
{"task_id": 51, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef OSA(source: str, target: str) -> int:\n    # Create a matrix to store distances\n    m, n = len(source), len(target)\n    dp = np.zeros((m + 1, n + 1), dtype=int)\n\n    # Initialize the matrix\n    for i in range(m + 1):\n        dp[i][0] = i\n    for j in range(n + 1):\n        dp[0][j] = j\n\n    # Compute the distances\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if source[i - 1] == target[j - 1]:\n                cost = 0\n            else:\n                cost = 1\n\n            dp[i][j] = min(\n                dp[i - 1][j] + 1,    # Deletion\n                dp[i][j - 1] + 1,    # Insertion\n                dp[i - 1][j - 1] + cost  # Substitution\n            )\n\n            # Check for transposition\n            if i > 1 and j > 1 and source[i - 1] == target[j - 2] and source[i - 2] == target[j - 1]:\n                dp[i][j] = min(dp[i][j], dp[i - 2][j - 2] + 1)\n\n    return dp[m][n]\n\n# Example usage\nsource = \"caper\"\ntarget = \"acer\"\nprint(f\"The Optimal String Alignment distance between '{source}' and '{target}' is {OSA(source, target)}.\")\n```\n\nThis script defines a function `OSA` that calculates the Optimal String Alignment distance between two strings using dynamic programming. The function initializes a matrix to store the distances and iteratively fills it in by considering the cost of deletions, insertions, substitutions, and transpositions. The example usage at the end demonstrates how to use the function to compute the OSA distance between the strings \"caper\" and \"acer\"."}
{"task_id": 52, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef recall(y_true, y_pred):\n    # Convert inputs to numpy arrays for easier manipulation\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    \n    # Calculate True Positives (TP)\n    TP = np.sum((y_true == 1) & (y_pred == 1))\n    \n    # Calculate False Negatives (FN)\n    FN = np.sum((y_true == 1) & (y_pred == 0))\n    \n    # Calculate Recall\n    if TP + FN == 0:\n        return 0.0\n    else:\n        recall_value = TP / (TP + FN)\n        return round(recall_value, 3)\n\n# Example usage:\ny_true = [1, 0, 1, 1, 0, 1]\ny_pred = [1, 0, 0, 1, 0, 1]\nprint(recall(y_true, y_pred))  # Output should be 0.857\n```"}
{"task_id": 53, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef self_attention(X, W_q, W_k, W_v):\n    # Linear transformations to obtain query, key, and value matrices\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    \n    # Compute the scaled dot-product attention\n    d_k = K.shape[-1]\n    scores = np.dot(Q, K.T) / np.sqrt(d_k)\n    \n    # Apply softmax to the scores to get attention weights\n    attention_weights = np.softmax(scores, axis=-1)\n    \n    # Compute the weighted sum of values\n    output = np.dot(attention_weights, V)\n    \n    # Round the result to the nearest 4th decimal\n    output_rounded = np.round(output, 4)\n    \n    # Convert to list\n    output_list = output_rounded.tolist()\n    \n    return output_list\n\n# Example usage:\n# Let's assume we have an input sequence X with 3 tokens and each token has 4 features\nX = np.array([[1.0, 2.0, 3.0, 4.0],\n              [2.0, 3.0, 4.0, 5.0],\n              [3.0, 4.0, 5.0, 6.0]])\n\n# Weights for query, key, and value transformations\nW_q = np.random.rand(4, 4)\nW_k = np.random.rand(4, 4)\nW_v = np.random.rand(4, 4)\n\n# Compute self-attention\nresult = self_attention(X, W_q, W_k, W_v)\nprint(result)\n```\n\nThis script defines a function `self_attention` that computes the self-attention mechanism for a given input sequence `X` and weight matrices `W_q`, `W_k`, and `W_v`. The function returns the self-attention output as a Python list, with all values rounded to the nearest 4th decimal. The example usage demonstrates how to call the function with a sample input and random weight matrices."}
{"task_id": 54, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    # Convert inputs to numpy arrays for easier manipulation\n    input_sequence = np.array(input_sequence)\n    initial_hidden_state = np.array(initial_hidden_state)\n    Wx = np.array(Wx)\n    Wh = np.array(Wh)\n    b = np.array(b)\n    \n    # Initialize the hidden state with the initial hidden state\n    h = initial_hidden_state\n    \n    # Process each input vector in the sequence\n    for x in input_sequence:\n        x = np.array(x)  # Ensure x is a numpy array\n        # Update the hidden state using the RNN cell formula\n        h = np.tanh(np.dot(Wx, x) + np.dot(Wh, h) + b)\n    \n    # Return the final hidden state rounded to four decimal places\n    return h.round(4).tolist()\n\n# Example usage:\n# input_sequence = [[0.1, 0.2], [0.3, 0.4]]\n# initial_hidden_state = [0.0, 0.0]\n# Wx = [[0.5, 0.6], [0.7, 0.8]]\n# Wh = [[0.9, 1.0], [1.1, 1.2]]\n# b = [0.1, 0.2]\n# print(rnn_forward(input_sequence, initial_hidden_state, Wx, Wh, b))\n```\n\nThis script defines a function `rnn_forward` that implements a simple RNN cell. It processes a sequence of input vectors and updates the hidden state using the tanh activation function. The final hidden state is returned after processing the entire sequence, rounded to four decimal places."}
{"task_id": 55, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef translate_object(points, tx, ty):\n    # Create a translation matrix\n    translation_matrix = np.array([[1, 0, tx],\n                                   [0, 1, ty],\n                                   [0, 0, 1]])\n    \n    # Convert the list of points to a homogeneous coordinate matrix\n    homogeneous_points = np.array([[x, y, 1] for x, y in points]).T\n    \n    # Apply the translation matrix\n    translated_homogeneous_points = translation_matrix @ homogeneous_points\n    \n    # Convert back to Cartesian coordinates and reshape\n    translated_points = translated_homogeneous_points[:2, :].T\n    \n    # Convert to list and return\n    return translated_points.tolist()\n\n# Example usage:\npoints = [[1, 2], [3, 4], [5, 6]]\ntx = 2\nty = 3\ntranslated_points = translate_object(points, tx, ty)\nprint(translated_points)  # Output: [[3, 5], [5, 7], [7, 9]]\n```"}
{"task_id": 56, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    Calculate the Kullback-Leibler (KL) divergence between two normal distributions.\n    \n    Parameters:\n    mu_p (float): Mean of the first normal distribution P.\n    sigma_p (float): Standard deviation of the first normal distribution P.\n    mu_q (float): Mean of the second normal distribution Q.\n    sigma_q (float): Standard deviation of the second normal distribution Q.\n    \n    Returns:\n    float: KL divergence from Q to P.\n    \"\"\"\n    # Calculate the KL divergence using the formula\n    kl_div = np.log(sigma_q / sigma_p) + (sigma_p**2 + (mu_p - mu_q)**2) / (2 * sigma_q**2) - 0.5\n    return kl_div\n\n# Example usage:\n# mu_p, sigma_p = 0, 1  # Standard Normal Distribution\n# mu_q, sigma_q = 1, 2\n# print(kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q))\n```\n\nThis script defines a function `kl_divergence_normal` that computes the KL divergence between two normal distributions given their means and standard deviations. The formula used is derived from the properties of normal distributions and the definition of KL divergence."}
{"task_id": 57, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gauss_seidel(A, b, n, x_ini=None):\n    # Convert A and b to numpy arrays for easier manipulation\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    \n    # Get the number of equations\n    N = len(b)\n    \n    # Initialize the solution vector with zeros or the provided initial guess\n    if x_ini is None:\n        x = np.zeros(N, dtype=float)\n    else:\n        x = np.array(x_ini, dtype=float)\n    \n    # Perform n iterations of the Gauss-Seidel method\n    for _ in range(n):\n        x_new = np.zeros(N, dtype=float)\n        for i in range(N):\n            # Compute the sum of the known values\n            s1 = np.dot(A[i, :i], x_new[:i])\n            s2 = np.dot(A[i, i+1:], x[i+1:])\n            # Update the solution for the current variable\n            x_new[i] = (b[i] - s1 - s2) / A[i, i]\n        # Update the solution vector\n        x = x_new\n    \n    # Round the results to the nearest 4th decimal and convert to list\n    return np.round(x, 4).tolist()\n\n# Example usage:\n# A = [[4, -1, 0, 0],\n#      [-1, 4, -1, 0],\n#      [0, -1, 4, -1],\n#      [0, 0, -1, 4]]\n# b = [1, 2, 3, 4]\n# n = 10\n# print(gauss_seidel(A, b, n))\n```\n\nThis script defines the `gauss_seidel` function, which implements the Gauss-Seidel method for solving a system of linear equations. The function takes a coefficient matrix `A`, a right-hand side vector `b`, the number of iterations `n`, and an optional initial guess `x_ini`. It returns the approximated solution vector after the specified number of iterations, rounded to the nearest 4th decimal place."}
{"task_id": 58, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gaussian_elimination(A, b):\n    # Convert inputs to numpy arrays for easier manipulation\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    n = len(b)\n    \n    # Augment A with b\n    Ab = np.hstack((A, b.reshape(-1, 1)))\n    \n    # Forward elimination with partial pivoting\n    for i in range(n):\n        # Find the pivot row\n        max_row = np.argmax(np.abs(Ab[i:, i])) + i\n        \n        # Swap the current row with the pivot row\n        Ab[[i, max_row]] = Ab[[max_row, i]]\n        \n        # Eliminate entries below the pivot\n        for j in range(i + 1, n):\n            factor = Ab[j, i] / Ab[i, i]\n            Ab[j, i:] -= factor * Ab[i, i:]\n    \n    # Backward substitution\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        x[i] = (Ab[i, -1] - np.dot(Ab[i, i+1:n], x[i+1:n])) / Ab[i, i]\n    \n    # Round results to the nearest 4th decimal\n    x = np.round(x, 4)\n    \n    # Convert to list\n    return x.tolist()\n\n# Example usage:\n# A = [[3, 2, -1], [2, -2, 4], [-1, 0.5, -1]]\n# b = [1, -2, 0]\n# print(gaussian_elimination(A, b))  # Output should be the solution vector\n```\n\nThis script defines the `gaussian_elimination` function, which performs Gaussian elimination with partial pivoting to solve a system of linear equations. The function takes a matrix `A` and a vector `b` as inputs and returns the solution vector `x`, rounded to the nearest 4th decimal place. The example usage at the bottom demonstrates how to call the function with a sample system of equations."}
{"task_id": 59, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\nclass LSTM:\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n\n        # Initialize weights and biases\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \"\"\"\n        # Prepare the initial states\n        h_prev = initial_hidden_state\n        c_prev = initial_cell_state\n        \n        # List to store hidden states at each time step\n        h_states = []\n        \n        # Process each time step\n        for t in range(len(x)):\n            # Concatenate input and previous hidden state\n            x_t = x[t].reshape(-1, 1)\n            combined = np.vstack((x_t, h_prev))\n            \n            # Compute gates\n            f_t = self.sigmoid(np.dot(self.Wf, combined) + self.bf)\n            i_t = self.sigmoid(np.dot(self.Wi, combined) + self.bi)\n            c_hat_t = np.tanh(np.dot(self.Wc, combined) + self.bc)\n            o_t = self.sigmoid(np.dot(self.Wo, combined) + self.bo)\n            \n            # Update cell state\n            c_t = f_t * c_prev + i_t * c_hat_t\n            \n            # Update hidden state\n            h_t = o_t * np.tanh(c_t)\n            \n            # Store the hidden state\n            h_states.append(h_t)\n            \n            # Update previous states\n            h_prev = h_t\n            c_prev = c_t\n        \n        # Return the hidden states, final hidden state, and final cell state\n        h_states_rounded = [h.round(4).tolist() for h in h_states]\n        final_hidden_state_rounded = h_prev.round(4).tolist()\n        final_cell_state_rounded = c_prev.round(4).tolist()\n        \n        return h_states_rounded, final_hidden_state_rounded, final_cell_state_rounded\n\n    def sigmoid(self, x):\n        return 1 / (1 + np.exp(-x))\n\n# Example usage:\n# Define input sequence, initial hidden state, and initial cell state\nx = [np.array([0.1, 0.2]), np.array([0.3, 0.4]), np.array([0.5, 0.6])]\ninitial_hidden_state = np.zeros((3, 1))\ninitial_cell_state = np.zeros((3, 1))\n\n# Initialize LSTM\nlstm = LSTM(input_size=2, hidden_size=3)\n\n# Forward pass\nh_states, final_hidden_state, final_cell_state = lstm.forward(x, initial_hidden_state, initial_cell_state)\n\n# Print results\nprint(\"Hidden states at each time step:\", h_states)\nprint(\"Final hidden state:\", final_hidden_state)\nprint(\"Final cell state:\", final_cell_state)\n```\n\nThis script defines an LSTM class with a forward method that processes a sequence of inputs and returns the hidden states at each time step, as well as the final hidden state and cell state. The weights and biases are initialized randomly, and the gates (forget, input, candidate cell, and output) are computed at each time step to update the hidden and cell states. The results are rounded to the nearest 4th decimal and returned as Python lists."}
{"task_id": 60, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef compute_tf_idf(corpus, query):\n    if not corpus:\n        raise ValueError(\"Corpus is empty. Please provide a list of documents.\")\n    \n    # Convert corpus to a set of unique words for each document\n    unique_docs = [set(doc) for doc in corpus]\n    \n    # Calculate document frequency (df) for each word in the query\n    df = {}\n    for term in query:\n        df[term] = sum(1 for doc in unique_docs if term in doc)\n    \n    # Calculate the number of documents\n    N = len(corpus)\n    \n    # Initialize a list to store TF-IDF scores for each document\n    tf_idf_scores = []\n    \n    for doc in corpus:\n        # Calculate term frequency (tf) for each word in the query within the document\n        tf = {term: doc.count(term) for term in query}\n        \n        # Calculate TF-IDF scores for the query words in the current document\n        doc_scores = []\n        for term in query:\n            # Apply smoothing to avoid division by zero\n            idf = np.log((N + 1) / (df[term] + 1)) + 1\n            tf_idf = tf[term] * idf\n            doc_scores.append(tf_idf)\n        \n        # Append the scores for the current document to the list\n        tf_idf_scores.append(doc_scores)\n    \n    # Convert the result to a numpy array and round to 4 decimal places\n    tf_idf_scores_rounded = np.array(tf_idf_scores).round(4).tolist()\n    \n    return tf_idf_scores_rounded\n\n# Example usage:\ncorpus = [\n    [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"],\n    [\"never\", \"jump\", \"over\", \"the\", \"lazy\", \"dog\", \"quickly\"],\n    [\"a\", \"quick\", \"brown\", \"dog\", \"outpaces\", \"a\", \"lazy\", \"fox\"]\n]\nquery = [\"quick\", \"lazy\", \"dog\"]\n\nprint(compute_tf_idf(corpus, query))\n```\n\nThis script defines the `compute_tf_idf` function, which calculates the TF-IDF scores for a given query against a corpus of documents. It handles division by zero using smoothing and raises an error if the corpus is empty. The results are rounded to four decimal places and returned as a list of lists."}
{"task_id": 61, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    # Calculate True Positives, False Positives, and False Negatives\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fp = np.sum((y_true == 0) & (y_pred == 1))\n    fn = np.sum((y_true == 1) & (y_pred == 0))\n    \n    # Calculate Precision and Recall\n    precision = tp / (tp + fp) if (tp + fp) > 0 else 0\n    recall = tp / (tp + fn) if (tp + fn) > 0 else 0\n    \n    # Calculate F-Score\n    if precision + recall == 0:\n        f_score_value = 0\n    else:\n        f_score_value = (1 + beta**2) * (precision * recall) / ((beta**2 * precision) + recall)\n    \n    return round(f_score_value, 3)\n\n# Example usage:\n# y_true = np.array([0, 1, 1, 0, 1])\n# y_pred = np.array([0, 0, 1, 0, 1])\n# beta = 1.0\n# print(f_score(y_true, y_pred, beta))  # Output should be the F1-Score\n```"}
{"task_id": 62, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\nclass SimpleRNN:\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, input_sequence):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n        \"\"\"\n        h_prev = np.zeros((self.hidden_size, 1))\n        outputs = []\n        last_inputs = []\n        last_hiddens = []\n\n        for x in input_sequence:\n            x = x.reshape(-1, 1)  # Ensure x is a column vector\n            last_inputs.append(x)\n            last_hiddens.append(h_prev)\n            h_next = np.tanh(np.dot(self.W_xh, x) + np.dot(self.W_hh, h_prev) + self.b_h)\n            y = np.dot(self.W_hy, h_next) + self.b_y\n            outputs.append(y)\n            h_prev = h_next\n\n        return outputs, last_inputs, last_hiddens\n\n    def backward(self, input_sequence, expected_output, outputs, last_inputs, last_hiddens, learning_rate):\n        \"\"\"\n        Backpropagation through time (BPTT) to adjust the weights based on the loss.\n        \"\"\"\n        dW_xh = np.zeros_like(self.W_xh)\n        dW_hh = np.zeros_like(self.W_hh)\n        dW_hy = np.zeros_like(self.W_hy)\n        db_h = np.zeros_like(self.b_h)\n        db_y = np.zeros_like(self.b_y)\n        dh_next = np.zeros_like(last_hiddens[0])\n\n        for t in reversed(range(len(input_sequence))):\n            dy = outputs[t] - expected_output[t]\n            db_y += dy\n            dW_hy += np.dot(dy, last_hiddens[t].T)\n\n            dh = np.dot(self.W_hy.T, dy) + dh_next\n            dh_raw = (1 - last_hiddens[t] * last_hiddens[t]) * dh  # tanh derivative\n            db_h += dh_raw\n            dW_hh += np.dot(dh_raw, last_hiddens[t-1].T) if t > 0 else 0\n            dW_xh += np.dot(dh_raw, last_inputs[t].T)\n            dh_next = np.dot(self.W_hh.T, dh_raw)\n\n        # Update weights and biases\n        self.W_xh -= learning_rate * dW_xh\n        self.W_hh -= learning_rate * dW_hh\n        self.W_hy -= learning_rate * dW_hy\n        self.b_h -= learning_rate * db_h\n        self.b_y -= learning_rate * db_y\n\n    def compute_loss(self, outputs, expected_output):\n        \"\"\"\n        Computes the loss (1/2 * Mean Squared Error) for the given outputs and expected outputs.\n        \"\"\"\n        loss = 0\n        for t in range(len(outputs)):\n            loss += 0.5 * np.sum((outputs[t] - expected_output[t]) ** 2)\n        return loss\n\n# Example usage\nif __name__ == \"__main__\":\n    # Parameters\n    input_size = 3\n    hidden_size = 5\n    output_size = 3\n    learning_rate = 0.01\n    sequence_length = 4\n\n    # Initialize RNN\n    rnn = SimpleRNN(input_size, hidden_size, output_size)\n\n    # Example input sequence and expected output\n    input_sequence = np.random.randn(sequence_length, input_size)\n    expected_output = np.random.randn(sequence_length, output_size)\n\n    # Forward pass\n    outputs, last_inputs, last_hiddens = rnn.forward(input_sequence)\n\n    # Compute loss\n    loss = rnn.compute_loss(outputs, expected_output)\n    print(f\"Initial Loss: {loss}\")\n\n    # Backward pass\n    rnn.backward(input_sequence, expected_output, outputs, last_inputs, last_hiddens, learning_rate)\n\n    # Forward pass again to see if loss decreases\n    outputs, last_inputs, last_hiddens = rnn.forward(input_sequence)\n    loss = rnn.compute_loss(outputs, expected_output)\n    print(f\"Loss after one iteration of BPTT: {loss}\")\n```\n\nThis script defines a simple RNN with methods for forward and backward passes, and a loss computation method. The example usage demonstrates initializing the RNN, performing a forward pass, computing the loss, and then performing a backward pass to adjust the weights. The loss is computed again to show the effect of the weight updates."}
{"task_id": 63, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-8):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    if x0 is None:\n        x = np.zeros_like(b)\n    else:\n        x = x0\n    \n    r = b - A @ x\n    p = r\n    rsold = r.T @ r\n    \n    for i in range(n):\n        Ap = A @ p\n        alpha = rsold / (p.T @ Ap)\n        x = x + alpha * p\n        r = r - alpha * Ap\n        rsnew = r.T @ r\n        if np.sqrt(rsnew) < tol:\n            break\n        p = r + (rsnew / rsold) * p\n        rsold = rsnew\n    \n    return x.round(8).tolist()\n\n# Example usage:\n# A = np.array([[4, 1], [1, 3]])\n# b = np.array([1, 2])\n# solution = conjugate_gradient(A, b, n=100)\n# print(solution)\n```\n\nThis script defines the `conjugate_gradient` function, which solves the linear system \\( Ax = b \\) using the Conjugate Gradient method. The function takes a symmetric, positive-definite matrix `A`, a vector `b`, a maximum number of iterations `n`, an optional initial guess `x0`, and a tolerance `tol` for convergence. The solution vector `x` is returned as a list rounded to 8 decimal places."}
{"task_id": 64, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    if not y:\n        return 0.0\n    \n    # Calculate the number of samples\n    n_samples = len(y)\n    \n    # Calculate the frequency of each class\n    class_counts = np.bincount(y)\n    \n    # Calculate the probability of each class\n    class_probs = class_counts / n_samples\n    \n    # Calculate Gini Impurity\n    gini = 1.0 - np.sum(class_probs ** 2)\n    \n    return round(gini, 3)\n\n# Example usage:\n# y = [0, 1, 1, 0, 1]\n# print(gini_impurity(y))  # Output: 0.480\n```"}
{"task_id": 65, "completion_id": 0, "completion": "```\npython\ndef compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    values = []\n    column_indices = []\n    row_pointers = [0]  # Start with 0 as the first row pointer\n\n    for row in dense_matrix:\n        current_row_non_zeros = 0\n        for col_index, value in enumerate(row):\n            if value != 0:\n                values.append(value)\n                column_indices.append(col_index)\n                current_row_non_zeros += 1\n        # Update the row pointer with the number of non-zero elements in the current row\n        row_pointers.append(row_pointers[-1] + current_row_non_zeros)\n\n    return values, column_indices, row_pointers\n\n# Example usage:\ndense_matrix = [\n    [0, 0, 3, 0],\n    [4, 0, 0, 0],\n    [0, 0, 0, 5],\n    [0, 6, 0, 0]\n]\n\nvalues, column_indices, row_pointers = compressed_row_sparse_matrix(dense_matrix)\nprint(\"Values:\", values)\nprint(\"Column Indices:\", column_indices)\nprint(\"Row Pointers:\", row_pointers)\n```\n\nThis script defines a function `compressed_row_sparse_matrix` that converts a given dense matrix into its Compressed Row Sparse (CSR) format. The function returns three lists: `values`, `column_indices`, and `row_pointers`, which represent the non-zero elements, their column indices, and the starting positions of each row in the `values` list, respectively. The example usage demonstrates how to use this function with a sample dense matrix."}
{"task_id": 66, "completion_id": 0, "completion": "```\npython\ndef orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    import numpy as np\n\n    # Convert lists to numpy arrays for easier computation\n    v = np.array(v)\n    L = np.array(L)\n\n    # Calculate the dot product of v and L\n    dot_product = np.dot(v, L)\n\n    # Calculate the dot product of L with itself\n    dot_product_L_L = np.dot(L, L)\n\n    # Calculate the scalar projection of v onto L\n    scalar_projection = dot_product / dot_product_L_L\n\n    # Calculate the vector projection of v onto L\n    vector_projection = scalar_projection * L\n\n    # Return the projection vector rounded to three decimal places\n    return [round(x, 3) for x in vector_projection]\n\n# Example usage:\n# v = [1, 2, 3]\n# L = [4, 5, 6]\n# print(orthogonal_projection(v, L))  # Output: [1.667, 2.083, 2.5]\n```\n\nThis script defines a function `orthogonal_projection` that calculates the orthogonal projection of a vector `v` onto another vector `L`. It uses NumPy for efficient vector operations and returns the result rounded to three decimal places."}
{"task_id": 67, "completion_id": 0, "completion": "```\npython\ndef compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    if not dense_matrix or not dense_matrix[0]:\n        return [], [], []\n\n    num_rows = len(dense_matrix)\n    num_cols = len(dense_matrix[0])\n\n    values = []\n    row_indices = []\n    column_pointer = [0] * (num_cols + 1)\n\n    for col in range(num_cols):\n        for row in range(num_rows):\n            if dense_matrix[row][col] != 0:\n                values.append(dense_matrix[row][col])\n                row_indices.append(row)\n        column_pointer[col + 1] = len(values)\n\n    return values, row_indices, column_pointer\n\n# Example usage:\ndense_matrix = [\n    [0, 0, 3, 0],\n    [4, 0, 0, 0],\n    [0, 0, 0, 5],\n    [0, 6, 0, 0]\n]\n\nvalues, row_indices, column_pointer = compressed_col_sparse_matrix(dense_matrix)\nprint(\"Values:\", values)\nprint(\"Row Indices:\", row_indices)\nprint(\"Column Pointer:\", column_pointer)\n```\n\nThis script defines a function `compressed_col_sparse_matrix` that converts a given dense matrix into its Compressed Column Sparse (CSC) format. The function returns three lists: `values`, `row_indices`, and `column_pointer`, which represent the non-zero elements, their corresponding row indices, and the starting index of each column in the `values` list, respectively. The example usage demonstrates how to use the function with a sample dense matrix."}
{"task_id": 68, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef matrix_image(A):\n    # Convert the input matrix to a numpy array for easier manipulation\n    A = np.array(A, dtype=float)\n    \n    # Perform row reduction to get the row echelon form\n    _, pivots = np.linalg.qr(A.T, mode='r', pivoting=True)\n    \n    # Extract the independent columns from the original matrix\n    independent_columns = A[:, pivots[:np.linalg.matrix_rank(A)]]\n    \n    # Round the result to 8 decimal places and convert to list\n    return independent_columns.round(8).tolist()\n\n# Example usage:\nA = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nprint(matrix_image(A))\n```\n\nThis script defines the `matrix_image` function, which calculates the column space of a given matrix `A` by identifying the independent columns through QR decomposition with pivoting. The result is rounded to 8 decimal places and returned as a list of lists."}
{"task_id": 69, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef r_squared(y_true, y_pred):\n    # Calculate the mean of the true values\n    y_mean = np.mean(y_true)\n    \n    # Calculate the total sum of squares (TSS)\n    tss = np.sum((y_true - y_mean) ** 2)\n    \n    # Calculate the residual sum of squares (RSS)\n    rss = np.sum((y_true - y_pred) ** 2)\n    \n    # Calculate the R-squared value\n    r2 = 1 - (rss / tss)\n    \n    # Return the R-squared value rounded to three decimal places\n    return round(r2, 3)\n\n# Example usage:\n# y_true = np.array([3, -0.5, 2, 7])\n# y_pred = np.array([2.5, 0.0, 2, 8])\n# print(r_squared(y_true, y_pred))  # Output should be 0.948\n```"}
{"task_id": 70, "completion_id": 0, "completion": "```\npython\ndef calculate_brightness(img):\n    # Check if the image matrix is empty\n    if not img or not img[0]:\n        return -1\n    \n    # Initialize variables to calculate the total brightness and the number of pixels\n    total_brightness = 0\n    num_pixels = 0\n    \n    # Iterate over each row in the image matrix\n    for row in img:\n        # Check if the current row has an inconsistent length\n        if len(row) != len(img[0]):\n            return -1\n        \n        # Iterate over each pixel in the row\n        for pixel in row:\n            # Check if the pixel value is outside the valid range (0-255)\n            if not (0 <= pixel <= 255):\n                return -1\n            \n            # Add the pixel value to the total brightness\n            total_brightness += pixel\n            # Increment the number of pixels\n            num_pixels += 1\n    \n    # Calculate the average brightness and round it to two decimal places\n    average_brightness = round(total_brightness / num_pixels, 2)\n    \n    return average_brightness\n\n# Example usage:\n# img = [\n#     [100, 150, 200],\n#     [50, 100, 150],\n#     [0, 50, 100]\n# ]\n# print(calculate_brightness(img))  # Output: 102.78\n```\n\nThis script defines the `calculate_brightness` function, which calculates the average brightness of a grayscale image represented as a 2D matrix. It handles edge cases such as empty matrices, inconsistent row lengths, and invalid pixel values by returning `-1`."}
{"task_id": 71, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef rmse(y_true, y_pred):\n    # Check if inputs are numpy arrays\n    if not isinstance(y_true, np.ndarray) or not isinstance(y_pred, np.ndarray):\n        raise ValueError(\"Both y_true and y_pred must be numpy arrays.\")\n    \n    # Check if arrays are empty\n    if y_true.size == 0 or y_pred.size == 0:\n        raise ValueError(\"y_true and y_pred must not be empty arrays.\")\n    \n    # Check if arrays have the same shape\n    if y_true.shape != y_pred.shape:\n        raise ValueError(\"y_true and y_pred must have the same shape.\")\n    \n    # Calculate RMSE\n    n = y_true.shape[0]\n    residuals = y_true - y_pred\n    mse = np.sum(residuals ** 2) / n\n    rmse_value = np.sqrt(mse)\n    \n    # Return RMSE rounded to three decimal places\n    return round(rmse_value, 3)\n\n# Example usage:\n# y_true = np.array([3.0, -0.5, 2.0, 7.0])\n# y_pred = np.array([2.5, 0.0, 2.0, 8.0])\n# print(rmse(y_true, y_pred))  # Output: 0.374\n```\n\nThis script defines a function `rmse` that calculates the Root Mean Square Error between two numpy arrays, `y_true` and `y_pred`. It includes error handling for mismatched shapes, empty arrays, and invalid input types. The RMSE value is returned rounded to three decimal places."}
{"task_id": 72, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef jaccard_index(y_true, y_pred):\n    # Ensure the inputs are numpy arrays\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    \n    # Calculate the intersection and union of the two arrays\n    intersection = np.logical_and(y_true, y_pred).sum()\n    union = np.logical_or(y_true, y_pred).sum()\n    \n    # Handle the edge case where the union is zero (both arrays are all zeros)\n    if union == 0:\n        return 1.0  # or 0.0, depending on how you want to define Jaccard for this case\n    \n    # Calculate the Jaccard Index\n    jaccard = intersection / union\n    \n    # Return the Jaccard Index rounded to three decimal places\n    return round(jaccard, 3)\n\n# Example usage:\ny_true = [1, 0, 1, 1, 0, 1]\ny_pred = [1, 0, 0, 1, 0, 1]\nprint(jaccard_index(y_true, y_pred))  # Output: 0.857\n```\n\nThis script defines a function `jaccard_index` that calculates the Jaccard Index for two binary arrays, handling edge cases where there is no overlap or both arrays are zeros. The result is rounded to three decimal places as specified."}
{"task_id": 73, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef dice_score(y_true, y_pred):\n    # Ensure y_true and y_pred are numpy arrays\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    \n    # Calculate the intersection of y_true and y_pred\n    intersection = np.sum(y_true * y_pred)\n    \n    # Calculate the sum of y_true and y_pred\n    sum_true = np.sum(y_true)\n    sum_pred = np.sum(y_pred)\n    \n    # Calculate the Dice Score\n    if sum_true == 0 and sum_pred == 0:\n        # If both are empty, we can consider it a perfect match\n        return 1.0\n    elif sum_true == 0 or sum_pred == 0:\n        # If one is empty and the other is not, there is no overlap\n        return 0.0\n    else:\n        dice_score_value = (2 * intersection) / (sum_true + sum_pred)\n        return round(dice_score_value, 3)\n\n# Example usage:\ny_true = [1, 0, 1, 1, 0, 1]\ny_pred = [1, 0, 0, 1, 0, 1]\nprint(dice_score(y_true, y_pred))  # Output: 0.857\n```\n\nThis script defines the `dice_score` function, which calculates the Dice Score for binary classification. It handles edge cases where there are no true or predicted positives and ensures the result is rounded to three decimal places."}
{"task_id": 74, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef create_row_hv(row, dim, random_seeds):\n    def generate_hv(seed, dim):\n        \"\"\"Generate a random hypervector with a given seed.\"\"\"\n        np.random.seed(seed)\n        return np.random.choice([-1, 1], dim)\n    \n    def bind_hv(hv1, hv2):\n        \"\"\"Bind two hypervectors using element-wise multiplication.\"\"\"\n        return hv1 * hv2\n    \n    # Initialize the composite hypervector as a ones vector\n    composite_hv = np.ones(dim)\n    \n    for feature, value in row.items():\n        # Generate hypervector for the feature name\n        feature_seed = random_seeds.get(feature, None)\n        if feature_seed is None:\n            raise ValueError(f\"Seed for feature '{feature}' not provided in random_seeds.\")\n        \n        feature_hv = generate_hv(feature_seed, dim)\n        \n        # Generate hypervector for the feature value\n        # Here, we assume the value is hashable and can be used as a seed\n        value_seed = hash((feature_seed, value))\n        value_hv = generate_hv(value_seed, dim)\n        \n        # Bind the feature name and value hypervectors\n        feature_value_hv = bind_hv(feature_hv, value_hv)\n        \n        # Bundle the feature-value hypervector into the composite hypervector\n        composite_hv = bind_hv(composite_hv, feature_value_hv)\n    \n    # Convert the composite hypervector to a list before returning\n    return composite_hv.tolist()\n\n# Example usage:\n# row = {'age': 25, 'gender': 'male'}\n# dim = 1000\n# random_seeds = {'age': 42, 'gender': 24}\n# composite_hv = create_row_hv(row, dim, random_seeds)\n# print(composite_hv)\n```\n\nThis script defines the `create_row_hv` function, which generates a composite hypervector for a given dataset row using Hyperdimensional Computing principles. The function uses provided seeds for reproducibility and binds hypervectors for feature names and their corresponding values. The final composite hypervector is returned as a list."}
{"task_id": 75, "completion_id": 0, "completion": "```\npython\nfrom collections import Counter\n\ndef confusion_matrix(data):\n    # Initialize counters for the confusion matrix elements\n    true_positives = 0\n    true_negatives = 0\n    false_positives = 0\n    false_negatives = 0\n    \n    # Iterate over each pair of true and predicted labels\n    for y_true, y_pred in data:\n        if y_true == 1 and y_pred == 1:\n            true_positives += 1\n        elif y_true == 0 and y_pred == 0:\n            true_negatives += 1\n        elif y_true == 0 and y_pred == 1:\n            false_positives += 1\n        elif y_true == 1 and y_pred == 0:\n            false_negatives += 1\n    \n    # Construct the confusion matrix as a list of lists\n    cm = [\n        [true_negatives, false_positives],\n        [false_negatives, true_positives]\n    ]\n    \n    return cm\n\n# Example usage:\ndata = [\n    [1, 1],\n    [0, 0],\n    [1, 0],\n    [0, 1],\n    [1, 1],\n    [0, 0]\n]\n\nprint(confusion_matrix(data))\n```\n\nThis script defines a function `confusion_matrix` that takes a list of `[y_true, y_pred]` pairs and calculates the confusion matrix for a binary classification problem. The example usage at the end demonstrates how to call the function with some sample data."}
{"task_id": 76, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef cosine_similarity(v1, v2):\n    # Check if vectors have the same shape\n    if v1.shape != v2.shape:\n        raise ValueError(\"Vectors must have the same shape\")\n    \n    # Check if vectors are not empty\n    if v1.size == 0 or v2.size == 0:\n        raise ValueError(\"Vectors cannot be empty\")\n    \n    # Calculate the dot product of the vectors\n    dot_product = np.dot(v1, v2)\n    \n    # Calculate the magnitude of each vector\n    magnitude_v1 = np.linalg.norm(v1)\n    magnitude_v2 = np.linalg.norm(v2)\n    \n    # Check if vectors have zero magnitude\n    if magnitude_v1 == 0 or magnitude_v2 == 0:\n        raise ValueError(\"Vectors cannot have zero magnitude\")\n    \n    # Calculate cosine similarity\n    cos_similarity = dot_product / (magnitude_v1 * magnitude_v2)\n    \n    # Return the cosine similarity rounded to three decimal places\n    return round(cos_similarity, 3)\n\n# Example usage:\n# v1 = np.array([1, 2, 3])\n# v2 = np.array([4, 5, 6])\n# print(cosine_similarity(v1, v2))  # Output: 0.974\n```"}
{"task_id": 77, "completion_id": 0, "completion": "```\npython\nfrom collections import Counter\nfrom typing import List, Tuple\n\ndef performance_metrics(actual: List[int], predicted: List[int]) -> Tuple[List[List[int]], float, float, float, float]:\n    # Ensure the input lists are of the same length\n    if len(actual) != len(predicted):\n        raise ValueError(\"The 'actual' and 'predicted' lists must have the same length.\")\n    \n    # Ensure all elements in the lists are either 0 or 1\n    if not all(x in [0, 1] for x in actual + predicted):\n        raise ValueError(\"All elements in 'actual' and 'predicted' lists must be either 0 or 1.\")\n    \n    # Initialize counters for the confusion matrix\n    true_positives = 0\n    true_negatives = 0\n    false_positives = 0\n    false_negatives = 0\n    \n    # Populate the confusion matrix\n    for a, p in zip(actual, predicted):\n        if a == 1 and p == 1:\n            true_positives += 1\n        elif a == 0 and p == 0:\n            true_negatives += 1\n        elif a == 0 and p == 1:\n            false_positives += 1\n        elif a == 1 and p == 0:\n            false_negatives += 1\n    \n    # Construct the confusion matrix\n    confusion_matrix = [\n        [true_negatives, false_positives],\n        [false_negatives, true_positives]\n    ]\n    \n    # Calculate accuracy\n    accuracy = (true_positives + true_negatives) / (true_positives + true_negatives + false_positives + false_negatives)\n    \n    # Calculate F1 Score\n    if true_positives + false_positives == 0 or true_positives + false_negatives == 0:\n        f1_score = 0.0\n    else:\n        precision = true_positives / (true_positives + false_positives)\n        recall = true_positives / (true_positives + false_negatives)\n        f1_score = 2 * (precision * recall) / (precision + recall)\n    \n    # Calculate Specificity\n    if true_negatives + false_positives == 0:\n        specificity = 0.0\n    else:\n        specificity = true_negatives / (true_negatives + false_positives)\n    \n    # Calculate Negative Predictive Value\n    if true_negatives + false_negatives == 0:\n        negative_predictive_value = 0.0\n    else:\n        negative_predictive_value = true_negatives / (true_negatives + false_negatives)\n    \n    # Return the results rounded to three decimal places\n    return (\n        confusion_matrix,\n        round(accuracy, 3),\n        round(f1_score, 3),\n        round(specificity, 3),\n        round(negative_predictive_value, 3)\n    )\n```\n\nThis script defines the `performance_metrics` function, which calculates the required performance metrics for a binary classification model. It includes checks to ensure the input lists are valid and computes each metric with appropriate handling for edge cases (e.g., division by zero). The results are rounded to three decimal places as specified."}
{"task_id": 78, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom scipy import stats\n\ndef descriptive_statistics(data):\n    # Convert input to a NumPy array if it isn't already\n    data = np.array(data)\n    \n    # Calculate the mean\n    mean = np.mean(data)\n    \n    # Calculate the median\n    median = np.median(data)\n    \n    # Calculate the mode\n    mode_result = stats.mode(data)\n    mode = mode_result.mode[0] if mode_result.count[0] > 1 else None\n    \n    # Calculate the variance\n    variance = np.var(data, ddof=0)  # Population variance\n    \n    # Calculate the standard deviation\n    standard_deviation = np.std(data, ddof=0)  # Population standard deviation\n    \n    # Calculate the percentiles\n    percentiles = np.percentile(data, [25, 50, 75])\n    percentile_25 = percentiles[0]\n    percentile_50 = percentiles[1]\n    percentile_75 = percentiles[2]\n    \n    # Calculate the interquartile range (IQR)\n    interquartile_range = percentile_75 - percentile_25\n    \n    # Prepare the results dictionary\n    results = {\n        'mean': round(mean, 4),\n        'median': round(median, 4),\n        'mode': mode,\n        'variance': round(variance, 4),\n        'standard_deviation': round(standard_deviation, 4),\n        '25th_percentile': round(percentile_25, 4),\n        '50th_percentile': round(percentile_50, 4),\n        '75th_percentile': round(percentile_75, 4),\n        'interquartile_range': round(interquartile_range, 4)\n    }\n    \n    return results\n\n# Example usage:\n# data = [1, 2, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9]\n# print(descriptive_statistics(data))\n```\n\nThis script defines a function `descriptive_statistics` that calculates and returns a dictionary of descriptive statistics for a given dataset. The function uses NumPy for numerical operations and SciPy for mode calculation. The results are rounded to four decimal places where applicable."}
{"task_id": 79, "completion_id": 0, "completion": "```\npython\nimport math\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials\n    \"\"\"\n    # Calculate the binomial coefficient (n choose k)\n    binom_coeff = math.comb(n, k)\n    \n    # Calculate the probability of k successes and (n-k) failures\n    probability = binom_coeff * (p ** k) * ((1 - p) ** (n - k))\n    \n    # Return the probability rounded to five decimal places\n    return round(probability, 5)\n\n# Example usage:\n# n = 10, k = 3, p = 0.5\nprint(binomial_probability(10, 3, 0.5))  # Output: 0.11719\n```"}
{"task_id": 80, "completion_id": 0, "completion": "```\npython\nimport math\n\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    :return: The PDF value rounded to 5 decimal places.\n    \"\"\"\n    coefficient = 1 / (std_dev * math.sqrt(2 * math.pi))\n    exponent = -((x - mean) ** 2) / (2 * std_dev ** 2)\n    pdf_value = coefficient * math.exp(exponent)\n    return round(pdf_value, 5)\n\n# Example usage:\n# mean = 0, std_dev = 1, x = 0\nprint(normal_pdf(0, 0, 1))  # Output should be 0.39894\n```"}
{"task_id": 81, "completion_id": 0, "completion": "```\npython\nimport math\n\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    :return: Probability of observing exactly k events, rounded to 5 decimal places\n    \"\"\"\n    if k < 0 or lam <= 0:\n        raise ValueError(\"k must be a non-negative integer and lam must be a positive number.\")\n    \n    probability = (math.exp(-lam) * (lam ** k)) / math.factorial(k)\n    return round(probability, 5)\n\n# Example usage:\n# k = 3, lam = 5\nprint(poisson_probability(3, 5))  # Output: 0.14037\n```"}
{"task_id": 82, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    \n    Returns:\n        int: The contrast of the image, defined as the difference between the maximum and minimum pixel values.\n    \"\"\"\n    if img.ndim != 2:\n        raise ValueError(\"The input image must be a 2D array (grayscale image).\")\n    \n    max_pixel = np.max(img)\n    min_pixel = np.min(img)\n    \n    contrast = max_pixel - min_pixel\n    return contrast\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Create a sample grayscale image (2D numpy array)\n    sample_img = np.array([[50, 60, 100],\n                           [80, 90, 150],\n                           [120, 130, 200]], dtype=np.uint8)\n    \n    # Calculate the contrast of the sample image\n    contrast = calculate_contrast(sample_img)\n    print(f\"The contrast of the sample image is: {contrast}\")\n```\n\nThis script defines a function `calculate_contrast` that computes the contrast of a grayscale image by finding the difference between the maximum and minimum pixel values in the image. The example usage at the bottom demonstrates how to use this function with a sample 2D numpy array representing a grayscale image."}
{"task_id": 83, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    \n    Returns:\n        float: The dot product of the two vectors.\n    \"\"\"\n    if vec1.shape != vec2.shape:\n        raise ValueError(\"Vectors must be of the same length\")\n    \n    return np.dot(vec1, vec2)\n\n# Example usage:\nif __name__ == \"__main__\":\n    vector1 = np.array([1, 2, 3])\n    vector2 = np.array([4, 5, 6])\n    result = calculate_dot_product(vector1, vector2)\n    print(f\"The dot product of {vector1} and {vector2} is {result}\")\n```"}
{"task_id": 84, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef phi_transform(data: list[float], degree: int) -> list[list[float]]:\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n    \n    Returns:\n        list[list[float]]: A list of lists, where each inner list contains the polynomial features of the corresponding data point.\n    \"\"\"\n    if degree < 0:\n        return []\n    \n    # Convert the input data to a numpy array for easier manipulation\n    data_array = np.array(data)\n    \n    # Generate polynomial features using numpy's polynomial expansion\n    # We use np.vander to create a Vandermonde matrix which is essentially the polynomial features\n    # The columns of the Vandermonde matrix are powers of the input data starting from 1 up to the specified degree\n    # We then transpose it to match the required output format\n    transformed_data = np.vander(data_array, degree + 1, increasing=True)\n    \n    # Round the output to 8 decimal places\n    transformed_data = np.round(transformed_data, 8)\n    \n    # Convert the numpy array back to a list of lists\n    return transformed_data.tolist()\n\n# Example usage:\n# data = [1.0, 2.0, 3.0]\n# degree = 2\n# print(phi_transform(data, degree))\n# Output: [[1.0, 1.0, 1.0], [1.0, 2.0, 4.0], [1.0, 3.0, 9.0]]\n```\n\nThis script defines the `phi_transform` function, which takes a list of numerical data and a degree, and returns a list of lists containing the polynomial features of the input data. The function uses NumPy's `vander` function to generate the polynomial features and ensures the output is rounded to 8 decimal places. If the degree is less than 0, it returns an empty list."}
{"task_id": 85, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef pos_encoding(position: int, d_model: int):\n    if position == 0 or d_model <= 0:\n        return -1\n    \n    # Initialize the positional encoding matrix\n    pos_enc = np.zeros((position, d_model), dtype=np.float16)\n    \n    # Compute the positional encodings\n    for pos in range(position):\n        for i in range(0, d_model, 2):\n            pos_enc[pos, i] = np.sin(pos / (10000 ** ((2 * i) / d_model)))\n            if i + 1 < d_model:  # Check to avoid index out of bounds\n                pos_enc[pos, i + 1] = np.cos(pos / (10000 ** ((2 * (i + 1)) / d_model)))\n    \n    # Convert to list before returning\n    return pos_enc.tolist()\n\n# Example usage:\n# print(pos_encoding(5, 12))\n```\n\nThis script defines a function `pos_encoding` that calculates the positional encodings for a given sequence length (`position`) and model dimensionality (`d_model`). It uses sine and cosine functions as specified in the Transformer architecture. The function returns -1 if the input conditions are not met. The resulting positional encoding matrix is converted to `np.float16` and then to a list before being returned."}
{"task_id": 86, "completion_id": 0, "completion": "```\npython\ndef model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1  # Overfitting\n    elif training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1  # Underfitting\n    else:\n        return 0  # Good fit\n\n# Example usage:\n# print(model_fit_quality(0.9, 0.6))  # Should return 1 (Overfitting)\n# print(model_fit_quality(0.5, 0.4))  # Should return -1 (Underfitting)\n# print(model_fit_quality(0.8, 0.75)) # Should return 0 (Good fit)\n```"}
{"task_id": 87, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-8):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    # Convert inputs to numpy arrays for vectorized operations\n    parameter = np.array(parameter)\n    grad = np.array(grad)\n    m = np.array(m)\n    v = np.array(v)\n    \n    # Update biased first raw moment estimate\n    m = beta1 * m + (1 - beta1) * grad\n    \n    # Update biased second raw moment estimate\n    v = beta2 * v + (1 - beta2) * (grad ** 2)\n    \n    # Compute bias-corrected first moment estimate\n    m_hat = m / (1 - beta1 ** t)\n    \n    # Compute bias-corrected second raw moment estimate\n    v_hat = v / (1 - beta2 ** t)\n    \n    # Update parameter\n    parameter = parameter - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    \n    # Return updated parameter and moments as lists rounded to 5 decimal places\n    return parameter.tolist(), m.tolist(), v.tolist()\n\n# Example usage:\n# parameter = [1.0, 2.0]\n# grad = [0.1, 0.2]\n# m = [0.0, 0.0]\n# v = [0.0, 0.0]\n# t = 1\n# updated_parameter, updated_m, updated_v = adam_optimizer(parameter, grad, m, v, t)\n# print(updated_parameter, updated_m, updated_v)\n```\n\nThis script defines the `adam_optimizer` function, which performs an update step using the Adam optimization algorithm. It handles both scalar and array inputs, and it applies bias correction to the moving averages. The results are rounded to five decimal places and returned as lists."}
{"task_id": 88, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef load_encoder_hparams_and_params(model_size: str = \"124M\", models_dir: str = \"models\"):\n    class DummyBPE:\n        def __init__(self):\n            self.encoder_dict = {\"hello\": 1, \"world\": 2, \"<UNK>\": 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict[\"<UNK>\"]) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for k, v in self.encoder_dict.items()}\n            return \" \".join([reversed_dict.get(tok_id, \"<UNK>\") for tok_id in token_ids])\n\n    hparams = {\n        \"n_ctx\": 1024,\n        \"n_head\": 12\n    }\n\n    params = {\n        \"wte\": np.random.rand(3, 10),\n        \"wpe\": np.random.rand(1024, 10),\n        \"blocks\": [],\n        \"ln_f\": {\n            \"g\": np.ones(10),\n            \"b\": np.zeros(10),\n        }\n    }\n\n    encoder = DummyBPE()\n    return encoder, hparams, params\n\ndef layer_norm(x, g, b, eps=1e-5):\n    mean = np.mean(x, axis=-1, keepdims=True)\n    variance = np.var(x, axis=-1, keepdims=True)\n    return g * (x - mean) / np.sqrt(variance + eps) + b\n\ndef multi_head_attention(q, k, v, n_head):\n    batch_size, seq_len, d_model = q.shape\n    d_k = d_model // n_head\n\n    q = q.reshape(batch_size, seq_len, n_head, d_k).transpose(0, 2, 1, 3)\n    k = k.reshape(batch_size, seq_len, n_head, d_k).transpose(0, 2, 1, 3)\n    v = v.reshape(batch_size, seq_len, n_head, d_k).transpose(0, 2, 1, 3)\n\n    scores = np.matmul(q, k.transpose(0, 1, 3, 2)) / np.sqrt(d_k)\n    attention_weights = np.exp(scores - np.max(scores, axis=-1, keepdims=True))\n    attention_weights = attention_weights / np.sum(attention_weights, axis=-1, keepdims=True)\n    \n    output = np.matmul(attention_weights, v).transpose(0, 2, 1, 3).reshape(batch_size, seq_len, d_model)\n    return output\n\ndef feed_forward(x, d_model, d_ff):\n    w1 = np.random.rand(d_model, d_ff)\n    b1 = np.random.rand(d_ff)\n    w2 = np.random.rand(d_ff, d_model)\n    b2 = np.random.rand(d_model)\n    return np.matmul(np.maximum(np.matmul(x, w1) + b1, 0), w2) + b2\n\ndef gen_text(prompt: str, n_tokens_to_generate: int = 40):\n    encoder, hparams, params = load_encoder_hparams_and_params()\n    n_ctx = hparams[\"n_ctx\"]\n    n_head = hparams[\"n_head\"]\n    wte = params[\"wte\"]\n    wpe = params[\"wpe\"]\n    ln_f_g = params[\"ln_f\"][\"g\"]\n    ln_f_b = params[\"ln_f\"][\"b\"]\n\n    input_ids = encoder.encode(prompt)\n    input_ids = input_ids[-n_ctx:]  # Truncate to context length\n\n    for _ in range(n_tokens_to_generate):\n        context_length = len(input_ids)\n        if context_length > n_ctx:\n            input_ids = input_ids[-n_ctx:]\n\n        positions = np.arange(context_length, dtype=np.int32)\n        token_embeddings = wte[input_ids]\n        positional_embeddings = wpe[positions]\n        x = token_embeddings + positional_embeddings\n\n        # Simplified block (no actual GPT-2 blocks here)\n        q = x\n        k = x\n        v = x\n        attention_output = multi_head_attention(q, k, v, n_head)\n        x = layer_norm(x + attention_output, ln_f_g, ln_f_b)\n        feed_forward_output = feed_forward(x, x.shape[-1], 20)  # d_ff is arbitrary here\n        x = layer_norm(x + feed_forward_output, ln_f_g, ln_f_b)\n\n        # Predict next token\n        logits = np.matmul(x[-1], wte.T)\n        next_token = np.argmax(logits, axis=-1)\n        input_ids.append(next_token)\n\n    generated_text = encoder.decode(input_ids)\n    return generated_text\n\n# Example usage\nprint(gen_text(\"hello\"))\n```\n\nThis script provides a simplified version of a GPT-2-like text generation function. It includes token embeddings, positional embeddings, a simplified multi-head attention mechanism, a feed-forward network, and layer normalization. The `gen_text` function generates text based on a given prompt. Note that this is a highly simplified version and does not include the full complexity of the GPT-2 architecture."}
{"task_id": 89, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef pattern_weaver(n, crystal_values, dimension):\n    def softmax(values):\n        # Implement the softmax function first\n        e_values = np.exp(values - np.max(values))  # Subtract max for numerical stability\n        return e_values / np.sum(e_values)\n    \n    # Convert crystal values to a numpy array for easier manipulation\n    crystal_values = np.array(crystal_values)\n    \n    # Initialize a matrix to hold the attention scores\n    attention_scores = np.zeros((n, n))\n    \n    # Calculate the raw attention scores (dot product of crystal values with a random weight matrix)\n    # Here, we assume a random weight matrix for simplicity\n    weight_matrix = np.random.rand(dimension, n)\n    crystal_values_matrix = crystal_values.reshape(n, 1) * np.ones((1, dimension))\n    \n    # Calculate the dot product for each pair of crystals\n    for i in range(n):\n        for j in range(n):\n            attention_scores[i, j] = np.dot(crystal_values_matrix[i], crystal_values_matrix[j])\n    \n    # Apply softmax to each row to get the attention scores\n    attention_weights = np.apply_along_axis(softmax, 1, attention_scores)\n    \n    # Calculate the final weighted pattern for each crystal\n    weighted_patterns = np.dot(attention_weights, crystal_values)\n    \n    # Return the weighted patterns rounded to 4 decimal places\n    return [round(pattern, 4) for pattern in weighted_patterns]\n\n# Example usage:\nn = 5\ncrystal_values = [1.0, 2.0, 3.0, 4.0, 5.0]\ndimension = 3\nprint(pattern_weaver(n, crystal_values, dimension))\n```\n\nThis script defines a function `pattern_weaver` that calculates the weighted patterns of crystals using a simplified self-attention mechanism. The function first defines a softmax function, then calculates the attention scores between each pair of crystals, applies softmax to these scores, and finally computes the weighted patterns. The result is a list of floats representing the enhanced patterns of each crystal, rounded to four decimal places."}
{"task_id": 90, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\n\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    # Calculate the document frequency for each term\n    doc_freq = Counter()\n    for doc in corpus:\n        unique_terms = set(doc)\n        for term in unique_terms:\n            doc_freq[term] += 1\n    \n    # Calculate the inverse document frequency for each term\n    num_docs = len(corpus)\n    idf = {term: np.log((num_docs - doc_freq[term] + 0.5) / (doc_freq[term] + 0.5)) for term in doc_freq}\n    \n    # Calculate the average document length\n    avg_doc_len = np.mean([len(doc) for doc in corpus])\n    \n    # Calculate the BM25 score for each document\n    scores = []\n    query_terms = Counter(query)\n    for doc in corpus:\n        score = 0\n        doc_len = len(doc)\n        for term in query_terms:\n            if term in doc:\n                f_q_d = doc.count(term)\n                score += idf[term] * (f_q_d * (k1 + 1)) / (f_q_d + k1 * (1 - b + b * (doc_len / avg_doc_len)))\n        scores.append(round(score, 3))\n    \n    return scores\n\n# Example usage:\ncorpus = [\n    \"the quick brown fox jumps over the lazy dog\".split(),\n    \"never jump over the lazy dog quickly\".split(),\n    \"a quick brown dog outpaces a quick fox\".split()\n]\nquery = \"quick brown fox\".split()\n\nscores = calculate_bm25_scores(corpus, query)\nprint(scores)\n```\n\nThis script defines a function `calculate_bm25_scores` that computes the BM25 scores for a given query against a corpus of documents. The function takes the corpus, query, and optional parameters `k1` and `b` as inputs and returns a list of scores rounded to three decimal places. The example usage demonstrates how to call the function with a sample corpus and query."}
{"task_id": 91, "completion_id": 0, "completion": "```\npython\ndef calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        raise ValueError(\"The length of y_true and y_pred must be the same.\")\n    \n    # Calculate True Positives, False Positives, and False Negatives\n    tp = sum(1 for yt, yp in zip(y_true, y_pred) if yt == 1 and yp == 1)\n    fp = sum(1 for yt, yp in zip(y_true, y_pred) if yt == 0 and yp == 1)\n    fn = sum(1 for yt, yp in zip(y_true, y_pred) if yt == 1 and yp == 0)\n    \n    # Calculate Precision and Recall\n    precision = tp / (tp + fp) if (tp + fp) > 0 else 0\n    recall = tp / (tp + fn) if (tp + fn) > 0 else 0\n    \n    # Calculate F1 Score\n    f1_score = 2 * (precision * recall) / (precision + recall) if (precision + recall) > 0 else 0\n    \n    return round(f1_score, 3)\n\n# Example usage:\ny_true = [0, 1, 1, 0, 1, 1, 0, 1]\ny_pred = [0, 1, 0, 0, 1, 0, 1, 1]\nprint(calculate_f1_score(y_true, y_pred))  # Output: 0.500\n```"}
{"task_id": 92, "completion_id": 0, "completion": "```\npython\nimport math\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nimport math\n\nPI = 3.14159\n\ndef power_grid_forecast(consumption_data):\n    # 1) Subtract the daily fluctuation (10 * sin(2\u03c0 * i / 10)) from each data point.\n    detrended_data = []\n    for i, consumption in enumerate(consumption_data, start=1):\n        fluctuation = 10 * math.sin(2 * PI * i / 10)\n        detrended_data.append(consumption - fluctuation)\n    \n    # 2) Perform linear regression on the detrended data.\n    days = np.array(range(1, len(consumption_data) + 1)).reshape(-1, 1)\n    model = LinearRegression()\n    model.fit(days, detrended_data)\n    \n    # 3) Predict day 15's base consumption.\n    day_15_base_consumption = model.predict(np.array([[15]]))[0]\n    \n    # 4) Add the day 15 fluctuation back.\n    day_15_fluctuation = 10 * math.sin(2 * PI * 15 / 10)\n    day_15_consumption = day_15_base_consumption + day_15_fluctuation\n    \n    # 5) Round, then add a 5% safety margin (rounded up).\n    final_consumption = math.ceil(day_15_consumption * 1.05)\n    \n    # 6) Return the final integer.\n    return final_consumption\n\n# Example usage:\nconsumption_data = [120, 130, 145, 150, 160, 175, 180, 190, 200, 210]\nprint(power_grid_forecast(consumption_data))\n```\n\nThis script performs the required tasks step-by-step, using linear regression to model the detrended data and then predicting future consumption with a safety margin."}
{"task_id": 93, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    # Ensure the input arrays are numpy arrays\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    \n    # Calculate the absolute differences\n    absolute_errors = np.abs(y_true - y_pred)\n    \n    # Calculate the mean of the absolute differences\n    mean_absolute_error = np.mean(absolute_errors)\n    \n    # Return the MAE rounded to 3 decimal places\n    return round(mean_absolute_error, 3)\n\n# Example usage:\n# y_true = np.array([3.0, -0.5, 2.0, 7.0])\n# y_pred = np.array([2.5, 0.0, 2.0, 8.0])\n# print(mae(y_true, y_pred))  # Output should be 0.375\n```"}
{"task_id": 94, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray) -> tuple:\n    \"\"\"\n    Compute the Query, Key, and Value matrices.\n    \n    Parameters:\n    - X: Input matrix of shape (batch_size, seq_length, embed_dim)\n    - W_q: Query weight matrix of shape (embed_dim, embed_dim)\n    - W_k: Key weight matrix of shape (embed_dim, embed_dim)\n    - W_v: Value weight matrix of shape (embed_dim, embed_dim)\n    \n    Returns:\n    - Q: Query matrix of shape (batch_size, seq_length, embed_dim)\n    - K: Key matrix of shape (batch_size, seq_length, embed_dim)\n    - V: Value matrix of shape (batch_size, seq_length, embed_dim)\n    \"\"\"\n    Q = X @ W_q\n    K = X @ W_k\n    V = X @ W_v\n    return Q, K, V\n\ndef self_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute the self-attention mechanism.\n    \n    Parameters:\n    - Q: Query matrix of shape (batch_size, seq_length, embed_dim)\n    - K: Key matrix of shape (batch_size, seq_length, embed_dim)\n    - V: Value matrix of shape (batch_size, seq_length, embed_dim)\n    \n    Returns:\n    - Z: Output matrix of shape (batch_size, seq_length, embed_dim)\n    \"\"\"\n    d_k = K.shape[-1]\n    scores = Q @ K.transpose(0, 2, 1) / np.sqrt(d_k)\n    attention_weights = np.softmax(scores, axis=-1)\n    Z = attention_weights @ V\n    return Z\n\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Compute the multi-head attention mechanism.\n    \n    Parameters:\n    - X: Input matrix of shape (batch_size, seq_length, embed_dim)\n    - W_q: Query weight matrix of shape (embed_dim, embed_dim)\n    - W_k: Key weight matrix of shape (embed_dim, embed_dim)\n    - W_v: Value weight matrix of shape (embed_dim, embed_dim)\n    - n_heads: Number of attention heads\n    \n    Returns:\n    - output: Output matrix of shape (batch_size, seq_length, embed_dim) as a Python list\n    \"\"\"\n    batch_size, seq_length, embed_dim = X.shape\n    head_dim = embed_dim // n_heads\n    \n    # Split the weight matrices into n_heads parts\n    W_q_heads = np.array_split(W_q, n_heads, axis=0)\n    W_k_heads = np.array_split(W_k, n_heads, axis=0)\n    W_v_heads = np.array_split(W_v, n_heads, axis=0)\n    \n    heads = []\n    for i in range(n_heads):\n        Q, K, V = compute_qkv(X, W_q_heads[i], W_k_heads[i], W_v_heads[i])\n        Z = self_attention(Q, K, V)\n        heads.append(Z)\n    \n    # Concatenate the heads\n    Z_concat = np.concatenate(heads, axis=-1)\n    \n    # Linear projection\n    W_o = np.random.randn(embed_dim, embed_dim)  # Output weight matrix\n    Z_output = Z_concat @ W_o\n    \n    # Round to the nearest 4th decimal and convert to list\n    output = np.round(Z_output, 4).tolist()\n    return output\n\n# Example usage\nif __name__ == \"__main__\":\n    np.random.seed(0)  # For reproducibility\n    batch_size, seq_length, embed_dim = 2, 3, 8\n    n_heads = 2\n    \n    X = np.random.randn(batch_size, seq_length, embed_dim)\n    W_q = np.random.randn(embed_dim, embed_dim)\n    W_k = np.random.randn(embed_dim, embed_dim)\n    W_v = np.random.randn(embed_dim, embed_dim)\n    \n    result = multi_head_attention(X, W_q, W_k, W_v, n_heads)\n    print(result)\n```"}
{"task_id": 95, "completion_id": 0, "completion": "```\npython\ndef phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    n = len(x)\n    n11 = sum(xi and yi for xi, yi in zip(x, y))\n    n10 = sum(xi and not yi for xi, yi in zip(x, y))\n    n01 = sum(not xi and yi for xi, yi in zip(x, y))\n    n00 = sum(not xi and not yi for xi, yi in zip(x, y))\n    \n    numerator = n11 * n00 - n10 * n01\n    denominator = ((n11 + n10) * (n11 + n01) * (n00 + n10) * (n00 + n01)) ** 0.5\n    \n    if denominator == 0:\n        return 0.0  # To handle the case where the denominator is zero to avoid division by zero\n    \n    phi = numerator / denominator\n    return round(phi, 4)\n\n# Example usage:\n# x = [1, 0, 1, 1, 0]\n# y = [1, 1, 0, 1, 0]\n# print(phi_corr(x, y))  # Output: 0.1690\n```\n\nThis script defines a function `phi_corr` that calculates the Phi coefficient for two binary variables provided as lists. It checks for equal list lengths, calculates the necessary contingency table values, and computes the Phi coefficient, handling potential division by zero cases. The result is rounded to four decimal places."}
{"task_id": 96, "completion_id": 0, "completion": "```\npython\ndef hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    # Hard Sigmoid formula: f(x) = max(0, min(1, 0.2 * x + 0.5))\n    return max(0, min(1, 0.2 * x + 0.5))\n\n# Example usage:\nif __name__ == \"__main__\":\n    test_values = [-5, -1, 0, 1, 5]\n    results = {x: hard_sigmoid(x) for x in test_values}\n    for x, result in results.items():\n        print(f\"hard_sigmoid({x}) = {result}\")\n```"}
{"task_id": 97, "completion_id": 0, "completion": "```\npython\nimport math\n\ndef elu(x: float, alpha: float = 1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value\n    \"\"\"\n    if x >= 0:\n        result = x\n    else:\n        result = alpha * (math.exp(x) - 1)\n    return round(result, 4)\n\n# Example usage:\n# print(elu(1.0))  # Output: 1.0\n# print(elu(-1.0)) # Output: -0.6321\n```"}
{"task_id": 98, "completion_id": 0, "completion": "```\npython\ndef prelu(x: float, alpha: float = 0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    return x if x >= 0 else alpha * x\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(prelu(1.0))    # Output: 1.0\n    print(prelu(-1.0))   # Output: -0.25\n    print(prelu(-2.0, 0.1))  # Output: -0.2\n    print(prelu(0.0))    # Output: 0.0\n```"}
{"task_id": 99, "completion_id": 0, "completion": "```\npython\nimport math\n\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x)\n    \"\"\"\n    # To prevent numerical overflow, we use the following approach:\n    # For large x, log(1 + e^x) is approximately x.\n    # For small x, we use the direct computation.\n    if x > 20:  # Threshold to avoid overflow in e^x\n        return round(x, 4)\n    else:\n        return round(math.log(1 + math.exp(x)), 4)\n\n# Example usage:\n# print(softplus(1.0))  # Expected output: 1.3133\n# print(softplus(-1.0)) # Expected output: 0.3133\n# print(softplus(25.0)) # Expected output: 25.0000\n```"}
{"task_id": 100, "completion_id": 0, "completion": "```\npython\ndef softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input, rounded to the 4th decimal place\n    \"\"\"\n    result = x / (1 + abs(x))\n    return round(result, 4)\n\n# Example usage:\nif __name__ == \"__main__\":\n    test_values = [-10, -1, 0, 1, 10]\n    for value in test_values:\n        print(f\"Softsign({value}) = {softsign(value)}\")\n```"}
{"task_id": 101, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    # Convert inputs to numpy arrays for vectorized operations\n    rhos = np.array(rhos)\n    A = np.array(A)\n    pi_theta_old = np.array(pi_theta_old)\n    pi_theta_ref = np.array(pi_theta_ref)\n    \n    # Calculate the clipped likelihood ratios\n    clipped_rhos = np.clip(rhos, 1 - epsilon, 1 + epsilon)\n    \n    # Calculate the policy ratio with respect to the reference policy\n    pi_ratio = pi_theta_old / pi_theta_ref\n    \n    # Calculate the first term of the objective: clipped rho * advantage\n    term1 = np.minimum(rhos * A, clipped_rhos * A)\n    \n    # Calculate the KL divergence between the old policy and the reference policy\n    kl_divergence = np.sum(pi_theta_old * np.log(pi_theta_old / pi_theta_ref))\n    \n    # Calculate the GRPO objective\n    grpo_obj = np.mean(term1) - beta * kl_divergence\n    \n    # Return the result rounded to the nearest 6th decimal\n    return round(grpo_obj, 6)\n\n# Example usage:\n# rhos = [1.1, 0.9, 1.2, 0.8]\n# A = [0.5, -0.3, 0.2, -0.1]\n# pi_theta_old = [0.2, 0.3, 0.1, 0.4]\n# pi_theta_ref = [0.1, 0.4, 0.2, 0.3]\n# print(grpo_objective(rhos, A, pi_theta_old, pi_theta_ref))\n```\n\nThis script defines the `grpo_objective` function, which computes the GRPO objective function as described in the task. It uses numpy for efficient computation and ensures the result is rounded to the nearest 6th decimal place."}
{"task_id": 102, "completion_id": 0, "completion": "```\npython\nimport math\nimport numpy as np\n\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value rounded to the nearest 4th decimal\n    \"\"\"\n    swish_value = x * math.sigmoid(x)\n    return round(swish_value, 4)\n\n# Example usage:\nif __name__ == \"__main__\":\n    test_values = [-2.0, -1.0, 0.0, 1.0, 2.0]\n    for value in test_values:\n        print(f\"Swish({value}) = {swish(value)}\")\n```\n\nThis script defines the Swish activation function and includes an example usage section that demonstrates how to compute the Swish value for a list of test inputs. The results are rounded to the nearest 4th decimal as specified."}
{"task_id": 103, "completion_id": 0, "completion": "```\npython\nimport math\nimport numpy as np\n\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value rounded to the nearest 4th decimal\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554804\n    \n    if x >= 0:\n        result = scale * x\n    else:\n        result = scale * alpha * (math.exp(x) - 1)\n    \n    return round(result, 4)\n\n# Example usage:\n# print(selu(0.5))  # Example input\n# print(selu(-0.5)) # Example input\n```\n\nThis script defines the SELU activation function, which is a self-normalizing variant of the ELU activation function. The function takes a float as input and returns the SELU activation value, rounded to the nearest 4th decimal place. The SELU function uses two constants, `alpha` and `scale`, which are predefined in the code."}
{"task_id": 104, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00d7 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    # Compute the linear combination of inputs and weights\n    linear_combination = np.dot(X, weights) + bias\n    \n    # Apply the sigmoid function to get probabilities\n    probabilities = 1 / (1 + np.exp(-linear_combination))\n    \n    # Convert probabilities to binary predictions using a threshold of 0.5\n    predictions = (probabilities >= 0.5).astype(int)\n    \n    # Reshape predictions to a list\n    return predictions.tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4]])\n# weights = np.array([0.5, -0.2])\n# bias = 0.1\n# print(predict_logistic(X, weights, bias))\n```\n\nThis script defines a function `predict_logistic` that takes an input feature matrix `X`, model weights `weights`, and model bias `bias` to compute binary predictions using logistic regression. The function returns a list of binary predictions. The example usage at the bottom shows how to call the function with sample data."}
{"task_id": 105, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    # Number of classes\n    C = np.unique(y).size\n    # Number of features\n    M = X.shape[1]\n    \n    # Initialize weights randomly\n    B = np.random.randn(C, M)\n    \n    # Convert labels to one-hot encoding\n    y_one_hot = np.eye(C)[y]\n    \n    # List to store loss values\n    losses = []\n    \n    # Gradient descent loop\n    for _ in range(iterations):\n        # Compute the score vector\n        scores = np.dot(X, B.T)\n        \n        # Apply softmax function\n        exp_scores = np.exp(scores - np.max(scores, axis=1, keepdims=True))\n        softmax_probs = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)\n        \n        # Compute the loss: Cross Entropy\n        loss = -np.sum(y_one_hot * np.log(softmax_probs)) / X.shape[0]\n        losses.append(round(loss, 4))\n        \n        # Compute the gradient\n        d_scores = softmax_probs - y_one_hot\n        grad = np.dot(d_scores.T, X) / X.shape[0]\n        \n        # Update the weights\n        B -= learning_rate * grad\n    \n    # Return the updated weights and loss values\n    return B.round(4).tolist(), losses\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([0, 1, 0])\n# learning_rate = 0.01\n# iterations = 100\n# B, losses = train_softmaxreg(X, y, learning_rate, iterations)\n# print(\"Optimized Coefficients:\", B)\n# print(\"Collected Losses:\", losses)\n```\n\nThis script defines a function `train_softmaxreg` that performs gradient descent to train a Softmax regression model. It uses Cross Entropy loss to update the model parameters and collects the loss values over the specified number of iterations. The function returns the optimized coefficients and the collected loss values, both rounded to four decimal places."}
{"task_id": 106, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \"\"\"\n    # Add a column of ones to X for the intercept term\n    X = np.hstack([np.ones((X.shape[0], 1)), X])\n    \n    # Initialize weights\n    weights = np.zeros(X.shape[1])\n    \n    # List to store loss values\n    loss_values = []\n    \n    # Sigmoid function\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    \n    # Binary Cross Entropy Loss\n    def compute_loss(y_true, y_pred):\n        return -np.mean(y_true * np.log(y_pred) + (1 - y_true) * np.log(1 - y_pred))\n    \n    # Gradient Descent\n    for _ in range(iterations):\n        # Compute predictions\n        z = np.dot(X, weights)\n        y_pred = sigmoid(z)\n        \n        # Compute loss\n        loss = compute_loss(y, y_pred)\n        loss_values.append(round(loss, 4))\n        \n        # Compute gradients\n        gradient = np.dot(X.T, (y_pred - y)) / y.size\n        \n        # Update weights\n        weights -= learning_rate * gradient\n    \n    # Return optimized coefficients and loss values\n    return weights.tolist(), loss_values\n\n# Example usage:\n# X = np.array([[0.5, 1.5], [1.0, 1.0], [1.5, 0.5], [2.0, 0.5]])\n# y = np.array([0, 0, 1, 1])\n# learning_rate = 0.1\n# iterations = 100\n# coefficients, losses = train_logreg(X, y, learning_rate, iterations)\n# print(\"Coefficients:\", coefficients)\n# print(\"Losses:\", losses)\n```\n\nThis script defines a function `train_logreg` that performs gradient descent to train a logistic regression model. It includes a sigmoid function for the logistic regression hypothesis, a function to compute the binary cross-entropy loss, and the main loop for updating the model parameters. The function returns the optimized coefficients and a list of loss values rounded to four decimal places."}
{"task_id": 107, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray):\n    \"\"\"\n    Compute Query (Q), Key (K), and Value (V) matrices.\n    \"\"\"\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    return Q, K, V\n\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    # Compute the dot product between Q and K^T\n    dot_product = np.dot(Q, K.T)\n    \n    # Scale the dot product by the square root of the dimension of K\n    d_k = K.shape[-1]\n    scaled_dot_product = dot_product / np.sqrt(d_k)\n    \n    # Apply the mask\n    scaled_dot_product = scaled_dot_product + (mask * -1e9)  # Large negative number for masked values\n    \n    # Apply softmax to the scaled dot product\n    attention_weights = np.exp(scaled_dot_product - np.max(scaled_dot_product, axis=-1, keepdims=True))\n    attention_weights = attention_weights / np.sum(attention_weights, axis=-1, keepdims=True)\n    \n    # Compute the weighted sum of the values\n    output = np.dot(attention_weights, V)\n    \n    return output.tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Example input data\n    np.random.seed(0)\n    batch_size, seq_length, embedding_dim = 2, 3, 4\n    X = np.random.rand(batch_size, seq_length, embedding_dim)\n    \n    # Randomly initialized weight matrices for Q, K, V\n    W_q = np.random.rand(embedding_dim, embedding_dim)\n    W_k = np.random.rand(embedding_dim, embedding_dim)\n    W_v = np.random.rand(embedding_dim, embedding_dim)\n    \n    # Compute Q, K, V\n    Q, K, V = compute_qkv(X, W_q, W_k, W_v)\n    \n    # Create a mask (1 for positions to attend, 0 for positions to mask)\n    mask = np.triu(np.ones((seq_length, seq_length)), k=1)  # Upper triangular mask for causal attention\n    \n    # Compute masked self-attention\n    result = masked_attention(Q, K, V, mask)\n    \n    print(\"Masked Self-Attention Result:\")\n    print(result)\n```"}
{"task_id": 108, "completion_id": 0, "completion": "```\npython\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    The disorder is calculated using the Shannon entropy formula, which is a common\n    measure of entropy or disorder in a system. The entropy is 0 when all apples\n    are the same color and increases with the variety of colors.\n    \"\"\"\n    from collections import Counter\n    import math\n\n    # Count the frequency of each color\n    color_counts = Counter(apples)\n    total_apples = len(apples)\n\n    # Calculate the Shannon entropy\n    entropy = 0.0\n    for count in color_counts.values():\n        probability = count / total_apples\n        entropy -= probability * math.log2(probability)\n\n    # Return the entropy rounded to the nearest 4th decimal\n    return round(entropy, 4)\n\n# Test cases\nprint(disorder([0, 0, 0, 0]))          # Expected output: 0.0000\nprint(disorder([1, 1, 0, 0]))          # Expected output: 1.0000\nprint(disorder([0, 1, 2, 3]))          # Expected output: 2.0000\nprint(disorder([0, 0, 1, 1, 2, 2, 3, 3]))  # Expected output: 1.7500\n```\n\nThis script defines a function `disorder` that calculates the Shannon entropy of a list of apple colors, which serves as a measure of disorder. The function uses the `Counter` class from the `collections` module to count the occurrences of each color and then applies the Shannon entropy formula. The result is rounded to the nearest 4th decimal place."}
{"task_id": 109, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float = 1e-5):\n    \"\"\"\n    Perform Layer Normalization on the input tensor X.\n    \n    Parameters:\n    - X: np.ndarray of shape (batch_size, sequence_length, feature_dim)\n    - gamma: np.ndarray of shape (feature_dim,) for scaling\n    - beta: np.ndarray of shape (feature_dim,) for shifting\n    - epsilon: small constant for numerical stability\n    \n    Returns:\n    - Normalized X as a list with values rounded to 5 decimal places.\n    \"\"\"\n    # Mean and variance across the feature dimension (last axis)\n    mean = np.mean(X, axis=-1, keepdims=True)\n    variance = np.var(X, axis=-1, keepdims=True)\n    \n    # Normalize X\n    X_normalized = (X - mean) / np.sqrt(variance + epsilon)\n    \n    # Scale and shift\n    X_normalized = gamma * X_normalized + beta\n    \n    # Round to 5 decimal places and convert to list\n    return X_normalized.round(5).tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Sample data\n    batch_size, sequence_length, feature_dim = 2, 3, 4\n    X = np.random.rand(batch_size, sequence_length, feature_dim)\n    gamma = np.random.rand(feature_dim)\n    beta = np.random.rand(feature_dim)\n    \n    # Perform layer normalization\n    normalized_X = layer_normalization(X, gamma, beta)\n    print(normalized_X)\n```"}
{"task_id": 110, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\n\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    # Tokenize the reference and candidate\n    ref_tokens = reference.split()\n    cand_tokens = candidate.split()\n    \n    # Calculate unigram matches\n    ref_counter = Counter(ref_tokens)\n    cand_counter = Counter(cand_tokens)\n    \n    # True positives (matches)\n    matches = sum((ref_counter & cand_counter).values())\n    \n    # Precision and Recall\n    precision = matches / len(cand_tokens) if cand_tokens else 0\n    recall = matches / len(ref_tokens) if ref_tokens else 0\n    \n    # F-mean\n    if precision + recall == 0:\n        f_mean = 0\n    else:\n        f_mean = (1 + beta**2) * (precision * recall) / ((beta**2 * precision) + recall)\n    \n    # Chunks\n    def get_chunks(tokens):\n        chunks = []\n        chunk = []\n        for token in tokens:\n            if token in ref_counter and ref_counter[token] > 0:\n                chunk.append(token)\n                ref_counter[token] -= 1\n            else:\n                if chunk:\n                    chunks.append(chunk)\n                    chunk = []\n        if chunk:\n            chunks.append(chunk)\n        return chunks\n    \n    ref_counter = Counter(ref_tokens)  # Reset ref_counter\n    cand_chunks = get_chunks(cand_tokens)\n    \n    # Penalty for fragmentation\n    frag_penalty = 0\n    for chunk in cand_chunks:\n        if len(chunk) > 1:\n            frag_penalty += (len(chunk) - 1)\n    \n    # Fragmentation measure\n    frag_measure = 1 - (frag_penalty / len(cand_tokens)) if cand_tokens else 0\n    \n    # METEOR score\n    if f_mean == 0 or frag_measure == 0:\n        meteor = 0\n    else:\n        meteor = (1 - gamma) * f_mean + gamma * frag_measure\n    \n    # Adjust with alpha\n    meteor = alpha * meteor + (1 - alpha) * f_mean\n    \n    return round(meteor, 3)\n\n# Example usage:\nreference = \"the cat sat on the mat\"\ncandidate = \"the cat lay on the mat\"\nprint(meteor_score(reference, candidate))\n```\n\nThis script defines a function `meteor_score` that calculates the METEOR score for evaluating machine translation quality. The function takes a reference translation and a candidate translation as input, along with optional parameters `alpha`, `beta`, and `gamma`, and returns the METEOR score rounded to three decimal places."}
{"task_id": 111, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    \"\"\"\n    Compute the Pointwise Mutual Information (PMI) given the joint occurrence count of two events,\n    their individual counts, and the total number of samples.\n    \n    Parameters:\n    - joint_counts: int, the number of times both events occur together.\n    - total_counts_x: int, the total number of times event X occurs.\n    - total_counts_y: int, the total number of times event Y occurs.\n    - total_samples: int, the total number of samples.\n    \n    Returns:\n    - float, the PMI value rounded to 3 decimal places.\n    \"\"\"\n    # Calculate the expected joint probability under independence\n    expected_joint_prob = (total_counts_x / total_samples) * (total_counts_y / total_samples)\n    \n    # Calculate the actual joint probability\n    actual_joint_prob = joint_counts / total_samples\n    \n    # Calculate PMI\n    if expected_joint_prob == 0 or actual_joint_prob == 0:\n        pmi = 0.0\n    else:\n        pmi = np.log2(actual_joint_prob / expected_joint_prob)\n    \n    # Return PMI rounded to 3 decimal places\n    return round(pmi, 3)\n\n# Example usage:\n# joint_counts = 10, total_counts_x = 100, total_counts_y = 50, total_samples = 1000\n# pmi_value = compute_pmi(10, 100, 50, 1000)\n# print(pmi_value)  # Output should be the PMI value rounded to 3 decimal places\n```"}
{"task_id": 112, "completion_id": 0, "completion": "```\npython\ndef min_max(x: list[int]) -> list[float]:\n    if not x:\n        return []\n    \n    min_val = min(x)\n    max_val = max(x)\n    \n    # Avoid division by zero if all values are the same\n    if min_val == max_val:\n        return [0.0] * len(x)\n    \n    normalized = [(val - min_val) / (max_val - min_val) for val in x]\n    return [round(val, 4) for val in normalized]\n\n# Example usage:\n# data = [10, 20, 30, 40, 50]\n# print(min_max(data))  # Output: [0.0, 0.25, 0.5, 0.75, 1.0]\n```"}
{"task_id": 113, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray) -> list:\n    # First layer: linear transformation followed by ReLU\n    z1 = np.dot(x, w1)\n    a1 = np.maximum(0, z1)\n    \n    # Second layer: linear transformation followed by ReLU\n    z2 = np.dot(a1, w2)\n    a2 = np.maximum(0, z2)\n    \n    # Shortcut connection: add the original input to the output of the second layer\n    z3 = a2 + x\n    \n    # Final ReLU activation\n    output = np.maximum(0, z3)\n    \n    # Round the output to 4 decimal places and convert to list\n    return output.round(4).tolist()\n\n# Example usage:\n# Define a sample input vector and weight matrices\nx = np.array([1.0, 2.0, 3.0])\nw1 = np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]])\nw2 = np.array([[0.9, 0.8, 0.7], [0.6, 0.5, 0.4], [0.3, 0.2, 0.1]])\n\n# Call the residual block function\nresult = residual_block(x, w1, w2)\nprint(result)\n```\n\nThis script defines a `residual_block` function that processes a 1D input array through two weight layers with ReLU activations, and includes a shortcut connection that adds the original input to the output of the second layer before a final ReLU activation. The output is rounded to four decimal places and returned as a list."}
{"task_id": 114, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef global_avg_pool(x: np.ndarray):\n    \"\"\"\n    Perform Global Average Pooling on a 3D NumPy array.\n\n    Parameters:\n    x (np.ndarray): Input array of shape (height, width, channels).\n\n    Returns:\n    np.ndarray: Output array of shape (channels,), where each element is the average\n                of all values in the corresponding feature map.\n    \"\"\"\n    # Check if the input is a 3D array\n    if x.ndim != 3:\n        raise ValueError(\"Input must be a 3D array of shape (height, width, channels).\")\n    \n    # Compute the average along the height and width dimensions\n    avg_pooled = np.mean(x, axis=(0, 1))\n    \n    return avg_pooled\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Create a random 3D array to simulate feature maps\n    feature_maps = np.random.rand(10, 10, 3)  # Example shape: (10, 10, 3)\n    \n    # Perform Global Average Pooling\n    result = global_avg_pool(feature_maps)\n    \n    # Print the result\n    print(\"Global Average Pooled result:\", result)\n    print(\"Shape of result:\", result.shape)\n```"}
{"task_id": 115, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float = 1e-5):\n    # X: (batch, channels, height, width)\n    # gamma: (channels,)\n    # beta: (channels,)\n    \n    # Calculate the mean and variance across the batch and spatial dimensions for each channel\n    mean = np.mean(X, axis=(0, 2, 3), keepdims=True)  # Shape: (1, channels, 1, 1)\n    var = np.var(X, axis=(0, 2, 3), keepdims=True)    # Shape: (1, channels, 1, 1)\n    \n    # Normalize the input\n    X_normalized = (X - mean) / np.sqrt(var + epsilon)  # Shape: (batch, channels, height, width)\n    \n    # Apply scale and shift parameters\n    X_normalized = gamma.reshape(1, -1, 1, 1) * X_normalized + beta.reshape(1, -1, 1, 1)\n    \n    # Round to 4 decimal places and convert to list\n    return X_normalized.round(4).tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Example input\n    np.random.seed(0)\n    X = np.random.randn(2, 3, 4, 4)  # Batch size 2, 3 channels, 4x4 feature maps\n    gamma = np.random.randn(3)       # Scale parameters for each channel\n    beta = np.random.randn(3)        # Shift parameters for each channel\n    \n    # Perform batch normalization\n    result = batch_normalization(X, gamma, beta)\n    print(result)\n```"}
{"task_id": 116, "completion_id": 0, "completion": "```\npython\ndef poly_term_derivative(c: float, x: float, n: float) -> float:\n    \"\"\"\n    Computes the derivative of a polynomial term of the form c * x^n at a given point x.\n    \n    Parameters:\n    c (float): The coefficient of the polynomial term.\n    x (float): The point at which to evaluate the derivative.\n    n (float): The exponent of the polynomial term.\n    \n    Returns:\n    float: The value of the derivative rounded to 4 decimal places.\n    \"\"\"\n    # Derivative of c * x^n is c * n * x^(n-1)\n    derivative_value = c * n * (x ** (n - 1))\n    return round(derivative_value, 4)\n\n# Example usage:\n# The derivative of 3 * x^2 at x = 4\nprint(poly_term_derivative(3, 4, 2))  # Output should be 24.0\n```"}
{"task_id": 117, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef orthonormal_basis(vectors: list[list[float]], tol: float = 1e-10):\n    # Convert input list of vectors to a numpy array for easier manipulation\n    vectors = np.array(vectors, dtype=float)\n    # Initialize an empty list to store the orthonormal basis vectors\n    basis = []\n    \n    for v in vectors:\n        # Convert v to a numpy array\n        v = np.array(v, dtype=float)\n        # Subtract the projection of v onto each vector in the current basis\n        for u in basis:\n            u = np.array(u, dtype=float)\n            v = v - np.dot(v, u) * u\n        # Check if the resulting vector is linearly independent (its norm is greater than the tolerance)\n        if np.linalg.norm(v) > tol:\n            # Normalize the vector to make it a unit vector\n            u = v / np.linalg.norm(v)\n            # Round to 4 decimal places and convert to list before adding to the basis\n            basis.append(u.round(4).tolist())\n    \n    return basis\n\n# Example usage:\nvectors = [[1, 0], [1, 1], [2, 2]]\nprint(orthonormal_basis(vectors))\n```\n\nThis script defines a function `orthonormal_basis` that computes an orthonormal basis for a given set of 2D vectors using the Gram-Schmidt process. The function checks for linear independence using a specified tolerance and returns the basis vectors rounded to four decimal places."}
{"task_id": 118, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef cross_product(a, b):\n    # Calculate the cross product using numpy's cross function\n    result = np.cross(a, b)\n    # Round the result to 4 decimal places and convert to list\n    return np.round(result, 4).tolist()\n\n# Example usage:\n# a = [1, 2, 3]\n# b = [4, 5, 6]\n# print(cross_product(a, b))  # Output: [-3.0, 6.0, -3.0]\n```"}
{"task_id": 119, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef cramers_rule(A, b):\n    # Convert inputs to numpy arrays for easier manipulation\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    \n    # Calculate the determinant of matrix A\n    det_A = np.linalg.det(A)\n    \n    # If the determinant is zero, the system has no unique solution\n    if det_A == 0:\n        return -1\n    \n    # Number of variables\n    n = len(b)\n    \n    # Initialize the solution vector\n    x = np.zeros(n)\n    \n    # Calculate each variable using Cramer's rule\n    for i in range(n):\n        # Create a matrix A_i by replacing the i-th column of A with b\n        A_i = A.copy()\n        A_i[:, i] = b\n        \n        # Calculate the determinant of A_i\n        det_A_i = np.linalg.det(A_i)\n        \n        # Calculate the i-th variable\n        x[i] = det_A_i / det_A\n    \n    # Round the results to the nearest 4th decimal\n    x_rounded = np.round(x, 4)\n    \n    # Convert the numpy array to a list and return\n    return x_rounded.tolist()\n\n# Example usage:\n# A = [[2, 1, -1], [-3, -1, 2], [-2, 1, 2]]\n# b = [8, -11, -3]\n# print(cramers_rule(A, b))  # Output should be [2.0, -1.0, -2.0]\n```\n\nThis script defines a function `cramers_rule` that solves a system of linear equations using Cramer's Rule. It checks if the determinant of the coefficient matrix is zero to determine if there is a unique solution. If there is a unique solution, it calculates each variable by replacing the corresponding column of the coefficient matrix with the constant vector and computing the determinant of the resulting matrix. The results are rounded to the nearest 4th decimal and returned as a list."}
{"task_id": 120, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    # Check if the inputs have different lengths or are empty\n    if len(p) != len(q) or not p:\n        return 0.0\n    \n    # Convert lists to numpy arrays\n    p = np.array(p)\n    q = np.array(q)\n    \n    # Calculate the Bhattacharyya coefficient\n    bc = np.sum(np.sqrt(p * q))\n    \n    # Calculate the Bhattacharyya distance\n    bd = -np.log(bc)\n    \n    # Return the Bhattacharyya distance rounded to 4 decimal places\n    return round(bd, 4)\n\n# Example usage:\n# p = [0.1, 0.4, 0.5]\n# q = [0.2, 0.3, 0.5]\n# print(bhattacharyya_distance(p, q))  # Output: 0.2231\n```"}
{"task_id": 121, "completion_id": 0, "completion": "```\npython\ndef vector_sum(a: list[int|float], b: list[int|float]) -> list[int|float]:\n    # Check if the vectors have the same length\n    if len(a) != len(b):\n        return -1\n    \n    # Compute the element-wise sum of the vectors\n    result = [x + y for x, y in zip(a, b)]\n    \n    return result\n\n# Example usage:\nvector1 = [1, 2, 3]\nvector2 = [4, 5, 6]\nprint(vector_sum(vector1, vector2))  # Output: [5, 7, 9]\n\nvector3 = [1, 2]\nvector4 = [3, 4, 5]\nprint(vector_sum(vector3, vector4))  # Output: -1\n```"}
{"task_id": 122, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    num_states, num_actions = theta.shape\n    gradient = np.zeros_like(theta, dtype=float)\n    \n    for episode in episodes:\n        # Compute the return (G) for each time step\n        G = 0\n        returns = []\n        for t in reversed(range(len(episode))):\n            _, _, reward = episode[t]\n            G = reward + G  # Assuming gamma=1 for simplicity\n            returns.append(G)\n        returns.reverse()\n        \n        # Compute the gradient for this episode\n        for t, (state, action, _) in enumerate(episode):\n            # Compute softmax probabilities for the state\n            probs = np.exp(theta[state, :]) / np.sum(np.exp(theta[state, :]))\n            \n            # Compute the gradient of the log-policy for the action taken\n            grad_log_policy = np.zeros(num_actions)\n            grad_log_policy[action] = 1 / probs[action] - 1\n            \n            # Accumulate the gradient weighted by the return\n            gradient[state, :] += grad_log_policy * returns[t]\n    \n    # Average the gradient over the number of episodes\n    gradient /= len(episodes)\n    \n    # Round to the nearest 4th decimal and convert to list\n    gradient_rounded = np.round(gradient, 4).tolist()\n    \n    return gradient_rounded\n\n# Example usage:\n# theta = np.array([[1.0, 2.0], [3.0, 4.0]])\n# episodes = [ [(0, 0, 1.0), (1, 1, 2.0)], [(0, 1, 0.5), (1, 0, 1.5)] ]\n# print(compute_policy_gradient(theta, episodes))\n```\n\nThis script defines a function `compute_policy_gradient` that calculates the policy gradient using the REINFORCE algorithm. It takes a parameter matrix `theta` and a list of episodes, where each episode is a list of tuples containing the state, action, and reward. The function computes the gradient of the log-policy multiplied by the return for each time step, averages it over all episodes, rounds the result to four decimal places, and returns it as a nested list."}
{"task_id": 123, "completion_id": 0, "completion": "```\npython\ndef compute_efficiency(n_experts, k_active, d_in, d_out):\n    # Calculate FLOPs for the dense layer\n    flops_dense = n_experts * d_in * d_out\n    \n    # Calculate FLOPs for the MoE layer\n    flops_moe = k_active * d_in * d_out\n    \n    # Calculate the savings percentage\n    savings_percentage = ((flops_dense - flops_moe) / flops_dense) * 100\n    \n    # Round the results to the nearest 1st decimal\n    flops_dense_rounded = round(flops_dense, 1)\n    flops_moe_rounded = round(flops_moe, 1)\n    savings_percentage_rounded = round(savings_percentage, 1)\n    \n    return flops_dense_rounded, flops_moe_rounded, savings_percentage_rounded\n\n# Example usage:\nn_experts = 16\nk_active = 4\nd_in = 512\nd_out = 512\n\nflops_dense, flops_moe, savings_percentage = compute_efficiency(n_experts, k_active, d_in, d_out)\nprint(f\"FLOPs for Dense Layer: {flops_dense}\")\nprint(f\"FLOPs for MoE Layer: {flops_moe}\")\nprint(f\"Savings Percentage: {savings_percentage}%\")\n```\n\nThis script defines a function `compute_efficiency` that calculates the computational cost savings of a MoE layer compared to a dense layer. It takes the number of experts, the number of active experts, and the input/output dimensions as inputs, and returns the FLOPs for both layers and the savings percentage, all rounded to the nearest first decimal place."}
{"task_id": 124, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef noisy_topk_gating(\n    X: np.ndarray,\n    W_g: np.ndarray,\n    W_noise: np.ndarray,\n    N: np.ndarray,\n    k: int\n):\n    # Compute the logits for gating\n    logits = X @ W_g\n    \n    # Add noise to the logits\n    noisy_logits = logits + (X @ W_noise) * N\n    \n    # Apply softmax to get probabilities\n    exp_noisy_logits = np.exp(noisy_logits - np.max(noisy_logits, axis=1, keepdims=True))\n    probabilities = exp_noisy_logits / np.sum(exp_noisy_logits, axis=1, keepdims=True)\n    \n    # Get top-k probabilities\n    topk_indices = np.argsort(probabilities, axis=1)[:, -k:]\n    topk_mask = np.zeros_like(probabilities, dtype=bool)\n    np.put_along_axis(topk_mask, topk_indices[:, :, None], True, axis=1)\n    \n    # Set non-top-k probabilities to zero\n    topk_probabilities = np.where(topk_mask, probabilities, 0)\n    \n    # Normalize the top-k probabilities\n    topk_probabilities /= np.sum(topk_probabilities, axis=1, keepdims=True)\n    \n    # Round to the nearest 4th decimal\n    topk_probabilities_rounded = np.round(topk_probabilities, 4)\n    \n    # Convert to list\n    result = topk_probabilities_rounded.tolist()\n    \n    return result\n\n# Example usage:\n# X = np.random.rand(5, 10)  # Example input matrix\n# W_g = np.random.rand(10, 3)  # Example weight matrix for gating\n# W_noise = np.random.rand(10, 3)  # Example weight matrix for noise\n# N = np.random.rand(5, 3)  # Example pre-sampled noise\n# k = 2  # Example sparsity constraint\n# print(noisy_topk_gating(X, W_g, W_noise, N, k))\n```\n\nThis script defines the `noisy_topk_gating` function, which implements the Noisy Top-K Gating mechanism as described. The function takes an input matrix `X`, weight matrices `W_g` and `W_noise`, pre-sampled noise `N`, and a sparsity constraint `k`. It computes the gating probabilities, applies noise, selects the top-k probabilities, normalizes them, rounds them to four decimal places, and returns the result as a Python list."}
{"task_id": 125, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    # Number of tokens in the input\n    n_tokens = x.shape[0]\n    # Dimensionality of the input\n    input_dim = x.shape[1]\n    # Dimensionality of the output\n    output_dim = We.shape[2]\n    \n    # Compute the gating scores\n    gates = x @ Wg.T  # Shape: (n_tokens, n_experts)\n    \n    # Apply softmax to get gating probabilities\n    gating_probs = np.exp(gates) / np.sum(np.exp(gates), axis=1, keepdims=True)  # Shape: (n_tokens, n_experts)\n    \n    # Get the top-k gating probabilities and their indices\n    top_k_probs, top_k_indices = np.partition(-gating_probs, top_k-1, axis=1)[:, :top_k], np.argpartition(-gating_probs, top_k-1, axis=1)[:, :top_k]\n    top_k_probs = -top_k_probs  # Convert back to positive probabilities\n    \n    # Normalize the top-k gating probabilities\n    top_k_probs /= np.sum(top_k_probs, axis=1, keepdims=True)  # Shape: (n_tokens, top_k)\n    \n    # Initialize the output\n    moe_output = np.zeros((n_tokens, output_dim))\n    \n    # For each token, compute the contribution of the top-k experts\n    for i in range(n_tokens):\n        for j in range(top_k):\n            expert_idx = top_k_indices[i, j]\n            expert_weight = We[expert_idx]\n            gate_prob = top_k_probs[i, j]\n            moe_output[i] += gate_prob * (x[i] @ expert_weight.T)\n    \n    # Round the results to the nearest 4th decimal\n    moe_output = np.round(moe_output, 4)\n    \n    # Return the result as a python list\n    return moe_output.tolist()\n\n# Example usage:\n# x: input tensor of shape (n_tokens, input_dim)\n# We: expert weight matrices of shape (n_experts, input_dim, output_dim)\n# Wg: gating weight matrix of shape (n_experts, input_dim)\n# n_experts: number of experts\n# top_k: number of top experts to consider\n\nn_tokens = 5\ninput_dim = 10\noutput_dim = 20\nn_experts = 8\ntop_k = 3\n\nx = np.random.rand(n_tokens, input_dim)\nWe = np.random.rand(n_experts, input_dim, output_dim)\nWg = np.random.rand(n_experts, input_dim)\n\nresult = moe(x, We, Wg, n_experts, top_k)\nprint(result)\n```"}
{"task_id": 126, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float = 1e-5):\n    # Check if the number of channels is divisible by the number of groups\n    B, C, H, W = X.shape\n    assert C % num_groups == 0, \"Number of channels must be divisible by the number of groups\"\n    \n    # Reshape X to (B, num_groups, C // num_groups, H, W)\n    X_reshaped = X.reshape(B, num_groups, C // num_groups, H, W)\n    \n    # Compute mean and variance over the group, height, and width dimensions\n    mean = np.mean(X_reshaped, axis=(2, 3, 4), keepdims=True)\n    var = np.var(X_reshaped, axis=(2, 3, 4), keepdims=True)\n    \n    # Normalize\n    X_normalized = (X_reshaped - mean) / np.sqrt(var + epsilon)\n    \n    # Reshape X_normalized back to (B, C, H, W)\n    X_normalized = X_normalized.reshape(B, C, H, W)\n    \n    # Apply learned scale (gamma) and shift (beta)\n    X_normalized = gamma * X_normalized + beta\n    \n    # Round to the nearest 4th decimal and convert to list\n    result = np.round(X_normalized, 4).tolist()\n    \n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Example input tensor with shape (B, C, H, W)\n    X = np.random.randn(2, 8, 4, 4)\n    \n    # Learnable parameters gamma and beta with shape (C,)\n    gamma = np.random.randn(8)\n    beta = np.random.randn(8)\n    \n    # Number of groups\n    num_groups = 2\n    \n    # Perform group normalization\n    result = group_normalization(X, gamma, beta, num_groups)\n    \n    # Print the result\n    print(result)\n```"}
{"task_id": 127, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef find_treasure(start_x: float, learning_rate: float = 0.1, tolerance: float = 1e-6, max_iters: int = 10000) -> float:\n    # Define the function f(x)\n    def f(x):\n        return x**4 - 3*x**3 + 2\n    \n    # Define the derivative of the function f'(x)\n    def df(x):\n        return 4*x**3 - 9*x**2\n    \n    # Initialize the current position\n    x_current = start_x\n    \n    # Gradient descent loop\n    for _ in range(max_iters):\n        # Calculate the gradient at the current position\n        gradient = df(x_current)\n        \n        # Update the position\n        x_next = x_current - learning_rate * gradient\n        \n        # Check for convergence\n        if abs(x_next - x_current) < tolerance:\n            break\n        \n        # Move to the next position\n        x_current = x_next\n    \n    # Return the result rounded to the nearest 4th decimal\n    return round(x_current, 4)\n\n# Example usage:\n# start_x = np.random.rand() * 10  # Random initial position between 0 and 10\n# print(find_treasure(start_x))\n```\n\nThis script defines a function `find_treasure` that uses gradient descent to find the minimum of the function \\( f(x) = x^4 - 3x^3 + 2 \\). The function takes an initial position `start_x`, a `learning_rate`, a `tolerance` for convergence, and a maximum number of iterations `max_iters`. It returns the value of \\( x \\) where \\( f(x) \\) reaches its minimum, rounded to the nearest 4th decimal."}
{"task_id": 128, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    # Apply the Dynamic Tanh formula\n    tanh_output = np.tanh(alpha * x + beta)\n    dyt_output = gamma * tanh_output\n    \n    # Round the results to the nearest 4th decimal\n    rounded_output = np.round(dyt_output, 4)\n    \n    # Convert to list\n    result_list = rounded_output.tolist()\n    \n    return result_list\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Sample input\n    x = np.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])\n    alpha = 0.5\n    gamma = 1.2\n    beta = -0.1\n    \n    # Get the Dynamic Tanh output\n    output = dynamic_tanh(x, alpha, gamma, beta)\n    print(output)\n```\n\nThis script defines the `dynamic_tanh` function as specified, applying the Dynamic Tanh transformation to the input array `x` with parameters `alpha`, `gamma`, and `beta`. The output is rounded to the nearest 4th decimal and returned as a Python list. The example usage demonstrates how to call the function with sample input values."}
