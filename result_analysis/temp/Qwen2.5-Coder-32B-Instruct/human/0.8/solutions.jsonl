{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    if not a or not b or len(a[0]) != len(b):\n        return -1\n    result = []\n    for row in a:\n        dot_product = sum((element * b[i] for (i, element) in enumerate(row)))\n        result.append(dot_product)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    if not a or not a[0]:\n        return []\n    transposed = [[a[j][i] for j in range(len(a))] for i in range(len(a[0]))]\n    return transposed"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    original_array = np.array(a)\n    if original_array.size != np.prod(new_shape):\n        return []\n    reshaped_array = original_array.reshape(new_shape)\n    return reshaped_array.tolist()"}
{"task_id": 4, "completion_id": 0, "solution": "def calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    if not matrix or not matrix[0]:\n        return []\n    if mode == 'row':\n        means = [sum(row) / len(row) for row in matrix]\n    elif mode == 'column':\n        num_columns = len(matrix[0])\n        means = [sum((matrix[row][col] for row in range(len(matrix)))) / len(matrix) for col in range(num_columns)]\n    else:\n        raise ValueError(\"Mode must be 'row' or 'column'\")\n    return means\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    \"\"\"\n    Multiplies a matrix by a scalar and returns the resulting matrix.\n\n    :param matrix: A 2D list of integers or floats representing the matrix.\n    :param scalar: An integer or float by which the matrix is to be multiplied.\n    :return: A 2D list of integers or floats representing the resulting matrix after scalar multiplication.\n    \"\"\"\n    return [[element * scalar for element in row] for row in matrix]"}
{"task_id": 6, "completion_id": 0, "solution": "def calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    D = a * d - b * c\n    T = a + d\n    import math\n    eigenvalue1 = (T + math.sqrt(T ** 2 - 4 * D)) / 2\n    eigenvalue2 = (T - math.sqrt(T ** 2 - 4 * D)) / 2\n    return sorted([eigenvalue1, eigenvalue2], reverse=True)\nmatrix = [[2, -1], [1, 3]]"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    A_np = np.array(A, dtype=float)\n    T_np = np.array(T, dtype=float)\n    S_np = np.array(S, dtype=float)\n    if T_np.shape[0] != T_np.shape[1] or S_np.shape[0] != S_np.shape[1]:\n        return -1\n    if np.linalg.det(T_np) == 0 or np.linalg.det(S_np) == 0:\n        return -1\n    T_inv = np.linalg.inv(T_np)\n    S_inv = np.linalg.inv(S_np)\n    transformed_matrix = T_inv @ A_np @ S_np\n    transformed_matrix_rounded = np.round(transformed_matrix, 4)\n    return transformed_matrix_rounded.tolist()"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    det = a * d - b * c\n    if det == 0:\n        return None\n    inverse = [[d / det, -b / det], [-c / det, a / det]]\n    return inverse\nmatrix = [[4, 7], [2, 6]]"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    (rows_a, cols_a) = (len(a), len(a[0]))\n    (rows_b, cols_b) = (len(b), len(b[0]))\n    if cols_a != rows_b:\n        return -1\n    result = [[0 for _ in range(cols_b)] for _ in range(rows_a)]\n    for i in range(rows_a):\n        for j in range(cols_b):\n            for k in range(cols_a):\n                result[i][j] += a[i][k] * b[k][j]\n    return result"}
{"task_id": 10, "completion_id": 0, "solution": "def calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    import numpy as np\n    data = np.array(vectors)\n    means = np.mean(data, axis=1, keepdims=True)\n    centered_data = data - means\n    num_observations = data.shape[1]\n    covariance_matrix = centered_data @ centered_data.T / (num_observations - 1)\n    return covariance_matrix.tolist()"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    if A.shape[0] != A.shape[1]:\n        raise ValueError('Matrix A must be a square matrix.')\n    if A.shape[0] != b.shape[0]:\n        raise ValueError('The number of rows in A must match the number of elements in b.')\n    size = A.shape[0]\n    x = np.zeros(size, dtype=float)\n    for _ in range(n):\n        x_new = np.zeros(size, dtype=float)\n        for i in range(size):\n            s = sum((A[i][j] * x[j] for j in range(size) if i != j))\n            x_new[i] = (b[i] - s) / A[i][i]\n        x_new = np.round(x_new, 4)\n        x = x_new\n    return x.tolist()"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    v = np.array([1.0, 0.0])\n    v = v / np.linalg.norm(v)\n    tol = 1e-10\n    max_iterations = 1000\n    iteration = 0\n    while iteration < max_iterations:\n        Av = A @ v\n        AT = A.T\n        ATAv = AT @ Av\n        v_new = ATAv / np.linalg.norm(AtAv)\n        if np.linalg.norm(v_new - v) < tol:\n            break\n        v = v_new\n        iteration += 1\n    sigma1 = np.linalg.norm(Av)\n    det_A = np.linalg.det(A)\n    sigma2 = np.abs(det_A / sigma1)\n    return (round(sigma1, 4), round(sigma2, 4))\nA = np.array([[1.0, 2.0], [3.0, 4.0]])"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n\n    def determinant_3x3(mat: list[list[int | float]]) -> float:\n        (a, b, c) = mat[0]\n        (d, e, f) = mat[1]\n        (g, h, i) = mat[2]\n        return a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g)\n    if len(matrix) != 4 or any((len(row) != 4 for row in matrix)):\n        raise ValueError('Input must be a 4x4 matrix.')\n    det = 0\n    for c in range(4):\n        minor = [row[:c] + row[c + 1:] for row in matrix[1:]]\n        det += (-1) ** c * matrix[0][c] * determinant_3x3(minor)\n    return det\nmatrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    X_np = np.array(X)\n    y_np = np.array(y)\n    X_b = np.c_[np.ones((X_np.shape[0], 1)), X_np]\n    theta = np.linalg.inv(X_b.T.dot(X_b)).dot(X_b.T).dot(y_np)\n    theta_rounded = np.round(theta, 4)\n    return theta_rounded.tolist()"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> list:\n    (m, n) = X.shape\n    theta = np.zeros(n)\n    for _ in range(iterations):\n        predictions = X.dot(theta)\n        errors = predictions - y\n        gradient = 1 / m * X.T.dot(errors)\n        theta -= alpha * gradient\n    theta_rounded = np.round(theta, 4)\n    return theta_rounded.tolist()"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0)\n    standardized_data = (data - mean) / std\n    standardized_data = np.round(standardized_data, 4).tolist()\n    min_val = np.min(data, axis=0)\n    max_val = np.max(data, axis=0)\n    min_max_data = (data - min_val) / (max_val - min_val)\n    min_max_data = np.round(min_max_data, 4).tolist()\n    return (standardized_data, min_max_data)"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n    points = np.array(points)\n    centroids = np.array(initial_centroids)\n    for _ in range(max_iterations):\n        distances = np.linalg.norm(points[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([points[labels == i].mean(axis=0) for i in range(k)])\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n    final_centroids = np.round(centroids, 4)\n    return [tuple(centroid) for centroid in final_centroids]\npoints = [(1.0, 2.0), (1.5, 1.8), (5.0, 8.0), (8.0, 8.0), (1.0, 0.6), (9.0, 11.0)]\nk = 2\ninitial_centroids = [(1.0, 2.0), (5.0, 8.0)]\nmax_iterations = 100\nfinal_centroids = k_means_clustering(points, k, initial_centroids, max_iterations)"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    \"\"\"\n    Generate train and test splits for K-Fold Cross-Validation.\n\n    Parameters:\n    - X: np.ndarray, the feature dataset.\n    - y: np.ndarray, the target dataset.\n    - k: int, the number of folds.\n    - shuffle: bool, whether to shuffle the data before splitting.\n    - random_seed: int, optional, random seed for shuffling.\n\n    Returns:\n    - A list of tuples, where each tuple contains the train and test indices for a fold.\n    \"\"\"\n    if random_seed is not None:\n        np.random.seed(random_seed)\n    n_samples = X.shape[0]\n    if n_samples < k:\n        raise ValueError('Number of samples must be at least equal to the number of folds (k).')\n    indices = np.arange(n_samples)\n    if shuffle:\n        np.random.shuffle(indices)\n    fold_size = n_samples // k\n    folds = []\n    for i in range(k):\n        start = i * fold_size\n        end = (i + 1) * fold_size if i != k - 1 else n_samples\n        test_indices = indices[start:end]\n        train_indices = np.concatenate((indices[:start], indices[end:]))\n        folds.append((train_indices, test_indices))\n    return folds"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    mean = np.mean(data, axis=0)\n    std_dev = np.std(data, axis=0)\n    standardized_data = (data - mean) / std_dev\n    covariance_matrix = np.cov(standardized_data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(covariance_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    principal_components = sorted_eigenvectors[:, :k]\n    principal_components = np.round(principal_components, 4)\n    return principal_components.tolist()"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n\n    def entropy(class_counts: dict) -> float:\n        total = sum(class_counts.values())\n        return -sum((count / total * math.log2(count / total) for count in class_counts.values() if count > 0))\n\n    def information_gain(examples: list[dict], attr: str) -> float:\n        class_counts = Counter((example[target_attr] for example in examples))\n        total_entropy = entropy(class_counts)\n        attr_values = set((example[attr] for example in examples))\n        attr_entropy = 0.0\n        for value in attr_values:\n            subset = [example for example in examples if example[attr] == value]\n            subset_entropy = entropy(Counter((example[target_attr] for example in subset)))\n            attr_entropy += len(subset) / len(examples) * subset_entropy\n        return total_entropy - attr_entropy\n\n    def majority_value(examples: list[dict]) -> str:\n        return Counter((example[target_attr] for example in examples)).most_common(1)[0][0]\n\n    def decision_tree_learning(examples: list[dict], attributes: list[str], default: str) -> dict:\n        if not examples:\n            return default\n        elif all((example[target_attr] == examples[0][target_attr] for example in examples)):\n            return examples[0][target_attr]\n        elif not attributes:\n            return majority_value(examples)\n        else:\n            best_attr = max(attributes, key=lambda attr: information_gain(examples, attr))\n            tree = {best_attr: {}}\n            for value in set((example[best_attr] for example in examples)):\n                subset = [example for example in examples if example[best_attr] == value]\n                subtree = decision_tree_learning(subset, [a for a in attributes if a != best_attr], majority_value(examples))\n                tree[best_attr][value] = subtree\n            return tree\n    return decision_tree_learning(examples, attributes, majority_value(examples))\nexamples = [{'outlook': 'sunny', 'temperature': 'hot', 'humidity': 'high', 'wind': 'weak', 'play': 'no'}, {'outlook': 'sunny', 'temperature': 'hot', 'humidity': 'high', 'wind': 'strong', 'play': 'no'}, {'outlook': 'overcast', 'temperature': 'hot', 'humidity': 'high', 'wind': 'weak', 'play': 'yes'}, {'outlook': 'rain', 'temperature': 'mild', 'humidity': 'high', 'wind': 'weak', 'play': 'yes'}, {'outlook': 'rain', 'temperature': 'cool', 'humidity': 'normal', 'wind': 'weak', 'play': 'yes'}, {'outlook': 'rain', 'temperature': 'cool', 'humidity': 'normal', 'wind': 'strong', 'play': 'no'}, {'outlook': 'overcast', 'temperature': 'cool', 'humidity': 'normal', 'wind': 'strong', 'play': 'yes'}, {'outlook': 'sunny', 'temperature': 'mild', 'humidity': 'high', 'wind': 'weak', 'play': 'no'}, {'outlook': 'sunny', 'temperature': 'cool', 'humidity': 'normal', 'wind': 'weak', 'play': 'yes'}, {'outlook': 'rain', 'temperature': 'mild', 'humidity': 'normal', 'wind': 'weak', 'play': 'yes'}, {'outlook': 'sunny', 'temperature': 'mild', 'humidity': 'normal', 'wind': 'strong', 'play': 'yes'}, {'outlook': 'overcast', 'temperature': 'mild', 'humidity': 'high', 'wind': 'strong', 'play': 'yes'}, {'outlook': 'overcast', 'temperature': 'hot', 'humidity': 'normal', 'wind': 'weak', 'play': 'yes'}, {'outlook': 'rain', 'temperature': 'mild', 'humidity': 'high', 'wind': 'strong', 'play': 'no'}]\nattributes = ['outlook', 'temperature', 'humidity', 'wind']\ntarget_attr = 'play'\ntree = learn_decision_tree(examples, attributes, target_attr)"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    labels = np.where(labels == 0, -1, labels)\n    (n_samples, n_features) = data.shape\n    alphas = np.zeros(n_samples)\n    bias = 0.0\n\n    def linear_kernel(x1, x2):\n        return np.dot(x1, x2)\n\n    def rbf_kernel(x1, x2, sigma):\n        return np.exp(-np.linalg.norm(x1 - x2) ** 2 / (2 * sigma ** 2))\n    kernel_func = linear_kernel if kernel == 'linear' else lambda x1, x2: rbf_kernel(x1, x2, sigma)\n    for t in range(1, iterations + 1):\n        learning_rate = 1 / (lambda_val * t)\n        gradient = np.zeros(n_samples)\n        for i in range(n_samples):\n            prediction = 0\n            for j in range(n_samples):\n                prediction += alphas[j] * labels[j] * kernel_func(data[i], data[j])\n            prediction += bias\n            gradient[i] = -labels[i] * prediction\n        for i in range(n_samples):\n            if gradient[i] < 1:\n                alphas[i] = min(1 / (lambda_val * n_samples) * (alphas[i] - learning_rate * gradient[i]), 1 / (lambda_val * n_samples))\n            else:\n                alphas[i] = 0\n        bias -= learning_rate * np.sum(gradient)\n    alphas = np.round(alphas, 4)\n    bias = np.round(bias, 4)\n    return (alphas.tolist(), bias.tolist())"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    \"\"\"Compute the sigmoid activation function for a given input z.\"\"\"\n    result = 1 / (1 + math.exp(-z))\n    return round(result, 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    max_score = max(scores)\n    exp_scores = [math.exp(score - max_score) for score in scores]\n    sum_exp_scores = sum(exp_scores)\n    softmax_values = [exp_score / sum_exp_scores for exp_score in exp_scores]\n    softmax_values_rounded = [round(value, 4) for value in softmax_values]\n    return softmax_values_rounded\nscores = [2.0, 1.0, 0.1]"}
{"task_id": 24, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef sigmoid(x: float) -> float:\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + math.exp(-x))\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    \"\"\"\n    Simulates a single neuron with a sigmoid activation function for binary classification.\n    \n    Parameters:\n    - features: List of feature vectors, where each vector represents multiple features for an example.\n    - labels: List of true binary labels.\n    - weights: List of weights (one for each feature).\n    - bias: Bias term for the neuron.\n    \n    Returns:\n    - Predicted probabilities after sigmoid activation, rounded to four decimal places.\n    - Mean squared error between the predicted probabilities and the true labels, rounded to four decimal places.\n    \"\"\"\n    predictions = []\n    total_error = 0.0\n    for (feature_vector, label) in zip(features, labels):\n        weighted_sum = sum((w * x for (w, x) in zip(weights, feature_vector))) + bias\n        prediction = sigmoid(weighted_sum)\n        predictions.append(prediction)\n        error = (prediction - label) ** 2\n        total_error += error\n    mean_squared_error = total_error / len(labels)\n    predictions_rounded = [round(p, 4) for p in predictions]\n    mean_squared_error_rounded = round(mean_squared_error, 4)\n    return (predictions_rounded, mean_squared_error_rounded)\nfeatures = [[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]]\nlabels = [0, 1, 0]\nweights = [0.5, 0.5]\nbias = -0.1"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\ndef sigmoid_derivative(x):\n    return x * (1 - x)\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    weights = initial_weights\n    bias = initial_bias\n    mse_values = []\n    for epoch in range(epochs):\n        weighted_sum = np.dot(features, weights) + bias\n        predictions = sigmoid(weighted_sum)\n        mse_loss = np.mean((predictions - labels) ** 2)\n        mse_values.append(round(mse_loss, 4))\n        error = predictions - labels\n        d_loss_d_pred = 2 * (predictions - labels) / len(labels)\n        d_pred_d_z = sigmoid_derivative(predictions)\n        d_z_d_w = features\n        d_z_d_b = 1\n        d_loss_d_w = np.dot(d_z_d_w.T, d_loss_d_pred * d_pred_d_z)\n        d_loss_d_b = np.sum(d_loss_d_pred * d_pred_d_z * d_z_d_b)\n        weights -= learning_rate * d_loss_d_w\n        bias -= learning_rate * d_loss_d_b\n    return (weights.round(4).tolist(), round(bias, 4), mse_values)"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data + other.data, (self, other), '+')\n\n        def _backward():\n            self.grad += out.grad\n            other.grad += out.grad\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data * other.data, (self, other), '*')\n\n        def _backward():\n            self.grad += other.data * out.grad\n            other.grad += self.data * out.grad\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')\n\n        def _backward():\n            self.grad += (out.data > 0) * out.grad\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1\n        for node in reversed(topo):\n            node._backward()\n\n    def __repr__(self):\n        return f'Value(data={self.data}, grad={self.grad})'"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    B_matrix = np.array(B)\n    C_matrix = np.array(C)\n    B_inv = np.linalg.inv(B_matrix)\n    P = C_matrix @ B_inv\n    P_rounded = np.round(P, 4)\n    P_list = P_rounded.tolist()\n    return P_list\nB = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\nC = [[1, 1, 1], [1, 2, 3], [1, 3, 6]]"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    ATA = np.dot(A.T, A)\n    (eigenvalues, eigenvectors) = np.linalg.eig(ATA)\n    sort_indices = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[sort_indices]\n    eigenvectors = eigenvectors[:, sort_indices]\n    singular_values = np.sqrt(eigenvalues)\n    S = np.diag(singular_values)\n    V = eigenvectors\n    U = np.zeros((2, 2))\n    for i in range(2):\n        if singular_values[i] != 0:\n            u_i = np.dot(A, V[:, i]) / singular_values[i]\n            U[:, i] = u_i\n        else:\n            U[:, i] = np.zeros(2)\n    U = np.round(U, 4)\n    S = np.round(S, 4)\n    V = np.round(V, 4)\n    U_list = U.tolist()\n    S_list = S.tolist()\n    V_list = V.tolist()\n    return (U_list, S_list, V_list)\nA = np.array([[1, 2], [3, 4]])"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    \"\"\"\n    Shuffles the samples in two numpy arrays, X and y, while maintaining the corresponding order between them.\n    \n    Parameters:\n    - X: numpy array of features.\n    - y: numpy array of labels.\n    - seed: optional integer for setting the random seed for reproducibility.\n    \n    Returns:\n    - A tuple of two lists, shuffled X and y.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    n_samples = X.shape[0]\n    indices = np.random.permutation(n_samples)\n    shuffled_X = X[indices]\n    shuffled_y = y[indices]\n    shuffled_X_list = shuffled_X.tolist()\n    shuffled_y_list = shuffled_y.tolist()\n    return (shuffled_X_list, shuffled_y_list)"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    \"\"\"\n    Yields batches of specified size from the dataset X and optionally y.\n    \n    Parameters:\n    - X: numpy array, the input data.\n    - y: numpy array, optional, the target data.\n    - batch_size: int, the size of each batch.\n    \n    Yields:\n    - If y is provided, yields tuples of (X_batch, y_batch) as lists.\n    - If y is not provided, yields X_batch as a list.\n    \"\"\"\n    num_samples = X.shape[0]\n    indices = np.arange(num_samples)\n    np.random.shuffle(indices)\n    for start_idx in range(0, num_samples, batch_size):\n        end_idx = min(start_idx + batch_size, num_samples)\n        batch_indices = indices[start_idx:end_idx]\n        if y is not None:\n            yield (X[batch_indices].tolist(), y[batch_indices].tolist())\n        else:\n            yield X[batch_indices].tolist()"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    \"\"\"\n    Divide the dataset X into two subsets based on the feature at index feature_i\n    and the given threshold.\n    \n    Parameters:\n    - X: numpy array, the dataset to be divided.\n    - feature_i: int, the index of the feature to use for division.\n    - threshold: float, the threshold value to compare the feature against.\n    \n    Returns:\n    - X1: list, samples where the feature value is greater than or equal to the threshold.\n    - X2: list, samples where the feature value is less than the threshold.\n    \"\"\"\n    X = np.array(X)\n    indices_above = X[:, feature_i] >= threshold\n    indices_below = X[:, feature_i] < threshold\n    X1 = X[indices_above]\n    X2 = X[indices_below]\n    X1 = X1.tolist()\n    X2 = X2.tolist()\n    return (X1, X2)"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    (n_samples, n_features) = X.shape\n    comb = combinations_with_replacement(range(n_features), degree)\n    poly_features = []\n    for indices in comb:\n        feature = np.prod(X[:, indices], axis=1)\n        poly_features.append(feature)\n    poly_features = np.column_stack(poly_features)\n    poly_features = np.hstack((np.ones((n_samples, 1)), poly_features))\n    return poly_features.tolist()"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    \"\"\"\n    Generate random subsets of a given dataset.\n\n    Parameters:\n    X (np.ndarray): 2D numpy array of features.\n    y (np.ndarray): 1D numpy array of target values.\n    n_subsets (int): Number of random subsets to generate.\n    replacements (bool): Whether to sample with replacements.\n    seed (int): Random seed for reproducibility.\n\n    Returns:\n    list: List of n_subsets random subsets, each a tuple of (X_subset, y_subset).\n    \"\"\"\n    np.random.seed(seed)\n    subsets = []\n    n_samples = X.shape[0]\n    for _ in range(n_subsets):\n        indices = np.random.choice(n_samples, n_samples, replace=replacements)\n        X_subset = X[indices]\n        y_subset = y[indices]\n        subsets.append((X_subset.tolist(), y_subset.tolist()))\n    return subsets"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    if n_col is None:\n        n_col = np.max(x) + 1\n    one_hot_encoded = np.zeros((x.size, n_col), dtype=int)\n    one_hot_encoded[np.arange(x.size), x] = 1\n    return one_hot_encoded.tolist()"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    diagonal_matrix = np.diag(x)\n    return diagonal_matrix.tolist()"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    \"\"\"\n    Calculate the accuracy score of a model's predictions.\n\n    Parameters:\n    y_true (numpy.ndarray): 1D array containing the true labels.\n    y_pred (numpy.ndarray): 1D array containing the predicted labels.\n\n    Returns:\n    float: Accuracy score rounded to the nearest 4th decimal.\n    \"\"\"\n    if y_true.shape != y_pred.shape:\n        raise ValueError('y_true and y_pred must have the same shape.')\n    correct_predictions = np.sum(y_true == y_pred)\n    total_predictions = y_true.shape[0]\n    accuracy = correct_predictions / total_predictions\n    return round(accuracy, 4)"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    if Y is None:\n        Y = X\n    correlation_matrix = np.corrcoef(X, Y, rowvar=False)\n    correlation_matrix_rounded = np.round(correlation_matrix, 4)\n    correlation_matrix_list = correlation_matrix_rounded.tolist()\n    return correlation_matrix_list"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_fit(X, y, n_clf):\n    (n_samples, n_features) = X.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    classifiers = []\n    for _ in range(n_clf):\n        best_clf_error = float('inf')\n        best_feature = None\n        best_threshold = None\n        best_polarity = None\n        for feature_i in range(n_features):\n            feature_values = X[:, feature_i]\n            thresholds = np.unique(feature_values)\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(n_samples)\n                    predictions[feature_values * polarity < threshold * polarity] = -1\n                    weighted_error = np.sum(sample_weights[predictions != y])\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        polarity = -polarity\n                    if weighted_error < best_clf_error:\n                        best_clf_error = weighted_error\n                        best_feature = feature_i\n                        best_threshold = threshold\n                        best_polarity = polarity\n        clf_accuracy = 1 - best_clf_error\n        clf_weight = 0.5 * math.log((1 - best_clf_error) / (best_clf_error + 1e-10))\n        predictions = np.ones(n_samples)\n        feature_values = X[:, best_feature]\n        predictions[feature_values * best_polarity < best_threshold * best_polarity] = -1\n        sample_weights *= np.exp(-clf_weight * y * predictions)\n        sample_weights /= np.sum(sample_weights)\n        classifiers.append({'feature': best_feature, 'threshold': best_threshold, 'polarity': best_polarity, 'weight': round(clf_weight, 4)})\n    return classifiers"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list):\n    scores = np.array(scores)\n    max_score = np.max(scores)\n    stable_scores = scores - max_score\n    softmax = np.exp(stable_scores) / np.sum(np.exp(stable_scores))\n    log_softmax_values = np.log(softmax)\n    log_softmax_rounded = np.round(log_softmax_values, 4)\n    return log_softmax_rounded.tolist()"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport copy\nimport math\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Optimizer:\n\n    def update_params(self, params):\n        raise NotImplementedError()\nclass SgdOptimizer(Optimizer):\n\n    def __init__(self, learning_rate=0.01):\n        self.learning_rate = learning_rate\n\n    def update_params(self, params):\n        for (param, grad) in params:\n            param -= self.learning_rate * grad\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.W_opt = SgdOptimizer()\n        self.w0_opt = SgdOptimizer()\n\n    def initialize(self, optimizer=None):\n        limit = 1 / math.sqrt(self.input_shape[0])\n        self.W = np.random.uniform(-limit, limit, (self.input_shape[0], self.n_units))\n        self.w0 = np.zeros((1, self.n_units))\n        if optimizer is not None:\n            self.W_opt = copy.deepcopy(optimizer)\n            self.w0_opt = copy.deepcopy(optimizer)\n\n    def parameters(self):\n        return np.prod(self.W.shape) + np.prod(self.w0.shape)\n\n    def forward_pass(self, X, training=True):\n        self.layer_input = X\n        return np.dot(X, self.W) + self.w0\n\n    def backward_pass(self, accum_grad):\n        W = self.W\n        if self.trainable:\n            grad_w = np.dot(self.layer_input.T, accum_grad)\n            grad_w0 = np.sum(accum_grad, axis=0, keepdims=True)\n            self.W = self.W_opt.update_params([(self.W, grad_w)])[0]\n            self.w0 = self.w0_opt.update_params([(self.w0, grad_w0)])[0]\n        grad_input = np.dot(accum_grad, W.T)\n        return grad_input\n\n    def output_shape(self):\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    (in_height, in_width) = input_matrix.shape\n    (kernel_height, kernel_width) = kernel.shape\n    padded_input = np.pad(input_matrix, ((padding, padding), (padding, padding)), mode='constant')\n    out_height = (in_height - kernel_height + 2 * padding) // stride + 1\n    out_width = (in_width - kernel_width + 2 * padding) // stride + 1\n    output_matrix = np.zeros((out_height, out_width))\n    for i in range(out_height):\n        for j in range(out_width):\n            region = padded_input[i * stride:i * stride + kernel_height, j * stride:j * stride + kernel_width]\n            output_matrix[i, j] = np.sum(region * kernel)\n    return np.round(output_matrix, 4).tolist()"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    return z if z > 0 else 0"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    y_pred = X @ w\n    mse = np.mean((y_true - y_pred) ** 2)\n    regularization = alpha * np.sum(w ** 2)\n    ridge_loss_value = mse + regularization\n    return round(ridge_loss_value, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float:\n    \"\"\"\n    Implements the Leaky Rectified Linear Unit (Leaky ReLU) activation function.\n\n    Parameters:\n    z (float): The input value to the activation function.\n    alpha (float): The slope for negative inputs, default is 0.01.\n\n    Returns:\n    float: The output after applying the Leaky ReLU function.\n    \"\"\"\n    return z if z >= 0 else alpha * z"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    \"\"\"\n    Computes the linear kernel between two input vectors x1 and x2.\n    \n    Parameters:\n    x1 (np.array): The first input vector.\n    x2 (np.array): The second input vector.\n    \n    Returns:\n    float: The linear kernel value, which is the dot product of x1 and x2.\n    \"\"\"\n    return np.dot(x1, x2)\nx1 = np.array([1, 2, 3])\nx2 = np.array([4, 5, 6])"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    true_positives = np.sum((y_true == 1) & (y_pred == 1))\n    false_positives = np.sum((y_true == 0) & (y_pred == 1))\n    if true_positives + false_positives == 0:\n        return 0.0\n    precision_score = true_positives / (true_positives + false_positives)\n    return precision_score\ny_true = [1, 0, 1, 1, 0, 1]\ny_pred = [1, 0, 0, 1, 0, 1]"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    X = np.array(X)\n    y = np.array(y)\n    weights = np.array(weights, dtype=float)\n\n    def compute_mse(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n\n    def compute_gradient(X, y_true, y_pred):\n        return 2 / X.shape[0] * X.T.dot(y_pred - y_true)\n    n_samples = X.shape[0]\n    for _ in range(n_iterations):\n        if method == 'batch':\n            X_batch = X\n            y_batch = y\n        elif method == 'stochastic':\n            index = np.random.randint(n_samples)\n            X_batch = X[index:index + 1]\n            y_batch = y[index:index + 1]\n        elif method == 'mini-batch':\n            indices = np.random.choice(n_samples, batch_size, replace=False)\n            X_batch = X[indices]\n            y_batch = y[indices]\n        else:\n            raise ValueError(\"Method should be 'batch', 'stochastic', or 'mini-batch'\")\n        y_pred = X_batch.dot(weights)\n        gradient = compute_gradient(X_batch, y_batch, y_pred)\n        weights -= learning_rate * gradient\n    return weights.round(4).tolist()"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    A = np.array(matrix, dtype=float)\n    (rows, cols) = A.shape\n    r = 0\n    for col in range(cols):\n        if r >= rows:\n            break\n        pivot_row = r\n        while pivot_row < rows and A[pivot_row, col] == 0:\n            pivot_row += 1\n        if pivot_row < rows:\n            A[[r, pivot_row]] = A[[pivot_row, r]]\n            pivot = A[r, col]\n            A[r] = A[r] / pivot\n            for i in range(rows):\n                if i != r:\n                    factor = A[i, col]\n                    A[i] = A[i] - factor * A[r]\n            r += 1\n    return A.tolist()\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 10]]"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=1000):\n    x = np.array(x0, dtype=float)\n    m = np.zeros_like(x)\n    v = np.zeros_like(x)\n    t = 0\n    for t in range(1, num_iterations + 1):\n        g = np.array(grad(x), dtype=float)\n        m = beta1 * m + (1 - beta1) * g\n        v = beta2 * v + (1 - beta2) * g ** 2\n        m_hat = m / (1 - beta1 ** t)\n        v_hat = v / (1 - beta2 ** t)\n        x -= learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    return x.round(4).tolist()\ndef grad(x):\n    return [2 * x[0], 2 * x[1]]\nx0 = [1.0, 1.0]"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    (n, p) = X.shape\n    weights = np.zeros(p)\n    bias = 0.0\n    prev_loss = float('inf')\n    for iteration in range(max_iter):\n        predictions = np.dot(X, weights) + bias\n        error = predictions - y\n        grad_weights = 1 / n * np.dot(X.T, error)\n        grad_bias = 1 / n * np.sum(error)\n        for j in range(p):\n            if weights[j] > 0:\n                grad_weights[j] += alpha\n            elif weights[j] < 0:\n                grad_weights[j] -= alpha\n        weights -= learning_rate * grad_weights\n        bias -= learning_rate * grad_bias\n        loss = 1 / (2 * n) * np.sum(error ** 2) + alpha * np.sum(np.abs(weights))\n        if abs(prev_loss - loss) < tol:\n            break\n        prev_loss = loss\n    return (np.round(weights, 4).tolist(), np.round(bias, 4).tolist())"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    len_source = len(source)\n    len_target = len(target)\n    dp = np.zeros((len_source + 1, len_target + 1), dtype=int)\n    for i in range(1, len_source + 1):\n        dp[i, 0] = i\n    for j in range(1, len_target + 1):\n        dp[0, j] = j\n    for i in range(1, len_source + 1):\n        for j in range(1, len_target + 1):\n            cost = 1 if source[i - 1] != target[j - 1] else 0\n            dp[i, j] = min(dp[i - 1, j] + 1, dp[i, j - 1] + 1, dp[i - 1, j - 1] + cost)\n            if i > 1 and j > 1 and (source[i - 1] == target[j - 2]) and (source[i - 2] == target[j - 1]):\n                dp[i, j] = min(dp[i, j], dp[i - 2, j - 2] + 1)\n    return dp[len_source, len_target]"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    TP = np.sum((y_true == 1) & (y_pred == 1))\n    FN = np.sum((y_true == 1) & (y_pred == 0))\n    if TP + FN == 0:\n        return 0.0\n    else:\n        recall_value = TP / (TP + FN)\n    return round(recall_value, 3)"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    d_k = K.shape[-1]\n    scores = np.dot(Q, K.T) / np.sqrt(d_k)\n    attention_weights = np.softmax(scores, axis=-1)\n    output = np.dot(attention_weights, V)\n    output_rounded = np.round(output, 4)\n    return output_rounded.tolist()\nX = np.array([[1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0], [9.0, 10.0, 11.0, 12.0]])\nW_q = np.random.rand(4, 4)\nW_k = np.random.rand(4, 4)\nW_v = np.random.rand(4, 4)\noutput = self_attention(X, W_q, W_k, W_v)"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    input_sequence = np.array(input_sequence)\n    initial_hidden_state = np.array(initial_hidden_state)\n    Wx = np.array(Wx)\n    Wh = np.array(Wh)\n    b = np.array(b)\n    h = initial_hidden_state\n    for x in input_sequence:\n        h = np.tanh(np.dot(Wx, x) + np.dot(Wh, h) + b)\n    return h.round(4).tolist()"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    translation_matrix = np.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])\n    homogeneous_points = np.array([[x, y, 1] for (x, y) in points])\n    translated_points = np.dot(homogeneous_points, translation_matrix.T)\n    translated_points = translated_points[:, :2]\n    return translated_points.tolist()\npoints = [[1, 2], [3, 4], [5, 6]]\ntx = 2\nty = 3\ntranslated_points = translate_object(points, tx, ty)"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    Calculate the Kullback-Leibler (KL) divergence between two normal distributions.\n    \n    Parameters:\n    - mu_p: Mean of the first normal distribution P\n    - sigma_p: Standard deviation of the first normal distribution P\n    - mu_q: Mean of the second normal distribution Q\n    - sigma_q: Standard deviation of the second normal distribution Q\n    \n    Returns:\n    - KL divergence between the two normal distributions as a float.\n    \"\"\"\n    kl_div = np.log(sigma_q / sigma_p) + (sigma_p ** 2 + (mu_p - mu_q) ** 2) / (2 * sigma_q ** 2) - 0.5\n    return kl_div"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    A = np.array(A)\n    b = np.array(b)\n    if A.shape[0] != A.shape[1]:\n        raise ValueError('Matrix A must be square.')\n    N = A.shape[0]\n    if x_ini is None:\n        x = np.zeros(N)\n    else:\n        x = np.array(x_ini)\n    for _ in range(n):\n        x_new = np.zeros_like(x)\n        for i in range(N):\n            s1 = np.dot(A[i, :i], x_new[:i])\n            s2 = np.dot(A[i, i + 1:], x[i + 1:])\n            x_new[i] = (b[i] - s1 - s2) / A[i, i]\n        x = x_new\n    return x.round(4).tolist()\nA = [[4, 1, 2], [3, 5, 1], [1, 1, 3]]\nb = [4, 7, 3]\nn = 10\nx_ini = [0, 0, 0]"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    n = len(b)\n    Ab = np.hstack((A, b.reshape(n, 1)))\n    for i in range(n):\n        max_row = np.argmax(np.abs(Ab[i:, i])) + i\n        Ab[[i, max_row]] = Ab[[max_row, i]]\n        Ab[i] = Ab[i] / Ab[i, i]\n        for j in range(i + 1, n):\n            Ab[j] = Ab[j] - Ab[j, i] * Ab[i]\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        x[i] = Ab[i, -1] - np.dot(Ab[i, i + 1:n], x[i + 1:n])\n    x = np.round(x, 4)\n    return x.tolist()\nA = [[3, 2, -1], [2, -2, 4], [-1, 0.5, -1]]\nb = [1, -2, 0]"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \"\"\"\n        h_prev = initial_hidden_state\n        c_prev = initial_cell_state\n        hidden_states = []\n        for input_t in x:\n            combined = np.vstack((input_t, h_prev))\n            f_t = self.sigmoid(np.dot(self.Wf, combined) + self.bf)\n            i_t = self.sigmoid(np.dot(self.Wi, combined) + self.bi)\n            c_t_hat = self.tanh(np.dot(self.Wc, combined) + self.bc)\n            o_t = self.sigmoid(np.dot(self.Wo, combined) + self.bo)\n            c_t = f_t * c_prev + i_t * c_t_hat\n            h_t = o_t * self.tanh(c_t)\n            hidden_states.append(h_t)\n            h_prev = h_t\n            c_prev = c_t\n        return ([hs.round(4).tolist() for hs in hidden_states], h_t.round(4).tolist(), c_t.round(4).tolist())\n\n    @staticmethod\n    def sigmoid(x):\n        return 1 / (1 + np.exp(-x))\n\n    @staticmethod\n    def tanh(x):\n        return np.tanh(x)"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\ndef compute_tf_idf(corpus, query):\n    if not corpus:\n        return []\n    unique_docs = [set(doc) for doc in corpus]\n    df = {word: sum((1 for doc in unique_docs if word in doc)) for word in set((word for doc in corpus))}\n    num_docs = len(corpus)\n    idf = {word: np.log((num_docs + 1) / (df[word] + 1)) for word in df}\n    tf_idf_scores = []\n    for doc in corpus:\n        tf = {word: doc.count(word) for word in doc}\n        doc_tf_idf = []\n        for word in query:\n            tf_value = tf.get(word, 0)\n            idf_value = idf.get(word, 0)\n            doc_tf_idf.append(round(tf_value * idf_value, 4))\n        tf_idf_scores.append(doc_tf_idf)\n    return np.array(tf_idf_scores).tolist()\ncorpus = [['the', 'quick', 'brown', 'fox'], ['jumps', 'over', 'the', 'lazy', 'dog'], ['the', 'quick', 'brown', 'fox', 'jumps']]\nquery = ['the', 'fox', 'dog']"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fp = np.sum((y_true == 0) & (y_pred == 1))\n    fn = np.sum((y_true == 1) & (y_pred == 0))\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0\n    if precision + recall == 0:\n        f_score_result = 0\n    else:\n        f_score_result = (1 + beta ** 2) * (precision * recall) / (beta ** 2 * precision + recall)\n    return round(f_score_result, 3)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, x):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n\n        :param x: Input sequence of shape (input_size, sequence_length)\n        :return: Outputs, last inputs, and hidden states\n        \"\"\"\n        h = np.zeros((self.hidden_size, 1))\n        outputs = []\n        last_inputs = []\n        last_hiddens = []\n        for t in range(x.shape[1]):\n            x_t = x[:, t].reshape(-1, 1)\n            last_inputs.append(x_t)\n            last_hiddens.append(h)\n            h = np.tanh(np.dot(self.W_xh, x_t) + np.dot(self.W_hh, h) + self.b_h)\n            y_t = np.dot(self.W_hy, h) + self.b_y\n            outputs.append(y_t)\n        return (np.array(outputs), last_inputs, last_hiddens)\n\n    def backward(self, expected_output, outputs, last_inputs, last_hiddens, learning_rate):\n        \"\"\"\n        Backpropagation through time (BPTT) to adjust the weights based on the loss.\n\n        :param expected_output: Expected output sequence of shape (output_size, sequence_length)\n        :param outputs: Output sequence from the forward pass\n        :param last_inputs: Last inputs from the forward pass\n        :param last_hiddens: Hidden states from the forward pass\n        :param learning_rate: Learning rate for weight updates\n        \"\"\"\n        dW_xh = np.zeros_like(self.W_xh)\n        dW_hh = np.zeros_like(self.W_hh)\n        dW_hy = np.zeros_like(self.W_hy)\n        db_h = np.zeros_like(self.b_h)\n        db_y = np.zeros_like(self.b_y)\n        dh_next = np.zeros_like(last_hiddens[0])\n        for t in reversed(range(len(outputs))):\n            dy = outputs[t] - expected_output[:, t].reshape(-1, 1)\n            dW_hy += np.dot(dy, last_hiddens[t].T)\n            db_y += dy\n            dh = np.dot(self.W_hy.T, dy) + dh_next\n            dh_raw = (1 - last_hiddens[t] * last_hiddens[t]) * dh\n            db_h += dh_raw\n            dW_xh += np.dot(dh_raw, last_inputs[t].T)\n            dW_hh += np.dot(dh_raw, last_hiddens[t - 1].T)\n            dh_next = np.dot(self.W_hh.T, dh_raw)\n        for dparam in [dW_xh, dW_hh, dW_hy, db_h, db_y]:\n            np.clip(dparam, -5, 5, out=dparam)\n        self.W_xh -= learning_rate * dW_xh\n        self.W_hh -= learning_rate * dW_hh\n        self.W_hy -= learning_rate * dW_hy\n        self.b_h -= learning_rate * db_h\n        self.b_y -= learning_rate * db_y\n\n    def compute_loss(self, expected_output, outputs):\n        \"\"\"\n        Compute the loss (1/2 * Mean Squared Error) for the given outputs and expected outputs.\n\n        :param expected_output: Expected output sequence of shape (output_size, sequence_length)\n        :param outputs: Output sequence from the forward pass\n        :return: Total loss\n        \"\"\"\n        loss = 0\n        for t in range(len(outputs)):\n            loss += 0.5 * np.sum((outputs[t] - expected_output[:, t].reshape(-1, 1)) ** 2)\n        return loss"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    if x0 is None:\n        x = np.zeros_like(b)\n    else:\n        x = x0\n    r = b - A @ x\n    p = r\n    rsold = r.T @ r\n    for i in range(n):\n        Ap = A @ p\n        alpha = rsold / (p.T @ Ap)\n        x = x + alpha * p\n        r = r - alpha * Ap\n        rsnew = r.T @ r\n        if np.sqrt(rsnew) < tol:\n            break\n        p = r + rsnew / rsold * p\n        rsold = rsnew\n    return x.round(8).tolist()"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    if not y:\n        return 0.0\n    n_samples = len(y)\n    (_, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / n_samples\n    gini = 1 - np.sum(probabilities ** 2)\n    return round(gini, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    values = []\n    column_indices = []\n    row_pointers = [0]\n    for row in dense_matrix:\n        current_row_non_zeros = 0\n        for (col_index, value) in enumerate(row):\n            if value != 0:\n                values.append(value)\n                column_indices.append(col_index)\n                current_row_non_zeros += 1\n        row_pointers.append(row_pointers[-1] + current_row_non_zeros)\n    return (values, column_indices, row_pointers)\ndense_matrix = [[0, 0, 3, 0], [4, 0, 0, 5], [0, 6, 0, 7], [0, 0, 0, 0]]"}
{"task_id": 66, "completion_id": 0, "solution": "def orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    import numpy as np\n    v_np = np.array(v)\n    L_np = np.array(L)\n    dot_product = np.dot(v_np, L_np)\n    dot_L_with_L = np.dot(L_np, L_np)\n    scalar_projection = dot_product / dot_L_with_L\n    vector_projection = scalar_projection * L_np\n    return [round(x, 3) for x in vector_projection]"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    if not dense_matrix or not dense_matrix[0]:\n        return ([], [], [])\n    num_rows = len(dense_matrix)\n    num_cols = len(dense_matrix[0])\n    values = []\n    row_indices = []\n    column_pointer = [0] * (num_cols + 1)\n    for col in range(num_cols):\n        for row in range(num_rows):\n            if dense_matrix[row][col] != 0:\n                values.append(dense_matrix[row][col])\n                row_indices.append(row)\n        column_pointer[col + 1] = len(values)\n    return (values, row_indices, column_pointer)\ndense_matrix = [[0, 0, 3, 0], [4, 0, 0, 0], [0, 0, 0, 5], [0, 6, 0, 0]]"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    A = np.array(A, dtype=float)\n    (_, _, Vt) = np.linalg.svd(A)\n    tol = 1e-10\n    rank = np.sum(np.abs(Vt) > tol)\n    independent_columns = A[:, :rank]\n    independent_columns_rounded = np.round(independent_columns, 8)\n    return independent_columns_rounded.tolist()\nA = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    y_mean = np.mean(y_true)\n    tss = np.sum((y_true - y_mean) ** 2)\n    rss = np.sum((y_true - y_pred) ** 2)\n    r2 = 1 - rss / tss\n    return round(r2, 3)"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    if not img or not img[0]:\n        return -1\n    total_brightness = 0\n    pixel_count = 0\n    for row in img:\n        if len(row) != len(img[0]):\n            return -1\n        for pixel in row:\n            if not 0 <= pixel <= 255:\n                return -1\n            total_brightness += pixel\n            pixel_count += 1\n    average_brightness = round(total_brightness / pixel_count, 2)\n    return average_brightness"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    if not isinstance(y_true, np.ndarray) or not isinstance(y_pred, np.ndarray):\n        raise ValueError('Both y_true and y_pred must be numpy arrays.')\n    if y_true.size == 0 or y_pred.size == 0:\n        raise ValueError('y_true and y_pred must not be empty.')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('y_true and y_pred must have the same shape.')\n    n = y_true.size\n    residuals = y_true - y_pred\n    mse = np.mean(residuals ** 2)\n    rmse_value = np.sqrt(mse)\n    return round(rmse_value, 3)"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    if len(y_true) != len(y_pred):\n        raise ValueError('The length of y_true and y_pred must be the same.')\n    intersection = np.logical_and(y_true, y_pred).sum()\n    union = np.logical_or(y_true, y_pred).sum()\n    if union == 0:\n        return 1.0\n    jaccard_idx = intersection / union\n    return round(jaccard_idx, 3)"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    intersection = np.sum(y_true * y_pred)\n    sum_true = np.sum(y_true)\n    sum_pred = np.sum(y_pred)\n    if sum_true == 0 and sum_pred == 0:\n        return 1.0\n    dice = 2 * intersection / (sum_true + sum_pred)\n    return round(dice, 3)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef create_row_hv(row, dim, random_seeds):\n\n    def generate_hypervector(seed, dim):\n        np.random.seed(seed)\n        return 2 * (np.random.rand(dim) > 0.5).astype(int) - 1\n    composite_hv = np.zeros(dim)\n    for (feature, value) in row.items():\n        feature_seed = random_seeds.get(feature, None)\n        if feature_seed is None:\n            raise ValueError(f\"Seed for feature '{feature}' not provided in random_seeds.\")\n        feature_hv = generate_hypervector(feature_seed, dim)\n        value_seed = hash((feature_seed, value))\n        value_hv = generate_hypervector(value_seed, dim)\n        bound_hv = feature_hv * value_hv\n        composite_hv += bound_hv\n    composite_hv = composite_hv / np.linalg.norm(composite_hv, ord=2)\n    return composite_hv.tolist()"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    cm = Counter()\n    for (y_true, y_pred) in data:\n        cm[y_true, y_pred] += 1\n    tp = cm[1, 1]\n    fp = cm[0, 1]\n    fn = cm[1, 0]\n    tn = cm[0, 0]\n    return [[tn, fp], [fn, tp]]\ndata = [[1, 1], [0, 1], [1, 0], [0, 0], [1, 1], [0, 0]]"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    if v1.shape != v2.shape:\n        raise ValueError('Input vectors must have the same shape.')\n    if v1.size == 0 or v2.size == 0:\n        raise ValueError('Input vectors cannot be empty.')\n    dot_product = np.dot(v1, v2)\n    magnitude_v1 = np.linalg.norm(v1)\n    magnitude_v2 = np.linalg.norm(v2)\n    if magnitude_v1 == 0 or magnitude_v2 == 0:\n        raise ValueError('Input vectors cannot have zero magnitude.')\n    cosine_sim = dot_product / (magnitude_v1 * magnitude_v2)\n    return round(cosine_sim, 3)"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import List, Tuple\ndef performance_metrics(actual: List[int], predicted: List[int]) -> Tuple[List[List[int]], float, float, float, float]:\n    if len(actual) != len(predicted):\n        raise ValueError(\"The 'actual' and 'predicted' lists must have the same length.\")\n    for label in actual + predicted:\n        if label not in [0, 1]:\n            raise ValueError(\"All elements in the 'actual' and 'predicted' lists must be either 0 or 1.\")\n    true_positives = 0\n    true_negatives = 0\n    false_positives = 0\n    false_negatives = 0\n    for (a, p) in zip(actual, predicted):\n        if a == 1 and p == 1:\n            true_positives += 1\n        elif a == 0 and p == 0:\n            true_negatives += 1\n        elif a == 0 and p == 1:\n            false_positives += 1\n        elif a == 1 and p == 0:\n            false_negatives += 1\n    confusion_matrix = [[true_negatives, false_positives], [false_negatives, true_positives]]\n    accuracy = (true_positives + true_negatives) / (true_positives + true_negatives + false_positives + false_negatives)\n    if true_positives + false_positives == 0 or true_positives + false_negatives == 0:\n        f1_score = 0.0\n    else:\n        precision = true_positives / (true_positives + false_positives)\n        recall = true_positives / (true_positives + false_negatives)\n        f1_score = 2 * (precision * recall) / (precision + recall) if precision + recall != 0 else 0.0\n    specificity = true_negatives / (true_negatives + false_positives) if true_negatives + false_positives != 0 else 0.0\n    negative_predictive_value = true_negatives / (true_negatives + false_negatives) if true_negatives + false_negatives != 0 else 0.0\n    accuracy = round(accuracy, 3)\n    f1_score = round(f1_score, 3)\n    specificity = round(specificity, 3)\n    negative_predictive_value = round(negative_predictive_value, 3)\n    return (confusion_matrix, accuracy, f1_score, specificity, negative_predictive_value)"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\nfrom scipy import stats\ndef descriptive_statistics(data):\n    data = np.array(data)\n    mean = np.mean(data)\n    median = np.median(data)\n    mode = stats.mode(data)[0][0]\n    variance = np.var(data, ddof=1)\n    standard_deviation = np.std(data, ddof=1)\n    percentiles = np.percentile(data, [25, 50, 75])\n    iqr = percentiles[2] - percentiles[0]\n    mean = round(mean, 4)\n    median = round(median, 4)\n    variance = round(variance, 4)\n    standard_deviation = round(standard_deviation, 4)\n    percentiles = [round(p, 4) for p in percentiles]\n    iqr = round(iqr, 4)\n    return {'mean': mean, 'median': median, 'mode': mode, 'variance': variance, 'standard_deviation': standard_deviation, '25th_percentile': percentiles[0], '50th_percentile': percentiles[1], '75th_percentile': percentiles[2], 'interquartile_range': iqr}"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials\n    \"\"\"\n    binom_coeff = math.comb(n, k)\n    probability = binom_coeff * p ** k * (1 - p) ** (n - k)\n    return round(probability, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    :return: The PDF value rounded to 5 decimal places.\n    \"\"\"\n    coefficient = 1 / (std_dev * math.sqrt(2 * math.pi))\n    exponent = -0.5 * ((x - mean) / std_dev) ** 2\n    pdf_value = coefficient * math.exp(exponent)\n    return round(pdf_value, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    :return: Probability of observing exactly k events, rounded to 5 decimal places\n    \"\"\"\n    if k < 0 or lam <= 0:\n        raise ValueError('k must be a non-negative integer and lam must be a positive number.')\n    probability = math.exp(-lam) * lam ** k / math.factorial(k)\n    return round(probability, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        float: The contrast of the image, defined as the difference between the maximum and minimum pixel values.\n    \"\"\"\n    if img.ndim != 2:\n        raise ValueError('The input image must be a 2D array (grayscale image).')\n    max_pixel = np.max(img)\n    min_pixel = np.min(img)\n    contrast = max_pixel - min_pixel\n    return contrast"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    \n    Returns:\n        float: The dot product of the two vectors.\n    \"\"\"\n    if vec1.ndim != 1 or vec2.ndim != 1:\n        raise ValueError('Both inputs must be 1D arrays.')\n    if vec1.shape[0] != vec2.shape[0]:\n        raise ValueError('Both vectors must have the same length.')\n    dot_product = np.dot(vec1, vec2)\n    return dot_product"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n    \n    Returns:\n        list[list[float]]: A nested list where each inner list represents the transformed features of a data point.\n    \"\"\"\n    if degree < 0:\n        return []\n    data_array = np.array(data).reshape(-1, 1)\n    from sklearn.preprocessing import PolynomialFeatures\n    poly = PolynomialFeatures(degree=degree, include_bias=False)\n    transformed_data = poly.fit_transform(data_array)\n    transformed_data_rounded = np.round(transformed_data, 8)\n    return transformed_data_rounded.tolist()"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    if position == 0 or d_model <= 0:\n        return -1\n    pe = np.zeros((position, d_model), dtype=np.float32)\n    position_vector = np.arange(position)[:, np.newaxis]\n    div_term = np.exp(np.arange(0, d_model, 2) * (-np.log(10000.0) / d_model))\n    pe[:, 0::2] = np.sin(position_vector * div_term)\n    pe[:, 1::2] = np.cos(position_vector * div_term)\n    return pe.astype(np.float16).tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    elif training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    else:\n        return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    parameter = np.array(parameter)\n    grad = np.array(grad)\n    m = np.array(m)\n    v = np.array(v)\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    parameter = parameter - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    return (parameter.tolist(), m.tolist(), v.tolist())"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef layer_norm(x, g, b, eps: float=1e-05):\n    mu = np.mean(x, axis=-1, keepdims=True)\n    var = np.var(x, axis=-1, keepdims=True)\n    x = (x - mu) / np.sqrt(var + eps)\n    return g * x + b\ndef multi_head_attention(q, k, v, n_head: int):\n    (batch_size, seq_len, d_model) = q.shape\n    d_k = d_model // n_head\n    q = q.reshape(batch_size, seq_len, n_head, d_k).transpose(0, 2, 1, 3)\n    k = k.reshape(batch_size, seq_len, n_head, d_k).transpose(0, 2, 1, 3)\n    v = v.reshape(batch_size, seq_len, n_head, d_k).transpose(0, 2, 1, 3)\n    scores = np.matmul(q, k.transpose(0, 1, 3, 2)) / np.sqrt(d_k)\n    weights = np.exp(scores - np.max(scores, axis=-1, keepdims=True))\n    weights = weights / np.sum(weights, axis=-1, keepdims=True)\n    context = np.matmul(weights, v).transpose(0, 2, 1, 3).reshape(batch_size, seq_len, d_model)\n    return context\ndef feed_forward(x, d_model: int, d_ff: int):\n    w1 = np.random.rand(d_model, d_ff)\n    b1 = np.random.rand(d_ff)\n    w2 = np.random.rand(d_ff, d_model)\n    b2 = np.random.rand(d_model)\n    return np.matmul(np.maximum(np.matmul(x, w1) + b1, 0), w2) + b2\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    d_model = params['wte'].shape[1]\n    n_head = hparams['n_head']\n    context_len = hparams['n_ctx']\n    input_ids = encoder.encode(prompt)\n    input_ids = input_ids[:context_len]\n    input_ids = np.array(input_ids).reshape(1, -1)\n    for _ in range(n_tokens_to_generate):\n        token_embeddings = params['wte'][input_ids]\n        positions = np.arange(input_ids.shape[1])\n        positional_embeddings = params['wpe'][positions]\n        x = token_embeddings + positional_embeddings\n        for _ in params['blocks']:\n            attn_output = multi_head_attention(x, x, x, n_head)\n            attn_output = layer_norm(x + attn_output, params['ln_f']['g'], params['ln_f']['b'])\n            ffn_output = feed_forward(attn_output, d_model, d_model * 4)\n            x = layer_norm(attn_output + ffn_output, params['ln_f']['g'], params['ln_f']['b'])\n        logits = np.matmul(x[:, -1], params['wte'].T)\n        next_token = np.argmax(logits, axis=-1)\n        input_ids = np.concatenate([input_ids, next_token.reshape(1, 1)], axis=1)\n        if input_ids.shape[1] > context_len:\n            input_ids = input_ids[:, -context_len:]\n    generated_text = encoder.decode(input_ids[0])\n    return generated_text"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        exp_values = np.exp(values - np.max(values))\n        return exp_values / np.sum(exp_values)\n    crystal_values = np.array(crystal_values)\n    attention_scores = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            attention_scores[i, j] = np.dot(crystal_values[i], crystal_values[j])\n    attention_weights = np.apply_along_axis(softmax, 1, attention_scores)\n    weighted_patterns = np.dot(attention_weights, crystal_values)\n    weighted_patterns_rounded = np.round(weighted_patterns, 4)\n    return weighted_patterns_rounded.tolist()\nn = 3\ncrystal_values = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n\n    def idf(term, corpus):\n        num_docs_with_term = len([doc for doc in corpus if term in doc])\n        return np.log((len(corpus) - num_docs_with_term + 0.5) / (num_docs_with_term + 0.5))\n\n    def avgdl(corpus):\n        return np.mean([len(doc) for doc in corpus])\n    avg_document_length = avgdl(corpus)\n    scores = []\n    for doc in corpus:\n        score = 0\n        doc_length = len(doc)\n        doc_term_freq = Counter(doc)\n        for term in query:\n            fqt = doc_term_freq[term]\n            score += idf(term, corpus) * (fqt * (k1 + 1)) / (fqt + k1 * (1 - b + b * (doc_length / avg_document_length)))\n        scores.append(round(score, 3))\n    return scores\ncorpus = ['the quick brown fox jumps over the lazy dog'.split(), 'never jump over the lazy dog quickly'.split(), 'a quick brown dog outpaces a quick fox'.split()]\nquery = 'quick brown fox'.split()"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        raise ValueError('The length of y_true and y_pred must be the same.')\n    tp = sum((1 for (yt, yp) in zip(y_true, y_pred) if yt == 1 and yp == 1))\n    fp = sum((1 for (yt, yp) in zip(y_true, y_pred) if yt == 0 and yp == 1))\n    fn = sum((1 for (yt, yp) in zip(y_true, y_pred) if yt == 1 and yp == 0))\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0\n    f1_score = 2 * (precision * recall) / (precision + recall) if precision + recall > 0 else 0\n    return round(f1_score, 3)\ny_true = [1, 0, 1, 1, 0, 1]\ny_pred = [1, 0, 0, 1, 0, 1]"}
{"task_id": 92, "completion_id": 0, "solution": "import math\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nimport math\nPI = 3.14159\ndef power_grid_forecast(consumption_data):\n    detrended_data = []\n    days = range(1, len(consumption_data) + 1)\n    for i in days:\n        fluctuation = 10 * math.sin(2 * PI * i / 10)\n        detrended_data.append(consumption_data[i - 1] - fluctuation)\n    X = np.array(days).reshape(-1, 1)\n    y = np.array(detrended_data)\n    model = LinearRegression()\n    model.fit(X, y)\n    day_15 = np.array([[15]])\n    base_consumption_day_15 = model.predict(day_15)[0]\n    fluctuation_day_15 = 10 * math.sin(2 * PI * 15 / 10)\n    predicted_consumption_day_15 = base_consumption_day_15 + fluctuation_day_15\n    final_consumption = math.ceil(predicted_consumption_day_15 * 1.05)\n    return final_consumption"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    if not isinstance(y_true, np.ndarray) or not isinstance(y_pred, np.ndarray):\n        raise ValueError('Both y_true and y_pred must be numpy arrays.')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('y_true and y_pred must have the same shape.')\n    absolute_errors = np.abs(y_true - y_pred)\n    mean_absolute_error = np.mean(absolute_errors)\n    return round(mean_absolute_error, 3)"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray) -> tuple:\n    \"\"\"\n    Compute the Query, Key, and Value matrices.\n    \n    Parameters:\n    - X: Input data (batch_size, seq_len, embed_dim)\n    - W_q: Query weight matrix (embed_dim, model_dim)\n    - W_k: Key weight matrix (embed_dim, model_dim)\n    - W_v: Value weight matrix (embed_dim, model_dim)\n    \n    Returns:\n    - Q: Query matrix (batch_size, seq_len, model_dim)\n    - K: Key matrix (batch_size, seq_len, model_dim)\n    - V: Value matrix (batch_size, seq_len, model_dim)\n    \"\"\"\n    Q = X @ W_q\n    K = X @ W_k\n    V = X @ W_v\n    return (Q, K, V)\ndef self_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Perform self-attention on the Query, Key, and Value matrices.\n    \n    Parameters:\n    - Q: Query matrix (batch_size, seq_len, model_dim)\n    - K: Key matrix (batch_size, seq_len, model_dim)\n    - V: Value matrix (batch_size, seq_len, model_dim)\n    \n    Returns:\n    - A: Attention output (batch_size, seq_len, model_dim)\n    \"\"\"\n    scores = Q @ K.transpose(0, 2, 1) / np.sqrt(Q.shape[-1])\n    weights = np.exp(scores) / np.sum(np.exp(scores), axis=-1, keepdims=True)\n    A = weights @ V\n    return A\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Implement the multi-head attention mechanism.\n    \n    Parameters:\n    - X: Input data (batch_size, seq_len, embed_dim)\n    - W_q: Query weight matrix (embed_dim, n_heads * model_dim_per_head)\n    - W_k: Key weight matrix (embed_dim, n_heads * model_dim_per_head)\n    - W_v: Value weight matrix (embed_dim, n_heads * model_dim_per_head)\n    - n_heads: Number of attention heads\n    \n    Returns:\n    - attention_output: Attention output (as a list after reshaping and rounding)\n    \"\"\"\n    (batch_size, seq_len, embed_dim) = X.shape\n    model_dim_per_head = W_q.shape[1] // n_heads\n    (Q, K, V) = compute_qkv(X, W_q, W_k, W_v)\n    Q = Q.reshape(batch_size, seq_len, n_heads, model_dim_per_head).transpose(0, 2, 1, 3)\n    K = K.reshape(batch_size, seq_len, n_heads, model_dim_per_head).transpose(0, 2, 1, 3)\n    V = V.reshape(batch_size, seq_len, n_heads, model_dim_per_head).transpose(0, 2, 1, 3)\n    A = self_attention(Q, K, V)\n    A = A.transpose(0, 2, 1, 3).reshape(batch_size, seq_len, n_heads * model_dim_per_head)\n    attention_output = np.round(A, 4).tolist()\n    return attention_output"}
{"task_id": 95, "completion_id": 0, "solution": "def phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError('Both lists must have the same number of elements.')\n    n = len(x)\n    n_11 = sum((1 for (xi, yi) in zip(x, y) if xi == 1 and yi == 1))\n    n_10 = sum((1 for (xi, yi) in zip(x, y) if xi == 1 and yi == 0))\n    n_01 = sum((1 for (xi, yi) in zip(x, y) if xi == 0 and yi == 1))\n    n_00 = sum((1 for (xi, yi) in zip(x, y) if xi == 0 and yi == 0))\n    numerator = n_11 * n_00 - n_10 * n_01\n    denominator = ((n_11 + n_10) * (n_11 + n_01) * (n_00 + n_10) * (n_00 + n_01)) ** 0.5\n    if denominator == 0:\n        return 0.0\n    phi = numerator / denominator\n    return round(phi, 4)"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    return max(0, min(1, 0.2 * x + 0.5))"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value\n    \"\"\"\n    if x >= 0:\n        return round(x, 4)\n    else:\n        return round(alpha * (math.exp(x) - 1), 4)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    return x if x > 0 else alpha * x"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x)\n    \"\"\"\n    if x > 20:\n        return round(x, 4)\n    elif x < -20:\n        return round(math.exp(x), 4)\n    else:\n        return round(math.log(1 + math.exp(x)), 4)"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input, rounded to 4 decimal places\n    \"\"\"\n    result = x / (1 + abs(x))\n    return round(result, 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    rhos = np.array(rhos)\n    A = np.array(A)\n    pi_theta_old = np.array(pi_theta_old)\n    pi_theta_ref = np.array(pi_theta_ref)\n    clipped_rhos = np.clip(rhos, 1 - epsilon, 1 + epsilon)\n    term1 = clipped_rhos * A * (pi_theta_old / pi_theta_ref)\n    term2 = rhos * A * (pi_theta_old / pi_theta_ref)\n    L_clip = np.minimum(term1, term2)\n    kl_divergence = np.sum(pi_theta_old * np.log(pi_theta_old / pi_theta_ref))\n    grpo_obj = np.mean(L_clip) - beta * kl_divergence\n    return round(grpo_obj, 6)\nrhos = [1.1, 0.9, 1.2, 0.8]\nA = [0.5, -0.5, 1.0, -1.0]\npi_theta_old = [0.25, 0.25, 0.25, 0.25]\npi_theta_ref = [0.2, 0.3, 0.2, 0.3]"}
{"task_id": 102, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value rounded to the nearest 4th decimal\n    \"\"\"\n    swish_value = x * (1 / (1 + math.exp(-x)))\n    return round(swish_value, 4)"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value rounded to the nearest 4th decimal\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x > 0:\n        result = scale * x\n    else:\n        result = scale * alpha * (math.exp(x) - 1)\n    return round(result, 4)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00d7 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    linear_combination = np.dot(X, weights) + bias\n    probabilities = 1 / (1 + np.exp(-linear_combination))\n    predictions = (probabilities >= 0.5).astype(int)\n    return predictions.tolist()"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef softmax(z):\n    \"\"\"Compute softmax values for each set of scores in z.\"\"\"\n    e_z = np.exp(z - np.max(z, axis=1, keepdims=True))\n    return e_z / e_z.sum(axis=1, keepdims=True)\ndef cross_entropy_loss(y_true, y_pred):\n    \"\"\"Compute the cross-entropy loss.\"\"\"\n    m = y_true.shape[0]\n    log_probs = -np.log(y_pred[np.arange(m), y_true])\n    return np.sum(log_probs) / m\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    C = len(np.unique(y))\n    M = X.shape[1]\n    B = np.random.randn(M, C)\n    y_one_hot = np.eye(C)[y]\n    losses = []\n    for _ in range(iterations):\n        y_pred = softmax(X.dot(B))\n        gradient = X.T.dot(y_pred - y_one_hot) / len(y)\n        B -= learning_rate * gradient\n        loss = cross_entropy_loss(y, y_pred)\n        losses.append(round(loss, 4))\n    return (B.round(4).tolist(), losses)"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \"\"\"\n    X = np.c_[np.ones(X.shape[0]), X]\n    weights = np.zeros(X.shape[1])\n    loss_values = []\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n\n    def compute_loss(y_true, y_pred):\n        return -np.mean(y_true * np.log(y_pred) + (1 - y_true) * np.log(1 - y_pred))\n    for _ in range(iterations):\n        predictions = sigmoid(np.dot(X, weights))\n        error = predictions - y\n        gradient = np.dot(X.T, error) / y.size\n        weights -= learning_rate * gradient\n        loss = compute_loss(y, predictions)\n        loss_values.append(round(loss, 4))\n    return (weights.round(4).tolist(), loss_values)"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    d_k = K.shape[-1]\n    scores = np.dot(Q, K.T) / np.sqrt(d_k)\n    scores = scores + mask * -1000000000.0\n    attention_weights = np.exp(scores) / np.sum(np.exp(scores), axis=-1, keepdims=True)\n    output = np.dot(attention_weights, V)\n    return output.tolist()"}
{"task_id": 108, "completion_id": 0, "solution": "def disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    \"\"\"\n    from collections import Counter\n    color_counts = Counter(apples)\n    total_apples = len(apples)\n    probabilities = [count / total_apples for count in color_counts.values()]\n    entropy = -sum((p * (p if p != 0 else 0) for p in probabilities))\n    return round(entropy, 4)"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Perform Layer Normalization on the input tensor X.\n    \n    Parameters:\n    - X: np.ndarray of shape (batch_size, sequence_length, feature_dim)\n    - gamma: np.ndarray of shape (feature_dim,) for scaling\n    - beta: np.ndarray of shape (feature_dim,) for shifting\n    - epsilon: small constant for numerical stability\n    \n    Returns:\n    - normalized X as a list of lists of lists, rounded to 5 decimal places\n    \"\"\"\n    mean = np.mean(X, axis=-1, keepdims=True)\n    variance = np.var(X, axis=-1, keepdims=True)\n    X_normalized = (X - mean) / np.sqrt(variance + epsilon)\n    X_normalized = gamma * X_normalized + beta\n    return X_normalized.round(5).tolist()"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n\n    def match_counts(r, c):\n        r_counts = Counter(r)\n        c_counts = Counter(c)\n        matches = sum((min(r_counts[word], c_counts[word]) for word in r_counts))\n        return matches\n\n    def word_order_fragmentation(r, c):\n        frag_cost = 0\n        chunks = []\n        i = 0\n        while i < len(c):\n            if c[i] in r:\n                start = i\n                while i < len(c) and c[i] in r:\n                    i += 1\n                chunks.append(c[start:i])\n            else:\n                i += 1\n        for chunk in chunks:\n            frag_cost += len(chunk) - len(set(chunk))\n        return frag_cost\n    r = reference.split()\n    c = candidate.split()\n    matches = match_counts(r, c)\n    precision = matches / len(c) if c else 0\n    recall = matches / len(r) if r else 0\n    if precision == 0 or recall == 0:\n        return 0.0\n    f_mean = (1 + beta ** 2) * (precision * recall) / (beta ** 2 * precision + recall)\n    frag_cost = word_order_fragmentation(r, c)\n    frag_penalty = gamma * frag_cost / len(c)\n    meteor = f_mean * (1 - frag_penalty)\n    return round(meteor, 3)"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    \"\"\"\n    Compute the Pointwise Mutual Information (PMI) given the joint occurrence count of two events,\n    their individual counts, and the total number of samples.\n\n    Parameters:\n    - joint_counts: int, the number of times both events occur together.\n    - total_counts_x: int, the total number of times event X occurs.\n    - total_counts_y: int, the total number of times event Y occurs.\n    - total_samples: int, the total number of samples.\n\n    Returns:\n    - float, the PMI value rounded to 3 decimal places.\n    \"\"\"\n    expected_joint_prob = total_counts_x / total_samples * (total_counts_y / total_samples)\n    actual_joint_prob = joint_counts / total_samples\n    if expected_joint_prob == 0 or actual_joint_prob == 0:\n        pmi = 0.0\n    else:\n        pmi = np.log2(actual_joint_prob / expected_joint_prob)\n    return round(pmi, 3)"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    if not x:\n        return []\n    min_val = min(x)\n    max_val = max(x)\n    if min_val == max_val:\n        return [0.0 for _ in x]\n    normalized = [(val - min_val) / (max_val - min_val) for val in x]\n    return [round(val, 4) for val in normalized]"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray) -> list:\n    z1 = np.dot(x, w1)\n    a1 = np.maximum(0, z1)\n    z2 = np.dot(a1, w2)\n    z3 = z2 + x\n    a3 = np.maximum(0, z3)\n    return a3.round(4).tolist()"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray):\n    if x.ndim != 3:\n        raise ValueError('Input must be a 3D array of shape (height, width, channels)')\n    pooled_output = np.mean(x, axis=(0, 1))\n    return pooled_output"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05) -> list:\n    \"\"\"\n    Perform Batch Normalization on a 4D NumPy array in BCHW format.\n\n    Parameters:\n    X (np.ndarray): Input tensor of shape (batch, channels, height, width).\n    gamma (np.ndarray): Scale parameters of shape (channels,).\n    beta (np.ndarray): Shift parameters of shape (channels,).\n    epsilon (float): Small value added to variance to ensure numerical stability.\n\n    Returns:\n    list: Normalized output tensor rounded to 4 decimal places.\n    \"\"\"\n    (batch_size, channels, height, width) = X.shape\n    X_reshaped = X.reshape(batch_size, channels, -1)\n    mean = X_reshaped.mean(axis=0, keepdims=True)\n    var = X_reshaped.var(axis=0, keepdims=True)\n    X_normalized = (X_reshaped - mean) / np.sqrt(var + epsilon)\n    X_normalized = X_normalized.reshape(batch_size, channels, height, width)\n    output = gamma[np.newaxis, :, np.newaxis, np.newaxis] * X_normalized + beta[np.newaxis, :, np.newaxis, np.newaxis]\n    return output.round(4).tolist()"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    \"\"\"\n    Computes the derivative of a polynomial term of the form c * x^n at a given point x.\n    \n    Parameters:\n    c (float): The coefficient of the polynomial term.\n    x (float): The point at which to evaluate the derivative.\n    n (float): The exponent of the polynomial term.\n    \n    Returns:\n    float: The value of the derivative at the given point, rounded to 4 decimal places.\n    \"\"\"\n    derivative_value = c * n * x ** (n - 1)\n    return round(derivative_value, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10):\n    vectors = np.array(vectors, dtype=float)\n    orthonormal_basis = []\n    for v in vectors:\n        for u in orthonormal_basis:\n            v -= np.dot(v, u) * u\n        norm = np.linalg.norm(v)\n        if norm > tol:\n            orthonormal_basis.append(v / norm)\n    orthonormal_basis = [vec.round(4).tolist() for vec in orthonormal_basis]\n    return orthonormal_basis\nvectors = [[1, 0], [1, 1], [2, 2]]"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    a = np.array(a)\n    b = np.array(b)\n    result = np.cross(a, b)\n    result_rounded = np.round(result, 4).tolist()\n    return result_rounded"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    A = np.array(A)\n    b = np.array(b)\n    det_A = np.linalg.det(A)\n    if det_A == 0:\n        return -1\n    n = len(b)\n    x = np.zeros(n)\n    for i in range(n):\n        A_i = A.copy()\n        A_i[:, i] = b\n        det_A_i = np.linalg.det(A_i)\n        x[i] = det_A_i / det_A\n    x = np.round(x, 4)\n    return x.tolist()"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    if len(p) != len(q) or not p or (not q):\n        return 0.0\n    p = np.array(p)\n    q = np.array(q)\n    bc = np.sum(np.sqrt(p * q))\n    bd = -np.log(bc)\n    return round(bd, 4)"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float]:\n    if len(a) != len(b):\n        return -1\n    result = [x + y for (x, y) in zip(a, b)]\n    return result\nresult = vector_sum(vector_c, vector_d)\nvector_c = [1, 2]\nvector_d = [3, 4, 5]"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    (num_states, num_actions) = theta.shape\n    policy_gradients = np.zeros_like(theta, dtype=float)\n    for episode in episodes:\n        G = 0\n        for t in reversed(range(len(episode))):\n            (state, action, reward) = episode[t]\n            G += reward\n            action_probs = np.exp(theta[state, :])\n            action_probs /= np.sum(action_probs)\n            grad_log_policy = np.zeros(num_actions)\n            grad_log_policy[action] = 1.0 - action_probs[action]\n            grad_log_policy -= action_probs\n            policy_gradients[state, :] += G * grad_log_policy\n    policy_gradients /= len(episodes)\n    policy_gradients = np.round(policy_gradients, 4).tolist()\n    return policy_gradients"}
{"task_id": 123, "completion_id": 0, "solution": "def compute_efficiency(n_experts, k_active, d_in, d_out):\n    flops_dense = n_experts * d_in * d_out\n    flops_moe = k_active * d_in * d_out\n    savings_percentage = (flops_dense - flops_moe) / flops_dense * 100\n    flops_dense_rounded = round(flops_dense, 1)\n    flops_moe_rounded = round(flops_moe, 1)\n    savings_percentage_rounded = round(savings_percentage, 1)\n    return (flops_dense_rounded, flops_moe_rounded, savings_percentage_rounded)\nn_experts = 16\nk_active = 4\nd_in = 512\nd_out = 512"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    logits = np.dot(X, W_g.T) + np.dot(N, W_noise.T)\n    exp_logits = np.exp(logits - np.max(logits, axis=1, keepdims=True))\n    probs = exp_logits / np.sum(exp_logits, axis=1, keepdims=True)\n    (topk_probs, topk_indices) = (np.partition(-probs, k - 1, axis=1)[:, :k], np.argpartition(-probs, k - 1, axis=1)[:, :k])\n    final_probs = np.zeros_like(probs)\n    np.put_along_axis(final_probs, np.expand_dims(topk_indices, axis=2), -np.expand_dims(topk_probs, axis=2), axis=1)\n    final_probs = final_probs / np.sum(final_probs, axis=1, keepdims=True)\n    final_probs = np.round(final_probs, 4)\n    return final_probs.tolist()"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    \"\"\"\n    Implement a Mixture-of-Experts (MoE) layer using softmax gating and top-k routing.\n\n    Parameters:\n    x (np.ndarray): Input tensor of shape (batch_size, input_features).\n    We (np.ndarray): Expert weight matrices of shape (n_experts, input_features, output_features).\n    Wg (np.ndarray): Gating weight matrix of shape (input_features, n_experts).\n    n_experts (int): Number of experts.\n    top_k (int): Number of top experts to use for each token.\n\n    Returns:\n    list: The final MoE output as a python list after reshaping.\n    \"\"\"\n    (batch_size, input_features) = x.shape\n    (_, _, output_features) = We.shape\n    gating_scores = np.dot(x, Wg)\n    gating_probs = softmax(gating_scores)\n    top_k_indices = np.argsort(gating_probs, axis=1)[:, -top_k:]\n    top_k_probs = np.take_along_axis(gating_probs, top_k_indices, axis=1)\n    top_k_probs /= top_k_probs.sum(axis=1, keepdims=True)\n    moe_output = np.zeros((batch_size, output_features))\n    for i in range(batch_size):\n        for j in range(top_k):\n            expert_idx = top_k_indices[i, j]\n            expert_weight = We[expert_idx]\n            moe_output[i] += top_k_probs[i, j] * np.dot(x[i], expert_weight)\n    moe_output = np.round(moe_output, 4)\n    return moe_output.tolist()\ndef softmax(x):\n    \"\"\"Compute the softmax of each row of x.\"\"\"\n    e_x = np.exp(x - np.max(x, axis=1, keepdims=True))\n    return e_x / e_x.sum(axis=1, keepdims=True)"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    (B, C, H, W) = X.shape\n    assert C % num_groups == 0, 'Number of channels must be divisible by num_groups'\n    X = X.reshape(B, num_groups, C // num_groups, H, W)\n    mean = X.mean(axis=(2, 3, 4), keepdims=True)\n    var = X.var(axis=(2, 3, 4), keepdims=True)\n    X_normalized = (X - mean) / np.sqrt(var + epsilon)\n    X_normalized = X_normalized.reshape(B, C, H, W)\n    Y = gamma * X_normalized + beta\n    Y_rounded = np.round(Y, decimals=4).tolist()\n    return Y_rounded"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n\n    def f(x):\n        return x ** 4 - 3 * x ** 3 + 2\n\n    def df(x):\n        return 4 * x ** 3 - 9 * x ** 2\n    x = start_x\n    for i in range(max_iters):\n        gradient = df(x)\n        x_new = x - learning_rate * gradient\n        if abs(x_new - x) < tolerance:\n            break\n        x = x_new\n    return round(x, 4)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    transformed = alpha * np.tanh(gamma * x + beta)\n    rounded_transformed = np.round(transformed, 4)\n    result_list = rounded_transformed.tolist()\n    return result_list"}
