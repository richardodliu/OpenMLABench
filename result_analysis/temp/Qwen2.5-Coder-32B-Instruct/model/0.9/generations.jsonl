{"task_id": 0, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Implement Ridge (L2-regularised) Linear Regression using its closed-form solution.\n    \n    Parameters:\n    - data: np.ndarray where the last column is the target y and all preceding columns are the features X.\n    - alpha: float, the regularisation strength.\n    \n    Returns:\n    - A list of floats representing the weight vector rounded to 4 decimal places.\n      Returns -1 if the matrix (X^T X + alpha I) is not invertible.\n    \"\"\"\n    # Split the data into features and target\n    X = data[:, :-1]\n    y = data[:, -1]\n    \n    # Add a bias term (intercept) to the features\n    X = np.hstack((np.ones((X.shape[0], 1)), X))\n    \n    # Compute the matrix (X^T X + alpha I)\n    I = np.eye(X.shape[1])  # Identity matrix with size equal to the number of columns in X\n    A = X.T @ X + alpha * I\n    \n    # Check if the matrix A is invertible\n    if np.linalg.det(A) == 0:\n        return -1\n    \n    # Compute the weight vector w\n    w = np.linalg.inv(A) @ X.T @ y\n    \n    # Return the weight vector rounded to 4 decimal places as a list\n    return [round(coef, 4) for coef in w]\n\n# Example usage:\n# data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n# alpha = 0.1\n# print(ridge_regression(data, alpha))\n```\n\nThis script defines the `ridge_regression` function, which performs Ridge Regression using the closed-form solution. It handles the addition of a bias term, checks for matrix invertibility, and returns the weight vector rounded to four decimal places. If the matrix is not invertible, it returns `-1`."}
{"task_id": 1, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    updates = 0\n\n    # Compute the Gram matrix\n    K = np.dot(X_train, X_train.T)\n\n    for _ in range(n_iter):\n        all_correct = True\n        for i in range(n_samples):\n            # Compute the activation using the Gram matrix\n            activation = np.sum(alpha * y_train * K[:, i])\n            # Test the margin\n            if y_train[i] * (activation + b) <= 0:\n                # Update alpha and b\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updates += 1\n                all_correct = False\n                break\n        if all_correct:\n            break\n\n    # Compute the primal weight vector w\n    w = np.sum(alpha * y_train[:, np.newaxis] * X_train, axis=0)\n\n    # Return w and b rounded to 4 decimal places\n    return [round(wi, 4) for wi in w], round(b, 4)\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 3], [2, 1]])\n# y_train = np.array([1, 1, -1, -1])\n# w, b = perceptron_dual(X_train, y_train)\n# print(\"w:\", w)\n# print(\"b:\", b)\n```\n\nThis script defines the `perceptron_dual` function, which implements the dual-form perceptron learning algorithm. It computes the Gram matrix to efficiently handle the inner products and updates the dual parameters `alpha` and the bias `b` according to the perceptron update rule. After training, it calculates the primal weight vector `w` and returns both `w` and `b` rounded to four decimal places."}
{"task_id": 2, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    \n    def identity_link(mu):\n        return mu\n    \n    def identity_inv_link(eta):\n        return eta\n    \n    def identity_derivative(mu):\n        return np.ones_like(mu)\n    \n    def log_link(mu):\n        return np.log(mu)\n    \n    def log_inv_link(eta):\n        return np.exp(eta)\n    \n    def log_derivative(mu):\n        return 1 / mu\n    \n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n    \n    def logit_inv_link(eta):\n        return 1 / (1 + np.exp(-eta))\n    \n    def logit_derivative(mu):\n        return 1 / (mu * (1 - mu))\n    \n    return {\n        \"identity\": {\n            \"link\": identity_link,\n            \"inv_link\": identity_inv_link,\n            \"derivative\": identity_derivative\n        },\n        \"log\": {\n            \"link\": log_link,\n            \"inv_link\": log_inv_link,\n            \"derivative\": log_derivative\n        },\n        \"logit\": {\n            \"link\": logit_link,\n            \"inv_link\": logit_inv_link,\n            \"derivative\": logit_derivative\n        }\n    }\n\n# Example usage:\nlinks = glm_links()\nmu  = np.array([0.2, 0.8])\neta = links[\"logit\"][\"link\"](mu)        # \u2192 [-1.3863, 1.3863]\nmu2 = links[\"logit\"][\"inv_link\"](eta)    # \u2192 [0.2, 0.8]\n\nprint(\"eta:\", np.round(eta, 4))\nprint(\"mu2:\", np.round(mu2, 4))\n```\n\nThis script defines the `glm_links` function, which returns a dictionary containing the link functions, their inverses, and their derivatives for the identity, log, and logit links used in Generalized Linear Models (GLMs). Each function is designed to work with numpy scalars and arrays, ensuring element-wise operations. The example usage demonstrates how to use these functions and prints the rounded results to four decimal places."}
{"task_id": 3, "completion_id": 0, "completion": "```\n\n```python\nimport numpy as np\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    \n    def build_tree(indices):\n        if len(indices) < 3:\n            return {'type': 'leaf', 'indices': indices}\n        \n        feature_idx = np.random.choice(data.shape[1])\n        feature_values = data[indices, feature_idx]\n        down, up = feature_values.min(), feature_values.max()\n        v = np.random.uniform(down, up)\n        \n        left_indices = indices[feature_values <= v]\n        right_indices = indices[feature_values > v]\n        \n        return {\n            'type': 'internal',\n            'feature_idx': feature_idx,\n            'v': v,\n            'left': build_tree(left_indices),\n            'right': build_tree(right_indices)\n        }\n    \n    def get_depth(node, sample_idx, depth=0):\n        if node['type'] == 'leaf':\n            return depth\n        feature_idx = node['feature_idx']\n        v = node['v']\n        if data[sample_idx, feature_idx] <= v:\n            return get_depth(node['left'], sample_idx, depth + 1)\n        else:\n            return get_depth(node['right'], sample_idx, depth + 1)\n    \n    indices = np.arange(data.shape[0])\n    tree = build_tree(indices)\n    \n    depths = [get_depth(tree, i) for i in range(data.shape[0])]\n    \n    return depths\n\n# Example usage:\ndata = np.arange(5).reshape(-1, 1)\nprint(isolation_tree_path_length(data))  # Output: [2, 2, 2, 1, 1]\n```\n```"}
{"task_id": 7, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    min_support_count = math.ceil(minsup * N)\n    \n    # Generate all unique items from the transactions\n    unique_items = set(item for transaction in transactions for item in transaction)\n    \n    # Dictionary to store the support count of each itemset\n    support_count = Counter()\n    \n    # Check all combinations of items\n    for k in range(1, len(unique_items) + 1):\n        for itemset in combinations(unique_items, k):\n            # Convert itemset to a set for faster subset checking\n            itemset_set = set(itemset)\n            count = sum(1 for transaction in transactions if itemset_set.issubset(transaction))\n            support_count[itemset] = count\n    \n    # Filter out itemsets that do not meet the minimum support threshold\n    frequent_itemsets = {itemset: count for itemset, count in support_count.items() if count >= min_support_count}\n    \n    return frequent_itemsets\n\n# Example usage\ntransactions = [\n    ['bread', 'milk'],\n    ['bread', 'diaper', 'beer', 'egg'],\n    ['milk', 'diaper', 'beer', 'coke'],\n    ['bread', 'milk', 'diaper', 'beer'],\n    ['bread', 'milk', 'diaper', 'coke']\n]\nminsup = 0.6\n\noutput = find_frequent_itemsets(transactions, minsup)\nprint(output)\n```\n\nThis script defines a function `find_frequent_itemsets` that takes a list of transactions and a minimum support threshold, and returns a dictionary of frequent itemsets along with their support counts. The function uses Python's standard library modules to generate combinations of items, count their support, and filter out those that do not meet the minimum support threshold."}
{"task_id": 11, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    # Step 1: Initialize centroids as the first k samples\n    centroids = data[:k].copy()\n    \n    for iteration in range(max_iter):\n        # Step 2: Assign each sample to the nearest centroid\n        labels = np.argmin(np.sum((data[:, np.newaxis] - centroids) ** 2, axis=2), axis=1)\n        \n        # Step 3: Recompute centroids\n        new_centroids = np.array([data[labels == i].mean(axis=0) if np.any(labels == i) else data[np.random.randint(data.shape[0])] for i in range(k)])\n        \n        # Check for empty clusters and reinitialize if necessary\n        for i in range(k):\n            if not np.any(labels == i):\n                new_centroids[i] = data[np.random.randint(data.shape[0])]\n        \n        # Step 4: Check for convergence\n        max_movement = np.max(np.sum((new_centroids - centroids) ** 2, axis=1))\n        if max_movement < epsilon:\n            break\n        \n        centroids = new_centroids\n    \n    # Round centroids to 4 decimal places\n    rounded_centroids = np.round(centroids, 4).tolist()\n    \n    return rounded_centroids, labels.tolist()\n\n# Example usage:\n# data = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0], [8.0, 2.0], [10.0, 2.0], [9.0, 3.0]])\n# k = 3\n# centroids, labels = kmeans(data, k)\n# print(\"Centroids:\", centroids)\n# print(\"Labels:\", labels)\n```\n\nThis script implements the K-Means clustering algorithm from scratch according to the specified requirements. It initializes the centroids as the first `k` samples, assigns each sample to the nearest centroid, recomputes the centroids, and checks for convergence. If a cluster becomes empty, it reinitializes the centroid with a random sample from the dataset. The final centroids are rounded to four decimal places before being returned along with the cluster labels for each sample."}
{"task_id": 13, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_users, n_items = data.shape\n    S = np.zeros((n_items, n_items))\n\n    # Build the item-item similarity matrix\n    for i in range(n_items):\n        for j in range(i + 1, n_items):\n            users_rated_both = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(users_rated_both) == 0:\n                S[i, j] = S[j, i] = 0\n            else:\n                v1 = data[users_rated_both, i]\n                v2 = data[users_rated_both, j]\n                if criterion == 'cosine':\n                    std_v1 = np.std(v1)\n                    std_v2 = np.std(v2)\n                    if std_v1 > 1e-3 and std_v2 > 1e-3:\n                        v1 = v1 - np.mean(v1)\n                        v2 = v2 - np.mean(v2)\n                    S[i, j] = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n                elif criterion == 'pearson':\n                    S[i, j] = np.corrcoef(v1, v2)[0, 1]\n                S[j, i] = S[i, j]\n\n    # Get the items rated by the active user\n    rated_items = np.where(data[user_ind] > 0)[0]\n    r = data[user_ind, rated_items]\n\n    # Predict the attractiveness of each unrated item\n    scores = defaultdict(float)\n    denominators = defaultdict(float)\n\n    for t in range(n_items):\n        if t not in rated_items:\n            for i, ri in zip(rated_items, r):\n                scores[t] += ri * S[t, i]\n                denominators[t] += abs(S[t, i])\n\n    # Compute the final scores\n    for t in scores:\n        if denominators[t] == 0:\n            scores[t] = 0\n        else:\n            scores[t] /= denominators[t]\n\n    # Sort items by score (descending) and by index (ascending)\n    sorted_items = sorted(scores.keys(), key=lambda x: (-scores[x], x))\n\n    return sorted_items[:k]\n```\n\nThis script defines the `knn_recommend` function which implements the item-based k-NN collaborative filtering recommender as described. It constructs an item-item similarity matrix based on the specified similarity criterion, calculates the predicted attractiveness of unrated items for the active user, and returns the top `k` recommended items."}
{"task_id": 19, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_gain = -np.inf\n    best_feature = None\n    best_threshold = None\n\n    # Calculate the loss for the current node\n    G = np.sum(g)\n    H = np.sum(h)\n    current_loss = -0.5 * (G**2) / (H + lam) + gamma\n\n    for feature_index in range(n_features):\n        # Extract the feature column and sort the indices by feature value\n        feature_values = X[:, feature_index]\n        sorted_indices = np.argsort(feature_values)\n        feature_values = feature_values[sorted_indices]\n        g_sorted = g[sorted_indices]\n        h_sorted = h[sorted_indices]\n\n        # Initialize accumulators for the left child\n        G_L = 0\n        H_L = 0\n\n        # Iterate over possible split points\n        for i in range(1, n_samples - 1):\n            G_L += g_sorted[i - 1]\n            H_L += h_sorted[i - 1]\n\n            # Avoid splitting when there are not enough samples on one side\n            if i < 2 or i >= n_samples - 1:\n                continue\n\n            G_R = G - G_L\n            H_R = H - H_L\n\n            # Calculate the loss for the left and right children\n            loss_L = -0.5 * (G_L**2) / (H_L + lam) + gamma\n            loss_R = -0.5 * (G_R**2) / (H_R + lam) + gamma\n\n            # Calculate the gain of the split\n            gain = current_loss - (loss_L + loss_R)\n\n            # Check if this is the best split so far\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature_index\n                best_threshold = (feature_values[i - 1] + feature_values[i]) / 2\n\n    # Return the best split if a positive gain was found\n    if best_gain > 0:\n        return (best_feature, best_threshold)\n    else:\n        return None\n```\n\nThis script defines the `best_split` function, which evaluates all possible splits of the dataset based on the given criteria and returns the split that maximizes the gain. If no valid split yields a positive gain, it returns `None`."}
{"task_id": 20, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Convert input to a NumPy array if it's not already one\n    x_array = np.array(x, dtype=float)\n    \n    # Calculate the sigmoid\n    sigmoid_x = 1 / (1 + np.exp(-x_array))\n    \n    # Calculate the gradient of the sigmoid\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    \n    # Round the results to 4 decimal places\n    sigmoid_x_rounded = np.round(sigmoid_x, 4)\n    gradient_x_rounded = np.round(gradient_x, 4)\n    \n    # Convert back to scalar if input was a scalar\n    if np.isscalar(x):\n        return float(sigmoid_x_rounded), float(gradient_x_rounded)\n    else:\n        return sigmoid_x_rounded.tolist(), gradient_x_rounded.tolist()\n\n# Example usage:\n# scalar_input = 0.5\n# array_input = np.array([-1, 0, 1])\n# list_input = [1.5, -0.5]\n\n# print(sigmoid_activation(scalar_input))  # Output: (0.6225, 0.235)\n# print(sigmoid_activation(array_input))   # Output: ([0.2689, 0.5, 0.7311], [0.1966, 0.25, 0.1966])\n# print(sigmoid_activation(list_input))    # Output: ([0.8176, 0.3775], [0.1824, 0.235])\n```\n\nThis script defines the `sigmoid_activation` function which computes the sigmoid and its gradient for a given input, handling scalars, lists, and NumPy arrays, and returns the results rounded to four decimal places."}
{"task_id": 21, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float],\n                        y_train: list[int],\n                        x_test: list[float],\n                        epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    def decision_stump_predict(x, d, theta):\n        if d == 0:\n            return 1 if x <= theta else -1\n        else:\n            return 1 if x > theta else -1\n\n    def weighted_error(weights, y, pred):\n        return np.sum(weights[y != pred])\n\n    # Convert inputs to numpy arrays for easier manipulation\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n\n    # Initialize weights uniformly\n    n_samples = len(x_train)\n    weights = np.ones(n_samples) / n_samples\n\n    # Initialize the ensemble\n    stumps = []\n    alphas = []\n\n    while True:\n        # Sort the data by value and compute thresholds\n        sorted_indices = np.argsort(x_train)\n        x_sorted = x_train[sorted_indices]\n        y_sorted = y_train[sorted_indices]\n        weights_sorted = weights[sorted_indices]\n\n        min_error = float('inf')\n        best_stump = None\n        best_alpha = None\n\n        # Try all possible thresholds (between consecutive samples)\n        for d in [0, 1]:  # Decision stump can be either \u2264 \u03b8 or > \u03b8\n            for i in range(n_samples - 1):\n                theta = (x_sorted[i] + x_sorted[i + 1]) / 2.0\n\n                # Predictions for the current stump\n                predictions = np.array([decision_stump_predict(x, d, theta) for x in x_train])\n\n                # Calculate the weighted error\n                error = weighted_error(weights, y_train, predictions)\n\n                # If the error is more than 0.5, use the opposite class\n                if error > 0.5:\n                    error = 1 - error\n                    predictions = -predictions\n\n                # Update if a better stump is found\n                if error < min_error:\n                    min_error = error\n                    best_stump = (d, theta)\n                    best_predictions = predictions\n\n        if min_error == 0:\n            alpha = float('inf')\n        else:\n            alpha = 0.5 * math.log((1 - min_error) / min_error)\n\n        # Update the ensemble\n        stumps.append(best_stump)\n        alphas.append(alpha)\n\n        # Update weights\n        weights *= np.exp(-alpha * y_train * best_predictions)\n        weights /= np.sum(weights)\n\n        # Check if the training error is within the desired threshold\n        ensemble_predictions = np.sum([alpha * decision_stump_predict(x, d, theta) for d, theta in stumps], axis=0)\n        ensemble_sign = np.sign(ensemble_predictions)\n        if np.sum(ensemble_sign != y_train) / n_samples <= epsilon:\n            break\n\n    # Make predictions on the test set\n    test_predictions = np.sum([alpha * decision_stump_predict(x, d, theta) for d, theta in stumps], axis=0)\n    test_sign = np.sign(test_predictions).astype(int)\n\n    return test_sign.tolist()\n```\n\nThis script implements the AdaBoost algorithm with one-dimensional decision stumps as described. The function `adaboost_1d_predict` takes training and test data and an optional `epsilon` parameter to determine when to stop training. It returns the predicted labels for the test set."}
{"task_id": 25, "completion_id": 0, "completion": "```\nimport numpy as np\nimport math\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    # Compute the Euclidean distance matrix between X_train and X_test\n    # ||x_i - z||^2 for all x_i in X_train and z in X_test\n    distance_matrix = np.sum(X_train**2, axis=1, keepdims=True) + np.sum(X_test**2, axis=1) - 2 * np.dot(X_train, X_test.T)\n    \n    # Compute the Gaussian kernel matrix\n    kernel_matrix = np.exp(-gamma * distance_matrix)\n    \n    # Compute the decision function g(z) for all z in X_test\n    g_z = np.sum(alpha * y_train * kernel_matrix, axis=0) + b\n    \n    # Predict the labels based on the sign of g(z)\n    predictions = np.sign(g_z).astype(int)\n    \n    # Ensure that the predictions are either 1 or -1 (np.sign(0) can be 0)\n    predictions[predictions == 0] = 1\n    \n    return predictions.tolist()\n```\n\nThis script defines the `gaussian_svm_predict` function, which computes the predicted labels for test samples using a pre-trained Gaussian-kernel SVM. The function leverages NumPy for efficient computation of the necessary matrix operations to follow the provided mathematical formulation."}
{"task_id": 28, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    # Convert the input list of lists to a numpy array\n    X = np.array(X)\n    m, n = X.shape\n    \n    # Check if k is within the valid range\n    if k < 1 or k > min(m, n):\n        return -1\n    \n    # Perform truncated SVD\n    U, s, Vt = np.linalg.svd(X, full_matrices=False)\n    \n    # Truncate the SVD components to rank k\n    U_k = U[:, :k]\n    s_k = s[:k]\n    Vt_k = Vt[:k, :]\n    \n    # Reconstruct the matrix\n    X_hat = U_k @ np.diag(s_k) @ Vt_k\n    \n    # Calculate the mean squared error\n    mse = np.mean((X - X_hat) ** 2)\n    \n    # Round the reconstructed matrix and the MSE to four decimals\n    X_hat_rounded = np.round(X_hat, 4).tolist()\n    mse_rounded = np.round(mse, 4)\n    \n    return X_hat_rounded, mse_rounded\n```\n\nThis script defines the `linear_autoencoder` function, which performs the required operations to reconstruct the input matrix using truncated SVD and calculates the mean squared error. The function checks if the provided `k` is within the valid range and returns `-1` if it is not. The reconstructed matrix and the MSE are rounded to four decimal places before being returned."}
{"task_id": 29, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                           y_train: list[float] | np.ndarray,\n                           x_query: float,\n                           epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    \n    # Sort the training data by the feature values\n    sort_indices = np.argsort(x_train)\n    x_train_sorted = x_train[sort_indices]\n    y_train_sorted = y_train[sort_indices]\n    \n    # Initialize residuals\n    residuals = y_train_sorted.copy()\n    \n    # Initialize the ensemble prediction\n    ensemble_prediction = np.zeros_like(y_train_sorted)\n    \n    # Calculate initial RSS\n    current_rss = np.sum(residuals ** 2)\n    \n    # Iterate until the RSS is below the tolerance\n    while current_rss > epsilon:\n        best_rss = float('inf')\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n        \n        # Consider all possible split points\n        for i in range(len(x_train_sorted) - 1):\n            split_point = (x_train_sorted[i] + x_train_sorted[i + 1]) / 2\n            \n            # Calculate c1 and c2\n            left_indices = x_train_sorted <= split_point\n            right_indices = x_train_sorted > split_point\n            \n            c1 = np.mean(residuals[left_indices]) if np.any(left_indices) else 0\n            c2 = np.mean(residuals[right_indices]) if np.any(right_indices) else 0\n            \n            # Calculate the RSS for this split\n            predicted_left = c1 * left_indices\n            predicted_right = c2 * right_indices\n            rss = np.sum((residuals - (predicted_left + predicted_right)) ** 2)\n            \n            # Update best split if this one is better\n            if rss < best_rss:\n                best_rss = rss\n                best_split = split_point\n                best_c1 = c1\n                best_c2 = c2\n        \n        # Add the best stump to the ensemble\n        ensemble_prediction[left_indices] += best_c1\n        ensemble_prediction[right_indices] += best_c2\n        \n        # Update residuals\n        residuals = y_train_sorted - ensemble_prediction\n        \n        # Update the current RSS\n        current_rss = best_rss\n    \n    # Predict the query point\n    prediction = np.zeros_like(ensemble_prediction)\n    for split_point, c1, c2 in zip(x_train_sorted, ensemble_prediction, ensemble_prediction):\n        if x_query <= split_point:\n            prediction += c1\n        else:\n            prediction += c2\n    \n    # Since we are using a decision stump, we only need the last prediction value\n    final_prediction = prediction[0]\n    \n    return round(final_prediction, 4)\n```\n\nThis script implements the one-dimensional gradient boosting regressor using decision stumps as described in the task. The function `predict_boosting_tree` sorts the training data, iteratively selects the best stump to minimize the residual sum of squares, and predicts the target for a given query point. The prediction is rounded to four decimal places as required."}
{"task_id": 34, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None) -> np.ndarray:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s based on the specified shape and sparsity.\n    \n    Parameters:\n    shape (tuple[int, ...]): The desired shape of the output tensor.\n    sparsity (float): The probability of generating a 1.0 in the tensor. Must be in the range [0, 1].\n    seed (int | None): An optional seed value for reproducibility.\n    \n    Returns:\n    np.ndarray: A NumPy array filled with 0.0s and 1.0s with the specified sparsity.\n                If sparsity is outside the range [0, 1], returns -1.\n    \"\"\"\n    if not (0 <= sparsity <= 1):\n        return -1\n    \n    if seed is not None:\n        np.random.seed(seed)\n    \n    random_tensor = np.random.rand(*shape)\n    binary_tensor = (random_tensor < sparsity).astype(float)\n    \n    return binary_tensor\n\n# Example usage:\n# result = random_binary_tensor((2, 3), sparsity=0.3, seed=42)\n# print(result)\n```\n\nThis script defines the `random_binary_tensor` function, which generates a NumPy array of the specified shape filled with 0.0s and 1.0s based on the given sparsity and seed. The function checks if the sparsity is within the valid range and uses a random generator to create the binary tensor. If the sparsity is out of range, it returns -1."}
{"task_id": 39, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    # Get the column values\n    column_values = data[:, d]\n    \n    # Number of samples\n    n = len(column_values)\n    \n    # Find the median index\n    median_index = n // 2\n    \n    # Use argpartition to find the median index in O(n) time\n    indices = np.argpartition(column_values, median_index)\n    \n    # The pivot index in the original data\n    pivot = indices[median_index]\n    \n    # Get the left and right indices\n    left_indices = indices[:median_index]\n    right_indices = indices[median_index + 1:]\n    \n    # Sort the left and right indices to make the output deterministic\n    left = sorted(left_indices)\n    right = sorted(right_indices)\n    \n    return pivot, left, right\n\n# Example usage:\nif __name__ == \"__main__\":\n    data = np.array([\n        [3, 1],\n        [1, 2],\n        [4, 3],\n        [2, 4],\n        [5, 5]\n    ])\n    d = 0\n    pivot, left, right = get_split(data, d)\n    print(f\"Pivot: {pivot}, Left: {left}, Right: {right}\")\n```\n\nThis script defines the `get_split` function as specified, using `numpy.argpartition` to efficiently find the median index and partition the data. The function returns the pivot index and two sorted lists of indices for the left and right partitions. The example usage at the bottom demonstrates how to use the function with a sample dataset."}
{"task_id": 40, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    # Assertions for pre-conditions\n    assert x.ndim == 1, \"Input signal must be one-dimensional.\"\n    assert stride > 0, \"Stride must be a positive integer.\"\n    assert len(x) >= frame_width, \"Signal length must be at least the frame width.\"\n\n    # Calculate the number of frames\n    n_frames = (len(x) - frame_width) // stride + 1\n\n    # Create the strided array\n    framed_signal = as_strided(\n        x,\n        shape=(n_frames, frame_width),\n        strides=(x.strides[0] * stride, x.strides[0])\n    )\n\n    # Set the writeable flag\n    framed_signal.flags.writeable = writeable if x.flags.writeable else False\n\n    return framed_signal\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Create a sample signal\n    x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], dtype=np.float32)\n\n    # Define frame width and stride\n    frame_width = 4\n    stride = 2\n\n    # Get frames\n    frames = to_frames(x, frame_width, stride, writeable=False)\n    print(\"Framed Signal:\\n\", frames)\n\n    # Check if the frames are a view\n    print(\"Is view:\", np.shares_memory(x, frames))\n```\n\nThis script defines the `to_frames` function, which converts a one-dimensional signal into overlapping frames using stride manipulation. The function checks for the necessary pre-conditions and returns a view on the original array, ensuring that the resulting frames are either read-only or writeable based on the `writeable` parameter. The example usage at the bottom demonstrates how to use the function and verifies that the resulting frames are indeed a view of the original signal."}
{"task_id": 48, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Convert input to numpy array if it's a list of lists\n    if isinstance(X, list):\n        X = np.array(X)\n    \n    # Check if the matrix is two-dimensional\n    if X.ndim != 2:\n        return False\n    \n    # Check if all elements are between 0 and 1\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    \n    # Check if each row sums to 1 within a tolerance of 1e-8\n    row_sums = np.sum(X, axis=1)\n    return np.allclose(row_sums, 1, atol=1e-8)\n\n# Example usage:\n# matrix = [[0.1, 0.9], [0.5, 0.5]]\n# print(is_stochastic(matrix))  # Should return True\n```\n\nThis script defines the `is_stochastic` function, which checks if a given matrix is row-stochastic according to the specified criteria. It handles both list of lists and `numpy.ndarray` inputs, ensuring that the matrix is two-dimensional, all elements are within the range [0, 1], and each row sums to 1 within a numerical tolerance of `1e-8`."}
{"task_id": 55, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n, d = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    \n    for iteration in range(max_iter):\n        # Mini-batch processing\n        start_idx = (iteration * batch_size) % n\n        end_idx = (start_idx + batch_size) % n\n        \n        if start_idx < end_idx:\n            X_batch = X[start_idx:end_idx]\n            y_batch = y[start_idx:end_idx]\n        else:\n            X_batch = np.vstack((X[start_idx:], X[:end_idx]))\n            y_batch = np.hstack((y[start_idx:], y[:end_idx]))\n        \n        # Compute the gradient\n        g = (1 / len(X_batch)) * X_batch.T @ (X_batch @ w - y_batch)\n        \n        # Update the running average of squared gradients\n        s = rho * s + (1 - rho) * (g ** 2)\n        \n        # Update the weights\n        w -= eta * g / (np.sqrt(s) + eps_station)\n        \n        # Check for early stopping\n        if np.linalg.norm(g) < epsilon:\n            break\n    \n    return [round(weight, 4) for weight in w.tolist()]\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y = np.array([3, 5, 7, 9])\n# print(rms_prop(X, y))\n```\n\nThis script defines the `rms_prop` function which implements the RMSprop optimization algorithm for linear regression. It processes the data in mini-batches and updates the weights using the RMSprop update rule. The function stops early if the gradient norm is below a specified threshold or if the maximum number of iterations is reached. The final weights are returned as a list of floats, each rounded to four decimal places."}
{"task_id": 56, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n    \"\"\"Compute the SoftPlus activation function or its derivative.\n    \n    Args:\n        x (float, list, or np.ndarray): Input values.\n        deriv (bool): If True, compute the derivative (sigmoid function) instead.\n    \n    Returns:\n        float or list: SoftPlus(x) or its gradient, rounded to 4 decimal places.\n    \"\"\"\n    # Convert input to a numpy array for element-wise operations\n    x_arr = np.array(x, dtype=float)\n    \n    if deriv:\n        # Compute the derivative (sigmoid function)\n        gradient = 1 / (1 + np.exp(-x_arr))\n        result = np.round(gradient, 4)\n    else:\n        # Compute SoftPlus using a numerically stable formulation\n        softplus_values = np.where(x_arr > 0, np.log1p(np.exp(-x_arr)) + x_arr, np.log1p(np.exp(x_arr)))\n        result = np.round(softplus_values, 4)\n    \n    # Return a float if the input was a scalar, otherwise return a list\n    if isinstance(x, (int, float)):\n        return float(result[0])\n    else:\n        return result.tolist()\n\n# Example usage:\n# print(softplus(2.0))  # SoftPlus of 2.0\n# print(softplus([-1.0, 0.0, 1.0], deriv=True))  # Gradient of SoftPlus for [-1.0, 0.0, 1.0]\n```\n\nThis script defines the `softplus` function which computes the SoftPlus activation function or its derivative based on the `deriv` flag. It uses `np.log1p` to ensure numerical stability when `x` is large. The results are rounded to the nearest 4th decimal place and returned as a Python list or a float if the input is a scalar."}
{"task_id": 58, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    if N < 1:\n        raise ValueError(\"N must be at least 1\")\n    \n    # Create N-gram counts\n    ngram_counts = Counter(zip(*[corpus[i:] for i in range(N)]))\n    if N > 1:\n        # Create (N-1)-gram counts\n        n_minus_1_gram_counts = Counter(zip(*[corpus[i:] for i in range(N-1)]))\n    \n    log_prob = 0.0\n    \n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i+N])\n        if N == 1:\n            count = ngram_counts[ngram[0]]\n            total_count = len(corpus)\n        else:\n            count = ngram_counts[ngram]\n            prefix = ngram[:-1]\n            total_count = n_minus_1_gram_counts[prefix]\n        \n        if count == 0 or total_count == 0:\n            return float('-inf')\n        \n        prob = count / total_count\n        log_prob += np.log(prob)\n    \n    return round(log_prob, 4)\n\n# Example usage:\n# corpus = [\"the\", \"cat\", \"sat\", \"on\", \"the\", \"mat\", \"the\", \"cat\", \"sat\", \"on\", \"the\", \"log\"]\n# sequence = [\"the\", \"cat\", \"sat\"]\n# N = 3\n# print(unsmoothed_ngram_log_prob(corpus, sequence, N))  # Output: some log-probability value\n```\n\nThis script defines the function `unsmoothed_ngram_log_prob` which calculates the log-probability of a given sequence under an unsmoothed Maximum-Likelihood Estimation (MLE) N-gram model trained on a provided corpus. The function handles both unigrams (N=1) and higher-order n-grams (N>1) and returns `float('-inf')` if any required n-gram count is zero. The result is rounded to four decimal places."}
{"task_id": 62, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef lasso_regression(X: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\", degree: int, reg_factor: float, n_iterations: int = 1000, tol: float = 1e-6) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    X = np.array(X)\n    y = np.array(y)\n    \n    # Build the design matrix with polynomial features\n    m = len(X)\n    design_matrix = np.vander(X, degree + 1, increasing=True)\n    \n    # Initialize weights\n    weights = np.zeros(degree + 1)\n    \n    # Function to compute the soft threshold\n    def soft_threshold(rho, lambd):\n        return np.sign(rho) * max(abs(rho) - lambd, 0)\n    \n    # Coordinate descent\n    for _ in range(n_iterations):\n        weights_old = np.copy(weights)\n        \n        # Update the bias term exactly\n        residuals = y - design_matrix @ weights\n        weights[0] = np.mean(residuals)\n        \n        # Update the other coefficients\n        for j in range(1, degree + 1):\n            Xj = design_matrix[:, j]\n            rho = Xj.T @ (residuals + weights[j] * Xj)\n            weights[j] = soft_threshold(rho, reg_factor) / (Xj.T @ Xj)\n            \n            # Update residuals\n            residuals = y - design_matrix @ weights\n        \n        # Check for convergence\n        if np.max(np.abs(weights - weights_old)) < tol:\n            break\n    \n    return [round(w, 4) for w in weights]\n\n# Example usage:\n# X = [1, 2, 3, 4, 5]\n# y = [2, 3, 5, 7, 11]\n# degree = 2\n# reg_factor = 0.1\n# coefficients = lasso_regression(X, y, degree, reg_factor)\n# print(coefficients)\n```\nThis script defines the `lasso_regression` function that performs univariate Lasso regression with polynomial features using coordinate descent. The function takes in the input data `X`, target values `y`, the polynomial degree, the regularization strength, and optional parameters for the number of iterations and tolerance for early stopping. It returns the learned coefficients rounded to four decimal places."}
{"task_id": 63, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Compute the backward probability vector \u03b2_t for a given time index t in a Hidden Markov Model.\n\n    Parameters:\n    A (list[list[float]]): Transition probability matrix of shape (N, N).\n    B (list[list[float]]): Emission probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices of length T.\n    t (int): Time index for which to compute the backward probability vector (0 \u2264 t < T).\n\n    Returns:\n    list[float]: List of N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    N = len(A)  # Number of states\n    T = len(obs)  # Length of the observation sequence\n\n    # Initialize the backward probabilities at time T-1\n    beta = np.ones(N, dtype=float)\n\n    # Compute the backward probabilities from time T-2 to t\n    for time in range(T-2, t-1, -1):\n        new_beta = np.zeros(N, dtype=float)\n        for i in range(N):\n            for j in range(N):\n                new_beta[i] += A[i][j] * B[j][obs[time+1]] * beta[j]\n        beta = new_beta\n\n    # Return the backward probabilities at time t rounded to 4 decimal places\n    return [round(prob, 4) for prob in beta]\n\n# Example usage:\n# A = [[0.7, 0.3], [0.4, 0.6]]\n# B = [[0.1, 0.4, 0.5], [0.7, 0.2, 0.1]]\n# obs = [0, 1, 2]\n# t = 1\n# print(backward_beta(A, B, obs, t))  # Output should be the backward probabilities at time t=1\n```\n\nThis script defines the `backward_beta` function to compute the backward probability vector \\(\\beta_t\\) for a given time index \\(t\\) in a Hidden Markov Model. The function takes the transition probability matrix \\(A\\), emission probability matrix \\(B\\), the list of observations `obs`, and the time index `t` as inputs and returns a list of backward probabilities rounded to four decimal places."}
{"task_id": 65, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    # Check for empty input lists\n    if not A or not B or not pi or not obs:\n        return 0.0\n    \n    # Convert lists to numpy arrays for easier manipulation\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    \n    N = len(A)  # Number of states\n    T = len(obs)  # Length of the observation sequence\n    \n    # Initialize the beta matrix\n    beta = np.zeros((T, N))\n    \n    # Base case: beta_{T-1}(i) = 1 for all i\n    beta[T-1, :] = 1\n    \n    # Fill the beta matrix using the recursive formula\n    for t in range(T-2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t+1]] * beta[t+1, :])\n    \n    # Calculate the sequence probability\n    prob = np.sum(pi * B[:, obs[0]] * beta[0, :])\n    \n    # Return the probability rounded to 6 decimal places\n    return round(prob, 6)\n```"}
{"task_id": 69, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # Validate input dimensions\n    n = len(S)\n    if not A or len(A) != n or any(len(row) != n for row in A):\n        return -1\n    if not B or not all(isinstance(row, list) and len(row) == len(B[0]) for row in B):\n        return -1\n    m = len(B[0])\n    if not observations:\n        return -1\n    \n    # Validate observation indices\n    if any(obs < 0 or obs >= m for obs in observations):\n        return -1\n    \n    # Convert inputs to numpy arrays for easier manipulation\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    \n    # Initialize the forward variables\n    T = len(observations)\n    alpha = np.zeros((T, n))\n    \n    # Initialization step\n    alpha[0] = S * B[:, observations[0]]\n    \n    # Recursion step\n    for t in range(1, T):\n        alpha[t] = np.dot(alpha[t-1], A) * B[:, observations[t]]\n    \n    # Termination step\n    probability = np.sum(alpha[T-1])\n    \n    return round(probability, 4)\n```\n\nThis script defines the `forward_algorithm` function that calculates the likelihood of a given sequence of observations using the forward algorithm for Hidden Markov Models. It includes input validation to ensure the dimensions are correct and that all observation indices are within the valid range. If any input is invalid, it returns -1. Otherwise, it computes the sequence likelihood and returns it rounded to four decimal places."}
{"task_id": 70, "completion_id": 0, "completion": "```\npython\nfrom collections import Counter, defaultdict\n\nclass FPNode:\n    def __init__(self, item, count=0, parent=None):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.link = None\n\nclass FPTree:\n    def __init__(self, root_item='null', root_count=0):\n        self.root = FPNode(root_item, root_count)\n        self.headers = {}\n\n    def add_transaction(self, transaction, support):\n        pointer = self.root\n        for item in transaction:\n            if item in pointer.children:\n                pointer = pointer.children[item]\n                pointer.count += support\n            else:\n                new_node = FPNode(item, support, pointer)\n                pointer.children[item] = new_node\n                pointer = new_node\n                if item in self.headers:\n                    last_node = self.headers[item]\n                    while last_node.link is not None:\n                        last_node = last_node.link\n                    last_node.link = pointer\n                else:\n                    self.headers[item] = pointer\n\ndef construct_fptree(transactions, min_support):\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_support}\n    if not frequent_items:\n        return None, {}\n    \n    frequent_items = {item: frequent_items[item] for item in sorted(frequent_items, key=frequent_items.get, reverse=True)}\n    \n    fptree = FPTree()\n    for transaction in transactions:\n        transaction = [item for item in transaction if item in frequent_items]\n        transaction.sort(key=lambda x: frequent_items[x], reverse=True)\n        fptree.add_transaction(transaction, 1)\n    \n    return fptree, frequent_items\n\ndef find_prefix_path(tree, base_path):\n    path = []\n    condition_node = tree.headers[base_path[-1]]\n    while condition_node is not None:\n        prefix_path = []\n        pointer = condition_node.parent\n        while pointer.parent is not None:\n            prefix_path.append(pointer.item)\n            pointer = pointer.parent\n        if prefix_path:\n            path.append((prefix_path, condition_node.count))\n        condition_node = condition_node.link\n    return path\n\ndef mine_tree(tree, prefix, min_support, frequent_itemsets):\n    if tree.headers:\n        for base_path in sorted(tree.headers.keys(), key=lambda x: tree.headers[x].count):\n            new_frequent_set = prefix + [base_path]\n            new_frequent_set.sort()\n            frequent_itemsets[tuple(new_frequent_set)] = tree.headers[base_path].count\n            \n            conditional_paths = find_prefix_path(tree, [base_path])\n            conditional_tree = FPTree()\n            conditional_item_counts = defaultdict(int)\n            for path, count in conditional_paths:\n                conditional_tree.add_transaction(path, count)\n                for item in path:\n                    conditional_item_counts[item] += count\n            \n            conditional_tree_filtered = FPTree()\n            for path, count in conditional_paths:\n                filtered_path = [item for item in path if conditional_item_counts[item] >= min_support]\n                if filtered_path:\n                    conditional_tree_filtered.add_transaction(filtered_path, count)\n            \n            mine_tree(conditional_tree_filtered, new_frequent_set, min_support, frequent_itemsets)\n\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    if not transactions:\n        return []\n    \n    fptree, frequent_items = construct_fptree(transactions, min_support)\n    if fptree is None:\n        return []\n    \n    frequent_itemsets = {}\n    mine_tree(fptree, [], min_support, frequent_itemsets)\n    \n    result = [list(itemset) for itemset in frequent_itemsets]\n    result.sort(key=lambda x: (len(x), x))\n    return result\n\n# Example usage:\n# transactions = [['milk', 'bread', 'butter'], ['bread', 'butter'], ['milk', 'bread'], ['bread', 'butter'], ['bread', 'butter', 'beer'], ['bread', 'beer', 'cheese']]\n# min_support = 2\n# print(fp_growth(transactions, min_support))\n```\n\nThis script implements the FP-Growth algorithm to find frequent itemsets in a given list of transactions. The function `fp_growth` takes a list of transactions and a minimum support threshold as input and returns a list of frequent itemsets, sorted as specified. The script includes helper classes and functions to construct the FP-tree, mine the tree, and find prefix paths."}
{"task_id": 75, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    # Check if k is valid\n    if k <= 0 or k > len(X_train):\n        return -1\n\n    # Convert lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    # List to store predictions\n    predictions = []\n\n    # Iterate over each test sample\n    for x_test in X_test:\n        # Compute squared Euclidean distances from the test sample to all training samples\n        distances = np.sum((X_train - x_test) ** 2, axis=1)\n\n        # Get the indices of the k nearest neighbors\n        nearest_indices = np.argsort(distances)[:k]\n\n        # Get the labels of the k nearest neighbors\n        k_nearest_labels = y_train[nearest_indices]\n\n        # Count the occurrences of each label\n        label_counts = Counter(k_nearest_labels)\n\n        # Find the label with the highest count (smallest label in case of tie)\n        predicted_label = min(label_counts, key=lambda x: (-label_counts[x], x))\n\n        # Append the predicted label to the predictions list\n        predictions.append(predicted_label)\n\n    return predictions\n```\n\nThis script defines a `knn_predict` function that implements the k-Nearest Neighbors algorithm as described. It checks for valid `k`, computes squared Euclidean distances, finds the k-nearest neighbors, and predicts the class label based on majority voting, resolving ties by choosing the smallest class label."}
{"task_id": 76, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    \n    # Define a small epsilon for numerical stability\n    epsilon = np.finfo(float).eps\n    \n    # Calculate the loss using the formula\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    \n    # Return the loss rounded to four decimal places\n    return round(loss, 4)\n\n# Example usage:\n# y = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n# y_pred = [[0.9, 0.05, 0.05], [0.1, 0.8, 0.1], [0.05, 0.05, 0.9]]\n# print(cross_entropy_loss(y, y_pred))  # Output should be a float rounded to 4 decimal places\n```"}
{"task_id": 77, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef relu(Z: np.ndarray) -> np.ndarray:\n    \"\"\"Rectified Linear Unit activation function.\"\"\"\n    return np.maximum(0, Z)\n\ndef sigmoid(Z: np.ndarray) -> np.ndarray:\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\n\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A_prev = X\n    L = len(parameters) // 2  # Number of layers in the network\n\n    # Implement [LINEAR -> RELU]*(L-1). Add \"cache\" to the \"caches\" list.\n    for l in range(1, L):\n        Wl = parameters[f'W{l}']\n        bl = parameters[f'b{l}']\n        Zl = np.dot(Wl, A_prev) + bl\n        Al = relu(Zl)\n        caches.append((A_prev, Wl, bl, Zl))\n        A_prev = Al\n\n    # Implement LINEAR -> SIGMOID. Add \"cache\" to the \"caches\" list.\n    WL = parameters[f'W{L}']\n    bL = parameters[f'b{L}']\n    ZL = np.dot(WL, A_prev) + bL\n    AL = sigmoid(ZL)\n    caches.append((A_prev, WL, bL, ZL))\n\n    # Convert AL to a plain Python list and round to 4 decimal places\n    AL_rounded = np.round(AL, 4).tolist()\n\n    return AL_rounded, caches\n```\n\nThis script defines the forward propagation for an L-layer neural network with ReLU activations in the hidden layers and a sigmoid activation in the output layer. It also collects caches for each layer, which can be useful for backpropagation. The final output, `AL`, is rounded to four decimal places and converted to a plain Python list before being returned."}
{"task_id": 81, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    # Ensure A2 is clipped to the range [1e-15, 1-1e-15]\n    A2 = np.clip(A2, 1e-15, 1 - 1e-15)\n    \n    # Number of samples\n    m = Y.shape[0]\n    \n    # Compute the binary cross-entropy cost\n    cost = -1/m * np.sum(Y * np.log(A2) + (1 - Y) * np.log(1 - A2))\n    \n    # Return the cost rounded to 6 decimal places\n    return np.round(cost, 6)\n\n# Example usage:\n# A2 = np.array([0.9, 0.1, 0.8])\n# Y = np.array([1, 0, 1])\n# print(compute_cost(A2, Y))  # Expected output: 0.403357\n```\n\nThis script defines the `compute_cost` function, which calculates the binary cross-entropy cost between predicted probabilities `A2` and ground-truth labels `Y`. The function clips the predicted probabilities to avoid log(0) issues and returns the cost rounded to six decimal places."}
{"task_id": 82, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | \"np.ndarray\", epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    n = len(Q)\n    greedy_index = np.argmax(Q)  # First occurrence in case of ties\n    \n    base_prob = epsilon / n\n    greedy_prob = 1 - epsilon + base_prob\n    \n    probabilities = np.full(n, base_prob)\n    probabilities[greedy_index] = greedy_prob\n    \n    # Ensure the sum is exactly 1\n    probabilities = probabilities / np.sum(probabilities)\n    \n    # Round to 4 decimal places\n    probabilities = np.round(probabilities, 4)\n    \n    # Ensure the sum is exactly 1 after rounding\n    while not np.isclose(np.sum(probabilities), 1, atol=1e-12):\n        # Adjust the highest probability to ensure the sum is 1\n        max_index = np.argmax(probabilities)\n        diff = 1 - np.sum(probabilities)\n        probabilities[max_index] += diff\n    \n    return probabilities.tolist()\n\n# Example usage\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1\nprint(epsilon_soft(Q, epsilon))  # Output: [0.925, 0.025, 0.025, 0.025]\n```"}
{"task_id": 86, "completion_id": 0, "completion": "```\npython\nfrom collections import Counter\n\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    # Number of samples is the length of any inner list\n    num_samples = len(predictions[0])\n    \n    # Initialize a list to store the final predictions\n    final_predictions = []\n    \n    # Iterate over each sample (column-wise)\n    for sample_index in range(num_samples):\n        # Extract votes for the current sample from all trees\n        votes = [tree_predictions[sample_index] for tree_predictions in predictions]\n        \n        # Count the votes for each class label\n        vote_counts = Counter(votes)\n        \n        # Find the class label with the highest vote count\n        # In case of a tie, min() will select the smallest label\n        most_common_votes = vote_counts.most_common()\n        max_count = most_common_votes[0][1]\n        \n        # Filter labels with the maximum count and select the smallest one\n        best_label = min(label for label, count in most_common_votes if count == max_count)\n        \n        # Append the best label to the final predictions\n        final_predictions.append(best_label)\n    \n    return final_predictions\n\n# Example usage:\n# predictions = [\n#     [0, 1, 0, 1],\n#     [0, 1, 1, 1],\n#     [1, 1, 0, 0]\n# ]\n# print(aggregate_random_forest_votes(predictions))  # Output: [0, 1, 0, 1]\n```\n\nThis script defines the `aggregate_random_forest_votes` function, which processes the predictions from multiple decision trees and aggregates them using a majority vote. In case of ties, it selects the smallest label. The example usage at the bottom demonstrates how the function can be used."}
{"task_id": 88, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    # Convert input to a NumPy array\n    z_array = np.array(z, dtype=float)\n    \n    # Compute the softplus using np.logaddexp for numerical stability\n    softplus_values = np.logaddexp(0.0, z_array)\n    \n    # Round the values to 4 decimal places\n    rounded_values = np.round(softplus_values, 4)\n    \n    # Convert the result to a list if the input was not a scalar\n    if isinstance(z, (list, np.ndarray)):\n        return rounded_values.tolist()\n    else:\n        return float(rounded_values)\n\n# Example usage\nz = np.array([-1000, 0, 3])\nprint(softplus(z))  # Output: [0.0, 0.6931, 3.0486]\n```\n\nThis script defines the `softplus` function, which computes the softplus activation for a given input using the numerically stable `np.logaddexp` function. It handles scalar, list, and NumPy array inputs, rounding the results to four decimal places and converting array-like inputs to a Python list."}
{"task_id": 90, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Check if policy has ev_estimates and if it is not empty\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    \n    # Extract true expected values and policy estimates\n    true_evs = bandit['arm_evs']\n    estimates = policy['ev_estimates']\n    \n    # Sort estimates by arm index and extract the values\n    sorted_estimates = [estimates[i] for i in sorted(estimates.keys())]\n    \n    # Calculate squared errors\n    squared_errors = [(true - est) ** 2 for true, est in zip(true_evs, sorted_estimates)]\n    \n    # Compute mean-squared error\n    mse_value = np.mean(squared_errors)\n    \n    # Return the result rounded to 4 decimal places\n    return round(mse_value, 4)\n\n# Example usage:\nbandit = {\"arm_evs\": [0.5, 0.2, 0.9]}\npolicy = {\"ev_estimates\": {0: 0.4, 1: 0.25, 2: 0.8}}\n\nprint(mse(bandit, policy))  # Output should be 0.0075\n```"}
{"task_id": 96, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # Step 1: Build the vocabulary and n-gram frequency tables\n    vocab = set()\n    ngram_counts = defaultdict(Counter)\n    \n    for sentence in corpus:\n        words = sentence.split()\n        vocab.update(words)\n        for n in range(1, N + 1):\n            for i in range(len(words) - n + 1):\n                ngram = tuple(words[i:i + n])\n                ngram_counts[n][ngram] += 1\n    \n    # Add <UNK> to the vocabulary\n    vocab.add(\"<UNK>\")\n    V = len(vocab)\n    \n    # Step 2: Handle the target sentence\n    target_words = sequence.split()\n    if len(target_words) < N:\n        return 0.0\n    \n    log_prob = 0.0\n    \n    for n in range(1, N + 1):\n        for i in range(len(target_words) - n + 1):\n            ngram = tuple(target_words[i:i + n])\n            context = ngram[:-1]\n            \n            # Handle unknown words by replacing them with <UNK>\n            if ngram in ngram_counts[n]:\n                count_ngram = ngram_counts[n][ngram]\n            else:\n                count_ngram = 0\n                ngram = ngram[:-1] + (\"<UNK>\",)\n            \n            if context in ngram_counts[n - 1]:\n                count_context = ngram_counts[n - 1][context]\n            else:\n                count_context = 0\n            \n            # Additive smoothing\n            prob = (count_ngram + K) / (count_context + K * V)\n            log_prob += math.log(prob)\n    \n    return round(log_prob, 4)\n\n# Example usage:\n# corpus = [\"this is a test\", \"this is only a test\"]\n# sequence = \"this is a test\"\n# N = 2\n# print(additive_ngram_log_prob(corpus, sequence, N))  # Example output\n```\n\nThis script defines the `additive_ngram_log_prob` function, which computes the additive-smoothed log-probability of a given sentence based on a training corpus and a specified N-gram order. The function handles unknown words by mapping them to the `<UNK>` token and uses Laplace smoothing to estimate probabilities."}
{"task_id": 108, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that implements the regularized Alternating Least Squares (ALS) algorithm for matrix factorization as described in the task.\n\n```python\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    N, M = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    \n    def compute_loss():\n        return np.linalg.norm(X - W @ H, 'fro')**2 + alpha * (np.linalg.norm(W, 'fro')**2 + np.linalg.norm(H, 'fro')**2)\n    \n    for _ in range(max_iter):\n        # Fix H and solve for W\n        for i in range(N):\n            W[i, :] = np.linalg.solve(H @ H.T + alpha * np.eye(K), H @ X[i, :])\n        \n        # Fix W and solve for H\n        for j in range(M):\n            H[:, j] = np.linalg.solve(W.T @ W + alpha * np.eye(K), W.T @ X[:, j])\n        \n        loss = compute_loss()\n        if loss < tol:\n            break\n    \n    X_hat = W @ H\n    return X_hat.round(4).tolist()\n\n# Example usage:\n# X = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n# K = 2\n# result = als_factorization(X, K)\n# print(result)\n```\n\n### Explanation:\n1. **Initialization**: The factor matrices `W` and `H` are initialized with random values using a fixed seed (0) for reproducibility.\n2. **Loss Function**: The regularized Frobenius reconstruction loss is computed using the `compute_loss` function.\n3. **Alternating Least Squares (ALS)**:\n   - For each iteration, `W` is updated by fixing `H` and solving the least squares problem for each row of `W`.\n   - Similarly, `H` is updated by fixing `W` and solving the least squares problem for each column of `H`.\n4. **Convergence Check**: The algorithm checks if the loss is below the specified tolerance (`tol`). If so, it stops early.\n5. **Output**: The reconstructed matrix `X_hat` is rounded to 4 decimal places and converted to a list of lists before returning.\n\nThis script should work for any real-valued matrix `X` and given rank `K`, applying the regularized ALS algorithm as specified."}
{"task_id": 109, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    \n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n    \n    # K-Means++ initialization\n    centroids = [X[np.random.choice(X.shape[0])]]\n    \n    for _ in range(1, K):\n        distances = np.array([min(np.linalg.norm(x - c) for c in centroids) for x in X])\n        probabilities = distances / distances.sum()\n        next_centroid = X[np.random.choice(X.shape[0], p=probabilities)]\n        centroids.append(next_centroid)\n    \n    centroids = np.array(centroids)\n    \n    for _ in range(max_iter):\n        # Assignment step\n        labels = np.array([np.argmin(np.linalg.norm(x - centroids, axis=1)) for x in X])\n        \n        # Update step\n        new_centroids = np.array([X[labels == k].mean(axis=0) if np.any(labels == k) else centroids[k] for k in range(K)])\n        \n        # Check for convergence\n        if np.all(np.isclose(centroids, new_centroids, atol=1e-4)):\n            break\n        \n        centroids = new_centroids\n    \n    # Sort centroids by the first coordinate, using the full tuple as a secondary key\n    sorted_centroids = sorted(centroids, key=lambda c: (c[0], tuple(c)))\n    \n    # Round to 4 decimal places\n    return [list(np.round(c, 4)) for c in sorted_centroids]\n\n# Example usage:\n# X = np.array([[1, 2], [1, 4], [1, 0],\n#               [10, 2], [10, 4], [10, 0]])\n# K = 2\n# print(kmeans(X, K, random_state=42))\n```\n\nThis script implements the K-Means clustering algorithm with K-Means++ initialization as described. It includes setting the random seed for reproducibility, selecting initial centroids using K-Means++, and performing Lloyd's iterations until convergence or the maximum number of iterations is reached. The final centroids are rounded to four decimal places and sorted by their first coordinate."}
{"task_id": 111, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes every character of the input string using a provided vocabulary.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text[:time_steps]]\n    # If the input is shorter than TIME_STEPS, append padding tokens (0)\n    return encoded + [0] * (time_steps - len(encoded)) if len(encoded) < time_steps else encoded\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list/array of integer ids back to text.\"\"\"\n    return ''.join(inverse_vocab.get(idx, '') for idx in indices if idx != 0)\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes the raw text, runs the model, and decodes the prediction.\"\"\"\n    # Encode the input text\n    encoded_input = np.array([string_to_int(text, TIME_STEPS, input_vocabulary)])\n    # Get model predictions\n    predictions = model.predict(encoded_input)\n    # Apply argmax to get the most likely token at each time step\n    predicted_ids = np.argmax(predictions, axis=-1)[0]\n    # Decode the predicted ids to a string\n    predicted_text = int_to_string(predicted_ids, inv_output_vocabulary)\n    return predicted_text\n\n# Example usage:\n# Assuming `model` is a pre-trained model with a `predict` method\n# input_vocabulary = {'a': 1, 'b': 2, ...}\n# inv_output_vocabulary = {1: 'a', 2: 'b', ...}\n# text = \"example input text\"\n# predicted_text = run_example(model, input_vocabulary, inv_output_vocabulary, text)\n# print(predicted_text)\n```\n\nThis script provides the required functions to encode a string into a fixed-length sequence of integers, decode a sequence of integers back into a string, and run an example through a model to obtain a predicted string. The `run_example` function assumes the existence of a pre-trained model with a `predict` method, which is consistent with the task description."}
{"task_id": 113, "completion_id": 0, "completion": "```\npython\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    \n    predictions = []\n    \n    for example in examples:\n        # Call the helper function to get the output as a list of characters\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        # Concatenate the list of characters into a single string\n        predicted_string = ''.join(output_chars)\n        # Print the input and output\n        print(f\"input:  {example}\")\n        print(f\"output: {predicted_string}\")\n        # Collect the predicted string\n        predictions.append(predicted_string)\n    \n    return predictions\n```\n\nThis script defines the `run_examples` function as specified in the task description. It uses the `run_example` helper function, which is assumed to be available in the runtime environment. The function processes each input example, prints the input and the corresponding model output, and collects all predictions in a list, which is returned at the end. If no examples are provided, it falls back to the global `EXAMPLES` constant."}
{"task_id": 115, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    # Ensure y is a 1D array\n    y = y.flatten()\n    \n    # Compute the linear combination z\n    z = np.dot(X, w)\n    \n    # Compute the predicted probabilities p\n    p = 1 / (1 + np.exp(-z))\n    \n    # Avoid numerical issues by clipping p to (epsilon, 1 - epsilon)\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    \n    # Compute the average binary cross-entropy loss\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    \n    # Compute the gradient of the loss with respect to the weights\n    gradient = np.dot(X.T, (p - y)) / len(y)\n    \n    # Return the loss and gradient with the specified precision\n    return round(loss, 4), gradient.round(4).tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4]])\n# y = np.array([0, 1])\n# w = np.array([0.5, 0.5])\n# loss, grad = logistic_loss_and_gradient(X, y, w)\n# print(\"Loss:\", loss)\n# print(\"Gradient:\", grad)\n```\n\nThis script defines the `logistic_loss_and_gradient` function, which calculates the average binary cross-entropy loss and its gradient for logistic regression. It handles numerical instability by clipping predicted probabilities to a small range away from 0 and 1. The function returns the loss and gradient as specified."}
{"task_id": 118, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n\n    m, n = X_train.shape\n    weights = np.ones(m) / m\n    stumps = []\n    stump_weights = []\n\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = {}\n        for feature_i in range(n):\n            unique_values = np.unique(X_train[:, feature_i])\n            for threshold in unique_values:\n                p = 1\n                predictions = np.ones(m)\n                predictions[X_train[:, feature_i] < threshold] = -1\n                error = np.sum(weights[y_train != predictions])\n\n                if error > 0.5:\n                    error = 1 - error\n                    p = -1\n\n                if error < min_error:\n                    min_error = error\n                    best_stump['feature_i'] = feature_i\n                    best_stump['threshold'] = threshold\n                    best_stump['polarity'] = p\n\n        alpha = 0.5 * np.log((1.0 - min_error) / (min_error + 1e-10))\n        stump_weights.append(alpha)\n        predictions = best_stump['polarity'] * ((X_train[:, best_stump['feature_i']] < best_stump['threshold']).astype(int) * 2 - 1)\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n        stumps.append(best_stump)\n\n    def predict_sample(sample):\n        stump_pred = np.array([stump['polarity'] if sample[stump['feature_i']] < stump['threshold'] else -stump['polarity'] for stump in stumps])\n        return np.sign(np.dot(stump_pred, stump_weights))\n\n    y_pred = [predict_sample(sample) for sample in X_test]\n    return y_pred\n```\n\nThis script implements the AdaBoost algorithm using decision stumps as weak learners. It trains on the provided training data and predicts labels for the test data. Each decision stump is a simple classifier that makes a decision based on a single feature. The algorithm iteratively trains on re-weighted samples, giving more importance to misclassified samples. The final prediction is a weighted sum of the predictions from all the stumps."}
{"task_id": 128, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    # Step 1: Compute the global mean\n    global_mean = np.mean(X, axis=0)\n    \n    # Step 2: Compute within-class scatter matrix S_W\n    unique_classes = np.unique(y)\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    for c in unique_classes:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        S_W += np.dot((X_c - mean_c).T, (X_c - mean_c))\n    \n    # Step 3: Compute between-class scatter matrix S_B\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    for c in unique_classes:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        N_c = X_c.shape[0]\n        S_B += N_c * np.dot((mean_c - global_mean).reshape(-1, 1), (mean_c - global_mean).reshape(1, -1))\n    \n    # Step 4: Compute matrix A\n    A = np.linalg.pinv(S_W).dot(S_B)\n    \n    # Step 5: Perform eigen-decomposition of A\n    eigen_values, eigen_vectors = np.linalg.eigh(A)\n    \n    # Sort eigen-pairs in descending order of eigen-values\n    sorted_indices = np.argsort(eigen_values)[::-1]\n    eigen_values = eigen_values[sorted_indices]\n    eigen_vectors = eigen_vectors[:, sorted_indices]\n    \n    # Step 6: Remove sign ambiguity\n    for i in range(eigen_vectors.shape[1]):\n        first_non_zero = next((idx for idx, val in enumerate(eigen_vectors[:, i]) if val != 0), -1)\n        if first_non_zero != -1 and eigen_vectors[first_non_zero, i] < 0:\n            eigen_vectors[:, i] *= -1\n    \n    # Step 7: Project X on the first n_components eigenvectors\n    W = eigen_vectors[:, :n_components]\n    X_projected = X.dot(W)\n    \n    # Round every element to four decimal places\n    X_projected_rounded = np.round(X_projected, 4)\n    \n    # Convert to list of lists\n    return X_projected_rounded.tolist()\n\n# Example usage\nX = np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]])\ny = np.array([0,0,0,0,1,1,1,1])\nn_components = 1\nresult = multi_class_lda(X, y, n_components)\nprint(result)\n```\n\nThis code implements the multi-class Linear Discriminant Analysis (LDA) as described in the task. It computes the within-class and between-class scatter matrices, solves the generalized eigenvalue problem, removes sign ambiguity, and projects the data onto the selected eigenvectors. The result is rounded to four decimal places and returned as a list of lists."}
{"task_id": 140, "completion_id": 0, "completion": "```\npython\nfrom collections import deque\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if grid[0][0] == 'F' or grid[n-1][n-1] == 'F':\n        return -1\n    if n == 1 and grid[0][0] == '.':\n        return 0\n\n    # Directions for moving up, down, left, right\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    # Initialize BFS for fire\n    fire_queue = deque()\n    fire_time = [[math.inf] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j, 0))\n                fire_time[i][j] = 0\n\n    # Perform BFS to calculate fire spread times\n    while fire_queue:\n        x, y, t = fire_queue.popleft()\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == '.' and fire_time[nx][ny] == math.inf:\n                fire_queue.append((nx, ny, t + 1))\n                fire_time[nx][ny] = t + 1\n\n    # Initialize BFS for agent\n    agent_queue = deque([(0, 0, 0)])\n    visited = set((0, 0, 0))\n\n    # Perform BFS to find the shortest path for the agent\n    while agent_queue:\n        x, y, t = agent_queue.popleft()\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == '.' and (nx, ny, t + 1) not in visited:\n                if nx == n - 1 and ny == n - 1:\n                    return t + 1\n                if t + 1 < fire_time[nx][ny]:\n                    agent_queue.append((nx, ny, t + 1))\n                    visited.add((nx, ny, t + 1))\n\n    return -1\n\n# Example usage:\n# grid = [\n#     \"....\",\n#     \".#F.\",\n#     \".#..\",\n#     \"....\"\n# ]\n# print(escape_fire_maze(grid))  # Output: 4\n```\n\nThis script defines a function `escape_fire_maze` that solves the problem using BFS to simulate the spread of fire and the movement of the agent. The function returns the minimum number of minutes required for the agent to reach the goal without entering a burning cell, or -1 if it is impossible."}
{"task_id": 141, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\nfrom scipy.spatial.distance import cdist\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n    \n    # Validate the metric and set the appropriate distance function\n    if metric == 'euclidean':\n        distance_func = 'euclidean'\n    elif metric == 'manhattan':\n        distance_func = 'cityblock'\n    elif metric == 'cosine':\n        distance_func = 'cosine'\n    else:\n        # Fall back to Euclidean if an unknown metric is supplied\n        distance_func = 'euclidean'\n    \n    # Compute the distance between each test sample and every training sample\n    distances = cdist(X_test, X_train, metric=distance_func)\n    \n    # For every test sample, find the k training samples with the smallest distance\n    k_nearest_indices = np.argsort(distances, axis=1)[:, :k]\n    \n    # Predict the class by majority vote among those k neighbours\n    predictions = []\n    for indices in k_nearest_indices:\n        k_nearest_labels = y_train[indices]\n        # Use Counter to find the most common label\n        label_counts = Counter(k_nearest_labels)\n        # Find the label with the highest count, and in case of a tie, the smallest label\n        prediction = min(label_counts, key=lambda x: (-label_counts[x], x))\n        predictions.append(prediction)\n    \n    return np.array(predictions)\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [5, 6]])\n# y_train = np.array([0, 0, 1, 1])\n# X_test = np.array([[1, 2], [3, 4]])\n# k = 3\n# predictions = knn_predict(X_train, y_train, X_test, k, metric='euclidean')\n# print(predictions)  # Output should be an array of predicted labels\n```\n\nThis script defines a `knn_predict` function that implements the k-Nearest Neighbors algorithm. It computes distances using the specified metric, finds the k nearest neighbors for each test sample, and predicts the label by majority vote. In case of a tie, it returns the smallest label value. The function falls back to the Euclidean metric if an unknown metric is provided."}
{"task_id": 146, "completion_id": 0, "completion": "Certainly! Below is the complete implementation of the k-Nearest Neighbours (k-NN) classifier from scratch using NumPy. The script includes the function `knn_predict` which takes training data, test data, the number of neighbors `k`, and a distance metric as input, and returns the predicted labels for the test samples.\n\n```python\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    # Ensure k does not exceed the number of training samples\n    k = min(k, len(X))\n    \n    # Function to calculate Euclidean distance\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n    \n    # Function to calculate Manhattan distance\n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b))\n    \n    # Function to calculate Cosine distance\n    def cosine_distance(a, b):\n        epsilon = 1e-12\n        dot_product = np.dot(a, b)\n        norm_a = np.linalg.norm(a)\n        norm_b = np.linalg.norm(b)\n        return 1 - dot_product / (norm_a * norm_b + epsilon)\n    \n    # Choose the appropriate distance function\n    if metric == 'euclidean':\n        distance_func = euclidean_distance\n    elif metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        raise ValueError(\"Unsupported distance metric. Choose from 'euclidean', 'manhattan', or 'cosine'.\")\n    \n    # List to store predicted labels\n    predictions = []\n    \n    # For each test sample\n    for test_sample in X_test:\n        # Calculate distances from the test sample to all training samples\n        distances = [distance_func(test_sample, x_train) for x_train in X]\n        \n        # Get the indices of the k nearest neighbors\n        k_indices = np.argsort(distances)[:k]\n        \n        # Get the labels of the k nearest neighbors\n        k_nearest_labels = [y[i] for i in k_indices]\n        \n        # Perform majority vote\n        label_counts = {}\n        for label in k_nearest_labels:\n            if label in label_counts:\n                label_counts[label] += 1\n            else:\n                label_counts[label] = 1\n        \n        # Find the label with the highest count (smallest in case of a tie)\n        predicted_label = min(label_counts, key=lambda x: (-label_counts[x], x))\n        \n        # Append the predicted label to the predictions list\n        predictions.append(predicted_label)\n    \n    return predictions\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([0, 0, 1, 1])\n# X_test = np.array([[2, 2], [3, 3]])\n# predictions = knn_predict(X_train, y_train, X_test, k=3, metric='euclidean')\n# print(predictions)  # Output: [0, 1]\n```\n\nThis script defines the `knn_predict` function, which calculates the distances between each test sample and all training samples using the specified metric, finds the k nearest neighbors, and performs a majority vote to determine the predicted label for each test sample. The function handles ties by selecting the smallest label."}
{"task_id": 155, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a numpy array if it isn't already\n    state = np.asarray(state)\n    \n    # First layer: Linear transformation followed by ReLU\n    hidden1 = np.maximum(0, np.dot(state, weights['W1']) + weights['b1'])\n    \n    # Second layer: Linear transformation followed by ReLU\n    hidden2 = np.maximum(0, np.dot(hidden1, weights['W2']) + weights['b2'])\n    \n    # Output layer: Linear transformation followed by tanh\n    action = np.tanh(np.dot(hidden2, weights['W3']) + weights['b3'])\n    \n    # Return the action vector rounded to 4 decimal places\n    return [round(a, 4) for a in action]\n\n# Example usage:\n# state = [0.1, -0.2, 0.3]\n# weights = {\n#     \"W1\": np.array([[0.5, -0.5], [0.1, 0.2], [0.3, -0.3]]),\n#     \"b1\": np.array([0.1, -0.1]),\n#     \"W2\": np.array([[0.4, -0.4], [0.2, 0.3]]),\n#     \"b2\": np.array([0.2, -0.2]),\n#     \"W3\": np.array([[0.6, -0.6]]),\n#     \"b3\": np.array([0.3])\n# }\n# print(actor_forward(state, weights))\n```\n\nThis script defines the `actor_forward` function, which performs the forward pass of a two-hidden-layer actor network using NumPy. The function takes a state vector and a dictionary of weights, performs the necessary linear transformations and nonlinearities, and returns the action vector rounded to four decimal places."}
{"task_id": 160, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    m, n = X.shape\n\n    # Step 1: Add an all-ones column to X if fit_intercept is True\n    if fit_intercept:\n        X = np.hstack([np.ones((m, 1)), X])\n    else:\n        X = np.hstack([np.zeros((m, 1)), X])\n\n    # Initialize weights (including intercept if fit_intercept is True)\n    w = np.zeros(X.shape[1])\n\n    # Step 3: Coordinate descent loop\n    for _ in range(max_iters):\n        for j in range(X.shape[1]):\n            # Step 3.1: Temporarily set the current weight to 0\n            w[j] = 0\n            X_j = X[:, j]\n            X_not_j = np.delete(X, j, axis=1)\n            w_not_j = np.delete(w, j)\n\n            # Step 3.2: Compute the partial residual r_j\n            r_j = y - X_not_j @ w_not_j\n\n            # Step 3.3: Update weight w_j with the soft-thresholding operator\n            rho_j = X_j @ r_j\n            S_rho_j = np.sign(rho_j) * max(abs(rho_j) - lambda_param * m, 0)\n            w[j] = S_rho_j / (X_j @ X_j)\n\n        # Step 2: Recompute intercept if fit_intercept is True\n        if fit_intercept:\n            w[0] = (y - X[:, 1:] @ w[1:]).mean()\n\n    # Step 4: Return the final intercept and weight vector\n    bias = round(w[0], 4) if fit_intercept else 0.0\n    weights = [round(weight, 4) for weight in w[1:]]\n\n    return weights, bias\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([3, 7, 11])\n# weights, bias = fit_lasso(X, y, lambda_param=0.1, max_iters=100, fit_intercept=True)\n# print(\"Weights:\", weights)\n# print(\"Bias:\", bias)\n```\n\nThis script implements the Lasso regression using coordinate descent as described in the task. It handles the optional intercept fitting and uses the soft-thresholding operator for weight updates. The final weights and bias are rounded to four decimal places before being returned."}
{"task_id": 165, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    x = np.asarray(x)\n    y = np.asarray(y)\n    \n    # Check if the lengths of the vectors are the same\n    if x.shape != y.shape:\n        return -1\n    \n    # Calculate the Hamming distance\n    N = x.size\n    distance = np.sum(x != y) / N\n    \n    # Return the distance rounded to 4 decimal places\n    return round(distance, 4)\n\n# Example usage:\n# x = [1, 2, 3, 4]\n# y = [1, 0, 3, 4]\n# print(hamming_distance(x, y))  # Output: 0.2500\n```\n\nThis script defines a function `hamming_distance` that computes the normalized Hamming distance between two 1-D integer vectors, either provided as Python lists or NumPy arrays. It checks if the vectors have the same length and returns -1 if they do not. Otherwise, it calculates the Hamming distance and returns it rounded to 4 decimal places."}
{"task_id": 169, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError(\"N must be a positive integer.\")\n    \n    if window not in [\"hamming\", \"hann\", \"blackman_harris\", \"generalized_cosine\"]:\n        raise ValueError(f\"Unknown window type: {window}. Supported types are 'hamming', 'hann', 'blackman_harris', and 'generalized_cosine'.\")\n    \n    n = np.arange(N)\n    \n    if window == \"hamming\":\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    \n    elif window == \"hann\":\n        w = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    \n    elif window == \"blackman_harris\":\n        a0 = 0.35875\n        a1 = 0.48829\n        a2 = 0.14128\n        a3 = 0.01168\n        w = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n    \n    elif window == \"generalized_cosine\":\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be provided for 'generalized_cosine' window.\")\n        w = np.zeros(N)\n        for k, a_k in enumerate(coefficients):\n            w += a_k * np.cos(2 * k * np.pi * n / (N - 1))\n    \n    return [round(coef, 4) for coef in w]\n\n# Example usage:\n# print(generate_window(\"hamming\", 5))\n# print(generate_window(\"hann\", 5))\n# print(generate_window(\"blackman_harris\", 5))\n# print(generate_window(\"generalized_cosine\", 5, [0.5, 0.25]))\n```"}
{"task_id": 171, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    \n    # Convert input lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Check if all labels are the same\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) == 1:\n        return [unique_labels[0]] * len(X_test)\n    \n    # Map labels to 0 and 1\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train_mapped = np.array([label_map[label] for label in y_train])\n    \n    # Add intercept term (bias) to the data\n    intercept_train = np.ones((X_train.shape[0], 1))\n    X_train_with_intercept = np.hstack((intercept_train, X_train))\n    \n    intercept_test = np.ones((X_test.shape[0], 1))\n    X_test_with_intercept = np.hstack((intercept_test, X_test))\n    \n    # Initialize weights to zero\n    weights = np.zeros(X_train_with_intercept.shape[1])\n    \n    # Function to compute the sigmoid\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    \n    # Function to compute the loss\n    def compute_loss(y_true, y_pred):\n        return -np.mean(y_true * np.log(y_pred) + (1 - y_true) * np.log(1 - y_pred))\n    \n    # Mini-batch gradient descent\n    for epoch in range(epochs):\n        # Shuffle the training data\n        indices = np.arange(X_train_with_intercept.shape[0])\n        np.random.shuffle(indices)\n        X_train_shuffled = X_train_with_intercept[indices]\n        y_train_shuffled = y_train_mapped[indices]\n        \n        # Mini-batch update\n        for i in range(0, X_train_shuffled.shape[0], batch_size):\n            X_batch = X_train_shuffled[i:i + batch_size]\n            y_batch = y_train_shuffled[i:i + batch_size]\n            \n            # Predict probabilities\n            z = np.dot(X_batch, weights)\n            predictions = sigmoid(z)\n            \n            # Compute gradients\n            errors = predictions - y_batch\n            gradient = np.dot(X_batch.T, errors) / X_batch.shape[0]\n            \n            # Update weights\n            weights -= learning_rate * gradient\n    \n    # Predict probabilities for the test set\n    z_test = np.dot(X_test_with_intercept, weights)\n    test_probabilities = sigmoid(z_test)\n    \n    # Convert probabilities to predicted labels\n    test_predictions = (test_probabilities >= 0.5).astype(int)\n    \n    # Map the predicted labels back to the original labels\n    inverse_label_map = {v: k for k, v in label_map.items()}\n    test_predictions_original = [inverse_label_map[pred] for pred in test_predictions]\n    \n    return test_predictions_original\n```\n\nThis script implements a binary Logistic Regression classifier using mini-batch Gradient Descent. It handles the conversion between the original and mapped labels, adds an intercept term to the data, and skips training if all training labels are identical. The model returns predictions for the test set using a decision threshold of 0.5."}
{"task_id": 176, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    \"\"\"Fill in here. The final implementation must follow the specification given in the task\n    description and return a list with the predicted class labels for *X_test*.\"\"\"\n    \n    def train_decision_stump(X, y, weights):\n        m, n = len(X), len(X[0])\n        best_error = float('inf')\n        best_stump = {}\n        best_predictions = np.zeros(m)\n        \n        for feature_index in range(n):\n            thresholds = np.unique([row[feature_index] for row in X])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(m)\n                    predictions[X[:, feature_index] * polarity < threshold * polarity] = -1\n                    weighted_error = np.sum(weights[predictions != y])\n                    \n                    if weighted_error < best_error:\n                        best_error = weighted_error\n                        best_stump = {\n                            'feature_index': feature_index,\n                            'threshold': threshold,\n                            'polarity': polarity\n                        }\n                        best_predictions = predictions.copy()\n                        \n                        # Early stopping if a perfect stump is found\n                        if best_error == 0:\n                            return best_stump, best_predictions, best_error\n        \n        return best_stump, best_predictions, best_error\n    \n    X_train = np.array(X_train)\n    y_train = np.array(y_train) * 2 - 1  # Convert labels to -1, 1\n    n_samples = len(X_train)\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n    \n    for _ in range(n_estimators):\n        stump, predictions, error = train_decision_stump(X_train, y_train, weights)\n        \n        if error == 0:\n            break\n        \n        alpha = 0.5 * np.log((1 - error) / (error + 1e-10))\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n        \n        stump['alpha'] = alpha\n        stumps.append(stump)\n    \n    def predict_sample(sample):\n        stump_predictions = np.array([stump['alpha'] * ((sample[stump['feature_index']] * stump['polarity'] < stump['threshold'] * stump['polarity']) * 2 - 1) for stump in stumps])\n        return 1 if np.sum(stump_predictions) > 0 else 0\n    \n    return [predict_sample(x) for x in X_test]\n\n# Example usage:\n# X_train = [[1, 2], [2, 3], [3, 4], [4, 5]]\n# y_train = [0, 0, 1, 1]\n# X_test = [[1, 1], [2, 2], [3, 3], [4, 4]]\n# print(adaboost_predict(X_train, y_train, X_test, n_estimators=3))\n```\n\nThis script implements the AdaBoost algorithm using decision stumps as weak learners. The function `adaboost_predict` trains the model on the provided training data and then makes predictions on the test data. The decision stumps are trained by selecting the one with the smallest weighted classification error in each boosting round. The final predictions are made by aggregating the weighted votes from all the stumps."}
{"task_id": 178, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n\n    rng = np.random.default_rng(seed)\n    \n    # Initialize the swarm\n    particles = rng.uniform(-1, 1, (num_particles, n_dims))\n    velocities = rng.uniform(-0.5, 0.5, (num_particles, n_dims))\n    \n    # Initialize personal best positions and values\n    pbest_positions = particles.copy()\n    pbest_values = np.array([np.sum(p**2) for p in particles])\n    \n    # Initialize global best position and value\n    gbest_index = np.argmin(pbest_values)\n    gbest_position = pbest_positions[gbest_index]\n    gbest_value = pbest_values[gbest_index]\n    \n    # Parameters\n    w = 0.5  # inertia weight\n    c1 = 1.5  # cognitive weight\n    c2 = 1.5  # social weight\n    \n    for _ in range(num_iterations):\n        for i in range(num_particles):\n            # Update velocity\n            r1, r2 = rng.uniform(0, 1, 2)\n            velocities[i] = (w * velocities[i] +\n                             c1 * r1 * (pbest_positions[i] - particles[i]) +\n                             c2 * r2 * (gbest_position - particles[i]))\n            \n            # Update position\n            particles[i] = np.clip(particles[i] + velocities[i], -1, 1)\n            \n            # Evaluate new position\n            new_value = np.sum(particles[i]**2)\n            \n            # Update personal best\n            if new_value < pbest_values[i]:\n                pbest_values[i] = new_value\n                pbest_positions[i] = particles[i]\n                \n                # Update global best\n                if new_value < gbest_value:\n                    gbest_value = new_value\n                    gbest_position = particles[i]\n                    \n    return round(gbest_value, 4)\n```"}
{"task_id": 180, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    \n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((np.array(point1) - np.array(point2)) ** 2))\n    \n    predictions = []\n    n_samples = len(X_train)\n    \n    # Adjust k if it's 0 or larger than the number of training samples\n    if k == 0 or k > n_samples:\n        k = n_samples\n    \n    for test_point in X_test:\n        # Calculate distances from the test point to all training points\n        distances = [(euclidean_distance(test_point, train_point), idx) for idx, train_point in enumerate(X_train)]\n        \n        # Sort distances and select the k-nearest neighbours\n        distances.sort(key=lambda x: x[0])\n        k_nearest_indices = [idx for _, idx in distances[:k]]\n        \n        # Collect the labels/values of the k-nearest neighbours\n        k_nearest_labels = [y_train[i] for i in k_nearest_indices]\n        \n        if task == \"classification\":\n            # Use majority vote to determine the predicted label\n            most_common = Counter(k_nearest_labels).most_common()\n            # Find the smallest label in case of a tie\n            max_count = max(most_common, key=lambda x: x[1])[1]\n            prediction = min(label for label, count in most_common if count == max_count)\n        elif task == \"regression\":\n            # Use the mean of the k-nearest neighbour values\n            prediction = round(np.mean(k_nearest_labels), 4)\n        else:\n            raise ValueError(\"Task must be either 'classification' or 'regression'.\")\n        \n        predictions.append(prediction)\n    \n    return predictions\n```\n\nThis script defines a `knn_predict` function that implements the k-Nearest Neighbours algorithm for both classification and regression tasks. It uses the Euclidean distance to find the nearest neighbours and handles ties in classification by choosing the smallest label. For regression, it calculates the mean of the nearest neighbours' target values, rounding to four decimal places."}
{"task_id": 184, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gini_impurity(y: np.ndarray) -> float:\n    \"\"\"Calculate the Gini impurity for a given array of class labels.\"\"\"\n    m = len(y)\n    if m == 0:\n        return 0.0\n    counts = np.bincount(y)\n    probabilities = counts / m\n    return 1.0 - np.sum(probabilities ** 2)\n\ndef split_data(X: np.ndarray, y: np.ndarray, feature_index: int, threshold: float):\n    \"\"\"Split the dataset into left and right subsets based on a feature and threshold.\"\"\"\n    left_mask = X[:, feature_index] <= threshold\n    right_mask = X[:, feature_index] > threshold\n    X_left, y_left = X[left_mask], y[left_mask]\n    X_right, y_right = X[right_mask], y[right_mask]\n    return X_left, y_left, X_right, y_right\n\ndef best_split(X: np.ndarray, y: np.ndarray) -> dict:\n    \"\"\"Find the best feature and threshold to split the data based on Gini gain.\"\"\"\n    n_samples, n_features = X.shape\n    best_gini_gain = -1.0\n    best_feature = None\n    best_threshold = None\n\n    parent_gini = gini_impurity(y)\n\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n        for i in range(len(unique_values) - 1):\n            threshold = (unique_values[i] + unique_values[i + 1]) / 2\n            _, y_left, _, y_right = split_data(X, y, feature_index, threshold)\n            gini_left = gini_impurity(y_left)\n            gini_right = gini_impurity(y_right)\n            weighted_gini = (len(y_left) / n_samples) * gini_left + (len(y_right) / n_samples) * gini_right\n            gini_gain = parent_gini - weighted_gini\n\n            if gini_gain > best_gini_gain:\n                best_gini_gain = gini_gain\n                best_feature = feature_index\n                best_threshold = threshold\n\n    return {\n        'feature': best_feature,\n        'threshold': best_threshold,\n        'gini_gain': best_gini_gain\n    }\n\ndef majority_vote(y: np.ndarray) -> int:\n    \"\"\"Return the majority class label from the array of class labels.\"\"\"\n    return int(np.bincount(y).argmax())\n\ndef build_tree(X: np.ndarray, y: np.ndarray, depth: int = 0, max_depth: int | None = None):\n    \"\"\"Recursively build a decision tree.\"\"\"\n    if max_depth is not None and depth >= max_depth:\n        return majority_vote(y)\n    \n    if len(np.unique(y)) == 1:\n        return y[0]\n    \n    best_sp = best_split(X, y)\n    \n    if best_sp['gini_gain'] == 0:\n        return majority_vote(y)\n    \n    X_left, y_left, X_right, y_right = split_data(X, y, best_sp['feature'], best_sp['threshold'])\n    \n    left_subtree = build_tree(X_left, y_left, depth + 1, max_depth)\n    right_subtree = build_tree(X_right, y_right, depth + 1, max_depth)\n    \n    return {\n        'feature': best_sp['feature'],\n        'threshold': best_sp['threshold'],\n        'left': left_subtree,\n        'right': right_subtree\n    }\n\ndef predict(tree, X: np.ndarray) -> np.ndarray:\n    \"\"\"Predict class labels for the given dataset using the decision tree.\"\"\"\n    if isinstance(tree, dict):\n        feature = tree['feature']\n        threshold = tree['threshold']\n        left = tree['left']\n        right = tree['right']\n        if X[feature] <= threshold:\n            return predict(left, X)\n        else:\n            return predict(right, X)\n    else:\n        return tree\n\ndef decision_tree_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    max_depth: int | None = None,\n) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n    tree = build_tree(X_train, y_train, max_depth=max_depth)\n    predictions = [predict(tree, x) for x in X_test]\n    return predictions\n```\n\nThis script implements a binary decision tree classifier using the CART algorithm from scratch. It includes functions to calculate Gini impurity, determine the best split, build the tree recursively, and make predictions. The `decision_tree_predict` function is the main entry point, which constructs the tree and returns predictions for the test set."}
{"task_id": 190, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    \n    n_samples, n_features = X.shape\n    classes = np.unique(y)\n    n_classes = len(classes)\n    \n    def gini(node_labels):\n        counts = np.bincount(node_labels, minlength=n_classes)\n        probabilities = counts / len(node_labels)\n        return 1 - np.sum(probabilities ** 2)\n    \n    G_whole_dataset = gini(y)\n    best_feature_index = -1\n    best_threshold_value = None\n    best_gini = round(G_whole_dataset, 4)\n    \n    for feature_index in range(n_features):\n        values = np.unique(X[:, feature_index])\n        if len(values) == 1:\n            continue\n        \n        for threshold in values[:-1]:\n            left_mask = X[:, feature_index] <= threshold\n            right_mask = X[:, feature_index] > threshold\n            \n            if not np.any(left_mask) or not np.any(right_mask):\n                continue\n            \n            n_left = np.sum(left_mask)\n            n_right = np.sum(right_mask)\n            n_total = n_left + n_right\n            \n            G_left = gini(y[left_mask])\n            G_right = gini(y[right_mask])\n            \n            G_split = (n_left / n_total) * G_left + (n_right / n_total) * G_right\n            \n            if (G_split < best_gini or \n                (np.isclose(G_split, best_gini, atol=1e-12) and feature_index < best_feature_index) or \n                (np.isclose(G_split, best_gini, atol=1e-12) and feature_index == best_feature_index and threshold < best_threshold_value)):\n                best_feature_index = feature_index\n                best_threshold_value = threshold\n                best_gini = round(G_split, 4)\n    \n    return (best_feature_index, best_threshold_value, best_gini)\n```\n\nThis script defines the `best_gini_split` function that calculates the best feature index and threshold to split the dataset `X` with labels `y` based on minimizing the weighted Gini impurity. The function returns a tuple containing the feature index, threshold, and the rounded Gini impurity of the best split. If no valid split is found, it returns the Gini impurity of the whole dataset."}
{"task_id": 191, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    \n    def validate_vectors(x, y):\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except (ValueError, TypeError):\n            return False, -1\n        \n        if x.ndim != 1 or y.ndim != 1 or len(x) != len(y) or len(x) == 0:\n            return False, -1\n        \n        return True, (x, y)\n    \n    def euclidean(x, y):\n        return np.sqrt(np.sum((x - y) ** 2))\n    \n    def manhattan(x, y):\n        return np.sum(np.abs(x - y))\n    \n    def chebyshev(x, y):\n        return np.max(np.abs(x - y))\n    \n    def cosine(x, y):\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        return 1 - (np.dot(x, y) / (norm_x * norm_y))\n    \n    metric_functions = {\n        'euclidean': euclidean,\n        'manhattan': manhattan,\n        'chebyshev': chebyshev,\n        'cosine': cosine\n    }\n    \n    if name not in metric_functions:\n        return lambda x, y: -1\n    \n    def distance(x, y):\n        is_valid, vectors = validate_vectors(x, y)\n        if not is_valid:\n            return -1\n        x, y = vectors\n        result = metric_functions[name](x, y)\n        return round(result, 4) if result != -1 else -1\n    \n    return distance\n\n# Example usage:\n# print(metric('euclidean')([1, 2, 3], [4, 5, 6]))  # \u279e 5.1962\n```\n\nThis script defines a `metric` function that returns a callable to compute one of the specified distance metrics between two vectors, with validation checks included. If the input is invalid or the metric name is unsupported, it returns `-1`. The results are rounded to four decimal places."}
{"task_id": 197, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n\n    if md_action:\n        action_dim = len(env.action_space.spaces)\n        for space in env.action_space.spaces:\n            if hasattr(space, 'n'):\n                n_actions_per_dim.append(space.n)\n            elif hasattr(space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n                cont_action = True\n    else:\n        if hasattr(env.action_space, 'n'):\n            n_actions_per_dim.append(env.action_space.n)\n            action_dim = 1\n        elif hasattr(env.action_space, 'shape'):\n            n_actions_per_dim.append(np.inf)\n            action_dim = env.action_space.shape[0]\n            cont_action = True\n\n    if not cont_action:\n        if md_action:\n            action_ids = list(product(*(range(n) for n in n_actions_per_dim)))\n        else:\n            action_ids = [(i,) for i in range(n_actions_per_dim[0])]\n\n    return n_actions_per_dim, action_ids, action_dim\n```\n\nThis script defines the `action_stats` function which takes an environment object and two boolean flags to determine the nature of the action space. It then calculates and returns the required statistics about the action space."}
{"task_id": 198, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # Initialize beta with zeros\n    beta = np.zeros((V, phi[0].shape[1]))  # Number of topics is the second dimension of phi[0]\n    \n    # Calculate the sums for beta\n    for d, doc in enumerate(corpus):\n        for n, word_index in enumerate(doc):\n            beta[word_index] += phi[d][n]\n    \n    # Normalize the columns of beta\n    column_sums = beta.sum(axis=0)\n    column_sums[column_sums == 0] = 1  # Avoid division by zero\n    beta /= column_sums\n    \n    # Round to 4 decimal places\n    beta_rounded = np.round(beta, 4)\n    \n    # Convert to list of lists\n    beta_list = beta_rounded.tolist()\n    \n    return beta_list\n```\n\nThis script defines the `update_beta` function which takes the variational parameters `phi`, the `corpus`, and the vocabulary size `V` as inputs. It computes the word-topic distribution `beta` by accumulating the contributions from each token in the corpus, normalizes the columns of `beta` to ensure they sum to one, rounds the values to four decimal places, and returns the result as a list of lists."}
{"task_id": 202, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    \n    def euclidean_distance(a, b):\n        return np.linalg.norm(a - b)\n    \n    def compute_cost(X, medoids, labels):\n        cost = 0\n        for i, label in enumerate(labels):\n            cost += euclidean_distance(X[i], X[medoids[label]])\n        return cost\n    \n    def assign_labels(X, medoids):\n        labels = []\n        for x in X:\n            distances = [euclidean_distance(x, X[medoid]) for medoid in medoids]\n            labels.append(np.argmin(distances))\n        return labels\n    \n    n = X.shape[0]\n    medoids = list(range(k))\n    labels = assign_labels(X, medoids)\n    cost = compute_cost(X, medoids, labels)\n    \n    while True:\n        best_swap = None\n        best_cost_reduction = 0\n        \n        for i in range(k):\n            for j in range(k, n):\n                # Try swapping medoid i with non-medoid j\n                new_medoids = medoids[:]\n                new_medoids[i] = j\n                \n                new_labels = assign_labels(X, new_medoids)\n                new_cost = compute_cost(X, new_medoids, new_labels)\n                \n                cost_reduction = cost - new_cost\n                if cost_reduction > best_cost_reduction:\n                    best_swap = (i, j)\n                    best_cost_reduction = cost_reduction\n        \n        if best_swap is None or best_cost_reduction <= 0:\n            break\n        \n        # Perform the best swap\n        i, j = best_swap\n        medoids[i] = j\n        labels = assign_labels(X, medoids)\n        cost -= best_cost_reduction\n    \n    return labels\n\n# Example usage:\nX = np.array([[0,0], [1,0], [0,1], [5,5], [6,5], [5,6]])\nk = 2\nprint(pam_clustering(X, k))  # Output: [0, 0, 0, 1, 1, 1]\n```"}
{"task_id": 216, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    \n    if n_iterations < 1:\n        return -1\n    \n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    \n    if x_train.shape[1] != x_test.shape[1]:\n        return -1\n    \n    def polynomial_features(X, degree):\n        return np.column_stack([X**i for i in range(1, degree+1)])\n    \n    def add_bias(X):\n        return np.c_[np.ones(X.shape[0]), X]\n    \n    def standardize_features(X):\n        mean = X.mean(axis=0)\n        std = X.std(axis=0)\n        std[std == 0] = 1  # Avoid division by zero\n        return (X - mean) / std, mean, std\n    \n    # Generate polynomial features\n    x_train_poly = polynomial_features(x_train, degree)\n    x_test_poly = polynomial_features(x_test, degree)\n    \n    # Standardize features (excluding bias term)\n    x_train_poly_std, mean, std = standardize_features(x_train_poly)\n    x_test_poly_std = (x_test_poly - mean) / std\n    \n    # Add bias term\n    X_train = add_bias(x_train_poly_std)\n    X_test = add_bias(x_test_poly_std)\n    \n    # Initialize weights\n    weights = np.zeros(X_train.shape[1])\n    \n    # Perform batch gradient descent\n    for _ in range(n_iterations):\n        predictions = X_train.dot(weights)\n        errors = predictions - y_train\n        \n        # Compute gradients\n        grad = (2 / X_train.shape[0]) * X_train.T.dot(errors)\n        grad[1:] += reg_factor * (l1_ratio * np.sign(weights[1:]) + (1 - l1_ratio) * weights[1:])\n        \n        # Update weights\n        weights -= learning_rate * grad\n    \n    # Make predictions on test data\n    predictions_test = X_test.dot(weights)\n    \n    return np.round(predictions_test, 4).tolist()\n```\n\nThis script defines a function `elastic_net_regression` that performs Elastic Net regression from scratch using batch gradient descent. The function handles polynomial feature expansion, standardization of features, and applies both L1 and L2 regularization. It checks for input validity and returns predictions rounded to four decimal places."}
{"task_id": 217, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to numpy arrays for vectorized computation\n    actual = np.array(actual, dtype=float)\n    predicted = np.array(predicted, dtype=float)\n    \n    # Sigmoid function\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    \n    # Compute sigmoid of predictions\n    prob_predicted = sigmoid(predicted)\n    \n    # Compute gradient\n    gradient = actual * sigmoid(-actual * predicted)\n    \n    # Compute Hessian\n    hessian = prob_predicted * (1 - prob_predicted)\n    \n    # Round results to 6 decimal places\n    gradient = np.round(gradient, 6)\n    hessian = np.round(hessian, 6)\n    prob_predicted = np.round(prob_predicted, 6)\n    \n    # Convert numpy arrays back to lists\n    gradient_list = gradient.tolist()\n    hessian_list = hessian.tolist()\n    probability_list = prob_predicted.tolist()\n    \n    return (gradient_list, hessian_list, probability_list)\n```"}
{"task_id": 218, "completion_id": 0, "completion": "```\npython\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    def hand_value(hand: list[int]) -> int:\n        \"\"\"Calculate the best possible value of a hand in Blackjack.\"\"\"\n        value = sum(hand)\n        num_aces = hand.count(1)\n        \n        # Use one ace as 11 if it doesn't bust\n        while value + 10 <= 21 and num_aces > 0:\n            value += 10\n            num_aces -= 1\n        \n        return value\n\n    def is_natural_blackjack(hand: list[int]) -> bool:\n        \"\"\"Check if a hand is a natural blackjack.\"\"\"\n        return len(hand) == 2 and 1 in hand and 10 in hand\n\n    player_value = hand_value(player)\n    dealer_value = hand_value(dealer)\n\n    # Check for player bust\n    if player_value > 21:\n        return -1.0\n\n    # Check for dealer bust\n    if dealer_value > 21:\n        return 1.0\n\n    # Check for natural blackjack\n    if is_natural_blackjack(player):\n        return 1.5\n\n    # Compare scores\n    if player_value > dealer_value:\n        return 1.0\n    elif player_value < dealer_value:\n        return -1.0\n    else:\n        return 0.0\n```\n\nThis script defines the `blackjack_outcome` function, which evaluates the outcome of a finished round of Blackjack based on the rules provided. It includes helper functions to calculate the hand value and check for a natural blackjack. The function returns the player's reward as a float, which can be -1, 0, 1, or 1.5."}
{"task_id": 221, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper function that returns element-wise squared log errors.\"\"\"\n    try:\n        actual = np.array(actual, dtype=float)\n        predicted = np.array(predicted, dtype=float)\n    except ValueError:\n        return -1\n    \n    if actual.shape != predicted.shape:\n        return -1\n    \n    if np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    \n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\"\"\"\n    sl_errors = squared_log_error(actual, predicted)\n    \n    if sl_errors == -1:\n        return -1\n    \n    msle = np.mean(sl_errors)\n    return round(float(msle), 4)\n\n# Example usage:\n# actual = [3, -0.5, 2, 7]\n# predicted = [2.5, 0.3, 2, 8]\n# print(mean_squared_log_error(actual, predicted))  # Should return -1 due to negative value in actual\n\n# actual = [3, 0.5, 2, 7]\n# predicted = [2.5, 0.3, 2, 8]\n# print(mean_squared_log_error(actual, predicted))  # Should return a valid MSLE value\n```\n\nThis script includes the required helper function `squared_log_error` and the main function `mean_squared_log_error`. The input validation checks for equal length and non-negative values, returning `-1` if the inputs are invalid. The MSLE is calculated and rounded to four decimal places if the inputs are valid."}
{"task_id": 222, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    # Convert input to a numpy array for vectorized operations\n    is_scalar = isinstance(z, (int, float))\n    z = np.array(z)\n    \n    # Apply numerically stable sigmoid function\n    # For z >= 0: sigmoid(z) = 1 / (1 + exp(-z))\n    # For z < 0: sigmoid(z) = exp(z) / (1 + exp(z))\n    sigmoid_values = np.where(z >= 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n    \n    # Round the results to 4 decimal places\n    sigmoid_values = np.round(sigmoid_values, 4)\n    \n    # Convert back to scalar if input was a scalar\n    if is_scalar:\n        return float(sigmoid_values)\n    else:\n        return sigmoid_values.tolist()\n\n# Example usage:\n# print(sigmoid(0))  # Output: 0.5\n# print(sigmoid([-1, 0, 1]))  # Output: [0.2689, 0.5, 0.7311]\n# print(sigmoid(np.array([[-1000, 0], [1000, 2]])))  # Output: [[0.0, 0.5], [1.0, 0.8808]]\n```\n\nThis script defines the `sigmoid` function which computes the sigmoid of the input values, ensuring numerical stability and handling different types of inputs as specified."}
{"task_id": 224, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n\n    def apply_leaky_relu(x):\n        if isinstance(x, (list, np.ndarray)):\n            return [apply_leaky_relu(item) for item in x]\n        else:\n            return x if x >= 0 else a * x\n\n    # Convert input to a numpy array if it's not one\n    if not isinstance(z, np.ndarray):\n        z = np.array(z)\n\n    # Apply the Leaky ReLU activation\n    result = apply_leaky_relu(z)\n\n    # Convert the result back to a plain Python list\n    return result if isinstance(result, list) else result.tolist()\n```\n\nThis script defines a `leaky_relu` function that applies the Leaky ReLU activation function to inputs of various types, maintaining the input structure in the output. The function uses recursion to handle nested lists and arrays, ensuring that the output is always a plain Python list."}
{"task_id": 226, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    \n    def train_decision_stump(X, y, sample_weights):\n        n_samples, n_features = X.shape\n        min_error = float('inf')\n        best_stump = {}\n        \n        for feature_i in range(n_features):\n            thresholds = np.unique(X[:, feature_i])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(n_samples)\n                    predictions[X[:, feature_i] < threshold] = -1 * polarity\n                    \n                    weighted_error = np.sum(sample_weights[y != predictions])\n                    \n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        polarity = -polarity\n                    \n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_clf_error = weighted_error\n                        best_stump['feature_index'] = feature_i\n                        best_stump['threshold'] = threshold\n                        best_stump['polarity'] = polarity\n        \n        alpha = 0.5 * math.log((1.0 - best_clf_error) / (best_clf_error + 1e-10))\n        return best_stump, alpha\n    \n    def predict_stump(X, stump):\n        n_samples = X.shape[0]\n        X_column = X[:, stump['feature_index']]\n        predictions = np.ones(n_samples)\n        if stump['polarity'] == 1:\n            predictions[X_column < stump['threshold']] = -1\n        else:\n            predictions[X_column >= stump['threshold']] = -1\n        return predictions\n    \n    n_samples, _ = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    stumps = []\n    \n    for _ in range(n_clf):\n        stump, alpha = train_decision_stump(X_train, y_train, sample_weights)\n        stumps.append((stump, alpha))\n        predictions = predict_stump(X_train, stump)\n        missclassified_mask = predictions != y_train\n        missclassified_weights = sample_weights[missclassified_mask]\n        error_weight = missclassified_weights.sum()\n        \n        sample_weights[missclassified_mask] = sample_weights[missclassified_mask] * (error_weight / (1 - error_weight))\n        sample_weights /= sample_weights.sum()\n    \n    y_pred = np.zeros(X_test.shape[0])\n    for stump, alpha in stumps:\n        stump_pred = predict_stump(X_test, stump)\n        y_pred += stump_pred * alpha\n    \n    y_pred = np.sign(y_pred)\n    return y_pred.astype(int).tolist()\n```"}
{"task_id": 241, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    \n    # Flatten the shape except for the first two dimensions\n    num_rows = shape[0]\n    num_cols = np.prod(shape[1:])\n    \n    # Step 2: Create a 2-D matrix A with i.i.d. samples from the standard normal distribution\n    A = np.random.randn(num_rows, num_cols)\n    \n    # Step 3: Compute the singular value decomposition (SVD) of A\n    U, _, Vt = np.linalg.svd(A, full_matrices=False)\n    \n    # Step 4: Choose the SVD factor that has the same size as A\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt\n    \n    # Step 5: Reshape Q back to the requested tensor shape and multiply it by scale\n    result = (Q * scale).reshape(shape)\n    \n    # Convert to a list before returning\n    return result.tolist()\n\n# Example usage\nnp.random.seed(0)\nshape = (2, 2)\nscale = 0.5\noutput = orthogonal(shape, scale)\nprint(output)\n```\n\nThis script defines the `orthogonal` function as specified, which initializes a tensor with an orthogonal matrix according to the Saxe et al. (2014) algorithm. It includes a check for the shape length and performs the necessary computations to ensure the orthogonality condition is met. The example usage demonstrates how to generate an orthogonal matrix with a specific shape and scale, and prints the resulting matrix."}
{"task_id": 243, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a numpy array for easier computation\n    s = np.array(state)\n    \n    # Define weights and biases (all weights = 1.0, all biases = 0.0)\n    W1 = np.ones((3, 4))\n    b1 = np.zeros(4)\n    W2 = np.ones((4, 4))\n    b2 = np.zeros(4)\n    W3 = np.ones((4, 4))\n    b3 = np.zeros(4)\n    Wa = np.ones((4, 3))\n    ba = np.zeros(3)\n    Wc = np.ones((4, 1))\n    bc = np.zeros(1)\n    \n    # Perform the forward pass\n    z1 = np.maximum(0, np.dot(s, W1) + b1)  # ReLU activation\n    z2 = np.maximum(0, np.dot(z1, W2) + b2)  # ReLU activation\n    z3 = np.maximum(0, np.dot(z2, W3) + b3)  # ReLU activation\n    \n    logits = np.dot(z3, Wa) + ba\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))  # Softmax activation\n    state_value = np.dot(z3, Wc)[0] + bc[0]\n    \n    # Round the results\n    action_probs_rounded = [round(p, 4) for p in action_probs]\n    state_value_rounded = round(state_value, 4)\n    \n    return action_probs_rounded, state_value_rounded\n\n# Example usage:\nstate = [0.5, 0.3, 0.2]\naction_probs, state_value = actor_critic_forward(state)\nprint(\"Action probabilities:\", action_probs)\nprint(\"State value:\", state_value)\n```\n\nThis script defines the `actor_critic_forward` function, which performs the forward pass of the specified Actor-Critic network using NumPy operations. The function takes a state vector as input and returns the action probabilities and state value, both rounded to four decimal places."}
{"task_id": 249, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    # Convert state and parameters to numpy arrays\n    state = np.array(state, dtype=np.float32)\n    W1, b1 = np.array(params['W1'], dtype=np.float32), np.array(params['b1'], dtype=np.float32)\n    W2, b2 = np.array(params['W2'], dtype=np.float32), np.array(params['b2'], dtype=np.float32)\n    W3, b3 = np.array(params['W3'], dtype=np.float32), np.array(params['b3'], dtype=np.float32)\n    Wa, ba = np.array(params['Wa'], dtype=np.float32), np.array(params['ba'], dtype=np.float32)\n    Wc, bc = np.array(params['Wc'], dtype=np.float32), np.array(params['bc'], dtype=np.float32)\n    \n    # Forward pass through shared layers\n    h1 = np.maximum(0, np.dot(state, W1) + b1)  # ReLU activation\n    h2 = np.maximum(0, np.dot(h1, W2) + b2)     # ReLU activation\n    h3 = np.maximum(0, np.dot(h2, W3) + b3)     # ReLU activation\n    \n    # Actor head\n    actor_scores = np.dot(h3, Wa) + ba\n    probabilities = np.exp(actor_scores - np.max(actor_scores))  # Subtract max for numerical stability\n    probabilities /= np.sum(probabilities)\n    \n    # Critic head\n    value = np.dot(h3, Wc) + bc\n    \n    # Round the probabilities and value to four decimal places\n    probabilities = [round(p, 4) for p in probabilities]\n    value = round(value[0], 4)\n    \n    # Ensure 0 and 1 are represented as 0.0 and 1.0 respectively\n    probabilities = [0.0 if p == 0 else 1.0 if p == 1 else p for p in probabilities]\n    value = 0.0 if value == 0 else 1.0 if value == 1 else value\n    \n    return probabilities, value\n```\n\nThis script defines the `actor_critic_forward` function, which performs a forward pass through a three-layer Actor-Critic network using NumPy. The function takes the current environment state and a dictionary of network parameters, processes the state through shared and specialized layers, and returns the action probabilities (as a list of floats) and the state value (as a float), both rounded to four decimal places. Special care is taken to ensure that values of exactly 0 or 1 are represented with a single decimal place."}
{"task_id": 253, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    # Convert weight vector to a NumPy array if it's not already\n    w = np.array(w)\n    \n    if gradient:\n        # Compute the gradient of the Elastic-Net penalty\n        grad = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n        # Return the gradient rounded element-wise to 4 decimal places\n        return [round(g, 4) for g in grad]\n    else:\n        # Compute the L1 norm (sum of absolute values)\n        l1_norm = np.sum(np.abs(w))\n        # Compute the L2 norm squared (sum of squares)\n        l2_norm_squared = np.sum(w ** 2)\n        # Compute the Elastic-Net penalty\n        penalty = alpha * (l1_ratio * l1_norm + (1 - l1_ratio) * 0.5 * l2_norm_squared)\n        # Return the penalty rounded to 4 decimal places\n        return round(penalty, 4)\n\n# Example usage:\n# w = [1.0, -2.0, 3.0]\n# alpha = 0.1\n# l1_ratio = 0.5\n# print(elastic_net_regularization(w, alpha, l1_ratio))  # Should print the penalty value\n# print(elastic_net_regularization(w, alpha, l1_ratio, gradient=True))  # Should print the gradient\n```\nThis script defines the `elastic_net_regularization` function as specified, which can compute both the Elastic-Net penalty and its gradient, depending on the `gradient` flag. The function handles rounding of the output as required."}
{"task_id": 256, "completion_id": 0, "completion": "```\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    # Handle special cases\n    if param_name in [\"X\", \"y\"]:\n        return None\n    if param_name in [\"Ba\", \"Bx\"]:\n        param_name = param_name.lower()\n\n    # Get the parameter to check\n    param = model.parameters[param_name]\n\n    # Prepare an array to store the numerical gradients\n    grads = np.zeros_like(param, dtype=np.float64)\n\n    # Iterate over every element of the parameter\n    for idx in np.ndindex(param.shape):\n        # Save the original value\n        original_val = param[idx]\n\n        # Perturb the parameter by +epsilon\n        param[idx] = original_val + epsilon\n        model.flush_gradients()\n        predictions_pos = []\n        for t in range(n_t):\n            pred = model.forward(X[:, :, t])\n            predictions_pos.append(pred)\n        loss_pos = loss_func(predictions_pos)\n\n        # Perturb the parameter by -epsilon\n        param[idx] = original_val - epsilon\n        model.flush_gradients()\n        predictions_neg = []\n        for t in range(n_t):\n            pred = model.forward(X[:, :, t])\n            predictions_neg.append(pred)\n        loss_neg = loss_func(predictions_neg)\n\n        # Restore the original value\n        param[idx] = original_val\n\n        # Compute the numerical gradient using the centered difference formula\n        grads[idx] = (loss_pos - loss_neg) / (2 * epsilon)\n\n    # Return the transposed numerical gradient\n    return grads.T\n```\n\nThis script defines the `grad_check_RNN` function, which numerically estimates the gradient of a specified parameter in a Recurrent Neural Network (RNN) using the centered finite-difference method. The function handles special cases for parameter names and ensures that all intermediate calculations are performed in `float64` for accuracy."}
{"task_id": 257, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n\n    m, n = X_train.shape\n    weights = np.ones(m) / m\n    stumps = []\n    stump_weights = []\n\n    for _ in range(n_clf):\n        best_stump = None\n        min_error = float('inf')\n        best_threshold = 0\n        best_feature = 0\n        best_polarity = 1\n\n        for feature_i in range(n):\n            feature_values = X_train[:, feature_i]\n            thresholds = np.unique(feature_values)\n\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(m)\n                    predictions[polarity * feature_values < polarity * threshold] = -1\n\n                    weighted_error = np.sum(weights[predictions != y_train])\n\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        polarity *= -1\n\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump = (feature_i, threshold, polarity)\n                        best_threshold = threshold\n                        best_feature = feature_i\n\n        epsilon = min_error + 1e-10  # To avoid division by zero\n        alpha = 0.5 * np.log((1.0 - epsilon) / epsilon)\n\n        stumps.append(best_stump)\n        stump_weights.append(alpha)\n\n        predictions = np.ones(m)\n        feature_i, threshold, polarity = best_stump\n        predictions[polarity * X_train[:, feature_i] < polarity * threshold] = -1\n\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n\n    # Predict on test data\n    y_pred = np.zeros(X_test.shape[0])\n    for stump, alpha in zip(stumps, stump_weights):\n        feature_i, threshold, polarity = stump\n        predictions = np.ones(X_test.shape[0])\n        predictions[polarity * X_test[:, feature_i] < polarity * threshold] = -1\n        y_pred += alpha * predictions\n\n    return [int(np.sign(y)) for y in y_pred]\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([1, 1, -1, -1])\n# X_test = np.array([[1, 1], [4, 4]])\n# print(adaboost_predict(X_train, y_train, X_test, n_clf=3))\n```\n\nThis script implements the AdaBoost algorithm using decision stumps as weak learners. It trains on the provided training data and predicts labels for the test data. The number of weak classifiers (`n_clf`) can be specified, and it defaults to 5 if not provided. The function returns a list of predicted labels for the test data."}
{"task_id": 261, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError(\"Shape must have at least two dimensions for well-defined fan_in and fan_out.\")\n    \n    fan_in = shape[1]\n    fan_out = shape[0]\n    \n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n    \n    std_dev = np.sqrt(2 / (fan_in + fan_out))\n    \n    return np.random.normal(loc=0.0, scale=std_dev, size=shape).astype(np.float)\n\n# Example usage:\n# shape = (64, 128, 3, 3)  # Example shape for a convolutional layer\n# weights = glorot_normal(shape)\n# print(\"Sample mean:\", np.mean(weights))\n# print(\"Sample std dev:\", np.std(weights))\n```\n\nThis script defines the `glorot_normal` function, which initializes a NumPy array using the Glorot/Xavier normal initialization method. The function calculates the `fan_in` and `fan_out` based on the provided shape and computes the standard deviation accordingly. It then generates a NumPy array with the specified shape, where each element is drawn from a normal distribution with the calculated mean and standard deviation. The function ensures that the returned array has the exact requested shape and dtype `float`."}
{"task_id": 266, "completion_id": 0, "completion": "```\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    # Create a dictionary to store the adjacency list\n    adj_dict = {vertex: set() for vertex in V}\n    \n    # Add edges to the adjacency dictionary\n    for u, v in E:\n        adj_dict[u].add(v)\n        adj_dict[v].add(u)\n    \n    # Convert the sets to sorted lists based on the order of V\n    adj_list = []\n    for vertex in V:\n        adj_list.append(sorted(adj_dict[vertex], key=lambda x: V.index(x)))\n    \n    return adj_list\n\n# Example usage:\nif __name__ == \"__main__\":\n    V = [0, 1, 2, 3, 4]\n    E = [(0, 1), (0, 4), (1, 2), (1, 3), (1, 4), (2, 3), (3, 4)]\n    print(build_adj_list(V, E))\n    # Output should be [[1, 4], [0, 2, 3, 4], [1, 3], [1, 2, 4], [0, 1, 3]]\n```\n\nThis script defines the `build_adj_list` function which takes a list of vertices `V` and a list of edges `E` and returns the adjacency list representation of the graph. The adjacency list is constructed using a dictionary where each key is a vertex and the value is a set of adjacent vertices. After populating the dictionary, the sets are converted to sorted lists based on the order of vertices in `V`. The example usage at the bottom demonstrates how to use the function."}
{"task_id": 267, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_error = float('inf')\n    best_feature_index = None\n    best_threshold = None\n    best_polarity = None\n\n    for feature_index in range(n_features):\n        # Extract the feature column and sort it along with corresponding labels and weights\n        feature_values = X[:, feature_index]\n        sorted_indices = np.argsort(feature_values)\n        sorted_feature_values = feature_values[sorted_indices]\n        sorted_y = y[sorted_indices]\n        sorted_sample_weights = sample_weights[sorted_indices]\n\n        # Consider all unique feature values as potential thresholds\n        unique_feature_values = np.unique(sorted_feature_values)\n        thresholds = (unique_feature_values[:-1] + unique_feature_values[1:]) / 2.0\n\n        # Try both polarities\n        for polarity in [1, -1]:\n            # Initialize error for the case where all predictions are -polarity\n            error = np.sum(sorted_sample_weights[sorted_y == polarity])\n            \n            # Iterate over thresholds and update error\n            for threshold_index, threshold in enumerate(thresholds):\n                if polarity == 1:\n                    # Flip the prediction for samples with feature value < threshold\n                    if sorted_y[threshold_index] == polarity:\n                        error -= sorted_sample_weights[threshold_index]\n                    else:\n                        error += sorted_sample_weights[threshold_index]\n                else:\n                    # Flip the prediction for samples with feature value >= threshold\n                    if sorted_y[threshold_index] == polarity:\n                        error += sorted_sample_weights[threshold_index]\n                    else:\n                        error -= sorted_sample_weights[threshold_index]\n                \n                # Update best stump if this configuration has lower error\n                if error < best_error:\n                    best_error = error\n                    best_feature_index = feature_index\n                    best_threshold = threshold\n                    best_polarity = polarity\n\n    return {\n        \"feature_index\": best_feature_index,\n        \"threshold\": round(best_threshold, 4),\n        \"polarity\": best_polarity,\n        \"weighted_error\": round(best_error, 4)\n    }\n```\n\nThis script defines a function `train_decision_stump` that computes the optimal weighted decision stump based on the given data matrix `X`, label vector `y`, and sample weights `sample_weights`. The function evaluates all features and all unique feature values as potential thresholds for both polarities and selects the configuration with the minimal weighted classification error. The results are returned in a dictionary with the best feature index, threshold, polarity, and weighted error, all rounded to four decimal places."}
{"task_id": 273, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    \n    def calculate_entropy(labels):\n        counts = Counter(labels)\n        n = len(labels)\n        return -sum((count / n) * math.log2(count / n) for count in counts.values() if count > 0)\n    \n    # Convert inputs to numpy arrays if they are not already\n    feature = np.asarray(feature)\n    target = np.asarray(target)\n    \n    # Sort the feature and target based on the feature values\n    sorted_indices = np.argsort(feature)\n    sorted_feature = feature[sorted_indices]\n    sorted_target = target[sorted_indices]\n    \n    # Initialize variables to keep track of the best split\n    best_threshold = None\n    max_info_gain = 0.0\n    \n    # Calculate the entropy of the parent node\n    parent_entropy = calculate_entropy(sorted_target)\n    n = len(sorted_feature)\n    \n    # Iterate through the sorted feature values to find the best split\n    for i in range(n - 1):\n        # Only consider distinct values for thresholds\n        if sorted_feature[i] != sorted_feature[i + 1]:\n            threshold = (sorted_feature[i] + sorted_feature[i + 1]) / 2.0\n            \n            # Split the data into left and right subsets\n            left_labels = sorted_target[:i + 1]\n            right_labels = sorted_target[i + 1:]\n            \n            # Calculate the information gain for the current threshold\n            left_entropy = calculate_entropy(left_labels)\n            right_entropy = calculate_entropy(right_labels)\n            info_gain = parent_entropy - (len(left_labels) / n) * left_entropy - (len(right_labels) / n) * right_entropy\n            \n            # Update the best threshold if the current one is better\n            if info_gain > max_info_gain:\n                max_info_gain = info_gain\n                best_threshold = threshold\n    \n    # Return the best threshold and information gain, rounded to 4 decimal places\n    return (round(best_threshold, 4), round(max_info_gain, 4)) if best_threshold is not None else (None, 0.0)\n```\n\nThis script defines the `best_split` function which calculates the optimal numerical threshold for splitting a dataset in a decision tree using information gain. The function handles cases where no legal thresholds exist or where no positive information gain can be achieved."}
{"task_id": 286, "completion_id": 0, "completion": "```\npython\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    return [[0.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    return [[1.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    return [[random.uniform(low, high) for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError(\"Invalid initialization function.\")\n```\n\nThis script defines the required initializer functions (`zeros_init`, `ones_init`, and `random_uniform_init`) and the `get_initializer` function that retrieves the appropriate initializer based on the provided name. The `get_initializer` function checks if the name corresponds to a callable object in the global namespace and raises a `ValueError` if it does not."}
{"task_id": 287, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n    \n    # Calculate the output dimensions\n    H_out = (H - p_h) // s_h + 1\n    W_out = (W - p_w) // s_w + 1\n    \n    # Initialize the pooled output\n    pooled_output = np.zeros((N, C, H_out, W_out))\n    \n    # Forward pass\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_out):\n                for w in range(W_out):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    pooled_output[n, c, h, w] = np.mean(X[n, c, h_start:h_end, w_start:w_end])\n    \n    # Initialize the gradient input\n    grad_input = np.zeros_like(X)\n    \n    # Backward pass\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_out):\n                for w in range(W_out):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += accum_grad[n, c, h, w] / (p_h * p_w)\n    \n    # Round to the nearest 4th decimal and convert to list\n    pooled_output = np.round(pooled_output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    \n    return pooled_output, grad_input\n```\n\nThis script defines the `average_pool2d` function, which performs both the forward and backward passes of a 2-D average-pooling layer. The function takes the input tensor `X`, pooling window shape `pool_shape`, stride `stride`, and the accumulated gradient `accum_grad` as inputs. It returns the pooled output and the gradient input, both rounded to the nearest 4th decimal and converted to Python lists."}
{"task_id": 290, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-8)\n    \n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        return (tree_a.feature == tree_b.feature and\n                np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-8) and\n                compare_trees(tree_a.left, tree_b.left) and\n                compare_trees(tree_a.right, tree_b.right))\n    \n    return False\n```\n\nThis script defines the `Node` and `Leaf` classes using `dataclasses`, and implements the `compare_trees` function to recursively compare two decision trees based on the specified criteria. The function checks if both nodes are `Leaf` instances and compares their values using `np.allclose` with a tolerance of \\(1 \\times 10^{-8}\\). If both nodes are `Node` instances, it compares the feature index, threshold, and recursively compares the left and right subtrees. If the nodes are of different types (one `Node` and one `Leaf`), it returns `False`."}
{"task_id": 292, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                            parent2: list[list[int | float]],\n                            cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    # Convert parent lists to numpy arrays for easy manipulation\n    np_parent1 = np.array(parent1)\n    np_parent2 = np.array(parent2)\n    \n    # Validate that the shapes are the same\n    if np_parent1.shape != np_parent2.shape:\n        return -1\n    \n    # Get the number of columns\n    num_cols = np_parent1.shape[1]\n    \n    # Validate the cutoff value\n    if not (0 <= cutoff <= num_cols):\n        raise ValueError(\"Cutoff must be between 0 and the number of columns (inclusive)\")\n    \n    # Perform the crossover\n    child1 = np.concatenate((np_parent1[:, :cutoff], np_parent2[:, cutoff:]), axis=1)\n    child2 = np.concatenate((np_parent2[:, :cutoff], np_parent1[:, cutoff:]), axis=1)\n    \n    # Convert the result back to lists\n    return child1.tolist(), child2.tolist()\n\n# Example usage:\nparent1 = [\n    [1, 2, 3],\n    [4, 5, 6]\n]\n\nparent2 = [\n    [7, 8, 9],\n    [10, 11, 12]\n]\n\ncutoff = 1\n\nchild1, child2 = single_point_crossover(parent1, parent2, cutoff)\nprint(\"Child 1:\", child1)\nprint(\"Child 2:\", child2)\n```\n\nThis script defines the `single_point_crossover` function as specified, performs the necessary validations, and returns the two children matrices as nested Python lists. The example usage at the end demonstrates how to call the function and print the resulting children matrices."}
{"task_id": 294, "completion_id": 0, "completion": "```\npython\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {label: [] for label in G['_V2I']}\n    \n    for edges in G['_G']:\n        for src_label, tgt_label, weight in edges:\n            adj[src_label].append((tgt_label, weight))\n            if not G['is_directed']:\n                adj[tgt_label].append((src_label, weight))\n    \n    # Sort the neighbour lists alphabetically by the neighbour label\n    for label in adj:\n        adj[label].sort(key=lambda x: x[0])\n    \n    return adj\n\n# Example usage:\n# G = {\n#     'is_directed': False,\n#     '_V2I': {'A': 0, 'B': 1, 'C': 2},\n#     '_G': [[('A', 'B', 1.0), ('A', 'C', 2.5)], [('B', 'C', 3.0)], []]\n# }\n# print(to_networkx(G))\n# Output: {'A': [('B', 1.0), ('C', 2.5)], 'B': [('A', 1.0), ('C', 3.0)], 'C': [('A', 2.5), ('B', 3.0)]}\n```\n\nThis script defines the `to_networkx` function which converts a custom graph representation into a plain adjacency dictionary, ensuring that the neighbour lists are sorted alphabetically by the neighbour label. It handles both directed and undirected graphs as specified."}
{"task_id": 296, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    # Convert the input to a NumPy array if it isn't already\n    x = np.asarray(x)\n    \n    # Check if all elements are either 0 or 1\n    return np.all((x == 0) | (x == 1))\n\n# Example usage:\n# print(is_binary(np.array([0, 1, 0, 1])))  # Should return True\n# print(is_binary(np.array([0, 2, 0, 1])))  # Should return False\n# print(is_binary(np.array([True, False, True])))  # Should return True\n# print(is_binary(np.array([0.0, 1.0, 0.0])))  # Should return True\n```"}
{"task_id": 298, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    # Tokenize the corpus\n    tokenized_corpus = []\n    for sentence in corpus:\n        tokens = sentence.split()\n        if N > 1:\n            tokens = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        tokenized_corpus.append(tokens)\n    \n    # Flatten the tokenized corpus to count N-grams\n    all_tokens = [token for sentence in tokenized_corpus for token in sentence]\n    \n    # Count N-grams and (N-1)-grams\n    ngram_counts = Counter(tuple(gram) for sentence in tokenized_corpus for gram in zip(*[sentence[i:] for i in range(N)]))\n    n_minus_1_gram_counts = Counter(tuple(gram) for sentence in tokenized_corpus for gram in zip(*[sentence[i:] for i in range(N-1)]))\n    \n    # Tokenize the query and pad it if necessary\n    query_tokens = query.split()\n    if len(query_tokens) < N:\n        return float('-inf')\n    if N > 1:\n        query_tokens = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n    \n    # Calculate the log-probability\n    log_prob = 0.0\n    for i in range(len(query_tokens) - N + 1):\n        ngram = tuple(query_tokens[i:i + N])\n        prefix = tuple(query_tokens[i:i + N - 1])\n        \n        if ngram not in ngram_counts or prefix not in n_minus_1_gram_counts or n_minus_1_gram_counts[prefix] == 0:\n            return float('-inf')\n        \n        prob = ngram_counts[ngram] / n_minus_1_gram_counts[prefix]\n        log_prob += math.log(prob)\n    \n    return round(log_prob, 4)\n\n# Example usage\ncorpus = [\"a b a\", \"b a b\"]\nquery = \"a b\"\nN = 1\nprint(ngram_log_prob(corpus, query, N))  # Output: -1.3863\n```"}
{"task_id": 302, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n, d = X.shape\n    \n    # Step 1: Build the weighted adjacency matrix W\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i + 1, n):\n            w_ij = 1 / (1 + np.linalg.norm(X[i] - X[j]))\n            W[i, j] = w_ij\n            W[j, i] = w_ij\n    \n    # Step 2: Compute the unnormalized graph Laplacian L\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    \n    # Step 3: Obtain the first k eigenvectors of L\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    \n    # Step 4: Run k-means on the rows of E\n    # Initialize centroids with the first k rows of E\n    centroids = E[:k].copy()\n    labels = np.zeros(n, dtype=int)\n    \n    for _ in range(100):\n        # Assign labels based on nearest centroid\n        for i in range(n):\n            distances = np.linalg.norm(E[i] - centroids, axis=1)\n            labels[i] = np.argmin(distances)\n        \n        # Update centroids\n        new_centroids = np.zeros((k, k))\n        counts = np.zeros(k)\n        for i in range(n):\n            new_centroids[labels[i]] += E[i]\n            counts[labels[i]] += 1\n        \n        # Handle empty clusters\n        for j in range(k):\n            if counts[j] == 0:\n                new_centroids[j] = E[np.random.choice(n)]\n            else:\n                new_centroids[j] /= counts[j]\n        \n        # Check for convergence\n        if np.allclose(centroids, new_centroids):\n            break\n        \n        centroids = new_centroids\n    \n    return labels.tolist()\n```\n\nThis script implements the spectral clustering algorithm as described. It uses NumPy for numerical operations and manually constructs the adjacency matrix, computes the graph Laplacian, finds the eigenvectors, and performs k-means clustering using the first k eigenvectors as features. The implementation ensures that the clustering process is deterministic by using the first k rows of E as initial centroids."}
{"task_id": 303, "completion_id": 0, "completion": "```\npython\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_index = max(ix - 1, 0)\n    prev_label, prev_mine = params[prev_index]\n    curr_label, curr_mine = params[ix]\n\n    debug_str = (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_mine}\\n\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{golds[prev_label]}\\n\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_mine}\\n\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{golds[curr_label]}{warn_str}\\n\"\n        \"----------------------- END DEBUG -----------------------\"\n    )\n    return debug_str\n```"}
{"task_id": 304, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    # Add intercept if needed\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n    \n    # Determine the number of features (including intercept if added)\n    M = X.shape[1]\n    \n    # Handle the prior mean mu\n    if np.isscalar(mu):\n        mu = np.full(M, mu)\n    \n    # Handle the prior scale V\n    if V is None:\n        V_inv = np.eye(M)\n    elif np.isscalar(V):\n        V_inv = np.eye(M) / V\n    elif isinstance(V, (list, tuple)):\n        V_inv = np.diag(1.0 / np.array(V))\n    else:\n        V_inv = np.linalg.inv(V)\n    \n    # Compute the posterior mean mu_b\n    XTX = X.T @ X\n    XTy = X.T @ y\n    Sigma_b = np.linalg.inv(V_inv + XTX)\n    mu_b = Sigma_b @ (V_inv @ mu + XTy)\n    \n    # Return the coefficients rounded to 4 decimal places\n    return [round(coef, 4) for coef in mu_b]\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4]])\n# y = np.array([5, 6])\n# print(bayesian_posterior_mean(X, y))\n```\n\nThis script defines the `bayesian_posterior_mean` function, which calculates the posterior mean of the regression coefficients in a Bayesian linear regression model with an unknown noise variance. The function handles different specifications for the prior mean and scale, and optionally fits an intercept. The resulting coefficients are rounded to four decimal places."}
{"task_id": 308, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(mel):\n        return 700 * (10**(mel / 2595) - 1)\n\n    # Convert limits expressed in Hertz to the Mel scale\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n\n    # Generate n_filters+2 equally-spaced values on the Mel axis\n    mel_points = np.linspace(min_mel, max_mel, n_filters + 2)\n\n    # Convert those Mel values back to Hertz\n    hz_points = mel_to_hz(mel_points)\n\n    # Number of DFT bins\n    n_bins = N // 2 + 1\n\n    # Initialize the filterbank matrix\n    filterbank = np.zeros((n_filters, n_bins))\n\n    # Compute the weights for each filter and bin\n    for i in range(n_filters):\n        f_left = hz_points[i]\n        f_center = hz_points[i + 1]\n        f_right = hz_points[i + 2]\n\n        for k in range(n_bins):\n            freq = k * fs / N\n\n            if f_left < freq <= f_center:\n                filterbank[i, k] = (freq - f_left) / (f_center - f_left)\n            elif f_center < freq <= f_right:\n                filterbank[i, k] = (f_right - freq) / (f_right - f_center)\n\n        # Normalize the filter if required\n        if normalize:\n            filterbank[i] *= 2 / (f_right - f_left)\n\n    # Round to 4 decimal places and convert to a plain Python list\n    filterbank = np.round(filterbank, 4).tolist()\n\n    return filterbank\n```\n\nThis script defines the `mel_filterbank` function, which constructs a Mel filterbank matrix according to the given specifications. It uses NumPy for numerical operations but ensures that the final output is a plain Python list with values rounded to four decimal places."}
{"task_id": 312, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    \n    # Coefficients for the Blackman-Harris window\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    \n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n    \n    # Generate the window\n    n = np.arange(window_len)\n    window = (a0 \n              - a1 * np.cos(2 * np.pi * n / N) \n              + a2 * np.cos(4 * np.pi * n / N) \n              - a3 * np.cos(6 * np.pi * n / N))\n    \n    # For periodic version, we need to discard the last value\n    if not symmetric and window_len > 1:\n        window = window[:-1]\n    \n    # Round to 4 decimal places\n    return [round(x, 4) for x in window]\n\n# Example usage:\n# print(blackman_harris(10, symmetric=False))  # Periodic version\n# print(blackman_harris(10, symmetric=True))   # Symmetric version\n```\n\nThis script defines the `blackman_harris` function that generates the Blackman-Harris window for a given length and variant. It handles the special cases where the window length is less than or equal to zero or exactly one. The function uses NumPy for efficient computation and rounds the result to four decimal places before returning it as a list."}
{"task_id": 313, "completion_id": 0, "completion": "```\npython\nimport math\nimport numpy as np\n\ndef digamma(x):\n    \"\"\"Compute the digamma function using recursion and asymptotic expansion.\"\"\"\n    # Use recursion to shift small x to a moderate value\n    epsilon = 1e-6\n    if x < 6:\n        psi = -math.euler_gamma  # Digamma(1) = -\u03b3 (Euler-Mascheroni constant)\n        for i in range(1, int(6 - x) + 1):\n            psi -= 1 / (x + i - 1)\n        x = 6\n    \n    # Use asymptotic expansion for larger x\n    psi += math.log(x) - 0.5 / x - 1 / (12 * x**2) + 1 / (120 * x**4) - 1 / (252 * x**6)\n    return psi\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    gamma_d = gamma[d]\n    gamma_dt = gamma_d[t]\n    sum_gamma_d = sum(gamma_d)\n    \n    psi_gamma_dt = digamma(gamma_dt)\n    psi_sum_gamma_d = digamma(sum_gamma_d)\n    \n    result = psi_gamma_dt - psi_sum_gamma_d\n    return round(result, 4)\n\n# Example usage:\ngamma = np.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])\nd = 0\nt = 1\nprint(expected_log_dirichlet(gamma, d, t))  # Output should be rounded to 4 decimals\n```"}
{"task_id": 317, "completion_id": 0, "completion": "```\npython\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    # Determine the previous index\n    prev_ix = max(ix - 1, 0)\n    \n    # Extract previous and current data\n    prev_prediction, prev_label = params[prev_ix]\n    curr_prediction, curr_label = params[ix]\n    \n    # Get the gold values for the previous and current labels\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    \n    # Construct the formatted string\n    report = (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_prediction}\\n\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{prev_gold}\\n\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_prediction}\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{curr_gold}{warn_str}\\n\"\n        \"----------------------- END DEBUG -----------------------\\n\"\n    )\n    \n    return report\n```"}
{"task_id": 318, "completion_id": 0, "completion": "```\npython\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n\n    stumps = []\n    alphas = []\n\n    for _ in range(n_estimators):\n        min_error = float('inf')\n        best_feature = None\n        best_threshold = None\n        best_polarity = None\n\n        for feature in range(n_features):\n            thresholds = np.unique(X_train[:, feature])\n            for t in thresholds:\n                for p in [-1, 1]:\n                    predictions = np.ones(n_samples)\n                    predictions[X_train[:, feature] * p < t * p] = -1\n\n                    weighted_error = np.sum(sample_weights[predictions != y_train])\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        p *= -1\n\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_feature = feature\n                        best_threshold = t\n                        best_polarity = p\n\n        epsilon = min_error\n        alpha = 0.5 * math.log((1 - epsilon) / epsilon)\n        alphas.append(alpha)\n\n        # Update weights\n        predictions = np.ones(n_samples)\n        predictions[X_train[:, best_feature] * best_polarity < best_threshold * best_polarity] = -1\n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        sample_weights /= np.sum(sample_weights)\n\n        stumps.append((best_feature, best_threshold, best_polarity))\n\n    # Prediction on test data\n    final_predictions = np.zeros(X_test.shape[0])\n    for alpha, (feature, threshold, polarity) in zip(alphas, stumps):\n        predictions = np.ones(X_test.shape[0])\n        predictions[X_test[:, feature] * polarity < threshold * polarity] = -1\n        final_predictions += alpha * predictions\n\n    return [1 if pred >= 0 else -1 for pred in final_predictions]\n```"}
{"task_id": 329, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    \n    delta_f = fs / N\n    \n    if positive_only:\n        # Non-negative frequencies\n        frequencies = np.arange(0, N // 2 + 1) * delta_f\n    else:\n        # Full list of frequencies as per NumPy's fftfreq\n        frequencies = np.fft.fftfreq(N, d=1/fs)\n    \n    # Round to 4 decimal places and convert to list\n    return np.round(frequencies, 4).tolist()\n\n# Example usage:\n# print(dft_bins(8, 1000, positive_only=True))\n# print(dft_bins(8, 1000, positive_only=False))\n```\n\nThis script defines the `dft_bins` function which calculates the center frequencies of DFT bins according to the specified conditions. It uses NumPy's `arange` for generating non-negative frequencies and `fftfreq` for generating the full list of frequencies, rounding each element to four decimal places before returning them as a Python list."}
{"task_id": 331, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    \n    n_samples = y_true.shape[0]\n    \n    # Initialize an array to store the sum of OOB predictions and a counter for the number of OOB predictions\n    oob_sum = np.zeros(n_samples)\n    oob_count = np.zeros(n_samples, dtype=int)\n    \n    # Compute the sum and count of OOB predictions for each sample\n    for i in range(n_samples):\n        oob_predictions = predictions[i, oob_mask[i]]\n        oob_sum[i] = np.sum(oob_predictions)\n        oob_count[i] = len(oob_predictions)\n    \n    # Identify samples with at least one OOB prediction\n    valid_samples = oob_count > 0\n    \n    # If no sample has an OOB prediction, return -1\n    if not np.any(valid_samples):\n        return -1\n    \n    # Compute the average OOB prediction for each valid sample\n    oob_avg = oob_sum[valid_samples] / oob_count[valid_samples]\n    \n    # Compute the squared errors between the average OOB predictions and the true values\n    squared_errors = (oob_avg - y_true[valid_samples]) ** 2\n    \n    # Compute the OOB-MSE\n    oob_mse_value = np.mean(squared_errors)\n    \n    return round(oob_mse_value, 4)\n\n# Example usage:\n# y_true = [3.0, -0.5, 2.0, 7.0]\n# predictions = [\n#     [2.5, 3.1, 3.0],\n#     [-0.6, -0.4, -0.5],\n#     [2.1, 2.0, 1.9],\n#     [6.8, 7.2, 7.1]\n# ]\n# oob_mask = [\n#     [True, False, True],\n#     [False, True, True],\n#     [True, True, False],\n#     [True, True, True]\n# ]\n# print(oob_mse(y_true, predictions, oob_mask))  # Example output: 0.0033\n```\n\nThis script defines the `oob_mse` function, which calculates the out-of-bag mean squared error for a Random Forest regressor based on the provided true target values, predictions, and out-of-bag mask. The function handles cases where no samples have out-of-bag predictions by returning -1."}
{"task_id": 332, "completion_id": 0, "completion": "```\npython\nfrom collections import Counter\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    # Step 1: Count support for each item\n    item_support = Counter()\n    for transaction in transactions:\n        unique_items = set(transaction)\n        item_support.update(unique_items)\n    \n    # Step 2: Discard items below min_support\n    frequent_items = {item for item, support in item_support.items() if support >= min_support}\n    \n    # Step 3: Create a global ordering of items: first by decreasing support, then alphabetically\n    ordered_items = sorted(frequent_items, key=lambda x: (-item_support[x], x))\n    \n    # Step 4: Build the FP-Tree\n    root = {\"support\": 0, \"children\": {}}\n    \n    for transaction in transactions:\n        # Remove duplicates, keep only frequent items, and reorder according to global ordering\n        cleaned_transaction = sorted(set(transaction).intersection(frequent_items), key=lambda x: ordered_items.index(x))\n        \n        # Insert cleaned transaction into the FP-Tree\n        current_node = root\n        for item in cleaned_transaction:\n            if item not in current_node[\"children\"]:\n                current_node[\"children\"][item] = {\"support\": 0, \"children\": {}}\n            current_node[\"children\"][item][\"support\"] += 1\n            current_node = current_node[\"children\"][item]\n    \n    return root\n\n# Example usage:\ntransactions = [\n    ['a', 'b', 'c'],\n    ['a', 'b', 'c', 'd'],\n    ['a', 'c', 'e'],\n    ['a', 'b'],\n    ['b', 'e'],\n    ['a', 'b', 'c', 'e'],\n    ['a', 'd', 'e'],\n    ['a', 'b', 'd'],\n    ['b', 'c', 'e'],\n    ['b', 'd']\n]\nmin_support = 3\nfp_tree = build_fp_tree(transactions, min_support)\nprint(fp_tree)\n```\n\nThis script defines a function `build_fp_tree` that constructs an FP-Tree from a list of transactions and a minimum support threshold. The tree is represented as a nested dictionary, and the function follows the specified steps to ensure the tree is built correctly. The example usage at the end demonstrates how to call the function with a sample dataset."}
{"task_id": 336, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", Y: list[list[int | float]] | \"np.ndarray\" | None = None, c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    # Convert X and Y to numpy arrays if they are not already\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    \n    # Check if the number of columns in X and Y are the same\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # Compute the dot product matrix\n    K = np.dot(X, Y.T) + c0\n    \n    # Round the result to 4 decimal places\n    K_rounded = np.round(K, 4)\n    \n    # Convert the result to a list of lists and return\n    return K_rounded.tolist()\n\n# Example usage:\n# X = [[1, 2], [3, 4]]\n# Y = [[5, 6], [7, 8]]\n# print(linear_kernel(X, Y, c0=0))\n```\n\nThis script defines the `linear_kernel` function which computes the linear kernel matrix for given input vectors `X` and `Y`. It handles both list and NumPy array inputs, checks for compatible dimensions, and returns the kernel matrix rounded to four decimal places. If the dimensions are incompatible, it returns `-1`."}
{"task_id": 340, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n\n    # Update the first and second moment estimates\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad**2\n\n    # Compute bias-corrected first and second moment estimates\n    m_t_hat = m_t / (1 - beta1**t)\n    v_t_hat = v_t / (1 - beta2**t)\n\n    # Update the parameter\n    theta_t_prime = param - lr * m_t_hat / (np.sqrt(v_t_hat) + eps)\n\n    # Convert to lists and round to 8 decimal places\n    updated_param = np.round(theta_t_prime, 8).tolist()\n    new_m = np.round(m_t, 8).tolist()\n    new_v = np.round(v_t, 8).tolist()\n\n    return updated_param, new_m, new_v\n\n# Example usage:\n# param = np.array([0.5, -0.2])\n# grad = np.array([0.1, 0.05])\n# t = 1\n# m = np.zeros_like(param)\n# v = np.zeros_like(param)\n# updated_param, new_m, new_v = adam_update(param, grad, t, m, v)\n# print(updated_param, new_m, new_v)\n```\n\nThis script defines the `adam_update` function, which performs a single step of the Adam optimization algorithm. It updates the parameter, first moment, and second moment estimates according to the Adam update rules and returns them as lists rounded to 8 decimal places."}
{"task_id": 343, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                          rewards: list[float] | np.ndarray,\n                          retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # Number of samples to retain\n    n_samples_to_retain = int(retain_prcnt * len(rewards))\n    \n    # Get indices of the top retain_prcnt samples\n    elite_indices = np.argsort(rewards)[-n_samples_to_retain:]\n    \n    # Select the elite samples\n    elite_samples = theta_samples[elite_indices]\n    \n    # Compute mean and variance of the elite samples\n    mean = np.mean(elite_samples, axis=0)\n    variance = np.var(elite_samples, axis=0)\n    \n    # Round the results to four decimal places\n    mean_rounded = [round(m, 4) for m in mean]\n    variance_rounded = [round(v, 4) for v in variance]\n    \n    return mean_rounded, variance_rounded\n```\n\nThis script implements the Cross-Entropy Method (CEM) parameter update as described. It retains the top `retain_prcnt` fraction of the parameter samples based on their rewards, computes the mean and variance of these retained samples, and returns these values rounded to four decimal places."}
{"task_id": 353, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    \n    label_counts = Counter(labels)\n    total_labels = len(labels)\n    entropy_value = 0.0\n    \n    for count in label_counts.values():\n        p_i = count / total_labels\n        if p_i > 0:\n            entropy_value -= p_i * math.log2(p_i)\n    \n    return round(entropy_value, 5)\n\n# Example usage:\n# print(entropy(['a', 'a', 'b', 'b', 'b']))  # Output: 0.97095\n# print(entropy(['a', 'a', 'a']))          # Output: 0.0\n# print(entropy([]))                       # Output: 0.0\n```\n\nThis script defines a function `entropy` that calculates the base-2 Shannon entropy of a given sequence of class labels. It handles special cases such as an empty input or identical labels, and rounds the result to five decimal places."}
{"task_id": 354, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kernel_rows, kernel_cols, _, out_ch = W.shape\n    \n    # Determine padding\n    if isinstance(pad, int):\n        pr1 = pr2 = pc1 = pc2 = pad\n    elif isinstance(pad, tuple):\n        if len(pad) == 2:\n            pr1 = pr2 = pad[0]\n            pc1 = pc2 = pad[1]\n        elif len(pad) == 4:\n            pr1, pr2, pc1, pc2 = pad\n    elif pad == 'same':\n        pr1 = pr2 = ((stride - 1) * in_rows - stride + kernel_rows + (kernel_rows - 1) * (dilation - 1)) // 2\n        pc1 = pc2 = ((stride - 1) * in_cols - stride + kernel_cols + (kernel_cols - 1) * (dilation - 1)) // 2\n    else:\n        pr1 = pr2 = pc1 = pc2 = 0\n    \n    # Apply padding\n    X_padded = np.pad(X, ((0, 0), (pr1, pr2), (pc1, pc2), (0, 0)), mode='constant', constant_values=0)\n    \n    # Calculate output dimensions\n    out_rows = (in_rows + pr1 + pr2 - kernel_rows - (kernel_rows - 1) * (dilation - 1)) // stride + 1\n    out_cols = (in_cols + pc1 + pc2 - kernel_cols - (kernel_cols - 1) * (dilation - 1)) // stride + 1\n    \n    # Im2col\n    W_col = W.transpose(3, 0, 1, 2).reshape(out_ch, -1)\n    X_col = np.zeros((W_col.shape[1], n_ex * out_rows * out_cols))\n    \n    for ex in range(n_ex):\n        for row in range(out_rows):\n            for col in range(out_cols):\n                r_start = row * stride\n                c_start = col * stride\n                \n                r_end = r_start + kernel_rows * (dilation + 1) - dilation\n                c_end = c_start + kernel_cols * (dilation + 1) - dilation\n                \n                patch = X_padded[ex, r_start:r_end:dilation+1, c_start:c_end:dilation+1, :].flatten()\n                X_col[:, ex * out_rows * out_cols + row * out_cols + col] = patch\n    \n    # Perform matrix multiplication\n    out_col = W_col @ X_col\n    out = out_col.reshape(out_ch, n_ex, out_rows, out_cols).transpose(1, 2, 3, 0)\n    \n    return out.tolist()\n```\n\nThis script defines the `conv2D` function, which performs 2-D convolution using the `im2col` technique followed by a matrix multiplication (GEMM). The function handles different padding specifications, stride, and dilation, and returns the result as a Python list."}
{"task_id": 355, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # Step 1: Standardise the data\n    mean = np.mean(data, axis=0)\n    centered_data = data - mean\n    \n    if solver == \"svd\":\n        # Step 2: Use SVD to get eigen-vectors\n        U, s, Vt = np.linalg.svd(centered_data, full_matrices=False)\n        eigen_vectors = Vt.T  # Vt is already transposed in svd output\n        explained_variance = s**2 / (centered_data.shape[0] - 1)\n    elif solver == \"eigen\":\n        # Step 2: Use eigen-decomposition of covariance matrix\n        cov_matrix = np.cov(centered_data, rowvar=False, ddof=1)\n        eigen_values, eigen_vectors = np.linalg.eigh(cov_matrix)\n        explained_variance = eigen_values\n    else:\n        raise ValueError(\"Solver must be either 'svd' or 'eigen'\")\n    \n    # Step 3: Sort the directions and keep the first n_components\n    sorted_indices = np.argsort(explained_variance)[::-1]\n    eigen_vectors = eigen_vectors[:, sorted_indices]\n    explained_variance = explained_variance[sorted_indices]\n    eigen_vectors = eigen_vectors[:, :n_components]\n    explained_variance = explained_variance[:n_components]\n    \n    # Step 4: Make the sign of every kept direction deterministic\n    for i in range(eigen_vectors.shape[1]):\n        first_nonzero_idx = np.where(eigen_vectors[:, i] != 0)[0][0]\n        if eigen_vectors[first_nonzero_idx, i] < 0:\n            eigen_vectors[:, i] *= -1\n    \n    # Step 5: Project the centred data onto the retained directions\n    scores = centered_data @ eigen_vectors\n    \n    # Step 6: Compute the explained variance ratio\n    total_variance = np.sum(np.var(centered_data, axis=0))\n    explained_variance_ratio = explained_variance / total_variance\n    \n    # Step 7: Round the final results\n    scores_rounded = scores.round(4).tolist()\n    explained_variance_ratio_rounded = explained_variance_ratio.round(4).tolist()\n    \n    return scores_rounded, explained_variance_ratio_rounded\n```"}
{"task_id": 356, "completion_id": 0, "completion": "```\npython\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # For classification, return the index of the maximum probability\n        return int(np.argmax(leaf.value))\n    else:\n        # For regression, return the stored scalar value\n        return leaf.value\n\n# Example usage:\nif __name__ == \"__main__\":\n    import numpy as np\n\n    # Classification leaf example\n    classification_leaf = Leaf([0.1, 0.3, 0.6])\n    print(leaf_predict(classification_leaf, classifier=True))  # Output: 2\n\n    # Regression leaf example\n    regression_leaf = Leaf(15.7)\n    print(leaf_predict(regression_leaf, classifier=False))  # Output: 15.7\n```\n\nThis script defines the `Leaf` class and the `leaf_predict` function as specified. The `leaf_predict` function checks the `classifier` flag to determine whether to return the index of the maximum probability (for classification) or the raw scalar value (for regression). The example usage demonstrates how to use the `leaf_predict` function with both a classification and a regression leaf."}
{"task_id": 357, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    # Initialize centroids with the first K samples\n    centroids = data[:K].copy().astype(float)\n    \n    for _ in range(max_iters):\n        # Assign each data point to the closest centroid\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Store old centroids for comparison\n        old_centroids = centroids.copy()\n        \n        # Recompute centroids\n        for k in range(K):\n            mask = (labels == k)\n            if np.any(mask):\n                centroids[k] = data[mask].mean(axis=0)\n        \n        # Check for convergence\n        if np.all(np.linalg.norm(centroids - old_centroids, axis=1) < 1e-6):\n            break\n    \n    # Sort centroids lexicographically\n    centroids = centroids[np.lexsort([centroids[:, i] for i in range(centroids.shape[1] - 1, -1, -1)])]\n    \n    # Round to four decimals and convert to list of lists\n    return centroids.round(4).tolist()\n\n# Example usage\ndata = np.array([[1, 1],\n                 [1, 2],\n                 [2, 1],\n                 [8, 8],\n                 [9, 8],\n                 [8, 9]])\nK = 2\nprint(kmeans(data, K))\n```\n\nThis script defines a `kmeans` function that performs the K-Means clustering algorithm as described. It initializes the centroids with the first K samples, iteratively assigns data points to the nearest centroid, updates the centroids, and checks for convergence. The centroids are sorted lexicographically and rounded to four decimal places before being returned as a list of lists."}
{"task_id": 362, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | \"np.ndarray\") -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert the input data to a float NumPy array\n    matrix = np.array(data, dtype=float)\n    \n    # Compute the sum of each row\n    row_sums = matrix.sum(axis=1)\n    \n    # Check if any row sum is zero\n    if np.any(row_sums == 0):\n        return -1\n    \n    # Divide each element by the sum of its row\n    stochastic_matrix = matrix / row_sums[:, np.newaxis]\n    \n    # Round each element to 4 decimal places\n    stochastic_matrix_rounded = np.round(stochastic_matrix, 4)\n    \n    # Convert the result to a native Python list of lists\n    return stochastic_matrix_rounded.tolist()\n\n# Example usage:\n# data = [[1, 2, 3], [0, 0, 0], [4, 5, 6]]\n# print(row_stochastic_matrix(data))  # Output: -1\n# data = [[1, 2, 3], [4, 5, 6]]\n# print(row_stochastic_matrix(data))  # Output: [[0.1667, 0.3333, 0.5000], [0.2667, 0.3333, 0.4000]]\n```\n\nThis script defines the `row_stochastic_matrix` function, which takes a 2-D list or NumPy array as input and returns a row-stochastic matrix with each entry rounded to four decimal places. If any row sum is zero, it returns `-1`."}
{"task_id": 363, "completion_id": 0, "completion": "Certainly! Below is the complete implementation of the `is_continuous` function along with the provided classes to determine the continuity of the action and observation spaces based on the given flags.\n\n```python\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    \n    def all_boxes(spaces: Iterable[Space]) -> bool:\n        \"\"\"Check if all spaces in the iterable are instances of Box.\"\"\"\n        return all(isinstance(space, Box) for space in spaces)\n    \n    def is_space_continuous(space: Space, is_tuple: bool) -> bool:\n        \"\"\"Determine if a space is continuous based on its type and sub-spaces.\"\"\"\n        if isinstance(space, Box):\n            return True\n        if is_tuple:\n            if isinstance(space, Tuple):\n                return all_boxes(space.spaces)\n            elif isinstance(space, Dict):\n                return all_boxes(space.spaces.values())\n        return False\n    \n    cont_action = is_space_continuous(env.action_space, tuple_action)\n    cont_obs = is_space_continuous(env.observation_space, tuple_obs)\n    \n    return (cont_action, cont_obs)\n\n# Example usage:\n# env = Env(Tuple([Box(0, 1, (1,)), Box(0, 1, (1,))]), Box(0, 1, (3,)))\n# print(is_continuous(env, True, False))  # Output: (True, True)\n```\n\nThis script defines the necessary classes and the `is_continuous` function. The function checks if the action and observation spaces are continuous based on the provided flags and the structure of the spaces. The `all_boxes` helper function is used to verify that all sub-spaces in a `Tuple` or `Dict` are instances of `Box`."}
{"task_id": 369, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    # Initialize running prediction with zeros, same shape as a single update\n    running_pred = np.zeros_like(updates[0])\n\n    # Aggregate the predictions from all trees\n    for update in updates:\n        running_pred -= learning_rate * update\n\n    if regression:\n        # For regression, return the running prediction rounded to 4 decimals\n        return np.round(running_pred, 4)\n    else:\n        # For classification, apply softmax to get probabilities and argmax to get class labels\n        probabilities = softmax(running_pred)\n        return np.argmax(probabilities, axis=1)\n\ndef softmax(x):\n    \"\"\"Compute the softmax of each row of x.\"\"\"\n    e_x = np.exp(x - np.max(x, axis=1, keepdims=True))\n    return e_x / e_x.sum(axis=1, keepdims=True)\n\n# Example usage:\n# updates_reg = [np.array([0.1, 0.2, 0.3]), np.array([0.05, 0.1, 0.15])]\n# learning_rate_reg = 0.1\n# regression = True\n# print(gradient_boosting_predict(updates_reg, learning_rate_reg, regression))\n\n# updates_clf = [np.array([[0.1, 0.2, 0.7], [0.8, 0.1, 0.1]]), np.array([[0.2, 0.1, 0.7], [0.1, 0.8, 0.1]])]\n# learning_rate_clf = 0.1\n# regression = False\n# print(gradient_boosting_predict(updates_clf, learning_rate_clf, regression))\n```\n\nThis script defines the `gradient_boosting_predict` function which aggregates the outputs of Gradient Boosting trees according to the specified rules. It includes a helper function `softmax` to compute the softmax of each row of the input array, which is used for classification tasks. The example usage at the bottom demonstrates how to call the function for both regression and classification scenarios."}
{"task_id": 371, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, _, out_channels = W.shape\n\n    # Calculate effective kernel width with dilation\n    effective_kernel = (kernel_width - 1) * dilation + 1\n\n    # Determine padding\n    if isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple):\n        p_left, p_right = pad\n    elif pad == \"same\":\n        out_len = np.ceil(signal_length / stride).astype(int)\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    else:\n        raise ValueError(\"Invalid padding type\")\n\n    # Pad the input signals\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n\n    # Calculate output length\n    output_length = 1 + (signal_length + p_left + p_right - effective_kernel) // stride\n\n    # Initialize output volume\n    output = np.zeros((n_examples, output_length, out_channels))\n\n    # Perform the convolution\n    for i in range(n_examples):\n        for j in range(out_channels):\n            for k in range(in_channels):\n                for l in range(output_length):\n                    start_idx = l * stride\n                    end_idx = start_idx + effective_kernel\n                    receptive_field = X_padded[i, start_idx:end_idx:1+dilation, k]\n                    output[i, l, j] += np.sum(receptive_field * W[:, k, j])\n\n    return output.tolist()\n```\n\nThis script implements a 1-D cross-correlation function with support for batches, multiple input/output channels, padding (integer, tuple, or \"same\"), arbitrary stride, and dilation. The function returns the result as a nested Python list."}
{"task_id": 373, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gini(y: list[int] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    \n    # Convert input to a NumPy array if it's not already\n    y = np.array(y)\n    \n    # Calculate the number of samples and the unique classes\n    N = len(y)\n    classes, counts = np.unique(y, return_counts=True)\n    \n    # Calculate the relative frequencies of each class\n    p_c = counts / N\n    \n    # Calculate the Gini impurity\n    gini_impurity = 1 - np.sum(p_c ** 2)\n    \n    return round(gini_impurity, 4)\n\n# Example usage:\n# y = [1, 1, 2, 2, 3, 3, 3]\n# print(gini(y))  # Output: 0.6667\n```"}
{"task_id": 374, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    # Check if the number of samples in X and y are consistent\n    if X.shape[0] != y.shape[0]:\n        return -1\n    \n    # Initialize parameters\n    m, n = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n    \n    # Perform gradient descent\n    for _ in range(n_iterations):\n        # Calculate predictions\n        y_pred = X.dot(theta) + b\n        \n        # Calculate gradients\n        dw = (2 / m) * X.T.dot(y_pred - y)\n        db = (2 / m) * np.sum(y_pred - y)\n        \n        # Update parameters\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    \n    # Return the learned parameters rounded to 4 decimal places\n    return [round(t, 4) for t in theta], round(b, 4)\n\n# Example usage:\n# X = np.array([[1, 1], [1, 2], [2, 2], [2, 3]])\n# y = np.array([1, 2, 2, 3])\n# weights, bias = linear_regression_gd(X, y, learning_rate=0.01, n_iterations=10000)\n# print(\"Weights:\", weights)\n# print(\"Bias:\", bias)\n```\n\nThis script defines a function `linear_regression_gd` that trains a multiple linear regression model using batch gradient descent. It checks for consistency in the input data, initializes parameters, performs the specified number of iterations of gradient descent, and returns the learned parameters rounded to four decimal places."}
{"task_id": 376, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Convert the input list of lists to a NumPy array\n    X_np = np.array(X)\n    \n    # Check if the matrix is square\n    if X_np.shape[0] != X_np.shape[1]:\n        return False\n    \n    # Check if the matrix is equal to its transpose using np.allclose\n    return np.allclose(X_np, X_np.T, atol=1e-8)\n\n# Example usage:\n# symmetric_matrix = [[1, 2, 3], [2, 4, 5], [3, 5, 6]]\n# non_symmetric_matrix = [[1, 2], [3, 4]]\n# print(is_symmetric(symmetric_matrix))  # Output: True\n# print(is_symmetric(non_symmetric_matrix))  # Output: False\n```\n\nThis script defines a function `is_symmetric` that checks if a given 2-D numeric array (represented as a list of lists) is symmetric with respect to its main diagonal. It uses NumPy for efficient matrix operations and comparison, ensuring that the function handles floating-point precision issues by using `np.allclose` with a specified tolerance."}
{"task_id": 377, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Computes the negative gradient of the logistic loss for binary classification.\n    \n    Parameters:\n    y (list): Binary class labels (0 or 1).\n    f (list): Current prediction scores (floats).\n    \n    Returns:\n    list: List of negative gradients rounded to four decimal places.\n          Returns -1 if the label array contains values other than 0 or 1.\n    \"\"\"\n    # Convert y to numpy array for efficient computation\n    y_array = np.array(y)\n    f_array = np.array(f)\n    \n    # Check if y contains only 0 or 1\n    if not np.all(np.isin(y_array, [0, 1])):\n        return -1\n    \n    # Transform y to the set {-1, 1}\n    y_prime = 2 * y_array - 1\n    \n    # Compute the negative gradient\n    g = y_prime / (1 + np.exp(y_prime * f_array))\n    \n    # Return the result rounded to four decimal places\n    return [round(g_i, 4) for g_i in g]\n\n# Example usage:\n# y = [0, 1, 0, 1]\n# f = [-1.5, 0.5, 2.0, -0.5]\n# print(logistic_negative_gradient(y, f))  # Output: [0.2689, 0.235, 0.1192, 0.235]\n```"}
{"task_id": 380, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    # Constants\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n\n    # Convert input to a NumPy array for element-wise operations\n    x = np.array(x, dtype=float)\n\n    # Compute SELU and its derivatives\n    if order == 0:\n        selu_output = scale * np.where(x > 0, x, alpha * (np.exp(x) - 1))\n    elif order == 1:\n        first_derivative = scale * np.where(x > 0, 1, alpha * np.exp(x))\n    elif order == 2:\n        second_derivative = scale * np.where(x > 0, 0, alpha * np.exp(x))\n    else:\n        raise ValueError(\"Order must be 0, 1, or 2.\")\n\n    # Round to 4 decimal places and convert to a list\n    result = np.round(selu_output, 4).tolist()\n\n    return result\n\n# Example usage:\n# print(selu([-1, 0, 1], order=0))  # SELU values\n# print(selu([-1, 0, 1], order=1))  # First derivatives\n# print(selu([-1, 0, 1], order=2))  # Second derivatives\n```\n\nThis script defines the `selu` function, which computes the Scaled Exponential Linear Unit (SELU) activation and its first and second derivatives. The function handles scalar, 1-D, and multi-D inputs, and it returns the results rounded to four decimal places as a list."}
{"task_id": 387, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Initialize predictions as the mean of y\n    y_pred = np.full_like(y, fill_value=np.mean(y))\n    \n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y - y_pred\n        \n        # Sort x and residuals based on x\n        sorted_idx = np.argsort(x)\n        sorted_x = x[sorted_idx]\n        sorted_residuals = residuals[sorted_idx]\n        \n        best_split = None\n        best_mse = float('inf')\n        \n        # Evaluate every possible split between consecutive x values\n        for i in range(len(sorted_x) - 1):\n            if sorted_x[i] == sorted_x[i + 1]:\n                continue\n            \n            t = (sorted_x[i] + sorted_x[i + 1]) / 2\n            left_residuals = sorted_residuals[sorted_x <= t]\n            right_residuals = sorted_residuals[sorted_x > t]\n            \n            left_mean = np.mean(left_residuals) if left_residuals.size > 0 else 0\n            right_mean = np.mean(right_residuals) if right_residuals.size > 0 else 0\n            \n            mse = (np.sum((left_residuals - left_mean) ** 2) + \n                   np.sum((right_residuals - right_mean) ** 2))\n            \n            if mse < best_mse:\n                best_mse = mse\n                best_split = t\n        \n        # If no valid split, use global mean residual\n        if best_split is None:\n            left_mean = right_mean = np.mean(residuals)\n        \n        # Predict using the best split\n        r_pred = np.where(x <= best_split, left_mean, right_mean)\n        \n        # Update predictions\n        y_pred += learning_rate * r_pred\n    \n    return np.round(y_pred, 4).tolist()\n\n# Example usage:\n# x = [1, 2, 3, 4, 5]\n# y = [2.1, 2.9, 3.2, 3.8, 4.6]\n# n_estimators = 10\n# learning_rate = 0.1\n# print(gradient_boosting_1d(x, y, n_estimators, learning_rate))\n```\n\nThis script defines a function `gradient_boosting_1d` that implements a simple gradient boosting regressor using decision stumps for a single numerical feature. The function computes the predictions by iteratively fitting stumps to the residuals and updating the predictions based on the learning rate. The final predictions are rounded to four decimal places and returned as a list."}
{"task_id": 394, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    # Initialize Eg if it is None\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    \n    # Update the running average of the squared gradients\n    Eg_next = rho * Eg + (1 - rho) * np.square(grad)\n    \n    # Update the parameters\n    epsilon = 1e-8\n    w_next = w - learning_rate * grad / np.sqrt(Eg_next + epsilon)\n    \n    # Round the results to 4 decimal places and convert to lists\n    w_next_rounded = np.round(w_next, 4).tolist()\n    Eg_next_rounded = np.round(Eg_next, 4).tolist()\n    \n    return w_next_rounded, Eg_next_rounded\n\n# Example usage:\n# w = np.array([0.5, -0.5])\n# grad = np.array([0.1, -0.2])\n# Eg = None\n# learning_rate = 0.01\n# rho = 0.9\n# w_next, Eg_next = rmsprop_update(w, grad, Eg, learning_rate, rho)\n# print(\"Updated parameters:\", w_next)\n# print(\"Updated running average:\", Eg_next)\n```\n\nThis script defines the `rmsprop_update` function which performs a single update step of the RMSprop optimizer as described. It initializes the running average of squared gradients if it is `None`, updates the running average, updates the parameters, and finally rounds the results to four decimal places before converting them to lists."}
{"task_id": 398, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    # Convert input to a NumPy array for vectorized operations\n    x = np.array(x)\n    \n    if derivative:\n        # Compute the element-wise derivative of ELU\n        elu_derivative = np.where(x >= 0, 1.0, elu(x, alpha) + alpha)\n        return [round(value, 4) for value in elu_derivative]\n    else:\n        # Compute the ELU activation\n        elu_activation = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n        return [round(value, 4) for value in elu_activation]\n\n# Example usage:\n# x = [-1, 0, 1]\n# print(elu(x))  # Output: [0.0900, 0.0000, 1.0000]\n# print(elu(x, derivative=True))  # Output: [0.1900, 1.0000, 1.0000]\n```\n\nThis script defines the `elu` function, which computes the Exponential Linear Unit (ELU) activation or its gradient based on the input parameters. The function uses NumPy for efficient computation and ensures that the output is rounded to four decimal places."}
{"task_id": 411, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    \n    def analyze(data):\n        tuple_data = any(isinstance(x, (tuple, list, np.ndarray)) for x in data)\n        if tuple_data:\n            flattened_data = [item for sublist in data for item in sublist]\n            dim = len(data[0]) if isinstance(data[0], (tuple, list, np.ndarray)) else 1\n        else:\n            flattened_data = data\n            dim = 1\n        \n        multidim_data = dim > 1\n        continuous_data = any(isinstance(x, float) and not x.is_integer() for x in flattened_data)\n        \n        unique_values_per_dim = []\n        unique_ids_per_dim = []\n        for d in range(dim):\n            if multidim_data:\n                values = [x[d] for x in data]\n            else:\n                values = data\n            unique_values = set(values)\n            unique_values_per_dim.append(len(unique_values))\n            unique_ids_per_dim.append(sorted(unique_values))\n        \n        return {\n            'tuple': tuple_data,\n            'multidim': multidim_data,\n            'continuous': continuous_data,\n            'n_per_dim': unique_values_per_dim,\n            'dim': dim,\n            'ids': unique_ids_per_dim\n        }\n    \n    action_stats = analyze(actions)\n    obs_stats = analyze(observations)\n    \n    return {\n        'tuple_actions': action_stats['tuple'],\n        'tuple_observations': obs_stats['tuple'],\n        'multidim_actions': action_stats['multidim'],\n        'multidim_observations': obs_stats['multidim'],\n        'continuous_actions': action_stats['continuous'],\n        'continuous_observations': obs_stats['continuous'],\n        'n_actions_per_dim': action_stats['n_per_dim'],\n        'action_dim': action_stats['dim'],\n        'n_obs_per_dim': obs_stats['n_per_dim'],\n        'obs_dim': obs_stats['dim'],\n        'action_ids': action_stats['ids'],\n        'obs_ids': obs_stats['ids']\n    }\n\n# Example usage\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]\nprint(env_stats(actions, observations))\n```"}
{"task_id": 413, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    \n    def mean_squared_error(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n    \n    def best_split(X, y):\n        best_feature, best_threshold, best_error = None, None, float('inf')\n        n_samples, n_features = X.shape\n        \n        for feature in range(n_features):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                left_mask = X[:, feature] <= threshold\n                right_mask = X[:, feature] > threshold\n                \n                if np.any(left_mask) and np.any(right_mask):\n                    left_pred = np.mean(y[left_mask])\n                    right_pred = np.mean(y[right_mask])\n                    \n                    left_error = mean_squared_error(y[left_mask], left_pred)\n                    right_error = mean_squared_error(y[right_mask], right_pred)\n                    \n                    error = (left_error * np.sum(left_mask) + right_error * np.sum(right_mask)) / n_samples\n                    \n                    if error < best_error:\n                        best_error = error\n                        best_feature = feature\n                        best_threshold = threshold\n                        \n        return best_feature, best_threshold\n    \n    class TreeNode:\n        def __init__(self, feature=None, threshold=None, left=None, right=None, value=None):\n            self.feature = feature\n            self.threshold = threshold\n            self.left = left\n            self.right = right\n            self.value = value\n            \n        def predict(self, X):\n            if self.value is not None:\n                return self.value\n            if X[self.feature] <= self.threshold:\n                return self.left.predict(X)\n            else:\n                return self.right.predict(X)\n    \n    def build_tree(X, y, depth=0):\n        if depth >= max_depth or len(np.unique(y)) == 1:\n            return TreeNode(value=np.mean(y))\n        \n        feature, threshold = best_split(X, y)\n        if feature is None or threshold is None:\n            return TreeNode(value=np.mean(y))\n        \n        left_mask = X[:, feature] <= threshold\n        right_mask = X[:, feature] > threshold\n        \n        left_tree = build_tree(X[left_mask], y[left_mask], depth + 1)\n        right_tree = build_tree(X[right_mask], y[right_mask], depth + 1)\n        \n        return TreeNode(feature=feature, threshold=threshold, left=left_tree, right=right_tree)\n    \n    def predict_tree(trees, X):\n        pred = np.full(X.shape[0], np.mean(y_train))\n        for tree in trees:\n            pred += learning_rate * np.array([tree.predict(x) for x in X])\n        return pred\n    \n    trees = []\n    y_pred = np.full_like(y_train, np.mean(y_train))\n    \n    for _ in range(n_estimators):\n        residuals = y_train - y_pred\n        tree = build_tree(X_train, residuals, 0)\n        trees.append(tree)\n        y_pred += learning_rate * predict_tree([tree], X_train)\n        \n    final_pred = predict_tree(trees, X_test)\n    return [round(pred, 4) for pred in final_pred]\n\n# Example usage:\n# X_train = np.array([[1, 2], [3, 4], [5, 6]])\n# y_train = np.array([1, 2, 3])\n# X_test = np.array([[2, 3]])\n# print(gbdt_regression(X_train, y_train, X_test))\n```\n\nThis script implements a simplified version of Gradient Boosting Decision Trees (GBDT) for regression tasks. The trees are built using a simple binary split criterion based on mean squared error, and the predictions are aggregated with a learning rate. The final predictions for the test set are rounded to four decimal places and returned as a list."}
{"task_id": 416, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Calculate the probability density function (PDF) of a multivariate Gaussian distribution.\n\n    Parameters:\n    X (np.ndarray): A NumPy array of shape (n_samples, n_features) or (n_features,).\n    mean (np.ndarray): The mean vector of the distribution with shape (n_features,).\n    cov (np.ndarray): The covariance matrix of the distribution with shape (n_features, n_features).\n\n    Returns:\n    list: A list of PDF values for each sample in X, rounded to four decimal places.\n    \"\"\"\n    # Ensure X is of shape (n_samples, n_features)\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    \n    n_samples, n_features = X.shape\n    det_cov = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    norm_factor = 1.0 / np.sqrt((2 * math.pi) ** n_features * det_cov)\n    \n    pdf_values = []\n    for i in range(n_samples):\n        diff = X[i] - mean\n        exponent_term = -0.5 * np.dot(np.dot(diff, inv_cov), diff)\n        pdf_value = norm_factor * math.exp(exponent_term)\n        pdf_values.append(round(pdf_value, 4))\n    \n    return pdf_values\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4]])\n# mean = np.array([0, 0])\n# cov = np.array([[1, 0], [0, 1]])\n# print(multivariate_gaussian_pdf(X, mean, cov))\n```\n\nThis script defines a function `multivariate_gaussian_pdf` that computes the probability density function values for a set of samples given the mean and covariance matrix of a multivariate Gaussian distribution. It handles both one-dimensional and multi-dimensional input arrays for `X`. The function returns a list of PDF values, each rounded to four decimal places."}
{"task_id": 419, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n    \n    # Ensure mu is a numpy array of the correct shape\n    if isinstance(mu, (int, float)):\n        mu = np.full(X.shape[1], mu)\n    else:\n        mu = np.array(mu)\n    \n    # Ensure V is a numpy array of the correct shape\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, (int, float)):\n        V = np.eye(X.shape[1]) * V\n    elif isinstance(V, np.ndarray) and V.ndim == 1:\n        V = np.diag(V)\n    else:\n        V = np.array(V)\n    \n    # Compute the posterior distribution\n    V_inv = np.linalg.inv(V)\n    Sigma_p = np.linalg.inv(V_inv + X.T @ X)\n    mu_p = Sigma_p @ (V_inv @ mu + X.T @ y)\n    \n    # Compute the MAP predictive mean for X_new\n    y_pred = X_new @ mu_p\n    \n    # Round the predictions to 4 decimal places\n    return [round(pred, 4) for pred in y_pred]\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4]])\n# y = np.array([2, 3, 4])\n# X_new = np.array([[4, 5]])\n# print(bayesian_linear_regression_pred(X, y, X_new))\n```\n\nThis script defines the `bayesian_linear_regression_pred` function, which performs Bayesian linear regression with a conjugate Gaussian prior and known observation variance. It handles different types of inputs for the prior mean `mu` and prior covariance `V`, and optionally adds an intercept to the design matrices. The predictions are rounded to four decimal places and returned as a list."}
{"task_id": 423, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Stub for the RMSLE metric.  Complete the body of the function.\"\"\"\n    # Check if both lists have the same length\n    if len(actual) != len(predicted):\n        return -1\n    \n    # Check if all numbers in both lists are non-negative\n    if any(a < 0 for a in actual) or any(p < 0 for p in predicted):\n        return -1\n    \n    # Compute the RMSLE\n    n = len(actual)\n    rmsle = np.sqrt((1/n) * np.sum((np.log1p(predicted) - np.log1p(actual))**2))\n    \n    # Return the result rounded to four decimal places\n    return round(rmsle, 4)\n\n# Example usage:\n# actual = [3, -0.5, 2, 7]\n# predicted = [2.5, 0.3, 2, 8]\n# print(root_mean_squared_log_error(actual, predicted))  # Should return -1 due to negative value in actual\n\n# actual = [3, 0.5, 2, 7]\n# predicted = [2.5, 0.3, 2, 8]\n# print(root_mean_squared_log_error(actual, predicted))  # Should return a valid RMSLE value\n```\n\nThis script defines the `root_mean_squared_log_error` function, which calculates the Root Mean Squared Logarithmic Error (RMSLE) between two lists of non-negative numbers. It first checks if the inputs are valid (same length and non-negative numbers), then computes the RMSLE using NumPy, and finally returns the result rounded to four decimal places."}
{"task_id": 428, "completion_id": 0, "completion": "```\npython\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    \n    if symmetric:\n        n = np.arange(window_len)\n        window = 0.5 - 0.5 * np.cos(2 * np.pi * n / (window_len - 1))\n    else:\n        n = np.arange(window_len + 1)\n        window = 0.5 - 0.5 * np.cos(2 * np.pi * n / window_len)\n        window = window[:-1]\n    \n    window = np.round(window, 4)\n    return window.tolist()\n\n# Example usage:\n# print(hann(10, symmetric=True))\n# print(hann(10, symmetric=False))\n```\n\nThis script defines the `hann` function, which generates a Hann window of a specified length with either symmetric or periodic properties. The function handles special cases for window lengths less than or equal to zero and exactly one. The window coefficients are rounded to four decimal places before being returned as a regular Python list."}
{"task_id": 433, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        # Assuming the shape is (out_channels, in_channels, kernel_height, kernel_width)\n        out_channels, in_channels, kernel_height, kernel_width = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = float(in_channels * receptive_field_size)\n        fan_out = float(out_channels * receptive_field_size)\n    else:\n        # For other tensors, take the first two dimensions directly\n        fan_in = float(shape[1])\n        fan_out = float(shape[0])\n    \n    return (fan_in, fan_out)\n\n# Example usage:\n# shape for a 4D convolutional kernel\nshape_conv = (32, 16, 3, 3)\nfan_in_conv, fan_out_conv = glorot_fan(shape_conv)\nprint(f\"Fan-in: {fan_in_conv}, Fan-out: {fan_out_conv}\")\n\n# shape for a dense layer\nshape_dense = (64, 128)\nfan_in_dense, fan_out_dense = glorot_fan(shape_dense)\nprint(f\"Fan-in: {fan_in_dense}, Fan-out: {fan_out_dense}\")\n```\n\nThis script defines the `glorot_fan` function according to the problem statement and includes example usage for both a 4D convolutional kernel and a dense layer. The function correctly calculates `fan_in` and `fan_out` based on the given shape and returns them as floats."}
{"task_id": 435, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]],\n                               y: list[float],\n                               n_estimators: int = 10,\n                               learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    # Convert X and y to NumPy arrays of type float\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    \n    # Special cases\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4)] * len(y)\n    \n    # Initialize the current prediction with the mean of y\n    y_pred = np.full_like(y, np.mean(y))\n    \n    # Main loop\n    for _ in range(n_estimators):\n        # Compute the residuals\n        residuals = y - y_pred\n        \n        # Fit an OLS linear model to predict the residuals\n        # Add a column of ones to X for the intercept\n        X_with_intercept = np.column_stack((np.ones(X.shape[0]), X))\n        # Compute the OLS solution\n        # (X^T * X)^(-1) * X^T * residuals\n        beta = np.linalg.inv(X_with_intercept.T @ X_with_intercept) @ X_with_intercept.T @ residuals\n        \n        # Obtain the weak-learner prediction\n        h_t = X_with_intercept @ beta\n        \n        # Update the overall prediction\n        y_pred += learning_rate * h_t\n    \n    # Return the final prediction vector rounded to 4 decimal places and converted to a regular Python list\n    return [round(pred, 4) for pred in y_pred]\n```"}
{"task_id": 437, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n\n    # Convert input to a NumPy array for consistent processing\n    is_scalar = isinstance(x, (int, float))\n    x = np.array(x)\n\n    # Compute the sigmoid function\n    sigma = 1 / (1 + np.exp(-x))\n\n    if order == 0:\n        result = sigma\n    elif order == 1:\n        result = sigma * (1 - sigma)\n    elif order == 2:\n        result = sigma * (1 - sigma) * (1 - 2 * sigma)\n\n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n\n    # Return the result in the appropriate format\n    if is_scalar:\n        return float(result)\n    else:\n        return result.tolist()\n\n# Example usage:\n# print(sigmoid(0))  # Should return 0.5\n# print(sigmoid([0, 1, -1], order=1))  # Should return [0.25, 0.1966, 0.1966]\n# print(sigmoid(np.array([0, 1, -1]), order=2))  # Should return [0.0, -0.0721, -0.0721]\n```"}
{"task_id": 438, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already\n    y = np.array(y)\n    \n    # Determine the number of classes if not provided\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    \n    # Check if the number of classes is sufficient\n    if num_classes < np.max(y) + 1:\n        return -1\n    \n    # Initialize the one-hot encoding matrix\n    one_hot_matrix = np.zeros((y.size, num_classes), dtype=int)\n    \n    # Set the appropriate indices to 1\n    one_hot_matrix[np.arange(y.size), y] = 1\n    \n    # Convert the matrix to a list of lists and return\n    return one_hot_matrix.tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(to_categorical([0, 1, 2, 1, 0]))  # Default num_classes should be 3\n    print(to_categorical([0, 1, 2, 1, 0], num_classes=4))  # Explicit num_classes larger than necessary\n    print(to_categorical([0, 1, 2, 1, 0], num_classes=2))  # Should return -1 as num_classes is too small\n```\n\nThis script implements the `to_categorical` function as described in the task. It handles the input conversion, determines the number of classes, checks for validity, and performs the one-hot encoding before converting the result to a list of lists. The example usage demonstrates typical scenarios, including handling an automatically determined number of classes, a user-specified number of classes, and an invalid number of classes."}
{"task_id": 439, "completion_id": 0, "completion": "```\npython\nimport itertools\nfrom typing import Hashable, List, Tuple\n\ndef apriori_frequent_itemsets(transactions: List[List[Hashable]], min_sup: float) -> List[Tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    def support(itemset: Tuple) -> float:\n        \"\"\"Calculate the support of a given itemset.\"\"\"\n        return sum(1 for transaction in transactions if set(itemset).issubset(transaction)) / len(transactions)\n\n    def self_join(frequent_itemsets: List[Tuple]) -> List[Tuple]:\n        \"\"\"Generate candidate itemsets of size k+1 from frequent itemsets of size k.\"\"\"\n        return list(set(itertools.chain.from_iterable(\n            itertools.product(fs1, fs2) for fs1, fs2 in itertools.combinations(frequent_itemsets, 2)\n            if fs1[:-1] == fs2[:-1] and fs1[-1] < fs2[-1]\n        )))\n\n    def prune(candidate_itemsets: List[Tuple], frequent_itemsets: List[Tuple]) -> List[Tuple]:\n        \"\"\"Prune candidate itemsets that have infrequent subsets.\"\"\"\n        frequent_set = set(frequent_itemsets)\n        return [itemset for itemset in candidate_itemsets\n                if all(tuple(itemset[:-1]) in frequent_set for itemset in itertools.combinations(itemset, len(itemset) - 1))]\n\n    # Step 1: Find all frequent 1-itemsets\n    all_items = set(item for transaction in transactions for item in transaction)\n    frequent_itemsets = [item for item in all_items if support((item,)) >= min_sup]\n    frequent_itemsets = sorted(frequent_itemsets)\n    frequent_itemsets = [(item,) for item in frequent_itemsets]\n\n    # Collect all frequent itemsets\n    all_frequent_itemsets = frequent_itemsets.copy()\n\n    # Step 2: Generate and test larger itemsets\n    k = 2\n    while frequent_itemsets:\n        candidate_itemsets = self_join(frequent_itemsets)\n        candidate_itemsets = prune(candidate_itemsets, frequent_itemsets)\n        frequent_itemsets = [itemset for itemset in candidate_itemsets if support(itemset) >= min_sup]\n        all_frequent_itemsets.extend(frequent_itemsets)\n        k += 1\n\n    # Step 3: Sort the results by length and lexicographically\n    all_frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return all_frequent_itemsets\n```\n\nThis script implements the Apriori algorithm to find all frequent itemsets in a given transactional database with a specified minimum support threshold. The function `apriori_frequent_itemsets` returns the frequent itemsets sorted by length and lexicographically within each length block."}
{"task_id": 440, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    # Convert the nested list to a NumPy array for easier manipulation\n    predictions_array = np.array(predictions)\n    \n    # Average the probabilities over the estimators\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n    \n    # Round the averaged probabilities to 4 decimal places\n    averaged_probabilities_rounded = np.round(averaged_probabilities, 4)\n    \n    # Get the predicted class index for each sample\n    predicted_classes = np.argmax(averaged_probabilities_rounded, axis=1)\n    \n    # Convert the NumPy arrays back to regular Python lists\n    averaged_probabilities_rounded_list = averaged_probabilities_rounded.tolist()\n    predicted_classes_list = predicted_classes.tolist()\n    \n    return averaged_probabilities_rounded_list, predicted_classes_list\n\n# Example usage:\n# predictions = [\n#     [[0.2, 0.3, 0.5], [0.6, 0.2, 0.2]],\n#     [[0.1, 0.4, 0.5], [0.7, 0.1, 0.2]],\n#     [[0.3, 0.3, 0.4], [0.5, 0.3, 0.2]]\n# ]\n# averaged_probs, predicted_classes = aggregate_predictions(predictions)\n# print(\"Averaged Probabilities:\", averaged_probs)\n# print(\"Predicted Classes:\", predicted_classes)\n```\n\nThis script defines the `aggregate_predictions` function, which takes a three-level nested list of predictions, averages the probabilities over the estimators for each sample, rounds the results to four decimal places, and returns both the averaged probabilities and the predicted class indices. The conversion between NumPy arrays and Python lists ensures that the output meets the specified constraints."}
{"task_id": 444, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    # Convert X and Y to numpy arrays for easier manipulation\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    \n    # Check if feature dimensions match\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # Determine the number of features\n    C = X.shape[1]\n    \n    # Validate and determine sigma\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n    elif isinstance(sigma, (list, np.ndarray)):\n        if len(sigma) != C or not all(isinstance(s, (int, float)) and s > 0 for s in sigma):\n            return -1\n    else:\n        return -1\n    \n    # Compute the squared differences\n    if isinstance(sigma, (int, float)):\n        sigma = np.full(C, sigma)\n    sigma = np.array(sigma)\n    \n    # Compute the kernel matrix\n    X_norm = np.sum((X ** 2) / (sigma ** 2), axis=1)\n    Y_norm = np.sum((Y ** 2) / (sigma ** 2), axis=1)\n    cross_term = 2 * X @ (Y.T / (sigma ** 2))\n    \n    K = -0.5 * (X_norm[:, np.newaxis] + Y_norm[np.newaxis, :] - cross_term)\n    kernel_matrix = np.exp(K)\n    \n    # Round the kernel matrix to 4 decimal places\n    kernel_matrix = np.round(kernel_matrix, 4)\n    \n    # Convert to a nested list and return\n    return kernel_matrix.tolist()\n\n# Example usage:\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0\nprint(rbf_kernel(X, Y, sigma))\n```\n\nThis script defines the `rbf_kernel` function, which computes the Radial Basis Function (RBF) kernel matrix for given inputs `X` and `Y` with a specified `sigma`. It includes input validation and rounds the resulting kernel matrix to four decimal places. The function returns a nested list or `-1` if the input is invalid."}
{"task_id": 446, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n\n    def entropy(labels):\n        if len(labels) == 0:\n            return 0.0\n        value_counts = Counter(labels)\n        probabilities = [count / len(labels) for count in value_counts.values()]\n        return -sum(p * np.log2(p) if p > 0 else 0 for p in probabilities)\n\n    majority_label = Counter(y).most_common(1)[0][0]\n    if len(set(y)) == 1:\n        return (-1, None, majority_label, majority_label)\n\n    best_gain = 0.0\n    best_feature_index = -1\n    best_threshold = None\n    best_left_majority_label = None\n    best_right_majority_label = None\n\n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        thresholds = [(unique_values[i] + unique_values[i + 1]) / 2 for i in range(len(unique_values) - 1)]\n\n        for threshold in thresholds:\n            left_indices = X[:, feature_index] <= threshold\n            right_indices = X[:, feature_index] > threshold\n\n            y_left = y[left_indices]\n            y_right = y[right_indices]\n\n            p_left = len(y_left) / n_samples\n            p_right = len(y_right) / n_samples\n\n            current_gain = entropy(y) - p_left * entropy(y_left) - p_right * entropy(y_right)\n\n            if current_gain > best_gain:\n                best_gain = current_gain\n                best_feature_index = feature_index\n                best_threshold = round(threshold, 4)\n                best_left_majority_label = Counter(y_left).most_common(1)[0][0]\n                best_right_majority_label = Counter(y_right).most_common(1)[0][0]\n\n    if best_feature_index == -1:\n        return (-1, None, majority_label, majority_label)\n\n    return (best_feature_index, best_threshold, best_left_majority_label, best_right_majority_label)\n```\n\nThis script defines the `decision_stump` function, which calculates the best single-level split for a given feature matrix `X` and label vector `y` based on information gain. It handles ties by selecting the smallest feature index and threshold when multiple splits yield the same gain. If no split improves information gain, it returns the majority label for both left and right child nodes."}
{"task_id": 452, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom typing import List, Union\n\ndef divide_on_feature(X: Union[np.ndarray, List[List]], feature_i: int, threshold) -> List[List]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    # Convert X to a NumPy array if it isn't already\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    \n    # Initialize the two subsets\n    subset_1 = []\n    subset_2 = []\n    \n    # Determine if the threshold is numeric\n    is_numeric = isinstance(threshold, (int, float))\n    \n    for sample in X:\n        if (is_numeric and sample[feature_i] >= threshold) or (not is_numeric and sample[feature_i] == threshold):\n            subset_1.append(sample.tolist())\n        else:\n            subset_2.append(sample.tolist())\n    \n    return [subset_1, subset_2]\n\n# Example usage:\nX_num = np.array([[1, 5], [3, 2], [4, 6], [2, 1]])\nfeature_i_num = 0\nthreshold_num = 3\nprint(divide_on_feature(X_num, feature_i_num, threshold_num))  # \u279c  [[[3, 2], [4, 6]], [[1, 5], [2, 1]]]\n\nX_cat = np.array([[1, \"A\"], [2, \"B\"], [3, \"A\"], [4, \"C\"]])\nfeature_i_cat = 1\nthreshold_cat = \"A\"\nprint(divide_on_feature(X_cat, feature_i_cat, threshold_cat))  # \u279c  [[[1, 'A'], [3, 'A']], [[2, 'B'], [4, 'C']]]\n```"}
{"task_id": 453, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    # Check for input consistency\n    if not (isinstance(Q, np.ndarray) and isinstance(Q_next, np.ndarray)):\n        return -1\n    if Q.shape != Q_next.shape:\n        return -1\n    if not (isinstance(actions, list) and isinstance(rewards, list) and isinstance(dones, list)):\n        return -1\n    if len(actions) != len(rewards) or len(actions) != len(dones) or len(actions) != Q.shape[0]:\n        return -1\n    if not (0 <= gamma <= 1):\n        return -1\n\n    # Initialize the updated Q matrix\n    Q_updated = np.copy(Q)\n\n    # Update the Q values\n    for i in range(len(actions)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        Q_updated[i, actions[i]] = target\n\n    # Round the results to 4 decimal places and convert to nested list\n    Q_updated_rounded = np.round(Q_updated, 4).tolist()\n\n    return Q_updated_rounded\n```\n\nThis script defines the `update_q_values` function, which calculates the target Q-values for a batch of samples in a Deep Q-Network (DQN). It checks for input consistency and computes the target values based on whether the next state is terminal. The updated Q-values are rounded to four decimal places and returned as a nested list. If any input is invalid, the function returns `-1`."}
{"task_id": 458, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if isinstance(labels, (list, tuple)):\n        labels = np.array(labels)\n    \n    if labels.ndim != 1 or labels.dtype.kind not in 'ui':  # Ensure 1-D and non-negative integers\n        return -1\n    \n    if np.any(labels < 0):\n        return -1\n    \n    if num_classes is None:\n        num_classes = max(labels) + 1\n    elif num_classes < max(labels) + 1:\n        return -1\n    \n    one_hot_matrix = [[0] * num_classes for _ in range(len(labels))]\n    \n    for i, label in enumerate(labels):\n        one_hot_matrix[i][label] = 1\n    \n    return one_hot_matrix\n\n# Example usage:\n# labels = [0, 1, 2, 1, 0]\n# print(to_categorical(labels))  # Output: [[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0]]\n```\n\nThis script defines the `to_categorical` function as specified, handling the conversion of integer labels to one-hot encoded format and checking for invalid inputs. The function returns a list of lists containing integers."}
{"task_id": 461, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"    \n    x = np.array(x)\n    y = np.array(y)\n    \n    # Step 1: Initialize the predictions to the mean of the targets\n    y_pred = np.full_like(y, np.mean(y), dtype=float)\n    \n    # If n_estimators is 0 or negative, return the mean target for every sample\n    if n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n    \n    # Step 2: Repeat n_estimators times\n    for _ in range(n_estimators):\n        # Step 2a: Compute the residuals\n        residuals = y - y_pred\n        \n        # Step 2b: Consider all possible split values (unique x values except the greatest one)\n        unique_x = np.unique(x)[:-1]\n        \n        if len(unique_x) == 0:\n            # Special case: no valid split exists, use the mean residual\n            v_L = v_R = np.mean(residuals)\n            stump_prediction = np.full_like(y, v_L, dtype=float)\n        else:\n            # Step 2c: For each split, compute the SSE\n            best_sse = float('inf')\n            best_t = None\n            best_v_L = None\n            best_v_R = None\n            \n            for t in unique_x:\n                # Split the data\n                left_indices = x <= t\n                right_indices = x > t\n                \n                # Compute the mean residuals on each side\n                v_L = np.mean(residuals[left_indices])\n                v_R = np.mean(residuals[right_indices])\n                \n                # Compute the SSE for this split\n                sse = (np.sum(residuals[left_indices] - v_L) ** 2 +\n                       np.sum(residuals[right_indices] - v_R) ** 2)\n                \n                # Check if this is the best split so far\n                if sse < best_sse:\n                    best_sse = sse\n                    best_t = t\n                    best_v_L = v_L\n                    best_v_R = v_R\n            \n            # Step 2d: Pick the split with the smallest SSE\n            t = best_t\n            v_L = best_v_L\n            v_R = best_v_R\n            \n            # Step 2e: The stump prediction\n            stump_prediction = np.where(x <= t, v_L, v_R)\n        \n        # Step 2f: Update the ensemble prediction\n        y_pred += learning_rate * stump_prediction\n    \n    # Return the final predictions rounded to 4 decimal places\n    return np.round(y_pred, 4).tolist()\n```\n\nThis script implements the gradient boosting regressor with decision stumps for one-dimensional regression data. It follows the specified algorithm and handles special cases as described in the task."}
{"task_id": 471, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    \n    if next_state is None:\n        target = reward\n    else:\n        # Find the greedy action in the next state\n        q_values_next_state = q_table[next_state]\n        greedy_action = np.argmax(q_values_next_state)\n        \n        # Calculate the expected value of Q[next_state][a'] under the epsilon-soft policy\n        expected_value = 0.0\n        for a in range(num_actions):\n            if a == greedy_action:\n                expected_value += (1 - epsilon + epsilon / num_actions) * q_values_next_state[a]\n            else:\n                expected_value += (epsilon / num_actions) * q_values_next_state[a]\n        \n        target = reward + gamma * expected_value\n    \n    # Update the Q-table\n    q_table[state][action] += lr * (target - q_table[state][action])\n    \n    # Round all entries to four decimal places\n    q_table = [[round(q, 4) for q in row] for row in q_table]\n    \n    return q_table\n```\n\nThis script defines the `expected_sarsa_update` function, which performs a one-step update of the Q-table using the Expected SARSA TD(0) algorithm. The function takes the current Q-table, the state and action taken, the reward received, the next state (or `None` if the episode ends), and the hyperparameters `epsilon`, `lr`, and `gamma`. It returns the updated Q-table with all values rounded to four decimal places."}
{"task_id": 474, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n\n    for i in range(m):\n        x_min = (np.floor(i / 2) + 0.1) * 10\n        x_max = (np.floor(i / 2) + 0.9) * 10\n        y_min = ((i % 2) * interval + 0.1) * 10\n        y_max = ((i % 2) * interval + 0.9) * 10\n        label = (i - 0.5) * 2\n\n        # Generate training data\n        x_train = np.random.uniform(x_min, x_max, n_train)\n        y_train = np.random.uniform(y_min, y_max, n_train)\n        X_train.extend(zip(x_train, y_train))\n        Y_train.extend([label] * n_train)\n\n        # Generate validation data\n        x_val = np.random.uniform(x_min, x_max, n_val)\n        y_val = np.random.uniform(y_min, y_max, n_val)\n        X_val.extend(zip(x_val, y_val))\n        Y_val.extend([label] * n_val)\n\n    X_train = np.round(np.array(X_train), 4)\n    Y_train = np.round(np.array(Y_train), 4)\n    X_val = np.round(np.array(X_val), 4)\n    Y_val = np.round(np.array(Y_val), 4)\n\n    return X_train, X_val, Y_train, Y_val\n\n# Example usage:\n# X_train, X_val, Y_train, Y_val = generate_data(m=2, n_train=100, n_val=50, interval=1, seed=42)\n# print(X_train, X_val, Y_train, Y_val)\n```\n\nThis script defines a function `generate_data` that generates a 2-D toy dataset for a binary (or multi-class) classifier. The function takes parameters for the number of classes, number of training and validation samples per class, vertical distance between class clusters, and an optional random seed for reproducibility. The generated data points and labels are rounded to four decimal places."}
{"task_id": 475, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    # Initialize m_prev and v_prev if they are None\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    \n    # Update the first and second moments\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * (grad ** 2)\n    \n    # Compute the bias-corrected moments\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    \n    # Update the parameters\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    \n    return w_new, m_new, v_new\n\n# Example call (with the default hyper-parameters)\nw_new, m_new, v_new = adam_update(1.0, 0.1, 0.0, 0.0, 1)\nprint(round(w_new, 9))  # \u2248 0.999000001\n```\n\nThis script defines the `adam_update` function, which performs a single step of the Adam optimization algorithm. It handles both scalar and array inputs, and initializes the moments to zero if they are not provided. The function returns the updated parameters and moments, ensuring numerical stability with a small epsilon value."}
{"task_id": 479, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    \n    N = len(rewards[0])  # Number of arms\n    estimates = [ev_prior] * N  # Initialize estimated values\n    counts = [0] * N  # Initialize pull counters\n\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            # Choose a random arm with probability epsilon\n            arm = np.random.choice(N)\n        else:\n            # Choose the arm with the largest estimated value\n            arm = np.argmax(estimates)\n        \n        # Receive the reward for the chosen arm\n        reward = rewards[t][arm]\n        \n        # Update the pull counter for the chosen arm\n        counts[arm] += 1\n        \n        # Update the estimate for the chosen arm using the incremental sample mean\n        estimates[arm] += (reward - estimates[arm]) / counts[arm]\n    \n    # Return the final estimates rounded to 4 decimal places\n    return [round(est, 4) for est in estimates]\n```\n\nThis script implements the \u03b5-greedy multi-armed bandit algorithm as described in the task. It initializes the estimated values and pull counters for each arm, iterates over each time-step, chooses an arm based on the \u03b5-greedy strategy, updates the arm's estimate, and finally returns the rounded estimated values for each arm. The use of a seed ensures reproducibility of results."}
{"task_id": 481, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if len(data) == 0:\n        return []\n\n    def euclidean_distance(p1, p2):\n        return np.sqrt(np.sum((p1 - p2) ** 2))\n\n    def region_query(point_index):\n        neighbors = []\n        for index, point in enumerate(data):\n            if euclidean_distance(data[point_index], point) <= eps:\n                neighbors.append(index)\n        return neighbors\n\n    def expand_cluster(point_index, neighbors, cluster_id):\n        labels[point_index] = cluster_id\n        i = 0\n        while i < len(neighbors):\n            neighbor_index = neighbors[i]\n            if labels[neighbor_index] == -1:\n                labels[neighbor_index] = cluster_id\n            elif labels[neighbor_index] == 0:\n                labels[neighbor_index] = cluster_id\n                new_neighbors = region_query(neighbor_index)\n                if len(new_neighbors) >= min_samples:\n                    neighbors.extend(new_neighbors)\n            i += 1\n\n    labels = [0] * len(data)\n    cluster_id = 0\n\n    for point_index in range(len(data)):\n        if labels[point_index] != 0:\n            continue\n\n        neighbors = region_query(point_index)\n\n        if len(neighbors) < min_samples:\n            labels[point_index] = -1\n        else:\n            cluster_id += 1\n            expand_cluster(point_index, neighbors, cluster_id)\n\n    return labels\n```\n\nThis script implements the DBSCAN algorithm from scratch, following the given rules and constraints. It calculates the Euclidean distance between points, performs a region query to find neighbors, and expands clusters based on the density criteria. The cluster labels are assigned according to the rules specified in the task description."}
{"task_id": 482, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y, dtype=int)\n    \n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    \n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError(\"All labels must be non-negative integers less than num_classes.\")\n    \n    one_hot = np.zeros((y.shape[0], num_classes), dtype=int)\n    one_hot[np.arange(y.shape[0]), y] = 1\n    \n    return one_hot\n\n# Example usage:\n# y = [0, 1, 2, 1]\n# print(to_categorical(y))\n# Output:\n# array([[1, 0, 0],\n#        [0, 1, 0],\n#        [0, 0, 1],\n#        [0, 1, 0]])\n```"}
{"task_id": 485, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    \n    def sse(y):\n        mean = np.mean(y)\n        return np.sum((y - mean) ** 2)\n    \n    def best_split(X, y):\n        min_sse = float('inf')\n        best_split_value = None\n        for i in range(1, len(X)):\n            left_y = y[:i]\n            right_y = y[i:]\n            current_sse = sse(left_y) + sse(right_y)\n            if current_sse < min_sse:\n                min_sse = current_sse\n                best_split_value = (X[i] + X[i-1]) / 2\n        return best_split_value, min_sse\n    \n    def build_tree(X, y, depth):\n        if depth == max_depth or len(y) < 2:\n            return np.mean(y)\n        \n        split_value, _ = best_split(X, y)\n        left_indices = X < split_value\n        right_indices = X >= split_value\n        \n        left_subtree = build_tree(X[left_indices], y[left_indices], depth + 1)\n        right_subtree = build_tree(X[right_indices], y[right_indices], depth + 1)\n        \n        return (split_value, left_subtree, right_subtree)\n    \n    def predict_tree(x, tree):\n        if not isinstance(tree, tuple):\n            return tree\n        split_value, left_subtree, right_subtree = tree\n        if x < split_value:\n            return predict_tree(x, left_subtree)\n        else:\n            return predict_tree(x, right_subtree)\n    \n    if not X_train or not y_train:\n        return []\n    \n    # Sort the training data by the feature values\n    sorted_indices = np.argsort(X_train)\n    X_train_sorted = np.array(X_train)[sorted_indices]\n    y_train_sorted = np.array(y_train)[sorted_indices]\n    \n    tree = build_tree(X_train_sorted, y_train_sorted, 0)\n    \n    return [predict_tree(x, tree) for x in X_test]\n```"}
{"task_id": 490, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:\n        return []\n    \n    # Convert input to a numpy array if it's not already\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    \n    # Create a diagonal matrix using numpy's diag function\n    diagonal_matrix = np.diag(x)\n    \n    # Convert the numpy array to a list of lists\n    return diagonal_matrix.tolist()\n\n# Example usage:\n# vector = [1, 2, 3]\n# print(make_diagonal(vector))  # Output: [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n```"}
{"task_id": 491, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that implements the FP-Growth algorithm to find all frequent item-sets that meet the minimum support constraint. The code is provided in a Markdown code block as requested.\n\n```python\nfrom collections import Counter, defaultdict\nimport itertools\n\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    \n    # Step 1: Count the frequency of each item\n    item_counts = Counter()\n    for transaction in transactions:\n        item_counts.update(transaction)\n    \n    # Filter out items that do not meet the minimum support\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_sup}\n    \n    # If no frequent items, return empty list\n    if not frequent_items:\n        return []\n    \n    # Sort items by descending frequency, then lexicographically\n    items_order = sorted(frequent_items, key=lambda x: (-frequent_items[x], x))\n    \n    # Build the FP-Tree\n    fp_tree = defaultdict(int)\n    header_table = defaultdict(list)\n    \n    # Helper function to insert a transaction into the FP-Tree\n    def insert_transaction(transaction):\n        current_node = fp_tree\n        for item in transaction:\n            if item not in current_node:\n                current_node[item] = defaultdict(int)\n            current_node = current_node[item]\n            current_node['count'] += 1\n            header_table[item].append(current_node)\n    \n    # Insert each transaction into the FP-Tree\n    for transaction in transactions:\n        # Only consider items that are frequent\n        filtered_transaction = [item for item in transaction if item in frequent_items]\n        # Sort items by frequency\n        filtered_transaction.sort(key=lambda x: (-frequent_items[x], x))\n        if filtered_transaction:\n            insert_transaction(filtered_transaction)\n    \n    # Step 2: Mine frequent item-sets\n    def mine_tree(prefix, node, prefix_support, frequent_itemsets):\n        # Generate candidate item-sets from the current node\n        if node != fp_tree:\n            prefix = tuple(sorted(prefix + [node]))\n            frequent_itemsets.append(prefix)\n        \n        # Traverse the header table\n        for item in items_order:\n            if item in node:\n                # Calculate support for the conditional pattern base\n                support = min(prefix_support, node[item]['count'])\n                # Generate conditional pattern base\n                conditional_pattern_base = []\n                for path_node in header_table[item]:\n                    path = []\n                    parent = path_node\n                    while 'count' not in parent:\n                        path.append(parent)\n                        parent = parent['parent']\n                    path_count = path_node['count']\n                    for prefix_item in reversed(path):\n                        conditional_pattern_base.append((prefix_item, path_count * support))\n                \n                # Build conditional FP-Tree\n                conditional_fp_tree = defaultdict(int)\n                conditional_header_table = defaultdict(list)\n                \n                def insert_conditional_transaction(transaction, support):\n                    current_node = conditional_fp_tree\n                    for (prefix_item, count) in transaction:\n                        if prefix_item not in current_node:\n                            current_node[prefix_item] = defaultdict(int)\n                        current_node = current_node[prefix_item]\n                        current_node['count'] = count\n                        current_node['parent'] = prefix_item\n                        conditional_header_table[prefix_item].append(current_node)\n                \n                for transaction, count in conditional_pattern_base:\n                    insert_conditional_transaction(transaction, count)\n                \n                # Recursively mine the conditional FP-Tree\n                if conditional_fp_tree:\n                    mine_tree(prefix, conditional_fp_tree, support, frequent_itemsets)\n    \n    # Start mining from the root of the FP-Tree\n    frequent_itemsets = []\n    mine_tree([], fp_tree, float('inf'), frequent_itemsets)\n    \n    # Sort the frequent item-sets by length and lexicographically\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    \n    return frequent_itemsets\n\n# Example usage:\ntransactions = [\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"A\", \"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"C\", \"D\", \"E\"],\n    [\"B\", \"C\", \"D\"]\n]\nmin_sup = 3\nprint(fp_growth(transactions, min_sup))\n```\n\nThis script defines the `fp_growth` function, which constructs the FP-Tree, mines frequent item-sets using a recursive approach, and returns the frequent item-sets sorted as specified. The example usage at the end demonstrates how to use the function with the provided dataset."}
{"task_id": 492, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n\n    n_samples = len(X)\n    n_features = len(X[0]) if n_samples > 0 else 0\n\n    # Generate all possible combinations of exponents for the polynomials\n    # The combinations are generated in a way that respects the total degree constraint\n    exponents = []\n    for total_degree in range(degree + 1):\n        for combo in combinations_with_replacement(range(n_features), total_degree):\n            exponent = [0] * n_features\n            for index in combo:\n                exponent[index] += 1\n            exponents.append(exponent)\n\n    # Create the polynomial feature matrix\n    polynomial_matrix = []\n    for sample in X:\n        polynomial_row = []\n        for exponent in exponents:\n            term = np.prod([sample[i] ** exponent[i] for i in range(n_features)])\n            polynomial_row.append(term)\n        polynomial_matrix.append(polynomial_row)\n\n    return polynomial_matrix\n```\n\nThis script defines the `polynomial_features` function, which generates a polynomial feature matrix for a given input data matrix `X` and a specified `degree`. The function handles the constraints and requirements as specified in the task description."}
{"task_id": 493, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y:\n        return -1\n    \n    y = np.array(y)\n    y_mean = np.mean(y)\n    mse_value = np.mean((y - y_mean) ** 2)\n    \n    return round(mse_value, 4)\n\n# Example usage:\n# print(mse([1, 2, 3, 4, 5]))  # Should output 2.0\n# print(mse([]))               # Should output -1\n```"}
{"task_id": 496, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Ensure x is treated as a numpy array\n    x = np.array(x).flatten()\n    \n    # Compute the affine activation\n    y = slope * x + intercept\n    \n    # Compute the first derivative (which is constant)\n    grad = np.full_like(x, slope)\n    \n    # Compute the second derivative (which is always zero)\n    grad2 = np.zeros_like(x)\n    \n    # Round the results to 4 decimal places\n    y_rounded = np.round(y, 4).tolist()\n    grad_rounded = np.round(grad, 4).tolist()\n    grad2_rounded = np.round(grad2, 4).tolist()\n    \n    return y_rounded, grad_rounded, grad2_rounded\n\n# Example usage:\n# x = [1, 2, 3]\n# slope = 2\n# intercept = 3\n# result = apply_affine(x, slope, intercept)\n# print(result)  # Output: ([5.0, 7.0, 9.0], [2.0, 2.0, 2.0], [0.0, 0.0, 0.0])\n```\n\nThis script defines the `apply_affine` function as specified, handling both list and NumPy array inputs, and ensuring that all outputs are rounded to four decimal places. The function returns a tuple containing the affine transformation, its first derivative, and its second derivative, each as a list."}
{"task_id": 499, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    n_samples, n_features = data.shape\n    \n    # Check if k is within the valid range\n    if k < 1 or k > n_features:\n        return -1\n    \n    # Step 1: Standardize the data\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0, ddof=1)  # Population variance with Bessel's correction\n    # Avoid division by zero for features with zero variance\n    std[std == 0] = 1\n    standardized_data = (data - mean) / std\n    \n    # Step 2: Compute the covariance matrix\n    covariance_matrix = np.cov(standardized_data, rowvar=False, ddof=1)\n    \n    # Step 3: Perform eigen-decomposition\n    eigenvalues, eigenvectors = np.linalg.eigh(covariance_matrix)\n    \n    # Step 4: Sort eigenvalues in descending order and sort eigenvectors accordingly\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    \n    # Step 5: Fix the sign of each eigenvector\n    for i in range(n_features):\n        max_abs_index = np.argmax(np.abs(sorted_eigenvectors[:, i]))\n        if sorted_eigenvectors[max_abs_index, i] < 0:\n            sorted_eigenvectors[:, i] *= -1\n    \n    # Step 6: Project the standardized data on the first k eigenvectors\n    projection_matrix = sorted_eigenvectors[:, :k]\n    projected_data = np.dot(standardized_data, projection_matrix)\n    \n    # Return the projected data rounded to 4 decimal places as a regular list\n    return np.round(projected_data, 4).tolist()\n```\n\nThis script implements the PCA dimensionality reduction routine from scratch as described in the task. It handles the standardization of the data, computes the covariance matrix, performs eigen-decomposition, sorts the eigenvalues and eigenvectors, fixes the sign ambiguity, and finally projects the data onto the first `k` principal components. The result is rounded to four decimal places and converted to a nested list before being returned."}
{"task_id": 500, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    \n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Initialize the model with the mean of the training labels\n    F = np.full_like(y_train, fill_value=np.mean(y_train), dtype=float)\n    \n    # List to store the weak learners (decision stumps)\n    weak_learners = []\n    \n    for m in range(n_estimators):\n        # Compute residuals\n        residuals = y_train - F\n        \n        # Find the best decision stump\n        best_feature_idx = None\n        best_threshold = None\n        best_loss = float('inf')\n        best_left_val = None\n        best_right_val = None\n        \n        for feature_idx in range(X_train.shape[1]):\n            feature_values = X_train[:, feature_idx]\n            unique_values = np.unique(feature_values)\n            \n            for threshold in unique_values:\n                left_mask = feature_values <= threshold\n                right_mask = feature_values > threshold\n                \n                left_val = np.mean(residuals[left_mask])\n                right_val = np.mean(residuals[right_mask])\n                \n                loss = np.sum((residuals[left_mask] - left_val) ** 2) + np.sum((residuals[right_mask] - right_val) ** 2)\n                \n                if loss < best_loss:\n                    best_loss = loss\n                    best_feature_idx = feature_idx\n                    best_threshold = threshold\n                    best_left_val = left_val\n                    best_right_val = right_val\n        \n        # Store the best decision stump\n        weak_learners.append((best_feature_idx, best_threshold, best_left_val, best_right_val))\n        \n        # Update the model\n        prediction = np.full_like(y_train, fill_value=best_left_val, dtype=float)\n        prediction[X_train[:, best_feature_idx] > best_threshold] = best_right_val\n        F += learning_rate * prediction\n    \n    # Predict on the test set\n    F_test = np.full(len(X_test), fill_value=np.mean(y_train), dtype=float)\n    \n    for feature_idx, threshold, left_val, right_val in weak_learners:\n        prediction = np.full(len(X_test), fill_value=left_val, dtype=float)\n        prediction[X_test[:, feature_idx] > threshold] = right_val\n        F_test += learning_rate * prediction\n    \n    # Convert the final score to class labels\n    predictions = (F_test >= 0.5).astype(int)\n    \n    return predictions.tolist()\n```"}
{"task_id": 505, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n\n    m, n_v = X.shape\n    n_h = hbias.shape[0]\n\n    # Positive phase\n    h0_prob = 1 / (1 + np.exp(-(X @ W + hbias)))\n    pos_grad = X.T @ h0_prob\n\n    # Gibbs sampling (k steps)\n    v_k_prob = X.copy()\n    for _ in range(k):\n        h_k_prob = 1 / (1 + np.exp(-(v_k_prob @ W + hbias)))\n        v_k_prob = 1 / (1 + np.exp(-(h_k_prob @ W.T + vbias)))\n\n    neg_grad = v_k_prob.T @ h_k_prob\n\n    # Update weights\n    W += learning_rate * (pos_grad - neg_grad) / m\n\n    # Return updated weights rounded to 4 decimal places as a list of lists\n    return W.round(4).tolist()\n```"}
{"task_id": 509, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are not already\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Check if the lengths of the vectors are the same\n    if len(x) != len(y):\n        return -1\n    \n    # Compute the Chebyshev distance\n    distance = np.max(np.abs(x - y))\n    \n    # Return the distance rounded to four decimal places\n    return round(distance, 4)\n\n# Example usage\nx = [1, 2, 3]\ny = [2, 4, 6]\nprint(chebyshev(x, y))  # Output: 3.0\n```\n\nThis script defines a function `chebyshev` that calculates the Chebyshev distance between two vectors, ensuring they are of the same length and returning the result rounded to four decimal places. The example usage demonstrates how to call the function with two lists."}
{"task_id": 510, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    epsilon = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n    \n    # Reconstruction Loss (Binary Cross-Entropy)\n    reconstruction_loss = -np.sum(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped))\n    \n    # KL Divergence\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var))\n    \n    # Total Loss\n    total_loss = reconstruction_loss + kl_divergence\n    \n    # Mini-batch average\n    batch_size = y.shape[0]\n    average_loss = total_loss / batch_size\n    \n    return round(average_loss, 6)\n```\n\nThis script defines the `vae_loss` function, which computes the average VAE loss for a mini-batch of data, including both the reconstruction loss and the KL divergence, rounded to six decimal places. The function ensures numerical stability by clipping the predicted values before computing the logarithms."}
{"task_id": 513, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that implements the Factorization Machine regression prediction using NumPy, following the specified requirements:\n\n```python\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    # Convert inputs to NumPy arrays for efficient computation\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    \n    # Number of samples and features\n    n_samples, n_features = X.shape\n    \n    # Initialize predictions with the bias term\n    predictions = np.full(n_samples, w0)\n    \n    # Add the first order interactions (linear terms)\n    predictions += X @ w\n    \n    # Add the second order interactions\n    # Calculate (\u03a3\u2c7c V_{j,f} x\u2c7c)\u00b2 for each latent factor f\n    sum_squared = (X @ V) ** 2\n    \n    # Calculate \u03a3\u2c7c V_{j,f}\u00b2 x\u2c7c\u00b2 for each latent factor f\n    squared_sum = (X ** 2) @ (V ** 2)\n    \n    # The second order interaction term is \u00bd (sum_squared - squared_sum)\n    second_order = 0.5 * (sum_squared - squared_sum)\n    \n    # Sum the second order interactions for each sample\n    predictions += np.sum(second_order, axis=1)\n    \n    # Round the predictions to 4 decimal places\n    predictions = np.round(predictions, 4)\n    \n    return predictions.tolist()\n\n# Example usage:\n# X = [[1, 2, 3], [0, 1, 0]]\n# w0 = 0.5\n# w = [0.1, 0.2, 0.3]\n# V = [[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]]\n# print(fm_predict(X, w0, w, V))\n```\n\nThis script defines the `fm_predict` function, which calculates the predictions for a batch of samples using the Factorization Machine regression formula. The function takes the feature matrix `X`, bias term `w0`, linear coefficients `w`, and latent interaction factors `V` as inputs and returns a list of predictions rounded to four decimal places. The example usage at the bottom shows how to call the function with sample data."}
{"task_id": 517, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # Convert input to a NumPy array for vectorized operations\n    if isinstance(z, (int, float)):\n        z_array = np.array([z])\n    else:\n        z_array = np.array(z)\n    \n    # Ensure numerical stability\n    # For large positive z, sigmoid approaches 1\n    # For large negative z, sigmoid approaches 0\n    sigmoid_values = np.where(z_array > 0, 1 / (1 + np.exp(-z_array)), np.exp(z_array) / (1 + np.exp(z_array)))\n    \n    # Round the results to four decimal places\n    sigmoid_values_rounded = np.round(sigmoid_values, 4)\n    \n    # Convert back to scalar if input was a scalar\n    if isinstance(z, (int, float)):\n        return float(sigmoid_values_rounded[0])\n    else:\n        return sigmoid_values_rounded.tolist()\n\n# Example usage\nprint(sigmoid([-1, 0, 1]))  # Output: [0.2689, 0.5, 0.7311]\n```\n\nThis script defines the `sigmoid` function which handles scalar, list, tuple, and NumPy ndarray inputs. It ensures numerical stability and returns results rounded to four decimal places, preserving the input structure as specified."}
{"task_id": 518, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        # Check if actual is one-hot encoded and convert if necessary\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        \n        # Check if predicted is one-hot encoded and convert if necessary\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        \n        # Call the original function with the converted arrays\n        return function(actual, predicted)\n    \n    return wrapper\n\n# Example usage\n@unhot\ndef accuracy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Simple accuracy rounded to 4 decimals.\"\"\"\n    return float(np.round(np.mean(actual == predicted), 4))\n\nactual    = np.array([[0,1,0], [1,0,0], [0,0,1]])  # one-hot\npredicted = np.array([[0,1,0], [0,1,0], [0,0,1]])  # one-hot\nprint(accuracy(actual, predicted))  # 0.6667\n```\n\nThis script defines the `unhot` decorator which converts one-hot encoded arrays to their corresponding integer label representations before calling the wrapped metric function. The example usage demonstrates how the decorator can be applied to an accuracy function."}
{"task_id": 520, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    # Helper function to compute the gradient and round it\n    def compute_gradient(value):\n        return np.round(value * (1 - value), 4)\n\n    # If z is a scalar, return the computed gradient as a float\n    if isinstance(z, (int, float)):\n        return float(compute_gradient(z))\n    \n    # If z is a list, recursively apply the function to each element\n    elif isinstance(z, list):\n        if not z:  # Check for an empty list\n            return []\n        return [sigmoid_grad(item) for item in z]\n    \n    # If z is a NumPy array, apply the gradient computation element-wise\n    elif isinstance(z, np.ndarray):\n        return np.vectorize(compute_gradient)(z).tolist()\n    \n    else:\n        raise ValueError(\"Input must be a float, list, or NumPy ndarray.\")\n\n# Example usage:\n# print(sigmoid_grad(0.5))  # Output: 0.25\n# print(sigmoid_grad([0.5, 0.75]))  # Output: [0.25, 0.1875]\n# print(sigmoid_grad([[0.5, 0.75], [0.25, 0.9]]))  # Output: [[0.25, 0.1875], [0.1875, 0.09]]\n# print(sigmoid_grad(np.array([0.5, 0.75])))  # Output: [0.25, 0.1875]\n```\n\nThis script defines the `sigmoid_grad` function, which calculates the gradient of the sigmoid function for a given input `z`. The function handles scalars, lists, and NumPy arrays, and ensures that the output is rounded to four decimal places and retains the same structure as the input."}
{"task_id": 528, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Convert X to a NumPy array for easier manipulation\n    X = np.array(X)\n    \n    # Determine the range for x1 and x2\n    x1_min, x1_max = np.min(X[:, 0]), np.max(X[:, 0])\n    x2_min, x2_max = np.min(X[:, 1]), np.max(X[:, 1])\n    \n    # Create equally spaced 1-D arrays for x1 and x2\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    \n    # Create a meshgrid from the 1-D arrays\n    x1_grid, x2_grid = np.meshgrid(x1_plot, x2_plot)\n    \n    # Flatten the meshgrid and stack them to form grid points\n    grid_points = np.vstack([x1_grid.ravel(), x2_grid.ravel()]).T\n    \n    # Calculate the linear combination w1*x1 + w2*x2 + b for each grid point\n    linear_combination = np.dot(grid_points, W) + b\n    \n    # Apply the sign function to classify each point\n    labels = np.where(linear_combination >= 0, 1, -1)\n    \n    # Reshape the labels back to the grid shape\n    labels_grid = labels.reshape((grid_n, grid_n))\n    \n    # Convert the NumPy array to a Python list of lists\n    labels_list = labels_grid.tolist()\n    \n    return labels_list\n```\n\nThis script defines the function `decision_boundary_grid` which generates a grid of predictions for a 2-D linear classifier. The function uses NumPy for efficient array manipulation and returns a nested list of integers representing the classification of each grid point."}
{"task_id": 537, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    # Step 1: Calculate class priors\n    n_samples = y_train.shape[0]\n    class_0_prior = np.mean(y_train == 0)\n    class_1_prior = np.mean(y_train == 1)\n\n    # Step 2: Calculate mean and standard deviation for each feature for both classes\n    X_train_0 = X_train[y_train == 0]\n    X_train_1 = X_train[y_train == 1]\n\n    mean_0 = np.mean(X_train_0, axis=0)\n    std_0 = np.std(X_train_0, axis=0) + 1e-9  # Add epsilon to avoid division by zero\n    mean_1 = np.mean(X_train_1, axis=0)\n    std_1 = np.std(X_train_1, axis=0) + 1e-9  # Add epsilon to avoid division by zero\n\n    # Step 3: Calculate the Gaussian likelihood for each feature and each class\n    def gaussian_likelihood(x, mean, std):\n        return (1 / (np.sqrt(2 * np.pi) * std)) * np.exp(-0.5 * ((x - mean) / std) ** 2)\n\n    # Step 4: Compute posterior probabilities and make predictions\n    predictions = []\n    for sample in X_test:\n        likelihood_0 = np.prod(gaussian_likelihood(sample, mean_0, std_0))\n        likelihood_1 = np.prod(gaussian_likelihood(sample, mean_1, std_1))\n\n        posterior_0 = likelihood_0 * class_0_prior\n        posterior_1 = likelihood_1 * class_1_prior\n\n        if posterior_0 > posterior_1:\n            predictions.append(0)\n        else:\n            predictions.append(1)\n\n    return predictions\n```\n\nThis script defines a function `gaussian_naive_bayes` that implements a Gaussian Naive Bayes classifier from scratch. It calculates the class priors, means, and standard deviations for the training data, computes the Gaussian likelihood for each feature, and predicts the class labels for the test data based on the posterior probabilities."}
{"task_id": 539, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost.\n\n    Parameters:\n    AL (np.ndarray): A numpy array of shape (1, m) or (m,) containing the \n                     predicted probabilities.\n    Y (np.ndarray): A numpy array of shape (1, m) or (m,) containing the \n                    true binary labels (0 or 1).\n\n    Returns:\n    float: The computed binary cross-entropy cost.\n    \"\"\"\n    # Ensure AL and Y have the same shape\n    assert AL.shape == Y.shape, \"AL and Y must have the same shape.\"\n    \n    # Number of training examples\n    m = AL.shape[0]\n    \n    # Clip AL to prevent log(0) and log(1) issues\n    epsilon = 1e-15\n    AL = np.clip(AL, epsilon, 1 - epsilon)\n    \n    # Compute the binary cross-entropy cost\n    cost = -1 / m * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    \n    # Return the cost as a float rounded to 4 decimal places when printed\n    return float(cost)\n\n# Example usage:\nif __name__ == \"__main__\":\n    AL = np.array([0.9, 0.1, 0.8, 0.2])\n    Y = np.array([1, 0, 1, 0])\n    cost = compute_cost(AL, Y)\n    print(f\"Computed cost: {cost:.4f}\")\n```\n\nThis script defines the `compute_cost` function which calculates the binary cross-entropy cost for given predicted probabilities `AL` and true labels `Y`. It ensures the probabilities are clipped to avoid numerical issues when computing the logarithm. The cost is returned as a plain Python float rounded to four decimal places when printed."}
{"task_id": 552, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi = hmm['pi']\n    A = hmm['A']\n    B = hmm['B']\n    N = len(pi)  # Number of states\n    T = len(observations)  # Length of the observation sequence\n\n    # Check if t is within the valid range\n    if t < 0 or t >= T:\n        return []\n\n    # Forward algorithm\n    alpha = np.zeros((T, N))\n    alpha[0] = pi * B[:, observations[0]]\n    for i in range(1, T):\n        alpha[i] = (alpha[i-1] @ A) * B[:, observations[i]]\n\n    # Backward algorithm\n    beta = np.zeros((T, N))\n    beta[T-1] = np.ones(N)\n    for i in range(T-2, -1, -1):\n        beta[i] = A @ (B[:, observations[i+1]] * beta[i+1])\n\n    # Compute gamma probabilities\n    gamma_t = alpha[t] * beta[t]\n    gamma_t /= np.sum(gamma_t)\n\n    # Round to four decimal places\n    return [round(g, 4) for g in gamma_t]\n\n# Example usage:\n# hmm = {\n#     'pi': np.array([0.6, 0.4]),\n#     'A': np.array([[0.7, 0.3], [0.4, 0.6]]),\n#     'B': np.array([[0.5, 0.5], [0.4, 0.6]])\n# }\n# observations = [0, 1, 0]\n# t = 1\n# print(gamma_probabilities(hmm, observations, t))\n```\n\nThis script defines the `gamma_probabilities` function, which calculates the posterior state distribution at a given time step `t` using the forward-backward algorithm in a Hidden Markov Model. The function takes the HMM parameters, the observation sequence, and the time index `t` as inputs and returns the posterior probabilities rounded to four decimal places. If `t` is out of bounds, it returns an empty list."}
{"task_id": 555, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that implements the DBSCAN algorithm from scratch as per the provided task description.\n\n```python\nimport numpy as np\nfrom collections import deque\nfrom scipy.spatial.distance import cdist\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples  # Initialize labels as noise\n    cluster_id = 0\n\n    # Compute every pairwise Euclidean distance\n    distances = cdist(data, data, metric='euclidean')\n\n    # Build the neighborhood list for each sample using the supplied eps\n    neighbors = [np.where(distances[i] <= eps)[0] for i in range(n_samples)]\n\n    # Identify core points (|neighborhood| \u2265 min_samples)\n    core_points = [i for i, nb in enumerate(neighbors) if len(nb) >= min_samples]\n\n    def expand_cluster(point_id, cluster_id):\n        labels[point_id] = cluster_id\n        queue = deque([point_id])\n\n        while queue:\n            current_point_id = queue.popleft()\n            if len(neighbors[current_point_id]) < min_samples:\n                continue\n            for neighbor_id in neighbors[current_point_id]:\n                if labels[neighbor_id] == -1:\n                    labels[neighbor_id] = cluster_id\n                    if len(neighbors[neighbor_id]) >= min_samples:\n                        queue.append(neighbor_id)\n\n    # Starting with the first unlabeled core point, expand a cluster with a breadth-first search (BFS)\n    for point_id in core_points:\n        if labels[point_id] == -1:  # Unlabeled core point\n            cluster_id += 1\n            expand_cluster(point_id, cluster_id)\n\n    return labels\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Sample data\n    data = np.array([[1, 2], [2, 2], [2, 3],\n                     [8, 7], [8, 8], [25, 80]])\n\n    # DBSCAN parameters\n    eps = 3\n    min_samples = 2\n\n    # Perform DBSCAN clustering\n    labels = dbscan(data, eps, min_samples)\n    print(labels)  # Output: [1, 1, 1, 2, 2, -1]\n```\n\n### Explanation:\n1. **Distance Calculation**: We use `scipy.spatial.distance.cdist` to compute the pairwise Euclidean distances between points.\n2. **Neighborhood List**: For each point, we determine its neighbors within the given `eps` radius.\n3. **Core Points**: We identify core points as those with at least `min_samples` neighbors.\n4. **Cluster Expansion**: We start with each unlabeled core point and use a breadth-first search (BFS) to expand the cluster, labeling points as they are added to the cluster.\n5. **Noise Points**: Points that remain unlabeled after processing are marked as noise (`-1`).\n\nThis script should work for any 2D numpy array input and the specified `eps` and `min_samples` parameters."}
{"task_id": 561, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that implements the Expectation-Maximization (EM) algorithm for a Gaussian Mixture Model (GMM). The script includes the necessary imports, the function `gmm_em`, and comments to explain each part of the code.\n\n```python\nimport numpy as np\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"\n    Implement the Expectation\u2013Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n\n    Parameters:\n    - data: np.ndarray, a 2-D array of shape (N, D) containing N samples with D features.\n    - k: int, the number of Gaussian components.\n    - max_iter: int, the maximum number of iterations for the EM algorithm.\n    - epsilon: float, the tolerance for convergence based on the change in mixture weights.\n\n    Returns:\n    - A list of length N containing the final cluster label of each sample.\n    \"\"\"\n    N, D = data.shape\n    \n    if k == 1:\n        return [0] * N\n    \n    # Initialize parameters\n    np.random.seed(0)  # For reproducibility\n    weights = np.ones(k) / k\n    means = data[np.random.choice(N, k, replace=False)]\n    covariances = np.array([np.cov(data, rowvar=False) for _ in range(k)])\n    \n    def gaussian_pdf(x, mean, cov):\n        det_cov = np.linalg.det(cov)\n        inv_cov = np.linalg.inv(cov)\n        diff = x - mean\n        exponent = -0.5 * np.dot(diff.T, np.dot(inv_cov, diff))\n        return (1.0 / (np.sqrt((2 * np.pi) ** D * det_cov))) * np.exp(exponent)\n    \n    for _ in range(max_iter):\n        # E-step: Calculate responsibilities\n        responsibilities = np.zeros((N, k))\n        for i in range(k):\n            responsibilities[:, i] = weights[i] * gaussian_pdf(data, means[i], covariances[i])\n        responsibilities /= responsibilities.sum(axis=1, keepdims=True)\n        \n        # M-step: Update parameters\n        new_weights = responsibilities.mean(axis=0)\n        new_means = np.dot(responsibilities.T, data) / responsibilities.sum(axis=0, keepdims=True)\n        new_covariances = np.array([np.dot((data - new_means[i]).T, (data - new_means[i]) * responsibilities[:, i][:, np.newaxis]) / responsibilities[:, i].sum() for i in range(k)])\n        \n        # Check for convergence\n        if np.allclose(weights, new_weights, atol=epsilon):\n            break\n        \n        weights, means, covariances = new_weights, new_means, new_covariances\n    \n    # Assign labels based on maximum responsibility\n    labels = np.argmax(responsibilities, axis=1)\n    \n    # Sort components by the first coordinate of their mean in ascending order\n    sorted_indices = np.argsort(means[:, 0])\n    labels = np.array([np.where(sorted_indices == label)[0][0] for label in labels])\n    \n    return labels.tolist()\n\n# Example usage:\n# data = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0], [8.0, 2.0], [10.0, 2.0], [9.0, 3.0]])\n# k = 3\n# print(gmm_em(data, k))\n```\n\n### Explanation:\n1. **Initialization**: The function initializes the mixture weights, means, and covariance matrices. The means are randomly selected from the data, and the covariances are initialized as the covariance matrix of the entire dataset.\n2. **Gaussian PDF**: A helper function to compute the Gaussian probability density function.\n3. **E-step**: Computes the responsibilities (posterior probabilities) for each sample belonging to each Gaussian component.\n4. **M-step**: Updates the mixture weights, means, and covariances based on the responsibilities.\n5. **Convergence Check**: Stops the algorithm if the change in mixture weights is smaller than the specified tolerance.\n6. **Label Assignment**: Assigns each sample to the component with the highest posterior probability.\n7. **Sorting and Relabelling**: Sorts the components by the first coordinate of their mean and relabels the clusters accordingly to ensure deterministic output.\n\nThis script ensures that the output is deterministic for identical inputs by fixing the random seed and sorting the components by their means."}
{"task_id": 562, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n    \n    # Step 1: Build the similarity graph\n    N = data.shape[0]\n    pairwise_squared_distances = np.sum(data**2, axis=1).reshape(-1, 1) + np.sum(data**2, axis=1) - 2 * np.dot(data, data.T)\n    W = np.exp(-gamma * pairwise_squared_distances)\n    \n    # Step 2: Construct the Laplacian\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    \n    if method == 'normalized':\n        D_sqrt_inv = np.diag(1.0 / np.sqrt(np.sum(W, axis=1)))\n        L_sym = D_sqrt_inv @ L @ D_sqrt_inv\n        L = L_sym\n    \n    # Step 3: Compute the eigenvectors\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    U = eigenvectors[:, :n_cluster]\n    \n    if method == 'normalized':\n        U = (U.T / np.linalg.norm(U, axis=1)).T  # Row-normalize\n    \n    # Step 4: Run k-means in the eigenvector space\n    def kmeans(X, k, initial_centroids):\n        centroids = X[initial_centroids]\n        labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - centroids, axis=2), axis=1)\n        \n        while True:\n            new_centroids = np.array([X[labels == i].mean(axis=0) for i in range(k)])\n            new_labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - new_centroids, axis=2), axis=1)\n            if np.array_equal(labels, new_labels):\n                break\n            labels = new_labels\n            centroids = new_centroids\n        \n        return labels\n    \n    initial_centroids = np.arange(n_cluster)\n    labels = kmeans(U, n_cluster, initial_centroids)\n    \n    # Step 5: Relabel clusters\n    sorted_indices = np.argsort(np.unique(labels, return_index=True)[1])\n    label_mapping = {old_label: new_label for new_label, old_label in enumerate(sorted_indices)}\n    final_labels = [label_mapping[label] for label in labels]\n    \n    return final_labels\n```"}
{"task_id": 563, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = len(y_data)\n    alpha = np.zeros(N)\n    b = 0.0\n    \n    # Compute the Gram matrix\n    G = np.dot(X_data, X_data.T)\n    \n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            # Compute g = \u03a3\u2c7c \u03b1\u2c7c y\u2c7c G[j, i]\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                # Update \u03b1\u1d62 and b\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        # If no updates were made, the algorithm has converged\n        if not updated:\n            break\n    \n    # Recover the weight vector w\n    w = np.sum(alpha * y_data[:, np.newaxis] * X_data, axis=0)\n    \n    # Round w and b to 4 decimal places\n    w_rounded = [round(wi, 4) for wi in w]\n    b_rounded = round(b, 4)\n    \n    return w_rounded, b_rounded\n```\n\nThis script defines the `perceptron_dual_train` function, which implements the dual-form perceptron learning algorithm as described. It computes the weight vector `w` and bias term `b`, rounds them to four decimal places, and returns them as a tuple."}
{"task_id": 564, "completion_id": 0, "completion": "```\npython\nclass Node:\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label\n        self.x = x\n        self.s = s\n        self.y = y\n        self.child = child if child is not None else []\n\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    current_node = root\n    \n    while current_node.y is None:\n        if task_type == 'classification':\n            feature_value = features[current_node.label]\n            found_child = False\n            for child in current_node.child:\n                if child.x == feature_value:\n                    current_node = child\n                    found_child = True\n                    break\n            if not found_child:\n                current_node = current_node.child[1]\n        elif task_type == 'regression':\n            feature_value = features[current_node.label]\n            if feature_value <= current_node.s:\n                current_node = current_node.child[0]\n            else:\n                current_node = current_node.child[1]\n        else:\n            raise ValueError(\"task_type must be either 'classification' or 'regression'\")\n    \n    return current_node.y\n```\n\nThis script defines the `Node` class and the `predict_sample` function, which traverses the decision tree based on the given `task_type` and returns the prediction stored in the appropriate leaf node."}
{"task_id": 565, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    def entropy(labels):\n        \"\"\"Calculate the entropy of a label distribution.\"\"\"\n        value_counts = np.bincount(labels)\n        probabilities = value_counts / len(labels)\n        return -np.sum(probabilities * np.log2(probabilities + 1e-9))  # Adding small value to avoid log(0)\n\n    n_samples, n_features = X.shape\n    total_entropy = entropy(y)\n    max_information_gain = -1\n    best_feature_index = -1\n\n    for feature_index in range(n_features):\n        # Get unique values of the current feature\n        feature_values = np.unique(X[:, feature_index])\n        # Calculate the conditional entropy\n        conditional_entropy = 0\n        for value in feature_values:\n            subset_indices = X[:, feature_index] == value\n            subset_labels = y[subset_indices]\n            subset_entropy = entropy(subset_labels)\n            subset_weight = len(subset_labels) / n_samples\n            conditional_entropy += subset_weight * subset_entropy\n\n        # Calculate information gain\n        information_gain = total_entropy - conditional_entropy\n\n        # Update the best feature if this one has more information gain\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = feature_index\n\n    return best_feature_index, round(max_information_gain, 6)\n\n# Example usage:\n# X = np.array([[0, 0], [1, 1], [1, 0], [0, 1]])\n# y = np.array([0, 1, 1, 0])\n# print(choose_best_feature(X, y))  # Output should be the best feature index and its information gain\n```\n\nThis script defines a function `choose_best_feature` that calculates the information gain for each feature in the dataset and returns the feature with the highest information gain. The function handles discrete, non-negative integer features and labels, and it returns the feature index and the information gain rounded to six decimal places."}
{"task_id": 566, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    \n    def c(n):\n        if n <= 1:\n            return 0\n        return 2 * np.log(n - 1) + 0.5772156649 - (2 * (n - 1) / n)\n    \n    def build_tree(X):\n        if len(X) <= 1 or sample_size == 1:\n            return None, len(X)\n        \n        depth = 0\n        height_limit = math.ceil(np.log2(sample_size))\n        \n        while depth < height_limit and len(X) > 1:\n            feature_idx = np.random.randint(X.shape[1])\n            min_val, max_val = X[:, feature_idx].min(), X[:, feature_idx].max()\n            if min_val == max_val:\n                break\n            \n            split_val = np.random.uniform(min_val, max_val)\n            left_mask = X[:, feature_idx] < split_val\n            if np.any(left_mask) and np.any(~left_mask):\n                left_tree, left_size = build_tree(X[left_mask])\n                right_tree, right_size = build_tree(X[~left_mask])\n                return (feature_idx, split_val, left_tree, right_tree), None\n            \n            depth += 1\n        \n        return None, len(X)\n    \n    def path_length(x, tree, current_depth=0):\n        if tree is None:\n            return current_depth + c(sample_size)\n        \n        feature_idx, split_val, left_tree, right_tree = tree\n        if x[feature_idx] < split_val:\n            return path_length(x, left_tree, current_depth + 1)\n        else:\n            return path_length(x, right_tree, current_depth + 1)\n    \n    n_samples = data.shape[0]\n    path_lengths = np.zeros(n_samples)\n    \n    for _ in range(n_trees):\n        if sample_size >= n_samples:\n            tree, _ = build_tree(data)\n        else:\n            sampled_indices = np.random.choice(n_samples, sample_size, replace=False)\n            tree, _ = build_tree(data[sampled_indices])\n        \n        for i in range(n_samples):\n            path_lengths[i] += path_length(data[i], tree)\n    \n    avg_path_lengths = path_lengths / n_trees\n    phi = 2 * np.log(sample_size - 1) - 2 * (sample_size - 1) / sample_size\n    anomaly_scores = 2 ** (-avg_path_lengths / phi)\n    \n    num_outliers = int(epsilon * n_samples)\n    outlier_indices = np.argsort(anomaly_scores)[-num_outliers:]\n    \n    return sorted(outlier_indices.tolist())\n\n# Example usage:\n# data = np.array([[1, 2], [2, 3], [10, 10], [11, 11], [12, 12]])\n# n_trees = 10\n# sample_size = 2\n# epsilon = 0.2\n# print(detect_outliers(data, n_trees, sample_size, epsilon))  # Output: [2, 3, 4]\n```\n\nThis script implements a mini version of the Isolation Forest algorithm for outlier detection as specified. It includes functions to build random isolation trees, compute path lengths, and determine anomaly scores. The final step identifies and returns the indices of the detected outliers."}
{"task_id": 568, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    # Unique labels in the training set\n    labels = np.unique(y_train)\n    num_labels = len(labels)\n    \n    # Feature indices and values\n    feature_indices = np.arange(X_train.shape[1])\n    feature_values = {i: set(X_train[:, i]) for i in feature_indices}\n    \n    # Count empirical expectations\n    empirical_expectations = defaultdict(float)\n    for x, y in zip(X_train, y_train):\n        for feature_index in feature_indices:\n            value = x[feature_index]\n            empirical_expectations[(feature_index, value, y)] += 1\n    \n    # Normalize empirical expectations\n    total_samples = len(X_train)\n    for key in empirical_expectations:\n        empirical_expectations[key] /= total_samples\n    \n    # Initialize weights\n    weights = defaultdict(float)\n    \n    # GIS algorithm\n    for iteration in range(n_iter):\n        # Compute expected counts\n        expected_counts = defaultdict(float)\n        model_expectations = defaultdict(float)\n        \n        for x in X_train:\n            # Compute normalization factor Z(x)\n            Z_x = 0\n            for y in labels:\n                score = 0\n                for feature_index in feature_indices:\n                    value = x[feature_index]\n                    score += weights[(feature_index, value, y)]\n                Z_x += math.exp(score)\n            \n            # Compute expected counts\n            for y in labels:\n                score = 0\n                for feature_index in feature_indices:\n                    value = x[feature_index]\n                    score += weights[(feature_index, value, y)]\n                p_y_given_x = math.exp(score) / Z_x\n                for feature_index in feature_indices:\n                    value = x[feature_index]\n                    expected_counts[(feature_index, value, y)] += p_y_given_x\n                    model_expectations[(feature_index, value, y)] += p_y_given_x\n        \n        # Normalize expected counts\n        for key in expected_counts:\n            expected_counts[key] /= total_samples\n        \n        # Update weights\n        max_update = 0\n        for key in weights:\n            update = math.log(empirical_expectations[key] / model_expectations[key])\n            weights[key] += update\n            max_update = max(max_update, abs(update))\n        \n        # Check for convergence\n        if max_update < epsilon:\n            break\n    \n    # Predict labels for the test set\n    predictions = []\n    for x in X_test:\n        max_score = -float('inf')\n        predicted_label = None\n        for y in labels:\n            score = 0\n            for feature_index in feature_indices:\n                value = x[feature_index]\n                score += weights[(feature_index, value, y)]\n            if score > max_score:\n                max_score = score\n                predicted_label = y\n        predictions.append(predicted_label)\n    \n    return predictions\n```\n\nThis script implements the Maximum Entropy (MaxEnt) classifier using the Generalized Iterative Scaling (GIS) algorithm. It calculates the necessary empirical distributions, iteratively updates the weights, and finally predicts the labels for the test set based on the learned model. The implementation uses only the standard library, `numpy`, and `math` as required."}
{"task_id": 569, "completion_id": 0, "completion": "```\npython\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    if not data:\n        return [], set()\n\n    total_docs = len(data)\n    word_doc_count = Counter()\n\n    # Track which words appear in which documents\n    for _, words in data:\n        unique_words_in_doc = set(words)\n        word_doc_count.update(unique_words_in_doc)\n\n    # Calculate document frequency ratios\n    doc_freq_ratios = [(word, round(count / total_docs, 4)) for word, count in word_doc_count.items()]\n\n    # Sort by document frequency ratio in descending order\n    doc_freq_ratios.sort(key=lambda x: x[1], reverse=True)\n\n    # Determine the set of top 'cut_off' words\n    if cut_off is None or cut_off >= len(doc_freq_ratios):\n        top_words = set(word for word, _ in doc_freq_ratios)\n    else:\n        top_words = set(word for word, _ in doc_freq_ratios[:cut_off])\n\n    return doc_freq_ratios, top_words\n\n\n# Example usage:\ndocuments = [\n    ('doc1', ['apple', 'banana', 'apple', 'orange']),\n    ('doc2', ['banana', 'kiwi', 'kiwi']),\n    ('doc3', ['apple', 'orange', 'banana']),\n    ('doc4', ['kiwi', 'orange', 'banana'])\n]\n\nratios, top_words = statistic_key_word(documents, cut_off=2)\nprint(\"Document Frequency Ratios:\", ratios)\nprint(\"Top Words Set:\", top_words)\n```\n\nThis script defines the `statistic_key_word` function as specified, which calculates the document-frequency ratios for each word across a collection of documents and returns a list of these ratios along with a set of the top `k` most frequent words, where `k` is specified by the `cut_off` parameter. The example usage at the end demonstrates how to call this function and prints the results."}
{"task_id": 571, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute the weight vector w\n    w = np.sum(alpha * y[:, np.newaxis] * X, axis=0)\n    \n    # Compute the bias term b\n    b_terms = y - np.dot(X, w)\n    b = np.mean(b_terms)\n    \n    # Round the weight vector and bias term to 4 decimal places\n    w_rounded = np.round(w, 4)\n    b_rounded = np.round(b, 4)\n    \n    # Convert the weight vector to a list\n    w_list = w_rounded.tolist()\n    \n    return w_list, b_rounded\n\n# Example usage:\n# X = np.array([[2, 3], [1, 2], [3, 3]])\n# y = np.array([1, -1, 1])\n# alpha = np.array([0.25, 0.25, 0.25])\n# w_list, b = compute_svm_parameters(X, y, alpha)\n# print(\"Weight vector:\", w_list)\n# print(\"Bias term:\", b)\n```\n\nThis script defines the `compute_svm_parameters` function, which calculates the weight vector `w` and bias term `b` for a linear SVM using the given training data `X`, labels `y`, and Lagrange multipliers `alpha`. The results are rounded to four decimal places, and the weight vector is returned as a Python list."}
{"task_id": 572, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Compute the Local Outlier Factor (LOF) for each sample in the dataset.\"\"\"\n    \n    # Step 1: Compute the full pair-wise Euclidean distance matrix\n    n_samples = data.shape[0]\n    distance_matrix = np.zeros((n_samples, n_samples))\n    \n    for i in range(n_samples):\n        for j in range(n_samples):\n            if i != j:\n                distance_matrix[i, j] = np.linalg.norm(data[i] - data[j])\n    \n    # Step 2: For every sample p, obtain its k-distance and the index list of those k nearest neighbours N_k(p)\n    k_distances = np.zeros(n_samples)\n    k_neighbor_indices = np.zeros((n_samples, k), dtype=int)\n    \n    for i in range(n_samples):\n        distances = distance_matrix[i]\n        sorted_indices = np.argsort(distances)\n        k_neighbor_indices[i] = sorted_indices[1:k+1]  # Exclude the sample itself\n        k_distances[i] = distances[sorted_indices[k]]\n    \n    # Step 3: Define the reachability distance between two points\n    def reachability_distance(k_distance, distance):\n        return max(k_distance, distance)\n    \n    # Step 4: Compute the Local Reachability Density (LRD) of p\n    lrd = np.zeros(n_samples)\n    \n    for i in range(n_samples):\n        neighbors = k_neighbor_indices[i]\n        reachability_distances = [reachability_distance(k_distances[n], distance_matrix[i, n]) for n in neighbors]\n        lrd[i] = k / np.sum(reachability_distances)\n    \n    # Step 5: Compute the Local Outlier Factor (LOF) for each sample\n    lof_scores = np.zeros(n_samples)\n    \n    for i in range(n_samples):\n        neighbors = k_neighbor_indices[i]\n        lof_scores[i] = (np.sum(lrd[neighbors]) / k) / lrd[i]\n    \n    # Round every LOF score to the nearest 4th decimal place\n    lof_scores_rounded = np.round(lof_scores, 4).tolist()\n    \n    # Find indices of all samples whose LOF score is strictly larger than epsilon\n    outlier_indices = np.where(lof_scores > epsilon)[0].tolist()\n    \n    return lof_scores_rounded, sorted(outlier_indices)\n\n# Example usage:\n# data = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\n# k = 3\n# epsilon = 1.5\n# scores, outliers = local_outlier_factor(data, k, epsilon)\n# print(\"LOF Scores:\", scores)\n# print(\"Outlier Indices:\", outliers)\n```\n\nThis Python script implements the Local Outlier Factor (LOF) algorithm from scratch without using any external libraries like `scipy` or `sklearn`. It computes the LOF scores for each sample in the dataset and identifies the indices of samples that are considered outliers based on the given `epsilon` threshold."}
{"task_id": 574, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n\n    for c in range(m):\n        base = 10 * (c // 2)\n        # Generate training points\n        x_train = np.random.uniform(base + 1, base + 9, n_train)\n        y_train = np.random.uniform(base + 1, base + 9, n_train)\n        X_train.append(np.column_stack((x_train, y_train)))\n        y_train.extend([c] * n_train)\n\n        # Generate validation points\n        x_val = np.random.uniform(base + 1, base + 9, n_val)\n        y_val = np.random.uniform(base + 1, base + 9, n_val)\n        X_val.append(np.column_stack((x_val, y_val)))\n        y_val.extend([c] * n_val)\n\n    X_train = np.round(np.vstack(X_train), 4)\n    X_val = np.round(np.vstack(X_val), 4)\n    y_train = np.array(y_train)\n    y_val = np.array(y_val)\n\n    return X_train, X_val, y_train, y_val\n```\n\nThis script defines the `generate_data` function which generates synthetic 2-D data for a specified number of classes, with a given number of training and validation points per class. The coordinates of the points are sampled from a uniform distribution within specified bounds and rounded to four decimal places. The function also supports setting a random seed for reproducibility."}
{"task_id": 579, "completion_id": 0, "completion": "Certainly! Below is the self-contained Python script that implements the K-Means clustering algorithm according to the specified requirements:\n\n```python\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    # Step 1: Initialize centres as the first k points in X\n    centres = [X[i] for i in range(k)]\n    \n    # Helper function to compute Euclidean distance between two points\n    def euclidean_distance(p1, p2):\n        return np.sqrt(np.sum((p1 - p2) ** 2))\n    \n    # Initialize labels\n    labels = [-1] * len(X)\n    \n    for _ in range(max_iters):\n        # Step 2: Assignment step\n        new_labels = [-1] * len(X)\n        for i, point in enumerate(X):\n            min_distance = float('inf')\n            closest_centre = 0\n            for j, centre in enumerate(centres):\n                distance = euclidean_distance(point, centre)\n                if distance < min_distance:\n                    min_distance = distance\n                    closest_centre = j\n            new_labels[i] = closest_centre\n        \n        # If assignments have not changed, break the loop\n        if new_labels == labels:\n            break\n        \n        labels = new_labels\n        \n        # Step 3: Update step\n        new_centres = [np.zeros_like(centres[0]) for _ in range(k)]\n        counts = [0] * k\n        for i, label in enumerate(labels):\n            new_centres[label] += X[i]\n            counts[label] += 1\n        \n        for j in range(k):\n            if counts[j] > 0:\n                new_centres[j] /= counts[j]\n        \n        centres = new_centres\n    \n    # Round the coordinates of the centres to 4 decimal places\n    rounded_centres = [list(map(lambda x: round(x, 4), centre)) for centre in centres]\n    \n    return labels, rounded_centres\n\n# Example usage:\n# X = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# labels, centres = kmeans(X, k=2)\n# print(\"Labels:\", labels)\n# print(\"Centres:\", centres)\n```\n\nThis script defines the `kmeans` function which performs the K-Means clustering as described. The function initializes the cluster centers using the first `k` points from the dataset, assigns each point to the nearest center, updates the centers based on the assigned points, and repeats the process until the assignments stabilize or the maximum number of iterations is reached. The final centers are rounded to four decimal places for consistency."}
{"task_id": 581, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    m, n = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n\n    if learning_rate == 0 or iterations == 0:\n        return [round(w, 4) for w in weights], round(bias, 4)\n\n    for _ in range(iterations):\n        predictions = np.dot(X, weights) + bias\n        residuals = y - predictions\n\n        # Compute gradients\n        gradient_weights = -2 * np.dot(X.T, residuals) + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights\n        gradient_bias = -2 * np.sum(residuals)\n\n        # Update weights and bias\n        weights -= learning_rate * gradient_weights / m\n        bias -= learning_rate * gradient_bias / m\n\n    return [round(w, 4) for w in weights], round(bias, 4)\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([3, 7, 11])\n# learning_rate = 0.1\n# iterations = 100\n# l1_penalty = 0.1\n# l2_penalty = 0.1\n# print(elastic_net_regression(X, y, learning_rate, iterations, l1_penalty, l2_penalty))\n```\n\nThis script defines the `elastic_net_regression` function, which performs batch gradient descent to fit a linear model with Elastic-Net regularization. The function initializes weights and bias to zero and updates them iteratively based on the computed gradients. The gradients are adjusted by the L1 and L2 penalties, and the updates are scaled by the learning rate and the number of samples. The final weights and bias are rounded to four decimal places before being returned."}
{"task_id": 591, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    def relu(z):\n        return np.maximum(0, z)\n    \n    # Convert the input to a numpy array for easier manipulation\n    current_input = np.array(x)\n    \n    # Iterate over each layer in the network\n    for layer_weights in weights:\n        # Add bias term to the input\n        current_input = np.insert(current_input, 0, 1)\n        \n        # Convert weights to a numpy array for matrix multiplication\n        W = np.array(layer_weights)\n        \n        # Perform the dot product\n        current_input = W.dot(current_input)\n        \n        # Apply ReLU activation function if it's not the last layer\n        if layer_weights != weights[-1]:\n            current_input = relu(current_input)\n    \n    # Round the final output to four decimals\n    if len(current_input) == 1:\n        return round(current_input[0], 4)\n    else:\n        return [round(value, 4) for value in current_input]\n\n# Example usage:\n# weights = [[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]], [[0.7, 0.8, 0.9]]]\n# x = [0.5, 0.5]\n# print(neural_net_predict(weights, x))\n```\n\nThis script defines a function `neural_net_predict` that performs a forward pass through a fully-connected feed-forward neural network with ReLU activations in the hidden layers and a linear activation in the output layer. The function takes the network's weights and an input vector as arguments and returns the network's prediction, rounded to four decimal places."}
{"task_id": 595, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Implement K-Means clustering to compute centroids only.\"\"\"\n    \n    # Step 1: Initialize centroids with the first k samples in X\n    centroids = X[:k].copy()\n    \n    for _ in range(max_iters):\n        # Step 2.1: Assign every sample to the nearest centroid\n        distances = np.sum((X[:, np.newaxis] - centroids) ** 2, axis=2)\n        closest_centroids = np.argmin(distances, axis=1)\n        \n        # Step 2.2: Update each centroid\n        new_centroids = np.array([X[closest_centroids == i].mean(axis=0) if np.any(closest_centroids == i) else centroids[i] for i in range(k)])\n        \n        # Step 3: Check for convergence\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 1e-4):\n            break\n        \n        centroids = new_centroids\n    \n    # Step 4: Sort centroids lexicographically and round to 4 decimal places\n    centroids = np.round(centroids, 4)\n    centroids = centroids.tolist()\n    centroids.sort()\n    \n    return centroids\n\n# Example usage:\n# X = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# k = 2\n# print(kmeans_centroids(X, k))\n```\n\nThis script implements the K-Means clustering algorithm from scratch, focusing only on computing the centroids as specified. It initializes centroids using the first `k` samples, iteratively assigns samples to the nearest centroid, updates centroids, checks for convergence, and finally sorts and rounds the centroids before returning them."}
