{"task_id": 0, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Implement Ridge (L2-regularised) Linear Regression using its closed-form solution.\n    \n    Parameters:\n    - data: np.ndarray where the last column is the target y and all preceding columns are the features X.\n    - alpha: float, the regularisation strength.\n    \n    Returns:\n    - A list of coefficients rounded to 4 decimal places.\n    \"\"\"\n    # Separate features and target\n    X = data[:, :-1]\n    y = data[:, -1]\n    \n    # Add bias term (intercept)\n    X = np.hstack([np.ones((X.shape[0], 1)), X])\n    \n    # Compute the weight vector using the closed-form solution\n    I = np.eye(X.shape[1])  # Identity matrix with size equal to the number of columns in X\n    try:\n        # Calculate the inverse of (X^T X + alpha * I)\n        inv_term = np.linalg.inv(X.T @ X + alpha * I)\n        w = inv_term @ X.T @ y\n    except np.linalg.LinAlgError:\n        # If the matrix is not invertible, return -1\n        return -1\n    \n    # Round the coefficients to 4 decimal places and return as a list\n    return [round(coef, 4) for coef in w]\n\n# Example usage:\n# data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n# alpha = 0.1\n# print(ridge_regression(data, alpha))\n```\n\nThis script defines a function `ridge_regression` that takes a numpy array `data` and a regularization strength `alpha`, and returns the coefficients of the ridge regression model rounded to four decimal places. If the matrix is not invertible, it returns `-1`. The example usage at the bottom demonstrates how to call the function."}
{"task_id": 1, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    \n    # Compute the Gram matrix\n    K = np.dot(X_train, X_train.T)\n    \n    updates = 0\n    i = 0\n    while updates < n_iter:\n        # Compute the activation\n        activation = np.sum(alpha * y_train * K[i])\n        margin = y_train[i] * (activation + b)\n        \n        if margin <= 0:\n            # Update alpha and b\n            alpha[i] += eta\n            b += eta * y_train[i]\n            updates += 1\n            i = 0  # Restart the scan\n        else:\n            i += 1\n        \n        if i >= n_samples:\n            break  # No misclassified points in this pass\n    \n    # Compute the primal weight vector w\n    w = np.sum(alpha * y_train[:, np.newaxis] * X_train, axis=0)\n    \n    # Round the results\n    w_rounded = [round(w_i, 4) for w_i in w]\n    b_rounded = round(b, 4)\n    \n    return w_rounded, b_rounded\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 3], [2, 1], [3, 2]])\n# y_train = np.array([1, 1, 1, -1, -1])\n# w, b = perceptron_dual(X_train, y_train)\n# print(\"Weight vector:\", w)\n# print(\"Bias:\", b)\n```\n\nThis script defines the `perceptron_dual` function which implements the dual-form perceptron learning algorithm. It includes the initialization of dual parameters, computation of the Gram matrix, the training loop with margin checks and updates, and finally the computation of the primal weight vector. The results are rounded to four decimal places as required."}
{"task_id": 2, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    def identity(mu):\n        return mu\n\n    def inv_identity(eta):\n        return eta\n\n    def deriv_identity(mu):\n        return np.ones_like(mu)\n\n    def log(mu):\n        return np.log(mu)\n\n    def inv_log(eta):\n        return np.exp(eta)\n\n    def deriv_log(mu):\n        return 1.0 / mu\n\n    def logit(mu):\n        return np.log(mu / (1 - mu))\n\n    def inv_logit(eta):\n        return 1.0 / (1 + np.exp(-eta))\n\n    def deriv_logit(mu):\n        return 1.0 / (mu * (1 - mu))\n\n    return {\n        \"identity\": {\n            \"link\": identity,\n            \"inv_link\": inv_identity,\n            \"deriv\": deriv_identity\n        },\n        \"log\": {\n            \"link\": log,\n            \"inv_link\": inv_log,\n            \"deriv\": deriv_log\n        },\n        \"logit\": {\n            \"link\": logit,\n            \"inv_link\": inv_logit,\n            \"deriv\": deriv_logit\n        }\n    }\n\n# Example usage\nif __name__ == \"__main__\":\n    links = glm_links()\n    mu = np.array([0.2, 0.8])\n    eta = links[\"logit\"][\"link\"](mu)\n    print(\"eta:\", np.round(eta, 4))  # \u2192 [-1.3863, 1.3863]\n    mu2 = links[\"logit\"][\"inv_link\"](eta)\n    print(\"mu2:\", np.round(mu2, 4))  # \u2192 [0.2, 0.8]\n```"}
{"task_id": 3, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    \n    def build_tree(indices):\n        if len(indices) < 3:\n            return {'indices': indices}\n        \n        # Choose a random feature\n        f = np.random.choice(data.shape[1])\n        # Get the min and max values of the chosen feature\n        down = np.min(data[indices, f])\n        up = np.max(data[indices, f])\n        # Choose a random split value between down and up\n        v = np.random.uniform(down, up)\n        \n        # Split the indices into left and right\n        left_indices = indices[data[indices, f] <= v]\n        right_indices = indices[data[indices, f] > v]\n        \n        # Recursively build the left and right subtrees\n        left_tree = build_tree(left_indices)\n        right_tree = build_tree(right_indices)\n        \n        return {'feature': f, 'value': v, 'left': left_tree, 'right': right_tree}\n    \n    def compute_depths(node, depth, sample_depths):\n        if 'indices' in node:\n            for idx in node['indices']:\n                sample_depths[idx] = depth\n        else:\n            compute_depths(node['left'], depth + 1, sample_depths)\n            compute_depths(node['right'], depth + 1, sample_depths)\n    \n    # Build the isolation tree\n    root = build_tree(np.arange(data.shape[0]))\n    \n    # Compute the depths for each sample\n    sample_depths = [0] * data.shape[0]\n    compute_depths(root, 0, sample_depths)\n    \n    return sample_depths\n\n# Example usage:\ndata = np.arange(5).reshape(-1, 1)\nprint(isolation_tree_path_length(data))  # Output: [2, 2, 2, 1, 1]\n```"}
{"task_id": 7, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    if not transactions or minsup <= 0 or minsup > 1:\n        return {}\n\n    N = len(transactions)\n    min_support_count = math.ceil(minsup * N)\n    itemset_support = {}\n\n    # Extract all unique items from transactions\n    unique_items = set(item for transaction in transactions for item in transaction)\n\n    # Generate all possible itemsets\n    for k in range(1, len(unique_items) + 1):\n        for itemset in combinations(unique_items, k):\n            itemset_count = sum(1 for transaction in transactions if set(itemset).issubset(set(transaction)))\n            if itemset_count >= min_support_count:\n                itemset_support[itemset] = itemset_count\n\n    return itemset_support\n\n# Example usage\ntransactions = [\n    ['bread', 'milk'],\n    ['bread', 'diaper', 'beer', 'egg'],\n    ['milk', 'diaper', 'beer', 'coke'],\n    ['bread', 'milk', 'diaper', 'beer'],\n    ['bread', 'milk', 'diaper', 'coke']\n]\nminsup = 0.6\n\nprint(find_frequent_itemsets(transactions, minsup))\n```\n\nThis script defines the `find_frequent_itemsets` function, which computes all frequent itemsets from a list of transactions based on a given minimum support threshold. The function uses Python's standard library to handle the necessary computations and returns the result as a dictionary. The example usage at the end demonstrates how to call the function with a sample dataset and print the frequent itemsets."}
{"task_id": 11, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    # Step 1: Initialize the centres with the first k samples\n    centres = data[:k].copy()\n    \n    for _ in range(max_iter):\n        # Step 2: Assign each sample to the nearest centre\n        labels = []\n        for sample in data:\n            distances = np.sum((sample - centres) ** 2, axis=1)\n            labels.append(np.argmin(distances))\n        \n        # Step 3: Recompute each centre as the mean of the assigned samples\n        new_centres = np.zeros_like(centres)\n        counts = np.zeros(k, dtype=int)\n        \n        for label, sample in zip(labels, data):\n            new_centres[label] += sample\n            counts[label] += 1\n        \n        for i in range(k):\n            if counts[i] == 0:  # If a cluster is empty\n                # Re-initialize with a random sample\n                new_centres[i] = data[np.random.randint(data.shape[0])]\n            else:\n                new_centres[i] /= counts[i]\n        \n        # Step 4: Check for convergence\n        max_change = np.max(np.sum((new_centres - centres) ** 2, axis=1))\n        centres = new_centres.copy()\n        \n        if max_change < epsilon:\n            break\n    \n    # Round the centres to 4 decimal places\n    centres = np.round(centres, 4).tolist()\n    \n    return centres, labels\n```\n\nThis script implements the K-Means clustering algorithm from scratch, adhering to the specified requirements. It initializes the cluster centers with the first `k` samples, assigns each sample to the nearest center, recomputes the centers, and handles empty clusters by reinitializing them with random samples. The algorithm stops when the maximum change in any center is smaller than `epsilon` or when `max_iter` iterations are reached. The final centers are rounded to 4 decimal places before being returned."}
{"task_id": 13, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_users, n_items = data.shape\n    \n    # Step 1: Build the item-item similarity matrix S\n    S = np.zeros((n_items, n_items))\n    \n    for i in range(n_items):\n        for j in range(i + 1, n_items):\n            # Users who rated both items i and j\n            rated_both = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(rated_both) == 0:\n                S[i, j] = S[j, i] = 0\n                continue\n            \n            v1 = data[rated_both, i]\n            v2 = data[rated_both, j]\n            \n            if criterion == 'cosine':\n                if np.std(v1) > 1e-3 and np.std(v2) > 1e-3:\n                    v1_centered = v1 - np.mean(v1)\n                    v2_centered = v2 - np.mean(v2)\n                    S[i, j] = np.dot(v1_centered, v2_centered) / (np.linalg.norm(v1_centered) * np.linalg.norm(v2_centered))\n                else:\n                    S[i, j] = S[j, i] = 0\n            elif criterion == 'pearson':\n                S[i, j] = np.corrcoef(v1, v2)[0, 1]\n            \n            S[j, i] = S[i, j]\n    \n    # Step 2: Collect the indices of the items rated by the active user\n    rated_items = np.where(data[user_ind, :] > 0)[0]\n    r = data[user_ind, rated_items]\n    \n    # Step 3: Compute the predicted attractiveness score for each unrated item\n    scores = defaultdict(float)\n    \n    for t in range(n_items):\n        if t not in rated_items:\n            numerator = np.sum(r * S[t, rated_items])\n            denominator = np.sum(np.abs(S[t, rated_items]))\n            if denominator > 0:\n                scores[t] = numerator / denominator\n    \n    # Step 4: Return the indices of the top k items sorted by score\n    sorted_scores = sorted(scores.items(), key=lambda x: x[1], reverse=True)\n    top_k_items = [item for item, score in sorted_scores][:k]\n    \n    return top_k_items\n\n# Example usage:\n# data = np.array([\n#     [5, 3, 0, 1],\n#     [4, 0, 0, 1],\n#     [1, 1, 0, 5],\n#     [1, 0, 0, 4],\n#     [0, 1, 5, 4],\n# ])\n# user_ind = 0\n# k = 2\n# criterion = 'cosine'\n# print(knn_recommend(data, user_ind, k, criterion))\n```\n\nThis script defines the `knn_recommend` function, which implements the item-based k-NN collaborative filtering recommender as described. It constructs an item-item similarity matrix using either cosine or Pearson similarity, computes the predicted attractiveness scores for unrated items, and returns the top k items based on these scores."}
{"task_id": 19, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_gain = -np.inf\n    best_feature = None\n    best_threshold = None\n\n    # Calculate total statistics for the current node\n    G = np.sum(g)\n    H = np.sum(h)\n    L = -0.5 * (G**2) / (H + lam) + gamma\n\n    for feature_index in range(n_features):\n        # Get unique thresholds for the current feature\n        unique_thresholds = np.unique(X[:, feature_index])\n        \n        # Initialize left statistics\n        GL, HL = 0, 0\n        \n        # Sort indices by the feature values\n        sorted_indices = np.argsort(X[:, feature_index])\n        \n        for i in sorted_indices:\n            # Update left statistics\n            GL += g[i]\n            HL += h[i]\n            \n            # Ensure there are at least two instances on the left\n            if i < n_samples - 1:\n                # Right statistics\n                GR = G - GL\n                HR = H - HL\n                \n                # Ensure there are at least two instances on the right\n                if HL > 0 and HR > 0:\n                    # Calculate gain for the current split\n                    gain = L - (-0.5 * (GL**2) / (HL + lam) + gamma) - (-0.5 * (GR**2) / (HR + lam) + gamma)\n                    \n                    # Update best split if this one is better\n                    if gain > best_gain:\n                        best_gain = gain\n                        best_feature = feature_index\n                        best_threshold = (X[sorted_indices[i], feature_index] + X[sorted_indices[i + 1], feature_index]) / 2\n    \n    return (best_feature, best_threshold) if best_gain > 0 else None\n```\n\nThis function iterates over each feature and each unique threshold within that feature to find the best split that maximizes the gain. It ensures that there are at least two instances on each side of the split and returns the feature index and threshold that yield the highest positive gain. If no such split exists, it returns `None`."}
{"task_id": 20, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Convert input to a NumPy array if it's a list\n    if isinstance(x, list):\n        x = np.array(x)\n    \n    # Calculate the sigmoid values\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    \n    # Calculate the gradient of the sigmoid function\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    \n    # Round the results to 4 decimal places\n    sigmoid_x_rounded = np.round(sigmoid_x, 4)\n    gradient_x_rounded = np.round(gradient_x, 4)\n    \n    # Convert the results back to the appropriate type\n    if isinstance(x, np.ndarray) and x.ndim == 0:\n        # If x was a scalar, return floats\n        return float(sigmoid_x_rounded), float(gradient_x_rounded)\n    else:\n        # Otherwise, return lists\n        return sigmoid_x_rounded.tolist(), gradient_x_rounded.tolist()\n\n# Example usage:\n# scalar_input = 0\n# print(sigmoid_activation(scalar_input))  # Output: (0.5, 0.25)\n\n# list_input = [0, -1, 2]\n# print(sigmoid_activation(list_input))  # Output: ([0.5, 0.2689, 0.8808], [0.25, 0.1966, 0.1049])\n\n# array_input = np.array([[0, -1], [2, 3]])\n# print(sigmoid_activation(array_input))  # Output: ([[0.5, 0.2689], [0.8808, 0.9526]], [[0.25, 0.1966], [0.1049, 0.0452]])\n```"}
{"task_id": 21, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float],\n                        y_train: list[int],\n                        x_test: list[float],\n                        epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    def decision_stump_predict(x, d, theta):\n        return 1 if (d == 0 and x <= theta) or (d == 1 and x > theta) else -1\n\n    def calculate_error(weights, y, predictions):\n        return np.sum(weights * (y != predictions)) / np.sum(weights)\n\n    n_samples = len(x_train)\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n\n    while True:\n        best_stump = None\n        best_error = float('inf')\n        best_alpha = None\n\n        # Sort the data by x_train to find thresholds\n        sorted_indices = np.argsort(x_train)\n        x_train_sorted = np.array(x_train)[sorted_indices]\n        y_train_sorted = np.array(y_train)[sorted_indices]\n        weights_sorted = weights[sorted_indices]\n\n        for d in [0, 1]:\n            for i in range(n_samples - 1):\n                theta = (x_train_sorted[i] + x_train_sorted[i + 1]) / 2\n                predictions = np.array([decision_stump_predict(x, d, theta) for x in x_train_sorted])\n                error = calculate_error(weights_sorted, y_train_sorted, predictions)\n\n                if error < best_error:\n                    best_error = error\n                    best_stump = (d, theta)\n                    best_alpha = 0.5 * math.log((1 - error) / error)\n\n        if best_error == 0:\n            alphas.append(best_alpha)\n            stumps.append(best_stump)\n            break\n\n        alphas.append(best_alpha)\n        stumps.append(best_stump)\n\n        # Update weights\n        predictions = np.array([decision_stump_predict(x, best_stump[0], best_stump[1]) for x in x_train])\n        weights *= np.exp(-best_alpha * y_train * predictions)\n        weights /= np.sum(weights)\n\n        # Check training error\n        ensemble_predictions = np.sign(np.sum([alpha * decision_stump_predict(x, stump[0], stump[1]) for alpha, stump in zip(alphas, stumps)]) for x in x_train)\n        training_error = calculate_error(np.ones(n_samples), y_train, ensemble_predictions)\n\n        if training_error <= epsilon:\n            break\n\n    # Predict on test data\n    def ensemble_predict(x):\n        return np.sign(sum(alpha * decision_stump_predict(x, stump[0], stump[1]) for alpha, stump in zip(alphas, stumps)))\n\n    return [ensemble_predict(x) for x in x_test]\n```\n\nThis script defines the `adaboost_1d_predict` function, which trains an AdaBoost ensemble using one-dimensional decision stumps and returns predictions for a given test set. The function follows the steps outlined in the task description, including the initialization of uniform sample weights, the enumeration of possible stumps, the selection of the best stump based on weighted error, the update of sample weights, and the stopping criterion based on the training error."}
{"task_id": 25, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    # Compute the Euclidean norm squared between each pair of training and test samples\n    # Using broadcasting to avoid explicit loops\n    diff = X_train[:, np.newaxis, :] - X_test[np.newaxis, :, :]\n    norm_squared = np.sum(diff ** 2, axis=2)\n    \n    # Compute the Gaussian kernel values\n    kernel_values = np.exp(-gamma * norm_squared)\n    \n    # Compute the decision function for each test sample\n    g_z = np.sum(alpha * y_train * kernel_values, axis=0) + b\n    \n    # Predict the labels based on the sign of the decision function\n    predictions = np.sign(g_z)\n    \n    # Convert the predictions to a list of integers\n    return predictions.astype(int).tolist()\n```\n\nThis function computes the predictions for the test samples using the pre-trained SVM with a Gaussian kernel. It leverages NumPy for efficient vectorized operations to compute the Euclidean norm squared, the Gaussian kernel values, and the decision function. The predictions are then derived from the sign of the decision function and returned as a list of integers."}
{"task_id": 28, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    # Convert the input list of lists to a numpy array\n    X_np = np.array(X)\n    \n    # Get the shape of the matrix\n    m, n = X_np.shape\n    \n    # Check if k is within the valid range\n    if k < 1 or k > min(m, n):\n        return -1\n    \n    # Perform truncated SVD\n    U, s, Vt = np.linalg.svd(X_np, full_matrices=False)\n    \n    # Truncate the SVD to keep only the first k singular values/vectors\n    U_k = U[:, :k]\n    s_k = np.diag(s[:k])\n    Vt_k = Vt[:k, :]\n    \n    # Reconstruct the matrix\n    X_hat_np = U_k @ s_k @ Vt_k\n    \n    # Calculate the mean squared reconstruction error\n    mse = np.mean((X_np - X_hat_np) ** 2)\n    \n    # Round the reconstructed matrix and the MSE to four decimals\n    X_hat = np.round(X_hat_np, 4).tolist()\n    mse = round(mse, 4)\n    \n    return X_hat, mse\n```\n\nThis script defines the `linear_autoencoder` function which performs the tasks as described. It uses NumPy for matrix operations and ensures that the results are rounded to four decimal places. The function checks if the provided `k` is valid and returns `-1` if it is not."}
{"task_id": 29, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                           y_train: list[float] | np.ndarray,\n                           x_query: float,\n                           epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    \n    # Sort the training data by the feature values\n    sorted_indices = np.argsort(x_train)\n    x_train_sorted = x_train[sorted_indices]\n    y_train_sorted = y_train[sorted_indices]\n    \n    # Initialize residuals\n    residuals = y_train_sorted.copy()\n    predictions = np.zeros_like(y_train_sorted, dtype=float)\n    \n    # Function to calculate RSS for a given stump\n    def calculate_rss(split_index):\n        c1 = residuals[:split_index].mean()\n        c2 = residuals[split_index:].mean()\n        rss = np.sum((residuals[:split_index] - c1) ** 2) + np.sum((residuals[split_index:] - c2) ** 2)\n        return rss, c1, c2\n    \n    # List to store the stumps (s, c1, c2)\n    stumps = []\n    \n    # Iterate until the RSS is below the tolerance\n    while np.sum(residuals ** 2) > epsilon:\n        # Determine candidate split points\n        candidate_splits = [(x_train_sorted[i] + x_train_sorted[i + 1]) / 2 for i in range(len(x_train_sorted) - 1)]\n        \n        # Find the best split\n        best_rss = float('inf')\n        best_split_index = 0\n        best_c1 = 0\n        best_c2 = 0\n        \n        for i, split in enumerate(candidate_splits):\n            split_index = np.searchsorted(x_train_sorted, split, side='right')\n            rss, c1, c2 = calculate_rss(split_index)\n            if rss < best_rss:\n                best_rss = rss\n                best_split_index = split_index\n                best_c1 = c1\n                best_c2 = c2\n        \n        # Add the best stump to the ensemble\n        stumps.append((candidate_splits[best_split_index - 1], best_c1, best_c2))\n        \n        # Update predictions and residuals\n        predictions[:best_split_index] += best_c1\n        predictions[best_split_index:] += best_c2\n        residuals = y_train_sorted - predictions\n    \n    # Predict the query point\n    prediction = 0.0\n    for s, c1, c2 in stumps:\n        if x_query <= s:\n            prediction += c1\n        else:\n            prediction += c2\n    \n    return round(prediction, 4)\n```\n\nThis script defines the `predict_boosting_tree` function, which implements a one-dimensional gradient boosting regressor using decision stumps as weak learners. The function sorts the training data, iteratively adds the stump that minimizes the residual sum of squares, and predicts the target for a given query point. The prediction is rounded to four decimal places before being returned."}
{"task_id": 34, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None) -> np.ndarray:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s based on the specified shape and sparsity.\n    \n    Parameters:\n    - shape: A tuple defining the dimensions of the tensor.\n    - sparsity: A float in the range [0, 1] representing the probability of generating a 1.0.\n    - seed: An optional integer seed for reproducibility.\n    \n    Returns:\n    - A NumPy ndarray of specified shape with dtype float, containing only 0.0 and 1.0 values.\n      Returns -1 if sparsity is outside the legal range [0, 1].\n    \"\"\"\n    if not (0 <= sparsity <= 1):\n        return -1\n    \n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Generate random numbers in the range [0, 1)\n    random_numbers = np.random.rand(*shape)\n    \n    # Convert numbers to 1.0 with probability equal to sparsity, otherwise 0.0\n    binary_tensor = (random_numbers < sparsity).astype(float)\n    \n    return binary_tensor\n\n# Example usage:\n# shape = (2, 3), sparsity = 0.3, seed = 42\nresult = random_binary_tensor((2, 3), 0.3, 42)\nprint(result)\n# Expected output:\n# [[0. 1. 1.]\n#  [0. 0. 0.]]\n```\n\nThis script defines the `random_binary_tensor` function according to the provided requirements. It checks the sparsity value, seeds the random number generator if a seed is provided, and generates a binary tensor with the specified sparsity. The example usage demonstrates how to call the function and what output to expect."}
{"task_id": 39, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    median_index = n_samples // 2\n    \n    # Use argpartition to find the median index in O(n) time\n    indices = np.arange(n_samples)\n    partitioned_indices = np.argpartition(data[:, d], median_index)\n    \n    # The median index in the partitioned array\n    pivot_index = partitioned_indices[median_index]\n    \n    # Separate indices into left and right based on the median value\n    left_indices = partitioned_indices[:median_index]\n    right_indices = partitioned_indices[median_index + 1:]\n    \n    # Filter out indices that are exactly equal to the median value for left and right\n    left_indices = [i for i in left_indices if data[i, d] < data[pivot_index, d]]\n    right_indices = [i for i in right_indices if data[i, d] > data[pivot_index, d]]\n    \n    # Sort the left and right indices\n    left_indices.sort()\n    right_indices.sort()\n    \n    return pivot_index, left_indices, right_indices\n\n# Example usage:\n# data = np.array([[3, 2], [1, 4], [5, 6], [7, 8], [9, 0]])\n# d = 0\n# pivot, left, right = get_split(data, d)\n# print(pivot, left, right)\n```\n\nThis script defines the `get_split` function which performs the median split on a given two-dimensional NumPy array along a specified column index using `numpy.argpartition` to achieve the split in O(n) time. The function returns the pivot index and two lists of indices for the left and right partitions, ensuring they are sorted."}
{"task_id": 40, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    # Assertions to check pre-conditions\n    assert x.ndim == 1, \"Input signal must be one-dimensional.\"\n    assert stride >= 1, \"Stride must be a positive integer.\"\n    assert len(x) >= frame_width, \"Input signal must be at least as long as the frame width.\"\n\n    # Calculate the number of frames\n    n_frames = (len(x) - frame_width) // stride + 1\n\n    # Calculate the strides for the new array\n    itemsize = x.itemsize\n    strides = (stride * itemsize, itemsize)\n\n    # Create the view using as_strided\n    frames = as_strided(x, shape=(n_frames, frame_width), strides=strides, writeable=writeable)\n\n    return frames\n\n# Example usage:\n# x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])\n# frame_width = 4\n# stride = 2\n# frames = to_frames(x, frame_width, stride)\n# print(frames)\n# Output:\n# array([[1, 2, 3, 4],\n#        [3, 4, 5, 6],\n#        [5, 6, 7, 8]])\n```\n\nThis script defines the `to_frames` function which takes a 1-D NumPy array `x`, a frame width, a stride, and an optional `writeable` flag. It uses `numpy.lib.stride_tricks.as_strided` to create a view of the input array that represents the overlapping frames. The function includes assertions to ensure the input parameters meet the specified pre-conditions."}
{"task_id": 48, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Convert input to a numpy array if it's not already\n    X = np.array(X)\n    \n    # Check if the matrix is two-dimensional\n    if X.ndim != 2:\n        return False\n    \n    # Check if all elements are between 0 and 1\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    \n    # Check if each row sums to 1 within the tolerance\n    if not np.allclose(np.sum(X, axis=1), 1, atol=1e-8):\n        return False\n    \n    return True\n\n# Example usage:\n# matrix = [[0.5, 0.5], [0.2, 0.8]]\n# print(is_stochastic(matrix))  # Should return True\n\n# matrix = [[0.5, 0.5], [0.2, 0.7]]\n# print(is_stochastic(matrix))  # Should return False\n```\n\nThis script defines the `is_stochastic` function, which checks if a given matrix is row-stochastic according to the specified criteria. The function handles both list of lists and numpy array inputs, ensuring that the matrix is two-dimensional, all elements are within the range [0, 1], and each row sums to 1 up to a tolerance of `1e-8`."}
{"task_id": 55, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n, d = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    \n    for iteration in range(max_iter):\n        # Determine batch indices\n        start_idx = (iteration * batch_size) % n\n        end_idx = (start_idx + batch_size) % n\n        \n        if start_idx < end_idx:\n            X_batch = X[start_idx:end_idx]\n            y_batch = y[start_idx:end_idx]\n        else:\n            # Wrap around the end of the array\n            X_batch = np.vstack((X[start_idx:], X[:end_idx]))\n            y_batch = np.concatenate((y[start_idx:], y[:end_idx]))\n        \n        # Compute gradient\n        gradient = (1 / len(X_batch)) * X_batch.T @ (X_batch @ w - y_batch)\n        \n        # Update running average of squared gradients\n        s = rho * s + (1 - rho) * (gradient ** 2)\n        \n        # Update weights\n        w -= eta * gradient / (np.sqrt(s) + eps_station)\n        \n        # Check stopping condition\n        if np.linalg.norm(gradient) < epsilon:\n            break\n    \n    return [round(weight, 4) for weight in w.tolist()]\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y = np.array([3, 5, 7, 9])\n# print(rms_prop(X, y))\n```\n\nThis script defines the `rms_prop` function to perform linear regression using the RMSprop optimization algorithm. The function takes in the feature matrix `X`, target vector `y`, and several hyperparameters, and returns the learned weight vector rounded to four decimal places. The function handles both full-batch and mini-batch gradient updates, with early stopping based on the gradient norm or the maximum number of iterations."}
{"task_id": 56, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n    \"\"\"Compute the SoftPlus activation or its derivative.\n    \n    Args:\n        x (scalar, list, or np.ndarray): Input value(s).\n        deriv (bool): If True, compute the derivative (sigmoid) instead of SoftPlus.\n    \n    Returns:\n        float or list: Rounded result(s) of SoftPlus or its derivative.\n    \"\"\"\n    # Convert input to a numpy array for vectorized operations\n    is_scalar = np.isscalar(x)\n    x = np.array(x, dtype=float)\n    \n    if deriv:\n        # Compute the derivative, which is the sigmoid function\n        result = 1 / (1 + np.exp(-x))\n    else:\n        # Compute the SoftPlus function using a numerically stable formulation\n        result = np.log1p(np.exp(-np.abs(x))) + np.maximum(x, 0)\n    \n    # Round the result to the nearest 4th decimal\n    result = np.round(result, 4)\n    \n    # Return a scalar if the input was a scalar\n    if is_scalar:\n        return float(result)\n    else:\n        return result.tolist()\n\n# Example usage:\n# print(softplus(1.0))  # SoftPlus of 1.0\n# print(softplus(1.0, deriv=True))  # Derivative of SoftPlus at 1.0\n# print(softplus([-1.0, 0.0, 1.0]))  # SoftPlus of a list\n# print(softplus([-1.0, 0.0, 1.0], deriv=True))  # Derivative of SoftPlus for a list\n```\n\nThis script defines the `softplus` function that computes either the SoftPlus activation or its derivative, depending on the `deriv` flag. It handles both scalar and array-like inputs, ensuring numerical stability, and rounds the results to the nearest 4th decimal place."}
{"task_id": 58, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    # Create N-gram and (N-1)-gram counters\n    ngram_counter = Counter(zip(*[corpus[i:] for i in range(N)]))\n    n1gram_counter = Counter(zip(*[corpus[i:] for i in range(N-1)]))\n    \n    total_log_prob = 0.0\n    \n    # Calculate the log-probability of each N-gram in the sequence\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i+N])\n        n1gram = tuple(sequence[i:i+N-1])\n        \n        ngram_count = ngram_counter[ngram]\n        n1gram_count = n1gram_counter[n1gram]\n        \n        if ngram_count == 0 or n1gram_count == 0:\n            return float('-inf')\n        \n        # Calculate the probability of the n-gram\n        prob = ngram_count / n1gram_count\n        total_log_prob += np.log(prob)\n    \n    return round(total_log_prob, 4)\n\n# Example usage:\n# corpus = [\"the\", \"cat\", \"sat\", \"on\", \"the\", \"mat\", \"the\", \"cat\", \"sat\"]\n# sequence = [\"the\", \"cat\", \"sat\"]\n# N = 3\n# print(unsmoothed_ngram_log_prob(corpus, sequence, N))  # Example output\n```\n\nThis script defines the function `unsmoothed_ngram_log_prob` which calculates the unsmoothed Maximum-Likelihood Estimation (MLE) N-gram log-probability of a given sequence based on a training corpus. The function uses `Counter` from the `collections` module to count occurrences of N-grams and (N-1)-grams in the corpus, and then computes the log-probability of the sequence by summing the log-probabilities of each N-gram in the sequence. If any required count is zero, it returns `float('-inf')`. The result is rounded to four decimal places."}
{"task_id": 62, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef lasso_regression(X: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\", degree: int, reg_factor: float, n_iterations: int = 1000, tol: float = 1e-6) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    m = len(y)\n    \n    # Build design matrix\n    X_poly = np.vander(X, degree + 1, increasing=True)\n    \n    # Initialize weights\n    w = np.zeros(degree + 1)\n    \n    for iteration in range(n_iterations):\n        w_prev = w.copy()\n        \n        # Update bias term w\u2080\n        w[0] = np.mean(y - X_poly[:, 1:].dot(w[1:]))\n        \n        # Update other coefficients\n        for j in range(1, degree + 1):\n            rho = X_poly[:, j].T.dot(y - X_poly.dot(w) + w[j] * X_poly[:, j])\n            w[j] = np.sign(rho) * max(abs(rho) - reg_factor, 0) / (X_poly[:, j].T.dot(X_poly[:, j]))\n        \n        # Check for convergence\n        if np.max(np.abs(w - w_prev)) < tol:\n            break\n    \n    return [round(coef, 4) for coef in w]\n\n# Example usage:\n# X = [1, 2, 3, 4, 5]\n# y = [2, 4, 5, 4, 5]\n# degree = 2\n# reg_factor = 0.1\n# print(lasso_regression(X, y, degree, reg_factor))\n```\n\nThis script defines a function `lasso_regression` that performs univariate Lasso regression with polynomial features using coordinate descent. The function constructs a design matrix with polynomial features, initializes weights, and iteratively updates them using the coordinate descent algorithm. The bias term is updated exactly, while other coefficients are updated using the soft thresholding function. The algorithm stops when the maximum absolute change in any coefficient falls below the specified tolerance or after a maximum number of iterations. The learned coefficients are returned as a list rounded to four decimal places."}
{"task_id": 63, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector \u03b2_t for a given time index t in a Hidden Markov Model.\n\n    Parameters:\n    A (list[list[float]]): Transition probability matrix of shape (N, N).\n    B (list[list[float]]): Emission probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices (length T).\n    t (int): Time index (0 \u2264 t < T).\n\n    Returns:\n    list[float]: List containing the N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    N = len(A)  # Number of states\n    T = len(obs)  # Length of the observation sequence\n\n    # Initialize \u03b2 with zeros\n    beta = np.zeros((T, N))\n\n    # Base case: \u03b2_{T-1}(i) = 1 for all states i\n    beta[T-1, :] = 1.0\n\n    # Fill the \u03b2 table from T-2 to t\n    for time in range(T-2, t-1, -1):\n        for i in range(N):\n            beta[time, i] = np.sum(A[i, :] * B[:, obs[time+1]] * beta[time+1, :])\n\n    # Return the backward probability vector for time t\n    return [round(beta[t, i], 4) for i in range(N)]\n\n# Example usage:\n# A = [[0.6, 0.4], [0.5, 0.5]]\n# B = [[0.7, 0.3], [0.4, 0.6]]\n# obs = [0, 1, 0]\n# t = 0\n# print(backward_beta(A, B, obs, t))  # Output: [0.1880, 0.2720]\n```\n\nThis script defines a function `backward_beta` that calculates the backward probability vector \\(\\beta_t\\) for a given time index \\(t\\) in a Hidden Markov Model. The function uses dynamic programming to fill in the backward probabilities starting from the end of the observation sequence and moving backwards to the specified time index \\(t\\). The result is rounded to four decimal places as required."}
{"task_id": 65, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or not pi or not obs:\n        return 0.0\n\n    N = len(A)  # Number of states\n    T = len(obs)  # Number of observations\n\n    # Initialize the beta matrix\n    beta = np.zeros((N, T))\n\n    # Base case: beta_{T-1}(i) = 1 for all states i\n    beta[:, T-1] = 1.0\n\n    # Fill the beta matrix using the backward recursion\n    for t in range(T-2, -1, -1):\n        for i in range(N):\n            beta[i, t] = np.sum(A[i, :] * B[:, obs[t+1]] * beta[:, t+1])\n\n    # Calculate the probability of the observation sequence\n    prob = np.sum(pi * B[:, obs[0]] * beta[:, 0])\n\n    return round(prob, 6)\n```\n\nThis script defines the `backward_prob` function, which computes the probability of an observation sequence given an HMM using the backward algorithm. It handles edge cases where any of the input lists are empty by returning `0.0`. The function uses NumPy for efficient matrix operations and ensures the result is rounded to six decimal places."}
{"task_id": 69, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    observations = np.array(observations)\n    \n    # Validate input dimensions\n    n = len(S)\n    if A.shape != (n, n) or B.ndim != 2 or S.shape != (n,):\n        return -1\n    \n    m = B.shape[1]\n    \n    # Check if every observation index is in the valid range [0, m-1]\n    if not np.all(observations >= 0) or not np.all(observations < m):\n        return -1\n    \n    # Handle empty observation sequence\n    if len(observations) == 0:\n        return -1\n    \n    # Initialize forward probabilities\n    T = len(observations)\n    alpha = np.zeros((T, n))\n    \n    # Base case: first observation\n    alpha[0] = S * B[:, observations[0]]\n    \n    # Induction step: compute forward probabilities for the rest of the observations\n    for t in range(1, T):\n        alpha[t] = np.dot(alpha[t-1], A) * B[:, observations[t]]\n    \n    # Termination step: compute the total probability of the observation sequence\n    likelihood = np.sum(alpha[-1])\n    \n    return round(likelihood, 4)\n\n# Example usage:\n# S = [0.6, 0.4]\n# A = [[0.7, 0.3], [0.4, 0.6]]\n# B = [[0.5, 0.4, 0.1], [0.1, 0.3, 0.6]]\n# observations = [0, 1, 2]\n# print(forward_algorithm(S, A, B, observations))  # Expected output: 0.0232\n```\n\nThis script defines the `forward_algorithm` function, which calculates the likelihood of an observation sequence given an HMM using the forward algorithm. It includes input validation to ensure the dimensions of the matrices and the observation sequence are correct, and it returns -1 for invalid inputs. The result is rounded to four decimal places as required."}
{"task_id": 70, "completion_id": 0, "completion": "```\npython\nfrom collections import Counter, defaultdict\n\nclass FPNode:\n    def __init__(self, item, count=1, parent=None):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.link = None\n        self.children = {}\n\n    def add_child(self, item):\n        if item not in self.children:\n            self.children[item] = FPNode(item, parent=self)\n        self.children[item].count += 1\n        return self.children[item]\n\nclass FPTree:\n    def __init__(self):\n        self.root = FPNode(None)\n        self.header_table = defaultdict(lambda: None)\n\n    def insert_transaction(self, transaction):\n        current_node = self.root\n        for item in transaction:\n            current_node = current_node.add_child(item)\n        self.update_header_table(transaction)\n\n    def update_header_table(self, transaction):\n        for item in transaction:\n            if self.header_table[item] is None:\n                self.header_table[item] = current_node.children[item]\n            else:\n                current = self.header_table[item]\n                while current.link is not None:\n                    current = current.link\n                current.link = current_node.children[item]\n\ndef find_frequent_items(transactions, min_support):\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    return {item for item, count in item_counts.items() if count >= min_support}\n\ndef construct_fp_tree(transactions, min_support, frequent_items):\n    fp_tree = FPTree()\n    for transaction in transactions:\n        filtered_transaction = [item for item in transaction if item in frequent_items]\n        filtered_transaction.sort(key=lambda x: (frequent_items[x], x), reverse=True)\n        fp_tree.insert_transaction(filtered_transaction)\n    return fp_tree\n\ndef find_prefix_path(node):\n    path = []\n    while node.parent is not None:\n        path.append(node)\n        node = node.parent\n    return path[::-1]\n\ndef conditional_tree_from_paths(prefix_paths, min_support):\n    conditional_tree = FPTree()\n    count_table = defaultdict(int)\n    \n    for path in prefix_paths:\n        count_table[path[0].item] += path[0].count\n    \n    for item, count in count_table.items():\n        if count >= min_support:\n            conditional_tree.header_table[item] = None\n    \n    for path in prefix_paths:\n        item = path[0].item\n        if item in conditional_tree.header_table:\n            conditional_tree.insert_transaction([node.item for node in path[1:]] + [item])\n    \n    return conditional_tree\n\ndef mine_tree(tree, header_table, min_support, prefix, frequent_itemsets):\n    for base_item in sorted(header_table, key=lambda x: (tree.header_table[x].count, x)):\n        new_prefix = prefix + [base_item]\n        frequent_itemsets.add(tuple(new_prefix))\n        \n        prefix_path = []\n        base_node = header_table[base_item]\n        while base_node is not None:\n            prefix_path.extend(find_prefix_path(base_node))\n            base_node = base_node.link\n        \n        conditional_tree = conditional_tree_from_paths(prefix_path, min_support)\n        if conditional_tree.root.children:\n            mine_tree(conditional_tree, conditional_tree.header_table, min_support, new_prefix, frequent_itemsets)\n\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    frequent_items = find_frequent_items(transactions, min_support)\n    if not frequent_items:\n        return []\n\n    fp_tree = construct_fp_tree(transactions, min_support, frequent_items)\n    frequent_itemsets = set()\n    \n    mine_tree(fp_tree, fp_tree.header_table, min_support, [], frequent_itemsets)\n    \n    return [sorted(itemset) for itemset in frequent_itemsets if itemset]\n\n# Example usage:\ntransactions = [\n    ['milk', 'bread', 'butter'],\n    ['milk', 'bread'],\n    ['bread', 'butter'],\n    ['milk', 'butter'],\n    ['bread'],\n    ['milk'],\n    ['bread', 'butter', 'milk']\n]\n\nmin_support = 2\nprint(fp_growth(transactions, min_support))\n```\n\nThis script implements the FP-Growth algorithm to discover frequent item sets from a list of transactions. The function `fp_growth` takes a list of transactions and a minimum support threshold as input and returns a list of frequent item sets, sorted according to the specified criteria."}
{"task_id": 75, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    \n    # Check if k is a valid number\n    if not isinstance(k, int) or k <= 0 or k > len(X_train):\n        return -1\n\n    # Convert lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # List to store predicted classes\n    predictions = []\n    \n    # Iterate over each test sample\n    for test_sample in X_test:\n        # Calculate the squared Euclidean distance from the test sample to all training samples\n        distances = np.sum((X_train - test_sample) ** 2, axis=1)\n        \n        # Get the indices of the k nearest neighbors\n        k_nearest_indices = np.argsort(distances)[:k]\n        \n        # Get the class labels of the k nearest neighbors\n        k_nearest_labels = y_train[k_nearest_indices]\n        \n        # Find the most common class label among the k nearest neighbors\n        # If there is a tie, np.argmax will return the first occurrence, which corresponds to the smallest class label\n        most_common_label = np.argmax(np.bincount(k_nearest_labels))\n        \n        # Append the predicted class label to the predictions list\n        predictions.append(most_common_label)\n    \n    return predictions\n```\n\nThis script defines a function `knn_predict` that implements the k-Nearest Neighbour algorithm as described in the task. It checks for valid input, computes distances, and uses majority voting to predict the class labels for the test set. In case of ties, it selects the smallest class label."}
{"task_id": 76, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    \n    # Define a small epsilon for numerical stability\n    epsilon = np.finfo(float).eps\n    \n    # Calculate the loss using the formula\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    \n    # Return the loss rounded to four decimal places\n    return round(loss, 4)\n\n# Example usage:\n# y = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\n# y_pred = np.array([[0.9, 0.05, 0.05], [0.1, 0.8, 0.1], [0.05, 0.05, 0.9]])\n# print(cross_entropy_loss(y, y_pred))  # Example output: 0.3251\n```\n\nThis script defines the `cross_entropy_loss` function, which calculates the unnormalised categorical cross-entropy loss for a batch of one-hot encoded targets and predicted probabilities. The function ensures numerical stability by adding a small epsilon value to the predicted probabilities before taking the logarithm. The result is rounded to four decimal places before being returned."}
{"task_id": 77, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef relu(Z: np.ndarray) -> np.ndarray:\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(0, Z)\n\ndef sigmoid(Z: np.ndarray) -> np.ndarray:\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\n\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2  # Number of layers in the network\n\n    # Implement [LINEAR -> RELU]*(L-1). Add \"cache\" to the \"caches\" list.\n    for l in range(1, L):\n        A_prev = A\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A_prev) + b\n        A = relu(Z)\n        cache = (A_prev, W, b, Z)\n        caches.append(cache)\n\n    # Implement LINEAR -> SIGMOID. Add \"cache\" to the \"caches\" list.\n    W = parameters[f'W{L}']\n    b = parameters[f'b{L}']\n    Z = np.dot(W, A) + b\n    AL = sigmoid(Z)\n    cache = (A, W, b, Z)\n    caches.append(cache)\n\n    # Round AL to 4 decimal places and convert to a regular Python list\n    AL_rounded = np.round(AL, 4).tolist()\n\n    return AL_rounded, caches\n```\n\nThis script defines the forward propagation for an L-layer neural network with ReLU activations for hidden layers and a sigmoid activation for the output layer. It also collects the necessary caches for a backward pass. The final output is rounded to four decimal places and converted to a regular Python list."}
{"task_id": 81, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    # Ensure A2 and Y have the same shape\n    assert A2.shape == Y.shape, \"A2 and Y must have the same shape\"\n    \n    # Number of samples\n    m = A2.shape[0]\n    \n    # Clip A2 to prevent log(0) issues\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    \n    # Compute the binary cross-entropy cost\n    cost = - (1 / m) * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    \n    # Return the cost rounded to 6 decimal places\n    return round(cost, 6)\n\n# Example usage:\n# A2 = np.array([0.9, 0.1, 0.8, 0.2])\n# Y = np.array([1, 0, 1, 0])\n# print(compute_cost(A2, Y))  # Output should be the cost rounded to 6 decimal places\n```\n\nThis script defines the `compute_cost` function which calculates the binary cross-entropy cost between the predicted probabilities `A2` and the ground-truth labels `Y`. The function includes clipping of `A2` to avoid logarithm of zero issues and returns the cost rounded to six decimal places."}
{"task_id": 82, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | \"np.ndarray\", epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)  # Ensure Q is a NumPy array for easier manipulation\n    n = len(Q)\n    greedy_index = np.argmax(Q)  # First occurrence in case of ties\n    base_prob = epsilon / n\n    probabilities = np.full(n, base_prob)\n    probabilities[greedy_index] = 1 - epsilon + base_prob\n    \n    # Ensure the sum of probabilities is 1 within the specified tolerance\n    probabilities = probabilities / np.sum(probabilities)\n    \n    # Round to 4 decimal places\n    probabilities = np.round(probabilities, 4)\n    \n    # Ensure the sum is exactly 1 after rounding\n    probabilities[-1] += 1 - np.sum(probabilities)\n    \n    return probabilities.tolist()\n\n# Example usage:\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1\nprint(epsilon_soft(Q, epsilon))  # Output: [0.925, 0.025, 0.025, 0.025]\n```\n\nThis script defines the `epsilon_soft` function, which calculates the \u03b5-soft probabilities for a given set of Q-values and an exploration parameter \u03b5. The function ensures that the probabilities are rounded to 4 decimal places and that their sum is exactly 1 within the specified numerical tolerance."}
{"task_id": 86, "completion_id": 0, "completion": "```\npython\nfrom collections import Counter\n\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    # Transpose the predictions to iterate over samples instead of trees\n    transposed_predictions = zip(*predictions)\n    \n    # List to store the final aggregated predictions\n    aggregated_votes = []\n    \n    # Iterate over each sample's predictions\n    for sample_votes in transposed_predictions:\n        # Count the votes for each class label\n        vote_counts = Counter(sample_votes)\n        \n        # Find the class label with the highest vote count\n        # In case of a tie, the smallest label is chosen due to the nature of Counter's most_common\n        most_common_votes = vote_counts.most_common()\n        \n        # Sort the most common votes by count descending and then by label ascending\n        most_common_votes.sort(key=lambda x: (-x[1], x[0]))\n        \n        # The first element in the sorted list is the label with the highest count (and smallest in case of tie)\n        aggregated_votes.append(most_common_votes[0][0])\n    \n    return aggregated_votes\n\n# Example usage:\n# predictions = [\n#     [0, 1, 1, 0],\n#     [1, 1, 0, 1],\n#     [0, 1, 1, 0]\n# ]\n# print(aggregate_random_forest_votes(predictions))  # Output: [0, 1, 1, 0]\n```\n\nThis script defines the `aggregate_random_forest_votes` function, which takes a 2D list of predictions from multiple decision trees and returns a list of aggregated predictions using majority voting. The function handles ties by selecting the smallest label, either numerically or lexicographically, as required."}
{"task_id": 88, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already\n    if isinstance(z, (int, float)):\n        z = np.array([z])\n    else:\n        z = np.array(z)\n    \n    # Compute the softplus using np.logaddexp for numerical stability\n    result = np.logaddexp(0.0, z)\n    \n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n    \n    # If the input was a scalar, return a single float, otherwise return a list\n    if result.size == 1:\n        return float(result)\n    else:\n        return result.tolist()\n\n# Example usage\nif __name__ == \"__main__\":\n    z = np.array([-1000, 0, 3])\n    print(softplus(z))  # Output: [0.0, 0.6931, 3.0486]\n```"}
{"task_id": 90, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Check if policy has ev_estimates and if it's not empty\n    if not hasattr(policy, 'ev_estimates') or not isinstance(policy.ev_estimates, dict) or not policy.ev_estimates:\n        return np.nan\n    \n    # Extract true expected values and policy estimates\n    true_evs = bandit.arm_evs\n    estimates = policy.ev_estimates\n    \n    # Ensure the estimates are sorted by arm index\n    sorted_estimates = [estimates[i] for i in sorted(estimates.keys())]\n    \n    # Calculate squared errors\n    squared_errors = [(true - est) ** 2 for true, est in zip(true_evs, sorted_estimates)]\n    \n    # Compute mean-squared error\n    mse_value = np.mean(squared_errors)\n    \n    # Return the rounded result\n    return round(mse_value, 4)\n\n# Example usage\nbandit = {\"arm_evs\": [0.5, 0.2, 0.9]}\npolicy = {\"ev_estimates\": {0: 0.4, 1: 0.25, 2: 0.8}}\nprint(mse(bandit, policy))  # Output: 0.0075\n```"}
{"task_id": 96, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # Step 1: Build the vocabulary with <UNK>\n    vocabulary = set()\n    ngram_counts = defaultdict(Counter)\n    \n    for sentence in corpus:\n        words = sentence.split()\n        vocabulary.update(words)\n        # Add N-grams and their contexts\n        for n in range(1, N + 1):\n            for i in range(len(words) - n + 1):\n                context = tuple(words[i:i+n-1]) if n > 1 else ()\n                word = words[i+n-1]\n                ngram_counts[context][word] += 1\n    \n    vocabulary.add(\"<UNK>\")\n    V = len(vocabulary)\n    \n    # Step 2: Prepare the target sequence\n    target_words = sequence.split()\n    if len(target_words) < N:\n        return 0.0\n    \n    log_prob = 0.0\n    \n    # Step 3: Calculate the log-probability of the target sequence\n    for n in range(1, N + 1):\n        for i in range(len(target_words) - n + 1):\n            context = tuple(target_words[i:i+n-1]) if n > 1 else ()\n            word = target_words[i+n-1]\n            \n            # Replace unseen words with <UNK>\n            if word not in vocabulary:\n                word = \"<UNK>\"\n            \n            count_context = sum(ngram_counts[context].values())\n            count_ngram = ngram_counts[context][word]\n            \n            # Additive smoothing\n            prob = (count_ngram + K) / (count_context + K * V)\n            \n            # Accumulate the log-probability\n            log_prob += math.log(prob)\n    \n    return round(log_prob, 4)\n```\n\nThis script defines the `additive_ngram_log_prob` function, which computes the additive-smoothed log-probability of a given sentence based on a training corpus and an N-gram model. The function handles unseen words by mapping them to the `<UNK>` token and applies Laplace smoothing to estimate probabilities. The result is returned as the natural logarithm of the sentence probability, rounded to four decimal places."}
{"task_id": 108, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    N, M = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    \n    def compute_loss(X, W, H, alpha):\n        reconstruction_error = np.linalg.norm(X - np.dot(W, H), ord='fro')**2\n        regularization_error = alpha * (np.linalg.norm(W, ord='fro')**2 + np.linalg.norm(H, ord='fro')**2)\n        return reconstruction_error + regularization_error\n    \n    for iteration in range(max_iter):\n        # Fix H, solve for W\n        for i in range(N):\n            W[i, :] = np.linalg.solve(np.dot(H, H.T) + alpha * np.eye(K), np.dot(H, X[i, :]))\n        \n        # Fix W, solve for H\n        for j in range(M):\n            H[:, j] = np.linalg.solve(np.dot(W.T, W) + alpha * np.eye(K), np.dot(W.T, X[:, j]))\n        \n        # Compute the loss\n        current_loss = compute_loss(X, W, H, alpha)\n        \n        # Check for convergence\n        if current_loss < tol:\n            break\n    \n    X_hat = np.dot(W, H)\n    return X_hat.round(4).tolist()\n```\n\nThis script defines the `als_factorization` function, which performs regularized Alternating Least Squares (ALS) matrix factorization. The function initializes the factor matrices `W` and `H` with a fixed random seed, iteratively updates them by solving regularized least-squares problems, and checks for convergence based on the specified tolerance or maximum number of iterations. The reconstructed matrix `X_hat` is returned as a Python list of lists, rounded to four decimal places."}
{"task_id": 109, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n\n    # Step 1: Choose the initial centroids using K-Means++\n    def kmeans_plus_plus(X, K):\n        centroids = [X[np.random.choice(X.shape[0])]]\n        for _ in range(1, K):\n            distances = np.min([np.linalg.norm(X - c, axis=1) for c in centroids], axis=0)\n            probabilities = distances / distances.sum()\n            next_centroid = X[np.random.choice(X.shape[0], p=probabilities)]\n            centroids.append(next_centroid)\n        return np.array(centroids)\n\n    centroids = kmeans_plus_plus(X, K)\n\n    # Step 2: Perform Lloyd's iterations\n    for _ in range(max_iter):\n        # Assign step: assign each sample to the nearest centroid\n        distances = np.array([np.linalg.norm(X - c, axis=1) for c in centroids])\n        labels = np.argmin(distances, axis=0)\n\n        # Update step: update centroids as the mean of assigned samples\n        new_centroids = np.array([X[labels == k].mean(axis=0) if (labels == k).any() else centroids[k] for k in range(K)])\n\n        # Check for convergence\n        if np.all(centroids == new_centroids):\n            break\n\n        centroids = new_centroids\n\n    # Step 3: Return the centroids rounded and sorted\n    rounded_centroids = np.round(centroids, 4).tolist()\n    sorted_centroids = sorted(rounded_centroids, key=lambda c: (c[0], c[1:]))\n\n    return sorted_centroids\n\n# Example usage:\n# X = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# K = 3\n# random_state = 42\n# print(kmeans(X, K, random_state=random_state))\n```\n\nThis script implements the K-Means clustering algorithm with K-Means++ initialization. It includes setting random seeds for reproducibility, choosing initial centroids using the K-Means++ method, performing Lloyd's iterations, and returning the final centroids rounded and sorted as specified."}
{"task_id": 111, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"\n    Encodes every character of the input string using a provided vocabulary.\n    The encoded list must have a fixed length `time_steps`. If the input is shorter\n    than `time_steps` append the padding token `0` on the right; if it is longer,\n    truncate the sequence. Any character that does not exist in the vocabulary\n    is also encoded as the padding token `0`.\n    \"\"\"\n    encoded = []\n    for char in text[:time_steps]:\n        encoded.append(vocabulary.get(char, 0))\n    # Pad with zeros if the text is shorter than time_steps\n    encoded += [0] * (time_steps - len(encoded))\n    return encoded\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"\n    Converts a list/array of integer ids back to text using an inverse vocabulary.\n    Padding tokens (0) must be ignored during decoding.\n    \"\"\"\n    return ''.join(inverse_vocab.get(idx, '') for idx in indices if idx != 0)\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"\n    Encodes the raw text with `string_to_int`, calls `model.predict` on the encoded batch (batch size 1),\n    applies `argmax` over the last axis to obtain one predicted id per time step, and finally\n    decodes the ids with `int_to_string`.\n    \"\"\"\n    # Encode the input text\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    # Convert to a numpy array and reshape for the model\n    encoded_text = np.array(encoded_text).reshape(1, TIME_STEPS)\n    # Predict using the model\n    predictions = model.predict(encoded_text)\n    # Get the argmax of the predictions to get the predicted ids\n    predicted_ids = np.argmax(predictions, axis=-1)[0]\n    # Decode the predicted ids to a string\n    decoded_string = int_to_string(predicted_ids, inv_output_vocabulary)\n    return decoded_string\n```\n\nThis script provides the required functions to encode a string into a fixed-length list of integers, decode a list of integers back into a string, and run a model prediction using these functions. The `run_example` function ties everything together, assuming `model` has a `predict` method that returns a numpy array of predictions."}
{"task_id": 113, "completion_id": 0, "completion": "```\npython\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n\n    predictions = []\n    for example in examples:\n        # Call the run_example function to get the output as a list of characters\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        # Concatenate the list of characters into a single string\n        predicted_string = ''.join(output_chars)\n        # Print the input and output\n        print(f\"input:  {example}\")\n        print(f\"output: {predicted_string}\")\n        # Collect the predicted string in the list\n        predictions.append(predicted_string)\n\n    return predictions\n\n# Assume run_example is defined elsewhere in the environment\n# def run_example(model, input_vocabulary, inv_output_vocabulary, example):\n#     # This function is expected to return a list of characters\n#     pass\n\n# Example usage:\n# Assuming EXAMPLES is defined in the environment\n# EXAMPLES = [\"example1\", \"example2\", \"example3\"]\n# predictions = run_examples(some_model, some_input_vocab, some_inv_output_vocab)\n```"}
{"task_id": 115, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    # Ensure y is a column vector\n    y = y.reshape(-1, 1)\n    \n    # Compute the linear combination z = X \u00b7 w\n    z = X @ w\n    \n    # Compute the sigmoid function p = \u03c3(z)\n    p = 1 / (1 + np.exp(-z))\n    \n    # Avoid numerical issues by clipping p in the range (\u03b5, 1-\u03b5)\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    \n    # Compute the average binary cross-entropy loss\n    m = X.shape[0]\n    loss = - (1 / m) * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    loss = round(float(loss), 4)\n    \n    # Compute the gradient of the loss with respect to the weights\n    gradient = (1 / m) * (X.T @ (p - y))\n    gradient = np.round(gradient, 4).tolist()\n    \n    return loss, gradient\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([0, 1, 0])\n# w = np.array([0.1, -0.1])\n# loss, gradient = logistic_loss_and_gradient(X, y, w)\n# print(\"Loss:\", loss)\n# print(\"Gradient:\", gradient)\n```\n\nThis script defines the `logistic_loss_and_gradient` function that computes the binary cross-entropy loss and its gradient for logistic regression, handling numerical stability by clipping the predicted probabilities. The function returns the loss as a float rounded to four decimal places and the gradient as a nested Python list, also rounded to four decimal places."}
{"task_id": 118, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    \n    m, n = X_train.shape\n    weights = np.ones(m) / m\n    stumps = []\n    stump_weights = []\n\n    def weighted_error(y_true, y_pred, weights):\n        return np.sum(weights * (y_true != y_pred)) / np.sum(weights)\n\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = None\n        best_threshold = None\n        best_polarity = None\n\n        for feature_i in range(n):\n            thresholds = np.unique(X_train[:, feature_i])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(m)\n                    predictions[X_train[:, feature_i] * polarity < threshold * polarity] = -1\n                    error = weighted_error(y_train, predictions, weights)\n                    if error < min_error:\n                        min_error = error\n                        best_stump = feature_i\n                        best_threshold = threshold\n                        best_polarity = polarity\n\n        epsilon = min_error\n        alpha = 0.5 * np.log((1 - epsilon) / (epsilon + 1e-10))\n        stump_weights.append(alpha)\n\n        predictions = np.ones(m)\n        predictions[X_train[:, best_stump] * best_polarity < best_threshold * best_polarity] = -1\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n\n        stumps.append((best_stump, best_threshold, best_polarity))\n\n    def predict_sample(sample, stumps, stump_weights):\n        stump_sum = 0\n        for (feature_i, threshold, polarity), alpha in zip(stumps, stump_weights):\n            stump_sum += alpha * ((-1) if sample[feature_i] * polarity < threshold * polarity else 1)\n        return np.sign(stump_sum)\n\n    return [predict_sample(x, stumps, stump_weights) for x in X_test]\n```\n\nThis script implements the AdaBoost algorithm using decision stumps as weak learners. It iteratively trains stumps on the training data, re-weighting the training samples based on the errors of the previous stumps. The final prediction for each test sample is determined by the weighted sum of the stump predictions."}
{"task_id": 128, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    # Step 1: Compute the within-class scatter matrix S_W\n    unique_classes = np.unique(y)\n    d = X.shape[1]\n    S_W = np.zeros((d, d))\n    for c in unique_classes:\n        X_c = X[y == c]\n        mu_c = np.mean(X_c, axis=0)\n        S_W += np.sum((X_c - mu_c).T.dot(X_c - mu_c), axis=1)\n\n    # Step 2: Compute the between-class scatter matrix S_B\n    mu = np.mean(X, axis=0)\n    S_B = np.zeros((d, d))\n    for c in unique_classes:\n        X_c = X[y == c]\n        mu_c = np.mean(X_c, axis=0)\n        N_c = X_c.shape[0]\n        S_B += N_c * (mu_c - mu).reshape(d, 1).dot((mu_c - mu).reshape(1, d))\n\n    # Step 3: Compute the matrix A = S_W^{-1}S_B\n    A = np.linalg.pinv(S_W).dot(S_B)\n\n    # Step 4: Eigen-decomposition of A\n    eigenvalues, eigenvectors = np.linalg.eigh(A)\n\n    # Sort eigenvalues and eigenvectors in descending order\n    idx = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n\n    # Step 5: Deterministic sign for eigenvectors\n    for i in range(len(eigenvectors)):\n        first_non_zero_idx = np.where(eigenvectors[:, i] != 0)[0][0]\n        if eigenvectors[first_non_zero_idx, i] < 0:\n            eigenvectors[:, i] *= -1\n\n    # Step 6: Project X on the first `n_components` eigenvectors\n    if n_components == 0:\n        return []\n    W = eigenvectors[:, :n_components]\n    X_projected = X.dot(W)\n\n    # Step 7: Round every element to four decimal places and convert to list of lists\n    X_projected_rounded = np.round(X_projected, 4).tolist()\n\n    return X_projected_rounded\n\n# Example usage\nX = np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]])\ny = np.array([0,0,0,0,1,1,1,1])\nn_components = 1\nprint(multi_class_lda(X, y, n_components))\n```\n\nThis script implements the multi-class Linear Discriminant Analysis (LDA) as described. It computes the within-class and between-class scatter matrices, forms the matrix `A`, performs eigen-decomposition, applies deterministic sign fixing, and projects the data onto the first `n_components` eigenvectors. The result is rounded to four decimal places and returned as a list of lists."}
{"task_id": 140, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that solves the given task using breadth-first search (BFS) to simulate the spread of fire and the agent's movement through the maze.\n\n```python\nfrom collections import deque\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if n == 1 and grid[0] == '.':\n        return 0\n    if grid[0][0] == 'F' or grid[n-1][n-1] == 'F':\n        return -1\n\n    # Directions for moving up, down, left, right\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    # Initialize fire queue and visited set\n    fire_queue = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j, 0))  # (row, col, time)\n\n    # Initialize agent queue and visited set\n    agent_queue = deque([(0, 0, 0)])  # (row, col, time)\n    agent_visited = {(0, 0, 0)}\n\n    # BFS for fire spread and agent movement\n    while fire_queue and agent_queue:\n        # Spread fire\n        while fire_queue and fire_queue[0][2] == fire_queue[-1][2]:\n            fx, fy, ft = fire_queue.popleft()\n            for dx, dy in directions:\n                nx, ny = fx + dx, fy + dy\n                if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == '.':\n                    grid[nx] = grid[nx][:ny] + 'F' + grid[nx][ny+1:]\n\n        # Move agent\n        ax, ay, at = agent_queue.popleft()\n        if ax == n-1 and ay == n-1:\n            return at\n\n        for dx, dy in directions:\n            nx, ny = ax + dx, ay + dy\n            nt = at + 1\n            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == '.' and (nx, ny, nt) not in agent_visited:\n                agent_visited.add((nx, ny, nt))\n                agent_queue.append((nx, ny, nt))\n\n    return -1\n\n# Example usage:\nmaze = [\n    \"F.#\",\n    \".#.\",\n    \"#..\"\n]\nprint(escape_fire_maze(maze))  # Output: -1\n```\n\n### Explanation:\n1. **Initialization**:\n   - We first check if the maze is of size 1x1 and the single cell is free. If so, the agent is already at the goal, and we return 0.\n   - We check if the start or goal cell is on fire. If either is, we return -1 immediately.\n   - We initialize a queue for the fire to spread and a queue for the agent to move.\n\n2. **Fire Spread Simulation**:\n   - We use a BFS approach to spread the fire. For each cell on fire at the current time step, we check its neighboring cells and set them on fire if they are free.\n\n3. **Agent Movement Simulation**:\n   - We use a BFS approach to simulate the agent's movement. For each cell the agent can move to, we check if the cell is free and not on fire at the next time step.\n\n4. **Termination**:\n   - If the agent reaches the goal, we return the number of minutes taken.\n   - If the agent cannot reach the goal, we return -1.\n\nThis solution ensures that the fire spreads before the agent moves, as required by the problem statement."}
{"task_id": 141, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\nfrom scipy.spatial.distance import euclidean, cityblock, cosine\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n    \n    def compute_distance(x1, x2, metric):\n        if metric == 'euclidean':\n            return euclidean(x1, x2)\n        elif metric == 'manhattan':\n            return cityblock(x1, x2)\n        elif metric == 'cosine':\n            return cosine(x1, x2)\n        else:\n            return euclidean(x1, x2)  # Fallback to Euclidean if unknown metric\n    \n    predictions = []\n    \n    for test_sample in X_test:\n        distances = []\n        \n        for train_sample, label in zip(X_train, y_train):\n            distance = compute_distance(test_sample, train_sample, metric)\n            distances.append((distance, label))\n        \n        # Sort distances and get the k nearest neighbors\n        neighbors = sorted(distances, key=lambda x: x[0])[:k]\n        \n        # Extract labels of the k nearest neighbors\n        k_nearest_labels = [label for _, label in neighbors]\n        \n        # Find the most common label (majority vote)\n        most_common = Counter(k_nearest_labels).most_common()\n        \n        # In case of a tie, select the smallest label\n        common_labels = [label for label, count in most_common if count == most_common[0][1]]\n        predicted_label = min(common_labels)\n        \n        predictions.append(predicted_label)\n    \n    return np.array(predictions)\n```\n\nThis script defines the `knn_predict` function which implements the k-Nearest Neighbors algorithm using the specified distance metric. It handles ties by selecting the smallest label value. If an unknown metric is provided, it defaults to the Euclidean metric."}
{"task_id": 146, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    \n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n    \n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b))\n    \n    def cosine_distance(a, b, eps=1e-12):\n        dot_product = np.dot(a, b)\n        norm_a = np.linalg.norm(a)\n        norm_b = np.linalg.norm(b)\n        return 1 - (dot_product / ((norm_a * norm_b) + eps))\n    \n    distance_functions = {\n        'euclidean': euclidean_distance,\n        'manhattan': manhattan_distance,\n        'cosine': cosine_distance\n    }\n    \n    if metric not in distance_functions:\n        raise ValueError(\"Invalid metric. Supported metrics are 'euclidean', 'manhattan', and 'cosine'.\")\n    \n    distance_fn = distance_functions[metric]\n    \n    predictions = []\n    \n    for test_sample in X_test:\n        distances = []\n        for i, train_sample in enumerate(X):\n            distance = distance_fn(test_sample, train_sample)\n            distances.append((distance, y[i]))\n        \n        distances.sort(key=lambda x: x[0])\n        \n        k = min(k, len(distances))\n        k_nearest_labels = [label for _, label in distances[:k]]\n        \n        label_counts = np.bincount(k_nearest_labels)\n        most_common_label = np.argmin(label_counts[label_counts == np.max(label_counts)])\n        \n        predictions.append(most_common_label)\n    \n    return predictions\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [5, 6]])\n# y_train = np.array([0, 0, 1, 1])\n# X_test = np.array([[1, 1], [4, 5]])\n# predictions = knn_predict(X_train, y_train, X_test, k=3, metric='euclidean')\n# print(predictions)  # Output should be [0, 1]\n```"}
{"task_id": 155, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a numpy array if it's not already\n    state = np.array(state)\n    \n    # Perform the first affine transformation and ReLU\n    hidden1 = np.maximum(0, np.dot(state, weights['W1']) + weights['b1'])\n    \n    # Perform the second affine transformation and ReLU\n    hidden2 = np.maximum(0, np.dot(hidden1, weights['W2']) + weights['b2'])\n    \n    # Perform the third affine transformation and tanh\n    action = np.tanh(np.dot(hidden2, weights['W3']) + weights['b3'])\n    \n    # Round the action vector to 4 decimal places and return as a list\n    return np.round(action, 4).tolist()\n\n# Example usage:\n# state = [0.1, -0.2, 0.3]\n# weights = {\n#     'W1': np.array([[0.5, -0.5], [0.2, 0.3], [-0.1, 0.1]]),\n#     'b1': np.array([-0.1, 0.2]),\n#     'W2': np.array([[0.4, -0.4], [0.6, 0.7]]),\n#     'b2': np.array([0.3, -0.3]),\n#     'W3': np.array([[0.8, -0.8]]),\n#     'b3': np.array([-0.2])\n# }\n# action = actor_forward(state, weights)\n# print(action)  # Example output: [0.0001]\n```\n\nThis script defines the `actor_forward` function, which performs the forward pass of a two-hidden-layer actor network using NumPy. The function takes a state vector and a dictionary of weights and biases, performs the necessary transformations and activations, and returns the action vector rounded to four decimal places."}
{"task_id": 160, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    m, n = X.shape\n    \n    # If fit_intercept is True, add a column of ones to X\n    if fit_intercept:\n        X = np.hstack([np.ones((m, 1)), X])\n    else:\n        X = np.hstack([np.zeros((m, 1)), X])\n    \n    # Initialize weights to zero\n    w = np.zeros(n + 1)\n    \n    for _ in range(max_iters):\n        for j in range(n + 1):\n            # Exclude the intercept from L1 penalty\n            if j == 0:\n                continue\n            \n            # Temporarily set the current weight to 0\n            w_j_prev = w[j]\n            w[j] = 0\n            \n            # Compute the partial residual r_j = y - Xw_{-j}\n            r_j = y - X @ w\n            \n            # Update weight w_j with the soft-thresholding operator\n            a = X[:, j].T @ r_j\n            tau = lambda_param * m\n            w[j] = np.sign(a) * max(abs(a) - tau, 0) / (X[:, j] ** 2).sum()\n        \n        # Recompute the intercept if fit_intercept is True\n        if fit_intercept:\n            w[0] = (y - X[:, 1:] @ w[1:]).mean()\n    \n    # Return the final intercept and weight vector, rounded to 4 decimals\n    if fit_intercept:\n        bias = round(w[0], 4)\n        weights = [round(w_j, 4) for w_j in w[1:]]\n    else:\n        bias = 0.0\n        weights = [round(w_j, 4) for w_j in w]\n    \n    return weights, bias\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [4, 5]])\n# y = np.array([1, 2, 3])\n# weights, bias = fit_lasso(X, y, lambda_param=0.1, max_iters=100, fit_intercept=True)\n# print(\"Weights:\", weights)\n# print(\"Bias:\", bias)\n```\n\nThis script implements the Lasso regression using coordinate descent as described in the task. It handles the optional intercept term, initializes weights to zero, and iteratively updates each weight using the soft-thresholding operator. The final weights and intercept are returned, rounded to four decimal places."}
{"task_id": 165, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are not already\n    x = np.array(x) if not isinstance(x, np.ndarray) else x\n    y = np.array(y) if not isinstance(y, np.ndarray) else y\n    \n    # Check if the lengths of the vectors are the same\n    if len(x) != len(y):\n        return -1\n    \n    # Calculate the Hamming distance\n    distance = np.mean(x != y)\n    \n    # Return the distance rounded to 4 decimal places\n    return round(float(distance), 4)\n\n# Example usage:\n# x = [1, 0, 1, 1]\n# y = [1, 1, 0, 0]\n# print(hamming_distance(x, y))  # Output: 0.5000\n```\n\nThis script defines the `hamming_distance` function, which calculates the normalized Hamming distance between two vectors. It handles both Python lists and NumPy arrays, checks for equal lengths, and returns the distance rounded to four decimal places. If the vectors have different lengths, it returns -1."}
{"task_id": 169, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError(\"N must be a positive integer.\")\n    \n    if N == 1:\n        return [1.0]\n    \n    n = np.arange(N)\n    \n    if window == \"hamming\":\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == \"hann\":\n        w = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == \"blackman_harris\":\n        a0 = 0.35875\n        a1 = 0.48829\n        a2 = 0.14128\n        a3 = 0.01168\n        w = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n    elif window == \"generalized_cosine\":\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be provided for generalized_cosine window.\")\n        w = np.zeros(N)\n        for k, a_k in enumerate(coefficients):\n            w += a_k * np.cos(2 * np.pi * k * n / (N - 1))\n    else:\n        raise ValueError(f\"Unknown window type: {window}\")\n    \n    return [round(coef, 4) for coef in w]\n\n# Example usage:\n# print(generate_window(\"hamming\", 10))\n# print(generate_window(\"hann\", 10))\n# print(generate_window(\"blackman_harris\", 10))\n# print(generate_window(\"generalized_cosine\", 10, [0.5, 0.25, 0.125]))\n```"}
{"task_id": 171, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Check if all labels are identical\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) == 1:\n        return [unique_labels[0]] * len(X_test)\n    \n    # Map the labels to {0, 1}\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train_mapped = np.array([label_map[label] for label in y_train])\n    \n    # Add intercept term (bias) to the data\n    X_train = np.hstack([np.ones((X_train.shape[0], 1)), X_train])\n    X_test = np.hstack([np.ones((X_test.shape[0], 1)), X_test])\n    \n    # Initialize weights\n    weights = np.zeros(X_train.shape[1])\n    \n    # Mini-batch Gradient Descent\n    for _ in range(epochs):\n        # Shuffle the training data\n        indices = np.arange(X_train.shape[0])\n        np.random.shuffle(indices)\n        X_train_shuffled = X_train[indices]\n        y_train_shuffled = y_train_mapped[indices]\n        \n        # Mini-batches\n        for start in range(0, X_train.shape[0], batch_size):\n            end = start + batch_size\n            X_batch = X_train_shuffled[start:end]\n            y_batch = y_train_shuffled[start:end]\n            \n            # Compute predictions and gradients\n            predictions = 1 / (1 + np.exp(-np.dot(X_batch, weights)))\n            errors = predictions - y_batch\n            gradient = np.dot(X_batch.T, errors) / len(X_batch)\n            \n            # Update weights\n            weights -= learning_rate * gradient\n    \n    # Predict probabilities for the test set\n    test_probs = 1 / (1 + np.exp(-np.dot(X_test, weights)))\n    \n    # Map predictions back to the original labels\n    predictions_test = (test_probs >= 0.5).astype(int)\n    predictions_test_original_labels = [unique_labels[pred] for pred in predictions_test]\n    \n    return predictions_test_original_labels\n```\n\nThis script implements a binary logistic regression classifier using mini-batch gradient descent. It handles the special case where all training labels are identical by making a constant prediction. The function maps the input labels to {0, 1} for training and then maps the predictions back to the original labels before returning them."}
{"task_id": 176, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble using decision stumps and predict the class labels for X_test.\"\"\"\n    \n    # Convert inputs to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    n_samples, n_features = X_train.shape\n    \n    # Initialize sample weights\n    w = np.ones(n_samples) / n_samples\n    \n    # List to store the weak learners (stumps)\n    stumps = []\n    \n    # Train n_estimators decision stumps\n    for _ in range(n_estimators):\n        min_error = float('inf')\n        best_feature_index = None\n        best_threshold = None\n        best_polarity = None\n        \n        for feature_index in range(n_features):\n            # Get unique values in the feature column for potential thresholds\n            thresholds = np.unique(X_train[:, feature_index])\n            \n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    # Predictions with the current stump\n                    predictions = np.ones(n_samples)\n                    if polarity == 1:\n                        predictions[X_train[:, feature_index] >= threshold] = -1\n                    else:\n                        predictions[X_train[:, feature_index] < threshold] = -1\n                    \n                    # Compute weighted error\n                    weighted_error = np.sum(w[y_train != predictions])\n                    \n                    # Check if this stump is the best so far\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_feature_index = feature_index\n                        best_threshold = threshold\n                        best_polarity = polarity\n        \n        # Compute alpha (importance) of the stump\n        alpha = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n        \n        # Update sample weights\n        w *= np.exp(-alpha * y_train * predictions)\n        w /= np.sum(w)  # Normalize to sum to 1\n        \n        # Save the stump\n        stumps.append((best_feature_index, best_threshold, best_polarity, alpha))\n        \n        # Early stopping if a perfect stump is found\n        if min_error == 0:\n            break\n    \n    # Make predictions on the test set\n    n_test_samples = X_test.shape[0]\n    y_pred = np.zeros(n_test_samples)\n    \n    for feature_index, threshold, polarity, alpha in stumps:\n        predictions = np.ones(n_test_samples)\n        if polarity == 1:\n            predictions[X_test[:, feature_index] >= threshold] = -1\n        else:\n            predictions[X_test[:, feature_index] < threshold] = -1\n        \n        y_pred += alpha * predictions\n    \n    # Convert aggregated predictions to class labels {0, 1}\n    y_pred = np.where(y_pred > 0, 1, 0)\n    \n    return y_pred.tolist()\n```\n\nThis script implements the AdaBoost algorithm using decision stumps as weak learners. It trains the model on the provided training data and predicts the class labels for the test data. The implementation follows the AdaBoost update rules for weights and predictions, ensuring deterministic behavior by breaking ties consistently."}
{"task_id": 178, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    # Check for invalid input\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n\n    # Initialize random number generator\n    rng = np.random.default_rng(seed)\n\n    # Initialize particles' positions and velocities\n    positions = rng.uniform(low=-1, high=1, size=(num_particles, n_dims))\n    velocities = rng.uniform(low=-0.1, high=0.1, size=(num_particles, n_dims))\n\n    # Initialize personal best positions and their corresponding values\n    pbest_positions = positions.copy()\n    pbest_values = np.sum(positions ** 2, axis=1)\n\n    # Initialize global best position and value\n    gbest_index = np.argmin(pbest_values)\n    gbest_position = pbest_positions[gbest_index]\n    gbest_value = pbest_values[gbest_index]\n\n    # PSO parameters\n    w = 0.5  # inertia weight\n    c1 = 1.5  # cognitive weight\n    c2 = 1.5  # social weight\n\n    # PSO main loop\n    for _ in range(num_iterations):\n        # Update velocities\n        r1 = rng.uniform(size=(num_particles, n_dims))\n        r2 = rng.uniform(size=(num_particles, n_dims))\n        velocities = (w * velocities +\n                      c1 * r1 * (pbest_positions - positions) +\n                      c2 * r2 * (gbest_position - positions))\n\n        # Update positions\n        positions = np.clip(positions + velocities, -1, 1)\n\n        # Update personal bests\n        current_values = np.sum(positions ** 2, axis=1)\n        improved = current_values < pbest_values\n        pbest_positions[improved] = positions[improved]\n        pbest_values[improved] = current_values[improved]\n\n        # Update global best\n        gbest_index = np.argmin(pbest_values)\n        gbest_position = pbest_positions[gbest_index]\n        gbest_value = pbest_values[gbest_index]\n\n    return round(gbest_value, 4)\n```"}
{"task_id": 180, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((np.array(point1) - np.array(point2)) ** 2))\n\n    n_train = len(X_train)\n    if k == 0 or k > n_train:\n        k = n_train\n\n    predictions = []\n\n    for test_point in X_test:\n        # Calculate distances from the test point to all training points\n        distances = [(euclidean_distance(test_point, X_train[i]), y_train[i]) for i in range(n_train)]\n        \n        # Sort distances and take the k nearest\n        distances.sort(key=lambda x: x[0])\n        k_nearest = distances[:k]\n        \n        if task == \"classification\":\n            # Majority vote\n            labels = [label for _, label in k_nearest]\n            label_counts = Counter(labels)\n            most_common = label_counts.most_common()\n            max_count = max(most_common, key=lambda x: x[1])[1]\n            # In case of ties, select the smallest label\n            prediction = min(label for label, count in most_common if count == max_count)\n        elif task == \"regression\":\n            # Average the target values\n            values = [value for _, value in k_nearest]\n            prediction = round(np.mean(values), 4)\n        else:\n            raise ValueError(\"Task must be either 'classification' or 'regression'\")\n        \n        predictions.append(prediction)\n    \n    return predictions\n\n# Example usage:\n# X_train = [[1.0, 2.0], [2.0, 3.0], [3.0, 4.0], [5.0, 6.0]]\n# y_train = [0, 0, 1, 1]\n# X_test = [[1.5, 2.5], [4.5, 5.5]]\n# print(knn_predict(X_train, y_train, X_test, k=3, task=\"classification\"))\n# print(knn_predict(X_train, y_train, X_test, k=3, task=\"regression\"))\n```\n\nThis script defines a `knn_predict` function that implements the k-Nearest Neighbours algorithm for both classification and regression tasks. It uses Euclidean distance to find the nearest neighbors and performs majority voting for classification and averaging for regression, rounding the result to four decimal places for regression tasks."}
{"task_id": 184, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef decision_tree_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    max_depth: int | None = None,\n) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n    \n    def gini_impurity(y):\n        \"\"\"Calculate the Gini impurity of a list of class labels.\"\"\"\n        m = len(y)\n        if m == 0:\n            return 0\n        counts = np.bincount(y)\n        probabilities = counts / m\n        return 1 - np.sum(probabilities ** 2)\n    \n    def best_split(X, y):\n        \"\"\"Find the best feature and threshold to split the data on.\"\"\"\n        best_gini = np.inf\n        best_feature = None\n        best_threshold = None\n        n_features = X.shape[1]\n        \n        for feature in range(n_features):\n            unique_values = np.unique(X[:, feature])\n            thresholds = (unique_values[:-1] + unique_values[1:]) / 2.0\n            \n            for threshold in thresholds:\n                left_indices = X[:, feature] < threshold\n                right_indices = X[:, feature] >= threshold\n                \n                y_left = y[left_indices]\n                y_right = y[right_indices]\n                \n                if len(y_left) == 0 or len(y_right) == 0:\n                    continue\n                \n                gini_left = gini_impurity(y_left)\n                gini_right = gini_impurity(y_right)\n                gini = (len(y_left) / len(y)) * gini_left + (len(y_right) / len(y)) * gini_right\n                \n                if gini < best_gini:\n                    best_gini = gini\n                    best_feature = feature\n                    best_threshold = threshold\n        \n        return best_gini, best_feature, best_threshold\n    \n    def majority_class(y):\n        \"\"\"Return the majority class label.\"\"\"\n        return np.bincount(y).argmax()\n    \n    def build_tree(X, y, depth=0):\n        \"\"\"Recursively build the tree.\"\"\"\n        if len(np.unique(y)) == 1 or (max_depth is not None and depth >= max_depth):\n            return majority_class(y)\n        \n        best_gini, best_feature, best_threshold = best_split(X, y)\n        \n        if best_gini == np.inf:\n            return majority_class(y)\n        \n        left_indices = X[:, best_feature] < best_threshold\n        right_indices = X[:, best_feature] >= best_threshold\n        \n        left_tree = build_tree(X[left_indices], y[left_indices], depth + 1)\n        right_tree = build_tree(X[right_indices], y[right_indices], depth + 1)\n        \n        return (best_feature, best_threshold, left_tree, right_tree)\n    \n    def predict_tree(node, x):\n        \"\"\"Predict the class label for a single sample using the tree.\"\"\"\n        if isinstance(node, int):\n            return node\n        else:\n            feature, threshold, left_tree, right_tree = node\n            if x[feature] < threshold:\n                return predict_tree(left_tree, x)\n            else:\n                return predict_tree(right_tree, x)\n    \n    tree = build_tree(X_train, y_train)\n    return [predict_tree(tree, x) for x in X_test]\n\n# Example usage:\n# X_train = np.array([[0, 0], [1, 1], [1, 0], [0, 1]])\n# y_train = np.array([0, 1, 1, 0])\n# X_test = np.array([[1, 1], [0, 0]])\n# print(decision_tree_predict(X_train, y_train, X_test))\n```\n\nThis script implements a CART decision tree classifier from scratch, using Gini impurity and recursive binary splitting. It includes functions to calculate Gini impurity, find the best split, determine the majority class, build the tree, and make predictions. The `decision_tree_predict` function constructs the tree on the training data and returns predictions for the test data."}
{"task_id": 190, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    \n    n_samples, n_features = X.shape\n    \n    def gini(labels):\n        counts = np.bincount(labels)\n        probabilities = counts / len(labels)\n        return 1 - np.sum(probabilities ** 2)\n    \n    G_whole_dataset = gini(y)\n    \n    best_gini = np.inf\n    best_feature_index = -1\n    best_threshold_value = None\n    \n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        \n        for threshold in unique_values:\n            left_mask = X[:, feature_index] <= threshold\n            right_mask = X[:, feature_index] > threshold\n            \n            if not np.any(left_mask) or not np.any(right_mask):\n                continue\n            \n            left_labels = y[left_mask]\n            right_labels = y[right_mask]\n            \n            G_left = gini(left_labels)\n            G_right = gini(right_labels)\n            \n            n_left = len(left_labels)\n            n_right = len(right_labels)\n            n_total = n_left + n_right\n            \n            G_split = (n_left / n_total) * G_left + (n_right / n_total) * G_right\n            \n            if G_split < best_gini:\n                best_gini = G_split\n                best_feature_index = feature_index\n                best_threshold_value = threshold\n            elif abs(G_split - best_gini) < 1e-12:\n                if feature_index < best_feature_index:\n                    best_gini = G_split\n                    best_feature_index = feature_index\n                    best_threshold_value = threshold\n                elif feature_index == best_feature_index and threshold < best_threshold_value:\n                    best_gini = G_split\n                    best_threshold_value = threshold\n    \n    if best_feature_index == -1:\n        return (-1, None, round(G_whole_dataset, 4))\n    \n    return (best_feature_index, best_threshold_value, round(best_gini, 4))\n\n# Example usage:\n# X = [[1, 2], [2, 3], [3, 4], [4, 5]]\n# y = [0, 0, 1, 1]\n# print(best_gini_split(X, y))\n```\n\nThis script defines the `best_gini_split` function, which calculates the best binary split for a given feature matrix `X` and class labels `y` based on the Gini impurity criterion. The function returns the index of the best feature, the threshold value, and the Gini impurity of the split, rounded to four decimal places. If no valid split exists, it returns the Gini impurity of the whole dataset."}
{"task_id": 191, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    \n    def validate_vectors(x, y):\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except (ValueError, TypeError):\n            return False\n        \n        if x.ndim != 1 or y.ndim != 1:\n            return False\n        if len(x) != len(y) or len(x) == 0:\n            return False\n        \n        return x, y\n\n    def euclidean(x, y):\n        return np.round(np.sqrt(np.sum((x - y) ** 2)), 4)\n\n    def manhattan(x, y):\n        return np.round(np.sum(np.abs(x - y)), 4)\n\n    def chebyshev(x, y):\n        return np.round(np.max(np.abs(x - y)), 4)\n\n    def cosine(x, y):\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        return np.round(1 - np.dot(x, y) / (norm_x * norm_y), 4)\n\n    metrics = {\n        'euclidean': euclidean,\n        'manhattan': manhattan,\n        'chebyshev': chebyshev,\n        'cosine': cosine\n    }\n\n    def d(x, y):\n        validated = validate_vectors(x, y)\n        if validated is False:\n            return -1\n        x, y = validated\n        if name in metrics:\n            return metrics[name](x, y)\n        return -1\n\n    return d\n\n# Example usage:\n# print(metric('euclidean')([1, 2, 3], [4, 5, 6]))  # \u279e 5.1962\n# print(metric('cosine')([1, 2, 3], [4, 5, 6]))    # \u279e 0.0957\n# print(metric('unknown')([1, 2, 3], [4, 5, 6]))  # \u279e -1\n# print(metric('euclidean')([1, 2], [4, 5, 6]))     # \u279e -1\n```\n\nThis script defines a `metric` function that returns a distance function based on the specified name. The returned function includes validation to ensure the inputs are valid numeric vectors and handles the specified distance metrics. If the inputs are invalid or the metric name is unsupported, it returns `-1`."}
{"task_id": 197, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n\n    if md_action:\n        # Multi-dimensional action space\n        action_dim = len(env.action_space.spaces)\n        if cont_action:\n            n_actions_per_dim = [np.inf] * action_dim\n        else:\n            n_actions_per_dim = [space.n for space in env.action_space.spaces]\n            action_ids = list(product(*(range(n) for n in n_actions_per_dim)))\n    else:\n        # Single-dimensional action space\n        action_dim = 1\n        if cont_action:\n            n_actions_per_dim = [np.inf]\n        else:\n            n_actions_per_dim = [env.action_space.n]\n            action_ids = [(i,) for i in range(env.action_space.n)]\n\n    return n_actions_per_dim, action_ids, action_dim\n```\n\nThis function `action_stats` takes an environment object `env` and two Boolean indicators `md_action` and `cont_action` to determine the properties of the environment's action space. It returns a tuple containing the number of actions per dimension, a list of all possible discrete actions (or `None` if any dimension is continuous), and the total number of action dimensions. The function handles both continuous and discrete action spaces, as well as single- and multi-dimensional spaces."}
{"task_id": 198, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # Number of topics\n    T = phi[0].shape[1]\n    \n    # Initialize beta matrix with zeros\n    beta = np.zeros((V, T))\n    \n    # Accumulate the counts for each word-topic pair\n    for d in range(len(corpus)):\n        for n in range(len(corpus[d])):\n            word_index = corpus[d][n]\n            beta[word_index] += phi[d][n]\n    \n    # Normalize the columns of beta\n    column_sums = beta.sum(axis=0)\n    column_sums[column_sums == 0] = 1  # Avoid division by zero\n    beta /= column_sums\n    \n    # Round the values to 4 decimal places\n    beta_rounded = np.round(beta, 4)\n    \n    # Convert to a list of lists\n    beta_list = beta_rounded.tolist()\n    \n    return beta_list\n```\n\nThis script defines the `update_beta` function, which calculates the updated word-topic distribution matrix $\\beta$ for Latent Dirichlet Allocation. The function iterates over the corpus and accumulates the counts for each word-topic pair using the variational parameter $\\phi$. It then normalizes the columns of $\\beta$ to ensure they sum to one and rounds the values to four decimal places before returning the result as a list of lists."}
{"task_id": 202, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    \n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n    \n    def compute_cost(medoids, labels):\n        cost = 0\n        for i, label in enumerate(labels):\n            cost += euclidean_distance(X[i], X[medoids[label]])\n        return cost\n    \n    def assign_clusters(medoids):\n        labels = []\n        for i in range(n):\n            distances = [euclidean_distance(X[i], X[m]) for m in medoids]\n            labels.append(np.argmin(distances))\n        return labels\n    \n    n = X.shape[0]\n    medoids = list(range(k))\n    labels = assign_clusters(medoids)\n    current_cost = compute_cost(medoids, labels)\n    \n    while True:\n        best_swap = None\n        best_cost_reduction = 0\n        \n        for i in range(k):\n            for j in range(n):\n                if j not in medoids:\n                    # Try swapping medoid i with non-medoid j\n                    medoids_candidate = medoids[:]\n                    medoids_candidate[i] = j\n                    labels_candidate = assign_clusters(medoids_candidate)\n                    candidate_cost = compute_cost(medoids_candidate, labels_candidate)\n                    \n                    cost_reduction = current_cost - candidate_cost\n                    if cost_reduction > best_cost_reduction:\n                        best_cost_reduction = cost_reduction\n                        best_swap = (i, j, medoids_candidate, labels_candidate)\n        \n        if best_swap is not None:\n            i, j, medoids_candidate, labels_candidate = best_swap\n            medoids = medoids_candidate\n            labels = labels_candidate\n            current_cost -= best_cost_reduction\n        else:\n            break\n    \n    return labels\n\n# Example usage:\nX = np.array([[0,0], [1,0], [0,1], [5,5], [6,5], [5,6]])\nk = 2\nprint(pam_clustering(X, k))  # Output: [0, 0, 0, 1, 1, 1]\n```"}
{"task_id": 216, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    \n    # Convert inputs to numpy arrays\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    \n    # Check for valid input dimensions\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n    \n    # Polynomial feature expansion\n    def polynomial_features(X, degree):\n        X_poly = np.ones((X.shape[0], 1))  # Initialize with bias term\n        for d in range(1, degree + 1):\n            X_poly = np.concatenate([X_poly, X**d], axis=1)\n        return X_poly\n    \n    x_train_poly = polynomial_features(x_train, degree)\n    x_test_poly = polynomial_features(x_test, degree)\n    \n    # Standardize features (except bias term)\n    mean = np.mean(x_train_poly[:, 1:], axis=0)\n    std = np.std(x_train_poly[:, 1:], axis=0)\n    x_train_poly[:, 1:] = (x_train_poly[:, 1:] - mean) / std\n    x_test_poly[:, 1:] = (x_test_poly[:, 1:] - mean) / std\n    \n    # Initialize weights\n    weights = np.zeros(x_train_poly.shape[1])\n    \n    # Batch Gradient Descent\n    for _ in range(n_iterations):\n        predictions = x_train_poly.dot(weights)\n        errors = predictions - y_train\n        \n        # Compute gradients\n        mse_gradient = (2 / x_train_poly.shape[0]) * x_train_poly.T.dot(errors)\n        \n        # L1 and L2 regularization terms\n        l1_grad = reg_factor * l1_ratio * np.sign(weights[1:])  # Exclude bias term\n        l2_grad = reg_factor * (1 - l1_ratio) * 2 * weights[1:]  # Exclude bias term\n        \n        # Update weights\n        weights[0] -= learning_rate * mse_gradient[0]  # Update bias term separately\n        weights[1:] -= learning_rate * (mse_gradient[1:] + l1_grad + l2_grad)\n    \n    # Make predictions on test set\n    test_predictions = x_test_poly.dot(weights)\n    \n    # Return rounded predictions\n    return np.round(test_predictions, 4).tolist()\n```"}
{"task_id": 217, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to numpy arrays for vectorized computation\n    actual = np.array(actual, dtype=float)\n    predicted = np.array(predicted, dtype=float)\n    \n    # Compute sigmoid of predicted values\n    sigmoid_pred = 1 / (1 + np.exp(-predicted))\n    \n    # Compute gradient for each observation\n    gradient = actual * np.exp(-actual * predicted) / (1 + np.exp(-actual * predicted))\n    \n    # Compute Hessian for each observation\n    hessian = sigmoid_pred * (1 - sigmoid_pred)\n    \n    # Round results to 6 decimal places\n    gradient = np.round(gradient, 6)\n    hessian = np.round(hessian, 6)\n    sigmoid_pred = np.round(sigmoid_pred, 6)\n    \n    # Convert numpy arrays back to lists\n    gradient_list = gradient.tolist()\n    hessian_list = hessian.tolist()\n    probability_list = sigmoid_pred.tolist()\n    \n    return (gradient_list, hessian_list, probability_list)\n```\n\nThis script defines the `logistic_components` function which calculates the gradient, Hessian, and probability for logistic loss as specified. It handles input conversion to NumPy arrays for efficient computation and ensures all results are rounded to six decimal places before returning them as lists."}
{"task_id": 218, "completion_id": 0, "completion": "```python\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    \n    def hand_value(hand: list[int]) -> int:\n        \"\"\"Calculate the value of a hand in Blackjack.\"\"\"\n        value = sum(hand)\n        aces = hand.count(1)\n        \n        # Try to use Aces as 11 if possible\n        while value + 10 <= 21 and aces > 0:\n            value += 10\n            aces -= 1\n        \n        return value\n    \n    def is_natural_blackjack(hand: list[int]) -> bool:\n        \"\"\"Check if a hand is a natural blackjack.\"\"\"\n        return len(hand) == 2 and 1 in hand and 10 in hand\n    \n    player_busts = hand_value(player) > 21\n    dealer_busts = hand_value(dealer) > 21\n    player_score = hand_value(player)\n    dealer_score = hand_value(dealer)\n    \n    if player_busts:\n        return -1\n    elif dealer_busts:\n        return 1\n    elif is_natural_blackjack(player):\n        return 1.5\n    elif player_score > dealer_score:\n        return 1\n    elif player_score < dealer_score:\n        return -1\n    else:\n        return 0\n```\n\nThis script defines the `blackjack_outcome` function, which evaluates the outcome of a finished round of Blackjack based on the rules provided. It includes helper functions to calculate the value of a hand and to check for a natural blackjack. The main function uses these helpers to determine the correct reward for the player."}
{"task_id": 221, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper function that returns element-wise squared log errors.\"\"\"\n    try:\n        actual = np.array(actual)\n        predicted = np.array(predicted)\n        \n        # Check if all values are non-negative\n        if np.any(actual < 0) or np.any(predicted < 0):\n            return -1\n        \n        # Calculate element-wise squared log errors\n        return (np.log1p(actual) - np.log1p(predicted)) ** 2\n    \n    except Exception as e:\n        return -1\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\"\"\"\n    try:\n        # Validate input lengths\n        if len(actual) != len(predicted):\n            return -1\n        \n        # Get element-wise squared log errors\n        sl_errors = squared_log_error(actual, predicted)\n        \n        # Check for validation failure in squared_log_error\n        if sl_errors == -1:\n            return -1\n        \n        # Calculate and return the mean of squared log errors, rounded to 4 decimals\n        return round(np.mean(sl_errors), 4)\n    \n    except Exception as e:\n        return -1\n\n# Example usage:\n# actual = [3, -0.5, 2, 7]\n# predicted = [2.5, 0.3, 2, 8]\n# print(mean_squared_log_error(actual, predicted))  # Should return -1 due to negative value in actual\n\n# actual = [3, 0.5, 2, 7]\n# predicted = [2.5, 0.3, 2, 8]\n# print(mean_squared_log_error(actual, predicted))  # Should return the MSLE rounded to 4 decimals\n```\n\nThis script includes the required helper function `squared_log_error` and the main function `mean_squared_log_error` that calculates the Mean Squared Logarithmic Error (MSLE). The script also includes input validation to ensure that the inputs are of the same length and contain only non-negative numbers. If any validation check fails, the function returns -1."}
{"task_id": 222, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        # Scalar input\n        if z >= 0:\n            result = 1 / (1 + np.exp(-z))\n        else:\n            result = np.exp(z) / (1 + np.exp(z))\n        return round(result, 4)\n    \n    # Convert input to a NumPy array for vectorized operations\n    z_array = np.array(z)\n    \n    # Apply sigmoid function element-wise with numerical stability\n    positive_mask = z_array >= 0\n    negative_mask = z_array < 0\n    \n    result_array = np.empty_like(z_array, dtype=float)\n    result_array[positive_mask] = 1 / (1 + np.exp(-z_array[positive_mask]))\n    result_array[negative_mask] = np.exp(z_array[negative_mask]) / (1 + np.exp(z_array[negative_mask]))\n    \n    # Round the results to 4 decimal places\n    result_array = np.round(result_array, 4)\n    \n    # Convert the result back to a Python list if the input was a list or np.ndarray\n    return result_array.tolist()\n\n# Example usage:\n# print(sigmoid(0))  # Scalar input\n# print(sigmoid([0, -1, 1000, -1000]))  # List input\n# print(sigmoid(np.array([0, -1, 1000, -1000])))  # NumPy array input\n```\n\nThis script implements the sigmoid function with the required numerical stability and handles scalar, list, and NumPy array inputs. The function ensures that the output is rounded to four decimal places and maintains the input structure for list and array inputs."}
{"task_id": 224, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    def apply_leaky_relu(x):\n        if isinstance(x, (list, np.ndarray)):\n            return [apply_leaky_relu(item) for item in x]\n        else:\n            return x if x >= 0 else a * x\n\n    if isinstance(z, np.ndarray):\n        z = z.tolist()\n\n    return apply_leaky_relu(z)\n\n# Example usage:\n# z = [-1, 0, 1, [2, -3, [4, -5]]]\n# print(leaky_relu(z))  # Output: [0.01, 0, 1, [2, -0.03, [4, -0.05]]]\n```\n\nThis script defines the `leaky_relu` function, which applies the Leaky ReLU activation to every element in the input `z`. The function handles scalar, list, and `numpy.ndarray` inputs and returns a Python list with the same nested structure as the input. The example usage at the bottom demonstrates how the function can be used."}
{"task_id": 226, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    \n    def decision_stump_predict(X, feature_index, threshold, polarity):\n        predictions = np.ones(X.shape[0])\n        if polarity == 1:\n            predictions[X[:, feature_index] < threshold] = -1\n        else:\n            predictions[X[:, feature_index] >= threshold] = -1\n        return predictions\n\n    n_samples, n_features = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    classifiers = []\n    alphas = []\n\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_feature_index = None\n        best_threshold = None\n        best_polarity = None\n\n        for feature_index in range(n_features):\n            thresholds = np.unique(X_train[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = decision_stump_predict(X_train, feature_index, threshold, polarity)\n                    weighted_error = np.sum(sample_weights[predictions != y_train])\n                    \n                    if weighted_error > 0.5:\n                        continue  # Skip if the error is greater than 0.5\n                    \n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_feature_index = feature_index\n                        best_threshold = threshold\n                        best_polarity = polarity\n\n        alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n        alphas.append(alpha)\n        classifiers.append((best_feature_index, best_threshold, best_polarity))\n\n        sample_weights *= np.exp(-alpha * y_train * decision_stump_predict(X_train, best_feature_index, best_threshold, best_polarity))\n        sample_weights /= np.sum(sample_weights)\n\n    def ensemble_predict(X):\n        ensemble_predictions = np.zeros(X.shape[0])\n        for alpha, (feature_index, threshold, polarity) in zip(alphas, classifiers):\n            ensemble_predictions += alpha * decision_stump_predict(X, feature_index, threshold, polarity)\n        return np.sign(ensemble_predictions)\n\n    return ensemble_predict(X_test).astype(int).tolist()\n```\n\nThis script implements the AdaBoost algorithm using decision stumps as weak learners. It trains the ensemble on the provided training data and predicts the labels for the test data. The predictions are returned as a list of integers, each being either -1 or 1."}
{"task_id": 241, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    \n    # Flatten the shape except the first two dimensions\n    d0, d1 = shape[0], np.prod(shape[1:])\n    \n    # Step 2: Create a 2-D matrix A with shape (d0, d1) filled with i.i.d. samples from the standard normal distribution\n    A = np.random.randn(d0, d1)\n    \n    # Step 3: Compute the SVD of A\n    U, _, VT = np.linalg.svd(A, full_matrices=False)\n    \n    # Step 4: Choose the SVD factor that has the same size as A\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = VT.T\n    \n    # Step 5: Reshape Q back to the requested tensor shape and multiply it by scale\n    Q = Q.reshape(shape) * scale\n    \n    # Convert to list before returning\n    return Q.tolist()\n\n# Example usage\nnp.random.seed(0)\nshape = (2, 2)\nscale = 0.5\nresult = orthogonal(shape, scale)\nprint(result)\n```\n\nThis script defines the `orthogonal` function which initializes a tensor with an orthogonal matrix according to the specified algorithm. It also includes an example usage with a fixed random seed to demonstrate the function's output. The result is converted to a Python list as required."}
{"task_id": 243, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a numpy array for easier manipulation\n    s = np.array(state)\n    \n    # Define weights and biases (all weights = 1.0, all biases = 0.0)\n    W1 = np.ones((4, 3))\n    b1 = np.zeros(4)\n    W2 = np.ones((4, 4))\n    b2 = np.zeros(4)\n    W3 = np.ones((4, 4))\n    b3 = np.zeros(4)\n    Wa = np.ones((3, 4))\n    ba = np.zeros(3)\n    Wc = np.ones((1, 4))\n    bc = np.zeros(1)\n    \n    # Compute the forward pass for the shared layers\n    z1 = np.maximum(0, np.dot(W1, s) + b1)  # ReLU activation\n    z2 = np.maximum(0, np.dot(W2, z1) + b2)  # ReLU activation\n    z3 = np.maximum(0, np.dot(W3, z2) + b3)  # ReLU activation\n    \n    # Compute the forward pass for the actor head\n    logits = np.dot(Wa, z3) + ba\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))  # Softmax activation\n    \n    # Compute the forward pass for the critic head\n    state_value = np.dot(Wc, z3) + bc\n    \n    # Return the results rounded to 4 decimal places\n    return [round(prob, 4) for prob in action_probs], round(state_value[0], 4)\n\n# Example usage:\nstate = [0.1, 0.2, 0.3]\naction_probs, state_value = actor_critic_forward(state)\nprint(\"Action probabilities:\", action_probs)\nprint(\"State value:\", state_value)\n```\n\nThis script defines the `actor_critic_forward` function, which performs the forward pass of the specified Actor-Critic network using basic NumPy operations. The function takes a state vector as input and returns the action probabilities and the state value, both rounded to four decimal places."}
{"task_id": 249, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    \n    # Convert lists to numpy arrays\n    state = np.array(state)\n    W1, b1 = np.array(params['W1']), np.array(params['b1'])\n    W2, b2 = np.array(params['W2']), np.array(params['b2'])\n    W3, b3 = np.array(params['W3']), np.array(params['b3'])\n    Wa, ba = np.array(params['Wa']), np.array(params['ba'])\n    Wc, bc = np.array(params['Wc']), np.array(params['bc'])\n    \n    # Forward pass through shared layers\n    h1 = np.maximum(0, np.dot(state, W1) + b1)  # ReLU activation\n    h2 = np.maximum(0, np.dot(h1, W2) + b2)   # ReLU activation\n    h3 = np.maximum(0, np.dot(h2, W3) + b3)   # ReLU activation\n    \n    # Actor head\n    actor_scores = np.dot(h3, Wa) + ba\n    exp_scores = np.exp(actor_scores - np.max(actor_scores))  # for numerical stability\n    probabilities = exp_scores / np.sum(exp_scores)\n    \n    # Critic head\n    value = np.dot(h3, Wc) + bc\n    \n    # Round the results\n    probabilities = [round(p, 4) if p not in [0.0, 1.0] else p for p in probabilities]\n    value = round(value[0], 4) if value[0] not in [0.0, 1.0] else value[0]\n    \n    return probabilities, value\n```\n\nThis script defines the `actor_critic_forward` function, which performs a forward pass through a three-layer Actor-Critic network using NumPy. The function takes the current environment state and a dictionary of network parameters, processes the state through shared layers and separate actor and critic heads, and returns the action probabilities and state value, rounded to four decimal places."}
{"task_id": 253, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    # Convert w to a NumPy array for vectorized operations\n    w = np.array(w)\n    \n    if gradient:\n        # Compute the gradient of the Elastic-Net penalty\n        gradient_w = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n        return [round(g, 4) for g in gradient_w.tolist()]\n    else:\n        # Compute the Elastic-Net penalty value\n        l1_part = np.sum(np.abs(w))\n        l2_part = np.sum(w ** 2)\n        penalty = alpha * (l1_ratio * l1_part + (1 - l1_ratio) * 0.5 * l2_part)\n        return round(penalty, 4)\n\n# Example usage:\n# weight_vector = [1.0, -2.0, 3.0]\n# alpha = 0.5\n# l1_ratio = 0.3\n# print(elastic_net_regularization(weight_vector, alpha, l1_ratio))  # Penalty value\n# print(elastic_net_regularization(weight_vector, alpha, l1_ratio, gradient=True))  # Gradient\n```"}
{"task_id": 256, "completion_id": 0, "completion": "```\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    # Special cases\n    if param_name in [\"X\", \"y\"]:\n        return None\n    if param_name in [\"Ba\", \"Bx\"]:\n        param_name = param_name.lower()\n    \n    # Get the parameter to check\n    param = model.parameters[param_name]\n    shape = param.shape\n    grads = np.zeros_like(param, dtype=np.float64)\n\n    # Iterate over every element of the parameter\n    for i in range(shape[0]):\n        for j in range(shape[1]):\n            # Save the original value\n            original_value = param[i, j]\n            \n            # Perturb the parameter by +epsilon\n            param[i, j] = original_value + epsilon\n            model.flush_gradients()  # Reset gradients\n            predictions = []\n            for t in range(n_t):\n                pred = model.forward(X[:, :, t])\n                predictions.append(pred)\n            loss_plus = loss_func(predictions)\n            \n            # Perturb the parameter by -epsilon\n            param[i, j] = original_value - epsilon\n            model.flush_gradients()  # Reset gradients\n            predictions = []\n            for t in range(n_t):\n                pred = model.forward(X[:, :, t])\n                predictions.append(pred)\n            loss_minus = loss_func(predictions)\n            \n            # Approximate the partial derivative\n            grads[i, j] = (loss_plus - loss_minus) / (2 * epsilon)\n            \n            # Restore the original value\n            param[i, j] = original_value\n    \n    return grads.T\n```\n\nThis function `grad_check_RNN` performs a numerical gradient check for a specified parameter in an RNN model using the centered finite-difference formula. It handles special cases for parameter names and ensures that the gradient is computed accurately by iterating over each element of the parameter array. The result is returned as the transposed gradient array."}
{"task_id": 257, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n\n    m, n = X_train.shape\n    weights = np.ones(m) / m\n    classifiers = []\n    classifier_weights = []\n\n    for _ in range(n_clf):\n        min_error = np.inf\n        best_stump = None\n        best_threshold = None\n        best_polarity = None\n\n        for feature_i in range(n):\n            thresholds = np.unique(X_train[:, feature_i])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = np.ones(m)\n                    predictions[X_train[:, feature_i] * polarity < threshold * polarity] = -1\n\n                    weighted_error = np.sum(weights[predictions != y_train])\n\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        polarity = -polarity\n\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump = feature_i\n                        best_threshold = threshold\n                        best_polarity = polarity\n\n        alpha = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n        classifier_weights.append(alpha)\n\n        predictions = np.ones(m)\n        predictions[X_train[:, best_stump] * best_polarity < best_threshold * best_polarity] = -1\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n\n        classifiers.append((best_stump, best_threshold, best_polarity))\n\n    test_predictions = np.zeros(X_test.shape[0])\n    for (feature_i, threshold, polarity), alpha in zip(classifiers, classifier_weights):\n        test_predictions += alpha * polarity * ((X_test[:, feature_i] >= threshold) * 2 - 1)\n\n    return [1 if pred >= 0 else -1 for pred in test_predictions]\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([-1, -1, 1, 1])\n# X_test = np.array([[0, 0], [5, 5]])\n# print(adaboost_predict(X_train, y_train, X_test, n_clf=3))\n```\n\nThis script defines the `adaboost_predict` function which implements the AdaBoost algorithm using decision stumps as weak learners. The function trains on the provided training data and then predicts the labels for the test data. The predictions are returned as a list of `-1` or `1`."}
{"task_id": 261, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError(\"Shape must have at least two dimensions\")\n\n    fan_in = shape[1]\n    fan_out = shape[0]\n\n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n\n    std_dev = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(0, std_dev, size=shape).astype(np.float32)\n\n# Example usage:\n# shape = (64, 128, 3, 3)  # Example shape for a convolutional kernel\n# weights = glorot_normal(shape)\n# print(weights)\n# print(\"Mean:\", np.mean(weights))\n# print(\"Standard Deviation:\", np.std(weights))\n```\n\nThis script defines the `glorot_normal` function, which initializes a NumPy array with the Glorot/Xavier normal initialization method. The function calculates the `fan_in` and `fan_out` based on the input shape, computes the standard deviation, and then generates a NumPy array with the specified shape, where the elements are drawn from a normal distribution with the calculated mean and standard deviation. The example usage at the bottom demonstrates how to use the function and verify the mean and standard deviation of the generated weights."}
{"task_id": 266, "completion_id": 0, "completion": "```\npython\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    # Create a dictionary to map each vertex to its index in V\n    vertex_index = {vertex: index for index, vertex in enumerate(V)}\n    \n    # Initialize the adjacency list with empty sets to avoid duplicates\n    adj_list = [[] for _ in V]\n    \n    # Add edges to the adjacency list\n    for u, v in E:\n        if u in vertex_index and v in vertex_index:\n            # Add v to the adjacency list of u if not already present\n            if v not in adj_list[vertex_index[u]]:\n                adj_list[vertex_index[u]].append(v)\n            # Add u to the adjacency list of v if not already present\n            if u not in adj_list[vertex_index[v]]:\n                adj_list[vertex_index[v]].append(u)\n    \n    # Sort the neighbors according to their order of appearance in V\n    for i in range(len(adj_list)):\n        adj_list[i].sort(key=lambda x: vertex_index[x])\n    \n    return adj_list\n\n# Example usage:\nV = [0, 1, 2, 3, 4]\nE = [(0, 1), (0, 4), (1, 2), (1, 3), (1, 4), (2, 3), (3, 4)]\nprint(build_adj_list(V, E))\n# Output: [[1, 4], [0, 2, 3, 4], [1, 3], [1, 2, 4], [0, 1, 3]]\n```\n\nThis script defines the `build_adj_list` function, which takes a list of vertices `V` and a list of edges `E` to construct an adjacency list for an undirected graph. The function ensures that each neighbor appears exactly once and that the neighbors are sorted according to their order of appearance in `V`. The example usage demonstrates how the function works with a sample graph."}
{"task_id": 267, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_error = float('inf')\n    best_feature_index = 0\n    best_threshold = 0.0\n    best_polarity = 1\n\n    for feature_index in range(n_features):\n        # Get unique values in the feature and sort them\n        feature_values = np.unique(X[:, feature_index])\n        thresholds = (feature_values[:-1] + feature_values[1:]) / 2.0\n\n        for threshold in thresholds:\n            for polarity in [1, -1]:\n                # Predict using the current threshold and polarity\n                predictions = np.where(X[:, feature_index] < threshold, 1, -1)\n                if polarity == -1:\n                    predictions = -predictions\n\n                # Calculate the weighted error\n                misclassified = (predictions != y).astype(float)\n                weighted_error = np.sum(sample_weights * misclassified)\n\n                # Update the best stump if this one is better\n                if weighted_error < best_error:\n                    best_error = weighted_error\n                    best_feature_index = feature_index\n                    best_threshold = threshold\n                    best_polarity = polarity\n\n    return {\n        \"feature_index\": best_feature_index,\n        \"threshold\": round(best_threshold, 4),\n        \"polarity\": best_polarity,\n        \"weighted_error\": round(best_error, 4)\n    }\n```\n\nThis script defines a function `train_decision_stump` that finds the optimal weighted decision stump for a binary classification task. It iterates over each feature, considers all unique thresholds between feature values, and evaluates the stump with both polarities. The stump that minimizes the weighted classification error is returned."}
{"task_id": 273, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of labels.\"\"\"\n    n = len(labels)\n    if n == 0:\n        return 0.0\n    counts = Counter(labels)\n    return -sum((count / n) * math.log2(count / n) for count in counts.values())\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    feature = np.array(feature)\n    target = np.array(target)\n    \n    # Sort the feature and corresponding target\n    sorted_indices = np.argsort(feature)\n    sorted_feature = feature[sorted_indices]\n    sorted_target = target[sorted_indices]\n    \n    # Calculate the entropy of the parent node\n    parent_entropy = entropy(sorted_target)\n    n = len(sorted_feature)\n    \n    best_threshold = None\n    max_information_gain = 0.0\n    \n    # Evaluate every legal threshold\n    for i in range(n - 1):\n        if sorted_feature[i] != sorted_feature[i + 1]:\n            threshold = round((sorted_feature[i] + sorted_feature[i + 1]) / 2.0, 4)\n            \n            # Split the data into left and right subsets\n            left_indices = sorted_indices[:i + 1]\n            right_indices = sorted_indices[i + 1:]\n            \n            left_target = sorted_target[left_indices]\n            right_target = sorted_target[right_indices]\n            \n            # Calculate the information gain for this threshold\n            left_entropy = entropy(left_target)\n            right_entropy = entropy(right_target)\n            \n            information_gain = parent_entropy - (len(left_target) / n) * left_entropy - (len(right_target) / n) * right_entropy\n            \n            # Update the best threshold if this one has higher information gain\n            if information_gain > max_information_gain:\n                max_information_gain = information_gain\n                best_threshold = threshold\n    \n    # Return the best threshold and information gain, rounded to 4 decimal places\n    return (best_threshold, round(max_information_gain, 4)) if best_threshold is not None else (None, 0.0)\n```\n\nThis script defines a `best_split` function that calculates the optimal numerical threshold for splitting a dataset in a decision tree. It uses Shannon entropy to measure the quality of splits and returns the threshold and information gain, rounded to four decimal places. If no useful split is found, it returns `(None, 0.0)`."}
{"task_id": 286, "completion_id": 0, "completion": "```\npython\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    return [[0.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    return [[1.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    return [[random.uniform(low, high) for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError(\"Invalid initialization function.\")\n```\n\nThis script defines the required initializer functions (`zeros_init`, `ones_init`, and `random_uniform_init`) and implements the `get_initializer` function to retrieve the appropriate initializer based on the provided name. If the name does not correspond to a valid initializer, it raises a `ValueError` with the specified message."}
{"task_id": 287, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n    \n    # Calculate output dimensions\n    output_H = (H - p_h) // s_h + 1\n    output_W = (W - p_w) // s_w + 1\n    \n    # Initialize pooled output\n    pooled_output = np.zeros((N, C, output_H, output_W))\n    \n    # Forward pass\n    for n in range(N):\n        for c in range(C):\n            for h in range(output_H):\n                for w in range(output_W):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    pooled_output[n, c, h, w] = np.mean(X[n, c, h_start:h_end, w_start:w_end])\n    \n    # Backward pass\n    grad_input = np.zeros_like(X)\n    \n    for n in range(N):\n        for c in range(C):\n            for h in range(output_H):\n                for w in range(output_W):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += accum_grad[n, c, h, w] / (p_h * p_w)\n    \n    # Round and convert to lists\n    pooled_output = np.round(pooled_output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    \n    return pooled_output, grad_input\n```\n\nThis script defines the `average_pool2d` function, which performs both the forward and backward passes of a 2-D average-pooling layer. The function takes the input tensor `X`, pooling window size `pool_shape`, stride `stride`, and the accumulated gradient `accum_grad` as inputs, and returns the pooled output and the gradient input, both rounded to the nearest 4th decimal and converted to Python lists."}
{"task_id": 290, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-8)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        return (tree_a.feature == tree_b.feature and\n                np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-8) and\n                compare_trees(tree_a.left, tree_b.left) and\n                compare_trees(tree_a.right, tree_b.right))\n    else:\n        return False\n```\n\nThis script defines the `Leaf` and `Node` classes using `dataclasses` and implements the `compare_trees` function to recursively compare two decision trees based on the specified criteria. The function checks if both nodes are leaves and compares their values using `numpy.allclose` with a tolerance of \\(1 \\times 10^{-8}\\). If both nodes are internal nodes, it compares their feature indices, thresholds, and recursively compares their left and right children. If the structures or types of the nodes differ, it returns `False`."}
{"task_id": 292, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                            parent2: list[list[int | float]],\n                            cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    # Convert parent lists to numpy arrays for efficient operations\n    np_parent1 = np.array(parent1)\n    np_parent2 = np.array(parent2)\n    \n    # Validate that the shapes of the parent matrices are the same\n    if np_parent1.shape != np_parent2.shape:\n        return -1\n    \n    # Get the number of columns\n    num_cols = np_parent1.shape[1]\n    \n    # Ensure the cutoff is within the valid range\n    if cutoff < 0 or cutoff > num_cols:\n        return -1\n    \n    # Perform the crossover\n    child1 = np.concatenate((np_parent1[:, :cutoff], np_parent2[:, cutoff:]), axis=1)\n    child2 = np.concatenate((np_parent2[:, :cutoff], np_parent1[:, cutoff:]), axis=1)\n    \n    # Convert the resulting numpy arrays back to lists\n    child1_list = child1.tolist()\n    child2_list = child2.tolist()\n    \n    return (child1_list, child2_list)\n\n# Example usage:\nparent1 = [\n    [1.0, 2.0, 3.0],\n    [4.0, 5.0, 6.0]\n]\n\nparent2 = [\n    [7.0, 8.0, 9.0],\n    [10.0, 11.0, 12.0]\n]\n\ncutoff = 1\n\nchildren = single_point_crossover(parent1, parent2, cutoff)\nprint(\"Child 1:\", children[0])\nprint(\"Child 2:\", children[1])\n```\n\nThis script defines the `single_point_crossover` function, which performs the specified single-point column crossover on two parent weight matrices. It includes validation for the input matrices' shapes and ensures the cutoff value is within the valid range. The function returns the two resulting child matrices as nested Python lists."}
{"task_id": 294, "completion_id": 0, "completion": "```\npython\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj: Dict[Any, List[Tuple[Any, float]]] = {}\n\n    # Initialize adjacency dictionary with all vertices having empty lists\n    for label in G['_V2I']:\n        adj[label] = []\n\n    # Process each edge in the graph\n    for edges in G['_G']:\n        for source_label, target_label, weight in edges:\n            if source_label not in adj:\n                adj[source_label] = []\n            if target_label not in adj:\n                adj[target_label] = []\n            adj[source_label].append((target_label, weight))\n            if not G['is_directed']:\n                adj[target_label].append((source_label, weight))\n\n    # Sort the neighbor lists alphabetically by the neighbor label\n    for label in adj:\n        adj[label].sort(key=lambda x: x[0])\n\n    return adj\n\n# Example usage:\n# G = {\n#     'is_directed': False,\n#     '_V2I': {'A': 0, 'B': 1, 'C': 2},\n#     '_G': [\n#         [('A', 'B', 1.0), ('A', 'C', 2.0)],\n#         [('B', 'A', 1.0), ('B', 'C', 3.0)],\n#         [('C', 'A', 2.0), ('C', 'B', 3.0)]\n#     ]\n# }\n# print(to_networkx(G))\n```\n\nThis script defines the `to_networkx` function, which converts a custom graph representation into an adjacency dictionary. The function handles both directed and undirected graphs, ensuring that edges in undirected graphs appear in both directions and that neighbor lists are sorted alphabetically."}
{"task_id": 296, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    # Convert the input to a NumPy array if it isn't already\n    x = np.asarray(x)\n    \n    # Check if all elements are either 0 or 1\n    return np.all((x == 0) | (x == 1))\n\n# Example usage:\n# print(is_binary([0, 1, 0, 1]))  # Should return True\n# print(is_binary([0, 2, 1, 0]))  # Should return False\n# print(is_binary(np.array([True, False, True])))  # Should return True\n# print(is_binary(np.array([0.0, 1.0, 1.0, 0.0])))  # Should return True\n# print(is_binary(np.array([0.0, 1.5, 1.0, 0.0])))  # Should return False\n```"}
{"task_id": 298, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    if N < 1:\n        raise ValueError(\"N must be at least 1\")\n\n    # Tokenize the corpus and query\n    tokenized_corpus = []\n    for sentence in corpus:\n        tokens = sentence.split()\n        if N > 1:\n            tokens = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        tokenized_corpus.extend(tokens)\n\n    query_tokens = query.split()\n    if len(query_tokens) < N:\n        return float('-inf')\n    if N > 1:\n        query_tokens = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n\n    # Count n-grams and (n-1)-grams\n    ngram_counts = Counter(tuple(tokens[i:i+N]) for sentence in tokenized_corpus for i in range(len(sentence) - N + 1))\n    n_1_gram_counts = Counter(tuple(tokens[i:i+N-1]) for sentence in tokenized_corpus for i in range(len(sentence) - N + 1))\n\n    # Calculate log-probability\n    log_prob = 0.0\n    for i in range(len(query_tokens) - N + 1):\n        ngram = tuple(query_tokens[i:i+N])\n        n_1_gram = tuple(query_tokens[i:i+N-1])\n        \n        ngram_count = ngram_counts[ngram]\n        n_1_gram_count = n_1_gram_counts[n_1_gram]\n        \n        if n_1_gram_count == 0:\n            return float('-inf')\n        \n        prob = ngram_count / n_1_gram_count\n        if prob == 0:\n            return float('-inf')\n        \n        log_prob += math.log(prob)\n\n    return round(log_prob, 4)\n\n\n# Example usage:\ncorpus = [\"a b a\", \"b a b\"]\nquery = \"a b\"\nN = 1\nprint(ngram_log_prob(corpus, query, N))  # Output: -1.3863\n```"}
{"task_id": 302, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    \n    n = X.shape[0]\n    \n    # Step 1: Build a weighted adjacency matrix W\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                W[i, j] = 1 / (1 + np.linalg.norm(X[i] - X[j]))\n    \n    # Step 2: Compute the (unnormalized) graph Laplacian L = D - W\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    \n    # Step 3: Obtain the first k eigenvectors of L\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    \n    # Step 4: Run k-means on the rows of E\n    # Initialize centroids with the first k rows of E\n    centroids = E[:k].copy()\n    labels = np.zeros(n, dtype=int)\n    \n    for _ in range(100):\n        # Assign clusters\n        for i in range(n):\n            distances = np.linalg.norm(E[i] - centroids, axis=1)\n            labels[i] = np.argmin(distances)\n        \n        # Update centroids\n        new_centroids = np.zeros_like(centroids)\n        counts = np.zeros(k, dtype=int)\n        \n        for i in range(n):\n            new_centroids[labels[i]] += E[i]\n            counts[labels[i]] += 1\n        \n        # Handle empty clusters\n        for j in range(k):\n            if counts[j] == 0:\n                new_centroids[j] = E[np.random.choice(n)]\n            else:\n                new_centroids[j] /= counts[j]\n        \n        # Check for convergence\n        if np.all(centroids == new_centroids):\n            break\n        \n        centroids = new_centroids\n    \n    return labels.tolist()\n```\n\nThis script implements the Spectral Clustering algorithm from scratch, following the provided steps. It uses NumPy for numerical operations but does not rely on any other external libraries for the clustering process."}
{"task_id": 303, "completion_id": 0, "completion": "```\npython\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_label = params[prev_ix][1]\n    prev_mine = params[prev_ix][0]\n    curr_label = params[ix][1]\n    curr_mine = params[ix][0]\n    \n    debug_str = (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_mine}\\n\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{golds[prev_label]}\\n\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_mine}\\n\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{golds[curr_label]}{warn_str}\\n\"\n        \"----------------------- END DEBUG -----------------------\"\n    )\n    \n    return debug_str\n```"}
{"task_id": 304, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    # If fit_intercept is True, add a column of ones to X\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n    \n    # Determine the shape of the prior mean vector mu\n    M = X.shape[1]\n    if np.isscalar(mu):\n        mu = np.full(M, mu)\n    \n    # Determine the shape of the prior scale matrix V\n    if V is None:\n        V = np.eye(M)\n    elif np.isscalar(V):\n        V = V * np.eye(M)\n    elif isinstance(V, (list, tuple)):\n        V = np.diag(V)\n    \n    # Compute the inverse of V\n    V_inv = np.linalg.inv(V)\n    \n    # Compute the posterior covariance matrix\n    Sigma_b = np.linalg.inv(V_inv + X.T @ X)\n    \n    # Compute the posterior mean\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    \n    # Return the posterior mean rounded to 4 decimal places\n    return [round(m, 4) for m in mu_b]\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([7, 8, 9])\n# print(bayesian_posterior_mean(X, y, fit_intercept=True))\n```\n\nThis script defines the `bayesian_posterior_mean` function, which computes the posterior mean of the regression coefficients in a Bayesian linear regression model with an unknown noise variance. The function handles different types of prior specifications for the mean `mu` and the scale `V` of the prior distribution on the coefficients `b`. It also optionally adds an intercept column to the design matrix `X`. The result is rounded to four decimal places as required."}
{"task_id": 308, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs // 2\n\n    # Convert frequency limits to Mel scale\n    min_mel = 2595 * np.log10(1 + min_freq / 700)\n    max_mel = 2595 * np.log10(1 + max_freq / 700)\n\n    # Generate n_filters+2 equally spaced values on the Mel axis\n    mel_points = np.linspace(min_mel, max_mel, n_filters + 2)\n\n    # Convert Mel points back to Hz\n    hz_points = 700 * (10**(mel_points / 2595) - 1)\n\n    # Initialize the filterbank\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n\n    # Compute the filterbank matrix\n    for i in range(n_filters):\n        left_mel, center_mel, right_mel = hz_points[i:i+3]\n        \n        # Find the DFT bins that correspond to the Mel points\n        left_bin = int(np.floor(left_mel * (N / fs)))\n        right_bin = int(np.ceil(right_mel * (N / fs)))\n\n        # Fill in the left part of the triangle\n        for k in range(left_bin, min(right_bin, N // 2 + 1)):\n            if k * fs / N > left_mel:\n                filterbank[i, k] = (k * fs / N - left_mel) / (center_mel - left_mel)\n\n        # Fill in the right part of the triangle\n        for k in range(max(left_bin, 0), right_bin):\n            if k * fs / N < right_mel:\n                filterbank[i, k] = (right_mel - k * fs / N) / (right_mel - center_mel)\n\n    # Normalize the filters\n    if normalize:\n        for i in range(n_filters):\n            if np.sum(filterbank[i]) > 0:\n                filterbank[i] *= 2 / (hz_points[i+2] - hz_points[i])\n\n    # Round every element to 4 decimal places and convert to a list\n    filterbank = np.round(filterbank, 4).tolist()\n\n    return filterbank\n```\n\nThis script defines the `mel_filterbank` function according to the specified requirements, including conversions between Hertz and Mel scales, construction of triangular filters, and optional normalization. The final filterbank matrix is returned as a list of lists, with each element rounded to four decimal places."}
{"task_id": 312, "completion_id": 0, "completion": "```\n\n```python\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    \n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n    \n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    \n    n = np.arange(window_len)\n    bh_window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    \n    if not symmetric:\n        bh_window = bh_window[:-1]\n    \n    return [round(x, 4) for x in bh_window]\n\n# Example usage:\n# print(blackman_harris(10, symmetric=False))\n# print(blackman_harris(10, symmetric=True))\n```\n```"}
{"task_id": 313, "completion_id": 0, "completion": "```\npython\nimport math\nimport numpy as np\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    def digamma(x):\n        # Shift x to a larger value using the recursion \u03c8(x) = \u03c8(x+1) - 1/x\n        while x < 6:\n            x += 1\n            result = -1 / x\n        # Use the asymptotic expansion for large x\n        result = math.log(x) - 0.5 / x - 1 / (12 * x**2) + 1 / (120 * x**4) - 1 / (252 * x**6)\n        return result\n\n    # Convert gamma to a NumPy array if it isn't already\n    if not isinstance(gamma, np.ndarray):\n        gamma = np.array(gamma)\n    \n    # Compute the required expectations\n    gamma_dt = gamma[d, t]\n    sum_gamma_d = np.sum(gamma[d, :])\n    \n    # Calculate the expectation of log X_t\n    expectation = digamma(gamma_dt) - digamma(sum_gamma_d)\n    \n    # Return the result rounded to 4 decimal places\n    return round(expectation, 4)\n\n# Example usage:\n# gamma = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]\n# d = 0\n# t = 1\n# print(expected_log_dirichlet(gamma, d, t))  # Example output: -0.4074\n```\n\nThis script defines the `expected_log_dirichlet` function, which computes the expected value of the logarithm of a component of a Dirichlet-distributed random vector using the digamma function. The digamma function is implemented using a recursive approach to shift small values and an asymptotic expansion for larger values. The result is rounded to four decimal places before being returned."}
{"task_id": 317, "completion_id": 0, "completion": "```\npython\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    # Determine the previous index\n    prev_ix = max(ix - 1, 0)\n    \n    # Extract previous and current elements\n    prev_prediction, prev_label = params[prev_ix]\n    curr_prediction, curr_label = params[ix]\n    \n    # Retrieve the gold values\n    prev_gold = golds.get(prev_label, \"\")\n    curr_gold = golds.get(curr_label, \"\")\n    \n    # Construct the formatted string\n    report = (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_prediction}\\n\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{prev_gold}\\n\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_prediction}\\n\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{curr_gold}{warn_str}\\n\"\n        \"----------------------- END DEBUG -----------------------\"\n    )\n    \n    return report\n```\n\nThis function `err_fmt` constructs a formatted debug report as specified, using the provided `params`, `golds`, `ix`, and `warn_str` inputs. It ensures that the output matches the exact format required, including handling the previous and current predictions and labels correctly."}
{"task_id": 318, "completion_id": 0, "completion": "```\npython\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    \n    def decision_stump_predict(X, j, t, p):\n        \"\"\"Predict using a decision stump.\"\"\"\n        return p * np.where(X[:, j] >= t, 1, -1)\n    \n    n_samples, n_features = X_train.shape\n    D = np.ones(n_samples) / n_samples  # Initialize weights\n    alphas = []\n    stumps = []\n\n    for _ in range(n_estimators):\n        # Find the best stump\n        min_error = float('inf')\n        best_stump = {}\n        for j in range(n_features):\n            unique_vals = np.unique(X_train[:, j])\n            for t in unique_vals:\n                for p in [-1, 1]:\n                    predictions = decision_stump_predict(X_train, j, t, p)\n                    weighted_error = np.sum(D[y_train != predictions])\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump = {'feature': j, 'threshold': t, 'polarity': p}\n                        best_predictions = predictions\n        \n        # Calculate alpha\n        epsilon = min_error\n        alpha = 0.5 * math.log((1 - epsilon) / epsilon)\n        alphas.append(alpha)\n        stumps.append(best_stump)\n        \n        # Update weights\n        D *= np.exp(-alpha * y_train * best_predictions)\n        D /= np.sum(D)  # Normalize the weights\n\n    # Predict on test data\n    final_predictions = np.zeros(X_test.shape[0])\n    for alpha, stump in zip(alphas, stumps):\n        j, t, p = stump['feature'], stump['threshold'], stump['polarity']\n        final_predictions += alpha * decision_stump_predict(X_test, j, t, p)\n    \n    return [1 if pred >= 0 else -1 for pred in final_predictions]\n```\n\nThis script implements the AdaBoost.M1 algorithm from scratch using decision stumps as weak learners. It trains the model on the given training data and makes predictions on the test data, returning the predictions as a list of `-1` and `1`."}
{"task_id": 329, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n\n    # Calculate the frequency resolution\n    df = fs / N\n\n    if positive_only:\n        # Return only the non-negative frequencies\n        freqs = np.arange((N // 2) + 1) * df\n    else:\n        # Return all N bins arranged as NumPy\u2019s fftfreq does\n        freqs = np.fft.fftfreq(N, 1 / fs)\n\n    # Round the frequencies to 4 decimal places\n    freqs_rounded = np.round(freqs, 4)\n\n    # Convert to a regular Python list\n    return freqs_rounded.tolist()\n```\n\nThis script defines the `dft_bins` function, which calculates the center frequencies of DFT bins based on the given parameters. It handles both modes of frequency bin output and ensures that the result is rounded to four decimal places. If either `N` or `fs` is non-positive, it returns an empty list."}
{"task_id": 331, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    \n    n_samples = len(y_true)\n    \n    # Initialize a list to store OOB predictions for each sample\n    oob_predictions = []\n    \n    for i in range(n_samples):\n        # Get OOB predictions for the i-th sample\n        oob_preds = predictions[i, oob_mask[i]]\n        if len(oob_preds) > 0:\n            # Average the OOB predictions\n            oob_avg = np.mean(oob_preds)\n            oob_predictions.append((oob_avg, y_true[i]))\n    \n    # If no OOB predictions are available, return -1\n    if not oob_predictions:\n        return -1\n    \n    # Calculate the squared errors for the OOB predictions\n    squared_errors = [(pred - true) ** 2 for pred, true in oob_predictions]\n    \n    # Compute the mean of the squared errors\n    oob_mse_value = np.mean(squared_errors)\n    \n    # Return the OOB MSE rounded to 4 decimal places\n    return round(oob_mse_value, 4)\n```\n\nThis script defines the `oob_mse` function which computes the out-of-bag mean squared error for a Random Forest regressor based on the provided true target values, predictions from each tree, and the out-of-bag mask. The function handles cases where no out-of-bag predictions are available and returns the result rounded to four decimal places."}
{"task_id": 332, "completion_id": 0, "completion": "```\npython\nfrom collections import Counter\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    # Step 1: Compute the support for every item\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    \n    # Step 2: Discard items whose support is smaller than min_support\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_support}\n    \n    # Step 3: Create a global ordering of the remaining items\n    # First by decreasing support, then alphabetically to break ties\n    ordered_items = sorted(frequent_items, key=lambda x: (-frequent_items[x], x))\n    \n    # Step 4: Build the FP-Tree\n    root = {\"support\": 0, \"children\": {}}\n    \n    for transaction in transactions:\n        # Remove duplicates, keep only frequent items, and reorder them according to the global ordering\n        transaction = sorted(set(transaction) & frequent_items.keys(), key=lambda x: ordered_items.index(x))\n        \n        # Walk from the root and update/extend the path\n        current_node = root\n        for item in transaction:\n            if item not in current_node[\"children\"]:\n                current_node[\"children\"][item] = {\"support\": 0, \"children\": {}}\n            current_node = current_node[\"children\"][item]\n            current_node[\"support\"] += 1\n    \n    return root\n\n# Example usage:\ntransactions = [\n    ['m', 'n', 'o', 'p'],\n    ['n', 'o', 'p', 'q', 'r', 'x', 'y', 'z'],\n    ['m', 'n', 'o', 'p', 'q', 'r'],\n    ['m', 'n', 'o', 'p', 'x', 'y', 'z'],\n    ['m', 'n'],\n    ['m', 'n', 'o', 'p'],\n    ['m', 'n', 'o', 'q', 'r', 'x', 'y'],\n    ['n', 'o', 'r'],\n    ['p', 'q', 'y', 'z'],\n    ['m', 'n', 'o', 'p', 'q', 'y', 'z']\n]\n\nmin_support = 2\nfp_tree = build_fp_tree(transactions, min_support)\nprint(fp_tree)\n```\n\nThis script defines a function `build_fp_tree` that constructs an FP-Tree from a list of transactions and a minimum support threshold. The FP-Tree is represented as a nested dictionary, and the function follows the steps outlined in the task description. The example usage at the end demonstrates how to call the function and print the resulting FP-Tree."}
{"task_id": 336, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", Y: list[list[int | float]] | \"np.ndarray\" | None = None, c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    # Convert inputs to NumPy arrays for easier manipulation\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    \n    # Check if the number of columns is the same\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # Compute the kernel matrix\n    K = np.dot(X, Y.T) + c0\n    \n    # Round the results to 4 decimal places\n    K_rounded = np.round(K, 4)\n    \n    # Convert the result back to a list of lists\n    return K_rounded.tolist()\n\n# Example usage:\n# X = [[1, 2], [3, 4]]\n# Y = [[5, 6], [7, 8]]\n# print(linear_kernel(X, Y, c0=1))\n```\n\nThis script defines the `linear_kernel` function as specified, handling both Python lists and NumPy arrays, checking for compatible dimensions, and returning the kernel matrix rounded to four decimal places. If the dimensions are incompatible, it returns `-1`."}
{"task_id": 340, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n\n    # Update biased first moment estimate\n    m_t = beta1 * m + (1 - beta1) * grad\n    \n    # Update biased second raw moment estimate\n    v_t = beta2 * v + (1 - beta2) * grad**2\n    \n    # Compute bias-corrected first moment estimate\n    m_hat_t = m_t / (1 - beta1**t)\n    \n    # Compute bias-corrected second raw moment estimate\n    v_hat_t = v_t / (1 - beta2**t)\n    \n    # Update parameter\n    param_t = param - lr * m_hat_t / (np.sqrt(v_hat_t) + eps)\n    \n    # Return results as lists rounded to 8 decimal places\n    return (\n        param_t.round(8).tolist(),\n        m_t.round(8).tolist(),\n        v_t.round(8).tolist(),\n    )\n\n# Example usage:\n# param = np.array([[0.1, -0.1], [0.2, -0.2]])\n# grad = np.array([[0.01, -0.01], [0.02, -0.02]])\n# m = np.zeros_like(param)\n# v = np.zeros_like(param)\n# t = 1\n# result = adam_update(param, grad, t, m, v)\n# print(result)\n```\n\nThis script defines the `adam_update` function, which performs a single step of the Adam optimization algorithm. The function updates the parameter, first moment estimate, and second moment estimate according to the Adam update rules. The results are returned as lists rounded to 8 decimal places."}
{"task_id": 343, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                          rewards: list[float] | np.ndarray,\n                          retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # Determine the number of samples to retain\n    num_samples_to_retain = int(retain_prcnt * len(theta_samples))\n    \n    # Get the indices that would sort the rewards in descending order\n    sorted_indices = np.argsort(rewards)[::-1]\n    \n    # Retain the top 'retain_prcnt' fraction of samples\n    elite_indices = sorted_indices[:num_samples_to_retain]\n    elite_samples = theta_samples[elite_indices]\n    \n    # Compute the mean and variance of the retained samples\n    mean = np.mean(elite_samples, axis=0)\n    variance = np.var(elite_samples, axis=0)\n    \n    # Round the results to four decimal places\n    mean_rounded = np.round(mean, 4).tolist()\n    variance_rounded = np.round(variance, 4).tolist()\n    \n    return mean_rounded, variance_rounded\n```\n\nThis script defines the `cross_entropy_update` function, which performs the required operations to compute the mean and variance of the top-performing parameter samples according to the specified rewards and retention percentage. The results are rounded to four decimal places before being returned as lists."}
{"task_id": 353, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    \n    # Count the occurrences of each label\n    label_counts = Counter(labels)\n    total_labels = len(labels)\n    \n    # Calculate the entropy\n    entropy_value = 0.0\n    for count in label_counts.values():\n        p_i = count / total_labels\n        entropy_value -= p_i * math.log2(p_i)\n    \n    return round(entropy_value, 5)\n\n# Example usage:\n# labels = ['a', 'b', 'a', 'c', 'a', 'b']\n# print(entropy(labels))  # Output should be the entropy of the distribution of labels\n```\n\nThis script defines a function `entropy` that calculates the Shannon entropy of a given set of class labels. It handles edge cases such as empty input and identical labels, and rounds the result to five decimal places."}
{"task_id": 354, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kernel_rows, kernel_cols, in_ch, out_ch = W.shape\n\n    # Determine padding\n    if isinstance(pad, int):\n        pad = (pad, pad, pad, pad)\n    elif isinstance(pad, tuple):\n        if len(pad) == 2:\n            pad = (pad[0], pad[0], pad[1], pad[1])\n    elif pad == 'same':\n        pr = ((in_rows - 1) * stride + kernel_rows - in_rows) // 2\n        pc = ((in_cols - 1) * stride + kernel_cols - in_cols) // 2\n        pad = (pr, pr, pc, pc)\n\n    # Apply padding\n    X_padded = np.pad(X, ((0, 0), (pad[0], pad[1]), (pad[2], pad[3]), (0, 0)), mode='constant')\n\n    # Compute output dimensions\n    out_rows = (in_rows + pad[0] + pad[1] - (kernel_rows - 1) * dilation - 1) // stride + 1\n    out_cols = (in_cols + pad[2] + pad[3] - (kernel_cols - 1) * dilation - 1) // stride + 1\n\n    # Perform im2col\n    X_col = np.zeros((kernel_rows * kernel_cols * in_ch, out_rows * out_cols * n_ex))\n    for ex in range(n_ex):\n        for row in range(out_rows):\n            for col in range(out_cols):\n                r_start = row * stride\n                c_start = col * stride\n                r_end = r_start + kernel_rows * (dilation + 1) - dilation\n                c_end = c_start + kernel_cols * (dilation + 1) - dilation\n                X_col[:, row * out_cols * n_ex + col * n_ex + ex] = X_padded[ex, r_start:r_end:dilation+1, c_start:c_end:dilation+1, :].flatten()\n\n    # Perform GEMM\n    W_col = W.reshape(kernel_rows * kernel_cols * in_ch, out_ch)\n    out_col = W_col.T @ X_col\n\n    # Reshape output to 4D array\n    out = out_col.T.reshape(n_ex, out_rows, out_cols, out_ch)\n\n    # Convert to list\n    return out.tolist()\n```\n\nThis script defines the `conv2D` function, which performs 2-D convolution using the `im2col` method and matrix multiplication (GEMM). The function handles different padding specifications and dilation, and returns the result as a nested Python list."}
{"task_id": 355, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # Step 1: Standardise the data by subtracting the feature-wise mean\n    mean = np.mean(data, axis=0)\n    centred_data = data - mean\n\n    # Step 2: Obtain the principal directions using the chosen solver\n    if solver == \"svd\":\n        U, S, Vt = np.linalg.svd(centred_data, full_matrices=False)\n        eigen_vectors = Vt.T\n        explained_variance = S**2 / (len(data) - 1)\n    elif solver == \"eigen\":\n        cov_matrix = np.cov(centred_data, rowvar=False, ddof=1)\n        eigen_values, eigen_vectors = np.linalg.eigh(cov_matrix)\n        # Sort eigenvalues and eigenvectors in descending order\n        idx = np.argsort(-eigen_values)\n        eigen_values = eigen_values[idx]\n        eigen_vectors = eigen_vectors[:, idx]\n        explained_variance = eigen_values\n    else:\n        raise ValueError(\"Solver must be either 'svd' or 'eigen'\")\n\n    # Step 3: Sort the directions in descending order of their importance\n    # and keep the first n_components of them\n    n_components = min(n_components, len(eigen_values))\n    eigen_vectors = eigen_vectors[:, :n_components]\n    explained_variance = explained_variance[:n_components]\n\n    # Step 4: Make the sign of every kept direction deterministic\n    for i in range(n_components):\n        first_non_zero_idx = np.where(eigen_vectors[:, i] != 0)[0][0]\n        if eigen_vectors[first_non_zero_idx, i] < 0:\n            eigen_vectors[:, i] *= -1\n\n    # Step 5: Project the centred data onto the retained directions (the score matrix)\n    scores = centred_data @ eigen_vectors\n\n    # Step 6: Return the final results rounded to 4 decimals\n    scores_rounded = np.round(scores, 4).tolist()\n    total_variance = np.sum(np.var(centred_data, axis=0))\n    explained_variance_ratio = np.round(explained_variance / total_variance, 4).tolist()\n\n    return scores_rounded, explained_variance_ratio\n```"}
{"task_id": 356, "completion_id": 0, "completion": "```\npython\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # For classification, return the index of the maximum probability\n        return int(numpy.argmax(leaf.value))\n    else:\n        # For regression, return the value directly\n        return leaf.value\n\n# Example usage:\n# Classification leaf\nclassification_leaf = Leaf([0.1, 0.2, 0.7])\nprint(leaf_predict(classification_leaf, classifier=True))  # Output: 2\n\n# Regression leaf\nregression_leaf = Leaf(15.5)\nprint(leaf_predict(regression_leaf, classifier=False))  # Output: 15.5\n```\n\nNote: The provided code assumes that `numpy` is imported. If you run this code in an environment where `numpy` is not available, you should import it at the beginning of your script:\n\n```python\nimport numpy\n```"}
{"task_id": 357, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    # Step 1: Initialize the centroids with the first K samples\n    centroids = data[:K].copy()\n    \n    for _ in range(max_iters):\n        # Step 2: Assign every sample to the closest centroid\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Step 3: Recompute every centroid\n        new_centroids = np.array([data[labels == k].mean(axis=0) if np.any(labels == k) else centroids[k] for k in range(K)])\n        \n        # Check for convergence\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 1e-6):\n            break\n        \n        centroids = new_centroids\n    \n    # Sort the centroids lexicographically and round to four decimals\n    sorted_centroids = sorted(centroids, key=lambda x: tuple(x))\n    rounded_centroids = [[round(coord, 4) for coord in centroid] for centroid in sorted_centroids]\n    \n    return rounded_centroids\n\n# Example usage\ndata = np.array([[1, 1],\n                 [1, 2],\n                 [2, 1],\n                 [8, 8],\n                 [9, 8],\n                 [8, 9]])\nK = 2\nprint(kmeans(data, K))\n```\n\nThis script implements the K-Means clustering algorithm as described, initializing centroids with the first K samples, iterating to assign samples to the nearest centroid, updating centroids, and checking for convergence. The final centroids are sorted lexicographically and rounded to four decimal places before being returned."}
{"task_id": 362, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | \"np.ndarray\") -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert the input data to a float NumPy array\n    matrix = np.array(data, dtype=float)\n    \n    # Compute the sum of every row\n    row_sums = np.sum(matrix, axis=1)\n    \n    # Check if any row sum is 0\n    if np.any(row_sums == 0):\n        return -1\n    \n    # Divide every element in a row by that row's sum\n    stochastic_matrix = matrix / row_sums[:, np.newaxis]\n    \n    # Round every entry to 4 decimal places\n    stochastic_matrix_rounded = np.round(stochastic_matrix, 4)\n    \n    # Convert the result to a native Python list\n    return stochastic_matrix_rounded.tolist()\n\n# Example usage:\n# data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n# print(row_stochastic_matrix(data))\n# Output: [[0.1667, 0.3333, 0.5], [0.2667, 0.3333, 0.4], [0.2308, 0.2692, 0.3077]]\n```\n\nThis script defines a function `row_stochastic_matrix` that performs the required operations to convert a 2-D list or NumPy array into a row-stochastic matrix, rounding each element to four decimal places. If any row sum is zero, it returns `-1` to indicate that normalization is impossible."}
{"task_id": 363, "completion_id": 0, "completion": "```\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    \n    def is_all_boxes(space: Space) -> bool:\n        if isinstance(space, Box):\n            return True\n        elif isinstance(space, Tuple):\n            return all(is_all_boxes(sub_space) for sub_space in space.spaces)\n        elif isinstance(space, Dict):\n            return all(is_all_boxes(sub_space) for sub_space in space.spaces.values())\n        else:\n            return False\n\n    cont_action = is_all_boxes(env.action_space) if tuple_action else isinstance(env.action_space, Box)\n    cont_obs = is_all_boxes(env.observation_space) if tuple_obs else isinstance(env.observation_space, Box)\n    \n    return (cont_action, cont_obs)\n\n# Example usage:\n# env = Env(Tuple([Box(0, 1, (1,)), Box(0, 1, (1,))]), Dict({\"obs\": Box(0, 1, (1,))}))\n# print(is_continuous(env, tuple_action=True, tuple_obs=True))  # Output: (True, True)\n```"}
{"task_id": 369, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    # Initialize running prediction with zeros having the same shape as a single update array\n    running_pred = np.zeros_like(updates[0])\n\n    # Aggregate the updates\n    for u in updates:\n        running_pred -= learning_rate * u\n\n    # Handle regression or classification\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        # Apply soft-max to get class probabilities\n        exp_running_pred = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        class_probabilities = exp_running_pred / np.sum(exp_running_pred, axis=1, keepdims=True)\n        # Get the predicted class labels\n        return np.argmax(class_probabilities, axis=1)\n```\n\nThis script defines the `gradient_boosting_predict` function as specified, which aggregates the outputs of gradient boosting trees for both regression and classification tasks. The function uses NumPy for all operations, ensuring it is fully vectorized and efficient."}
{"task_id": 371, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    \n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, _, out_channels = W.shape\n    \n    # Calculate effective kernel width considering dilation\n    effective_kernel_width = (kernel_width - 1) * dilation + 1\n    \n    # Determine padding\n    if isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple):\n        p_left, p_right = pad\n    elif pad == \"same\":\n        out_len = np.ceil(signal_length / stride).astype(int)\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel_width - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    else:\n        raise ValueError(\"Invalid padding value\")\n    \n    # Pad the input\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    \n    # Calculate output dimensions\n    out_length = (signal_length + p_left + p_right - effective_kernel_width) // stride + 1\n    \n    # Initialize output\n    output = np.zeros((n_examples, out_length, out_channels))\n    \n    # Perform convolution\n    for i in range(n_examples):\n        for j in range(out_length):\n            start = j * stride\n            end = start + effective_kernel_width\n            x_slice = X_padded[i, start:end:1+dilation, :]\n            output[i, j, :] = np.sum(x_slice[:, :, np.newaxis] * W, axis=(0, 1))\n    \n    return output.tolist()\n```\n\nThis script defines the `conv1D` function which performs a 1-D cross-correlation between a batch of 1-D, multi-channel signals (`X`) and a bank of kernels (`W`). The function supports batches, multiple input/output channels, different types of padding, stride, and dilation. The result is returned as a nested Python list."}
{"task_id": 373, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gini(y: list[int] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    \n    # Convert to numpy array if it's not already\n    y = np.array(y)\n    \n    # Count the occurrences of each class\n    class_counts = np.bincount(y)\n    \n    # Calculate the total number of samples\n    N = len(y)\n    \n    # Calculate the probability of each class\n    p_c = class_counts / N\n    \n    # Calculate the Gini impurity\n    gini_impurity = 1 - np.sum(p_c ** 2)\n    \n    # Return the Gini impurity rounded to 4 decimal places\n    return round(gini_impurity, 4)\n\n# Example usage:\n# y = [0, 1, 1, 0, 1, 2]\n# print(gini(y))  # Output: 0.6111\n```"}
{"task_id": 374, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    # Check if the number of samples in X and y are consistent\n    if X.shape[0] != y.shape[0]:\n        return -1\n\n    # Initialize parameters\n    m, n = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n\n    # Perform gradient descent\n    for _ in range(n_iterations):\n        # Calculate predictions\n        y_pred = X @ theta + b\n\n        # Calculate gradients\n        dw = (2 / m) * (X.T @ (y_pred - y))\n        db = (2 / m) * np.sum(y_pred - y)\n\n        # Update parameters\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n\n    # Return the learned parameters rounded to 4 decimal places\n    return [round(weight, 4) for weight in theta], round(b, 4)\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [4, 5]])\n# y = np.array([3, 5, 7])\n# weights, bias = linear_regression_gd(X, y, learning_rate=0.01, n_iterations=1000)\n# print(\"Weights:\", weights)\n# print(\"Bias:\", bias)\n```\n\nThis script defines a function `linear_regression_gd` that performs multiple linear regression using batch gradient descent. It checks for consistency in the input data, initializes parameters, iteratively updates them using gradient descent, and returns the learned parameters rounded to four decimal places."}
{"task_id": 376, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Convert the input list of lists to a NumPy array\n    X_np = np.array(X)\n    \n    # Check if the matrix is square\n    if X_np.shape[0] != X_np.shape[1]:\n        return False\n    \n    # Check if the matrix is symmetric using np.allclose to handle floating-point precision\n    return np.allclose(X_np, X_np.T, atol=1e-8)\n\n# Example usage:\n# symmetric_matrix = [[1, 2, 3], [2, 5, 6], [3, 6, 9]]\n# print(is_symmetric(symmetric_matrix))  # Output: True\n\n# non_symmetric_matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n# print(is_symmetric(non_symmetric_matrix))  # Output: False\n\n# non_square_matrix = [[1, 2], [3, 4], [5, 6]]\n# print(is_symmetric(non_square_matrix))  # Output: False\n```\n\nThis script defines a function `is_symmetric` that checks if a given 2-D numeric array is symmetric with respect to its main diagonal, considering floating-point precision using NumPy's `allclose` function. The function first converts the input list of lists into a NumPy array, checks if the array is square, and then compares the array with its transpose to determine symmetry."}
{"task_id": 377, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Computes the negative gradient of the logistic loss for binary classification.\n    \n    Parameters:\n    y (list): Binary class labels (0 or 1).\n    f (list): Current prediction scores (floats).\n    \n    Returns:\n    list: List of negative gradients rounded to four decimal places, or -1 if y contains invalid values.\n    \"\"\"\n    # Check if all labels are either 0 or 1\n    if not all(label in [0, 1] for label in y):\n        return -1\n    \n    # Convert labels to {-1, 1}\n    y_prime = np.array([2 * label - 1 for label in y])\n    f = np.array(f)\n    \n    # Compute the negative gradient\n    g = y_prime / (1 + np.exp(y_prime * f))\n    \n    # Return the list of negative gradients rounded to four decimal places\n    return [round(g_i, 4) for g_i in g]\n\n# Example usage:\n# y = [0, 1, 1, 0]\n# f = [0.1, -0.2, 0.5, -0.3]\n# print(logistic_negative_gradient(y, f))\n```\n\nThis script defines a function `logistic_negative_gradient` that calculates the negative gradient of the logistic loss for binary classification. It first checks if the labels are valid (either 0 or 1), converts them to the set {-1, 1}, and then computes the negative gradient using the provided formula. The result is a list of negative gradients rounded to four decimal places. If the labels contain invalid values, the function returns -1."}
{"task_id": 380, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    # Constants\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n    \n    # Convert input to numpy array for easy manipulation\n    x = np.asarray(x)\n    \n    if order == 0:\n        # SELU(x) = scale * ELU(x, alpha)\n        selu_values = scale * np.where(x > 0, x, alpha * (np.exp(x) - 1))\n        result = np.round(selu_values, 4).tolist()\n    elif order == 1:\n        # First derivative of SELU(x)\n        first_derivative = scale * np.where(x > 0, 1, alpha * np.exp(x))\n        result = np.round(first_derivative, 4).tolist()\n    elif order == 2:\n        # Second derivative of SELU(x)\n        second_derivative = scale * np.where(x > 0, 0, alpha * np.exp(x))\n        result = np.round(second_derivative, 4).tolist()\n    else:\n        raise ValueError(\"Order must be 0, 1, or 2.\")\n    \n    return result\n\n# Example usage:\n# print(selu(-1.0, order=0))  # SELU(-1.0)\n# print(selu(-1.0, order=1))  # First derivative at -1.0\n# print(selu(-1.0, order=2))  # Second derivative at -1.0\n```\n\nThis script defines the `selu` function that computes the SELU activation and its first and second derivatives for a given input `x`. The function handles scalar, 1-D, and multi-D inputs and returns the results as Python lists, rounded to 4 decimal places."}
{"task_id": 387, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Initial prediction: mean of the targets\n    y_pred = np.full_like(y, np.mean(y))\n    \n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y - y_pred\n        \n        # Sort indices by x value\n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        sorted_residuals = residuals[sorted_indices]\n        \n        # Initialize variables to track the best split\n        best_split = None\n        best_sse = float('inf')\n        best_left_mean = None\n        best_right_mean = None\n        \n        # Evaluate all possible splits\n        for i in range(len(sorted_x) - 1):\n            if sorted_x[i] == sorted_x[i + 1]:\n                continue  # Skip if the split is between identical values\n            \n            # Candidate split point\n            t = (sorted_x[i] + sorted_x[i + 1]) / 2.0\n            \n            # Split the data\n            left_indices = sorted_indices[:i + 1]\n            right_indices = sorted_indices[i + 1:]\n            \n            # Calculate means of residuals on each side\n            r_L = sorted_residuals[:i + 1]\n            r_R = sorted_residuals[i + 1:]\n            \n            left_mean = np.mean(r_L)\n            right_mean = np.mean(r_R)\n            \n            # Calculate sum of squared errors\n            sse = np.sum((r_L - left_mean) ** 2) + np.sum((r_R - right_mean) ** 2)\n            \n            # Update best split if current one is better\n            if sse < best_sse:\n                best_sse = sse\n                best_split = t\n                best_left_mean = left_mean\n                best_right_mean = right_mean\n        \n        # If no valid split was found, use global mean residual\n        if best_split is None:\n            stump_pred = np.full_like(y, np.mean(residuals))\n        else:\n            # Apply the best split\n            stump_pred = np.where(x <= best_split, best_left_mean, best_right_mean)\n        \n        # Update predictions\n        y_pred += learning_rate * stump_pred\n    \n    # Return predictions rounded to 4 decimal places\n    return np.round(y_pred, 4).tolist()\n\n# Example usage\nx = [1.0, 2.0, 3.0, 4.0, 5.0]\ny = [2.0, 3.0, 5.0, 7.0, 11.0]\nn_estimators = 3\nlearning_rate = 0.1\npredictions = gradient_boosting_1d(x, y, n_estimators, learning_rate)\nprint(predictions)\n```\n\nThis script defines a `gradient_boosting_1d` function that implements a simple 1-dimensional gradient boosting regressor using decision stumps. The function takes in a single feature `x`, target values `y`, the number of boosting rounds `n_estimators`, and a `learning_rate`. It returns the in-sample predictions rounded to four decimal places."}
{"task_id": 394, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-8\n    \n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    \n    # Update the running average of the squared gradients\n    Eg = rho * Eg + (1 - rho) * grad ** 2\n    \n    # Update the parameters\n    w = w - learning_rate * grad / np.sqrt(Eg + epsilon)\n    \n    # Round to 4 decimal places and convert to lists\n    w_next = np.round(w, 4).tolist()\n    Eg_next = np.round(Eg, 4).tolist()\n    \n    return w_next, Eg_next\n```\n\nThis script defines the `rmsprop_update` function which performs a single update step of the RMSprop optimizer. It handles the initialization of the running average of squared gradients, updates the parameters and the running average according to the RMSprop update rule, and returns both the updated parameters and the updated running average as lists rounded to four decimal places."}
{"task_id": 398, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    # Convert input to a NumPy array for vectorized operations\n    x_array = np.array(x)\n    \n    if not derivative:\n        # Compute ELU activation\n        result = np.where(x_array >= 0, x_array, alpha * (np.exp(x_array) - 1))\n    else:\n        # Compute ELU gradient\n        elu_values = np.where(x_array >= 0, x_array, alpha * (np.exp(x_array) - 1))\n        result = np.where(x_array >= 0, 1, elu_values + alpha)\n    \n    # Round the result to 4 decimal places and convert to a list\n    return [round(value, 4) for value in result]\n\n# Example usage:\n# x = [-1.0, 0.0, 1.0, 2.0]\n# print(elu(x))  # Output: [0.0903, 0.0000, 1.0000, 2.0000]\n# print(elu(x, derivative=True))  # Output: [0.1903, 1.0000, 1.0000, 1.0000]\n```\n\nThis script defines the `elu` function that computes either the ELU activation or its gradient based on the `derivative` flag. The function handles both Python lists and NumPy arrays as input, performs the necessary computations using NumPy's vectorized operations, and returns the results as a list of floats rounded to four decimal places."}
{"task_id": 411, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def analyze(data):\n        tuple_data = any(isinstance(x, (list, tuple, np.ndarray)) for x in data)\n        if tuple_data:\n            flattened = [item for sublist in data for item in sublist]\n            dim = len(data[0])\n            multidim = dim > 1\n        else:\n            flattened = data\n            dim = 1\n            multidim = False\n        \n        unique_values = np.unique(flattened)\n        continuous = any(not isinstance(x, int) and isinstance(x, float) for x in unique_values)\n        n_per_dim = [len(np.unique([x[i] for x in data])) for i in range(dim)]\n        ids = [sorted(np.unique([x[i] for x in data])) for i in range(dim)]\n        \n        return {\n            'tuple': tuple_data,\n            'multidim': multidim,\n            'continuous': continuous,\n            'n_per_dim': n_per_dim,\n            'dim': dim,\n            'ids': ids\n        }\n\n    action_stats = analyze(actions)\n    observation_stats = analyze(observations)\n\n    return {\n        'tuple_actions': action_stats['tuple'],\n        'tuple_observations': observation_stats['tuple'],\n        'multidim_actions': action_stats['multidim'],\n        'multidim_observations': observation_stats['multidim'],\n        'continuous_actions': action_stats['continuous'],\n        'continuous_observations': observation_stats['continuous'],\n        'n_actions_per_dim': action_stats['n_per_dim'],\n        'action_dim': action_stats['dim'],\n        'n_obs_per_dim': observation_stats['n_per_dim'],\n        'obs_dim': observation_stats['dim'],\n        'action_ids': action_stats['ids'],\n        'obs_ids': observation_stats['ids']\n    }\n\n# Example usage\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]\nprint(env_stats(actions, observations))\n```\n\nThis script defines the `env_stats` function, which analyzes the given actions and observations lists to compute the required statistics and returns them in a dictionary format as specified. The function uses a helper function `analyze` to handle the common logic for both actions and observations."}
{"task_id": 413, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    \n    def mean_squared_error(y, y_pred):\n        return np.mean((y - y_pred) ** 2)\n    \n    def best_split(X, y):\n        best_mse = np.inf\n        best_feature = None\n        best_threshold = None\n        for feature in range(X.shape[1]):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                left_mask = X[:, feature] <= threshold\n                right_mask = X[:, feature] > threshold\n                y_left = y[left_mask]\n                y_right = y[right_mask]\n                if len(y_left) == 0 or len(y_right) == 0:\n                    continue\n                y_left_pred = np.mean(y_left)\n                y_right_pred = np.mean(y_right)\n                mse = (np.mean((y_left - y_left_pred) ** 2) * len(y_left) +\n                       np.mean((y_right - y_right_pred) ** 2) * len(y_right)) / len(y)\n                if mse < best_mse:\n                    best_mse = mse\n                    best_feature = feature\n                    best_threshold = threshold\n        return best_feature, best_threshold, best_mse\n    \n    def build_tree(X, y, depth=0):\n        if depth >= max_depth or len(np.unique(y)) == 1:\n            return np.mean(y)\n        \n        feature, threshold, mse = best_split(X, y)\n        if mse == np.inf:\n            return np.mean(y)\n        \n        left_mask = X[:, feature] <= threshold\n        right_mask = X[:, feature] > threshold\n        \n        left_tree = build_tree(X[left_mask], y[left_mask], depth + 1)\n        right_tree = build_tree(X[right_mask], y[right_mask], depth + 1)\n        \n        return (feature, threshold, left_tree, right_tree)\n    \n    def predict_tree(tree, X):\n        if isinstance(tree, float):\n            return tree\n        feature, threshold, left_tree, right_tree = tree\n        if X[feature] <= threshold:\n            return predict_tree(left_tree, X)\n        else:\n            return predict_tree(right_tree, X)\n    \n    def predict_trees(trees, X):\n        predictions = np.array([predict_tree(tree, x) for tree in trees])\n        return np.mean(predictions, axis=0)\n    \n    y_pred = np.full(y_train.shape, np.mean(y_train))\n    trees = []\n    \n    for _ in range(n_estimators):\n        residuals = y_train - y_pred\n        tree = build_tree(X_train, residuals)\n        trees.append(tree)\n        y_pred += learning_rate * np.array([predict_tree(tree, x) for x in X_train])\n    \n    final_predictions = np.array([predict_tree(tree, x) for tree in trees]).T\n    final_predictions = np.mean(final_predictions, axis=1)\n    final_predictions = np.full(X_test.shape[0], np.mean(y_train)) + learning_rate * np.array([predict_trees(trees, x) for x in X_test])\n    \n    return [round(float(pred), 4) for pred in final_predictions]\n\n# Example usage:\n# X_train = np.array([[1, 2], [3, 4], [5, 6]])\n# y_train = np.array([10, 20, 30])\n# X_test = np.array([[2, 3]])\n# predictions = gbdt_regression(X_train, y_train, X_test)\n# print(predictions)\n```\n\nThis script implements a simplified version of Gradient Boosting Decision Trees (GBDT) for regression using NumPy. It includes functions to compute the mean squared error, find the best split for a tree, build a tree recursively, and make predictions using the constructed trees. The main function `gbdt_regression` trains the model and returns predictions for the test set, rounded to four decimal places."}
{"task_id": 416, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Computes the multivariate Gaussian probability density function for each data point in X.\n\n    Parameters:\n    X (np.array): A 2D NumPy array of shape (n_samples, n_features) representing the data points.\n    mean (np.array): A 1D NumPy array of shape (n_features,) representing the mean vector of the distribution.\n    cov (np.array): A 2D NumPy array of shape (n_features, n_features) representing the covariance matrix of the distribution.\n\n    Returns:\n    list: A list of floats representing the PDF values for each data point in X, rounded to 4 decimal places.\n    \"\"\"\n    # Ensure X is 2D\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n    \n    n_samples, n_features = X.shape\n    det_cov = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    norm_factor = 1 / math.sqrt((2 * math.pi) ** n_features * det_cov)\n    \n    pdf_values = []\n    for i in range(n_samples):\n        diff = X[i] - mean\n        exponent = -0.5 * np.dot(diff.T, np.dot(inv_cov, diff))\n        pdf_value = norm_factor * math.exp(exponent)\n        pdf_values.append(round(pdf_value, 4))\n    \n    return pdf_values\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4]])\n# mean = np.array([0, 0])\n# cov = np.array([[1, 0], [0, 1]])\n# print(multivariate_gaussian_pdf(X, mean, cov))\n```\n\nThis script defines a function `multivariate_gaussian_pdf` that calculates the multivariate Gaussian probability density function for each data point in a given dataset `X` using the specified mean vector `mean` and covariance matrix `cov`. The function handles both one-dimensional and two-dimensional input arrays for `X` and returns a list of PDF values rounded to four decimal places."}
{"task_id": 419, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    # Step 1: Add intercept column if required\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n    \n    # Step 2: Handle the prior parameters\n    M = X.shape[1]\n    \n    # Ensure mu is a numpy array of length M\n    if isinstance(mu, (int, float)):\n        mu = np.full(M, mu)\n    else:\n        mu = np.asarray(mu)\n    \n    # Ensure V is a numpy array of appropriate shape\n    if V is None:\n        V = np.eye(M)\n    elif isinstance(V, (int, float)):\n        V = V * np.eye(M)\n    elif len(V.shape) == 1:\n        V = np.diag(V)\n    else:\n        V = np.asarray(V)\n    \n    # Step 3: Compute the posterior distribution\n    V_inv = np.linalg.inv(V)\n    XTX = X.T @ X\n    XTy = X.T @ y\n    \n    Sigma_p = np.linalg.inv(V_inv + XTX)\n    mu_p = Sigma_p @ (V_inv @ mu + XTy)\n    \n    # Step 4: Compute the MAP predictive mean for X_new\n    y_pred = X_new @ mu_p\n    \n    # Round to 4 decimal places and return as a list\n    return [round(pred, 4) for pred in y_pred.tolist()]\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4]])\n# y = np.array([3, 5, 7])\n# X_new = np.array([[4, 5]])\n# print(bayesian_linear_regression_pred(X, y, X_new))\n```\n\nThis script implements Bayesian linear regression with a conjugate Gaussian prior and known observation variance. It handles various forms of the prior parameters and computes the Maximum A Posteriori (MAP) predictive mean for new data points. The predictions are rounded to four decimal places and returned as a list."}
{"task_id": 423, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculate the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\"\"\"\n    # Check if both lists have the same length\n    if len(actual) != len(predicted):\n        return -1\n    \n    # Check if all values are non-negative\n    if any(a < 0 for a in actual) or any(p < 0 for p in predicted):\n        return -1\n    \n    # Calculate RMSLE\n    n = len(actual)\n    log_diffs = np.log1p(predicted) - np.log1p(actual)\n    rmsle = np.sqrt(np.mean(log_diffs ** 2))\n    \n    # Return the result rounded to four decimal places\n    return round(rmsle, 4)\n\n# Example usage:\n# actual = [3, -0.5, 2, 7]\n# predicted = [2.5, 0.0, 2, 8]\n# print(root_mean_squared_log_error(actual, predicted))  # Should return -1 due to negative value in actual\n\n# actual = [3, 0.5, 2, 7]\n# predicted = [2.5, 0.0, 2, 8]\n# print(root_mean_squared_log_error(actual, predicted))  # Should return the RMSLE value\n```\n\nThis script defines the `root_mean_squared_log_error` function, which calculates the RMSLE between two lists of non-negative numbers. It includes input validation to ensure both lists are of the same length and contain only non-negative numbers. If the inputs are invalid, it returns -1. Otherwise, it computes and returns the RMSLE rounded to four decimal places."}
{"task_id": 428, "completion_id": 0, "completion": "```\npython\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    \n    if symmetric:\n        n = np.arange(window_len)\n    else:\n        n = np.arange(window_len + 1)[:-1]\n    \n    window = 0.5 - 0.5 * np.cos(2 * math.pi * n / (len(n) - 1))\n    window = np.round(window, 4)\n    \n    return window.tolist()\n\n# Example usage:\n# print(hann(5, symmetric=True))\n# print(hann(5, symmetric=False))\n```\n\nThis script defines a function `hann` that generates a Hann window of a specified length, with options for symmetric or periodic windows. The function handles special cases for window lengths less than or equal to 1 and ensures that all coefficients are rounded to four decimal places before returning them as a list."}
{"task_id": 433, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        # Assuming the shape is (out_channels, in_channels, kernel_height, kernel_width)\n        out_channels, in_channels, kernel_height, kernel_width = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        # For other tensors, take the first two dimensions directly\n        fan_in, fan_out = shape[0], shape[1]\n    \n    return float(fan_in), float(fan_out)\n\n# Example usage:\n# shape = (32, 3, 3, 3)  # Example for a 4D convolutional kernel\n# print(glorot_fan(shape))  # Output should be (81.0, 243.0)\n\n# shape = (128, 64)  # Example for a dense layer\n# print(glorot_fan(shape))  # Output should be (128.0, 64.0)\n```"}
{"task_id": 435, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]],\n                               y: list[float],\n                               n_estimators: int = 10,\n                               learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    \n    # Initialize predictions with the mean of y\n    y_pred = np.full_like(y, y.mean())\n    \n    # Special cases\n    if n_estimators <= 0 or learning_rate == 0:\n        return y_pred.round(4).tolist()\n    \n    # Gradient Boosting loop\n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y - y_pred\n        \n        # Fit an OLS linear model to predict residuals\n        # Add a column of ones for the intercept\n        X_with_intercept = np.c_[np.ones(X.shape[0]), X]\n        # Compute the OLS solution\n        beta = np.linalg.inv(X_with_intercept.T @ X_with_intercept) @ (X_with_intercept.T @ residuals)\n        \n        # Obtain the weak-learner prediction\n        h_t = X_with_intercept @ beta\n        \n        # Update the overall prediction\n        y_pred += learning_rate * h_t\n    \n    # Return the final prediction vector rounded to 4 decimal places\n    return y_pred.round(4).tolist()\n```\n\nThis script implements the Tiny Gradient Boosting Regressor as described in the task. It uses NumPy for numerical operations and follows the outlined steps to compute the predictions. The special cases where `n_estimators <= 0` or `learning_rate == 0` are handled by returning a vector filled with the mean of the target values."}
{"task_id": 437, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    # Convert input to a NumPy array for uniform processing\n    x_np = np.array(x, dtype=float)\n    \n    # Compute the sigmoid function\n    sigma_x = 1 / (1 + np.exp(-x_np))\n    \n    # Determine the output based on the order\n    if order == 0:\n        result = sigma_x\n    elif order == 1:\n        result = sigma_x * (1 - sigma_x)\n    elif order == 2:\n        result = sigma_x * (1 - sigma_x) * (1 - 2 * sigma_x)\n    else:\n        return -1\n    \n    # Round the result to 4 decimal places\n    result_rounded = np.round(result, 4)\n    \n    # Return the result in the appropriate format\n    if isinstance(x, (int, float)):\n        return float(result_rounded)\n    else:\n        return result_rounded.tolist()\n\n# Example usage:\n# print(sigmoid(0.5))  # Sigmoid value for scalar input\n# print(sigmoid([0.5, -1.0, 2.0], order=1))  # First derivative for list input\n# print(sigmoid(np.array([0.5, -1.0, 2.0]), order=2))  # Second derivative for ndarray input\n```\n\nThis script defines the `sigmoid` function that computes the logistic sigmoid function and its first and second derivatives based on the `order` parameter. The function handles scalar, list, and NumPy array inputs, and returns the results in the appropriate format, rounded to four decimal places."}
{"task_id": 438, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    # Convert input to a numpy array if it's not already\n    y = np.array(y)\n    \n    # Determine the number of classes if not provided\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    else:\n        # Check if the provided number of classes is sufficient\n        if num_classes < np.max(y) + 1:\n            return -1\n    \n    # Initialize the one-hot encoding matrix with zeros\n    one_hot_matrix = np.zeros((y.size, num_classes), dtype=int)\n    \n    # Set the appropriate indices to 1\n    one_hot_matrix[np.arange(y.size), y] = 1\n    \n    # Convert the matrix to a list of lists and return\n    return one_hot_matrix.tolist()\n\n# Example usage:\n# print(to_categorical([0, 1, 2, 1, 0]))  # Output: [[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0]]\n# print(to_categorical([0, 1, 2, 1, 0], num_classes=3))  # Output: [[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0]]\n# print(to_categorical([0, 1, 2, 1, 0], num_classes=2))  # Output: -1\n```\n\nThis script defines the `to_categorical` function as described, handling the conversion of class labels to one-hot encoding and checking for the validity of the `num_classes` parameter."}
{"task_id": 439, "completion_id": 0, "completion": "```\npython\nimport itertools\nfrom typing import Hashable\n\ndef apriori_frequent_itemsets(transactions: list[list[Hashable]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    def support(itemset):\n        return sum(1 for transaction in transactions if set(itemset).issubset(transaction)) / len(transactions)\n\n    def generate_candidates(frequent_itemsets, k):\n        # Generate candidate itemsets of size k\n        candidates = set()\n        for i in frequent_itemsets:\n            for j in frequent_itemsets:\n                if i[:-1] == j[:-1] and i[-1] < j[-1]:\n                    candidate = tuple(sorted(set(i) | set(j)))\n                    if all(tuple(sorted(candidate[:len(candidate) - 1] + [item])) in frequent_itemsets for item in candidate):\n                        candidates.add(candidate)\n        return candidates\n\n    # Step 1: Generate all single-item candidates and keep only those that are frequent\n    item_counts = {}\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] = item_counts.get(item, 0) + 1\n\n    frequent_itemsets = {item for item, count in item_counts.items() if count / len(transactions) >= min_sup}\n    frequent_itemsets = {tuple([item]) for item in frequent_itemsets}\n\n    # Initialize the list to store all frequent itemsets\n    all_frequent_itemsets = list(frequent_itemsets)\n\n    # Step 2: Generate size-k candidates and keep only those that are frequent\n    k = 2\n    while frequent_itemsets:\n        candidates = generate_candidates(frequent_itemsets, k)\n        frequent_itemsets = {candidate for candidate in candidates if support(candidate) >= min_sup}\n        all_frequent_itemsets.extend(frequent_itemsets)\n        k += 1\n\n    # Sort the frequent itemsets by length and then lexicographically\n    all_frequent_itemsets.sort(key=lambda x: (len(x), x))\n\n    return all_frequent_itemsets\n\n# Example usage:\n# transactions = [['milk', 'bread', 'butter'], ['milk', 'bread'], ['bread', 'butter'], ['milk', 'butter'], ['bread']]\n# min_sup = 0.6\n# print(apriori_frequent_itemsets(transactions, min_sup))\n```\n\nThis script implements the Apriori algorithm to find frequent itemsets in a transactional database. It starts with single-item candidates, generates candidates of increasing size, and prunes candidates that contain infrequent subsets. The frequent itemsets are returned in a list of tuples, ordered by length and then lexicographically."}
{"task_id": 440, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    # Convert the input list to a numpy array for easier manipulation\n    predictions_array = np.array(predictions)\n    \n    # Calculate the mean of probabilities across all estimators for each sample and class\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n    \n    # Round the averaged probabilities to 4 decimal places\n    averaged_probabilities_rounded = np.round(averaged_probabilities, 4)\n    \n    # Convert the numpy array back to a regular list\n    averaged_probabilities_list = averaged_probabilities_rounded.tolist()\n    \n    # Determine the predicted class for each sample by finding the index of the max probability\n    predicted_classes = np.argmax(averaged_probabilities_rounded, axis=1).tolist()\n    \n    return averaged_probabilities_list, predicted_classes\n```\n\nThis script defines the `aggregate_predictions` function as specified, which takes a three-level nested list of predictions, computes the average probabilities for each sample and class, rounds these probabilities to four decimal places, and then determines the predicted class for each sample based on the highest average probability. The function returns both the averaged probabilities and the predicted class indices as regular Python lists."}
{"task_id": 444, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    \n    # Check if feature dimensions match\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # Determine the number of features\n    C = X.shape[1]\n    \n    # Handle the default value for sigma\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    \n    # Validate sigma\n    if isinstance(sigma, list):\n        sigma = np.array(sigma)\n        if len(sigma) != C or any(s <= 0 for s in sigma):\n            return -1\n    elif isinstance(sigma, float):\n        if sigma <= 0:\n            return -1\n    else:\n        return -1\n    \n    # Compute the kernel matrix\n    # First, compute the squared Euclidean distance matrix\n    X_sq = np.sum(X**2, axis=1, keepdims=True)\n    Y_sq = np.sum(Y**2, axis=1)\n    dist_sq = X_sq + Y_sq - 2 * np.dot(X, Y.T)\n    \n    # Apply the RBF kernel\n    if isinstance(sigma, float):\n        kernel_matrix = np.exp(-0.5 * dist_sq / sigma**2)\n    else:\n        # Anisotropic case\n        sigma_sq = np.sum(sigma**2)\n        kernel_matrix = np.exp(-0.5 * dist_sq / sigma_sq)\n    \n    # Round to 4 decimal places and convert to a nested list\n    kernel_matrix_rounded = np.round(kernel_matrix, 4).tolist()\n    \n    return kernel_matrix_rounded\n\n# Example usage:\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0\nprint(rbf_kernel(X, Y, sigma))\n```\n\nThis script defines the `rbf_kernel` function as specified, handling both isotropic and anisotropic cases for the sigma parameter, and ensuring that all input validations are performed. The kernel matrix is computed and rounded to four decimal places before being returned as a nested list."}
{"task_id": 446, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of labels.\"\"\"\n    if len(labels) == 0:\n        return 0.0\n    label_counts = Counter(labels)\n    probabilities = [count / len(labels) for count in label_counts.values()]\n    return -sum(p * np.log2(p) for p in probabilities if p > 0)\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    \n    n_samples, n_features = X.shape\n    \n    # Calculate the entropy of the parent node\n    parent_entropy = entropy(y)\n    best_gain = 0.0\n    best_feature_index = -1\n    best_threshold = None\n    left_majority_label = None\n    right_majority_label = None\n    \n    # Find the majority label in y\n    majority_label = Counter(y).most_common(1)[0][0]\n    \n    # Iterate over each feature\n    for j in range(n_features):\n        # Sort the feature column and corresponding labels\n        sorted_indices = np.argsort(X[:, j])\n        sorted_X = X[sorted_indices, j]\n        sorted_y = y[sorted_indices]\n        \n        # Consider midpoints between successive distinct sorted values as thresholds\n        for i in range(n_samples - 1):\n            if sorted_X[i] != sorted_X[i + 1]:\n                t = (sorted_X[i] + sorted_X[i + 1]) / 2.0\n                \n                # Split the data based on the threshold\n                left_y = sorted_y[:i + 1]\n                right_y = sorted_y[i + 1:]\n                \n                # Calculate the proportions\n                p_left = len(left_y) / n_samples\n                p_right = len(right_y) / n_samples\n                \n                # Calculate the information gain\n                current_gain = parent_entropy - (p_left * entropy(left_y) + p_right * entropy(right_y))\n                \n                # Update the best split if the current gain is better\n                if current_gain > best_gain:\n                    best_gain = current_gain\n                    best_feature_index = j\n                    best_threshold = round(t, 4)\n                    left_majority_label = Counter(left_y).most_common(1)[0][0]\n                    right_majority_label = Counter(right_y).most_common(1)[0][0]\n    \n    if best_gain == 0.0:\n        return (-1, None, majority_label, majority_label)\n    \n    return (best_feature_index, best_threshold, left_majority_label, right_majority_label)\n```\n\nThis script defines a function `decision_stump` that calculates the best single-level split (decision stump) for a given dataset using information gain. It considers midpoints between successive distinct sorted values as potential thresholds for each feature and returns the feature index, threshold, and majority labels for the left and right child nodes of the split. If no split improves information gain, it returns the majority label for the entire dataset."}
{"task_id": 452, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom typing import List, Union\n\ndef divide_on_feature(X: Union[np.ndarray, List[List]], feature_i: int, threshold) -> List[List]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    # Convert X to a NumPy array if it isn't already\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    \n    # Initialize the two subsets\n    subset1 = []\n    subset2 = []\n    \n    # Iterate over each sample in X\n    for sample in X:\n        value = sample[feature_i]\n        if isinstance(threshold, (int, float)):\n            # Numeric threshold: check if value is greater than or equal to threshold\n            if value >= threshold:\n                subset1.append(sample.tolist())\n            else:\n                subset2.append(sample.tolist())\n        else:\n            # Non-numeric threshold: check if value is exactly equal to threshold\n            if value == threshold:\n                subset1.append(sample.tolist())\n            else:\n                subset2.append(sample.tolist())\n    \n    return [subset1, subset2]\n\n# Example usage:\nX_numeric = np.array([[1, 5], [3, 2], [4, 6], [2, 1]])\nresult_numeric = divide_on_feature(X_numeric, feature_i=0, threshold=3)\nprint(result_numeric)  # \u279c  [[ [3, 2], [4, 6] ], [ [1, 5], [2, 1] ]]\n\nX_categorical = np.array([[1, \"A\"], [2, \"B\"], [3, \"A\"], [4, \"C\"]])\nresult_categorical = divide_on_feature(X_categorical, feature_i=1, threshold=\"A\")\nprint(result_categorical)  # \u279c  [[ [1, \"A\"], [3, \"A\"] ], [ [2, \"B\"], [4, \"C\"] ]]\n```"}
{"task_id": 453, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    # Check for input consistency\n    if not (Q.shape == Q_next.shape and len(actions) == len(rewards) == len(dones) == Q.shape[0]):\n        return -1\n    if not (0 <= gamma <= 1):\n        return -1\n\n    # Initialize the target Q-values as a copy of the original Q-values\n    targets = np.copy(Q)\n\n    # Update the target Q-values for each sample in the batch\n    for i in range(len(actions)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        targets[i, actions[i]] = target\n\n    # Round the targets to 4 decimal places and convert to a nested list\n    return targets.round(4).tolist()\n```\n\nThis script defines the `update_q_values` function, which computes the target Q-values for training a Deep Q-Network. It checks for input consistency and ensures the discount factor `gamma` is within the valid range. If the inputs are valid, it updates the Q-values for the taken actions and returns the result as a nested list with each element rounded to four decimal places. If the inputs are invalid, it returns `-1`."}
{"task_id": 458, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    # Convert labels to a numpy array for easier manipulation\n    labels = np.array(labels)\n    \n    # Check for negative labels\n    if np.any(labels < 0):\n        return -1\n    \n    # Infer num_classes if not provided\n    if num_classes is None:\n        num_classes = np.max(labels) + 1\n    else:\n        # Check if num_classes is smaller than the required number of classes\n        if num_classes < np.max(labels) + 1:\n            return -1\n    \n    # Initialize the one-hot encoded matrix with zeros\n    one_hot_matrix = np.zeros((len(labels), num_classes), dtype=int)\n    \n    # Set the appropriate indices to 1\n    one_hot_matrix[np.arange(len(labels)), labels] = 1\n    \n    # Convert the numpy array to a list of lists and return\n    return one_hot_matrix.tolist()\n\n# Example usage:\n# labels = [0, 1, 2, 1, 0]\n# print(to_categorical(labels))  # Output: [[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0]]\n```"}
{"task_id": 461, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Step 1: Initialize the predictions to the mean of the targets\n    y_pred = np.full_like(y, np.mean(y))\n    \n    # Special case: if n_estimators is 0 or negative, return the initial predictions\n    if n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n    \n    for _ in range(n_estimators):\n        # Step 2a: Compute the residuals\n        residuals = y - y_pred\n        \n        # Step 2b: Find unique split values (excluding the greatest one)\n        unique_x = np.unique(x)[:-1]\n        \n        best_split = None\n        best_sse = float('inf')\n        v_L, v_R = 0, 0\n        \n        # Step 2c: Evaluate all possible splits\n        for t in unique_x:\n            left_indices = x <= t\n            right_indices = x > t\n            \n            # Avoid splits that result in empty sides\n            if not np.any(left_indices) or not np.any(right_indices):\n                continue\n            \n            # Calculate mean residuals for left and right sides\n            mean_left = np.mean(residuals[left_indices])\n            mean_right = np.mean(residuals[right_indices])\n            \n            # Calculate SSE for this split\n            sse = np.sum((residuals[left_indices] - mean_left) ** 2) + \\\n                  np.sum((residuals[right_indices] - mean_right) ** 2)\n            \n            # Step 2d: Choose the split with the smallest SSE\n            if sse < best_sse:\n                best_sse = sse\n                best_split = t\n                v_L = mean_left\n                v_R = mean_right\n        \n        # Step 2e: If no valid split was found, use the mean residual of the whole data\n        if best_split is None:\n            v_L = v_R = np.mean(residuals)\n        \n        # Predict using the best split\n        stump_pred = np.where(x <= best_split, v_L, v_R)\n        \n        # Step 2f: Update the ensemble prediction\n        y_pred += learning_rate * stump_pred\n    \n    # Return the final predictions rounded to 4 decimal places\n    return np.round(y_pred, 4).tolist()\n```\n\nThis script implements the gradient boosting regressor using decision stumps for one-dimensional regression data. It follows the steps outlined in the task description and handles special cases appropriately."}
{"task_id": 471, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    \n    if next_state is not None:\n        # Find the action(s) with the maximum Q-value in the next state\n        max_q_value = max(q_table[next_state])\n        greedy_actions = [a for a in range(num_actions) if q_table[next_state][a] == max_q_value]\n        \n        # Calculate the expected value of Q[next_state] under the epsilon-soft policy\n        expected_q_value = 0.0\n        for a in range(num_actions):\n            if a in greedy_actions:\n                expected_q_value += ((1 - epsilon + epsilon / num_actions) * q_table[next_state][a])\n            else:\n                expected_q_value += ((epsilon / num_actions) * q_table[next_state][a])\n        \n        # Calculate the target\n        target = reward + gamma * expected_q_value\n    else:\n        # Terminal state, no future expected value\n        target = reward\n    \n    # Update the Q-table\n    q_table[state][action] += lr * (target - q_table[state][action])\n    \n    # Round all entries to four decimal places\n    q_table = [[round(q, 4) for q in row] for row in q_table]\n    \n    return q_table\n```\n\nThis script implements the one-step Expected SARSA TD(0) update for a tabular Q-function. It handles both terminal and non-terminal states, updates the Q-table accordingly, and rounds all entries to four decimal places before returning the updated table."}
{"task_id": 474, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n\n    for i in range(m):\n        # Calculate the range for x and y coordinates\n        x_min = (i // 2 + 0.1) * 10\n        x_max = (i // 2 + 0.9) * 10\n        y_min = ((i % 2) * interval + 0.1) * 10\n        y_max = ((i % 2) * interval + 0.9) * 10\n        label = (i - 0.5) * 2\n\n        # Generate training data for class i\n        x_train = np.random.uniform(x_min, x_max, n_train)\n        y_train = np.random.uniform(y_min, y_max, n_train)\n        X_train.append(np.column_stack((x_train, y_train)))\n        Y_train.extend([label] * n_train)\n\n        # Generate validation data for class i\n        x_val = np.random.uniform(x_min, x_max, n_val)\n        y_val = np.random.uniform(y_min, y_max, n_val)\n        X_val.append(np.column_stack((x_val, y_val)))\n        Y_val.extend([label] * n_val)\n\n    # Concatenate and round the data\n    X_train = np.round(np.vstack(X_train), 4)\n    Y_train = np.array(Y_train)\n    X_val = np.round(np.vstack(X_val), 4)\n    Y_val = np.array(Y_val)\n\n    return X_train, X_val, Y_train, Y_val\n```\n\nThis script defines the `generate_data` function which generates a 2-D toy data set for a binary or multi-class classifier based on the provided parameters. The function ensures that the data is reproducible by using an optional random seed, and all coordinates are rounded to four decimal places."}
{"task_id": 475, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    # Initialize m_prev and v_prev if they are None\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    \n    # Update the first and second moments\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * (grad ** 2)\n    \n    # Compute bias-corrected moments\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    \n    # Update the parameters\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    \n    return w_new, m_new, v_new\n\n# Example usage\nw_new, m_new, v_new = adam_update(1.0, 0.1, 0.0, 0.0, 1)\nprint(round(w_new, 9))  # \u2248 0.999000001\n```\n\nThis script defines the `adam_update` function, which performs a single step of the Adam optimization algorithm. It handles both scalar and NumPy array inputs for the parameters and gradients. The function initializes the first and second moments to zero if they are not provided and updates them according to the Adam update rules. The bias-corrected moments are then used to update the parameters."}
{"task_id": 479, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    \n    N = len(rewards[0])  # Number of arms\n    value_estimates = [ev_prior] * N  # Initial value estimates\n    pull_counts = [0] * N  # Number of times each arm has been pulled\n\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            # Explore: choose a random arm\n            chosen_arm = np.random.choice(N)\n        else:\n            # Exploit: choose the arm with the highest estimated value\n            chosen_arm = np.argmax(value_estimates)\n        \n        # Increment the pull count for the chosen arm\n        pull_counts[chosen_arm] += 1\n        \n        # Observe the reward for the chosen arm\n        reward = rewards[t][chosen_arm]\n        \n        # Update the estimated value for the chosen arm using incremental sample mean\n        value_estimates[chosen_arm] += (reward - value_estimates[chosen_arm]) / pull_counts[chosen_arm]\n    \n    # Return the final estimated values rounded to 4 decimal places\n    return [round(value, 4) for value in value_estimates]\n```\n\nThis script defines the `epsilon_greedy_bandit` function, which simulates the \u03b5-greedy multi-armed bandit algorithm as described. The function takes a matrix of rewards, an exploration probability `epsilon`, an initial expected value `ev_prior`, and an optional random seed for reproducibility. It returns the final estimated values for each arm, rounded to four decimal places."}
{"task_id": 481, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n    \n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((point1 - point2) ** 2))\n    \n    def region_query(point_index):\n        neighbors = []\n        for i in range(len(data)):\n            if euclidean_distance(data[point_index], data[i]) <= eps:\n                neighbors.append(i)\n        return neighbors\n    \n    def expand_cluster(point_index, cluster_id):\n        seeds = region_query(point_index)\n        if len(seeds) < min_samples:\n            labels[point_index] = -1  # Mark as noise\n            return False\n        else:\n            labels[point_index] = cluster_id  # Mark as core point\n            i = 0\n            while i < len(seeds):\n                seed = seeds[i]\n                if labels[seed] == -1:  # If it's noise, change to border point\n                    labels[seed] = cluster_id\n                elif labels[seed] == -2:  # If it's unvisited, mark as core or border point\n                    labels[seed] = cluster_id\n                    new_seeds = region_query(seed)\n                    if len(new_seeds) >= min_samples:\n                        seeds += new_seeds  # Add new neighbors to seeds\n                i += 1\n            return True\n    \n    labels = [-2] * len(data)  # -2 means unvisited\n    cluster_id = 0\n    \n    for point_index in range(len(data)):\n        if labels[point_index] != -2:\n            continue\n        if expand_cluster(point_index, cluster_id):\n            cluster_id += 1\n    \n    return labels\n\n# Example usage:\n# data = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\n# eps = 3\n# min_samples = 2\n# print(dbscan(data, eps, min_samples))  # Output: [0, 0, 0, 1, 1, -1]\n```\n\nThis script defines a `dbscan` function that implements the DBSCAN clustering algorithm from scratch. It includes a helper function to calculate Euclidean distance and another to find all neighboring points within a given radius (`eps`). The core `dbscan` function iterates over each point, marking them as visited, noise, or part of a cluster based on the specified `eps` and `min_samples` parameters."}
{"task_id": 482, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.asarray(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    \n    if any(y < 0) or any(y >= num_classes):\n        raise ValueError(\"Labels must be non-negative and smaller than num_classes.\")\n    \n    one_hot = np.zeros((y.size, num_classes), dtype=int)\n    one_hot[np.arange(y.size), y] = 1\n    return one_hot\n\n# Example usage:\n# y = [0, 1, 2, 1]\n# print(to_categorical(y))\n# Output:\n# [[1 0 0]\n#  [0 1 0]\n#  [0 0 1]\n#  [0 1 0]]\n```\n\nThis script defines the `to_categorical` function, which converts a vector of integer class labels into a one-hot encoded 2-D NumPy array. The function handles the optional `num_classes` parameter and raises a `ValueError` if any label is out of the valid range. The example usage demonstrates how the function works."}
{"task_id": 485, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n\n    def build_tree(X, y, depth=0):\n        if len(X) < 2 or depth == max_depth:\n            return np.mean(y)\n\n        best_split = None\n        best_sse = float('inf')\n\n        for i in range(len(X) - 1):\n            split_point = (X[i] + X[i + 1]) / 2\n            left_indices = [j for j in range(len(X)) if X[j] <= split_point]\n            right_indices = [j for j in range(len(X)) if X[j] > split_point]\n\n            left_sse = np.sum((np.array(y)[left_indices] - np.mean(y[left_indices])) ** 2)\n            right_sse = np.sum((np.array(y)[right_indices] - np.mean(y[right_indices])) ** 2)\n            sse = left_sse + right_sse\n\n            if sse < best_sse:\n                best_sse = sse\n                best_split = split_point\n\n        if best_split is None:\n            return np.mean(y)\n\n        left_indices = [i for i in range(len(X)) if X[i] <= best_split]\n        right_indices = [i for i in range(len(X)) if X[i] > best_split]\n\n        left_subtree = build_tree(np.array(X)[left_indices], np.array(y)[left_indices], depth + 1)\n        right_subtree = build_tree(np.array(X)[right_indices], np.array(y)[right_indices], depth + 1)\n\n        return (best_split, left_subtree, right_subtree)\n\n    def predict(tree, x):\n        if isinstance(tree, float):\n            return tree\n\n        split_point, left_subtree, right_subtree = tree\n        if x <= split_point:\n            return predict(left_subtree, x)\n        else:\n            return predict(right_subtree, x)\n\n    if not X_train:\n        return []\n\n    X_train, y_train = zip(*sorted(zip(X_train, y_train)))\n    tree = build_tree(X_train, y_train)\n\n    return [predict(tree, x) for x in X_test]\n```\n\nThis script defines a function `regression_tree_predict` that builds a univariate regression tree using the CART algorithm and predicts target values for a given set of test points. The tree is built recursively by selecting the split point that minimizes the sum of squared errors (SSE) of the two resulting subsets. The recursion stops when the maximum depth is reached or when a node contains fewer than two samples. Each leaf node is labeled with the mean of the target values it contains. The function returns predictions for the test points by traversing the constructed tree."}
{"task_id": 490, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if isinstance(x, (list, tuple)):\n        x = np.array(x)\n    \n    if x.size == 0:\n        return []\n    \n    diag_matrix = np.diag(x)\n    return diag_matrix.tolist()\n\n# Example usage:\n# vector = [1, 2, 3]\n# print(make_diagonal(vector))  # Output: [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n```"}
{"task_id": 491, "completion_id": 0, "completion": "```\npython\nfrom collections import Counter, defaultdict\nimport itertools\n\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    \n    # Helper class for the FP-tree structure\n    class FPNode:\n        def __init__(self, item=None, count=0, parent=None):\n            self.item = item\n            self.count = count\n            self.parent = parent\n            self.children = defaultdict(FPNode)\n            self.link = None\n\n    def build_header_table(frequency):\n        return {item: None for item in sorted(frequency, key=lambda x: (-frequency[x], x))}\n\n    def insert_tree(transaction, tree, header_table):\n        prefix = transaction\n        if not prefix:\n            return\n        node = tree\n        for item in prefix:\n            if item in node.children:\n                node.children[item].count += 1\n            else:\n                new_node = FPNode(item, count=1, parent=node)\n                node.children[item] = new_node\n                # Update header table\n                if header_table[item] is None:\n                    header_table[item] = new_node\n                else:\n                    current_node = header_table[item]\n                    while current_node.link:\n                        current_node = current_node.link\n                    current_node.link = new_node\n            node = node.children[item]\n\n    def find_frequent_items(prefix, node, frequent_itemsets):\n        # Create a new prefix path\n        prefix_path = []\n        while node.parent:\n            prefix_path.append(node.item)\n            node = node.parent\n        # Add prefix path to frequent itemsets if it is not empty\n        if prefix_path:\n            frequent_itemsets.append((tuple(prefix) + tuple(sorted(prefix_path))))\n        # Recursively find frequent itemsets from the conditional tree\n        node = header_table[prefix[-1]].link\n        conditional_tree = defaultdict(FPNode)\n        while node:\n            conditional_prefix_path = []\n            parent = node.parent\n            while parent.parent:\n                conditional_prefix_path.append(parent.item)\n                parent = parent.parent\n            insert_tree(sorted(conditional_prefix_path, key=lambda x: (-frequency[x], x)), conditional_tree, header_table)\n            node = node.link\n        # Recursively find frequent itemsets from the conditional tree\n        if conditional_tree:\n            for item in sorted(header_table, key=lambda x: (-frequency[x], x)):\n                if conditional_tree.children[item] is not None:\n                    find_frequent_itemsets((item,), conditional_tree.children[item], frequent_itemsets)\n\n    # Count frequency of each item\n    frequency = Counter(item for transaction in transactions for item in transaction)\n    # Filter items below min_sup\n    frequency = {item: count for item, count in frequency.items() if count >= min_sup}\n    # Sort items by descending frequency and lexicographically\n    sorted_items = sorted(frequency, key=lambda x: (-frequency[x], x))\n\n    # Build the FP-tree\n    fp_tree = FPNode()\n    header_table = build_header_table(frequency)\n    for transaction in transactions:\n        transaction = [item for item in transaction if item in frequency]\n        transaction.sort(key=lambda x: (-frequency[x], x))\n        insert_tree(transaction, fp_tree, header_table)\n\n    # Extract frequent itemsets\n    frequent_itemsets = []\n    for item in sorted_items:\n        if header_table[item] is not None:\n            conditional_tree = defaultdict(FPNode)\n            node = header_table[item].link\n            while node:\n                conditional_prefix_path = []\n                parent = node.parent\n                while parent.parent:\n                    conditional_prefix_path.append(parent.item)\n                    parent = parent.parent\n                insert_tree(sorted(conditional_prefix_path, key=lambda x: (-frequency[x], x)), conditional_tree, header_table)\n                node = node.link\n            # Recursively find frequent itemsets from the conditional tree\n            if conditional_tree:\n                find_frequent_itemsets((item,), conditional_tree.children[item], frequent_itemsets)\n\n    # Sort the frequent itemsets by length and lexicographically\n    frequent_itemsets = sorted(set(frequent_itemsets), key=lambda x: (len(x), x))\n    return frequent_itemsets\n\n# Example usage\ntransactions = [\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"A\", \"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"C\", \"D\", \"E\"],\n    [\"B\", \"C\", \"D\"]\n]\nmin_sup = 3\nprint(fp_growth(transactions, min_sup))\n```\n\nThis script implements the FP-Growth algorithm as described in the task. It constructs an FP-tree from the transactions and then recursively mines frequent item-sets from the tree. The result is a sorted list of tuples, each representing a frequent item-set."}
{"task_id": 492, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n\n    X = np.array(X)\n    n_samples, n_features = X.shape\n    feature_indices = list(range(n_features))\n    feature_combinations = []\n\n    # Generate all combinations of feature indices with replacement\n    for r in range(degree + 1):\n        for combo in combinations_with_replacement(feature_indices, r):\n            feature_combinations.append(combo)\n\n    # Create the polynomial feature matrix\n    polynomial_matrix = np.ones((n_samples, len(feature_combinations)))\n\n    for col, combo in enumerate(feature_combinations):\n        for feature in combo:\n            polynomial_matrix[:, col] *= X[:, feature]\n\n    return polynomial_matrix.tolist()\n\n# Example usage:\nX = [[1, 2], [3, 4]]\ndegree = 2\nprint(polynomial_features(X, degree))\n```\n\nThis script defines the `polynomial_features` function, which generates a polynomial feature matrix for a given input matrix `X` and a specified `degree`. The function handles the generation of all monomials of the original features whose total degree does not exceed the given degree, and returns the result as a list of lists. If the degree is negative, it returns -1. The example usage demonstrates how to call the function with a sample input."}
{"task_id": 493, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y:\n        return -1\n    \n    y = np.array(y)\n    y_mean = np.mean(y)\n    mse_value = np.mean((y - y_mean) ** 2)\n    \n    return round(mse_value, 4)\n\n# Example usage:\n# print(mse([1, 2, 3, 4, 5]))  # Should output 2.0\n# print(mse([]))               # Should output -1\n# print(mse(np.array([1.5, 2.5, 3.5])))  # Should output 0.6667\n```"}
{"task_id": 496, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Ensure x is a numpy array\n    x = np.array(x).flatten()\n    \n    # Calculate the affine activation\n    y = slope * x + intercept\n    \n    # The first derivative is constant and equal to the slope\n    grad = np.full_like(x, slope)\n    \n    # The second derivative is always 0 for a linear function\n    grad2 = np.zeros_like(x)\n    \n    # Round the results to 4 decimal places\n    y_rounded = np.round(y, 4).tolist()\n    grad_rounded = np.round(grad, 4).tolist()\n    grad2_rounded = np.round(grad2, 4).tolist()\n    \n    return y_rounded, grad_rounded, grad2_rounded\n\n# Example usage:\n# x = [1, 2, 3]\n# y, grad, grad2 = apply_affine(x, slope=2.0, intercept=3.0)\n# print(y)    # Output: [5.0, 7.0, 9.0]\n# print(grad) # Output: [2.0, 2.0, 2.0]\n# print(grad2) # Output: [0.0, 0.0, 0.0]\n```\n\nThis script defines the `apply_affine` function which takes a 1-D list or NumPy array `x` and optional parameters `slope` and `intercept`. It computes the affine activation, its first derivative, and its second derivative, rounding each result to four decimal places. The function handles both scalar and vector inputs by treating scalars as length-one vectors."}
{"task_id": 499, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    n_samples, n_features = data.shape\n    \n    if not (1 <= k <= n_features):\n        return -1\n    \n    # Step 1: Standardise each feature (zero mean, unit population variance)\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0, ddof=1)  # Use Bessel's correction (ddof=1)\n    \n    # Avoid division by zero for features with zero variance\n    std[std == 0] = 1\n    \n    standardized_data = (data - mean) / std\n    \n    # Step 2: Compute the sample covariance matrix\n    covariance_matrix = np.cov(standardized_data, rowvar=False)\n    \n    # Step 3: Perform eigen-decomposition of the covariance matrix\n    eigenvalues, eigenvectors = np.linalg.eigh(covariance_matrix)\n    \n    # Step 4: Sort eigenvalues in descending order and arrange eigenvectors accordingly\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    \n    # Step 5: Fix the sign of every eigenvector\n    for i in range(n_features):\n        max_idx = np.argmax(np.abs(sorted_eigenvectors[:, i]))\n        if sorted_eigenvectors[max_idx, i] < 0:\n            sorted_eigenvectors[:, i] *= -1\n    \n    # Step 6: Project the standardized data on the first k eigenvectors\n    projection_matrix = sorted_eigenvectors[:, :k]\n    projected_data = standardized_data @ projection_matrix\n    \n    # Return the projected matrix rounded to four decimal places\n    return np.round(projected_data, 4).tolist()\n```\n\nThis script implements the PCA dimensionality reduction routine as described in the task. It standardizes the data, computes the covariance matrix, performs eigen-decomposition, sorts and fixes the eigenvectors, and finally projects the data onto the first `k` principal components. The result is rounded to four decimal places and returned as a nested list."}
{"task_id": 500, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    \n    # Convert inputs to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Initialize the model with the mean of y_train\n    F = np.mean(y_train)\n    \n    # Function to fit a decision stump to the residuals\n    def fit_stump(residuals, X):\n        best_feature = None\n        best_threshold = None\n        best_error = float('inf')\n        best_left_value = None\n        best_right_value = None\n        \n        for feature in range(X.shape[1]):\n            unique_values = np.unique(X[:, feature])\n            thresholds = (unique_values[:-1] + unique_values[1:]) / 2\n            \n            for threshold in thresholds:\n                left_mask = X[:, feature] <= threshold\n                right_mask = X[:, feature] > threshold\n                \n                left_value = np.mean(residuals[left_mask])\n                right_value = np.mean(residuals[right_mask])\n                \n                error = np.sum((residuals[left_mask] - left_value) ** 2) + np.sum((residuals[right_mask] - right_value) ** 2)\n                \n                if error < best_error:\n                    best_error = error\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_left_value = left_value\n                    best_right_value = right_value\n        \n        def stump(x):\n            return best_left_value if x[best_feature] <= best_threshold else best_right_value\n        \n        return stump, best_feature, best_threshold, best_left_value, best_right_value\n\n    # List to store the stumps\n    stumps = []\n    \n    # Boosting loop\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        stump, feature, threshold, left_value, right_value = fit_stump(residuals, X_train)\n        stumps.append((stump, feature, threshold, left_value, right_value))\n        \n        # Update the model\n        for i, x in enumerate(X_train):\n            F[i] += learning_rate * stump(x)\n    \n    # Make predictions on the test set\n    predictions = []\n    for x in X_test:\n        f_x = F[0]  # Start with the initial estimate\n        for stump, feature, threshold, left_value, right_value in stumps:\n            if x[feature] <= threshold:\n                f_x += learning_rate * left_value\n            else:\n                f_x += learning_rate * right_value\n        predictions.append(1 if f_x >= 0.5 else 0)\n    \n    return predictions\n```\n\nThis script defines a simple gradient boosting binary classifier using decision stumps as weak learners. It fits the model to the training data by minimizing the squared error at each stage and then predicts the class labels for the test data by thresholding the final score at 0.5."}
{"task_id": 505, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n\n    m, n_v = X.shape\n    n_h = hbias.size\n\n    # Step 1: Compute positive phase hidden probabilities\n    h0_prob = 1 / (1 + np.exp(-(X @ W + hbias)))\n\n    # Step 2: Run k full Gibbs steps (hidden \u2192 visible \u2192 hidden)\n    v = X\n    for _ in range(k):\n        h_prob = 1 / (1 + np.exp(-(v @ W + hbias)))\n        v_prob = 1 / (1 + np.exp(-(h_prob @ W.T + vbias)))\n        v = v_prob  # Use probabilities directly\n\n    h_k_prob = 1 / (1 + np.exp(-(v @ W + hbias)))\n\n    # Step 3: Compute positive and negative gradients\n    pos_grad = X.T @ h0_prob\n    neg_grad = v.T @ h_k_prob\n\n    # Step 4: Update the weight matrix\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n\n    # Step 5: Return the updated weight matrix rounded to 4 decimal places\n    return np.round(W_new, 4).tolist()\n```\n\nThis script defines the `contrastive_divergence` function, which performs a single weight update for a binary Restricted Boltzmann Machine using the Contrastive Divergence (CD-k) algorithm. The function handles the specified input parameters and returns the updated weight matrix as a list of lists, with each value rounded to four decimal places. If the input mini-batch `X` is empty, it returns an empty list."}
{"task_id": 509, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are not already\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Check if the lengths of the vectors are the same\n    if len(x) != len(y):\n        return -1\n    \n    # Compute the Chebyshev distance\n    distance = np.max(np.abs(x - y))\n    \n    # Return the distance rounded to four decimal places\n    return round(float(distance), 4)\n\n# Example usage\nx = [1, 2, 3]\ny = [2, 4, 6]\nprint(chebyshev(x, y))  # Output: 3.0\n```\n\nThis script defines a function `chebyshev` that calculates the Chebyshev distance between two vectors, ensuring they are of the same length and returning the result rounded to four decimal places. The example usage demonstrates how to call the function with two lists."}
{"task_id": 510, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    # Clip y_pred to avoid log(0) and log(1) issues\n    epsilon = np.finfo(float).eps\n    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n    \n    # Calculate the binary cross-entropy (reconstruction loss)\n    reconstruction_loss = -np.mean(np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred), axis=1))\n    \n    # Calculate the KL divergence\n    kl_divergence = -0.5 * np.mean(np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var), axis=1))\n    \n    # Total loss is the sum of reconstruction loss and KL divergence\n    total_loss = reconstruction_loss + kl_divergence\n    \n    # Return the rounded total loss\n    return round(total_loss, 6)\n\n# Example usage:\n# y = np.random.randint(0, 2, (10, 784))\n# y_pred = np.random.rand(10, 784)\n# t_mean = np.random.randn(10, 50)\n# t_log_var = np.random.randn(10, 50)\n# print(vae_loss(y, y_pred, t_mean, t_log_var))\n```\n\nThis script defines the `vae_loss` function, which computes the VAE loss for a mini-batch of data with Bernoulli visible units. The function calculates both the reconstruction loss and the KL divergence, sums them, and returns the average loss rounded to six decimal places."}
{"task_id": 513, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for efficient computation\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    \n    # Initialize predictions with the bias term\n    predictions = np.full(X.shape[0], w0)\n    \n    # Add the linear part of the prediction\n    predictions += X @ w\n    \n    # Add the interaction part of the prediction\n    VTX = V.T @ X.T  # This is V^T * X^T, resulting in a (k, n_samples) matrix\n    sum_squared = np.sum(VTX**2, axis=0)\n    squared_sum = np.sum(V**2 * X**2, axis=1)\n    interaction_part = 0.5 * (sum_squared - squared_sum)\n    \n    # Add the interaction part to the predictions\n    predictions += interaction_part\n    \n    # Round the predictions to 4 decimal places\n    return np.round(predictions, 4).tolist()\n\n# Example usage:\n# X = [[1, 2, 3], [4, 5, 6]]\n# w0 = 0.1\n# w = [0.2, 0.3, 0.4]\n# V = [[0.5, 0.6], [0.7, 0.8], [0.9, 1.0]]\n# print(fm_predict(X, w0, w, V))\n```\n\nThis script defines the `fm_predict` function which calculates the predictions for a batch of samples using the Factorization Machine regression formula. The function uses numpy for efficient numerical computations and ensures that the output is rounded to four decimal places."}
{"task_id": 517, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # Convert input to a numpy array for uniform processing\n    if isinstance(z, (int, float)):\n        z_array = np.array([z])\n    elif isinstance(z, (list, tuple)):\n        z_array = np.array(z)\n    else:\n        z_array = z\n\n    # Numerical stability: split the computation for positive and negative values\n    positive_mask = z_array > 0\n    negative_mask = z_array <= 0\n\n    # Compute sigmoid for positive and negative values separately\n    sigmoid_values = np.empty_like(z_array, dtype=float)\n    sigmoid_values[positive_mask] = 1 / (1 + np.exp(-z_array[positive_mask]))\n    sigmoid_values[negative_mask] = np.exp(z_array[negative_mask]) / (1 + np.exp(z_array[negative_mask]))\n\n    # Round the results to four decimal places\n    rounded_sigmoid_values = np.round(sigmoid_values, 4)\n\n    # Return the result in the appropriate format\n    if isinstance(z, (int, float)):\n        return rounded_sigmoid_values[0].item()  # Return a scalar if input was a scalar\n    else:\n        return rounded_sigmoid_values.tolist()  # Convert to list otherwise\n\n# Example usage\nprint(sigmoid([-1, 0, 1]))  # Should output [0.2689, 0.5, 0.7311]\n```\n\nThis script defines the `sigmoid` function that handles different types of input (scalar, list, tuple, or NumPy array), computes the sigmoid in a numerically stable way, rounds the results to four decimal places, and returns the output in the appropriate format."}
{"task_id": 518, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    \n    return wrapper\n\n# Example usage\n@unhot\ndef accuracy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Simple accuracy rounded to 4 decimals.\"\"\"\n    return float(np.round(np.mean(actual == predicted), 4))\n\nactual    = np.array([[0,1,0], [1,0,0], [0,0,1]])  # one-hot\npredicted = np.array([[0,1,0], [0,1,0], [0,0,1]])  # one-hot\nprint(accuracy(actual, predicted))  # 0.6667\n```\n\nThis script defines the `unhot` decorator which converts one-hot encoded arrays to 1-D integer label arrays before calling the wrapped metric function. The example usage demonstrates the decorator in action with a simple accuracy metric."}
{"task_id": 520, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    def compute_gradient(value):\n        return np.round(value * (1 - value), 4)\n\n    if isinstance(z, (int, float)):\n        return compute_gradient(z)\n    elif isinstance(z, list):\n        if not z:  # Check for empty list\n            return []\n        return [sigmoid_grad(item) for item in z]\n    elif isinstance(z, np.ndarray):\n        return np.vectorize(compute_gradient)(z).tolist()\n    else:\n        raise ValueError(\"Input must be a float, list, or NumPy ndarray\")\n\n# Example usage:\n# print(sigmoid_grad(0.5))  # Scalar input\n# print(sigmoid_grad([0.5, 0.7]))  # 1-D list input\n# print(sigmoid_grad([[0.5, 0.7], [0.3, 0.8]]))  # 2-D list input\n# print(sigmoid_grad(np.array([0.5, 0.7])))  # 1-D NumPy array input\n# print(sigmoid_grad(np.array([[0.5, 0.7], [0.3, 0.8]])))  # 2-D NumPy array input\n```\n\nThis script defines the `sigmoid_grad` function which computes the sigmoid gradient for scalar, 1-D, or 2-D inputs, rounding each result to 4 decimal places. It handles different input types and structures, including empty lists, and returns the gradient in the same structure as the input."}
{"task_id": 528, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Convert X to a NumPy array for easier manipulation\n    X = np.array(X)\n    \n    # Determine the range for x1 and x2\n    x1_min, x1_max = np.min(X[:, 0]), np.max(X[:, 0])\n    x2_min, x2_max = np.min(X[:, 1]), np.max(X[:, 1])\n    \n    # Create equally spaced 1-D arrays for x1 and x2\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    \n    # Create a meshgrid from x1_plot and x2_plot\n    x1_grid, x2_grid = np.meshgrid(x1_plot, x2_plot)\n    \n    # Flatten the grid to apply the classifier rule\n    x1_flat = x1_grid.flatten()\n    x2_flat = x2_grid.flatten()\n    \n    # Apply the classifier rule: sign(w1*x1 + w2*x2 + b)\n    W = np.array(W)\n    z = W[0] * x1_flat + W[1] * x2_flat + b\n    labels_flat = np.where(z >= 0, 1, -1)\n    \n    # Reshape the labels back to the grid shape\n    labels_grid = labels_flat.reshape((grid_n, grid_n))\n    \n    # Convert the NumPy array to a nested Python list\n    labels_list = labels_grid.tolist()\n    \n    return labels_list\n```\n\nThis script defines the `decision_boundary_grid` function as specified, using NumPy for efficient array manipulation and classification. The function generates a grid of predictions for a linear classifier based on the provided weights, bias, and dataset."}
{"task_id": 537, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    # Constants\n    epsilon = 1e-9\n    \n    # Number of samples and features\n    n_samples, n_features = X_train.shape\n    \n    # Separate the data for class 0 and class 1\n    X_train_class_0 = X_train[y_train == 0]\n    X_train_class_1 = X_train[y_train == 1]\n    \n    # Calculate class priors\n    prior_0 = X_train_class_0.shape[0] / n_samples\n    prior_1 = X_train_class_1.shape[0] / n_samples\n    \n    # Calculate means and standard deviations for each feature in each class\n    means_0 = np.mean(X_train_class_0, axis=0)\n    means_1 = np.mean(X_train_class_1, axis=0)\n    \n    stds_0 = np.std(X_train_class_0, axis=0) + epsilon\n    stds_1 = np.std(X_train_class_1, axis=0) + epsilon\n    \n    # Function to calculate Gaussian likelihood\n    def gaussian_likelihood(x, mean, std):\n        return (1 / (np.sqrt(2 * np.pi) * std)) * np.exp(-0.5 * ((x - mean) / std) ** 2)\n    \n    # Predict class labels for test samples\n    predictions = []\n    for x in X_test:\n        # Calculate posterior probabilities for class 0 and class 1\n        posterior_0 = np.log(prior_0) + np.sum(np.log(gaussian_likelihood(x, means_0, stds_0)))\n        posterior_1 = np.log(prior_1) + np.sum(np.log(gaussian_likelihood(x, means_1, stds_1)))\n        \n        # Predict the class with the higher posterior probability\n        predictions.append(1 if posterior_1 > posterior_0 else 0)\n    \n    return predictions\n```"}
{"task_id": 539, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost for binary classification.\n\n    Parameters:\n    AL (np.ndarray): A numpy array of shape (1, m) or (m,) containing the predicted probabilities.\n    Y (np.ndarray): A numpy array of shape (1, m) or (m,) containing the true binary labels (0 or 1).\n\n    Returns:\n    float: The binary cross-entropy cost.\n    \"\"\"\n    # Ensure AL and Y have the same shape\n    assert AL.shape == Y.shape, \"AL and Y must have the same shape.\"\n    \n    # Clip the probabilities to avoid numerical overflow\n    epsilon = 1e-15\n    AL = np.clip(AL, epsilon, 1 - epsilon)\n    \n    # Number of training examples\n    m = AL.shape[0]\n    \n    # Compute the binary cross-entropy cost\n    cost = -1 / m * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    \n    # Return the cost as a plain Python float, rounded to 4 decimal places\n    return round(float(cost), 4)\n\n# Example usage:\n# AL = np.array([0.9, 0.1, 0.8, 0.2])\n# Y = np.array([1, 0, 1, 0])\n# print(compute_cost(AL, Y))  # Output should be a float rounded to 4 decimal places\n```\n\nThis script defines the `compute_cost` function, which calculates the binary cross-entropy cost for a set of predicted probabilities and true labels. The function ensures that the input arrays have the same shape, clips the predicted probabilities to prevent numerical issues when taking the logarithm, and returns the cost as a plain Python float rounded to four decimal places."}
{"task_id": 552, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    if not (0 <= t < len(observations)):\n        return []\n\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    N = A.shape[0]  # Number of states\n    T = len(observations)  # Length of the observation sequence\n\n    # Forward probabilities\n    alpha = np.zeros((T, N))\n    alpha[0] = pi * B[:, observations[0]]\n    for i in range(1, T):\n        alpha[i] = np.dot(alpha[i - 1], A) * B[:, observations[i]]\n\n    # Backward probabilities\n    beta = np.zeros((T, N))\n    beta[T - 1] = np.ones(N)\n    for i in range(T - 2, -1, -1):\n        beta[i] = np.dot(A, B[:, observations[i + 1]] * beta[i + 1])\n\n    # Posterior probabilities gamma\n    gamma_t = (alpha[t] * beta[t]) / np.sum(alpha[t] * beta[t])\n    gamma_t_rounded = [round(prob, 4) for prob in gamma_t]\n\n    return gamma_t_rounded\n\n# Example usage:\n# hmm = {\n#     'pi': [0.6, 0.4],\n#     'A': [\n#         [0.7, 0.3],\n#         [0.4, 0.6]\n#     ],\n#     'B': [\n#         [0.5, 0.4, 0.1],\n#         [0.1, 0.3, 0.6]\n#     ]\n# }\n# observations = [0, 1, 2]\n# t = 1\n# print(gamma_probabilities(hmm, observations, t))  # Output: [0.1025, 0.8975]\n```\n\nThis script defines a function `gamma_probabilities` that calculates the posterior probability distribution for a given time step `t` in a Hidden Markov Model (HMM) using the forward-backward algorithm. The function takes the HMM parameters, observation sequence, and time step as inputs and returns the posterior probabilities rounded to four decimal places. If `t` is outside the valid range, it returns an empty list."}
{"task_id": 555, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import deque\nfrom scipy.spatial.distance import cdist\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    # Initialize labels\n    labels = [-1] * n_samples  # -1 means noise initially\n    \n    # Compute pairwise distances\n    dist_matrix = cdist(data, data, 'euclidean')\n    \n    # Build neighborhood list for each sample\n    neighborhoods = [np.where(dist_matrix[i] <= eps)[0] for i in range(n_samples)]\n    \n    # Identify core points\n    core_points = [i for i, neighborhood in enumerate(neighborhoods) if len(neighborhood) >= min_samples]\n    \n    cluster_id = 0\n    \n    for core_point in core_points:\n        if labels[core_point] != -1:  # If already visited, skip\n            continue\n        \n        cluster_id += 1\n        labels[core_point] = cluster_id\n        to_explore = deque(neighborhoods[core_point])\n        \n        while to_explore:\n            current_point = to_explore.popleft()\n            \n            if labels[current_point] == -1:\n                labels[current_point] = cluster_id\n            \n            if current_point not in core_points:\n                continue\n            \n            for neighbor in neighborhoods[current_point]:\n                if labels[neighbor] == -1:\n                    labels[neighbor] = cluster_id\n                if neighbor not in core_points or labels[neighbor] != -1:\n                    continue\n                to_explore.append(neighbor)\n    \n    return labels\n\n# Example usage:\n# data = np.array([[1, 2], [2, 2], [2, 3],\n#                  [8, 7], [8, 8], [25, 80]])\n# eps = 3\n# min_samples = 2\n# print(dbscan(data, eps, min_samples))\n```\n\nThis script implements the DBSCAN algorithm from scratch. It calculates the pairwise Euclidean distances between points, identifies core points, and expands clusters using a breadth-first search (BFS) approach. Points that do not belong to any cluster are labeled as noise with a value of -1. The clusters are numbered starting from 1."}
{"task_id": 561, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"\n    Implement the Expectation\u2013Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n\n    Parameters:\n    - data: np.ndarray, 2D array of shape (N, D) where N is the number of samples and D is the number of features.\n    - k: int, number of Gaussian components.\n    - max_iter: int, maximum number of iterations for the EM algorithm.\n    - epsilon: float, tolerance for convergence based on change in mixture weights.\n\n    Returns:\n    - list[int]: A list of length N containing the final cluster label of each sample.\n    \"\"\"\n    N, D = data.shape\n    \n    if k == 1:\n        return [0] * N\n\n    # Random initialization of parameters\n    np.random.seed(0)  # For determinism\n    weights = np.ones(k) / k\n    means = data[np.random.choice(N, k, replace=False)]\n    covariances = np.array([np.eye(D)] * k)\n\n    def gaussian_pdf(x, mean, covariance):\n        det_cov = np.linalg.det(covariance)\n        inv_cov = np.linalg.inv(covariance)\n        exponent = -0.5 * np.dot(np.dot((x - mean).T, inv_cov), (x - mean))\n        return (1.0 / (np.sqrt((2 * np.pi) ** D * det_cov))) * np.exp(exponent)\n\n    for iteration in range(max_iter):\n        # E-step: Calculate responsibilities\n        responsibilities = np.zeros((N, k))\n        for i in range(N):\n            for j in range(k):\n                responsibilities[i, j] = weights[j] * gaussian_pdf(data[i], means[j], covariances[j])\n            responsibilities[i] /= np.sum(responsibilities[i])\n\n        # M-step: Update parameters\n        weights_new = np.mean(responsibilities, axis=0)\n        means_new = np.dot(responsibilities.T, data) / np.sum(responsibilities, axis=0, keepdims=True)\n        covariances_new = np.zeros((k, D, D))\n        for j in range(k):\n            diff = data - means_new[j]\n            covariances_new[j] = np.dot(responsibilities[:, j] * diff.T, diff) / np.sum(responsibilities[:, j])\n\n        # Check for convergence\n        if np.allclose(weights, weights_new, atol=epsilon):\n            break\n\n        weights, means, covariances = weights_new, means_new, covariances_new\n\n    # Assign labels based on maximum responsibility\n    labels = np.argmax(responsibilities, axis=1)\n\n    # Sort components by the first coordinate of their mean and re-label\n    sorted_indices = np.argsort(means[:, 0])\n    labels = np.array([sorted_indices[label] for label in labels])\n\n    return labels.tolist()\n\n# Example usage:\n# data = np.array([[1, 2], [2, 1], [4, 5], [5, 4], [8, 8], [9, 9]])\n# print(gmm_em(data, k=2))\n```\n\nThis script implements the EM algorithm for a Gaussian Mixture Model (GMM) with the specified constraints. It includes a deterministic initialization by setting a random seed and ensures that the output labels are sorted and re-labeled based on the means of the components."}
{"task_id": 562, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n    \n    # Step 1: Build a fully-connected similarity graph using the Gaussian kernel\n    N = data.shape[0]\n    pairwise_squared_distances = np.sum(data**2, axis=1).reshape(-1, 1) + np.sum(data**2, axis=1) - 2 * np.dot(data, data.T)\n    W = np.exp(-gamma * pairwise_squared_distances)\n    \n    # Step 2: Construct the un-normalized Laplacian L=D-W\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    \n    if method == 'normalized':\n        # Compute the symmetric normalized Laplacian L_sym = D^(-1/2) * L * D^(-1/2)\n        D_inv_sqrt = np.diag(1.0 / np.sqrt(np.sum(W, axis=1)))\n        L = np.dot(np.dot(D_inv_sqrt, L), D_inv_sqrt)\n    \n    # Step 3: Compute the eigenvectors that correspond to the n_cluster smallest eigen-values\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    U = eigenvectors[:, :n_cluster]\n    \n    if method == 'normalized':\n        # Row-normalise the eigenvector matrix\n        U = U / np.linalg.norm(U, axis=1, keepdims=True)\n    \n    # Step 4: Run k-means in the eigenvector space to obtain final cluster labels\n    # Use a deterministic k-means that always picks the first n_cluster samples as the initial centroids\n    centroids = U[:n_cluster]\n    labels = np.argmin(np.linalg.norm(U[:, np.newaxis] - centroids, axis=2), axis=1)\n    \n    # Step 5: Re-label clusters so that the cluster containing the smallest original index gets label 0, the next one 1, etc.\n    unique_labels = np.unique(labels)\n    label_mapping = {old_label: idx for idx, old_label in enumerate(sorted(unique_labels))}\n    labels = [label_mapping[label] for label in labels]\n    \n    return labels\n```"}
{"task_id": 563, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = X_data.shape[0]\n    alpha = np.zeros(N)\n    b = 0.0\n    \n    # Build the Gram matrix G\n    G = np.dot(X_data, X_data.T)\n    \n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            # Compute g = \u03a3\u2c7c \u03b1\u2c7c y\u2c7c G[j, i]\n            g = np.sum(alpha * y_data * G[:, i])\n            # Check if the update condition is met\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        # If no updates were made, break the loop\n        if not updated:\n            break\n    \n    # Recover the weight vector w\n    w = np.sum(alpha * y_data[:, np.newaxis] * X_data, axis=0)\n    \n    # Round the weight vector and bias term to 4 decimal places\n    w_rounded = [round(weight, 4) for weight in w]\n    b_rounded = round(b, 4)\n    \n    return (w_rounded, b_rounded)\n```\n\nThis script defines the `perceptron_dual_train` function, which trains a dual-form perceptron using the specified algorithm. It constructs the Gram matrix and iteratively updates the coefficients and bias term until convergence or the maximum number of iterations is reached. The final weight vector and bias term are rounded to four decimal places before being returned."}
{"task_id": 564, "completion_id": 0, "completion": "```\npython\nclass Node:\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label\n        self.x = x\n        self.s = s\n        self.y = y\n        self.child = child if child is not None else []\n\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    current_node = root\n    while current_node.y is None:\n        if task_type == 'classification':\n            feature_value = features[current_node.label]\n            for child in current_node.child:\n                if child.x == feature_value:\n                    current_node = child\n                    break\n            else:\n                current_node = current_node.child[1]  # Default to the second child\n        elif task_type == 'regression':\n            feature_value = features[current_node.label]\n            if feature_value <= current_node.s:\n                current_node = current_node.child[0]\n            else:\n                current_node = current_node.child[1]\n    return current_node.y\n```\n\nThis script defines the `Node` class and the `predict_sample` function as described in the task. The function traverses the decision tree according to the rules specified for classification and regression tasks and returns the value stored in the reached leaf node."}
{"task_id": 565, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    \n    def entropy(labels: np.ndarray) -> float:\n        \"\"\"Calculate the entropy of a label distribution.\"\"\"\n        n_samples = len(labels)\n        if n_samples == 0:\n            return 0.0\n        value_counts = np.bincount(labels)\n        probabilities = value_counts / n_samples\n        return -np.sum(probabilities * np.log2(probabilities + 1e-9))\n    \n    def conditional_entropy(X: np.ndarray, y: np.ndarray, feature_index: int) -> float:\n        \"\"\"Calculate the conditional entropy H(y|A) for a given feature.\"\"\"\n        n_samples = len(y)\n        feature_values = np.unique(X[:, feature_index])\n        ce = 0.0\n        for value in feature_values:\n            mask = X[:, feature_index] == value\n            subset_labels = y[mask]\n            ce += (len(subset_labels) / n_samples) * entropy(subset_labels)\n        return ce\n    \n    # Calculate the entropy of the target variable y\n    H_y = entropy(y)\n    \n    # Initialize variables to track the best feature and max information gain\n    best_feature_index = 0\n    max_information_gain = -1.0\n    \n    # Iterate over each feature to calculate information gain\n    for feature_index in range(X.shape[1]):\n        H_y_given_A = conditional_entropy(X, y, feature_index)\n        information_gain = H_y - H_y_given_A\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = feature_index\n    \n    return (best_feature_index, round(max_information_gain, 6))\n```\n\nThis script defines a function `choose_best_feature` that calculates the information gain for each feature in the dataset and returns the feature with the highest information gain. The function uses helper functions to compute entropy and conditional entropy. The information gain is rounded to six decimal places as required."}
{"task_id": 566, "completion_id": 0, "completion": "```\nimport numpy as np\nimport math\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    \n    n_samples, n_features = data.shape\n    \n    def c(n):\n        if n == 1:\n            return 0\n        return 2 * np.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n    \n    def build_tree(subsample, height_limit):\n        if height_limit == 0 or len(subsample) <= 1:\n            return {'size': len(subsample)}\n        \n        feature_idx = np.random.choice(n_features)\n        feature_min, feature_max = np.min(subsample[:, feature_idx]), np.max(subsample[:, feature_idx])\n        if feature_min == feature_max:\n            return {'size': len(subsample)}\n        \n        split_point = np.random.uniform(feature_min, feature_max)\n        left_subsample = subsample[subsample[:, feature_idx] < split_point]\n        right_subsample = subsample[subsample[:, feature_idx] >= split_point]\n        \n        return {\n            'feature_idx': feature_idx,\n            'split_point': split_point,\n            'left': build_tree(left_subsample, height_limit - 1),\n            'right': build_tree(right_subsample, height_limit - 1)\n        }\n    \n    def path_length(x, tree, current_height=0):\n        if 'size' in tree:\n            return current_height + c(tree['size'])\n        \n        feature_idx = tree['feature_idx']\n        split_point = tree['split_point']\n        \n        if x[feature_idx] < split_point:\n            return path_length(x, tree['left'], current_height + 1)\n        else:\n            return path_length(x, tree['right'], current_height + 1)\n    \n    trees = [build_tree(np.random.choice(data, min(sample_size, n_samples), replace=False), math.ceil(np.log2(min(sample_size, n_samples)))) for _ in range(n_trees)]\n    \n    path_lengths = np.zeros(n_samples)\n    \n    for i in range(n_samples):\n        x = data[i]\n        for tree in trees:\n            path_lengths[i] += path_length(x, tree)\n    \n    mean_path_lengths = path_lengths / n_trees\n    \n    phi = 2 * np.log(n_samples - 1) - 2 * (n_samples - 1) / n_samples\n    \n    anomaly_scores = 2 ** (-mean_path_lengths / phi)\n    \n    threshold = np.percentile(anomaly_scores, (1 - epsilon) * 100)\n    \n    outliers = np.where(anomaly_scores > threshold)[0]\n    \n    return sorted(outliers.tolist())\n```\n\nThis script defines a function `detect_outliers` that implements a simplified version of the Isolation Forest algorithm for outlier detection. The function constructs a specified number of random isolation trees, calculates the average path length for each data point, computes anomaly scores, and identifies outliers based on a given threshold. The randomness is controlled by setting a global seed for reproducibility."}
{"task_id": 568, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that implements the Maximum Entropy Classifier using the Generalized Iterative Scaling (GIS) algorithm. The script includes the `maxent_predict` function which performs the required tasks.\n\n```python\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    \"\"\"Predict labels for X_test using a Maximum Entropy Classifier with GIS.\"\"\"\n    \n    # Step 1: Collect unique features and labels\n    unique_features = set()\n    unique_labels = set(y_train)\n    \n    for sample in X_train:\n        for feature in sample:\n            unique_features.add(feature)\n    \n    # Step 2: Build empirical distributions\n    empirical_expectations = defaultdict(float)\n    model_expectations = defaultdict(float)\n    \n    # Count empirical expectations\n    for x, y in zip(X_train, y_train):\n        for feature in x:\n            empirical_expectations[(feature, y)] += 1\n    \n    # Normalize empirical expectations\n    total_samples = len(X_train)\n    for key in empirical_expectations:\n        empirical_expectations[key] /= total_samples\n    \n    # Step 3: Initialize weights\n    weights = defaultdict(float)\n    \n    # Step 4: GIS algorithm to update weights\n    for iteration in range(n_iter):\n        # Reset model expectations\n        model_expectations.clear()\n        \n        # Calculate normalization factor Z(x) for each training sample\n        Z = {}\n        for i, x in enumerate(X_train):\n            Z_x = 0\n            for y in unique_labels:\n                score = 0\n                for feature in x:\n                    score += weights[(feature, y)]\n                Z_x += math.exp(score)\n            Z[i] = Z_x\n        \n        # Update model expectations\n        for i, (x, y) in enumerate(zip(X_train, y_train)):\n            for feature in x:\n                score = 0\n                for label in unique_labels:\n                    score += weights[(feature, label)]\n                prob = math.exp(score) / Z[i]\n                model_expectations[(feature, y)] += prob\n        \n        # Normalize model expectations\n        for key in model_expectations:\n            model_expectations[key] /= total_samples\n        \n        # Calculate the weight updates\n        max_update = 0\n        for (feature, y) in empirical_expectations:\n            update = empirical_expectations[(feature, y)] - model_expectations[(feature, y)]\n            weights[(feature, y)] += update\n            max_update = max(max_update, abs(update))\n        \n        # Check for convergence\n        if max_update < epsilon:\n            break\n    \n    # Step 5: Predict labels for X_test\n    predictions = []\n    for x in X_test:\n        max_score = -float('inf')\n        best_label = None\n        for y in unique_labels:\n            score = 0\n            for feature in x:\n                score += weights[(feature, y)]\n            if score > max_score:\n                max_score = score\n                best_label = y\n        predictions.append(best_label)\n    \n    return predictions\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4]])\n# y_train = np.array([0, 1, 0])\n# X_test = np.array([[1, 3], [2, 4]])\n# predictions = maxent_predict(X_train, y_train, X_test)\n# print(predictions)  # Output: [0, 1]\n```\n\nThis script defines the `maxent_predict` function which takes training data `X_train` and `y_train`, and test data `X_test`, and returns a list of predicted labels for each test sample. The function uses the GIS algorithm to learn the weights of feature-label pairs and then uses these weights to predict the labels for the test data."}
{"task_id": 569, "completion_id": 0, "completion": "```\npython\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    total_documents = len(data)\n    word_doc_count = Counter()\n\n    # Track which words appear in which documents\n    for _, words in data:\n        unique_words_in_doc = set(words)\n        word_doc_count.update(unique_words_in_doc)\n\n    # Calculate document-frequency ratio for each word\n    word_doc_ratio = [(word, round(count / total_documents, 4)) for word, count in word_doc_count.items()]\n\n    # Sort words by document-frequency ratio in descending order\n    word_doc_ratio.sort(key=lambda x: x[1], reverse=True)\n\n    # Determine the set of most common words based on cut_off\n    if cut_off is None:\n        most_common_words = set(word for word, _ in word_doc_ratio)\n    else:\n        most_common_words = set(word for word, _ in word_doc_ratio[:cut_off])\n\n    return word_doc_ratio, most_common_words\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    documents = [\n        (1, [\"apple\", \"banana\", \"apple\"]),\n        (2, [\"banana\", \"orange\"]),\n        (3, [\"apple\", \"orange\", \"banana\", \"grape\"]),\n        (4, [\"kiwi\", \"banana\"]),\n    ]\n\n    doc_freq, top_words = statistic_key_word(documents, cut_off=3)\n    print(\"Document Frequency:\", doc_freq)\n    print(\"Top Words:\", top_words)\n```\n\nThis script defines the `statistic_key_word` function as specified, which calculates the document-frequency ratio for each word across a collection of documents and returns a sorted list of these ratios along with a set of the top `k` most common words. The example usage at the bottom demonstrates how to call the function and print the results."}
{"task_id": 571, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute the weight vector w\n    w = np.sum(alpha * y[:, np.newaxis] * X, axis=0)\n    \n    # Compute the bias term b\n    b = np.mean(y - np.dot(X, w))\n    \n    # Round the weight vector and bias term to 4 decimal places\n    w_list = np.round(w, 4).tolist()\n    b = np.round(b, 4)\n    \n    return w_list, b\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 3], [2, 1], [3, 2]])\n# y = np.array([1, 1, 1, -1, -1])\n# alpha = np.array([0.1, 0.2, 0, 0.3, 0.4])\n# w_list, b = compute_svm_parameters(X, y, alpha)\n# print(\"Weight vector w:\", w_list)\n# print(\"Bias term b:\", b)\n```\n\nThis script defines the `compute_svm_parameters` function, which calculates the weight vector `w` and bias term `b` for a linear SVM using the provided formulas. The function takes in the training samples `X`, class labels `y`, and Lagrange multipliers `alpha`, and returns the weight vector and bias term rounded to four decimal places. The weight vector is returned as a one-dimensional Python list, even if `X` contains only one feature."}
{"task_id": 572, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Compute the Local Outlier Factor for each sample in the dataset.\"\"\"\n    \n    # Step 1: Compute the full pair-wise Euclidean distance matrix\n    n_samples = len(data)\n    distance_matrix = np.zeros((n_samples, n_samples))\n    \n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            distance = np.sqrt(np.sum((data[i] - data[j]) ** 2))\n            distance_matrix[i, j] = distance\n            distance_matrix[j, i] = distance\n    \n    # Step 2: Compute k-distance and k-distance neighbors for each sample\n    k_distances = np.zeros(n_samples)\n    k_neighbors = [[] for _ in range(n_samples)]\n    \n    for i in range(n_samples):\n        distances = distance_matrix[i]\n        sorted_indices = np.argsort(distances)[1:k+1]  # exclude self\n        k_distances[i] = distances[sorted_indices[-1]]\n        k_neighbors[i] = sorted_indices.tolist()\n    \n    # Step 3: Define the reachability distance\n    def reachability_distance(p, q):\n        return max(k_distances[q], distance_matrix[p, q])\n    \n    # Step 4: Compute the Local Reachability Density (LRD)\n    lrd = np.zeros(n_samples)\n    \n    for p in range(n_samples):\n        sum_reach_dist = 0\n        for q in k_neighbors[p]:\n            sum_reach_dist += reachability_distance(p, q)\n        lrd[p] = k / sum_reach_dist\n    \n    # Step 5: Compute the Local Outlier Factor (LOF)\n    lof_scores = np.zeros(n_samples)\n    \n    for p in range(n_samples):\n        sum_lrd_neighbors = 0\n        for q in k_neighbors[p]:\n            sum_lrd_neighbors += lrd[q]\n        lof_scores[p] = (sum_lrd_neighbors / k) / lrd[p]\n    \n    # Round the LOF scores to 4 decimal places\n    lof_scores_rounded = np.round(lof_scores, 4)\n    \n    # Find indices of samples with LOF score > epsilon\n    outlier_indices = np.where(lof_scores_rounded > epsilon)[0]\n    outlier_indices_sorted = sorted(outlier_indices)\n    \n    return lof_scores_rounded.tolist(), outlier_indices_sorted\n\n# Example usage:\n# data = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\n# k = 3\n# epsilon = 1.5\n# scores, outliers = local_outlier_factor(data, k, epsilon)\n# print(\"LOF Scores:\", scores)\n# print(\"Outlier Indices:\", outliers)\n```\n\nThis script defines the `local_outlier_factor` function, which calculates the Local Outlier Factor (LOF) for each sample in the dataset. It computes the necessary pair-wise distances, identifies k-nearest neighbors, calculates reachability distances, and then computes the LRD and LOF scores. The function returns a list of rounded LOF scores and a sorted list of indices of samples identified as outliers based on the specified epsilon threshold."}
{"task_id": 574, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n\n    for c in range(m):\n        base = 10 * (c // 2)\n        x_train = np.random.uniform(base + 1, base + 9, n_train)\n        y_train = np.random.uniform(base + 1, base + 9, n_train)\n        X_train.append(np.column_stack((x_train, y_train)))\n        y_train_labels = np.full(n_train, c)\n        y_train.append(y_train_labels)\n\n        x_val = np.random.uniform(base + 1, base + 9, n_val)\n        y_val = np.random.uniform(base + 1, base + 9, n_val)\n        X_val.append(np.column_stack((x_val, y_val)))\n        y_val_labels = np.full(n_val, c)\n        y_val.append(y_val_labels)\n\n    X_train = np.round(np.concatenate(X_train), 4)\n    y_train = np.concatenate(y_train)\n    X_val = np.round(np.concatenate(X_val), 4)\n    y_val = np.concatenate(y_val)\n\n    return X_train, X_val, y_train, y_val\n\n# Example usage:\n# X_train, X_val, y_train, y_val = generate_data(m=3, n_train=10, n_val=5, seed=42)\n# print(X_train)\n# print(y_train)\n# print(X_val)\n# print(y_val)\n```\n\nThis script defines the `generate_data` function as specified, which generates synthetic 2-D data for a given number of classes, with specified numbers of training and validation points per class. The function ensures reproducibility by setting a random seed if provided, and it rounds all coordinates to four decimal places."}
{"task_id": 579, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    # Step 1: Initialization\n    centres = X[:k].copy()\n    \n    for _ in range(max_iters):\n        # Step 2: Assignment step\n        labels = []\n        for point in X:\n            distances = np.linalg.norm(point - centres, axis=1)\n            min_index = np.argmin(distances)\n            labels.append(min_index)\n        \n        # Step 3: Update step\n        new_centres = np.zeros_like(centres)\n        counts = np.zeros(k, dtype=int)\n        \n        for label, point in zip(labels, X):\n            new_centres[label] += point\n            counts[label] += 1\n        \n        for i in range(k):\n            if counts[i] > 0:\n                new_centres[i] /= counts[i]\n            else:\n                new_centres[i] = centres[i]\n        \n        # Check for convergence\n        if np.allclose(new_centres, centres, atol=1e-4):\n            break\n        \n        centres = new_centres.copy()\n    \n    # Round the centres to 4 decimal places\n    centres = np.round(centres, 4).tolist()\n    \n    return labels, centres\n\n# Example usage:\n# X = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# k = 2\n# labels, centres = kmeans(X, k)\n# print(\"Labels:\", labels)\n# print(\"Centres:\", centres)\n```\n\nThis script implements the K-Means clustering algorithm as described, using NumPy for efficient numerical operations. The algorithm initializes the cluster centers using the first `k` points from the dataset, assigns each point to the nearest center, updates the centers based on the mean of the points assigned to each, and repeats these steps until convergence or the maximum number of iterations is reached. The final centers are rounded to four decimal places for consistency."}
{"task_id": 581, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    m, n = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n\n    if learning_rate == 0 or iterations == 0:\n        return [round(w, 4) for w in weights], round(bias, 4)\n\n    for _ in range(iterations):\n        predictions = np.dot(X, weights) + bias\n        residuals = y - predictions\n\n        for j in range(n):\n            gradient_wj = -2 * np.dot(X[:, j], residuals) + l1_penalty * np.sign(weights[j]) + 2 * l2_penalty * weights[j]\n            weights[j] -= learning_rate * gradient_wj / m\n\n        gradient_b = -2 * np.sum(residuals)\n        bias -= learning_rate * gradient_b / m\n\n    return [round(w, 4) for w in weights], round(bias, 4)\n```\n\nThis script defines the `elastic_net_regression` function, which implements Elastic-Net regularized linear regression using batch gradient descent. The function initializes the weights and bias to zero, then iteratively updates them based on the gradients of the loss function with respect to the weights and bias. The updates include both the data loss component and the regularization terms. The function returns the learned weights and bias, rounded to four decimal places. If the learning rate or number of iterations is zero, it returns the initial parameters."}
{"task_id": 591, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    def relu(z):\n        return np.maximum(0, z)\n    \n    # Convert input to a numpy array\n    current_input = np.array(x, dtype=float)\n    \n    for layer_weights in weights[:-1]:  # Iterate through all layers except the last one\n        # Add bias term (1) e.g., [x1, x2, x3] -> [1, x1, x2, x3]\n        current_input = np.insert(current_input, 0, 1)\n        # Compute the weighted sum and apply ReLU activation\n        current_input = relu(np.dot(current_input, np.array(layer_weights).T))\n    \n    # Process the last layer (linear activation)\n    current_input = np.insert(current_input, 0, 1)  # Add bias term\n    output = np.dot(current_input, np.array(weights[-1]).T)\n    \n    # Round the output to 4 decimal places\n    if len(output) == 1:\n        return round(float(output), 4)\n    else:\n        return [round(float(val), 4) for val in output]\n\n# Example usage:\n# weights = [\n#     [[0.1, 0.2], [0.3, 0.4]],  # Layer 0: 2 neurons, 1 input feature each\n#     [[0.5, 0.6, 0.7]]          # Layer 1: 1 neuron, 2 input features (including bias)\n# ]\n# x = [0.5]\n# print(neural_net_predict(weights, x))  # Output should be a float rounded to 4 decimals\n```\n\nThis script defines the `neural_net_predict` function, which performs a forward pass through a fully-connected ReLU neural network using the provided weights and input vector. The function handles both single and multiple output neurons and ensures the final output is rounded to four decimal places."}
{"task_id": 595, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Implement the K-Means clustering algorithm to compute centroids only.\"\"\"\n    \n    # Step 1: Initialize centroids with the first k samples\n    centroids = np.array(X[:k], dtype=float)\n    \n    for _ in range(max_iters):\n        # Step 2.1: Assign each sample to the nearest centroid\n        distances = np.sum((X[:, np.newaxis] - centroids) ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Step 2.2: Update centroids\n        new_centroids = np.array([X[labels == i].mean(axis=0) if np.any(labels == i) else centroids[i] for i in range(k)])\n        \n        # Step 3: Check for convergence\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 1e-4):\n            break\n        \n        centroids = new_centroids\n    \n    # Step 4: Sort centroids lexicographically and round to 4 decimals\n    centroids = np.round(np.sort(centroids, axis=0), 4)\n    \n    return centroids.tolist()\n\n# Example usage:\n# X = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# k = 2\n# print(kmeans_centroids(X, k))\n```\n\nThis script defines the `kmeans_centroids` function which performs the K-Means clustering algorithm as described. It initializes centroids with the first `k` samples, iteratively assigns samples to the nearest centroid, updates centroids, checks for convergence, and finally sorts and rounds the centroids before returning them as a list of lists."}
