{"task_id": 0, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Implement Ridge (L2-regularised) Linear Regression using its closed-form solution.\n    \n    Parameters:\n    data (np.ndarray): An m x n+1 ndarray where the last column is the target y and the first n columns are the features X.\n    alpha (float): Regularisation strength, default is 0.0.\n    \n    Returns:\n    list[float]: The weight vector rounded to 4 decimal places.\n    \"\"\"\n    # Separate features and target\n    X = data[:, :-1]\n    y = data[:, -1]\n    \n    # Add a bias term (intercept) to the features\n    X_b = np.c_[np.ones((X.shape[0], 1)), X]  # Add x0 = 1 to each instance\n    \n    # Compute the number of features including the bias term\n    n_features = X_b.shape[1]\n    \n    # Compute the identity matrix with the same number of features\n    I = np.identity(n_features)\n    \n    # Compute the closed-form solution for Ridge Regression\n    A = X_b.T @ X_b + alpha * I\n    \n    # Check if A is invertible\n    if np.linalg.det(A) == 0:\n        return -1\n    \n    # Compute the weight vector\n    w = np.linalg.inv(A) @ X_b.T @ y\n    \n    # Return the weight vector rounded to 4 decimal places as a Python list\n    return w.round(4).tolist()\n\n# Example usage:\n# data = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# alpha = 1.0\n# print(ridge_regression(data, alpha))\n```\n\nThis script defines a function `ridge_regression` that takes a 2D NumPy array `data` and a regularization parameter `alpha`, and returns the weight vector for Ridge Regression in a list format, rounded to four decimal places. If the matrix is not invertible, it returns `-1`."}
{"task_id": 1, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    \n    # Compute the Gram matrix\n    K = np.dot(X_train, X_train.T)\n    \n    updates = 0\n    i = 0\n    while updates < n_iter:\n        # Compute the activation\n        activation = np.sum(alpha * y_train * K[:, i])\n        # Test the margin\n        if y_train[i] * (activation + b) <= 0:\n            # Update alpha and b\n            alpha[i] += eta\n            b += eta * y_train[i]\n            updates += 1\n            i = 0  # Restart the scan from the first sample\n        else:\n            i += 1\n        \n        # Break the loop if an entire pass over the data finishes with no update\n        if i >= n_samples:\n            break\n    \n    # Compute the weight vector w from the final alpha\n    w = np.round(np.dot(alpha * y_train, X_train), 4)\n    b = np.round(b, 4)\n    \n    return w.tolist(), b\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [5, 6]])\n# y_train = np.array([1, 1, -1, -1])\n# w, b = perceptron_dual(X_train, y_train)\n# print(\"Weight vector:\", w)\n# print(\"Bias:\", b)\n```\n\nThis script implements the dual-form perceptron learning algorithm as described. It includes the computation of the Gram matrix to facilitate the use of inner products in the dual formulation. The algorithm updates the dual parameters `alpha` and the bias `b` when a misclassified sample is found. The weight vector `w` is computed from the final `alpha` values after training. The function returns the weight vector and bias, both rounded to four decimal places."}
{"task_id": 2, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    def identity(mu):\n        return mu\n\n    def identity_inv(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log(mu):\n        return np.log(mu)\n\n    def log_inv(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1.0 / mu\n\n    def logit(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv(eta):\n        return 1.0 / (1.0 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return 1.0 / (mu * (1 - mu))\n\n    return {\n        \"identity\": {\n            \"link\": identity,\n            \"inv_link\": identity_inv,\n            \"derivative\": identity_derivative\n        },\n        \"log\": {\n            \"link\": log,\n            \"inv_link\": log_inv,\n            \"derivative\": log_derivative\n        },\n        \"logit\": {\n            \"link\": logit,\n            \"inv_link\": logit_inv,\n            \"derivative\": logit_derivative\n        }\n    }\n\n# Example usage:\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links[\"logit\"][\"link\"](mu)        # \u2192 [-1.3863, 1.3863]\nmu2 = links[\"logit\"][\"inv_link\"](eta)    # \u2192 [0.2, 0.8]\n\nprint(\"eta:\", np.round(eta, 4))          # Output: eta: [-1.3863  1.3863]\nprint(\"mu2:\", np.round(mu2, 4))          # Output: mu2: [0.2     0.8   ]\n```"}
{"task_id": 3, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\nclass IsolationTreeNode:\n    def __init__(self, indices, depth=0):\n        self.indices = indices\n        self.depth = depth\n        self.left = None\n        self.right = None\n\ndef build_isolation_tree(data, indices, depth=0):\n    if len(indices) < 3:\n        return IsolationTreeNode(indices, depth)\n    \n    np.random.seed(0)  # Ensure reproducibility\n    feature_index = np.random.choice(data.shape[1])\n    feature_values = data[indices, feature_index]\n    down, up = np.min(feature_values), np.max(feature_values)\n    if down == up:\n        return IsolationTreeNode(indices, depth)  # Avoid infinite recursion if all values are the same\n    v = np.random.uniform(down, up)\n    \n    left_indices = indices[feature_values <= v]\n    right_indices = indices[feature_values > v]\n    \n    node = IsolationTreeNode(indices, depth)\n    node.left = build_isolation_tree(data, left_indices, depth + 1)\n    node.right = build_isolation_tree(data, right_indices, depth + 1)\n    \n    return node\n\ndef compute_path_lengths(node, path_lengths):\n    if node is None:\n        return\n    if node.left is None and node.right is None:  # It's a leaf\n        for index in node.indices:\n            path_lengths[index] = node.depth\n    else:\n        compute_path_lengths(node.left, path_lengths)\n        compute_path_lengths(node.right, path_lengths)\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    indices = np.arange(data.shape[0])\n    root = build_isolation_tree(data, indices)\n    path_lengths = [0] * data.shape[0]\n    compute_path_lengths(root, path_lengths)\n    return path_lengths\n\n# Example usage\ndata = np.arange(5).reshape(-1, 1)\nprint(isolation_tree_path_length(data))  # Output: [2, 2, 2, 1, 1]\n```\n\nThis script defines a class `IsolationTreeNode` to represent nodes in the isolation tree. The function `build_isolation_tree` recursively builds the tree according to the specified rules. The function `compute_path_lengths` traverses the tree and records the depth of the leaf for each sample. Finally, `isolation_tree_path_length` is the main function that initializes everything and returns the desired list of path lengths. The random seed is set inside the `build_isolation_tree` function to ensure reproducibility."}
{"task_id": 7, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    # Calculate the minimum support count\n    N = len(transactions)\n    min_support_count = math.ceil(minsup * N)\n    \n    # Extract all unique items from transactions\n    all_items = set(item for transaction in transactions for item in transaction)\n    \n    # Initialize the result dictionary\n    frequent_itemsets = {}\n    \n    # Check all possible itemsets\n    for k in range(1, len(all_items) + 1):\n        # Generate all possible combinations of items of length k\n        for itemset in combinations(all_items, k):\n            # Count how many transactions contain this itemset\n            support_count = sum(all(item in transaction for item in itemset) for transaction in transactions)\n            \n            # If the support count meets or exceeds the minimum, add to the result\n            if support_count >= min_support_count:\n                frequent_itemsets[itemset] = support_count\n    \n    return frequent_itemsets\n\n# Example usage\ntransactions = [\n    ['bread', 'milk'],\n    ['bread', 'diaper', 'beer', 'egg'],\n    ['milk', 'diaper', 'beer', 'coke'],\n    ['bread', 'milk', 'diaper', 'beer'],\n    ['bread', 'milk', 'diaper', 'coke']\n]\nminsup = 0.6\n\nresult = find_frequent_itemsets(transactions, minsup)\nprint(result)\n```\n\nThis script defines a function `find_frequent_itemsets` that takes a list of transactions and a minimum support threshold, and returns a dictionary of frequent itemsets and their support counts. The function uses combinations from the itertools module to generate all possible itemsets and checks how many transactions contain each itemset. If an itemset meets or exceeds the minimum support count, it is added to the result dictionary."}
{"task_id": 11, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    n_samples, n_features = data.shape\n    \n    # Step 1: Initialize centroids as the first k samples\n    centroids = data[:k].copy()\n    \n    for _ in range(max_iter):\n        # Step 2: Assign each sample to the nearest centroid\n        labels = np.argmin(np.sum((data[:, np.newaxis] - centroids) ** 2, axis=2), axis=1)\n        \n        # Step 3: Recompute centroids\n        new_centroids = np.array([data[labels == i].mean(axis=0) if np.any(labels == i) else \n                                  data[np.random.randint(n_samples)] for i in range(k)])\n        \n        # Step 4: Check for convergence\n        max_change = np.max(np.linalg.norm(new_centroids - centroids, axis=1))\n        if max_change < epsilon:\n            break\n        \n        centroids = new_centroids\n    \n    # Round centroids to 4 decimal places\n    rounded_centroids = np.round(centroids, 4).tolist()\n    \n    return rounded_centroids, labels.tolist()\n```\n\nThis script implements the K-Means clustering algorithm from scratch, adhering to the specified requirements. It initializes centroids deterministically, assigns samples to the nearest centroids, updates centroids, handles empty clusters, and checks for convergence based on the maximum change in centroids. The final centroids are rounded to four decimal places before being returned."}
{"task_id": 13, "completion_id": 0, "completion": "```\nimport numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_users, n_items = data.shape\n    \n    # Step 1: Build the item-item similarity matrix S\n    S = np.zeros((n_items, n_items))\n    \n    for i in range(n_items):\n        for j in range(i + 1, n_items):\n            # Find users who rated both items i and j\n            users_who_rated_both = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(users_who_rated_both) == 0:\n                S[i, j] = S[j, i] = 0\n            else:\n                v1 = data[users_who_rated_both, i]\n                v2 = data[users_who_rated_both, j]\n                \n                if criterion == 'cosine':\n                    # Mean center vectors only if their sample standard deviation is larger than 1e-3\n                    if np.std(v1) > 1e-3:\n                        v1 = v1 - np.mean(v1)\n                    if np.std(v2) > 1e-3:\n                        v2 = v2 - np.mean(v2)\n                    \n                    # Compute cosine similarity\n                    if np.linalg.norm(v1) * np.linalg.norm(v2) != 0:\n                        S[i, j] = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n                    else:\n                        S[i, j] = 0\n                elif criterion == 'pearson':\n                    # Compute Pearson correlation\n                    S[i, j] = np.corrcoef(v1, v2)[0, 1]\n                else:\n                    raise ValueError(\"Invalid criterion. Use 'cosine' or 'pearson'.\")\n                \n                S[j, i] = S[i, j]\n    \n    # Step 2: Collect rated items by the active user\n    rated_items = np.where(data[user_ind, :] > 0)[0]\n    r = data[user_ind, rated_items]\n    \n    # Step 3: Compute the predicted attractiveness score for each unrated item\n    scores = defaultdict(float)\n    \n    for t in range(n_items):\n        if t not in rated_items:\n            numerator = np.sum(r * S[t, rated_items])\n            denominator = np.sum(np.abs(S[t, rated_items]))\n            if denominator == 0:\n                scores[t] = 0\n            else:\n                scores[t] = numerator / denominator\n    \n    # Step 4: Return the k items with the highest predicted score\n    recommended_items = sorted(scores, key=scores.get, reverse=True)[:k]\n    \n    return recommended_items\n\n# Example usage:\n# data = np.array([\n#     [5, 3, 0, 1],\n#     [4, 0, 0, 1],\n#     [1, 1, 0, 5],\n#     [1, 0, 0, 4],\n#     [0, 1, 5, 4],\n# ])\n# user_ind = 0\n# k = 2\n# criterion = 'cosine'\n# print(knn_recommend(data, user_ind, k, criterion))\n```\n\nThis code defines the `knn_recommend` function, which implements the item-based k-NN collaborative filtering recommender as described. It constructs the item-item similarity matrix based on the specified criterion, calculates the predicted attractiveness score for each unrated item for the given user, and returns the indices of the top `k` items."}
{"task_id": 19, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_gain = 0\n    best_feature = None\n    best_threshold = None\n\n    G = np.sum(g)\n    H = np.sum(h)\n\n    def L2(gradient_sum, hessian_sum):\n        return -0.5 * (gradient_sum ** 2) / (hessian_sum + lam) + gamma\n\n    L_main = L2(G, H)\n\n    for feature_index in range(n_features):\n        sorted_indices = np.argsort(X[:, feature_index])\n        g_sorted = g[sorted_indices]\n        h_sorted = h[sorted_indices]\n        X_sorted = X[sorted_indices, feature_index]\n\n        G_L = 0\n        H_L = 0\n\n        for i in range(n_samples - 1):\n            G_L += g_sorted[i]\n            H_L += h_sorted[i]\n            G_R = G - G_L\n            H_R = H - H_L\n\n            threshold = X_sorted[i]\n            if X_sorted[i] == X_sorted[i + 1]:\n                continue\n\n            # Calculate gain\n            gain = L_main - L2(G_L, H_L) - L2(G_R, H_R)\n\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature_index\n                best_threshold = threshold\n\n    if best_gain > 0:\n        return best_feature, best_threshold\n    else:\n        return None\n```\n\nThis function iterates over each feature and each unique threshold (value) of the feature to find the best split that maximizes the gain. It ensures that the split leaves at least two training instances on each side by skipping cases where the current and next values are the same. If no split yields a positive gain, it returns `None`."}
{"task_id": 20, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Convert input to a NumPy array if it's a list\n    if isinstance(x, list):\n        x = np.array(x)\n    \n    # Calculate the sigmoid\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    \n    # Calculate the gradient of the sigmoid\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    \n    # Round the results to 4 decimal places\n    sigmoid_x_rounded = np.round(sigmoid_x, 4)\n    gradient_x_rounded = np.round(gradient_x, 4)\n    \n    # Convert back to scalar if input was a scalar\n    if isinstance(x, (int, float)) or x.ndim == 0:\n        return float(sigmoid_x_rounded), float(gradient_x_rounded)\n    else:\n        return sigmoid_x_rounded.tolist(), gradient_x_rounded.tolist()\n\n# Example usage:\n# scalar\nscalar_result = sigmoid_activation(0.5)\nprint(\"Scalar:\", scalar_result)  # Output: (0.6225, 0.235)\n\n# 1-D array\narray_1d_result = sigmoid_activation([0.5, -1, 2])\nprint(\"1-D Array:\", array_1d_result)  # Output: ([0.6225, 0.2689, 0.8808], [0.235, 0.1966, 0.105])\n\n# 2-D array\narray_2d_result = sigmoid_activation([[0.5, -1], [2, 0]])\nprint(\"2-D Array:\", array_2d_result)  # Output: ([[0.6225, 0.2689], [0.8808, 0.5]], [[0.235, 0.1966], [0.105, 0.25]])\n```"}
{"task_id": 21, "completion_id": 0, "completion": "```\nimport numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float],\n                        y_train: list[int],\n                        x_test: list[float],\n                        epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    \n    # Convert inputs to numpy arrays for easier manipulation\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    \n    n_samples = len(x_train)\n    # Initialize sample weights uniformly\n    weights = np.ones(n_samples) / n_samples\n    \n    # List to store the weak classifiers (stumps) and their coefficients\n    stumps = []\n    alphas = []\n    \n    # Sort the training data\n    sorted_indices = np.argsort(x_train)\n    sorted_x_train = x_train[sorted_indices]\n    sorted_y_train = y_train[sorted_indices]\n    \n    # Function to compute weighted error of a stump\n    def compute_weighted_error(d, theta):\n        # Predictions of the stump\n        if d == 0:\n            predictions = np.where(sorted_x_train <= theta, 1, -1)\n        else:\n            predictions = np.where(sorted_x_train > theta, 1, -1)\n        \n        # Weighted error\n        weighted_error = np.sum(weights[sorted_indices] * (predictions != sorted_y_train))\n        return weighted_error, predictions\n    \n    # Main training loop\n    while True:\n        # Initialize minimum error to a large value\n        min_error = float('inf')\n        best_stump = None\n        best_predictions = None\n        \n        # Try all possible stumps\n        for d in [0, 1]:\n            for i in range(n_samples - 1):\n                # Possible threshold is halfway between two consecutive points\n                theta = (sorted_x_train[i] + sorted_x_train[i + 1]) / 2\n                # Compute error for the current stump\n                error, predictions = compute_weighted_error(d, theta)\n                # Update best stump if the current one has lower error\n                if error < min_error:\n                    min_error = error\n                    best_stump = (d, theta)\n                    best_predictions = predictions\n        \n        # Compute coefficient alpha for the best stump\n        alpha = 0.5 * math.log((1 - min_error) / min_error)\n        \n        # Update sample weights\n        weights *= np.exp(-alpha * best_predictions * sorted_y_train)\n        weights /= np.sum(weights)  # Normalize weights\n        \n        # Store the best stump and its coefficient\n        stumps.append(best_stump)\n        alphas.append(alpha)\n        \n        # Compute ensemble prediction on training data\n        ensemble_predictions = np.zeros(n_samples)\n        for alpha, (d, theta) in zip(alphas, stumps):\n            if d == 0:\n                predictions = np.where(x_train <= theta, 1, -1)\n            else:\n                predictions = np.where(x_train > theta, 1, -1)\n            ensemble_predictions += alpha * predictions\n        \n        # Compute(training error\n        training_error = np.mean(np.sign(ensemble_predictions) != y_train)\n        \n        # Check if training error is within the threshold\n        if training_error <= epsilon:\n            break\n    \n    # Use trained ensemble to make predictions on the test data\n    ensemble_predictions_test = np.zeros(len(x_test))\n    for alpha, (d, theta) in zip(alphas, stumps):\n        if d == 0:\n            predictions = np.where(x_test <= theta, 1, -1)\n        else:\n            predictions = np.where(x_test > theta, 1, -1)\n        ensemble_predictions_test += alpha * predictions\n    \n    # Return the final predictions\n    return np.sign(ensemble_predictions_test).astype(int).tolist()\n```\nThis script implements a 1-D AdaBoost algorithm using decision stumps as weak learners. The `adaboost_1d_predict` function takes training data, training labels, test data, and an error threshold `epsilon` as inputs. It outputs the predicted labels for the test data. The function ensures that the training error does not exceed `epsilon` before returning the test predictions."}
{"task_id": 25, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    # Number of training samples\n    n = X_train.shape[0]\n    # Number of test samples\n    m = X_test.shape[0]\n    \n    # Compute the Euclidean distance between each pair of X_train and X_test samples\n    # This results in a (m, n) matrix where each element (i, j) is ||X_train[j] - X_test[i]||^2\n    diff = X_train[np.newaxis, :, :] - X_test[:, np.newaxis, :]\n    squared_distances = np.sum(diff ** 2, axis=2)\n    \n    # Compute the Gaussian kernel matrix for X_train and X_test\n    K = np.exp(-gamma * squared_distances)\n    \n    # Compute the decision function g(z) for each test sample\n    # g(z) = \u03a3_{i=1..n} \u03b1_i \u00b7 y_i \u00b7 exp( \u2212\u03b3 \u00b7 ||x_i \u2212 z||\u00b2 )  +  b\n    g_z = np.dot(alpha * y_train, K) + b\n    \n    # Predicted class is sign(g(z))\n    predictions = np.sign(g_z).astype(int)\n    \n    # Ensure predictions are exactly 1 or -1\n    predictions[predictions == 0] = 1\n    \n    return predictions.tolist()\n```\n\nThis script defines the `gaussian_svm_predict` function, which takes the necessary inputs to make predictions using a pre-trained Gaussian kernel SVM. The function computes the Euclidean squared distances between all training and test samples, uses these distances to compute the Gaussian kernel matrix, and then applies the decision function to predict the labels for the test samples. The predictions are ensured to be either 1 or -1."}
{"task_id": 28, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    # Convert the input list of lists to a NumPy array\n    X_np = np.array(X)\n    \n    # Get the dimensions of the matrix\n    m, n = X_np.shape\n    \n    # Check if k is within the valid range\n    if k < 1 or k > min(m, n):\n        return -1\n    \n    # Perform truncated SVD\n    U, s, Vt = np.linalg.svd(X_np, full_matrices=False)\n    \n    # Truncate the SVD components to keep only k dimensions\n    U_k = U[:, :k]\n    s_k = s[:k]\n    Vt_k = Vt[:k, :]\n    \n    # Reconstruct the matrix\n    X_hat_np = np.dot(U_k, np.dot(np.diag(s_k), Vt_k))\n    \n    # Calculate the mean squared error\n    mse = np.mean((X_np - X_hat_np) ** 2)\n    \n    # Round the reconstructed matrix and mse to four decimals\n    X_hat_rounded = np.round(X_hat_np, 4).tolist()\n    mse_rounded = np.round(mse, 4)\n    \n    return X_hat_rounded, mse_rounded\n\n# Example usage:\n# X = [[1, 2], [3, 4], [5, 6]]\n# k = 1\n# print(linear_autoencoder(X, k))\n```\n\nThis script defines the `linear_autoencoder` function, which performs the required operations to reconstruct the matrix using truncated SVD and calculates the mean squared error. The function returns the reconstructed matrix and the MSE, both rounded to four decimal places. If the value of `k` is invalid, it returns `-1`."}
{"task_id": 29, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                           y_train: list[float] | np.ndarray,\n                           x_query: float,\n                           epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    \n    # Sort the training data by feature values\n    sorted_indices = np.argsort(x_train)\n    x_train = x_train[sorted_indices]\n    y_train = y_train[sorted_indices]\n    \n    # Initialize residuals\n    residuals = y_train.copy()\n    \n    # Initialize ensemble predictions\n    ensemble_predictions = np.zeros_like(y_train, dtype=float)\n    \n    # Calculate initial residual sum of squares\n    rss = np.sum(residuals ** 2)\n    \n    # List to store the stumps (split point, c1, c2)\n    stumps = []\n    \n    # Iteratively add stumps until RSS is less than epsilon\n    while rss > epsilon:\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n        best_rss = np.inf\n        \n        # Generate candidate split points (mid-points between consecutive x values)\n        candidate_splits = (x_train[:-1] + x_train[1:]) / 2.0\n        \n        for split in candidate_splits:\n            # Calculate c1 and c2\n            left_indices = x_train <= split\n            right_indices = x_train > split\n            \n            c1 = np.mean(residuals[left_indices])\n            c2 = np.mean(residuals[right_indices])\n            \n            # Calculate the RSS for this split\n            current_rss = np.sum(residuals[left_indices] ** 2) + np.sum(residuals[right_indices] ** 2)\n            \n            # Check if this split is better\n            if current_rss < best_rss:\n                best_rss = current_rss\n                best_split = split\n                best_c1 = c1\n                best_c2 = c2\n        \n        # Add the best stump to the ensemble\n        stumps.append((best_split, best_c1, best_c2))\n        \n        # Update the ensemble predictions\n        ensemble_predictions[left_indices] += best_c1\n        ensemble_predictions[right_indices] += best_c2\n        \n        # Update residuals\n        residuals = y_train - ensemble_predictions\n        \n        # Update RSS\n        rss = best_rss\n    \n    # Predict the query point\n    prediction = 0.0\n    for split, c1, c2 in stumps:\n        if x_query <= split:\n            prediction += c1\n        else:\n            prediction += c2\n    \n    return round(prediction, 4)\n\n# Example usage:\n# x_train = [1, 2, 3, 4, 5]\n# y_train = [2, 4, 5, 4, 5]\n# x_query = 3.5\n# print(predict_boosting_tree(x_train, y_train, x_query))  # Example output\n```"}
{"task_id": 34, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None) -> np.ndarray:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s based on the given shape and sparsity.\n    \n    Parameters:\n    - shape (tuple[int, ...]): The desired shape of the output tensor.\n    - sparsity (float): The probability of generating a 1.0 in the tensor. Must be in the range [0, 1].\n    - seed (int | None): An optional seed for the random number generator to ensure reproducibility.\n    \n    Returns:\n    - np.ndarray: A NumPy array of the specified shape with entries 1.0 with probability `sparsity` and 0.0 otherwise.\n                  Returns -1 if the sparsity is outside the range [0, 1].\n    \"\"\"\n    if not (0 <= sparsity <= 1):\n        return -1\n    \n    if seed is not None:\n        np.random.seed(seed)\n    \n    random_array = np.random.rand(*shape)\n    binary_tensor = (random_array < sparsity).astype(float)\n    \n    return binary_tensor\n\n# Example usage:\n# shape = (2, 3)\n# sparsity = 0.3\n# seed = 42\n# result = random_binary_tensor(shape, sparsity, seed)\n# print(result)\n```\n\nThis script defines the `random_binary_tensor` function, which generates a binary tensor with specified sparsity and optional seed for reproducibility. The function checks if the sparsity is within the valid range and returns `-1` if it's not. Otherwise, it generates a random array and converts it to a binary tensor based on the sparsity value."}
{"task_id": 39, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    median_index = n_samples // 2\n    \n    # Use argpartition to find the median index\n    partitioned_indices = np.argpartition(data[:, d], median_index)\n    \n    # Get the median index\n    pivot = partitioned_indices[median_index]\n    \n    # Separate the left and right indices\n    left_indices = partitioned_indices[:median_index]\n    right_indices = partitioned_indices[median_index + 1:]\n    \n    # Sort the left and right indices to ensure deterministic output\n    left_indices = sorted(left_indices)\n    right_indices = sorted(right_indices)\n    \n    return pivot, left_indices, right_indices\n\n# Example usage:\n# data = np.array([[3, 2], [1, 4], [5, 6], [7, 8], [9, 0]])\n# d = 0\n# pivot, left, right = get_split(data, d)\n# print(\"Pivot:\", pivot)\n# print(\"Left indices:\", left)\n# print(\"Right indices:\", right)\n```\n\nThis script defines the `get_split` function, which performs a median split on a given two-dimensional NumPy array `data` along a specified column index `d`. It uses `numpy.argpartition` to efficiently find the median index without fully sorting the column, ensuring the operation runs in O(n) time. The function returns the pivot index and two sorted lists of indices for the left and right partitions."}
{"task_id": 40, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    # Assertions for pre-conditions\n    assert x.ndim == 1, \"Input signal must be one-dimensional.\"\n    assert stride > 0, \"Stride must be a positive integer.\"\n    assert len(x) >= frame_width, \"Signal length must be at least frame_width.\"\n\n    # Calculate number of frames\n    n_frames = (len(x) - frame_width) // stride + 1\n\n    # Create a view using as_strided\n    frames = as_strided(\n        x, shape=(n_frames, frame_width),\n        strides=(x.strides[0] * stride, x.strides[0])\n    )\n\n    # Set the writeability of the view\n    frames.flags.writeable = frames.flags.writeable and writeable\n\n    return frames\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Create a sample signal\n    x = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    frame_width = 4\n    stride = 2\n\n    # Convert to frames\n    framed_signal = to_frames(x, frame_width, stride, writeable=False)\n    print(framed_signal)\n    print(f\"Is writeable: {framed_signal.flags.writeable}\")\n```\n\nThis script defines the `to_frames` function, which converts a one-dimensional NumPy array into overlapping frames using `numpy.lib.stride_tricks.as_strided`. The function includes assertions to ensure the input meets the specified pre-conditions. The example usage demonstrates how to call the function and print the resulting framed signal."}
{"task_id": 48, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Convert input to a numpy array if it's not already\n    X = np.asarray(X)\n    \n    # Check if the matrix is two-dimensional\n    if X.ndim != 2:\n        return False\n    \n    # Check if all elements are between 0 and 1\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    \n    # Check if each row sums to 1 within a tolerance of 1e-8\n    row_sums = np.sum(X, axis=1)\n    if not np.allclose(row_sums, 1, atol=1e-8):\n        return False\n    \n    return True\n\n# Example usage:\n# matrix = [[0.5, 0.5], [0.3, 0.7]]\n# print(is_stochastic(matrix))  # Should print: True\n```"}
{"task_id": 55, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n, d = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    \n    for i in range(max_iter):\n        # Determine the current batch\n        start_idx = (i * batch_size) % n\n        end_idx = (start_idx + batch_size) % n\n        \n        if start_idx < end_idx:\n            X_batch = X[start_idx:end_idx]\n            y_batch = y[start_idx:end_idx]\n        else:\n            X_batch = np.vstack((X[start_idx:], X[:end_idx]))\n            y_batch = np.concatenate((y[start_idx:], y[:end_idx]))\n        \n        # Compute the gradient\n        gradient = (1 / len(X_batch)) * X_batch.T @ (X_batch @ w - y_batch)\n        \n        # Update the running average of squared gradients\n        s = rho * s + (1 - rho) * (gradient ** 2)\n        \n        # Update the weights\n        w -= eta * gradient / (np.sqrt(s) + eps_station)\n        \n        # Check for early stopping\n        if np.linalg.norm(gradient) < epsilon:\n            break\n    \n    return np.round(w, 4).tolist()\n\n# Example usage:\n# X = np.array([[1, 1], [1, 2], [2, 2], [2, 3]])\n# y = np.dot(X, np.array([1, 2])) + 3\n# print(rms_prop(X, y))\n```\n\nThis script defines the `rms_prop` function which implements the RMSprop optimization algorithm for linear regression. The function takes in the design matrix `X`, target vector `y`, and several hyperparameters, and returns the learned weight vector rounded to four decimal places. The function handles both full-batch and mini-batch processing based on the `batch_size` parameter."}
{"task_id": 56, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n    \"\"\"Computes the SoftPlus activation or its gradient on the input x.\"\"\"\n    \n    def _softplus(val):\n        # Numerically stable SoftPlus function\n        if val > 30:  # Threshold to prevent overflow in exp(val)\n            return val + np.log1p(np.exp(-val))\n        else:\n            return np.log1p(np.exp(val))\n    \n    def _sigmoid(val):\n        # Numerically stable Sigmoid function\n        if val < -30:  # Threshold to prevent overflow in exp(-val)\n            return np.exp(val)\n        else:\n            return 1 / (1 + np.exp(-val))\n    \n    if isinstance(x, (list, np.ndarray)):\n        x = np.array(x)\n        if deriv:\n            result = np.vectorize(_sigmoid)(x)\n        else:\n            result = np.vectorize(_softplus)(x)\n        return np.round(result, 4).tolist()\n    else:\n        if deriv:\n            return round(_sigmoid(x), 4)\n        else:\n            return round(_softplus(x), 4)\n\n# Example usage:\n# print(softplus([0, -1, 100], deriv=False))  # Should return [0.6931, 0.3133, 100.0000]\n# print(softplus([0, -1, 100], deriv=True))   # Should return [0.5000, 0.2689, 1.0000]\n```\n\nThis script defines the `softplus` function which computes the SoftPlus activation or its gradient based on the `deriv` flag. The function handles scalar, list, and NumPy array inputs. It ensures numerical stability by using a piece-wise approach and the `log1p` function. The results are rounded to four decimal places as required."}
{"task_id": 58, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    if N < 1:\n        raise ValueError(\"N must be at least 1\")\n\n    # Create N-gram and (N-1)-gram counters\n    ngram_counter = Counter(zip(*[corpus[i:] for i in range(N)]))\n    if N > 1:\n        n_minus_1_gram_counter = Counter(zip(*[corpus[i:] for i in range(N-1)]))\n    else:\n        n_minus_1_gram_counter = None\n\n    log_prob = 0.0\n\n    # Calculate the log-probability of the sequence\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i+N])\n        if N == 1:\n            count_ngram = ngram_counter[ngram]\n            count_total = len(corpus)\n        else:\n            count_ngram = ngram_counter[ngram]\n            count_n_minus_1_gram = n_minus_1_gram_counter[ngram[:-1]]\n        \n        if count_ngram == 0 or (N > 1 and count_n_minus_1_gram == 0):\n            return float('-inf')\n        \n        if N == 1:\n            prob = count_ngram / count_total\n        else:\n            prob = count_ngram / count_n_minus_1_gram\n        \n        log_prob += np.log(prob)\n\n    return round(log_prob, 4)\n```\n\nThis script defines the function `unsmoothed_ngram_log_prob` which calculates the log-probability of a given sequence under an unsmoothed MLE N-gram model trained on a specified corpus. The function handles both unigrams and higher-order n-grams, checks for zero counts, and returns the log-probability rounded to four decimal places. If any required count is zero, it returns negative infinity."}
{"task_id": 62, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef lasso_regression(X: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\", degree: int, reg_factor: float, n_iterations: int = 1000, tol: float = 1e-6) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X).flatten()\n    y = np.array(y).flatten()\n    \n    if X.shape != y.shape:\n        raise ValueError(\"X and y must have the same shape.\")\n    \n    m = len(y)\n    \n    # Build the design matrix\n    design_matrix = np.vander(X, degree + 1, increasing=True)\n    \n    # Initialize weights\n    weights = np.zeros(degree + 1)\n    \n    for _ in range(n_iterations):\n        # Update the bias term exactly\n        weights[0] = np.mean(y - design_matrix[:, 1:] @ weights[1:])\n        \n        # Initialize the largest change tracker\n        max_change = 0.0\n        \n        # Iterate over each feature (excluding the bias)\n        for j in range(1, degree + 1):\n            X_j = design_matrix[:, j]\n            residual = y - design_matrix @ weights + weights[j] * X_j\n            rho = X_j.T @ residual\n            \n            # Soft thresholding\n            weights_j_new = np.sign(rho) * max(abs(rho) - reg_factor, 0) / (X_j.T @ X_j)\n            \n            # Calculate the change in weights\n            change = abs(weights_j_new - weights[j])\n            max_change = max(max_change, change)\n            \n            # Update the weight\n            weights[j] = weights_j_new\n        \n        # Check for convergence\n        if max_change < tol:\n            break\n    \n    # Return the coefficients rounded to 4 decimal places\n    return [round(w, 4) for w in weights]\n\n# Example usage:\n# X = [1, 2, 3, 4, 5]\n# y = [2, 4, 5, 4, 5]\n# degree = 2\n# reg_factor = 0.1\n# print(lasso_regression(X, y, degree, reg_factor))\n```\n\nThis script defines a function `lasso_regression` which performs Lasso regression using coordinate descent on a univariate dataset with polynomial features. The function builds a design matrix, initializes weights, and updates them iteratively according to the coordinate descent algorithm until convergence or a maximum number of iterations is reached. The coefficients are returned rounded to four decimal places."}
{"task_id": 63, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector \u03b2_t for a given time index t in a Hidden Markov Model (HMM).\n\n    Parameters:\n    A (list[list[float]]): Transition probability matrix of shape (N, N).\n    B (list[list[float]]): Emission probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices of length T.\n    t (int): Time index for which to calculate the backward probability vector (0 \u2264 t < T).\n\n    Returns:\n    list[float]: List of N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    obs = np.array(obs)\n    N = A.shape[0]  # Number of states\n    T = len(obs)    # Length of the observation sequence\n\n    # Initialize \u03b2 with 1s, as \u03b2_{T-1}(i) = 1 for all i\n    beta = np.ones(N)\n    \n    # Compute \u03b2 in a backward manner from T-2 to t\n    for time in range(T - 2, t - 1, -1):\n        next_beta = beta\n        beta = np.sum(A * B[:, obs[time + 1]] * next_beta, axis=1)\n\n    # Return the \u03b2_t rounded to 4 decimal places\n    return [round(prob, 4) for prob in beta]\n\n# Example usage:\n# A = Transition matrix, B = Emission matrix, obs = Observation sequence, t = Time index\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.4, 0.5], [0.6, 0.3, 0.1]]\nobs = [0, 1, 2]\nt = 0\nprint(backward_beta(A, B, obs, t))  # Example output for t=0\n```"}
{"task_id": 65, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that implements the backward algorithm for computing the probability of an observation sequence given a Hidden Markov Model (HMM).\n\n```python\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    # Check for empty inputs\n    if not A or not B or not pi or not obs:\n        return 0.0\n\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    obs = np.array(obs)\n\n    N = A.shape[0]  # Number of states\n    T = len(obs)    # Length of observation sequence\n\n    # Initialize beta matrix\n    beta = np.zeros((N, T))\n\n    # Base case: beta_{T-1}(i) = 1 for all states i\n    beta[:, T-1] = 1.0\n\n    # Recursive case: beta_t(i) = sum_{j=0}^{N-1} A_{ij} * B_{j, obs[t+1]} * beta_{t+1}(j)\n    for t in range(T-2, -1, -1):\n        for i in range(N):\n            beta[i, t] = np.sum(A[i, :] * B[:, obs[t+1]] * beta[:, t+1])\n\n    # Final probability: P(O|lambda) = sum_{i=0}^{N-1} pi_i * B_{i, obs[0]} * beta_0(i)\n    prob = np.sum(pi * B[:, obs[0]] * beta[:, 0])\n\n    return round(prob, 6)\n\n# Example usage:\n# A = [[0.5, 0.2, 0.3], [0.3, 0.5, 0.2], [0.2, 0.3, 0.5]]\n# B = [[0.6, 0.4], [0.3, 0.7], [0.8, 0.2]]\n# pi = [0.2, 0.4, 0.4]\n# obs = [0, 1, 0]\n# print(backward_prob(A, B, pi, obs))  # Output should be the probability rounded to 6 decimals\n```\n\nThis script defines the `backward_prob` function, which calculates the probability of an observation sequence using the backward algorithm. It handles edge cases where any of the input lists are empty by returning `0.0`. The function uses NumPy for efficient matrix operations and ensures the result is rounded to six decimal places."}
{"task_id": 69, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    \n    # Validate dimensions\n    if S.shape[0] != A.shape[0] or S.shape[0] != A.shape[1] or S.shape[0] != B.shape[0]:\n        return -1\n    \n    n_states = len(S)\n    n_observations = len(observations)\n    \n    # Check if observations are in the valid range\n    for obs in observations:\n        if obs < 0 or obs >= B.shape[1]:\n            return -1\n    \n    # Empty sequence check\n    if n_observations == 0:\n        return -1\n    \n    # Initialize the forward variables\n    alpha = np.zeros((n_observations, n_states))\n    alpha[0] = S * B[:, observations[0]]\n    \n    # Compute the forward variables recursively\n    for t in range(1, n_observations):\n        for j in range(n_states):\n            alpha[t, j] = B[j, observations[t]] * np.dot(alpha[t-1], A[:, j])\n    \n    # Calculate the likelihood of the observation sequence\n    likelihood = np.sum(alpha[-1])\n    \n    return round(likelihood, 4)\n\n# Example usage:\n# S = [0.6, 0.4]\n# A = [[0.7, 0.3], [0.4, 0.6]]\n# B = [[0.1, 0.4, 0.5], [0.7, 0.2, 0.1]]\n# observations = [0, 1, 2]\n# print(forward_algorithm(S, A, B, observations))  # Output should be rounded to 4 decimal places\n```\nThis script defines the `forward_algorithm` function which implements the forward algorithm for Hidden Markov Models. It validates the inputs, checks the observation indices, and computes the likelihood of the given observation sequence using the forward algorithm. The result is rounded to four decimal places."}
{"task_id": 70, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that implements the FP-Growth algorithm to discover frequent item-sets from a list of transactions. The script adheres to the specified requirements and constraints.\n\n```python\nfrom collections import Counter, defaultdict\nfrom typing import List, Tuple\n\nclass FPNode:\n    def __init__(self, item: str, support: int = 0):\n        self.item = item\n        self.support = support\n        self.parent = None\n        self.children = defaultdict(FPNode)\n        self.link = None\n\nclass FPTree:\n    def __init__(self):\n        self.root = FPNode(None)\n        self.header_table = defaultdict(lambda: {'head': None, 'tail': None, 'support': 0})\n\n    def add_transaction(self, transaction: List[str], support: int = 1):\n        current_node = self.root\n        for item in transaction:\n            if item not in current_node.children:\n                new_node = FPNode(item, support)\n                current_node.children[item] = new_node\n                new_node.parent = current_node\n                self.update_header_table(item, new_node)\n            else:\n                current_node.children[item].support += support\n            current_node = current_node.children[item]\n\n    def update_header_table(self, item: str, node: FPNode):\n        self.header_table[item]['support'] += node.support\n        if self.header_table[item]['head'] is None:\n            self.header_table[item]['head'] = node\n        if self.header_table[item]['tail']:\n            self.header_table[item]['tail'].link = node\n        self.header_table[item]['tail'] = node\n\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    if not transactions:\n        return []\n\n    # Step 1: Count the support of every single item and discard infrequent ones.\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    frequent_items = {item: support for item, support in item_counts.items() if support >= min_support}\n    if not frequent_items:\n        return []\n\n    # Sort items by frequency (descending) and lexical order (ascending)\n    frequent_items = dict(sorted(frequent_items.items(), key=lambda x: (-x[1], x[0])))\n\n    # Step 2: Build one FP-tree (a prefix tree in which every node stores *item name* and *support count*).\n    fp_tree = FPTree()\n    for transaction in transactions:\n        # Filter and sort the transaction by frequency\n        filtered_transaction = [item for item in transaction if item in frequent_items]\n        filtered_transaction.sort(key=lambda x: frequent_items[x], reverse=True)\n        fp_tree.add_transaction(filtered_transaction)\n\n    # Step 3: Recursively mine conditional FP-trees to obtain larger item-sets.\n    frequent_itemsets = []\n    for base_pat, value in fp_tree.header_table.items():\n        support_count = value['support']\n        frequent_itemsets.append([base_pat])\n\n        # Generate conditional base pattern\n        conditional_base_pat = []\n        node = value['tail']\n        while node:\n            prefix_path = []\n            parent = node.parent\n            while parent and parent.item:\n                prefix_path.append(parent.item)\n                parent = parent.parent\n            if prefix_path:\n                conditional_base_pat.append((prefix_path, node.support))\n            node = node.link\n\n        # Recursively build the conditional FP-tree\n        if conditional_base_pat:\n            cond_tree = FPTree()\n            for path, support in conditional_base_pat:\n                cond_tree.add_transaction(path, support)\n            cond_tree.header_table = {v: fp_tree.header_table[v] for v in cond_tree.header_table if cond_tree.header_table[v]['support'] >= min_support}\n\n            if cond_tree.header_table:\n                mined_sets = fp_growth([t for t, _ in conditional_base_pat], min_support)\n                for item_set in mined_sets:\n                    frequent_itemsets.append(item_set + [base_pat])\n\n    # Sort the frequent itemsets by length and lexicographically\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\n\n# Example usage:\n# transactions = [['milk', 'bread', 'butter'], ['milk', 'bread'], ['bread', 'butter'], ['bread', 'butter', 'milk'], ['bread', 'milk']]\n# min_support = 2\n# print(fp_growth(transactions, min_support))\n```\n\nThis script defines the necessary classes and functions to implement the FP-Growth algorithm. The `fp_growth` function processes the transactions, builds the FP-tree, and mines frequent item-sets by recursively constructing and analyzing conditional FP-trees. The results are sorted to meet the deterministic output constraints."}
{"task_id": 75, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    # Check if k is a valid number\n    if k <= 0 or k > len(X_train):\n        return -1\n    \n    # Convert input lists to numpy arrays for efficient computation\n    X_train_np = np.array(X_train)\n    y_train_np = np.array(y_train)\n    X_test_np = np.array(X_test)\n    \n    # Initialize the list to store predictions\n    predictions = []\n    \n    # Iterate over each test sample\n    for test_sample in X_test_np:\n        # Compute squared Euclidean distances from the test sample to all training samples\n        distances = np.sum((X_train_np - test_sample) ** 2, axis=1)\n        \n        # Get the indices of the k nearest neighbors\n        nearest_indices = np.argsort(distances)[:k]\n        \n        # Get the class labels of the k nearest neighbors\n        nearest_labels = y_train_np[nearest_indices]\n        \n        # Find the class with the highest frequency (majority voting)\n        # If there's a tie, np.argmin will select the smallest label\n        unique_labels, counts = np.unique(nearest_labels, return_counts=True)\n        majority_label = unique_labels[np.argmin(-counts + np.min(unique_labels) / 1e9)]\n        \n        # Append the majority label to the predictions list\n        predictions.append(majority_label)\n    \n    return predictions\n```\n\nThis script implements the k-Nearest Neighbors (k-NN) classifier according to the specified requirements. It checks for valid `k`, computes Euclidean distances, and uses majority voting to determine the class for each test sample. In the event of a tie, it selects the smallest class label."}
{"task_id": 76, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are not already\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    \n    # Define a small constant for numerical stability\n    epsilon = np.finfo(float).eps\n    \n    # Calculate the unnormalised categorical cross-entropy loss\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    \n    # Return the loss rounded to 4 decimal places\n    return round(loss, 4)\n\n# Example usage:\n# y = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n# y_pred = [[0.7, 0.2, 0.1], [0.1, 0.8, 0.1], [0.2, 0.2, 0.6]]\n# print(cross_entropy_loss(y, y_pred))  # Output should be a float rounded to 4 decimal places\n```\n\nThis script defines the `cross_entropy_loss` function, which calculates the unnormalised categorical cross-entropy loss for a batch of one-hot encoded targets and predicted probabilities. The function uses NumPy for efficient computation and ensures numerical stability by adding a small constant `epsilon` to the predicted probabilities before taking the logarithm. The result is rounded to four decimal places before being returned."}
{"task_id": 77, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2  # number of layers in the network\n    \n    # Implement [LINEAR -> RELU]*(L-1). Add \"cache\" to the \"caches\" list.\n    for l in range(1, L):\n        A_prev = A \n        W = parameters['W' + str(l)]\n        b = parameters['b' + str(l)]\n        Z = np.dot(W, A_prev) + b\n        assert(Z.shape == (W.shape[0], A_prev.shape[1]))\n        A = np.maximum(0, Z)  # ReLU activation\n        cache = (A_prev, W, b, Z)\n        caches.append(cache)\n    \n    # Implement LINEAR -> SIGMOID. Add \"cache\" to the \"caches\" list.\n    W = parameters['W' + str(L)]\n    b = parameters['b' + str(L)]\n    Z = np.dot(W, A) + b\n    assert(Z.shape == (W.shape[0], A.shape[1]))\n    AL = 1 / (1 + np.exp(-Z))  # Sigmoid activation\n    cache = (A, W, b, Z)\n    caches.append(cache)\n    \n    AL = np.round(AL, 4).tolist()  # Round AL to 4 decimals and convert to list\n    \n    return AL, caches\n\n# Example usage:\n# X = np.random.rand(5, 10)  # 5 input features, 10 examples\n# parameters = {\n#     'W1': np.random.rand(4, 5), 'b1': np.zeros((4, 1)),\n#     'W2': np.random.rand(3, 4), 'b2': np.zeros((3, 1)),\n#     'W3': np.random.rand(1, 3), 'b3': np.zeros((1, 1))\n# }\n# AL, caches = L_model_forward(X, parameters)\n# print(AL)\n```\n\nThis script defines the `L_model_forward` function, which performs forward propagation through an L-layer neural network with ReLU activations for hidden layers and a sigmoid activation for the output layer. The function collects and returns the necessary caches for backpropagation and returns the final activation `AL` rounded to 4 decimal places and converted to a regular Python list."}
{"task_id": 81, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    # Ensure A2 and Y are numpy arrays\n    A2 = np.array(A2)\n    Y = np.array(Y)\n    \n    # Clip A2 to the interval [1e-15, 1-1e-15]\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    \n    # Number of samples\n    m = A2.shape[0]\n    \n    # Compute the cost\n    cost = - (1 / m) * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    \n    # Return the cost rounded to 6 decimal places\n    return round(cost, 6)\n```\n\nThis script defines the `compute_cost` function that calculates the binary cross-entropy cost between predicted probabilities and ground-truth labels, ensuring numerical stability by clipping the predicted probabilities to the range [1e-15, 1-1e-15]. The result is rounded to six decimal places as required."}
{"task_id": 82, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | \"np.ndarray\", epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    # Convert Q to a NumPy array for easier manipulation\n    Q = np.array(Q)\n    \n    # Number of actions\n    n = len(Q)\n    \n    # Index of the greedy action (first occurrence in case of ties)\n    greedy_index = np.argmax(Q)\n    \n    # Base probability for non-greedy actions\n    base_prob = epsilon / n\n    \n    # Probability for the greedy action\n    greedy_prob = 1 - epsilon + base_prob\n    \n    # Initialize probabilities array\n    probabilities = np.full(n, base_prob)\n    \n    # Set the probability for the greedy action\n    probabilities[greedy_index] = greedy_prob\n    \n    # Round probabilities to 4 decimal places\n    probabilities = np.round(probabilities, 4)\n    \n    # Ensure the probabilities sum to 1 within the required tolerance\n    if not np.isclose(np.sum(probabilities), 1, atol=1e-12):\n        raise ValueError(\"Probabilities do not sum to 1 within the required tolerance.\")\n    \n    return probabilities.tolist()\n\n# Example usage\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1\noutput = epsilon_soft(Q, epsilon)\nprint(output)  # Output should be [0.925, 0.025, 0.025, 0.025]\n```"}
{"task_id": 86, "completion_id": 0, "completion": "```\npython\nfrom collections import Counter\n\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    if not predictions:\n        return []\n    \n    num_samples = len(predictions[0])\n    final_predictions = []\n    \n    for sample_index in range(num_samples):\n        # Collect votes for the current sample from all trees\n        votes = [tree_predictions[sample_index] for tree_predictions in predictions]\n        \n        # Count the votes for each class label\n        vote_counts = Counter(votes)\n        \n        # Find the class label with the highest vote count\n        # In case of a tie, the smallest label (by natural order) is chosen\n        most_common_votes = vote_counts.most_common()\n        max_votes = most_common_votes[0][1]\n        best_label = min(label for label, count in most_common_votes if count == max_votes)\n        \n        final_predictions.append(best_label)\n    \n    return final_predictions\n\n# Example usage:\n# predictions = [\n#     [0, 1, 0, 1],\n#     [0, 1, 1, 1],\n#     [1, 1, 0, 1]\n# ]\n# print(aggregate_random_forest_votes(predictions))  # Output: [0, 1, 0, 1]\n```\n\nThis script defines the `aggregate_random_forest_votes` function, which takes a 2D list of predictions from multiple decision trees and returns a list of aggregated predictions using majority voting. In case of ties, it selects the smallest label based on natural order. The example usage at the bottom demonstrates how to use the function."}
{"task_id": 88, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already one\n    if isinstance(z, (int, float)):\n        scalar_input = True\n        z = np.array([z])\n    else:\n        scalar_input = False\n        z = np.array(z)\n    \n    # Compute the softplus using logaddexp for numerical stability\n    result = np.logaddexp(0.0, z)\n    \n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n    \n    # Convert to list if the input was not a scalar\n    if scalar_input:\n        return result[0]\n    else:\n        return result.tolist()\n\n# Example usage:\nz = np.array([-1000, 0, 3])\nprint(softplus(z))  # Output: [0.0, 0.6931, 3.0486]\n```"}
{"task_id": 90, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Check if the policy has an ev_estimates attribute and if it's not empty\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    \n    # Extract true expected values and policy estimates\n    true_evs = bandit['arm_evs']\n    estimates = policy['ev_estimates']\n    \n    # Sort the estimates dictionary by key (arm index) to match the order of true_evs\n    sorted_estimates = [estimates[i] for i in sorted(estimates.keys())]\n    \n    # Ensure the lengths match\n    if len(true_evs) != len(sorted_estimates):\n        return np.nan\n    \n    # Calculate the mean-squared error\n    mse_value = np.mean((np.array(true_evs) - np.array(sorted_estimates)) ** 2)\n    \n    # Return the rounded result\n    return round(mse_value, 4)\n\n# Example usage:\nbandit = {\"arm_evs\": [0.5, 0.2, 0.9]}\npolicy = {\"ev_estimates\": {0: 0.4, 1: 0.25, 2: 0.8}}\n\nprint(mse(bandit, policy))  # Output should be 0.0075\n```"}
{"task_id": 96, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # Step 1: Tokenize the corpus and build vocabulary\n    all_tokens = []\n    for sentence in corpus:\n        tokens = sentence.split()\n        all_tokens.extend(tokens)\n    \n    # Add <UNK> token to the vocabulary\n    vocabulary = set(all_tokens) | {\"<UNK>\"}\n    V = len(vocabulary)\n    \n    # Step 2: Build N-gram frequency tables\n    ngram_counts = [defaultdict(int) for _ in range(N + 1)]\n    \n    for sentence in corpus:\n        tokens = [\"<s>\"] * (N - 1) + sentence.split() + [\"</s>\"]\n        for i in range(len(tokens) - N + 1):\n            ngram = tuple(tokens[i:i + N])\n            ngram_counts[N][ngram] += 1\n            for j in range(1, N):\n                context = ngram[:-j]\n                ngram_counts[N - j][context] += 1\n    \n    # Step 3: Tokenize the target sequence\n    target_tokens = sequence.split()\n    if len(target_tokens) < N:\n        return 0.0\n    \n    target_tokens = [\"<s>\"] * (N - 1) + target_tokens + [\"</s>\"]\n    \n    # Step 4: Calculate the log-probability of the target sequence\n    log_prob = 0.0\n    \n    for i in range(N - 1, len(target_tokens)):\n        context = tuple(target_tokens[i - N + 1:i])\n        ngram = tuple(target_tokens[i - N + 1:i + 1])\n        \n        # Replace unseen words with <UNK>\n        ngram_with_unk = tuple(word if word in vocabulary else \"<UNK>\" for word in ngram)\n        context_with_unk = tuple(word if word in vocabulary else \"<UNK>\" for word in context)\n        \n        count_ngram = ngram_counts[N][ngram_with_unk]\n        count_context = ngram_counts[N - 1][context_with_unk]\n        \n        prob = (count_ngram + K) / (count_context + K * V)\n        log_prob += math.log(prob)\n    \n    return round(log_prob, 4)\n\n# Example usage:\ncorpus = [\n    \"the quick brown fox jumps over the lazy dog\",\n    \"the quick brown fox is quick\"\n]\nsequence = \"the quick brown dog\"\nN = 3\nK = 1.0\n\nprint(additive_ngram_log_prob(corpus, sequence, N, K))  # Example output\n```\nThis script defines the `additive_ngram_log_prob` function, which calculates the additive-smoothed log-probability of a given sentence using an N-gram language model trained on a provided corpus. The function handles unseen words by mapping them to the `<UNK>` token and uses Laplace smoothing with a customizable smoothing constant `K`."}
{"task_id": 108, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    N, M = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n\n    def compute_loss(W, H, X):\n        return np.linalg.norm(X - np.dot(W, H))**2 + alpha * (np.linalg.norm(W)**2 + np.linalg.norm(H)**2)\n\n    prev_loss = np.inf\n    for iteration in range(max_iter):\n        # Fix H, solve for W\n        for i in range(N):\n            W[i, :] = np.linalg.solve(np.dot(H, H.T) + alpha * np.eye(K), np.dot(H, X[i, :]))\n\n        # Fix W, solve for H\n        for k in range(K):\n            H[k, :] = np.linalg.solve(np.dot(W.T, W) + alpha * np.eye(M), np.dot(W.T, X[:, k]))\n\n        # Compute the current loss\n        current_loss = compute_loss(W, H, X)\n\n        # Check for convergence\n        if abs(current_loss - prev_loss) < tol:\n            break\n\n        prev_loss = current_loss\n\n    # Reconstruct the matrix X_hat\n    X_hat = np.dot(W, H)\n    return X_hat.round(4).tolist()\n```\n\nThis script defines the `als_factorization` function, which performs regularized ALS matrix factorization. The function initializes the factor matrices `W` and `H` with a fixed random seed, iterates to optimize them, and stops when the change in loss is below a specified tolerance or the maximum number of iterations is reached. The reconstructed matrix is returned as a list of lists rounded to four decimal places."}
{"task_id": 109, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n\n    def kmeans_plus_plus_init(X, K):\n        centroids = [X[np.random.choice(range(len(X)))]]\n        for _ in range(1, K):\n            distances = np.array([min(np.linalg.norm(x - c) ** 2 for c in centroids) for x in X])\n            probabilities = distances / distances.sum()\n            next_centroid = X[np.random.choice(range(len(X)), p=probabilities)]\n            centroids.append(next_centroid)\n        return np.array(centroids)\n\n    def assign_clusters(X, centroids):\n        return np.argmin(np.linalg.norm(X[:, np.newaxis] - centroids, axis=2), axis=1)\n\n    def update_centroids(X, labels, K, centroids):\n        new_centroids = np.array([X[labels == k].mean(axis=0) if (labels == k).any() else centroids[k] for k in range(K)])\n        return new_centroids\n\n    centroids = kmeans_plus_plus_init(X, K)\n    for _ in range(max_iter):\n        labels = assign_clusters(X, centroids)\n        new_centroids = update_centroids(X, labels, K, centroids)\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n\n    centroids = np.round(centroids, 4)\n    sorted_centroids = sorted(centroids.tolist(), key=lambda c: (c[0], c))\n    return sorted_centroids\n\n# Example usage:\n# X = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# K = 3\n# random_state = 42\n# print(kmeans(X, K, max_iter=100, random_state=random_state))\n```\n\nThis script implements the K-Means clustering algorithm with K-Means++ initialization. It includes functions for initializing centroids using K-Means++, assigning clusters, updating centroids, and the main K-Means loop. The final centroids are rounded to four decimal places and sorted as specified. The example usage at the end demonstrates how to call the function with a sample dataset."}
{"task_id": 111, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"\n    Encodes every character of the input string using a provided vocabulary.\n    The encoded list must have a fixed length `TIME_STEPS`. If the input is shorter\n    than `TIME_STEPS` append the padding token `0` on the right; if it is longer,\n    truncate the sequence. Any character not in the vocabulary is encoded as `0`.\n    \"\"\"\n    encoded = []\n    for char in text[:time_steps]:\n        encoded.append(vocabulary.get(char, 0))\n    while len(encoded) < time_steps:\n        encoded.append(0)\n    return encoded\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"\n    Converts a list/array of integer ids back to text using an inverse vocabulary.\n    Padding tokens (`0`) must be ignored during decoding.\n    \"\"\"\n    return ''.join(inverse_vocab.get(index, '') for index in indices if index != 0)\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"\n    Encodes the raw text, calls `model.predict`, applies `argmax` to obtain predicted ids,\n    and decodes the ids to return the predicted string.\n    \"\"\"\n    # Encode the input text\n    encoded_input = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded_input = np.array(encoded_input).reshape(1, -1)  # Reshape for batch size 1\n    \n    # Get model predictions\n    predictions = model.predict(encoded_input)\n    \n    # Apply argmax to get the predicted ids\n    predicted_ids = np.argmax(predictions, axis=-1)[0]\n    \n    # Decode the predicted ids to string\n    decoded_output = int_to_string(predicted_ids, inv_output_vocabulary)\n    \n    return decoded_output\n\n# Example usage:\n# Assuming `model` is a pre-trained model with a `predict` method\n# input_vocabulary = {'a': 1, 'b': 2, ...}\n# inv_output_vocabulary = {1: 'a', 2: 'b', ...}\n# text = \"example input text\"\n# prediction = run_example(model, input_vocabulary, inv_output_vocabulary, text)\n# print(prediction)\n```\n\nThis script provides the required functions `string_to_int`, `int_to_string`, and `run_example` to handle character-level sequence encoding and decoding as specified. The `run_example` function assumes that the model has a `predict` method that returns a NumPy array of predictions."}
{"task_id": 113, "completion_id": 0, "completion": "```\npython\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    \n    predictions = []\n    for example in examples:\n        # Call the helper function to get the model's output as a list of characters\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        # Concatenate the characters into a single string\n        predicted_string = ''.join(output_chars)\n        # Print the input and output pair\n        print(f\"input:  {example}\")\n        print(f\"output: {predicted_string}\")\n        # Collect the predicted string in the list\n        predictions.append(predicted_string)\n    \n    # Return the list of all predictions\n    return predictions\n```"}
{"task_id": 115, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    m = X.shape[0]\n    z = np.dot(X, w)\n    p = 1 / (1 + np.exp(-z))\n    \n    # Avoid numerical issues by clamping the probabilities\n    eps = 1e-20\n    p = np.clip(p, eps, 1 - eps)\n    \n    # Compute the loss\n    loss = - (1 / m) * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    loss_rounded = round(loss, 4)\n    \n    # Compute the gradient\n    gradient = (1 / m) * np.dot(X.T, (p - y))\n    gradient_rounded = np.round(gradient, 4).tolist()\n    \n    return loss_rounded, gradient_rounded\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([0, 1, 0])\n# w = np.array([0.1, 0.2])\n# loss, gradient = logistic_loss_and_gradient(X, y, w)\n# print(\"Loss:\", loss)\n# print(\"Gradient:\", gradient)\n```\n\nThis script defines the `logistic_loss_and_gradient` function, which computes the binary cross-entropy loss and its gradient for logistic regression. The function handles numerical issues by clamping the predicted probabilities to avoid taking the logarithm of zero. The results are rounded to four decimal places as specified."}
{"task_id": 118, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n\n    m, n = X_train.shape\n    weights = np.ones(m) / m\n    alphas = []\n    stumps = []\n\n    def train_decision_stump():\n        min_error = float('inf')\n        best_stump = {}\n        best_threshold = 0\n        for feature_i in range(n):\n            thresholds = np.unique(X_train[:, feature_i])\n            for threshold in thresholds:\n                p_pred = np.ones(m)\n                p_pred[X_train[:, feature_i] < threshold] = -1\n\n                error = sum(weights[y_train != p_pred])\n\n                if error > 0.5:\n                    error = 1 - error\n                    p_pred = -p_pred\n\n                if error < min_error:\n                    min_error = error\n                    best_stump = {'feature': feature_i, 'threshold': threshold, 'prediction': p_pred.copy()}\n                    best_threshold = threshold\n\n        return best_stump, min_error\n\n    for _ in range(n_clf):\n        stump, error = train_decision_stump()\n        alpha = 0.5 * np.log((1.0 - error) / (error + 1e-10))\n        alphas.append(alpha)\n        stumps.append(stump)\n        # Update weights\n        weights *= np.exp(-alpha * y_train * stump['prediction'])\n        weights /= np.sum(weights)\n\n    # Predict\n    n_test = X_test.shape[0]\n    y_pred = np.zeros(n_test)\n    for alpha, stump in zip(alphas, stumps):\n        predictions = np.ones(n_test)\n        feature_i = stump['feature']\n        threshold = stump['threshold']\n        predictions[X_test[:, feature_i] < threshold] = -1\n        y_pred += alpha * predictions\n\n    return [1 if y >= 0 else -1 for y in y_pred]\n```\n\nThis script implements the AdaBoost algorithm using decision stumps as weak learners. It trains on the provided training data and predicts labels for the test data. The function `adaboost_predict` returns a list of predicted labels for each sample in `X_test`."}
{"task_id": 128, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    # Step 1: Compute the within-class scatter matrix S_W\n    num_samples, num_features = X.shape\n    unique_labels = np.unique(y)\n    S_W = np.zeros((num_features, num_features))\n    \n    for label in unique_labels:\n        X_c = X[y == label]\n        mean_c = X_c.mean(axis=0)\n        S_W += np.dot((X_c - mean_c).T, (X_c - mean_c))\n    \n    # Step 2: Compute the between-class scatter matrix S_B\n    global_mean = X.mean(axis=0)\n    S_B = np.zeros((num_features, num_features))\n    \n    for label in unique_labels:\n        X_c = X[y == label]\n        mean_c = X_c.mean(axis=0)\n        N_c = X_c.shape[0]\n        S_B += N_c * np.dot((mean_c - global_mean).reshape(num_features, 1), (mean_c - global_mean).reshape(1, num_features))\n    \n    # Step 3: Compute A = S_W^{-1} * S_B using the pseudo-inverse\n    A = np.dot(np.linalg.pinv(S_W), S_B)\n    \n    # Step 4: Perform eigen-decomposition of A\n    eigenvalues, eigenvectors = np.linalg.eigh(A)\n    \n    # Sort eigenvalues and eigenvectors in descending order\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    \n    # Step 5: Deterministic sign fix\n    for i in range(sorted_eigenvectors.shape[1]):\n        first_non_zero_index = np.nonzero(sorted_eigenvectors[:, i])[0][0]\n        if sorted_eigenvectors[first_non_zero_index, i] < 0:\n            sorted_eigenvectors[:, i] *= -1\n    \n    # Step 6: Project X onto the first `n_components` eigenvectors\n    W = sorted_eigenvectors[:, :n_components]\n    projected_X = np.dot(X, W)\n    \n    # Step 7: Round to four decimal places and return as list of lists\n    return projected_X.round(4).tolist()\n```\n\nThis script implements the multi-class LDA as described in the task. It computes the within-class scatter matrix \\( S_W \\), the between-class scatter matrix \\( S_B \\), and then finds the projection matrix \\( W \\) by solving the generalized eigenvalue problem. The data is projected onto the first `n_components` eigenvectors, and the result is rounded to four decimal places before being returned as a list of lists."}
{"task_id": 140, "completion_id": 0, "completion": "```\npython\nfrom collections import deque\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if grid[0][0] == 'F' or grid[n-1][n-1] == 'F':\n        return -1\n    \n    if n == 1 and grid[0][0] == '.':\n        return 0\n    \n    # Directions for moving in the grid: up, down, left, right\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    \n    # BFS for fire spread\n    fire_queue = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j))\n    \n    # Perform BFS for fire spread\n    fire_time = [[math.inf] * n for _ in range(n)]\n    for i, j in fire_queue:\n        fire_time[i][j] = 0\n    \n    while fire_queue:\n        x, y = fire_queue.popleft()\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == '.':\n                if fire_time[nx][ny] == math.inf:\n                    fire_time[nx][ny] = fire_time[x][y] + 1\n                    fire_queue.append((nx, ny))\n    \n    # BFS for agent movement\n    agent_queue = deque([(0, 0, 0)])  # (x, y, time)\n    visited = {(0, 0, 0)}\n    \n    while agent_queue:\n        x, y, t = agent_queue.popleft()\n        \n        if x == n-1 and y == n-1:\n            return t\n        \n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == '.':\n                if (nx, ny, t + 1) not in visited and t + 1 < fire_time[nx][ny]:\n                    visited.add((nx, ny, t + 1))\n                    agent_queue.append((nx, ny, t + 1))\n    \n    return -1\n\n# Example usage:\n# grid = [\n#     \"..F\",\n#     \".#.\",\n#     \"...\"\n# ]\n# print(escape_fire_maze(grid))  # Output: 3\n```\n\nThis script defines the `escape_fire_maze` function which uses Breadth-First Search (BFS) to simulate the spread of fire and the movement of the agent. It ensures that the agent only moves to cells that are not yet on fire and returns the minimum number of minutes required to reach the goal or `-1` if it is impossible."}
{"task_id": 141, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\nfrom scipy.spatial.distance import cdist\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n    \n    # Define the distance metric\n    if metric == 'euclidean':\n        distance_metric = 'euclidean'\n    elif metric == 'manhattan':\n        distance_metric = 'cityblock'\n    elif metric == 'cosine':\n        distance_metric = 'cosine'\n    else:\n        # Fall back to Euclidean if an unknown metric is supplied\n        distance_metric = 'euclidean'\n    \n    # Compute the distance between each test sample and every training sample\n    distances = cdist(X_test, X_train, metric=distance_metric)\n    \n    # Find the k training samples with the smallest distance for each test sample\n    nearest_indices = np.argsort(distances, axis=1)[:, :k]\n    \n    # Predict the class by majority vote among those k neighbours\n    predictions = []\n    for indices in nearest_indices:\n        # Get the labels of the k nearest neighbors\n        k_nearest_labels = y_train[indices]\n        # Count the occurrences of each label\n        label_counts = Counter(k_nearest_labels)\n        # Find the label with the highest count (in case of a tie, return the smallest label)\n        predicted_label = min(label_counts, key=lambda x: (-label_counts[x], x))\n        predictions.append(predicted_label)\n    \n    return np.array(predictions)\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [5, 6]])\n# y_train = np.array([0, 0, 1, 1])\n# X_test = np.array([[1, 1], [4, 4]])\n# k = 3\n# predictions = knn_predict(X_train, y_train, X_test, k, metric='euclidean')\n# print(predictions)  # Output should be [0, 1]\n```\n\nThis script defines the `knn_predict` function, which implements the k-Nearest Neighbors algorithm with support for three distance metrics: Euclidean, Manhattan, and Cosine. The function computes the distances between test samples and training samples, finds the k nearest neighbors for each test sample, and predicts the class by majority vote. In case of a tie, it returns the smallest label value. If an unknown metric is provided, it defaults to the Euclidean metric."}
{"task_id": 146, "completion_id": 0, "completion": "Certainly! Below is the complete implementation of the k-Nearest Neighbours (k-NN) classifier from scratch using NumPy, adhering to the given requirements and constraints.\n\n```python\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    n_train = X.shape[0]\n    n_test = X_test.shape[0]\n    predictions = []\n\n    for i in range(n_test):\n        distances = []\n        for j in range(n_train):\n            if metric == 'euclidean':\n                dist = np.sqrt(np.sum((X[j] - X_test[i]) ** 2))\n            elif metric == 'manhattan':\n                dist = np.sum(np.abs(X[j] - X_test[i]))\n            elif metric == 'cosine':\n                numerator = np.dot(X[j], X_test[i])\n                denominator = np.linalg.norm(X[j]) * np.linalg.norm(X_test[i])\n                if denominator == 0:\n                    denominator += 1e-12\n                dist = 1 - numerator / denominator\n            else:\n                raise ValueError(\"Metric not supported\")\n            distances.append((dist, y[j]))\n        \n        # Sort distances and get the k nearest neighbours\n        distances.sort(key=lambda x: x[0])\n        k_nearest = distances[:k]\n        \n        # Perform majority vote\n        votes = {}\n        for _, label in k_nearest:\n            if label in votes:\n                votes[label] += 1\n            else:\n                votes[label] = 1\n        \n        # Find the label with the maximum votes, in case of tie choose the smallest label\n        predicted_label = min([label for label, count in votes.items() if count == max(votes.values())])\n        predictions.append(predicted_label)\n    \n    return predictions\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [5, 6]])\n# y_train = np.array([0, 0, 1, 1])\n# X_test = np.array([[1, 1], [6, 6]])\n# predictions = knn_predict(X_train, y_train, X_test, k=2, metric='euclidean')\n# print(predictions)  # Output: [0, 1]\n```\n\nThis script defines the `knn_predict` function that takes training data `X` and `y`, test data `X_test`, the number of neighbors `k`, and the distance metric `metric`. It computes the distances between each test sample and all training samples using the specified metric, finds the k-nearest neighbors, and performs a majority vote to determine the predicted label for each test sample. In case of a tie, it returns the smallest label. The result is returned as a plain Python list."}
{"task_id": 155, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a NumPy array if it isn't already\n    state = np.array(state)\n    \n    # First hidden layer: Linear transformation followed by ReLU\n    hidden1 = np.maximum(0, np.dot(state, weights['W1']) + weights['b1'])\n    \n    # Second hidden layer: Linear transformation followed by ReLU\n    hidden2 = np.maximum(0, np.dot(hidden1, weights['W2']) + weights['b2'])\n    \n    # Output layer: Linear transformation followed by tanh\n    action = np.tanh(np.dot(hidden2, weights['W3']) + weights['b3'])\n    \n    # Return the action vector rounded to four decimal places\n    return [round(x, 4) for x in action]\n\n# Example usage:\n# state = [1.0, 2.0, 3.0]\n# weights = {\n#     \"W1\": np.random.rand(3, 64), \"b1\": np.random.rand(64),\n#     \"W2\": np.random.rand(64, 32), \"b2\": np.random.rand(32),\n#     \"W3\": np.random.rand(32, 2), \"b3\": np.random.rand(2)\n# }\n# print(actor_forward(state, weights))\n```\n\nThis script defines the `actor_forward` function, which performs the forward pass through a two-hidden-layer neural network as described. The function takes a state vector and a dictionary of weights, performs the necessary affine transformations and nonlinearities, and returns the resulting action vector rounded to four decimal places."}
{"task_id": 160, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    m, n = X.shape\n    \n    if fit_intercept:\n        X = np.hstack([np.ones((m, 1)), X])\n    else:\n        X = np.hstack([np.zeros((m, 1)), X])\n    \n    n = X.shape[1]\n    w = np.zeros(n)\n    \n    for _ in range(max_iters):\n        for j in range(n):\n            # Temporarily set the current weight to 0\n            w_j = w[j]\n            w[j] = 0\n            \n            # Compute the partial residual\n            r_j = y - X @ w\n            \n            # Compute the soft-thresholding\n            if j == 0 and fit_intercept:\n                # For the intercept, compute the mean residual\n                w[j] = np.mean(r_j)\n            else:\n                x_j = X[:, j]\n                sum_xj_squared = np.sum(x_j ** 2)\n                rho = x_j @ r_j\n                w[j] = np.sign(rho) * max(abs(rho) - lambda_param * m, 0) / sum_xj_squared\n    \n    # Extract the intercept and weights\n    bias = round(w[0], 4) if fit_intercept else 0.0\n    weights = [round(wj, 4) for wj in w[1:]]\n    \n    return weights, bias\n```\n\nThis script implements Lasso regression using coordinate descent as described in the task. It handles the fitting of an optional intercept and uses the soft-thresholding operator to update the weights. The results are rounded to four decimal places as required."}
{"task_id": 165, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return -1.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or -1 if the inputs have different lengths.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    x = np.array(x) if not isinstance(x, np.ndarray) else x\n    y = np.array(y) if not isinstance(y, np.ndarray) else y\n    \n    # Check if the lengths of the vectors are equal\n    if x.shape != y.shape:\n        return -1\n    \n    # Calculate the Hamming distance\n    distance = np.mean(x != y)\n    \n    # Return the distance rounded to 4 decimal places\n    return round(distance, 4)\n\n# Example usage:\n# x = [1, 2, 3, 4]\n# y = [1, 3, 2, 4]\n# print(hamming_distance(x, y))  # Output: 0.5\n```"}
{"task_id": 169, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError(\"N must be a positive integer.\")\n    \n    if window == \"hamming\":\n        if N == 1:\n            return [1.0]\n        return [round(0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    \n    elif window == \"hann\":\n        if N == 1:\n            return [1.0]\n        return [round(0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    \n    elif window == \"blackman_harris\":\n        if N == 1:\n            return [1.0]\n        a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n        return [round(a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + \n                      a2 * np.cos(4 * np.pi * n / (N - 1)) - \n                      a3 * np.cos(6 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    \n    elif window == \"generalized_cosine\":\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be provided for generalized_cosine window.\")\n        if N == 1:\n            return [1.0]\n        return [round(sum(a_k * np.cos(2 * np.pi * k * n / (N - 1)) for k, a_k in enumerate(coefficients)), 4) for n in range(N)]\n    \n    else:\n        raise ValueError(f\"Unknown window type: {window}\")\n\n# Example usage:\n# print(generate_window(\"hamming\", 5))\n# print(generate_window(\"hann\", 5))\n# print(generate_window(\"blackman_harris\", 5))\n# print(generate_window(\"generalized_cosine\", 5, [0.5, 0.25]))\n```"}
{"task_id": 171, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    \n    # Convert inputs to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Check if all labels are the same\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) == 1:\n        return [unique_labels[0]] * len(X_test)\n    \n    # Map y_train to {0, 1}\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train_mapped = np.array([label_map[y] for y in y_train])\n    \n    # Add intercept term (bias) to the data\n    X_train = np.hstack([np.ones((X_train.shape[0], 1)), X_train])\n    X_test = np.hstack([np.ones((X_test.shape[0], 1)), X_test])\n    \n    # Initialize weights\n    weights = np.zeros(X_train.shape[1])\n    \n    # Sigmoid function\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    \n    # Mini-batch Gradient Descent\n    for epoch in range(epochs):\n        # Shuffle the data\n        indices = np.arange(X_train.shape[0])\n        np.random.shuffle(indices)\n        X_train_shuffled = X_train[indices]\n        y_train_shuffled = y_train_mapped[indices]\n        \n        # Mini-batches\n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train_shuffled[i:i + batch_size]\n            y_batch = y_train_shuffled[i:i + batch_size]\n            \n            # Predict probabilities\n            z = np.dot(X_batch, weights)\n            predictions = sigmoid(z)\n            \n            # Compute gradient\n            errors = predictions - y_batch\n            gradient = np.dot(X_batch.T, errors) / len(y_batch)\n            \n            # Update weights\n            weights -= learning_rate * gradient\n    \n    # Predict on test set\n    z_test = np.dot(X_test, weights)\n    probabilities = sigmoid(z_test)\n    predictions_mapped = (probabilities >= 0.5).astype(int)\n    \n    # Map predictions back to original labels\n    inverse_label_map = {v: k for k, v in label_map.items()}\n    predictions = [inverse_label_map[p] for p in predictions_mapped]\n    \n    return predictions\n```\n\nThis script implements a binary logistic regression classifier using mini-batch gradient descent. It handles the special case where all training labels are identical by skipping training and predicting the unique label for every test sample. The predictions are made using a decision threshold of 0.5 on the estimated probability of the positive class."}
{"task_id": 176, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    \"\"\"Train an AdaBoost model using decision stumps as weak learners and predict the class labels for X_test.\"\"\"\n    \n    def decision_stump_predict(X, feature_index, threshold, polarity):\n        # Predict based on the decision stump rule\n        return [1 if (polarity * x[feature_index] < polarity * threshold) else -1 for x in X]\n    \n    def train_decision_stump(X, y, sample_weights):\n        # Find the best decision stump\n        n_samples, n_features = len(X), len(X[0])\n        best_error = float('inf')\n        best_feature_index = None\n        best_threshold = None\n        best_polarity = None\n        \n        for feature_index in range(n_features):\n            thresholds = np.unique([x[feature_index] for x in X])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = decision_stump_predict(X, feature_index, threshold, polarity)\n                    error = sum(sample_weights[i] for i in range(n_samples) if predictions[i] != y[i])\n                    \n                    if error < best_error:\n                        best_error = error\n                        best_feature_index = feature_index\n                        best_threshold = threshold\n                        best_polarity = polarity\n        \n        return best_feature_index, best_threshold, best_polarity, best_error\n    \n    # Convert input lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array([1 if label == 1 else -1 for label in y_train])\n    \n    n_samples = len(X_train)\n    sample_weights = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n    \n    for _ in range(n_estimators):\n        feature_index, threshold, polarity, error = train_decision_stump(X_train, y_train, sample_weights)\n        \n        # If we find a stump with 0 error, we can stop early\n        if error == 0:\n            break\n        \n        error = max(error, 1e-10)  # To prevent division by zero and log of zero\n        alpha = 0.5 * np.log((1 - error) / error)\n        \n        # Update weights\n        predictions = decision_stump_predict(X_train, feature_index, threshold, polarity)\n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        sample_weights /= sample_weights.sum()  # Normalize\n        \n        # Save the stump and its weight\n        stumps.append((feature_index, threshold, polarity))\n        alphas.append(alpha)\n    \n    # Predict for X_test\n    def predict_instance(x):\n        weighted_vote = 0\n        for (feature_index, threshold, polarity), alpha in zip(stumps, alphas):\n            vote = 1 if (polarity * x[feature_index] < polarity * threshold) else -1\n            weighted_vote += alpha * vote\n        return 1 if weighted_vote >= 0 else 0\n    \n    return [predict_instance(x) for x in X_test]\n```\n\nThis script implements the AdaBoost algorithm using decision stumps as weak learners. The `adaboost_predict` function takes training data `X_train` and `y_train`, a test set `X_test`, and the number of estimators `n_estimators`. It returns a list of predicted class labels for `X_test`. The decision stumps are trained by selecting the one with the smallest weighted classification error in each round, and the sample weights are updated accordingly. The process stops early if a perfect stump is found."}
{"task_id": 178, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    # Validate input\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    \n    # Initialize random number generator\n    rng = np.random.default_rng(seed)\n    \n    # Parameters\n    w = 0.5  # Inertia weight\n    c1 = 1.5  # Cognitive weight\n    c2 = 1.5  # Social weight\n    \n    # Bounds\n    lower_bound = -1\n    upper_bound = 1\n    \n    # Initialize particles' position and velocity\n    positions = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    velocities = rng.uniform(-0.1, 0.1, (num_particles, n_dims))\n    \n    # Initialize personal best positions and fitness\n    personal_best_positions = positions.copy()\n    personal_best_values = np.array([np.sum(p**2) for p in positions])\n    \n    # Initialize global best position and fitness\n    global_best_index = np.argmin(personal_best_values)\n    global_best_position = personal_best_positions[global_best_index]\n    global_best_value = personal_best_values[global_best_index]\n    \n    # PSO loop\n    for _ in range(num_iterations):\n        # Update velocities\n        r1 = rng.uniform(0, 1, (num_particles, n_dims))\n        r2 = rng.uniform(0, 1, (num_particles, n_dims))\n        velocities = (w * velocities +\n                      c1 * r1 * (personal_best_positions - positions) +\n                      c2 * r2 * (global_best_position - positions))\n        \n        # Update positions\n        positions = np.clip(positions + velocities, lower_bound, upper_bound)\n        \n        # Update personal bests\n        for i in range(num_particles):\n            value = np.sum(positions[i]**2)\n            if value < personal_best_values[i]:\n                personal_best_values[i] = value\n                personal_best_positions[i] = positions[i]\n                \n                # Update global best if necessary\n                if value < global_best_value:\n                    global_best_value = value\n                    global_best_position = positions[i]\n    \n    return round(global_best_value, 4)\n\n# Example usage:\n# print(particle_swarm_optimisation(n_dims=2, num_particles=20, num_iterations=50))\n```\n\nThis script defines a function to perform Particle Swarm Optimization (PSO) to minimize the Sphere function in a given number of dimensions. The function checks for valid input, initializes particles with random positions and velocities, and iteratively updates them according to the PSO algorithm. The best value found is returned, rounded to four decimal places."}
{"task_id": 180, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum(np.square(np.array(point1) - np.array(point2))))\n    \n    if k == 0 or k > len(X_train):\n        k = len(X_train)\n    \n    predictions = []\n    \n    for test_point in X_test:\n        distances = [(euclidean_distance(test_point, train_point), label) for train_point, label in zip(X_train, y_train)]\n        distances.sort(key=lambda x: x[0])\n        k_nearest = distances[:k]\n        \n        if task == \"classification\":\n            # Extract labels for the k nearest neighbors\n            k_nearest_labels = [label for _, label in k_nearest]\n            # Use Counter to get the frequency of each label\n            label_counts = Counter(k_nearest_labels)\n            # Find the most common label; in case of a tie, min() will select the smallest label\n            predicted_label = min(label_counts, key=lambda x: (-label_counts[x], x))\n            predictions.append(predicted_label)\n        elif task == \"regression\":\n            # Extract target values for the k nearest neighbors\n            k_nearest_values = [value for _, value in k_nearest]\n            # Calculate the mean of these values\n            predicted_value = round(np.mean(k_nearest_values), 4)\n            predictions.append(predicted_value)\n    \n    return predictions\n```\n\nThis script defines a `knn_predict` function that can be used for both classification and regression tasks using the k-Nearest Neighbors algorithm. It calculates the Euclidean distance between test samples and training samples, selects the k nearest neighbors, and makes predictions based on majority voting for classification and averaging for regression."}
{"task_id": 184, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gini_impurity(y):\n    \"\"\"Calculate the Gini impurity of a list of class labels.\"\"\"\n    m = len(y)\n    if m == 0:\n        return 0.0\n    counts = np.bincount(y)\n    probabilities = counts / m\n    gini = 1.0 - np.sum(probabilities ** 2)\n    return gini\n\ndef split_dataset(X, y, feature_index, threshold):\n    \"\"\"Split the dataset based on a feature and a threshold.\"\"\"\n    left_mask = X[:, feature_index] <= threshold\n    right_mask = X[:, feature_index] > threshold\n    X_left, y_left = X[left_mask], y[left_mask]\n    X_right, y_right = X[right_mask], y[right_mask]\n    return X_left, y_left, X_right, y_right\n\ndef best_split(X, y):\n    \"\"\"Find the best split by evaluating all possible splits.\"\"\"\n    best_feature_index, best_threshold, best_gini_gain = None, None, -1\n    parent_gini = gini_impurity(y)\n    num_samples, num_features = X.shape\n\n    for feature_index in range(num_features):\n        unique_values = np.unique(X[:, feature_index])\n        for i in range(1, len(unique_values)):\n            threshold = (unique_values[i] + unique_values[i - 1]) / 2.0\n            X_left, y_left, X_right, y_right = split_dataset(X, y, feature_index, threshold)\n            if len(y_left) == 0 or len(y_right) == 0:\n                continue\n            left_gini = gini_impurity(y_left)\n            right_gini = gini_impurity(y_right)\n            weighted_gini = (len(y_left) / num_samples) * left_gini + (len(y_right) / num_samples) * right_gini\n            gini_gain = parent_gini - weighted_gini\n\n            if gini_gain > best_gini_gain:\n                best_gini_gain = gini_gain\n                best_feature_index = feature_index\n                best_threshold = threshold\n\n    return best_feature_index, best_threshold\n\ndef build_tree(X, y, depth, max_depth):\n    \"\"\"Recursively build the decision tree.\"\"\"\n    if max_depth is not None and depth >= max_depth:\n        return np.bincount(y).argmax()\n    \n    if len(np.unique(y)) == 1:\n        return y[0]\n    \n    feature_index, threshold = best_split(X, y)\n    \n    if feature_index is None:\n        return np.bincount(y).argmax()\n    \n    X_left, y_left, X_right, y_right = split_dataset(X, y, feature_index, threshold)\n    \n    left_node = build_tree(X_left, y_left, depth + 1, max_depth)\n    right_node = build_tree(X_right, y_right, depth + 1, max_depth)\n    \n    return (feature_index, threshold, left_node, right_node)\n\ndef predict_tree(node, row):\n    \"\"\"Make prediction for a single row given a trained tree.\"\"\"\n    if isinstance(node, int):\n        return node\n    feature_index, threshold, left_node, right_node = node\n    if row[feature_index] <= threshold:\n        return predict_tree(left_node, row)\n    else:\n        return predict_tree(right_node, row)\n\ndef decision_tree_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    max_depth: int | None = None,\n) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n    tree = build_tree(X_train, y_train, 0, max_depth)\n    predictions = [predict_tree(tree, row) for row in X_test]\n    return predictions\n```\n\nThis code defines a decision tree classifier using the CART algorithm from scratch. It includes functions for calculating Gini impurity, finding the best split, building the tree recursively, and making predictions. The main function `decision_tree_predict` takes the training data and test data as inputs and returns a list of predicted class labels for the test data."}
{"task_id": 190, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    \n    X = np.asarray(X)\n    y = np.asarray(y)\n    n_samples, n_features = X.shape\n    n_classes = len(np.unique(y))\n    \n    def gini(node_y):\n        p = np.bincount(node_y, minlength=n_classes) / len(node_y)\n        return 1 - np.sum(p ** 2)\n    \n    G_whole_dataset = gini(y)\n    best_gini = float('inf')\n    best_feature_index = -1\n    best_threshold_value = None\n    \n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        if len(unique_values) == 1:\n            continue\n        \n        for threshold in unique_values:\n            left_indices = X[:, feature_index] <= threshold\n            right_indices = X[:, feature_index] > threshold\n            \n            if np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n                continue\n            \n            G_left = gini(y[left_indices])\n            G_right = gini(y[right_indices])\n            n_left = np.sum(left_indices)\n            n_right = np.sum(right_indices)\n            \n            G_split = (n_left / n_samples) * G_left + (n_right / n_samples) * G_right\n            \n            if G_split < best_gini:\n                best_gini = G_split\n                best_feature_index = feature_index\n                best_threshold_value = threshold\n            elif np.isclose(G_split, best_gini, atol=1e-12):\n                if feature_index < best_feature_index:\n                    best_feature_index = feature_index\n                    best_threshold_value = threshold\n                elif feature_index == best_feature_index and threshold < best_threshold_value:\n                    best_threshold_value = threshold\n    \n    if best_gini == float('inf'):\n        return (-1, None, round(G_whole_dataset, 4))\n    \n    return (best_feature_index, best_threshold_value, round(best_gini, 4))\n```"}
{"task_id": 191, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    def validate_vectors(x, y):\n        # Check if both are iterable and can be converted to float\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except ValueError:\n            return False\n        \n        # Check if both are one-dimensional, non-empty, and of the same length\n        if x.ndim != 1 or y.ndim != 1 or x.size == 0 or y.size == 0 or x.size != y.size:\n            return False\n        \n        return True\n\n    def euclidean(x, y):\n        return np.sqrt(np.sum((x - y) ** 2))\n\n    def manhattan(x, y):\n        return np.sum(np.abs(x - y))\n\n    def chebyshev(x, y):\n        return np.max(np.abs(x - y))\n\n    def cosine(x, y):\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        return 1 - np.dot(x, y) / (norm_x * norm_y)\n\n    def d(x, y):\n        if not validate_vectors(x, y):\n            return -1\n        if name == 'euclidean':\n            return round(euclidean(x, y), 4)\n        elif name == 'manhattan':\n            return round(manhattan(x, y), 4)\n        elif name == 'chebyshev':\n            return round(chebyshev(x, y), 4)\n        elif name == 'cosine':\n            return round(cosine(x, y), 4)\n        else:\n            return -1\n\n    return d\n\n# Example usage:\n# print(metric('euclidean')([1, 2, 3], [4, 5, 6]))  # \u279e 5.1962\n```\n\nThis script defines a `metric` function that returns a distance function based on the specified metric name. The returned function includes validation to ensure the inputs are valid one-dimensional numeric vectors of the same length. If the inputs are invalid or the metric name is unsupported, it returns -1. The distance calculations are rounded to four decimal places."}
{"task_id": 197, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n\n    if not md_action:\n        # Single-dimensional action space\n        if cont_action:\n            n_actions_per_dim = [np.inf]\n            action_dim = 1\n        else:\n            n_actions_per_dim = [env.action_space.n]\n            action_ids = [(i,) for i in range(env.action_space.n)]\n            action_dim = 1\n    else:\n        # Multi-dimensional action space\n        action_dim = len(env.action_space.spaces)\n        action_ids = []\n\n        for space in env.action_space.spaces:\n            if hasattr(space, 'n'):\n                n_actions_per_dim.append(space.n)\n                action_ids.append(range(space.n))\n            elif hasattr(space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n                action_ids = None\n                break\n\n        if action_ids is not None:\n            action_ids = list(product(*action_ids))\n\n    return n_actions_per_dim, action_ids, action_dim\n```\n\nThis script defines the `action_stats` function that summarizes the action space of a reinforcement learning environment. It handles both continuous and discrete actions, as well as single-dimensional and multi-dimensional spaces, according to the specifications provided."}
{"task_id": 198, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # Determine the number of topics T\n    T = phi[0].shape[1]\n    \n    # Initialize the beta matrix as a zero matrix of shape (V, T)\n    beta = np.zeros((V, T))\n    \n    # Iterate over each document\n    for d in range(len(corpus)):\n        # Extract the phi values for document d\n        phi_d = phi[d]\n        # Extract the words in document d\n        words_d = corpus[d]\n        \n        # For each word in document d, update the corresponding row in beta\n        for n, w in enumerate(words_d):\n            # Add the corresponding phi value for the word and topic to beta\n            beta[w] += phi_d[n]\n    \n    # Normalize the columns of beta to sum to 1\n    col_sums = beta.sum(axis=0)\n    # Avoid division by zero by setting zero sums to 1\n    col_sums[col_sums == 0] = 1\n    beta /= col_sums\n    \n    # Round the elements of beta to 4 decimal places\n    beta = np.round(beta, 4)\n    \n    # Convert beta to a list of lists before returning\n    return beta.tolist()\n```\n\nThis code defines the function `update_beta` that calculates the word\u2013topic distribution matrix $\\beta$ for Latent Dirichlet Allocation (LDA) based on the given variational parameter $\\varphi$ and the corpus of documents. The function ensures that each column of $\\beta$ sums to 1 and rounds the entries to 4 decimal places. If a word never appears in the corpus, the corresponding row in $\\beta$ will contain only zeros."}
{"task_id": 202, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    \n    def compute_cost(medoids, X, labels):\n        cost = 0\n        for i, label in enumerate(labels):\n            cost += np.linalg.norm(X[i] - medoids[label])\n        return cost\n    \n    def assign_labels(medoids, X):\n        return [np.argmin([np.linalg.norm(x - medoid) for medoid in medoids]) for x in X]\n    \n    n_samples = X.shape[0]\n    \n    # Step 1: Initialize medoids as the first k samples\n    medoids = X[:k]\n    labels = assign_labels(medoids, X)\n    current_cost = compute_cost(medoids, X, labels)\n    \n    # Step 2: Iteratively improve the set of medoids\n    while True:\n        best_swap_cost = -1\n        best_swap = None\n        \n        for j in range(k):  # over each medoid\n            for i in range(n_samples):  # over each sample\n                if i not in medoids:\n                    # Swap medoids[j] with sample i\n                    new_medoids = medoids.copy()\n                    new_medoids[j] = X[i]\n                    new_labels = assign_labels(new_medoids, X)\n                    new_cost = compute_cost(new_medoids, X, new_labels)\n                    \n                    cost_reduction = current_cost - new_cost\n                    if cost_reduction > best_swap_cost:\n                        best_swap_cost = cost_reduction\n                        best_swap = (j, i)\n        \n        if best_swap_cost <= 0:\n            break\n        \n        # Perform the best swap\n        j, i = best_swap\n        medoids[j] = X[i]\n        labels = assign_labels(medoids, X)\n        current_cost -= best_swap_cost\n    \n    # Step 3: Assign labels and return them\n    return labels\n\n# Example usage\nX = np.array([[0,0], [1,0], [0,1], [5,5], [6,5], [5,6]])\nk = 2\nprint(pam_clustering(X, k))  # Output: [0, 0, 0, 1, 1, 1]\n```\n\nThis script defines the `pam_clustering` function following the given deterministic PAM algorithm. It initializes the medoids, iteratively attempts to reduce the clustering cost by swapping medoids with non-medoids, and assigns the final cluster labels based on the closest medoids."}
{"task_id": 216, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    \n    def polynomial_features(x, degree):\n        x = np.asarray(x)\n        n_samples, n_features = x.shape\n        powers = np.arange(0, degree + 1)\n        features = np.zeros((n_samples, n_features * degree + 1))\n        index = 0\n        \n        for features_ind in range(n_features):\n            for power in powers:\n                if power == 0:\n                    features[:, index] = 1  # Add bias term\n                else:\n                    features[:, index] = x[:, features_ind] ** power\n                index += 1\n                \n        return features\n    \n    def standardize_features(x):\n        mean = np.mean(x, axis=0)\n        std = np.std(x, axis=0)\n        std[std == 0] = 1  # Avoid division by zero\n        return (x - mean) / std, mean, std\n    \n    x_train = np.asarray(x_train)\n    x_test = np.asarray(x_test)\n    y_train = np.asarray(y_train)\n    \n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n    \n    # Generate polynomial features for training and testing sets\n    X_train_poly = polynomial_features(x_train, degree)[:, 1:]  # Exclude bias term for standardization\n    X_test_poly = polynomial_features(x_test, degree)[:, 1:]\n    \n    # Standardize the non-bias features\n    X_train_poly, mean, std = standardize_features(X_train_poly)\n    X_test_poly = (X_test_poly - mean) / std\n    \n    # Combine with bias term\n    X_train_poly = np.hstack((np.ones((X_train_poly.shape[0], 1)), X_train_poly))\n    X_test_poly = np.hstack((np.ones((X_test_poly.shape[0], 1)), X_test_poly))\n    \n    # Initialize weights with zeros\n    weights = np.zeros(X_train_poly.shape[1])\n    \n    # Gradient descent\n    for _ in range(n_iterations):\n        predictions = X_train_poly.dot(weights)\n        errors = predictions - y_train\n        \n        # Compute gradients\n        gradient = (2 / X_train_poly.shape[0]) * X_train_poly.T.dot(errors)\n        reg_gradient_l1 = reg_factor * l1_ratio * np.sign(weights[1:])  # L1 regularization term (exclude bias)\n        reg_gradient_l2 = reg_factor * (1 - l1_ratio) * weights[1:]    # L2 regularization term (exclude bias)\n        \n        # Update weights excluding bias term for regularization\n        weights[0] -= learning_rate * gradient[0]  # Update bias term without regularization\n        weights[1:] -= learning_rate * (gradient[1:] + reg_gradient_l1 + reg_gradient_l2)\n    \n    # Predict on test set\n    predictions = X_test_poly.dot(weights)\n    \n    return np.round(predictions, 4).tolist()\n```\n\nThis script defines the `elastic_net_regression` function which performs Elastic Net regression using batch gradient descent. The function includes polynomial feature expansion, standardization of features, and handles regularization separately for the bias term. It checks for input validity and returns predictions for the test set rounded to four decimal places."}
{"task_id": 217, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to numpy arrays\n    actual = np.array(actual, dtype=np.float64)\n    predicted = np.array(predicted, dtype=np.float64)\n    \n    # Sigmoid function\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    \n    # Compute probabilities\n    probabilities = sigmoid(predicted)\n    \n    # Compute gradient for each observation\n    gradient = actual * sigmoid(-actual * predicted)\n    \n    # Compute Hessian for each observation\n    hessian = probabilities * (1 - probabilities)\n    \n    # Round results to 6 decimal places\n    gradient = np.round(gradient, 6)\n    hessian = np.round(hessian, 6)\n    probabilities = np.round(probabilities, 6)\n    \n    # Convert results back to Python lists\n    gradient_list = gradient.tolist()\n    hessian_list = hessian.tolist()\n    probability_list = probabilities.tolist()\n    \n    return gradient_list, hessian_list, probability_list\n\n# Example usage:\n# actual = [1, -1, 1, -1]\n# predicted = [2.0, -1.5, 0.5, -0.5]\n# gradient, hessian, probabilities = logistic_components(actual, predicted)\n# print(\"Gradient:\", gradient)\n# print(\"Hessian:\", hessian)\n# print(\"Probabilities:\", probabilities)\n```\n\nThis script defines the `logistic_components` function, which computes the gradient, Hessian, and probabilities for logistic loss given the actual and predicted values. The function handles inputs as lists, tuples, or NumPy arrays, performs vectorized computations, and ensures all outputs are rounded to six decimal places before returning them as Python lists."}
{"task_id": 218, "completion_id": 0, "completion": "```\npython\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    def hand_value(hand: list[int]) -> int:\n        \"\"\"Calculate the highest legal value of a hand.\"\"\"\n        value = sum(hand)\n        aces = hand.count(1)\n        while aces and value + 10 <= 21:\n            value += 10\n            aces -= 1\n        return value\n\n    def is_natural_blackjack(hand: list[int]) -> bool:\n        \"\"\"Check if the hand is a natural blackjack.\"\"\"\n        return len(hand) == 2 and 1 in hand and 10 in hand\n\n    player_bust = hand_value(player) > 21\n    dealer_bust = hand_value(dealer) > 21\n\n    if player_bust:\n        return -1\n    if dealer_bust:\n        return 1\n\n    player_score = hand_value(player)\n    dealer_score = hand_value(dealer)\n\n    if player_score == dealer_score:\n        return 0\n    elif player_score > dealer_score:\n        if is_natural_blackjack(player):\n            return 1.5\n        return 1\n    else:\n        return -1\n```\n\nThis script defines the `blackjack_outcome` function, which evaluates the outcome of a finished round of Blackjack according to the rules provided. It includes helper functions to calculate the hand value and check for a natural blackjack."}
{"task_id": 221, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper function that returns element-wise squared log errors.\"\"\"\n    try:\n        # Convert inputs to NumPy arrays if they aren't already\n        actual = np.array(actual)\n        predicted = np.array(predicted)\n        \n        # Check if all values are non-negative\n        if np.any(actual < 0) or np.any(predicted < 0):\n            return -1\n        \n        # Calculate squared log errors\n        return (np.log1p(actual) - np.log1p(predicted)) ** 2\n    \n    except Exception as e:\n        # If any exception occurs, return -1 (e.g., mismatched shapes)\n        return -1\n\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\"\"\"\n    # Get element-wise squared log errors\n    errors = squared_log_error(actual, predicted)\n    \n    # If input validation failed, return -1\n    if errors == -1:\n        return -1\n    \n    # Calculate mean of the squared log errors and round to 4 decimal places\n    msle = np.mean(errors)\n    return round(msle, 4)\n\n\n# Example usage:\nactual = [3, -0.5, 2, 7]\npredicted = [2.5, 0.3, 2, 8]\n\n# This should return -1 due to negative value in `actual`\nprint(mean_squared_log_error(actual, predicted))  # Output: -1\n\nactual = [3, 0.5, 2, 7]\npredicted = [2.5, 0.3, 2, 8]\n\n# This should return the MSLE value\nprint(mean_squared_log_error(actual, predicted))  # Output: 0.0396\n```\n\nThe above script provides the implementation for the `squared_log_error` and `mean_squared_log_error` functions as per the task description. The `mean_squared_log_error` function returns the MSLE rounded to four decimal places, and it returns `-1` if any input validation fails."}
{"task_id": 222, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    def sigmoid_scalar(x):\n        if x >= 0:\n            return round(1 / (1 + np.exp(-x)), 4)\n        else:\n            return round(np.exp(x) / (1 + np.exp(x)), 4)\n\n    if isinstance(z, (int, float)):\n        return sigmoid_scalar(z)\n    elif isinstance(z, (list, np.ndarray)):\n        z = np.array(z)\n        result = np.where(z >= 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n        return np.round(result, 4).tolist()\n    else:\n        raise ValueError(\"Input must be a scalar, list, or numpy array.\")\n\n# Example usage:\n# print(sigmoid(1))  # Scalar input\n# print(sigmoid([1, 2, 3]))  # List input\n# print(sigmoid(np.array([[1, -1], [2, -2]])))  # 2D numpy array input\n```\n\nThis script defines the `sigmoid` function, which computes the sigmoid activation for a given input, ensuring numerical stability for large inputs by handling positive and negative values differently. The function supports scalar, list, and NumPy array inputs and returns the result rounded to four decimal places."}
{"task_id": 224, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    def apply_leaky_relu(x):\n        if isinstance(x, (list, np.ndarray)):\n            return [apply_leaky_relu(item) for item in x]\n        else:\n            return x if x >= 0 else a * x\n\n    if isinstance(z, np.ndarray):\n        z = z.tolist()\n\n    result = apply_leaky_relu(z)\n    return result\n\n# Example usage:\n# z = np.array([[-1.0, 2.0], [-0.5, 3.0]])\n# print(leaky_relu(z))  # Output: [[-0.01, 2.0], [-0.005, 3.0]]\n```\n\nThis script defines the `leaky_relu` function, which applies the Leaky ReLU activation to each element of the input `z`, which can be a scalar, a nested list, or a `numpy.ndarray`. The function handles the input and ensures the output is a Python list with the same structure as the input."}
{"task_id": 226, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    \n    def train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> tuple:\n        \"\"\"Train a single decision stump and return the best split.\"\"\"\n        n_samples, n_features = X.shape\n        min_error = float('inf')\n        best_feature = None\n        best_threshold = None\n        best_polarity = None\n\n        for feature_i in range(n_features):\n            thresholds = np.unique(X[:, feature_i])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(n_samples)\n                    predictions[X[:, feature_i] < threshold] = -1 * polarity\n\n                    weighted_error = np.sum(sample_weights[y != predictions])\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        polarity *= -1\n\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_feature = feature_i\n                        best_threshold = threshold\n                        best_polarity = polarity\n\n        alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n        return best_feature, best_threshold, best_polarity, alpha\n\n    n_samples, _ = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    classifiers = []\n\n    for _ in range(n_clf):\n        feature, threshold, polarity, alpha = train_decision_stump(X_train, y_train, sample_weights)\n        classifiers.append((feature, threshold, polarity, alpha))\n\n        predictions = np.ones(n_samples)\n        for feature, threshold, polarity, _ in classifiers:\n            predictions[X_train[:, feature] < threshold] *= -1 * polarity\n\n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        sample_weights /= np.sum(sample_weights)\n\n    # Prediction\n    n_test_samples, _ = X_test.shape\n    predictions = np.zeros(n_test_samples)\n    for feature, threshold, polarity, alpha in classifiers:\n        predictions[X_test[:, feature] < threshold] += alpha * -1 * polarity\n        predictions[X_test[:, feature] >= threshold] += alpha * polarity\n\n    return [int(np.sign(p)) for p in predictions]\n\n# Example usage:\n# X_train = np.array([[0, 1], [1, 1], [1, 0], [0, 0]])\n# y_train = np.array([1, 1, -1, -1])\n# X_test = np.array([[1, 0], [0, 1]])\n# print(adaboost_predict(X_train, y_train, X_test, n_clf=3))\n```\n\nThis code implements the AdaBoost algorithm using decision stumps as weak learners. It trains the specified number of stumps on the training data, updates the sample weights based on the errors made by each stump, and finally makes predictions on the test data. The predictions are returned as a list of integers, each either -1 or 1."}
{"task_id": 241, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    \n    # Flatten the shape into a 2D matrix\n    d0 = shape[0]\n    other_dims = np.prod(shape[1:])\n    A = np.random.randn(d0, other_dims)\n    \n    # Compute the singular value decomposition of A\n    U, _, Vt = np.linalg.svd(A)\n    \n    # Choose the correct matrix depending on the shape of U and Vt\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt.T\n    \n    # Reshape Q to the desired shape and scale it\n    Q_reshaped = Q.reshape(shape)\n    Q_scaled = Q_reshaped * scale\n    \n    # Convert to list and return\n    return Q_scaled.tolist()\n\n# Example usage\nnp.random.seed(0)\nshape = (2, 2)\nscale = 0.5\nresult = orthogonal(shape, scale)\nprint(np.array(result))\n```\n\nThis script defines the `orthogonal` function as specified, which initializes a tensor with an orthogonal matrix using the algorithm described by Saxe et al. (2014). The function checks if the input shape has at least two dimensions, performs the necessary computations, and returns the orthogonal matrix scaled by the given factor. The example usage demonstrates how to call the function with a fixed random seed and prints the resulting matrix."}
{"task_id": 243, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a numpy array\n    s = np.array(state, dtype=float)\n    \n    # Define weights and biases (all weights = 1.0, all biases = 0.0)\n    W1 = np.ones((3, 4))\n    b1 = np.zeros(4)\n    W2 = np.ones((4, 4))\n    b2 = np.zeros(4)\n    W3 = np.ones((4, 4))\n    b3 = np.zeros(4)\n    Wa = np.ones((4, 3))\n    ba = np.zeros(3)\n    Wc = np.ones((4, 1))\n    bc = np.zeros(1)\n    \n    # Forward pass through the network\n    z1 = np.maximum(0, np.dot(s, W1) + b1)  # ReLU activation\n    z2 = np.maximum(0, np.dot(z1, W2) + b2)  # ReLU activation\n    z3 = np.maximum(0, np.dot(z2, W3) + b3)  # ReLU activation\n    logits = np.dot(z3, Wa) + ba  # Actor head\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))  # Softmax activation\n    state_value = (np.dot(z3, Wc) + bc)[0]  # Critic head\n    \n    # Round the results\n    action_probs_rounded = [round(p, 4) for p in action_probs]\n    state_value_rounded = round(state_value, 4)\n    \n    return action_probs_rounded, state_value_rounded\n```\n\nThis script defines the `actor_critic_forward` function, which performs the forward pass of the specified Actor-Critic network using basic NumPy operations. The function takes a state vector as input and returns the action probabilities and state value, both rounded to four decimal places."}
{"task_id": 249, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    \n    # Convert lists to numpy arrays for matrix operations\n    state = np.array(state)\n    W1, b1 = np.array(params['W1']), np.array(params['b1'])\n    W2, b2 = np.array(params['W2']), np.array(params['b2'])\n    W3, b3 = np.array(params['W3']), np.array(params['b3'])\n    Wa, ba = np.array(params['Wa']), np.array(params['ba'])\n    Wc, bc = np.array(params['Wc']), np.array(params['bc'])\n    \n    # Shared layers\n    h1 = np.maximum(0, np.dot(state, W1) + b1)  # ReLU activation\n    h2 = np.maximum(0, np.dot(h1, W2) + b2)    # ReLU activation\n    h3 = np.maximum(0, np.dot(h2, W3) + b3)    # ReLU activation\n    \n    # Actor head\n    actor_scores = np.dot(h3, Wa) + ba\n    probabilities = np.exp(actor_scores) / np.sum(np.exp(actor_scores))\n    probabilities = [round(p, 4) if p not in (0, 1) else p for p in probabilities]\n    \n    # Critic head\n    value = np.dot(h3, Wc) + bc\n    value = round(value[0], 4) if value[0] not in (0, 1) else value[0]\n    \n    return probabilities, value\n```\n\nThis script defines the `actor_critic_forward` function, which performs the forward pass through the Actor-Critic network as described. It uses NumPy for efficient matrix operations and applies the specified transformations and activations. The final outputs are rounded to four decimal places, with special handling for values that are exactly 0 or 1."}
{"task_id": 253, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)  # Ensure w is a NumPy array for vectorized operations\n    \n    if gradient:\n        # Compute the gradient of the Elastic-Net penalty\n        grad = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n        return [round(g, 4) for g in grad]  # Return as a list rounded to 4 decimals\n    else:\n        # Compute the Elastic-Net penalty\n        l1_term = np.linalg.norm(w, ord=1)\n        l2_term = np.dot(w, w)  # Equivalent to np.linalg.norm(w, ord=2) ** 2\n        penalty = alpha * (l1_ratio * l1_term + (1 - l1_ratio) * 0.5 * l2_term)\n        return round(penalty, 4)  # Return as a float rounded to 4 decimals\n\n# Example usage:\nw = [1.0, 2.0, 3.0]\nalpha = 0.1\nl1_ratio = 0.5\n\n# Compute penalty\npenalty = elastic_net_regularization(w, alpha, l1_ratio, gradient=False)\nprint(f\"Elastic-Net Penalty: {penalty}\")\n\n# Compute gradient\ngradient = elastic_net_regularization(w, alpha, l1_ratio, gradient=True)\nprint(f\"Elastic-Net Gradient: {gradient}\")\n```\n\nThis script defines the `elastic_net_regularization` function as specified, which can compute either the Elastic-Net penalty or its gradient based on the `gradient` flag. The function handles the input vector `w` as either a list or a NumPy array, ensuring efficient computation using NumPy's vectorized operations. The results are rounded to four decimal places as required."}
{"task_id": 256, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in [\"X\", \"y\"]:\n        return None\n    \n    # Handle special cases for parameter names\n    if param_name in [\"Ba\", \"Bx\"]:\n        param_name = param_name.lower()\n    \n    # Get the parameter to check\n    param = model.parameters[param_name]\n    \n    # Initialize the gradient array with the same shape as the parameter\n    grads = np.zeros_like(param, dtype=np.float64)\n    \n    # Iterate over every element in the parameter\n    for idx in np.ndindex(param.shape):\n        # Save the original value\n        original_value = param[idx]\n        \n        # Perturb the parameter with +epsilon\n        param[idx] = original_value + epsilon\n        model.flush_gradients()\n        predictions = []\n        for t in range(n_t):\n            prediction = model.forward(X[:, :, t])\n            predictions.append(prediction)\n        loss_plus = loss_func(predictions)\n        \n        # Perturb the parameter with -epsilon\n        param[idx] = original_value - epsilon\n        model.flush_gradients()\n        predictions = []\n        for t in range(n_t):\n            prediction = model.forward(X[:, :, t])\n            predictions.append(prediction)\n        loss_minus = loss_func(predictions)\n        \n        # Compute the numerical gradient\n        grads[idx] = (loss_plus - loss_minus) / (2 * epsilon)\n        \n        # Restore the original value\n        param[idx] = original_value\n    \n    # Return the transposed gradient array\n    return grads.T\n```\n\nThis script defines the `grad_check_RNN` function, which numerically estimates the gradient of an RNN parameter using the centered finite-difference formula. It handles special cases for parameter names and ensures that the gradients are computed correctly for each element of the parameter. The function returns the transposed gradient array, as required."}
{"task_id": 257, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n\n    m, n = X_train.shape\n    weights = np.ones(m) / m\n    stumps = []\n    stump_weights = []\n\n    for _ in range(n_clf):\n        best_stump = None\n        min_error = float('inf')\n        best_polarity = 1\n\n        for feature_i in range(n):\n            feature_values = np.unique(X_train[:, feature_i])\n            for threshold in feature_values:\n                for polarity in [1, -1]:\n                    predictions = np.ones(m)\n                    predictions[X_train[:, feature_i] * polarity < threshold * polarity] = -1\n\n                    weighted_error = np.sum(weights[predictions != y_train])\n\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        polarity = -polarity\n\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump = (feature_i, threshold, polarity)\n                        best_predictions = predictions\n\n        alpha = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n        stump_weights.append(alpha)\n        stumps.append(best_stump)\n        weights *= np.exp(-alpha * y_train * best_predictions)\n        weights /= np.sum(weights)\n\n    def predict_sample(sample):\n        stump_preds = np.array([stump_weight * ((sample[stump[0]] * stump[2] >= stump[1]) * 2 - 1) for stump, stump_weight in zip(stumps, stump_weights)])\n        return np.sign(np.sum(stump_preds))\n\n    return [predict_sample(sample) for sample in X_test]\n```\n\nThis script defines the `adaboost_predict` function which implements the AdaBoost algorithm using decision stumps as weak learners. It takes a training set, a test set, and the number of classifiers to build, and returns a list of predicted labels for the test set. The function handles cases where `n_clf` is less than 1 by setting it to 1."}
{"task_id": 261, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError(\"Shape must have at least two dimensions.\")\n    \n    fan_in = shape[1]\n    fan_out = shape[0]\n    \n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n    \n    std_dev = np.sqrt(2 / (fan_in + fan_out))\n    \n    return np.random.normal(0, std_dev, shape).astype(float)\n\n# Example usage:\nif __name__ == \"__main__\":\n    shape = (32, 64, 3, 3)  # Example shape for a convolutional layer\n    weights = glorot_normal(shape)\n    print(f\"Shape: {weights.shape}\")\n    print(f\"Mean: {weights.mean()}\")\n    print(f\"Standard Deviation: {weights.std()}\")\n```\n\nThis script defines the `glorot_normal` function which initializes a NumPy array with the Glorot/Xavier normal initialization method. The function calculates the `fan_in` and `fan_out` based on the input shape, computes the standard deviation, and then generates a NumPy array with the specified shape filled with random values drawn from a normal distribution with a mean of 0 and the computed standard deviation. The example usage demonstrates how to call the function and prints the shape, mean, and standard deviation of the resulting array."}
{"task_id": 266, "completion_id": 0, "completion": "```\npython\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    # Create a dictionary to map each vertex to its index in V\n    index_map = {vertex: idx for idx, vertex in enumerate(V)}\n    \n    # Initialize the adjacency list with empty sets to avoid duplicates\n    adjacency_list = [[] for _ in V]\n    \n    # Add edges to the adjacency list\n    for u, v in E:\n        if u != v:  # Skip self-loops\n            if v not in adjacency_list[index_map[u]]:\n                adjacency_list[index_map[u]].append(v)\n            if u not in adjacency_list[index_map[v]]:\n                adjacency_list[index_map[v]].append(u)\n    \n    # Sort the neighbors according to their order of appearance in V\n    for i in range(len(adjacency_list)):\n        adjacency_list[i] = sorted(adjacency_list[i], key=lambda x: V.index(x))\n    \n    return adjacency_list\n\n# Example usage\nif __name__ == \"__main__\":\n    V = ['A', 'B', 'C', 'D']\n    E = [('A', 'B'), ('B', 'C'), ('B', 'D'), ('C', 'A'), ('D', 'A')]\n    print(build_adj_list(V, E))\n    # Output: [['B', 'C', 'D'], ['A', 'C', 'D'], ['A', 'B'], ['A', 'B']]\n```\n\nThis script defines the `build_adj_list` function, which constructs an adjacency list representation of an undirected graph from a list of vertices `V` and a list of edges `E`. The function ensures that each vertex's neighbors are unique and sorted according to their order in `V`. The example usage at the bottom demonstrates how the function can be used and shows the expected output."}
{"task_id": 267, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_err = np.inf\n    best_feature_index = 0\n    best_threshold = 0.0\n    best_polarity = 1\n\n    for feature_index in range(n_features):\n        # Extract the feature column and sort it\n        feature_values = X[:, feature_index]\n        unique_thresholds = np.unique(feature_values)\n        \n        for threshold in unique_thresholds:\n            for polarity in [1, -1]:\n                # Make predictions\n                predictions = np.where(feature_values < threshold, polarity, -polarity)\n                \n                # Compute weighted error\n                err = np.sum(sample_weights * (predictions != y))\n                \n                # Update best stump if this one is better\n                if err < best_err:\n                    best_err = err\n                    best_feature_index = feature_index\n                    best_threshold = threshold\n                    best_polarity = polarity\n\n    return {\n        \"feature_index\": best_feature_index,\n        \"threshold\": round(best_threshold, 4),\n        \"polarity\": best_polarity,\n        \"weighted_error\": round(best_err, 4)\n    }\n\n# Example usage:\n# X = np.array([[1, 2], [2, 2], [3, 4], [3, 5]])\n# y = np.array([1, 1, -1, -1])\n# sample_weights = np.array([0.1, 0.2, 0.3, 0.4])\n# print(train_decision_stump(X, y, sample_weights))\n```\n\nThis script defines the `train_decision_stump` function, which iterates over each feature and each unique threshold within that feature to find the decision stump that minimizes the weighted classification error. The function then returns a dictionary with the best feature index, threshold, polarity, and weighted error, all rounded to four decimal places."}
{"task_id": 273, "completion_id": 0, "completion": "```\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of labels.\"\"\"\n    label_counts = Counter(labels)\n    total_count = len(labels)\n    entropy_value = 0.0\n    for count in label_counts.values():\n        probability = count / total_count\n        entropy_value -= probability * math.log2(probability)\n    return entropy_value\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    feature = np.array(feature)\n    target = np.array(target)\n    \n    # Sort the feature values and corresponding targets\n    sorted_indices = np.argsort(feature)\n    sorted_feature = feature[sorted_indices]\n    sorted_target = target[sorted_indices]\n    \n    # Calculate the entropy of the parent node\n    parent_entropy = entropy(sorted_target)\n    n = len(sorted_feature)\n    \n    best_threshold = None\n    max_information_gain = 0.0\n    \n    # Evaluate each candidate threshold\n    for i in range(n - 1):\n        # Only consider distinct values for thresholds\n        if sorted_feature[i] != sorted_feature[i + 1]:\n            threshold = (sorted_feature[i] + sorted_feature[i + 1]) / 2.0\n            \n            # Split the data at the threshold\n            left_indices = sorted_indices[:i + 1]\n            right_indices = sorted_indices[i + 1:]\n            \n            left_target = sorted_target[left_indices]\n            right_target = sorted_target[right_indices]\n            \n            # Calculate the entropy of the left and right nodes\n            left_entropy = entropy(left_target)\n            right_entropy = entropy(right_target)\n            \n            # Calculate the information gain\n            information_gain = parent_entropy - (len(left_target) / n) * left_entropy - (len(right_target) / n) * right_entropy\n            \n            # Update the best threshold if this one is better\n            if information_gain > max_information_gain:\n                max_information_gain = information_gain\n                best_threshold = threshold\n    \n    # Return the best threshold and information gain rounded to 4 decimal places\n    return (round(best_threshold, 4), round(max_information_gain, 4)) if best_threshold is not None else (None, 0.0)\n\n# Example usage:\n# feature = [1, 2, 3, 4, 5]\n# target = [0, 0, 1, 1, 1]\n# print(best_split(feature, target))  # Output should be the best threshold and its information gain\n```\n\nThis script defines a function `best_split` that calculates the optimal numerical threshold for splitting a dataset in a decision tree based on information gain. The function first sorts the feature values and corresponding target labels, then evaluates each possible threshold between distinct feature values. It calculates the information gain for each threshold and returns the threshold with the highest gain, rounded to four decimal places. If no useful split is found, it returns `(None, 0.0)`."}
{"task_id": 286, "completion_id": 0, "completion": "Certainly! Below is the complete implementation of the required functionality in a self-contained Python script:\n\n```python\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    return [[0.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    return [[1.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    return [[random.uniform(low, high) for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError(\"Invalid initialization function.\")\n```\n\n### Explanation:\n\n1. **Initializer Functions:**\n    - **`zeros_init(shape)`**: Creates a matrix of zeros with the specified shape.\n    - **`ones_init(shape)`**: Creates a matrix of ones with the specified shape.\n    - **`random_uniform_init(shape, low=0.0, high=1.0, seed=42)`**: Creates a matrix with elements drawn uniformly from the range `[low, high]`.\n\n2. **`get_initializer(name)`**:\n    - Uses `globals()` to retrieve the object with the name specified by the `name` argument.\n    - Checks if the retrieved object is callable.\n    - Returns the callable if it exists.\n    - Raises a `ValueError` with the message \"Invalid initialization function.\" if the object is not callable or does not exist.\n\nThis script provides a flexible way to retrieve and use different weight initializers by their names."}
{"task_id": 287, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n    \n    # Calculate output dimensions\n    H_out = (H - p_h) // s_h + 1\n    W_out = (W - p_w) // s_w + 1\n    \n    # Initialize pooled output and gradient input\n    pooled_output = np.zeros((N, C, H_out, W_out))\n    grad_input = np.zeros_like(X)\n    \n    # Forward pass\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_out):\n                for w in range(W_out):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    pooled_output[n, c, h, w] = np.mean(X[n, c, h_start:h_end, w_start:w_end])\n    \n    # Backward pass\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_out):\n                for w in range(W_out):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += accum_grad[n, c, h, w] / (p_h * p_w)\n    \n    # Round to the nearest 4-th decimal and convert to lists\n    pooled_output = np.round(pooled_output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    \n    return pooled_output, grad_input\n\n# Example usage:\n# X = np.random.rand(2, 3, 4, 4)\n# pool_shape = (2, 2)\n# stride = (2, 2)\n# accum_grad = np.random.rand(2, 3, 2, 2)\n# output, grad_input = average_pool2d(X, pool_shape, stride, accum_grad)\n# print(\"Pooled Output:\", output)\n# print(\"Gradient Input:\", grad_input)\n```\n\nThis script defines the `average_pool2d` function which performs both the forward and backward passes of a 2-D average pooling layer. The function computes the pooled output by averaging elements within the pooling window and distributes the gradient equally during the backward pass. The results are rounded to the nearest 4th decimal and converted to Python lists before returning."}
{"task_id": 290, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-8)\n    \n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        return (tree_a.feature == tree_b.feature and\n                np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-8) and\n                compare_trees(tree_a.left, tree_b.left) and\n                compare_trees(tree_a.right, tree_b.right))\n    \n    return False\n```\n\nThis script defines the `Leaf` and `Node` classes as specified, and implements the `compare_trees` function to recursively compare two decision trees for equivalence based on the given criteria."}
{"task_id": 292, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                            parent2: list[list[int | float]],\n                            cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    # Convert parent lists to numpy arrays for efficient slicing\n    parent1_np = np.array(parent1)\n    parent2_np = np.array(parent2)\n    \n    # Validate that the two parent matrices have the same shape\n    if parent1_np.shape != parent2_np.shape:\n        return -1\n    \n    # Perform the single-point column crossover\n    num_cols = parent1_np.shape[1]\n    \n    # Create child1 by taking columns before cutoff from parent1 and from cutoff from parent2\n    child1_np = np.concatenate((parent1_np[:, :cutoff], parent2_np[:, cutoff:]), axis=1)\n    \n    # Create child2 by taking columns before cutoff from parent2 and from cutoff from parent1\n    child2_np = np.concatenate((parent2_np[:, :cutoff], parent1_np[:, cutoff:]), axis=1)\n    \n    # Convert the resulting numpy arrays back to lists\n    child1 = child1_np.tolist()\n    child2 = child2_np.tolist()\n    \n    return (child1, child2)\n\n# Example usage:\nparent1 = [\n    [0.1, 0.2, 0.3],\n    [0.4, 0.5, 0.6]\n]\n\nparent2 = [\n    [0.9, 0.8, 0.7],\n    [0.6, 0.5, 0.4]\n]\n\ncutoff = 1\n\nchildren = single_point_crossover(parent1, parent2, cutoff)\nprint(\"Child 1:\", children[0])\nprint(\"Child 2:\", children[1])\n```\n\nThis script defines a function `single_point_crossover` that performs the specified single-point column crossover on two parent weight matrices. It includes validation to ensure the parent matrices have the same shape and returns the resulting child matrices as nested Python lists. The example usage at the end demonstrates how to use the function with sample input matrices."}
{"task_id": 294, "completion_id": 0, "completion": "```\npython\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    # Initialize the adjacency dictionary\n    adj = {label: [] for label in G['_V2I']}\n    \n    # Process each edge in the graph\n    for edge_list in G['_G']:\n        for source_label, target_label, weight in edge_list:\n            # Add the edge to the adjacency list for the source\n            adj[source_label].append((target_label, weight))\n            # If the graph is undirected, add the reverse edge\n            if not G['is_directed']:\n                adj[target_label].append((source_label, weight))\n    \n    # Sort the neighbour lists alphabetically by the neighbour label\n    for label in adj:\n        adj[label].sort(key=lambda x: x[0])\n    \n    return adj\n\n# Example usage:\n# G = {\n#     'is_directed': False,\n#     '_V2I': {'A': 0, 'B': 1, 'C': 2},\n#     '_G': [\n#         [('A', 'B', 1.0), ('A', 'C', 2.0)],\n#         [('B', 'A', 1.0)],\n#         [('C', 'A', 2.0)]\n#     ]\n# }\n# print(to_networkx(G))\n```\n\nThis script defines the `to_networkx` function which converts a custom graph representation into a plain adjacency dictionary. The function handles both directed and undirected graphs, ensuring that edges are correctly added and neighbour lists are sorted alphabetically."}
{"task_id": 296, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    # Convert the input to a NumPy array if it's not already one\n    x = np.asarray(x)\n    \n    # Check if all elements are either 0 or 1\n    return np.all((x == 0) | (x == 1))\n\n# Example usage:\n# x = np.array([0, 1, 1, 0, 1])\n# print(is_binary(x))  # Should print: True\n\n# y = np.array([0, 1, 2, 0, 1])\n# print(is_binary(y))  # Should print: False\n\n# z = np.array([True, False, True])\n# print(is_binary(z))  # Should print: True\n```"}
{"task_id": 298, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    # Tokenize the corpus\n    tokenized_corpus = []\n    for sentence in corpus:\n        tokens = sentence.split()\n        if N > 1:\n            tokens = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        tokenized_corpus.append(tokens)\n\n    # Count N-grams and (N-1)-grams\n    ngram_counts = defaultdict(int)\n    n1gram_counts = defaultdict(int) if N > 1 else Counter()\n\n    for tokens in tokenized_corpus:\n        for i in range(len(tokens) - N + 1):\n            ngram = tuple(tokens[i:i + N])\n            ngram_counts[ngram] += 1\n            if N > 1:\n                n1gram = tuple(tokens[i:i + N - 1])\n                n1gram_counts[n1gram] += 1\n\n    # Tokenize and pad the query\n    query_tokens = query.split()\n    if len(query_tokens) < N:\n        return float('-inf')\n    if N > 1:\n        query_tokens = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n\n    # Calculate the log-probability of the query\n    log_prob = 0.0\n\n    for i in range(len(query_tokens) - N + 1):\n        ngram = tuple(query_tokens[i:i + N])\n        if N == 1:\n            count = ngram_counts[ngram]\n            total_count = sum(ngram_counts.values())\n            prob = count / total_count if total_count > 0 else 0\n        else:\n            n1gram = tuple(query_tokens[i:i + N - 1])\n            count = ngram_counts[ngram]\n            prefix_count = n1gram_counts[n1gram]\n            prob = count / prefix_count if prefix_count > 0 else 0\n\n        if prob == 0:\n            return float('-inf')\n        log_prob += math.log(prob)\n\n    return round(log_prob, 4)\n\n\n# Example usage\ncorpus = [\"a b a\", \"b a b\"]\nquery = \"a b\"\nN = 1\nprint(ngram_log_prob(corpus, query, N))  # Output: -1.3863\n```\n\nThis script defines the `ngram_log_prob` function, which calculates the total log-probability of a query sentence under an N-gram Maximum Likelihood Estimation (MLE) model. The function handles tokenization, counts N-grams and (N-1)-grams, and computes the log-probability of the query, handling padding and edge cases as specified."}
{"task_id": 302, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n, d = X.shape\n    \n    # Step 1: Build the weighted adjacency matrix W\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                W[i, j] = 1 / (1 + np.linalg.norm(X[i] - X[j]))\n    \n    # Step 2: Compute the degree matrix D\n    D = np.diag(np.sum(W, axis=1))\n    \n    # Step 3: Compute the unnormalized graph Laplacian L\n    L = D - W\n    \n    # Step 4: Obtain the first k eigenvectors of L\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    \n    # Step 5: Run k-means on the rows of E\n    # Initialize centroids with the first k rows of E\n    centroids = E[:k].copy()\n    labels = np.zeros(n, dtype=int)\n    \n    for _ in range(100):\n        # Assign clusters\n        for i in range(n):\n            distances = np.linalg.norm(E[i] - centroids, axis=1)\n            labels[i] = np.argmin(distances)\n        \n        # Update centroids\n        new_centroids = np.zeros_like(centroids)\n        cluster_counts = np.zeros(k, dtype=int)\n        \n        for i in range(n):\n            new_centroids[labels[i]] += E[i]\n            cluster_counts[labels[i]] += 1\n        \n        # Check for empty clusters and re-initialize if necessary\n        for i in range(k):\n            if cluster_counts[i] == 0:\n                new_centroids[i] = E[np.random.choice(n)]\n            else:\n                new_centroids[i] /= cluster_counts[i]\n        \n        # If centroids do not change, break the loop\n        if np.all(centroids == new_centroids):\n            break\n        \n        centroids = new_centroids\n    \n    return labels.tolist()\n```\n\nThis script implements the Spectral Clustering algorithm from scratch as described in the task. It uses NumPy for numerical operations but avoids using any other external libraries for the clustering process itself."}
{"task_id": 303, "completion_id": 0, "completion": "```\npython\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_label, prev_mine = params[prev_ix]\n    curr_label, curr_mine = params[ix]\n\n    return (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_mine}\\n\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{golds[prev_label]}\\n\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_mine}\\n\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{golds[curr_label]}{warn_str}\\n\"\n        \"----------------------- END DEBUG -----------------------\"\n    )\n```\n\nThis script defines the `err_fmt` function according to the specified requirements, ensuring the output format is exact and matches the given constraints."}
{"task_id": 304, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    # Optionally add an intercept column to X\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n    \n    # Determine the number of features\n    M = X.shape[1]\n    \n    # Handle the prior mean \u03bc\n    if np.isscalar(mu):\n        mu = np.full(M, mu)\n    \n    # Handle the prior scale V\n    if V is None:\n        V_inv = np.eye(M)\n    elif np.isscalar(V):\n        V_inv = V * np.eye(M)\n    elif isinstance(V, (list, tuple)):\n        V_inv = np.diag(V)\n    else:\n        V_inv = V\n    \n    # Compute the posterior covariance \u03a3_b\n    XTX = X.T @ X\n    Sigma_b = np.linalg.inv(V_inv + XTX)\n    \n    # Compute the posterior mean \u03bc_b\n    XTy = X.T @ y\n    mu_b = Sigma_b @ (V_inv @ mu + XTy)\n    \n    # Return \u03bc_b rounded to 4 decimal places\n    return [round(coeff, 4) for coeff in mu_b]\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4]])\n# y = np.array([1, 2, 3])\n# print(bayesian_posterior_mean(X, y, fit_intercept=True))\n```"}
{"task_id": 308, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    # Convert Hz to Mel\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(m):\n        return 700 * (10**(m / 2595) - 1)\n\n    # Generate n_filters + 2 equally-spaced Mel values\n    mel_min = hz_to_mel(min_freq)\n    mel_max = hz_to_mel(max_freq)\n    mel_points = np.linspace(mel_min, mel_max, n_filters + 2)\n\n    # Convert Mel points back to Hz\n    hz_points = mel_to_hz(mel_points)\n\n    # Initialize the filter bank\n    filter_bank = np.zeros((n_filters, N // 2 + 1))\n\n    # Compute the filterbank\n    for i in range(n_filters):\n        left, center, right = hz_points[i], hz_points[i + 1], hz_points[i + 2]\n\n        for k in range(N // 2 + 1):\n            freq = k * fs / N\n\n            if left < freq <= center:\n                filter_bank[i, k] = (freq - left) / (center - left)\n            elif center < freq < right:\n                filter_bank[i, k] = (right - freq) / (right - center)\n\n        # Normalize the filter\n        if normalize:\n            filter_bank[i] *= 2 / (hz_points[i + 2] - hz_points[i])\n\n    # Round to 4 decimal places and convert to a list of lists\n    filter_bank = filter_bank.tolist()\n    filter_bank = [[round(w, 4) for w in row] for row in filter_bank]\n\n    return filter_bank\n```\n\nThis script defines the `mel_filterbank` function that constructs a Mel filterbank matrix following the specified requirements. The function handles the conversion between Hz and Mel scales, computes the triangular filters, and normalizes them if needed. The final filterbank is rounded to four decimal places and returned as a list of lists."}
{"task_id": 312, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    \n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n    \n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    \n    n = np.arange(window_len)\n    if symmetric:\n        bh_window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    else:\n        bh_window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n        bh_window = bh_window[:-1]\n    \n    return [round coeff, 4) for coeff in bh_window]\n\n# Example usage:\n# print(blackman_harris(10, symmetric=False))\n# print(blackman_harris(10, symmetric=True))\n```\n\nThis script defines the `blackman_harris` function which generates a Blackman-Harris window of a given length and type (symmetric or periodic). The function handles special cases for window lengths less than or equal to 1 and rounds the window coefficients to four decimal places."}
{"task_id": 313, "completion_id": 0, "completion": "```\npython\nimport math\nimport numpy as np\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    def digamma(x):\n        # Shift x up to a moderate value (e.g., 6) using the recursion \u03c8(x) = \u03c8(x+1) \u2212 1/x\n        result = 0.0\n        while x < 6:\n            result -= 1 / x\n            x += 1\n        # Use the asymptotic expansion for large x\n        result += math.log(x) - 1 / (2 * x) - 1 / (12 * x**2) + 1 / (120 * x**4) - 1 / (252 * x**6)\n        return result\n\n    # Convert gamma to a NumPy array if it isn't already\n    if not isinstance(gamma, np.ndarray):\n        gamma = np.array(gamma)\n    \n    # Calculate the required expectations\n    gamma_dt = gamma[d, t]\n    sum_gamma_d = np.sum(gamma[d, :])\n    \n    # Compute the expectation using the digamma function\n    expectation = digamma(gamma_dt) - digamma(sum_gamma_d)\n    \n    # Return the result rounded to 4 decimal places\n    return round(expectation, 4)\n```\n\nThis script defines the `expected_log_dirichlet` function, which calculates the expected value of the logarithm of a specific component of a Dirichlet-distributed vector using a custom implementation of the digamma function. The function handles the input as either a list of lists or a NumPy array, computes the necessary values, and returns the result rounded to four decimal places."}
{"task_id": 317, "completion_id": 0, "completion": "```\npython\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    # Determine the index for the previous item\n    prev_ix = max(ix - 1, 0)\n    \n    # Extract previous prediction and label\n    prev_prediction, prev_label = params[prev_ix]\n    prev_gold = golds[prev_label]\n    \n    # Extract current prediction and label\n    curr_prediction, curr_label = params[ix]\n    curr_gold = golds[curr_label]\n    \n    # Construct the formatted error report\n    report = (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_prediction}\\n\"\n        f\"\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{prev_gold}\\n\"\n        f\"\\n\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_prediction}\\n\"\n        f\"\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{curr_gold}{warn_str}\\n\"\n        \"----------------------- END DEBUG -----------------------\"\n    )\n    \n    return report\n```\n\nThis script defines the `err_fmt` function, which generates a formatted debug error report based on the provided inputs. The function constructs the report according to the specified format, including headers, previous and current predictions and labels, and an optional warning string."}
{"task_id": 318, "completion_id": 0, "completion": "```\npython\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    weights = np.ones(n_samples) / n_samples\n    ensemble_predictions = np.zeros(X_test.shape[0])\n    alpha_m_list = []\n\n    for m in range(n_estimators):\n        # Initialize variables to track the best stump\n        min_error = float('inf')\n        best_j = None\n        best_t = None\n        best_p = None\n        best_predictions = None\n\n        # Iterate over each feature\n        for j in range(n_features):\n            # Sort the data by the feature values\n            sorted_indices = np.argsort(X_train[:, j])\n            sorted_X = X_train[sorted_indices, j]\n            sorted_y = y_train[sorted_indices]\n            sorted_weights = weights[sorted_indices]\n\n            # Try all possible thresholds\n            for i in range(n_samples):\n                for p in [-1, 1]:\n                    threshold = (sorted_X[i - 1] + sorted_X[i]) / 2.0 if i > 0 else float('-inf')\n                    predictions = np.ones(n_samples) * p\n                    predictions[sorted_X <= threshold] = -p\n\n                    # Calculate the weighted error for this stump\n                    error = np.sum(sorted_weights * (sorted_y != predictions))\n                    if error > 0.5:\n                        error = 1 - error\n\n                    # Update the best stump if this one has less error\n                    if error < min_error:\n                        min_error = error\n                        best_j = j\n                        best_t = threshold\n                        best_p = p\n                        best_predictions = predictions.copy()\n\n        # Calculate alpha_m\n        error_m = min_error\n        if error_m == 0:\n            error_m = 1e-10  # Avoid division by zero\n        alpha_m = 0.5 * math.log((1 - error_m) / error_m)\n        alpha_m_list.append(alpha_m)\n\n        # Update the ensemble predictions for the test set\n        if best_predictions is not None:\n            ensemble_predictions += alpha_m * (np.where(X_test[:, best_j] > best_t, best_p, -best_p))\n\n        # Update the weights for the next iteration\n        weights *= np.exp(-alpha_m * y_train * best_predictions)\n        weights /= np.sum(weights)\n\n    # Make final predictions using the sign of the weighted sum of all stump predictions\n    final_predictions = np.sign(ensemble_predictions).astype(int)\n    return final_predictions.tolist()\n```\n\nThis code implements the AdaBoost.M1 algorithm using decision stumps as weak learners. It trains the model on the provided training data and predicts the labels of the test data. The final predictions are returned as a list of integers, either -1 or 1."}
{"task_id": 329, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n\n    # Calculate the frequency resolution\n    delta_f = fs / N\n\n    if positive_only:\n        # Return non-negative frequencies\n        frequencies = np.linspace(0, (N // 2) * delta_f, N // 2 + 1)\n    else:\n        # Return all frequencies as per NumPy's fftfreq\n        frequencies = np.fft.fftfreq(N, d=1/fs)\n\n    # Round the frequencies to 4 decimal places and convert to list\n    return [round(freq, 4) for freq in frequencies.tolist()]\n\n# Example usage:\n# print(dft_bins(8, fs=8000, positive_only=True))\n# print(dft_bins(8, fs=8000, positive_only=False))\n```\n\nThis script defines the `dft_bins` function as specified, which calculates the center frequency of each DFT bin based on the given parameters. It handles both the positive-only and full-list modes as required, and returns the frequencies rounded to four decimal places. If `N` or `fs` is non-positive, it returns an empty list."}
{"task_id": 331, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    \n    n_samples = y_true.shape[0]\n    \n    # Initialize list to store OOB predictions for each sample\n    oob_predictions = [None] * n_samples\n    \n    # Iterate over each sample\n    for i in range(n_samples):\n        # Get the OOB predictions for the i-th sample\n        sample_oob_mask = oob_mask[i]\n        oob_preds = predictions[i][sample_oob_mask]\n        \n        # If there are OOB predictions, average them\n        if oob_preds.size > 0:\n            oob_predictions[i] = np.mean(oob_preds)\n    \n    # Filter out samples that have at least one OOB prediction\n    valid_oob_predictions = [pred for pred in oob_predictions if pred is not None]\n    valid_y_true = [y_true[i] for i, pred in enumerate(oob_predictions) if pred is not None]\n    \n    # If no sample has an OOB prediction, return -1\n    if not valid_oob_predictions:\n        return -1\n    \n    # Calculate the squared errors\n    squared_errors = [(y - pred) ** 2 for y, pred in zip(valid_y_true, valid_oob_predictions)]\n    \n    # Compute the mean of the squared errors\n    oob_mse_value = np.mean(squared_errors)\n    \n    # Return the OOB-MSE rounded to 4 decimal places\n    return round(oob_mse_value, 4)\n\n# Example usage:\n# y_true = [3, -0.5, 2, 7]\n# predictions = [[2.5, 3.1, 2.8], [0.0, -0.5, 1.2], [1.8, 2.0, 2.1], [7.2, 7.4, 7.1]]\n# oob_mask = [[1, 1, 0], [0, 1, 1], [1, 0, 1], [0, 0, 0]]\n# print(oob_mse(y_true, predictions, oob_mask))  # Output should be 0.0400\n```\n\nThis script defines the `oob_mse` function which computes the out-of-bag mean squared error for a Random Forest regressor given the true target values, predictions from each tree, and a mask indicating which predictions are out-of-bag. The function handles cases where no samples have out-of-bag predictions by returning -1."}
{"task_id": 332, "completion_id": 0, "completion": "```\npython\nfrom collections import Counter\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    # Step 1: Compute support for every item\n    item_support = Counter()\n    for transaction in transactions:\n        for item in set(transaction):  # Remove duplicates in the transaction\n            item_support[item] += 1\n    \n    # Step 2: Discard items with support less than min_support\n    frequent_items = {item: support for item, support in item_support.items() if support >= min_support}\n    \n    # Step 3: Create global ordering of frequent items\n    # First by decreasing support, then alphabetically\n    sorted_items = sorted(frequent_items, key=lambda x: (-frequent_items[x], x))\n    \n    # Step 4: Build the FP-Tree\n    root = {\"support\": 0, \"children\": {}}\n    \n    for transaction in transactions:\n        # Remove duplicates and keep only frequent items\n        filtered_transaction = [item for item in set(transaction) if item in frequent_items]\n        # Reorder items according to the global ordering\n        filtered_transaction.sort(key=lambda x: sorted_items.index(x))\n        \n        # Walk the tree, updating/extending the path\n        node = root\n        for item in filtered_transaction:\n            if item not in node['children']:\n                node['children'][item] = {\"support\": 0, \"children\": {}}\n            node = node['children'][item]\n            node['support'] += 1\n    \n    return root\n\n# Example usage:\ntransactions = [\n    ['a', 'b', 'c'],\n    ['a', 'b', 'd'],\n    ['b', 'c', 'e'],\n    ['a', 'b', 'c', 'e'],\n    ['a', 'b', 'c', 'f']\n]\nmin_support = 2\nfp_tree = build_fp_tree(transactions, min_support)\nprint(fp_tree)\n```\n\nThis script defines a function `build_fp_tree` that constructs an FP-Tree from a list of transactions and a minimum support threshold. The tree is represented as a nested dictionary, and the function follows the steps outlined in the task description. The example usage at the end demonstrates how to call the function and print the resulting FP-Tree."}
{"task_id": 336, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", Y: list[list[int | float]] | \"np.ndarray\" | None = None, c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    # Convert X and Y to NumPy arrays for easier manipulation\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    \n    # Check if the number of columns in X and Y are the same\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # Compute the kernel matrix\n    K = np.dot(X, Y.T) + c0\n    \n    # Round the results to 4 decimal places and convert to list of lists\n    K_rounded = np.round(K, 4).tolist()\n    \n    return K_rounded\n\n# Example usage:\n# X = [[1, 2], [3, 4]]\n# Y = [[5, 6], [7, 8]]\n# print(linear_kernel(X, Y))  # Output: [[17.0, 23.0], [41.0, 53.0]]\n```\n\nThis script defines the `linear_kernel` function, which computes the linear kernel matrix between two collections of input vectors `X` and `Y`. The function handles both Python lists and NumPy arrays, checks for compatibility in the number of columns, and returns the kernel matrix rounded to four decimal places. If the input dimensions are incompatible, it returns `-1`."}
{"task_id": 340, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n\n    # Update biased first moment estimate\n    m_t = beta1 * m + (1 - beta1) * grad\n    \n    # Update biased second raw moment estimate\n    v_t = beta2 * v + (1 - beta2) * grad**2\n    \n    # Compute bias-corrected first moment estimate\n    m_hat_t = m_t / (1 - beta1**t)\n    \n    # Compute bias-corrected second raw moment estimate\n    v_hat_t = v_t / (1 - beta2**t)\n    \n    # Update the parameter\n    param_prime = param - lr * m_hat_t / (np.sqrt(v_hat_t) + eps)\n    \n    # Return the updated parameter and moment estimates as lists rounded to 8 decimal places\n    return (param_prime.tolist(), m_t.tolist(), v_t.tolist())\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Initialize parameters\n    theta = np.array([0.0, 0.0])\n    gradient = np.array([0.1, 0.2])\n    time_step = 1\n    first_moment = np.array([0.0, 0.0])\n    second_moment = np.array([0.0, 0.0])\n    \n    # Perform a single Adam update\n    updated_theta, new_m, new_v = adam_update(theta, gradient, time_step, first_moment, second_moment)\n    print(\"Updated parameter:\", updated_theta)\n    print(\"New first moment:\", new_m)\n    print(\"New second moment:\", new_v)\n```\n\nThis script defines the `adam_update` function which performs a single step of the Adam optimization algorithm. It updates the parameters, first moment estimates, and second moment estimates according to the provided Adam update rules. The results are returned as Python lists rounded to 8 decimal places."}
{"task_id": 343, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                          rewards: list[float] | np.ndarray,\n                          retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # Determine the number of samples to retain\n    N = len(theta_samples)\n    num_retain = int(retain_prcnt * N)\n    \n    # Get the indices of the top `num_retain` rewards\n    elite_indices = np.argsort(rewards)[-num_retain:]\n    \n    # Retain the top samples\n    elite_samples = theta_samples[elite_indices]\n    \n    # Compute the mean and variance of the retained samples\n    mean = np.mean(elite_samples, axis=0)\n    variance = np.var(elite_samples, axis=0)\n    \n    # Round the results to four decimal places\n    mean_rounded = [round(m, 4) for m in mean]\n    variance_rounded = [round(v, 4) for v in variance]\n    \n    return mean_rounded, variance_rounded\n```\n\nThis script defines the `cross_entropy_update` function, which performs the required operations to update the policy parameters using the Cross-Entropy Method. It retains the top `retain_prcnt` fraction of the samples based on their rewards, computes the mean and variance of these samples, and returns these statistics rounded to four decimal places."}
{"task_id": 353, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    \n    label_counts = Counter(labels)\n    total_count = len(labels)\n    probabilities = [count / total_count for count in label_counts.values()]\n    \n    # Calculate entropy\n    entropy_value = -sum(p * math.log2(p) if p > 0 else 0 for p in probabilities)\n    \n    return round(entropy_value, 5)\n\n# Example usage:\n# print(entropy([1, 1, 1, 2, 2, 2, 3]))  # Should return 1.58496\n# print(entropy([1, 1, 1, 1]))           # Should return 0.0\n# print(entropy([]))                     # Should return 0.0\n# print(entropy(['a', 'b', 'a', 'b']))   # Should return 1.0\n```\n\nThis script defines the `entropy` function which calculates the Shannon entropy of a given sequence of class labels. It handles the special cases of empty input and identical labels, and rounds the result to five decimal places."}
{"task_id": 354, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kernel_rows, kernel_cols, _, out_ch = W.shape\n    \n    # Handle padding\n    if isinstance(pad, int):\n        pad = (pad, pad, pad, pad)\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pad = (pad[0], pad[0], pad[1], pad[1])\n    elif isinstance(pad, tuple) and len(pad) == 4:\n        pass  # pad is already in the correct form\n    elif pad == 'same':\n        pr1 = (in_rows * (stride - 1) + kernel_rows - stride) // 2\n        pc1 = (in_cols * (stride - 1) + kernel_cols - stride) // 2\n        pr2 = (in_rows * (stride - 1) + kernel_rows - stride - 1) // 2\n        pc2 = (in_cols * (stride - 1) + kernel_cols - stride - 1) // 2\n        pad = (pr1, pr2, pc1, pc2)\n    else:\n        pad = (0, 0, 0, 0)  # Default to no padding if pad is invalid\n\n    # Apply padding\n    X_padded = np.pad(X, ((0, 0), (pad[0], pad[1]), (pad[2], pad[3]), (0, 0)), mode='constant')\n\n    # Compute output dimensions\n    out_rows = (in_rows + pad[0] + pad[1] - ((kernel_rows - 1) * dilation + 1)) // stride + 1\n    out_cols = (in_cols + pad[2] + pad[3] - ((kernel_cols - 1) * dilation + 1)) // stride + 1\n\n    # Perform im2col\n    X_col = np.zeros((kernel_rows * kernel_cols * in_ch, out_rows * out_cols * n_ex))\n    for ex in range(n_ex):\n        for row in range(out_rows):\n            for col in range(out_cols):\n                r_start = row * stride\n                c_start = col * stride\n                r_end = r_start + kernel_rows * (dilation + 1)\n                c_end = c_start + kernel_cols * (dilation + 1)\n                indices = (slice(r_start, r_end, dilation + 1), slice(c_start, c_end, dilation + 1), slice(None))\n                X_col[:, row * out_cols + col + ex * out_rows * out_cols] = X_padded[ex, indices].flatten()\n\n    # Reshape weights for gemm\n    W_flat = W.reshape(kernel_rows * kernel_cols * in_ch, out_ch)\n\n    # Perform gemm\n    out_col = W_flat @ X_col\n\n    # Reshape output\n    out = out_col.reshape(out_ch, out_rows, out_cols, n_ex).transpose(3, 1, 2, 0)\n\n    return out.tolist()\n\n# Example usage:\n# X = np.random.randn(2, 5, 5, 3)\n# W = np.random.randn(3, 3, 3, 2)\n# result = conv2D(X, W, stride=1, pad='same')\n# print(result)\n```\n\nThis script defines the `conv2D` function, which performs 2-D convolution using the `im2col` method combined with a GEMM (General Matrix Multiplication) operation. The function handles different padding specifications and dilation factors, and returns the result as a Python list."}
{"task_id": 355, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # Step 1: Standardise the data by subtracting the feature-wise mean\n    mean = np.mean(data, axis=0)\n    centred_data = data - mean\n    \n    # Step 2: Obtain the principal directions using the chosen solver\n    if solver == \"svd\":\n        U, S, VT = np.linalg.svd(centred_data, full_matrices=False)\n        eigen_vectors = VT.T\n        explained_variance = S ** 2 / (centred_data.shape[0] - 1)\n    elif solver == \"eigen\":\n        cov_matrix = np.cov(centred_data, rowvar=False, ddof=1)\n        eigen_values, eigen_vectors = np.linalg.eigh(cov_matrix)\n        explained_variance = eigen_values\n    else:\n        raise ValueError(\"Solver must be either 'svd' or 'eigen'.\")\n    \n    # Step 3: Sort the directions in descending order of their importance\n    sorted_indices = np.argsort(explained_variance)[::-1]\n    eigen_vectors = eigen_vectors[:, sorted_indices]\n    explained_variance = explained_variance[sorted_indices]\n    \n    # Step 4: Keep the first n_components directions\n    n_components = min(n_components, eigen_vectors.shape[1])\n    eigen_vectors = eigen_vectors[:, :n_components]\n    explained_variance = explained_variance[:n_components]\n    \n    # Step 5: Make the sign of every kept direction deterministic\n    for i in range(n_components):\n        first_non_zero_index = np.where(eigen_vectors[:, i] != 0)[0][0]\n        if eigen_vectors[first_non_zero_index, i] < 0:\n            eigen_vectors[:, i] *= -1\n    \n    # Step 6: Project the centred data onto the retained directions\n    scores = centred_data @ eigen_vectors\n    \n    # Step 7: Calculate the explained variance ratio\n    total_variance = np.sum(explained_variance)\n    explained_variance_ratio = explained_variance / total_variance\n    \n    # Step 8: Round the final results\n    scores_rounded = scores.round(4).tolist()\n    explained_variance_ratio_rounded = explained_variance_ratio.round(4).tolist()\n    \n    return scores_rounded, explained_variance_ratio_rounded\n```"}
{"task_id": 356, "completion_id": 0, "completion": "```\npython\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # For classification, return the index of the maximum probability\n        return int(np.argmax(leaf.value))\n    else:\n        # For regression, return the scalar value\n        return leaf.value\n\n# Example usage:\n# Classification leaf\nleaf_class = Leaf([0.1, 0.2, 0.7])\nprint(leaf_predict(leaf_class, classifier=True))  # Output: 2\n\n# Regression leaf\nleaf_reg = Leaf(3.5)\nprint(leaf_predict(leaf_reg, classifier=False))   # Output: 3.5\n```\n\nPlease note that the example usage includes the import of `numpy` for `np.argmax`. If you are running this script, make sure to import `numpy` at the beginning:\n\n```python\nimport numpy as np\n```"}
{"task_id": 357, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    # Initialize centroids with the first K samples\n    centroids = data[:K].copy()\n    tolerance = 1e-6\n    n_samples, n_features = data.shape\n    \n    for _ in range(max_iters):\n        # Assign each sample to the nearest centroid\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Recompute centroids\n        new_centroids = np.zeros((K, n_features))\n        for k in range(K):\n            if np.any(labels == k):\n                new_centroids[k] = np.mean(data[labels == k], axis=0)\n            else:\n                new_centroids[k] = centroids[k]\n        \n        # Check for convergence\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < tolerance):\n            break\n        \n        centroids = new_centroids\n    \n    # Sort centroids lexicographically and round to four decimals\n    centroids = np.round(np.sort(centroids, axis=0), 4).tolist()\n    \n    return centroids\n\n# Example usage\ndata = np.array([[1, 1],\n                 [1, 2],\n                 [2, 1],\n                 [8, 8],\n                 [9, 8],\n                 [8, 9]])\nK = 2\nprint(kmeans(data, K))  # Output: [[1.3333, 1.3333], [8.3333, 8.3333]]\n```"}
{"task_id": 362, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | \"np.ndarray\") -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert input to a float NumPy array\n    matrix = np.array(data, dtype=float)\n    \n    # Compute the sum of each row\n    row_sums = matrix.sum(axis=1)\n    \n    # Check if any row sum is zero\n    if np.any(row_sums == 0):\n        return -1\n    \n    # Normalise each row by dividing by the row sum\n    stochastic_matrix = matrix / row_sums[:, np.newaxis]\n    \n    # Round the result to 4 decimal places\n    stochastic_matrix_rounded = np.round(stochastic_matrix, 4)\n    \n    # Convert the result to a native Python list\n    return stochastic_matrix_rounded.tolist()\n```\n\nThis script defines the `row_stochastic_matrix` function, which takes a 2-D list or NumPy array as input, converts it to a row-stochastic matrix if possible, and returns the result as a Python list of lists rounded to four decimal places. If any row sums to zero, the function returns `-1`."}
{"task_id": 363, "completion_id": 0, "completion": "```\npython\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    \n    def is_space_continuous(space: Space, is_tuple: bool) -> bool:\n        if is_tuple:\n            if isinstance(space, Tuple):\n                return all(isinstance(sub_space, Box) for sub_space in space.spaces)\n            elif isinstance(space, Dict):\n                return all(isinstance(sub_space, Box) for sub_space in space.spaces.values())\n            else:\n                return False\n        else:\n            return isinstance(space, Box)\n    \n    cont_action = is_space_continuous(env.action_space, tuple_action)\n    cont_obs = is_space_continuous(env.observation_space, tuple_obs)\n    \n    return (cont_action, cont_obs)\n```\n\nThis script defines the necessary classes and the `is_continuous` function, which checks the continuity of the action and observation spaces based on the given flags. The function `is_space_continuous` is a helper function used to determine if a given space is continuous, considering whether it is a composite space or not."}
{"task_id": 369, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    # Initialize running prediction with zeros of the same shape as the first update\n    running_pred = np.zeros_like(updates[0])\n    \n    # Aggregate the updates\n    for u in updates:\n        running_pred -= learning_rate * u\n    \n    if regression:\n        # For regression, return the running prediction rounded to 4 decimals\n        return np.round(running_pred, 4)\n    else:\n        # For classification, apply softmax and return the class indices\n        softmax_pred = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        softmax_pred /= np.sum(softmax_pred, axis=1, keepdims=True)\n        return np.argmax(softmax_pred, axis=1)\n\n# Example usage:\n# For regression\n# updates_reg = [np.array([0.1, 0.2, 0.3]), np.array([0.05, 0.1, 0.15])]\n# learning_rate_reg = 0.1\n# print(gradient_boosting_predict(updates_reg, learning_rate_reg, regression=True))\n\n# For classification\n# updates_clf = [np.array([[1.0, 2.0, 3.0], [3.0, 2.0, 1.0]]), np.array([[0.1, 0.2, 0.3], [0.3, 0.2, 0.1]])]\n# learning_rate_clf = 0.1\n# print(gradient_boosting_predict(updates_clf, learning_rate_clf, regression=False))\n```\n\nThis script defines the `gradient_boosting_predict` function as specified, handling both regression and multi-class classification tasks using NumPy operations for efficient computation. The function is fully vectorized and does not use any explicit loops over individual samples."}
{"task_id": 371, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, in_channels_W, out_channels = W.shape\n\n    # Effective kernel width considering dilation\n    effective_kernel_width = (kernel_width - 1) * dilation + 1\n\n    # Determine padding\n    if isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple):\n        p_left, p_right = pad\n    elif pad == \"same\":\n        out_len = np.ceil(signal_length / stride).astype(int)\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel_width - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    else:\n        raise ValueError(\"Invalid padding argument. Must be an int, tuple, or 'same'.\")\n\n    # Pad the input signals\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n\n    # Calculate output length\n    output_length = (X_padded.shape[1] - effective_kernel_width) // stride + 1\n\n    # Initialize the output volume\n    Y = np.zeros((n_examples, output_length, out_channels))\n\n    # Perform convolution\n    for example in range(n_examples):\n        for out_ch in range(out_channels):\n            for i in range(output_length):\n                # Calculate the start and end indices of the slice\n                start = i * stride\n                end = start + effective_kernel_width\n\n                # Extract the slice from the padded input\n                x_slice = X_padded[example, start:end:1+dilation, :]\n\n                # Perform the cross-correlation\n                Y[example, i, out_ch] = np.sum(x_slice * W[:, :, out_ch])\n\n    return Y.tolist()\n\n# Example usage:\n# X = np.random.rand(2, 10, 3)  # 2 examples, 10 signal length, 3 input channels\n# W = np.random.rand(4, 3, 2)  # 4 kernel width, 3 input channels, 2 output channels\n# result = conv1D(X, W, stride=2, pad='same', dilation=1)\n# print(result)\n```\n\nThis script defines the `conv1D` function that performs 1-D cross-correlation with support for batches, multiple input/output channels, padding (as an integer, tuple, or \"same\"), arbitrary stride, and dilation. The function returns the result as a nested Python list."}
{"task_id": 373, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gini(y: list[int] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if not y:\n        return 0.0\n    \n    # Convert input to a numpy array if it's not already\n    y = np.array(y)\n    \n    # Calculate the number of samples\n    N = len(y)\n    \n    # Calculate the unique classes and their counts\n    unique_classes, class_counts = np.unique(y, return_counts=True)\n    \n    # Calculate the probabilities of each class\n    probabilities = class_counts / N\n    \n    # Calculate the Gini impurity\n    gini_impurity = 1 - np.sum(probabilities ** 2)\n    \n    # Return the Gini impurity rounded to 4 decimal places\n    return round(gini_impurity, 4)\n\n# Example usage:\n# labels = [1, 1, 0, 1, 0, 1]\n# print(gini(labels))  # Output should be 0.4167\n```"}
{"task_id": 374, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\"\"\"\n    # Check if the number of samples in X and y are consistent\n    if X.shape[0] != y.shape[0]:\n        return -1\n    \n    # Initialize parameters\n    m, n = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n    \n    # Perform gradient descent\n    for _ in range(n_iterations):\n        # Calculate predictions\n        y_pred = X @ theta + b\n        \n        # Calculate errors\n        error = y_pred - y\n        \n        # Calculate gradients\n        dw = (2 / m) * X.T @ error\n        db = (2 / m) * np.sum(error)\n        \n        # Update parameters\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    \n    # Return learned parameters rounded to 4 decimal places\n    return [round(weight, 4) for weight in theta], round(b, 4)\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4]])\n# y = np.array([2, 3, 4])\n# weights, bias = linear_regression_gd(X, y, learning_rate=0.01, n_iterations=10000)\n# print(\"Weights:\", weights)\n# print(\"Bias:\", bias)\n```\n\nThis script defines a function `linear_regression_gd` that trains a multiple linear regression model using batch gradient descent. It checks for data consistency, initializes the parameters, and iteratively updates them using the gradient descent algorithm. The learned parameters are returned as a tuple, with all values rounded to four decimal places."}
{"task_id": 376, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Convert the list of lists to a NumPy array\n    np_array = np.array(X)\n    \n    # Check if the matrix is square\n    if np_array.shape[0] != np_array.shape[1]:\n        return False\n    \n    # Check if the matrix is equal to its transpose\n    return np.allclose(np_array, np_array.T, atol=1e-8)\n\n# Example usage:\n# symmetric_matrix = [[1, 2, 3], [2, 5, 6], [3, 6, 9]]\n# print(is_symmetric(symmetric_matrix))  # Output: True\n\n# non_symmetric_matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n# print(is_symmetric(non_symmetric_matrix))  # Output: False\n```\n\nThis script defines a function `is_symmetric` that checks if a given 2-D numeric array (represented as a list of lists) is symmetric with respect to its main diagonal. The function uses NumPy to handle the array operations and checks for symmetry using `np.allclose` to account for potential floating-point precision issues."}
{"task_id": 377, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Calculate the negative gradient of the logistic loss for Gradient Boosting.\n    \n    Parameters:\n    y (list): Binary class labels (0 or 1).\n    f (list): Current prediction scores (floats).\n    \n    Returns:\n    list: Negative gradients rounded to four decimal places, or -1 if y contains invalid values.\n    \"\"\"\n    # Check if y contains only 0 or 1\n    if not all(label in [0, 1] for label in y):\n        return -1\n    \n    # Convert y to the set {-1, 1}\n    y_prime = [2 * label - 1 for label in y]\n    \n    # Calculate the negative gradients\n    g = [round(y_prime_i / (1 + np.exp(y_prime_i * f_i)), 4) for y_prime_i, f_i in zip(y_prime, f)]\n    \n    return g\n\n# Example usage:\n# y = [0, 1, 0, 1]\n# f = [-1.5, 0.3, 2.1, -0.7]\n# print(logistic_negative_gradient(y, f))\n```\n\nThis script defines the `logistic_negative_gradient` function, which calculates the negative gradient of the logistic loss for Gradient Boosting. It first checks if the labels in `y` are valid (either 0 or 1). Then, it converts the labels to the set \\(\\{-1, 1\\}\\) and computes the negative gradients using the provided formula. The results are rounded to four decimal places before being returned. If the labels are invalid, the function returns -1."}
{"task_id": 380, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already\n    x = np.array(x, dtype=float)\n    \n    # Constants\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n    \n    if order == 0:  # SELU(x)\n        selu_x = scale * np.where(x > 0, x, alpha * (np.exp(x) - 1))\n    elif order == 1:  # First derivative\n        selu_x = scale * np.where(x > 0, 1, alpha * np.exp(x))\n    elif order == 2:  # Second derivative\n        selu_x = scale * np.where(x > 0, 0, alpha * np.exp(x))\n    else:\n        raise ValueError(\"Order must be 0, 1, or 2.\")\n    \n    # Round to 4 decimal places and convert to list\n    result = np.round(selu_x, 4).tolist()\n    \n    return result\n\n# Example usage:\n# print(selu(0))  # SELU(0)\n# print(selu(1, order=1))  # First derivative at x=1\n# print(selu(-1, order=2))  # Second derivative at x=-1\n```\n\nThis script defines the `selu` function which computes the SELU activation and its first and second derivatives based on the `order` parameter. The function handles scalar, 1-D, and multi-D inputs and returns the results as lists with values rounded to four decimal places."}
{"task_id": 387, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Initialize predictions with the mean of the target values\n    y_pred = np.full_like(y, y.mean())\n    \n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y - y_pred\n        \n        # Sort the indices by the feature x\n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        sorted_residuals = residuals[sorted_indices]\n        \n        best_split = None\n        best_mse = float('inf')\n        \n        # Evaluate all possible splits\n        for i in range(len(sorted_x) - 1):\n            if sorted_x[i] == sorted_x[i + 1]:\n                continue\n            \n            # Calculate the mean of residuals for left and right partitions\n            split = (sorted_x[i] + sorted_x[i + 1]) / 2\n            left_partition = sorted_residuals[sorted_x <= split]\n            right_partition = sorted_residuals[sorted_x > split]\n            \n            left_mean = left_partition.mean() if left_partition.size > 0 else 0\n            right_mean = right_partition.mean() if right_partition.size > 0 else 0\n            \n            # Calculate the MSE for this split\n            left_mse = ((left_partition - left_mean) ** 2).sum()\n            right_mse = ((right_partition - right_mean) ** 2).sum()\n            mse = left_mse + right_mse\n            \n            # Update the best split if this one is better\n            if mse < best_mse:\n                best_mse = mse\n                best_split = split\n        \n        # If no valid split is found, predict the global mean residual\n        if best_split is None:\n            stump_pred = np.full_like(y, residuals.mean())\n        else:\n            stump_pred = np.where(x <= best_split, residuals[sorted_indices][sorted_x <= best_split].mean(), \n                                  residuals[sorted_indices][sorted_x > best_split].mean())\n        \n        # Update the running prediction\n        y_pred += learning_rate * stump_pred\n    \n    return np.round(y_pred, 4).tolist()\n```\n\nThis script implements a 1D Gradient Boosting Regressor using decision stumps. It initializes the predictions to the mean of the target values and iteratively improves these predictions by fitting stumps to the residuals. The stumps split the data based on a single feature, choosing the split point that minimizes the sum of squared residuals. The learning rate is used to shrink the contribution of each stump. The final predictions are rounded to four decimal places and returned as a list."}
{"task_id": 394, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    # Initialize Eg if it is None\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    \n    # Update the running average of squared gradients\n    Eg_next = rho * Eg + (1 - rho) * np.square(grad)\n    \n    # Update the parameters\n    w_next = w - learning_rate * grad / (np.sqrt(Eg_next) + 1e-8)\n    \n    # Round and convert to regular Python lists\n    w_next_rounded = np.round(w_next, 4).tolist()\n    Eg_next_rounded = np.round(Eg_next, 4).tolist()\n    \n    return w_next_rounded, Eg_next_rounded\n\n# Example usage:\n# w = np.array([1.0, 2.0])\n# grad = np.array([0.1, 0.2])\n# Eg = None\n# updated_params, new_Eg = rmsprop_update(w, grad, Eg)\n# print(\"Updated Parameters:\", updated_params)\n# print(\"New Running Average:\", new_Eg)\n```\n\nThis script defines the `rmsprop_update` function, which performs a single update step of the RMSprop optimizer. It handles initialization of the running average of squared gradients, updates the parameters and the running average, and returns both as Python lists rounded to four decimal places."}
{"task_id": 398, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)  # Ensure x is a NumPy array for element-wise operations\n    if derivative:\n        # Compute the gradient of ELU\n        gradient = np.where(x >= 0, 1, elu(x, alpha) + alpha)\n        return [round(val, 4) for val in gradient]\n    else:\n        # Compute the ELU activation\n        activation = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n        return [round(val, 4) for val in activation]\n\n# Example usage:\n# print(elu([1, -1, 0.5, -0.5]))  # Compute ELU activation\n# print(elu([1, -1, 0.5, -0.5], derivative=True))  # Compute ELU gradient\n```\n\nThis script defines the `elu` function, which computes either the Exponential Linear Unit (ELU) activation or its gradient for a given input `x`, `alpha`, and `derivative` flag. The results are rounded to four decimal places and returned as a Python list."}
{"task_id": 411, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    \n    def analyze(data):\n        tuple_data = any(isinstance(x, (list, tuple, np.ndarray)) for x in data)\n        if tuple_data:\n            data = [np.array(x) if not isinstance(x, np.ndarray) else x for x in data]\n            multidim = (len(data[0].shape) > 1) or (data[0].size > 1)\n            dim = data[0].size if not multidim else data[0].shape[0]\n        else:\n            multidim = False\n            dim = 1\n        \n        continuous = any(isinstance(x, float) and not x.is_integer() for x in np.ravel(data))\n        \n        if multidim:\n            unique_ids_per_dim = [sorted(set(data[:, i])) for i in range(dim)]\n            n_per_dim = [len(ids) for ids in unique_ids_per_dim]\n        else:\n            unique_ids_per_dim = [sorted(set(data))]\n            n_per_dim = [len(unique_ids_per_dim[0])]\n        \n        return {\n            'tuple': tuple_data,\n            'multidim': multidim,\n            'continuous': continuous,\n            'n_per_dim': n_per_dim,\n            'dim': dim,\n            'ids': unique_ids_per_dim\n        }\n    \n    action_stats = analyze(np.array(actions))\n    observation_stats = analyze(np.array(observations))\n    \n    result = {\n        'tuple_actions': action_stats['tuple'],\n        'tuple_observations': observation_stats['tuple'],\n        'multidim_actions': action_stats['multidim'],\n        'multidim_observations': observation_stats['multidim'],\n        'continuous_actions': action_stats['continuous'],\n        'continuous_observations': observation_stats['continuous'],\n        'n_actions_per_dim': action_stats['n_per_dim'],\n        'action_dim': action_stats['dim'],\n        'n_obs_per_dim': observation_stats['n_per_dim'],\n        'obs_dim': observation_stats['dim'],\n        'action_ids': action_stats['ids'],\n        'obs_ids': observation_stats['ids']\n    }\n    \n    return result\n\n# Example usage:\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]\nprint(env_stats(actions, observations))\n```\n\nThis script defines the `env_stats` function, which computes and returns a dictionary with the required statistics for a given list of actions and observations. The function first defines a helper function `analyze` to handle the common logic for both actions and observations, and then uses it to populate the result dictionary."}
{"task_id": 413, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that implements the Simplified Gradient Boosting Regression Trees as described:\n\n```python\nimport numpy as np\n\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    \n    def mean_squared_error(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n    \n    def best_split(X, y):\n        min_mse = np.inf\n        best_feature = None\n        best_threshold = None\n        for feature_idx in range(X.shape[1]):\n            thresholds = np.unique(X[:, feature_idx])\n            for threshold in thresholds:\n                y_left = y[X[:, feature_idx] <= threshold]\n                y_right = y[X[:, feature_idx] > threshold]\n                mse_left = mean_squared_error(y_left, np.mean(y_left)) if y_left.size > 0 else 0\n                mse_right = mean_squared_error(y_right, np.mean(y_right)) if y_right.size > 0 else 0\n                mse = (mse_left * y_left.size + mse_right * y_right.size) / y.size\n                if mse < min_mse:\n                    min_mse = mse\n                    best_feature = feature_idx\n                    best_threshold = threshold\n        return best_feature, best_threshold\n    \n    def build_tree(X, y, depth=0):\n        if depth >= max_depth or len(np.unique(y)) == 1:\n            return np.mean(y)\n        \n        best_feature, best_threshold = best_split(X, y)\n        if best_feature is None or best_threshold is None:\n            return np.mean(y)\n        \n        X_left = X[X[:, best_feature] <= best_threshold]\n        y_left = y[X[:, best_feature] <= best_threshold]\n        X_right = X[X[:, best_feature] > best_threshold]\n        y_right = y[X[:, best_feature] > best_threshold]\n        \n        left_tree = build_tree(X_left, y_left, depth + 1)\n        right_tree = build_tree(X_right, y_right, depth + 1)\n        \n        return (best_feature, best_threshold, left_tree, right_tree)\n    \n    def predict_tree(tree, X):\n        if isinstance(tree, np.float64):\n            return tree\n        feature_idx, threshold, left_tree, right_tree = tree\n        if X[feature_idx] <= threshold:\n            return predict_tree(left_tree, X)\n        else:\n            return predict_tree(right_tree, X)\n    \n    def predict_trees(trees, X):\n        return np.sum([predict_tree(tree, X) for tree in trees], axis=0)\n    \n    # Initialize predictions with mean of y_train\n    F = np.full(y_train.shape, np.mean(y_train))\n    trees = []\n    \n    for _ in range(n_estimators):\n        residuals = y_train - F\n        tree = build_tree(X_train, residuals)\n        trees.append(tree)\n        F += learning_rate * predict_trees([tree], X_train)\n    \n    final_predictions = np.mean(y_train) + learning_rate * predict_trees(trees, X_test)\n    return [round(pred, 4) for pred in final_predictions.tolist()]\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([3, 4, 5, 6])\n# X_test = np.array([[2.5, 3.5]])\n# predictions = gbdt_regression(X_train, y_train, X_test)\n# print(predictions)\n```\n\nThis script defines a simplified Gradient Boosting Decision Tree (GBDT) regressor using NumPy. It includes functions for calculating mean squared error, finding the best split for a tree, building a tree, predicting with a tree, and predicting with multiple trees. The main function `gbdt_regression` initializes the predictions with the mean of the training targets, iteratively builds trees on the residuals, and updates the predictions. The final predictions for the test set are rounded to four decimal places and returned as a list."}
{"task_id": 416, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Calculate the probability density function (PDF) values for each sample in X\n    for a multivariate Gaussian distribution with a given mean and covariance matrix.\n    \n    Parameters:\n    - X: NumPy array of shape (n_samples, n_features) or (n_features,).\n         Each row represents a sample or if one-dimensional, treated as (n_samples, 1).\n    - mean: NumPy array of length n_features, representing the mean vector of the distribution.\n    - cov: NumPy array of shape (n_features, n_features), representing the covariance matrix.\n    \n    Returns:\n    - A Python list of PDF values for each sample in X, rounded to four decimal places.\n    \"\"\"\n    # Ensure X is 2D\n    if X.ndim == 1:\n        X = X.reshape(1, -1)\n    \n    n_samples, d = X.shape\n    det_cov = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    \n    pdf_values = []\n    \n    for sample in X:\n        diff = sample - mean\n        exponent = -0.5 * np.dot(np.dot(diff.T, inv_cov), diff)\n        factor = 1 / math.sqrt(((2 * math.pi) ** d) * det_cov)\n        pdf = factor * math.exp(exponent)\n        pdf_values.append(round(pdf, 4))\n    \n    return pdf_values\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3]])\n# mean = np.array([0, 0])\n# cov = np.array([[1, 0], [0, 1]])\n# print(multivariate_gaussian_pdf(X, mean, cov))\n```\n\nThis script defines a function `multivariate_gaussian_pdf` that calculates the PDF for each sample in the provided dataset `X` given a mean vector and a covariance matrix. The function handles both one-dimensional and two-dimensional arrays for `X` and ensures the result is rounded to four decimal places."}
{"task_id": 419, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    # Add intercept column if required\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n    \n    # Determine dimensions\n    N, M = X.shape\n    \n    # Process prior mean mu\n    if isinstance(mu, (int, float)):\n        mu = np.full(M, mu)\n    else:\n        mu = np.asarray(mu)\n        if len(mu) != M:\n            raise ValueError(\"mu must be a scalar or a vector of length M.\")\n    \n    # Process prior covariance V\n    if V is None:\n        V_inv = np.eye(M)\n    elif isinstance(V, (int, float)):\n        V_inv = np.eye(M) / V\n    elif isinstance(V, np.ndarray) and V.ndim == 1:\n        V_inv = np.diag(1 / np.asarray(V))\n    elif isinstance(V, np.ndarray) and V.ndim == 2:\n        V_inv = np.linalg.inv(np.asarray(V))\n    else:\n        raise ValueError(\"V must be a scalar, a 1-D array, or a 2-D square matrix.\")\n    \n    # Compute posterior parameters\n    Sigma_p_inv = V_inv + X.T @ X\n    Sigma_p = np.linalg.inv(Sigma_p_inv)\n    mu_p = Sigma_p @ (V_inv @ mu + X.T @ y)\n    \n    # Compute MAP predictive mean\n    y_pred = X_new @ mu_p\n    \n    # Round predictions to 4 decimal places and return as a list\n    return [round(pred, 4) for pred in y_pred]\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([3, 7, 11])\n# X_new = np.array([[7, 8]])\n# print(bayesian_linear_regression_pred(X, y, X_new))\n```\n\nThis script implements Bayesian linear regression with a conjugate Gaussian prior and known observation variance. It includes handling for different types of prior means (`mu`) and covariance matrices (`V`), and it optionally adds an intercept column to the design matrices. The predictions are rounded to four decimal places and returned as a regular Python list."}
{"task_id": 423, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculate the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\"\"\"\n    # Check if both lists have the same length\n    if len(actual) != len(predicted):\n        return -1\n    \n    # Check if all elements are non-negative\n    if any(a < 0 for a in actual) or any(p < 0 for p in predicted):\n        return -1\n    \n    # Calculate RMSLE\n    n = len(actual)\n    log_diffs = np.log1p(predicted) - np.log1p(actual)\n    rmsle = np.sqrt(np.mean(log_diffs ** 2))\n    \n    # Return the result rounded to 4 decimal places\n    return round(rmsle, 4)\n\n# Example usage:\n# actual = [3.0, -0.5, 2.0, 7.0]\n# predicted = [2.5, 0.0, 2.0, 8.0]\n# print(root_mean_squared_log_error(actual, predicted))  # Should return -1 due to negative value in actual\n\n# actual = [3.0, 0.5, 2.0, 7.0]\n# predicted = [2.5, 0.8, 2.0, 8.0]\n# print(root_mean_squared_log_error(actual, predicted))  # Should return a valid RMSLE value\n```"}
{"task_id": 428, "completion_id": 0, "completion": "```\npython\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    \n    if symmetric:\n        n = np.arange(0, window_len)\n    else:\n        n = np.arange(0, window_len + 1)[:-1]\n    \n    window = 0.5 - 0.5 * np.cos(2 * math.pi * n / (len(n) - 1))\n    window = np.round(window, 4)\n    \n    return window.tolist()\n\n# Example usage:\n# print(hann(5, symmetric=True))\n# print(hann(5, symmetric=False))\n```\n\nThis script defines the `hann` function as specified, handling both symmetric and periodic window cases, and ensuring the output is rounded to four decimal places. The function also manages special cases for window lengths less than or equal to zero and exactly one."}
{"task_id": 433, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        # Assuming the shape is (out_channels, in_channels, kernel_height, kernel_width)\n        out_channels, in_channels, kernel_height, kernel_width = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        # For other shapes, take the first two dimensions directly\n        fan_in, fan_out = shape[0], shape[1]\n    \n    return float(fan_in), float(fan_out)\n\n# Example usage:\n# shape = (32, 16, 3, 3)  # 2D convolutional kernel\n# print(glorot_fan(shape))  # Output: (144.0, 288.0)\n\n# shape = (10, 20)  # Dense layer\n# print(glorot_fan(shape))  # Output: (10.0, 20.0)\n```\n\nThis script defines the `glorot_fan` function according to the specified rules. It calculates `fan_in` and `fan_out` based on the shape of the weight tensor, considering both 2D convolutional kernels and other types of tensors. The function returns the results as a tuple of floats."}
{"task_id": 435, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]],\n                               y: list[float],\n                               n_estimators: int = 10,\n                               learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    \n    # Special cases\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4)] * len(y)\n    \n    # Initialize the current prediction with the mean of y\n    y_pred = np.full_like(y, np.mean(y))\n    \n    for t in range(n_estimators):\n        # Compute the residuals\n        residuals = y - y_pred\n        \n        # Fit an OLS linear model to predict the residuals\n        X_with_intercept = np.hstack((np.ones((X.shape[0], 1)), X))\n        beta = np.linalg.lstsq(X_with_intercept, residuals, rcond=None)[0]\n        \n        # Obtain the weak-learner prediction\n        h_t = X_with_intercept @ beta\n        \n        # Update the overall prediction\n        y_pred += learning_rate * h_t\n    \n    # Return the final prediction vector rounded to 4 decimal places\n    return [round(val, 4) for val in y_pred]\n```"}
{"task_id": 437, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    \n    # Convert input to numpy array for uniform processing\n    x_array = np.array(x, dtype=float)\n    \n    # Compute the sigmoid function\n    sigma_x = 1 / (1 + np.exp(-x_array))\n    \n    if order == 0:\n        result = sigma_x\n    elif order == 1:\n        result = sigma_x * (1 - sigma_x)\n    elif order == 2:\n        result = sigma_x * (1 - sigma_x) * (1 - 2 * sigma_x)\n    \n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n    \n    # Return the result in the appropriate format\n    if np.isscalar(x):\n        return float(result)\n    else:\n        return result.tolist()\n\n# Example usage:\n# print(sigmoid(0, order=0))  # Output: 0.5\n# print(sigmoid([0, 1, -1], order=1))  # Output: [0.25, 0.1966, 0.1966]\n# print(sigmoid(np.array([[0, 1], [-1, 2]]), order=2))  # Output: [[0.0, -0.0721], [-0.0721, -0.0235]]\n```"}
{"task_id": 438, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    # Convert y to a numpy array if it isn't already\n    y = np.array(y)\n    \n    # Determine the number of classes\n    if num_classes is None:\n        num_classes = max(y) + 1\n    else:\n        if num_classes < max(y) + 1:\n            return -1\n    \n    # Initialize the one-hot encoded matrix\n    one_hot_matrix = np.zeros((y.size, num_classes), dtype=int)\n    \n    # Fill in the one-hot encoded matrix\n    one_hot_matrix[np.arange(y.size), y] = 1\n    \n    # Convert the numpy array to a list of lists and return\n    return one_hot_matrix.tolist()\n\n# Example usage:\n# print(to_categorical([0, 1, 2, 1]))\n# print(to_categorical([0, 1, 2, 1], num_classes=3))\n# print(to_categorical([0, 1, 2, 1], num_classes=2))  # Should return -1\n```\n\nThis script defines the `to_categorical` function, which performs one-hot encoding on a given list or NumPy array of class labels. The function handles the optional `num_classes` parameter, checks for errors, and returns the encoded matrix as a list of lists."}
{"task_id": 439, "completion_id": 0, "completion": "```python\nimport itertools\nfrom collections import defaultdict\n\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    def generate_candidates(itemsets, k):\n        # Join a set with itself and prune infrequent items\n        candidates = set()\n        itemsets = sorted(itemsets)\n        n_items = len(itemsets)\n        for i in range(n_items):\n            for j in range(i + 1, n_items):\n                # Check if all but the last element are the same\n                if itemsets[i][:k - 2] == itemsets[j][:k - 2]:\n                    new_candidate = tuple(sorted(set(itemsets[i]) | set(itemsets[j])))\n                    # Check if all (k-1)-itemsets are in frequent items\n                    if all(tuple(new_candidate[:i] + new_candidate[i+1:]) in itemsets for i in range(k)):\n                        candidates.add(new_candidate)\n        return candidates\n\n    def itemset_support(itemset):\n        return sum(1 for transaction in transactions if set(itemset).issubset(transaction)) / len(transactions)\n\n    # Step 1: Generate 1-itemsets and count support\n    itemsets = [frozenset([item]) for transaction in transactions for item in transaction]\n    itemset_counts = defaultdict(int)\n    for itemset in itemsets:\n        itemset_counts[itemset] += 1\n\n    # Filter out infrequent 1-itemsets\n    min_support_count = min_sup * len(transactions)\n    frequent_itemsets = {itemset for itemset, count in itemset_counts.items() if count >= min_support_count}\n    \n    # Convert frozenset to tuple for further processing\n    frequent_itemsets = {tuple(itemset) for itemset in frequent_itemsets}\n    size_k_updated = frequent_itemsets\n    frequent_itemsets_list = sorted(frequent_itemsets)\n\n    # Step 2: Generate size k-candidates and count support\n    k = 2\n    while size_k_updated:\n        # Generate candidates of size k\n        candidates = generate_candidates(size_k_updated, k)\n        candidates_support = {candidate: itemset_support(candidate) for candidate in candidates}\n        # Filter out infrequent candidates\n        size_k_updated = {candidate for candidate, support in candidates_support.items() if support >= min_sup}\n        # Add frequent itemsets of size k to the result\n        frequent_itemsets_list.extend(sorted(size_k_updated))\n        k += 1\n\n    # Sort the result by length and lexicographically\n    frequent_itemsets_list.sort(key=lambda x: (len(x), x))\n    \n    return frequent_itemsets_list\n\n# Example usage:\ntransactions = [\n    [1, 2, 3, 4],\n    [2, 3, 5],\n    [1, 3, 5],\n    [1, 2, 5],\n    [2, 3]\n]\nmin_sup = 0.3\nprint(apriori_frequent_itemsets(transactions, min_sup))\n```\n\nThis script implements the Apriori algorithm to find all frequent itemsets in a given list of transactions with a specified minimum support threshold. The function `apriori_frequent_itemsets` returns the frequent itemsets ordered by length and lexicographically."}
{"task_id": 440, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    # Convert the predictions to a numpy array for easier manipulation\n    predictions_array = np.array(predictions)\n    \n    # Average the probabilities across the first axis (estimators)\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n    \n    # Round the averaged probabilities to 4 decimal places\n    averaged_probabilities_rounded = np.round(averaged_probabilities, 4)\n    \n    # Get the predicted class for each sample by taking the argmax\n    predicted_classes = np.argmax(averaged_probabilities_rounded, axis=1)\n    \n    # Convert the numpy arrays back to regular python lists\n    averaged_probabilities_rounded_list = averaged_probabilities_rounded.tolist()\n    predicted_classes_list = predicted_classes.tolist()\n    \n    return averaged_probabilities_rounded_list, predicted_classes_list\n\n# Example usage:\n# predictions = [\n#     [[0.2, 0.3, 0.5], [0.6, 0.2, 0.2], [0.1, 0.8, 0.1]],\n#     [[0.1, 0.4, 0.5], [0.5, 0.3, 0.2], [0.2, 0.7, 0.1]],\n#     [[0.3, 0.3, 0.4], [0.7, 0.1, 0.2], [0.3, 0.6, 0.1]]\n# ]\n# averaged_probs, predicted_classes = aggregate_predictions(predictions)\n# print(\"Averaged Probabilities:\", averaged_probs)\n# print(\"Predicted Classes:\", predicted_classes)\n```\n\nThis script defines the `aggregate_predictions` function, which takes a three-level nested list of predictions, averages the probabilities across the estimators, rounds them to four decimal places, and returns both the averaged probabilities and the predicted class indices. The example usage at the bottom demonstrates how to call the function and print the results."}
{"task_id": 444, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    # Convert inputs to NumPy arrays for easier manipulation\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    \n    # Validate feature dimensions\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # Determine the number of features\n    C = X.shape[1]\n    \n    # Validate and determine the scale parameter sigma\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n    elif isinstance(sigma, list):\n        if len(sigma) != C or not all(isinstance(s, (int, float)) and s > 0 for s in sigma):\n            return -1\n    else:\n        return -1\n    \n    # Compute the grid of differences\n    diff = X[:, np.newaxis, :] - Y[np.newaxis, :, :]\n    \n    # Scale the differences\n    if isinstance(sigma, (int, float)):\n        scaled_diff = diff / sigma\n    else:\n        scaled_diff = diff / np.array(sigma)\n    \n    # Compute the squared distances\n    squared_dist = np.sum(scaled_diff ** 2, axis=2)\n    \n    # Compute the RBF kernel matrix\n    kernel_matrix = np.exp(-0.5 * squared_dist)\n    \n    # Round the result to 4 decimal places\n    kernel_matrix_rounded = np.round(kernel_matrix, 4)\n    \n    # Convert the result to a nested list\n    return kernel_matrix_rounded.tolist()\n\n# Example usage\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0\nprint(rbf_kernel(X, Y, sigma))\n```\n\nThis script defines the `rbf_kernel` function, which computes the Radial Basis Function (RBF) kernel matrix according to the specifications provided. It handles input validation, computes the kernel matrix, rounds the values to four decimal places, and returns the result as a nested list. The example usage at the end demonstrates how to call the function with sample inputs."}
{"task_id": 446, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n    \n    # Calculate the entropy of the parent node\n    def entropy(labels):\n        counts = Counter(labels)\n        total = len(labels)\n        return -sum((count / total) * np.log2(count / total) for count in counts.values())\n    \n    # Find the majority label\n    def majority_label(labels):\n        counts = Counter(labels)\n        majority = counts.most_common(1)[0][0]\n        return majority\n    \n    # Initial entropy of the parent node\n    H_parent = entropy(y)\n    best_gain = 0\n    best_feature_index = -1\n    best_threshold = None\n    left_majority_label = None\n    right_majority_label = None\n    \n    # Iterate over each feature\n    for j in range(n_features):\n        # Sort the feature values and corresponding labels\n        sorted_indices = np.argsort(X[:, j])\n        sorted_X = X[sorted_indices, j]\n        sorted_y = y[sorted_indices]\n        \n        # Calculate midpoints between successive distinct sorted values\n        thresholds = [(sorted_X[i] + sorted_X[i + 1]) / 2 for i in range(n_samples - 1) if sorted_X[i] != sorted_X[i + 1]]\n        \n        # Evaluate each threshold\n        for t in thresholds:\n            # Split the labels based on the threshold\n            left_labels = sorted_y[sorted_X < t]\n            right_labels = sorted_y[sorted_X >= t]\n            \n            # Calculate the proportion of samples in each child\n            p_left = len(left_labels) / n_samples\n            p_right = len(right_labels) / n_samples\n            \n            # Calculate the entropy of each child node\n            H_left = entropy(left_labels)\n            H_right = entropy(right_labels)\n            \n            # Calculate the information gain\n            gain = H_parent - (p_left * H_left) - (p_right * H_right)\n            \n            # Update the best split if this one has higher gain\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = round(t, 4)\n                left_majority_label = majority_label(left_labels)\n                right_majority_label = majority_label(right_labels)\n    \n    # If no split can improve information gain\n    if best_gain == 0:\n        majority_label_val = majority_label(y)\n        return (-1, None, majority_label_val, majority_label_val)\n    \n    return (best_feature_index, best_threshold, left_majority_label, right_majority_label)\n```\n\nThis script defines the `decision_stump` function, which calculates the best single-level split for a decision tree based on information gain. The function handles tie-breaking rules and returns the appropriate tuple based on the conditions specified."}
{"task_id": 452, "completion_id": 0, "completion": "```\nimport numpy as np\nfrom typing import List\n\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    # Convert X to a NumPy array if it isn't already\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    \n    # Determine if the threshold is numeric\n    is_numeric = isinstance(threshold, (int, float))\n    \n    # Initialize the subsets\n    subset1 = []\n    subset2 = []\n    \n    # Iterate over each sample in X\n    for sample in X:\n        feature_value = sample[feature_i]\n        if (is_numeric and feature_value >= threshold) or (not is_numeric and feature_value == threshold):\n            subset1.append(sample.tolist())\n        else:\n            subset2.append(sample.tolist())\n    \n    return [subset1, subset2]\n\n# Example usage:\nX_numeric = np.array([[1, 5], [3, 2], [4, 6], [2, 1]])\nfeature_i_numeric = 0\nthreshold_numeric = 3\nprint(divide_on_feature(X_numeric, feature_i_numeric, threshold_numeric))\n# Output: [[[3, 2], [4, 6]], [[1, 5], [2, 1]]]\n\nX_categorical = np.array([[1, \"A\"], [2, \"B\"], [3, \"A\"], [4, \"C\"]])\nfeature_i_categorical = 1\nthreshold_categorical = \"A\"\nprint(divide_on_feature(X_categorical, feature_i_categorical, threshold_categorical))\n# Output: [[[1, 'A'], [3, 'A']], [[2, 'B'], [4, 'C']]]\n```"}
{"task_id": 453, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    # Check for input validity\n    if not (isinstance(Q, np.ndarray) and isinstance(Q_next, np.ndarray)):\n        return -1\n    if Q.shape != Q_next.shape:\n        return -1\n    if not (isinstance(actions, list) and isinstance(rewards, list) and isinstance(dones, list)):\n        return -1\n    if len(actions) != len(rewards) or len(rewards) != len(dones) or len(dones) != Q.shape[0]:\n        return -1\n    if not (0 <= gamma <= 1):\n        return -1\n\n    batch_size, n_actions = Q.shape\n    updated_Q = Q.copy()\n\n    for i in range(batch_size):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        updated_Q[i, actions[i]] = target\n\n    # Round to 4 decimal places and convert to list of lists\n    updated_Q_rounded = np.round(updated_Q, 4).tolist()\n    return updated_Q_rounded\n```\n\nThis script defines the `update_q_values` function, which computes the target Q-values for training a Deep Q-Network. It checks for input validity, computes the target values according to the DQN update rule, and returns the updated Q-values rounded to four decimal places. If any input is invalid, it returns `-1`."}
{"task_id": 458, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    # Convert labels to a numpy array for easier manipulation\n    labels = np.array(labels)\n    \n    # Check for negative labels\n    if np.any(labels < 0):\n        return -1\n    \n    # Infer num_classes if not provided\n    if num_classes is None:\n        num_classes = np.max(labels) + 1\n    \n    # Check if num_classes is smaller than the required number of classes\n    if num_classes < np.max(labels) + 1:\n        return -1\n    \n    # Initialize the one-hot encoded matrix with zeros\n    one_hot_matrix = np.zeros((len(labels), num_classes), dtype=int)\n    \n    # Set the appropriate indices to 1\n    one_hot_matrix[np.arange(len(labels)), labels] = 1\n    \n    # Convert the numpy array to a list of lists\n    return one_hot_matrix.tolist()\n\n# Example usage:\n# labels = [0, 1, 2, 1]\n# print(to_categorical(labels))  # Output: [[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0]]\n# print(to_categorical(labels, num_classes=4))  # Output: [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0]]\n# print(to_categorical(labels, num_classes=2))  # Output: -1\n```"}
{"task_id": 461, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Step 1: Initialize the predictions to the mean of the targets\n    y_pred = np.full_like(y, np.mean(y))\n    \n    # If no boosting iterations are requested, return the initial predictions\n    if n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n    \n    # Step 2: Iterate for n_estimators times\n    for _ in range(n_estimators):\n        # Step 2a: Compute residuals\n        residuals = y - y_pred\n        \n        # Step 2b: Consider all unique x values (except the maximum one) for splitting\n        unique_x = np.unique(x)[:-1]\n        best_sse = float('inf')\n        best_split = None\n        best_vl = None\n        best_vr = None\n        \n        # Step 2c: Evaluate each possible split\n        for t in unique_x:\n            left_mask = x <= t\n            right_mask = x > t\n            \n            # Step 2c: Ignore invalid splits\n            if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:\n                continue\n            \n            # Compute the mean residuals for the left and right sides\n            vl = np.mean(residuals[left_mask])\n            vr = np.mean(residuals[right_mask])\n            \n            # Step 2c: Compute the sum of squared errors for this split\n            sse = np.sum(residuals[left_mask]**2) - np.sum(left_mask) * vl**2 + \\\n                  np.sum(residuals[right_mask]**2) - np.sum(right_mask) * vr**2\n            \n            # Step 2c: If this is the best split, remember the parameters\n            if sse < best_sse:\n                best_sse = sse\n                best_split = t\n                best_vl = vl\n                best_vr = vr\n        \n        # Step 2d: If a valid split was found, update the predictions\n        if best_split is not None:\n            y_pred += learning_rate * (np.where(x <= best_split, best_vl, best_vr))\n        else:\n            # Step 2d: If no valid split was found, predict the mean residual\n            y_pred += learning_rate * np.mean(residuals)\n    \n    # Return the final predictions rounded to four decimal places\n    return np.round(y_pred, 4).tolist()\n```\n\nThis code defines a function `gradient_boosting_regressor` that performs gradient boosting with decision stumps for one-dimensional regression tasks. The function takes in feature values `x`, target values `y`, the number of boosting iterations `n_estimators`, and a `learning_rate`. It returns the final predicted values rounded to four decimal places."}
{"task_id": 471, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    \n    if next_state is not None:\n        # Determine the greedy action in the next state\n        greedy_action = np.argmax(q_table[next_state])\n        \n        # Calculate the expected SARSA target\n        expected_value = 0.0\n        for a in range(num_actions):\n            if a == greedy_action:\n                expected_value += (1 - epsilon + epsilon / num_actions) * q_table[next_state][a]\n            else:\n                expected_value += (epsilon / num_actions) * q_table[next_state][a]\n        \n        target = reward + gamma * expected_value\n    else:\n        # Terminal state, no expected future value\n        target = reward\n    \n    # Update the Q-value for the current state-action pair\n    q_table[state][action] += lr * (target - q_table[state][action])\n    \n    # Round all entries in the Q-table to four decimal places\n    q_table = [[round(q, 4) for q in row] for row in q_table]\n    \n    return q_table\n```\n\nThis script defines the `expected_sarsa_update` function, which performs a single step of the on-policy Expected SARSA TD(0) algorithm to update the Q-table. The function takes the current Q-table, the current state and action, the reward received, the next state, and the hyperparameters `epsilon`, `lr`, and `gamma`. It returns the updated Q-table with all values rounded to four decimal places."}
{"task_id": 474, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n\n    X_train = []\n    X_val = []\n    Y_train = []\n    Y_val = []\n\n    for i in range(m):\n        # Determine the label for the class\n        label = (i - 0.5) * 2\n        \n        # Calculate the x range for the class\n        x_min = (i // 2 + 0.1) * 10\n        x_max = (i // 2 + 0.9) * 10\n        \n        # Calculate the y range for the class\n        y_min = ((i % 2) * interval + 0.1) * 10\n        y_max = ((i % 2) * interval + 0.9) * 10\n        \n        # Generate training data for the class\n        X_train_class = np.random.uniform(x_min, x_max, n_train)\n        Y_train_class = np.random.uniform(y_min, y_max, n_train)\n        X_train.extend(np.column_stack((X_train_class, Y_train_class)).tolist())\n        Y_train.extend([label] * n_train)\n        \n        # Generate validation data for the class\n        X_val_class = np.random.uniform(x_min, x_max, n_val)\n        Y_val_class = np.random.uniform(y_min, y_max, n_val)\n        X_val.extend(np.column_stack((X_val_class, Y_val_class)).tolist())\n        Y_val.extend([label] * n_val)\n\n    # Convert lists to NumPy arrays and round to 4 decimal places\n    X_train = np.round(np.array(X_train), 4)\n    X_val = np.round(np.array(X_val), 4)\n    Y_train = np.round(np.array(Y_train), 4)\n    Y_val = np.round(np.array(Y_val), 4)\n\n    return X_train, X_val, Y_train, Y_val\n```\n\nThis script defines the `generate_data` function, which generates a 2-D toy data set with the specified parameters. The function ensures that the coordinates are rounded to four decimal places and handles the optional random seed for reproducibility."}
{"task_id": 475, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    # Initialize m_prev and v_prev to zeros if they are None\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    \n    # Update the moving averages of the gradient\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * grad**2\n    \n    # Compute bias-corrected estimates\n    m_hat = m_new / (1 - b1**t)\n    v_hat = v_new / (1 - b2**t)\n    \n    # Update the parameters\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    \n    return w_new, m_new, v_new\n\n# Example call (with the default hyper-parameters)\nw_new, m_new, v_new = adam_update(1.0, 0.1, 0.0, 0.0, 1)\nprint(round(w_new, 9))  # \u2248 0.999000001\n```\n\nThis script defines the `adam_update` function, which performs a single step of the Adam optimization algorithm. It handles both scalar and NumPy array inputs for the parameters and gradients, initializes the first and second moment estimates if they are `None`, and returns the updated parameters and moments."}
{"task_id": 479, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    \n    N = len(rewards[0])  # Number of arms\n    value_estimates = [ev_prior] * N  # Initialize estimated values\n    pull_counts = [0] * N  # Initialize pull counters\n\n    for t, rewards_at_t in enumerate(rewards):\n        if np.random.rand() < epsilon:\n            # Explore: choose a random arm\n            chosen_arm = np.random.choice(N)\n        else:\n            # Exploit: choose the arm with the highest estimated value\n            chosen_arm = np.argmax(value_estimates)\n        \n        # Receive the reward for the chosen arm\n        reward = rewards_at_t[chosen_arm]\n        \n        # Update the pull count for the chosen arm\n        pull_counts[chosen_arm] += 1\n        \n        # Update the estimate for the chosen arm using incremental sample mean\n        C_i = pull_counts[chosen_arm]\n        V_i = value_estimates[chosen_arm]\n        value_estimates[chosen_arm] = V_i + (reward - V_i) / C_i\n\n    # Return the final estimated values rounded to 4 decimal places\n    return [round(v, 4) for v in value_estimates]\n\n# Example usage:\n# rewards = [\n#     [1.0, 2.0, 3.0],\n#     [3.0, 1.0, 2.0],\n#     [2.0, 3.0, 1.0],\n#     [3.0, 2.0, 1.0]\n# ]\n# print(epsilon_greedy_bandit(rewards, epsilon=0.1, ev_prior=0.5, seed=42))\n```\n\nThis script defines the `epsilon_greedy_bandit` function, which simulates the \u03b5-greedy multi-armed bandit strategy. The function initializes the estimated values and pull counts for each arm, iterates through each time step, and updates the estimates based on the observed rewards. The final estimates are returned, rounded to four decimal places. An example usage is also provided for testing purposes."}
{"task_id": 481, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n\n    def euclidean_distance(p1, p2):\n        return np.sqrt(np.sum((p1 - p2) ** 2))\n\n    def region_query(point_index, eps):\n        neighbors = []\n        for i, point in enumerate(data):\n            if euclidean_distance(data[point_index], point) <= eps:\n                neighbors.append(i)\n        return neighbors\n\n    def expand_cluster(point_index, neighbors, cluster_label):\n        labels[point_index] = cluster_label\n        i = 0\n        while i < len(neighbors):\n            neighbor_index = neighbors[i]\n            if labels[neighbor_index] == -1:\n                labels[neighbor_index] = cluster_label\n            elif labels[neighbor_index] == 0:\n                labels[neighbor_index] = cluster_label\n                neighbor_neighbors = region_query(neighbor_index, eps)\n                if len(neighbor_neighbors) >= min_samples:\n                    neighbors += neighbor_neighbors\n            i += 1\n\n    labels = [0] * len(data)\n    cluster_label = 0\n\n    for point_index in range(len(data)):\n        if labels[point_index] != 0:\n            continue\n\n        neighbors = region_query(point_index, eps)\n        if len(neighbors) < min_samples:\n            labels[point_index] = -1\n        else:\n            cluster_label += 1\n            expand_cluster(point_index, neighbors, cluster_label)\n\n    return labels\n\n# Example usage:\n# data = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\n# print(dbscan(data, eps=3, min_samples=2))\n```\n\nThis script defines the `dbscan` function, which implements the DBSCAN algorithm from scratch without using any external machine learning libraries. The function takes a two-dimensional NumPy array `data`, a distance threshold `eps`, and an integer `min_samples` as inputs and returns a list of cluster labels for every sample. Noise points are labeled `-1`, and cluster indices start from `0` and increase sequentially in discovery order."}
{"task_id": 482, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    # Convert input to a numpy array for easier manipulation\n    y = np.array(y)\n    \n    # Check for negative labels\n    if (y < 0).any():\n        raise ValueError(\"Labels must be non-negative integers.\")\n    \n    # Determine the number of classes if not provided\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    else:\n        # Check for labels that are out of range\n        if (y >= num_classes).any():\n            raise ValueError(f\"All labels must be less than {num_classes}.\")\n    \n    # Initialize the one-hot encoded array with zeros\n    one_hot = np.zeros((y.size, num_classes), dtype=int)\n    \n    # Set the appropriate indices to 1\n    one_hot[np.arange(y.size), y] = 1\n    \n    return one_hot\n\n# Example usage:\n# labels = [0, 1, 2, 1]\n# print(to_categorical(labels))\n# Output: [[1 0 0]\n#          [0 1 0]\n#          [0 0 1]\n#          [0 1 0]]\n```\n\nThis script defines the `to_categorical` function, which converts a vector of integer class labels into a 2-D array of one-hot encoded vectors. It handles the optional `num_classes` parameter and raises a `ValueError` if any label is negative or out of the specified range."}
{"task_id": 485, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    \n    def sse(y):\n        return np.sum((y - np.mean(y)) ** 2)\n\n    def best_split(X, y):\n        best_sse = float('inf')\n        best_split_point = None\n        for i in range(1, len(X)):\n            sse_left = sse(y[:i])\n            sse_right = sse(y[i:])\n            current_sse = sse_left + sse_right\n            if current_sse < best_sse:\n                best_sse = current_sse\n                best_split_point = X[i]\n        return best_split_point\n\n    def build_tree(X, y, depth):\n        if depth == max_depth or len(X) < 2:\n            return np.mean(y)\n        \n        split_point = best_split(X, y)\n        if split_point is None:\n            return np.mean(y)\n        \n        left_indices = [i for i, x in enumerate(X) if x < split_point]\n        right_indices = [i for i, x in enumerate(X) if x >= split_point]\n        \n        left_subtree = build_tree([X[i] for i in left_indices], [y[i] for i in left_indices], depth + 1)\n        right_subtree = build_tree([X[i] for i in right_indices], [y[i] for i in right_indices], depth + 1)\n        \n        return (split_point, left_subtree, right_subtree)\n\n    def predict(tree, x):\n        if isinstance(tree, float):\n            return tree\n        split_point, left, right = tree\n        if x < split_point:\n            return predict(left, x)\n        else:\n            return predict(right, x)\n\n    if not X_train or not y_train:\n        return []\n\n    indices = np.argsort(X_train)\n    sorted_X_train = [X_train[i] for i in indices]\n    sorted_y_train = [y_train[i] for i in indices]\n\n    tree = build_tree(sorted_X_train, sorted_y_train, 0)\n    return [predict(tree, x) for x in X_test]\n```\n\nThis script defines a univariate regression tree algorithm that fits to the training data and predicts the target values for the test data. It uses recursive greedy splitting to build the tree, stopping when the maximum depth is reached or when a node contains fewer than two samples. Each leaf node is labeled with the mean of the target values in that node. The predictions are made by traversing the tree for each test point."}
{"task_id": 490, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:\n        return []\n    \n    # Convert input to NumPy array if it's not already\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    \n    # Create a diagonal matrix using NumPy\n    diagonal_matrix = np.diag(x)\n    \n    # Convert the NumPy array to a list of lists and return\n    return diagonal_matrix.tolist()\n\n# Example usage:\n# vector = [1, 2, 3]\n# print(make_diagonal(vector))  # Output: [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n```"}
{"task_id": 491, "completion_id": 0, "completion": "```\nfrom collections import Counter, defaultdict\nimport itertools\n\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    # Step 1: Count the frequency of each item\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    \n    # Filter out items that do not meet the minimum support\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_sup}\n    \n    # If there are no frequent items, return an empty list\n    if not frequent_items:\n        return []\n    \n    # Create a dictionary to map each item to its frequency\n    frequent_item_sorted = sorted(frequent_items.keys(), key=lambda x: (frequent_items[x], x), reverse=True)\n    \n    # Create a mapping from item to its global frequency rank\n    item_to_rank = {item: rank for rank, item in enumerate(frequent_item_sorted)}\n    \n    # Step 2: Build the FP-tree\n    def insert_tree(transaction, tree, header_table):\n        if not transaction:\n            return\n        item = transaction[0]\n        if item in tree:\n            tree[item]['count'] += 1\n        else:\n            tree[item] = {'count': 1, 'children': {}, 'parent': tree}\n            if item in header_table:\n                link = header_table[item]['tail']\n                while link['next']:\n                    link = link['next']\n                link['next'] = tree[item]\n            else:\n                header_table[item] = {'head': tree[item], 'tail': tree[item]}\n        insert_tree(transaction[1:], tree[item]['children'], header_table)\n    \n    fp_tree = {}\n    header_table = {}\n    \n    for transaction in transactions:\n        # Filter and sort the transaction according to the global frequency rank\n        sorted_trans = sorted((item for item in transaction if item in frequent_items), key=lambda item: item_to_rank[item])\n        insert_tree(sorted_trans, fp_tree, header_table)\n    \n    # Step 3: Extract frequent item-sets\n    def find_frequent_patterns(tree, header_table, prefix, freq_items):\n        for item, item_info in sorted(header_table.items(), key=lambda x: item_to_rank[x[0]]):\n            support_count = item_info['tail']['count']\n            pattern = prefix + (item,)\n            freq_items.append(pattern)\n            \n            # Build the conditional transaction database\n            conditional_db = []\n            node = item_info['tail']\n            while node:\n                path = []\n                parent = node['parent']\n                while parent != tree:\n                    path.append(parent['item'])\n                    parent = parent['parent']\n                conditional_db.append((path, node['count']))\n                node = node['next']\n            \n            # Construct the conditional FP-tree\n            conditional_tree = {}\n            conditional_header_table = {}\n            for cond_path, cond_count in conditional_db:\n                cond_path = list(filter(lambda x: x in frequent_items, cond_path))\n                cond_path.sort(key=lambda x: item_to_rank[x], reverse=True)\n                insert_tree(cond_path, conditional_tree, conditional_header_table)\n            \n            # Recurse on the conditional tree if it is not empty and contains frequent items\n            if conditional_tree:\n                find_frequent_patterns(conditional_tree, conditional_header_table, pattern, freq_items)\n    \n    frequent_itemsets = []\n    find_frequent_patterns(fp_tree, header_table, (), frequent_itemsets)\n    \n    # Sort the frequent itemsets first by length, then lexicographically\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    \n    return frequent_itemsets\n\n# Example usage\ntransactions = [\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"A\", \"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"C\", \"D\", \"E\"],\n    [\"B\", \"C\", \"D\"]\n]\n\nmin_sup = 3\nprint(fp_growth(transactions, min_sup))\n```\n\nThis script implements the FP-Growth algorithm to mine frequent item-sets from a collection of transactions. The function `fp_growth` constructs the FP-tree, prunes it, and then mines frequent item-sets recursively. The result is a sorted list of tuples, each representing a frequent item-set."}
{"task_id": 492, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n\n    X = np.array(X)\n    n_samples, n_features = X.shape\n    feature_indices = list(range(n_features))\n    \n    # Generate all combinations of feature indices with replacement\n    # This will give us all possible multi-indices (k\u2080, k\u2081, ..., k_{m-1})\n    all_combinations = []\n    for d in range(degree + 1):\n        all_combinations.extend(combinations_with_replacement(feature_indices, d))\n    \n    # Initialize the feature matrix with ones for the degree-0 term\n    feature_matrix = np.ones((n_samples, 1))\n    \n    # Compute each polynomial feature and append it to the feature matrix\n    for combination in all_combinations:\n        if not combination:  # Skip the empty combination which corresponds to the degree-0 term\n            continue\n        # Compute the product of the corresponding features raised to their respective powers\n        feature = np.prod(X[:, combination] ** np.array([1] * len(combination)), axis=1).reshape(-1, 1)\n        feature_matrix = np.hstack([feature_matrix, feature])\n    \n    return feature_matrix.tolist()\n\n# Example usage:\n# X = [[1, 2], [3, 4]]\n# degree = 2\n# print(polynomial_features(X, degree))\n```\n\nThis script defines the `polynomial_features` function, which generates a polynomial feature matrix for a given input matrix `X` and a specified degree. The function handles the case where the degree is negative by returning `-1`. The polynomial features are generated by considering all combinations of the feature indices with replacement, ensuring that the total degree of each monomial does not exceed the specified degree. The features are then computed and appended to the feature matrix in the specified order."}
{"task_id": 493, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y:\n        return -1\n    \n    y = np.array(y)\n    mean_y = np.mean(y)\n    mse_value = np.mean((y - mean_y) ** 2)\n    \n    return round(mse_value, 4)\n\n# Example usage:\n# print(mse([1, 2, 3, 4, 5]))  # Output should be 2.0\n# print(mse([]))               # Output should be -1\n```"}
{"task_id": 496, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Ensure x is a NumPy array for vectorized operations\n    x = np.array(x, dtype=float)\n    \n    # Calculate the affine activation\n    y = slope * x + intercept\n    \n    # Calculate the first derivative (same for all elements)\n    grad = np.full_like(x, slope)\n    \n    # Calculate the second derivative (zero for all elements)\n    grad2 = np.zeros_like(x)\n    \n    # Round the results to 4 decimal places\n    y_rounded = np.round(y, 4).tolist()\n    grad_rounded = np.round(grad, 4).tolist()\n    grad2_rounded = np.round(grad2, 4).tolist()\n    \n    return y_rounded, grad_rounded, grad2_rounded\n\n# Example usage:\n# x = [1, 2, 3]\n# slope = 2.5\n# intercept = -1.0\n# result = apply_affine(x, slope, intercept)\n# print(result)  # Output: ([1.5, 4.0, 6.5], [2.5, 2.5, 2.5], [0.0, 0.0, 0.0])\n```"}
{"task_id": 499, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    n_samples, n_features = data.shape\n    \n    # Check if k is within the valid range\n    if k < 1 or k > n_features:\n        return -1\n    \n    # Step 1: Standardise each feature\n    means = np.mean(data, axis=0)\n    stds = np.std(data, axis=0, ddof=1)  # Use Bessel's correction\n    \n    # Avoid division by zero for features with zero variance\n    stds[stds == 0] = 1\n    \n    standardized_data = (data - means) / stds\n    \n    # Step 2: Compute the sample covariance matrix\n    covariance_matrix = np.cov(standardized_data, rowvar=False)\n    \n    # Step 3: Perform an eigen-decomposition of the covariance matrix\n    eigenvalues, eigenvectors = np.linalg.eigh(covariance_matrix)\n    \n    # Step 4: Sort eigenvalues in descending order and arrange the corresponding eigenvectors\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    \n    # Step 5: Fix the sign of every eigenvector\n    max_abs_indices = np.argmax(np.abs(sorted_eigenvectors), axis=0)\n    signs = np.sign(sorted_eigenvectors[max_abs_indices, np.arange(n_features)])\n    sorted_eigenvectors = sorted_eigenvectors * signs\n    \n    # Step 6: Project the standardised data on the first `k` eigenvectors\n    projection_matrix = sorted_eigenvectors[:, :k]\n    projected_data = standardized_data @ projection_matrix\n    \n    # Return the projected matrix rounded to four decimal places\n    return np.round(projected_data, 4).tolist()\n```"}
{"task_id": 500, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Initialize the model with the mean of the target values\n    F = np.mean(y_train)\n    predictions = np.zeros(len(X_test)) + F\n    \n    for _ in range(n_estimators):\n        # Calculate residuals\n        residuals = y_train - F\n        \n        # Fit a decision stump to the residuals\n        best_feature, best_threshold, best_value_left, best_value_right = None, None, None, None\n        best_mse = float('inf')\n        \n        for feature in range(X_train.shape[1]):\n            unique_values = np.unique(X_train[:, feature])\n            for threshold in unique_values:\n                # Calculate predictions for left and right\n                mask_left = X_train[:, feature] <= threshold\n                mask_right = X_train[:, feature] > threshold\n                value_left = np.mean(residuals[mask_left])\n                value_right = np.mean(residuals[mask_right])\n                \n                # Calculate MSE\n                mse = np.mean((residuals[mask_left] - value_left) ** 2) + np.mean((residuals[mask_right] - value_right) ** 2)\n                \n                if mse < best_mse:\n                    best_mse = mse\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_value_left = value_left\n                    best_value_right = value_right\n        \n        # Update the model\n        F += learning_rate * (np.where(X_train[:, best_feature] <= best_threshold, best_value_left, best_value_right))\n        predictions += learning_rate * (np.where(X_test[:, best_feature] <= best_threshold, best_value_left, best_value_right))\n    \n    # Convert the final scores to class labels\n    return [1 if score >= 0.5 else 0 for score in predictions]\n```"}
{"task_id": 505, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n\n    m, n_v = X.shape\n    n_h = hbias.shape[0]\n\n    # Positive phase\n    h0_prob = 1 / (1 + np.exp(-(X @ W + hbias)))\n    pos_grad = X.T @ h0_prob\n\n    # Gibbs sampling for k steps\n    v_k_prob = X\n    for _ in range(k):\n        h_k_prob = 1 / (1 + np.exp(-(v_k_prob @ W + hbias)))\n        v_k_prob = 1 / (1 + np.exp(-(h_k_prob @ W.T + vbias)))\n\n    neg_grad = v_k_prob.T @ h_k_prob\n\n    # Weight update\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n\n    # Return rounded and converted to list of lists\n    return np.round(W_new, 4).tolist()\n\n# Example usage\n# X = np.random.rand(10, 5)  # batch_size = 10, n_visible = 5\n# W = np.random.rand(5, 3)   # n_visible = 5, n_hidden = 3\n# hbias = np.random.rand(3)\n# vbias = np.random.rand(5)\n# learning_rate = 0.1\n# k = 1\n# updated_W = contrastive_divergence(X, W, hbias, vbias, learning_rate, k)\n# print(updated_W)\n```"}
{"task_id": 509, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Convert to numpy arrays if they aren't already\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Check if the lengths of the vectors are the same\n    if x.shape != y.shape:\n        return -1\n    \n    # Calculate the component-wise absolute differences\n    abs_diff = np.abs(x - y)\n    \n    # Find the maximum of these differences\n    max_diff = np.max(abs_diff)\n    \n    # Return the Chebyshev distance rounded to four decimal places\n    return round(float(max_diff), 4)\n\n# Example usage:\nx = [1, 2, 3]\ny = [2, 4, 6]\nprint(chebyshev(x, y))  # Output: 3.0\n```"}
{"task_id": 510, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    # Clip y_pred to prevent log(0) or log(1)\n    epsilon = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n    \n    # Compute the reconstruction loss (binary cross-entropy)\n    reconstruction_loss = -np.mean(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped))\n    \n    # Compute the KL divergence\n    kl_divergence = -0.5 * np.mean(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var))\n    \n    # Total loss is the sum of reconstruction loss and KL divergence\n    total_loss = reconstruction_loss + kl_divergence\n    \n    # Return the rounded loss\n    return round(total_loss, 6)\n\n# Example usage:\n# y = np.random.randint(0, 2, (100, 784))  # Example binary data\n# y_pred = np.random.rand(100, 784)       # Example reconstructed probabilities\n# t_mean = np.random.randn(100, 32)       # Example mean of q(t|x)\n# t_log_var = np.random.randn(100, 32)    # Example log-variance of q(t|x)\n# print(vae_loss(y, y_pred, t_mean, t_log_var))\n```\n\nThis script defines the `vae_loss` function, which calculates the Variational Auto-Encoder loss for a mini-batch of data with Bernoulli visible units. The function computes both the reconstruction loss (using binary cross-entropy) and the KL divergence, then returns their sum as the total loss, rounded to six decimal places."}
{"task_id": 513, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for efficient computation\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    \n    # Initialize the predictions with the bias term\n    predictions = np.full(X.shape[0], w0)\n    \n    # Add the linear part of the prediction\n    predictions += np.dot(X, w)\n    \n    # Add the interaction part of the prediction\n    # Sum of squared sums\n    sum_of_squared_sums = np.sum((np.dot(X, V)) ** 2, axis=1)\n    # Sum of sums of squares\n    sum_of_sums_of_squares = np.sum((np.dot(X ** 2, V ** 2)), axis=1)\n    \n    # Final interaction part\n    interaction_part = 0.5 * (sum_of_squared_sums - sum_of_sums_of_squares)\n    \n    # Add the interaction part to the predictions\n    predictions += interaction_part\n    \n    # Round the predictions to 4 decimal places\n    predictions = np.round(predictions, 4)\n    \n    return predictions.tolist()\n\n# Example usage:\n# X = [[1, 2, 3], [4, 5, 6]]\n# w0 = 0.5\n# w = [0.1, 0.2, 0.3]\n# V = [[0.01, 0.02], [0.03, 0.04], [0.05, 0.06]]\n# print(fm_predict(X, w0, w, V))\n```\n\nThis script defines the `fm_predict` function, which calculates the predictions for a batch of samples using the Factorization Machine regression formula. The function uses `numpy` for efficient numerical computations and ensures that the outputs are rounded to four decimal places."}
{"task_id": 517, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # Convert input to a NumPy array for element-wise operations\n    if isinstance(z, (list, tuple)):\n        z = np.array(z)\n    elif isinstance(z, (int, float)):\n        z = np.array([z])\n    \n    # Numerically stable sigmoid function\n    sigmoid_values = np.where(z >= 0, \n                              1 / (1 + np.exp(-z)), \n                              np.exp(z) / (1 + np.exp(z)))\n    \n    # Round the results to four decimal places\n    rounded_values = np.round(sigmoid_values, 4)\n    \n    # Return the result as a float if input was a scalar, otherwise as a list\n    if rounded_values.size == 1:\n        return float(rounded_values[0])\n    else:\n        return rounded_values.tolist()\n\n# Example usage\nprint(sigmoid([-1, 0, 1]))  # Should print [0.2689, 0.5, 0.7311]\n```\n\nThis script defines the `sigmoid` function that computes the sigmoid activation for various types of inputs (scalar, list, tuple, or NumPy ndarray). It ensures numerical stability by using the `np.where` function to handle large positive and negative values of `z`. The results are rounded to four decimal places, and the function returns the appropriate type based on the input."}
{"task_id": 518, "completion_id": 0, "completion": "Certainly! Below is the self-contained Python script that implements the `unhot` decorator as described:\n\n```python\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        # Check if actual is one-hot encoded and convert if necessary\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        \n        # Check if predicted is one-hot encoded and convert if necessary\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        \n        # Call the original function with the processed arrays\n        return function(actual, predicted)\n    \n    return wrapper\n\n# Example usage\n@unhot\ndef accuracy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Simple accuracy rounded to 4 decimals.\"\"\"\n    return float(np.round(np.mean(actual == predicted), 4))\n\n# Test the decorated function\nactual    = np.array([[0,1,0], [1,0,0], [0,0,1]])  # one-hot\npredicted = np.array([[0,1,0], [0,1,0], [0,0,1]])  # one-hot\nprint(accuracy(actual, predicted))  # Output: 0.6667\n```\n\nThis script defines the `unhot` decorator, which checks if the input arrays `actual` and `predicted` are one-hot encoded and converts them to 1-dimensional arrays of class labels if necessary. It then calls the original metric function with these processed arrays. The example usage demonstrates the decorator in action with a simple accuracy metric."}
{"task_id": 520, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    # Helper function to apply the sigmoid gradient and round the result\n    def compute_gradient(value):\n        return np.round(value * (1 - value), 4)\n\n    # Check if the input is a scalar\n    if isinstance(z, (int, float)):\n        return compute_gradient(z)\n    \n    # Check if the input is a list or a nested list\n    if isinstance(z, list):\n        # Recursively apply the function to each element\n        return [sigmoid_grad(item) for item in z]\n    \n    # Check if the input is a NumPy array\n    if isinstance(z, np.ndarray):\n        # Apply the gradient computation element-wise and convert back to a list\n        return np.vectorize(compute_gradient)(z).tolist()\n    \n    # If the input is an empty list, return an empty list\n    if z == []:\n        return []\n\n# Example usage:\n# scalar_input = 0.5\n# list_input = [0.5, 0.7, [0.2, 0.8]]\n# array_input = np.array([[0.5, 0.7], [0.2, 0.8]])\n# print(sigmoid_grad(scalar_input))  # Output: 0.25\n# print(sigmoid_grad(list_input))    # Output: [0.25, 0.21, [0.16, 0.2]]\n# print(sigmoid_grad(array_input))  # Output: [[0.25, 0.21], [0.16, 0.2]]\n```\nThis script defines the `sigmoid_grad` function that computes the gradient of the sigmoid function for scalar, list, and NumPy array inputs, rounding the results to four decimal places and maintaining the input structure."}
{"task_id": 528, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    W = np.array(W)\n    \n    # Determine the range for the grid\n    x1_min, x1_max = X[:, 0].min(), X[:, 0].max()\n    x2_min, x2_max = X[:, 1].min(), X[:, 1].max()\n    \n    # Create equally spaced 1-D arrays\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    \n    # Create a meshgrid\n    x1_grid, x2_grid = np.meshgrid(x1_plot, x2_plot)\n    \n    # Flatten the grid for classification\n    x1_flat = x1_grid.flatten()\n    x2_flat = x2_grid.flatten()\n    \n    # Classify each point\n    z = W[0] * x1_flat + W[1] * x2_flat + b\n    labels_flat = np.where(z >= 0, 1, -1)\n    \n    # Reshape back to grid shape\n    labels_grid = labels_flat.reshape((grid_n, grid_n))\n    \n    # Convert to list of lists\n    labels_grid_list = labels_grid.tolist()\n    \n    return labels_grid_list\n\n# Example usage:\n# X = [[-1, -1], [1, 1], [-1, 1], [1, -1]]\n# W = [1, -1]\n# b = 0\n# grid_n = 10\n# print(decision_boundary_grid(X, W, b, grid_n))\n```\n\nThis script defines the function `decision_boundary_grid` which generates a grid of predictions for a 2-D linear classifier. The function uses NumPy for efficient numerical operations and returns the predictions as a list of lists."}
{"task_id": 537, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    # Calculate class priors\n    n_samples = X_train.shape[0]\n    prior_0 = np.mean(y_train == 0)\n    prior_1 = np.mean(y_train == 1)\n    \n    # Separate training data by class\n    X_train_0 = X_train[y_train == 0]\n    X_train_1 = X_train[y_train == 1]\n    \n    # Calculate mean and standard deviation for each feature in each class\n    mean_0 = np.mean(X_train_0, axis=0)\n    std_0 = np.std(X_train_0, axis=0) + 1e-9  # Add epsilon to avoid division by zero\n    mean_1 = np.mean(X_train_1, axis=0)\n    std_1 = np.std(X_train_1, axis=0) + 1e-9  # Add epsilon to avoid division by zero\n    \n    def gaussian_pdf(x, mean, std):\n        \"\"\"Compute the Gaussian probability density function.\"\"\"\n        return (1 / (np.sqrt(2 * np.pi) * std)) * np.exp(-0.5 * ((x - mean) / std) ** 2)\n    \n    # Predict class for each sample in X_test\n    predictions = []\n    for x in X_test:\n        # Calculate posterior probability for class 0\n        likelihood_0 = np.prod(gaussian_pdf(x, mean_0, std_0))\n        posterior_0 = prior_0 * likelihood_0\n        \n        # Calculate posterior probability for class 1\n        likelihood_1 = np.prod(gaussian_pdf(x, mean_1, std_1))\n        posterior_1 = prior_1 * likelihood_1\n        \n        # Predict the class with the higher posterior probability\n        if posterior_0 > posterior_1:\n            predictions.append(0)\n        else:\n            predictions.append(1)\n    \n    return predictions\n```"}
{"task_id": 539, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\"\"\"\n    # Ensure AL and Y have the same shape\n    assert AL.shape == Y.shape, \"AL and Y must have the same shape\"\n    \n    # Number of training examples\n    m = AL.shape[0]\n    \n    # Clip probabilities to avoid numerical instability\n    epsilon = 1e-15\n    AL_clipped = np.clip(AL, epsilon, 1 - epsilon)\n    \n    # Compute binary cross-entropy cost\n    cost = -1 / m * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    \n    # Return the cost as a float rounded to 4 decimal places\n    return round(float(cost), 4)\n\n# Example usage:\n# AL = np.array([0.9, 0.1, 0.5, 0.8])\n# Y = np.array([1, 0, 0, 1])\n# print(compute_cost(AL, Y))  # Output should be a float rounded to 4 decimal places\n```\n\nThis script defines the `compute_cost` function, which calculates the binary cross-entropy cost for a given set of model probabilities `AL` and true labels `Y`. The function ensures that the probabilities are clipped to avoid numerical instability when computing the logarithm. The result is returned as a plain Python float rounded to four decimal places."}
{"task_id": 552, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    # Extract HMM parameters\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    \n    num_states = len(pi)\n    num_observations = len(observations)\n    \n    # Check if t is within the valid range\n    if t < 0 or t >= num_observations:\n        return []\n    \n    # Initialize forward probabilities \u03b1\n    alpha = np.zeros((num_observations, num_states))\n    \n    # Base case for forward probabilities\n    alpha[0] = pi * B[:, observations[0]]\n    \n    # Induction for forward probabilities\n    for i in range(1, num_observations):\n        alpha[i] = np.dot(alpha[i-1], A) * B[:, observations[i]]\n    \n    # Initialize backward probabilities \u03b2\n    beta = np.zeros((num_observations, num_states))\n    \n    # Base case for backward probabilities\n    beta[-1] = 1.0\n    \n    # Induction for backward probabilities\n    for i in range(num_observations - 2, -1, -1):\n        beta[i] = np.dot(A, B[:, observations[i+1]] * beta[i+1])\n    \n    # Calculate \u03b3\u209c\n    alpha_t = alpha[t]\n    beta_t = beta[t]\n    gamma_t = (alpha_t * beta_t) / np.sum(alpha_t * beta_t)\n    \n    # Round to four decimal places\n    gamma_t_rounded = [round(p, 4) for p in gamma_t]\n    \n    return gamma_t_rounded\n\n# Example usage:\n# hmm = {\n#     'pi': [0.6, 0.4],\n#     'A': [[0.7, 0.3], [0.4, 0.6]],\n#     'B': [[0.5, 0.5], [0.1, 0.9]]\n# }\n# observations = [0, 1, 0]\n# t = 1\n# print(gamma_probabilities(hmm, observations, t))\n```\n\nThis script defines the `gamma_probabilities` function, which computes the posterior probability \\( \\gamma_t(i) \\) for each hidden state at time step \\( t \\) using the forward-backward algorithm. The function checks if the given time index \\( t \\) is within the valid range, computes the forward and backward probabilities, and then calculates \\( \\gamma_t \\) by combining these probabilities. Each component of \\( \\gamma_t \\) is rounded to four decimal places before returning the result as a list."}
{"task_id": 555, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import deque\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples  # -1 means unclassified/noise\n    \n    # Function to calculate Euclidean distance\n    def euclidean_distance(p1, p2):\n        return np.sqrt(np.sum((p1 - p2) ** 2))\n    \n    # Build the neighborhood list for each sample\n    neighborhoods = {}\n    for i in range(n_samples):\n        neighborhoods[i] = []\n        for j in range(n_samples):\n            if i != j and euclidean_distance(data[i], data[j]) <= eps:\n                neighborhoods[i].append(j)\n    \n    cluster_id = 0\n    \n    # Function to expand a cluster\n    def expand_cluster(point, cluster_id):\n        labels[point] = cluster_id\n        queue = deque([point])\n        while queue:\n            current_point = queue.popleft()\n            if len(neighborhoods[current_point]) >= min_samples:\n                for neighbor in neighborhoods[current_point]:\n                    if labels[neighbor] == -1:  # noise point\n                        labels[neighbor] = cluster_id\n                    if labels[neighbor] == 0:  # unvisited point\n                        labels[neighbor] = cluster_id\n                        queue.append(neighbor)\n    \n    # Main DBSCAN logic\n    for point in range(n_samples):\n        if labels[point] != -1:\n            continue\n        if len(neighborhoods[point]) < min_samples:\n            labels[point] = -1  # mark as noise\n        else:\n            cluster_id += 1\n            expand_cluster(point, cluster_id)\n    \n    return labels\n\n# Example usage:\n# data = np.array([[1, 2], [2, 2], [2, 3],\n#                  [8, 7], [8, 8], [25, 80]])\n# print(dbscan(data, eps=3, min_samples=2))\n```\n\nThis script implements the DBSCAN algorithm from scratch. It calculates the pairwise Euclidean distances, constructs neighborhood lists for each point, identifies core points, and grows clusters starting from core points using a breadth-first search (BFS) approach. Points that remain unclassified after processing are marked as noise."}
{"task_id": 561, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"\n    Implements the Expectation\u2013Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n\n    Parameters:\n    - data: A 2-D NumPy array of shape (N, D) containing N samples with D features.\n    - k: The number of Gaussian components.\n    - max_iter: The maximum number of iterations for the EM algorithm.\n    - epsilon: The tolerance for convergence in terms of change in mixture weights.\n\n    Returns:\n    - A list of length N containing the final cluster label of each sample.\n    \"\"\"\n    N, D = data.shape\n    \n    # Step 1: Initialize parameters\n    # Randomly initialize mixture weights\n    weights = np.ones(k) / k\n    \n    # Randomly initialize means\n    means = data[np.random.choice(N, k, replace=False)]\n    \n    # Initialize covariance matrices as identity matrices\n    covariances = [np.eye(D) for _ in range(k)]\n    \n    # Step 2: EM iterations\n    for iteration in range(max_iter):\n        # E-step: Compute responsibilities\n        responsibilities = np.zeros((N, k))\n        for i in range(k):\n            diff = data - means[i]\n            exponent = -0.5 * np.sum(diff @ np.linalg.inv(covariances[i]) * diff, axis=1)\n            responsibilities[:, i] = weights[i] * np.exp(exponent) / np.sqrt(np.linalg.det(covariances[i]) * (2 * np.pi) ** D)\n        \n        # Normalize responsibilities\n        responsibilities /= responsibilities.sum(axis=1, keepdims=True)\n        \n        # M-step: Update parameters\n        new_weights = responsibilities.mean(axis=0)\n        \n        new_means = np.dot(responsibilities.T, data) / responsibilities.sum(axis=0, keepdims=True).T\n        \n        new_covariances = [np.zeros((D, D)) for _ in range(k)]\n        for i in range(k):\n            diff = data - new_means[i]\n            new_covariances[i] = (responsibilities[:, i, np.newaxis] * diff).T @ diff / responsibilities[:, i].sum()\n        \n        # Check for convergence\n        if np.allclose(new_weights, weights, atol=epsilon):\n            break\n        \n        weights = new_weights\n        means = new_means\n        covariances = new_covariances\n    \n    # Step 3: Assign labels\n    labels = np.argmax(responsibilities, axis=1)\n    \n    # Step 4: Sort components by the first coordinate of their mean and re-label\n    sorted_indices = np.argsort(means[:, 0])\n    labels = np.array([sorted_indices[label] for label in labels])\n    \n    return labels.tolist()\n```\n\nThis script implements the EM algorithm for Gaussian Mixture Models, initializes parameters randomly, performs the E-step and M-step iteratively, and finally assigns labels to data points based on the learned components. The labels are re-ordered to be deterministic based on the first coordinate of the means."}
{"task_id": 562, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n\n    # 1. Build a fully-connected similarity graph using the Gaussian kernel\n    N = data.shape[0]\n    pairwise_sq_dists = np.sum(data**2, axis=1).reshape(-1, 1) + np.sum(data**2, axis=1) - 2 * data @ data.T\n    similarity_matrix = np.exp(-gamma * pairwise_sq_dists)\n\n    # 2. Construct the un-normalised Laplacian\n    degree_matrix = np.diag(np.sum(similarity_matrix, axis=1))\n    laplacian = degree_matrix - similarity_matrix\n\n    if method == 'normalized':\n        # Symmetric normalized Laplacian\n        sqrt_degree_inv = np.diag(np.power(np.sum(similarity_matrix, axis=1), -0.5))\n        laplacian = sqrt_degree_inv @ laplacian @ sqrt_degree_inv\n\n    # 3. Compute the eigenvectors that correspond to the n_cluster smallest eigen-values\n    eigenvalues, eigenvectors = np.linalg.eig(laplacian)\n    idx = eigenvalues.argsort()\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n\n    # Take the first n_cluster eigenvectors\n    X_embedded = eigenvectors[:, :n_cluster]\n\n    if method == 'normalized':\n        # Row-normalise the eigenvector matrix\n        norms = np.linalg.norm(X_embedded, axis=1, keepdims=True)\n        X_embedded = X_embedded / norms\n\n    # 4. Run k-means in the eigenvector space to obtain final cluster labels\n    # Initialize centroids as the first n_cluster samples\n    centroids = X_embedded[:n_cluster]\n    labels = np.zeros(N, dtype=int)\n    labels_prev = np.ones(N, dtype=int)\n\n    while not np.array_equal(labels, labels_prev):\n        labels_prev = labels.copy()\n        # Assign points to the closest centroid\n        distances = np.linalg.norm(X_embedded[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        # Update centroids\n        for k in range(n_cluster):\n            centroids[k] = X_embedded[labels == k].mean(axis=0)\n\n    # 5. Relabel clusters\n    unique_labels, inverse = np.unique(labels, return_inverse=True)\n    labels = inverse\n\n    return labels.tolist()\n```"}
{"task_id": 563, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = len(X_data)\n    alpha = np.zeros(N)\n    b = 0.0\n    \n    # Build the Gram matrix G\n    G = np.dot(X_data, X_data.T)\n    \n    # Training loop\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            # Compute g = \u03a3\u2c7c \u03b1\u2c7c y\u2c7c G[j, i]\n            g = np.sum(alpha * y_data * G[:, i])\n            \n            # Check the update condition\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        \n        # If no updates were made, the algorithm has converged\n        if not updated:\n            break\n    \n    # Recover the weight vector w\n    w = np.sum(alpha * y_data[:, np.newaxis] * X_data, axis=0)\n    \n    # Round the results to 4 decimal places\n    w_rounded = [round(wi, 4) for wi in w]\n    b_rounded = round(b, 4)\n    \n    return w_rounded, b_rounded\n```\n\nThis script implements the dual-form perceptron learning algorithm as described in the task. It initializes alpha and b, constructs the Gram matrix, iterates over the data to update alpha and b, and finally recovers and rounds the weight vector w and bias term b before returning them."}
{"task_id": 564, "completion_id": 0, "completion": "```\npython\nclass Node:\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label\n        self.x = x\n        self.s = s\n        self.y = y\n        self.child = child if child is not None else []\n\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    current_node = root\n    while current_node.y is None:\n        if task_type == 'classification':\n            feature_value = features[current_node.label]\n            found_child = False\n            for child in current_node.child:\n                if child.x == feature_value:\n                    current_node = child\n                    found_child = True\n                    break\n            if not found_child:\n                current_node = current_node.child[1]  # Default to the second child\n        elif task_type == 'regression':\n            feature_value = features[current_node.label]\n            if feature_value <= current_node.s:\n                current_node = current_node.child[0]\n            else:\n                current_node = current_node.child[1]\n    return current_node.y\n```\n\nThis script defines the `Node` class and the `predict_sample` function, which traverses a decision tree to predict the class or value for a given sample based on the specified task type."}
{"task_id": 565, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    \n    def entropy(labels: np.ndarray) -> float:\n        \"\"\"Calculate the entropy of a label distribution.\"\"\"\n        value_counts = np.bincount(labels)\n        probabilities = value_counts / len(labels)\n        return -np.sum(p * math.log2(p) if p > 0 else 0 for p in probabilities)\n    \n    n_samples, n_features = X.shape\n    \n    # Calculate the entropy of the original label distribution\n    H_y = entropy(y)\n    \n    max_information_gain = -1\n    best_feature_index = -1\n    \n    for feature_index in range(n_features):\n        # Get unique values of the feature\n        feature_values = np.unique(X[:, feature_index])\n        \n        # Calculate the conditional entropy H(y|A)\n        H_y_given_A = 0.0\n        for value in feature_values:\n            # Get the subset of labels where the feature takes the current value\n            subset_labels = y[X[:, feature_index] == value]\n            # Calculate the entropy of this subset\n            H_subset = entropy(subset_labels)\n            # Weight it by the proportion of instances in this subset\n            H_y_given_A += (len(subset_labels) / n_samples) * H_subset\n        \n        # Calculate information gain\n        information_gain = H_y - H_y_given_A\n        \n        # Update the best feature if this one has higher information gain\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = feature_index\n    \n    return best_feature_index, round(max_information_gain, 6)\n\n# Example usage:\n# X = np.array([[0, 0], [1, 0], [1, 1], [0, 1], [0, 0], [1, 1]])\n# y = np.array([0, 0, 1, 1, 0, 1])\n# print(choose_best_feature(X, y))  # Output should be the feature index with the highest information gain\n```\n\nThis script defines a function `choose_best_feature` that calculates the information gain for each feature in the dataset and returns the feature index that provides the maximum information gain, rounded to 6 decimal places. The function uses a helper function `entropy` to compute the entropy of a label distribution."}
{"task_id": 566, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    \n    def c(n):\n        if n <= 1:\n            return 0\n        return 2 * math.log(n - 1) + 0.5772156649 - (2 * (n - 1)) / n\n    \n    def path_length(x, tree, depth=0):\n        if isinstance(tree, tuple):\n            feature, threshold, left, right = tree\n            if x[feature] < threshold:\n                return path_length(x, left, depth + 1)\n            else:\n                return path_length(x, right, depth + 1)\n        else:\n            return depth + c(tree)\n    \n    def build_tree(subsample):\n        if len(subsample) <= 1 or depth == height_limit:\n            return len(subsample)\n        \n        feature = np.random.choice(n_features)\n        min_val, max_val = np.min(subsample[:, feature]), np.max(subsample[:, feature])\n        \n        if min_val == max_val:\n            return len(subsample)\n        \n        threshold = np.random.uniform(min_val, max_val)\n        left_subsample = subsample[subsample[:, feature] < threshold]\n        right_subsample = subsample[subsample[:, feature] >= threshold]\n        \n        left_tree = build_tree(left_subsample)\n        right_tree = build_tree(right_subsample)\n        \n        return (feature, threshold, left_tree, right_tree)\n    \n    n_samples, n_features = data.shape\n    height_limit = math.ceil(math.log2(sample_size if sample_size < n_samples else n_samples))\n    trees = [build_tree(np.random.choice(n_samples, sample_size, replace=False)) for _ in range(n_trees)]\n    \n    path_lengths = np.zeros(n_samples)\n    \n    for i in range(n_samples):\n        for tree in trees:\n            path_lengths[i] += path_length(data[i], tree)\n    \n    avg_path_length = path_lengths / n_trees\n    phi = 2 * math.log(n_samples - 1) - (2 * (n_samples - 1)) / n_samples\n    anomaly_scores = 2 ** ((-avg_path_length) / phi)\n    \n    threshold = np.percentile(anomaly_scores, (1 - epsilon) * 100)\n    outliers = np.where(anomaly_scores > threshold)[0]\n    \n    return sorted(outliers.tolist())\n\n# Example usage:\n# data = np.array([[0.1, 0.2], [0.2, 0.3], [0.3, 0.4], [10, 10], [0.5, 0.6]])\n# print(detect_outliers(data, n_trees=10, sample_size=3, epsilon=0.1))\n```\n\nThis script implements a small-scale version of the Isolation Forest algorithm for outlier detection. It builds random isolation trees, calculates the average path length for each observation, computes anomaly scores, and identifies outliers based on the specified epsilon value. The function returns the indices of the detected outliers, sorted in ascending order."}
{"task_id": 568, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    \"\"\"Predict the labels for the test set using the Maximum Entropy Classifier with Generalized Iterative Scaling.\"\"\"\n    \n    # Step 1: Build the empirical distributions and feature indices\n    n_samples, n_features = X_train.shape\n    labels = np.unique(y_train)\n    n_labels = len(labels)\n    label_indices = {label: i for i, label in enumerate(labels)}\n    \n    # Count feature occurrences and label occurrences\n    feature_counts = defaultdict(int)\n    label_counts = defaultdict(int)\n    joint_counts = defaultdict(int)\n    \n    for x, y in zip(X_train, y_train):\n        label_index = label_indices[y]\n        label_counts[label_index] += 1\n        for feature_index, feature_value in enumerate(x):\n            feature_key = (feature_index, feature_value, label_index)\n            feature_counts[feature_key] += 1\n            joint_counts[(feature_index, feature_value)] += 1\n    \n    # Empirical distributions\n    P_xy = {k: v / n_samples for k, v in feature_counts.items()}\n    P_y = {label_indices[y]: count / n_samples for y, count in label_counts.items()}\n    P_x = {k: v / n_samples for k, v in joint_counts.items()}\n    \n    # Initialize weights\n    w = defaultdict(float)\n    \n    # Function to compute normalization factor Z(x)\n    def compute_Z(x, weights):\n        Z = 0.0\n        for y in labels:\n            label_index = label_indices[y]\n            score = 0.0\n            for feature_index, feature_value in enumerate(x):\n                feature_key = (feature_index, feature_value, label_index)\n                score += weights[feature_key]\n            Z += math.exp(score)\n        return Z\n    \n    # Generalized Iterative Scaling (GIS)\n    for iteration in range(n_iter):\n        max_update = 0.0\n        new_w = w.copy()\n        \n        for (feature_index, feature_value), P_x_val in P_x.items():\n            for label in labels:\n                label_index = label_indices[label]\n                feature_key = (feature_index, feature_value, label_index)\n                P_y_val = P_y[label_index]\n                P_xy_val = P_xy.get(feature_key, 0)\n                \n                # E-step: Compute the expected count under the model\n                expected_count = 0.0\n                for x, y in zip(X_train, y_train):\n                    if x[feature_index] == feature_value and y == label:\n                        Z_x = compute_Z(x, w)\n                        label_score = 0.0\n                        for f_i, f_v in enumerate(x):\n                            feature_key_inner = (f_i, f_v, label_index)\n                            label_score += w[feature_key_inner]\n                        expected_count += math.exp(label_score) / Z_x\n                \n                # M-step: Update the weight\n                update = math.log(P_xy_val / P_x_val / P_y_val) - math.log(expected_count / n_samples)\n                new_w[feature_key] += update\n                max_update = max(max_update, abs(update))\n        \n        # Check for convergence\n        if max_update < epsilon:\n            break\n        \n        w = new_w\n    \n    # Predict on the test set\n    predictions = []\n    for x in X_test:\n        best_label = None\n        max_prob = -float('inf')\n        for y in labels:\n            label_index = label_indices[y]\n            score = 0.0\n            for feature_index, feature_value in enumerate(x):\n                feature_key = (feature_index, feature_value, label_index)\n                score += w[feature_key]\n            Z_x = compute_Z(x, w)\n            prob = math.exp(score) / Z_x\n            if prob > max_prob:\n                max_prob = prob\n                best_label = y\n        predictions.append(best_label)\n    \n    return predictions\n```\n\nThis script implements the Maximum Entropy Classifier using the Generalized Iterative Scaling (GIS) algorithm. It constructs empirical distributions from the training data, iteratively updates the weights, and finally predicts labels for the test set. The implementation relies only on the standard library, `numpy`, and `math` as required."}
{"task_id": 569, "completion_id": 0, "completion": "```\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    total_documents = len(data)\n    word_document_count = Counter()\n\n    # Track which words appear in which documents\n    for _, words in data:\n        unique_words_in_doc = set(words)\n        word_document_count.update(unique_words_in_doc)\n\n    # Calculate document-frequency ratios\n    word_frequency_ratios = [\n        (word, round(count / total_documents, 4))\n        for word, count in word_document_count.items()\n    ]\n\n    # Sort by frequency ratio (descending), then alphabetically for ties\n    word_frequency_ratios.sort(key=lambda x: (-x[1], x[0]))\n\n    # Determine the set of most common words based on cut_off\n    if cut_off is None:\n        most_common_words = set(word for word, _ in word_frequency_ratios)\n    else:\n        most_common_words = set(word for word, _ in word_frequency_ratios[:cut_off])\n\n    return word_frequency_ratios, most_common_words\n\n\n# Example usage:\n# documents = [\n#     (1, [\"word1\", \"word2\", \"word3\"]),\n#     (2, [\"word2\", \"word3\", \"word4\"]),\n#     (3, [\"word3\", \"word4\", \"word5\"]),\n# ]\n# print(statistic_key_word(documents, cut_off=3))\n```\n\nThis script defines the `statistic_key_word` function, which processes a list of documents to calculate the document-frequency ratios of each word and returns a sorted list of these ratios along with a set of the most common words based on the specified `cut_off`. The example usage at the end demonstrates how to call the function with a sample list of documents."}
{"task_id": 571, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute the weight vector w\n    w = np.dot(X.T, alpha * y)\n    w_rounded = np.round(w, 4).tolist()\n\n    # Compute the bias term b\n    b = 0\n    n_samples = X.shape[0]\n    for i in range(n_samples):\n        b += y[i] - np.dot(w, X[i])\n    b /= n_samples\n    b_rounded = np.round(b, 4)\n\n    return w_rounded, b_rounded\n\n# Example usage\nif __name__ == \"__main__\":\n    X = np.array([[1, 2], [3, 4], [5, 6]])\n    y = np.array([1, -1, 1])\n    alpha = np.array([0.1, 0.0, 0.2])\n    w, b = compute_svm_parameters(X, y, alpha)\n    print(\"Weight vector w:\", w)\n    print(\"Bias term b:\", b)\n```\n\nThis script defines the `compute_svm_parameters` function, which calculates the weight vector \\( \\mathbf{w} \\) and the bias term \\( b \\) using the provided Lagrange multipliers \\( \\boldsymbol{\\alpha} \\), labels \\( \\mathbf{y} \\), and training samples \\( X \\). The results are rounded to four decimal places and returned as a tuple containing a list for \\( \\mathbf{w} \\) and a scalar for \\( b \\)."}
{"task_id": 572, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Compute the Local Outlier Factor (LOF) for each sample in the dataset.\"\"\"\n    \n    # Step 1: Compute the full pair-wise Euclidean distance matrix\n    n = len(data)\n    distance_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i + 1, n):\n            distance_matrix[i, j] = np.sqrt(np.sum((data[i] - data[j]) ** 2))\n            distance_matrix[j, i] = distance_matrix[i, j]\n    \n    # Step 2: For every sample p obtain its k-distance and the index list of those k nearest neighbours N_k(p)\n    k_distances = np.zeros(n)\n    nearest_neighbors = [None] * n\n    \n    for i in range(n):\n        distances = distance_matrix[i]\n        sorted_indices = np.argsort(distances)[1:k+1]  # Exclude the point itself\n        k_distances[i] = distances[sorted_indices[-1]]\n        nearest_neighbors[i] = sorted_indices.tolist()\n    \n    # Step 3: Define the reachability distance between two points\n    def reach_dist(k, p, q):\n        return max(k_distances[q], distance_matrix[p, q])\n    \n    # Step 4: Compute Local Reachability Density (LRD) for each point\n    lrds = np.zeros(n)\n    for p in range(n):\n        sum_reach_dist = sum(reach_dist(k, p, q) for q in nearest_neighbors[p])\n        lrds[p] = k / sum_reach_dist if sum_reach_dist != 0 else 0\n    \n    # Step 5: Compute Local Outlier Factor (LOF) for each point\n    lofs = np.zeros(n)\n    for p in range(n):\n        lrd_p = lrds[p]\n        if lrd_p == 0:\n            lofs[p] = 0\n            continue\n        lrd_sum = sum(lrds[q] for q in nearest_neighbors[p])\n        lofs[p] = (lrd_sum / k) / lrd_p\n    \n    # Round every LOF score to the nearest 4th decimal place\n    lofs_rounded = np.round(lofs, 4).tolist()\n    \n    # Find indices of all samples whose LOF score is strictly larger than epsilon\n    outlier_indices = [i for i, lof in enumerate(lofs_rounded) if lof > epsilon]\n    outlier_indices.sort()\n    \n    return lofs_rounded, outlier_indices\n\n# Example usage:\n# data = np.random.rand(10, 2)  # 10 samples in 2-dimensional space\n# k = 3\n# epsilon = 1.5\n# lof_scores, outlier_indices = local_outlier_factor(data, k, epsilon)\n# print(\"LOF Scores:\", lof_scores)\n# print(\"Outlier Indices:\", outlier_indices)\n```\n\nThis script implements the Local Outlier Factor (LOF) algorithm from scratch, following the provided steps and constraints. It computes the necessary pair-wise distances, identifies k-nearest neighbors, calculates reachability distances, local reachability densities, and finally, computes the LOF scores. The LOF scores are rounded to four decimal places, and indices of samples with scores above a specified epsilon are returned."}
{"task_id": 574, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n\n    for c in range(m):\n        base = 10 * (c // 2)\n        x_train = np.random.uniform(base + 1, base + 9, n_train)\n        y_train = np.random.uniform(base + 1, base + 9, n_train)\n        X_train.append(np.column_stack((x_train, y_train)))\n        y_train_labels = np.full(n_train, c, dtype=int)\n        y_train.extend(y_train_labels)\n\n        x_val = np.random.uniform(base + 1, base + 9, n_val)\n        y_val = np.random.uniform(base + 1, base + 9, n_val)\n        X_val.append(np.column_stack((x_val, y_val)))\n        y_val_labels = np.full(n_val, c, dtype=int)\n        y_val.extend(y_val_labels)\n\n    X_train = np.round(np.vstack(X_train), 4)\n    X_val = np.round(np.vstack(X_val), 4)\n    y_train = np.array(y_train)\n    y_val = np.array(y_val)\n\n    return X_train, X_val, y_train, y_val\n```"}
{"task_id": 579, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef euclidean_distance(point1, point2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((point1 - point2) ** 2))\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    # Initialize centroids as the first k points\n    centroids = X[:k].astype(float)\n    \n    for _ in range(max_iters):\n        # Assignment step: Assign each point to the nearest centroid\n        labels = []\n        for point in X:\n            distances = [euclidean_distance(point, center) for center in centroids]\n            min_distance_index = np.argmin(distances)\n            labels.append(min_distance_index)\n        \n        # Update step: Recalculate centroids\n        new_centroids = np.array([X[labels == i].mean(axis=0) if np.any(labels == i) else centroids[i] for i in range(k)])\n        \n        # Check for convergence\n        if np.allclose(centroids, new_centroids):\n            break\n        \n        centroids = new_centroids\n    \n    # Round the centroids to 4 decimal places\n    rounded_centroids = np.round(centroids, 4).tolist()\n    \n    return labels, rounded_centroids\n\n# Example usage:\n# X = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# k = 3\n# labels, centers = kmeans(X, k)\n# print(\"Labels:\", labels)\n# print(\"Centers:\", centers)\n```\n\nThis script implements the K-Means clustering algorithm as described, using the first `k` points as initial centroids, and iterating until convergence or reaching the maximum number of iterations. The centroids are rounded to four decimal places before being returned."}
{"task_id": 581, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    m, n = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n\n    if learning_rate == 0 or iterations == 0:\n        return [round(weight, 4) for weight in weights], round(bias, 4)\n\n    for _ in range(iterations):\n        predictions = np.dot(X, weights) + bias\n        residuals = y - predictions\n\n        gradient_b = -2 * np.sum(residuals)\n        bias -= (learning_rate / m) * gradient_b\n\n        for j in range(n):\n            gradient_wj = -2 * np.dot(X[:, j], residuals) + l1_penalty * np.sign(weights[j]) + 2 * l2_penalty * weights[j]\n            weights[j] -= (learning_rate / m) * gradient_wj\n\n    return [round(weight, 4) for weight in weights], round(bias, 4)\n```\n\nThis script defines the `elastic_net_regression` function, which implements Elastic-Net regularized linear regression using batch gradient descent. The function initializes the weights and bias to zero, checks for early termination conditions, and iteratively updates the parameters based on the computed gradients. The final weights and bias are rounded to four decimal places before being returned."}
{"task_id": 591, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    # Start with the input vector\n    current_input = np.array(x, dtype=float)\n    \n    # Iterate over each layer\n    for L, weight_matrix in enumerate(weights):\n        # Convert the current input to a numpy array and add bias term\n        current_input = np.insert(current_input, 0, 1.0)\n        \n        # Compute the dot product with the weight matrix\n        z = np.dot(current_input, weight_matrix.T)\n        \n        # Apply ReLU activation for all layers except the last one\n        if L < len(weights) - 1:\n            current_input = np.maximum(0, z)\n        else:\n            current_input = z\n    \n    # Round the final output to four decimal places\n    if len(current_input) == 1:\n        return round(current_input[0], 4)\n    else:\n        return [round(value, 4) for value in current_input]\n\n# Example usage:\n# weights = [\n#     [[-0.5, 0.5, 1.0], [0.5, -1.0, 1.5]],  # Layer 0 (input layer with 2 neurons)\n#     [[-1.0, -1.0, -1.0]]                   # Layer 1 (output layer with 1 neuron)\n# ]\n# x = [0.1, 0.2]\n# print(neural_net_predict(weights, x))  # Example output: 0.0\n```\n\nThis script defines the `neural_net_predict` function, which performs a forward pass through a fully-connected feed-forward neural network with the given weights and input vector. The function handles the addition of bias terms, computes dot products, and applies ReLU activation where necessary. The final output is rounded to four decimal places before being returned."}
{"task_id": 595, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Your task: implement here. See docstring in the description.\"\"\"\n    # Step 1: Initialize centroids with the first k samples\n    centroids = X[:k].copy()\n    \n    for _ in range(max_iters):\n        # Step 2.a: Assign each sample to the nearest centroid\n        distances = np.sum((X[:, np.newaxis] - centroids) ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Step 2.b: Update centroids\n        new_centroids = np.array([X[labels == i].mean(axis=0) if np.any(labels == i) else centroids[i] for i in range(k)])\n        \n        # Check for convergence\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 1e-4):\n            break\n        \n        centroids = new_centroids\n    \n    # Step 3: Sort centroids lexicographically and round them\n    sorted_centroids = np.round(np.sort(centroids, axis=0), decimals=4).tolist()\n    \n    return sorted_centroids\n\n# Example usage:\n# X = np.array([[1, 2], [1, 4], [1, 0],\n#               [4, 2], [4, 4], [4, 0]])\n# k = 2\n# print(kmeans_centroids(X, k))\n```\n\nThis script defines the `kmeans_centroids` function, which performs K-Means clustering from scratch and returns the sorted, rounded centroids as specified in the task description. The function initializes centroids using the first `k` samples, iteratively assigns samples to the nearest centroid, updates the centroids, checks for convergence, and finally sorts and rounds the centroids before returning them."}
