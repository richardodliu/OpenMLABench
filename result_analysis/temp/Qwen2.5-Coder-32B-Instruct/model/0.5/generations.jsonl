{"task_id": 0, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Implement Ridge (L2-regularised) Linear Regression using its closed-form solution.\n    \n    Parameters:\n    - data: np.ndarray where the last column is the target y and all preceding columns are the features X.\n    - alpha: float, the regularisation strength.\n    \n    Returns:\n    - A list of coefficients (weights) rounded to 4 decimal places, or -1 if the matrix is not invertible.\n    \"\"\"\n    # Split the data into features and target\n    X = data[:, :-1]\n    y = data[:, -1]\n    \n    # Add a bias term (intercept) to the features\n    X = np.hstack([np.ones((X.shape[0], 1)), X])\n    \n    # Compute the identity matrix with size equal to the number of columns in X\n    I = np.identity(X.shape[1])\n    \n    # Compute the matrix to be inverted\n    A = X.T @ X + alpha * I\n    \n    # Check if the matrix A is invertible\n    if np.linalg.det(A) == 0:\n        return -1\n    \n    # Compute the weight vector\n    w = np.linalg.inv(A) @ X.T @ y\n    \n    # Return the weight vector rounded to 4 decimal places as a list\n    return w.round(4).tolist()\n\n# Example usage:\n# data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n# alpha = 0.1\n# print(ridge_regression(data, alpha))\n```\n\nThis script defines the `ridge_regression` function, which performs Ridge Regression using the closed-form solution. It handles the addition of a bias term, computes the necessary matrices, checks for invertibility, and returns the coefficients rounded to four decimal places. If the matrix is not invertible, it returns `-1`."}
{"task_id": 1, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    \n    # Compute the Gram matrix\n    K = np.dot(X_train, X_train.T)\n    \n    for _ in range(n_iter):\n        updated = False\n        for i in range(n_samples):\n            # Compute the activation using the dual form\n            activation = np.sum(alpha * y_train * K[:, i])\n            # Check the margin\n            if y_train[i] * (activation + b) <= 0:\n                # Update alpha and b\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n                # Restart the scan\n                break\n        # If no updates were made, the algorithm has converged\n        if not updated:\n            break\n    \n    # Compute the primal weight vector w\n    w = np.sum(alpha * y_train[:, np.newaxis] * X_train, axis=0)\n    \n    # Return w and b rounded to 4 decimal places\n    return [round(wi, 4) for wi in w], round(b, 4)\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 3], [2, 1], [3, 2]])\n# y_train = np.array([1, 1, 1, -1, -1])\n# w, b = perceptron_dual(X_train, y_train)\n# print(\"Weight vector:\", w)\n# print(\"Bias:\", b)\n```\n\nThis script implements the dual-form perceptron learning algorithm as described. It includes the computation of the Gram matrix to handle the inner products efficiently and updates the dual parameters `alpha` and the bias `b` according to the perceptron update rule. The primal weight vector `w` is computed from the final `alpha` values after training. The function returns the weight vector and bias, both rounded to four decimal places."}
{"task_id": 2, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    \n    def identity_link(mu):\n        return mu\n    \n    def identity_inv_link(eta):\n        return eta\n    \n    def identity_derivative(mu):\n        return np.ones_like(mu)\n    \n    def log_link(mu):\n        return np.log(mu)\n    \n    def log_inv_link(eta):\n        return np.exp(eta)\n    \n    def log_derivative(mu):\n        return 1.0 / mu\n    \n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n    \n    def logit_inv_link(eta):\n        return 1.0 / (1.0 + np.exp(-eta))\n    \n    def logit_derivative(mu):\n        return 1.0 / (mu * (1 - mu))\n    \n    return {\n        \"identity\": {\n            \"link\": identity_link,\n            \"inv_link\": identity_inv_link,\n            \"derivative\": identity_derivative\n        },\n        \"log\": {\n            \"link\": log_link,\n            \"inv_link\": log_inv_link,\n            \"derivative\": log_derivative\n        },\n        \"logit\": {\n            \"link\": logit_link,\n            \"inv_link\": logit_inv_link,\n            \"derivative\": logit_derivative\n        }\n    }\n\n# Example usage:\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links[\"logit\"][\"link\"](mu)        # \u2192 [-1.3863, 1.3863]\nmu2 = links[\"logit\"][\"inv_link\"](eta)    # \u2192 [0.2, 0.8]\n\nprint(\"eta (logit link):\", np.round(eta, 4))\nprint(\"mu2 (logit inv_link):\", np.round(mu2, 4))\n```\n\nThis script defines the required GLM link functions for the identity, log, and logit links, including their inverses and derivatives. The functions are designed to work with both numpy scalars and arrays, and the example usage demonstrates how to use the returned dictionary of functions."}
{"task_id": 3, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    \n    def build_tree(indices):\n        if len(indices) < 3:\n            return indices\n        \n        feature_index = np.random.randint(data.shape[1])\n        feature_values = data[indices, feature_index]\n        down = np.min(feature_values)\n        up = np.max(feature_values)\n        v = np.random.uniform(down, up)\n        \n        left_indices = [i for i in indices if data[i, feature_index] <= v]\n        right_indices = [i for i in indices if data[i, feature_index] > v]\n        \n        left_child = build_tree(left_indices)\n        right_child = build_tree(right_indices)\n        \n        return (left_child, right_child)\n    \n    def traverse_tree(node, depth, sample_depths):\n        if isinstance(node, list):\n            for index in node:\n                sample_depths[index] = depth\n        else:\n            left_child, right_child = node\n            traverse_tree(left_child, depth + 1, sample_depths)\n            traverse_tree(right_child, depth + 1, sample_depths)\n    \n    root = build_tree(list(range(data.shape[0])))\n    sample_depths = [0] * data.shape[0]\n    traverse_tree(root, 0, sample_depths)\n    \n    return sample_depths\n\n# Example usage:\ndata = np.arange(5).reshape(-1, 1)\nprint(isolation_tree_path_length(data))  # Output: [2, 2, 2, 1, 1]\n```"}
{"task_id": 7, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    min_support_count = math.ceil(minsup * N)\n    \n    # Step 1: Generate all unique items (1-itemsets)\n    unique_items = set(item for transaction in transactions for item in transaction)\n    \n    # Step 2: Generate all possible itemsets and count their supports\n    frequent_itemsets = {}\n    for k in range(1, len(unique_items) + 1):\n        # Generate all possible k-itemsets\n        candidate_itemsets = combinations(unique_items, k)\n        \n        # Count the support of each candidate itemset\n        for itemset in candidate_itemsets:\n            itemset_count = sum(set(transaction) >= set(itemset) for transaction in transactions)\n            \n            # If the itemset is frequent, add it to the result\n            if itemset_count >= min_support_count:\n                frequent_itemsets[itemset] = itemset_count\n    \n    return frequent_itemsets\n\n# Example usage\ntransactions = [\n    ['bread', 'milk'],\n    ['bread', 'diaper', 'beer', 'egg'],\n    ['milk', 'diaper', 'beer', 'coke'],\n    ['bread', 'milk', 'diaper', 'beer'],\n    ['bread', 'milk', 'diaper', 'coke']\n]\nminsup = 0.6\n\noutput = find_frequent_itemsets(transactions, minsup)\nprint(output)\n```\n\nThis script defines the function `find_frequent_itemsets` which takes a list of transactions and a minimum support threshold, and returns a dictionary of frequent itemsets with their support counts. The function uses combinations to generate all possible itemsets and counts their occurrences in the transactions to determine if they meet the minimum support threshold."}
{"task_id": 11, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    # Step 1: Initialize centres as the first k samples\n    centres = data[:k].copy()\n    \n    for iteration in range(max_iter):\n        # Step 2: Assign each sample to the nearest centre\n        labels = []\n        for sample in data:\n            distances = np.sum((sample - centres) ** 2, axis=1)\n            labels.append(np.argmin(distances))\n        \n        # Step 3: Recompute each centre as the mean of its assigned samples\n        new_centres = np.zeros_like(centres)\n        counts = np.zeros(k, dtype=int)\n        \n        for label, sample in zip(labels, data):\n            new_centres[label] += sample\n            counts[label] += 1\n        \n        # Handle empty clusters by reinitializing with a random sample\n        for i in range(k):\n            if counts[i] == 0:\n                random_index = np.random.randint(0, data.shape[0])\n                new_centres[i] = data[random_index]\n            else:\n                new_centres[i] /= counts[i]\n        \n        # Step 4: Check for convergence\n        max_change = np.max(np.sum((new_centres - centres) ** 2, axis=1))\n        if max_change < epsilon:\n            break\n        \n        centres = new_centres\n    \n    # Round centres to 4 decimal places\n    rounded_centres = np.round(centres, 4).tolist()\n    \n    return rounded_centres, labels\n\n# Example usage:\n# data = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# k = 3\n# centres, labels = kmeans(data, k)\n# print(\"Centres:\", centres)\n# print(\"Labels:\", labels)\n```\n\nThis script implements the K-Means clustering algorithm from scratch, adhering to the specified requirements. It initializes the cluster centres using the first `k` samples, assigns each data point to the nearest centre, updates the centres, and handles empty clusters by reinitializing them with random samples. The algorithm stops when the maximum change in any centre is less than `epsilon` or when `max_iter` iterations are reached. The final centres are rounded to four decimal places before being returned."}
{"task_id": 13, "completion_id": 0, "completion": "```\nimport numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_users, n_items = data.shape\n    \n    # Step 1: Build the item-item similarity matrix S\n    S = np.zeros((n_items, n_items))\n    \n    for i in range(n_items):\n        for j in range(i + 1, n_items):\n            # Find users that rated both items i and j\n            users_who_rated_both = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            \n            if len(users_who_rated_both) == 0:\n                S[i, j] = S[j, i] = 0\n            else:\n                v1 = data[users_who_rated_both, i]\n                v2 = data[users_who_rated_both, j]\n                \n                if criterion == 'cosine':\n                    std_v1 = np.std(v1)\n                    std_v2 = np.std(v2)\n                    \n                    if std_v1 > 1e-3 and std_v2 > 1e-3:\n                        v1_centered = v1 - np.mean(v1)\n                        v2_centered = v2 - np.mean(v2)\n                        cosine_sim = np.dot(v1_centered, v2_centered) / (np.linalg.norm(v1_centered) * np.linalg.norm(v2_centered))\n                        S[i, j] = S[j, i] = cosine_sim\n                    else:\n                        S[i, j] = S[j, i] = 0\n                elif criterion == 'pearson':\n                    pearson_corr = np.corrcoef(v1, v2)[0, 1]\n                    S[i, j] = S[j, i] = pearson_corr\n    \n    # Step 2: Collect rated items for the active user\n    rated_items = np.where(data[user_ind, :] > 0)[0]\n    r = data[user_ind, rated_items]\n    \n    # Step 3: Compute predicted attractiveness score for each unrated item\n    scores = defaultdict(float)\n    \n    for t in range(n_items):\n        if t not in rated_items:\n            numerator = np.sum(r * S[t, rated_items])\n            denominator = np.sum(np.abs(S[t, rated_items]))\n            \n            if denominator > 0:\n                scores[t] = numerator / denominator\n    \n    # Step 4: Sort items by predicted score and return top k\n    sorted_items = sorted(scores, key=scores.get, reverse=True)\n    \n    return sorted_items[:k]\n\n# Example usage:\n# data = np.array([[5, 3, 0, 1],\n#                  [4, 0, 0, 1],\n#                  [1, 1, 0, 5],\n#                  [1, 0, 0, 4],\n#                  [0, 1, 5, 4]])\n# user_ind = 0\n# k = 2\n# print(knn_recommend(data, user_ind, k, criterion='cosine'))\n```\n\nThis script defines the `knn_recommend` function which implements the item-based k-NN collaborative filtering recommender as described. It constructs the item-item similarity matrix based on the specified similarity criterion, computes the predicted attractiveness scores for unrated items, and returns the top `k` recommendations."}
{"task_id": 19, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_gain = 0\n    best_feature = None\n    best_threshold = None\n\n    def leaf_loss(g_sum, h_sum):\n        return -0.5 * (g_sum ** 2) / (h_sum + lam) + gamma\n\n    G = np.sum(g)\n    H = np.sum(h)\n\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n        if len(unique_values) < 2:\n            continue\n\n        # Sort indices by feature value\n        sorted_indices = np.argsort(feature_values)\n        g_sorted = g[sorted_indices]\n        h_sorted = h[sorted_indices]\n        feature_values_sorted = feature_values[sorted_indices]\n\n        G_left = 0\n        H_left = 0\n\n        for i in range(n_samples - 1):\n            G_left += g_sorted[i]\n            H_left += h_sorted[i]\n            G_right = G - G_left\n            H_right = H - H_left\n\n            # Ensure there are at least two samples on each side\n            if i < 1 or i >= n_samples - 2:\n                continue\n\n            # Calculate gain\n            gain = (leaf_loss(G, H) - leaf_loss(G_left, H_left) - leaf_loss(G_right, H_right))\n\n            # Update best split if this one is better\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature_index\n                best_threshold = (feature_values_sorted[i] + feature_values_sorted[i + 1]) / 2\n\n    if best_gain > 0:\n        return (best_feature, best_threshold)\n    else:\n        return None\n```\n\nThis script defines the `best_split` function, which evaluates all possible splits for a given node in a gradient boosting tree and returns the split with the highest gain. If no split results in a positive gain, it returns `None`. The function considers every unique value of every feature as a potential threshold and ensures that each split leaves at least two instances on each side."}
{"task_id": 20, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Convert input to a NumPy array for processing\n    is_scalar = isinstance(x, (int, float))\n    x = np.array(x)\n    \n    # Compute sigmoid\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    \n    # Compute gradient of sigmoid\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    \n    # Round results to 4 decimal places\n    sigmoid_x_rounded = np.round(sigmoid_x, 4)\n    gradient_x_rounded = np.round(gradient_x, 4)\n    \n    # Convert back to scalar if input was a scalar\n    if is_scalar:\n        return float(sigmoid_x_rounded), float(gradient_x_rounded)\n    else:\n        return sigmoid_x_rounded.tolist(), gradient_x_rounded.tolist()\n\n# Example usage:\n# scalar_input = 0.5\n# array_input = np.array([0.5, -1.0, 2.0])\n# list_input = [0.5, -1.0, 2.0]\n\n# print(sigmoid_activation(scalar_input))  # Output: (0.6225, 0.235)\n# print(sigmoid_activation(array_input))   # Output: ([0.6225, 0.2689, 0.8808], [0.235, 0.1966, 0.1049])\n# print(sigmoid_activation(list_input))    # Output: ([0.6225, 0.2689, 0.8808], [0.235, 0.1966, 0.1049])\n```\n\nThis script defines the `sigmoid_activation` function, which computes the sigmoid and its gradient for a given input, handling scalars, lists, and NumPy arrays as specified. The results are rounded to four decimal places, and the function returns the appropriate type based on the input."}
{"task_id": 21, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef adaboost_1d_predict(x_train: list[float],\n                        y_train: list[int],\n                        x_test: list[float],\n                        epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    def decision_stump_error(d, theta, x, y, weights):\n        predictions = np.ones_like(y)\n        if d == 0:\n            predictions[x > theta] = -1\n        else:\n            predictions[x <= theta] = -1\n        weighted_error = np.sum(weights * (predictions != y)) / np.sum(weights)\n        return weighted_error, predictions\n\n    n_samples = len(x_train)\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n\n    while True:\n        best_error = float('inf')\n        best_stump = None\n        best_predictions = None\n\n        # Sort the data and find thresholds\n        sorted_indices = np.argsort(x_train)\n        x_sorted = np.array(x_train)[sorted_indices]\n        y_sorted = np.array(y_train)[sorted_indices]\n        weights_sorted = weights[sorted_indices]\n\n        # Generate thresholds\n        thresholds = [(x_sorted[i] + x_sorted[i + 1]) / 2 for i in range(n_samples - 1)]\n\n        for d in [0, 1]:\n            for theta in thresholds:\n                error, predictions = decision_stump_error(d, theta, x_sorted, y_sorted, weights_sorted)\n                if error < best_error:\n                    best_error = error\n                    best_stump = (d, theta)\n                    best_predictions = predictions[sorted_indices.argsort()]  # Reorder predictions to original order\n\n        if best_error == 0:\n            alpha = float('inf')\n        else:\n            alpha = 0.5 * math.log((1 - best_error) / best_error)\n\n        alphas.append(alpha)\n        stumps.append(best_stump)\n\n        # Update weights\n        weights *= np.exp(-alpha * np.array(y_train) * best_predictions)\n        weights /= np.sum(weights)\n\n        # Calculate ensemble error on training data\n        ensemble_predictions = np.sum([alpha * np.array(pred) for alpha, (_, _, pred) in zip(alphas, stumps, [decision_stump_error(d, theta, np.array(x_train), np.array(y_train), weights) for d, theta in stumps])], axis=0)\n        ensemble_error = np.mean(np.sign(ensemble_predictions) != np.array(y_train))\n\n        if ensemble_error <= epsilon:\n            break\n\n    # Predict on test data\n    test_predictions = np.zeros(len(x_test))\n    for alpha, (d, theta) in zip(alphas, stumps):\n        predictions = np.ones_like(x_test)\n        if d == 0:\n            predictions[np.array(x_test) > theta] = -1\n        else:\n            predictions[np.array(x_test) <= theta] = -1\n        test_predictions += alpha * predictions\n\n    return np.sign(test_predictions).astype(int).tolist()\n```\n\nThis script implements the AdaBoost algorithm with one-dimensional decision stumps as weak learners. The function `adaboost_1d_predict` trains the ensemble on the provided training data and returns predictions for the test data. The training stops when the training error of the ensemble is less than or equal to the specified `epsilon`."}
{"task_id": 25, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    # Compute the squared Euclidean distance between each test sample and each training sample\n    # This is done using broadcasting to avoid explicit loops\n    diff = X_train[:, np.newaxis, :] - X_test[np.newaxis, :, :]\n    squared_distances = np.sum(diff ** 2, axis=2)\n    \n    # Compute the Gaussian kernel values\n    kernel_values = np.exp(-gamma * squared_distances)\n    \n    # Compute the decision function g(z) for each test sample\n    # This is a dot product of the kernel values with alpha * y_train, plus the bias b\n    g_z = np.dot(alpha * y_train, kernel_values) + b\n    \n    # Predict the class labels based on the sign of g(z)\n    predictions = np.sign(g_z).astype(int)\n    \n    # Convert the predictions to a list of integers\n    return predictions.tolist()\n```\n\nThis script defines the `gaussian_svm_predict` function, which computes the predicted labels for test samples using a pre-trained Gaussian-kernel SVM. The function uses vectorized operations with NumPy to efficiently compute the necessary values without explicit loops. The predictions are returned as a list of integers, where each integer is either 1 or -1."}
{"task_id": 28, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    # Convert the input list of lists to a numpy array\n    X_np = np.array(X)\n    m, n = X_np.shape\n    \n    # Check if k is within the valid range\n    if k < 1 or k > min(m, n):\n        return -1\n    \n    # Perform truncated SVD\n    U, s, Vt = np.linalg.svd(X_np, full_matrices=False)\n    \n    # Truncate the SVD components to keep only the top k singular values/vectors\n    U_k = U[:, :k]\n    s_k = s[:k]\n    Vt_k = Vt[:k, :]\n    \n    # Reconstruct the matrix using the truncated SVD\n    X_hat_np = U_k @ np.diag(s_k) @ Vt_k\n    \n    # Calculate the mean squared error\n    mse = np.mean((X_np - X_hat_np) ** 2)\n    \n    # Round the reconstructed matrix and the MSE to four decimal places\n    X_hat = np.round(X_hat_np, 4).tolist()\n    mse = round(mse, 4)\n    \n    return X_hat, mse\n```\n\nThis script defines the `linear_autoencoder` function, which performs the required operations using NumPy for matrix operations and SVD computation. The function checks if the input `k` is valid, computes the truncated SVD, reconstructs the matrix, calculates the mean squared error, and returns the results rounded to four decimal places."}
{"task_id": 29, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                           y_train: list[float] | np.ndarray,\n                           x_query: float,\n                           epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    \n    # Sort the training data by the feature values\n    sort_indices = np.argsort(x_train)\n    x_train_sorted = x_train[sort_indices]\n    y_train_sorted = y_train[sort_indices]\n    \n    # Initialize residuals as the training targets\n    residuals = y_train_sorted.copy()\n    \n    # Initialize the ensemble prediction as zero\n    ensemble_prediction = np.zeros_like(y_train_sorted)\n    \n    # Calculate candidate split points (midpoints between consecutive x values)\n    candidate_splits = (x_train_sorted[1:] + x_train_sorted[:-1]) / 2\n    \n    # Function to calculate RSS for a given split\n    def calculate_rss(split):\n        left_indices = x_train_sorted <= split\n        right_indices = x_train_sorted > split\n        c1 = np.mean(residuals[left_indices])\n        c2 = np.mean(residuals[right_indices])\n        predicted = np.where(left_indices, c1, c2)\n        rss = np.sum((residuals - predicted) ** 2)\n        return rss, c1, c2\n    \n    # Iteratively add the best stump until the RSS is below epsilon\n    while True:\n        best_rss = float('inf')\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n        \n        for split in candidate_splits:\n            rss, c1, c2 = calculate_rss(split)\n            if rss < best_rss:\n                best_rss = rss\n                best_split = split\n                best_c1 = c1\n                best_c2 = c2\n        \n        # Add the best stump to the ensemble\n        ensemble_prediction += np.where(x_train_sorted <= best_split, best_c1, best_c2)\n        \n        # Update residuals\n        residuals = y_train_sorted - ensemble_prediction\n        \n        # Check if the RSS is below the tolerance\n        if best_rss < epsilon:\n            break\n    \n    # Predict the value for x_query\n    prediction = 0.0\n    for split, c1, c2 in zip(candidate_splits, best_c1, best_c2):\n        if x_query <= split:\n            prediction += c1\n        else:\n            prediction += c2\n    \n    # Return the final prediction rounded to 4 decimal places\n    return round(prediction, 4)\n```\n\nThis script implements the one-dimensional gradient boosting regressor using decision stumps as described in the task. The function `predict_boosting_tree` takes training data, a query point, and an optional tolerance, and returns the predicted value for the query point rounded to four decimal places."}
{"task_id": 34, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None) -> np.ndarray:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s based on the specified shape and sparsity.\n    \n    Parameters:\n    - shape (tuple[int, ...]): The desired shape of the output tensor.\n    - sparsity (float): The probability of generating a 1.0 in the tensor. Must be in the range [0, 1].\n    - seed (int | None): Optional seed for the random number generator to ensure reproducibility.\n    \n    Returns:\n    - np.ndarray: A NumPy array of the specified shape with entries 1.0 with probability equal to sparsity and 0.0 otherwise.\n                  Returns -1 if the sparsity is outside the range [0, 1].\n    \"\"\"\n    if not (0 <= sparsity <= 1):\n        return -1\n    \n    if seed is not None:\n        np.random.seed(seed)\n    \n    random_tensor = np.random.rand(*shape)\n    binary_tensor = (random_tensor < sparsity).astype(float)\n    \n    return binary_tensor\n\n# Example usage:\n# result = random_binary_tensor(shape=(2, 3), sparsity=0.3, seed=42)\n# print(result)\n```\n\nThis script defines the `random_binary_tensor` function, which generates a NumPy array of the specified shape filled with 0.0s and 1.0s based on the given sparsity. The function checks if the sparsity is within the valid range and optionally sets a seed for reproducibility. If the sparsity is invalid, it returns -1. Otherwise, it generates the random tensor and converts it to a binary tensor based on the sparsity threshold."}
{"task_id": 39, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    median_index = n_samples // 2\n    \n    # Get the indices that would partition the array\n    partitioned_indices = np.argpartition(data[:, d], median_index)\n    \n    # The pivot index is the median index in the partitioned array\n    pivot = partitioned_indices[median_index]\n    \n    # Separate the indices into left and right based on the median value\n    left_indices = partitioned_indices[:median_index]\n    right_indices = partitioned_indices[median_index + 1:]\n    \n    # Filter out the indices that are strictly less or greater than the median value\n    left = [i for i in left_indices if data[i, d] < data[pivot, d]]\n    right = [i for i in right_indices if data[i, d] > data[pivot, d]]\n    \n    # Sort the left and right indices\n    left.sort()\n    right.sort()\n    \n    return pivot, left, right\n\n# Example usage:\n# data = np.array([[3, 2], [1, 4], [5, 6], [7, 8], [9, 0]])\n# d = 0\n# print(get_split(data, d))\n```\n\nThis script defines the `get_split` function, which performs a median split on a given two-dimensional NumPy array `data` along a specified column `d`. The function uses `numpy.argpartition` to find the median index efficiently in O(n) time, and then separates the indices into `left` and `right` based on the median value. The resulting lists are sorted to ensure deterministic output."}
{"task_id": 40, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    # Assertions to check pre-conditions\n    assert x.ndim == 1, \"Input signal must be one-dimensional.\"\n    assert stride >= 1, \"Stride must be a positive integer.\"\n    assert len(x) >= frame_width, \"Length of the input signal must be at least the frame width.\"\n    \n    # Calculate the number of frames\n    n_frames = (len(x) - frame_width) // stride + 1\n    \n    # Calculate the strides for the new array\n    x_stride = x.strides[0]\n    new_shape = (n_frames, frame_width)\n    new_strides = (x_stride * stride, x_stride)\n    \n    # Create the view using as_strided\n    frames = as_strided(x, shape=new_shape, strides=new_strides, writeable=writeable)\n    \n    return frames\n\n# Example usage:\nif __name__ == \"__main__\":\n    x = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    frame_width = 3\n    stride = 2\n    frames = to_frames(x, frame_width, stride, writeable=False)\n    print(\"Framed signal:\\n\", frames)\n    print(\"Is the view writeable?\", frames.flags.writeable)\n```\n\nThis script defines the `to_frames` function, which converts a one-dimensional NumPy array into overlapping frames using low-level stride manipulation. The function includes assertions to ensure the input meets the specified pre-conditions. The example usage at the bottom demonstrates how to use the function and checks if the resulting view is writeable."}
{"task_id": 48, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Convert input to a numpy array if it's not already\n    X = np.array(X)\n    \n    # Check if the matrix is two-dimensional\n    if X.ndim != 2:\n        return False\n    \n    # Check if all elements are between 0 and 1 inclusive\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    \n    # Check if each row sums to 1 within a tolerance of 1e-8\n    if not np.allclose(np.sum(X, axis=1), 1, atol=1e-8):\n        return False\n    \n    return True\n\n# Example usage:\n# matrix = [[0.5, 0.5], [0.3, 0.7]]\n# print(is_stochastic(matrix))  # Output: True\n```"}
{"task_id": 55, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n, d = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    \n    for iteration in range(max_iter):\n        # Mini-batch indices\n        start_idx = (iteration * batch_size) % n\n        end_idx = (start_idx + batch_size) % n\n        \n        if start_idx < end_idx:\n            X_batch = X[start_idx:end_idx]\n            y_batch = y[start_idx:end_idx]\n        else:\n            X_batch = np.vstack((X[start_idx:], X[:end_idx]))\n            y_batch = np.concatenate((y[start_idx:], y[:end_idx]))\n        \n        # Compute gradient\n        gradient = (1 / len(X_batch)) * X_batch.T @ (X_batch @ w - y_batch)\n        \n        # Update running average of squared gradients\n        s = rho * s + (1 - rho) * (gradient ** 2)\n        \n        # Update weights\n        w -= eta * gradient / (np.sqrt(s) + eps_station)\n        \n        # Check early stopping condition\n        if np.linalg.norm(gradient) < epsilon:\n            break\n    \n    return [round(weight, 4) for weight in w]\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([7, 8, 9])\n# print(rms_prop(X, y))\n```\n\nThis script defines the `rms_prop` function, which implements the RMSprop optimization algorithm for linear regression. The function takes in the feature matrix `X`, target vector `y`, and several hyperparameters, and returns the learned weight vector as a list of floats rounded to four decimal places. The function handles mini-batching and includes an early stopping mechanism based on the norm of the gradient."}
{"task_id": 56, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n    \"\"\"Compute the SoftPlus activation or its gradient.\n    \n    Args:\n        x (scalar, list, or np.array): Input values.\n        deriv (bool): If True, compute the gradient (sigmoid); otherwise, compute the SoftPlus.\n    \n    Returns:\n        list or float: Computed SoftPlus or its gradient, rounded to 4 decimal places.\n    \"\"\"\n    \n    # Helper function to apply SoftPlus in a numerically stable way\n    def stable_softplus(val):\n        if val > 30:  # Threshold to avoid overflow in exp(val)\n            return val\n        else:\n            return np.log1p(np.exp(val))\n    \n    # Helper function to apply sigmoid in a numerically stable way\n    def stable_sigmoid(val):\n        if val > 0:\n            return 1 / (1 + np.exp(-val))\n        else:\n            return np.exp(val) / (1 + np.exp(val))\n    \n    # Convert input to a numpy array for vectorized operations\n    if isinstance(x, (list, np.ndarray)):\n        x = np.array(x)\n        scalar_input = False\n    else:\n        x = np.array([x])\n        scalar_input = True\n    \n    # Compute SoftPlus or its gradient\n    if deriv:\n        result = np.vectorize(stable_sigmoid)(x)\n    else:\n        result = np.vectorize(stable_softplus)(x)\n    \n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n    \n    # Return as a list or a single float\n    if scalar_input:\n        return float(result[0])\n    else:\n        return result.tolist()\n\n# Example usage:\n# print(softplus([-10, -1, 0, 1, 10]))  # SoftPlus values\n# print(softplus([-10, -1, 0, 1, 10], deriv=True))  # Sigmoid values\n```\n\nThis script defines the `softplus` function, which computes the SoftPlus activation or its gradient based on the `deriv` flag. It uses `np.log1p` for numerical stability in computing the SoftPlus function and handles both scalar and array inputs. The results are rounded to four decimal places before being returned."}
{"task_id": 58, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    if N < 1:\n        raise ValueError(\"N must be at least 1\")\n\n    # Create N-gram and (N-1)-gram counters\n    ngram_counter = Counter(tuple(corpus[i:i+N]) for i in range(len(corpus) - N + 1))\n    if N > 1:\n        n1gram_counter = Counter(tuple(corpus[i:i+N-1]) for i in range(len(corpus) - N + 2))\n    else:\n        n1gram_counter = Counter(corpus)\n\n    log_prob = 0.0\n\n    # Calculate log-probability for each N-gram in the sequence\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i+N])\n        ngram_count = ngram_counter[ngram]\n        \n        if N > 1:\n            prefix = tuple(sequence[i:i+N-1])\n            prefix_count = n1gram_counter[prefix]\n        else:\n            prefix_count = len(corpus)\n\n        if ngram_count == 0 or prefix_count == 0:\n            return float('-inf')\n\n        prob = ngram_count / prefix_count\n        log_prob += np.log(prob)\n\n    return round(log_prob, 4)\n\n# Example usage:\n# corpus = [\"the\", \"cat\", \"sat\", \"on\", \"the\", \"mat\", \"the\", \"cat\", \"sat\"]\n# sequence = [\"the\", \"cat\", \"sat\"]\n# N = 2\n# print(unsmoothed_ngram_log_prob(corpus, sequence, N))  # Output should be a rounded log-probability\n```\n\nThis script defines the function `unsmoothed_ngram_log_prob` which calculates the log-probability of a given sequence under an unsmoothed Maximum-Likelihood Estimation (MLE) N-gram model trained on a provided corpus. The function handles both unigrams (N=1) and higher-order n-grams (N>1) and returns `float('-inf')` if any required count is zero. The result is rounded to four decimal places."}
{"task_id": 62, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef lasso_regression(X: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\", degree: int, reg_factor: float, n_iterations: int = 1000, tol: float = 1e-6) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    m = len(y)\n    \n    # Build the design matrix\n    design_matrix = np.vander(X, degree + 1, increasing=True)\n    \n    # Initialize weights\n    weights = np.zeros(degree + 1)\n    \n    for _ in range(n_iterations):\n        # Update the bias term\n        weights[0] = np.mean(y - design_matrix[:, 1:] @ weights[1:])\n        \n        max_change = 0\n        \n        for j in range(1, degree + 1):\n            X_j = design_matrix[:, j]\n            X_j_squared = X_j.T @ X_j\n            rho = X_j.T @ (y - design_matrix @ weights + weights[j] * X_j)\n            \n            # Soft thresholding\n            if rho < -reg_factor:\n                new_weight = (rho + reg_factor) / X_j_squared\n            elif rho > reg_factor:\n                new_weight = (rho - reg_factor) / X_j_squared\n            else:\n                new_weight = 0\n            \n            change = abs(new_weight - weights[j])\n            max_change = max(max_change, change)\n            \n            weights[j] = new_weight\n        \n        # Check for convergence\n        if max_change < tol:\n            break\n    \n    return [round(w, 4) for w in weights]\n\n# Example usage:\n# X = [1, 2, 3, 4, 5]\n# y = [2, 4, 6, 8, 10]\n# degree = 1\n# reg_factor = 0.1\n# print(lasso_regression(X, y, degree, reg_factor))\n```\n\nThis script defines the `lasso_regression` function, which performs univariate Lasso regression with polynomial feature expansion using coordinate descent. The function takes in the input data `X`, target values `y`, polynomial degree `degree`, regularization strength `reg_factor`, and optional parameters for the maximum number of iterations and tolerance for early stopping. It returns the learned coefficients rounded to four decimal places."}
{"task_id": 63, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector \u03b2_t for a given time index t in a Hidden Markov Model.\n\n    Parameters:\n    A (list[list[float]]): Transition probability matrix of shape (N, N).\n    B (list[list[float]]): Emission probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices (length T).\n    t (int): Time index (0 \u2264 t < T).\n\n    Returns:\n    list[float]: List containing the N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    N = len(A)  # Number of states\n    T = len(obs)  # Length of the observation sequence\n\n    # Initialize \u03b2 with ones for t = T-1\n    beta = np.ones(N)\n\n    # Calculate \u03b2 from T-2 to t\n    for i in range(T - 2, t - 1, -1):\n        beta_next = beta\n        beta = np.dot(A, B[:, obs[i + 1]] * beta_next)\n\n    # If t is T-1, we already have the result in beta\n    if t == T - 1:\n        beta = np.ones(N)\n\n    return [round(prob, 4) for prob in beta]\n\n# Example usage:\n# A = [[0.7, 0.3], [0.4, 0.6]]\n# B = [[0.1, 0.4, 0.5], [0.7, 0.2, 0.1]]\n# obs = [0, 1, 2]\n# t = 1\n# print(backward_beta(A, B, obs, t))  # Output: [0.1100, 0.0840]\n```\n\nThis script defines a function `backward_beta` that calculates the backward probability vector \\(\\beta_t\\) for a given time index \\(t\\) in a Hidden Markov Model. The function takes as input the transition probability matrix \\(A\\), the emission probability matrix \\(B\\), the list of observation indices `obs`, and the time index \\(t\\). It returns a list of the backward probabilities rounded to four decimal places."}
{"task_id": 65, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    # Check for empty inputs\n    if not A or not B or not pi or not obs:\n        return 0.0\n\n    N = len(A)  # Number of states\n    T = len(obs)  # Length of observation sequence\n\n    # Initialize the backward variables\n    beta = np.zeros((T, N))\n    beta[T-1, :] = 1.0  # Base case: beta_{T-1}(i) = 1 for all i\n\n    # Fill the beta table in a bottom-up manner\n    for t in range(T-2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t+1]] * beta[t+1, :])\n\n    # Calculate the probability of the observation sequence\n    prob = np.sum(pi * B[:, obs[0]] * beta[0, :])\n\n    return round(prob, 6)\n```\n\nThis script defines the `backward_prob` function which calculates the probability of an observation sequence given the parameters of a Hidden Markov Model using the backward algorithm. The function checks for empty inputs and returns `0.0` if any are found. It initializes the backward variables, fills them using the recursive formula, and then computes the sequence probability. The result is rounded to six decimal places before being returned."}
{"task_id": 69, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # Validate input dimensions\n    n = len(S)\n    if not A or len(A) != n or any(len(row) != n for row in A):\n        return -1\n    if not B or len(B) != n or not B[0] or not all(len(row) == len(B[0]) for row in B):\n        return -1\n    m = len(B[0])\n    if not observations:\n        return -1\n    if any(obs < 0 or obs >= m for obs in observations):\n        return -1\n\n    # Convert inputs to numpy arrays for easier manipulation\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    observations = np.array(observations)\n\n    # Initialize the forward variables\n    T = len(observations)\n    alpha = np.zeros((T, n))\n    alpha[0] = S * B[:, observations[0]]\n\n    # Compute the forward variables recursively\n    for t in range(1, T):\n        alpha[t] = (alpha[t-1] @ A) * B[:, observations[t]]\n\n    # Compute the total probability of the observation sequence\n    likelihood = np.sum(alpha[-1])\n    return round(likelihood, 4)\n\n# Example usage:\n# S = [0.6, 0.4]\n# A = [[0.7, 0.3], [0.4, 0.6]]\n# B = [[0.5, 0.4, 0.1], [0.1, 0.3, 0.6]]\n# observations = [0, 1, 2]\n# print(forward_algorithm(S, A, B, observations))  # Expected output: 0.0246\n```\n\nThis script defines the `forward_algorithm` function, which computes the likelihood of an observation sequence given an HMM using the forward algorithm. It includes input validation to ensure the dimensions are correct and that all observations are within the valid range. If the input is invalid, it returns -1. Otherwise, it calculates and returns the likelihood rounded to four decimal places."}
{"task_id": 70, "completion_id": 0, "completion": "```\npython\nfrom collections import Counter, defaultdict\n\nclass FPNode:\n    def __init__(self, item, support, parent=None):\n        self.item = item\n        self.support = support\n        self.parent = parent\n        self.children = defaultdict(FPNode)\n        self.link = None\n\nclass FPTree:\n    def __init__(self):\n        self.root = FPNode(None, 0)\n        self.header_table = defaultdict(lambda: None)\n\n    def insert(self, transaction, support):\n        current_node = self.root\n        for item in transaction:\n            if item in current_node.children:\n                current_node.children[item].support += support\n            else:\n                new_node = FPNode(item, support, current_node)\n                current_node.children[item] = new_node\n                if self.header_table[item] is None:\n                    self.header_table[item] = new_node\n                else:\n                    last_node = self.header_table[item]\n                    while last_node.link is not None:\n                        last_node = last_node.link\n                    last_node.link = new_node\n            current_node = current_node.children[item]\n\ndef find_frequent_items(transactions, min_support):\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    return {item: support for item, support in item_counts.items() if support >= min_support}\n\ndef build_fp_tree(transactions, frequent_items):\n    fp_tree = FPTree()\n    for transaction in transactions:\n        filtered_transaction = [item for item in transaction if item in frequent_items]\n        if filtered_transaction:\n            filtered_transaction.sort(key=lambda x: frequent_items[x], reverse=True)\n            fp_tree.insert(filtered_transaction, 1)\n    return fp_tree\n\ndef find_prefix_path(base_pat, tree):\n    conditional_pattern_base = []\n    node = tree.header_table[base_pat]\n    while node is not None:\n        prefix_path = []\n        parent = node.parent\n        while parent.parent is not None:\n            prefix_path.append(parent.item)\n            parent = parent.parent\n        if prefix_path:\n            conditional_pattern_base.append((prefix_path, node.support))\n        node = node.link\n    return conditional_pattern_base\n\ndef mine_tree(tree, frequent_items, prefix, frequent_itemsets):\n    items = [node.item for node in tree.header_table.values()]\n    for item in items:\n        new_prefix = prefix + [item]\n        frequent_itemsets.append(new_prefix)\n        conditional_pattern_base = find_prefix_path(item, tree)\n        conditional_tree = FPTree()\n        for path, support in conditional_pattern_base:\n            conditional_tree.insert(path, support)\n        conditional_frequent_items = find_frequent_items(conditional_pattern_base, min_support)\n        if conditional_frequent_items:\n            conditional_tree = build_fp_tree(conditional_pattern_base, conditional_frequent_items)\n            mine_tree(conditional_tree, conditional_frequent_items, new_prefix, frequent_itemsets)\n\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    frequent_items = find_frequent_items(transactions, min_support)\n    if not frequent_items:\n        return []\n\n    fp_tree = build_fp_tree(transactions, frequent_items)\n    frequent_itemsets = []\n    mine_tree(fp_tree, frequent_items, [], frequent_itemsets)\n\n    # Sort the itemsets\n    frequent_itemsets = [sorted(itemset) for itemset in frequent_itemsets]\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\n```\n\nThis script implements the FP-Growth algorithm to find frequent itemsets in a given list of transactions. The function `fp_growth` takes a list of transactions and a minimum support threshold, and returns a list of frequent itemsets sorted as specified."}
{"task_id": 75, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    # Check if k is valid\n    if k <= 0 or k > len(X_train):\n        return -1\n    \n    # Convert lists to numpy arrays for easier computation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Initialize a list to store predictions\n    predictions = []\n    \n    # Iterate over each test sample\n    for x_test in X_test:\n        # Compute squared Euclidean distances from the test sample to all training samples\n        distances = np.sum((X_train - x_test) ** 2, axis=1)\n        \n        # Get the indices of the k nearest neighbors\n        k_nearest_indices = np.argsort(distances)[:k]\n        \n        # Get the labels of the k nearest neighbors\n        k_nearest_labels = y_train[k_nearest_indices]\n        \n        # Find the most common label among the k nearest neighbors\n        # In case of a tie, np.bincount will return the smallest label\n        most_common_label = np.bincount(k_nearest_labels).argmax()\n        \n        # Append the predicted label to the predictions list\n        predictions.append(most_common_label)\n    \n    return predictions\n```\n\nThis script defines the `knn_predict` function, which implements the k-Nearest Neighbour algorithm as described. It checks for valid `k`, computes squared Euclidean distances, finds the k nearest neighbors, and determines the most common label among them, resolving ties by choosing the smallest label. The predictions are returned as a list of integers."}
{"task_id": 76, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    \n    # Define a small epsilon for numerical stability\n    epsilon = np.finfo(float).eps\n    \n    # Calculate the loss using the formula\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    \n    # Return the loss rounded to 4 decimal places\n    return round(loss, 4)\n\n# Example usage:\n# y = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\n# y_pred = np.array([[0.9, 0.05, 0.05], [0.1, 0.8, 0.1], [0.2, 0.2, 0.6]])\n# print(cross_entropy_loss(y, y_pred))  # Output should be a float rounded to 4 decimal places\n```\n\nThis script defines the `cross_entropy_loss` function, which calculates the unnormalised categorical cross-entropy loss for a batch of one-hot encoded targets and predicted probabilities. The function ensures numerical stability by adding a small epsilon value to the predicted probabilities before taking the logarithm. The result is rounded to four decimal places before being returned."}
{"task_id": 77, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef relu(Z: np.ndarray) -> np.ndarray:\n    \"\"\"Rectified Linear Unit activation function.\"\"\"\n    return np.maximum(0, Z)\n\ndef sigmoid(Z: np.ndarray) -> np.ndarray:\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\n\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2  # Number of layers in the network\n\n    # Implement [LINEAR -> RELU]*(L-1). Add \"cache\" to the \"caches\" list.\n    for l in range(1, L):\n        A_prev = A\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A_prev) + b\n        A = relu(Z)\n        cache = (A_prev, W, b, Z)\n        caches.append(cache)\n\n    # Implement LINEAR -> SIGMOID. Add \"cache\" to the \"caches\" list.\n    W = parameters[f'W{L}']\n    b = parameters[f'b{L}']\n    Z = np.dot(W, A) + b\n    AL = sigmoid(Z)\n    cache = (A, W, b, Z)\n    caches.append(cache)\n\n    # Convert AL to a list and round to 4 decimal places\n    AL_rounded = np.round(AL, 4).tolist()\n\n    return AL_rounded, caches\n```\n\nThis script defines the forward propagation for an L-layer neural network using ReLU activations for hidden layers and a sigmoid activation for the output layer. It also collects the necessary cache for each layer, which can be used for backpropagation. The final output is rounded to four decimal places and converted to a regular Python list."}
{"task_id": 81, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    # Ensure A2 is within the range [1e-15, 1-1e-15]\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    \n    # Number of samples\n    m = Y.shape[0]\n    \n    # Compute the binary cross-entropy cost\n    cost = -1/m * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    \n    # Return the cost rounded to 6 decimal places\n    return round(cost, 6)\n\n# Example usage:\n# A2 = np.array([0.9, 0.1, 0.8, 0.2])\n# Y = np.array([1, 0, 1, 0])\n# print(compute_cost(A2, Y))  # Output should be the binary cross-entropy cost rounded to 6 decimal places\n```"}
{"task_id": 82, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | \"np.ndarray\", epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    n = len(Q)\n    greedy_index = np.argmax(Q)  # Get the index of the first maximum Q-value\n    base_prob = epsilon / n\n    probabilities = np.full(n, base_prob)\n    probabilities[greedy_index] = 1 - epsilon + base_prob\n    \n    # Ensure the probabilities sum to 1 within the required tolerance\n    probabilities = probabilities / np.sum(probabilities)\n    \n    # Round to 4 decimal places\n    probabilities = np.round(probabilities, 4)\n    \n    # Ensure the sum is exactly 1\n    probabilities[-1] = 1 - np.sum(probabilities[:-1])\n    \n    return probabilities.tolist()\n\n# Example usage:\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1\nprint(epsilon_soft(Q, epsilon))  # Output: [0.925, 0.025, 0.025, 0.025]\n```\n\nThis script defines the `epsilon_soft` function, which calculates the \u03b5-soft probabilities for a given set of Q-values and an exploration parameter \u03b5. The function ensures that the probabilities are rounded to four decimal places and sum to 1 within the specified numerical tolerance."}
{"task_id": 86, "completion_id": 0, "completion": "```\npython\nfrom collections import Counter\n\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    # Number of samples\n    num_samples = len(predictions[0])\n    \n    # Initialize the list for the final predictions\n    final_predictions = []\n    \n    # Iterate over each sample\n    for sample_index in range(num_samples):\n        # Collect votes for the current sample from all trees\n        votes = [tree_predictions[sample_index] for tree_predictions in predictions]\n        \n        # Count the votes for each class label\n        vote_counts = Counter(votes)\n        \n        # Find the class label with the highest vote count\n        # In case of a tie, the smallest label is chosen due to the sorted nature of most_common\n        most_common_votes = vote_counts.most_common()\n        most_common_votes.sort(key=lambda x: (-x[1], x[0]))\n        \n        # Append the most common label to the final predictions\n        final_predictions.append(most_common_votes[0][0])\n    \n    return final_predictions\n\n# Example usage:\n# predictions = [\n#     [1, 2, 3, 1],\n#     [1, 3, 3, 2],\n#     [1, 2, 3, 1]\n# ]\n# print(aggregate_random_forest_votes(predictions))  # Output: [1, 2, 3, 1]\n```\n\nThis script defines the `aggregate_random_forest_votes` function, which takes a two-dimensional list of predictions from multiple decision trees and returns a list of aggregated predictions using majority voting. In case of ties, it selects the smallest label. The example usage at the bottom demonstrates how to use the function."}
{"task_id": 88, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    # Convert input to a numpy array if it's not already\n    z_array = np.array(z)\n    \n    # Compute the softplus using np.logaddexp for numerical stability\n    softplus_values = np.logaddexp(0.0, z_array)\n    \n    # Round the values to 4 decimal places\n    rounded_values = np.round(softplus_values, 4)\n    \n    # Convert the result to a list if the input was not a scalar\n    if isinstance(z, (list, np.ndarray)):\n        return rounded_values.tolist()\n    else:\n        return float(rounded_values)\n\n# Example usage\nz = np.array([-1000, 0, 3])\nprint(softplus(z))  # Output: [0.0, 0.6931, 3.0486]\n```"}
{"task_id": 90, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Check if policy has ev_estimates and if it's not empty\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    \n    # Extract true expected values and policy estimates\n    true_evs = bandit.arm_evs\n    estimates = policy.ev_estimates\n    \n    # Sort the estimates based on arm index\n    sorted_estimates = [estimates[i] for i in sorted(estimates.keys())]\n    \n    # Calculate squared errors\n    squared_errors = [(true - est) ** 2 for true, est in zip(true_evs, sorted_estimates)]\n    \n    # Compute mean-squared error\n    mse_value = np.mean(squared_errors)\n    \n    # Return the result rounded to 4 decimal places\n    return round(mse_value, 4)\n\n# Example usage\nbandit = {\"arm_evs\": [0.5, 0.2, 0.9]}\npolicy = {\"ev_estimates\": {0: 0.4, 1: 0.25, 2: 0.8}}\n\nprint(mse(bandit, policy))  # Output should be 0.0075\n```"}
{"task_id": 96, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # Step 1: Build vocabulary and N-gram frequency tables\n    vocabulary = set()\n    ngram_counts = defaultdict(Counter)\n    \n    for sentence in corpus:\n        words = sentence.split()\n        vocabulary.update(words)\n        for n in range(1, N + 1):\n            ngrams = zip(*[words[i:] for i in range(n)])\n            for ngram in ngrams:\n                ngram_counts[n][ngram] += 1\n    \n    # Add <UNK> to vocabulary\n    vocabulary.add(\"<UNK>\")\n    V = len(vocabulary)\n    \n    # Step 2: Process the target sequence\n    target_words = sequence.split()\n    if len(target_words) < N:\n        return 0.0\n    \n    log_prob = 0.0\n    \n    # Step 3: Calculate the probability of each N-gram in the target sequence\n    for n in range(1, N + 1):\n        ngrams = zip(*[target_words[i:] for i in range(n)])\n        for ngram in ngrams:\n            context = ngram[:-1]\n            word = ngram[-1]\n            \n            # Replace unseen words with <UNK>\n            if word not in vocabulary:\n                word = \"<UNK>\"\n            \n            # Calculate the probability with additive smoothing\n            count_context = sum(ngram_counts[n-1][context + (w,)] for w in vocabulary) if n > 1 else len(corpus)\n            count_ngram = ngram_counts[n][context + (word,)] if n > 1 else ngram_counts[1][(word,)]\n            prob = (count_ngram + K) / (count_context + K * V)\n            \n            # Add to log probability\n            log_prob += math.log(prob)\n    \n    # Return the natural logarithm of the sentence probability rounded to 4 decimals\n    return round(log_prob, 4)\n```"}
{"task_id": 108, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    N, M = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    \n    def compute_loss(X, W, H, alpha):\n        return np.linalg.norm(X - W @ H, 'fro')**2 + alpha * (np.linalg.norm(W, 'fro')**2 + np.linalg.norm(H, 'fro')**2)\n    \n    for iteration in range(max_iter):\n        # Fix H, solve for W\n        for i in range(N):\n            W[i, :] = np.linalg.solve(H @ H.T + alpha * np.eye(K), H @ X[i, :])\n        \n        # Fix W, solve for H\n        for j in range(M):\n            H[:, j] = np.linalg.solve(W.T @ W + alpha * np.eye(K), W.T @ X[:, j])\n        \n        # Compute the loss\n        loss = compute_loss(X, W, H, alpha)\n        \n        # Check for convergence\n        if loss < tol:\n            break\n    \n    # Reconstruct the matrix\n    X_hat = W @ H\n    return X_hat.round(4).tolist()\n```\n\nThis script defines the `als_factorization` function, which performs regularized Alternating Least Squares (ALS) matrix factorization. The function initializes the factor matrices `W` and `H` with random values using a fixed seed for reproducibility, iteratively updates these matrices by solving regularized least squares problems, and stops when the loss drops below a specified tolerance or a maximum number of iterations is reached. The reconstructed matrix is returned as a Python list of lists, rounded to four decimal places."}
{"task_id": 109, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n\n    # Step 1: Choose the initial centroids using K-Means++\n    m, n = X.shape\n    centroids = [X[np.random.choice(m)]]\n    \n    for _ in range(1, K):\n        distances = np.min(np.linalg.norm(X[:, np.newaxis] - centroids, axis=2), axis=1)\n        probabilities = distances / distances.sum()\n        next_centroid = X[np.random.choice(m, p=probabilities)]\n        centroids.append(next_centroid)\n    \n    centroids = np.array(centroids)\n\n    # Step 2: Perform Lloyd's iterations\n    for _ in range(max_iter):\n        # Assign step\n        distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Update step\n        new_centroids = np.array([X[labels == k].mean(axis=0) if (labels == k).any() else centroids[k] for k in range(K)])\n        \n        # Check for convergence\n        if np.all(centroids == new_centroids):\n            break\n        \n        centroids = new_centroids\n\n    # Step 3: Return the sorted centroids rounded to 4 decimal places\n    sorted_centroids = sorted(centroids.round(4), key=lambda centroid: (centroid[0], centroid.tolist()))\n    return sorted_centroids\n\n# Example usage:\n# X = np.array([[1, 2], [1, 4], [1, 0],\n#               [10, 2], [10, 4], [10, 0]])\n# K = 2\n# print(kmeans(X, K, random_state=42))\n```\n\nThis script implements the K-Means clustering algorithm with K-Means++ initialization. It ensures reproducibility by setting seeds for both Python's `random` module and NumPy's random number generator. The centroids are returned rounded to four decimal places and sorted by their first coordinate."}
{"task_id": 111, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes a string into a fixed-length list of integer token ids.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text]\n    # Truncate if longer than time_steps\n    if len(encoded) > time_steps:\n        encoded = encoded[:time_steps]\n    # Pad with 0 if shorter than time_steps\n    else:\n        encoded.extend([0] * (time_steps - len(encoded)))\n    return encoded\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list of integer ids back to a text string.\"\"\"\n    return ''.join(inverse_vocab.get(index, '') for index in indices if index != 0)\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes the input text, runs it through the model, and decodes the output.\"\"\"\n    # Encode the input text\n    encoded_input = string_to_int(text, TIME_STEPS, input_vocabulary)\n    # Convert to numpy array and add batch dimension\n    encoded_input = np.array(encoded_input).reshape(1, -1)\n    # Get model prediction\n    prediction = model.predict(encoded_input)\n    # Apply argmax to get the predicted ids\n    predicted_ids = np.argmax(prediction, axis=-1)\n    # Decode the predicted ids to string\n    decoded_output = int_to_string(predicted_ids.flatten(), inv_output_vocabulary)\n    return decoded_output\n\n# Example usage:\n# Assuming `model` is a pre-trained model with a `predict` method\n# input_vocabulary = {'a': 1, 'b': 2, ...}\n# inv_output_vocabulary = {1: 'a', 2: 'b', ...}\n# text = \"example text\"\n# prediction = run_example(model, input_vocabulary, inv_output_vocabulary, text)\n# print(prediction)\n```\n\nThis script defines the required functions to encode a string into a fixed-length list of integer token IDs, decode a list of integer IDs back into a string, and run an example through a model to get a decoded prediction. The `run_example` function assumes that the model has a `predict` method that returns a probability distribution over the output vocabulary for each time step."}
{"task_id": 113, "completion_id": 0, "completion": "```\npython\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n\n    predictions = []\n    for example in examples:\n        # Call the helper function to get the list of characters\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        # Concatenate the characters into a single string\n        predicted_string = ''.join(output_chars)\n        # Print the input and output\n        print(f\"input:  {example}\")\n        print(f\"output: {predicted_string}\")\n        # Collect the predicted string\n        predictions.append(predicted_string)\n    \n    return predictions\n\n# Assuming run_example is defined somewhere in the environment\n# def run_example(model, input_vocabulary, inv_output_vocabulary, example):\n#     # This function is expected to return a list of characters\n#     pass\n\n# Example usage:\n# def dummy_model(input_string):\n#     return input_string.upper()  # Example model that converts input to uppercase\n\n# EXAMPLES = [\"hello\", \"world\", \"test\"]\n\n# run_examples(dummy_model, {}, {}, EXAMPLES)\n```\n\nThis script defines the `run_examples` function as specified, using a helper function `run_example` which is assumed to be available in the environment. The function handles the case where `examples` is `None` by falling back to a global constant `EXAMPLES`. It processes each example, prints the input and output, and collects the predictions in a list which is returned at the end."}
{"task_id": 115, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    # Ensure y is a column vector\n    y = y.reshape(-1, 1)\n    \n    # Ensure w is a column vector\n    w = w.reshape(-1, 1)\n    \n    # Compute the linear combination z = X \u00b7 w\n    z = np.dot(X, w)\n    \n    # Compute the predicted probabilities p = \u03c3(z)\n    p = 1 / (1 + np.exp(-z))\n    \n    # Avoid numerical issues by clamping probabilities to a small range\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    \n    # Compute the average binary cross-entropy loss\n    m = X.shape[0]\n    loss = -1/m * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    \n    # Compute the gradient of the loss with respect to the weights\n    gradient = 1/m * np.dot(X.T, p - y)\n    \n    # Return the loss and gradient rounded to 4 decimals\n    return round(loss.item(), 4), gradient.round(4).tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [1, 3], [1, 4]])\n# y = np.array([0, 1, 0])\n# w = np.array([0.5, -0.5])\n# loss, grad = logistic_loss_and_gradient(X, y, w)\n# print(\"Loss:\", loss)\n# print(\"Gradient:\", grad)\n```\n\nThis script defines the `logistic_loss_and_gradient` function, which calculates the binary cross-entropy loss and its gradient for logistic regression. The function handles numerical stability by clamping predicted probabilities to a small range to avoid issues with logarithms of zero or one. The results are rounded to four decimal places as specified."}
{"task_id": 118, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n\n    m, n = X_train.shape\n    weights = np.ones(m) / m\n    classifiers = []\n    alphas = []\n\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = None\n        best_threshold = None\n        best_polarity = None\n\n        for feature_i in range(n):\n            thresholds, polarities = np.unique(X_train[:, feature_i]), [1, -1]\n            for threshold in thresholds:\n                for polarity in polarities:\n                    predictions = np.ones(m)\n                    predictions[X_train[:, feature_i] * polarity < threshold * polarity] = -1\n\n                    weighted_error = np.sum(weights[predictions != y_train])\n\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        polarity = -polarity\n\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump = (feature_i, threshold)\n                        best_polarity = polarity\n\n        epsilon = min_error + 1e-10  # To avoid division by zero\n        alpha = 0.5 * np.log((1.0 - epsilon) / epsilon)\n        alphas.append(alpha)\n\n        predictions = np.ones(m)\n        feature_i, threshold = best_stump\n        predictions[X_train[:, feature_i] * best_polarity < threshold * best_polarity] = -1\n\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n\n        classifiers.append((feature_i, threshold, best_polarity))\n\n    # Prediction\n    m_test = X_test.shape[0]\n    y_pred = np.zeros(m_test)\n    for alpha, (feature_i, threshold, polarity) in zip(alphas, classifiers):\n        predictions = np.ones(m_test)\n        predictions[X_test[:, feature_i] * polarity < threshold * polarity] = -1\n        y_pred += alpha * predictions\n\n    return [1 if pred >= 0 else -1 for pred in y_pred]\n```\n\nThis script implements the AdaBoost algorithm using decision stumps as weak learners. It trains on the provided training data and predicts labels for the test data. The predictions are aggregated using the weighted sum of the stump predictions, and the final label is determined by the sign of this sum."}
{"task_id": 128, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    # Step 1: Compute the within-class scatter matrix S_W\n    unique_labels = np.unique(y)\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    for label in unique_labels:\n        X_c = X[y == label]\n        mu_c = X_c.mean(axis=0)\n        S_W += np.sum((X_c - mu_c).T @ (X_c - mu_c), axis=1)\n\n    # Step 2: Compute the between-class scatter matrix S_B\n    mu = X.mean(axis=0)\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    for label in unique_labels:\n        X_c = X[y == label]\n        mu_c = X_c.mean(axis=0)\n        N_c = X_c.shape[0]\n        S_B += N_c * (mu_c - mu).reshape(-1, 1) @ (mu_c - mu).reshape(1, -1)\n\n    # Step 3: Form the matrix A = pinv(S_W) * S_B\n    A = np.linalg.pinv(S_W) @ S_B\n\n    # Step 4: Perform eigen-decomposition of A\n    eigenvalues, eigenvectors = np.linalg.eigh(A)\n\n    # Sort the eigen-pairs in descending order of the eigen-values\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n\n    # Step 5: Deterministic sign for every chosen eigenvector\n    for i in range(n_components):\n        first_non_zero_idx = np.where(eigenvectors[:, i] != 0)[0][0]\n        if eigenvectors[first_non_zero_idx, i] < 0:\n            eigenvectors[:, i] *= -1\n\n    # Step 6: Project X on the first n_components eigenvectors\n    W = eigenvectors[:, :n_components]\n    X_projected = X @ W\n\n    # Step 7: Round every element to four decimal places and return as list of lists\n    return X_projected.round(4).tolist()\n\n# Example usage:\nX = np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]])\ny = np.array([0,0,0,0,1,1,1,1])\nn_components = 1\nprint(multi_class_lda(X, y, n_components))\n```\n\nThis script implements the multi-class Linear Discriminant Analysis (LDA) as described in the task. It computes the within-class and between-class scatter matrices, solves the generalized eigenvalue problem, and projects the data onto the first `n_components` discriminant directions. The results are rounded to four decimal places and returned as a list of lists."}
{"task_id": 140, "completion_id": 0, "completion": "```\npython\nfrom collections import deque\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if grid[0][0] == 'F' or grid[n-1][n-1] == 'F':\n        return -1\n    if n == 1:\n        return 0\n\n    # Directions for moving up, down, left, right\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    # Initialize fire queue and visited set\n    fire_queue = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j))\n    \n    # Initialize agent queue and visited set\n    agent_queue = deque([(0, 0, 0)])  # (row, col, time)\n    agent_visited = set((0, 0, 0))\n\n    # Function to check if a position is within bounds\n    def in_bounds(x, y):\n        return 0 <= x < n and 0 <= y < n\n\n    # Spread fire and move agent\n    while agent_queue:\n        # Spread fire first\n        fire_size = len(fire_queue)\n        for _ in range(fire_size):\n            fx, fy = fire_queue.popleft()\n            for dx, dy in directions:\n                nx, ny = fx + dx, fy + dy\n                if in_bounds(nx, ny) and grid[nx][ny] == '.':\n                    grid[nx] = grid[nx][:ny] + 'F' + grid[nx][ny+1:]\n                    fire_queue.append((nx, ny))\n        \n        # Move agent\n        ax, ay, at = agent_queue.popleft()\n        for dx, dy in directions:\n            nx, ny = ax + dx, ay + dy\n            if in_bounds(nx, ny) and grid[nx][ny] == '.' and (nx, ny, at + 1) not in agent_visited:\n                if nx == n - 1 and ny == n - 1:\n                    return at + 1\n                agent_visited.add((nx, ny, at + 1))\n                agent_queue.append((nx, ny, at + 1))\n    \n    return -1\n\n# Example usage:\n# grid = [\"...#\",\"#.F#\",\"...#\",\"....\"]\n# print(escape_fire_maze(grid))  # Output: 3\n```\n\nThis code implements a solution to the escape from fire maze problem using breadth-first search (BFS) for both the fire spread and the agent's movement. The fire spreads first, and then the agent moves, ensuring that the agent does not enter any cell that is on fire at the time of its arrival. The function returns the minimum number of minutes required for the agent to reach the goal or -1 if it is impossible."}
{"task_id": 141, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\nfrom sklearn.metrics.pairwise import cosine_distances, euclidean_distances, manhattan_distances\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n    \n    def compute_distances(X_test, X_train, metric):\n        if metric == 'euclidean':\n            return euclidean_distances(X_test, X_train)\n        elif metric == 'manhattan':\n            return manhattan_distances(X_test, X_train)\n        elif metric == 'cosine':\n            return cosine_distances(X_test, X_train)\n        else:\n            # Fallback to Euclidean if unknown metric\n            return euclidean_distances(X_test, X_train)\n    \n    # Compute the distance matrix\n    distances = compute_distances(X_test, X_train, metric)\n    \n    # Initialize an array to store the predictions\n    predictions = np.zeros(X_test.shape[0], dtype=y_train.dtype)\n    \n    # For each test sample, find the k nearest neighbors and predict the label by majority vote\n    for i in range(X_test.shape[0]):\n        # Get the indices of the k nearest neighbors\n        nearest_indices = np.argsort(distances[i])[:k]\n        # Get the labels of the k nearest neighbors\n        nearest_labels = y_train[nearest_indices]\n        # Find the most common label among the k nearest neighbors\n        # In case of a tie, Counter.most_common returns the smallest label first\n        prediction = Counter(nearest_labels).most_common(1)[0][0]\n        predictions[i] = prediction\n    \n    return predictions\n```\n\nThis script defines a `knn_predict` function that implements the k-Nearest Neighbors algorithm using the specified distance metric. It uses `scikit-learn`'s pairwise distance functions for efficiency and correctness. The function handles the three specified distance metrics and defaults to Euclidean if an unknown metric is provided. The predictions are made by majority vote among the k nearest neighbors, with ties broken by choosing the smallest label."}
{"task_id": 146, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n    \n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b))\n    \n    def cosine_distance(a, b, eps=1e-12):\n        dot_product = np.dot(a, b)\n        norm_a = np.linalg.norm(a)\n        norm_b = np.linalg.norm(b)\n        return 1 - dot_product / (norm_a * norm_b + eps)\n    \n    # Choose the appropriate distance function\n    if metric == 'euclidean':\n        distance_func = euclidean_distance\n    elif metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        raise ValueError(\"Unsupported distance metric. Choose 'euclidean', 'manhattan', or 'cosine'.\")\n    \n    predictions = []\n    \n    for test_sample in X_test:\n        # Compute distances between the test sample and all training samples\n        distances = [distance_func(test_sample, train_sample) for train_sample in X]\n        \n        # Get the indices of the k nearest neighbors\n        k_indices = np.argsort(distances)[:k]\n        \n        # Get the labels of the k nearest neighbors\n        k_nearest_labels = y[k_indices]\n        \n        # Perform majority vote\n        unique_labels, counts = np.unique(k_nearest_labels, return_counts=True)\n        majority_vote = unique_labels[np.argmax(counts)]\n        \n        # In case of a tie, return the smallest label\n        if len(np.where(counts == np.max(counts))[0]) > 1:\n            majority_vote = unique_labels[np.argmin(unique_labels[counts == np.max(counts)])]\n        \n        predictions.append(majority_vote)\n    \n    return predictions\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [5, 6]])\n# y_train = np.array([0, 0, 1, 1])\n# X_test = np.array([[1, 1], [4, 4]])\n# predictions = knn_predict(X_train, y_train, X_test, k=3, metric='euclidean')\n# print(predictions)  # Output: [0, 1]\n```\n\nThis script defines a `knn_predict` function that implements the k-Nearest Neighbors algorithm from scratch using NumPy. The function supports three distance metrics: Euclidean, Manhattan, and Cosine. It computes the distances between each test sample and all training samples, selects the k nearest neighbors, and performs a majority vote to determine the predicted label for each test sample. In the case of a tie, it returns the smallest label."}
{"task_id": 155, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a NumPy array if it isn't already\n    state = np.array(state)\n    \n    # First layer: Linear transformation and ReLU activation\n    hidden1 = np.maximum(0, np.dot(state, weights['W1']) + weights['b1'])\n    \n    # Second layer: Linear transformation and ReLU activation\n    hidden2 = np.maximum(0, np.dot(hidden1, weights['W2']) + weights['b2'])\n    \n    # Output layer: Linear transformation and tanh activation\n    action = np.tanh(np.dot(hidden2, weights['W3']) + weights['b3'])\n    \n    # Round the action vector to 4 decimal places and convert to a list\n    action_rounded = np.round(action, 4).tolist()\n    \n    return action_rounded\n```\n\nThis script defines the `actor_forward` function, which performs the forward pass of a two-hidden-layer actor network using NumPy. The function takes a state vector and a dictionary of weights and biases, computes the action vector through the specified network architecture, and returns the action vector rounded to four decimal places."}
{"task_id": 160, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    m, n = X.shape\n    \n    # Add intercept column if needed\n    if fit_intercept:\n        X = np.hstack([np.ones((m, 1)), X])\n    else:\n        X = np.hstack([np.zeros((m, 1)), X])\n    \n    # Initialize weights to zero\n    w = np.zeros(n + 1)\n    \n    # Soft thresholding operator\n    def soft_threshold(a, tau):\n        return np.sign(a) * max(abs(a) - tau, 0)\n    \n    for _ in range(max_iters):\n        for j in range(n + 1):\n            if j == 0 and fit_intercept:\n                # Recompute intercept\n                w[0] = np.mean(y - X[:, 1:].dot(w[1:]))\n            else:\n                # Temporarily set the current weight to 0\n                w[j] = 0\n                \n                # Compute partial residual\n                r_j = y - X.dot(w)\n                \n                # Update weight using soft-thresholding\n                w[j] = soft_threshold(X[:, j].dot(r_j), lambda_param * m) / (X[:, j].dot(X[:, j]))\n    \n    # Extract intercept and weights\n    bias = w[0] if fit_intercept else 0.0\n    weights = w[1:] if fit_intercept else w\n    \n    # Round results to 4 decimal places\n    weights_list = [round(weight, 4) for weight in weights]\n    bias_float = round(bias, 4)\n    \n    return weights_list, bias_float\n```"}
{"task_id": 165, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are not already\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    if not isinstance(y, np.ndarray):\n        y = np.array(y)\n    \n    # Check if the lengths of the vectors are the same\n    if x.shape != y.shape:\n        return -1\n    \n    # Calculate the Hamming distance\n    distance = np.mean(x != y)\n    \n    # Return the distance rounded to 4 decimal places\n    return round(distance, 4)\n\n# Example usage:\n# x = [1, 2, 3, 4]\n# y = [1, 3, 2, 4]\n# print(hamming_distance(x, y))  # Output: 0.5000\n```"}
{"task_id": 169, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError(\"N must be a positive integer.\")\n    \n    if window == \"hamming\":\n        a0, a1 = 0.54, 0.46\n        window_func = lambda n: a0 - a1 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == \"hann\":\n        a0, a1 = 0.5, 0.5\n        window_func = lambda n: a0 - a1 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == \"blackman_harris\":\n        a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n        window_func = lambda n: a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n    elif window == \"generalized_cosine\":\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be provided for generalized_cosine window.\")\n        window_func = lambda n: sum(a * np.cos(2 * k * np.pi * n / (N - 1)) for k, a in enumerate(coefficients))\n    else:\n        raise ValueError(f\"Unknown window type: {window}\")\n    \n    if N == 1:\n        return [1.0]\n    \n    window_coeffs = [window_func(n) for n in range(N)]\n    return [round(coeff, 4) for coeff in window_coeffs]\n\n# Example usage:\n# print(generate_window(\"hamming\", 5))\n# print(generate_window(\"hann\", 5))\n# print(generate_window(\"blackman_harris\", 5))\n# print(generate_window(\"generalized_cosine\", 5, [0.5, 0.25]))\n```\n\nThis script defines the `generate_window` function, which generates window coefficients for the specified window type and number of samples. It handles the special cases and ensures that the coefficients are rounded to four decimal places before returning them as a regular Python list."}
{"task_id": 171, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    \n    # Convert inputs to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Check if all labels are the same\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) == 1:\n        return [unique_labels[0]] * len(X_test)\n    \n    # Map labels to {0, 1}\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train_mapped = np.array([label_map[label] for label in y_train])\n    \n    # Add intercept term (bias) to the data\n    X_train = np.hstack([np.ones((X_train.shape[0], 1)), X_train])\n    X_test = np.hstack([np.ones((X_test.shape[0], 1)), X_test])\n    \n    # Initialize weights\n    weights = np.zeros(X_train.shape[1])\n    \n    # Sigmoid function\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    \n    # Mini-batch Gradient Descent\n    for epoch in range(epochs):\n        # Shuffle the training data\n        indices = np.arange(X_train.shape[0])\n        np.random.shuffle(indices)\n        X_train_shuffled = X_train[indices]\n        y_train_shuffled = y_train_mapped[indices]\n        \n        # Mini-batches\n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train_shuffled[i:i + batch_size]\n            y_batch = y_train_shuffled[i:i + batch_size]\n            \n            # Predict probabilities\n            z = np.dot(X_batch, weights)\n            y_pred_prob = sigmoid(z)\n            \n            # Compute gradients\n            gradients = np.dot(X_batch.T, (y_pred_prob - y_batch)) / y_batch.size\n            \n            # Update weights\n            weights -= learning_rate * gradients\n    \n    # Predict on test set\n    z_test = np.dot(X_test, weights)\n    y_pred_prob_test = sigmoid(z_test)\n    y_pred_mapped_test = (y_pred_prob_test >= 0.5).astype(int)\n    \n    # Map predictions back to original labels\n    reverse_label_map = {v: k for k, v in label_map.items()}\n    y_pred_test = [reverse_label_map[label] for label in y_pred_mapped_test]\n    \n    return y_pred_test\n```\n\nThis script implements a binary logistic regression classifier using mini-batch gradient descent. It handles the special case where all training labels are identical by predicting that unique label for every test sample. The function returns predictions in the same label set as `y_train`."}
{"task_id": 176, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    \"\"\"Fill in here. The final implementation must follow the specification given in the task\n    description and return a list with the predicted class labels for *X_test*.\"\"\"\n    \n    def decision_stump_predict(X, feature_index, threshold, polarity):\n        predictions = np.ones(len(X))\n        if polarity == 1:\n            predictions[X[:, feature_index] >= threshold] = -1\n        else:\n            predictions[X[:, feature_index] < threshold] = -1\n        return predictions\n\n    def find_best_stump(X, y, weights):\n        m, n = X.shape\n        best_stump = {}\n        min_error = float('inf')\n        for feature_index in range(n):\n            thresholds = np.unique(X[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = decision_stump_predict(X, feature_index, threshold, polarity)\n                    error = np.sum(weights[y != predictions])\n                    if error < min_error:\n                        min_error = error\n                        best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': polarity}\n        return best_stump, min_error\n\n    X_train = np.array(X_train)\n    y_train = np.array(y_train) * 2 - 1  # Convert labels to -1, 1\n    weights = np.ones(len(y_train)) / len(y_train)\n    stumps = []\n\n    for _ in range(n_estimators):\n        best_stump, error = find_best_stump(X_train, y_train, weights)\n        if error == 0:\n            break\n        alpha = 0.5 * np.log((1 - error) / (error + 1e-10))\n        stumps.append((best_stump, alpha))\n        \n        predictions = decision_stump_predict(X_train, best_stump['feature_index'], best_stump['threshold'], best_stump['polarity'])\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n\n    X_test = np.array(X_test)\n    final_predictions = np.zeros(len(X_test))\n    for stump, alpha in stumps:\n        predictions = decision_stump_predict(X_test, stump['feature_index'], stump['threshold'], stump['polarity'])\n        final_predictions += alpha * predictions\n\n    return [1 if pred >= 0 else 0 for pred in final_predictions]\n```\n\nThis script implements the AdaBoost algorithm using decision stumps as weak learners. It follows the steps outlined in the task description, including finding the best stump in each iteration, updating the weights, and making predictions on the test set. The final predictions are converted back to the original class labels {0, 1}."}
{"task_id": 178, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n\n    rng = np.random.default_rng(seed)\n    \n    # Hyperparameters\n    w = 0.5  # inertia weight\n    c1 = 1.5  # cognitive weight\n    c2 = 1.5  # social weight\n    \n    # Initialize particles\n    positions = rng.uniform(-1, 1, (num_particles, n_dims))\n    velocities = rng.uniform(-1, 1, (num_particles, n_dims))\n    \n    # Initialize personal best positions and values\n    pbest_positions = positions.copy()\n    pbest_values = np.sum(positions**2, axis=1)\n    \n    # Initialize global best position and value\n    gbest_index = np.argmin(pbest_values)\n    gbest_position = pbest_positions[gbest_index]\n    gbest_value = pbest_values[gbest_index]\n    \n    for _ in range(num_iterations):\n        # Update velocities\n        r1 = rng.uniform(0, 1, (num_particles, n_dims))\n        r2 = rng.uniform(0, 1, (num_particles, n_dims))\n        velocities = (w * velocities +\n                      c1 * r1 * (pbest_positions - positions) +\n                      c2 * r2 * (gbest_position - positions))\n        \n        # Update positions\n        positions = np.clip(positions + velocities, -1, 1)\n        \n        # Update personal bests\n        current_values = np.sum(positions**2, axis=1)\n        improved = current_values < pbest_values\n        pbest_positions[improved] = positions[improved]\n        pbest_values[improved] = current_values[improved]\n        \n        # Update global best\n        gbest_index = np.argmin(pbest_values)\n        gbest_position = pbest_positions[gbest_index]\n        gbest_value = pbest_values[gbest_index]\n    \n    return round(gbest_value, 4)\n```\n\nThis script defines a function `particle_swarm_optimisation` that implements the Particle Swarm Optimization (PSO) algorithm to minimize the Sphere function. The function checks for valid input and uses a random number generator with a specified seed to ensure reproducibility. The PSO algorithm iteratively updates the positions and velocities of particles in the swarm to find the minimum of the Sphere function. The best value found is returned, rounded to four decimal places."}
{"task_id": 180, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    \n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((np.array(point1) - np.array(point2)) ** 2))\n    \n    if k == 0 or k > len(X_train):\n        k = len(X_train)\n    \n    predictions = []\n    \n    for test_point in X_test:\n        distances = [(euclidean_distance(test_point, train_point), label) for train_point, label in zip(X_train, y_train)]\n        distances.sort(key=lambda x: x[0])\n        k_nearest_labels = [label for _, label in distances[:k]]\n        \n        if task == \"classification\":\n            # Find the most common label; in case of a tie, the smallest label is chosen\n            label_counts = Counter(k_nearest_labels)\n            most_common_labels = label_counts.most_common()\n            max_count = most_common_labels[0][1]\n            # Filter labels with the maximum count\n            tied_labels = [label for label, count in most_common_labels if count == max_count]\n            # Choose the smallest label\n            prediction = min(tied_labels)\n        elif task == \"regression\":\n            # Calculate the mean of the k nearest labels\n            prediction = round(np.mean(k_nearest_labels), 4)\n        else:\n            raise ValueError(\"Task must be either 'classification' or 'regression'\")\n        \n        predictions.append(prediction)\n    \n    return predictions\n```\n\nThis script defines a `knn_predict` function that can perform both classification and regression using the k-Nearest Neighbors algorithm. It calculates Euclidean distances between test samples and training samples, selects the k nearest neighbors, and then either performs majority voting for classification or averaging for regression. The function handles edge cases such as when `k` is 0 or larger than the number of training samples."}
{"task_id": 184, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef decision_tree_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    max_depth: int | None = None,\n) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n\n    def gini_impurity(y):\n        m = len(y)\n        if m == 0:\n            return 0.0\n        counts = np.bincount(y)\n        probabilities = counts / m\n        return 1.0 - np.sum(probabilities ** 2)\n\n    def best_split(X, y):\n        best_gini = float('inf')\n        best_feature = None\n        best_threshold = None\n\n        for feature in range(X.shape[1]):\n            sorted_indices = np.argsort(X[:, feature])\n            sorted_X = X[sorted_indices]\n            sorted_y = y[sorted_indices]\n\n            for i in range(1, len(sorted_X)):\n                if sorted_X[i, feature] != sorted_X[i - 1, feature]:\n                    threshold = (sorted_X[i, feature] + sorted_X[i - 1, feature]) / 2\n                    left_y = sorted_y[:i]\n                    right_y = sorted_y[i:]\n\n                    gini_left = gini_impurity(left_y)\n                    gini_right = gini_impurity(right_y)\n\n                    gini = (len(left_y) / len(y)) * gini_left + (len(right_y) / len(y)) * gini_right\n\n                    if gini < best_gini:\n                        best_gini = gini\n                        best_feature = feature\n                        best_threshold = threshold\n\n        return best_feature, best_threshold\n\n    def build_tree(X, y, depth=0):\n        if max_depth is not None and depth >= max_depth:\n            return np.bincount(y).argmax()\n\n        if len(np.unique(y)) == 1:\n            return y[0]\n\n        feature, threshold = best_split(X, y)\n\n        if feature is None or threshold is None:\n            return np.bincount(y).argmax()\n\n        left_indices = X[:, feature] < threshold\n        right_indices = X[:, feature] >= threshold\n\n        if not np.any(left_indices) or not np.any(right_indices):\n            return np.bincount(y).argmax()\n\n        left_tree = build_tree(X[left_indices], y[left_indices], depth + 1)\n        right_tree = build_tree(X[right_indices], y[right_indices], depth + 1)\n\n        return (feature, threshold, left_tree, right_tree)\n\n    def predict_tree(tree, X):\n        if isinstance(tree, int):\n            return tree\n\n        feature, threshold, left_tree, right_tree = tree\n\n        if X[feature] < threshold:\n            return predict_tree(left_tree, X)\n        else:\n            return predict_tree(right_tree, X)\n\n    tree = build_tree(X_train, y_train)\n    return [predict_tree(tree, x) for x in X_test]\n```\n\nThis script defines a function `decision_tree_predict` that constructs a binary decision tree using the CART algorithm from scratch. It uses Gini impurity to determine the best splits and recursively builds the tree. The function then predicts the class labels for the test data based on the trained tree."}
{"task_id": 190, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    \n    def gini(labels):\n        counts = np.bincount(labels)\n        probabilities = counts / len(labels)\n        return 1 - np.sum(probabilities ** 2)\n    \n    n_samples, n_features = X.shape\n    G_whole_dataset = gini(y)\n    \n    if G_whole_dataset < 1e-12 or len(np.unique(y)) == 1:\n        return (-1, None, round(G_whole_dataset, 4))\n    \n    best_gini = float('inf')\n    best_feature_index = -1\n    best_threshold_value = None\n    \n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        if len(unique_values) == 1:\n            continue\n        \n        for threshold in unique_values:\n            left_indices = X[:, feature_index] <= threshold\n            right_indices = X[:, feature_index] > threshold\n            \n            if not np.any(left_indices) or not np.any(right_indices):\n                continue\n            \n            y_left = y[left_indices]\n            y_right = y[right_indices]\n            \n            n_left = len(y_left)\n            n_right = len(y_right)\n            n_total = n_left + n_right\n            \n            G_left = gini(y_left)\n            G_right = gini(y_right)\n            \n            G_split = (n_left / n_total) * G_left + (n_right / n_total) * G_right\n            \n            if G_split < best_gini:\n                best_gini = G_split\n                best_feature_index = feature_index\n                best_threshold_value = threshold\n            elif np.isclose(G_split, best_gini, atol=1e-12):\n                if feature_index < best_feature_index:\n                    best_gini = G_split\n                    best_feature_index = feature_index\n                    best_threshold_value = threshold\n                elif feature_index == best_feature_index and threshold < best_threshold_value:\n                    best_threshold_value = threshold\n    \n    return (best_feature_index, best_threshold_value, round(best_gini, 4))\n```\n\nThis script defines a function `best_gini_split` that calculates the best single binary split for a given feature matrix `X` and class labels `y` based on minimizing the weighted Gini impurity. The function handles tie-breaking rules and returns the appropriate tuple as specified."}
{"task_id": 191, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    \n    def validate_vectors(x, y):\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except (ValueError, TypeError):\n            return False\n        \n        if x.ndim != 1 or y.ndim != 1:\n            return False\n        \n        if len(x) != len(y) or len(x) == 0:\n            return False\n        \n        return x, y\n\n    def euclidean(x, y):\n        return np.sqrt(np.sum((x - y) ** 2))\n\n    def manhattan(x, y):\n        return np.sum(np.abs(x - y))\n\n    def chebyshev(x, y):\n        return np.max(np.abs(x - y))\n\n    def cosine(x, y):\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        return 1 - (np.dot(x, y) / (norm_x * norm_y))\n\n    metrics = {\n        'euclidean': euclidean,\n        'manhattan': manhattan,\n        'chebyshev': chebyshev,\n        'cosine': cosine\n    }\n\n    if name not in metrics:\n        return lambda x, y: -1\n\n    def d(x, y):\n        validated = validate_vectors(x, y)\n        if validated is False:\n            return -1\n        x, y = validated\n        result = metrics[name](x, y)\n        return round(result, 4)\n\n    return d\n\n# Example usage:\n# print(metric('euclidean')([1, 2, 3], [4, 5, 6]))  # \u279e 5.1962\n```\n\nThis script defines a `metric` function that returns a distance function based on the specified metric name. The returned function includes validation to ensure the input vectors are one-dimensional, of the same length, and non-empty. For the cosine metric, it also checks that the norms of the vectors are non-zero. If any validation fails or the metric name is unsupported, the function returns `-1`."}
{"task_id": 197, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = []\n    action_dim = 0\n\n    if md_action:\n        # Multi-dimensional action space\n        action_dim = len(env.action_space.spaces)\n        for space in env.action_space.spaces:\n            if hasattr(space, 'n'):\n                n_actions_per_dim.append(space.n)\n            elif hasattr(space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n                cont_action = True\n    else:\n        # Single-dimensional action space\n        if hasattr(env.action_space, 'n'):\n            n_actions_per_dim.append(env.action_space.n)\n            action_dim = 1\n        elif hasattr(env.action_space, 'shape'):\n            n_actions_per_dim.append(np.inf)\n            action_dim = env.action_space.shape[0]\n            cont_action = True\n\n    if cont_action:\n        action_ids = None\n    else:\n        # Generate all possible discrete actions\n        action_ids = list(product(*(range(n) for n in n_actions_per_dim)))\n\n    return n_actions_per_dim, action_ids, action_dim\n```\n\nThis script defines the `action_stats` function, which calculates the statistics of an environment's action space based on whether the space is multi-dimensional and continuous. It handles both discrete and continuous spaces, and computes the required values as specified in the task description."}
{"task_id": 198, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # Number of topics\n    T = phi[0].shape[1]\n    \n    # Initialize the beta matrix with zeros\n    beta = np.zeros((V, T))\n    \n    # Accumulate the counts for each word-topic pair\n    for d in range(len(corpus)):\n        for n in range(len(corpus[d])):\n            word_index = corpus[d][n]\n            beta[word_index] += phi[d][n]\n    \n    # Normalize the columns of beta\n    column_sums = beta.sum(axis=0)\n    for t in range(T):\n        if column_sums[t] > 0:\n            beta[:, t] /= column_sums[t]\n    \n    # Round the values to 4 decimal places\n    beta_rounded = np.round(beta, 4)\n    \n    # Convert the numpy array to a list of lists\n    beta_list = beta_rounded.tolist()\n    \n    return beta_list\n```\n\nThis script defines the `update_beta` function which calculates the word-topic distribution matrix $\\beta$ in Latent Dirichlet Allocation by following the described procedure. It accumulates the counts for each word-topic pair, normalizes the columns, rounds the values to four decimal places, and returns the result as a list of lists."}
{"task_id": 202, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    \n    def euclidean_distance(a, b):\n        return np.linalg.norm(a - b)\n    \n    def compute_cost(medoids, X):\n        cost = 0\n        for x in X:\n            cost += min(euclidean_distance(x, medoids[j]) for j in range(k))\n        return cost\n    \n    def assign_labels(medoids, X):\n        labels = []\n        for x in X:\n            distances = [euclidean_distance(x, medoids[j]) for j in range(k)]\n            labels.append(distances.index(min(distances)))\n        return labels\n    \n    n = X.shape[0]\n    medoids = X[:k].copy()\n    \n    while True:\n        cost = compute_cost(medoids, X)\n        best_swap = None\n        best_cost_reduction = 0\n        \n        for i in range(k):\n            for j in range(n):\n                if j not in medoids:\n                    medoids_candidate = medoids.copy()\n                    medoids_candidate[i] = X[j]\n                    candidate_cost = compute_cost(medoids_candidate, X)\n                    cost_reduction = cost - candidate_cost\n                    if cost_reduction > best_cost_reduction:\n                        best_cost_reduction = cost_reduction\n                        best_swap = (i, j)\n        \n        if best_swap is None:\n            break\n        \n        medoids[best_swap[0]] = X[best_swap[1]]\n    \n    return assign_labels(medoids, X)\n\n# Example usage:\nX = np.array([[0,0], [1,0], [0,1], [5,5], [6,5], [5,6]])\nk = 2\nprint(pam_clustering(X, k))  # Output should be [0, 0, 0, 1, 1, 1]\n```"}
{"task_id": 216, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    \n    # Convert inputs to numpy arrays\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    \n    # Check for valid input shapes and n_iterations\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n    \n    # Polynomial feature expansion\n    def polynomial_features(x, degree):\n        if degree == 1:\n            return x\n        else:\n            return np.hstack([x**i for i in range(1, degree + 1)])\n    \n    x_train_poly = polynomial_features(x_train, degree)\n    x_test_poly = polynomial_features(x_test, degree)\n    \n    # Standardize features (zero-mean / unit-variance)\n    mean = x_train_poly.mean(axis=0)\n    std = x_train_poly.std(axis=0)\n    # Avoid division by zero\n    std[std == 0] = 1\n    x_train_poly = (x_train_poly - mean) / std\n    x_test_poly = (x_test_poly - mean) / std\n    \n    # Add bias term (column of ones)\n    x_train_poly = np.hstack([np.ones((x_train_poly.shape[0], 1)), x_train_poly])\n    x_test_poly = np.hstack([np.ones((x_test_poly.shape[0], 1)), x_test_poly])\n    \n    # Initialize weights\n    weights = np.zeros(x_train_poly.shape[1])\n    \n    # Batch gradient descent\n    for _ in range(n_iterations):\n        predictions = x_train_poly.dot(weights)\n        errors = predictions - y_train\n        \n        # Gradient of the mean squared error\n        gradient_mse = (2 / len(x_train)) * x_train_poly.T.dot(errors)\n        \n        # Elastic Net regularization gradient\n        l1_penalty = reg_factor * l1_ratio * np.sign(weights[1:])  # Exclude bias term\n        l2_penalty = reg_factor * (1 - l1_ratio) * weights[1:]    # Exclude bias term\n        \n        # Combine gradients\n        gradient = gradient_mse\n        gradient[1:] += l1_penalty + l2_penalty\n        \n        # Update weights\n        weights -= learning_rate * gradient\n    \n    # Predict on test set\n    predictions_test = x_test_poly.dot(weights)\n    \n    # Return predictions rounded to 4 decimal places\n    return np.round(predictions_test, 4).tolist()\n```"}
{"task_id": 217, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to numpy arrays\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n\n    # Compute sigmoid\n    sigmoid_predicted = 1 / (1 + np.exp(-predicted))\n\n    # Compute gradient\n    gradient = actual * np.exp(-actual * predicted) / (1 + np.exp(-actual * predicted))\n\n    # Compute Hessian\n    hessian = sigmoid_predicted * (1 - sigmoid_predicted)\n\n    # Round results to 6 decimal places\n    gradient = np.round(gradient, 6)\n    hessian = np.round(hessian, 6)\n    sigmoid_predicted = np.round(sigmoid_predicted, 6)\n\n    # Convert results back to lists\n    gradient_list = gradient.tolist()\n    hessian_list = hessian.tolist()\n    probability_list = sigmoid_predicted.tolist()\n\n    return (gradient_list, hessian_list, probability_list)\n```\n\nThis script defines the `logistic_components` function, which calculates the gradient, Hessian, and probability for logistic loss given the actual labels and predicted scores. The function handles inputs as lists, tuples, or NumPy arrays, performs vectorized computations, and ensures all outputs are rounded to six decimal places before returning them as lists."}
{"task_id": 218, "completion_id": 0, "completion": "```\npython\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    def hand_value(hand: list[int]) -> int:\n        value = sum(hand)\n        aces = hand.count(1)\n        while value <= 11 and aces > 0:\n            value += 10\n            aces -= 1\n        return value\n\n    def is_natural_blackjack(hand: list[int]) -> bool:\n        return len(hand) == 2 and 1 in hand and 10 in hand\n\n    player_value = hand_value(player)\n    dealer_value = hand_value(dealer)\n\n    if player_value > 21:\n        return -1.0  # Player busts\n    if dealer_value > 21:\n        return 1.0   # Dealer busts, player wins\n\n    if is_natural_blackjack(player):\n        return 1.5   # Player wins with natural blackjack\n\n    if player_value > dealer_value:\n        return 1.0   # Player wins\n    elif player_value < dealer_value:\n        return -1.0  # Dealer wins\n    else:\n        return 0.0   # Draw\n\n# Example usage:\n# print(blackjack_outcome([1, 10], [2, 3, 4]))  # Player wins with natural blackjack\n# print(blackjack_outcome([1, 10], [1, 10]))  # Draw\n# print(blackjack_outcome([1, 2], [10, 10]))  # Player wins\n# print(blackjack_outcome([10, 10, 1], [10, 10]))  # Dealer wins\n```\n\nThis script defines the `blackjack_outcome` function, which calculates the outcome of a Blackjack game based on the rules provided. It includes helper functions to determine the hand value and check for a natural blackjack. The function returns the player's reward as a float, with possible values of -1, 0, 1, or 1.5."}
{"task_id": 221, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper function that returns element-wise squared log errors.\"\"\"\n    try:\n        actual = np.array(actual)\n        predicted = np.array(predicted)\n        \n        if actual.shape != predicted.shape:\n            return -1\n        \n        if np.any(actual < 0) or np.any(predicted < 0):\n            return -1\n        \n        return (np.log1p(actual) - np.log1p(predicted)) ** 2\n    \n    except Exception as e:\n        return -1\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\"\"\"\n    squared_errors = squared_log_error(actual, predicted)\n    \n    if squared_errors == -1:\n        return -1\n    \n    msle = np.mean(squared_errors)\n    return round(float(msle), 4)\n\n# Example usage:\n# actual = [3, -0.5, 2, 7]\n# predicted = [2.5, 0.3, 2, 8]\n# print(mean_squared_log_error(actual, predicted))  # Should return -1 due to negative value in actual\n\n# actual = [3, 0.5, 2, 7]\n# predicted = [2.5, 0.3, 2, 8]\n# print(mean_squared_log_error(actual, predicted))  # Should return a valid MSLE value\n```\n\nThis script defines the required helper function `squared_log_error` and the main function `mean_squared_log_error` with input validation and returns the Mean Squared Logarithmic Error rounded to four decimal places. If the inputs are invalid, it returns -1."}
{"task_id": 222, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    # Helper function to compute sigmoid in a numerically stable way\n    def stable_sigmoid(x):\n        if x >= 0:\n            return 1 / (1 + np.exp(-x))\n        else:\n            return np.exp(x) / (1 + np.exp(x))\n    \n    # Convert input to a NumPy array for vectorized operations\n    z_array = np.array(z, dtype=float)\n    \n    # Apply the stable sigmoid function element-wise\n    result_array = np.vectorize(stable_sigmoid)(z_array)\n    \n    # Round the results to 4 decimal places\n    rounded_result_array = np.round(result_array, 4)\n    \n    # Convert the result back to the appropriate return type\n    if isinstance(z, (int, float)):\n        return float(rounded_result_array)\n    else:\n        return rounded_result_array.tolist()\n\n# Example usage:\n# print(sigmoid(0))  # Output: 0.5\n# print(sigmoid([0, -1, 1]))  # Output: [0.5, 0.2689, 0.7311]\n# print(sigmoid(np.array([[0, -1], [1, 1000]])))  # Output: [[0.5, 0.2689], [0.7311, 1.0]]\n```\n\nThis script defines a `sigmoid` function that handles scalar, list, and NumPy array inputs, ensuring numerical stability and returning results rounded to four decimal places. The function uses a helper function `stable_sigmoid` to handle the computation for both positive and negative values of `z` separately, which helps maintain stability for very large inputs."}
{"task_id": 224, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    def apply_leaky_relu(x):\n        if isinstance(x, (list, np.ndarray)):\n            return [apply_leaky_relu(item) for item in x]\n        else:\n            return x if x >= 0 else a * x\n\n    # Convert input to a numpy array if it's not already\n    if isinstance(z, (list, np.ndarray)):\n        z = np.array(z)\n    \n    # Apply the Leaky ReLU function\n    result = apply_leaky_relu(z)\n    \n    # Convert the result back to a list\n    return result if isinstance(z, np.ndarray) else result.tolist()\n\n# Example usage:\n# print(leaky_relu([-1, 0, 1, [2, -3, [4, -5]]]))\n# Output: [0.01, 0, 1, [2, -0.03, [4, -0.05]]]\n```\n\nThis script defines the `leaky_relu` function, which applies the Leaky ReLU activation to each element of the input `z`, which can be a scalar, a list, or a `numpy.ndarray`. The function handles nested structures and returns the result as a plain Python list with the same nested structure as the input."}
{"task_id": 226, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    \n    def decision_stump_predict(X, feature_index, threshold, polarity):\n        predictions = np.ones(X.shape[0])\n        if polarity == 1:\n            predictions[X[:, feature_index] < threshold] = -1\n        else:\n            predictions[X[:, feature_index] >= threshold] = -1\n        return predictions\n    \n    n_samples, n_features = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    \n    classifiers = []\n    alphas = []\n    \n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_feature_index = None\n        best_threshold = None\n        best_polarity = None\n        \n        for feature_index in range(n_features):\n            thresholds = np.unique(X_train[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = decision_stump_predict(X_train, feature_index, threshold, polarity)\n                    weighted_error = np.sum(sample_weights[y_train != predictions])\n                    \n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_feature_index = feature_index\n                        best_threshold = threshold\n                        best_polarity = polarity\n        \n        alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n        alphas.append(alpha)\n        classifiers.append((best_feature_index, best_threshold, best_polarity))\n        \n        sample_weights *= np.exp(-alpha * y_train * decision_stump_predict(X_train, best_feature_index, best_threshold, best_polarity))\n        sample_weights /= np.sum(sample_weights)\n    \n    def predict_sample(sample):\n        stump_predictions = [alpha * decision_stump_predict(np.array([sample]), feature_index, threshold, polarity)[0]\n                             for feature_index, threshold, polarity, alpha in zip(*classifiers, alphas)]\n        return np.sign(np.sum(stump_predictions))\n    \n    return [predict_sample(sample) for sample in X_test]\n```\n\nThis script defines the `adaboost_predict` function which trains an AdaBoost ensemble of decision stumps and uses it to predict the labels of an unseen dataset. The function returns a list of integers, each being either -1 or 1, representing the predicted class labels for the test samples."}
{"task_id": 241, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    \n    # Flatten the shape into a 2D matrix shape\n    d0 = shape[0]\n    remaining_shape = shape[1:]\n    d1 = np.prod(remaining_shape)\n    \n    # Step 2: Create a 2-D matrix A \u2208 \u211d^(d0\u00d7(d1\u22efdn)) filled with i.i.d. samples from the standard normal distribution\n    A = np.random.randn(d0, d1)\n    \n    # Step 3: Compute the singular value decomposition (SVD) of A\n    U, S, Vt = np.linalg.svd(A, full_matrices=False)\n    \n    # Step 4: Choose the SVD factor that has the same size as A\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt\n    \n    # Step 5: Reshape Q back to the requested tensor shape and multiply it by scale\n    Q_reshaped = Q.reshape(shape)\n    result = Q_reshaped * scale\n    \n    # Verify orthogonality condition\n    flat = result.reshape(d0, -1)\n    if d0 <= flat.shape[1]:\n        identity_approx = flat @ flat.T\n        expected_identity = np.eye(d0) * (scale ** 2)\n    else:\n        identity_approx = flat.T @ flat\n        expected_identity = np.eye(flat.shape[1]) * (scale ** 2)\n    \n    assert np.allclose(identity_approx, expected_identity, atol=1e-6), \"Orthogonality condition not satisfied\"\n    \n    return result.tolist()\n\n# Example usage\nnp.random.seed(0)\nshape = (2, 2)\nscale = 0.5\noutput = orthogonal(shape, scale)\nprint(output)\n```\n\nThis script defines the `orthogonal` function as specified, which initializes a tensor with an orthogonal matrix using the method described by Saxe et al. (2014). The function checks the orthogonality condition and returns the result as a Python list. The example usage demonstrates how to use the function with a fixed random seed to produce the expected output."}
{"task_id": 243, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a numpy array\n    s = np.array(state)\n    \n    # Define weights and biases (all weights = 1.0, all biases = 0.0)\n    W1 = np.ones((3, 4))\n    b1 = np.zeros(4)\n    W2 = np.ones((4, 4))\n    b2 = np.zeros(4)\n    W3 = np.ones((4, 4))\n    b3 = np.zeros(4)\n    Wa = np.ones((4, 3))\n    ba = np.zeros(3)\n    Wc = np.ones((4, 1))\n    bc = np.zeros(1)\n    \n    # Forward pass through the network\n    z1 = np.maximum(0, np.dot(s, W1) + b1)  # ReLU activation\n    z2 = np.maximum(0, np.dot(z1, W2) + b2)  # ReLU activation\n    z3 = np.maximum(0, np.dot(z2, W3) + b3)  # ReLU activation\n    \n    # Actor head\n    logits = np.dot(z3, Wa) + ba\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))  # Softmax activation\n    \n    # Critic head\n    state_value = np.dot(z3, Wc) + bc\n    \n    # Return rounded results\n    return [round(prob, 4) for prob in action_probs], round(state_value[0], 4)\n\n# Example usage:\n# state = [0.5, 0.5, 0.5]\n# action_probs, state_value = actor_critic_forward(state)\n# print(\"Action probabilities:\", action_probs)\n# print(\"State value:\", state_value)\n```\n\nThis script defines the `actor_critic_forward` function, which performs the forward pass of the specified Actor-Critic network using basic NumPy operations. The function takes a state vector as input and returns the action probabilities and state value, both rounded to four decimal places."}
{"task_id": 249, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    # Convert state to a numpy array\n    state = np.array(state)\n    \n    # Shared layers\n    W1, b1 = np.array(params['W1']), np.array(params['b1'])\n    W2, b2 = np.array(params['W2']), np.array(params['b2'])\n    W3, b3 = np.array(params['W3']), np.array(params['b3'])\n    \n    # Actor head\n    Wa, ba = np.array(params['Wa']), np.array(params['ba'])\n    \n    # Critic head\n    Wc, bc = np.array(params['Wc']), np.array(params['bc'])\n    \n    # Forward pass through shared layers\n    h1 = np.maximum(0, np.dot(state, W1) + b1)  # ReLU activation\n    h2 = np.maximum(0, np.dot(h1, W2) + b2)   # ReLU activation\n    h3 = np.maximum(0, np.dot(h2, W3) + b3)   # ReLU activation\n    \n    # Actor head forward pass\n    actor_scores = np.dot(h3, Wa) + ba\n    probabilities = np.exp(actor_scores - np.max(actor_scores))  # Subtract max for numerical stability\n    probabilities /= np.sum(probabilities)\n    \n    # Critic head forward pass\n    value = np.dot(h3, Wc) + bc\n    \n    # Round to 4 decimal places\n    probabilities = [round(p, 4) if p not in [0.0, 1.0] else p for p in probabilities]\n    value = round(value[0], 4) if value[0] not in [0.0, 1.0] else value[0]\n    \n    return probabilities, value\n```\n\nThis script defines the `actor_critic_forward` function, which performs the forward pass through the shared layers and the separate actor and critic heads, using NumPy for numerical operations. The function ensures that the output probabilities and the state value are rounded to four decimal places, with special handling for exact 0.0 and 1.0 values."}
{"task_id": 253, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)  # Ensure w is a NumPy array for vectorized operations\n    l2_ratio = 1 - l1_ratio\n    \n    if gradient:\n        # Compute the gradient\n        grad = alpha * (l1_ratio * np.sign(w) + l2_ratio * w)\n        return [round(g, 4) for g in grad.tolist()]\n    else:\n        # Compute the penalty value\n        l1_term = np.sum(np.abs(w))\n        l2_term = np.sum(w ** 2)\n        penalty = alpha * (l1_ratio * l1_term + l2_ratio * 0.5 * l2_term)\n        return round(penalty, 4)\n\n# Example usage:\n# w = [1.0, -2.0, 3.0]\n# alpha = 0.5\n# l1_ratio = 0.5\n# print(elastic_net_regularization(w, alpha, l1_ratio))  # Penalty value\n# print(elastic_net_regularization(w, alpha, l1_ratio, gradient=True))  # Gradient\n```\n\nThis script defines the `elastic_net_regularization` function, which calculates either the Elastic-Net penalty or its gradient based on the input parameters. The function handles both list and NumPy array inputs for the weight vector `w`, ensuring efficient computation using NumPy operations. The results are rounded to four decimal places as required."}
{"task_id": 256, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    # Handle special cases\n    if param_name in [\"X\", \"y\"]:\n        return None\n    if param_name in [\"Ba\", \"Bx\"]:\n        param_name = param_name.lower()\n\n    # Get the parameter to check\n    param = model.parameters[param_name]\n    param_shape = param.shape\n    grads = np.zeros_like(param, dtype=np.float64)\n\n    # Iterate over each element of the parameter\n    for i in range(param.size):\n        # Get the index in the flattened array\n        index = np.unravel_index(i, param_shape)\n        \n        # Save the original value\n        original_value = param[index]\n        \n        # Perturb the parameter with +epsilon\n        param[index] = original_value + epsilon\n        model.flush_gradients()\n        predictions_plus = []\n        for t in range(n_t):\n            prediction = model.forward(X[:, :, t])\n            predictions_plus.append(prediction)\n        loss_plus = loss_func(predictions_plus)\n        \n        # Perturb the parameter with -epsilon\n        param[index] = original_value - epsilon\n        model.flush_gradients()\n        predictions_minus = []\n        for t in range(n_t):\n            prediction = model.forward(X[:, :, t])\n            predictions_minus.append(prediction)\n        loss_minus = loss_func(predictions_minus)\n        \n        # Approximate the gradient\n        grads[index] = (loss_plus - loss_minus) / (2 * epsilon)\n        \n        # Restore the original value\n        param[index] = original_value\n\n    # Return the transposed gradient\n    return grads.T\n```\n\nThis script defines the `grad_check_RNN` function which numerically estimates the gradient of a specified parameter in a Recurrent Neural Network using the centered finite-difference formula. It handles special cases for parameter names and ensures that all intermediate computations are done in `float64` to minimize numerical noise. The function returns the transposed numerical gradient of the chosen parameter."}
{"task_id": 257, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n\n    m, n = X_train.shape\n    weights = np.ones(m) / m\n    stumps = []\n    alphas = []\n\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = None\n        best_threshold = None\n        best_polarity = None\n\n        for feature_i in range(n):\n            thresholds = np.unique(X_train[:, feature_i])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = np.ones(m)\n                    predictions[X_train[:, feature_i] * polarity < threshold * polarity] = -1\n\n                    weighted_error = np.sum(weights[predictions != y_train])\n\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        polarity *= -1\n\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump = feature_i\n                        best_threshold = threshold\n                        best_polarity = polarity\n\n        alpha = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n        alphas.append(alpha)\n\n        predictions = np.ones(m)\n        predictions[X_train[:, best_stump] * best_polarity < best_threshold * best_polarity] = -1\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n\n        stumps.append((best_stump, best_threshold, best_polarity))\n\n    # Predict on test data\n    y_pred = np.zeros(X_test.shape[0])\n    for alpha, (feature_i, threshold, polarity) in zip(alphas, stumps):\n        predictions = np.ones(X_test.shape[0])\n        predictions[X_test[:, feature_i] * polarity < threshold * polarity] = -1\n        y_pred += alpha * predictions\n\n    return [1 if pred >= 0 else -1 for pred in y_pred]\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([1, -1, 1, -1])\n# X_test = np.array([[2, 2], [3, 3]])\n# print(adaboost_predict(X_train, y_train, X_test, n_clf=3))\n```\n\nThis script implements the AdaBoost algorithm using decision stumps as weak learners. It trains the model on the provided training data and then predicts labels for the test data. The function returns a list of predicted labels, each being either `-1` or `1`."}
{"task_id": 261, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError(\"Shape must have at least two dimensions.\")\n\n    fan_in = shape[1]\n    fan_out = shape[0]\n    \n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n\n    s = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=s, size=shape).astype(np.float)\n\n# Example usage:\nif __name__ == \"__main__\":\n    shape = (64, 32, 3, 3)  # Example shape for a convolutional layer\n    weights = glorot_normal(shape)\n    print(\"Sample mean:\", np.mean(weights))\n    print(\"Sample standard deviation:\", np.std(weights))\n    print(\"Theoretical standard deviation:\", np.sqrt(2 / (shape[1] * shape[2] * shape[3] + shape[0] * shape[2] * shape[3])))\n```\n\nThis script defines the `glorot_normal` function which initializes a NumPy array with the Glorot Xavier normal initialization method. It calculates the `fan_in` and `fan_out` values based on the provided shape and then computes the standard deviation `s`. Finally, it returns a NumPy array with the specified shape where the elements are drawn from a normal distribution with mean 0 and standard deviation `s`. The example usage demonstrates how to use this function and prints the sample mean and standard deviation of the generated weights, along with the theoretical standard deviation for verification."}
{"task_id": 266, "completion_id": 0, "completion": "```\npython\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    # Create a dictionary to map each vertex to its index in V\n    vertex_index = {vertex: idx for idx, vertex in enumerate(V)}\n    \n    # Initialize the adjacency list with empty lists for each vertex\n    adj_list = [[] for _ in V]\n    \n    # Process each edge\n    for u, v in E:\n        # Add v to u's adjacency list if not already present\n        if v not in adj_list[vertex_index[u]]:\n            adj_list[vertex_index[u]].append(v)\n        # Add u to v's adjacency list if not already present\n        if u not in adj_list[vertex_index[v]]:\n            adj_list[vertex_index[v]].append(u)\n    \n    # Sort each adjacency list according to the order of vertices in V\n    for i in range(len(adj_list)):\n        adj_list[i].sort(key=lambda x: V.index(x))\n    \n    return adj_list\n\n# Example usage:\nV = ['A', 'B', 'C', 'D']\nE = [('A', 'B'), ('B', 'C'), ('A', 'C'), ('C', 'D'), ('D', 'A')]\nprint(build_adj_list(V, E))\n# Output: [['B', 'C', 'D'], ['A', 'C'], ['A', 'B', 'D'], ['A', 'C']]\n```\n\nThis script defines the `build_adj_list` function which converts an undirected graph given by its vertex list `V` and edge list `E` into an adjacency list representation. The function ensures that the adjacency list maintains the order of vertices as specified in `V` and that each adjacency list is sorted according to the order of vertices in `V`."}
{"task_id": 267, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_stump = {\n        \"feature_index\": None,\n        \"threshold\": None,\n        \"polarity\": None,\n        \"weighted_error\": float('inf')\n    }\n\n    for feature_index in range(n_features):\n        # Extract the feature column and sort it\n        feature_values = X[:, feature_index]\n        sorted_indices = np.argsort(feature_values)\n        sorted_feature_values = feature_values[sorted_indices]\n        sorted_y = y[sorted_indices]\n        sorted_weights = sample_weights[sorted_indices]\n\n        # Try both polarities\n        for polarity in [1, -1]:\n            # Initialize the error with the error of the default prediction (all -polarity)\n            if polarity == 1:\n                weighted_error = np.sum(sorted_weights[sorted_y == -1])\n            else:\n                weighted_error = np.sum(sorted_weights[sorted_y == 1])\n\n            # Iterate over all unique feature values as potential thresholds\n            for i in range(n_samples):\n                # Update the error by flipping the prediction of the i-th sample\n                weighted_error -= sorted_weights[i] * (sorted_y[i] * polarity)\n\n                # Avoid duplicate thresholds\n                if i < n_samples - 1 and sorted_feature_values[i] == sorted_feature_values[i + 1]:\n                    continue\n\n                # Check if this is the best stump so far\n                if weighted_error < best_stump[\"weighted_error\"]:\n                    best_stump[\"feature_index\"] = feature_index\n                    best_stump[\"threshold\"] = round((sorted_feature_values[i] + sorted_feature_values[i + 1]) / 2, 4)\n                    best_stump[\"polarity\"] = polarity\n                    best_stump[\"weighted_error\"] = round(weighted_error, 4)\n\n    return best_stump\n```\n\nThis script defines a function `train_decision_stump` that finds the optimal weighted decision stump for a binary classification task. It iterates over all features and all unique feature values as candidate thresholds, considering both polarities, and returns the stump with the minimal weighted classification error. The threshold and weighted error are rounded to the nearest 4th decimal place."}
{"task_id": 273, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    def shannon_entropy(labels):\n        counts = Counter(labels)\n        total = len(labels)\n        entropy = 0.0\n        for count in counts.values():\n            p = count / total\n            entropy -= p * math.log2(p)\n        return entropy\n\n    # Convert inputs to numpy arrays for easier manipulation\n    feature = np.array(feature)\n    target = np.array(target)\n\n    # Sort feature and target based on feature values\n    sorted_indices = np.argsort(feature)\n    sorted_feature = feature[sorted_indices]\n    sorted_target = target[sorted_indices]\n\n    # Find unique values and their indices\n    unique_values, unique_indices = np.unique(sorted_feature, return_index=True)\n\n    # If all feature values are identical, no split is possible\n    if len(unique_values) < 2:\n        return (None, 0.0)\n\n    max_gain = 0.0\n    best_threshold = None\n\n    # Calculate the entropy of the parent node\n    parent_entropy = shannon_entropy(sorted_target)\n\n    # Iterate over possible split points\n    for i in range(len(unique_indices) - 1):\n        # Calculate the threshold as the midpoint between consecutive unique values\n        t = (unique_values[i] + unique_values[i + 1]) / 2.0\n\n        # Split the data into left and right subsets\n        left_indices = sorted_indices[:unique_indices[i + 1]]\n        right_indices = sorted_indices[unique_indices[i + 1]:]\n\n        left_target = target[left_indices]\n        right_target = target[right_indices]\n\n        # Calculate the entropy of the left and right subsets\n        left_entropy = shannon_entropy(left_target)\n        right_entropy = shannon_entropy(right_target)\n\n        # Calculate the information gain\n        n = len(sorted_target)\n        gain = parent_entropy - (len(left_target) / n) * left_entropy - (len(right_target) / n) * right_entropy\n\n        # Update the best threshold if the current gain is higher\n        if gain > max_gain:\n            max_gain = gain\n            best_threshold = t\n\n    # If no positive information gain is found, return (None, 0.0)\n    if max_gain <= 0.0:\n        return (None, 0.0)\n\n    return (round(best_threshold, 4), round(max_gain, 4))\n```\n\nThis script defines the `best_split` function, which calculates the optimal numerical threshold for splitting a dataset in a decision tree based on information gain. The function handles cases where no legal thresholds exist or where no positive information gain can be achieved."}
{"task_id": 286, "completion_id": 0, "completion": "```\npython\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    return [[0.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    return [[1.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    return [[random.uniform(low, high) for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError(\"Invalid initialization function.\")\n```\n\nThis script defines the required initializer functions (`zeros_init`, `ones_init`, and `random_uniform_init`) and the `get_initializer` function that retrieves the appropriate initializer based on the provided name. The `get_initializer` function checks if the specified name exists in the global namespace and if it is callable, raising a `ValueError` if not."}
{"task_id": 287, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n    \n    # Calculate output dimensions\n    H_out = (H - p_h) // s_h + 1\n    W_out = (W - p_w) // s_w + 1\n    \n    # Initialize pooled output\n    pooled_output = np.zeros((N, C, H_out, W_out))\n    \n    # Forward pass\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_out):\n                for w in range(W_out):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    pooled_output[n, c, h, w] = np.mean(X[n, c, h_start:h_end, w_start:w_end])\n    \n    # Initialize gradient input\n    grad_input = np.zeros_like(X)\n    \n    # Backward pass\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_out):\n                for w in range(W_out):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += accum_grad[n, c, h, w] / (p_h * p_w)\n    \n    # Round and convert to lists\n    pooled_output = np.round(pooled_output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    \n    return pooled_output, grad_input\n```\n\nThis script defines the `average_pool2d` function, which performs both the forward and backward passes of a 2-D average-pooling layer. The function takes the input tensor `X`, pooling shape `pool_shape`, stride `stride`, and accumulated gradient `accum_grad` as inputs, and returns the pooled output and the gradient input as lists of lists. Each value in the returned lists is rounded to the nearest 4th decimal place."}
{"task_id": 290, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    # If both are leaves, compare their values\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-8)\n    \n    # If both are nodes, compare their features, thresholds, and subtrees\n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        feature_match = tree_a.feature == tree_b.feature\n        threshold_match = np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-8)\n        left_match = compare_trees(tree_a.left, tree_b.left)\n        right_match = compare_trees(tree_a.right, tree_b.right)\n        return feature_match and threshold_match and left_match and right_match\n    \n    # If one is a leaf and the other is a node, they are not equivalent\n    return False\n```"}
{"task_id": 292, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                            parent2: list[list[int | float]],\n                            cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    # Convert parent lists to NumPy arrays for efficient slicing\n    np_parent1 = np.array(parent1)\n    np_parent2 = np.array(parent2)\n    \n    # Validate that the two parent matrices have the same shape\n    if np_parent1.shape != np_parent2.shape:\n        return -1\n    \n    # Get the number of columns\n    num_cols = np_parent1.shape[1]\n    \n    # Ensure the cutoff is within valid range\n    if cutoff < 0 or cutoff > num_cols:\n        return -1\n    \n    # Create child1 and child2 using slicing\n    child1 = np.concatenate((np_parent1[:, :cutoff], np_parent2[:, cutoff:]), axis=1)\n    child2 = np.concatenate((np_parent2[:, :cutoff], np_parent1[:, cutoff:]), axis=1)\n    \n    # Convert the resulting child matrices back to lists\n    child1_list = child1.tolist()\n    child2_list = child2.tolist()\n    \n    return (child1_list, child2_list)\n\n# Example usage:\nparent1 = [[1, 2, 3], [4, 5, 6]]\nparent2 = [[7, 8, 9], [10, 11, 12]]\ncutoff = 1\n\nresult = single_point_crossover(parent1, parent2, cutoff)\nprint(result)  # Output: ([[1, 8, 9], [4, 11, 12]], [[7, 2, 3], [10, 5, 6]])\n```\n\nThis script defines the `single_point_crossover` function, which performs the specified single-point column crossover on two parent weight matrices. It includes validation to ensure the matrices have the same shape and handles the crossover logic using NumPy for efficient array operations. The final results are converted back to nested Python lists before being returned."}
{"task_id": 294, "completion_id": 0, "completion": "```\npython\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj: Dict[Any, List[Tuple[Any, float]]] = {label: [] for label in G['_V2I']}\n    \n    for i, edges in enumerate(G['_G']):\n        source_label = list(G['_V2I'].keys())[i]\n        for source, target, weight in edges:\n            adj[source_label].append((target, weight))\n            if not G['is_directed']:\n                adj[target].append((source, weight))\n    \n    # Sort the neighbour lists alphabetically by the neighbour label\n    for label in adj:\n        adj[label].sort(key=lambda x: x[0])\n    \n    return adj\n\n# Example usage:\n# G = {\n#     'is_directed': False,\n#     '_V2I': {'A': 0, 'B': 1, 'C': 2},\n#     '_G': [\n#         [('A', 'B', 1.0), ('A', 'C', 2.0)],\n#         [('B', 'A', 1.0)],\n#         [('C', 'A', 2.0)]\n#     ]\n# }\n\n# print(to_networkx(G))\n# Output: {'A': [('B', 1.0), ('C', 2.0)], 'B': [('A', 1.0), ('C', 2.0)], 'C': [('A', 2.0), ('B', 1.0)]}\n```\n\nThis script defines the `to_networkx` function which converts a custom graph representation into an adjacency dictionary. The function handles both directed and undirected graphs, ensuring that edges in undirected graphs appear in both directions and that neighbor lists are sorted alphabetically."}
{"task_id": 296, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    # Convert input to a NumPy array if it isn't already\n    x = np.asarray(x)\n    \n    # Check if all elements are either 0 or 1\n    return np.all((x == 0) | (x == 1))\n\n# Example usage:\n# print(is_binary(np.array([0, 1, 0, 1])))  # Should return True\n# print(is_binary(np.array([0, 2, 0, 1])))  # Should return False\n# print(is_binary(np.array([True, False, True])))  # Should return True\n# print(is_binary(np.array([0.0, 1.0, 0.0])))  # Should return True\n# print(is_binary(np.array([0.0, 0.5, 0.0])))  # Should return False\n```"}
{"task_id": 298, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    if N < 1:\n        raise ValueError(\"N must be at least 1\")\n\n    # Tokenize the corpus and query\n    tokenized_corpus = []\n    for sentence in corpus:\n        tokens = sentence.split()\n        if N > 1:\n            tokens = [\"<bol>\"] * (N - 1) + tokens + [\"<eol>\"]\n        tokenized_corpus.extend(tokens)\n\n    query_tokens = query.split()\n    if N > 1:\n        query_tokens = [\"<bol>\"] * (N - 1) + query_tokens + [\"<eol>\"]\n\n    # If the query is too short for the requested N, return -inf\n    if len(query_tokens) < N:\n        return float('-inf')\n\n    # Count N-grams and (N-1)-grams\n    ngram_counts = Counter(tuple(tokens[i:i+N]) for sentence in tokenized_corpus for i in range(len(sentence) - N + 1))\n    n1gram_counts = Counter(tuple(tokens[i:i+N-1]) for sentence in tokenized_corpus for i in range(len(sentence) - N + 1))\n\n    # Calculate the log-probability of the query\n    log_prob = 0.0\n    for i in range(len(query_tokens) - N + 1):\n        ngram = tuple(query_tokens[i:i+N])\n        n1gram = tuple(query_tokens[i:i+N-1])\n        \n        ngram_count = ngram_counts[ngram]\n        n1gram_count = n1gram_counts[n1gram]\n        \n        if n1gram_count == 0:\n            return float('-inf')\n        \n        prob = ngram_count / n1gram_count\n        if prob == 0:\n            return float('-inf')\n        \n        log_prob += math.log(prob)\n\n    return round(log_prob, 4)\n\n# Example usage:\ncorpus = [\"a b a\", \"b a b\"]\nquery = \"a b\"\nN = 1\nprint(ngram_log_prob(corpus, query, N))  # Output: -1.3863\n```"}
{"task_id": 302, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n, d = X.shape\n    \n    # Step 1: Build the weighted adjacency matrix W\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                W[i, j] = 1 / (1 + np.linalg.norm(X[i] - X[j]))\n    \n    # Step 2: Compute the diagonal degree matrix D\n    D = np.diag(np.sum(W, axis=1))\n    \n    # Step 3: Compute the unnormalized graph Laplacian L\n    L = D - W\n    \n    # Step 4: Obtain the first k eigenvectors of L\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    \n    # Step 5: Run k-means on the rows of E\n    centroids = E[:k].copy()\n    labels = np.zeros(n, dtype=int)\n    for _ in range(100):\n        # Assign labels based on the nearest centroid\n        new_labels = np.argmin(np.linalg.norm(E[:, np.newaxis] - centroids, axis=2), axis=1)\n        \n        # Check for convergence\n        if np.array_equal(labels, new_labels):\n            break\n        \n        labels = new_labels\n        \n        # Update centroids\n        for cluster in range(k):\n            cluster_points = E[labels == cluster]\n            if len(cluster_points) == 0:\n                # Re-initialize centroid if cluster is empty\n                centroids[cluster] = E[np.random.choice(n)]\n            else:\n                centroids[cluster] = np.mean(cluster_points, axis=0)\n    \n    return labels.tolist()\n```\n\nThis script implements the Spectral Clustering algorithm from scratch, following the specified steps. It uses NumPy for numerical operations but avoids other libraries for clustering or linear algebra beyond what is necessary for the task."}
{"task_id": 303, "completion_id": 0, "completion": "```\npython\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_label, prev_mine = params[prev_ix]\n    curr_label, curr_mine = params[ix]\n\n    return (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_mine}\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{golds[prev_label]}\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_mine}\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{golds[curr_label]}{warn_str}\\n\"\n        \"----------------------- END DEBUG -----------------------\"\n    )\n```"}
{"task_id": 304, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    # Add intercept column if required\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n    \n    # Determine the number of features (M)\n    M = X.shape[1]\n    \n    # Handle different types of V input\n    if V is None:\n        V_inv = np.eye(M)\n    elif isinstance(V, (int, float)):\n        V_inv = V * np.eye(M)\n    elif isinstance(V, (list, tuple)):\n        V_inv = np.diag(V)\n    else:\n        V_inv = np.linalg.inv(V)\n    \n    # Handle different types of mu input\n    if isinstance(mu, (int, float)):\n        mu = np.full(M, mu)\n    \n    # Compute posterior covariance matrix (up to \u03c3\u00b2)\n    XTX = X.T @ X\n    Sigma_b = np.linalg.inv(V_inv + XTX)\n    \n    # Compute posterior mean\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    \n    # Return rounded coefficients\n    return [round(coef, 4) for coef in mu_b]\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([1, 2, 3])\n# print(bayesian_posterior_mean(X, y, fit_intercept=True))\n```\n\nThis script defines the `bayesian_posterior_mean` function, which computes the posterior mean of the regression coefficients in Bayesian linear regression with an unknown noise variance. The function handles different types of prior specifications for `V` and `mu`, and optionally adds an intercept column to the design matrix `X`. The returned coefficients are rounded to four decimal places."}
{"task_id": 308, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(m):\n        return 700 * (10**(m / 2595) - 1)\n\n    # Convert limits expressed in Hertz to the Mel scale\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n\n    # Generate n_filters+2 equally-spaced values on the Mel axis\n    mel_points = np.linspace(min_mel, max_mel, n_filters + 2)\n\n    # Convert those Mel values back to Hertz\n    hz_points = mel_to_hz(mel_points)\n\n    # Initialize the filterbank matrix\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n\n    for i in range(n_filters):\n        f_left = hz_points[i]\n        f_center = hz_points[i + 1]\n        f_right = hz_points[i + 2]\n\n        for k in range(N // 2 + 1):\n            f_k = k * fs / N\n\n            if f_left < f_k <= f_center:\n                filterbank[i, k] = (f_k - f_left) / (f_center - f_left)\n            elif f_center < f_k <= f_right:\n                filterbank[i, k] = (f_right - f_k) / (f_right - f_center)\n\n        if normalize:\n            filterbank[i] *= 2 / (f_right - f_left)\n\n    # Round every element to 4 decimal places and convert to a plain Python list\n    filterbank = filterbank.round(4).tolist()\n\n    return filterbank\n```\n\nThis script defines the `mel_filterbank` function, which constructs a Mel filterbank matrix as specified. The function uses helper functions to convert between Hertz and Mel scales, generates the necessary frequency points, and constructs the filterbank matrix by calculating the weights for each filter and bin. The matrix is then normalized if specified and rounded to four decimal places before being returned as a plain Python list."}
{"task_id": 312, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    \n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n    \n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    \n    n = np.arange(window_len)\n    if not symmetric:\n        n = np.arange(window_len + 1)[:window_len]\n    \n    bh_window = (a0 - a1 * np.cos(2 * np.pi * n / N) +\n                 a2 * np.cos(4 * np.pi * n / N) -\n                 a3 * np.cos(6 * np.pi * n / N))\n    \n    return [round(val, 4) for val in bh_window]\n\n# Example usage:\n# print(blackman_harris(10, symmetric=False))\n# print(blackman_harris(10, symmetric=True))\n```\n\nThis script defines the `blackman_harris` function, which generates a Blackman-Harris window of a specified length and type (symmetric or periodic). The function handles special cases for window lengths less than or equal to 1 and ensures that all values in the returned window are rounded to four decimal places."}
{"task_id": 313, "completion_id": 0, "completion": "```\npython\nimport math\nimport numpy as np\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    def digamma(x):\n        # Shift x to a moderate value using the recursion \u03c8(x) = \u03c8(x+1) - 1/x\n        if x < 6:\n            return digamma(x + 1) - 1 / x\n        # Use the asymptotic expansion for large x\n        return math.log(x) - 1 / (2 * x) - 1 / (12 * x**2) + 1 / (120 * x**4) - 1 / (252 * x**6)\n\n    gamma_d = gamma[d]\n    gamma_dt = gamma_d[t]\n    sum_gamma_d = sum(gamma_d)\n    \n    result = digamma(gamma_dt) - digamma(sum_gamma_d)\n    return round(result, 4)\n\n# Example usage:\n# gamma = np.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])\n# d = 0\n# t = 1\n# print(expected_log_dirichlet(gamma, d, t))  # Output should be rounded to 4 decimals\n```\n\nThis script defines the `expected_log_dirichlet` function, which calculates the expected logarithm of a Dirichlet component using a custom implementation of the digamma function. The function handles the recursion for small values of `x` and uses an asymptotic expansion for larger values. The result is rounded to four decimal places as required."}
{"task_id": 317, "completion_id": 0, "completion": "```\npython\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    # Determine the previous index\n    prev_ix = max(ix - 1, 0)\n    \n    # Extract previous and current data\n    prev_prediction, prev_label = params[prev_ix]\n    curr_prediction, curr_label = params[ix]\n    \n    # Get the gold values\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    \n    # Construct the formatted string\n    report = (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_prediction}\\n\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{prev_gold}\\n\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_prediction}\\n\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{curr_gold}{warn_str}\\n\"\n        \"----------------------- END DEBUG -----------------------\"\n    )\n    \n    return report\n```\n\nThis script defines the `err_fmt` function as specified, which generates a formatted debug report comparing predictions to gold values, including an optional warning message. The function constructs the report according to the detailed format requirements provided in the task description."}
{"task_id": 318, "completion_id": 0, "completion": "```\npython\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    weights = np.ones(n_samples) / n_samples\n    \n    stumps = []\n    alphas = []\n\n    for _ in range(n_estimators):\n        min_error = float('inf')\n        best_feature = None\n        best_threshold = None\n        best_polarity = None\n\n        for feature in range(n_features):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = np.ones(n_samples)\n                    predictions[X_train[:, feature] * polarity < threshold * polarity] = -1\n\n                    error = np.sum(weights[predictions != y_train])\n                    if error > 0.5:\n                        error = 1 - error\n                        polarity *= -1\n\n                    if error < min_error:\n                        min_error = error\n                        best_feature = feature\n                        best_threshold = threshold\n                        best_polarity = polarity\n\n        epsilon = min_error\n        alpha = 0.5 * math.log((1 - epsilon) / epsilon)\n        weights *= np.exp(-alpha * y_train * np.where(X_train[:, best_feature] * best_polarity < best_threshold * best_polarity, -1, 1))\n        weights /= np.sum(weights)\n\n        stumps.append((best_feature, best_threshold, best_polarity))\n        alphas.append(alpha)\n\n    def predict_sample(sample):\n        score = 0\n        for (feature, threshold, polarity), alpha in zip(stumps, alphas):\n            prediction = -1 if sample[feature] * polarity < threshold * polarity else 1\n            score += alpha * prediction\n        return 1 if score >= 0 else -1\n\n    return [predict_sample(sample) for sample in X_test]\n```\nThis script implements the AdaBoost.M1 algorithm using decision stumps as weak learners. It trains the model on the provided training data and predicts the labels for the test data. The predictions are returned as a list of integers, either `-1` or `1`."}
{"task_id": 329, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    \n    delta_f = fs / N\n    \n    if positive_only:\n        # Non-negative frequencies\n        k_values = np.arange(0, N // 2 + 1)\n        frequencies = k_values * delta_f\n    else:\n        # Full list of frequencies\n        k_values = np.arange(0, N)\n        frequencies = k_values * delta_f\n        frequencies = np.fft.fftfreq(N, 1 / fs)\n    \n    # Round to 4 decimal places and convert to list\n    return [round(freq, 4) for freq in frequencies.tolist()]\n\n# Example usage:\n# print(dft_bins(8, 1000, positive_only=True))\n# print(dft_bins(8, 1000, positive_only=False))\n```\n\nThis script defines the `dft_bins` function, which calculates the center frequencies of DFT bins based on the given parameters. It handles both the positive-only and full frequency modes, and ensures that the output is rounded to four decimal places. If either `N` or `fs` is non-positive, it returns an empty list."}
{"task_id": 331, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    \n    n_samples = y_true.shape[0]\n    \n    oob_squared_errors = []\n    \n    for i in range(n_samples):\n        oob_predictions = predictions[i, oob_mask[i]]\n        if oob_predictions.size > 0:\n            oob_average = np.mean(oob_predictions)\n            squared_error = (oob_average - y_true[i]) ** 2\n            oob_squared_errors.append(squared_error)\n    \n    if not oob_squared_errors:\n        return -1\n    \n    oob_mse_value = np.mean(oob_squared_errors)\n    return round(oob_mse_value, 4)\n```\n\nThis script defines the `oob_mse` function which computes the out-of-bag mean squared error for a Random Forest regressor based on the provided true target values, predictions from each tree, and the out-of-bag mask. The function returns the OOB-MSE rounded to four decimal places or -1 if no OOB predictions are available."}
{"task_id": 332, "completion_id": 0, "completion": "```\npython\nfrom collections import Counter\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    \n    # Step 1: Compute the support for every item\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    \n    # Step 2: Discard items with support less than min_support\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_support}\n    \n    # Step 3: Create a global ordering of the remaining items\n    # Sort by decreasing support, then alphabetically for ties\n    ordered_items = sorted(frequent_items, key=lambda x: (-frequent_items[x], x))\n    \n    # Step 4: Build the FP-Tree\n    root = {\"support\": 0, \"children\": {}}\n    \n    for transaction in transactions:\n        # Remove duplicates and keep only frequent items\n        transaction = sorted(set(transaction).intersection(frequent_items), key=lambda x: ordered_items.index(x))\n        \n        # Walk from the root and update/extend the path\n        current_node = root\n        for item in transaction:\n            if item not in current_node[\"children\"]:\n                current_node[\"children\"][item] = {\"support\": 0, \"children\": {}}\n            current_node = current_node[\"children\"][item]\n            current_node[\"support\"] += 1\n    \n    return root\n\n# Example usage:\ntransactions = [\n    ['m', 'n', 'o', 'p'],\n    ['n', 'o', 'p', 'q'],\n    ['m', 'n', 'o', 'q'],\n    ['m', 'n', 'o', 'q'],\n    ['n', 'o', 'p']\n]\n\nmin_support = 2\nfp_tree = build_fp_tree(transactions, min_support)\nprint(fp_tree)\n```\n\nThis script defines the `build_fp_tree` function which constructs an FP-Tree from a list of transactions and a minimum support threshold. The tree is represented as a nested dictionary, and the function follows the steps outlined in the task description. The example usage at the end demonstrates how to call the function and print the resulting FP-Tree."}
{"task_id": 336, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", Y: list[list[int | float]] | \"np.ndarray\" | None = None, c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    # Convert inputs to NumPy arrays for easier manipulation\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    \n    # Check if the number of columns in X and Y are the same\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # Calculate the kernel matrix\n    K = np.dot(X, Y.T) + c0\n    \n    # Round the results to 4 decimal places\n    K_rounded = np.round(K, 4)\n    \n    # Convert the result back to a list of lists\n    return K_rounded.tolist()\n\n# Example usage:\n# X = [[1, 2], [3, 4]]\n# Y = [[5, 6], [7, 8]]\n# print(linear_kernel(X, Y))  # Output: [[19.0, 27.0], [43.0, 57.0]]\n```\n\nThis script defines the `linear_kernel` function as specified, handling both list and NumPy array inputs, checking for compatible dimensions, and returning the kernel matrix rounded to four decimal places."}
{"task_id": 340, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n\n    # Update the first moment estimate\n    m_t = beta1 * m + (1 - beta1) * grad\n    \n    # Update the second moment estimate\n    v_t = beta2 * v + (1 - beta2) * grad**2\n    \n    # Compute bias-corrected first moment estimate\n    m_hat_t = m_t / (1 - beta1**t)\n    \n    # Compute bias-corrected second moment estimate\n    v_hat_t = v_t / (1 - beta2**t)\n    \n    # Update the parameter\n    param_t = param - lr * m_hat_t / (np.sqrt(v_hat_t) + eps)\n    \n    # Convert to lists and round to 8 decimal places\n    updated_param = param_t.tolist()\n    new_m = m_t.tolist()\n    new_v = v_t.tolist()\n    \n    # Round the lists to 8 decimal places\n    updated_param = np.round(updated_param, 8).tolist()\n    new_m = np.round(new_m, 8).tolist()\n    new_v = np.round(new_v, 8).tolist()\n    \n    return updated_param, new_m, new_v\n```\n\nThis script defines the `adam_update` function, which performs a single step of the Adam optimization algorithm. The function updates the parameter, first moment estimate, and second moment estimate according to the Adam update rules, and returns them as lists rounded to 8 decimal places."}
{"task_id": 343, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                          rewards: list[float] | np.ndarray,\n                          retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # Determine the number of samples to retain\n    N = len(theta_samples)\n    num_retain = int(retain_prcnt * N)\n    \n    # Sort the indices of the rewards in descending order\n    sorted_indices = np.argsort(rewards)[::-1]\n    \n    # Select the top `num_retain` samples\n    elite_samples = theta_samples[sorted_indices[:num_retain]]\n    \n    # Compute the mean and variance of the elite samples\n    elite_mean = np.mean(elite_samples, axis=0)\n    elite_variance = np.var(elite_samples, axis=0)\n    \n    # Round the results to four decimal places\n    elite_mean_rounded = [round(x, 4) for x in elite_mean]\n    elite_variance_rounded = [round(x, 4) for x in elite_variance]\n    \n    return elite_mean_rounded, elite_variance_rounded\n```\n\nThis script defines the `cross_entropy_update` function, which performs the required operations to update the mean and variance of the parameter samples using the Cross-Entropy Method. The function sorts the samples based on their rewards, retains the top `retain_prcnt` fraction, and then calculates the mean and variance of these retained samples, rounding the results to four decimal places."}
{"task_id": 353, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n\n    label_counts = Counter(labels)\n    total_count = len(labels)\n    entropy_value = 0.0\n\n    for count in label_counts.values():\n        probability = count / total_count\n        entropy_value -= probability * math.log2(probability)\n\n    return round(entropy_value, 5)\n\n# Example usage:\n# labels = ['a', 'b', 'a', 'a', 'b', 'b', 'b']\n# print(entropy(labels))  # Output should be 0.98523\n```\n\nThis script defines the `entropy` function, which calculates the base-2 Shannon entropy of a given sequence of class labels. It handles the special cases of an empty input and identical labels, and rounds the result to five decimal places."}
{"task_id": 354, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    \n    # Extract dimensions\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kernel_rows, kernel_cols, in_ch, out_ch = W.shape\n    \n    # Handle padding\n    if isinstance(pad, int):\n        pad = (pad, pad, pad, pad)\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pad = (pad[0], pad[0], pad[1], pad[1])\n    elif isinstance(pad, str) and pad == 'same':\n        pr1 = (out_rows - 1) * stride + kernel_rows + (kernel_rows - 1) * (dilation - 1) - in_rows\n        pr2 = pr1\n        pc1 = (out_cols - 1) * stride + kernel_cols + (kernel_cols - 1) * (dilation - 1) - in_cols\n        pc2 = pc1\n        pad = (pr1, pr2, pc1, pc2)\n    \n    # Apply padding\n    X_padded = np.pad(X, ((0, 0), (pad[0], pad[1]), (pad[2], pad[3]), (0, 0)), mode='constant')\n    \n    # Compute output dimensions\n    out_rows = (in_rows + pad[0] + pad[1] - (kernel_rows + (kernel_rows - 1) * (dilation - 1))) // stride + 1\n    out_cols = (in_cols + pad[2] + pad[3] - (kernel_cols + (kernel_cols - 1) * (dilation - 1))) // stride + 1\n    \n    # Initialize output\n    Y = np.zeros((n_ex, out_rows, out_cols, out_ch))\n    \n    # Perform im2col\n    X_col = np.zeros((kernel_rows * kernel_cols * in_ch, out_rows * out_cols * n_ex))\n    for ex in range(n_ex):\n        col_idx = 0\n        for i in range(0, in_rows + pad[0] + pad[1] - (kernel_rows + (kernel_rows - 1) * (dilation - 1)), stride):\n            for j in range(0, in_cols + pad[2] + pad[3] - (kernel_cols + (kernel_cols - 1) * (dilation - 1)), stride):\n                for ki in range(kernel_rows):\n                    for kj in range(kernel_cols):\n                        for ic in range(in_ch):\n                            X_col[col_idx, ex * out_rows * out_cols + col_idx] = X_padded[ex, i + ki * dilation, j + kj * dilation, ic]\n                col_idx += 1\n    \n    # Reshape W for GEMM\n    W_col = W.reshape(kernel_rows * kernel_cols * in_ch, out_ch)\n    \n    # Perform GEMM\n    Y_col = W_col.T @ X_col\n    \n    # Reshape Y_col to Y\n    Y = Y_col.reshape(out_ch, out_rows, out_cols, n_ex).transpose(3, 1, 2, 0)\n    \n    # Return as a Python list\n    return Y.tolist()\n```\n\nThis script defines the `conv2D` function that performs 2-D convolution using the im2col + GEMM strategy. It handles various padding specifications and dilation factors, and returns the result as a nested Python list. Note that the output dimensions are calculated based on the input dimensions, kernel size, stride, padding, and dilation."}
{"task_id": 355, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # Step 1: Standardise the data by subtracting the feature-wise mean\n    mean = np.mean(data, axis=0)\n    centred_data = data - mean\n\n    if solver == \"svd\":\n        # Step 2: Use Singular Value Decomposition\n        U, S, VT = np.linalg.svd(centred_data, full_matrices=False)\n        # The principal directions are the columns of VT\n        directions = VT.T\n        # The explained variance is the square of the singular values divided by n-1\n        explained_variance = (S ** 2) / (centred_data.shape[0] - 1)\n    elif solver == \"eigen\":\n        # Step 2: Use Eigen-decomposition of the covariance matrix\n        cov_matrix = np.cov(centred_data, rowvar=False, ddof=1)\n        eigenvalues, eigenvectors = np.linalg.eigh(cov_matrix)\n        # Sort eigenvalues and eigenvectors in descending order\n        idx = np.argsort(eigenvalues)[::-1]\n        eigenvalues = eigenvalues[idx]\n        eigenvectors = eigenvectors[:, idx]\n        # The principal directions are the eigenvectors\n        directions = eigenvectors\n        # The explained variance is the eigenvalues\n        explained_variance = eigenvalues\n    else:\n        raise ValueError(\"Solver must be either 'svd' or 'eigen'.\")\n\n    # Step 3: Sort the directions in descending order of their importance\n    # and keep the first n_components of them\n    sorted_idx = np.argsort(explained_variance)[::-1]\n    sorted_directions = directions[:, sorted_idx]\n    sorted_explained_variance = explained_variance[sorted_idx]\n    n_components = min(n_components, sorted_directions.shape[1])\n    principal_directions = sorted_directions[:, :n_components]\n    explained_variance = sorted_explained_variance[:n_components]\n\n    # Step 4: Make the sign of every kept direction deterministic\n    for i in range(n_components):\n        first_non_zero_idx = np.where(principal_directions[:, i] != 0)[0][0]\n        if principal_directions[first_non_zero_idx, i] < 0:\n            principal_directions[:, i] *= -1\n\n    # Step 5: Project the centred data onto the retained directions\n    scores = centred_data @ principal_directions\n\n    # Step 6: Calculate explained variance ratio\n    total_variance = np.sum(explained_variance)\n    explained_variance_ratio = explained_variance / total_variance\n\n    # Round the final results\n    scores_rounded = np.round(scores, 4).tolist()\n    explained_variance_ratio_rounded = np.round(explained_variance_ratio, 4).tolist()\n\n    return scores_rounded, explained_variance_ratio_rounded\n```"}
{"task_id": 356, "completion_id": 0, "completion": "```\npython\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # For classification, return the index of the maximum probability\n        return int(numpy.argmax(leaf.value))\n    else:\n        # For regression, return the scalar value\n        return leaf.value\n\n# Example usage:\n# Classification leaf\nclassification_leaf = Leaf([0.1, 0.3, 0.6])\nprint(leaf_predict(classification_leaf, classifier=True))  # Output: 2\n\n# Regression leaf\nregression_leaf = Leaf(15.5)\nprint(leaf_predict(regression_leaf, classifier=False))  # Output: 15.5\n```\n\nNote: The example usage assumes that `numpy` is imported. If you run this script, make sure to include `import numpy` at the top of your script. Here is the complete script with the import statement:\n\n```python\nimport numpy\n\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # For classification, return the index of the maximum probability\n        return int(numpy.argmax(leaf.value))\n    else:\n        # For regression, return the scalar value\n        return leaf.value\n\n# Example usage:\n# Classification leaf\nclassification_leaf = Leaf([0.1, 0.3, 0.6])\nprint(leaf_predict(classification_leaf, classifier=True))  # Output: 2\n\n# Regression leaf\nregression_leaf = Leaf(15.5)\nprint(leaf_predict(regression_leaf, classifier=False))  # Output: 15.5\n```"}
{"task_id": 357, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    # Step 1: Initialize centroids with the first K samples\n    centroids = data[:K].copy()\n    \n    for _ in range(max_iters):\n        # Step 2: Assign each sample to the closest centroid\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Step 3: Recompute centroids\n        new_centroids = np.array([data[labels == k].mean(axis=0) if np.any(labels == k) else centroids[k] for k in range(K)])\n        \n        # Check for convergence\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 1e-6):\n            break\n        \n        centroids = new_centroids\n    \n    # Sort centroids lexicographically and round to four decimals\n    sorted_centroids = sorted(centroids, key=lambda x: tuple(x))\n    rounded_centroids = np.round(sorted_centroids, 4).tolist()\n    \n    return rounded_centroids\n\n# Example usage\ndata = np.array([[1, 1],\n                 [1, 2],\n                 [2, 1],\n                 [8, 8],\n                 [9, 8],\n                 [8, 9]])\nK = 2\nprint(kmeans(data, K))  # Output: [[1.3333, 1.3333], [8.3333, 8.3333]]\n```"}
{"task_id": 362, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | \"np.ndarray\") -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert input to a float NumPy array\n    matrix = np.array(data, dtype=float)\n    \n    # Compute the sum of each row\n    row_sums = np.sum(matrix, axis=1)\n    \n    # Check if any row sum is zero\n    if np.any(row_sums == 0):\n        return -1\n    \n    # Divide each element by the row sum to normalise\n    stochastic_matrix = matrix / row_sums[:, np.newaxis]\n    \n    # Round to 4 decimal places\n    stochastic_matrix_rounded = np.round(stochastic_matrix, 4)\n    \n    # Convert to a list of lists and return\n    return stochastic_matrix_rounded.tolist()\n\n# Example usage:\n# data = [[1, 2, 3], [0, 0, 0], [4, 5, 6]]\n# print(row_stochastic_matrix(data))  # Output should be -1 because the second row sums to 0\n```\n\nThis script defines the function `row_stochastic_matrix` which takes a 2-D list or NumPy array as input, converts it to a row-stochastic matrix if possible, and returns the result as a list of lists with values rounded to four decimal places. If any row sums to zero, it returns `-1` to indicate that normalization is impossible for that row."}
{"task_id": 363, "completion_id": 0, "completion": "```\npython\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    def check_space(space: Space, is_tuple: bool) -> bool:\n        if is_tuple:\n            if isinstance(space, Tuple):\n                return all(isinstance(sub_space, Box) for sub_space in space.spaces)\n            elif isinstance(space, Dict):\n                return all(isinstance(sub_space, Box) for sub_space in space.spaces.values())\n            else:\n                return False\n        else:\n            return isinstance(space, Box)\n    \n    cont_action = check_space(env.action_space, tuple_action)\n    cont_obs = check_space(env.observation_space, tuple_obs)\n    \n    return (cont_action, cont_obs)\n```\n\nThis script defines the necessary classes and the `is_continuous` function, which checks if the action and observation spaces of an environment are continuous based on the provided flags. The function `check_space` is a helper function that determines the continuity of a space, considering whether it is a composite space or not."}
{"task_id": 369, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    # Initialize the running prediction with zeros, having the same shape as a single update array\n    running_pred = np.zeros_like(updates[0], dtype=np.float64)\n    \n    # Aggregate the updates\n    for update in updates:\n        running_pred -= learning_rate * update\n    \n    # Return the result based on the type of problem\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        # Apply softmax to get class probabilities and then argmax to get class labels\n        probabilities = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        probabilities /= np.sum(probabilities, axis=1, keepdims=True)\n        return np.argmax(probabilities, axis=1)\n\n# Example usage:\n# For regression\n# updates = [np.array([0.1, 0.2, 0.3]), np.array([0.05, 0.1, 0.15])]\n# learning_rate = 0.1\n# print(gradient_boosting_predict(updates, learning_rate, regression=True))\n\n# For classification\n# updates = [np.array([[0.1, 0.2, 0.7], [0.6, 0.2, 0.2]]), np.array([[0.2, 0.1, 0.7], [0.1, 0.6, 0.3]])]\n# learning_rate = 0.1\n# print(gradient_boosting_predict(updates, learning_rate, regression=False))\n```\n\nThis script defines the `gradient_boosting_predict` function as specified, handling both regression and classification tasks using NumPy operations. The function is fully vectorized and avoids explicit loops over individual samples."}
{"task_id": 371, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, _, out_channels = W.shape\n\n    # Calculate effective kernel width with dilation\n    effective_kernel_width = (kernel_width - 1) * dilation + 1\n\n    # Handle padding\n    if isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple):\n        p_left, p_right = pad\n    elif pad == \"same\":\n        out_len = np.ceil(signal_length / stride).astype(int)\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel_width - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    else:\n        raise ValueError(\"Invalid padding argument\")\n\n    # Pad the input\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n\n    # Calculate output length\n    output_length = (signal_length + p_left + p_right - effective_kernel_width) // stride + 1\n\n    # Initialize output\n    output = np.zeros((n_examples, output_length, out_channels))\n\n    # Perform the convolution\n    for i in range(n_examples):\n        for j in range(output_length):\n            start = j * stride\n            end = start + effective_kernel_width\n            x_slice = X_padded[i, start:end:dilation+1, :]\n\n            for k in range(out_channels):\n                output[i, j, k] = np.sum(x_slice * W[:, :, k])\n\n    return output.tolist()\n```\n\nThis script defines the `conv1D` function that performs 1-D cross-correlation with support for batches, multiple input/output channels, padding, stride, and dilation. The function returns the result as a nested Python list."}
{"task_id": 373, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gini(y: list[int] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if not y:\n        return 0.0\n    \n    # Convert to numpy array if it's not already\n    y = np.array(y)\n    \n    # Calculate the number of samples\n    N = len(y)\n    \n    # Calculate the unique classes and their counts\n    unique_classes, counts = np.unique(y, return_counts=True)\n    \n    # Calculate the probabilities of each class\n    probabilities = counts / N\n    \n    # Calculate the Gini impurity\n    gini_impurity = 1 - np.sum(probabilities ** 2)\n    \n    # Return the Gini impurity rounded to 4 decimal places\n    return round(gini_impurity, 4)\n\n# Example usage:\n# y = [1, 1, 2, 2, 3]\n# print(gini(y))  # Output: 0.6400\n```"}
{"task_id": 374, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    # Check if the number of samples in X and y are consistent\n    if X.shape[0] != y.shape[0]:\n        return -1\n    \n    m, n = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n    \n    for _ in range(n_iterations):\n        # Calculate predictions\n        y_pred = X.dot(theta) + b\n        \n        # Calculate gradients\n        dw = (2 / m) * X.T.dot(y_pred - y)\n        db = (2 / m) * np.sum(y_pred - y)\n        \n        # Update parameters\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    \n    # Return the learned parameters rounded to 4 decimal places\n    return [round(t, 4) for t in theta], round(b, 4)\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([7, 8, 9])\n# weights, bias = linear_regression_gd(X, y, learning_rate=0.01, n_iterations=1000)\n# print(weights, bias)\n```\n\nThis script defines a function `linear_regression_gd` that performs multiple linear regression using batch gradient descent. It checks for consistency in the input data, initializes the parameters, iteratively updates them using the gradient descent algorithm, and returns the learned parameters rounded to four decimal places."}
{"task_id": 376, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Convert the list of lists to a NumPy array\n    X_np = np.array(X)\n    \n    # Check if the matrix is square\n    if X_np.shape[0] != X_np.shape[1]:\n        return False\n    \n    # Check if the matrix is symmetric using np.allclose to handle floating-point precision\n    return np.allclose(X_np, X_np.T, atol=1e-8)\n\n# Example usage:\n# symmetric_matrix = [[1, 2, 3], [2, 5, 6], [3, 6, 9]]\n# non_symmetric_matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n# print(is_symmetric(symmetric_matrix))  # Output: True\n# print(is_symmetric(non_symmetric_matrix))  # Output: False\n```\n\nThis script defines the `is_symmetric` function, which checks if a given 2-D numeric array is symmetric with respect to its main diagonal. It uses NumPy to handle the matrix operations and floating-point comparisons."}
{"task_id": 377, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Computes the negative gradient for logistic loss in Gradient Boosting.\n    \n    Parameters:\n    y (list): Binary class labels (0 or 1).\n    f (list): Current prediction scores (floats).\n    \n    Returns:\n    list: List of negative gradients rounded to four decimal places.\n          Returns -1 if y contains values other than 0 or 1.\n    \"\"\"\n    # Check if y contains only 0 or 1\n    if not all(label in [0, 1] for label in y):\n        return -1\n    \n    # Convert y to the set {-1, 1}\n    y_prime = [2 * label - 1 for label in y]\n    \n    # Compute the negative gradient\n    g = [y_prime_i / (1 + np.exp(y_prime_i * f_i)) for y_prime_i, f_i in zip(y_prime, f)]\n    \n    # Round the results to four decimal places\n    g_rounded = [round(g_i, 4) for g_i in g]\n    \n    return g_rounded\n\n# Example usage:\n# y = [0, 1, 0, 1]\n# f = [0.1, -0.5, 0.2, 0.8]\n# print(logistic_negative_gradient(y, f))\n```\n\nThis script defines the `logistic_negative_gradient` function, which calculates the negative gradient for logistic loss used in Gradient Boosting. It first checks if the labels are valid (0 or 1), converts them to the set {-1, 1}, computes the negative gradient, and returns the results rounded to four decimal places. If the labels are invalid, it returns -1."}
{"task_id": 380, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    # Constants\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n\n    # Convert input to NumPy array for vectorized operations\n    x = np.array(x, dtype=float)\n\n    # Compute SELU\n    selu_x = np.where(x > 0, scale * x, scale * alpha * (np.exp(x) - 1))\n\n    # Compute first derivative of SELU\n    d_selu_dx = np.where(x > 0, scale, scale * alpha * np.exp(x))\n\n    # Compute second derivative of SELU\n    d2_selu_dx2 = np.where(x > 0, 0, scale * alpha * np.exp(x))\n\n    # Select the result based on the order\n    if order == 0:\n        result = selu_x\n    elif order == 1:\n        result = d_selu_dx\n    elif order == 2:\n        result = d2_selu_dx2\n    else:\n        raise ValueError(\"Order must be 0, 1, or 2.\")\n\n    # Round to 4 decimal places and convert to list\n    return np.round(result, 4).tolist()\n\n# Example usage:\n# print(selu([-1, 0, 1], order=0))  # SELU values\n# print(selu([-1, 0, 1], order=1))  # First derivatives\n# print(selu([-1, 0, 1], order=2))  # Second derivatives\n```\n\nThis script defines the `selu` function, which computes the SELU activation and its first and second derivatives for a given input `x`. The function handles scalar, 1-D, and multi-D inputs and returns the results as Python lists, rounded to four decimal places."}
{"task_id": 387, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Initial prediction: mean of the target values\n    y_pred = np.full_like(y, np.mean(y))\n    \n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y - y_pred\n        \n        # Sort indices by x values\n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        sorted_residuals = residuals[sorted_indices]\n        \n        # Initialize variables to track the best split\n        best_split = None\n        best_sse = float('inf')\n        best_left_mean = None\n        best_right_mean = None\n        \n        # Evaluate all possible splits\n        for i in range(len(sorted_x) - 1):\n            if sorted_x[i] == sorted_x[i + 1]:\n                continue\n            \n            # Calculate the split point\n            split_point = (sorted_x[i] + sorted_x[i + 1]) / 2\n            \n            # Calculate means of residuals on left and right sides\n            left_residuals = sorted_residuals[:i + 1]\n            right_residuals = sorted_residuals[i + 1:]\n            left_mean = np.mean(left_residuals)\n            right_mean = np.mean(right_residuals)\n            \n            # Calculate sum of squared errors\n            sse = np.sum((left_residuals - left_mean) ** 2) + np.sum((right_residuals - right_mean) ** 2)\n            \n            # Update best split if this one is better\n            if sse < best_sse:\n                best_sse = sse\n                best_split = split_point\n                best_left_mean = left_mean\n                best_right_mean = right_mean\n        \n        # If no valid split was found, use the global mean residual\n        if best_split is None:\n            stump_prediction = np.full_like(y, np.mean(residuals))\n        else:\n            # Create stump predictions\n            stump_prediction = np.where(x <= best_split, best_left_mean, best_right_mean)\n        \n        # Update the prediction\n        y_pred += learning_rate * stump_prediction\n    \n    # Return predictions rounded to 4 decimal places\n    return np.round(y_pred, 4).tolist()\n\n# Example usage:\n# x = [1.0, 2.0, 3.0, 4.0, 5.0]\n# y = [2.0, 2.5, 2.7, 2.9, 3.0]\n# n_estimators = 3\n# learning_rate = 0.1\n# print(gradient_boosting_1d(x, y, n_estimators, learning_rate))\n```\n\nThis script defines a function `gradient_boosting_1d` that implements a simple gradient boosting regressor using decision stumps based on a single numerical feature. The function takes in the feature values `x`, target values `y`, the number of boosting rounds `n_estimators`, and an optional `learning_rate`. It returns the in-sample predictions rounded to four decimal places."}
{"task_id": 394, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    # Initialize Eg if it is None\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    \n    # Update the running average of the squared gradients\n    Eg = rho * Eg + (1 - rho) * np.square(grad)\n    \n    # Update the parameters\n    w = w - learning_rate * grad / (np.sqrt(Eg) + 1e-8)\n    \n    # Round the results to 4 decimal places and convert to lists\n    w_next = np.round(w, 4).tolist()\n    Eg_next = np.round(Eg, 4).tolist()\n    \n    return w_next, Eg_next\n```\n\nThis script defines the `rmsprop_update` function, which performs a single update step of the RMSprop optimizer. It handles the initialization of the running average of squared gradients, updates the parameters and the running average according to the RMSprop formula, and returns the updated parameters and running average as lists rounded to four decimal places."}
{"task_id": 398, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    # Convert input to a NumPy array for vectorized operations\n    x = np.array(x)\n    \n    if not derivative:\n        # Compute ELU activation\n        elu_values = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        # Compute ELU gradient\n        elu_values = np.where(x >= 0, 1, elu(x, alpha) + alpha)\n    \n    # Round the results to 4 decimal places and convert to a list\n    return [round(value, 4) for value in elu_values]\n\n# Example usage:\n# print(elu([-1, 0, 1]))  # ELU activation\n# print(elu([-1, 0, 1], derivative=True))  # ELU gradient\n```\n\nThis script defines the `elu` function, which computes either the ELU activation or its gradient based on the `derivative` flag. The function handles both list and NumPy array inputs, performs the necessary computations using vectorized operations, and returns the results as a list of floats rounded to four decimal places."}
{"task_id": 411, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    def analyze(data):\n        tuple_data = any(isinstance(x, (list, tuple, np.ndarray)) for x in data)\n        if tuple_data:\n            flattened_data = [item for sublist in data for item in sublist]\n            dim = len(data[0])\n        else:\n            flattened_data = data\n            dim = 1\n        \n        multidim = dim > 1\n        continuous = any(isinstance(x, float) and not x.is_integer() for x in flattened_data)\n        \n        unique_values_per_dim = []\n        sorted_unique_values_per_dim = []\n        if multidim:\n            for d in range(dim):\n                unique_values = set(data[i][d] for i in range(len(data)))\n                unique_values_per_dim.append(len(unique_values))\n                sorted_unique_values_per_dim.append(sorted(unique_values))\n        else:\n            unique_values = set(flattened_data)\n            unique_values_per_dim.append(len(unique_values))\n            sorted_unique_values_per_dim.append(sorted(unique_values))\n        \n        return {\n            'tuple': tuple_data,\n            'multidim': multidim,\n            'continuous': continuous,\n            'n_per_dim': unique_values_per_dim,\n            'dim': dim,\n            'ids': sorted_unique_values_per_dim\n        }\n    \n    action_stats = analyze(actions)\n    observation_stats = analyze(observations)\n    \n    return {\n        'tuple_actions': action_stats['tuple'],\n        'tuple_observations': observation_stats['tuple'],\n        'multidim_actions': action_stats['multidim'],\n        'multidim_observations': observation_stats['multidim'],\n        'continuous_actions': action_stats['continuous'],\n        'continuous_observations': observation_stats['continuous'],\n        'n_actions_per_dim': action_stats['n_per_dim'],\n        'action_dim': action_stats['dim'],\n        'n_obs_per_dim': observation_stats['n_per_dim'],\n        'obs_dim': observation_stats['dim'],\n        'action_ids': action_stats['ids'],\n        'obs_ids': observation_stats['ids']\n    }\n\n# Example usage:\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]\nprint(env_stats(actions, observations))\n```\n\nThis script defines the `env_stats` function which computes the required statistics for the given actions and observations. The function `analyze` is a helper function that processes either actions or observations and returns a dictionary with the necessary statistics. The main function then constructs the final dictionary using the results from `analyze` for both actions and observations."}
{"task_id": 413, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    \n    def mean_squared_error(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n    \n    def best_split(X, y):\n        best_feature, best_threshold, best_score = None, None, float('inf')\n        for feature in range(X.shape[1]):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                left_indices = X[:, feature] < threshold\n                right_indices = X[:, feature] >= threshold\n                if len(left_indices) == 0 or len(right_indices) == 0:\n                    continue\n                left_score = mean_squared_error(y[left_indices], np.mean(y[left_indices]))\n                right_score = mean_squared_error(y[right_indices], np.mean(y[right_indices]))\n                score = left_score + right_score\n                if score < best_score:\n                    best_feature, best_threshold, best_score = feature, threshold, score\n        return best_feature, best_threshold, best_score\n    \n    def build_tree(X, y, depth=0):\n        if depth >= max_depth or len(np.unique(y)) == 1:\n            return np.mean(y)\n        feature, threshold, _ = best_split(X, y)\n        if feature is None or threshold is None:\n            return np.mean(y)\n        left_indices = X[:, feature] < threshold\n        right_indices = X[:, feature] >= threshold\n        left_tree = build_tree(X[left_indices], y[left_indices], depth + 1)\n        right_tree = build_tree(X[right_indices], y[right_indices], depth + 1)\n        return (feature, threshold, left_tree, right_tree)\n    \n    def predict_tree(tree, X):\n        if isinstance(tree, float):\n            return np.full(X.shape[0], tree)\n        feature, threshold, left_tree, right_tree = tree\n        left_indices = X[:, feature] < threshold\n        right_indices = X[:, feature] >= threshold\n        predictions = np.empty(X.shape[0])\n        predictions[left_indices] = predict_tree(left_tree, X[left_indices])\n        predictions[right_indices] = predict_tree(right_tree, X[right_indices])\n        return predictions\n    \n    F = np.full(y_train.shape, np.mean(y_train))\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        tree = build_tree(X_train, residuals)\n        F += learning_rate * predict_tree(tree, X_train)\n    \n    final_predictions = F\n    for _ in range(n_estimators):\n        residuals = y_train - final_predictions\n        tree = build_tree(X_train, residuals)\n        final_predictions += learning_rate * predict_tree(tree, X_test)\n    \n    return [round(pred, 4) for pred in final_predictions]\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([2, 3, 4, 5])\n# X_test = np.array([[1, 1], [4, 4]])\n# print(gbdt_regression(X_train, y_train, X_test))\n```\n\nThis script implements a simplified version of Gradient Boosting Decision Trees (GBDT) for regression using only NumPy. The `gbdt_regression` function takes training data, test data, and hyperparameters, and returns the predictions for the test data rounded to four decimal places. The internal regression trees are built using a simple mean-squared-error criterion and are limited in depth."}
{"task_id": 416, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Calculate the probability density function (PDF) of a multivariate Gaussian distribution.\n\n    Parameters:\n    X (np.ndarray): A NumPy array of shape (n_samples, n_features) containing the data points.\n    mean (np.ndarray): The mean vector of the distribution of shape (n_features,).\n    cov (np.ndarray): The covariance matrix of shape (n_features, n_features).\n\n    Returns:\n    list: A list of PDF values for each data point in X, rounded to four decimal places.\n    \"\"\"\n    # Ensure X is a 2D array\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n    \n    n_samples, n_features = X.shape\n    det_cov = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    norm_factor = 1 / math.sqrt((2 * math.pi) ** n_features * det_cov)\n    \n    pdf_values = []\n    for i in range(n_samples):\n        diff = X[i] - mean\n        exponent = -0.5 * np.dot(np.dot(diff.T, inv_cov), diff)\n        pdf_value = norm_factor * math.exp(exponent)\n        pdf_values.append(round(pdf_value, 4))\n    \n    return pdf_values\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4]])\n# mean = np.array([0, 0])\n# cov = np.array([[1, 0], [0, 1]])\n# print(multivariate_gaussian_pdf(X, mean, cov))\n```\n\nThis script defines a function `multivariate_gaussian_pdf` that calculates the PDF of a multivariate Gaussian distribution for each data point in `X` given the mean vector `mean` and the covariance matrix `cov`. The function handles both one-dimensional and two-dimensional inputs for `X` and returns a list of PDF values rounded to four decimal places."}
{"task_id": 419, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    # Add intercept column if fit_intercept is True\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n    \n    # Ensure mu is a numpy array with the correct shape\n    if isinstance(mu, (int, float)):\n        mu = np.full(X.shape[1], mu)\n    else:\n        mu = np.array(mu)\n    \n    # Ensure V is a numpy array with the correct shape\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, (int, float)):\n        V = np.eye(X.shape[1]) * V\n    elif isinstance(V, np.ndarray) and V.ndim == 1:\n        V = np.diag(V)\n    else:\n        V = np.array(V)\n    \n    # Compute the posterior distribution\n    V_inv = np.linalg.inv(V)\n    Sigma_p = np.linalg.inv(V_inv + X.T @ X)\n    mu_p = Sigma_p @ (V_inv @ mu + X.T @ y)\n    \n    # Compute the MAP predictive mean\n    y_pred = X_new @ mu_p\n    \n    # Round the predictions to 4 decimal places and return as a list\n    return [round(pred, 4) for pred in y_pred]\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4]])\n# y = np.array([3, 5, 7])\n# X_new = np.array([[4, 5]])\n# print(bayesian_linear_regression_pred(X, y, X_new))\n```\n\nThis script implements Bayesian linear regression with a conjugate Gaussian prior and known observation variance. It handles the optional intercept addition, processes the prior parameters `mu` and `V`, computes the posterior distribution, and returns the MAP predictive means for new data points, rounded to four decimal places."}
{"task_id": 423, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculate the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\"\"\"\n    # Check if both lists have the same length\n    if len(actual) != len(predicted):\n        return -1\n    \n    # Check if all values in both lists are non-negative\n    if any(a < 0 for a in actual) or any(p < 0 for p in predicted):\n        return -1\n    \n    # Calculate the RMSLE\n    n = len(actual)\n    rmsle = np.sqrt((1/n) * np.sum((np.log1p(predicted) - np.log1p(actual))**2))\n    \n    # Return the result rounded to four decimal places\n    return round(rmsle, 4)\n\n# Example usage:\n# actual = [3, -0.5, 2, 7]\n# predicted = [2.5, 0.0, 2, 8]\n# print(root_mean_squared_log_error(actual, predicted))  # Should return -1 due to negative value in actual\n\n# actual = [3, 0.5, 2, 7]\n# predicted = [2.5, 0.0, 2, 8]\n# print(root_mean_squared_log_error(actual, predicted))  # Should return the RMSLE value\n```"}
{"task_id": 428, "completion_id": 0, "completion": "```\npython\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    \n    if symmetric:\n        n = np.arange(window_len)\n        window = 0.5 - 0.5 * np.cos(2 * np.pi * n / (window_len - 1))\n    else:\n        n = np.arange(window_len + 1)\n        window = 0.5 - 0.5 * np.cos(2 * np.pi * n / window_len)\n        window = window[:-1]  # Drop the last sample for periodicity\n    \n    # Round each coefficient to 4 decimal places\n    window = np.round(window, 4)\n    \n    return window.tolist()\n\n# Example usage:\n# print(hann(10, symmetric=True))\n# print(hann(10, symmetric=False))\n```\n\nThis script defines the `hann` function which generates a Hann window of a specified length, either symmetric or periodic, and rounds the coefficients to four decimal places. The function handles special cases where the window length is less than or equal to zero or exactly one."}
{"task_id": 433, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    # Write your code below this line\n    if len(shape) == 4:\n        # Assuming the shape is (out_channels, in_channels, kernel_height, kernel_width)\n        out_channels, in_channels, kernel_height, kernel_width = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        # For other shapes, take the first two dimensions directly\n        fan_in, fan_out = shape[0], shape[1]\n    \n    return float(fan_in), float(fan_out)\n\n# Example usage:\n# shape = (32, 64, 3, 3)  # For a 4D convolutional kernel\n# print(glorot_fan(shape))  # Output: (576.0, 1152.0)\n\n# shape = (128, 64)  # For a dense layer\n# print(glorot_fan(shape))  # Output: (128.0, 64.0)\n```\n\nThis script defines the `glorot_fan` function that calculates the `fan_in` and `fan_out` based on the given weight-tensor shape, following the rules specified in the task description. The function handles both 4-dimensional convolutional kernels and other tensor shapes."}
{"task_id": 435, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]],\n                               y: list[float],\n                               n_estimators: int = 10,\n                               learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    \n    # Special cases\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4)] * len(y)\n    \n    # Initialize the current prediction with the mean of y\n    y_pred = np.full_like(y, np.mean(y))\n    \n    for t in range(n_estimators):\n        # Compute the residuals\n        residuals = y - y_pred\n        \n        # Fit an OLS linear model to predict the residuals\n        X_with_intercept = np.c_[np.ones_like(y), X]  # Add intercept term\n        beta = np.linalg.inv(X_with_intercept.T @ X_with_intercept) @ (X_with_intercept.T @ residuals)\n        \n        # Obtain the weak-learner prediction\n        h_t = X_with_intercept @ beta\n        \n        # Update the overall prediction\n        y_pred += learning_rate * h_t\n    \n    # Return the final prediction vector rounded to 4 decimal places\n    return [round(pred, 4) for pred in y_pred]\n```\n\nThis script implements a tiny Gradient Boosting Regressor using OLS linear regression as the weak learner and squared error as the loss function. It handles the special cases where `n_estimators` is less than or equal to 0 or `learning_rate` is 0 by returning a vector filled with the mean of the target values. The predictions are rounded to four decimal places and returned as a regular Python list."}
{"task_id": 437, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    # Convert input to a NumPy array for consistent processing\n    is_scalar = np.isscalar(x)\n    x = np.array(x, dtype=float)\n    \n    # Compute the sigmoid function\n    sigma = 1 / (1 + np.exp(-x))\n    \n    # Compute the requested derivative\n    if order == 0:\n        result = sigma\n    elif order == 1:\n        result = sigma * (1 - sigma)\n    elif order == 2:\n        result = sigma * (1 - sigma) * (1 - 2 * sigma)\n    else:\n        return -1\n    \n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n    \n    # Return the result in the appropriate format\n    if is_scalar:\n        return float(result)\n    else:\n        return result.tolist()\n\n# Example usage:\n# print(sigmoid(0))  # Output: 0.5\n# print(sigmoid([0, 1, -1], order=1))  # Output: [0.25, 0.1966, 0.1966]\n# print(sigmoid(np.array([[0, 1], [-1, 2]]), order=2))  # Output: [[0.0, -0.0721], [-0.0721, -0.0458]]\n```\n\nThis script defines the `sigmoid` function as specified, handling scalar, list, and NumPy array inputs, and returning the appropriate result based on the `order` parameter. The results are rounded to four decimal places, and the output format matches the requirements."}
{"task_id": 438, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    # Convert y to a NumPy array if it's not already\n    y = np.array(y)\n    \n    # Determine the number of classes if not provided\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    \n    # Check if the provided num_classes is sufficient\n    if num_classes < np.max(y) + 1:\n        return -1\n    \n    # Initialize the one-hot encoded matrix\n    one_hot_matrix = np.zeros((y.size, num_classes), dtype=int)\n    \n    # Fill the one-hot matrix\n    one_hot_matrix[np.arange(y.size), y] = 1\n    \n    # Convert to a list of lists and return\n    return one_hot_matrix.tolist()\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    # Test case 1: num_classes not provided\n    y1 = [0, 1, 2, 1, 0]\n    print(to_categorical(y1))  # Expected: [[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0]]\n\n    # Test case 2: num_classes provided and sufficient\n    y2 = [0, 1, 2, 1, 0]\n    print(to_categorical(y2, num_classes=3))  # Expected: [[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0]]\n\n    # Test case 3: num_classes provided but insufficient\n    y3 = [0, 1, 2, 1, 0]\n    print(to_categorical(y3, num_classes=2))  # Expected: -1\n\n    # Test case 4: num_classes provided and larger than necessary\n    y4 = [0, 1, 2, 1, 0]\n    print(to_categorical(y4, num_classes=5))  # Expected: [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0], [1, 0, 0, 0, 0]]\n\n    # Test case 5: single class\n    y5 = [0, 0, 0]\n    print(to_categorical(y5))  # Expected: [[1], [1], [1]]\n\n    # Test case 6: empty input\n    y6 = []\n    print(to_categorical(y6))  # Expected: []\n```"}
{"task_id": 439, "completion_id": 0, "completion": "```\npython\nimport itertools\nfrom collections import defaultdict\n\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    def support(itemset, transactions):\n        return sum(1 for transaction in transactions if itemset.issubset(transaction)) / len(transactions)\n\n    def generate_candidates(frequent_itemsets, k):\n        # Generate candidate itemsets of size k\n        candidates = set()\n        frequent_itemsets = sorted(frequent_itemsets)\n        n_items = len(frequent_itemsets)\n        for i in range(n_items):\n            for j in range(i + 1, n_items):\n                a = frequent_itemsets[i]\n                b = frequent_itemsets[j]\n                if a[:-1] == b[:-1] and a[-1] < b[-1]:\n                    candidate = a | b\n                    # Prune candidate if any (k-1)-subset is infrequent\n                    if all((candidate - frozenset([item])) in frequent_itemsets for item in candidate):\n                        candidates.add(candidate)\n        return candidates\n\n    # Step 1: Generate frequent 1-itemsets\n    item_counts = defaultdict(int)\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] += 1\n\n    num_transactions = len(transactions)\n    frequent_itemsets = {frozenset([item]) for item, count in item_counts.items() if count / num_transactions >= min_sup}\n\n    # Step 2: Generate frequent k-itemsets for k > 1\n    k = 2\n    frequent_itemsets_list = []\n    while frequent_itemsets:\n        frequent_itemsets_list.extend(frequent_itemsets)\n        candidate_itemsets = generate_candidates(frequent_itemsets, k)\n        frequent_itemsets = set()\n        itemset_counts = defaultdict(int)\n        for transaction in transactions:\n            for candidate in candidate_itemsets:\n                if candidate.issubset(transaction):\n                    itemset_counts[candidate] += 1\n\n        for itemset, count in itemset_counts.items():\n            if count / num_transactions >= min_sup:\n                frequent_itemsets.add(itemset)\n\n        k += 1\n\n    # Convert frozensets to tuples and sort them\n    frequent_itemsets_list = [tuple(sorted(itemset)) for itemset in frequent_itemsets_list]\n    frequent_itemsets_list.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets_list\n```\n\nThis script implements the Apriori algorithm to find all frequent itemsets in a given list of transactions. The function `apriori_frequent_itemsets` takes a list of transactions and a minimum support threshold `min_sup` and returns a list of frequent itemsets ordered by length and then lexicographically. Each itemset is represented as a tuple of items in ascending order."}
{"task_id": 440, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    # Convert the input list to a NumPy array for easier manipulation\n    predictions_array = np.array(predictions)\n    \n    # Calculate the average probabilities over all estimators for each sample\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n    \n    # Round the averaged probabilities to 4 decimal places\n    averaged_probabilities_rounded = np.round(averaged_probabilities, 4)\n    \n    # Determine the predicted class for each sample\n    predicted_classes = np.argmax(averaged_probabilities_rounded, axis=1)\n    \n    # Convert the NumPy arrays back to regular Python lists\n    averaged_probabilities_list = averaged_probabilities_rounded.tolist()\n    predicted_classes_list = predicted_classes.tolist()\n    \n    return averaged_probabilities_list, predicted_classes_list\n\n# Example usage:\n# predictions = [\n#     [[0.2, 0.3, 0.5], [0.6, 0.2, 0.2], [0.1, 0.8, 0.1]],\n#     [[0.1, 0.4, 0.5], [0.7, 0.1, 0.2], [0.2, 0.7, 0.1]],\n#     [[0.3, 0.3, 0.4], [0.5, 0.3, 0.2], [0.3, 0.6, 0.1]]\n# ]\n# averaged_probs, predicted_classes = aggregate_predictions(predictions)\n# print(\"Averaged Probabilities:\", averaged_probs)\n# print(\"Predicted Classes:\", predicted_classes)\n```\n\nThis script defines the `aggregate_predictions` function, which takes a three-level nested list of predictions, computes the average probabilities for each sample, rounds them to four decimal places, and determines the predicted class for each sample. The function returns both the averaged probabilities and the predicted classes as regular Python lists."}
{"task_id": 444, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    X = np.array(X)\n    if Y is not None:\n        Y = np.array(Y)\n    else:\n        Y = X  # If Y is not provided, compute the kernel matrix for X with itself\n\n    # Validate feature dimensions\n    if X.shape[1] != Y.shape[1]:\n        return -1\n\n    # Determine the number of features\n    C = X.shape[1]\n\n    # Validate and set sigma\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n    elif isinstance(sigma, (list, np.ndarray)):\n        if len(sigma) != C or any(s <= 0 for s in sigma):\n            return -1\n        sigma = np.array(sigma)\n    else:\n        return -1\n\n    # Compute the squared Euclidean distance matrix\n    if isinstance(sigma, (int, float)):\n        # Isotropic case\n        diff = X[:, np.newaxis, :] - Y[np.newaxis, :, :]\n        sq_dist = np.sum((diff / sigma) ** 2, axis=2)\n    else:\n        # Anisotropic case\n        diff = X[:, np.newaxis, :] - Y[np.newaxis, :, :]\n        sq_dist = np.sum((diff ** 2) / (sigma ** 2), axis=2)\n\n    # Compute the RBF kernel matrix\n    kernel_matrix = np.exp(-0.5 * sq_dist)\n\n    # Round to 4 decimal places and convert to a nested list\n    kernel_matrix_rounded = np.round(kernel_matrix, 4).tolist()\n\n    return kernel_matrix_rounded\n\n# Example usage:\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0\nprint(rbf_kernel(X, Y, sigma))\n```\n\nThis script defines the `rbf_kernel` function, which computes the Radial Basis Function (RBF) kernel matrix for given input matrices `X` and `Y` with a specified scale parameter `sigma`. The function handles both isotropic and anisotropic cases for `sigma` and validates the inputs accordingly. The resulting kernel matrix is rounded to four decimal places and returned as a nested Python list."}
{"task_id": 446, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n    \n    # Function to calculate Shannon entropy\n    def entropy(labels):\n        value_counts = Counter(labels)\n        probabilities = [count / len(labels) for count in value_counts.values()]\n        return -sum(p * np.log2(p) for p in probabilities if p > 0)\n    \n    # Calculate entropy of the parent node\n    parent_entropy = entropy(y)\n    \n    best_gain = 0\n    best_feature_index = -1\n    best_threshold = None\n    left_majority_label = None\n    right_majority_label = None\n    \n    # Iterate over each feature\n    for j in range(n_features):\n        # Sort the feature values and corresponding labels\n        sorted_indices = np.argsort(X[:, j])\n        sorted_X = X[sorted_indices, j]\n        sorted_y = y[sorted_indices]\n        \n        # Calculate possible thresholds (midpoints between successive distinct values)\n        thresholds = [(sorted_X[i] + sorted_X[i + 1]) / 2 for i in range(n_samples - 1) if sorted_X[i] != sorted_X[i + 1]]\n        \n        # Evaluate each threshold\n        for t in thresholds:\n            # Split the data based on the threshold\n            left_y = sorted_y[sorted_X <= t]\n            right_y = sorted_y[sorted_X > t]\n            \n            # Calculate the proportions of samples in each child\n            p_left = len(left_y) / n_samples\n            p_right = len(right_y) / n_samples\n            \n            # Calculate the weighted entropy of the children\n            weighted_entropy = p_left * entropy(left_y) + p_right * entropy(right_y)\n            \n            # Calculate the information gain\n            gain = parent_entropy - weighted_entropy\n            \n            # Check if this split is the best so far\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = round(t, 4)\n                left_majority_label = Counter(left_y).most_common(1)[0][0]\n                right_majority_label = Counter(right_y).most_common(1)[0][0]\n            elif gain == best_gain:\n                if j < best_feature_index or (j == best_feature_index and t < best_threshold):\n                    best_feature_index = j\n                    best_threshold = round(t, 4)\n                    left_majority_label = Counter(left_y).most_common(1)[0][0]\n                    right_majority_label = Counter(right_y).most_common(1)[0][0]\n    \n    # If no split can improve information gain, return the majority label\n    if best_gain == 0:\n        majority_label = Counter(y).most_common(1)[0][0]\n        return (-1, None, majority_label, majority_label)\n    \n    return (best_feature_index, best_threshold, left_majority_label, right_majority_label)\n```\n\nThis script defines the `decision_stump` function, which calculates the best single-level split for a decision tree based on information gain. It considers all possible thresholds as midpoints between successive distinct values in each feature column and returns the split with the highest information gain, following the specified tie-breaking rules. If no split improves information gain, it returns the majority label."}
{"task_id": 452, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom typing import List, Union\n\ndef divide_on_feature(X: Union[np.ndarray, List[list]], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    # Convert X to a NumPy array if it's not already\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    \n    # Determine if the threshold is numeric\n    is_numeric = isinstance(threshold, (int, float))\n    \n    # Initialize the subsets\n    subset1 = []\n    subset2 = []\n    \n    # Iterate over each sample in X\n    for sample in X:\n        if is_numeric:\n            # Numeric comparison\n            if sample[feature_i] >= threshold:\n                subset1.append(sample.tolist())\n            else:\n                subset2.append(sample.tolist())\n        else:\n            # Categorical comparison\n            if sample[feature_i] == threshold:\n                subset1.append(sample.tolist())\n            else:\n                subset2.append(sample.tolist())\n    \n    return [subset1, subset2]\n\n# Example usage:\nX_numeric = np.array([[1, 5], [3, 2], [4, 6], [2, 1]])\nresult_numeric = divide_on_feature(X_numeric, feature_i=0, threshold=3)\nprint(result_numeric)  # \u279c  [[ [3, 2], [4, 6] ], [ [1, 5], [2, 1] ]]\n\nX_categorical = np.array([[1, \"A\"], [2, \"B\"], [3, \"A\"], [4, \"C\"]])\nresult_categorical = divide_on_feature(X_categorical, feature_i=1, threshold=\"A\")\nprint(result_categorical)  # \u279c  [[ [1, \"A\"], [3, \"A\"] ], [ [2, \"B\"], [4, \"C\"] ]]\n```\n\nThis script defines the `divide_on_feature` function, which splits a dataset into two subsets based on a specified feature and threshold. The function handles both numeric and categorical thresholds and preserves the order of samples in the original dataset. The example usage demonstrates how the function works with both numeric and categorical data."}
{"task_id": 453, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    # Check for input inconsistencies\n    if not (isinstance(Q, np.ndarray) and isinstance(Q_next, np.ndarray)):\n        return -1\n    if Q.shape != Q_next.shape:\n        return -1\n    if not (isinstance(actions, list) and isinstance(rewards, list) and isinstance(dones, list)):\n        return -1\n    if len(actions) != len(rewards) or len(rewards) != len(dones) or len(dones) != Q.shape[0]:\n        return -1\n    if not (0 <= gamma <= 1):\n        return -1\n\n    batch_size, n_actions = Q.shape\n    Q_updated = Q.copy()\n\n    for i in range(batch_size):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        Q_updated[i, actions[i]] = target\n\n    # Round to 4 decimal places and convert to nested list\n    Q_updated_rounded = np.round(Q_updated, 4).tolist()\n    return Q_updated_rounded\n```\n\nThis script defines the `update_q_values` function, which calculates the target Q-values for a batch of experiences in a Deep Q-Network. It checks for input validity and performs the necessary computations, rounding the final result to four decimal places before returning it as a nested Python list."}
{"task_id": 458, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    # Convert labels to a numpy array for easier manipulation\n    labels = np.array(labels)\n    \n    # Check for negative labels\n    if (labels < 0).any():\n        return -1\n    \n    # Infer num_classes if not provided\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    \n    # Check if num_classes is too small\n    if num_classes < max(labels) + 1:\n        return -1\n    \n    # Initialize the one-hot encoded matrix with zeros\n    one_hot_matrix = np.zeros((len(labels), num_classes), dtype=int)\n    \n    # Set the appropriate indices to 1\n    one_hot_matrix[np.arange(len(labels)), labels] = 1\n    \n    # Convert the numpy array to a list of lists\n    return one_hot_matrix.tolist()\n\n# Example usage:\n# labels = [0, 1, 2, 1]\n# print(to_categorical(labels))  # Output: [[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0]]\n```"}
{"task_id": 461, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    \n    x = np.array(x)\n    y = np.array(y)\n    \n    # Step 1: Initialize predictions to the mean of the targets\n    y_pred = np.full_like(y, y.mean())\n    \n    # If n_estimators is 0 or negative, return the mean target for every sample\n    if n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n    \n    # Step 2: Repeat n_estimators times\n    for _ in range(n_estimators):\n        # Step 2a: Compute residuals\n        residuals = y - y_pred\n        \n        # Step 2b: Find unique x values except the greatest one\n        unique_x = np.unique(x)[:-1]\n        \n        # Initialize variables to track the best split\n        best_sse = float('inf')\n        best_t = None\n        best_vL = None\n        best_vR = None\n        \n        # Check if there are any unique x values to split on\n        if len(unique_x) == 0:\n            # If no valid split exists, set the stump prediction to the mean residual\n            best_vL = best_vR = residuals.mean()\n        else:\n            # Step 2c: Evaluate each possible split\n            for t in unique_x:\n                # Split the data\n                left_indices = x <= t\n                right_indices = x > t\n                \n                # Calculate mean residuals for left and right sides\n                vL = residuals[left_indices].mean() if left_indices.any() else 0\n                vR = residuals[right_indices].mean() if right_indices.any() else 0\n                \n                # Calculate SSE for this split\n                sse = ((residuals[left_indices] - vL) ** 2).sum() + ((residuals[right_indices] - vR) ** 2).sum()\n                \n                # Step 2d: Choose the split with the smallest SSE\n                if sse < best_sse:\n                    best_sse = sse\n                    best_t = t\n                    best_vL = vL\n                    best_vR = vR\n        \n        # Step 2e: Predict residuals using the best split\n        stump_predictions = np.where(x <= best_t, best_vL, best_vR)\n        \n        # Step 2f: Update the ensemble prediction\n        y_pred += learning_rate * stump_predictions\n    \n    # Return the final predictions rounded to 4 decimal places\n    return np.round(y_pred, 4).tolist()\n```\n\nThis script implements the gradient boosting algorithm using decision stumps for one-dimensional regression data. It follows the steps outlined in the task description and handles special cases as specified. The final predictions are rounded to four decimal places before being returned."}
{"task_id": 471, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    \n    if next_state is not None:\n        # Find the greedy action in the next state\n        greedy_action = np.argmax(q_table[next_state])\n        \n        # Calculate the expected value of Q[next_state] under the epsilon-soft policy\n        expected_q_next = (1 - epsilon) * q_table[next_state][greedy_action]\n        for a in range(num_actions):\n            if a != greedy_action:\n                expected_q_next += epsilon / num_actions * q_table[next_state][a]\n        \n        # Calculate the target\n        target = reward + gamma * expected_q_next\n    else:\n        # If next_state is None, the target is just the reward\n        target = reward\n    \n    # Update the Q-table\n    q_table[state][action] += lr * (target - q_table[state][action])\n    \n    # Round all entries to four decimal places\n    q_table = [[round(q, 4) for q in row] for row in q_table]\n    \n    return q_table\n```\n\nThis script defines the `expected_sarsa_update` function, which performs a single update step of the Expected SARSA TD(0) algorithm. The function takes the current Q-table, the state and action taken, the reward received, the next state (or `None` if the episode ended), and the hyperparameters `epsilon`, `lr`, and `gamma`. It updates the Q-table according to the Expected SARSA update rule and returns the updated Q-table with all values rounded to four decimal places."}
{"task_id": 474, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n\n    for i in range(m):\n        # Calculate the bounds for x and y based on the class index i\n        x_min = (i // 2 + 0.1) * 10\n        x_max = (i // 2 + 0.9) * 10\n        y_min = ((i % 2) * interval + 0.1) * 10\n        y_max = ((i % 2) * interval + 0.9) * 10\n        label = (i - 0.5) * 2\n\n        # Generate training data\n        x_train = np.random.uniform(x_min, x_max, n_train)\n        y_train = np.random.uniform(y_min, y_max, n_train)\n        X_train.extend(zip(x_train, y_train))\n        Y_train.extend([label] * n_train)\n\n        # Generate validation data\n        x_val = np.random.uniform(x_min, x_max, n_val)\n        y_val = np.random.uniform(y_min, y_max, n_val)\n        X_val.extend(zip(x_val, y_val))\n        Y_val.extend([label] * n_val)\n\n    # Convert lists to NumPy arrays and round to 4 decimal places\n    X_train = np.round(np.array(X_train), 4)\n    Y_train = np.round(np.array(Y_train), 4)\n    X_val = np.round(np.array(X_val), 4)\n    Y_val = np.round(np.array(Y_val), 4)\n\n    return X_train, X_val, Y_train, Y_val\n```\n\nThis script defines the `generate_data` function, which generates a 2-D toy dataset with the specified parameters. The function ensures that the data is reproducible if a seed is provided and that all coordinates are rounded to four decimal places."}
{"task_id": 475, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    # Initialize m_prev and v_prev to zeros if they are None\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    \n    # Update the first moment estimate\n    m_new = b1 * m_prev + (1 - b1) * grad\n    \n    # Update the second moment estimate\n    v_new = b2 * v_prev + (1 - b2) * (grad ** 2)\n    \n    # Compute bias-corrected first moment estimate\n    m_hat = m_new / (1 - b1 ** t)\n    \n    # Compute bias-corrected second moment estimate\n    v_hat = v_new / (1 - b2 ** t)\n    \n    # Update the parameters\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    \n    return w_new, m_new, v_new\n\n# Example usage\nw_new, m_new, v_new = adam_update(1.0, 0.1, 0.0, 0.0, 1)\nprint(round(w_new, 9))  # \u2248 0.999000001\n```\n\nThis script defines the `adam_update` function, which performs a single step of the Adam optimization algorithm. It handles both scalar and NumPy array inputs for the parameters and gradients, and correctly initializes the first and second moment estimates if they are not provided. The function returns the updated parameters and moment estimates."}
{"task_id": 479, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    \n    N = len(rewards[0])  # Number of arms\n    value_estimates = [ev_prior] * N  # Initial estimates of expected values\n    pull_counts = [0] * N  # Number of times each arm has been pulled\n\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            # Explore: choose a random arm\n            chosen_arm = np.random.randint(N)\n        else:\n            # Exploit: choose the arm with the highest estimated value\n            chosen_arm = np.argmax(value_estimates)\n        \n        # Receive the reward for the chosen arm\n        reward = rewards[t][chosen_arm]\n        \n        # Update the pull count for the chosen arm\n        pull_counts[chosen_arm] += 1\n        \n        # Update the estimated value for the chosen arm\n        value_estimates[chosen_arm] += (reward - value_estimates[chosen_arm]) / pull_counts[chosen_arm]\n    \n    # Return the final estimated values rounded to 4 decimal places\n    return [round(value, 4) for value in value_estimates]\n```\n\nThis script implements the \u03b5-greedy multi-armed bandit algorithm as described. It initializes the expected values and pull counts for each arm, iterates through each time-step, chooses an arm based on the \u03b5-greedy strategy, updates the estimates, and finally returns the rounded estimated values for each arm."}
{"task_id": 481, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((point1 - point2) ** 2))\n\n    def region_query(point_index):\n        neighbors = []\n        for index, point in enumerate(data):\n            if euclidean_distance(data[point_index], point) <= eps:\n                neighbors.append(index)\n        return neighbors\n\n    def expand_cluster(point_index, neighbors, cluster_id):\n        labels[point_index] = cluster_id\n        i = 0\n        while i < len(neighbors):\n            neighbor_index = neighbors[i]\n            if labels[neighbor_index] == -1:\n                labels[neighbor_index] = cluster_id\n            elif labels[neighbor_index] == 0:\n                labels[neighbor_index] = cluster_id\n                new_neighbors = region_query(neighbor_index)\n                if len(new_neighbors) >= min_samples:\n                    neighbors.extend(new_neighbors)\n            i += 1\n\n    labels = [0] * len(data)\n    cluster_id = 0\n\n    for point_index in range(len(data)):\n        if labels[point_index] != 0:\n            continue\n\n        neighbors = region_query(point_index)\n\n        if len(neighbors) < min_samples:\n            labels[point_index] = -1\n        else:\n            cluster_id += 1\n            expand_cluster(point_index, neighbors, cluster_id)\n\n    return labels\n```\n\nThis script defines a `dbscan` function that implements the DBSCAN algorithm from scratch. It includes helper functions for calculating Euclidean distance, querying the region around a point, and expanding clusters. The main function iterates over each point, labels noise points, and expands clusters starting from core points."}
{"task_id": 482, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    else:\n        if np.any(y < 0) or np.any(y >= num_classes):\n            raise ValueError(\"Labels must be non-negative and less than num_classes.\")\n    \n    one_hot = np.zeros((y.size, num_classes), dtype=int)\n    one_hot[np.arange(y.size), y] = 1\n    return one_hot\n\n# Example usage:\n# labels = [0, 1, 2, 1, 0]\n# one_hot_encoded = to_categorical(labels)\n# print(one_hot_encoded)\n# Output:\n# [[1 0 0]\n#  [0 1 0]\n#  [0 0 1]\n#  [0 1 0]\n#  [1 0 0]]\n```\n\nThis script defines the `to_categorical` function, which converts a vector of integer class labels into a one-hot encoded 2-D NumPy array. The function handles the optional `num_classes` parameter and raises a `ValueError` if any label is out of the valid range. The returned array contains only integers (0 or 1)."}
{"task_id": 485, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    \n    def sse(y):\n        mean = np.mean(y)\n        return np.sum((y - mean) ** 2)\n    \n    def best_split(X, y):\n        best_sse = float('inf')\n        best_split_point = None\n        for i in range(1, len(X)):\n            left_y = y[:i]\n            right_y = y[i:]\n            current_sse = sse(left_y) + sse(right_y)\n            if current_sse < best_sse:\n                best_sse = current_sse\n                best_split_point = X[i]\n        return best_split_point\n    \n    def build_tree(X, y, depth):\n        if len(X) < 2 or depth == max_depth:\n            return np.mean(y)\n        \n        split_point = best_split(X, y)\n        if split_point is None:\n            return np.mean(y)\n        \n        left_indices = [i for i, x in enumerate(X) if x < split_point]\n        right_indices = [i for i, x in enumerate(X) if x >= split_point]\n        \n        left_X, left_y = [X[i] for i in left_indices], [y[i] for i in left_indices]\n        right_X, right_y = [X[i] for i in right_indices], [y[i] for i in right_indices]\n        \n        left_child = build_tree(left_X, left_y, depth + 1)\n        right_child = build_tree(right_X, right_y, depth + 1)\n        \n        return (split_point, left_child, right_child)\n    \n    def predict_tree(tree, x):\n        if isinstance(tree, float):\n            return tree\n        split_point, left_child, right_child = tree\n        if x < split_point:\n            return predict_tree(left_child, x)\n        else:\n            return predict_tree(right_child, x)\n    \n    if not X_train or not y_train:\n        return []\n    \n    sorted_indices = np.argsort(X_train)\n    X_train_sorted = [X_train[i] for i in sorted_indices]\n    y_train_sorted = [y_train[i] for i in sorted_indices]\n    \n    tree = build_tree(X_train_sorted, y_train_sorted, 0)\n    \n    return [predict_tree(tree, x) for x in X_test]\n```\n\nThis script defines a function `regression_tree_predict` that constructs a univariate regression tree using the CART algorithm and predicts the target values for a given test set. The tree is built recursively by selecting the split point that minimizes the sum of squared errors (SSE) of the two resulting children. The recursion stops when the maximum depth is reached or when a node contains fewer than two samples. Each leaf node is labeled with the mean of the target values in that node. The function returns the predictions for the test set by traversing the constructed tree."}
{"task_id": 490, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:\n        return []\n    \n    # Convert input to a NumPy array if it's not already\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    \n    # Create a diagonal matrix using NumPy\n    diag_matrix = np.diag(x)\n    \n    # Convert the diagonal matrix to a list of lists\n    return diag_matrix.tolist()\n\n# Example usage:\n# vector = [1, 2, 3]\n# print(make_diagonal(vector))  # Output: [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n```\n\nThis script defines the `make_diagonal` function, which takes a one-dimensional vector (list, tuple, or NumPy array) and returns a square diagonal matrix as a list of lists. If the input vector is empty, it returns an empty list. The function uses NumPy to handle the conversion efficiently."}
{"task_id": 491, "completion_id": 0, "completion": "```\npython\nfrom collections import Counter, defaultdict\nimport itertools\n\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    \n    # Step 1: Count the frequency of each item in all transactions\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    \n    # Filter out items that do not meet the minimum support\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_sup}\n    \n    # Sort items by frequency (descending) and then lexicographically (ascending)\n    sorted_items = sorted(frequent_items, key=lambda x: (-frequent_items[x], x))\n    \n    # Create a mapping from item to its index in the sorted list\n    item_index = {item: idx for idx, item in enumerate(sorted_items)}\n    \n    # Step 2: Build the FP-Tree\n    class FPNode:\n        def __init__(self, item, count=0, parent=None):\n            self.item = item\n            self.count = count\n            self.parent = parent\n            self.link = None\n            self.children = defaultdict(FPNode)\n        \n        def add_child(self, child):\n            self.children[child.item] = child\n    \n    def insert_tree(transaction, tree, header_table):\n        current = tree\n        for item in transaction:\n            if item in current.children:\n                current.children[item].count += 1\n            else:\n                new_node = FPNode(item, 1, current)\n                current.add_child(new_node)\n                if header_table[item] is None:\n                    header_table[item] = new_node\n                else:\n                    last_node = header_table[item]\n                    while last_node.link is not None:\n                        last_node = last_node.link\n                    last_node.link = new_node\n            current = current.children[item]\n    \n    # Initialize the root of the FP-Tree\n    fp_tree = FPNode(None)\n    header_table = defaultdict(lambda: None)\n    \n    # Insert each transaction into the FP-Tree\n    for transaction in transactions:\n        # Filter and sort items in the transaction based on the frequent items list\n        sorted_transaction = sorted((item for item in transaction if item in frequent_items), key=lambda x: item_index[x])\n        if sorted_transaction:\n            insert_tree(sorted_transaction, fp_tree, header_table)\n    \n    # Step 3: Mine the FP-Tree\n    def find_frequent_itemsets(prefix, tree, header_table, min_sup, frequent_itemsets):\n        # If the tree is empty, return\n        if not tree.children:\n            return\n        \n        # Extract frequent itemsets from the header table\n        for item in sorted(header_table, key=lambda x: item_index[x]):\n            support = sum(node.count for node in _nodes_from_path(header_table[item]))\n            frequent_itemsets.append(tuple(prefix + [item]))\n            \n            # Build the conditional pattern base\n            conditional_pattern_base = []\n            path = _nodes_from_path(header_table[item])\n            for node in path:\n                pattern = []\n                parent = node.parent\n                while parent.item is not None:\n                    pattern.append(parent.item)\n                    parent = parent.parent\n                if pattern:\n                    conditional_pattern_base.append((pattern, node.count))\n            \n            # Build the conditional FP-Tree\n            conditional_tree = FPNode(None)\n            conditional_header_table = defaultdict(lambda: None)\n            for pattern, count in conditional_pattern_base:\n                insert_tree(pattern, conditional_tree, conditional_header_table)\n            \n            # Recursively find frequent itemsets in the conditional FP-Tree\n            find_frequent_itemsets(prefix + [item], conditional_tree, conditional_header_table, min_sup, frequent_itemsets)\n    \n    def _nodes_from_path(node):\n        nodes = []\n        while node is not None:\n            nodes.append(node)\n            node = node.link\n        return nodes\n    \n    frequent_itemsets = []\n    find_frequent_itemsets([], fp_tree, header_table, min_sup, frequent_itemsets)\n    \n    # Sort the frequent itemsets by length and lexicographically\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    \n    return frequent_itemsets\n\n# Example usage:\ntransactions = [\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"A\", \"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"C\", \"D\", \"E\"],\n    [\"B\", \"C\", \"D\"]\n]\nmin_sup = 3\nprint(fp_growth(transactions, min_sup))\n```\n\nThis script implements the FP-Growth algorithm to mine frequent item-sets from a collection of transactions. It constructs an FP-Tree from the transactions, prunes infrequent items, and recursively mines the tree to find all frequent item-sets that meet the minimum support threshold. The results are sorted by item-set length and lexicographically."}
{"task_id": 492, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n\n    X = np.array(X)\n    n_samples, n_features = X.shape\n    feature_indices = range(n_features)\n    \n    # Generate all combinations of feature indices with replacement\n    # This will give us all possible monomials up to the given degree\n    all_combinations = []\n    for r in range(degree + 1):\n        all_combinations.extend(combinations_with_replacement(feature_indices, r))\n    \n    # Prepare the output matrix\n    output = []\n    for sample in X:\n        row = []\n        for combination in all_combinations:\n            # Calculate the product of the sample values raised to the power of their respective indices\n            term = np.prod(sample[list(combination)])\n            row.append(term)\n        output.append(row)\n    \n    return output\n\n# Example usage:\n# X = [[1, 2], [3, 4]]\n# degree = 2\n# print(polynomial_features(X, degree))\n# Output should be:\n# [[1, 1, 2, 1, 4, 2],\n#  [1, 3, 4, 9, 16, 12]]\n```\n\nThis script defines the `polynomial_features` function, which generates a polynomial feature matrix from the input data `X` up to a specified `degree`. The function handles the constraints and requirements specified in the task description, including the handling of negative degrees and the correct ordering of polynomial terms."}
{"task_id": 493, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y:  # Check if the input is empty\n        return -1\n    \n    y = np.array(y)  # Convert to NumPy array if it isn't already\n    y_mean = np.mean(y)  # Calculate the mean of the sample\n    mse_value = np.mean((y - y_mean) ** 2)  # Calculate the MSE\n    return round(mse_value, 4)  # Return the MSE rounded to 4 decimal places\n\n# Example usage:\n# print(mse([1, 2, 3, 4, 5]))  # Should output 2.0\n# print(mse([]))  # Should output -1\n```\n\nThis script defines a function `mse` that calculates the mean-squared error of a given 1-D numeric sample. It handles both Python lists and NumPy arrays as input and returns the MSE rounded to four decimal places. If the input is empty, it returns -1."}
{"task_id": 496, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Ensure x is a NumPy array for element-wise operations\n    x = np.array(x).flatten()  # Flatten in case x is a multi-dimensional array or list\n\n    # Compute the affine activation\n    y = slope * x + intercept\n\n    # Compute the first derivative (which is constant for affine functions)\n    grad = np.full_like(x, slope)\n\n    # Compute the second derivative (which is always 0 for affine functions)\n    grad2 = np.zeros_like(x)\n\n    # Round all results to 4 decimal places\n    y_rounded = np.round(y, 4).tolist()\n    grad_rounded = np.round(grad, 4).tolist()\n    grad2_rounded = np.round(grad2, 4).tolist()\n\n    return y_rounded, grad_rounded, grad2_rounded\n\n# Example usage:\n# result = apply_affine([1, 2, 3], slope=2.0, intercept=1.0)\n# print(result)  # Output: ([3.0, 5.0, 7.0], [2.0, 2.0, 2.0], [0.0, 0.0, 0.0])\n```\n\nThis script defines the `apply_affine` function, which computes the affine activation and its derivatives for a given input vector `x`, with optional parameters `slope` and `intercept`. The function handles both scalar and list inputs, ensuring the output is always a tuple of three lists, each rounded to four decimal places."}
{"task_id": 499, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    n_samples, n_features = data.shape\n    \n    # Check if k is within the valid range\n    if k < 1 or k > n_features:\n        return -1\n    \n    # Step 1: Standardise each feature\n    mean = np.mean(data, axis=0)\n    std_dev = np.std(data, axis=0, ddof=1)  # Population variance with Bessel's correction\n    std_dev[std_dev == 0] = 1  # Avoid division by zero\n    standardized_data = (data - mean) / std_dev\n    \n    # Step 2: Compute the sample covariance matrix\n    covariance_matrix = np.cov(standardized_data, rowvar=False)\n    \n    # Step 3: Perform eigen-decomposition\n    eigenvalues, eigenvectors = np.linalg.eigh(covariance_matrix)\n    \n    # Step 4: Sort eigenvalues in descending order and arrange eigenvectors accordingly\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    \n    # Step 5: Fix the sign of every eigenvector\n    for i in range(n_features):\n        max_index = np.argmax(np.abs(sorted_eigenvectors[:, i]))\n        if sorted_eigenvectors[max_index, i] < 0:\n            sorted_eigenvectors[:, i] *= -1\n    \n    # Step 6: Project the standardised data on the first k eigenvectors\n    projection_matrix = sorted_eigenvectors[:, :k]\n    projected_data = standardized_data @ projection_matrix\n    \n    # Return the projected matrix rounded to four decimal places and converted to a regular Python list\n    return np.round(projected_data, 4).tolist()\n```\n\nThis script implements the PCA dimensionality reduction routine from scratch, following the specified steps and constraints. It handles the standardization, covariance matrix computation, eigen-decomposition, eigenvalue sorting, sign fixing, and projection, and finally returns the projected data as a nested list rounded to four decimal places."}
{"task_id": 500, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    \n    # Convert inputs to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Initialize the model with the mean of the training labels\n    F = np.full_like(y_train, fill_value=y_train.mean(), dtype=float)\n    \n    # List to store the weak learners (decision stumps)\n    stumps = []\n    \n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y_train - F\n        \n        # Find the best decision stump\n        best_feature_idx, best_threshold, best_left_val, best_right_val = None, None, None, None\n        best_mse = float('inf')\n        \n        for feature_idx in range(X_train.shape[1]):\n            unique_values = np.unique(X_train[:, feature_idx])\n            thresholds = (unique_values[:-1] + unique_values[1:]) / 2.0\n            \n            for threshold in thresholds:\n                # Predictions for left and right subsets\n                left_mask = X_train[:, feature_idx] <= threshold\n                right_mask = X_train[:, feature_idx] > threshold\n                \n                left_val = np.mean(residuals[left_mask])\n                right_val = np.mean(residuals[right_mask])\n                \n                # Calculate the mean squared error for this split\n                mse = np.mean((residuals[left_mask] - left_val) ** 2) + np.mean((residuals[right_mask] - right_val) ** 2)\n                \n                if mse < best_mse:\n                    best_mse = mse\n                    best_feature_idx = feature_idx\n                    best_threshold = threshold\n                    best_left_val = left_val\n                    best_right_val = right_val\n        \n        # Create the decision stump\n        def stump(x):\n            return best_left_val if x[best_feature_idx] <= best_threshold else best_right_val\n        \n        # Update the model\n        F += learning_rate * np.array([stump(x) for x in X_train])\n        \n        # Store the stump\n        stumps.append((best_feature_idx, best_threshold, best_left_val, best_right_val))\n    \n    # Predict on the test set\n    F_test = np.full_like(y_train, fill_value=y_train.mean(), dtype=float)\n    for feature_idx, threshold, left_val, right_val in stumps:\n        F_test += learning_rate * np.array([left_val if x[feature_idx] <= threshold else right_val for x in X_test])\n    \n    # Convert the final scores to class labels\n    predictions = (F_test >= 0.5).astype(int)\n    \n    return predictions.tolist()\n```\n\nThis script implements a simple gradient boosting classifier using decision stumps as weak learners. It follows the steps outlined in the task description, including computing residuals, finding the best decision stump at each iteration, and updating the model. Finally, it predicts the class labels for the test set by thresholding the final scores at 0.5."}
{"task_id": 505, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n\n    m, n_v = X.shape\n    n_h = hbias.shape[0]\n\n    # Positive phase\n    h0_prob = 1 / (1 + np.exp(-(X @ W + hbias)))\n    pos_grad = X.T @ h0_prob\n\n    # Gibbs sampling\n    v = X.copy()\n    for _ in range(k):\n        h_prob = 1 / (1 + np.exp(-(v @ W + hbias)))\n        h = h_prob  # Use probabilities directly\n        v_prob = 1 / (1 + np.exp(-(h @ W.T + vbias)))\n        v = v_prob  # Use probabilities directly\n\n    h_k_prob = h_prob\n    v_k_prob = v_prob\n\n    # Negative phase\n    neg_grad = v_k_prob.T @ h_k_prob\n\n    # Update weights\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n\n    # Return the updated weight matrix rounded to 4 decimal places\n    return np.round(W_new, 4).tolist()\n```\n\nThis script defines the `contrastive_divergence` function, which performs a single weight update for a binary Restricted Boltzmann Machine using the Contrastive Divergence algorithm. The function takes in the necessary parameters, performs the positive and negative phases of the CD-k algorithm, updates the weights, and returns the updated weight matrix as a list of lists with values rounded to four decimal places."}
{"task_id": 509, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are not already\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Check if the vectors have the same length\n    if x.shape != y.shape:\n        return -1\n    \n    # Compute the Chebyshev distance\n    distance = np.max(np.abs(x - y))\n    \n    # Return the distance rounded to four decimal places\n    return round(float(distance), 4)\n\n# Example usage\nx = [1, 2, 3]\ny = [2, 4, 6]\nprint(chebyshev(x, y))  # Output: 3.0\n```"}
{"task_id": 510, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    # Clip y_pred to avoid log(0) or log(1)\n    epsilon = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n    \n    # Reconstruction Loss (Binary Cross-Entropy)\n    reconstruction_loss = -np.sum(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped))\n    \n    # KL Divergence\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var))\n    \n    # Total Loss\n    total_loss = reconstruction_loss + kl_divergence\n    \n    # Average loss over the batch\n    batch_size = y.shape[0]\n    average_loss = total_loss / batch_size\n    \n    # Return the average loss rounded to 6 decimal places\n    return round(average_loss, 6)\n```\n\nThis script defines the `vae_loss` function, which calculates the VAE loss for a mini-batch of data with Bernoulli visible units. The function computes the reconstruction loss using binary cross-entropy and the KL divergence between the approximate posterior and the unit Gaussian prior. The result is averaged over the batch and rounded to six decimal places."}
{"task_id": 513, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for efficient computation\n    X_np = np.array(X)\n    w_np = np.array(w)\n    V_np = np.array(V)\n    \n    # Number of samples\n    n_samples = X_np.shape[0]\n    \n    # Initialize predictions with the bias term\n    predictions = np.full(n_samples, w0)\n    \n    # Add the linear part\n    predictions += X_np.dot(w_np)\n    \n    # Add the interaction part\n    sum_squared = (X_np.dot(V_np)) ** 2\n    squared_sum = X_np ** 2\n    squared_sum = np.dot(squared_sum, V_np ** 2)\n    interaction = 0.5 * (sum_squared - squared_sum)\n    \n    # Add interaction part to predictions\n    predictions += interaction.sum(axis=1)\n    \n    # Round predictions to 4 decimal places\n    predictions_rounded = np.round(predictions, 4)\n    \n    return predictions_rounded.tolist()\n\n# Example usage:\n# X = [[1, 2, 3], [4, 5, 6]]\n# w0 = 0.1\n# w = [0.2, 0.3, 0.4]\n# V = [[0.5, 0.6], [0.7, 0.8], [0.9, 1.0]]\n# print(fm_predict(X, w0, w, V))\n```\n\nThis script defines the `fm_predict` function which calculates the predictions for a batch of samples using the Factorization Machine regression formula. The function uses NumPy for efficient numerical computations and ensures that the results are rounded to four decimal places."}
{"task_id": 517, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # Convert input to a NumPy array for vectorized operations\n    is_scalar = np.isscalar(z)\n    z = np.array(z, dtype=float)\n    \n    # Numerically stable sigmoid function\n    # For large positive z, sigmoid(z) approaches 1\n    # For large negative z, sigmoid(z) approaches 0\n    sigmoid_values = np.where(z >= 0, \n                              1 / (1 + np.exp(-z)), \n                              np.exp(z) / (1 + np.exp(z)))\n    \n    # Round to four decimal places\n    sigmoid_values = np.round(sigmoid_values, 4)\n    \n    # Return the result in the appropriate format\n    if is_scalar:\n        return float(sigmoid_values)\n    else:\n        return sigmoid_values.tolist()\n\n# Example usage\nprint(sigmoid([-1, 0, 1]))  # Output should be [0.2689, 0.5, 0.7311]\n```"}
{"task_id": 518, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        # Check and convert actual if it's one-hot encoded\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        \n        # Check and convert predicted if it's one-hot encoded\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        \n        # Call the original function with converted arguments\n        return function(actual, predicted)\n    \n    return wrapper\n\n# Example usage\n@unhot\ndef accuracy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Simple accuracy rounded to 4 decimals.\"\"\"\n    return float(np.round(np.mean(actual == predicted), 4))\n\n# Test the decorator\nactual    = np.array([[0,1,0], [1,0,0], [0,0,1]])  # one-hot\npredicted = np.array([[0,1,0], [0,1,0], [0,0,1]])  # one-hot\nprint(accuracy(actual, predicted))  # 0.6667\n```\n\nThis script defines the `unhot` decorator, which automatically converts one-hot encoded NumPy arrays to 1-D integer label arrays before passing them to a metric function. The example usage demonstrates how the decorator works with a simple accuracy function."}
{"task_id": 520, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    def compute_gradient(value):\n        return np.round(value * (1 - value), 4)\n\n    if isinstance(z, (int, float)):\n        return compute_gradient(z)\n    elif isinstance(z, list):\n        if not z:  # Check for empty list\n            return []\n        return [sigmoid_grad(item) for item in z]\n    elif isinstance(z, np.ndarray):\n        return np.round(z * (1 - z), 4).tolist()\n    else:\n        raise ValueError(\"Input must be a float, list, or NumPy ndarray\")\n\n# Example usage:\n# print(sigmoid_grad(0.5))  # Scalar input\n# print(sigmoid_grad([0.5, 0.75]))  # 1-D list input\n# print(sigmoid_grad([[0.5, 0.75], [0.25, 0.1]]))  # 2-D list input\n# print(sigmoid_grad(np.array([0.5, 0.75])))  # 1-D NumPy array input\n# print(sigmoid_grad(np.array([[0.5, 0.75], [0.25, 0.1]])))  # 2-D NumPy array input\n```\n\nThis script defines the `sigmoid_grad` function, which calculates the gradient of the sigmoid function for a given input. The function handles scalar inputs, lists (including nested lists), and NumPy arrays, returning the result in the same structure as the input. Each gradient value is rounded to four decimal places."}
{"task_id": 528, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Convert X to a NumPy array for easier manipulation\n    X = np.array(X)\n    \n    # Determine the range for x1 and x2\n    x1_min, x1_max = X[:, 0].min(), X[:, 0].max()\n    x2_min, x2_max = X[:, 1].min(), X[:, 1].max()\n    \n    # Create equally spaced 1-D arrays for x1 and x2\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    \n    # Create a meshgrid from x1_plot and x2_plot\n    x1_grid, x2_grid = np.meshgrid(x1_plot, x2_plot)\n    \n    # Flatten the grid for easier computation\n    x1_flat = x1_grid.flatten()\n    x2_flat = x2_grid.flatten()\n    \n    # Compute the linear combination w1*x1 + w2*x2 + b for each grid point\n    z = W[0] * x1_flat + W[1] * x2_flat + b\n    \n    # Apply the sign function to classify each point\n    labels_flat = np.where(z >= 0, 1, -1)\n    \n    # Reshape the labels back to the grid shape\n    labels_grid = labels_flat.reshape((grid_n, grid_n))\n    \n    # Convert the NumPy array to a nested Python list\n    labels_list = labels_grid.tolist()\n    \n    return labels_list\n```\n\nThis script defines the `decision_boundary_grid` function, which generates a grid of predictions for a 2-D linear classifier. The function uses NumPy for efficient array manipulation and returns a nested list of integers representing the class labels for each grid point."}
{"task_id": 537, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    # Constants\n    epsilon = 1e-9\n    \n    # Number of samples and features\n    n_samples, n_features = X_train.shape\n    \n    # Calculate class priors\n    prior_0 = np.mean(y_train == 0)\n    prior_1 = np.mean(y_train == 1)\n    \n    # Calculate mean and standard deviation for each feature for both classes\n    mean_0 = np.mean(X_train[y_train == 0], axis=0)\n    mean_1 = np.mean(X_train[y_train == 1], axis=0)\n    \n    std_0 = np.std(X_train[y_train == 0], axis=0) + epsilon\n    std_1 = np.std(X_train[y_train == 1], axis=0) + epsilon\n    \n    # Function to calculate Gaussian likelihood\n    def gaussian_likelihood(x, mean, std):\n        return (1 / (np.sqrt(2 * np.pi) * std)) * np.exp(-0.5 * ((x - mean) / std) ** 2)\n    \n    # Predict class for each test sample\n    predictions = []\n    for x in X_test:\n        # Calculate posterior probability for class 0\n        likelihood_0 = np.prod(gaussian_likelihood(x, mean_0, std_0))\n        posterior_0 = prior_0 * likelihood_0\n        \n        # Calculate posterior probability for class 1\n        likelihood_1 = np.prod(gaussian_likelihood(x, mean_1, std_1))\n        posterior_1 = prior_1 * likelihood_1\n        \n        # Predict the class with the higher posterior probability\n        if posterior_0 > posterior_1:\n            predictions.append(0)\n        else:\n            predictions.append(1)\n    \n    return predictions\n```\n\nThis script defines a function `gaussian_naive_bayes` that implements a Gaussian Naive Bayes classifier from scratch. It calculates the necessary parameters from the training data and uses them to predict the labels for the test data. The function returns a list of predicted class labels (0 or 1) for each sample in `X_test`."}
{"task_id": 539, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost for binary classification.\n\n    Parameters:\n    AL (np.ndarray): A numpy array of shape (1, m) or (m,) containing the predicted probabilities.\n    Y (np.ndarray): A numpy array of shape (1, m) or (m,) containing the true binary labels.\n\n    Returns:\n    float: The binary cross-entropy cost.\n    \"\"\"\n    # Ensure AL and Y have the same shape\n    assert AL.shape == Y.shape, \"AL and Y must have the same shape.\"\n    \n    # Number of training examples\n    m = AL.shape[0]\n    \n    # Clip AL to avoid numerical issues with log\n    epsilon = 1e-15\n    AL = np.clip(AL, epsilon, 1 - epsilon)\n    \n    # Compute the binary cross-entropy cost\n    cost = - (1 / m) * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    \n    # Return the cost as a plain Python float rounded to 4 decimal places\n    return float(round(cost, 4))\n\n# Example usage:\n# AL = np.array([0.9, 0.1, 0.8, 0.2])\n# Y = np.array([1, 0, 1, 0])\n# print(compute_cost(AL, Y))  # Output should be a float rounded to 4 decimal places\n```\n\nThis script defines the `compute_cost` function, which calculates the binary cross-entropy cost for binary classification. It includes input validation, clipping to prevent numerical issues, and returns the cost as a plain Python float rounded to four decimal places."}
{"task_id": 552, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    # Extract HMM parameters\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    \n    # Number of states\n    N = len(pi)\n    # Length of observation sequence\n    T = len(observations)\n    \n    # Check if t is within the valid range\n    if t < 0 or t >= T:\n        return []\n    \n    # Initialize forward and backward variables\n    alpha = np.zeros((T, N))\n    beta = np.zeros((T, N))\n    \n    # Compute forward probabilities (alpha)\n    alpha[0] = pi * B[:, observations[0]]\n    for i in range(1, T):\n        alpha[i] = np.dot(alpha[i-1], A) * B[:, observations[i]]\n    \n    # Compute backward probabilities (beta)\n    beta[T-1] = np.ones(N)\n    for i in range(T-2, -1, -1):\n        beta[i] = np.dot(A, B[:, observations[i+1]] * beta[i+1])\n    \n    # Compute gamma probabilities\n    numerator = alpha[t] * beta[t]\n    denominator = np.sum(numerator)\n    gamma_t = numerator / denominator\n    \n    # Round to four decimal places\n    gamma_t_rounded = [round(prob, 4) for prob in gamma_t]\n    \n    return gamma_t_rounded\n\n# Example usage:\n# hmm = {\n#     'pi': [0.6, 0.4],\n#     'A': [[0.7, 0.3], [0.4, 0.6]],\n#     'B': [[0.5, 0.4, 0.1], [0.1, 0.3, 0.6]]\n# }\n# observations = [0, 1, 2]\n# t = 1\n# print(gamma_probabilities(hmm, observations, t))\n```\n\nThis script defines a function `gamma_probabilities` that calculates the posterior state distribution \u03b3\u209c for a given Hidden Markov Model (HMM), observation sequence, and time index `t`. The function uses the forward-backward algorithm to compute the forward and backward probabilities and then combines them to obtain \u03b3\u209c, rounding each component to four decimal places. If `t` is outside the valid range, it returns an empty list."}
{"task_id": 555, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import deque\nfrom scipy.spatial.distance import cdist\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples  # -1 means noise initially\n\n    # Compute the distance matrix\n    distance_matrix = cdist(data, data, metric='euclidean')\n\n    # Build the neighborhood list for each sample\n    neighborhoods = [np.where(distance_matrix[i] <= eps)[0] for i in range(n_samples)]\n\n    # Identify core points\n    core_points = [i for i, neighborhood in enumerate(neighborhoods) if len(neighborhood) >= min_samples]\n\n    cluster_id = 0\n\n    for core_point in core_points:\n        if labels[core_point] != -1:\n            continue  # Already visited\n\n        cluster_id += 1\n        labels[core_point] = cluster_id\n        neighbors = deque(neighborhoods[core_point])\n\n        while neighbors:\n            neighbor = neighbors.popleft()\n\n            if labels[neighbor] == -1:\n                labels[neighbor] = cluster_id\n            elif labels[neighbor] == 0:\n                labels[neighbor] = cluster_id\n                if len(neighborhoods[neighbor]) >= min_samples:\n                    neighbors.extend(neighborhoods[neighbor])\n\n    return labels\n\n# Example usage:\nif __name__ == \"__main__\":\n    data = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\n    eps = 3\n    min_samples = 2\n    print(dbscan(data, eps, min_samples))\n```\n\nThis script defines the `dbscan` function, which implements the DBSCAN algorithm from scratch. It uses `cdist` from `scipy.spatial.distance` to compute pairwise Euclidean distances efficiently. The function then builds neighborhoods, identifies core points, and performs a breadth-first search to expand clusters. Points that remain unlabelled after processing are considered noise and are assigned the label `-1`."}
{"task_id": 561, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"\n    Implements the Expectation-Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n\n    Parameters:\n    - data: A 2-D NumPy array of shape (N, D) containing N samples with D features.\n    - k: An integer representing the number of Gaussian components.\n    - max_iter: An integer representing the maximum number of iterations.\n    - epsilon: A float representing the tolerance for convergence.\n\n    Returns:\n    - A list of length N containing the final cluster label of each sample.\n    \"\"\"\n    N, D = data.shape\n    \n    # Step 1: Initialize parameters\n    if k == 1:\n        return [0] * N\n    \n    # Randomly initialize mixture weights\n    weights = np.ones(k) / k\n    \n    # Randomly initialize means\n    means = data[np.random.choice(N, k, replace=False)]\n    \n    # Randomly initialize covariance matrices\n    covariances = [np.eye(D) for _ in range(k)]\n    \n    # Step 2: EM Algorithm\n    for _ in range(max_iter):\n        # E-step: Compute responsibilities\n        responsibilities = np.zeros((N, k))\n        for i in range(k):\n            responsibilities[:, i] = weights[i] * multivariate_gaussian(data, means[i], covariances[i])\n        responsibilities /= responsibilities.sum(axis=1, keepdims=True)\n        \n        # M-step: Update parameters\n        new_weights = responsibilities.mean(axis=0)\n        new_means = np.dot(responsibilities.T, data) / responsibilities.sum(axis=0, keepdims=True)\n        new_covariances = np.array([np.dot((data - new_means[i]).T, (data - new_means[i]) * responsibilities[:, i][:, np.newaxis]) / responsibilities[:, i].sum() for i in range(k)])\n        \n        # Check for convergence\n        if np.allclose(new_weights, weights, atol=epsilon):\n            break\n        \n        weights, means, covariances = new_weights, new_means, new_covariances\n    \n    # Step 3: Assign labels\n    labels = np.argmax(responsibilities, axis=1)\n    \n    # Step 4: Sort components by the first coordinate of their mean and re-label\n    sorted_indices = np.argsort(means[:, 0])\n    labels = np.array([sorted_indices[label] for label in labels])\n    \n    return labels.tolist()\n\ndef multivariate_gaussian(data, mean, covariance):\n    \"\"\"Compute the multivariate Gaussian probability density.\"\"\"\n    det_cov = np.linalg.det(covariance)\n    inv_cov = np.linalg.inv(covariance)\n    diff = data - mean\n    exponent = -0.5 * np.sum(diff @ inv_cov * diff, axis=1)\n    return (1.0 / (np.sqrt((2 * np.pi) ** data.shape[1] * det_cov))) * np.exp(exponent)\n```\n\nThis script defines the `gmm_em` function, which implements the Expectation-Maximization algorithm for fitting a Gaussian Mixture Model to the provided data. The function initializes the model parameters randomly, iterates through the E-step and M-step until convergence, assigns labels based on the responsibilities, and sorts the components by their mean values to ensure deterministic output. The `multivariate_gaussian` function is a helper function used to compute the probability density of the data points under each Gaussian component."}
{"task_id": 562, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n    \n    N = data.shape[0]\n    \n    # Step 1: Build the similarity graph using the Gaussian kernel\n    pairwise_sq_dists = np.sum(data**2, axis=1).reshape(-1, 1) + np.sum(data**2, axis=1) - 2 * np.dot(data, data.T)\n    W = np.exp(-gamma * pairwise_sq_dists)\n    \n    # Step 2: Construct the Laplacian matrix\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    \n    if method == 'normalized':\n        D_inv_sqrt = np.diag(1.0 / np.sqrt(np.sum(W, axis=1)))\n        L = np.dot(D_inv_sqrt, np.dot(L, D_inv_sqrt))\n    \n    # Step 3: Compute the eigenvectors corresponding to the n_cluster smallest eigenvalues\n    eigenvals, eigenvects = np.linalg.eigh(L)\n    eigenvects = eigenvects[:, :n_cluster]\n    \n    if method == 'normalized':\n        eigenvects = eigenvects / np.linalg.norm(eigenvects, axis=1, keepdims=True)\n    \n    # Step 4: Run k-means in the eigenvector space\n    centroids = eigenvects[:n_cluster]\n    labels = np.zeros(N, dtype=int)\n    \n    while True:\n        # Assign labels\n        distances = np.linalg.norm(eigenvects[:, np.newaxis] - centroids, axis=2)\n        new_labels = np.argmin(distances, axis=1)\n        \n        # Check for convergence\n        if np.array_equal(labels, new_labels):\n            break\n        \n        labels = new_labels\n        \n        # Update centroids\n        for k in range(n_cluster):\n            centroids[k] = np.mean(eigenvects[labels == k], axis=0)\n    \n    # Step 5: Relabel clusters\n    unique_labels = np.unique(labels)\n    label_mapping = {old_label: new_label for new_label, old_label in enumerate(unique_labels)}\n    labels = [label_mapping[label] for label in labels]\n    \n    return labels\n```"}
{"task_id": 563, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = len(y_data)\n    alpha = np.zeros(N)\n    b = 0.0\n\n    # Build the Gram matrix G\n    G = np.dot(X_data, X_data.T)\n\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            # Compute g = \u03a3\u2c7c \u03b1\u2c7c y\u2c7c G[j, i]\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        # If no update was made in this pass, break\n        if not updated:\n            break\n\n    # Recover the weight vector w\n    w = np.sum(alpha * y_data[:, np.newaxis] * X_data, axis=0)\n\n    # Round w and b to 4 decimal places\n    w_rounded = [round(weight, 4) for weight in w]\n    b_rounded = round(b, 4)\n\n    return w_rounded, b_rounded\n```\n\nThis script defines the `perceptron_dual_train` function, which implements the dual-form perceptron learning algorithm as described. It constructs the Gram matrix, iteratively updates the alpha coefficients and bias, and finally recovers and rounds the weight vector and bias before returning them."}
{"task_id": 564, "completion_id": 0, "completion": "```\npython\nclass Node:\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label  # Feature index for internal nodes\n        self.x = x          # Edge value for classification trees\n        self.s = s          # Split point for regression trees\n        self.y = y          # Prediction value for leaf nodes\n        self.child = child  # List of child nodes\n\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    current_node = root\n    while current_node.y is None:  # Traverse until a leaf node is found\n        if task_type == 'classification':\n            feature_value = features[current_node.label]\n            for child in current_node.child:\n                if child.x == feature_value:\n                    current_node = child\n                    break\n            else:\n                current_node = current_node.child[1]  # Default to the second child if no match\n        elif task_type == 'regression':\n            feature_value = features[current_node.label]\n            if feature_value <= current_node.s:\n                current_node = current_node.child[0]\n            else:\n                current_node = current_node.child[1]\n    return current_node.y\n```\n\nThis script defines the `Node` class and the `predict_sample` function, which traverses a decision tree to predict the value for a given sample based on the specified task type. The function handles both classification and regression tasks as described in the task description."}
{"task_id": 565, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    \n    def entropy(labels):\n        value_counts = np.bincount(labels)\n        probabilities = value_counts / len(labels)\n        return -np.sum(probabilities * np.log2(probabilities + 1e-9))\n    \n    n_samples, n_features = X.shape\n    base_entropy = entropy(y)\n    max_information_gain = -1\n    best_feature_index = -1\n    \n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n        conditional_entropy = 0.0\n        \n        for value in unique_values:\n            subset_indices = feature_values == value\n            subset_labels = y[subset_indices]\n            subset_entropy = entropy(subset_labels)\n            subset_probability = len(subset_labels) / n_samples\n            conditional_entropy += subset_probability * subset_entropy\n        \n        information_gain = base_entropy - conditional_entropy\n        \n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = feature_index\n    \n    return (best_feature_index, round(max_information_gain, 6))\n\n# Example usage:\n# X = np.array([[0, 0], [1, 1], [1, 0], [0, 1]])\n# y = np.array([0, 1, 1, 0])\n# print(choose_best_feature(X, y))  # Output: (0, 1.0)\n```\n\nThis script defines the `choose_best_feature` function, which calculates the information gain for each feature in the dataset and returns the feature with the highest information gain. The function uses a helper function `entropy` to compute the entropy of a given set of labels. The information gain is calculated as the difference between the base entropy of the labels and the conditional entropy after splitting by the feature values. The function returns the index of the feature with the maximum information gain and the gain rounded to six decimal places."}
{"task_id": 566, "completion_id": 0, "completion": "```\nimport numpy as np\nimport math\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    \n    def c(n):\n        if n == 1:\n            return 0\n        return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n\n    def mean_path_length(n):\n        if n <= 1:\n            return 0\n        return c(n) + 2 * (np.log(n - 1) - (n - 1) / n)\n\n    def build_isolation_tree(subsample, height_limit):\n        if len(subsample) <= 1 or height_limit == 0:\n            return {'size': len(subsample), 'left': None, 'right': None}\n        \n        feature = np.random.choice(subsample.shape[1])\n        min_val, max_val = subsample[:, feature].min(), subsample[:, feature].max()\n        \n        if min_val == max_val:\n            return {'size': len(subsample), 'left': None, 'right': None}\n        \n        threshold = np.random.uniform(min_val, max_val)\n        \n        left_subsample = subsample[subsample[:, feature] < threshold]\n        right_subsample = subsample[subsample[:, feature] >= threshold]\n        \n        return {\n            'feature': feature,\n            'threshold': threshold,\n            'left': build_isolation_tree(left_subsample, height_limit - 1),\n            'right': build_isolation_tree(right_subsample, height_limit - 1),\n            'size': len(subsample)\n        }\n\n    def path_length(x, tree, current_height):\n        if tree['left'] is None or tree['right'] is None:\n            return current_height + c(tree['size'])\n        \n        feature = tree['feature']\n        threshold = tree['threshold']\n        \n        if x[feature] < threshold:\n            return path_length(x, tree['left'], current_height + 1)\n        else:\n            return path_length(x, tree['right'], current_height + 1)\n\n    trees = []\n    for _ in range(n_trees):\n        if sample_size >= data.shape[0]:\n            sample = data\n        else:\n            sample_indices = np.random.choice(data.shape[0], sample_size, replace=False)\n            sample = data[sample_indices]\n        \n        height_limit = math.ceil(math.log2(sample_size))\n        tree = build_isolation_tree(sample, height_limit)\n        trees.append(tree)\n\n    anomaly_scores = []\n    for i, x in enumerate(data):\n        path_lengths = [path_length(x, tree, 0) for tree in trees]\n        avg_path_length = np.mean(path_lengths)\n        score = 2 ** (-avg_path_length / mean_path_length(data.shape[0]))\n        anomaly_scores.append(score)\n\n    threshold = np.percentile(anomaly_scores, (1 - epsilon) * 100)\n    outliers = [i for i, score in enumerate(anomaly_scores) if score > threshold]\n    outliers.sort()\n\n    return outliers\n```\n\nThis script implements a mini Isolation Forest for outlier detection as specified. It includes functions to build random isolation trees, calculate path lengths, and determine anomaly scores. The main function `detect_outliers` returns the indices of detected outliers based on the given parameters."}
{"task_id": 568, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    # Step 1: Build empirical distributions\n    n_samples, n_features = X_train.shape\n    labels = np.unique(y_train)\n    n_labels = len(labels)\n    \n    # Empirical distribution of y\n    P_y = defaultdict(float)\n    for y in y_train:\n        P_y[y] += 1\n    for y in P_y:\n        P_y[y] /= n_samples\n    \n    # Empirical distribution of x given y\n    P_xy = defaultdict(lambda: defaultdict(float))\n    for x, y in zip(X_train, y_train):\n        for feature_index, feature_value in enumerate(x):\n            P_xy[(feature_index, feature_value, y)] += 1\n    for (feature_index, feature_value, y) in P_xy:\n        P_xy[(feature_index, feature_value, y)] /= n_samples * P_y[y]\n    \n    # Step 2: Initialize weights and expectations\n    weights = defaultdict(float)\n    expected_counts = defaultdict(float)\n    \n    # Calculate expected counts under the empirical distribution\n    for (feature_index, feature_value, y) in P_xy:\n        expected_counts[(feature_index, feature_value, y)] = P_xy[(feature_index, feature_value, y)] * n_samples\n    \n    # Step 3: Generalized Iterative Scaling\n    for iteration in range(n_iter):\n        # Calculate model probabilities\n        model_counts = defaultdict(float)\n        for x in X_train:\n            Z_x = 0\n            for y in labels:\n                score = 0\n                for feature_index, feature_value in enumerate(x):\n                    score += weights[(feature_index, feature_value, y)]\n                Z_x += math.exp(score)\n            for y in labels:\n                score = 0\n                for feature_index, feature_value in enumerate(x):\n                    score += weights[(feature_index, feature_value, y)]\n                P_y_given_x = math.exp(score) / Z_x\n                for feature_index, feature_value in enumerate(x):\n                    model_counts[(feature_index, feature_value, y)] += P_y_given_x\n        \n        # Update weights\n        max_update = 0\n        for (feature_index, feature_value, y) in expected_counts:\n            if model_counts[(feature_index, feature_value, y)] == 0:\n                continue\n            update = (1 / n_samples) * math.log(expected_counts[(feature_index, feature_value, y)] / model_counts[(feature_index, feature_value, y)])\n            weights[(feature_index, feature_value, y)] += update\n            max_update = max(max_update, abs(update))\n        \n        # Check convergence\n        if max_update < epsilon:\n            break\n    \n    # Step 4: Predict labels for test set\n    predictions = []\n    for x in X_test:\n        max_score = -float('inf')\n        predicted_label = None\n        for y in labels:\n            score = 0\n            for feature_index, feature_value in enumerate(x):\n                score += weights[(feature_index, feature_value, y)]\n            if score > max_score:\n                max_score = score\n                predicted_label = y\n        predictions.append(predicted_label)\n    \n    return predictions\n```\n\nThis script implements the Maximum Entropy (MaxEnt) classifier using the Generalized Iterative Scaling (GIS) algorithm. It calculates the empirical distributions, initializes weights, iteratively updates the weights, and finally predicts the labels for the test set. The implementation adheres to the constraints provided and uses only the standard library, `numpy`, and `math`."}
{"task_id": 569, "completion_id": 0, "completion": "```\npython\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    total_documents = len(data)\n    word_doc_count = Counter()\n\n    # Track which words appear in each document\n    for _, words in data:\n        unique_words_in_doc = set(words)\n        word_doc_count.update(unique_words_in_doc)\n\n    # Calculate document-frequency ratios\n    word_df_ratios = [(word, round(count / total_documents, 4)) for word, count in word_doc_count.items()]\n\n    # Sort words by document-frequency ratio (descending)\n    word_df_ratios.sort(key=lambda x: x[1], reverse=True)\n\n    # Determine the set of top words based on cut_off\n    if cut_off is None or cut_off >= len(word_df_ratios):\n        top_words = {word for word, _ in word_df_ratios}\n    else:\n        top_words = {word for word, _ in word_df_ratios[:cut_off]}\n\n    return word_df_ratios, top_words\n\n# Example usage:\ndocuments = [\n    (1, [\"apple\", \"banana\", \"apple\"]),\n    (2, [\"banana\", \"cherry\"]),\n    (3, [\"apple\", \"cherry\", \"date\"]),\n    (4, [\"banana\", \"date\", \"fig\", \"grape\"]),\n]\n\nresult = statistic_key_word(documents, cut_off=3)\nprint(result)\n```\n\nThis script defines the `statistic_key_word` function as specified, which calculates the document-frequency ratios for each word across a collection of documents and returns the results as a list of tuples and a set of the most frequent words. The example usage at the end demonstrates how to call the function and print the results."}
{"task_id": 571, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute the weight vector w\n    w = np.dot(X.T, alpha * y)\n    \n    # Compute the bias term b\n    b = np.mean(y - np.dot(X, w))\n    \n    # Round the weight vector and bias term to 4 decimal places\n    w_rounded = np.round(w, 4)\n    b_rounded = np.round(b, 4)\n    \n    # Convert the weight vector to a list\n    w_list = w_rounded.tolist()\n    \n    return w_list, b_rounded\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 3], [2, 1], [3, 2]])\n# y = np.array([1, 1, 1, -1, -1])\n# alpha = np.array([0.0, 0.0, 0.5, 0.5, 0.0])\n# w, b = compute_svm_parameters(X, y, alpha)\n# print(\"Weight vector:\", w)\n# print(\"Bias term:\", b)\n```\n\nThis script defines the `compute_svm_parameters` function, which calculates the weight vector and bias term for a linear SVM using the provided training data, labels, and Lagrange multipliers. The results are rounded to four decimal places and returned as specified."}
{"task_id": 572, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Compute the Local Outlier Factor for each point in the dataset.\"\"\"\n    \n    # Step 1: Compute the full pair-wise Euclidean distance matrix\n    n = len(data)\n    distance_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i + 1, n):\n            distance_matrix[i, j] = np.sqrt(np.sum((data[i] - data[j]) ** 2))\n            distance_matrix[j, i] = distance_matrix[i, j]\n    \n    # Step 2: For every sample p, obtain its k-distance and N_k(p)\n    k_distances = np.zeros(n)\n    k_neighbors = [None] * n\n    for i in range(n):\n        sorted_indices = np.argsort(distance_matrix[i])\n        k_distances[i] = distance_matrix[i, sorted_indices[k]]\n        k_neighbors[i] = sorted_indices[1:k+1]  # Exclude the point itself\n    \n    # Step 3: Define the reachability distance\n    reach_dist = np.zeros((n, n))\n    for i in range(n):\n        for j in k_neighbors[i]:\n            reach_dist[i, j] = max(k_distances[j], distance_matrix[i, j])\n    \n    # Step 4: Compute Local Reachability Density (LRD)\n    lrd = np.zeros(n)\n    for i in range(n):\n        lrd[i] = k / np.sum(reach_dist[i, k_neighbors[i]])\n    \n    # Step 5: Compute Local Outlier Factor (LOF)\n    lof_scores = np.zeros(n)\n    for i in range(n):\n        lof_scores[i] = (np.sum(lrd[k_neighbors[i]]) / k) / lrd[i]\n    \n    # Round LOF scores to 4 decimal places\n    lof_scores = np.round(lof_scores, 4)\n    \n    # Find indices of outliers\n    outlier_indices = [i for i in range(n) if lof_scores[i] > epsilon]\n    outlier_indices.sort()\n    \n    return list(lof_scores), outlier_indices\n\n# Example usage:\n# data = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\n# k = 3\n# epsilon = 1.5\n# print(local_outlier_factor(data, k, epsilon))\n```\n\nThis script defines the `local_outlier_factor` function, which computes the Local Outlier Factor for each point in a given dataset. It follows the steps outlined in the task description, including computing the pairwise Euclidean distance matrix, determining the k-distance and k-nearest neighbors for each point, calculating reachability distances, local reachability densities, and finally the LOF scores. The function returns a tuple containing the list of LOF scores rounded to four decimal places and the list of indices of outliers with LOF scores greater than a specified threshold `epsilon`."}
{"task_id": 574, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n\n    for c in range(m):\n        base = 10 * (c // 2)\n        x_train = np.random.uniform(base + 1, base + 9, n_train)\n        y_train = np.random.uniform(base + 1, base + 9, n_train)\n        X_train.append(np.column_stack((x_train, y_train)))\n        y_train.extend([c] * n_train)\n\n        x_val = np.random.uniform(base + 1, base + 9, n_val)\n        y_val = np.random.uniform(base + 1, base + 9, n_val)\n        X_val.append(np.column_stack((x_val, y_val)))\n        y_val.extend([c] * n_val)\n\n    X_train = np.round(np.vstack(X_train), 4)\n    X_val = np.round(np.vstack(X_val), 4)\n    y_train = np.array(y_train)\n    y_val = np.array(y_val)\n\n    return X_train, X_val, y_train, y_val\n```\n\nThis script defines the `generate_data` function which generates synthetic 2-D data for a specified number of classes, with a specified number of training and validation points per class. The coordinates of the points are sampled from a uniform distribution within a specified range, and the results are rounded to four decimal places for consistency and compactness. The function also supports setting a random seed for reproducibility."}
{"task_id": 579, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script implementing the K-Means clustering algorithm as described in the task. The script uses only base Python and NumPy, and it ensures that the cluster centers are rounded to four decimal places.\n\n```python\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    # Step 1: Initialisation\n    centres = X[:k].copy()\n    \n    for _ in range(max_iters):\n        # Step 2: Assignment step\n        labels = []\n        for point in X:\n            distances = np.linalg.norm(point - centres, axis=1)\n            closest_centre_index = np.argmin(distances)\n            labels.append(closest_centre_index)\n        \n        # Step 3: Update step\n        new_centres = np.zeros_like(centres)\n        counts = np.zeros(k, dtype=int)\n        \n        for label, point in zip(labels, X):\n            new_centres[label] += point\n            counts[label] += 1\n        \n        for i in range(k):\n            if counts[i] > 0:\n                new_centres[i] /= counts[i]\n            else:\n                new_centres[i] = centres[i]  # Keep the centre unchanged if no points are assigned\n        \n        # Check for convergence\n        if np.allclose(centres, new_centres, atol=1e-4):\n            break\n        \n        centres = new_centres\n    \n    # Round the centres to 4 decimal places\n    centres_rounded = np.round(centres, 4).tolist()\n    \n    return labels, centres_rounded\n\n# Example usage:\nif __name__ == \"__main__\":\n    X = np.array([\n        [1.0, 2.0],\n        [1.5, 1.8],\n        [5.0, 8.0],\n        [8.0, 8.0],\n        [1.0, 0.6],\n        [9.0, 11.0],\n        [8.0, 2.0],\n        [10.0, 2.0],\n        [9.0, 3.0]\n    ])\n    k = 3\n    labels, centres = kmeans(X, k)\n    print(\"Labels:\", labels)\n    print(\"Centres:\", centres)\n```\n\nThis script defines the `kmeans` function, which performs the K-Means clustering algorithm as specified. It initializes the cluster centers using the first `k` points, assigns each point to the nearest center, updates the centers based on the assigned points, and repeats these steps until convergence or the maximum number of iterations is reached. The final centers are rounded to four decimal places before being returned."}
{"task_id": 581, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    m, n = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n\n    if learning_rate == 0 or iterations == 0:\n        return [round(w, 4) for w in weights], round(bias, 4)\n\n    for _ in range(iterations):\n        predictions = np.dot(X, weights) + bias\n        residuals = y - predictions\n\n        for j in range(n):\n            grad_wj = -2 * np.dot(X[:, j], residuals) + l1_penalty * np.sign(weights[j]) + 2 * l2_penalty * weights[j]\n            weights[j] -= learning_rate * grad_wj / m\n\n        grad_b = -2 * np.sum(residuals)\n        bias -= learning_rate * grad_b / m\n\n    return [round(w, 4) for w in weights], round(bias, 4)\n```\n\nThis script defines the `elastic_net_regression` function, which performs batch gradient descent to fit a linear model with Elastic-Net regularization. The function initializes weights and bias to zero, computes gradients, and updates parameters accordingly. If the learning rate or number of iterations is zero, it returns the initial parameters. The final weights and bias are rounded to four decimal places before being returned."}
{"task_id": 591, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    # Convert input to a numpy array for easier manipulation\n    x = np.array(x)\n    \n    # Iterate over each layer\n    for L, weight_matrix in enumerate(weights):\n        # Add bias term to the input\n        x = np.insert(x, 0, 1)\n        \n        # Convert weight matrix to a numpy array\n        weight_matrix = np.array(weight_matrix)\n        \n        # Perform dot product\n        x = np.dot(weight_matrix, x)\n        \n        # Apply ReLU activation function to all layers except the last one\n        if L < len(weights) - 1:\n            x = np.maximum(0, x)\n    \n    # Round the final output to four decimal places\n    if len(x) == 1:\n        return round(x[0], 4)\n    else:\n        return [round(val, 4) for val in x]\n\n# Example usage:\n# weights = [\n#     [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]],  # Layer 0\n#     [[0.7, 0.8, 0.9]]                     # Layer 1\n# ]\n# x = [0.5, 0.5]\n# print(neural_net_predict(weights, x))\n```\n\nThis script defines the `neural_net_predict` function, which performs a forward pass through a fully-connected feed-forward neural network with the specified architecture and weights. The function handles both single and multiple output neurons, rounding the final predictions to four decimal places."}
{"task_id": 595, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Implement K-Means clustering to compute centroids only.\"\"\"\n    \n    # Step 1: Initialize centroids with the first k samples in X\n    centroids = X[:k].copy()\n    \n    for _ in range(max_iters):\n        # Step 2.1: Assign every sample to the nearest centroid\n        distances = np.sum((X[:, np.newaxis] - centroids) ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Step 2.2: Update each centroid\n        new_centroids = np.array([X[labels == i].mean(axis=0) if np.any(labels == i) else centroids[i] for i in range(k)])\n        \n        # Step 3: Check for convergence\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 1e-4):\n            break\n        \n        centroids = new_centroids\n    \n    # Step 4: Sort centroids in ascending lexicographical order and round to 4 decimals\n    sorted_centroids = np.round(sorted(centroids, key=lambda x: tuple(x)), 4).tolist()\n    \n    return sorted_centroids\n```\n\nThis script implements the K-Means clustering algorithm from scratch to compute centroids only, following the specified requirements. It initializes centroids with the first `k` samples, iteratively assigns samples to the nearest centroid, updates centroids, checks for convergence, and finally sorts and rounds the centroids before returning them."}
