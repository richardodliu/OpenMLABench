{"task_id": 0, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Implement Ridge (L2-regularised) Linear Regression using its closed-form solution.\n    \n    Parameters:\n    - data: np.ndarray where the last column is the target y and all preceding columns are the features X.\n    - alpha: float, the regularisation strength.\n    \n    Returns:\n    - A list of the weight vector rounded to 4 decimal places.\n      Returns -1 if the matrix (X^T X + alpha I) is not invertible.\n    \"\"\"\n    # Split the data into features and target\n    X = data[:, :-1]\n    y = data[:, -1]\n    \n    # Add a bias term (intercept) to the features\n    X = np.hstack([np.ones((X.shape[0], 1)), X])\n    \n    # Compute the identity matrix with size equal to the number of columns in X\n    I = np.eye(X.shape[1])\n    \n    # Compute the matrix (X^T X + alpha I)\n    A = X.T @ X + alpha * I\n    \n    # Check if the matrix A is invertible\n    if np.linalg.det(A) == 0:\n        return -1\n    \n    # Compute the weight vector\n    w = np.linalg.inv(A) @ X.T @ y\n    \n    # Return the weight vector rounded to 4 decimal places as a Python list\n    return w.round(4).tolist()\n\n# Example usage:\n# data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n# alpha = 0.1\n# print(ridge_regression(data, alpha))\n```\n\nThis script defines a function `ridge_regression` that takes a numpy array `data` and a regularization parameter `alpha`, and returns the weight vector for Ridge Regression using the closed-form solution. If the matrix `(X^T X + alpha I)` is not invertible, it returns `-1`. The weight vector is rounded to four decimal places and returned as a Python list."}
{"task_id": 1, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    \n    # Compute the Gram matrix\n    K = np.dot(X_train, X_train.T)\n    \n    updates = 0\n    converged = False\n    \n    while updates < n_iter and not converged:\n        converged = True\n        for i in range(n_samples):\n            # Compute the activation using the dual form\n            activation = np.sum(alpha * y_train * K[:, i])\n            margin = y_train[i] * (activation + b)\n            \n            if margin <= 0:\n                # Misclassified point, update alpha and b\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updates += 1\n                converged = False\n                break  # Restart the scan\n    \n    # Compute the primal weight vector w\n    w = np.sum(alpha * y_train[:, np.newaxis] * X_train, axis=0)\n    \n    # Return w and b rounded to 4 decimal places\n    return [round(wi, 4) for wi in w], round(b, 4)\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 3], [2, 1], [3, 2]])\n# y_train = np.array([1, 1, 1, -1, -1])\n# w, b = perceptron_dual(X_train, y_train)\n# print(\"Weight vector:\", w)\n# print(\"Bias:\", b)\n```\n\nThis script defines the `perceptron_dual` function, which implements the dual-form perceptron learning algorithm. It computes the Gram matrix to handle the inner products efficiently and updates the dual parameters `alpha` and bias `b` as specified. After training, it computes the primal weight vector `w` and returns both `w` and `b` rounded to four decimal places."}
{"task_id": 2, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1.0 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1.0 / (1 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return 1.0 / (mu * (1 - mu))\n\n    return {\n        \"identity\": {\n            \"link\": identity_link,\n            \"inv_link\": identity_inv_link,\n            \"derivative\": identity_derivative\n        },\n        \"log\": {\n            \"link\": log_link,\n            \"inv_link\": log_inv_link,\n            \"derivative\": log_derivative\n        },\n        \"logit\": {\n            \"link\": logit_link,\n            \"inv_link\": logit_inv_link,\n            \"derivative\": logit_derivative\n        }\n    }\n\n# Example usage:\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links[\"logit\"][\"link\"](mu)        # \u2192 [-1.3863, 1.3863]\nmu2 = links[\"logit\"][\"inv_link\"](eta)    # \u2192 [0.2, 0.8]\n\nprint(\"eta:\", np.round(eta, 4))\nprint(\"mu2:\", np.round(mu2, 4))\n```\n\nThis script defines the required link functions for GLMs and demonstrates their usage with an example. The functions are designed to handle both scalar and array inputs using NumPy's element-wise operations."}
{"task_id": 3, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    \n    def build_tree(indices):\n        if len(indices) < 3:\n            return {'leaf': indices}\n        \n        feature = np.random.choice(data.shape[1])\n        down = np.min(data[indices, feature])\n        up = np.max(data[indices, feature])\n        v = np.random.uniform(down, up)\n        \n        left_indices = indices[data[indices, feature] <= v]\n        right_indices = indices[data[indices, feature] > v]\n        \n        return {'feature': feature, 'value': v, 'left': build_tree(left_indices), 'right': build_tree(right_indices)}\n    \n    def traverse_tree(node, index, depth):\n        if 'leaf' in node:\n            return depth\n        feature = node['feature']\n        value = node['value']\n        if data[index, feature] <= value:\n            return traverse_tree(node['left'], index, depth + 1)\n        else:\n            return traverse_tree(node['right'], index, depth + 1)\n    \n    root = build_tree(np.arange(data.shape[0]))\n    depths = [traverse_tree(root, i, 0) for i in range(data.shape[0])]\n    \n    return depths\n\n# Example usage:\ndata = np.arange(5).reshape(-1, 1)\nprint(isolation_tree_path_length(data))  # Output: [2, 2, 2, 1, 1]\n```\n\nThis script defines the `isolation_tree_path_length` function, which constructs an isolation tree according to the specified rules and computes the depth of the leaf node for each sample. The function uses a recursive approach to build the tree and traverse it to determine the path lengths. The random seed is set to 0 to ensure reproducibility of results."}
{"task_id": 7, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    min_support_count = math.ceil(minsup * N)\n    \n    # Flatten the list of transactions to get all unique items\n    all_items = set(item for transaction in transactions for item in transaction)\n    \n    # Initialize the frequent itemsets dictionary\n    frequent_itemsets = {}\n    \n    # Check all possible itemsets of increasing length\n    for k in range(1, len(all_items) + 1):\n        # Generate all possible combinations of items of length k\n        candidate_itemsets = combinations(all_items, k)\n        \n        # Count the support for each candidate itemset\n        candidate_support = Counter()\n        for transaction in transactions:\n            transaction_items = set(transaction)\n            for itemset in candidate_itemsets:\n                if set(itemset).issubset(transaction_items):\n                    candidate_support[itemset] += 1\n        \n        # Filter out the itemsets that do not meet the minimum support\n        for itemset, support in candidate_support.items():\n            if support >= min_support_count:\n                frequent_itemsets[itemset] = support\n    \n    return frequent_itemsets\n\n# Example usage\ntransactions = [\n    ['bread', 'milk'],\n    ['bread', 'diaper', 'beer', 'egg'],\n    ['milk', 'diaper', 'beer', 'coke'],\n    ['bread', 'milk', 'diaper', 'beer'],\n    ['bread', 'milk', 'diaper', 'coke']\n]\nminsup = 0.6\n\nprint(find_frequent_itemsets(transactions, minsup))\n```\n\nThis script defines the `find_frequent_itemsets` function which takes a list of transactions and a minimum support threshold, and returns a dictionary of frequent itemsets with their support counts. The function uses combinations to generate candidate itemsets of increasing length and counts their support by checking each transaction. It then filters out itemsets that do not meet the minimum support threshold."}
{"task_id": 11, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    \n    # Step 1: Initialize the centres with the first k samples\n    centres = data[:k].copy()\n    \n    for iteration in range(max_iter):\n        # Step 2: Assign each sample to the nearest centre\n        labels = []\n        for sample in data:\n            distances = np.sum((sample - centres) ** 2, axis=1)\n            labels.append(np.argmin(distances))\n        \n        # Step 3: Recompute each centre as the mean of all samples assigned to it\n        new_centres = np.zeros_like(centres)\n        counts = np.zeros(k, dtype=int)\n        \n        for label, sample in zip(labels, data):\n            new_centres[label] += sample\n            counts[label] += 1\n        \n        # Handle empty clusters by reinitializing them with a random sample\n        for i in range(k):\n            if counts[i] == 0:\n                random_index = np.random.randint(0, len(data))\n                new_centres[i] = data[random_index]\n            else:\n                new_centres[i] /= counts[i]\n        \n        # Step 4: Check for convergence\n        max_change = np.max(np.sum((new_centres - centres) ** 2, axis=1))\n        if max_change < epsilon:\n            break\n        \n        centres = new_centres\n    \n    # Round the centres to 4 decimal places\n    centres_rounded = np.round(centres, 4).tolist()\n    \n    return centres_rounded, labels\n\n# Example usage:\n# data = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# k = 3\n# centres, labels = kmeans(data, k)\n# print(\"Centres:\", centres)\n# print(\"Labels:\", labels)\n```\n\nThis script implements the K-Means clustering algorithm from scratch, following the specified requirements. It initializes the cluster centers with the first `k` samples, assigns each sample to the nearest center, recomputes the centers, and handles empty clusters by reinitializing them with a random sample. The algorithm stops when the maximum change in any center is smaller than `epsilon` or when `max_iter` iterations have been executed. The final centers are rounded to four decimal places."}
{"task_id": 13, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that implements the item-based k-NN collaborative filtering recommender as described in the task:\n\n```python\nimport numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_users, n_items = data.shape\n    \n    # Step 1: Build the item-item similarity matrix S\n    S = np.zeros((n_items, n_items))\n    \n    for i in range(n_items):\n        for j in range(i + 1, n_items):\n            # Find users that rated both items i and j\n            users_rated_both = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            \n            if len(users_rated_both) == 0:\n                S[i, j] = S[j, i] = 0\n            else:\n                v1 = data[users_rated_both, i]\n                v2 = data[users_rated_both, j]\n                \n                if criterion == 'cosine':\n                    std_v1 = np.std(v1)\n                    std_v2 = np.std(v2)\n                    \n                    if std_v1 > 1e-3 and std_v2 > 1e-3:\n                        v1_centered = v1 - np.mean(v1)\n                        v2_centered = v2 - np.mean(v2)\n                        cosine_sim = np.dot(v1_centered, v2_centered) / (np.linalg.norm(v1_centered) * np.linalg.norm(v2_centered))\n                        S[i, j] = S[j, i] = cosine_sim\n                    else:\n                        S[i, j] = S[j, i] = 0\n                elif criterion == 'pearson':\n                    pearson_corr = np.corrcoef(v1, v2)[0, 1]\n                    S[i, j] = S[j, i] = pearson_corr\n    \n    # Step 2: Collect the indices of items the active user has already rated\n    rated_items = np.where(data[user_ind, :] > 0)[0]\n    r = data[user_ind, rated_items]\n    \n    # Step 3: Compute the predicted attractiveness score for every yet unrated item\n    scores = defaultdict(float)\n    \n    for t in range(n_items):\n        if t not in rated_items:\n            similarity_sum = 0\n            weighted_sum = 0\n            \n            for i, rated_item in enumerate(rated_items):\n                similarity = S[t, rated_item]\n                weighted_sum += r[i] * similarity\n                similarity_sum += abs(similarity)\n            \n            if similarity_sum > 0:\n                scores[t] = weighted_sum / similarity_sum\n    \n    # Step 4: Return the indices of the k most promising items\n    recommended_items = sorted(scores, key=scores.get, reverse=True)[:k]\n    \n    return recommended_items\n\n# Example usage:\n# data = np.array([[5, 3, 0, 1],\n#                  [4, 0, 0, 1],\n#                  [1, 1, 0, 5],\n#                  [1, 0, 0, 4],\n#                  [0, 1, 5, 4]])\n# user_ind = 0\n# k = 2\n# print(knn_recommend(data, user_ind, k, criterion='cosine'))\n```\n\nThis script defines the `knn_recommend` function, which constructs an item-item similarity matrix based on the specified criterion and then predicts the attractiveness of unrated items for the active user. The function returns the indices of the top `k` items with the highest predicted scores."}
{"task_id": 19, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_gain = -np.inf\n    best_feature = None\n    best_threshold = None\n\n    g_total = np.sum(g)\n    h_total = np.sum(h)\n    base_loss = -0.5 * (g_total ** 2) / (h_total + lam) + gamma\n\n    for feature_index in range(n_features):\n        # Get unique values and sort them\n        unique_values = np.unique(X[:, feature_index])\n        if len(unique_values) < 2:\n            continue\n\n        # Sort indices based on feature values\n        sorted_indices = np.argsort(X[:, feature_index])\n        g_sorted = g[sorted_indices]\n        h_sorted = h[sorted_indices]\n        X_sorted = X[sorted_indices, feature_index]\n\n        g_left = 0\n        h_left = 0\n        g_right = g_total\n        h_right = h_total\n\n        for i in range(n_samples - 1):\n            g_left += g_sorted[i]\n            h_left += h_sorted[i]\n            g_right -= g_sorted[i]\n            h_right -= h_sorted[i]\n\n            # Check if split is valid (at least two samples on each side)\n            if i < n_samples - 2:\n                threshold = (X_sorted[i] + X_sorted[i + 1]) / 2.0\n\n                loss_left = -0.5 * (g_left ** 2) / (h_left + lam) + gamma\n                loss_right = -0.5 * (g_right ** 2) / (h_right + lam) + gamma\n                gain = base_loss - loss_left - loss_right\n\n                if gain > best_gain:\n                    best_gain = gain\n                    best_feature = feature_index\n                    best_threshold = threshold\n\n    return (best_feature, best_threshold) if best_gain > 0 else None\n```\n\nThis function iterates over each feature and each unique value within that feature to find the optimal split that maximizes the gain. It ensures that each split leaves at least two samples on each side and returns the best split if the gain is positive. If no such split exists, it returns `None`."}
{"task_id": 20, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Convert input to a NumPy array if it's a list\n    if isinstance(x, list):\n        x = np.array(x)\n    \n    # Calculate the sigmoid\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    \n    # Calculate the gradient of the sigmoid\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    \n    # Round the results to 4 decimal places\n    sigmoid_x_rounded = np.round(sigmoid_x, 4)\n    gradient_x_rounded = np.round(gradient_x, 4)\n    \n    # Convert back to scalar if input was a scalar\n    if isinstance(x, (int, float)) or x.ndim == 0:\n        return float(sigmoid_x_rounded), float(gradient_x_rounded)\n    else:\n        return sigmoid_x_rounded.tolist(), gradient_x_rounded.tolist()\n\n# Example usage:\n# scalar_input = 0.5\n# array_input = np.array([-1, 0, 1])\n# list_input = [0.5, -0.5, 2.0]\n\n# print(sigmoid_activation(scalar_input))\n# print(sigmoid_activation(array_input))\n# print(sigmoid_activation(list_input))\n```\n\nThis script defines the `sigmoid_activation` function that computes the sigmoid and its gradient for a given input, which can be a scalar, a list, or a NumPy array. The results are rounded to four decimal places and returned in the appropriate format."}
{"task_id": 21, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef adaboost_1d_predict(x_train: list[float],\n                        y_train: list[int],\n                        x_test: list[float],\n                        epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n_samples = len(x_train)\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n\n    def weighted_error(stump, weights):\n        d, theta = stump\n        predictions = np.ones(n_samples)\n        if d == 0:\n            predictions[x_train > theta] = -1\n        else:\n            predictions[x_train <= theta] = -1\n        return np.sum(weights[predictions != y_train])\n\n    def train_stump():\n        sorted_indices = np.argsort(x_train)\n        x_sorted = np.array(x_train)[sorted_indices]\n        y_sorted = np.array(y_train)[sorted_indices]\n        min_error = float('inf')\n        best_stump = None\n\n        for i in range(n_samples - 1):\n            theta = (x_sorted[i] + x_sorted[i + 1]) / 2\n            for d in [0, 1]:\n                stump = (d, theta)\n                error = weighted_error(stump, weights)\n                if error < min_error:\n                    min_error = error\n                    best_stump = stump\n        return best_stump, min_error\n\n    while True:\n        stump, error = train_stump()\n        if error == 0:\n            error = 1e-10  # Avoid division by zero\n        alpha = 0.5 * math.log((1 - error) / error)\n        stumps.append(stump)\n        alphas.append(alpha)\n\n        d, theta = stump\n        predictions = np.ones(n_samples)\n        if d == 0:\n            predictions[x_train > theta] = -1\n        else:\n            predictions[x_train <= theta] = -1\n\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n\n        ensemble_predictions = np.sum([alpha * pred for alpha, (d, theta) in zip(alphas, stumps)], axis=0)\n        training_error = np.sum(np.sign(ensemble_predictions) != y_train) / n_samples\n\n        if training_error <= epsilon:\n            break\n\n    def predict(x):\n        ensemble_prediction = 0\n        for alpha, (d, theta) in zip(alphas, stumps):\n            if d == 0:\n                ensemble_prediction += alpha if x <= theta else -alpha\n            else:\n                ensemble_prediction += alpha if x > theta else -alpha\n        return np.sign(ensemble_prediction)\n\n    return [predict(x) for x in x_test]\n\n# Example usage:\n# x_train = [1, 2, 3, 4, 5]\n# y_train = [1, -1, 1, -1, 1]\n# x_test = [1.5, 2.5, 3.5, 4.5]\n# epsilon = 0.1\n# predictions = adaboost_1d_predict(x_train, y_train, x_test, epsilon)\n# print(predictions)  # Output: [1, -1, 1, -1]\n```\n\nThis script defines the `adaboost_1d_predict` function, which implements the AdaBoost algorithm using one-dimensional decision stumps as weak learners. The function trains the ensemble on the provided training data and returns predictions for the test data. The training stops when the training error of the ensemble is less than or equal to the specified `epsilon`."}
{"task_id": 25, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    # Compute the Euclidean norm squared between each pair of training and test samples\n    X_train_squared = np.sum(X_train ** 2, axis=1, keepdims=True)\n    X_test_squared = np.sum(X_test ** 2, axis=1, keepdims=True)\n    distances = X_train_squared + X_test_squared.T - 2 * np.dot(X_train, X_test.T)\n    \n    # Compute the Gaussian kernel matrix\n    K = np.exp(-gamma * distances)\n    \n    # Compute the decision function for each test sample\n    g_z = np.dot(alpha * y_train, K) + b\n    \n    # Determine the predicted labels\n    predictions = np.sign(g_z).astype(int)\n    \n    # Ensure the predictions are either 1 or -1\n    predictions[predictions == 0] = 1\n    \n    return predictions.tolist()\n```\n\nThis script defines the `gaussian_svm_predict` function, which computes the predicted labels for test samples using a pre-trained Gaussian-kernel SVM. The function leverages NumPy for efficient computation, ensuring that the operations are fully vectorized. The predictions are returned as a list of integers, each being either 1 or -1."}
{"task_id": 28, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    # Convert the input list of lists to a numpy array\n    X_np = np.array(X)\n    m, n = X_np.shape\n    \n    # Check if k is within the valid range\n    if k < 1 or k > min(m, n):\n        return -1\n    \n    # Perform truncated SVD\n    U, s, VT = np.linalg.svd(X_np, full_matrices=False)\n    \n    # Truncate the SVD to keep only the first k singular values/vectors\n    U_k = U[:, :k]\n    s_k = s[:k]\n    VT_k = VT[:k, :]\n    \n    # Reconstruct the matrix using the truncated SVD\n    X_hat_np = U_k @ np.diag(s_k) @ VT_k\n    \n    # Calculate the mean squared error\n    mse = np.mean((X_np - X_hat_np) ** 2)\n    \n    # Round the reconstructed matrix and the MSE to four decimals\n    X_hat = np.round(X_hat_np, 4).tolist()\n    mse = np.round(mse, 4)\n    \n    return X_hat, mse\n```\n\nThis script defines a function `linear_autoencoder` that performs the required operations using NumPy for efficient computation of the Singular Value Decomposition (SVD) and matrix operations. The function checks if the provided `k` is valid, computes the truncated SVD, reconstructs the matrix, calculates the mean squared error, and returns the results rounded to four decimal places."}
{"task_id": 29, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                           y_train: list[float] | np.ndarray,\n                           x_query: float,\n                           epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    \n    # Sort the training data by the feature values\n    sorted_indices = np.argsort(x_train)\n    x_train = x_train[sorted_indices]\n    y_train = y_train[sorted_indices]\n    \n    # Initialize the residuals with the target values\n    residuals = y_train.copy()\n    \n    # Initialize the prediction for the query point\n    prediction = 0.0\n    \n    while True:\n        # Calculate candidate split points (midpoints between consecutive x_train values)\n        candidate_splits = (x_train[:-1] + x_train[1:]) / 2.0\n        \n        # Initialize variables to track the best split and its RSS\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n        best_rss = float('inf')\n        \n        # Evaluate each candidate split\n        for s in candidate_splits:\n            # Split the residuals into two parts based on the candidate split point\n            left_indices = x_train <= s\n            right_indices = x_train > s\n            \n            # Calculate the mean of the residuals in each part\n            c1 = np.mean(residuals[left_indices]) if np.any(left_indices) else 0.0\n            c2 = np.mean(residuals[right_indices]) if np.any(right_indices) else 0.0\n            \n            # Calculate the RSS for this split\n            rss = np.sum(residuals[left_indices] ** 2) + np.sum(residuals[right_indices] ** 2)\n            \n            # Update the best split if this one has a lower RSS\n            if rss < best_rss:\n                best_split = s\n                best_c1 = c1\n                best_c2 = c2\n                best_rss = rss\n        \n        # If the best RSS is already below the tolerance, stop the training\n        if best_rss < epsilon:\n            break\n        \n        # Add the best stump to the ensemble\n        prediction += (best_c1 if x_query <= best_split else best_c2)\n        \n        # Update the residuals\n        residuals[left_indices] -= best_c1\n        residuals[right_indices] -= best_c2\n    \n    # Return the final prediction rounded to 4 decimal places\n    return round(prediction, 4)\n```\n\nThis script defines the function `predict_boosting_tree` which implements the one-dimensional gradient boosting regressor using decision stumps as described in the task. The function sorts the training data, evaluates candidate split points, iteratively adds the best stump to the ensemble until the residual sum of squares is below the specified tolerance, and finally returns the prediction for the query point rounded to four decimal places."}
{"task_id": 34, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None) -> np.ndarray:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s based on the specified shape and sparsity.\n    \n    Parameters:\n    - shape: A tuple defining the dimensions of the output tensor.\n    - sparsity: A float in the range [0, 1] representing the probability of generating a 1.0.\n    - seed: An optional integer to seed the random number generator for reproducibility.\n    \n    Returns:\n    - A NumPy array of the specified shape with dtype float, containing 0.0s and 1.0s.\n    - Returns -1 if the sparsity value is outside the range [0, 1].\n    \"\"\"\n    if not (0 <= sparsity <= 1):\n        return -1\n    \n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Generate random numbers and compare them to the sparsity threshold\n    random_tensor = np.random.rand(*shape) < sparsity\n    return random_tensor.astype(float)\n\n# Example usage:\nif __name__ == \"__main__\":\n    shape = (2, 3)\n    sparsity = 0.3\n    seed = 42\n    result = random_binary_tensor(shape, sparsity, seed)\n    print(result)\n```\n\nThis script defines the `random_binary_tensor` function, which generates a NumPy array filled with 0.0s and 1.0s based on the specified shape and sparsity. The function includes checks for the sparsity value and an optional seed for reproducibility. The example usage at the bottom demonstrates how to call the function and print the result."}
{"task_id": 39, "completion_id": 0, "completion": "Certainly! Below is the self-contained Python script that implements the `get_split` function as described in the task:\n\n```python\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    # Use argpartition to find the median index\n    median_index = n_samples // 2\n    indices = np.arange(n_samples)\n    partitioned_indices = np.argpartition(data[:, d], median_index)\n    \n    # The median index in the partitioned array\n    pivot = partitioned_indices[median_index]\n    \n    # Separate indices into left and right based on the median value\n    left_indices = partitioned_indices[:median_index]\n    right_indices = partitioned_indices[median_index + 1:]\n    \n    # Sort the left and right indices to ensure determinism\n    left = sorted(left_indices)\n    right = sorted(right_indices)\n    \n    return pivot, left, right\n\n# Example usage:\nif __name__ == \"__main__\":\n    data = np.array([\n        [3, 2],\n        [1, 4],\n        [5, 6],\n        [2, 8],\n        [7, 0]\n    ])\n    d = 0\n    pivot, left, right = get_split(data, d)\n    print(f\"Pivot index: {pivot}\")\n    print(f\"Left indices: {left}\")\n    print(f\"Right indices: {right}\")\n```\n\n### Explanation:\n1. **Argpartition**: We use `np.argpartition` to partially sort the array such that the element at the median position is in its correct place, and elements before it are smaller, and elements after it are larger. This operation is `O(n)`.\n\n2. **Median Index**: For an array of size `n`, the median index is `n // 2`.\n\n3. **Partitioning**: We partition the indices based on the median value in the specified column `d`.\n\n4. **Sorting**: We sort the `left` and `right` indices to ensure the output is deterministic.\n\n5. **Return**: The function returns the pivot index, the sorted list of left indices, and the sorted list of right indices."}
{"task_id": 40, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    # Assertions to check pre-conditions\n    assert x.ndim == 1, \"Input signal must be one-dimensional.\"\n    assert stride >= 1, \"Stride must be a positive integer.\"\n    assert len(x) >= frame_width, \"Input signal must be at least as long as the frame width.\"\n\n    # Calculate the number of frames\n    n_frames = (len(x) - frame_width) // stride + 1\n\n    # Calculate the strides for the new array\n    x_itemsize = x.itemsize\n    x_stride = x.strides[0]\n    new_shape = (n_frames, frame_width)\n    new_strides = (x_stride * stride, x_stride)\n\n    # Create the view using as_strided\n    frames = as_strided(x, shape=new_shape, strides=new_strides, writeable=writeable)\n\n    return frames\n\n# Example usage:\nif __name__ == \"__main__\":\n    x = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    frame_width = 4\n    stride = 2\n    frames = to_frames(x, frame_width, stride, writeable=False)\n    print(frames)\n    # Output should be:\n    # [[0 1 2 3]\n    #  [2 3 4 5]\n    #  [4 5 6 7]\n    #  [6 7 8 9]]\n```\n\nThis script defines the `to_frames` function which takes a one-dimensional NumPy array `x`, a frame width, a stride, and a writeable flag to create overlapping frames using low-level stride manipulation. The function includes assertions to ensure the input meets the required conditions. The example usage demonstrates how to use the function and prints the resulting frames."}
{"task_id": 48, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Convert to numpy array if it's a list of lists\n    if isinstance(X, list):\n        X = np.array(X)\n    \n    # Check if the matrix is two-dimensional\n    if X.ndim != 2:\n        return False\n    \n    # Check if all elements are between 0 and 1\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    \n    # Check if each row sums to 1 within a tolerance of 1e-8\n    if not np.allclose(np.sum(X, axis=1), 1, atol=1e-8):\n        return False\n    \n    return True\n```\n\nThis script defines the `is_stochastic` function which checks if a given matrix is row-stochastic according to the specified criteria. The function handles both list of lists and NumPy arrays as input and performs the necessary checks without raising exceptions, returning a Boolean value as the result."}
{"task_id": 55, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n, d = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    \n    for iteration in range(max_iter):\n        # Determine the current batch\n        start_idx = (iteration * batch_size) % n\n        end_idx = (start_idx + batch_size) % n\n        if end_idx < start_idx:\n            X_batch = np.vstack((X[start_idx:], X[:end_idx]))\n            y_batch = np.concatenate((y[start_idx:], y[:end_idx]))\n        else:\n            X_batch = X[start_idx:end_idx]\n            y_batch = y[start_idx:end_idx]\n        \n        # Compute the gradient\n        g = (1 / len(X_batch)) * X_batch.T @ (X_batch @ w - y_batch)\n        \n        # Update the running average of squared gradients\n        s = rho * s + (1 - rho) * g**2\n        \n        # Update the weights\n        w -= eta * g / (np.sqrt(s) + eps_station)\n        \n        # Check for early stopping\n        if np.linalg.norm(g) < epsilon:\n            break\n    \n    return [round(weight, 4) for weight in w]\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([3, 7, 11])\n# print(rms_prop(X, y))\n```\n\nThis script defines the `rms_prop` function, which implements the RMSprop optimization algorithm for linear regression. The function takes a feature matrix `X` and a target vector `y`, along with several hyperparameters, and returns the learned weight vector rounded to four decimal places. The function handles mini-batch processing and includes early stopping based on the gradient's norm."}
{"task_id": 56, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n    \"\"\"Compute the SoftPlus activation or its gradient.\n    \n    Args:\n        x (scalar, list, or np.ndarray): Input values.\n        deriv (bool): If True, compute the gradient of SoftPlus.\n        \n    Returns:\n        list or float: SoftPlus values or their gradients rounded to 4 decimal places.\n    \"\"\"\n    \n    # Helper function to apply SoftPlus\n    def softplus_func(val):\n        if val > 20:  # For large positive values, use the approximation log(1 + e^x) \u2248 x\n            return val\n        elif val < -20:  # For large negative values, use the approximation log(1 + e^x) \u2248 e^x\n            return np.exp(val)\n        else:\n            return np.log1p(np.exp(val))\n    \n    # Helper function to apply the derivative of SoftPlus (sigmoid)\n    def sigmoid_func(val):\n        return 1 / (1 + np.exp(-val))\n    \n    # Determine if input is a scalar, list, or numpy array\n    is_scalar = np.isscalar(x)\n    x = np.array(x) if not is_scalar else np.array([x])\n    \n    # Compute SoftPlus or its derivative\n    if deriv:\n        result = sigmoid_func(x)\n    else:\n        result = np.array([softplus_func(val) for val in x])\n    \n    # Round to 4 decimal places\n    rounded_result = np.round(result, 4)\n    \n    # Return as a list or scalar\n    return rounded_result.item() if is_scalar else rounded_result.tolist()\n\n# Example usage:\n# print(softplus([-10, -1, 0, 1, 10]))\n# print(softplus([-10, -1, 0, 1, 10], deriv=True))\n```\n\nThis script defines the `softplus` function that computes the SoftPlus activation or its derivative, using numerically stable formulations to handle large input values. The results are rounded to the nearest 4th decimal place and returned as a Python list or a single float if the input is a scalar."}
{"task_id": 58, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    if N < 1:\n        raise ValueError(\"N must be at least 1\")\n\n    # Count N-grams and (N-1)-grams in the corpus\n    ngram_counts = Counter(tuple(corpus[i:i+N]) for i in range(len(corpus) - N + 1))\n    if N > 1:\n        n1gram_counts = Counter(tuple(corpus[i:i+N-1]) for i in range(len(corpus) - N + 2))\n    else:\n        n1gram_counts = Counter(corpus)\n\n    log_prob = 0.0\n\n    # Calculate the log-probability of the sequence\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i+N])\n        if N > 1:\n            n1gram = tuple(sequence[i:i+N-1])\n        else:\n            n1gram = sequence[i]\n\n        ngram_count = ngram_counts[ngram]\n        n1gram_count = n1gram_counts[n1gram]\n\n        if ngram_count == 0 or n1gram_count == 0:\n            return float('-inf')\n\n        prob = ngram_count / n1gram_count\n        log_prob += np.log(prob)\n\n    return round(log_prob, 4)\n\n# Example usage:\n# corpus = [\"the\", \"cat\", \"sat\", \"on\", \"the\", \"mat\", \"the\", \"cat\", \"sat\"]\n# sequence = [\"the\", \"cat\", \"sat\"]\n# N = 2\n# print(unsmoothed_ngram_log_prob(corpus, sequence, N))  # Output: log-probability rounded to 4 decimal places\n```\n\nThis script defines a function `unsmoothed_ngram_log_prob` that calculates the unsmoothed Maximum-Likelihood Estimation (MLE) N-gram log-probability of a given sequence based on a training corpus. The function uses the `Counter` class from the `collections` module to count the occurrences of N-grams and (N-1)-grams in the corpus. It then computes the log-probability of the sequence by summing the log-probabilities of each N-gram in the sequence. If any required count is zero, it returns `float('-inf')`. The result is rounded to 4 decimal places."}
{"task_id": 62, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef lasso_regression(X: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\", degree: int, reg_factor: float, n_iterations: int = 1000, tol: float = 1e-6) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    m = len(X)\n    \n    # Build the design matrix\n    X_poly = np.vander(X, degree + 1, increasing=True)\n    \n    # Initialize weights\n    w = np.zeros(degree + 1)\n    \n    for _ in range(n_iterations):\n        w_old = w.copy()\n        \n        # Update the bias (w0)\n        w[0] = np.mean(y - X_poly[:, 1:] @ w[1:])\n        \n        # Update the other coefficients\n        for j in range(1, degree + 1):\n            rho = X_poly[:, j].T @ (y - X_poly @ w + w[j] * X_poly[:, j])\n            w[j] = np.sign(rho) * max(abs(rho) - reg_factor, 0) / (X_poly[:, j].T @ X_poly[:, j])\n        \n        # Check for convergence\n        if np.max(np.abs(w - w_old)) < tol:\n            break\n    \n    return [round(coef, 4) for coef in w.tolist()]\n\n# Example usage:\n# X = [1, 2, 3, 4, 5]\n# y = [2, 4, 6, 8, 10]\n# degree = 1\n# reg_factor = 0.1\n# coefficients = lasso_regression(X, y, degree, reg_factor)\n# print(coefficients)\n```\n\nThis script defines the `lasso_regression` function, which performs univariate Lasso regression with polynomial feature expansion using coordinate descent. The function takes in the input data `X`, target values `y`, polynomial degree `degree`, regularization strength `reg_factor`, and optional parameters for the maximum number of iterations and tolerance for early stopping. It returns the learned coefficients rounded to four decimal places."}
{"task_id": 63, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector beta_t for a given time index t in a Hidden Markov Model.\n\n    Parameters:\n    A (list[list[float]]): Transition-probability matrix of shape (N, N).\n    B (list[list[float]]): Emission-probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices of length T.\n    t (int): Time index for which to calculate the backward probability vector (0 \u2264 t < T).\n\n    Returns:\n    list[float]: List of N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    N = len(A)  # Number of states\n    T = len(obs)  # Length of the observation sequence\n\n    # Initialize beta with zeros\n    beta = np.zeros((T, N))\n\n    # Base case: beta_{T-1}(i) = 1 for all i\n    beta[T-1, :] = 1.0\n\n    # Calculate beta values from T-2 to t\n    for k in range(T-2, t-1, -1):\n        for i in range(N):\n            beta[k, i] = np.sum(A[i, :] * B[:, obs[k+1]] * beta[k+1, :])\n\n    # Return the backward probability vector for time t\n    return [round(beta[t, i], 4) for i in range(N)]\n\n# Example usage:\n# A = [[0.6, 0.4], [0.5, 0.5]]\n# B = [[0.7, 0.3], [0.4, 0.6]]\n# obs = [0, 1, 0]\n# t = 1\n# print(backward_beta(A, B, obs, t))  # Output: [0.0480, 0.0640]\n```\n\nThis script defines a function `backward_beta` that calculates the backward probability vector \\(\\beta_t\\) for a given time index \\(t\\) in a Hidden Markov Model. The function takes the transition probability matrix \\(A\\), emission probability matrix \\(B\\), a list of observation indices `obs`, and the time index `t` as inputs, and returns a list of backward probabilities rounded to four decimal places."}
{"task_id": 65, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or not pi or not obs:\n        return 0.0\n\n    N = len(A)  # Number of states\n    T = len(obs)  # Length of the observation sequence\n\n    # Initialize the backward variables\n    beta = np.zeros((N, T))\n    \n    # Base case: beta[T-1][i] = 1 for all states i\n    beta[:, T-1] = 1.0\n\n    # Recursive case: fill in the beta table from T-2 to 0\n    for t in range(T-2, -1, -1):\n        for i in range(N):\n            beta[i, t] = sum(A[i, j] * B[j, obs[t+1]] * beta[j, t+1] for j in range(N))\n\n    # Calculate the probability of the observation sequence\n    prob = sum(pi[i] * B[i, obs[0]] * beta[i, 0] for i in range(N))\n\n    return round(prob, 6)\n\n# Example usage:\n# A = [[0.7, 0.3], [0.4, 0.6]]\n# B = [[0.1, 0.4, 0.5], [0.7, 0.2, 0.1]]\n# pi = [0.6, 0.4]\n# obs = [0, 1, 2]\n# print(backward_prob(A, B, pi, obs))  # Output should be the probability rounded to 6 decimals\n```\n\nThis script defines the `backward_prob` function which calculates the probability of an observation sequence given the parameters of a Hidden Markov Model using the backward algorithm. The function handles edge cases where any of the input lists are empty by returning `0.0`. The result is rounded to six decimal places as required."}
{"task_id": 69, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    observations = np.array(observations)\n    \n    # Validate input dimensions\n    n = len(S)  # Number of states\n    m = B.shape[1]  # Number of possible observations\n    \n    if A.shape != (n, n) or B.shape != (n, m) or len(observations) == 0:\n        return -1\n    \n    # Check that every observation index is in the valid range [0, m\u22121]\n    if not (0 <= observations.min() and observations.max() < m):\n        return -1\n    \n    # Initialize the forward variables\n    T = len(observations)\n    alpha = np.zeros((T, n))\n    \n    # Base case: alpha[0][i] = S[i] * B[i][observations[0]]\n    alpha[0] = S * B[:, observations[0]]\n    \n    # Induction step\n    for t in range(1, T):\n        for j in range(n):\n            alpha[t, j] = np.dot(alpha[t-1], A[:, j]) * B[j, observations[t]]\n    \n    # Termination step: Sum over all states at the last time step\n    likelihood = np.sum(alpha[T-1])\n    \n    return round(likelihood, 4)\n\n# Example usage:\n# S = [0.6, 0.4]\n# A = [[0.7, 0.3], [0.4, 0.6]]\n# B = [[0.5, 0.5], [0.1, 0.9]]\n# observations = [0, 1, 0]\n# print(forward_algorithm(S, A, B, observations))  # Output: 0.0474\n```\n\nThis script defines the `forward_algorithm` function which computes the likelihood of an observation sequence given an HMM using the forward algorithm. It includes input validation and handles invalid inputs by returning -1. The result is rounded to 4 decimal places as required."}
{"task_id": 70, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script implementing the FP-Growth algorithm as described in the task:\n\n```python\nfrom collections import Counter, defaultdict\n\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    \n    class FPNode:\n        def __init__(self, item, count=1):\n            self.item = item\n            self.count = count\n            self.parent = None\n            self.children = defaultdict(FPNode)\n            self.link = None\n\n    def build_header_table(item_counts):\n        header_table = {}\n        for item, count in item_counts.items():\n            if count >= min_support:\n                header_table[item] = None\n        return header_table\n\n    def insert_tree(transaction, tree, header_table):\n        if not transaction:\n            return\n        item = transaction[0]\n        if item in tree.children:\n            tree.children[item].count += 1\n        else:\n            new_node = FPNode(item)\n            new_node.parent = tree\n            tree.children[item] = new_node\n            if header_table[item] is None:\n                header_table[item] = new_node\n            else:\n                current_node = header_table[item]\n                while current_node.link is not None:\n                    current_node = current_node.link\n                current_node.link = new_node\n        insert_tree(transaction[1:], tree.children[item], header_table)\n\n    def build_fp_tree(transactions, header_table):\n        root = FPNode(None)\n        for transaction in transactions:\n            sorted_transaction = [item for item in transaction if item in header_table]\n            sorted_transaction.sort(key=lambda x: (header_table[x].count, x), reverse=True)\n            insert_tree(sorted_transaction, root, header_table)\n        return root\n\n    def find_prefix_path(base_pat, tree_node):\n        cond_pattern = []\n        while tree_node is not None:\n            path = []\n            node = tree_node\n            while node.parent is not None:\n                path.append(node.item)\n                node = node.parent\n            if len(path) > 1:\n                cond_pattern.append((path[1:], tree_node.count))\n            tree_node = tree_node.link\n        return cond_pattern\n\n    def mine_tree(tree, header_table, prefix, frequent_itemsets):\n        for item in sorted(header_table, key=lambda x: (header_table[x].count, x)):\n            new_prefix = prefix + [item]\n            frequent_itemsets.append(new_prefix)\n            cond_pattern_base = find_prefix_path(item, header_table[item])\n            cond_pattern_tree = build_fp_tree([pat for pat, _ in cond_pattern_base], build_header_table(Counter(item for pat, _ in cond_pattern_base for item in pat)))\n            if cond_pattern_tree.children:\n                mine_tree(cond_pattern_tree, build_header_table(Counter(item for pat, _ in cond_pattern_base for item in pat)), new_prefix, frequent_itemsets)\n\n    # Count the support of every single item\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    header_table = build_header_table(item_counts)\n\n    # Build the FP-Tree\n    fp_tree = build_fp_tree(transactions, header_table)\n\n    # Mine the FP-Tree\n    frequent_itemsets = []\n    mine_tree(fp_tree, header_table, [], frequent_itemsets)\n\n    # Sort the result\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n\n    return frequent_itemsets\n\n# Example usage:\ntransactions = [\n    ['milk', 'bread', 'butter'],\n    ['bread', 'butter'],\n    ['bread', 'milk'],\n    ['bread', 'milk', 'butter', 'beer'],\n    ['bread', 'beer', 'cheese']\n]\nmin_support = 2\nprint(fp_growth(transactions, min_support))\n```\n\nThis script defines the `fp_growth` function which implements the FP-Growth algorithm to find frequent itemsets in a list of transactions. The function ensures that the output is deterministic by sorting the items within each itemset and the itemsets themselves as required."}
{"task_id": 75, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    # Check if k is valid\n    if k <= 0 or k > len(X_train):\n        return -1\n    \n    # Convert lists to numpy arrays for efficient computation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # List to store predictions\n    predictions = []\n    \n    # Iterate over each test sample\n    for x_test in X_test:\n        # Compute squared Euclidean distances between x_test and all training samples\n        distances = np.sum((X_train - x_test) ** 2, axis=1)\n        \n        # Get the indices of the k nearest neighbors\n        k_indices = np.argsort(distances)[:k]\n        \n        # Get the labels of the k nearest neighbors\n        k_nearest_labels = y_train[k_indices]\n        \n        # Count the occurrences of each label\n        label_counts = Counter(k_nearest_labels)\n        \n        # Find the label with the highest count, preferring the smallest label in case of a tie\n        predicted_label = min(label_counts, key=lambda x: (-label_counts[x], x))\n        \n        # Append the predicted label to the list\n        predictions.append(predicted_label)\n    \n    return predictions\n```\n\nThis script defines the `knn_predict` function, which implements the k-Nearest Neighbors algorithm as described. It checks for valid `k`, computes squared Euclidean distances, finds the k nearest neighbors, and uses majority voting to determine the class label for each test sample. In case of a tie, it selects the smallest class label."}
{"task_id": 76, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    \n    # Define a small epsilon for numerical stability\n    epsilon = np.finfo(float).eps\n    \n    # Calculate the loss using the formula\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    \n    # Return the loss rounded to 4 decimal places\n    return round(loss, 4)\n\n# Example usage:\n# y = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\n# y_pred = np.array([[0.9, 0.05, 0.05], [0.1, 0.8, 0.1], [0.2, 0.2, 0.6]])\n# print(cross_entropy_loss(y, y_pred))  # Output should be a float rounded to 4 decimal places\n```\n\nThis script defines a function `cross_entropy_loss` that calculates the unnormalised categorical cross-entropy loss for a batch of one-hot encoded targets and predicted probabilities. The function uses NumPy for efficient computation and ensures numerical stability by adding a small epsilon value before taking the logarithm. The result is rounded to four decimal places before being returned."}
{"task_id": 77, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef relu(Z: np.ndarray) -> np.ndarray:\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(0, Z)\n\ndef sigmoid(Z: np.ndarray) -> np.ndarray:\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\n\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2  # number of layers in the network\n\n    # Implement [LINEAR -> RELU]*(L-1). Add \"cache\" to the \"caches\" list.\n    for l in range(1, L):\n        A_prev = A\n        W = parameters[f'W{l}']\n        b = parameters[f'b{l}']\n        Z = np.dot(W, A_prev) + b\n        A = relu(Z)\n        cache = (A_prev, W, b, Z)\n        caches.append(cache)\n\n    # Implement LINEAR -> SIGMOID. Add \"cache\" to the \"caches\" list.\n    W = parameters[f'W{L}']\n    b = parameters[f'b{L}']\n    Z = np.dot(W, A) + b\n    AL = sigmoid(Z)\n    cache = (A, W, b, Z)\n    caches.append(cache)\n\n    # Convert AL to a list and round to 4 decimal places\n    AL = np.round(AL, 4).tolist()\n\n    return AL, caches\n```\n\nThis script defines the forward propagation for an L-layer neural network with ReLU activations in the hidden layers and a sigmoid activation in the output layer. It also collects the necessary cache for each layer, which can be used for backpropagation. The final output activation `AL` is rounded to 4 decimal places and converted to a plain Python list before being returned."}
{"task_id": 81, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    # Ensure A2 and Y have the same shape\n    A2 = A2.flatten()\n    Y = Y.flatten()\n    \n    # Clip A2 to the interval [\u03b5, 1\u2013\u03b5]\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    \n    # Compute the binary cross-entropy cost\n    m = A2_clipped.shape[0]\n    cost = - (1/m) * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    \n    # Return the cost rounded to 6 decimal places\n    return round(cost, 6)\n```\n\nThis script defines the `compute_cost` function which calculates the binary cross-entropy cost between the predicted probabilities `A2` and the ground-truth labels `Y`. The function ensures that the predicted probabilities are clipped to avoid taking the logarithm of zero, and it returns the cost rounded to six decimal places."}
{"task_id": 82, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | \"np.ndarray\", epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    n = len(Q)\n    greedy_action = np.argmax(Q)\n    \n    base_prob = epsilon / n\n    greedy_prob = 1 - epsilon + base_prob\n    \n    probabilities = np.full(n, base_prob)\n    probabilities[greedy_action] = greedy_prob\n    \n    # Ensure the sum of probabilities is 1 within the required tolerance\n    probabilities = probabilities / np.sum(probabilities)\n    \n    return [round(p, 4) for p in probabilities]\n\n# Example usage:\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1\nprint(epsilon_soft(Q, epsilon))  # Output: [0.925, 0.025, 0.025, 0.025]\n```\n\nThis script defines the `epsilon_soft` function, which calculates the \u03b5-soft probabilities for a given set of Q-values and an exploration parameter \u03b5. The function ensures that the probabilities are rounded to 4 decimal places and that their sum is 1 within the specified numerical tolerance. The example usage demonstrates how to call the function and verify its output."}
{"task_id": 86, "completion_id": 0, "completion": "```\npython\nfrom collections import Counter\n\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    # Number of samples\n    num_samples = len(predictions[0])\n    \n    # Initialize the result list\n    aggregated_predictions = []\n    \n    # Iterate over each sample\n    for sample_idx in range(num_samples):\n        # Collect votes for the current sample from all trees\n        votes = [tree_predictions[sample_idx] for tree_predictions in predictions]\n        \n        # Count the votes for each class label\n        vote_counts = Counter(votes)\n        \n        # Find the class label with the highest vote count\n        # In case of a tie, the smallest label will be chosen due to the sorted keys\n        most_common_votes = sorted(vote_counts.items(), key=lambda x: (-x[1], x[0]))\n        aggregated_predictions.append(most_common_votes[0][0])\n    \n    return aggregated_predictions\n\n# Example usage:\n# predictions = [\n#     [1, 2, 3, 2],\n#     [1, 2, 2, 2],\n#     [1, 3, 2, 2]\n# ]\n# print(aggregate_random_forest_votes(predictions))  # Output: [1, 2, 2, 2]\n```\n\nThis script defines the `aggregate_random_forest_votes` function, which takes a 2D list of predictions from multiple decision trees and returns a list of aggregated predictions using majority voting. In case of ties, the smallest label is chosen. The example usage at the end demonstrates how the function can be used."}
{"task_id": 88, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    # Convert input to a numpy array if it's not already one\n    if isinstance(z, (int, float)):\n        z = np.array([z])\n    else:\n        z = np.array(z)\n    \n    # Compute the softplus using logaddexp for numerical stability\n    result = np.logaddexp(0.0, z)\n    \n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n    \n    # If the input was a scalar, return a single float\n    if result.size == 1:\n        return float(result)\n    \n    # Otherwise, convert the result to a pure Python list\n    return result.tolist()\n\n# Example usage\nif __name__ == \"__main__\":\n    z = np.array([-1000, 0, 3])\n    print(softplus(z))  # Output: [0.0, 0.6931, 3.0486]\n```"}
{"task_id": 90, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Check if the policy has ev_estimates and if it's not empty\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    \n    # Extract true expected values and policy estimates\n    true_evs = bandit.arm_evs\n    estimates = policy.ev_estimates\n    \n    # Ensure the estimates are sorted by arm index\n    sorted_estimates = [estimates[i] for i in sorted(estimates.keys())]\n    \n    # Calculate the squared errors\n    squared_errors = [(true - est) ** 2 for true, est in zip(true_evs, sorted_estimates)]\n    \n    # Compute the mean-squared error\n    mse_value = np.mean(squared_errors)\n    \n    # Return the rounded mean-squared error\n    return round(mse_value, 4)\n\n# Example usage\nbandit = {\"arm_evs\": [0.5, 0.2, 0.9]}\npolicy = {\"ev_estimates\": {0: 0.4, 1: 0.25, 2: 0.8}}\n\nprint(mse(bandit, policy))  # Output should be 0.0075\n```"}
{"task_id": 96, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # Step 1: Tokenize the corpus and build vocabulary\n    tokens = []\n    for sentence in corpus:\n        tokens.extend(sentence.split())\n    \n    # Add <UNK> token to the vocabulary\n    vocabulary = set(tokens)\n    vocabulary.add(\"<UNK>\")\n    V = len(vocabulary)\n    \n    # Step 2: Build N-gram frequency tables\n    ngram_counts = defaultdict(Counter)\n    for sentence in corpus:\n        words = sentence.split()\n        # Add <UNK> for unseen words\n        words = [word if word in vocabulary else \"<UNK>\" for word in words]\n        # Pad the sentence with N-1 <s> tokens\n        words = [\"<s>\"] * (N-1) + words\n        for i in range(len(words) - N + 1):\n            ngram = tuple(words[i:i+N])\n            ngram_counts[ngram[:-1]][ngram[-1]] += 1\n    \n    # Step 3: Tokenize the target sequence\n    target_words = sequence.split()\n    if len(target_words) < N:\n        return 0.0\n    \n    # Add <UNK> for unseen words\n    target_words = [word if word in vocabulary else \"<UNK>\" for word in target_words]\n    # Pad the target sequence with N-1 <s> tokens\n    target_words = [\"<s>\"] * (N-1) + target_words\n    \n    # Step 4: Calculate the log-probability of the target sequence\n    log_prob = 0.0\n    for i in range(len(target_words) - N + 1):\n        context = tuple(target_words[i:i+N-1])\n        word = target_words[i+N-1]\n        count_context = sum(ngram_counts[context].values())\n        count_ngram = ngram_counts[context][word]\n        prob = (count_ngram + K) / (count_context + K * V)\n        log_prob += math.log(prob)\n    \n    return round(log_prob, 4)\n```\n\nThis script defines the `additive_ngram_log_prob` function, which computes the additive-smoothed log-probability of a given sentence using an N-gram model trained on a provided corpus. The function handles unseen words by mapping them to a special `<UNK>` token and uses Laplace smoothing (or more generally, Lidstone smoothing) to estimate probabilities. The result is the natural logarithm of the sentence probability, rounded to four decimal places."}
{"task_id": 108, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    N, M = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    \n    def compute_loss(X, W, H, alpha):\n        return np.linalg.norm(X - W @ H, 'fro')**2 + alpha * (np.linalg.norm(W, 'fro')**2 + np.linalg.norm(H, 'fro')**2)\n    \n    for _ in range(max_iter):\n        # Fix H and solve for W\n        HtH = H.T @ H + alpha * np.eye(K)\n        for n in range(N):\n            W[n, :] = np.linalg.solve(HtH, H.T @ X[n, :])\n        \n        # Fix W and solve for H\n        WtW = W.T @ W + alpha * np.eye(K)\n        for m in range(M):\n            H[:, m] = np.linalg.solve(WtW, W.T @ X[:, m])\n        \n        # Compute the current loss\n        current_loss = compute_loss(X, W, H, alpha)\n        \n        # Check convergence\n        if current_loss < tol:\n            break\n    \n    # Reconstruct the matrix\n    X_hat = W @ H\n    return X_hat.round(4).tolist()\n\n# Example usage:\n# X = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n# K = 2\n# print(als_factorization(X, K))\n```\nThis script implements the Regularized Alternating Least Squares (ALS) algorithm for matrix factorization. The function `als_factorization` takes a matrix `X`, target rank `K`, regularization weight `alpha`, maximum number of iterations `max_iter`, and tolerance `tol` as inputs. It initializes the factor matrices `W` and `H` with a fixed random seed, iteratively optimizes them using ALS, and returns the reconstructed matrix `X_hat` rounded to four decimal places."}
{"task_id": 109, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n\n    def kmeans_plus_plus_init(X, K):\n        centroids = [X[np.random.choice(X.shape[0])]]\n        for _ in range(1, K):\n            distances = np.min([np.linalg.norm(X - c, axis=1) for c in centroids], axis=0)\n            probabilities = distances / distances.sum()\n            next_centroid = X[np.random.choice(X.shape[0], p=probabilities)]\n            centroids.append(next_centroid)\n        return np.array(centroids)\n\n    def assign_clusters(X, centroids):\n        return np.argmin(np.linalg.norm(X[:, np.newaxis] - centroids, axis=2), axis=1)\n\n    def update_centroids(X, labels, centroids):\n        new_centroids = np.array([X[labels == k].mean(axis=0) if (labels == k).any() else centroids[k] for k in range(K)])\n        return new_centroids\n\n    centroids = kmeans_plus_plus_init(X, K)\n    for _ in range(max_iter):\n        new_labels = assign_clusters(X, centroids)\n        new_centroids = update_centroids(X, new_labels, centroids)\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n\n    return sorted(np.round(centroids, 4).tolist(), key=lambda x: (x[0], x[1:]))\n\n# Example usage:\n# X = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# K = 3\n# print(kmeans(X, K, random_state=42))\n```\n\nThis script implements the K-Means clustering algorithm with K-Means++ initialization. It ensures reproducibility by setting seeds for both Python's `random` module and NumPy's random number generator. The function returns the final centroids rounded to four decimal places and sorted by their first coordinate."}
{"task_id": 111, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes every character of the input string using a provided vocabulary.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text]\n    # Truncate if longer than time_steps\n    encoded = encoded[:time_steps]\n    # Pad with 0 if shorter than time_steps\n    encoded += [0] * (time_steps - len(encoded))\n    return encoded\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list/array of integer ids back to text.\"\"\"\n    return ''.join(inverse_vocab.get(idx, '') for idx in indices if idx != 0)\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes the raw text, runs the model, and decodes the prediction.\"\"\"\n    # Encode the input text\n    encoded_input = string_to_int(text, TIME_STEPS, input_vocabulary)\n    # Convert to numpy array and reshape for model input (batch size 1)\n    encoded_input = np.array(encoded_input).reshape(1, -1)\n    # Get model prediction\n    prediction = model.predict(encoded_input)\n    # Apply argmax to get the predicted ids\n    predicted_ids = np.argmax(prediction, axis=-1)[0]\n    # Decode the predicted ids to string\n    decoded_output = int_to_string(predicted_ids, inv_output_vocabulary)\n    return decoded_output\n```\n\nThis script provides the required functions to encode a string to a fixed-length list of integers, run a model prediction, and decode the predicted integer ids back to a string. The `string_to_int` function handles padding and truncation, `int_to_string` ignores padding tokens, and `run_example` orchestrates the entire process."}
{"task_id": 113, "completion_id": 0, "completion": "```\npython\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n\n    predictions = []\n    for example in examples:\n        # Call the helper function to get the prediction as a list of characters\n        predicted_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        # Concatenate the list of characters into a single string\n        predicted_string = ''.join(predicted_chars)\n        # Print the input and output\n        print(f\"input:  {example}\")\n        print(f\"output: {predicted_string}\")\n        # Collect the predicted string\n        predictions.append(predicted_string)\n    \n    return predictions\n\n# Assuming run_example is defined elsewhere in the runtime environment\n# def run_example(model, input_vocabulary, inv_output_vocabulary, example):\n#     # This function is expected to return a list of characters\n#     pass\n\n# Example usage:\n# EXAMPLES = [\"example1\", \"example2\", \"example3\"]\n# model = lambda x: x.upper()  # Dummy model for demonstration\n# input_vocabulary = {'a': 0, 'b': 1}  # Example vocabulary, unused\n# inv_output_vocabulary = {0: 'a', 1: 'b'}  # Example inverse vocabulary, unused\n# run_examples(model, input_vocabulary, inv_output_vocabulary)\n```\n\nThis script defines the `run_examples` function as specified, using a helper function `run_example` which is assumed to be available in the runtime environment. The function processes each example, prints the input and output, and collects the predictions in a list, which it returns at the end."}
{"task_id": 115, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    # Ensure y is a column vector\n    y = y.reshape(-1, 1)\n    \n    # Ensure w is a column vector\n    w = w.reshape(-1, 1)\n    \n    # Number of samples\n    m = X.shape[0]\n    \n    # Compute the linear combination\n    z = X @ w\n    \n    # Compute the sigmoid function\n    p = 1 / (1 + np.exp(-z))\n    \n    # Clip probabilities to avoid numerical issues with log\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    \n    # Compute the binary cross-entropy loss\n    loss = -1/m * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    \n    # Compute the gradient\n    gradient = 1/m * X.T @ (p - y)\n    \n    # Return the loss and gradient rounded to 4 decimals\n    return round(loss.item(), 4), gradient.round(4).tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4]])\n# y = np.array([0, 1])\n# w = np.array([0.5, -0.5])\n# loss, grad = logistic_loss_and_gradient(X, y, w)\n# print(\"Loss:\", loss)\n# print(\"Gradient:\", grad)\n```\n\nThis script defines the `logistic_loss_and_gradient` function, which calculates the binary cross-entropy loss and its gradient for logistic regression. The function ensures that the target vector `y` and weight vector `w` are column vectors, computes the sigmoid probabilities, clips them to avoid numerical issues, and then calculates both the loss and the gradient. The results are rounded to four decimal places and returned in the specified format."}
{"task_id": 118, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n\n    m, n = X_train.shape\n    weights = np.ones(m) / m\n    stumps = []\n    alphas = []\n\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = {}\n        best_sign = 1\n\n        for feature_i in range(n):\n            thresholds = np.unique(X_train[:, feature_i])\n            for threshold in thresholds:\n                for sign in [-1, 1]:\n                    predictions = np.ones(m)\n                    predictions[X_train[:, feature_i] * sign < threshold * sign] = -1\n\n                    weighted_error = np.sum(weights[predictions != y_train])\n\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        sign = -sign\n\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump = {'feature': feature_i, 'threshold': threshold}\n                        best_sign = sign\n\n        alpha = 0.5 * np.log((1 - min_error) / min_error)\n        alphas.append(alpha)\n\n        predictions = np.ones(m)\n        predictions[X_train[:, best_stump['feature']] * best_sign < best_stump['threshold'] * best_sign] = -1\n        stumps.append((best_stump, best_sign, alpha))\n\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n\n    def predict_sample(sample):\n        stump_sum = 0\n        for stump, sign, alpha in stumps:\n            feature = stump['feature']\n            threshold = stump['threshold']\n            if sample[feature] * sign < threshold * sign:\n                stump_sum += alpha * (-1)\n            else:\n                stump_sum += alpha * 1\n        return np.sign(stump_sum)\n\n    return [predict_sample(sample) for sample in X_test]\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([1, 1, -1, -1])\n# X_test = np.array([[1, 1], [4, 4]])\n# n_clf = 3\n# print(adaboost_predict(X_train, y_train, X_test, n_clf))  # Output: [1, -1]\n```\n\nThis script implements the AdaBoost algorithm using decision stumps as weak learners. It trains on the provided training data and predicts labels for the test data. The function `adaboost_predict` returns a list of predicted labels for each sample in `X_test`."}
{"task_id": 128, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    # Step 1: Compute the within-class scatter matrix S_W\n    classes = np.unique(y)\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    for c in classes:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        S_W += np.dot((X_c - mean_c).T, (X_c - mean_c))\n    \n    # Step 2: Compute the between-class scatter matrix S_B\n    overall_mean = np.mean(X, axis=0)\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    for c in classes:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        N_c = X_c.shape[0]\n        S_B += N_c * np.dot((mean_c - overall_mean).reshape(-1, 1), (mean_c - overall_mean).reshape(1, -1))\n    \n    # Step 3: Form the matrix A = S_W^{-1} * S_B\n    A = np.linalg.pinv(S_W).dot(S_B)\n    \n    # Step 4: Perform eigen-decomposition of A\n    eigenvalues, eigenvectors = np.linalg.eigh(A)\n    \n    # Sort the eigen-pairs in descending order of the eigen-values\n    sorted_idx = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[sorted_idx]\n    eigenvectors = eigenvectors[:, sorted_idx]\n    \n    # Step 5: Deterministic sign fix\n    for i in range(n_components):\n        v = eigenvectors[:, i]\n        first_nonzero_idx = np.where(v != 0)[0][0]\n        if v[first_nonzero_idx] < 0:\n            eigenvectors[:, i] *= -1\n    \n    # Step 6: Project X on the first `n_components` eigenvectors\n    W = eigenvectors[:, :n_components]\n    X_projected = X.dot(W)\n    \n    # Step 7: Round every element to four decimal places and return as list of lists\n    return X_projected.round(4).tolist()\n\n# Example usage\nX = np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]])\ny = np.array([0,0,0,0,1,1,1,1])\nn_components = 1\nprint(multi_class_lda(X, y, n_components))\n```\n\nThis script implements the multi-class Linear Discriminant Analysis (LDA) as described in the task. It computes the within-class and between-class scatter matrices, solves the generalized eigenvalue problem, and projects the data onto the first `n_components` discriminant directions. The results are rounded to four decimal places and returned as a list of lists."}
{"task_id": 140, "completion_id": 0, "completion": "```\npython\nfrom collections import deque\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if grid[0][0] == 'F' or grid[n-1][n-1] == 'F':\n        return -1\n    if n == 1 and grid[0][0] == '.':\n        return 0\n\n    # Directions for moving up, down, left, right\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    # BFS to calculate fire spread times\n    fire_time = [[math.inf] * n for _ in range(n)]\n    fire_queue = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_time[i][j] = 0\n                fire_queue.append((i, j))\n\n    while fire_queue:\n        x, y = fire_queue.popleft()\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] != '#' and fire_time[nx][ny] == math.inf:\n                fire_time[nx][ny] = fire_time[x][y] + 1\n                fire_queue.append((nx, ny))\n\n    # BFS for the agent to find the shortest path\n    agent_queue = deque([(0, 0, 0)])  # (x, y, time)\n    visited = set((0, 0, 0))\n\n    while agent_queue:\n        x, y, t = agent_queue.popleft()\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] != '#' and (nx, ny, t + 1) not in visited:\n                if nx == n - 1 and ny == n - 1:\n                    return t + 1\n                if t + 1 < fire_time[nx][ny]:\n                    visited.add((nx, ny, t + 1))\n                    agent_queue.append((nx, ny, t + 1))\n\n    return -1\n```\n\nThis script defines the `escape_fire_maze` function, which uses two breadth-first searches (BFS) to solve the problem. The first BFS calculates the time it takes for the fire to reach each cell, and the second BFS finds the shortest path for the agent to reach the goal while avoiding cells that will be on fire at the time the agent arrives. If the agent can reach the goal safely, the function returns the minimum number of moves required; otherwise, it returns -1."}
{"task_id": 141, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\nfrom scipy.spatial.distance import cdist\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n    \n    # Define the distance metric\n    if metric == 'euclidean':\n        distance_metric = 'euclidean'\n    elif metric == 'manhattan':\n        distance_metric = 'cityblock'\n    elif metric == 'cosine':\n        distance_metric = 'cosine'\n    else:\n        # Fall back to Euclidean if the metric is unknown\n        distance_metric = 'euclidean'\n    \n    # Compute the distance between each test sample and every training sample\n    distances = cdist(X_test, X_train, metric=distance_metric)\n    \n    # Find the k training samples with the smallest distance for each test sample\n    k_indices = np.argsort(distances, axis=1)[:, :k]\n    \n    # Predict the class by majority vote among those k neighbours\n    predictions = []\n    for indices in k_indices:\n        k_nearest_labels = y_train[indices]\n        most_common = Counter(k_nearest_labels).most_common()\n        # In case of a tie, return the smallest label value\n        most_common.sort(key=lambda x: (-x[1], x[0]))\n        predictions.append(most_common[0][0])\n    \n    return np.array(predictions)\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [5, 6]])\n# y_train = np.array([0, 0, 1, 1])\n# X_test = np.array([[1, 1], [4, 4]])\n# k = 3\n# print(knn_predict(X_train, y_train, X_test, k, metric='euclidean'))\n```\n\nThis script defines the `knn_predict` function which implements the k-Nearest Neighbors classifier using the specified distance metric. It uses `scipy.spatial.distance.cdist` to compute distances efficiently and handles ties by selecting the smallest label value. The function returns a 1-D NumPy array of predicted labels for the test set."}
{"task_id": 146, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    \n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n    \n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b))\n    \n    def cosine_distance(a, b):\n        epsilon = 1e-12\n        dot_product = np.dot(a, b)\n        norm_a = np.linalg.norm(a)\n        norm_b = np.linalg.norm(b)\n        return 1 - (dot_product / ((norm_a * norm_b) + epsilon))\n    \n    # Choose the distance function based on the metric\n    if metric == 'euclidean':\n        distance_func = euclidean_distance\n    elif metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        raise ValueError(\"Unsupported distance metric. Choose from 'euclidean', 'manhattan', or 'cosine'.\")\n    \n    predictions = []\n    \n    for test_sample in X_test:\n        # Compute distances between the test sample and all training samples\n        distances = [distance_func(test_sample, train_sample) for train_sample in X]\n        \n        # Get the indices of the k nearest neighbors\n        k_indices = np.argsort(distances)[:k]\n        \n        # Get the labels of the k nearest neighbors\n        k_nearest_labels = y[k_indices]\n        \n        # Perform majority vote\n        unique_labels, counts = np.unique(k_nearest_labels, return_counts=True)\n        most_common_label = unique_labels[np.argmax(counts)]\n        \n        # In case of a tie, return the smallest label\n        if len(unique_labels) > 1 and np.max(counts) == 1:\n            most_common_label = np.min(unique_labels)\n        \n        predictions.append(most_common_label)\n    \n    return predictions\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [5, 6]])\n# y_train = np.array([0, 0, 1, 1])\n# X_test = np.array([[1, 1], [4, 5]])\n# predictions = knn_predict(X_train, y_train, X_test, k=3, metric='euclidean')\n# print(predictions)  # Output: [0, 1]\n```\n\nThis script defines the `knn_predict` function, which implements the k-Nearest Neighbors algorithm from scratch using NumPy for numerical operations. The function supports three distance metrics: Euclidean, Manhattan, and Cosine. It computes the distances between each test sample and all training samples, selects the k nearest neighbors, and uses majority voting to predict the label for each test sample. In case of a tie in the majority vote, it returns the smallest label."}
{"task_id": 155, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a NumPy array if it isn't already\n    state = np.array(state)\n    \n    # First layer: Linear transformation and ReLU activation\n    z1 = np.dot(state, weights['W1']) + weights['b1']\n    a1 = np.maximum(0, z1)  # ReLU activation\n    \n    # Second layer: Linear transformation and ReLU activation\n    z2 = np.dot(a1, weights['W2']) + weights['b2']\n    a2 = np.maximum(0, z2)  # ReLU activation\n    \n    # Output layer: Linear transformation and tanh activation\n    z3 = np.dot(a2, weights['W3']) + weights['b3']\n    action = np.tanh(z3)\n    \n    # Round the action vector to 4 decimal places and convert to a list\n    return [round(a, 4) for a in action]\n\n# Example usage:\n# state = [0.1, 0.2, 0.3]\n# weights = {\n#     'W1': np.array([[0.5, 0.6], [0.7, 0.8], [0.9, 1.0]]),\n#     'b1': np.array([0.1, 0.2]),\n#     'W2': np.array([[0.3, 0.4], [0.5, 0.6]]),\n#     'b2': np.array([0.3, 0.4]),\n#     'W3': np.array([[0.7, 0.8], [0.9, 1.0]]),\n#     'b3': np.array([0.5, 0.6])\n# }\n# print(actor_forward(state, weights))\n```\n\nThis script defines the `actor_forward` function, which performs the forward pass of a two-hidden-layer actor network using NumPy. The function takes a state vector and a dictionary of weights and biases, applies the specified transformations and activations, and returns the action vector rounded to four decimal places."}
{"task_id": 160, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    m, n = X.shape\n    \n    # Step 1: Add an all-ones column to X if fit_intercept is True\n    if fit_intercept:\n        X = np.hstack((np.ones((m, 1)), X))\n    else:\n        X = np.hstack((np.zeros((m, 1)), X))\n    \n    # Step 2: Initialize all parameters to zero\n    w = np.zeros(X.shape[1])\n    \n    for _ in range(max_iters):\n        # If fit_intercept, recompute the intercept as the mean residual\n        if fit_intercept:\n            residuals = y - np.dot(X, w)\n            w[0] = np.mean(residuals)\n        \n        # Step 3: Coordinate loop over every weight (excluding the intercept)\n        for j in range(1, X.shape[1]):\n            # Temporarily set the current weight to 0\n            w[j] = 0\n            \n            # Compute the partial residual\n            residuals = y - np.dot(X, w)\n            \n            # Compute the soft-thresholding update\n            x_j = X[:, j]\n            rho = np.dot(x_j, residuals)\n            threshold = lambda_param * m\n            w[j] = np.sign(rho) * max(abs(rho) - threshold, 0) / np.dot(x_j, x_j)\n    \n    # Step 4: Return the final intercept and weight vector\n    bias = round(w[0], 4)\n    weights = [round(wi, 4) for wi in w[1:]]\n    \n    return weights, bias\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([3, 7, 11])\n# weights, bias = fit_lasso(X, y, lambda_param=0.1, max_iters=100, fit_intercept=True)\n# print(\"Weights:\", weights)\n# print(\"Bias:\", bias)\n```\n\nThis script defines the `fit_lasso` function, which implements Lasso regression using coordinate descent as described. The function handles the addition of an intercept term if required, initializes parameters, and iteratively updates the weights using the soft-thresholding operator. The results are rounded to four decimal places before being returned."}
{"task_id": 165, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are not already\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    if not isinstance(y, np.ndarray):\n        y = np.array(y)\n    \n    # Check if the lengths of the vectors are the same\n    if x.shape != y.shape:\n        return -1\n    \n    # Calculate the Hamming distance\n    distance = np.mean(x != y)\n    \n    # Return the distance rounded to 4 decimal places\n    return round(distance, 4)\n\n# Example usage:\n# x = [1, 2, 3, 4]\n# y = [1, 0, 3, 4]\n# print(hamming_distance(x, y))  # Output: 0.2500\n```"}
{"task_id": 169, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if N <= 0:\n        raise ValueError(\"N must be a positive integer.\")\n    \n    if N == 1:\n        return [1.0]\n    \n    n = np.arange(N)\n    if window == \"hamming\":\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == \"hann\":\n        w = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == \"blackman_harris\":\n        a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n        w = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n    elif window == \"generalized_cosine\":\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be provided for generalized_cosine window.\")\n        w = np.zeros(N)\n        for k, a in enumerate(coefficients):\n            w += a * np.cos(2 * np.pi * k * n / (N - 1))\n    else:\n        raise ValueError(f\"Unknown window type: {window}\")\n    \n    return [round(coef, 4) for coef in w.tolist()]\n\n# Example usage:\n# print(generate_window(\"hamming\", 5))\n# print(generate_window(\"hann\", 5))\n# print(generate_window(\"blackman_harris\", 5))\n# print(generate_window(\"generalized_cosine\", 5, [0.5, 0.5]))\n```\nThis script defines the `generate_window` function, which generates window coefficients for various types of symmetric windows as specified in the task description. The function handles different window types and ensures that the coefficients are rounded to four decimal places. It also includes error handling for invalid inputs."}
{"task_id": 171, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    \n    # Convert input lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train, dtype=float)\n    y_train = np.array(y_train, dtype=int)\n    X_test = np.array(X_test, dtype=float)\n    \n    # Check for the special case where all labels are identical\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) == 1:\n        return [unique_labels[0]] * len(X_test)\n    \n    # Map labels to {0, 1} for internal use\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train_mapped = np.array([label_map[label] for label in y_train])\n    \n    # Add intercept term (bias) to the data\n    X_train_with_intercept = np.hstack([np.ones((X_train.shape[0], 1)), X_train])\n    X_test_with_intercept = np.hstack([np.ones((X_test.shape[0], 1)), X_test])\n    \n    # Initialize weights\n    weights = np.zeros(X_train_with_intercept.shape[1])\n    \n    # Mini-batch Gradient Descent\n    for epoch in range(epochs):\n        # Shuffle the data\n        indices = np.arange(X_train_with_intercept.shape[0])\n        np.random.shuffle(indices)\n        X_train_shuffled = X_train_with_intercept[indices]\n        y_train_shuffled = y_train_mapped[indices]\n        \n        # Process each mini-batch\n        for start in range(0, X_train_with_intercept.shape[0], batch_size):\n            end = start + batch_size\n            X_batch = X_train_shuffled[start:end]\n            y_batch = y_train_shuffled[start:end]\n            \n            # Calculate predictions and errors\n            predictions = 1 / (1 + np.exp(-np.dot(X_batch, weights)))\n            errors = predictions - y_batch\n            \n            # Update weights\n            gradient = np.dot(X_batch.T, errors) / len(X_batch)\n            weights -= learning_rate * gradient\n    \n    # Predict probabilities for the test set\n    test_probabilities = 1 / (1 + np.exp(-np.dot(X_test_with_intercept, weights)))\n    \n    # Convert probabilities to original labels using a decision threshold of 0.5\n    test_predictions_mapped = (test_probabilities >= 0.5).astype(int)\n    reverse_label_map = {v: k for k, v in label_map.items()}\n    test_predictions = [reverse_label_map[pred] for pred in test_predictions_mapped]\n    \n    return test_predictions\n\n# Example usage:\n# X_train = [[1.0, 2.0], [2.0, 3.0], [3.0, 4.0], [4.0, 5.0]]\n# y_train = [0, 0, 1, 1]\n# X_test = [[2.5, 3.5], [3.5, 4.5]]\n# predictions = logistic_regression_train_predict(X_train, y_train, X_test)\n# print(predictions)  # Output: [0, 1]\n```\n\nThis script implements a binary Logistic Regression classifier using mini-batch Gradient Descent. It handles the special case where all training labels are identical, maps labels internally to `{0, 1}`, adds an intercept term, and returns predictions for the test set using a decision threshold of 0.5."}
{"task_id": 176, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    \"\"\"Fill in here. The final implementation must follow the specification given in the task\n    description and return a list with the predicted class labels for *X_test*.\"\"\"\n    \n    def predict_stump(X, feature_index, threshold, polarity):\n        predictions = np.ones(len(X))\n        if polarity == 1:\n            predictions[X[:, feature_index] >= threshold] = -1\n        else:\n            predictions[X[:, feature_index] < threshold] = -1\n        return predictions\n\n    def find_best_stump(X, y, weights):\n        m, n = X.shape\n        min_error = float('inf')\n        best_stump = {}\n        best_predictions = np.zeros(m)\n        \n        for feature_index in range(n):\n            thresholds = np.unique(X[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = predict_stump(X, feature_index, threshold, polarity)\n                    weighted_error = np.sum(weights[y != predictions])\n                    \n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': polarity}\n                        best_predictions = predictions.copy()\n        \n        return best_stump, best_predictions, min_error\n\n    X_train = np.array(X_train)\n    y_train = np.array(y_train) * 2 - 1  # Convert labels to -1 and 1\n    n_samples = X_train.shape[0]\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n\n    for _ in range(n_estimators):\n        best_stump, best_predictions, error = find_best_stump(X_train, y_train, weights)\n        \n        if error == 0:\n            break\n        \n        alpha = 0.5 * np.log((1 - error) / (error + 1e-10))\n        weights *= np.exp(-alpha * y_train * best_predictions)\n        weights /= np.sum(weights)\n        \n        stumps.append((alpha, best_stump))\n\n    def predict(X_test, stumps):\n        X_test = np.array(X_test)\n        stump_predictions = np.zeros(len(X_test))\n        \n        for alpha, stump in stumps:\n            feature_index, threshold, polarity = stump['feature_index'], stump['threshold'], stump['polarity']\n            stump_predictions += alpha * predict_stump(X_test, feature_index, threshold, polarity)\n        \n        return [1 if pred >= 0 else 0 for pred in stump_predictions]\n\n    return predict(X_test, stumps)\n```\n\nThis script implements the AdaBoost algorithm using decision stumps as weak learners. It includes functions to find the best stump in each iteration, update the weights, and make predictions on the test set. The final predictions are returned as a list of integers (0 or 1)."}
{"task_id": 178, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n\n    rng = np.random.default_rng(seed)\n\n    # Initialize particles\n    positions = rng.uniform(low=-1, high=1, size=(num_particles, n_dims))\n    velocities = rng.uniform(low=-0.1, high=0.1, size=(num_particles, n_dims))\n    personal_best_positions = positions.copy()\n    personal_best_values = np.array([sphere_function(p) for p in positions])\n\n    # Initialize global best\n    global_best_index = np.argmin(personal_best_values)\n    global_best_position = personal_best_positions[global_best_index]\n    global_best_value = personal_best_values[global_best_index]\n\n    # PSO parameters\n    w = 0.5  # inertia weight\n    c1 = 1.5  # cognitive weight\n    c2 = 1.5  # social weight\n\n    for _ in range(num_iterations):\n        for i in range(num_particles):\n            # Update velocity\n            r1, r2 = rng.uniform(size=2)\n            velocities[i] = (w * velocities[i] +\n                             c1 * r1 * (personal_best_positions[i] - positions[i]) +\n                             c2 * r2 * (global_best_position - positions[i]))\n\n            # Update position\n            positions[i] = np.clip(positions[i] + velocities[i], -1, 1)\n\n            # Evaluate new position\n            new_value = sphere_function(positions[i])\n\n            # Update personal best\n            if new_value < personal_best_values[i]:\n                personal_best_positions[i] = positions[i]\n                personal_best_values[i] = new_value\n\n                # Update global best\n                if new_value < global_best_value:\n                    global_best_position = positions[i]\n                    global_best_value = new_value\n\n    return round(global_best_value, 4)\n\ndef sphere_function(x):\n    return np.sum(x**2)\n```\n\nThis script defines a function `particle_swarm_optimisation` that uses Particle Swarm Optimization to minimize the Sphere function in a given dimensional space. The function checks for valid input and returns the best value found, rounded to four decimal places. If any input is invalid, it returns -1. The Sphere function is defined separately for clarity."}
{"task_id": 180, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    \n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((np.array(point1) - np.array(point2)) ** 2))\n    \n    if k == 0 or k > len(X_train):\n        k = len(X_train)\n    \n    predictions = []\n    \n    for test_point in X_test:\n        distances = [(euclidean_distance(test_point, train_point), label) for train_point, label in zip(X_train, y_train)]\n        distances.sort(key=lambda x: x[0])\n        \n        k_nearest_labels = [label for _, label in distances[:k]]\n        \n        if task == \"classification\":\n            most_common = Counter(k_nearest_labels).most_common()\n            max_count = most_common[0][1]\n            most_frequent_labels = [label for label, count in most_common if count == max_count]\n            predictions.append(min(most_frequent_labels))\n        elif task == \"regression\":\n            average_value = np.mean(k_nearest_labels)\n            predictions.append(round(average_value, 4))\n    \n    return predictions\n```\n\nThis script defines a `knn_predict` function that performs k-Nearest Neighbors classification or regression based on the input parameters. It calculates Euclidean distances between test and training samples, selects the k-nearest neighbors, and then either votes for the most common class label (for classification) or averages the target values (for regression), rounding to four decimal places as required."}
{"task_id": 184, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef decision_tree_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    max_depth: int | None = None,\n) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n    \n    def gini_impurity(y):\n        m = len(y)\n        if m == 0:\n            return 0.0\n        counts = np.bincount(y)\n        probabilities = counts / m\n        return 1.0 - np.sum(probabilities ** 2)\n    \n    def split_data(X, y, feature, threshold):\n        left_mask = X[:, feature] <= threshold\n        X_left, y_left = X[left_mask], y[left_mask]\n        X_right, y_right = X[~left_mask], y[~left_mask]\n        return X_left, y_left, X_right, y_right\n    \n    def best_split(X, y):\n        m, n = X.shape\n        if m == 0:\n            return None, None, None, None, None\n        best_gini = gini_impurity(y)\n        best_feature = None\n        best_threshold = None\n        best_left = None\n        best_right = None\n        \n        for feature in range(n):\n            sorted_indices = np.argsort(X[:, feature])\n            sorted_X = X[sorted_indices]\n            sorted_y = y[sorted_indices]\n            for i in range(1, m):\n                if sorted_X[i, feature] != sorted_X[i - 1, feature]:\n                    threshold = (sorted_X[i, feature] + sorted_X[i - 1, feature]) / 2.0\n                    X_left, y_left, X_right, y_right = split_data(X, y, feature, threshold)\n                    gini_left = gini_impurity(y_left)\n                    gini_right = gini_impurity(y_right)\n                    weighted_gini = (len(y_left) / m) * gini_left + (len(y_right) / m) * gini_right\n                    if weighted_gini < best_gini:\n                        best_gini = weighted_gini\n                        best_feature = feature\n                        best_threshold = threshold\n                        best_left = (X_left, y_left)\n                        best_right = (X_right, y_right)\n        \n        return best_feature, best_threshold, best_left, best_right, best_gini\n    \n    def build_tree(X, y, depth=0):\n        if max_depth is not None and depth >= max_depth:\n            return np.bincount(y).argmax()\n        \n        if len(np.unique(y)) == 1:\n            return y[0]\n        \n        feature, threshold, left, right, gini = best_split(X, y)\n        \n        if left is None or right is None:\n            return np.bincount(y).argmax()\n        \n        X_left, y_left = left\n        X_right, y_right = right\n        \n        if len(y_left) == 0 or len(y_right) == 0:\n            return np.bincount(y).argmax()\n        \n        left_subtree = build_tree(X_left, y_left, depth + 1)\n        right_subtree = build_tree(X_right, y_right, depth + 1)\n        \n        return (feature, threshold, left_subtree, right_subtree)\n    \n    def predict_tree(node, x):\n        if isinstance(node, int):\n            return node\n        feature, threshold, left_subtree, right_subtree = node\n        if x[feature] <= threshold:\n            return predict_tree(left_subtree, x)\n        else:\n            return predict_tree(right_subtree, x)\n    \n    tree = build_tree(X_train, y_train)\n    predictions = [predict_tree(tree, x) for x in X_test]\n    return predictions\n```\n\nThis script implements a binary decision tree classifier using the CART algorithm from scratch. It calculates the Gini impurity to determine the best split at each node and recursively builds the tree. The predictions for the test set are made by traversing the tree based on the feature values of each test sample."}
{"task_id": 190, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    \n    def gini(y):\n        m = len(y)\n        if m == 0:\n            return 0.0\n        counts = np.bincount(y)\n        p = counts / m\n        return 1.0 - np.sum(p ** 2)\n    \n    n_samples, n_features = X.shape\n    gini_whole = gini(y)\n    best_gini = float('inf')\n    best_feature_index = -1\n    best_threshold_value = None\n    \n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n        if len(unique_values) < 2:\n            continue\n        \n        for threshold in unique_values:\n            left_mask = feature_values <= threshold\n            right_mask = feature_values > threshold\n            \n            if np.any(left_mask) and np.any(right_mask):\n                y_left = y[left_mask]\n                y_right = y[right_mask]\n                \n                n_left = len(y_left)\n                n_right = len(y_right)\n                n_total = n_left + n_right\n                \n                gini_left = gini(y_left)\n                gini_right = gini(y_right)\n                \n                gini_split = (n_left / n_total) * gini_left + (n_right / n_total) * gini_right\n                \n                if gini_split < best_gini:\n                    best_gini = gini_split\n                    best_feature_index = feature_index\n                    best_threshold_value = threshold\n                elif np.isclose(gini_split, best_gini, atol=1e-12):\n                    if feature_index < best_feature_index or (feature_index == best_feature_index and threshold < best_threshold_value):\n                        best_gini = gini_split\n                        best_feature_index = feature_index\n                        best_threshold_value = threshold\n    \n    if best_feature_index == -1:\n        return (-1, None, round(gini_whole, 4))\n    \n    return (best_feature_index, best_threshold_value, round(best_gini, 4))\n```\n\nThis script defines the `best_gini_split` function, which calculates the best binary split of a dataset based on the Gini impurity criterion. It handles tie-breaking rules and returns the appropriate tuple with the best feature index, threshold, and Gini impurity rounded to four decimal places. If no valid split is found, it returns the Gini impurity of the whole dataset."}
{"task_id": 191, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    \n    def validate_vectors(x, y):\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except (TypeError, ValueError):\n            return False\n        \n        if x.ndim != 1 or y.ndim != 1 or len(x) == 0 or len(y) == 0 or len(x) != len(y):\n            return False\n        \n        return x, y\n\n    def euclidean(x, y):\n        return np.sqrt(np.sum((x - y) ** 2))\n    \n    def manhattan(x, y):\n        return np.sum(np.abs(x - y))\n    \n    def chebyshev(x, y):\n        return np.max(np.abs(x - y))\n    \n    def cosine(x, y):\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        return 1 - (np.dot(x, y) / (norm_x * norm_y))\n    \n    metrics = {\n        'euclidean': euclidean,\n        'manhattan': manhattan,\n        'chebyshev': chebyshev,\n        'cosine': cosine\n    }\n    \n    if name not in metrics:\n        return lambda x, y: -1\n    \n    def d(x, y):\n        validated = validate_vectors(x, y)\n        if validated is False:\n            return -1\n        x, y = validated\n        result = metrics[name](x, y)\n        if result == -1:\n            return -1\n        return round(result, 4)\n    \n    return d\n\n# Example usage:\n# print(metric('euclidean')([1, 2, 3], [4, 5, 6]))  # \u279e 5.1962\n# print(metric('cosine')([1, 2, 3], [4, 5, 6]))     # \u279e 0.0957\n# print(metric('unknown')([1, 2, 3], [4, 5, 6]))   # \u279e -1\n# print(metric('cosine')([0, 0, 0], [4, 5, 6]))     # \u279e -1\n```\n\nThis script defines a `metric` function that returns a distance function based on the specified name. The distance function includes validation to ensure the inputs are valid numeric vectors and handles the specified distance metrics. If the input is invalid or the metric is unsupported, it returns -1."}
{"task_id": 197, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n\n    if md_action:\n        # Multi-dimensional action space\n        action_dim = len(env.action_space.spaces)\n        for space in env.action_space.spaces:\n            if hasattr(space, 'n'):\n                n_actions_per_dim.append(space.n)\n            elif hasattr(space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n                cont_action = True\n    else:\n        # Single-dimensional action space\n        if hasattr(env.action_space, 'n'):\n            n_actions_per_dim.append(env.action_space.n)\n            action_dim = 1\n        elif hasattr(env.action_space, 'shape'):\n            n_actions_per_dim.append(np.inf)\n            action_dim = len(env.action_space.shape)\n            cont_action = True\n\n    if not cont_action:\n        # Generate all possible discrete actions\n        action_ids = list(product(*(range(n) for n in n_actions_per_dim)))\n\n    return n_actions_per_dim, action_ids, action_dim\n```\n\nThis script defines the `action_stats` function, which analyzes the action space of a given environment and returns the required statistics. It handles both continuous and discrete action spaces, as well as single- and multi-dimensional cases. If any dimension is continuous, it sets the corresponding entries in `n_actions_per_dim` to `numpy.inf` and returns `action_ids` as `None`."}
{"task_id": 198, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # Number of topics\n    T = phi[0].shape[1]\n    \n    # Initialize the beta matrix with zeros\n    beta = np.zeros((V, T))\n    \n    # Accumulate the counts for each word-topic pair\n    for d in range(len(phi)):\n        for n in range(len(corpus[d])):\n            word_index = corpus[d][n]\n            beta[word_index] += phi[d][n]\n    \n    # Normalize the columns of beta\n    column_sums = beta.sum(axis=0)\n    for t in range(T):\n        if column_sums[t] > 0:\n            beta[:, t] /= column_sums[t]\n    \n    # Round the entries to 4 decimal places\n    beta_rounded = np.round(beta, 4)\n    \n    # Convert the numpy array to a list of lists\n    beta_list = beta_rounded.tolist()\n    \n    return beta_list\n```\n\nThis script defines the `update_beta` function which computes the updated word-topic distribution matrix $\\beta$ for Latent Dirichlet Allocation. The function takes the variational parameter $\\phi$, the corpus, and the vocabulary size $V$ as inputs, and returns the updated $\\beta$ matrix as a list of lists, with each column normalized to sum to one and each entry rounded to four decimal places."}
{"task_id": 202, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    n = X.shape[0]\n    \n    # Step 1: Initialize medoids as the first k samples\n    medoids = list(range(k))\n    \n    def compute_cost():\n        cost = 0\n        for i in range(n):\n            cost += np.min([np.linalg.norm(X[i] - X[medoid]) for medoid in medoids])\n        return cost\n    \n    def assign_labels():\n        return [np.argmin([np.linalg.norm(X[i] - X[medoid]) for medoid in medoids]) for i in range(n)]\n    \n    # Compute initial cost and labels\n    current_cost = compute_cost()\n    labels = assign_labels()\n    \n    # Step 2: Iteratively improve the set of medoids\n    while True:\n        best_swap = None\n        best_cost_reduction = 0\n        \n        for medoid_index in range(k):\n            for non_medoid_index in range(k, n):\n                if non_medoid_index not in medoids:\n                    # Try swapping medoids[medoid_index] with non_medoid_index\n                    medoids[medoid_index], medoids[non_medoid_index - k] = medoids[non_medoid_index - k], medoids[medoid_index]\n                    \n                    new_cost = compute_cost()\n                    cost_reduction = current_cost - new_cost\n                    \n                    if cost_reduction > best_cost_reduction:\n                        best_cost_reduction = cost_reduction\n                        best_swap = (medoid_index, non_medoid_index)\n                    \n                    # Swap back to original configuration\n                    medoids[medoid_index], medoids[non_medoid_index - k] = medoids[non_medoid_index - k], medoids[medoid_index]\n        \n        if best_swap is not None:\n            medoid_index, non_medoid_index = best_swap\n            medoids[medoid_index], medoids[non_medoid_index - k] = medoids[non_medoid_index - k], medoids[medoid_index]\n            current_cost -= best_cost_reduction\n            labels = assign_labels()\n        else:\n            break\n    \n    # Step 3: Assign labels based on the final set of medoids\n    return labels\n\n# Example usage\nX = np.array([[0,0], [1,0], [0,1], [5,5], [6,5], [5,6]])\nk = 2\nprint(pam_clustering(X, k))  # Output: [0, 0, 0, 1, 1, 1]\n```"}
{"task_id": 216, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    if n_iterations < 1:\n        return -1\n\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n\n    if x_train.shape[1] != x_test.shape[1]:\n        return -1\n\n    # Polynomial feature expansion\n    def polynomial_features(x, degree):\n        return np.concatenate([np.power(x, i) for i in range(1, degree + 1)], axis=1)\n\n    x_train_poly = polynomial_features(x_train, degree)\n    x_test_poly = polynomial_features(x_test, degree)\n\n    # Standardize features\n    mean = np.mean(x_train_poly, axis=0)\n    std = np.std(x_train_poly, axis=0)\n    std[std == 0] = 1  # Avoid division by zero\n\n    x_train_poly = (x_train_poly - mean) / std\n    x_test_poly = (x_test_poly - mean) / std\n\n    # Add bias term\n    x_train_poly = np.hstack([np.ones((x_train_poly.shape[0], 1)), x_train_poly])\n    x_test_poly = np.hstack([np.ones((x_test_poly.shape[0], 1)), x_test_poly])\n\n    # Initialize weights\n    weights = np.zeros(x_train_poly.shape[1])\n\n    # Gradient descent\n    for _ in range(n_iterations):\n        predictions = np.dot(x_train_poly, weights)\n        errors = predictions - y_train\n        gradient = (2 / x_train_poly.shape[0]) * np.dot(x_train_poly.T, errors)\n\n        # Regularization term\n        l1_penalty = l1_ratio * np.sign(weights[1:])  # No regularization on bias term\n        l2_penalty = (1 - l1_ratio) * 2 * weights[1:]  # No regularization on bias term\n        regularization = np.concatenate(([0], l1_penalty + l2_penalty))\n\n        weights -= learning_rate * (gradient + reg_factor * regularization)\n\n    # Predict on test set\n    predictions_test = np.dot(x_test_poly, weights)\n    return np.round(predictions_test, 4).tolist()\n```\n\nThis script defines the `elastic_net_regression` function, which performs polynomial feature expansion, standardizes the features, and applies batch gradient descent to learn the weights using the Elastic Net regularization. It returns predictions for the test set rounded to four decimal places. If the input matrices have incompatible shapes or if `n_iterations` is less than 1, it returns `-1`."}
{"task_id": 217, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to numpy arrays for vectorized computation\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Compute the sigmoid function\n    sigmoid = 1 / (1 + np.exp(-predicted))\n    \n    # Compute the gradient\n    gradient = actual * np.exp(-actual * predicted) / (1 + np.exp(-actual * predicted))\n    \n    # Compute the Hessian\n    hessian = sigmoid * (1 - sigmoid)\n    \n    # Round the results to 6 decimal places\n    gradient_rounded = np.round(gradient, 6)\n    hessian_rounded = np.round(hessian, 6)\n    sigmoid_rounded = np.round(sigmoid, 6)\n    \n    # Convert the results back to Python lists\n    gradient_list = gradient_rounded.tolist()\n    hessian_list = hessian_rounded.tolist()\n    probability_list = sigmoid_rounded.tolist()\n    \n    return (gradient_list, hessian_list, probability_list)\n\n# Example usage:\n# actual = [1, -1, 1]\n# predicted = [0.5, -0.2, 2.0]\n# gradient, hessian, probability = logistic_components(actual, predicted)\n# print(\"Gradient:\", gradient)\n# print(\"Hessian:\", hessian)\n# print(\"Probability:\", probability)\n```\n\nThis script defines the `logistic_components` function, which computes the gradient, Hessian, and probability for logistic loss given the actual labels and predicted scores. The function handles inputs as lists, tuples, or NumPy arrays, performs vectorized computations using NumPy, rounds the results to six decimal places, and returns them as Python lists."}
{"task_id": 218, "completion_id": 0, "completion": "```\npython\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    \n    def hand_value(hand: list[int]) -> int:\n        \"\"\"Calculate the value of a hand, considering the usable ace.\"\"\"\n        value = sum(hand)\n        aces = hand.count(1)\n        while value > 21 and aces > 0:\n            value -= 10\n            aces -= 1\n        return value\n    \n    def is_natural_blackjack(hand: list[int]) -> bool:\n        \"\"\"Check if a hand is a natural blackjack.\"\"\"\n        return len(hand) == 2 and 1 in hand and 10 in hand\n    \n    player_value = hand_value(player)\n    dealer_value = hand_value(dealer)\n    \n    # Player busts\n    if player_value > 21:\n        return -1.0\n    \n    # Dealer busts and player does not\n    if dealer_value > 21:\n        return 1.0\n    \n    # Player has natural blackjack\n    if is_natural_blackjack(player):\n        return 1.5\n    \n    # Compare scores\n    if player_value > dealer_value:\n        return 1.0\n    elif player_value < dealer_value:\n        return -1.0\n    else:\n        return 0.0\n```\n\nThis script defines the `blackjack_outcome` function, which evaluates the outcome of a finished round of Blackjack according to the specified rules. It includes helper functions to calculate the hand value and check for a natural blackjack. The function returns the player's reward as a float, which can be -1, 0, 1, or 1.5."}
{"task_id": 221, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"TODO: implement helper that returns element-wise squared log errors.\"\"\"\n    try:\n        actual = np.array(actual)\n        predicted = np.array(predicted)\n        if np.any(actual < 0) or np.any(predicted < 0):\n            return -1\n        if actual.shape != predicted.shape:\n            return -1\n        return (np.log1p(actual) - np.log1p(predicted)) ** 2\n    except Exception as e:\n        return -1\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    # TODO: implement this function\n    squared_errors = squared_log_error(actual, predicted)\n    if squared_errors == -1:\n        return -1\n    return round(np.mean(squared_errors), 4)\n\n# Example usage:\nactual = [3, -0.5, 2, 7]\npredicted = [2.5, 0.3, 2, 8]\nprint(mean_squared_log_error(actual, predicted))  # Should return -1 due to negative values\n\nactual = [3, 0.5, 2, 7]\npredicted = [2.5, 0.3, 2, 8]\nprint(mean_squared_log_error(actual, predicted))  # Should return a valid MSLE value\n```\n\nThis script includes the required `squared_log_error` and `mean_squared_log_error` functions. The `squared_log_error` function performs input validation and computes the element-wise squared logarithmic errors. The `mean_squared_log_error` function computes the mean of these squared errors and rounds the result to four decimal places. If any input validation fails, both functions return `-1`."}
{"task_id": 222, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    # Convert input to a numpy array for vectorized operations\n    z = np.array(z, dtype=float)\n    \n    # Numerically stable sigmoid computation\n    sigmoid_values = np.where(z >= 0, \n                              1 / (1 + np.exp(-z)), \n                              np.exp(z) / (1 + np.exp(z)))\n    \n    # Round the results to 4 decimal places\n    sigmoid_values = np.round(sigmoid_values, 4)\n    \n    # Convert back to the appropriate return type\n    if isinstance(z, np.ndarray):\n        if z.ndim == 0:  # Scalar input\n            return float(sigmoid_values)\n        else:\n            return sigmoid_values.tolist()\n    else:\n        return float(sigmoid_values)\n\n# Example usage:\n# print(sigmoid(1))  # Scalar input\n# print(sigmoid([1, -1, 0]))  # List input\n# print(sigmoid(np.array([[1, -1], [0, 1000]])))  # NumPy array input\n```\n\nThis script defines the `sigmoid` function that meets the specified requirements. It handles scalar, list, and NumPy array inputs, computes the sigmoid in a numerically stable way, and rounds the results to four decimal places. The function returns a float for scalar inputs and a list for array-like inputs."}
{"task_id": 224, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    def apply_leaky_relu(x):\n        if isinstance(x, (list, np.ndarray)):\n            return [apply_leaky_relu(item) for item in x]\n        else:\n            return x if x >= 0 else a * x\n\n    # Convert input to numpy array if it's not already\n    if not isinstance(z, np.ndarray):\n        z = np.array(z)\n    \n    # Apply the Leaky ReLU function\n    result = apply_leaky_relu(z)\n    \n    # Convert the result to a plain Python list\n    return result if isinstance(result, list) else result.tolist()\n\n# Example usage:\n# print(leaky_relu([-1, 0, 1, -2, 2]))  # Output: [-0.01, 0, 1, -0.02, 2]\n# print(leaky_relu([[-1, 0], [1, -2]], a=0.02))  # Output: [[-0.02, 0], [1, -0.04]]\n```\n\nThis script defines the `leaky_relu` function, which applies the Leaky ReLU activation to each element of the input `z`, which can be a scalar, a (nested) list, or a `numpy.ndarray`. The function returns the result as a plain Python list with the same nested structure as the input."}
{"task_id": 226, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    \n    def decision_stump_predict(X, feature_index, threshold, polarity):\n        return polarity * ((X[:, feature_index] < threshold) * 2 - 1)\n    \n    n_samples, n_features = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    \n    classifiers = []\n    alphas = []\n\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_clf = {}\n        \n        for feature_index in range(n_features):\n            thresholds = np.unique(X_train[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = decision_stump_predict(X_train, feature_index, threshold, polarity)\n                    weighted_error = sample_weights[predictions != y_train].sum()\n                    \n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_clf = {'feature_index': feature_index, 'threshold': threshold, 'polarity': polarity}\n        \n        epsilon = 1e-10\n        alpha = 0.5 * math.log((1 - min_error) / (min_error + epsilon))\n        alphas.append(alpha)\n        classifiers.append(best_clf)\n        \n        predictions = decision_stump_predict(X_train, **best_clf)\n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        sample_weights /= sample_weights.sum()\n    \n    def ensemble_predict(X):\n        ensemble_predictions = np.zeros(X.shape[0])\n        for alpha, clf in zip(alphas, classifiers):\n            predictions = decision_stump_predict(X, **clf)\n            ensemble_predictions += alpha * predictions\n        return np.sign(ensemble_predictions).astype(int)\n    \n    return ensemble_predict(X_test).tolist()\n```\n\nThis script implements the AdaBoost algorithm using decision stumps as weak learners. It includes functions to train the ensemble on the training data and predict the labels for new data. The predictions are returned as a list of integers, each being either -1 or 1."}
{"task_id": 241, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n\n    # Flatten the shape except for the first two dimensions\n    flat_shape = (shape[0], np.prod(shape[1:]))\n\n    # Step 2: Create a 2-D matrix A filled with i.i.d. samples from the standard normal distribution\n    A = np.random.randn(*flat_shape)\n\n    # Step 3: Compute the singular value decomposition (SVD) of A\n    U, _, Vt = np.linalg.svd(A, full_matrices=False)\n\n    # Step 4: Choose the SVD factor that has the same size as A\n    if U.shape == flat_shape:\n        Q = U\n    else:\n        Q = Vt\n\n    # Step 5: Reshape Q back to the requested tensor shape and multiply it by scale\n    Q_reshaped = Q.reshape(shape)\n    result = Q_reshaped * scale\n\n    # Verify the orthogonality condition\n    flat = result.reshape(shape[0], -1)\n    if shape[0] <= flat.shape[1]:\n        identity_approx = flat @ flat.T\n        expected_identity = scale**2 * np.eye(shape[0])\n    else:\n        identity_approx = flat.T @ flat\n        expected_identity = scale**2 * np.eye(flat.shape[1])\n\n    assert np.allclose(identity_approx, expected_identity, atol=1e-6), \"Orthogonality condition not satisfied\"\n\n    return result.tolist()\n\n# Example usage\nnp.random.seed(0)\nshape = (2, 2)\nscale = 0.5\noutput = orthogonal(shape, scale)\nprint(output)\n```\n\nThis script defines the `orthogonal` function as specified, which initializes a tensor with an orthogonal matrix according to the algorithm described. It also includes a check to ensure the orthogonality condition is satisfied within the specified tolerance. The example usage at the end demonstrates how to use the function with a fixed random seed to produce the expected output."}
{"task_id": 243, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a numpy array for easier manipulation\n    s = np.array(state)\n    \n    # Define weights and biases (all weights = 1.0, all biases = 0.0)\n    W1 = np.ones((3, 4))\n    b1 = np.zeros(4)\n    W2 = np.ones((4, 4))\n    b2 = np.zeros(4)\n    W3 = np.ones((4, 4))\n    b3 = np.zeros(4)\n    Wa = np.ones((4, 3))\n    ba = np.zeros(3)\n    Wc = np.ones((4, 1))\n    bc = np.zeros(1)\n    \n    # Compute z1\n    z1 = np.maximum(0, np.dot(s, W1) + b1)\n    \n    # Compute z2\n    z2 = np.maximum(0, np.dot(z1, W2) + b2)\n    \n    # Compute z3\n    z3 = np.maximum(0, np.dot(z2, W3) + b3)\n    \n    # Compute logits for the actor\n    logits = np.dot(z3, Wa) + ba\n    \n    # Compute action probabilities using softmax\n    exp_logits = np.exp(logits)\n    action_probs = exp_logits / np.sum(exp_logits)\n    \n    # Compute state value\n    state_value = np.dot(z3, Wc) + bc\n    \n    # Return rounded results\n    return [round(prob, 4) for prob in action_probs], round(state_value[0], 4)\n\n# Example usage:\n# state = [0.5, 0.5, 0.5]\n# action_probs, state_value = actor_critic_forward(state)\n# print(\"Action probabilities:\", action_probs)\n# print(\"State value:\", state_value)\n```\n\nThis script defines the `actor_critic_forward` function, which performs the forward pass of the specified Actor-Critic network using basic NumPy operations. The function takes a state vector as input and returns the action probabilities and state value, both rounded to four decimal places."}
{"task_id": 249, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    # Convert lists to numpy arrays for computation\n    W1, b1 = np.array(params['W1']), np.array(params['b1'])\n    W2, b2 = np.array(params['W2']), np.array(params['b2'])\n    W3, b3 = np.array(params['W3']), np.array(params['b3'])\n    Wa, ba = np.array(params['Wa']), np.array(params['ba'])\n    Wc, bc = np.array(params['Wc']), np.array(params['bc'])\n    state = np.array(state)\n\n    # Shared layers\n    hidden1 = np.maximum(0, np.dot(state, W1) + b1)  # ReLU activation\n    hidden2 = np.maximum(0, np.dot(hidden1, W2) + b2) # ReLU activation\n    hidden3 = np.maximum(0, np.dot(hidden2, W3) + b3) # ReLU activation\n\n    # Actor head\n    actor_output = np.dot(hidden3, Wa) + ba\n    probabilities = np.exp(actor_output - np.max(actor_output))  # Numerical stability\n    probabilities /= np.sum(probabilities)\n\n    # Critic head\n    value = np.dot(hidden3, Wc) + bc\n\n    # Round the probabilities and the state value to four decimal places\n    probabilities = [round(p, 4) for p in probabilities]\n    value = round(value[0], 4)  # value is a scalar, so we take the first element\n\n    return probabilities, value\n```\n\nThis script defines the `actor_critic_forward` function, which performs the forward pass through the Actor-Critic network using NumPy. The function takes the current environment state and a dictionary of network parameters, computes the action probabilities and state value, and returns them rounded to four decimal places."}
{"task_id": 253, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)  # Ensure w is a NumPy array for vectorized operations\n    l2_ratio = 1 - l1_ratio\n    \n    if gradient:\n        grad = alpha * (l1_ratio * np.sign(w) + l2_ratio * w)\n        return [round(g, 4) for g in grad]\n    else:\n        l1_penalty = l1_ratio * np.sum(np.abs(w))\n        l2_penalty = l2_ratio * 0.5 * np.sum(w ** 2)\n        penalty = alpha * (l1_penalty + l2_penalty)\n        return round(penalty, 4)\n\n# Example usage:\nw = [1.0, -2.0, 3.0]\nalpha = 0.5\nl1_ratio = 0.8\n\n# Compute penalty\npenalty = elastic_net_regularization(w, alpha, l1_ratio, gradient=False)\nprint(\"Elastic-Net Penalty:\", penalty)\n\n# Compute gradient\ngrad = elastic_net_regularization(w, alpha, l1_ratio, gradient=True)\nprint(\"Elastic-Net Gradient:\", grad)\n```\n\nThis script defines the `elastic_net_regularization` function, which computes either the Elastic-Net penalty or its gradient based on the `gradient` flag. The function handles both list and NumPy array inputs for the weight vector `w`, ensuring the output is rounded to four decimal places as specified."}
{"task_id": 256, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that implements the `grad_check_RNN` function as described in the task:\n\n```python\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    # Handle special cases for parameter names\n    if param_name in [\"X\", \"y\"]:\n        return None\n    if param_name in [\"Ba\", \"Bx\"]:\n        param_name = param_name.lower()\n    \n    # Get the parameter to check\n    param = model.parameters[param_name]\n    grad_shape = param.shape\n    grads = np.zeros_like(param, dtype=np.float64)\n    \n    # Iterate over each element of the parameter\n    for i in range(grad_shape[0]):\n        for j in range(grad_shape[1]):\n            # Create a copy of the parameter\n            param_copy = deepcopy(param)\n            \n            # Perturb the parameter by +epsilon\n            param_copy[i, j] += epsilon\n            model.parameters[param_name] = param_copy\n            \n            # Forward pass and calculate loss\n            model.flush_gradients()\n            predictions_pos = []\n            for t in range(n_t):\n                pred = model.forward(X[:, :, t])\n                predictions_pos.append(pred)\n            loss_pos = loss_func(predictions_pos)\n            \n            # Perturb the parameter by -epsilon\n            param_copy[i, j] -= 2 * epsilon\n            model.parameters[param_name] = param_copy\n            \n            # Forward pass and calculate loss\n            model.flush_gradients()\n            predictions_neg = []\n            for t in range(n_t):\n                pred = model.forward(X[:, :, t])\n                predictions_neg.append(pred)\n            loss_neg = loss_func(predictions_neg)\n            \n            # Approximate the gradient\n            grads[i, j] = (loss_pos - loss_neg) / (2 * epsilon)\n    \n    # Restore the original parameter\n    model.parameters[param_name] = param\n    \n    # Return the transposed gradient\n    return grads.T\n```\n\n### Explanation:\n1. **Special Cases Handling**: The function first checks if the `param_name` is \"X\" or \"y\" and returns `None` if true. It also handles \"Ba\" and \"Bx\" by converting them to lowercase.\n2. **Parameter Copying**: A deep copy of the parameter is made to avoid modifying the original parameter during the gradient check.\n3. **Perturbation and Loss Calculation**:\n   - The parameter is perturbed by `+epsilon` and `-epsilon` at each element.\n   - The model's forward pass is performed for `n_t` time-steps with the perturbed parameter.\n   - The loss is calculated using the provided `loss_func`.\n4. **Gradient Approximation**: The central difference formula is used to approximate the gradient.\n5. **Restoration**: The original parameter is restored after the gradient check.\n6. **Return**: The transposed gradient array is returned.\n\nThis script assumes that the `model` object has the necessary methods (`parameters`, `forward`, and `flush_gradients`) and that the `loss_func` is a callable that computes the loss from a list of predictions."}
{"task_id": 257, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n\n    m, n = X_train.shape\n    weights = np.ones(m) / m\n    stumps = []\n    stump_weights = []\n\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = None\n        best_threshold = None\n        best_polarity = None\n\n        for feature_i in range(n):\n            thresholds, polarities = np.unique(X_train[:, feature_i]), [1, -1]\n            for threshold in thresholds:\n                for polarity in polarities:\n                    predictions = np.ones(m)\n                    predictions[X_train[:, feature_i] * polarity < threshold * polarity] = -1\n                    weighted_error = np.sum(weights[predictions != y_train])\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        polarity = -polarity\n\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump = (feature_i, threshold)\n                        best_threshold = threshold\n                        best_polarity = polarity\n\n        epsilon = min_error + 1e-10  # Avoid division by zero\n        alpha = 0.5 * np.log((1.0 - epsilon) / epsilon)\n        stump_weights.append(alpha)\n\n        predictions = np.ones(m)\n        feature_i, threshold = best_stump\n        predictions[X_train[:, feature_i] * best_polarity < threshold * best_polarity] = -1\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n\n        stumps.append((feature_i, threshold, best_polarity))\n\n    y_pred = np.zeros(X_test.shape[0])\n    for (feature_i, threshold, polarity), alpha in zip(stumps, stump_weights):\n        predictions = np.ones(X_test.shape[0])\n        predictions[X_test[:, feature_i] * polarity < threshold * polarity] = -1\n        y_pred += alpha * predictions\n\n    return [1 if pred >= 0 else -1 for pred in y_pred]\n```\n\nThis script implements the AdaBoost algorithm using decision stumps as weak learners. It trains the model on the provided training data and predicts labels for the test data. The function returns a list of predicted labels, each being either `-1` or `1`."}
{"task_id": 261, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError(\"Shape must have at least two dimensions.\")\n    \n    fan_in = shape[1]\n    fan_out = shape[0]\n    \n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n    \n    s = np.sqrt(2 / (fan_in + fan_out))\n    \n    return np.random.normal(0, s, shape).astype(np.float)\n\n# Example usage:\nif __name__ == \"__main__\":\n    shape = (32, 64, 3, 3)  # Example shape for a convolutional layer\n    weights = glorot_normal(shape)\n    print(\"Sample mean:\", np.mean(weights))\n    print(\"Sample standard deviation:\", np.std(weights))\n    print(\"Theoretical standard deviation:\", np.sqrt(2 / (shape[1] * np.prod(shape[2:]) + shape[0] * np.prod(shape[2:]))))\n```\n\nThis script defines the `glorot_normal` function, which initializes a NumPy array with weights according to the Glorot/Xavier normal initialization method. The function calculates the `fan_in` and `fan_out` based on the provided shape and computes the standard deviation `s`. It then returns a NumPy array of the specified shape with values drawn from a normal distribution with mean 0 and standard deviation `s`. The example usage demonstrates how to call the function and verify the sample mean and standard deviation against the theoretical value."}
{"task_id": 266, "completion_id": 0, "completion": "```\npython\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    # Create a dictionary to map each vertex to its index in V\n    vertex_index = {vertex: idx for idx, vertex in enumerate(V)}\n    \n    # Initialize the adjacency list with empty sets to avoid duplicates\n    adj_list = [[] for _ in V]\n    \n    # Add edges to the adjacency list\n    for u, v in E:\n        if u != v:  # Avoid self-loops\n            if v not in adj_list[vertex_index[u]]:\n                adj_list[vertex_index[u]].append(v)\n            if u not in adj_list[vertex_index[v]]:\n                adj_list[vertex_index[v]].append(u)\n    \n    # Sort the neighbours according to their order in V\n    for i in range(len(adj_list)):\n        adj_list[i].sort(key=lambda x: V.index(x))\n    \n    return adj_list\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    V = [0, 1, 2, 3, 4]\n    E = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 0), (1, 3)]\n    print(build_adj_list(V, E))  # Output: [[1, 4], [0, 2, 3], [1, 3], [1, 2, 4], [0, 3]]\n\n    V = ['a', 'b', 'c', 'd']\n    E = [('a', 'b'), ('b', 'c'), ('c', 'd'), ('d', 'a'), ('a', 'c')]\n    print(build_adj_list(V, E))  # Output: [['b', 'c', 'd'], ['a', 'c'], ['a', 'b', 'd'], ['a', 'c']]\n\n    V = [1, 2, 3]\n    E = [(1, 2), (2, 3), (1, 3)]\n    print(build_adj_list(V, E))  # Output: [[2, 3], [1, 3], [1, 2]]\n\n    V = [1, 2, 3, 4]\n    E = []\n    print(build_adj_list(V, E))  # Output: [[], [], [], []]\n```"}
{"task_id": 267, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_error = float('inf')\n    best_feature_index = 0\n    best_threshold = 0.0\n    best_polarity = 1\n\n    for feature_index in range(n_features):\n        # Get unique feature values and sort them\n        unique_values = np.unique(X[:, feature_index])\n        thresholds = (unique_values[:-1] + unique_values[1:]) / 2.0\n\n        for threshold in thresholds:\n            for polarity in [1, -1]:\n                # Predictions for the current stump\n                predictions = polarity * ((X[:, feature_index] < threshold).astype(int) * 2 - 1)\n                \n                # Calculate the weighted error\n                errors = sample_weights * (predictions != y).astype(int)\n                error = np.sum(errors)\n                \n                # Update the best stump if the current one has a lower error\n                if error < best_error:\n                    best_error = error\n                    best_feature_index = feature_index\n                    best_threshold = threshold\n                    best_polarity = polarity\n\n    return {\n        \"feature_index\": best_feature_index,\n        \"threshold\": round(best_threshold, 4),\n        \"polarity\": best_polarity,\n        \"weighted_error\": round(best_error, 4)\n    }\n```\n\nThis script defines a function `train_decision_stump` that finds the optimal weighted decision stump for a binary classification task. It iterates over each feature, considers all unique feature values as potential thresholds, and evaluates both polarities (1 and -1). The function returns a dictionary with the best feature index, threshold, polarity, and the corresponding weighted error, all rounded to four decimal places."}
{"task_id": 273, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    def entropy(labels):\n        \"\"\"Calculate the Shannon entropy of a list of class labels.\"\"\"\n        if not labels:\n            return 0.0\n        label_counts = Counter(labels)\n        total = len(labels)\n        return -sum((count / total) * math.log2(count / total) for count in label_counts.values())\n\n    # Convert inputs to numpy arrays for easier manipulation\n    feature = np.array(feature)\n    target = np.array(target)\n\n    # Sort feature and target based on feature values\n    sorted_indices = np.argsort(feature)\n    sorted_feature = feature[sorted_indices]\n    sorted_target = target[sorted_indices]\n\n    # Find unique values in the sorted feature\n    unique_sorted_feature = np.unique(sorted_feature)\n\n    # If all feature values are identical, return (None, 0.0)\n    if len(unique_sorted_feature) == 1:\n        return (None, 0.0)\n\n    # Calculate the entropy of the parent node\n    parent_entropy = entropy(sorted_target)\n\n    # Initialize variables to track the best split\n    best_threshold = None\n    max_information_gain = 0.0\n\n    # Evaluate each candidate threshold\n    for i in range(len(sorted_feature) - 1):\n        # Only consider distinct values\n        if sorted_feature[i] != sorted_feature[i + 1]:\n            threshold = (sorted_feature[i] + sorted_feature[i + 1]) / 2.0\n\n            # Split the data based on the current threshold\n            left_indices = sorted_indices[sorted_feature <= threshold]\n            right_indices = sorted_indices[sorted_feature > threshold]\n\n            left_labels = sorted_target[left_indices]\n            right_labels = sorted_target[right_indices]\n\n            # Calculate the information gain for the current threshold\n            left_entropy = entropy(left_labels)\n            right_entropy = entropy(right_labels)\n            n = len(sorted_feature)\n            information_gain = parent_entropy - (len(left_labels) / n) * left_entropy - (len(right_labels) / n) * right_entropy\n\n            # Update the best threshold if the current one provides more information gain\n            if information_gain > max_information_gain:\n                max_information_gain = information_gain\n                best_threshold = threshold\n\n    # If no threshold provides a positive information gain, return (None, 0.0)\n    if max_information_gain <= 0.0:\n        return (None, 0.0)\n\n    return (round(best_threshold, 4), round(max_information_gain, 4))\n```\n\nThis script defines the `best_split` function, which calculates the optimal numerical threshold for splitting a dataset in a decision tree using information gain. The function handles cases where no useful split exists by returning `(None, 0.0)`. The information gain and threshold are rounded to four decimal places as required."}
{"task_id": 286, "completion_id": 0, "completion": "```\npython\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    return [[0.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    return [[1.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    return [[random.uniform(low, high) for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError(\"Invalid initialization function.\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    name = \"ones_init\"\n    shape = (2, 2)\n    init_fn = get_initializer(name)  # returns the function ones_init\n    output = init_fn(shape)          # [[1.0, 1.0], [1.0, 1.0]]\n    print(output)\n```\n\nThis script defines the required initializer functions and the `get_initializer` function. The `get_initializer` function looks up the provided name in the global namespace, checks if it is callable, and returns it if it is. If not, it raises a `ValueError` with the specified message. The example usage at the bottom demonstrates how to use the `get_initializer` function to retrieve and use an initializer."}
{"task_id": 287, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n    \n    # Calculate output dimensions\n    H_out = (H - p_h) // s_h + 1\n    W_out = (W - p_w) // s_w + 1\n    \n    # Initialize pooled output\n    pooled_output = np.zeros((N, C, H_out, W_out))\n    \n    # Forward pass\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_out):\n                for w in range(W_out):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    pooled_output[n, c, h, w] = np.mean(X[n, c, h_start:h_end, w_start:w_end])\n    \n    # Initialize gradient input\n    grad_input = np.zeros_like(X)\n    \n    # Backward pass\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_out):\n                for w in range(W_out):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += accum_grad[n, c, h, w] / (p_h * p_w)\n    \n    # Round and convert to lists\n    pooled_output = np.round(pooled_output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    \n    return pooled_output, grad_input\n```\n\nThis script defines the `average_pool2d` function that performs both the forward and backward passes of a 2-D average-pooling layer. The function takes the input tensor `X`, pooling window shape `pool_shape`, stride `stride`, and accumulated gradient `accum_grad` as inputs, and returns the pooled output and the gradient input as lists of lists, rounded to the nearest 4th decimal place."}
{"task_id": 290, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-8)\n    \n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        return (tree_a.feature == tree_b.feature and\n                np.allclose(tree_a.threshold, tree_b.threshold, atol=1e-8) and\n                compare_trees(tree_a.left, tree_b.left) and\n                compare_trees(tree_a.right, tree_b.right))\n    \n    return False\n```\n\nThis script defines the `Leaf` and `Node` classes and the `compare_trees` function, which recursively checks if two decision trees are equivalent based on the given criteria."}
{"task_id": 292, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                            parent2: list[list[int | float]],\n                            cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    # Convert parent lists to numpy arrays for efficient slicing\n    np_parent1 = np.array(parent1)\n    np_parent2 = np.array(parent2)\n    \n    # Validate that the two parent matrices have the same shape\n    if np_parent1.shape != np_parent2.shape:\n        return -1\n    \n    # Get the number of columns\n    num_columns = np_parent1.shape[1]\n    \n    # Ensure the cutoff is within valid range\n    if cutoff < 0 or cutoff > num_columns:\n        raise ValueError(\"Cutoff must be between 0 and the number of columns (inclusive).\")\n    \n    # Create child1 and child2 by swapping columns from parent1 and parent2\n    child1 = np.concatenate((np_parent1[:, :cutoff], np_parent2[:, cutoff:]), axis=1)\n    child2 = np.concatenate((np_parent2[:, :cutoff], np_parent1[:, cutoff:]), axis=1)\n    \n    # Convert the numpy arrays back to lists\n    child1_list = child1.tolist()\n    child2_list = child2.tolist()\n    \n    return (child1_list, child2_list)\n\n# Example usage:\nparent1 = [\n    [1.0, 2.0, 3.0],\n    [4.0, 5.0, 6.0]\n]\n\nparent2 = [\n    [7.0, 8.0, 9.0],\n    [10.0, 11.0, 12.0]\n]\n\ncutoff = 1\n\nchildren = single_point_crossover(parent1, parent2, cutoff)\nprint(\"Child 1:\", children[0])\nprint(\"Child 2:\", children[1])\n```\n\nThis script defines the `single_point_crossover` function, which performs the specified single-point column crossover on two parent weight matrices. It includes validation to ensure the parent matrices have the same shape and handles the conversion between NumPy arrays and Python lists as required. The example usage demonstrates how to call the function and print the resulting child matrices."}
{"task_id": 294, "completion_id": 0, "completion": "```\npython\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj: Dict[Any, List[Tuple[Any, float]]] = {label: [] for label in G['_V2I']}\n    \n    for edges in G['_G']:\n        for source_label, target_label, weight in edges:\n            adj[source_label].append((target_label, weight))\n            if not G['is_directed']:\n                adj[target_label].append((source_label, weight))\n    \n    # Sort the neighbour lists alphabetically by the neighbour label\n    for label in adj:\n        adj[label].sort(key=lambda x: x[0])\n    \n    return adj\n\n# Example usage:\n# G = {\n#     'is_directed': False,\n#     '_V2I': {'A': 0, 'B': 1, 'C': 2},\n#     '_G': [\n#         [('A', 'B', 1.0), ('A', 'C', 2.0)],\n#         [('B', 'A', 1.0), ('B', 'C', 3.0)],\n#         [('C', 'A', 2.0), ('C', 'B', 3.0)]\n#     ]\n# }\n# print(to_networkx(G))\n```\n\nThis script defines the `to_networkx` function that converts a custom graph representation into an adjacency dictionary. The function handles both directed and undirected graphs, ensuring that edges in undirected graphs are represented in both directions and that neighbor lists are sorted alphabetically by neighbor label."}
{"task_id": 296, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    # Convert the input to a NumPy array if it's not already one\n    x = np.asarray(x)\n    \n    # Check if all elements are either 0 or 1\n    return np.all((x == 0) | (x == 1))\n\n# Example usage:\n# x = np.array([0, 1, 0, 1, 1])\n# print(is_binary(x))  # Output: True\n\n# x = np.array([0, 2, 1, 0])\n# print(is_binary(x))  # Output: False\n\n# x = np.array([True, False, True])\n# print(is_binary(x))  # Output: True\n```"}
{"task_id": 298, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    if N < 1:\n        raise ValueError(\"N must be at least 1\")\n\n    # Tokenize the corpus and query\n    corpus_tokens = []\n    for sentence in corpus:\n        tokens = sentence.split()\n        if N > 1:\n            tokens = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        corpus_tokens.extend(tokens)\n\n    query_tokens = query.split()\n    if N > 1:\n        query_tokens = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n\n    # If the query is too short for the requested N, return -inf\n    if len(query_tokens) < N:\n        return float('-inf')\n\n    # Count N-grams and (N-1)-grams\n    ngram_counts = Counter(tuple(tokens[i:i+N]) for tokens in [corpus_tokens] for i in range(len(tokens) - N + 1))\n    n1gram_counts = Counter(tuple(tokens[i:i+N-1]) for tokens in [corpus_tokens] for i in range(len(tokens) - N + 1))\n\n    # Calculate log-probability\n    log_prob = 0.0\n    for i in range(len(query_tokens) - N + 1):\n        ngram = tuple(query_tokens[i:i+N])\n        n1gram = tuple(query_tokens[i:i+N-1])\n        \n        ngram_count = ngram_counts[ngram]\n        n1gram_count = n1gram_counts[n1gram] if N > 1 else len(corpus_tokens)\n        \n        if n1gram_count == 0:\n            return float('-inf')\n        \n        prob = ngram_count / n1gram_count\n        if prob == 0:\n            return float('-inf')\n        \n        log_prob += math.log(prob)\n\n    return round(log_prob, 4)\n\n# Example usage:\ncorpus = [\"a b a\", \"b a b\"]\nquery = \"a b\"\nN = 1\nprint(ngram_log_prob(corpus, query, N))  # Output: -1.3863\n```"}
{"task_id": 302, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n, d = X.shape\n    \n    # Step 1: Build the weighted adjacency matrix W\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                W[i, j] = 1 / (1 + np.linalg.norm(X[i] - X[j]))\n    \n    # Step 2: Compute the unnormalized graph Laplacian L = D - W\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    \n    # Step 3: Obtain the first k eigenvectors of L\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    \n    # Step 4: Run k-means on the rows of E\n    # Initialize centroids with the first k rows of E\n    centroids = E[:k].copy()\n    assignments = np.zeros(n, dtype=int)\n    \n    for _ in range(100):\n        # Assign clusters\n        for i in range(n):\n            distances = np.linalg.norm(E[i] - centroids, axis=1)\n            assignments[i] = np.argmin(distances)\n        \n        # Update centroids\n        new_centroids = np.zeros((k, k))\n        counts = np.zeros(k, dtype=int)\n        for i in range(n):\n            new_centroids[assignments[i]] += E[i]\n            counts[assignments[i]] += 1\n        \n        # Handle empty clusters by re-initializing centroids\n        for i in range(k):\n            if counts[i] == 0:\n                centroids[i] = E[np.random.choice(n)]\n            else:\n                centroids[i] = new_centroids[i] / counts[i]\n        \n        # Check for convergence\n        if np.all(assignments == np.argmin(np.linalg.norm(E[:, np.newaxis] - centroids, axis=2), axis=1)):\n            break\n    \n    return assignments.tolist()\n```\n\nThis script implements the Spectral Clustering algorithm from scratch as described in the task. It uses NumPy for numerical operations but avoids any other external libraries. The function `spectral_clustering` takes a 2-D NumPy array `X` and an integer `k` as input and returns a list of cluster labels."}
{"task_id": 303, "completion_id": 0, "completion": "```\npython\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_label, prev_mine = params[prev_ix]\n    curr_label, curr_mine = params[ix]\n\n    return (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_mine}\\n\"\n        f\"\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{golds[prev_label]}\\n\"\n        f\"\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_mine}\\n\"\n        f\"\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{golds[curr_label]}{warn_str}\\n\"\n        \"----------------------- END DEBUG -----------------------\"\n    )\n```\n\nThis script defines the `err_fmt` function, which formats the debugging string according to the specified layout. The function takes a list of tuples `params`, a dictionary `golds`, an index `ix`, and an optional warning string `warn_str`. It constructs the output string with the required format and returns it."}
{"task_id": 304, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n    \n    N, M = X.shape\n    \n    # Handle different types of V\n    if V is None:\n        V_inv = np.eye(M)\n    elif isinstance(V, (int, float)):\n        V_inv = np.eye(M) / V\n    elif isinstance(V, (list, tuple)):\n        V_inv = np.diag(1 / np.array(V))\n    else:\n        V_inv = np.linalg.inv(V)\n    \n    # Handle different types of mu\n    if np.isscalar(mu):\n        mu = np.full(M, mu)\n    \n    # Compute posterior parameters\n    XTX = X.T @ X\n    XTy = X.T @ y\n    \n    Sigma_b = np.linalg.inv(V_inv + XTX)\n    mu_b = Sigma_b @ (V_inv @ mu + XTy)\n    \n    return [round(coef, 4) for coef in mu_b]\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([1, 2, 3])\n# print(bayesian_posterior_mean(X, y, fit_intercept=True))\n```\n\nThis script defines the `bayesian_posterior_mean` function, which computes the posterior mean of the regression coefficients in Bayesian linear regression with an unknown noise variance. The function handles different types of prior specifications for `V` and `mu`, and optionally adds an intercept column to the design matrix `X`. The result is rounded to four decimal places."}
{"task_id": 308, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(m):\n        return 700 * (10**(m / 2595) - 1)\n\n    # Convert Hz to Mel\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n\n    # Generate n_filters+2 equally spaced values on the Mel axis\n    mel_points = np.linspace(min_mel, max_mel, n_filters + 2)\n\n    # Convert Mel values back to Hz\n    hz_points = mel_to_hz(mel_points)\n\n    # Create the Mel filterbank\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n\n    for i in range(n_filters):\n        left, center, right = hz_points[i], hz_points[i + 1], hz_points[i + 2]\n\n        for k in range(N // 2 + 1):\n            freq_k = k * fs / N\n\n            if left < freq_k < center:\n                filterbank[i, k] = (freq_k - left) / (center - left)\n            elif center <= freq_k < right:\n                filterbank[i, k] = (right - freq_k) / (right - center)\n\n        if normalize:\n            filterbank[i] *= 2 / (hz_points[i + 2] - hz_points[i])\n\n    # Round to 4 decimal places and convert to Python list\n    filterbank = filterbank.round(4).tolist()\n\n    return filterbank\n```\n\nThis script defines the `mel_filterbank` function according to the specified requirements. It constructs the Mel filterbank matrix and ensures that the output is a plain Python list with each element rounded to four decimal places."}
{"task_id": 312, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    \n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n    \n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    \n    n = np.arange(window_len)\n    window = (a0 - a1 * np.cos(2 * np.pi * n / N) +\n              a2 * np.cos(4 * np.pi * n / N) -\n              a3 * np.cos(6 * np.pi * n / N))\n    \n    if not symmetric:\n        window = window[:-1]\n    \n    return [round(val, 4) for val in window]\n\n# Example usage:\n# print(blackman_harris(10))\n# print(blackman_harris(10, symmetric=True))\n```\n\nThis script defines the `blackman_harris` function that generates either a symmetric or periodic Blackman-Harris window of a specified length. The function handles special cases for window lengths of 0 or 1 and ensures all values are rounded to four decimal places before returning as a list."}
{"task_id": 313, "completion_id": 0, "completion": "```\npython\nimport math\nimport numpy as np\n\ndef digamma(x):\n    \"\"\"Compute the digamma function using recursion and asymptotic expansion.\"\"\"\n    # Shift x to a moderate value using the recursion \u03c8(x) = \u03c8(x+1) - 1/x\n    while x < 6:\n        digamma_value = digamma(x + 1) - 1 / x\n        return digamma_value\n        x += 1\n    \n    # Use the asymptotic expansion for large x\n    digamma_value = math.log(x) - 1 / (2 * x) - 1 / (12 * x**2) + 1 / (120 * x**4) - 1 / (252 * x**6)\n    return digamma_value\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    gamma_d = gamma[d]\n    gamma_dt = gamma_d[t]\n    sum_gamma_d = sum(gamma_d)\n    \n    result = digamma(gamma_dt) - digamma(sum_gamma_d)\n    return round(result, 4)\n\n# Example usage:\ngamma = np.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])\nd = 0\nt = 1\nprint(expected_log_dirichlet(gamma, d, t))  # Example call to the function\n```\n\nThis script defines a `digamma` function that computes the digamma function using a combination of recursion and asymptotic expansion. The `expected_log_dirichlet` function then uses this to compute the expected logarithm of the specified component of a Dirichlet-distributed vector, rounding the result to four decimal places."}
{"task_id": 317, "completion_id": 0, "completion": "```\npython\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    # Determine the index for the previous element\n    prev_ix = max(ix - 1, 0)\n    \n    # Extract predictions and labels\n    prev_prediction, prev_label = params[prev_ix]\n    curr_prediction, curr_label = params[ix]\n    \n    # Fetch the gold (expected) values\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    \n    # Construct the formatted string\n    report = (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_prediction}\\n\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{prev_gold}\\n\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_prediction}\\n\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{curr_gold}{warn_str}\\n\"\n        \"----------------------- END DEBUG -----------------------\\n\"\n    )\n    \n    return report\n```\n\nThis script defines the `err_fmt` function, which generates a formatted debug report based on the provided inputs. The function constructs the report by extracting the necessary information from the `params` and `golds` inputs, and formats it according to the specified layout."}
{"task_id": 318, "completion_id": 0, "completion": "```\npython\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    \n    stumps = []\n    alphas = []\n\n    for _ in range(n_estimators):\n        best_stump = None\n        min_error = float('inf')\n        best_threshold = None\n        best_polarity = None\n\n        for feature_i in range(n_features):\n            thresholds, polarities = np.unique(X_train[:, feature_i]), [1, -1]\n            for threshold in thresholds:\n                for polarity in polarities:\n                    predictions = np.ones(n_samples)\n                    predictions[X_train[:, feature_i] < threshold] = -1 * polarity\n                    weighted_error = np.sum(sample_weights[y_train != predictions])\n\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        polarity = -polarity\n\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump = feature_i\n                        best_threshold = threshold\n                        best_polarity = polarity\n\n        epsilon = min_error\n        alpha = 0.5 * math.log((1.0 - epsilon) / epsilon)\n        alphas.append(alpha)\n\n        predictions = np.ones(n_samples)\n        predictions[X_train[:, best_stump] < best_threshold] = -1 * best_polarity\n        stumps.append((best_stump, best_threshold, best_polarity))\n\n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        sample_weights /= np.sum(sample_weights)\n\n    n_test_samples = X_test.shape[0]\n    final_predictions = np.zeros(n_test_samples)\n\n    for alpha, stump in zip(alphas, stumps):\n        feature_i, threshold, polarity = stump\n        predictions = np.ones(n_test_samples)\n        predictions[X_test[:, feature_i] < threshold] = -1 * polarity\n        final_predictions += alpha * predictions\n\n    return [1 if pred >= 0 else -1 for pred in final_predictions]\n```\n\nThis script implements the AdaBoost.M1 algorithm using decision stumps as weak learners. It trains the model on the provided training data and makes predictions on the test data. The predictions are returned as a list of integers, either `-1` or `1`."}
{"task_id": 329, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    \n    df = fs / N\n    if positive_only:\n        freqs = np.arange(0, N // 2 + 1) * df\n    else:\n        freqs = np.fft.fftfreq(N, 1 / fs)\n    \n    return [round(freq, 4) for freq in freqs.tolist()]\n\n# Example usage:\n# print(dft_bins(8, 8000, positive_only=True))\n# print(dft_bins(8, 8000, positive_only=False))\n```\n\nThis script defines the `dft_bins` function as specified, which calculates the center frequencies of DFT bins based on the given parameters. It uses NumPy to handle the frequency calculations and ensures the results are rounded to four decimal places before returning them as a regular Python list."}
{"task_id": 331, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask, dtype=bool)\n    \n    # Initialize variables to store the sum of squared errors and the count of valid samples\n    sum_squared_errors = 0.0\n    valid_samples_count = 0\n    \n    # Iterate over each sample\n    for i in range(len(y_true)):\n        # Get the OOB predictions for the current sample\n        oob_predictions = predictions[i, oob_mask[i]]\n        \n        # Check if there are any OOB predictions for the current sample\n        if len(oob_predictions) > 0:\n            # Calculate the average of the OOB predictions\n            oob_average = np.mean(oob_predictions)\n            \n            # Calculate the squared error between the average and the true value\n            squared_error = (oob_average - y_true[i]) ** 2\n            \n            # Accumulate the squared error\n            sum_squared_errors += squared_error\n            \n            # Increment the count of valid samples\n            valid_samples_count += 1\n    \n    # Check if there are any valid samples with OOB predictions\n    if valid_samples_count == 0:\n        return -1\n    \n    # Calculate the OOB mean squared error\n    oob_mse_value = sum_squared_errors / valid_samples_count\n    \n    # Return the OOB mean squared error rounded to 4 decimal places\n    return round(oob_mse_value, 4)\n```\n\nThis script defines the `oob_mse` function, which computes the out-of-bag mean squared error for a Random Forest regressor based on the provided true target values, predictions from each tree, and the out-of-bag mask. The function returns the OOB-MSE rounded to four decimal places or -1 if no sample has an OOB prediction."}
{"task_id": 332, "completion_id": 0, "completion": "```\npython\nfrom collections import Counter\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    # Step 1: Compute the support for every item\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    \n    # Step 2: Discard the items whose support is smaller than min_support\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_support}\n    \n    # Step 3: Create a global ordering of the remaining items\n    # First by decreasing support, then alphabetically to break ties\n    ordered_items = sorted(frequent_items, key=lambda x: (-frequent_items[x], x))\n    \n    # Step 4: Build the FP-Tree\n    root = {\"support\": 0, \"children\": {}}\n    \n    for transaction in transactions:\n        # Remove duplicates, keep only frequent items, and reorder them according to the global ordering\n        filtered_transaction = sorted(set(transaction) & set(frequent_items), key=lambda x: ordered_items.index(x))\n        \n        # Walk from the root and update/extend the path\n        current_node = root\n        for item in filtered_transaction:\n            if item not in current_node[\"children\"]:\n                current_node[\"children\"][item] = {\"support\": 0, \"children\": {}}\n            current_node = current_node[\"children\"][item]\n            current_node[\"support\"] += 1\n    \n    return root\n\n# Example usage:\ntransactions = [\n    ['a', 'b', 'c'],\n    ['a', 'b', 'd'],\n    ['a', 'c', 'd'],\n    ['b', 'c', 'd'],\n    ['a', 'b', 'c', 'd']\n]\nmin_support = 2\n\nfp_tree_root = build_fp_tree(transactions, min_support)\nprint(fp_tree_root)\n```\n\nThis script defines a function `build_fp_tree` that constructs an FP-Tree from a list of transactions and a minimum support threshold. The tree is represented using nested dictionaries, and the function returns the root of the tree. The example usage at the end demonstrates how to call the function with a sample dataset."}
{"task_id": 336, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", Y: list[list[int | float]] | \"np.ndarray\" | None = None, c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    # Convert input to NumPy arrays for easier manipulation\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    \n    # Check if the number of columns in X and Y are the same\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # Compute the kernel matrix\n    K = np.dot(X, Y.T) + c0\n    \n    # Round the result to 4 decimal places and convert to list of lists\n    K_rounded = np.round(K, 4).tolist()\n    \n    return K_rounded\n\n# Example usage:\n# X = [[1, 2], [3, 4]]\n# Y = [[5, 6], [7, 8]]\n# print(linear_kernel(X, Y, c0=1))\n# Output: [[17.0, 23.0], [39.0, 53.0]]\n```\n\nThis script defines the `linear_kernel` function that computes the linear kernel matrix as described in the task. It handles both Python lists and NumPy arrays, checks for dimension compatibility, and rounds the results to four decimal places."}
{"task_id": 340, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n\n    # Update the first moment estimate\n    m_t = beta1 * m + (1 - beta1) * grad\n    \n    # Update the second moment estimate\n    v_t = beta2 * v + (1 - beta2) * grad**2\n    \n    # Compute the bias-corrected first moment estimate\n    m_t_hat = m_t / (1 - beta1**t)\n    \n    # Compute the bias-corrected second moment estimate\n    v_t_hat = v_t / (1 - beta2**t)\n    \n    # Update the parameter\n    param_t = param - lr * m_t_hat / (np.sqrt(v_t_hat) + eps)\n    \n    # Return the updated parameter and moment estimates as rounded lists\n    return (\n        param_t.round(8).tolist(),\n        m_t.round(8).tolist(),\n        v_t.round(8).tolist()\n    )\n\n# Example usage:\n# param = np.array([0.0, 0.0])\n# grad = np.array([0.1, 0.2])\n# t = 1\n# m = np.array([0.0, 0.0])\n# v = np.array([0.0, 0.0])\n# updated_param, new_m, new_v = adam_update(param, grad, t, m, v)\n# print(updated_param, new_m, new_v)\n```\n\nThis script defines the `adam_update` function, which performs a single step of the Adam optimization algorithm. The function updates the parameter, first moment estimate, and second moment estimate based on the provided arguments and returns them as rounded lists."}
{"task_id": 343, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                          rewards: list[float] | np.ndarray,\n                          retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # Determine the number of samples to retain\n    num_samples_to_retain = int(retain_prcnt * len(rewards))\n    \n    # Get the indices of the top 'retain_prcnt' samples based on rewards\n    top_indices = np.argsort(rewards)[-num_samples_to_retain:]\n    \n    # Retain the top samples\n    elite_samples = theta_samples[top_indices]\n    \n    # Compute the mean and variance of the retained samples\n    mean = np.mean(elite_samples, axis=0)\n    variance = np.var(elite_samples, axis=0)\n    \n    # Round the results to four decimal places\n    mean_rounded = [round(x, 4) for x in mean]\n    variance_rounded = [round(x, 4) for x in variance]\n    \n    return mean_rounded, variance_rounded\n```\n\nThis script defines the `cross_entropy_update` function, which performs the required operations to update the mean and variance for the Cross-Entropy Method based on the given parameter samples and their corresponding rewards. The function ensures that the results are rounded to four decimal places as specified."}
{"task_id": 353, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n\n    # Count the occurrences of each label\n    label_counts = Counter(labels)\n    total_count = len(labels)\n\n    # Calculate the entropy\n    entropy_value = 0.0\n    for count in label_counts.values():\n        p_i = count / total_count\n        entropy_value -= p_i * math.log2(p_i)\n\n    return round(entropy_value, 5)\n\n# Example usage:\n# labels = [1, 1, 0, 0, 1]\n# print(entropy(labels))  # Output should be 1.0\n```\n\nThis script defines the `entropy` function, which calculates the base-2 Shannon entropy of a given sequence of class labels. It handles edge cases such as empty input and identical labels, and rounds the result to five decimal places."}
{"task_id": 354, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kernel_rows, kernel_cols, _, out_ch = W.shape\n    \n    # Handle padding\n    if isinstance(pad, int):\n        pad = (pad, pad, pad, pad)\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pr, pc = pad\n        pad = (pr, pr, pc, pc)\n    \n    if pad == 'same':\n        pr1 = (kernel_rows + (kernel_rows - 1) * (dilation - 1) - 1) // 2\n        pr2 = (kernel_rows + (kernel_rows - 1) * (dilation - 1) - 1) - pr1\n        pc1 = (kernel_cols + (kernel_cols - 1) * (dilation - 1) - 1) // 2\n        pc2 = (kernel_cols + (kernel_cols - 1) * (dilation - 1) - 1) - pc1\n        pad = (pr1, pr2, pc1, pc2)\n    \n    pr1, pr2, pc1, pc2 = pad\n    X_padded = np.pad(X, ((0, 0), (pr1, pr2), (pc1, pc2), (0)), mode='constant')\n    \n    # Compute output dimensions\n    out_rows = (in_rows + pr1 + pr2 - (kernel_rows + (kernel_rows - 1) * (dilation - 1))) // stride + 1\n    out_cols = (in_cols + pc1 + pc2 - (kernel_cols + (kernel_cols - 1) * (dilation - 1))) // stride + 1\n    \n    # Perform im2col\n    X_col = np.zeros((kernel_rows * kernel_cols * in_ch, out_rows * out_cols * n_ex))\n    for ex in range(n_ex):\n        for r in range(out_rows):\n            for c in range(out_cols):\n                r_start = r * stride\n                c_start = c * stride\n                r_end = r_start + kernel_rows * (dilation + 1) - dilation\n                c_end = c_start + kernel_cols * (dilation + 1) - dilation\n                X_col[:, ex * out_rows * out_cols + r * out_cols + c] = X_padded[ex, r_start:r_end:dilation, c_start:c_end:dilation, :].flatten()\n    \n    # Reshape W for GEMM\n    W_col = W.reshape(kernel_rows * kernel_cols * in_ch, out_ch)\n    \n    # Perform GEMM\n    out_col = W_col.T @ X_col\n    \n    # Reshape output\n    out = out_col.reshape(out_ch, out_rows, out_cols, n_ex).transpose(3, 1, 2, 0)\n    \n    return out.tolist()\n```\n\nThis script defines the `conv2D` function that performs 2-D convolution using the im2col and GEMM strategy. It handles different padding specifications and dilation factors, and returns the result as a nested Python list."}
{"task_id": 355, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # Step 1: Standardise the data by subtracting the feature-wise mean\n    mean = np.mean(data, axis=0)\n    centred_data = data - mean\n\n    if solver == \"svd\":\n        # Step 2: Use SVD to obtain the principal directions\n        U, s, VT = np.linalg.svd(centred_data, full_matrices=False)\n        explained_variance = s**2 / (data.shape[0] - 1)\n        components = VT.T\n    elif solver == \"eigen\":\n        # Step 2: Use eigen-decomposition of the covariance matrix\n        cov_matrix = np.cov(centred_data, rowvar=False, ddof=1)\n        eigenvalues, eigenvectors = np.linalg.eigh(cov_matrix)\n        explained_variance = eigenvalues\n        components = eigenvectors\n    else:\n        raise ValueError(\"Solver must be either 'svd' or 'eigen'\")\n\n    # Step 3: Sort the directions in descending order of their importance\n    sorted_indices = np.argsort(explained_variance)[::-1]\n    explained_variance = explained_variance[sorted_indices]\n    components = components[:, sorted_indices]\n\n    # Step 4: Keep the first n_components directions\n    n_components = min(n_components, components.shape[1])\n    components = components[:, :n_components]\n    explained_variance = explained_variance[:n_components]\n\n    # Step 5: Make the sign of every kept direction deterministic\n    for i in range(n_components):\n        first_non_zero_index = np.where(components[:, i] != 0)[0][0]\n        if components[first_non_zero_index, i] < 0:\n            components[:, i] *= -1\n\n    # Step 6: Project the centred data onto the retained directions\n    scores = centred_data @ components\n\n    # Step 7: Calculate the explained variance ratio\n    total_variance = np.sum(explained_variance)\n    explained_variance_ratio = explained_variance / total_variance\n\n    # Step 8: Round the final results\n    scores_rounded = scores.round(4).tolist()\n    explained_variance_ratio_rounded = explained_variance_ratio.round(4).tolist()\n\n    return scores_rounded, explained_variance_ratio_rounded\n```"}
{"task_id": 356, "completion_id": 0, "completion": "```\npython\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # For classification, return the index of the maximum probability\n        return int(numpy.argmax(leaf.value))\n    else:\n        # For regression, return the scalar value\n        return leaf.value\n\n# Example usage:\n# For classification\nleaf_class = Leaf([0.1, 0.3, 0.6])\nprint(leaf_predict(leaf_class, classifier=True))  # Output: 2\n\n# For regression\nleaf_reg = Leaf(15.5)\nprint(leaf_predict(leaf_reg, classifier=False))  # Output: 15.5\n```\n\nNote: The example usage includes the import of `numpy` which is necessary for the `numpy.argmax` function. If `numpy` is not available, you can replace `numpy.argmax` with a custom implementation or ensure `numpy` is imported at the beginning of your script. Here is the complete script with `numpy` import:\n\n```python\nimport numpy as np\n\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # For classification, return the index of the maximum probability\n        return int(np.argmax(leaf.value))\n    else:\n        # For regression, return the scalar value\n        return leaf.value\n\n# Example usage:\n# For classification\nleaf_class = Leaf([0.1, 0.3, 0.6])\nprint(leaf_predict(leaf_class, classifier=True))  # Output: 2\n\n# For regression\nleaf_reg = Leaf(15.5)\nprint(leaf_predict(leaf_reg, classifier=False))  # Output: 15.5\n```"}
{"task_id": 357, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    # Initialize centroids with the first K samples\n    centroids = data[:K].copy()\n    \n    for _ in range(max_iters):\n        # Assign each sample to the closest centroid\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Recompute centroids\n        new_centroids = np.array([data[labels == k].mean(axis=0) for k in range(K)])\n        \n        # Check for convergence\n        if np.all(np.abs(new_centroids - centroids) < 1e-6):\n            break\n        \n        centroids = new_centroids\n    \n    # Sort centroids lexicographically\n    sorted_centroids = sorted(centroids, key=lambda x: tuple(x))\n    \n    # Round to four decimals and convert to list of lists\n    return [list(map(lambda x: round(x, 4), centroid)) for centroid in sorted_centroids]\n\n# Example usage\ndata = np.array([[1, 1],\n                 [1, 2],\n                 [2, 1],\n                 [8, 8],\n                 [9, 8],\n                 [8, 9]])\nK = 2\nprint(kmeans(data, K))  # Output: [[1.3333, 1.3333], [8.3333, 8.3333]]\n```"}
{"task_id": 362, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | \"np.ndarray\") -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert the input data to a NumPy array of floats\n    matrix = np.array(data, dtype=float)\n    \n    # Compute the sum of each row\n    row_sums = matrix.sum(axis=1)\n    \n    # Check if any row sum is zero\n    if np.any(row_sums == 0):\n        return -1\n    \n    # Normalize each row by dividing by the row sum\n    stochastic_matrix = matrix / row_sums[:, np.newaxis]\n    \n    # Round the entries to 4 decimal places\n    stochastic_matrix_rounded = np.round(stochastic_matrix, 4)\n    \n    # Convert the result to a Python list of lists and return\n    return stochastic_matrix_rounded.tolist()\n```\n\nThis script defines the `row_stochastic_matrix` function which takes a 2-D list or NumPy array as input, converts it to a row-stochastic matrix, and returns the result as a list of lists with values rounded to four decimal places. If any row sum is zero, it returns `-1` to indicate that normalization is impossible."}
{"task_id": 363, "completion_id": 0, "completion": "```\npython\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    \n    def is_box(space: Space) -> bool:\n        return isinstance(space, Box)\n    \n    def all_boxes(spaces: Iterable[Space]) -> bool:\n        return all(is_box(space) for space in spaces)\n    \n    def all_boxes_in_dict(spaces: Dict[str, Space]) -> bool:\n        return all(is_box(space) for space in spaces.values())\n    \n    cont_action = False\n    cont_obs = False\n    \n    if tuple_action:\n        if isinstance(env.action_space, Tuple):\n            cont_action = all_boxes(env.action_space.spaces)\n        elif isinstance(env.action_space, Dict):\n            cont_action = all_boxes_in_dict(env.action_space.spaces)\n    else:\n        cont_action = is_box(env.action_space)\n    \n    if tuple_obs:\n        if isinstance(env.observation_space, Tuple):\n            cont_obs = all_boxes(env.observation_space.spaces)\n        elif isinstance(env.observation_space, Dict):\n            cont_obs = all_boxes_in_dict(env.observation_space.spaces)\n    else:\n        cont_obs = is_box(env.observation_space)\n    \n    return (cont_action, cont_obs)\n```"}
{"task_id": 369, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    # Initialize the running prediction with zeros, with the same shape as a single update array\n    running_pred = np.zeros_like(updates[0])\n\n    # Aggregate the updates\n    for u in updates:\n        running_pred -= learning_rate * u\n\n    # Return the result based on the type of problem\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        # Apply softmax to get probabilities and then argmax to get class labels\n        probabilities = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        probabilities /= np.sum(probabilities, axis=1, keepdims=True)\n        return np.argmax(probabilities, axis=1)\n\n# Example usage:\n# For regression\n# updates = [np.array([0.1, 0.2, 0.3]), np.array([0.05, 0.1, 0.15])]\n# learning_rate = 0.1\n# print(gradient_boosting_predict(updates, learning_rate, regression=True))\n\n# For classification\n# updates = [np.array([[0.1, 0.2, 0.7], [0.8, 0.1, 0.1]]), np.array([[0.2, 0.3, 0.5], [0.6, 0.2, 0.2]])]\n# learning_rate = 0.1\n# print(gradient_boosting_predict(updates, learning_rate, regression=False))\n```\n\nThis script defines the `gradient_boosting_predict` function which aggregates the outputs of Gradient Boosting trees according to the specified rules. The function handles both regression and classification tasks, using NumPy for efficient computation."}
{"task_id": 371, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, _, out_channels = W.shape\n\n    # Calculate effective kernel width with dilation\n    effective_kernel_width = (kernel_width - 1) * dilation + 1\n\n    # Determine padding\n    if isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple):\n        p_left, p_right = pad\n    elif pad == \"same\":\n        out_len = np.ceil(signal_length / stride).astype(int)\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel_width - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    else:\n        raise ValueError(\"Invalid padding argument\")\n\n    # Pad the input signals\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n\n    # Calculate output length\n    output_length = (X_padded.shape[1] - effective_kernel_width) // stride + 1\n\n    # Initialize output volume\n    output_volume = np.zeros((n_examples, output_length, out_channels))\n\n    # Perform the 1D cross-correlation\n    for i in range(n_examples):\n        for j in range(out_channels):\n            for k in range(output_length):\n                start = k * stride\n                end = start + effective_kernel_width\n                x_slice = X_padded[i, start:end:1+dilation, :]\n                output_volume[i, k, j] = np.sum(x_slice * W[:, :, j])\n\n    return output_volume.tolist()\n\n# Example usage:\n# X = np.random.rand(2, 10, 3)  # 2 examples, 10 signal length, 3 input channels\n# W = np.random.rand(4, 3, 2)  # 4 kernel width, 3 input channels, 2 output channels\n# result = conv1D(X, W, stride=2, pad=\"same\", dilation=1)\n# print(result)\n```\n\nThis script defines a function `conv1D` that performs a 1-D cross-correlation between a batch of 1-D, multi-channel signals and a bank of kernels, supporting various padding options, strides, and dilation. The function returns the resulting 3-D volume as a regular Python list."}
{"task_id": 373, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gini(y: list[int] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    \n    # Convert to numpy array if it's not already\n    y = np.array(y)\n    \n    # Count the occurrences of each class\n    unique_classes, counts = np.unique(y, return_counts=True)\n    \n    # Calculate the probabilities of each class\n    probabilities = counts / len(y)\n    \n    # Calculate the Gini impurity\n    gini_impurity = 1 - np.sum(probabilities ** 2)\n    \n    # Return the Gini impurity rounded to 4 decimal places\n    return round(gini_impurity, 4)\n\n# Example usage:\n# y = [0, 1, 1, 0, 1, 2]\n# print(gini(y))  # Output: 0.5417\n```\n\nThis script defines a function `gini` that calculates the Gini impurity of a given sequence of integer labels. It handles both lists and NumPy arrays as input and returns the Gini impurity rounded to four decimal places. If the input sequence is empty, it returns `0.0`."}
{"task_id": 374, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    # Check if the number of samples in X and y are consistent\n    if X.shape[0] != y.shape[0]:\n        return -1\n    \n    # Initialize parameters\n    m, n = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n    \n    # Convert y to a column vector for easier matrix operations\n    y = y.reshape(m, 1)\n    \n    for _ in range(n_iterations):\n        # Calculate predictions\n        y_pred = X.dot(theta) + b\n        \n        # Calculate errors\n        errors = y_pred - y\n        \n        # Calculate gradients\n        dw = (2 / m) * X.T.dot(errors).flatten()\n        db = (2 / m) * np.sum(errors)\n        \n        # Update parameters\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    \n    # Return the learned parameters rounded to 4 decimal places\n    return [round(weight, 4) for weight in theta], round(b, 4)\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4]])\n# y = np.array([3, 5, 7])\n# weights, bias = linear_regression_gd(X, y, learning_rate=0.01, n_iterations=1000)\n# print(\"Weights:\", weights)\n# print(\"Bias:\", bias)\n```\n\nThis script defines a function `linear_regression_gd` that performs multiple linear regression using batch gradient descent. It initializes the weights and bias, iteratively updates them using the gradient descent algorithm, and returns the learned parameters rounded to four decimal places. If the input data is inconsistent, it returns `-1`."}
{"task_id": 376, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Convert the input list of lists to a NumPy array\n    X_np = np.array(X)\n    \n    # Check if the matrix is square\n    if X_np.shape[0] != X_np.shape[1]:\n        return False\n    \n    # Check if the matrix is equal to its transpose\n    return np.allclose(X_np, X_np.T, atol=1e-8)\n\n# Example usage:\n# symmetric_matrix = [[1, 2, 3], [2, 5, 6], [3, 6, 9]]\n# non_symmetric_matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n# print(is_symmetric(symmetric_matrix))  # Output: True\n# print(is_symmetric(non_symmetric_matrix))  # Output: False\n```\n\nThis script defines a function `is_symmetric` that checks if a given 2-D array (represented as a list of lists) is symmetric with respect to its main diagonal. It uses NumPy to handle the matrix operations and checks for symmetry using `np.allclose` to account for potential floating-point precision issues."}
{"task_id": 377, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Computes the negative gradient of the logistic loss for binary classification.\n    \n    Parameters:\n    y (list): A list of binary class labels (0 or 1).\n    f (list): A list of current prediction scores (floats).\n    \n    Returns:\n    list: A list of negative gradients rounded to four decimal places.\n          Returns -1 if the label array contains values other than 0 or 1.\n    \"\"\"\n    # Check if all labels are either 0 or 1\n    if not all(label in [0, 1] for label in y):\n        return -1\n    \n    # Convert labels to the set {-1, 1}\n    y_prime = [2 * label - 1 for label in y]\n    \n    # Compute the negative gradient\n    g = []\n    for y_i, f_i in zip(y_prime, f):\n        gradient = y_i / (1 + np.exp(y_i * f_i))\n        g.append(round(gradient, 4))\n    \n    return g\n\n# Example usage:\n# y = [0, 1, 1, 0]\n# f = [0.1, -0.2, 0.3, -0.4]\n# print(logistic_negative_gradient(y, f))\n```\n\nThis script defines the `logistic_negative_gradient` function, which calculates the negative gradient of the logistic loss for binary classification. It checks if the input labels are valid (0 or 1), converts them to the set {-1, 1}, and then computes the negative gradient for each sample. The results are rounded to four decimal places and returned as a list. If the input labels contain invalid values, the function returns -1."}
{"task_id": 380, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    # Constants\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n\n    # Convert input to numpy array for element-wise operations\n    x = np.array(x, dtype=float)\n\n    if order == 0:\n        # SELU(x) = scale * ELU(x, alpha)\n        selu_values = np.where(x > 0, scale * x, scale * alpha * (np.exp(x) - 1))\n    elif order == 1:\n        # First derivative of SELU\n        first_derivative = np.where(x > 0, scale, scale * alpha * np.exp(x))\n    elif order == 2:\n        # Second derivative of SELU\n        second_derivative = np.where(x > 0, 0, scale * alpha * np.exp(x))\n    else:\n        raise ValueError(\"Order must be 0, 1, or 2.\")\n\n    # Round to 4 decimal places and convert to list\n    result = np.round(selu_values if order == 0 else first_derivative if order == 1 else second_derivative, 4).tolist()\n    \n    return result\n\n# Example usage:\n# print(selu([-1, 0, 1], order=0))  # SELU values\n# print(selu([-1, 0, 1], order=1))  # First derivatives\n# print(selu([-1, 0, 1], order=2))  # Second derivatives\n```\n\nThis script defines the `selu` function that computes the SELU activation and its first and second derivatives for a given input `x` and `order`. The function handles scalar, 1-D, and multi-D inputs, and returns the results rounded to four decimal places as Python lists."}
{"task_id": 387, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Initial prediction: mean of the target values\n    y_pred = np.full_like(y, y.mean())\n    \n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y - y_pred\n        \n        # Sort indices by x values\n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        sorted_residuals = residuals[sorted_indices]\n        \n        # Initialize variables to track the best split\n        best_split = None\n        best_mse = float('inf')\n        best_left_mean = None\n        best_right_mean = None\n        \n        # Evaluate all possible splits\n        for i in range(len(sorted_x) - 1):\n            if sorted_x[i] == sorted_x[i + 1]:\n                continue  # Skip identical values\n            \n            split_point = (sorted_x[i] + sorted_x[i + 1]) / 2.0\n            left_indices = sorted_indices[:i + 1]\n            right_indices = sorted_indices[i + 1:]\n            \n            left_mean = sorted_residuals[left_indices].mean()\n            right_mean = sorted_residuals[right_indices].mean()\n            \n            mse = ((sorted_residuals[left_indices] - left_mean) ** 2).sum() + \\\n                  ((sorted_residuals[right_indices] - right_mean) ** 2).sum()\n            \n            if mse < best_mse:\n                best_mse = mse\n                best_split = split_point\n                best_left_mean = left_mean\n                best_right_mean = right_mean\n        \n        # If no valid split was found, use the global mean residual\n        if best_split is None:\n            best_left_mean = residuals.mean()\n            best_right_mean = residuals.mean()\n            best_split = None\n        \n        # Update predictions\n        if best_split is not None:\n            left_mask = x <= best_split\n            right_mask = x > best_split\n            y_pred[left_mask] += learning_rate * best_left_mean\n            y_pred[right_mask] += learning_rate * best_right_mean\n        else:\n            y_pred += learning_rate * best_left_mean\n    \n    return np.round(y_pred, 4).tolist()\n\n# Example usage:\n# x = [1.0, 2.0, 3.0, 4.0, 5.0]\n# y = [2.0, 3.5, 7.0, 8.0, 11.0]\n# n_estimators = 3\n# learning_rate = 0.1\n# print(gradient_boosting_1d(x, y, n_estimators, learning_rate))\n```\n\nThis script defines a function `gradient_boosting_1d` that implements a simple gradient boosting regressor using decision stumps on a single numerical feature. The function takes in the feature values `x`, target values `y`, the number of boosting rounds `n_estimators`, and an optional `learning_rate`. It returns the in-sample predictions rounded to four decimal places."}
{"task_id": 394, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    # Initialize Eg if it is None\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    \n    # Update the running average of the squared gradients\n    Eg = rho * Eg + (1 - rho) * np.square(grad)\n    \n    # Update the parameters\n    w = w - learning_rate * grad / (np.sqrt(Eg) + 1e-8)\n    \n    # Round to 4 decimal places and convert to lists\n    w_next = np.round(w, 4).tolist()\n    Eg_next = np.round(Eg, 4).tolist()\n    \n    return w_next, Eg_next\n```\n\nThis script defines the `rmsprop_update` function, which performs a single update step of the RMSprop optimizer. It handles the initialization of the running average of squared gradients, updates the parameters according to the RMSprop formula, and ensures that the results are rounded to four decimal places and converted to Python lists before returning."}
{"task_id": 398, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    # Convert input to a NumPy array for vectorized operations\n    x = np.array(x)\n    \n    if not derivative:\n        # Compute ELU activation\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        # Compute ELU gradient\n        elu_values = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n        result = np.where(x >= 0, 1, elu_values + alpha)\n    \n    # Round the result to 4 decimal places and convert to a list\n    return [round(val, 4) for val in result]\n\n# Example usage:\n# x = [-1.0, 0.0, 1.0]\n# print(elu(x))  # ELU activation\n# print(elu(x, derivative=True))  # ELU gradient\n```\n\nThis script defines the `elu` function, which computes the Exponential Linear Unit (ELU) activation or its gradient based on the `derivative` flag. The function handles both list and NumPy array inputs, performs the necessary computations using vectorized operations, and returns the results as a list of floats rounded to four decimal places."}
{"task_id": 411, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    \n    def analyze(data):\n        tuple_flag = any(isinstance(x, (list, tuple, np.ndarray)) for x in data)\n        flat_data = []\n        dims = set()\n        \n        for item in data:\n            if isinstance(item, (list, tuple, np.ndarray)):\n                dims.add(len(item))\n                flat_data.extend(item)\n            else:\n                dims.add(1)\n                flat_data.append(item)\n        \n        multidim_flag = any(d > 1 for d in dims)\n        continuous_flag = any(isinstance(x, float) and not x.is_integer() for x in flat_data)\n        unique_values = [sorted(set(flat_data[i::len(data)])) for i in range(min(dims) if dims else 0)]\n        n_unique_per_dim = [len(uv) for uv in unique_values]\n        dim = min(dims) if dims else 0\n        \n        return {\n            'tuple_flag': tuple_flag,\n            'multidim_flag': multidim_flag,\n            'continuous_flag': continuous_flag,\n            'n_unique_per_dim': n_unique_per_dim,\n            'dim': dim,\n            'unique_values': unique_values\n        }\n    \n    action_stats = analyze(actions)\n    obs_stats = analyze(observations)\n    \n    return {\n        'tuple_actions': action_stats['tuple_flag'],\n        'tuple_observations': obs_stats['tuple_flag'],\n        'multidim_actions': action_stats['multidim_flag'],\n        'multidim_observations': obs_stats['multidim_flag'],\n        'continuous_actions': action_stats['continuous_flag'],\n        'continuous_observations': obs_stats['continuous_flag'],\n        'n_actions_per_dim': action_stats['n_unique_per_dim'],\n        'action_dim': action_stats['dim'],\n        'n_obs_per_dim': obs_stats['n_unique_per_dim'],\n        'obs_dim': obs_stats['dim'],\n        'action_ids': action_stats['unique_values'],\n        'obs_ids': obs_stats['unique_values']\n    }\n\n# Example usage:\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]\nprint(env_stats(actions, observations))\n```\n\nThis script defines the `env_stats` function that computes the required statistics for the given actions and observations. It uses a helper function `analyze` to process each list and extract the necessary information. The example usage at the end demonstrates how the function can be called and what output it produces."}
{"task_id": 413, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    \n    def mean_squared_error(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n    \n    def best_split(X, y):\n        best_score = np.inf\n        best_feature, best_threshold = None, None\n        for feature_idx in range(X.shape[1]):\n            thresholds = np.unique(X[:, feature_idx])\n            for threshold in thresholds:\n                left_mask = X[:, feature_idx] < threshold\n                right_mask = ~left_mask\n                left_y, right_y = y[left_mask], y[right_mask]\n                if len(left_y) == 0 or len(right_y) == 0:\n                    continue\n                score = (len(left_y) * mean_squared_error(left_y, np.mean(left_y)) +\n                         len(right_y) * mean_squared_error(right_y, np.mean(right_y)))\n                if score < best_score:\n                    best_score = score\n                    best_feature = feature_idx\n                    best_threshold = threshold\n        return best_feature, best_threshold\n    \n    def build_tree(X, y, depth=0):\n        if depth >= max_depth or len(np.unique(y)) == 1:\n            return np.mean(y)\n        feature, threshold = best_split(X, y)\n        if feature is None:\n            return np.mean(y)\n        left_mask = X[:, feature] < threshold\n        right_mask = ~left_mask\n        left_tree = build_tree(X[left_mask], y[left_mask], depth + 1)\n        right_tree = build_tree(X[right_mask], y[right_mask], depth + 1)\n        return (feature, threshold, left_tree, right_tree)\n    \n    def predict_tree(tree, X):\n        if isinstance(tree, float):\n            return tree\n        feature, threshold, left_tree, right_tree = tree\n        if X[feature] < threshold:\n            return predict_tree(left_tree, X)\n        else:\n            return predict_tree(right_tree, X)\n    \n    def predict_trees(trees, X):\n        return np.array([predict_tree(tree, x) for tree in trees])\n    \n    predictions = np.full(y_train.shape, np.mean(y_train))\n    trees = []\n    \n    for _ in range(n_estimators):\n        residuals = y_train - predictions\n        tree = build_tree(X_train, residuals)\n        trees.append(tree)\n        predictions += learning_rate * predict_trees([tree], X_train)\n    \n    final_predictions = np.full(X_test.shape[0], np.mean(y_train))\n    for tree in trees:\n        final_predictions += learning_rate * predict_trees([tree], X_test)\n    \n    return [round(pred, 4) for pred in final_predictions]\n\n# Example usage:\n# X_train = np.array([[1, 2], [3, 4], [5, 6]])\n# y_train = np.array([1, 2, 3])\n# X_test = np.array([[2, 3]])\n# print(gbdt_regression(X_train, y_train, X_test))\n```\n\nThis script implements a simplified version of Gradient Boosting Decision Trees (GBDT) using only NumPy. The `gbdt_regression` function trains the model using the specified parameters and returns predictions for the test data, rounded to four decimal places."}
{"task_id": 416, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Computes the probability density function (PDF) of a multivariate Gaussian distribution.\n    \n    Parameters:\n    X (np.ndarray): A NumPy array of shape (n_samples, n_features) containing the data points.\n    mean (np.ndarray): The mean vector of the distribution with length n_features.\n    cov (np.ndarray): The covariance matrix of shape (n_features, n_features).\n    \n    Returns:\n    list: A list of PDF values for each data point in X, rounded to four decimal places.\n    \"\"\"\n    # Ensure X is 2D\n    if X.ndim == 1:\n        X = X.reshape(-1, 1)\n    \n    n_samples, n_features = X.shape\n    det_cov = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    norm_factor = 1 / math.sqrt((2 * math.pi) ** n_features * det_cov)\n    pdf_values = []\n    \n    for i in range(n_samples):\n        diff = X[i] - mean\n        exponent = -0.5 * np.dot(diff.T, np.dot(inv_cov, diff))\n        pdf_value = norm_factor * math.exp(exponent)\n        pdf_values.append(round(pdf_value, 4))\n    \n    return pdf_values\n\n# Example usage:\n# X = np.array([[1.0, 2.0], [3.0, 4.0]])\n# mean = np.array([0.0, 0.0])\n# cov = np.array([[1.0, 0.0], [0.0, 1.0]])\n# print(multivariate_gaussian_pdf(X, mean, cov))\n```\n\nThis script defines a function `multivariate_gaussian_pdf` that calculates the probability density function for a multivariate Gaussian distribution. It handles both single and multiple data points and ensures the input `X` is treated as a 2D array. The function returns a list of PDF values, each rounded to four decimal places."}
{"task_id": 419, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    # Add intercept column if required\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n    \n    # Handle different types of V\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, (int, float)):\n        V = V * np.eye(X.shape[1])\n    elif isinstance(V, np.ndarray) and V.ndim == 1:\n        V = np.diag(V)\n    \n    # Compute the posterior mean and covariance\n    V_inv = np.linalg.inv(V)\n    XTX = X.T @ X\n    XTy = X.T @ y\n    \n    Sigma_p = np.linalg.inv(V_inv + XTX)\n    mu_p = Sigma_p @ (V_inv @ np.array(mu) + XTy)\n    \n    # Compute the MAP predictive mean\n    y_pred = X_new @ mu_p\n    \n    # Round to 4 decimal places and return as a list\n    return [round(pred, 4) for pred in y_pred.tolist()]\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4]])\n# y = np.array([3, 5, 7])\n# X_new = np.array([[4, 5], [5, 6]])\n# print(bayesian_linear_regression_pred(X, y, X_new, mu=0, sigma=1, V=1, fit_intercept=True))\n```\n\nThis script defines the `bayesian_linear_regression_pred` function, which performs Bayesian linear regression with a conjugate Gaussian prior and known observation variance. It handles different types of prior covariance matrices `V` and optionally adds an intercept to the design matrices. The function returns the MAP predictive means for new data points, rounded to four decimal places."}
{"task_id": 423, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculate the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\"\"\"\n    # Check if both lists have the same length\n    if len(actual) != len(predicted):\n        return -1\n    \n    # Check if all elements in both lists are non-negative\n    if any(a < 0 for a in actual) or any(p < 0 for p in predicted):\n        return -1\n    \n    # Calculate the RMSLE\n    n = len(actual)\n    log_diffs = [(np.log1p(pred) - np.log1p(act))**2 for pred, act in zip(predicted, actual)]\n    rmsle = np.sqrt((1/n) * sum(log_diffs))\n    \n    # Return the result rounded to four decimal places\n    return round(rmsle, 4)\n\n# Example usage:\n# actual = [3, -0.5, 2, 7]\n# predicted = [2.5, 0.3, 2, 8]\n# print(root_mean_squared_log_error(actual, predicted))  # Should return -1 due to negative value in actual\n\n# actual = [3, 0.5, 2, 7]\n# predicted = [2.5, 0.3, 2, 8]\n# print(root_mean_squared_log_error(actual, predicted))  # Should return the RMSLE value\n```\n\nThis script defines a function `root_mean_squared_log_error` that calculates the RMSLE between two lists of non-negative numbers. It first checks if the lists are of the same length and contain only non-negative numbers. If these conditions are not met, it returns -1. Otherwise, it computes the RMSLE using the formula provided and returns the result rounded to four decimal places."}
{"task_id": 428, "completion_id": 0, "completion": "```\npython\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    \n    if symmetric:\n        N = window_len\n    else:\n        N = window_len + 1\n    \n    window = [0.5 - 0.5 * math.cos(2 * math.pi * n / (N - 1)) for n in range(N)]\n    \n    if not symmetric:\n        window = window[:-1]\n    \n    return [round(x, 4) for x in window]\n\n# Example usage:\n# print(hann(5, symmetric=True))\n# print(hann(5, symmetric=False))\n```\n\nThis script defines the `hann` function which generates a Hann window of a specified length and type (symmetric or periodic). The function handles special cases where the window length is less than or equal to zero or exactly one, and it rounds the coefficients to four decimal places before returning them as a list."}
{"task_id": 433, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    # Write your code below this line\n    if len(shape) == 4:\n        # Assuming the shape is (out_channels, in_channels, kernel_height, kernel_width)\n        out_channels, in_channels, kernel_height, kernel_width = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = float(in_channels * receptive_field_size)\n        fan_out = float(out_channels * receptive_field_size)\n    else:\n        # For other shapes, take the first two dimensions as fan_in and fan_out\n        fan_in = float(shape[1])\n        fan_out = float(shape[0])\n    \n    return (fan_in, fan_out)\n\n# Example usage:\n# shape = (10, 20, 3, 3)  # 4D convolutional kernel\n# print(glorot_fan(shape))  # Output: (180.0, 900.0)\n\n# shape = (50, 100)  # 2D dense layer\n# print(glorot_fan(shape))  # Output: (100.0, 50.0)\n```\n\nThis script defines the `glorot_fan` function, which calculates the `fan_in` and `fan_out` for a given weight tensor shape according to the specified rules. The function handles both 4D convolutional kernels and other tensor shapes."}
{"task_id": 435, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]],\n                               y: list[float],\n                               n_estimators: int = 10,\n                               learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    # Convert X and y to NumPy arrays of type float\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    \n    # Special cases\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4)] * len(y)\n    \n    # Initialize the current prediction with the mean of y\n    y_pred = np.full_like(y, np.mean(y))\n    \n    # Repeat for t = 1 ... n_estimators\n    for _ in range(n_estimators):\n        # Compute the residuals\n        residuals = y - y_pred\n        \n        # Fit an OLS linear model that predicts the residuals from X\n        # Add a column of ones to X for the intercept\n        X_with_intercept = np.c_[np.ones(X.shape[0]), X]\n        \n        # Compute the OLS coefficients\n        coefficients = np.linalg.lstsq(X_with_intercept, residuals, rcond=None)[0]\n        \n        # Obtain the weak-learner prediction\n        h_t = X_with_intercept @ coefficients\n        \n        # Update the overall prediction\n        y_pred += learning_rate * h_t\n    \n    # Return the final prediction vector rounded to 4 decimal places as a regular Python list\n    return [round(pred, 4) for pred in y_pred]\n```\n\nThis script defines a function `gradient_boosting_regressor` that implements a small-scale version of the Gradient Boosting Regressor using OLS linear regression as the weak learner. The function handles the special cases where `n_estimators` is less than or equal to 0 or `learning_rate` is 0 by returning a vector filled with the mean of the target values. The final predictions are rounded to four decimal places and returned as a regular Python list."}
{"task_id": 437, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    # Convert input to a numpy array for consistent processing\n    is_scalar = isinstance(x, (int, float))\n    x = np.array(x, dtype=float)\n    \n    # Compute the sigmoid function\n    sigma_x = 1 / (1 + np.exp(-x))\n    \n    if order == 0:\n        result = sigma_x\n    elif order == 1:\n        result = sigma_x * (1 - sigma_x)\n    elif order == 2:\n        result = sigma_x * (1 - sigma_x) * (1 - 2 * sigma_x)\n    else:\n        return -1\n    \n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n    \n    # Return the result in the appropriate format\n    if is_scalar:\n        return float(result)\n    else:\n        return result.tolist()\n\n# Example usage:\n# print(sigmoid(0))  # Output: 0.5\n# print(sigmoid([0, 1, -1], order=1))  # Output: [0.25, 0.1966, 0.1966]\n# print(sigmoid(np.array([[0, 1], [-1, 2]]), order=2))  # Output: [[0.0, -0.0391], [-0.0391, 0.0066]]\n```\n\nThis script defines the `sigmoid` function as specified, handling scalar, list, and `ndarray` inputs, and returning the appropriate result based on the `order` parameter. The function ensures that the output is rounded to four decimal places and returns a `float` for scalar inputs and a `list` for vector/matrix inputs."}
{"task_id": 438, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already\n    y = np.array(y)\n    \n    # Determine the number of classes if not provided\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    \n    # Check if the provided num_classes is sufficient\n    if np.max(y) + 1 > num_classes:\n        return -1\n    \n    # Create the one-hot encoded matrix\n    one_hot_matrix = np.zeros((y.size, num_classes), dtype=int)\n    one_hot_matrix[np.arange(y.size), y] = 1\n    \n    # Convert the NumPy array to a list of lists and return\n    return one_hot_matrix.tolist()\n\n# Example usage:\n# y = [0, 1, 2, 1]\n# print(to_categorical(y))  # Output: [[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0]]\n# print(to_categorical(y, num_classes=4))  # Output: [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0]]\n# print(to_categorical(y, num_classes=2))  # Output: -1\n```\n\nThis script defines the `to_categorical` function as specified, handling the conversion of class labels to a one-hot encoded format while checking for the validity of the `num_classes` parameter."}
{"task_id": 439, "completion_id": 0, "completion": "```\npython\nimport itertools\nfrom typing import List, Tuple, Hashable\n\ndef apriori_frequent_itemsets(transactions: List[List[Hashable]], min_sup: float) -> List[Tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    def support(itemset: Tuple, transactions: List[List[Hashable]]) -> float:\n        return sum(1 for transaction in transactions if set(itemset).issubset(set(transaction))) / len(transactions)\n\n    def generate_candidates(frequent_itemsets: List[Tuple], k: int) -> List[Tuple]:\n        # Generate candidate itemsets of size k\n        candidates = set()\n        for a in frequent_itemsets:\n            for b in frequent_itemsets:\n                if a[:-1] == b[:-1] and a[-1] < b[-1]:\n                    candidate = tuple(sorted(set(a) | set(b)))\n                    if all(tuple(sorted(candidate[:i] + candidate[i+1:])) in frequent_itemsets for i in range(k)):\n                        candidates.add(candidate)\n        return list(candidates)\n\n    # Step 1: Generate all single-item candidates and prune\n    all_items = set(item for transaction in transactions for item in transaction)\n    frequent_itemsets = [itemset for itemset in itertools.combinations(all_items, 1) if support(itemset, transactions) >= min_sup]\n    \n    # Step 2: Generate k-item candidates and prune until no more frequent itemsets are found\n    k = 2\n    while frequent_itemsets:\n        candidate_itemsets = generate_candidates(frequent_itemsets, k)\n        frequent_itemsets = [itemset for itemset in candidate_itemsets if support(itemset, transactions) >= min_sup]\n        all_frequent_itemsets.extend(frequent_itemsets)\n        k += 1\n\n    # Sort the frequent itemsets by length and lexicographically\n    all_frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return all_frequent_itemsets\n\n# Example usage:\ntransactions = [\n    ['milk', 'bread', 'butter'],\n    ['milk', 'bread'],\n    ['bread', 'butter'],\n    ['milk', 'butter'],\n    ['bread']\n]\nmin_sup = 0.4\nprint(apriori_frequent_itemsets(transactions, min_sup))\n```\n\nThis script implements the Apriori algorithm to find frequent itemsets in a given list of transactions. The function `apriori_frequent_itemsets` takes a list of transactions and a minimum support threshold as input and returns a list of frequent itemsets, sorted by length and lexicographically. The script includes a helper function `support` to calculate the support of an itemset and another helper function `generate_candidates` to generate candidate itemsets of the next size."}
{"task_id": 440, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    # Convert the input list to a NumPy array for easier manipulation\n    predictions_array = np.array(predictions)\n    \n    # Average the probabilities over the estimators\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n    \n    # Round the averaged probabilities to 4 decimal places\n    averaged_probabilities_rounded = np.round(averaged_probabilities, 4)\n    \n    # Get the predicted class index for each sample\n    predicted_classes = np.argmax(averaged_probabilities_rounded, axis=1)\n    \n    # Convert the NumPy arrays back to lists for the final output\n    averaged_probabilities_list = averaged_probabilities_rounded.tolist()\n    predicted_classes_list = predicted_classes.tolist()\n    \n    return averaged_probabilities_list, predicted_classes_list\n\n# Example usage:\n# predictions = [\n#     [[0.1, 0.9], [0.8, 0.2]],\n#     [[0.2, 0.8], [0.7, 0.3]],\n#     [[0.3, 0.7], [0.6, 0.4]]\n# ]\n# averaged_probs, predicted_classes = aggregate_predictions(predictions)\n# print(\"Averaged Probabilities:\", averaged_probs)\n# print(\"Predicted Classes:\", predicted_classes)\n```\n\nThis script defines the `aggregate_predictions` function, which takes a three-level nested list of predictions, averages the probabilities over the estimators for each sample, rounds the results to four decimal places, and determines the predicted class for each sample. The function returns both the averaged probabilities and the predicted classes as regular Python lists."}
{"task_id": 444, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    \n    # Validate feature dimensions\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # Determine the number of features\n    C = X.shape[1]\n    \n    # Determine the sigma value(s)\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif isinstance(sigma, list):\n        sigma = np.array(sigma)\n        if len(sigma) != C:\n            return -1\n    elif isinstance(sigma, (int, float)):\n        sigma = np.full(C, sigma)\n    else:\n        return -1\n    \n    # Validate sigma values\n    if np.any(sigma <= 0):\n        return -1\n    \n    # Compute the squared Euclidean distance matrix\n    XX = np.sum(X**2, axis=1, keepdims=True)\n    YY = np.sum(Y**2, axis=1)\n    XY = np.dot(X, Y.T)\n    dist_sq = XX + YY - 2 * XY\n    \n    # Compute the RBF kernel matrix\n    kernel_matrix = np.exp(-0.5 * (dist_sq / sigma**2))\n    \n    # Round the kernel matrix to 4 decimal places\n    kernel_matrix_rounded = np.round(kernel_matrix, 4)\n    \n    # Convert to a nested list and return\n    return kernel_matrix_rounded.tolist()\n\n# Example usage\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0\nprint(rbf_kernel(X, Y, sigma))\n```\n\nThis script defines the `rbf_kernel` function, which computes the Radial Basis Function (RBF) kernel matrix for given input matrices `X` and `Y` with a specified scale parameter `sigma`. The function handles various input validation checks and returns the kernel matrix rounded to four decimal places, or `-1` if the input is invalid."}
{"task_id": 446, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n\n    # Function to calculate Shannon entropy\n    def entropy(labels):\n        counts = Counter(labels)\n        total = len(labels)\n        return -sum((count / total) * np.log2(count / total) for count in counts.values())\n\n    # Function to find the majority label\n    def majority_label(labels):\n        counts = Counter(labels)\n        max_count = max(counts.values())\n        return min(label for label, count in counts.items() if count == max_count)\n\n    # Calculate the entropy of the parent node\n    parent_entropy = entropy(y)\n    best_gain = 0\n    best_feature_index = -1\n    best_threshold = None\n    best_left_majority = None\n    best_right_majority = None\n\n    # Iterate over each feature\n    for j in range(n_features):\n        # Sort the feature values and corresponding labels\n        sorted_indices = np.argsort(X[:, j])\n        sorted_X = X[sorted_indices, j]\n        sorted_y = y[sorted_indices]\n\n        # Consider midpoints between successive distinct values as thresholds\n        for i in range(n_samples - 1):\n            if sorted_X[i] != sorted_X[i + 1]:\n                t = (sorted_X[i] + sorted_X[i + 1]) / 2\n\n                # Split the data at the threshold\n                left_labels = sorted_y[:i + 1]\n                right_labels = sorted_y[i + 1:]\n\n                # Calculate the entropy of the left and right nodes\n                p_left = len(left_labels) / n_samples\n                p_right = len(right_labels) / n_samples\n                left_entropy = entropy(left_labels)\n                right_entropy = entropy(right_labels)\n\n                # Calculate the information gain\n                gain = parent_entropy - (p_left * left_entropy + p_right * right_entropy)\n\n                # Update the best split if this one is better\n                if gain > best_gain:\n                    best_gain = gain\n                    best_feature_index = j\n                    best_threshold = round(t, 4)\n                    best_left_majority = majority_label(left_labels)\n                    best_right_majority = majority_label(right_labels)\n\n    # If no split can improve information gain, return the majority label\n    if best_gain == 0:\n        majority_label_ = majority_label(y)\n        return (-1, None, majority_label_, majority_label_)\n\n    return (best_feature_index, best_threshold, best_left_majority, best_right_majority)\n```\n\nThis script defines the `decision_stump` function, which calculates the best single-level split for a decision tree based on information gain. It considers midpoints between successive distinct values for each feature as potential thresholds and returns the feature index, threshold, and majority labels for the left and right child nodes. If no split improves information gain, it returns the majority label for the entire dataset."}
{"task_id": 452, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom typing import List, Union\n\ndef divide_on_feature(X: Union[np.ndarray, List[List]], feature_i: int, threshold) -> List[List]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    if isinstance(X, np.ndarray):\n        X = X.tolist()\n    \n    subset1 = []\n    subset2 = []\n    \n    for sample in X:\n        if (isinstance(threshold, (int, float)) and sample[feature_i] >= threshold) or sample[feature_i] == threshold:\n            subset1.append(sample)\n        else:\n            subset2.append(sample)\n    \n    return [subset1, subset2]\n\n# Example usage:\nX_numeric = np.array([[1, 5], [3, 2], [4, 6], [2, 1]])\nfeature_i_numeric = 0\nthreshold_numeric = 3\nprint(divide_on_feature(X_numeric, feature_i_numeric, threshold_numeric))\n# \u279c  [[ [3, 2], [4, 6] ], [ [1, 5], [2, 1] ]]\n\nX_categorical = np.array([[1, \"A\"], [2, \"B\"], [3, \"A\"], [4, \"C\"]])\nfeature_i_categorical = 1\nthreshold_categorical = \"A\"\nprint(divide_on_feature(X_categorical, feature_i_categorical, threshold_categorical))\n# \u279c  [[ [1, \"A\"], [3, \"A\"] ], [ [2, \"B\"], [4, \"C\"] ]]\n```"}
{"task_id": 453, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    # Check for input consistency\n    if not (isinstance(Q, np.ndarray) and isinstance(Q_next, np.ndarray)):\n        return -1\n    if Q.shape != Q_next.shape:\n        return -1\n    if not (isinstance(actions, list) and isinstance(rewards, list) and isinstance(dones, list)):\n        return -1\n    if len(actions) != len(rewards) or len(actions) != len(dones) or len(actions) != Q.shape[0]:\n        return -1\n    if not (0 <= gamma <= 1):\n        return -1\n\n    # Initialize the updated Q matrix\n    Q_updated = Q.copy()\n\n    # Update the Q-values\n    for i in range(len(actions)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        Q_updated[i, actions[i]] = target\n\n    # Round the result to 4 decimal places and convert to nested list\n    return np.round(Q_updated, 4).tolist()\n```"}
{"task_id": 458, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    # Convert labels to a numpy array for easier manipulation\n    labels = np.array(labels)\n    \n    # Check for negative labels\n    if (labels < 0).any():\n        return -1\n    \n    # Infer num_classes if not provided\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    \n    # Check if num_classes is too small\n    if num_classes < max(labels) + 1:\n        return -1\n    \n    # Initialize the one-hot encoded matrix with zeros\n    one_hot_matrix = [[0] * num_classes for _ in range(len(labels))]\n    \n    # Set the appropriate indices to 1\n    for i, label in enumerate(labels):\n        one_hot_matrix[i][label] = 1\n    \n    return one_hot_matrix\n\n# Example usage:\n# labels = [0, 1, 2, 1, 0]\n# print(to_categorical(labels))  # Output: [[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0]]\n```\n\nThis script defines the `to_categorical` function as specified, handling the conversion of integer labels to one-hot encoded format while adhering to the constraints and requirements provided."}
{"task_id": 461, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    \n    if n_estimators <= 0:\n        mean_y = np.mean(y)\n        return np.full_like(y, mean_y, dtype=float).tolist()\n    \n    # Initialize the ensemble prediction with the mean of the targets\n    y_pred = np.full_like(y, np.mean(y), dtype=float)\n    \n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y - y_pred\n        \n        # Find unique x values and sort them\n        unique_x = np.unique(x)\n        if len(unique_x) == 1:\n            # If all x are identical, use the mean residual\n            mean_residual = np.mean(residuals)\n            y_pred += learning_rate * mean_residual\n            continue\n        \n        # Try all possible splits\n        best_sse = float('inf')\n        best_split = None\n        best_vL = None\n        best_vR = None\n        \n        for t in unique_x[:-1]:\n            left_mask = x <= t\n            right_mask = x > t\n            \n            if not np.any(left_mask) or not np.any(right_mask):\n                continue\n            \n            vL = np.mean(residuals[left_mask])\n            vR = np.mean(residuals[right_mask])\n            \n            sse = np.sum((residuals[left_mask] - vL) ** 2) + np.sum((residuals[right_mask] - vR) ** 2)\n            \n            if sse < best_sse:\n                best_sse = sse\n                best_split = t\n                best_vL = vL\n                best_vR = vR\n        \n        if best_split is None:\n            # No valid split found, use the mean residual\n            mean_residual = np.mean(residuals)\n            y_pred += learning_rate * mean_residual\n        else:\n            # Apply the best split\n            stump_pred = np.where(x <= best_split, best_vL, best_vR)\n            y_pred += learning_rate * stump_pred\n    \n    return np.round(y_pred, 4).tolist()\n```"}
{"task_id": 471, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    \n    if next_state is not None:\n        # Calculate the expected value of Q[next_state] under the epsilon-soft policy\n        q_next = np.array(q_table[next_state])\n        greedy_action = np.argmax(q_next)\n        expected_value = (1 - epsilon) * q_next[greedy_action] + epsilon * np.mean(q_next)\n    else:\n        expected_value = 0.0\n    \n    # Calculate the target\n    target = reward + gamma * expected_value\n    \n    # Update the Q-table\n    q_table[state][action] += lr * (target - q_table[state][action])\n    \n    # Round all entries to four decimal places\n    q_table = [[round(q, 4) for q in row] for row in q_table]\n    \n    return q_table\n```"}
{"task_id": 474, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n\n    for i in range(m):\n        x_min = (i // 2 + 0.1) * 10\n        x_max = (i // 2 + 0.9) * 10\n        y_min = ((i % 2) * interval + 0.1) * 10\n        y_max = ((i % 2) * interval + 0.9) * 10\n        label = (i - 0.5) * 2\n\n        # Generate training data\n        x_train = np.random.uniform(x_min, x_max, n_train)\n        y_train = np.random.uniform(y_min, y_max, n_train)\n        X_train.append(np.column_stack((x_train, y_train)))\n        Y_train.extend([label] * n_train)\n\n        # Generate validation data\n        x_val = np.random.uniform(x_min, x_max, n_val)\n        y_val = np.random.uniform(y_min, y_max, n_val)\n        X_val.append(np.column_stack((x_val, y_val)))\n        Y_val.extend([label] * n_val)\n\n    X_train = np.round(np.vstack(X_train), 4)\n    Y_train = np.round(np.array(Y_train), 4)\n    X_val = np.round(np.vstack(X_val), 4)\n    Y_val = np.round(np.array(Y_val), 4)\n\n    return X_train, X_val, Y_train, Y_val\n```\n\nThis script defines the `generate_data` function which generates a 2-D toy dataset with the specified parameters. The function ensures that the data is reproducible if a seed is provided, and all coordinates are rounded to four decimal places. The function returns four NumPy arrays: `X_train`, `X_val`, `Y_train`, and `Y_val`."}
{"task_id": 475, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    # Initialize m_prev and v_prev to zeros if they are None\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    \n    # Compute the first moment (mean of gradients)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    \n    # Compute the second moment (uncentred variance of gradients)\n    v_new = b2 * v_prev + (1 - b2) * (grad ** 2)\n    \n    # Compute bias-corrected first moment\n    m_hat = m_new / (1 - b1 ** t)\n    \n    # Compute bias-corrected second moment\n    v_hat = v_new / (1 - b2 ** t)\n    \n    # Update the parameters\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    \n    return w_new, m_new, v_new\n\n# Example usage\nw_new, m_new, v_new = adam_update(1.0, 0.1, 0.0, 0.0, 1)\nprint(round(w_new, 9))  # \u2248 0.999000001\n```\n\nThis script defines the `adam_update` function, which performs a single step of the Adam optimization algorithm. It handles both scalar and NumPy array inputs for the parameters and gradients, and initializes the first and second moments to zero if they are not provided. The function returns the updated parameters and moments, ensuring numerical stability with the addition of a small constant `eps` in the denominator."}
{"task_id": 479, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    \n    N = len(rewards[0])  # Number of arms\n    value_estimates = [ev_prior] * N  # Initial estimate of expected value for each arm\n    pull_counts = [0] * N  # Number of times each arm has been pulled\n\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            # Explore: choose a random arm\n            chosen_arm = np.random.choice(N)\n        else:\n            # Exploit: choose the arm with the highest estimated value\n            chosen_arm = np.argmax(value_estimates)\n        \n        # Receive the reward for the chosen arm\n        reward = rewards[t][chosen_arm]\n        \n        # Update the pull count for the chosen arm\n        pull_counts[chosen_arm] += 1\n        \n        # Update the estimate for the chosen arm using incremental sample mean\n        value_estimates[chosen_arm] += (reward - value_estimates[chosen_arm]) / pull_counts[chosen_arm]\n    \n    # Return the final estimated values rounded to 4 decimal places\n    return [round(value, 4) for value in value_estimates]\n\n# Example usage:\n# rewards = [\n#     [1.0, 0.0, 1.5],\n#     [0.5, 1.0, 0.0],\n#     [1.0, 1.0, 1.0],\n#     [0.0, 0.5, 1.5]\n# ]\n# print(epsilon_greedy_bandit(rewards, epsilon=0.1, seed=42))\n```\n\nThis script defines the `epsilon_greedy_bandit` function, which simulates the \u03b5-greedy strategy for a multi-armed bandit problem. The function takes a matrix of rewards, an exploration probability `epsilon`, an initial expected value `ev_prior`, and an optional random seed `seed`. It returns the final estimated values for each arm, rounded to four decimal places."}
{"task_id": 481, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((point1 - point2) ** 2))\n\n    def region_query(point_index):\n        neighbors = []\n        for i in range(len(data)):\n            if euclidean_distance(data[point_index], data[i]) <= eps:\n                neighbors.append(i)\n        return neighbors\n\n    def expand_cluster(point_index, neighbors, cluster_id):\n        labels[point_index] = cluster_id\n        i = 0\n        while i < len(neighbors):\n            neighbor_index = neighbors[i]\n            if labels[neighbor_index] == -1:\n                labels[neighbor_index] = cluster_id\n            elif labels[neighbor_index] == 0:\n                labels[neighbor_index] = cluster_id\n                new_neighbors = region_query(neighbor_index)\n                if len(new_neighbors) >= min_samples:\n                    neighbors.extend(new_neighbors)\n            i += 1\n\n    labels = [0] * len(data)\n    cluster_id = 0\n\n    for point_index in range(len(data)):\n        if labels[point_index] != 0:\n            continue\n\n        neighbors = region_query(point_index)\n\n        if len(neighbors) < min_samples:\n            labels[point_index] = -1\n        else:\n            cluster_id += 1\n            expand_cluster(point_index, neighbors, cluster_id)\n\n    return labels\n```\n\nThis script defines the `dbscan` function from scratch, implementing the DBSCAN clustering algorithm as described. It includes helper functions for calculating Euclidean distance and performing region queries to find neighbors within a given radius. The main logic iterates through each point, expanding clusters based on core points and marking noise points as required."}
{"task_id": 482, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.asarray(y)\n    \n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    \n    if not np.issubdtype(y.dtype, np.integer):\n        raise ValueError(\"Labels must be integers.\")\n    \n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError(\"All labels must be in the range [0, num_classes).\")\n    \n    one_hot_matrix = np.zeros((y.size, num_classes), dtype=int)\n    one_hot_matrix[np.arange(y.size), y] = 1\n    \n    return one_hot_matrix\n\n# Example usage:\n# labels = [0, 1, 2, 1, 0]\n# one_hot_labels = to_categorical(labels, num_classes=3)\n# print(one_hot_labels)\n```\n\nThis script defines the `to_categorical` function, which converts a vector of integer class labels into a 2-D array of one-hot encoded representations. The function handles the optional `num_classes` parameter and raises appropriate errors if the input labels are not valid."}
{"task_id": 485, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    \n    def sse(y):\n        mean = np.mean(y)\n        return np.sum((y - mean) ** 2)\n    \n    def best_split(X, y):\n        best_sse = float('inf')\n        best_split_point = None\n        for i in range(1, len(X)):\n            left_y = y[:i]\n            right_y = y[i:]\n            current_sse = sse(left_y) + sse(right_y)\n            if current_sse < best_sse:\n                best_sse = current_sse\n                best_split_point = X[i]\n        return best_split_point\n    \n    def build_tree(X, y, depth):\n        if depth == max_depth or len(X) < 2:\n            return np.mean(y)\n        \n        split_point = best_split(X, y)\n        if split_point is None:\n            return np.mean(y)\n        \n        left_indices = np.where(np.array(X) < split_point)[0]\n        right_indices = np.where(np.array(X) >= split_point)[0]\n        \n        left_tree = build_tree(np.array(X)[left_indices], np.array(y)[left_indices], depth + 1)\n        right_tree = build_tree(np.array(X)[right_indices], np.array(y)[right_indices], depth + 1)\n        \n        return (split_point, left_tree, right_tree)\n    \n    def predict_tree(tree, x):\n        if isinstance(tree, float):\n            return tree\n        split_point, left_tree, right_tree = tree\n        if x < split_point:\n            return predict_tree(left_tree, x)\n        else:\n            return predict_tree(right_tree, x)\n    \n    if not X_train or not y_train:\n        return []\n    \n    X_train, y_train = zip(*sorted(zip(X_train, y_train)))\n    tree = build_tree(X_train, y_train, 0)\n    \n    return [predict_tree(tree, x) for x in X_test]\n```"}
{"task_id": 490, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:\n        return []\n    \n    # Convert input to a NumPy array if it's not already\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    \n    # Create a diagonal matrix using NumPy\n    diagonal_matrix = np.diag(x)\n    \n    # Convert the NumPy array to a list of lists\n    return diagonal_matrix.tolist()\n\n# Example usage:\n# vector = [1, 2, 3]\n# print(make_diagonal(vector))  # Output: [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n```\n\nThis script defines the `make_diagonal` function, which takes a one-dimensional vector (list, tuple, or NumPy array) and returns a square diagonal matrix as a list of lists. If the input vector is empty, it returns an empty list. The function uses NumPy to create the diagonal matrix efficiently and then converts it to a list of lists using the `tolist()` method."}
{"task_id": 491, "completion_id": 0, "completion": "```\nfrom collections import Counter, defaultdict\nimport itertools\n\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    \n    # Helper class for FP-Tree nodes\n    class FPNode:\n        def __init__(self, item=None, count=0, parent=None):\n            self.item = item\n            self.count = count\n            self.parent = parent\n            self.children = defaultdict(FPNode)\n            self.link = None\n\n    # Build the header table\n    def build_header_table(frequent_items):\n        header_table = defaultdict(lambda: [0, None])\n        for item, count in frequent_items.items():\n            header_table[item] = [count, None]\n        return header_table\n\n    # Insert a transaction into the FP-tree\n    def insert_transaction(transaction, tree, header_table):\n        current_node = tree\n        for item in transaction:\n            if item in current_node.children:\n                current_node.children[item].count += 1\n            else:\n                new_node = FPNode(item, 1, current_node)\n                current_node.children[item] = new_node\n                # Update the header table\n                if header_table[item][1] is None:\n                    header_table[item][1] = new_node\n                else:\n                    current_node = header_table[item][1]\n                    while current_node.link is not None:\n                        current_node = current_node.link\n                    current_node.link = new_node\n            current_node = current_node.children[item]\n\n    # Mine the FP-tree\n    def mine_tree(tree, header_table, prefix, frequent_item_sets):\n        # If the tree has a single path, generate all combinations of the path\n        if is_single_path(tree):\n            path_items = get_path_items(tree)\n            for i in range(1, len(path_items)):\n                for combination in itertools.combinations(path_items, i):\n                    frequent_item_sets.add(tuple(sorted(prefix + combination)))\n        else:\n            # Mine the tree recursively\n            for item in get_sorted_items(header_table):\n                conditional_pattern_base = find_conditional_pattern_base(item, header_table)\n                conditional_tree = build_conditional_tree(conditional_pattern_base, header_table)\n                if conditional_tree.children:\n                    new_prefix = prefix + (item,)\n                    mine_tree(conditional_tree, header_table, new_prefix, frequent_item_sets)\n\n    # Check if the tree has a single path\n    def is_single_path(node):\n        while node.children:\n            node = node.children[next(iter(node.children))]\n            if len(node.children) > 1:\n                return False\n        return True\n\n    # Get all items in the path\n    def get_path_items(node):\n        path_items = []\n        while node.parent:\n            path_items.append(node.item)\n            node = node.parent\n        return path_items\n\n    # Get items from the header table in sorted order\n    def get_sorted_items(header_table):\n        return [item for item, count in sorted(header_table.items(), key=lambda x: (x[1][0], x[0]), reverse=True)]\n\n    # Find the conditional pattern base for a given item\n    def find_conditional_pattern_base(item, header_table):\n        conditional_pattern_base = []\n        node = header_table[item][1]\n        while node:\n            prefix_path = []\n            prefix_node = node.parent\n            while prefix_node.parent:\n                prefix_path.append(prefix_node.item)\n                prefix_node = prefix_node.parent\n            if prefix_path:\n                conditional_pattern_base.append((tuple(prefix_path), node.count))\n            node = node.link\n        return conditional_pattern_base\n\n    # Build the conditional FP-tree\n    def build_conditional_tree(conditional_pattern_base, header_table):\n        conditional_tree = FPNode()\n        for path, count in conditional_pattern_base:\n            insert_transaction(reversed(path), conditional_tree, header_table)\n        return conditional_tree\n\n    # Count item frequencies\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    \n    # Filter out items that do not meet the minimum support\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_sup}\n    \n    # Sort items by descending frequency and lexicographically\n    sorted_items = sorted(frequent_items.items(), key=lambda x: (-x[1], x[0]))\n    item_order = {item: i for i, (item, count) in enumerate(sorted_items)}\n    \n    # Sort transactions based on the item order\n    sorted_transactions = [sorted(transaction, key=lambda x: item_order[x], reverse=True) for transaction in transactions]\n    \n    # Build the FP-tree\n    fp_tree = FPNode()\n    header_table = build_header_table(frequent_items)\n    for transaction in sorted_transactions:\n        insert_transaction(transaction, fp_tree, header_table)\n    \n    # Mine the FP-tree\n    frequent_item_sets = set()\n    mine_tree(fp_tree, header_table, (), frequent_item_sets)\n    \n    # Convert the set of frequent item-sets to a sorted list\n    return sorted(frequent_item_sets, key=lambda x: (len(x), x))\n\n# Example usage:\ntransactions = [\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"A\", \"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"C\", \"D\", \"E\"],\n    [\"B\", \"C\", \"D\"]\n]\nmin_sup = 3\nprint(fp_growth(transactions, min_sup))\n```\n\nThis script implements the FP-Growth algorithm to find all frequent item-sets in a given set of transactions that meet a minimum support threshold. The function `fp_growth` takes a list of transactions and a minimum support value as input and returns a sorted list of frequent item-sets. The implementation includes helper functions for building the FP-tree, mining the tree, and handling conditional patterns."}
{"task_id": 492, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n\n    X = np.array(X)\n    n_samples, n_features = X.shape\n    feature_indices = range(n_features)\n    \n    # Generate all combinations of feature indices with replacement\n    # and filter them by the degree constraint\n    powers = []\n    for d in range(degree + 1):\n        powers.extend(combinations_with_replacement(feature_indices, d))\n    \n    # Construct the polynomial feature matrix\n    polynomial_matrix = []\n    for sample in X:\n        polynomial_row = [1]  # Start with the degree-0 term\n        for power in powers[1:]:  # Skip the empty tuple representing degree 0\n            term = 1\n            for feature_index in power:\n                term *= sample[feature_index]\n            polynomial_row.append(term)\n        polynomial_matrix.append(polynomial_row)\n    \n    return polynomial_matrix\n\n# Example usage:\n# X = [[1, 2], [3, 4]]\n# degree = 2\n# print(polynomial_features(X, degree))\n```\n\nThis script defines the `polynomial_features` function, which generates a polynomial feature matrix for a given input matrix `X` and a specified degree. The function uses `itertools.combinations_with_replacement` to generate all possible combinations of feature indices up to the specified degree, then computes the corresponding polynomial terms for each sample in the input matrix. The result is returned as a list of lists. If the degree is negative, the function returns `-1`."}
{"task_id": 493, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if not y:  # Check if the input is empty\n        return -1\n    \n    y = np.array(y)  # Convert to NumPy array if it's not already\n    y_mean = np.mean(y)  # Calculate the mean of the sample\n    mse_value = np.mean((y - y_mean) ** 2)  # Calculate the MSE\n    return round(mse_value, 4)  # Return the MSE rounded to 4 decimal places\n\n# Example usage:\n# print(mse([1, 2, 3, 4, 5]))  # Output: 2.0\n# print(mse([]))  # Output: -1\n```"}
{"task_id": 496, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Ensure x is a NumPy array\n    x = np.array(x, dtype=float)\n    \n    # Compute the affine activation\n    y = slope * x + intercept\n    \n    # Compute the first derivative (which is constant)\n    grad = np.full_like(x, slope)\n    \n    # Compute the second derivative (which is 0)\n    grad2 = np.zeros_like(x)\n    \n    # Round the results to 4 decimal places\n    y_rounded = np.round(y, 4).tolist()\n    grad_rounded = np.round(grad, 4).tolist()\n    grad2_rounded = np.round(grad2, 4).tolist()\n    \n    return y_rounded, grad_rounded, grad2_rounded\n\n# Example usage:\n# x = [1, 2, 3]\n# slope = 2.0\n# intercept = 1.0\n# result = apply_affine(x, slope, intercept)\n# print(result)  # Output: ([3.0, 5.0, 7.0], [2.0, 2.0, 2.0], [0.0, 0.0, 0.0])\n```\n\nThis script defines the `apply_affine` function as specified, which computes the affine activation and its derivatives for a given input vector `x`, with optional parameters `slope` and `intercept`. The results are rounded to four decimal places and returned as lists."}
{"task_id": 499, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    n_samples, n_features = data.shape\n    \n    if k < 1 or k > n_features:\n        return -1\n    \n    # Step 1: Standardise each feature\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0, ddof=1)  # Population variance with Bessel's correction\n    std[std == 0] = 1  # Avoid division by zero for zero variance features\n    standardized_data = (data - mean) / std\n    \n    # Step 2: Compute the sample covariance matrix\n    covariance_matrix = np.cov(standardized_data, rowvar=False)\n    \n    # Step 3: Perform eigen-decomposition\n    eigenvalues, eigenvectors = np.linalg.eigh(covariance_matrix)\n    \n    # Step 4: Sort eigenvalues in descending order and arrange eigenvectors\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    \n    # Step 5: Fix the sign of every eigenvector\n    max_abs_indices = np.argmax(np.abs(sorted_eigenvectors), axis=0)\n    signs = np.sign(sorted_eigenvectors[max_abs_indices, range(n_features)])\n    sorted_eigenvectors *= signs\n    \n    # Step 6: Project the standardised data on the first `k` eigenvectors\n    projection_matrix = sorted_eigenvectors[:, :k]\n    projected_data = standardized_data @ projection_matrix\n    \n    # Return the projected matrix rounded to four decimal places\n    return np.round(projected_data, 4).tolist()\n```\n\nThis script implements the PCA dimensionality reduction routine from scratch, following the specified steps and constraints. It handles the standardization of features, computes the covariance matrix, performs eigen-decomposition, sorts and fixes the eigenvectors, and finally projects the data onto the first `k` principal components. The result is rounded to four decimal places and returned as a nested list."}
{"task_id": 500, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    \n    # Convert inputs to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Initialize the model with the mean of the training labels\n    F = np.full_like(y_train, y_train.mean(), dtype=float)\n    \n    # Function to fit a decision stump to the residuals\n    def fit_stump(X, residuals):\n        best_feature, best_threshold, best_error, best_left_val, best_right_val = None, None, float('inf'), None, None\n        for feature in range(X.shape[1]):\n            unique_values = np.unique(X[:, feature])\n            for threshold in unique_values:\n                left_mask = X[:, feature] <= threshold\n                right_mask = X[:, feature] > threshold\n                left_val = np.mean(residuals[left_mask])\n                right_val = np.mean(residuals[right_mask])\n                error = np.sum((residuals[left_mask] - left_val) ** 2) + np.sum((residuals[right_mask] - right_val) ** 2)\n                if error < best_error:\n                    best_feature, best_threshold, best_error, best_left_val, best_right_val = feature, threshold, error, left_val, right_val\n        return best_feature, best_threshold, best_left_val, best_right_val\n    \n    # List to store the weak learners (stumps)\n    stumps = []\n    \n    # Boosting loop\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        feature, threshold, left_val, right_val = fit_stump(X_train, residuals)\n        h_m = lambda x: np.where(x[:, feature] <= threshold, left_val, right_val)\n        F += learning_rate * h_m(X_train)\n        stumps.append((feature, threshold, left_val, right_val))\n    \n    # Predict on the test set\n    F_test = np.full_like(X_test[:, 0], y_train.mean(), dtype=float)\n    for feature, threshold, left_val, right_val in stumps:\n        h_m = lambda x: np.where(x[:, feature] <= threshold, left_val, right_val)\n        F_test += learning_rate * h_m(X_test)\n    \n    # Convert the final scores to class labels by thresholding at 0.5\n    predictions = (F_test >= 0.5).astype(int)\n    \n    return predictions.tolist()\n```\n\nThis script implements a tiny Gradient Boosting binary classifier using decision stumps as weak learners. It minimizes the squared-error loss and predicts class labels by thresholding the final regression score at 0.5. The function `gradient_boosting_classifier` takes training and test data, the number of boosting stages, and the learning rate as inputs and returns the predicted class labels for the test data."}
{"task_id": 505, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n\n    m, n_v = X.shape\n    n_h = hbias.shape[0]\n\n    # Positive phase\n    h0_prob = 1 / (1 + np.exp(-(X @ W + hbias)))\n    pos_grad = X.T @ h0_prob\n\n    # Gibbs sampling (k steps)\n    v_k_prob = X.copy()\n    for _ in range(k):\n        h_k_prob = 1 / (1 + np.exp(-(v_k_prob @ W + hbias)))\n        v_k_prob = 1 / (1 + np.exp(-(h_k_prob @ W.T + vbias)))\n\n    neg_grad = v_k_prob.T @ h_k_prob\n\n    # Weight update\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n\n    # Return the updated weight matrix rounded to 4 decimal places as a list of lists\n    return np.round(W_new, 4).tolist()\n```\n\nThis script defines the `contrastive_divergence` function which performs a single weight update step for a binary Restricted Boltzmann Machine using the Contrastive Divergence (CD-k) algorithm. The function takes a mini-batch of visible vectors, the current weight matrix, visible and hidden bias vectors, the learning rate, and the number of Gibbs sampling steps as inputs. It returns the updated weight matrix rounded to 4 decimal places and converted to a plain Python list of lists. If the mini-batch is empty, it returns an empty list."}
{"task_id": 509, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Check if the lengths of the vectors are the same\n    if len(x) != len(y):\n        return -1\n    \n    # Compute the Chebyshev distance\n    distance = np.max(np.abs(x - y))\n    \n    # Return the distance rounded to four decimal places\n    return round(float(distance), 4)\n\n# Example usage\nx = [1, 2, 3]\ny = [2, 4, 6]\nprint(chebyshev(x, y))  # Output: 3.0\n```"}
{"task_id": 510, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    # Clip y_pred to avoid log(0) or log(1) issues\n    epsilon = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n    \n    # Compute the binary cross-entropy (Reconstruction Loss)\n    reconstruction_loss = -np.sum(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped))\n    \n    # Compute the KL Divergence\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var))\n    \n    # Compute the total loss\n    total_loss = reconstruction_loss + kl_divergence\n    \n    # Compute the mini-batch average\n    batch_size = y.shape[0]\n    average_loss = total_loss / batch_size\n    \n    # Return the average loss rounded to 6 decimal places\n    return round(average_loss, 6)\n```\n\nThis script defines the `vae_loss` function, which calculates the VAE loss for a mini-batch of data with Bernoulli visible units. It includes clipping of the reconstructed probabilities to ensure numerical stability, computes the binary cross-entropy for the reconstruction loss, calculates the KL divergence, and returns the average of these losses rounded to six decimal places."}
{"task_id": 513, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for efficient computation\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    \n    # Initialize predictions with the bias term\n    predictions = np.full(X.shape[0], w0)\n    \n    # Add the linear part of the model\n    predictions += X @ w\n    \n    # Add the interaction part of the model\n    interactions = (X @ V) ** 2 - (X ** 2) @ (V ** 2)\n    predictions += 0.5 * np.sum(interactions, axis=1)\n    \n    # Round the predictions to 4 decimal places\n    predictions = np.round(predictions, 4)\n    \n    return predictions.tolist()\n\n# Example usage:\n# X = [[1, 2, 3], [4, 5, 6]]\n# w0 = 0.1\n# w = [0.2, 0.3, 0.4]\n# V = [[0.5, 0.6], [0.7, 0.8], [0.9, 1.0]]\n# print(fm_predict(X, w0, w, V))\n```\n\nThis script defines the `fm_predict` function, which calculates the predictions for a batch of samples using the Factorization Machine regression formula. The function uses `numpy` for efficient numerical computations and ensures that the results are rounded to four decimal places."}
{"task_id": 517, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # Convert input to a NumPy array for element-wise operations\n    if isinstance(z, (int, float)):\n        z = np.array([z])\n    else:\n        z = np.array(z)\n    \n    # Compute the sigmoid in a numerically stable way\n    # For large positive z, use 1, and for large negative z, use 0\n    sigmoid_values = np.where(z > 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n    \n    # Round the results to four decimal places\n    sigmoid_values = np.round(sigmoid_values, 4)\n    \n    # If the input was a scalar, return a float, otherwise return a list\n    if isinstance(z, (int, float)):\n        return float(sigmoid_values[0])\n    else:\n        return sigmoid_values.tolist()\n\n# Example usage\nprint(sigmoid([-1, 0, 1]))  # Output: [0.2689, 0.5, 0.7311]\n```\n\nThis script defines the `sigmoid` function that handles different types of inputs, computes the sigmoid activation in a numerically stable manner, and returns the results rounded to four decimal places while preserving the input structure."}
{"task_id": 518, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        # Check and convert actual if it's one-hot encoded\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        \n        # Check and convert predicted if it's one-hot encoded\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        \n        # Call the original function with the converted arrays\n        return function(actual, predicted)\n    \n    return wrapper\n\n# Example usage\n@unhot\ndef accuracy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Simple accuracy rounded to 4 decimals.\"\"\"\n    return float(np.round(np.mean(actual == predicted), 4))\n\nactual    = np.array([[0,1,0], [1,0,0], [0,0,1]])  # one-hot\npredicted = np.array([[0,1,0], [0,1,0], [0,0,1]])  # one-hot\nprint(accuracy(actual, predicted))  # 0.6667\n```\n\nThis script defines the `unhot` decorator, which automatically converts one-hot encoded NumPy arrays to one-dimensional integer arrays before passing them to the wrapped metric function. The example usage demonstrates how the `accuracy` function works with one-hot encoded inputs."}
{"task_id": 520, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    def compute_gradient(value):\n        return np.round(value * (1 - value), 4)\n\n    if isinstance(z, (int, float)):\n        return compute_gradient(z)\n    elif isinstance(z, list):\n        if not z:  # Check for empty list\n            return []\n        return [sigmoid_grad(item) for item in z]\n    elif isinstance(z, np.ndarray):\n        return np.vectorize(compute_gradient)(z).tolist()\n    else:\n        raise ValueError(\"Input must be a float, list, or NumPy ndarray.\")\n\n# Example usage:\n# print(sigmoid_grad(0.5))  # Scalar input\n# print(sigmoid_grad([0.5, 0.7]))  # 1-D list input\n# print(sigmoid_grad([[0.5, 0.7], [0.3, 0.8]]))  # 2-D list input\n# print(sigmoid_grad(np.array([[0.5, 0.7], [0.3, 0.8]])))  # 2-D NumPy array input\n```\n\nThis script defines the `sigmoid_grad` function, which computes the derivative of the sigmoid function for a given input. The function handles scalar inputs, lists (including nested lists), and NumPy arrays, and returns the result in the same structure as the input. The results are rounded to four decimal places using `numpy.round`."}
{"task_id": 528, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Convert X to a NumPy array for easier manipulation\n    X = np.array(X)\n    \n    # Determine the range for x1 and x2\n    x1_min, x1_max = X[:, 0].min(), X[:, 0].max()\n    x2_min, x2_max = X[:, 1].min(), X[:, 1].max()\n    \n    # Create equally spaced arrays for x1 and x2\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    \n    # Create a meshgrid from these arrays\n    x1_grid, x2_grid = np.meshgrid(x1_plot, x2_plot)\n    \n    # Flatten the grid for easier computation\n    x1_flat = x1_grid.flatten()\n    x2_flat = x2_grid.flatten()\n    \n    # Compute the linear combination for each point\n    z = W[0] * x1_flat + W[1] * x2_flat + b\n    \n    # Apply the sign function to get the labels\n    labels_flat = np.sign(z)\n    \n    # Convert labels to 1 and -1 explicitly\n    labels_flat = np.where(labels_flat == 0, 1, labels_flat)\n    \n    # Reshape the labels back to the grid shape\n    labels_grid = labels_flat.reshape((grid_n, grid_n))\n    \n    # Convert the NumPy array to a list of lists\n    labels_list = labels_grid.tolist()\n    \n    return labels_list\n```\n\nThis script defines the `decision_boundary_grid` function, which generates a grid of predictions for a 2-D linear classifier. The function uses NumPy for efficient array operations and returns the predictions as a list of lists, as required."}
{"task_id": 537, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    # Constants\n    epsilon = 1e-9\n    \n    # Number of samples and features\n    n_samples, n_features = X_train.shape\n    \n    # Separate the data by class\n    X_train_0 = X_train[y_train == 0]\n    X_train_1 = X_train[y_train == 1]\n    \n    # Calculate class priors\n    prior_0 = len(X_train_0) / n_samples\n    prior_1 = len(X_train_1) / n_samples\n    \n    # Calculate means and standard deviations for each feature for both classes\n    mean_0 = np.mean(X_train_0, axis=0)\n    std_0 = np.std(X_train_0, axis=0) + epsilon\n    \n    mean_1 = np.mean(X_train_1, axis=0)\n    std_1 = np.std(X_train_1, axis=0) + epsilon\n    \n    # Function to calculate Gaussian probability\n    def gaussian_probability(x, mean, std):\n        return (1 / (np.sqrt(2 * np.pi) * std)) * np.exp(-0.5 * ((x - mean) / std) ** 2)\n    \n    # Predict for each test sample\n    predictions = []\n    for x in X_test:\n        # Calculate the posterior probability for class 0\n        posterior_0 = np.log(prior_0) + np.sum(np.log(gaussian_probability(x, mean_0, std_0)))\n        \n        # Calculate the posterior probability for class 1\n        posterior_1 = np.log(prior_1) + np.sum(np.log(gaussian_probability(x, mean_1, std_1)))\n        \n        # Predict the class with the higher posterior probability\n        prediction = 1 if posterior_1 > posterior_0 else 0\n        predictions.append(prediction)\n    \n    return predictions\n```\n\nThis script defines a function `gaussian_naive_bayes` that implements a Gaussian Naive Bayes classifier from scratch. It calculates the necessary parameters from the training data and uses them to predict the class labels for the test data. The function returns a list of predicted class labels (0 or 1) for each sample in `X_test`."}
{"task_id": 539, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\"\"\"\n    # Ensure AL and Y are NumPy arrays and have the same shape\n    AL = np.array(AL)\n    Y = np.array(Y)\n    assert AL.shape == Y.shape, \"AL and Y must have the same shape\"\n    \n    # Number of training examples\n    m = AL.shape[0]\n    \n    # Clip AL to avoid numerical issues with log\n    epsilon = 1e-15\n    AL = np.clip(AL, epsilon, 1 - epsilon)\n    \n    # Compute the binary cross-entropy cost\n    cost = -1 / m * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    \n    # Return the cost as a Python float rounded to 4 decimal places\n    return round(float(cost), 4)\n\n# Example usage:\n# AL = np.array([0.9, 0.1, 0.8, 0.2])\n# Y = np.array([1, 0, 1, 0])\n# print(compute_cost(AL, Y))  # Output should be a float rounded to 4 decimal places\n```\n\nThis script defines the `compute_cost` function, which calculates the binary cross-entropy cost for given model probabilities `AL` and true labels `Y`. It includes input validation, clipping to prevent numerical instability, and returns the cost as a float rounded to four decimal places."}
{"task_id": 552, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    T = len(observations)\n    N = len(pi)  # Number of states\n\n    if t < 0 or t >= T:\n        return []\n\n    # Forward probabilities\n    alpha = np.zeros((T, N))\n    alpha[0] = pi * B[:, observations[0]]\n    for i in range(1, T):\n        alpha[i] = (alpha[i - 1] @ A) * B[:, observations[i]]\n\n    # Backward probabilities\n    beta = np.zeros((T, N))\n    beta[T - 1] = np.ones(N)\n    for i in range(T - 2, -1, -1):\n        beta[i] = A @ (B[:, observations[i + 1]] * beta[i + 1])\n\n    # Posterior probabilities\n    gamma = alpha[t] * beta[t]\n    gamma /= np.sum(gamma)\n\n    return [round(prob, 4) for prob in gamma]\n\n# Example usage:\n# hmm = {\n#     'pi': [0.6, 0.4],\n#     'A': [[0.7, 0.3], [0.4, 0.6]],\n#     'B': [[0.5, 0.4, 0.1], [0.1, 0.3, 0.6]]\n# }\n# observations = [0, 1, 2]\n# t = 1\n# print(gamma_probabilities(hmm, observations, t))\n```\n\nThis script defines a function `gamma_probabilities` that calculates the posterior state distribution \u03b3\u209c for a given Hidden Markov Model (HMM), observation sequence, and time index `t`. The function uses the forward-backward algorithm to compute the necessary probabilities and returns the result rounded to four decimal places. If `t` is out of bounds, it returns an empty list."}
{"task_id": 555, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import deque\nfrom scipy.spatial.distance import cdist\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples  # Initialize labels as noise (-1)\n    \n    # Compute pairwise Euclidean distances\n    distance_matrix = cdist(data, data, 'euclidean')\n    \n    # Build the neighborhood list for each sample\n    neighbors = [np.where(distance_matrix[i] <= eps)[0] for i in range(n_samples)]\n    \n    # Identify core points\n    core_points = [i for i, neighborhood in enumerate(neighbors) if len(neighborhood) >= min_samples]\n    \n    cluster_id = 0\n    \n    for core_point in core_points:\n        if labels[core_point] != -1:  # If it's already labeled, skip\n            continue\n        \n        cluster_id += 1\n        labels[core_point] = cluster_id\n        queue = deque([core_point])\n        \n        while queue:\n            current_point = queue.popleft()\n            \n            for neighbor in neighbors[current_point]:\n                if labels[neighbor] == -1:  # Label noise points as the current cluster\n                    labels[neighbor] = cluster_id\n                \n                if labels[neighbor] != -1:  # Skip if it's already labeled\n                    continue\n                \n                if len(neighbors[neighbor]) >= min_samples:  # If it's a core point, expand the cluster\n                    labels[neighbor] = cluster_id\n                    queue.append(neighbor)\n    \n    return labels\n\n# Example usage:\nif __name__ == \"__main__\":\n    data = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\n    eps = 3\n    min_samples = 2\n    labels = dbscan(data, eps, min_samples)\n    print(labels)  # Output: [1, 1, 1, 2, 2, -1]\n```\n\nThis script implements the DBSCAN algorithm from scratch, following the provided task description. It uses `scipy.spatial.distance.cdist` to compute the pairwise Euclidean distances between points, which is efficient for this purpose. The algorithm then builds the neighborhood list for each point, identifies core points, and uses a breadth-first search (BFS) to expand clusters starting from each unlabeled core point. Points that are not part of any cluster are labeled as noise (-1)."}
{"task_id": 561, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"\n    Implements the Expectation-Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n\n    Parameters:\n    - data: np.ndarray of shape (N, D) containing N samples with D features.\n    - k: int, the number of Gaussian components.\n    - max_iter: int, the maximum number of iterations.\n    - epsilon: float, the tolerance for convergence.\n\n    Returns:\n    - A list of length N containing the final cluster label of each sample.\n    \"\"\"\n    N, D = data.shape\n    \n    if k == 1:\n        return [0] * N\n\n    # Step 1: Initialize parameters\n    np.random.seed(0)  # For reproducibility\n    weights = np.ones(k) / k\n    means = data[np.random.choice(N, k, replace=False)]\n    covariances = [np.eye(D) for _ in range(k)]\n\n    def multivariate_gaussian(x, mean, cov):\n        det_cov = np.linalg.det(cov)\n        inv_cov = np.linalg.inv(cov)\n        diff = x - mean\n        exponent = -0.5 * np.dot(diff.T, np.dot(inv_cov, diff))\n        return (1.0 / (np.sqrt((2 * np.pi) ** D * det_cov))) * np.exp(exponent)\n\n    for iteration in range(max_iter):\n        # Step 2: Expectation (E-step)\n        responsibilities = np.zeros((N, k))\n        for i in range(N):\n            for j in range(k):\n                responsibilities[i, j] = weights[j] * multivariate_gaussian(data[i], means[j], covariances[j])\n            responsibilities[i] /= np.sum(responsibilities[i])\n\n        # Step 3: Maximization (M-step)\n        new_weights = np.sum(responsibilities, axis=0) / N\n        new_means = np.dot(responsibilities.T, data) / np.sum(responsibilities, axis=0, keepdims=True)\n        new_covariances = np.zeros((k, D, D))\n        for j in range(k):\n            diff = data - new_means[j]\n            weighted_sum = np.dot(responsibilities[:, j] * diff.T, diff)\n            new_covariances[j] = weighted_sum / np.sum(responsibilities[:, j])\n\n        # Check for convergence\n        if np.allclose(weights, new_weights, atol=epsilon):\n            break\n\n        weights, means, covariances = new_weights, new_means, new_covariances\n\n    # Assign each sample to the component with the largest posterior probability\n    labels = np.argmax(responsibilities, axis=1)\n\n    # Sort components by the first coordinate of their mean and re-label\n    sorted_indices = np.argsort(means[:, 0])\n    labels = np.array([sorted_indices[label] for label in labels])\n\n    return labels.tolist()\n```\n\nThis script implements the EM algorithm for a Gaussian Mixture Model, initializing parameters randomly and iterating until convergence or a maximum number of iterations is reached. The final labels are sorted by the first coordinate of the means to ensure determinism."}
{"task_id": 562, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n\n    # Step 1: Build the similarity graph using Gaussian kernel\n    N = data.shape[0]\n    W = np.zeros((N, N))\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                continue\n            diff = data[i] - data[j]\n            dist_sq = np.sum(diff * diff)\n            W[i, j] = np.exp(-gamma * dist_sq)\n\n    # Step 2: Construct the Laplacian matrix\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n\n    if method == 'normalized':\n        D_inv_sqrt = np.diag(1.0 / np.sqrt(np.sum(W, axis=1)))\n        L = D_inv_sqrt @ L @ D_inv_sqrt\n\n    # Step 3: Compute the eigenvectors corresponding to the n_cluster smallest eigenvalues\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    sorted_indices = np.argsort(eigenvalues)\n    selected_eigenvectors = eigenvectors[:, sorted_indices[:n_cluster]]\n\n    if method == 'normalized':\n        # Row-normalize the eigenvector matrix\n        norms = np.linalg.norm(selected_eigenvectors, axis=1, keepdims=True)\n        selected_eigenvectors /= norms\n\n    # Step 4: Run k-means on the embedded data\n    def kmeans(X, k):\n        centroids = X[:k]\n        labels = np.zeros(X.shape[0], dtype=int)\n        while True:\n            # Assign labels\n            for i, point in enumerate(X):\n                distances = np.linalg.norm(point - centroids, axis=1)\n                labels[i] = np.argmin(distances)\n            # Update centroids\n            new_centroids = np.array([X[labels == j].mean(axis=0) for j in range(k)])\n            if np.all(centroids == new_centroids):\n                break\n            centroids = new_centroids\n        return labels\n\n    labels = kmeans(selected_eigenvectors, n_cluster)\n\n    # Step 5: Reorder labels to ensure the smallest original index gets label 0\n    unique_labels = np.unique(labels)\n    label_mapping = {old_label: new_label for new_label, old_label in enumerate(unique_labels)}\n    labels = [label_mapping[label] for label in labels]\n\n    return labels\n```\n\nThis script implements the Spectral Clustering algorithm as described, without using any third-party machine learning libraries. It constructs the similarity graph, computes the Laplacian matrix, finds the smallest eigenvectors, and applies a deterministic k-means clustering on the eigenvector space. Finally, it reorders the labels to ensure consistency."}
{"task_id": 563, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = len(y_data)\n    alpha = np.zeros(N)\n    b = 0.0\n    \n    # Build the Gram matrix G\n    G = np.dot(X_data, X_data.T)\n    \n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            # Compute g = \u03a3\u2c7c \u03b1\u2c7c y\u2c7c G[j, i]\n            g = np.sum(alpha * y_data * G[:, i])\n            \n            # Check if the update condition is met\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        \n        # If no updates were made, the algorithm has converged\n        if not updated:\n            break\n    \n    # Recover the weight vector w\n    w = np.sum(alpha * y_data[:, np.newaxis] * X_data, axis=0)\n    \n    # Round the weight vector and bias to 4 decimal places\n    w_rounded = [round(wi, 4) for wi in w]\n    b_rounded = round(b, 4)\n    \n    return w_rounded, b_rounded\n```\n\nThis script defines the `perceptron_dual_train` function according to the specified requirements. It constructs the Gram matrix, iteratively updates the alpha coefficients and bias, and finally computes the weight vector. The results are rounded to four decimal places before being returned."}
{"task_id": 564, "completion_id": 0, "completion": "```\npython\nclass Node:\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label\n        self.x = x\n        self.s = s\n        self.y = y\n        self.child = child if child is not None else []\n\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    current_node = root\n    \n    while current_node.y is None:\n        if task_type == 'classification':\n            feature_value = features[current_node.label]\n            found_child = False\n            for child in current_node.child:\n                if child.x == feature_value:\n                    current_node = child\n                    found_child = True\n                    break\n            if not found_child:\n                current_node = current_node.child[1]\n        elif task_type == 'regression':\n            feature_value = features[current_node.label]\n            if feature_value <= current_node.s:\n                current_node = current_node.child[0]\n            else:\n                current_node = current_node.child[1]\n    \n    return current_node.y\n\n# Example usage:\n# root = Node(label=0, child=[\n#     Node(x=0, y='class1'),\n#     Node(x=1, child=[\n#         Node(label=1, child=[\n#             Node(x=0, y='class2'),\n#             Node(x=1, y='class3')\n#         ])\n#     ])\n# ])\n# print(predict_sample(root, [1, 0], 'classification'))  # Output: 'class2'\n```\n\nThis script defines the `Node` class and the `predict_sample` function, which traverses a decision tree to predict the class or value of a given sample based on the tree's structure and the sample's feature values. The function handles both classification and regression tasks as specified."}
{"task_id": 565, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    \n    def entropy(labels):\n        value_counts = np.bincount(labels)\n        probabilities = value_counts / len(labels)\n        return -np.sum(probabilities * np.log2(probabilities + 1e-9))\n    \n    def conditional_entropy(X_feature, y):\n        unique_values = np.unique(X_feature)\n        total_entropy = 0.0\n        for value in unique_values:\n            mask = X_feature == value\n            subset_labels = y[mask]\n            subset_entropy = entropy(subset_labels)\n            subset_weight = len(subset_labels) / len(y)\n            total_entropy += subset_weight * subset_entropy\n        return total_entropy\n    \n    n_samples, n_features = X.shape\n    base_entropy = entropy(y)\n    max_gain = -1.0\n    best_feature_index = -1\n    \n    for feature_index in range(n_features):\n        X_feature = X[:, feature_index]\n        feature_gain = base_entropy - conditional_entropy(X_feature, y)\n        if feature_gain > max_gain:\n            max_gain = feature_gain\n            best_feature_index = feature_index\n    \n    return (best_feature_index, round(max_gain, 6))\n\n# Example usage:\n# X = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 1], [1, 0, 0]])\n# y = np.array([0, 1, 1, 0])\n# print(choose_best_feature(X, y))  # Output should be the feature index with max information gain\n```\n\nThis script defines the `choose_best_feature` function, which calculates the information gain for each feature in the dataset and returns the feature with the maximum gain. The information gain is calculated using the entropy of the labels and the conditional entropy after splitting the dataset by each feature's values. The result is rounded to six decimal places as required."}
{"task_id": 566, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    \n    def c(n):\n        if n == 1:\n            return 0\n        return 2 * np.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n    \n    def expected_path_length(n):\n        if n <= 1:\n            return 0\n        return c(n) + 2 * (np.log(n - 1) - (n - 1) / n)\n    \n    def grow_tree(data, height_limit):\n        if len(data) <= 1 or height_limit == 0:\n            return {'size': len(data)}\n        \n        feature_index = np.random.randint(data.shape[1])\n        feature_min, feature_max = data[:, feature_index].min(), data[:, feature_index].max()\n        \n        if feature_min == feature_max:\n            return {'size': len(data)}\n        \n        threshold = np.random.uniform(feature_min, feature_max)\n        left_indices = data[:, feature_index] < threshold\n        right_indices = data[:, feature_index] >= threshold\n        \n        left_tree = grow_tree(data[left_indices], height_limit - 1)\n        right_tree = grow_tree(data[right_indices], height_limit - 1)\n        \n        return {'feature_index': feature_index, \n                'threshold': threshold, \n                'left': left_tree, \n                'right': right_tree}\n    \n    def path_length(x, tree, current_height):\n        if 'size' in tree:\n            return current_height + c(tree['size'])\n        \n        feature_index = tree['feature_index']\n        threshold = tree['threshold']\n        \n        if x[feature_index] < threshold:\n            return path_length(x, tree['left'], current_height + 1)\n        else:\n            return path_length(x, tree['right'], current_height + 1)\n    \n    height_limit = math.ceil(np.log2(sample_size))\n    trees = [grow_tree(data[np.random.choice(data.shape[0], min(sample_size, data.shape[0]), replace=False)], height_limit) for _ in range(n_trees)]\n    \n    path_lengths = np.zeros(data.shape[0])\n    for i, x in enumerate(data):\n        path_lengths[i] = np.mean([path_length(x, tree, 0) for tree in trees])\n    \n    expected_avg_path_length = expected_path_length(min(sample_size, data.shape[0]))\n    anomaly_scores = 2 ** (-path_lengths / expected_avg_path_length)\n    \n    threshold = np.percentile(anomaly_scores, 100 * (1 - epsilon))\n    outliers = np.where(anomaly_scores >= threshold)[0]\n    \n    return sorted(outliers.tolist())\n```\n\nThis script implements a mini Isolation Forest for outlier detection as specified. It includes functions to grow the isolation trees, calculate path lengths, and determine anomaly scores. The function `detect_outliers` returns the indices of the detected outliers, sorted in ascending order."}
{"task_id": 568, "completion_id": 0, "completion": "```\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    # Step 1: Build empirical distributions\n    num_samples, num_features = X_train.shape\n    labels = set(y_train)\n    feature_count = defaultdict(int)\n    empirical_joint = defaultdict(int)\n    empirical_marginal_y = defaultdict(int)\n    \n    for x, y in zip(X_train, y_train):\n        empirical_marginal_y[y] += 1\n        for feature_index, feature_value in enumerate(x):\n            feature_count[(feature_index, feature_value)] += 1\n            empirical_joint[(feature_index, feature_value, y)] += 1\n    \n    # Convert counts to probabilities\n    empirical_marginal_y = {y: count / num_samples for y, count in empirical_marginal_y.items()}\n    empirical_joint = {k: v / num_samples for k, v in empirical_joint.items()}\n    \n    # Step 2: Initialize weights and expectations\n    weights = defaultdict(float)\n    expected_counts = defaultdict(float)\n    \n    # Step 3: Generalized Iterative Scaling (GIS)\n    for iteration in range(n_iter):\n        # Calculate expected counts\n        expected_counts.clear()\n        for y in labels:\n            for feature_index in range(num_features):\n                for feature_value in set(X_train[:, feature_index]):\n                    z_x = sum(math.exp(sum(weights[(j, fv, y)] for j, fv in enumerate(x))) for x in X_train if x[feature_index] == feature_value)\n                    expected_counts[(feature_index, feature_value, y)] = sum(\n                        math.exp(sum(weights[(j, fv, y)] for j, fv in enumerate(x))) / z_x\n                        for x, y_train in zip(X_train, y_train) if x[feature_index] == feature_value and y_train == y\n                    )\n        \n        # Update weights\n        max_update = 0\n        for (feature_index, feature_value, y) in expected_counts:\n            empirical_count = empirical_joint[(feature_index, feature_value, y)] * num_samples\n            update = math.log(empirical_count / expected_counts[(feature_index, feature_value, y)])\n            weights[(feature_index, feature_value, y)] += update\n            max_update = max(max_update, abs(update))\n        \n        # Check for convergence\n        if max_update < epsilon:\n            break\n    \n    # Step 4: Predict labels for test set\n    predictions = []\n    for x in X_test:\n        max_prob = -float('inf')\n        predicted_label = None\n        for y in labels:\n            score = 0\n            for feature_index, feature_value in enumerate(x):\n                score += weights[(feature_index, feature_value, y)]\n            prob = math.exp(score) / sum(math.exp(sum(weights[(j, fv, y)] for j, fv in enumerate(x))) for x in X_train)\n            if prob > max_prob:\n                max_prob = prob\n                predicted_label = y\n        predictions.append(predicted_label)\n    \n    return predictions\n```\n\nThis script implements the Maximum Entropy Classifier using the Generalized Iterative Scaling (GIS) algorithm. It constructs the necessary empirical distributions, iteratively updates the weights, and finally predicts the labels for the test set. The implementation adheres to the constraints provided, using only the standard library, `numpy`, and `math`."}
{"task_id": 569, "completion_id": 0, "completion": "```\npython\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    total_documents = len(data)\n    word_doc_count = Counter()\n\n    # Track which words appear in which documents\n    for _, words in data:\n        unique_words = set(words)\n        word_doc_count.update(unique_words)\n\n    # Calculate document-frequency ratio for each word\n    word_freq_ratios = [(word, round(count / total_documents, 4)) for word, count in word_doc_count.items()]\n\n    # Sort words by their document-frequency ratio in descending order\n    word_freq_ratios.sort(key=lambda x: x[1], reverse=True)\n\n    # Determine the set of the most frequent words\n    if cut_off is None:\n        most_frequent_words = set(word for word, _ in word_freq_ratios)\n    else:\n        most_frequent_words = set(word for word, _ in word_freq_ratios[:cut_off])\n\n    return word_freq_ratios, most_frequent_words\n\n\n# Example usage:\ndocuments = [\n    (1, [\"apple\", \"banana\", \"apple\"]),\n    (2, [\"banana\", \"cherry\"]),\n    (3, [\"apple\", \"cherry\", \"banana\", \"date\"]),\n    (4, [\"date\", \"fig\", \"grape\"])\n]\n\nresult = statistic_key_word(documents, cut_off=3)\nprint(result)\n```\n\nThis script defines the `statistic_key_word` function, which calculates the document-frequency ratio for each word across a collection of documents and returns a sorted list of these ratios along with a set of the most frequent words based on the specified `cut_off`. The example usage demonstrates how to call the function with a sample list of documents."}
{"task_id": 571, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute the weight vector w\n    w = np.dot(X.T, alpha * y)\n    \n    # Compute the bias term b\n    b = np.mean(y - np.dot(X, w))\n    \n    # Round the weight vector and bias term to 4 decimal places\n    w_list = [round(weight, 4) for weight in w]\n    b = round(b, 4)\n    \n    return w_list, b\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 3], [2, 1], [3, 2]])\n# y = np.array([1, 1, 1, -1, -1])\n# alpha = np.array([0.0, 0.5, 0.5, 0.0, 0.0])\n# w, b = compute_svm_parameters(X, y, alpha)\n# print(\"Weight vector:\", w)\n# print(\"Bias term:\", b)\n```\n\nThis script defines the `compute_svm_parameters` function, which calculates the weight vector and bias term for a linear SVM using the provided training data, labels, and Lagrange multipliers. The results are rounded to four decimal places as specified."}
{"task_id": 572, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Implement the Local Outlier Factor (LOF) algorithm from scratch.\"\"\"\n    \n    # Step 1: Compute the full pair-wise Euclidean distance matrix\n    n = len(data)\n    distance_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i + 1, n):\n            distance = np.sqrt(np.sum((data[i] - data[j]) ** 2))\n            distance_matrix[i, j] = distance\n            distance_matrix[j, i] = distance\n    \n    # Step 2: For every sample p obtain its k-distance and the index list of those k nearest neighbours N_k(p)\n    k_distances = np.zeros(n)\n    k_neighbors = [None] * n\n    for i in range(n):\n        distances = distance_matrix[i]\n        sorted_indices = np.argsort(distances)[1:k+1]  # Exclude the point itself\n        k_distances[i] = distances[sorted_indices[-1]]\n        k_neighbors[i] = sorted_indices\n    \n    # Step 3: Define the reachability distance between two points\n    def reachability_distance(p, q):\n        return max(k_distances[q], distance_matrix[p, q])\n    \n    # Step 4: The Local Reachability Density (LRD) of p\n    lrd = np.zeros(n)\n    for i in range(n):\n        sum_reach_dist = 0\n        for neighbor in k_neighbors[i]:\n            sum_reach_dist += reachability_distance(i, neighbor)\n        lrd[i] = k / sum_reach_dist if sum_reach_dist != 0 else 0\n    \n    # Step 5: The Local Outlier Factor is\n    lof_scores = np.zeros(n)\n    for i in range(n):\n        sum_lrd_neighbors = 0\n        for neighbor in k_neighbors[i]:\n            sum_lrd_neighbors += lrd[neighbor]\n        lof_scores[i] = (sum_lrd_neighbors / k) / lrd[i] if lrd[i] != 0 else 0\n    \n    # Round every LOF score to the nearest 4th decimal place\n    lof_scores_rounded = np.round(lof_scores, 4).tolist()\n    \n    # List of indices of all samples whose LOF score is strictly larger than epsilon\n    outlier_indices = [i for i, score in enumerate(lof_scores) if score > epsilon]\n    outlier_indices.sort()\n    \n    return lof_scores_rounded, outlier_indices\n\n# Example usage:\n# data = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\n# k = 3\n# epsilon = 1.5\n# print(local_outlier_factor(data, k, epsilon))\n```\n\nThis script implements the Local Outlier Factor (LOF) algorithm from scratch without relying on any external libraries like `scipy` or `sklearn`. It computes the necessary components such as the distance matrix, k-distances, reachability distances, local reachability densities, and finally the LOF scores. The function returns the LOF scores rounded to four decimal places and a list of indices of samples that are considered outliers based on the given epsilon threshold."}
{"task_id": 574, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n\n    X_train = []\n    X_val = []\n    y_train = []\n    y_val = []\n\n    for c in range(m):\n        base = 10 * (c // 2)\n        x_train = np.random.uniform(base + 1, base + 9, n_train)\n        y_train = np.random.uniform(base + 1, base + 9, n_train)\n        X_train.append(np.column_stack((x_train, y_train)))\n        y_train.extend([c] * n_train)\n\n        x_val = np.random.uniform(base + 1, base + 9, n_val)\n        y_val = np.random.uniform(base + 1, base + 9, n_val)\n        X_val.append(np.column_stack((x_val, y_val)))\n        y_val.extend([c] * n_val)\n\n    X_train = np.round(np.concatenate(X_train), 4)\n    X_val = np.round(np.concatenate(X_val), 4)\n    y_train = np.array(y_train)\n    y_val = np.array(y_val)\n\n    return X_train, X_val, y_train, y_val\n```\n\nThis script defines the `generate_data` function which generates synthetic 2-D data for a specified number of classes, with a given number of training and validation points per class. The coordinates are sampled from a uniform distribution within specified bounds and rounded to four decimal places. The function also supports setting a random seed for reproducibility."}
{"task_id": 579, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    # Step 1: Initialization\n    centres = X[:k].copy()\n    \n    for _ in range(max_iters):\n        # Step 2: Assignment step\n        labels = []\n        for point in X:\n            distances = np.linalg.norm(point - centres, axis=1)\n            min_index = np.argmin(distances)\n            labels.append(min_index)\n        \n        # Step 3: Update step\n        new_centres = np.array([X[labels == i].mean(axis=0) for i in range(k)])\n        \n        # Check for convergence\n        if np.allclose(centres, new_centres, atol=1e-4):\n            break\n        \n        centres = new_centres\n    \n    # Round the centres to 4 decimal places\n    centres = np.round(centres, 4).tolist()\n    \n    return labels, centres\n\n# Example usage:\n# X = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# k = 2\n# labels, centres = kmeans(X, k)\n# print(\"Labels:\", labels)\n# print(\"Centres:\", centres)\n```\n\nThis script implements the K-Means clustering algorithm as described, using the first `k` points as initial centroids and iterating until convergence or the maximum number of iterations is reached. The final centroids are rounded to four decimal places for consistency."}
{"task_id": 581, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to four decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    m, n = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n\n    if learning_rate == 0 or iterations == 0:\n        return [round(w, 4) for w in weights], round(bias, 4)\n\n    for _ in range(iterations):\n        predictions = np.dot(X, weights) + bias\n        residuals = y - predictions\n\n        # Compute the gradient for weights and bias\n        gradient_weights = -2 * np.dot(X.T, residuals) + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights\n        gradient_bias = -2 * np.sum(residuals)\n\n        # Update weights and bias\n        weights -= (learning_rate / m) * gradient_weights\n        bias -= (learning_rate / m) * gradient_bias\n\n    return [round(w, 4) for w in weights], round(bias, 4)\n```\n\nThis script defines the `elastic_net_regression` function, which performs Elastic-Net regularized linear regression using batch gradient descent. The function initializes the weights and bias to zero, checks for edge cases where the learning rate or number of iterations is zero, and then iteratively updates the weights and bias using the specified gradients. The final weights and bias are rounded to four decimal places before being returned."}
{"task_id": 591, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    # Convert input to a numpy array for easier manipulation\n    x = np.array(x)\n    \n    # Iterate over each layer in the network\n    for L in range(len(weights)):\n        # Add the bias term to the input\n        x = np.insert(x, 0, 1)\n        \n        # Convert the current layer's weights to a numpy array\n        weights_L = np.array(weights[L])\n        \n        # Perform a dot product with the weight matrix\n        x = np.dot(weights_L, x)\n        \n        # Apply ReLU activation to the result, except for the last layer\n        if L < len(weights) - 1:\n            x = np.maximum(0, x)\n    \n    # Round the final output to four decimal places\n    if len(x) == 1:\n        return round(x[0], 4)\n    else:\n        return [round(val, 4) for val in x]\n\n# Example usage:\n# weights = [\n#     [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]],  # Layer 0\n#     [[0.7, 0.8, 0.9]]                    # Layer 1\n# ]\n# x = [0.5, 0.5]\n# print(neural_net_predict(weights, x))  # Example call\n```\n\nThis script defines the `neural_net_predict` function, which performs a forward pass through a fully-connected feed-forward neural network using the provided weights and input vector. The function applies the ReLU activation function to all hidden layers and a linear activation function to the output layer, rounding the final result to four decimal places."}
{"task_id": 595, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Your task: implement here. See docstring in the description.\"\"\"\n    \n    # Step 1: Initialize centroids with the first k samples in X\n    centroids = X[:k].copy()\n    \n    for _ in range(max_iters):\n        # Step 2: Assign every sample to the nearest centroid\n        distances = np.sum((X[:, np.newaxis] - centroids) ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Step 3: Update each centroid\n        new_centroids = np.array([X[labels == i].mean(axis=0) if np.any(labels == i) else centroids[i] for i in range(k)])\n        \n        # Step 4: Check for convergence\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 1e-4):\n            break\n        \n        centroids = new_centroids\n    \n    # Step 5: Sort centroids lexicographically and round to 4 decimal places\n    sorted_centroids = sorted(centroids, key=lambda x: tuple(x))\n    rounded_centroids = np.round(sorted_centroids, 4).tolist()\n    \n    return rounded_centroids\n\n# Example usage:\n# X = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# k = 2\n# print(kmeans_centroids(X, k))\n```\n\nThis script implements the K-Means clustering algorithm from scratch, following the specified requirements. It initializes centroids using the first `k` samples, iteratively assigns samples to the nearest centroid, updates centroids, checks for convergence, and finally sorts and rounds the centroids before returning them."}
