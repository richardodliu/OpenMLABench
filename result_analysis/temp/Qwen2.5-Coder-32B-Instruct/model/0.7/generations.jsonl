{"task_id": 0, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Implement Ridge (L2-regularised) Linear Regression using its closed-form solution.\n    \n    Parameters:\n    - data: np.ndarray where the last column is the target y and all preceding columns are the features X.\n    - alpha: float, the regularisation strength (default is 0.0).\n    \n    Returns:\n    - A list of rounded weight vector coefficients if the matrix is invertible, otherwise -1.\n    \"\"\"\n    # Split the data into features X and target y\n    X = data[:, :-1]\n    y = data[:, -1]\n    \n    # Add a bias term (intercept) to X\n    X_b = np.c_[np.ones((X.shape[0], 1)), X]\n    \n    # Compute the regularised weight vector using the closed-form solution\n    I = np.identity(X_b.shape[1])  # Identity matrix of appropriate size\n    try:\n        # Compute the inverse of (X_b^T * X_b + alpha * I)\n        inv_matrix = np.linalg.inv(X_b.T @ X_b + alpha * I)\n        \n        # Compute the weight vector\n        w = inv_matrix @ X_b.T @ y\n        \n        # Return the weight vector rounded to 4 decimal places as a list\n        return [round(coef, 4) for coef in w]\n    except np.linalg.LinAlgError:\n        # If the matrix is not invertible, return -1\n        return -1\n\n# Example usage:\n# data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n# alpha = 0.1\n# print(ridge_regression(data, alpha))\n```\n\nThis script defines a function `ridge_regression` that performs Ridge Regression using the closed-form solution. It handles the addition of a bias term, computes the necessary matrices, and checks for invertibility. If the matrix is not invertible, it returns `-1`. Otherwise, it returns the weight vector rounded to four decimal places."}
{"task_id": 1, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n\n    # Compute the Gram matrix\n    K = np.dot(X_train, X_train.T)\n\n    updates = 0\n    converged = False\n\n    while not converged and updates < n_iter:\n        converged = True\n        for i in range(n_samples):\n            # Compute the activation\n            activation = np.sum(alpha * y_train * K[:, i])\n            margin = y_train[i] * (activation + b)\n\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                converged = False\n                updates += 1\n                break  # Restart the scan\n\n    # Compute the primal weight vector w\n    w = np.sum(alpha * y_train[:, np.newaxis] * X_train, axis=0)\n\n    return [round(wi, 4) for wi in w], round(b, 4)\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 3], [2, 1], [3, 2]])\n# y_train = np.array([1, 1, 1, -1, -1])\n# w, b = perceptron_dual(X_train, y_train)\n# print(\"Weight vector w:\", w)\n# print(\"Bias b:\", b)\n```\n\nThis script defines the `perceptron_dual` function which implements the dual-form perceptron learning algorithm. The function takes training data `X_train` and labels `y_train`, and optional parameters `eta` (learning rate) and `n_iter` (maximum number of updates). It returns the learned weight vector `w` and bias `b`, both rounded to four decimal places."}
{"task_id": 2, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1 / (1 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return 1 / (mu * (1 - mu))\n\n    return {\n        \"identity\": {\n            \"link\": identity_link,\n            \"inv_link\": identity_inv_link,\n            \"derivative\": identity_derivative\n        },\n        \"log\": {\n            \"link\": log_link,\n            \"inv_link\": log_inv_link,\n            \"derivative\": log_derivative\n        },\n        \"logit\": {\n            \"link\": logit_link,\n            \"inv_link\": logit_inv_link,\n            \"derivative\": logit_derivative\n        }\n    }\n\n# Example usage:\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links[\"logit\"][\"link\"](mu)        # \u2192 [-1.3863, 1.3863]\nmu2 = links[\"logit\"][\"inv_link\"](eta)    # \u2192 [0.2, 0.8]\n\nprint(\"eta (logit link):\", np.round(eta, 4))\nprint(\"mu2 (logit inv_link):\", np.round(mu2, 4))\n```\n\nThis script defines the required GLM link functions and their inverses and derivatives for the identity, log, and logit links. The functions are designed to handle numpy scalars and arrays element-wise. The example usage demonstrates how to use the returned dictionary of functions."}
{"task_id": 3, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    \n    def build_tree(indices):\n        if len(indices) < 3:\n            return indices  # Leaf node\n        \n        # Choose a feature index uniformly at random\n        f = np.random.choice(data.shape[1])\n        \n        # Determine the range for the split value\n        down = np.min(data[indices, f])\n        up = np.max(data[indices, f])\n        \n        # Draw a random split value\n        v = np.random.uniform(down, up)\n        \n        # Split the indices based on the split value\n        left_indices = indices[data[indices, f] <= v]\n        right_indices = indices[data[indices, f] > v]\n        \n        # Recursively build the left and right subtrees\n        left_child = build_tree(left_indices)\n        right_child = build_tree(right_indices)\n        \n        return (left_child, right_child)\n    \n    def traverse_tree(node, depth=0):\n        if isinstance(node, np.ndarray):  # Leaf node\n            for index in node:\n                depths[index] = depth\n        else:  # Internal node\n            left_child, right_child = node\n            traverse_tree(left_child, depth + 1)\n            traverse_tree(right_child, depth + 1)\n    \n    # Initialize the list to store depths\n    depths = [-1] * data.shape[0]\n    \n    # Build the isolation tree\n    root = build_tree(np.arange(data.shape[0]))\n    \n    # Traverse the tree to record depths\n    traverse_tree(root)\n    \n    return depths\n\n# Example usage\ndata = np.arange(5).reshape(-1, 1)\nprint(isolation_tree_path_length(data))  # Output: [2, 2, 2, 1, 1]\n```"}
{"task_id": 7, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    min_support_count = math.ceil(minsup * N)\n    \n    # Step 1: Generate all unique items\n    unique_items = set(item for transaction in transactions for item in transaction)\n    \n    # Step 2: Generate all possible itemsets\n    all_itemsets = []\n    for r in range(1, len(unique_items) + 1):\n        all_itemsets.extend(combinations(unique_items, r))\n    \n    # Step 3: Count the support of each itemset\n    itemset_support = Counter()\n    for transaction in transactions:\n        transaction_items = set(transaction)\n        for itemset in all_itemsets:\n            if set(itemset).issubset(transaction_items):\n                itemset_support[itemset] += 1\n    \n    # Step 4: Filter itemsets that meet the minimum support threshold\n    frequent_itemsets = {itemset: support for itemset, support in itemset_support.items() if support >= min_support_count}\n    \n    return frequent_itemsets\n\n# Example usage\ntransactions = [\n    ['bread', 'milk'],\n    ['bread', 'diaper', 'beer', 'egg'],\n    ['milk', 'diaper', 'beer', 'coke'],\n    ['bread', 'milk', 'diaper', 'beer'],\n    ['bread', 'milk', 'diaper', 'coke']\n]\nminsup = 0.6\n\nresult = find_frequent_itemsets(transactions, minsup)\nprint(result)\n```\n\nThis script defines the function `find_frequent_itemsets` which takes a list of transactions and a minimum support threshold as input and returns a dictionary of frequent itemsets with their support counts. The example usage demonstrates how to use this function with a sample dataset."}
{"task_id": 11, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    # Step 1: Initialize the centres with the first k samples\n    centres = data[:k].astype(float)\n    \n    for iteration in range(max_iter):\n        # Step 2: Assign each sample to the nearest centre\n        labels = []\n        for sample in data:\n            distances = [np.sum((sample - centre) ** 2) for centre in centres]\n            labels.append(np.argmin(distances))\n        \n        # Step 3: Recompute each centre as the mean of the samples assigned to it\n        new_centres = np.zeros_like(centres)\n        counts = np.zeros(k, dtype=int)\n        \n        for label, sample in zip(labels, data):\n            new_centres[label] += sample\n            counts[label] += 1\n        \n        for i in range(k):\n            if counts[i] == 0:\n                # If a cluster is empty, reinitialize it with a random sample\n                random_index = np.random.randint(0, data.shape[0])\n                new_centres[i] = data[random_index]\n            else:\n                new_centres[i] /= counts[i]\n        \n        # Check for convergence\n        max_change = np.max(np.sqrt(np.sum((new_centres - centres) ** 2, axis=1)))\n        if max_change < epsilon:\n            break\n        \n        centres = new_centres\n    \n    # Round the centres to 4 decimal places\n    rounded_centres = np.round(centres, 4).tolist()\n    \n    return rounded_centres, labels\n```\n\nThis script implements the K-Means clustering algorithm from scratch, following the specified requirements. It initializes the cluster centres with the first `k` samples, assigns each sample to the nearest centre using squared Euclidean distance, updates the centres, and handles empty clusters by reinitializing them with random samples. The algorithm stops when the maximum change in any centre is less than `epsilon` or when the maximum number of iterations is reached. The final centres are rounded to four decimal places before being returned along with the cluster labels."}
{"task_id": 13, "completion_id": 0, "completion": "```\nimport numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_user, n_item = data.shape\n    \n    # Step 1: Build an item-item similarity matrix S\n    S = np.zeros((n_item, n_item))\n    \n    for i in range(n_item):\n        for j in range(i + 1, n_item):\n            # Find users that rated both items i and j\n            users_rated_both = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            \n            if len(users_rated_both) == 0:\n                S[i, j] = 0\n                S[j, i] = 0\n            else:\n                v1 = data[users_rated_both, i]\n                v2 = data[users_rated_both, j]\n                \n                if criterion == 'cosine':\n                    std_v1 = np.std(v1)\n                    std_v2 = np.std(v2)\n                    \n                    if std_v1 > 1e-3 and std_v2 > 1e-3:\n                        v1_centered = v1 - np.mean(v1)\n                        v2_centered = v2 - np.mean(v2)\n                        cosine_sim = np.dot(v1_centered, v2_centered) / (np.linalg.norm(v1_centered) * np.linalg.norm(v2_centered))\n                    else:\n                        cosine_sim = 0\n                    S[i, j] = cosine_sim\n                    S[j, i] = cosine_sim\n                elif criterion == 'pearson':\n                    pearson_corr = np.corrcoef(v1, v2)[0, 1]\n                    S[i, j] = pearson_corr\n                    S[j, i] = pearson_corr\n    \n    # Step 2: Collect rated items for the active user\n    rated_items = np.where(data[user_ind, :] > 0)[0]\n    r = data[user_ind, rated_items]\n    \n    # Step 3: Compute predicted attractiveness score for each unrated item\n    scores = {}\n    \n    for t in range(n_item):\n        if t not in rated_items:\n            numerator = np.sum(r * S[t, rated_items])\n            denominator = np.sum(np.abs(S[t, rated_items]))\n            \n            if denominator == 0:\n                score = 0\n            else:\n                score = numerator / denominator\n            \n            scores[t] = score\n    \n    # Step 4: Return the k items with the highest scores\n    sorted_items = sorted(scores, key=scores.get, reverse=True)\n    \n    return sorted_items[:k]\n\n# Example usage:\n# data = np.array([\n#     [5, 3, 0, 1],\n#     [4, 0, 0, 1],\n#     [1, 1, 0, 5],\n#     [1, 0, 0, 4],\n#     [0, 1, 5, 4],\n# ])\n# user_ind = 0\n# k = 2\n# criterion = 'cosine'\n# print(knn_recommend(data, user_ind, k, criterion))\n```\n\nThis script defines the `knn_recommend` function, which implements the item-based k-NN collaborative filtering recommender as described. The function constructs an item-item similarity matrix based on the specified criterion, computes predicted attractiveness scores for unrated items, and returns the top `k` items with the highest scores."}
{"task_id": 19, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_gain = 0\n    best_feature = None\n    best_threshold = None\n\n    # Calculate the loss for the current node\n    G = np.sum(g)\n    H = np.sum(h)\n    current_loss = -0.5 * (G**2) / (H + lam) + gamma\n\n    for feature_index in range(n_features):\n        # Get unique values of the feature and sort them\n        unique_values = np.unique(X[:, feature_index])\n        if len(unique_values) < 2:\n            continue\n\n        # Sort the indices based on the feature values\n        sorted_indices = np.argsort(X[:, feature_index])\n        sorted_g = g[sorted_indices]\n        sorted_h = h[sorted_indices]\n        sorted_X = X[sorted_indices, feature_index]\n\n        # Initialize the left and right sums\n        G_L = 0\n        H_L = 0\n        G_R = G\n        H_R = H\n\n        # Try each unique value as a threshold\n        for i in range(n_samples - 1):\n            G_L += sorted_g[i]\n            H_L += sorted_h[i]\n            G_R -= sorted_g[i]\n            H_R -= sorted_h[i]\n\n            # Check if the split is valid\n            if i + 1 < 2 or n_samples - (i + 1) < 2:\n                continue\n\n            # Calculate the loss for the left and right nodes\n            loss_L = -0.5 * (G_L**2) / (H_L + lam) + gamma\n            loss_R = -0.5 * (G_R**2) / (H_R + lam) + gamma\n\n            # Calculate the gain\n            gain = current_loss - loss_L - loss_R\n\n            # Update the best split if the current gain is better\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature_index\n                best_threshold = (sorted_X[i] + sorted_X[i + 1]) / 2\n\n    return (best_feature, best_threshold) if best_gain > 0 else None\n```\n\nThis script defines the `best_split` function, which calculates the best feature and threshold to split a node in a gradient boosting tree based on the given criteria. The function iterates over each feature, considers each unique value as a potential threshold, and calculates the gain for each possible split. It returns the split with the highest gain if it is positive, otherwise, it returns `None`."}
{"task_id": 20, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Convert input to a NumPy array for computation\n    if isinstance(x, (int, float)):\n        x = np.array([x])\n    elif isinstance(x, list):\n        x = np.array(x)\n    elif not isinstance(x, np.ndarray):\n        raise ValueError(\"Input must be a float, int, list, or numpy.ndarray\")\n\n    # Compute the sigmoid values\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    \n    # Compute the gradient of the sigmoid function\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    \n    # Round the results to 4 decimal places\n    sigmoid_x_rounded = np.round(sigmoid_x, 4)\n    gradient_x_rounded = np.round(gradient_x, 4)\n    \n    # Convert back to scalar if input was a scalar\n    if sigmoid_x_rounded.size == 1:\n        return float(sigmoid_x_rounded), float(gradient_x_rounded)\n    else:\n        return sigmoid_x_rounded.tolist(), gradient_x_rounded.tolist()\n\n# Example usage:\n# print(sigmoid_activation(0))  # Output: (0.5, 0.25)\n# print(sigmoid_activation([0, 1, -1]))  # Output: ([0.5, 0.7311, 0.2689], [0.25, 0.1966, 0.1966])\n# print(sigmoid_activation(np.array([[0, 1], [-1, 2]])))  # Output: ([[0.5, 0.7311], [0.2689, 0.8808]], [[0.25, 0.1966], [0.1966, 0.105 ]])\n```"}
{"task_id": 21, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float],\n                        y_train: list[int],\n                        x_test: list[float],\n                        epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n_samples = len(x_train)\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n\n    x_train, y_train = zip(*sorted(zip(x_train, y_train)))\n\n    def weighted_error(d, theta, weights, x_train, y_train):\n        predictions = np.ones(n_samples)\n        if d == 0:\n            predictions[x_train > theta] = -1\n        else:\n            predictions[x_train <= theta] = -1\n\n        return np.sum(weights * (predictions != y_train)) / np.sum(weights)\n\n    while True:\n        min_error = float('inf')\n        best_stump = None\n        best_alpha = None\n\n        # Generate all possible stumps\n        for d in [0, 1]:\n            for i in range(n_samples - 1):\n                theta = (x_train[i] + x_train[i + 1]) / 2\n                error = weighted_error(d, theta, weights, x_train, y_train)\n                if error < min_error:\n                    min_error = error\n                    best_stump = (d, theta)\n\n        # Compute alpha\n        alpha = 0.5 * math.log((1 - min_error) / min_error)\n        alphas.append(alpha)\n\n        # Update weights\n        d, theta = best_stump\n        predictions = np.ones(n_samples)\n        if d == 0:\n            predictions[x_train > theta] = -1\n        else:\n            predictions[x_train <= theta] = -1\n\n        weights *= np.exp(-alpha * np.array(y_train) * predictions)\n        weights /= np.sum(weights)\n\n        # Store the stump\n        stumps.append(best_stump)\n\n        # Check for early stopping\n        ensemble_predictions = np.sum([alpha * pred for alpha, (_, theta) in zip(alphas, stumps)\n                                       for pred in [1 if (d == 0 and x <= theta) or (d == 1 and x > theta) else -1 for x in x_train]], axis=0)\n        train_error = np.mean(np.sign(ensemble_predictions) != y_train)\n        if train_error <= epsilon:\n            break\n\n    # Predict on test data\n    test_predictions = np.zeros(len(x_test))\n    for alpha, (d, theta) in zip(alphas, stumps):\n        predictions = np.array([1 if (d == 0 and x <= theta) or (d == 1 and x > theta) else -1 for x in x_test])\n        test_predictions += alpha * predictions\n\n    return [int(np.sign(pred)) for pred in test_predictions]\n\n# Example usage:\n# x_train = [1.0, 2.0, 3.0, 4.0, 5.0]\n# y_train = [1, -1, 1, -1, 1]\n# x_test = [1.5, 3.5, 4.5]\n# epsilon = 0.1\n# predictions = adaboost_1d_predict(x_train, y_train, x_test, epsilon)\n# print(predictions)  # Output should be [1, -1, -1] or similar based on the training\n```\n\nThis script defines the `adaboost_1d_predict` function which trains an AdaBoost ensemble using one-dimensional decision stumps and returns predictions for a test set. The function handles the training process, including weight updates and early stopping based on the specified `epsilon` value."}
{"task_id": 25, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    # Compute the Euclidean distance matrix between each test sample and each training sample\n    # This results in an (m, n) matrix where each element (i, j) is ||X_test[i] - X_train[j]||^2\n    diff = X_test[:, np.newaxis] - X_train[np.newaxis, :]\n    distance_matrix = np.sum(diff ** 2, axis=2)\n    \n    # Compute the Gaussian kernel matrix K\n    K = np.exp(-gamma * distance_matrix)\n    \n    # Compute the decision function g(z) for each test sample\n    # g(z) = \u03a3_{i=1..n} \u03b1_i \u00b7 y_i \u00b7 exp( \u2212\u03b3 \u00b7 ||x_i \u2212 z||\u00b2 )  +  b\n    g_z = np.dot(alpha * y_train, K) + b\n    \n    # Predict the class label as sign(g(z))\n    predictions = np.sign(g_z).astype(int)\n    \n    # Ensure that the predictions are exactly 1 or -1\n    predictions[predictions == 0] = 1\n    \n    return predictions.tolist()\n```\n\nThis code defines a function `gaussian_svm_predict` that computes the predictions for a set of test samples using a pre-trained Gaussian-kernel SVM. The function uses vectorized operations with NumPy to efficiently compute the necessary values without relying on any external machine learning libraries. The predictions are returned as a list of integers, each being either 1 or -1."}
{"task_id": 28, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    # Convert the input list of lists to a numpy array for easier manipulation\n    X_np = np.array(X)\n    m, n = X_np.shape\n    \n    # Check if k is within the valid range\n    if k < 1 or k > min(m, n):\n        return -1\n    \n    # Perform truncated SVD\n    U, s, Vt = np.linalg.svd(X_np, full_matrices=False)\n    \n    # Construct the diagonal matrix of singular values with rank k\n    S_k = np.diag(s[:k])\n    \n    # Compute the rank-k approximation\n    X_k = U[:, :k] @ S_k @ Vt[:k, :]\n    \n    # Calculate the mean squared error\n    mse = np.mean((X_np - X_k) ** 2)\n    \n    # Round the reconstructed matrix and mse to 4 decimal places\n    X_hat_rounded = np.round(X_k, 4).tolist()\n    mse_rounded = np.round(mse, 4)\n    \n    return X_hat_rounded, mse_rounded\n\n# Example usage:\n# X = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n# k = 2\n# print(linear_autoencoder(X, k))\n```\n\nThis script defines the `linear_autoencoder` function which performs the required operations using NumPy for efficient matrix computations. The function checks if `k` is within the valid range, computes the truncated SVD, reconstructs the matrix, calculates the mean squared error, and returns the results rounded to four decimal places."}
{"task_id": 29, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                           y_train: list[float] | np.ndarray,\n                           x_query: float,\n                           epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    \n    # Sort the training data by x\n    sorted_indices = np.argsort(x_train)\n    x_train = x_train[sorted_indices]\n    y_train = y_train[sorted_indices]\n    \n    # Initialize residuals to be the same as the target values\n    residuals = y_train.copy()\n    \n    # Initialize the prediction for the query point\n    prediction = 0.0\n    \n    while True:\n        # Calculate candidate split points (midpoints between consecutive x values)\n        candidate_splits = (x_train[:-1] + x_train[1:]) / 2.0\n        \n        best_rss = float('inf')\n        best_stump = None\n        \n        # Evaluate each candidate split\n        for s in candidate_splits:\n            # Find the indices of the elements <= s and > s\n            left_indices = x_train <= s\n            right_indices = x_train > s\n            \n            # Calculate the mean of the residuals for each side\n            c1 = np.mean(residuals[left_indices]) if np.any(left_indices) else 0.0\n            c2 = np.mean(residuals[right_indices]) if np.any(right_indices) else 0.0\n            \n            # Calculate the RSS for this split\n            rss = np.sum(residuals[left_indices] ** 2) - np.sum((residuals[left_indices] - c1) ** 2) + \\\n                  np.sum(residuals[right_indices] ** 2) - np.sum((residuals[right_indices] - c2) ** 2)\n            \n            # Check if this split is better than the current best\n            if rss < best_rss:\n                best_rss = rss\n                best_stump = (s, c1, c2)\n        \n        # If the best RSS is not better than epsilon, stop\n        if best_rss >= epsilon:\n            break\n        \n        # Add the best stump to the ensemble\n        s, c1, c2 = best_stump\n        if x_query <= s:\n            prediction += c1\n        else:\n            prediction += c2\n        \n        # Update the residuals\n        residuals[left_indices] -= c1\n        residuals[right_indices] -= c2\n    \n    return round(prediction, 4)\n\n# Example usage:\n# x_train = [1, 2, 3, 4, 5]\n# y_train = [2.1, 4.1, 6.1, 8.1, 10.1]\n# x_query = 3.5\n# print(predict_boosting_tree(x_train, y_train, x_query))  # Output should be rounded to 4 decimal places\n```"}
{"task_id": 34, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None) -> np.ndarray | int:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s based on the specified shape and sparsity.\n    \n    Parameters:\n    - shape: A tuple representing the desired shape of the output tensor.\n    - sparsity: A float in the range [0, 1] representing the probability of generating a 1.0.\n    - seed: An optional integer seed for reproducibility.\n    \n    Returns:\n    - A NumPy array of the specified shape with dtype float, containing 0.0s and 1.0s.\n    - Returns -1 if the sparsity is outside the range [0, 1].\n    \"\"\"\n    if not (0 <= sparsity <= 1):\n        return -1\n    \n    if seed is not None:\n        np.random.seed(seed)\n    \n    random_tensor = np.random.rand(*shape)\n    binary_tensor = (random_tensor < sparsity).astype(float)\n    \n    return binary_tensor\n\n# Example usage:\nif __name__ == \"__main__\":\n    shape = (2, 3)\n    sparsity = 0.3\n    seed = 42\n    result = random_binary_tensor(shape, sparsity, seed)\n    print(result)\n```\n\nThis script defines the `random_binary_tensor` function according to the specified requirements. It checks if the sparsity is within the valid range, sets the seed if provided, generates a random tensor, and then converts it to a binary tensor based on the sparsity value. The example usage at the bottom demonstrates how to call the function with a specific shape, sparsity, and seed."}
{"task_id": 39, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    # Get the number of samples\n    n_samples = data.shape[0]\n    \n    # Use argpartition to find the median index\n    median_index = n_samples // 2\n    partitioned_indices = np.argpartition(data[:, d], median_index)\n    \n    # The pivot is the median value's index\n    pivot = partitioned_indices[median_index]\n    \n    # Separate indices into left and right\n    left_indices = partitioned_indices[:median_index]\n    right_indices = partitioned_indices[median_index + 1:]\n    \n    # Sort the left and right indices\n    left = sorted(left_indices)\n    right = sorted(right_indices)\n    \n    return pivot, left, right\n\n# Example usage:\nif __name__ == \"__main__\":\n    data = np.array([[3, 2], [1, 4], [5, 6], [7, 8], [2, 1]])\n    d = 0\n    pivot, left, right = get_split(data, d)\n    print(f\"Pivot: {pivot}, Left: {left}, Right: {right}\")\n```\n\nThis script defines the `get_split` function which performs a median split on a given 2D NumPy array `data` along a specified column `d`. The function uses `numpy.argpartition` to efficiently find the median index without fully sorting the column, ensuring the operation is performed in O(n) time. The resulting pivot index and lists of left and right indices are returned and printed in the example usage."}
{"task_id": 40, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    # Assertions for pre-conditions\n    assert x.ndim == 1, \"x must be one-dimensional.\"\n    assert stride >= 1, \"stride must be a positive integer.\"\n    assert len(x) >= frame_width, \"The length of x must be at least frame_width.\"\n\n    # Calculate the number of frames\n    n_frames = (len(x) - frame_width) // stride + 1\n\n    # Calculate the strides for as_strided\n    x_stride = x.strides[0]\n    shape = (n_frames, frame_width)\n    strides = (x_stride * stride, x_stride)\n\n    # Create the strided array\n    frames = as_strided(x, shape=shape, strides=strides, writeable=writeable)\n\n    return frames\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Create a sample signal\n    x = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    frame_width = 4\n    stride = 2\n\n    # Convert to frames\n    framed_signal = to_frames(x, frame_width, stride, writeable=False)\n    print(framed_signal)\n    print(\"Is the view writeable?\", framed_signal.flags.writeable)\n```\n\nThis script defines the `to_frames` function which converts a 1-D NumPy array into overlapping frames using `numpy.lib.stride_tricks.as_strided`. The function includes assertions to ensure the input parameters meet the specified pre-conditions. The example usage at the bottom demonstrates how to use the function and checks the writability of the resulting view."}
{"task_id": 48, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Convert input to a numpy array if it isn't already\n    X = np.array(X)\n    \n    # Check if the matrix is two-dimensional\n    if X.ndim != 2:\n        return False\n    \n    # Check if all elements are between 0 and 1 inclusive\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    \n    # Check if each row sums to 1 within a tolerance of 1e-8\n    if not np.allclose(X.sum(axis=1), np.ones(X.shape[0]), atol=1e-8):\n        return False\n    \n    return True\n```\n\nThis script defines the function `is_stochastic` which checks if a given matrix is row-stochastic according to the specified criteria. The function first ensures the input is a numpy array, then verifies the matrix is two-dimensional, all elements are within the range [0, 1], and each row sums to 1 within a tolerance of `1e-8`."}
{"task_id": 55, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n, d = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    \n    for iteration in range(max_iter):\n        # Mini-batch processing\n        start_idx = (iteration * batch_size) % n\n        end_idx = (start_idx + batch_size) % n\n        \n        if start_idx < end_idx:\n            X_batch = X[start_idx:end_idx]\n            y_batch = y[start_idx:end_idx]\n        else:\n            X_batch = np.vstack((X[start_idx:], X[:end_idx]))\n            y_batch = np.hstack((y[start_idx:], y[:end_idx]))\n        \n        # Compute gradient\n        gradient = (1 / len(X_batch)) * X_batch.T @ (X_batch @ w - y_batch)\n        \n        # Update running average of squared gradients\n        s = rho * s + (1 - rho) * (gradient ** 2)\n        \n        # Update weights\n        w -= eta * gradient / (np.sqrt(s) + eps_station)\n        \n        # Check for convergence\n        if np.linalg.norm(gradient) < epsilon:\n            break\n    \n    return [round(weight, 4) for weight in w.tolist()]\n\n# Example usage:\n# X = np.array([[1, 1], [1, 2], [2, 2], [2, 3]])\n# y = np.dot(X, np.array([1, 2])) + 3\n# print(rms_prop(X, y))\n```\n\nThis script defines the `rms_prop` function, which implements the RMSprop optimization algorithm for linear regression. The function takes in the design matrix `X`, target vector `y`, and several hyperparameters, and returns the learned weight vector as a list of rounded floats. The function handles mini-batch processing and early stopping based on the gradient norm."}
{"task_id": 56, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n    \"\"\"Implements the SoftPlus activation function and its gradient (sigmoid function).\n    \n    Parameters:\n    x (scalar, list, or np.array): Input values.\n    deriv (bool, optional): If True, returns the gradient (sigmoid) of SoftPlus. Defaults to False.\n    \n    Returns:\n    float or list: SoftPlus(x) or its gradient for each element in x, rounded to 4 decimal places.\n    \"\"\"\n    # Convert input to a numpy array for vectorized operations\n    x = np.array(x, dtype=float)\n    \n    if deriv:\n        # Compute the sigmoid of x\n        result = 1 / (1 + np.exp(-x))\n    else:\n        # Compute the softplus function using a numerically stable formulation\n        result = np.where(x > 0, np.log1p(np.exp(-x)) + x, np.log1p(np.exp(x)))\n    \n    # Round the result to the nearest 4th decimal place\n    result = np.round(result, 4)\n    \n    # Return a float if the input was a scalar, otherwise return a list\n    return result.item() if result.size == 1 else result.tolist()\n\n# Example usage:\n# print(softplus(1.0))  # SoftPlus of 1.0\n# print(softplus(-1.0, deriv=True))  # Derivative of SoftPlus at -1.0\n# print(softplus([1.0, -1.0, 0.0], deriv=True))  # Derivative of SoftPlus for a list of values\n```\n\nThis script defines the `softplus` function, which computes the SoftPlus activation function or its gradient (sigmoid function) for a given input. The function handles scalar, list, or NumPy array inputs and ensures numerical stability using `np.log1p` for large values. The results are rounded to the nearest 4th decimal place and returned as a float for scalar inputs or a list for array inputs."}
{"task_id": 58, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    if N < 1:\n        raise ValueError(\"N must be at least 1\")\n    \n    # Create N-gram and (N-1)-gram counters\n    ngram_counter = Counter(tuple(sequence[i:i+N]) for i in range(len(sequence) - N + 1))\n    if N > 1:\n        prev_ngram_counter = Counter(tuple(sequence[i:i+N-1]) for i in range(len(sequence) - N + 2))\n    else:\n        prev_ngram_counter = Counter(sequence)\n    \n    # Calculate the log-probability of the sequence\n    log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i+N])\n        if N > 1:\n            prev_ngram = tuple(sequence[i:i+N-1])\n        else:\n            prev_ngram = sequence[i]\n        \n        ngram_count = ngram_counter[ngram]\n        prev_ngram_count = prev_ngram_counter[prev_ngram]\n        \n        if ngram_count == 0 or prev_ngram_count == 0:\n            return float('-inf')\n        \n        prob = ngram_count / prev_ngram_count\n        log_prob += np.log(prob)\n    \n    return round(log_prob, 4)\n\n# Example usage:\n# corpus = [\"the\", \"cat\", \"sat\", \"on\", \"the\", \"mat\", \"the\", \"cat\", \"sat\"]\n# sequence = [\"the\", \"cat\", \"sat\"]\n# N = 2\n# print(unsmoothed_ngram_log_prob(corpus, sequence, N))  # Example output\n```\n\nThis script defines a function `unsmoothed_ngram_log_prob` that calculates the log-probability of a given sequence under an unsmoothed Maximum-Likelihood Estimation (MLE) N-gram language model trained on a provided corpus. The function handles both unigrams (N=1) and higher-order n-grams (N>1) and returns `float('-inf')` if any required count is zero. The result is rounded to four decimal places."}
{"task_id": 62, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef lasso_regression(X: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\", degree: int, reg_factor: float, n_iterations: int = 1000, tol: float = 1e-6) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    X = np.array(X).reshape(-1, 1)\n    y = np.array(y)\n    m = len(y)\n    \n    # Build the design matrix\n    X_poly = np.hstack([X**i for i in range(degree + 1)])\n    \n    # Initialize weights\n    w = np.zeros(degree + 1)\n    \n    # Coordinate descent\n    for _ in range(n_iterations):\n        w_prev = w.copy()\n        \n        # Update bias term exactly\n        w[0] = np.mean(y - X_poly[:, 1:].dot(w[1:]))\n        \n        # Update other weights using soft thresholding\n        for j in range(1, degree + 1):\n            rho = X_poly[:, j].T.dot(y - X_poly.dot(w) + w[j] * X_poly[:, j])\n            w[j] = np.sign(rho) * max(abs(rho) - reg_factor, 0) / X_poly[:, j].T.dot(X_poly[:, j])\n        \n        # Check for convergence\n        if np.max(np.abs(w - w_prev)) < tol:\n            break\n    \n    # Return coefficients rounded to 4 decimal places\n    return [round(coef, 4) for coef in w]\n\n# Example usage:\n# X = [1, 2, 3, 4, 5]\n# y = [2, 3, 5, 7, 11]\n# degree = 2\n# reg_factor = 0.1\n# coefficients = lasso_regression(X, y, degree, reg_factor)\n# print(coefficients)\n```\n\nThis script defines a `lasso_regression` function that performs univariate Lasso regression with polynomial features using coordinate descent. The function takes in the input data `X` and `y`, the desired polynomial `degree`, the regularization strength `reg_factor`, and optional parameters for the maximum number of iterations and tolerance for convergence. The function returns the learned coefficients rounded to four decimal places."}
{"task_id": 63, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector beta_t for a given time index t in a Hidden Markov Model.\n\n    Parameters:\n    A (list[list[float]]): Transition probability matrix of shape (N, N).\n    B (list[list[float]]): Emission probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices (length T).\n    t (int): Integer time index (0 \u2264 t < T).\n\n    Returns:\n    list[float]: List containing the N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    N = len(A)  # Number of states\n    T = len(obs)  # Length of the observation sequence\n    \n    # Initialize the backward probabilities for the last time step\n    beta = np.ones(N)\n    \n    # Calculate beta values from T-2 to t\n    for time in range(T-2, t-1, -1):\n        beta_next = beta\n        beta = np.zeros(N)\n        for i in range(N):\n            for j in range(N):\n                beta[i] += A[i][j] * B[j][obs[time+1]] * beta_next[j]\n    \n    # Return the beta values for time t, rounded to 4 decimal places\n    return [round(prob, 4) for prob in beta]\n\n# Example usage:\n# A = [[0.5, 0.2, 0.3], [0.3, 0.5, 0.2], [0.2, 0.3, 0.5]]\n# B = [[0.6, 0.4], [0.3, 0.7], [0.8, 0.2]]\n# obs = [0, 1, 0]\n# t = 1\n# print(backward_beta(A, B, obs, t))  # Example output: [0.0960, 0.1440, 0.0960]\n```\n\nThis script defines the `backward_beta` function, which calculates the backward probability vector \\(\\beta_t\\) for a given time index \\(t\\) in a Hidden Markov Model. The function takes the transition probability matrix \\(A\\), emission probability matrix \\(B\\), list of observation indices `obs`, and time index `t` as inputs and returns the backward probabilities rounded to four decimal places."}
{"task_id": 65, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    obs = np.array(obs)\n    \n    # Check if any of the input lists are empty\n    if A.size == 0 or B.size == 0 or pi.size == 0 or obs.size == 0:\n        return 0.0\n    \n    # Number of states\n    N = A.shape[0]\n    # Length of the observation sequence\n    T = len(obs)\n    \n    # Initialize the backward variables\n    beta = np.zeros((T, N))\n    \n    # Base case: beta_{T-1}(i) = 1 for all states i\n    beta[T-1, :] = 1.0\n    \n    # Fill the beta table in a bottom-up manner\n    for t in range(T-2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t+1]] * beta[t+1, :])\n    \n    # Calculate the sequence probability\n    prob = np.sum(pi * B[:, obs[0]] * beta[0, :])\n    \n    # Return the result rounded to 6 decimal places\n    return round(prob, 6)\n```"}
{"task_id": 69, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # Validate input dimensions\n    n = len(S)  # Number of states\n    if not A or len(A) != n or any(len(row) != n for row in A):\n        return -1\n    if not B or len(B) != n or not all(isinstance(row, list) for row in B):\n        return -1\n    m = len(B[0])  # Number of possible observations\n    if any(len(row) != m for row in B):\n        return -1\n    if not observations or not all(isinstance(obs, int) for obs in observations):\n        return -1\n    \n    # Check that every observation index is in the valid range [0, m\u22121]\n    if any(obs < 0 or obs >= m for obs in observations):\n        return -1\n\n    # Initialize the forward variables\n    T = len(observations)\n    alpha = np.zeros((T, n))\n    \n    # Initialize base cases (t=0)\n    for i in range(n):\n        alpha[0, i] = S[i] * B[i][observations[0]]\n    \n    # Compute forward variables for t > 0\n    for t in range(1, T):\n        for i in range(n):\n            alpha[t, i] = B[i][observations[t]] * np.sum(alpha[t-1, :] * A[:, i])\n    \n    # Calculate the probability of the observation sequence\n    likelihood = np.sum(alpha[-1, :])\n    \n    return round(likelihood, 4)\n\n# Example usage:\n# S = [0.6, 0.4]\n# A = [[0.7, 0.3], [0.4, 0.6]]\n# B = [[0.5, 0.4, 0.1], [0.1, 0.3, 0.6]]\n# observations = [0, 1, 2]\n# print(forward_algorithm(S, A, B, observations))  # Output should be a float rounded to 4 decimals\n```\n\nThis script defines the `forward_algorithm` function which computes the likelihood of an observation sequence given an HMM using the forward algorithm. It includes input validation to ensure the dimensions and values are correct, and returns `-1` for invalid input. The result is rounded to 4 decimal places as required."}
{"task_id": 70, "completion_id": 0, "completion": "```\npython\nfrom collections import Counter, defaultdict\n\nclass FPNode:\n    def __init__(self, item, support, parent=None):\n        self.item = item\n        self.support = support\n        self.parent = parent\n        self.children = defaultdict(FPNode)\n        self.link = None\n\nclass FPTree:\n    def __init__(self):\n        self.root = FPNode(None, 0)\n        self.header_table = {}\n\n    def insert_transaction(self, transaction):\n        current_node = self.root\n        for item in transaction:\n            if item in current_node.children:\n                current_node.children[item].support += 1\n            else:\n                new_node = FPNode(item, 1, current_node)\n                current_node.children[item] = new_node\n                if item in self.header_table:\n                    last_node = self.header_table[item]\n                    while last_node.link is not None:\n                        last_node = last_node.link\n                    last_node.link = new_node\n                else:\n                    self.header_table[item] = new_node\n            current_node = current_node.children[item]\n\ndef find_frequent_items(transactions, min_support):\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    return {item: count for item, count in item_counts.items() if count >= min_support}\n\ndef build_fp_tree(transactions, frequent_items):\n    fp_tree = FPTree()\n    for transaction in transactions:\n        filtered_transaction = [item for item in transaction if item in frequent_items]\n        filtered_transaction.sort(key=lambda x: frequent_items[x], reverse=True)\n        fp_tree.insert_transaction(filtered_transaction)\n    return fp_tree\n\ndef mine_conditional_tree(prefix, node, min_support, frequent_itemsets):\n    if prefix:\n        frequent_itemsets.append(prefix)\n    while node.link is not None:\n        node = node.link\n        prefix_path = []\n        while node.parent is not None:\n            prefix_path.append(node.item)\n            node = node.parent\n        prefix_path = prefix_path[::-1]\n        if prefix_path:\n            conditional_tree = FPTree()\n            conditional_tree.header_table = {item: None for item in set(prefix_path)}\n            conditional_tree.root.children = build_conditional_tree(prefix_path, node, conditional_tree)\n            mine_frequent_itemsets(conditional_tree, prefix + prefix_path, min_support, frequent_itemsets)\n\ndef build_conditional_tree(prefix_path, node, conditional_tree):\n    conditional_tree.insert_transaction(prefix_path)\n    return conditional_tree.root.children\n\ndef mine_frequent_itemsets(fp_tree, prefix, min_support, frequent_itemsets):\n    items = sorted(fp_tree.header_table.keys(), key=lambda x: fp_tree.header_table[x].support)\n    for item in items:\n        support_count = fp_tree.header_table[item].support\n        new_prefix = prefix + [item]\n        frequent_itemsets.append(new_prefix)\n        conditional_transactions = []\n        node = fp_tree.header_table[item]\n        while node is not None:\n            path = []\n            current_node = node.parent\n            while current_node.parent is not None:\n                path.append(current_node.item)\n                current_node = current_node.parent\n            if path:\n                conditional_transactions.append(path)\n            node = node.link\n        if conditional_transactions:\n            conditional_tree = FPTree()\n            for transaction in conditional_transactions:\n                transaction.sort(key=lambda x: conditional_tree.header_table[x].support, reverse=True)\n                conditional_tree.insert_transaction(transaction)\n            mine_frequent_itemsets(conditional_tree, new_prefix, min_support, frequent_itemsets)\n\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    frequent_items = find_frequent_items(transactions, min_support)\n    if not frequent_items:\n        return []\n\n    fp_tree = build_fp_tree(transactions, frequent_items)\n    frequent_itemsets = []\n    mine_frequent_itemsets(fp_tree, [], min_support, frequent_itemsets)\n\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\n```\n\nThis script implements the FP-Growth algorithm to discover frequent itemsets from a list of transactions. The function `fp_growth` takes a list of transactions and a minimum support threshold as input and returns a list of frequent itemsets, sorted as specified."}
{"task_id": 75, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    # Check if k is a valid integer and within the range\n    if k <= 0 or k > len(X_train):\n        return -1\n    \n    # Convert input lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # List to store predictions\n    predictions = []\n    \n    # Loop over each test sample\n    for test_sample in X_test:\n        # Compute squared Euclidean distances from the test sample to all training samples\n        distances = np.sum((X_train - test_sample) ** 2, axis=1)\n        \n        # Get the indices of the k smallest distances\n        k_nearest_indices = np.argsort(distances)[:k]\n        \n        # Get the class labels of the k nearest neighbors\n        k_nearest_labels = y_train[k_nearest_indices]\n        \n        # Determine the most common class label among the k nearest neighbors\n        # In case of a tie, np.bincount will return the smallest class label\n        predicted_label = np.bincount(k_nearest_labels).argmax()\n        \n        # Append the predicted label to the list of predictions\n        predictions.append(predicted_label)\n    \n    return predictions\n```\n\nThis script defines the `knn_predict` function, which implements the k-Nearest Neighbour algorithm as described. It checks for valid `k`, computes squared Euclidean distances, finds the k nearest neighbors, and predicts the class label by majority voting. In case of a tie, it returns the smallest class label."}
{"task_id": 76, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    \n    # Define a small epsilon for numerical stability\n    epsilon = np.finfo(float).eps\n    \n    # Calculate the loss using the formula\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    \n    # Return the loss rounded to 4 decimal places\n    return round(loss, 4)\n\n# Example usage:\n# y_true = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\n# y_pred = np.array([[0.9, 0.05, 0.05], [0.1, 0.8, 0.1], [0.2, 0.2, 0.6]])\n# print(cross_entropy_loss(y_true, y_pred))  # Output should be a float rounded to 4 decimal places\n```\n\nThis script defines the `cross_entropy_loss` function, which computes the unnormalised categorical cross-entropy loss for a batch of one-hot encoded targets and predicted probabilities. The function uses NumPy for efficient computation and includes a small epsilon value to ensure numerical stability when taking the logarithm. The result is rounded to four decimal places before being returned."}
{"task_id": 77, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef relu(Z: np.ndarray) -> np.ndarray:\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(0, Z)\n\ndef sigmoid(Z: np.ndarray) -> np.ndarray:\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\n\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2  # number of layers in the network\n\n    # Implement [LINEAR -> RELU]*(L-1). Add \"cache\" to the \"caches\" list.\n    for l in range(1, L):\n        A_prev = A\n        W = parameters['W' + str(l)]\n        b = parameters['b' + str(l)]\n        Z = np.dot(W, A_prev) + b\n        A = relu(Z)\n        cache = (A_prev, W, b, Z)\n        caches.append(cache)\n\n    # Implement LINEAR -> SIGMOID. Add \"cache\" to the \"caches\" list.\n    WL = parameters['W' + str(L)]\n    bL = parameters['b' + str(L)]\n    ZL = np.dot(WL, A) + bL\n    AL = sigmoid(ZL)\n    cache = (A, WL, bL, ZL)\n    caches.append(cache)\n\n    # Convert AL to a list and round to 4 decimal places\n    AL_rounded = np.round(AL, 4).tolist()\n\n    return AL_rounded, caches\n```\n\nThis script defines the forward propagation for an L-layer neural network with ReLU activations in the hidden layers and a sigmoid activation in the output layer. It also collects the necessary cache for each layer, which can be used for backpropagation. The final output is rounded to four decimal places and converted to a plain Python list."}
{"task_id": 81, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    # Ensure A2 and Y have the same shape\n    assert A2.shape == Y.shape, \"A2 and Y must have the same shape\"\n    \n    # Number of samples\n    m = A2.shape[0]\n    \n    # Clip A2 to prevent log(0) and log(1)\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    \n    # Compute the cost\n    cost = -1/m * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    \n    # Return the cost rounded to 6 decimal places\n    return round(float(cost), 6)\n\n# Example usage:\n# A2 = np.array([0.9, 0.1, 0.8, 0.2])\n# Y = np.array([1, 0, 1, 0])\n# print(compute_cost(A2, Y))  # Example output: 0.259976\n```\n\nThis script defines the `compute_cost` function, which calculates the binary cross-entropy cost between the predicted probabilities `A2` and the ground-truth labels `Y`. The function ensures that the inputs have the same shape, clips the predicted probabilities to avoid logarithm of zero or one, and computes the cost using the given formula. The result is rounded to six decimal places before being returned."}
{"task_id": 82, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | \"np.ndarray\", epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    n = len(Q)\n    greedy_action = np.argmax(Q)  # First occurrence in case of ties\n    base_prob = epsilon / n\n    probabilities = np.full(n, base_prob)\n    probabilities[greedy_action] = 1 - epsilon + base_prob\n    \n    # Ensure the probabilities sum to 1 within the required tolerance\n    probabilities = probabilities / np.sum(probabilities)\n    \n    # Round to 4 decimal places\n    probabilities = np.round(probabilities, 4)\n    \n    return probabilities.tolist()\n\n# Example usage\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1\noutput = epsilon_soft(Q, epsilon)\nprint(output)  # Output should be [0.925, 0.025, 0.025, 0.025]\n```\n\nThis script defines the `epsilon_soft` function, which calculates the \u03b5-soft probabilities for a given set of Q-values and an exploration parameter \u03b5. The function ensures that the probabilities sum to 1 within a numerical tolerance and rounds them to 4 decimal places. The example usage demonstrates how to call the function and prints the expected output."}
{"task_id": 86, "completion_id": 0, "completion": "```\npython\nfrom collections import Counter\n\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    # Number of samples\n    num_samples = len(predictions[0])\n    \n    # Initialize the list to store the final predictions\n    final_predictions = []\n    \n    # Iterate over each sample\n    for sample_index in range(num_samples):\n        # Collect votes for the current sample from all trees\n        votes = [tree_predictions[sample_index] for tree_predictions in predictions]\n        \n        # Count the votes for each class label\n        vote_counts = Counter(votes)\n        \n        # Find the class label with the highest vote count\n        # In case of a tie, the smallest label is chosen by default due to the nature of Counter.most_common()\n        most_common_votes = vote_counts.most_common()\n        max_vote_count = most_common_votes[0][1]\n        \n        # Filter labels that have the maximum vote count\n        top_labels = [label for label, count in most_common_votes if count == max_vote_count]\n        \n        # Select the smallest label in case of a tie\n        final_prediction = min(top_labels)\n        \n        # Append the final prediction for the current sample\n        final_predictions.append(final_prediction)\n    \n    return final_predictions\n\n# Example usage:\n# predictions = [\n#     [0, 1, 0, 1],\n#     [0, 0, 1, 1],\n#     [1, 0, 0, 1]\n# ]\n# print(aggregate_random_forest_votes(predictions))  # Output: [0, 0, 0, 1]\n```\n\nThis script defines the `aggregate_random_forest_votes` function, which takes a 2D list of predictions from multiple decision trees and returns a list of aggregated predictions using majority voting. The function handles ties by selecting the smallest label."}
{"task_id": 88, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already\n    if isinstance(z, (int, float)):\n        z = np.array([z])\n    elif isinstance(z, list):\n        z = np.array(z)\n    \n    # Compute the softplus using np.logaddexp for numerical stability\n    result = np.logaddexp(0.0, z)\n    \n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n    \n    # Convert back to a list if the input was not a scalar\n    if isinstance(z, np.ndarray) and z.size > 1:\n        return result.tolist()\n    else:\n        return float(result[0])\n\n# Example usage\nz = np.array([-1000, 0, 3])\nprint(softplus(z))  # Output: [0.0, 0.6931, 3.0486]\n```"}
{"task_id": 90, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Check if policy has ev_estimates and if it's not empty\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    \n    # Extract true expected values and policy estimates\n    true_evs = bandit['arm_evs']\n    estimates = policy['ev_estimates']\n    \n    # Sort the estimates dictionary by keys (arm indices) and extract the values\n    sorted_estimates = [estimates[i] for i in sorted(estimates.keys())]\n    \n    # Calculate squared errors\n    squared_errors = [(true - estimated) ** 2 for true, estimated in zip(true_evs, sorted_estimates)]\n    \n    # Compute mean-squared error\n    mse_value = np.mean(squared_errors)\n    \n    # Return the result rounded to 4 decimal places\n    return round(mse_value, 4)\n\n# Example usage:\nbandit = {\"arm_evs\": [0.5, 0.2, 0.9]}\npolicy = {\"ev_estimates\": {0: 0.4, 1: 0.25, 2: 0.8}}\n\nprint(mse(bandit, policy))  # Output should be 0.0075\n```"}
{"task_id": 96, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    if N <= 0:\n        raise ValueError(\"N must be a positive integer.\")\n    \n    # Tokenize the corpus and build the vocabulary\n    all_tokens = []\n    for sentence in corpus:\n        tokens = sentence.split()\n        all_tokens.extend(tokens)\n    \n    # Add <UNK> to the vocabulary\n    vocabulary = set(all_tokens)\n    vocabulary.add(\"<UNK>\")\n    V = len(vocabulary)\n    \n    # Create n-gram frequency tables\n    ngram_counts = [defaultdict(int) for _ in range(N + 1)]\n    \n    for sentence in corpus:\n        tokens = sentence.split()\n        # Add <UNK> for unseen words in the sentence\n        tokens = [token if token in vocabulary else \"<UNK>\" for token in tokens]\n        \n        # Count n-grams\n        for n in range(1, N + 1):\n            for i in range(len(tokens) - n + 1):\n                ngram = tuple(tokens[i:i + n])\n                ngram_counts[n][ngram] += 1\n    \n    # Tokenize the target sequence\n    sequence_tokens = sequence.split()\n    if len(sequence_tokens) < N:\n        return 0.0\n    \n    # Add <UNK> for unseen words in the sequence\n    sequence_tokens = [token if token in vocabulary else \"<UNK>\" for token in sequence_tokens]\n    \n    # Calculate the log-probability\n    log_prob = 0.0\n    \n    for i in range(N - 1, len(sequence_tokens)):\n        context = tuple(sequence_tokens[i - N + 1:i])\n        word = sequence_tokens[i]\n        ngram = tuple(sequence_tokens[i - N + 1:i + 1])\n        \n        count_context = ngram_counts[N - 1][context]\n        count_ngram = ngram_counts[N][ngram]\n        \n        prob = (count_ngram + K) / (count_context + K * V)\n        log_prob += math.log(prob)\n    \n    return round(log_prob, 4)\n```\n\nThis script defines the `additive_ngram_log_prob` function, which computes the additive-smoothed log-probability of a given sentence using an N-gram model trained on a provided corpus. The function handles unseen words by mapping them to the `<UNK>` token and uses Laplace smoothing to estimate probabilities. The log-probability of the sentence is returned, rounded to four decimal places."}
{"task_id": 108, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    N, M = X.shape\n    # Initialize W and H with a fixed random seed\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    \n    def compute_loss(X, W, H, alpha):\n        reconstruction_error = np.linalg.norm(X - W @ H, 'fro') ** 2\n        regularization_error = alpha * (np.linalg.norm(W, 'fro') ** 2 + np.linalg.norm(H, 'fro') ** 2)\n        return reconstruction_error + regularization_error\n\n    previous_loss = float('inf')\n    for iteration in range(max_iter):\n        # Fix H and solve for W\n        for i in range(N):\n            W[i, :] = np.linalg.solve(H @ H.T + alpha * np.eye(K), X[i, :] @ H.T)\n        \n        # Fix W and solve for H\n        for j in range(M):\n            H[:, j] = np.linalg.solve(W.T @ W + alpha * np.eye(K), X[:, j].T @ W)\n        \n        # Compute the current loss\n        current_loss = compute_loss(X, W, H, alpha)\n        \n        # Check for convergence\n        if abs(previous_loss - current_loss) < tol:\n            break\n        \n        previous_loss = current_loss\n\n    # Reconstruct the matrix and round to 4 decimal places\n    X_hat = np.round(W @ H, 4)\n    return X_hat.tolist()\n```\n\nThis script defines the `als_factorization` function which performs matrix factorization using the regularized Alternating Least Squares (ALS) method. The function initializes the factor matrices `W` and `H` with a fixed random seed, iteratively updates them, and checks for convergence based on the specified tolerance and maximum number of iterations. The reconstructed matrix is rounded to four decimal places and returned as a list of lists."}
{"task_id": 109, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n\n    # Step 1: Initialize centroids using K-Means++\n    centroids = [X[np.random.choice(X.shape[0])]]\n    \n    for _ in range(1, K):\n        distances = np.array([min([np.linalg.norm(x - c) for c in centroids]) for x in X])\n        probabilities = distances / distances.sum()\n        next_centroid = X[np.random.choice(X.shape[0], p=probabilities)]\n        centroids.append(next_centroid)\n    \n    centroids = np.array(centroids)\n\n    # Step 2: Lloyd's iterations\n    for _ in range(max_iter):\n        # Assign clusters\n        labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - centroids, axis=2), axis=1)\n        \n        # Update centroids\n        new_centroids = np.array([X[labels == k].mean(axis=0) if np.any(labels == k) else centroids[k] for k in range(K)])\n        \n        # Check for convergence\n        if np.all(centroids == new_centroids):\n            break\n        \n        centroids = new_centroids\n\n    # Step 3: Return sorted centroids rounded to 4 decimal places\n    return sorted(np.round(centroids, 4).tolist(), key=lambda c: (c[0], c))\n\n# Example usage:\n# X = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0], [8.0, 2.0], [10.0, 2.0], [9.0, 3.0]])\n# K = 3\n# random_state = 42\n# print(kmeans(X, K, random_state=random_state))\n```\n\nThis script implements the K-Means clustering algorithm with K-Means++ initialization. It ensures reproducibility by setting seeds for both Python's `random` module and NumPy's random number generator. The centroids are initialized using the K-Means++ method, and the Lloyd's algorithm is used to iteratively assign clusters and update centroids until convergence or the maximum number of iterations is reached. The final centroids are rounded to four decimal places and sorted as specified."}
{"task_id": 111, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes every character of the input string using a provided vocabulary.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text[:time_steps]]\n    return encoded + [0] * (time_steps - len(encoded))\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list/array of integer ids back to text using an inverse vocabulary.\"\"\"\n    return ''.join(inverse_vocab.get(idx, '') for idx in indices if idx != 0)\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes the raw text, runs the model, and decodes the prediction.\"\"\"\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded_text = np.array(encoded_text).reshape(1, -1)  # Reshape for batch size 1\n    prediction = model.predict(encoded_text)\n    predicted_ids = np.argmax(prediction, axis=-1)[0]\n    decoded_string = int_to_string(predicted_ids, inv_output_vocabulary)\n    return decoded_string\n\n# Example usage:\n# Assuming `model` is a pre-trained model with a `predict` method that returns a 2D array of shape (1, TIME_STEPS, num_classes)\n# and `input_vocabulary` and `inv_output_vocabulary` are predefined dictionaries.\n\n# model = ...\n# input_vocabulary = {'a': 1, 'b': 2, ...}\n# inv_output_vocabulary = {1: 'a', 2: 'b', ...}\n# text = \"example text\"\n# print(run_example(model, input_vocabulary, inv_output_vocabulary, text))\n```\n\nThis script provides the required functions to encode a string into integer tokens, run a model prediction, and decode the output back into a string. The `string_to_int` function ensures the encoded list has a fixed length by padding or truncating as necessary. The `int_to_string` function ignores padding tokens during decoding. The `run_example` function ties everything together, handling the model prediction and decoding process."}
{"task_id": 113, "completion_id": 0, "completion": "```\npython\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n\n    predictions = []\n    for example in examples:\n        # Call the run_example function to get the model's output as a list of characters\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        # Concatenate the list of characters into a single string\n        predicted_string = ''.join(output_chars)\n        # Print the input and output pair\n        print(f\"input:  {example}\")\n        print(f\"output: {predicted_string}\")\n        # Collect the predicted string in the list\n        predictions.append(predicted_string)\n\n    return predictions\n\n# Example usage:\n# Assuming the following global constant and helper function are defined in the user's environment\nEXAMPLES = [\"hello\", \"world\", \"example\"]\n\ndef run_example(model, input_vocabulary, inv_output_vocabulary, example):\n    # This is a mock implementation of run_example\n    # In a real scenario, this function would interact with the model and vocabularies\n    return list(model(example))  # Assuming model returns a string directly\n\n# Mock model function for demonstration purposes\ndef mock_model(input_string):\n    # This mock model simply reverses the input string\n    return input_string[::-1]\n\n# Running the examples with the mock model\npredictions = run_examples(mock_model, {}, {}, [\"test\", \"batch\", \"runner\"])\nprint(predictions)  # Output should be ['tset', 'htcab', 'rennur']\n```\n\nThis script defines the `run_examples` function as specified, and includes a mock implementation of `run_example` and a simple mock model for demonstration purposes. The function handles the provided examples and prints the input-output pairs as required, while also returning a list of predictions."}
{"task_id": 115, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    # Ensure y is a column vector\n    y = y.reshape(-1, 1)\n    # Ensure w is a column vector\n    w = w.reshape(-1, 1)\n    \n    # Compute the linear combination z = X \u00b7 w\n    z = X @ w\n    \n    # Compute the predicted probabilities p = \u03c3(z)\n    p = 1 / (1 + np.exp(-z))\n    \n    # Clip probabilities to avoid numerical issues\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    \n    # Compute the average binary cross-entropy loss\n    m = X.shape[0]\n    loss = -1 / m * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    \n    # Compute the gradient of the loss with respect to the weights\n    gradient = 1 / m * X.T @ (p - y)\n    \n    # Return the loss and gradient rounded to 4 decimals\n    return round(loss.item(), 4), gradient.round(4).tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([0, 1, 0])\n# w = np.array([0.1, 0.2])\n# loss, grad = logistic_loss_and_gradient(X, y, w)\n# print(\"Loss:\", loss)\n# print(\"Gradient:\", grad)\n```\n\nThis script defines the `logistic_loss_and_gradient` function, which calculates the average binary cross-entropy loss and its gradient for logistic regression. The function handles numerical stability by clipping the predicted probabilities to avoid logarithms of zero or one. The results are rounded to four decimal places as specified."}
{"task_id": 118, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n\n    m, n = X_train.shape\n    weights = np.ones(m) / m\n    stumps = []\n    stump_weights = []\n\n    for _ in range(n_clf):\n        best_stump = None\n        best_error = float('inf')\n        best_feature = None\n        best_threshold = None\n\n        for feature in range(n):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                predictions = np.ones(m)\n                predictions[X_train[:, feature] < threshold] = -1\n\n                weighted_error = np.sum(weights[predictions != y_train])\n\n                if weighted_error > 0.5:\n                    weighted_error = 1 - weighted_error\n                    predictions = -predictions\n\n                if weighted_error < best_error:\n                    best_error = weighted_error\n                    best_stump = predictions\n                    best_feature = feature\n                    best_threshold = threshold\n\n        alpha = 0.5 * np.log((1 - best_error) / best_error)\n        weights *= np.exp(-alpha * y_train * best_stump)\n        weights /= np.sum(weights)\n\n        stumps.append((best_feature, best_threshold))\n        stump_weights.append(alpha)\n\n    def predict_sample(sample):\n        stump_predictions = np.array([\n            -1 if sample[feature] < threshold else 1\n            for feature, threshold in stumps\n        ])\n        weighted_vote = np.sum(stump_weights * stump_predictions)\n        return 1 if weighted_vote > 0 else -1\n\n    y_test = [predict_sample(sample) for sample in X_test]\n    return y_test\n```\n\nThis script implements the AdaBoost algorithm using decision stumps as weak learners. It iteratively trains stumps, updates weights, and combines the predictions to classify new data. The function `adaboost_predict` returns a list of predicted labels for the test set."}
{"task_id": 128, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    # Step 1: Compute the within-class scatter matrix S_W\n    unique_classes = np.unique(y)\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    for c in unique_classes:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        S_W += np.sum((X_c - mean_c).T @ (X_c - mean_c), axis=1, keepdims=True)\n    \n    # Step 2: Compute the between-class scatter matrix S_B\n    overall_mean = np.mean(X, axis=0)\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    for c in unique_classes:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        N_c = X_c.shape[0]\n        S_B += N_c * (mean_c - overall_mean).T @ (mean_c - overall_mean)\n    \n    # Step 3: Form the matrix A = pinv(S_W) * S_B\n    A = np.linalg.pinv(S_W) @ S_B\n    \n    # Step 4: Eigen-decomposition of A\n    eigenvalues, eigenvectors = np.linalg.eigh(A)\n    \n    # Sort the eigen-pairs in descending order of the eigen-values\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    \n    # Step 5: Deterministic sign fix\n    for i in range(sorted_eigenvectors.shape[1]):\n        first_non_zero_index = np.where(sorted_eigenvectors[:, i] != 0)[0][0]\n        if sorted_eigenvectors[first_non_zero_index, i] < 0:\n            sorted_eigenvectors[:, i] *= -1\n    \n    # Step 6: Project X on the first n_components eigenvectors\n    if n_components == 0:\n        return []\n    W = sorted_eigenvectors[:, :n_components]\n    X_lda = X @ W\n    \n    # Step 7: Round every element to four decimal places and return as list of lists\n    return X_lda.round(4).tolist()\n\n# Example usage\nX = np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]])\ny = np.array([0,0,0,0,1,1,1,1])\nn_components = 1\nprint(multi_class_lda(X, y, n_components))\n```\n\nThis script implements the multi-class Linear Discriminant Analysis (LDA) as described in the task. It computes the within-class and between-class scatter matrices, solves the generalized eigenvalue problem, and projects the data onto the first `n_components` discriminant directions. The results are rounded to four decimal places and returned as a list of lists."}
{"task_id": 140, "completion_id": 0, "completion": "```\npython\nfrom collections import deque\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if grid[0][0] == 'F' or grid[-1][-1] == 'F':\n        return -1\n    if n == 1:\n        return 0\n\n    # Directions for moving in the grid (up, down, left, right)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    # BFS to calculate the minimum time for fire to reach each cell\n    fire_time = [[math.inf] * n for _ in range(n)]\n    fire_queue = deque()\n\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_time[i][j] = 0\n                fire_queue.append((i, j))\n\n    while fire_queue:\n        x, y = fire_queue.popleft()\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] != '#' and fire_time[nx][ny] == math.inf:\n                fire_time[nx][ny] = fire_time[x][y] + 1\n                fire_queue.append((nx, ny))\n\n    # BFS to find the minimum time for the agent to reach the goal\n    agent_queue = deque([(0, 0, 0)])  # (x, y, time)\n    visited = set((0, 0, 0))\n\n    while agent_queue:\n        x, y, t = agent_queue.popleft()\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] != '#' and (nx, ny, t + 1) not in visited:\n                if (nx == n - 1 and ny == n - 1) or t + 1 < fire_time[nx][ny]:\n                    if nx == n - 1 and ny == n - 1:\n                        return t + 1\n                    visited.add((nx, ny, t + 1))\n                    agent_queue.append((nx, ny, t + 1))\n\n    return -1\n```\n\nThis script defines the `escape_fire_maze` function which uses two Breadth-First Searches (BFS) to solve the problem. The first BFS calculates the minimum time for the fire to reach each cell, and the second BFS finds the shortest path for the agent to reach the goal while avoiding cells that will be on fire at the time the agent arrives."}
{"task_id": 141, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\nfrom scipy.spatial.distance import cdist\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n    \n    # Define the distance metrics\n    if metric == 'euclidean':\n        distances = cdist(X_test, X_train, metric='euclidean')\n    elif metric == 'manhattan':\n        distances = cdist(X_test, X_train, metric='cityblock')\n    elif metric == 'cosine':\n        distances = cdist(X_test, X_train, metric='cosine')\n    else:\n        # Fallback to Euclidean if unknown metric\n        distances = cdist(X_test, X_train, metric='euclidean')\n    \n    # Find the k nearest neighbors for each test sample\n    k_indices = np.argsort(distances, axis=1)[:, :k]\n    \n    # Get the labels of the k nearest neighbors\n    k_nearest_labels = y_train[k_indices]\n    \n    # Predict the label by majority vote\n    predicted_labels = np.array([Counter(labels).most_common(1)[0][0] for labels in k_nearest_labels])\n    \n    return predicted_labels\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [5, 6]])\n# y_train = np.array([0, 0, 1, 1])\n# X_test = np.array([[1, 2], [4, 5]])\n# k = 3\n# print(knn_predict(X_train, y_train, X_test, k, metric='euclidean'))\n```\n\nThis script defines the `knn_predict` function which implements the k-Nearest Neighbors algorithm as described. It uses the `cdist` function from `scipy.spatial.distance` to compute the distances between the test and training samples for the specified metric. The function then finds the k nearest neighbors for each test sample, determines the most common label among these neighbors, and returns the predicted labels as a 1-D NumPy array."}
{"task_id": 146, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n    \n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b))\n    \n    def cosine_distance(a, b, eps=1e-12):\n        dot_product = np.dot(a, b)\n        norm_a = np.linalg.norm(a)\n        norm_b = np.linalg.norm(b)\n        return 1 - (dot_product / ((norm_a * norm_b) + eps))\n    \n    # Choose the distance metric function\n    if metric == 'euclidean':\n        distance_func = euclidean_distance\n    elif metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        raise ValueError(\"Unsupported distance metric. Choose from 'euclidean', 'manhattan', or 'cosine'.\")\n    \n    predictions = []\n    \n    for test_sample in X_test:\n        # Compute distances from the test sample to all training samples\n        distances = [distance_func(test_sample, train_sample) for train_sample in X]\n        \n        # Get the indices of the k nearest neighbors\n        k_indices = np.argsort(distances)[:k]\n        \n        # Get the labels of the k nearest neighbors\n        k_nearest_labels = y[k_indices]\n        \n        # Perform majority vote\n        unique_labels, counts = np.unique(k_nearest_labels, return_counts=True)\n        most_common_label = unique_labels[np.argmax(counts)]\n        \n        # In case of a tie, return the smallest label\n        if np.sum(counts == np.max(counts)) > 1:\n            most_common_label = unique_labels[np.argmin(unique_labels[counts == np.max(counts)])]\n        \n        predictions.append(most_common_label)\n    \n    return predictions\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [5, 6]])\n# y_train = np.array([0, 0, 1, 1])\n# X_test = np.array([[1, 1], [4, 5]])\n# predictions = knn_predict(X_train, y_train, X_test, k=3, metric='euclidean')\n# print(predictions)  # Output: [0, 1]\n```\n\nThis script implements the k-Nearest Neighbours (k-NN) classifier from scratch using NumPy. It supports three distance metrics: Euclidean, Manhattan, and Cosine. The function `knn_predict` takes training data, test data, the number of neighbors `k`, and the distance metric as inputs, and returns a list of predicted labels for the test samples."}
{"task_id": 155, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a numpy array if it's not already\n    state = np.array(state)\n    \n    # First layer: Linear transformation followed by ReLU\n    hidden1 = np.maximum(0, np.dot(state, weights['W1']) + weights['b1'])\n    \n    # Second layer: Linear transformation followed by ReLU\n    hidden2 = np.maximum(0, np.dot(hidden1, weights['W2']) + weights['b2'])\n    \n    # Output layer: Linear transformation followed by tanh\n    action = np.tanh(np.dot(hidden2, weights['W3']) + weights['b3'])\n    \n    # Return the action vector rounded to 4 decimal places\n    return [round(x, 4) for x in action]\n\n# Example usage:\n# state = [0.1, -0.2, 0.3]\n# weights = {\n#     \"W1\": np.array([[0.5, -0.5], [0.2, 0.3], [-0.1, 0.1]]),\n#     \"b1\": np.array([0.0, 0.0]),\n#     \"W2\": np.array([[0.4, -0.4], [0.1, 0.2]]),\n#     \"b2\": np.array([0.0, 0.0]),\n#     \"W3\": np.array([[0.3, -0.3], [0.2, 0.1]]),\n#     \"b3\": np.array([0.0, 0.0])\n# }\n# print(actor_forward(state, weights))\n```\n\nThis script defines the `actor_forward` function, which performs the forward pass of a two-hidden-layer actor network using NumPy. The function takes a state vector and a dictionary of weights and biases, computes the action vector, and returns it rounded to four decimal places. The example usage at the bottom demonstrates how to call the function with a sample state and weights."}
{"task_id": 160, "completion_id": 0, "completion": "Certainly! Below is the self-contained Python script implementing Lasso regression using coordinate descent with NumPy:\n\n```python\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    m, n = X.shape\n    \n    # If fit_intercept is True, add an all-ones column to X; otherwise add an all-zeros column\n    if fit_intercept:\n        X = np.hstack([np.ones((m, 1)), X])\n    else:\n        X = np.hstack([np.zeros((m, 1)), X])\n    \n    # Initialize all parameters to zero\n    w = np.zeros(n + 1)\n    \n    # Calculate the sum of squares for each feature\n    sum_sq = np.sum(X**2, axis=0)\n    \n    for _ in range(max_iters):\n        # If fit_intercept is True, recompute the intercept\n        if fit_intercept:\n            w[0] = np.mean(y - X[:, 1:] @ w[1:])\n        \n        # Coordinate descent loop over every weight (excluding the intercept)\n        for j in range(1, n + 1):\n            # Temporarily set the current weight to 0\n            old_wj = w[j]\n            w[j] = 0\n            \n            # Compute the partial residual r_j = y - Xw_{\\neg j}\n            r_j = y - X @ w\n            \n            # Update weight w_j with the soft-thresholding operator\n            w[j] = np.sign(np.dot(X[:, j], r_j)) * max(abs(np.dot(X[:, j], r_j)) - lambda_param * m, 0) / sum_sq[j]\n    \n    # Return the final intercept and weight vector, rounded to 4 decimal places\n    bias = round(w[0], 4) if fit_intercept else 0.0\n    weights = [round(weight, 4) for weight in w[1:]]\n    \n    return weights, bias\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4]])\n# y = np.array([6, 8, 10])\n# weights, bias = fit_lasso(X, y, lambda_param=0.1, max_iters=100, fit_intercept=True)\n# print(\"Weights:\", weights)\n# print(\"Bias:\", bias)\n```\n\nThis script defines the `fit_lasso` function which performs Lasso regression using coordinate descent. It handles the addition of an intercept term if specified, initializes the weights to zero, and iteratively updates each weight using the soft-thresholding operator. The final weights and bias are rounded to four decimal places before being returned."}
{"task_id": 165, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return -1.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or -1 if the inputs have different lengths.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are not already\n    x = np.array(x) if not isinstance(x, np.ndarray) else x\n    y = np.array(y) if not isinstance(y, np.ndarray) else y\n    \n    # Check if the lengths of the vectors are the same\n    if x.shape != y.shape:\n        return -1\n    \n    # Calculate the Hamming distance\n    distance = np.sum(x != y) / len(x)\n    \n    # Return the distance rounded to 4 decimal places\n    return round(distance, 4)\n\n# Example usage:\n# x = [1, 2, 3, 4]\n# y = [1, 0, 3, 4]\n# print(hamming_distance(x, y))  # Output: 0.2500\n```"}
{"task_id": 169, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if N <= 0:\n        raise ValueError(\"N must be a positive integer.\")\n    \n    n = np.arange(N)\n    \n    if window == \"hamming\":\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == \"hann\":\n        w = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == \"blackman_harris\":\n        a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n        w = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n    elif window == \"generalized_cosine\":\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be provided for 'generalized_cosine' window.\")\n        w = np.zeros(N)\n        for k, a_k in enumerate(coefficients):\n            w += a_k * np.cos(2 * k * np.pi * n / (N - 1))\n    else:\n        raise ValueError(f\"Unknown window type: {window}\")\n    \n    return [round(coef, 4) for coef in w]\n\n# Example usage:\n# print(generate_window(\"hamming\", 10))\n# print(generate_window(\"hann\", 10))\n# print(generate_window(\"blackman_harris\", 10))\n# print(generate_window(\"generalized_cosine\", 10, [0.5, 0.5]))\n```\n\nThis script defines the `generate_window` function that generates window coefficients for the specified window types and rounds them to four decimal places. It handles the special cases and raises appropriate errors for invalid inputs."}
{"task_id": 171, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    \n    # Convert inputs to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Check if all training labels are identical\n    if len(np.unique(y_train)) == 1:\n        return [y_train[0]] * len(X_test)\n    \n    # Map original labels to {0, 1}\n    unique_labels = np.unique(y_train)\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train_mapped = np.array([label_map[label] for label in y_train])\n    \n    # Add intercept term (bias) to the data\n    X_train = np.hstack([np.ones((X_train.shape[0], 1)), X_train])\n    X_test = np.hstack([np.ones((X_test.shape[0], 1)), X_test])\n    \n    # Initialize weights\n    weights = np.zeros(X_train.shape[1])\n    \n    # Sigmoid function\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    \n    # Mini-batch Gradient Descent\n    for epoch in range(epochs):\n        # Shuffle the training data\n        indices = np.arange(X_train.shape[0])\n        np.random.shuffle(indices)\n        X_train_shuffled = X_train[indices]\n        y_train_shuffled = y_train_mapped[indices]\n        \n        # Process each mini-batch\n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train_shuffled[i:i + batch_size]\n            y_batch = y_train_shuffled[i:i + batch_size]\n            \n            # Predict probabilities\n            z = np.dot(X_batch, weights)\n            probabilities = sigmoid(z)\n            \n            # Compute gradients\n            gradients = np.dot(X_batch.T, (probabilities - y_batch)) / y_batch.size\n            \n            # Update weights\n            weights -= learning_rate * gradients\n    \n    # Predict on test set\n    z_test = np.dot(X_test, weights)\n    probabilities_test = sigmoid(z_test)\n    predictions_mapped = (probabilities_test >= 0.5).astype(int)\n    \n    # Map predictions back to original labels\n    inverse_label_map = {v: k for k, v in label_map.items()}\n    predictions = [inverse_label_map[pred] for pred in predictions_mapped]\n    \n    return predictions\n```\n\nThis script implements a binary logistic regression classifier using mini-batch gradient descent. It handles the special case where all training labels are identical and maps the labels internally to `{0, 1}` for training, then maps them back to the original labels for predictions."}
{"task_id": 176, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    \"\"\"Fill in here. The final implementation must follow the specification given in the task\n    description and return a list with the predicted class labels for *X_test*.\"\"\"\n\n    def predict_stump(X, feature_index, threshold, polarity):\n        \"\"\"Predicts for a single stump.\"\"\"\n        X = np.array(X)\n        prediction = np.ones(X.shape[0])\n        if polarity == 1:\n            prediction[X[:, feature_index] >= threshold] = -1\n        else:\n            prediction[X[:, feature_index] < threshold] = -1\n        return prediction\n\n    def find_best_stump(X, y, sample_weights):\n        \"\"\"Finds the best stump based on weighted error.\"\"\"\n        m = len(X)\n        n_features = len(X[0])\n        best_error = float('inf')\n        best_feature_index = None\n        best_threshold = None\n        best_polarity = None\n\n        for feature_index in range(n_features):\n            thresholds = np.unique(X[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = predict_stump(X, feature_index, threshold, polarity)\n                    weighted_error = np.sum(sample_weights[y != predictions])\n                    if weighted_error < best_error:\n                        best_error = weighted_error\n                        best_feature_index = feature_index\n                        best_threshold = threshold\n                        best_polarity = polarity\n\n        return best_feature_index, best_threshold, best_polarity, best_error\n\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    y_train[y_train == 0] = -1  # Convert labels to -1 and 1\n\n    n_samples = len(X_train)\n    sample_weights = np.ones(n_samples) / n_samples\n    stumps = []\n\n    for _ in range(n_estimators):\n        feature_index, threshold, polarity, error = find_best_stump(X_train, y_train, sample_weights)\n\n        if error == 0:\n            break\n\n        alpha = 0.5 * np.log((1 - error) / (error + 1e-10))\n        predictions = predict_stump(X_train, feature_index, threshold, polarity)\n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        sample_weights /= np.sum(sample_weights)\n\n        stumps.append((feature_index, threshold, polarity, alpha))\n\n    X_test = np.array(X_test)\n    final_predictions = np.zeros(len(X_test))\n\n    for feature_index, threshold, polarity, alpha in stumps:\n        final_predictions += alpha * predict_stump(X_test, feature_index, threshold, polarity)\n\n    final_predictions = np.sign(final_predictions)\n    final_predictions[final_predictions == -1] = 0  # Convert labels back to 0 and 1\n\n    return final_predictions.tolist()\n```\n\nThis script implements the AdaBoost algorithm using decision stumps as weak learners. It includes functions to predict using a single stump, find the best stump based on weighted error, and the main function to train and predict using the AdaBoost ensemble. The final predictions are returned as a list of integers (0 or 1)."}
{"task_id": 178, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n\n    rng = np.random.default_rng(seed)\n    \n    # Initialize particles' positions and velocities\n    positions = rng.uniform(low=-1, high=1, size=(num_particles, n_dims))\n    velocities = rng.uniform(low=-0.5, high=0.5, size=(num_particles, n_dims))\n    \n    # Initialize personal best positions and their corresponding values\n    pbest_positions = np.copy(positions)\n    pbest_values = np.array([np.sum(p**2) for p in positions])\n    \n    # Initialize global best position and its corresponding value\n    gbest_index = np.argmin(pbest_values)\n    gbest_position = pbest_positions[gbest_index]\n    gbest_value = pbest_values[gbest_index]\n    \n    # PSO parameters\n    w = 0.5  # inertia weight\n    c1 = 1.5  # cognitive weight\n    c2 = 1.5  # social weight\n    \n    for _ in range(num_iterations):\n        for i in range(num_particles):\n            # Update velocity\n            r1, r2 = rng.random(2)\n            velocities[i] = (w * velocities[i] +\n                             c1 * r1 * (pbest_positions[i] - positions[i]) +\n                             c2 * r2 * (gbest_position - positions[i]))\n            \n            # Update position\n            positions[i] = np.clip(positions[i] + velocities[i], -1, 1)\n            \n            # Evaluate new position\n            new_value = np.sum(positions[i]**2)\n            \n            # Update personal best\n            if new_value < pbest_values[i]:\n                pbest_positions[i] = positions[i]\n                pbest_values[i] = new_value\n                \n                # Update global best\n                if new_value < gbest_value:\n                    gbest_position = positions[i]\n                    gbest_value = new_value\n    \n    return round(gbest_value, 4)\n\n# Example usage:\n# print(particle_swarm_optimisation(n_dims=2, num_particles=30, num_iterations=100))\n```\n\nThis script defines a function `particle_swarm_optimisation` that uses Particle Swarm Optimization to minimize the Sphere function. It includes error handling for non-positive input arguments and ensures reproducibility with a random seed. The function returns the best Sphere function value found, rounded to four decimal places."}
{"task_id": 180, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    \n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((np.array(point1) - np.array(point2)) ** 2))\n    \n    if k == 0 or k > len(X_train):\n        k = len(X_train)\n    \n    predictions = []\n    \n    for test_sample in X_test:\n        # Calculate distances from the test sample to all training samples\n        distances = [(euclidean_distance(test_sample, train_sample), label) \n                     for train_sample, label in zip(X_train, y_train)]\n        \n        # Sort distances and get the k nearest neighbours\n        distances.sort(key=lambda x: x[0])\n        k_nearest = distances[:k]\n        \n        if task == \"classification\":\n            # Majority vote for classification\n            labels = [label for _, label in k_nearest]\n            most_common = Counter(labels).most_common()\n            # In case of a tie, return the smallest label\n            most_common = sorted(most_common, key=lambda x: (-x[1], x[0]))\n            predictions.append(most_common[0][0])\n        elif task == \"regression\":\n            # Average for regression\n            values = [value for _, value in k_nearest]\n            predictions.append(round(np.mean(values), 4))\n    \n    return predictions\n```\n\nThis script defines a `knn_predict` function that can perform both classification and regression tasks using the k-Nearest Neighbours algorithm. It calculates the Euclidean distance between the test samples and the training samples, selects the k nearest neighbours, and then either performs majority voting for classification or averages the target values for regression. The function handles edge cases such as when `k` is 0 or larger than the number of training samples."}
{"task_id": 184, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef decision_tree_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    max_depth: int | None = None,\n) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training feature matrix of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Integer class labels for the training data, shape (n_samples,).\n    X_test : np.ndarray\n        Feature matrix to classify, shape (m_samples, n_features).\n    max_depth : int | None, optional\n        Maximum allowed depth of the tree. If None the depth is unlimited.\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for each row in X_test.\n    \"\"\"\n    \n    def gini_impurity(y):\n        m = len(y)\n        if m == 0:\n            return 0.0\n        counts = np.bincount(y)\n        probabilities = counts / m\n        return 1.0 - np.sum(probabilities ** 2)\n    \n    def gini_gain(y, y_left, y_right):\n        m = len(y)\n        m_left = len(y_left)\n        m_right = len(y_right)\n        return gini_impurity(y) - (m_left / m) * gini_impurity(y_left) - (m_right / m) * gini_impurity(y_right)\n    \n    def majority_vote(y):\n        return np.bincount(y).argmax()\n    \n    def best_split(X, y):\n        best_gain = -1.0\n        best_feature = None\n        best_threshold = None\n        n_features = X.shape[1]\n        \n        for feature in range(n_features):\n            unique_values = np.unique(X[:, feature])\n            thresholds = (unique_values[:-1] + unique_values[1:]) / 2.0\n            \n            for threshold in thresholds:\n                y_left = y[X[:, feature] <= threshold]\n                y_right = y[X[:, feature] > threshold]\n                \n                gain = gini_gain(y, y_left, y_right)\n                \n                if gain > best_gain:\n                    best_gain = gain\n                    best_feature = feature\n                    best_threshold = threshold\n        \n        return best_feature, best_threshold\n    \n    def build_tree(X, y, depth=0):\n        if max_depth is not None and depth >= max_depth:\n            return majority_vote(y)\n        \n        if len(np.unique(y)) == 1:\n            return y[0]\n        \n        best_feature, best_threshold = best_split(X, y)\n        \n        if best_feature is None or best_threshold is None:\n            return majority_vote(y)\n        \n        X_left = X[X[:, best_feature] <= best_threshold]\n        y_left = y[X[:, best_feature] <= best_threshold]\n        X_right = X[X[:, best_feature] > best_threshold]\n        y_right = y[X[:, best_feature] > best_threshold]\n        \n        if len(X_left) == 0 or len(X_right) == 0:\n            return majority_vote(y)\n        \n        left_subtree = build_tree(X_left, y_left, depth + 1)\n        right_subtree = build_tree(X_right, y_right, depth + 1)\n        \n        return (best_feature, best_threshold, left_subtree, right_subtree)\n    \n    def predict_tree(tree, x):\n        if isinstance(tree, int):\n            return tree\n        \n        feature, threshold, left_subtree, right_subtree = tree\n        \n        if x[feature] <= threshold:\n            return predict_tree(left_subtree, x)\n        else:\n            return predict_tree(right_subtree, x)\n    \n    tree = build_tree(X_train, y_train)\n    predictions = [predict_tree(tree, x) for x in X_test]\n    \n    return predictions\n```\n\nThis script implements a binary decision tree classifier using the CART algorithm from scratch. It uses Gini impurity to determine the best splits and recursively builds the tree. The tree is then used to predict class labels for the test data. The implementation ensures deterministic predictions based on the provided rules."}
{"task_id": 190, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n    \n    # Calculate Gini impurity for the whole dataset\n    unique_labels, counts = np.unique(y, return_counts=True)\n    p_k = counts / n_samples\n    G_whole_dataset = 1 - np.sum(p_k ** 2)\n    \n    if len(unique_labels) == 1:\n        return (-1, None, round(G_whole_dataset, 4))\n    \n    best_gini = np.inf\n    best_feature_index = -1\n    best_threshold_value = None\n    \n    for j in range(n_features):\n        feature_values = X[:, j]\n        unique_values = np.unique(feature_values)\n        \n        if len(unique_values) == 1:\n            continue\n        \n        for v in unique_values:\n            left_mask = feature_values <= v\n            right_mask = feature_values > v\n            \n            if not np.any(left_mask) or not np.any(right_mask):\n                continue\n            \n            # Calculate Gini impurity for left and right subsets\n            left_labels = y[left_mask]\n            right_labels = y[right_mask]\n            \n            unique_left_labels, left_counts = np.unique(left_labels, return_counts=True)\n            unique_right_labels, right_counts = np.unique(right_labels, return_counts=True)\n            \n            p_k_left = left_counts / len(left_labels)\n            p_k_right = right_counts / len(right_labels)\n            \n            G_left = 1 - np.sum(p_k_left ** 2)\n            G_right = 1 - np.sum(p_k_right ** 2)\n            \n            # Calculate weighted Gini impurity for the split\n            G_split = (len(left_labels) / n_samples) * G_left + (len(right_labels) / n_samples) * G_right\n            \n            # Check if this is the best split so far\n            if G_split < best_gini:\n                best_gini = G_split\n                best_feature_index = j\n                best_threshold_value = v\n            elif np.isclose(G_split, best_gini, atol=1e-12):\n                if j < best_feature_index or (j == best_feature_index and v < best_threshold_value):\n                    best_gini = G_split\n                    best_feature_index = j\n                    best_threshold_value = v\n    \n    return (best_feature_index, best_threshold_value, round(best_gini, 4))\n```\n\nThis script defines the `best_gini_split` function, which calculates the best split for a decision tree using the Gini impurity criterion. It handles tie-breaking rules and returns the appropriate values based on the problem description."}
{"task_id": 191, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    \n    def validate_vectors(x, y):\n        # Check if both are lists, tuples, or NumPy arrays\n        if not (isinstance(x, (list, tuple, np.ndarray)) and isinstance(y, (list, tuple, np.ndarray))):\n            return False\n        # Convert to NumPy arrays for easier manipulation\n        x = np.array(x, dtype=float)\n        y = np.array(y, dtype=float)\n        # Check if they are one-dimensional and of the same length\n        if x.ndim != 1 or y.ndim != 1 or len(x) != len(y):\n            return False\n        return True, x, y\n\n    def euclidean(x, y):\n        return np.sqrt(np.sum((x - y) ** 2))\n\n    def manhattan(x, y):\n        return np.sum(np.abs(x - y))\n\n    def chebyshev(x, y):\n        return np.max(np.abs(x - y))\n\n    def cosine(x, y):\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        return 1 - (np.dot(x, y) / (norm_x * norm_y))\n\n    metrics = {\n        'euclidean': euclidean,\n        'manhattan': manhattan,\n        'chebyshev': chebyshev,\n        'cosine': cosine\n    }\n\n    if name not in metrics:\n        return lambda x, y: -1\n\n    def distance_function(x, y):\n        valid, x, y = validate_vectors(x, y)\n        if not valid:\n            return -1\n        distance = metrics[name](x, y)\n        return round(distance, 4)\n\n    return distance_function\n\n# Example usage:\n# d = metric('euclidean')\n# print(d([1, 2, 3], [4, 5, 6]))  # \u279e 5.1962\n```\n\nThis script defines a `metric` function that returns a callable to compute one of four specified distance metrics between two vectors. The callable includes validation to ensure the inputs meet the specified criteria. If validation fails or the metric name is unsupported, the callable returns `-1`."}
{"task_id": 197, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n\n    if md_action:\n        action_spaces = env.action_space.spaces\n        action_dim = len(action_spaces)\n        for space in action_spaces:\n            if hasattr(space, 'n'):\n                n_actions_per_dim.append(space.n)\n            elif hasattr(space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n                cont_action = True\n        if not cont_action:\n            action_ids = list(product(*(range(n) for n in n_actions_per_dim)))\n    else:\n        if cont_action:\n            action_dim = env.action_space.shape[0]\n            n_actions_per_dim = [np.inf] * action_dim\n        else:\n            action_dim = 1\n            n_actions_per_dim.append(env.action_space.n)\n            action_ids = [(i,) for i in range(env.action_space.n)]\n\n    return n_actions_per_dim, action_ids, action_dim\n```\n\nThis script defines the `action_stats` function, which calculates and returns the required statistics for the action space of a given environment. It handles both continuous and discrete action spaces, as well as single- and multi-dimensional cases."}
{"task_id": 198, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # Initialize beta with zeros\n    beta = np.zeros((V, phi[0].shape[1]))\n    \n    # Accumulate the counts for each word-topic pair\n    for d in range(len(corpus)):\n        for n in range(len(corpus[d])):\n            v = corpus[d][n]\n            beta[v] += phi[d][n]\n    \n    # Normalize the columns of beta\n    column_sums = beta.sum(axis=0)\n    column_sums[column_sums == 0] = 1  # Avoid division by zero\n    beta /= column_sums\n    \n    # Round to 4 decimal places\n    beta_rounded = np.round(beta, 4)\n    \n    # Convert to list of lists\n    beta_list = beta_rounded.tolist()\n    \n    return beta_list\n```\n\nThis script defines the `update_beta` function, which takes the variational parameter `phi`, the tokenized `corpus`, and the vocabulary size `V` as inputs. It computes the word-topic distribution matrix `beta` by accumulating the counts for each word-topic pair, normalizing the columns, rounding the values to four decimal places, and returning the result as a list of lists."}
{"task_id": 202, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    \n    def euclidean_distance(a, b):\n        return np.linalg.norm(a - b)\n    \n    def compute_cost(medoids):\n        cost = 0\n        for i, x in enumerate(X):\n            cost += min(euclidean_distance(x, X[medoid]) for medoid in medoids)\n        return cost\n    \n    def assign_clusters(medoids):\n        return [np.argmin([euclidean_distance(x, X[medoid]) for medoid in medoids]) for x in X]\n    \n    # Step 1: Initialize medoids as the first k samples\n    medoids = list(range(k))\n    current_cost = compute_cost(medoids)\n    \n    # Step 2: Iteratively improve the medoids\n    while True:\n        best_swap = None\n        best_cost_reduction = 0\n        \n        for i, medoid_i in enumerate(medoids):\n            for j, sample_j in enumerate(X):\n                if j not in medoids:\n                    # Try swapping medoid_i with sample_j\n                    new_medoids = medoids[:i] + [j] + medoids[i+1:]\n                    new_cost = compute_cost(new_medoids)\n                    cost_reduction = current_cost - new_cost\n                    \n                    if cost_reduction > best_cost_reduction:\n                        best_cost_reduction = cost_reduction\n                        best_swap = (i, j)\n        \n        if best_cost_reduction > 0:\n            i, j = best_swap\n            medoids[i] = j\n            current_cost -= best_cost_reduction\n        else:\n            break\n    \n    # Step 3: Assign each sample to the closest medoid\n    return assign_clusters(medoids)\n\n# Example usage\nX = np.array([[0,0], [1,0], [0,1], [5,5], [6,5], [5,6]])\nk = 2\nprint(pam_clustering(X, k))  # Output: [0, 0, 0, 1, 1, 1]\n```"}
{"task_id": 216, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    \n    def polynomial_features(x, degree):\n        if degree == 1:\n            return x\n        else:\n            x_poly = []\n            for sample in x:\n                sample_poly = []\n                for d in range(1, degree + 1):\n                    for feature in sample:\n                        sample_poly.append(feature ** d)\n                x_poly.append(sample_poly)\n            return np.array(x_poly)\n    \n    def standardize_features(x):\n        mean = np.mean(x, axis=0)\n        std = np.std(x, axis=0)\n        std[std == 0] = 1  # Avoid division by zero\n        return (x - mean) / std, mean, std\n    \n    def add_bias_term(x):\n        return np.c_[np.ones((x.shape[0], 1)), x]\n    \n    def sign(x):\n        return np.sign(x) * (x != 0)\n    \n    # Check if inputs are valid\n    if len(x_train) != len(y_train) or n_iterations < 1:\n        return -1\n    \n    # Convert inputs to numpy arrays\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    \n    # Check if feature counts are compatible\n    if x_train.shape[1] != x_test.shape[1]:\n        return -1\n    \n    # Generate polynomial features\n    x_train_poly = polynomial_features(x_train, degree)\n    x_test_poly = polynomial_features(x_test, degree)\n    \n    # Standardize features (excluding bias term)\n    x_train_poly_std, mean, std = standardize_features(x_train_poly)\n    x_test_poly_std, _, _ = standardize_features(x_test_poly)\n    \n    # Add bias term\n    x_train_poly_std = add_bias_term(x_train_poly_std)\n    x_test_poly_std = add_bias_term(x_test_poly_std)\n    \n    # Initialize weights\n    w = np.zeros(x_train_poly_std.shape[1])\n    \n    # Batch gradient descent\n    for _ in range(n_iterations):\n        y_pred = np.dot(x_train_poly_std, w)\n        error = y_pred - y_train\n        \n        # Compute gradients\n        gradient = (2 / len(y_train)) * np.dot(x_train_poly_std.T, error)\n        gradient[1:] += reg_factor * (l1_ratio * sign(w[1:]) + (1 - l1_ratio) * w[1:])\n        \n        # Update weights\n        w -= learning_rate * gradient\n    \n    # Make predictions\n    predictions = np.dot(x_test_poly_std, w)\n    \n    return np.round(predictions, 4).tolist()\n```"}
{"task_id": 217, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to numpy arrays\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Compute sigmoid probabilities\n    prob = 1 / (1 + np.exp(-predicted))\n    \n    # Compute gradient\n    gradient = actual * np.exp(-actual * predicted) / (1 + np.exp(-actual * predicted))\n    \n    # Compute Hessian\n    hessian = prob * (1 - prob)\n    \n    # Round results to 6 decimal places\n    gradient = np.round(gradient, 6)\n    hessian = np.round(hessian, 6)\n    prob = np.round(prob, 6)\n    \n    # Convert results back to lists\n    gradient_list = gradient.tolist()\n    hessian_list = hessian.tolist()\n    probability_list = prob.tolist()\n    \n    return (gradient_list, hessian_list, probability_list)\n```\n\nThis script defines the `logistic_components` function, which computes the gradient, Hessian, and probability for logistic loss given the actual labels and predicted scores. The function handles inputs as lists, tuples, or NumPy arrays, performs vectorized computations for efficiency, and ensures all outputs are rounded to six decimal places before returning them as lists."}
{"task_id": 218, "completion_id": 0, "completion": "```\npython\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    \n    def hand_value(hand: list[int]) -> int:\n        \"\"\"Calculate the value of a hand, considering the usable ace.\"\"\"\n        value = sum(hand)\n        aces = hand.count(1)\n        while value > 21 and aces:\n            value -= 10\n            aces -= 1\n        return value\n    \n    def is_natural_blackjack(hand: list[int]) -> bool:\n        \"\"\"Check if the hand is a natural blackjack.\"\"\"\n        return len(hand) == 2 and 1 in hand and 10 in hand\n    \n    player_value = hand_value(player)\n    dealer_value = hand_value(dealer)\n    \n    player_bust = player_value > 21\n    dealer_bust = dealer_value > 21\n    \n    if player_bust:\n        return -1.0\n    if dealer_bust:\n        return 1.0\n    \n    if is_natural_blackjack(player):\n        return 1.5\n    \n    if player_value > dealer_value:\n        return 1.0\n    elif player_value < dealer_value:\n        return -1.0\n    else:\n        return 0.0\n```\n\nThis script defines the `blackjack_outcome` function, which evaluates the outcome of a finished round of Blackjack based on the provided rules. It includes helper functions to calculate the hand value and check for a natural blackjack. The function returns the player's reward as a float, following the specified output constraints."}
{"task_id": 221, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper function that returns element-wise squared log errors.\"\"\"\n    try:\n        actual = np.array(actual, dtype=float)\n        predicted = np.array(predicted, dtype=float)\n        \n        if np.any(actual < 0) or np.any(predicted < 0):\n            return -1\n        \n        if actual.shape != predicted.shape:\n            return -1\n        \n        return (np.log1p(actual) - np.log1p(predicted)) ** 2\n    \n    except Exception as e:\n        return -1\n\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\"\"\"\n    squared_errors = squared_log_error(actual, predicted)\n    \n    if squared_errors == -1:\n        return -1\n    \n    msle = np.mean(squared_errors)\n    return round(float(msle), 4)\n\n\n# Example usage:\nactual = [3, -0.5, 2, 7]\npredicted = [2.5, 0.3, 2, 8]\n\nprint(mean_squared_log_error(actual, predicted))  # Should return -1 due to negative value in actual\n\nactual = [3, 0.5, 2, 7]\npredicted = [2.5, 0.3, 2, 8]\n\nprint(mean_squared_log_error(actual, predicted))  # Should return the MSLE rounded to 4 decimal places\n```\n\nThis script includes the required helper function `squared_log_error` and the main function `mean_squared_log_error` that calculates the Mean Squared Logarithmic Error (MSLE) while performing necessary input validation. If any input validation check fails, the function returns `-1`."}
{"task_id": 222, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    def stable_sigmoid(x):\n        if x >= 0:\n            return 1 / (1 + np.exp(-x))\n        else:\n            return np.exp(x) / (1 + np.exp(x))\n    \n    if isinstance(z, (int, float)):\n        return round(stable_sigmoid(z), 4)\n    else:\n        z = np.array(z)\n        result = np.vectorize(stable_sigmoid)(z)\n        return np.round(result, 4).tolist()\n\n# Example usage:\n# print(sigmoid(0))  # Should return 0.5\n# print(sigmoid([0, -1, 1]))  # Should return [0.5, 0.2689, 0.7311]\n# print(sigmoid(np.array([[0, -1], [1, 1000]])))  # Should return [[0.5, 0.2689], [0.7311, 1.0]]\n```\n\nThis script defines the `sigmoid` function, which computes the sigmoid activation function in a numerically stable manner for both scalar and array-like inputs. The function uses a helper function `stable_sigmoid` to handle the computation differently for positive and negative inputs, ensuring numerical stability. The result is rounded to four decimal places and returned in the appropriate format."}
{"task_id": 224, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    def apply_leaky_relu(value):\n        if isinstance(value, (list, np.ndarray)):\n            return [apply_leaky_relu(v) for v in value]\n        else:\n            return value if value >= 0 else a * value\n\n    # Convert input to numpy array if it's not already\n    if not isinstance(z, np.ndarray):\n        z = np.array(z)\n\n    # Apply the Leaky ReLU function\n    result = apply_leaky_relu(z)\n\n    # Convert the result back to a list\n    return result.tolist()\n\n# Example usage:\n# print(leaky_relu([-1, 0, 1, [-2, 3]]))  # Output: [0.01, 0, 1, [0.02, 3]]\n```\n\nThis script defines the `leaky_relu` function that applies the Leaky ReLU activation to every element of an input tensor, which can be a scalar, a (nested) list, or a `numpy.ndarray`. The function returns the activated values as a plain Python list with the same structure as the input."}
{"task_id": 226, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    \n    def train_decision_stump(X, y, weights):\n        m, n = X.shape\n        min_error = float('inf')\n        best_stump = {}\n        best_predictions = np.zeros(m)\n        \n        for feature in range(n):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(m)\n                    if polarity == 1:\n                        predictions[X[:, feature] < threshold] = -1\n                    else:\n                        predictions[X[:, feature] >= threshold] = -1\n                    \n                    weighted_error = np.sum(weights[predictions != y])\n                    \n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        predictions *= -1\n                    \n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump = {'feature_index': feature, 'threshold': threshold, 'polarity': polarity}\n                        best_predictions = predictions.copy()\n        \n        alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n        return best_stump, alpha, best_predictions\n    \n    n_samples, n_features = X_train.shape\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n    \n    for _ in range(n_clf):\n        stump, alpha, predictions = train_decision_stump(X_train, y_train, weights)\n        stumps.append((stump, alpha))\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n    \n    def predict_with_stumps(X):\n        stump_preds = np.zeros(len(X))\n        for stump, alpha in stumps:\n            feature_index = stump['feature_index']\n            threshold = stump['threshold']\n            polarity = stump['polarity']\n            predictions = np.ones(len(X))\n            if polarity == 1:\n                predictions[X[:, feature_index] < threshold] = -1\n            else:\n                predictions[X[:, feature_index] >= threshold] = -1\n            stump_preds += alpha * predictions\n        return np.sign(stump_preds)\n    \n    return predict_with_stumps(X_test).astype(int).tolist()\n```\n\nThis script implements the AdaBoost algorithm using decision stumps as weak learners. The `adaboost_predict` function trains the ensemble on the provided training data and uses it to predict labels for the test data. The predictions are returned as a list of integers, each being either -1 or 1."}
{"task_id": 241, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n\n    # Flatten the shape to compute the 2D matrix A\n    d0 = shape[0]\n    d1_to_dn = np.prod(shape[1:])\n    A = np.random.randn(d0, d1_to_dn)\n\n    # Compute the SVD of A\n    U, _, VT = np.linalg.svd(A, full_matrices=False)\n\n    # Choose the appropriate factor Q\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = VT\n\n    # Reshape Q back to the requested tensor shape and scale it\n    Q_reshaped = Q.reshape(shape)\n    Q_scaled = Q_reshaped * scale\n\n    # Verify orthogonality condition\n    flat = Q_scaled.reshape(d0, -1)\n    if d0 <= flat.shape[1]:\n        orthogonality_check = flat @ flat.T\n        expected_identity = np.eye(d0) * scale**2\n    else:\n        orthogonality_check = flat.T @ flat\n        expected_identity = np.eye(flat.shape[1]) * scale**2\n\n    # Check if the orthogonality condition is satisfied within a tolerance\n    assert np.allclose(orthogonality_check, expected_identity, atol=1e-6), \"Orthogonality condition not satisfied\"\n\n    return Q_scaled.tolist()\n\n# Example usage\nnp.random.seed(0)\nshape = (2, 2)\nscale = 0.5\nresult = orthogonal(shape, scale)\nprint(result)\n```\n\nThis script defines the `orthogonal` function as specified, which initializes a tensor with an orthogonal matrix using the method described by Saxe et al. (2014). The function checks the orthogonality condition and returns the result as a Python list. The example usage demonstrates how to use the function with a fixed random seed to produce the expected output."}
{"task_id": 243, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Convert the state to a NumPy array\n    s = np.array(state)\n    \n    # Define the weights and biases (all weights = 1.0, all biases = 0.0)\n    W1 = np.ones((3, 4))\n    b1 = np.zeros(4)\n    W2 = np.ones((4, 4))\n    b2 = np.zeros(4)\n    W3 = np.ones((4, 4))\n    b3 = np.zeros(4)\n    Wa = np.ones((4, 3))\n    ba = np.zeros(3)\n    Wc = np.ones((4, 1))\n    bc = np.zeros(1)\n    \n    # Perform the forward pass\n    z1 = np.maximum(0, np.dot(s, W1) + b1)  # ReLU activation\n    z2 = np.maximum(0, np.dot(z1, W2) + b2)  # ReLU activation\n    z3 = np.maximum(0, np.dot(z2, W3) + b3)  # ReLU activation\n    \n    # Actor head\n    logits = np.dot(z3, Wa) + ba\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))  # Softmax activation\n    \n    # Critic head\n    state_value = np.dot(z3, Wc) + bc\n    \n    # Return the rounded results\n    return [round(prob, 4) for prob in action_probs], round(state_value[0], 4)\n\n# Example usage:\nstate = [0.5, -0.2, 0.3]\naction_probs, state_value = actor_critic_forward(state)\nprint(\"Action probabilities:\", action_probs)\nprint(\"State value:\", state_value)\n```\n\nThis script defines the `actor_critic_forward` function, which performs the forward pass of the specified Actor-Critic network using NumPy operations. The function takes a state vector as input and returns the action probabilities and state value, both rounded to four decimal places."}
{"task_id": 249, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    # Convert the input state to a numpy array\n    state = np.array(state)\n    \n    # Shared layers\n    W1, b1 = np.array(params['W1']), np.array(params['b1'])\n    W2, b2 = np.array(params['W2']), np.array(params['b2'])\n    W3, b3 = np.array(params['W3']), np.array(params['b3'])\n    \n    # Actor head\n    Wa, ba = np.array(params['Wa']), np.array(params['ba'])\n    \n    # Critic head\n    Wc, bc = np.array(params['Wc']), np.array(params['bc'])\n    \n    # Forward pass through shared layers with ReLU activations\n    h1 = np.maximum(0, np.dot(state, W1) + b1)\n    h2 = np.maximum(0, np.dot(h1, W2) + b2)\n    h3 = np.maximum(0, np.dot(h2, W3) + b3)\n    \n    # Actor head: compute action probabilities with softmax\n    action_scores = np.dot(h3, Wa) + ba\n    exp_action_scores = np.exp(action_scores - np.max(action_scores))  # for numerical stability\n    probabilities = exp_action_scores / np.sum(exp_action_scores)\n    \n    # Critic head: compute state value\n    value = np.dot(h3, Wc) + bc\n    \n    # Round the probabilities and the state value to four decimal places\n    probabilities = [round(p, 4) for p in probabilities]\n    value = round(value[0], 4)\n    \n    # Ensure 0.0 and 1.0 are represented correctly\n    probabilities = [float(f\"{p:.1f}\") if p in [0.0, 1.0] else p for p in probabilities]\n    value = float(f\"{value:.1f}\") if value in [0.0, 1.0] else value\n    \n    return probabilities, value\n```\n\nThis script defines the `actor_critic_forward` function, which performs the forward pass through the shared layers and the separate actor and critic heads, computes the action probabilities using the softmax function, and the state value as a scalar. The results are rounded to four decimal places, with special handling for values exactly 0.0 or 1.0 to ensure they are represented with a single decimal place."}
{"task_id": 253, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)  # Ensure w is a NumPy array for vectorized operations\n    l2_ratio = 1 - l1_ratio\n    \n    if gradient:\n        # Compute the gradient\n        grad = alpha * (l1_ratio * np.sign(w) + l2_ratio * w)\n        return [round(g, 4) for g in grad.tolist()]\n    else:\n        # Compute the penalty value\n        l1_penalty = np.linalg.norm(w, 1)\n        l2_penalty = np.linalg.norm(w, 2) ** 2\n        penalty = alpha * (l1_ratio * l1_penalty + 0.5 * l2_ratio * l2_penalty)\n        return round(penalty, 4)\n\n# Example usage:\n# w = [1.0, -2.0, 3.0]\n# alpha = 0.5\n# l1_ratio = 0.8\n# print(elastic_net_regularization(w, alpha, l1_ratio, gradient=False))  # Penalty value\n# print(elastic_net_regularization(w, alpha, l1_ratio, gradient=True))   # Gradient\n```\n\nThis script defines the `elastic_net_regularization` function, which computes either the Elastic-Net penalty value or its gradient based on the `gradient` flag. The function handles the input weight vector `w` as either a list or a NumPy array and ensures the output is rounded to four decimal places as specified."}
{"task_id": 256, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    # Handle special cases\n    if param_name in [\"X\", \"y\"]:\n        return None\n    if param_name in [\"Ba\", \"Bx\"]:\n        param_name = param_name.lower()\n    \n    # Get the parameter\n    param = model.parameters[param_name]\n    param_shape = param.shape\n    grads = np.zeros_like(param, dtype=np.float64)\n    \n    # Iterate over each element of the parameter\n    for i in range(param.size):\n        # Get the index of the element in the flattened array\n        idx = np.unravel_index(i, param_shape)\n        \n        # Save the original value\n        original_value = param[idx]\n        \n        # Perturb the parameter positively\n        param[idx] = original_value + epsilon\n        model.flush_gradients()\n        predictions_pos = []\n        for t in range(n_t):\n            prediction = model.forward(X[:, :, t])\n            predictions_pos.append(prediction)\n        loss_pos = loss_func(predictions_pos)\n        \n        # Perturb the parameter negatively\n        param[idx] = original_value - epsilon\n        model.flush_gradients()\n        predictions_neg = []\n        for t in range(n_t):\n            prediction = model.forward(X[:, :, t])\n            predictions_neg.append(prediction)\n        loss_neg = loss_func(predictions_neg)\n        \n        # Restore the original value\n        param[idx] = original_value\n        \n        # Compute the numerical gradient using central difference\n        grads[idx] = (loss_pos - loss_neg) / (2 * epsilon)\n    \n    return grads.T\n```\n\nThis script defines the `grad_check_RNN` function, which performs numerical gradient checking for a specified parameter in a vanilla RNN model. The function handles special cases for parameter names and computes the numerical gradient using the central difference method. The result is returned as the transposed numerical gradient."}
{"task_id": 257, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n\n    m, n = X_train.shape\n    w = np.ones(m) / m  # Initialize weights uniformly\n    stumps = []\n    alphas = []\n\n    for _ in range(n_clf):\n        # Find the best stump\n        best_stump = None\n        min_error = float('inf')\n        best_threshold = 0\n        best_polarity = 1\n\n        for feature_i in range(n):\n            thresholds = np.unique(X_train[:, feature_i])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(m)\n                    predictions[X_train[:, feature_i] * polarity < threshold * polarity] = -1\n\n                    weighted_error = np.sum(w[predictions != y_train])\n                    if weighted_error > 0.5:\n                        weighted_error = 1 - weighted_error\n                        polarity *= -1\n\n                    if weighted_error < min_error:\n                        min_error = weighted_error\n                        best_stump = (feature_i, threshold)\n                        best_polarity = polarity\n\n        # Calculate alpha\n        epsilon = min_error\n        alpha = 0.5 * np.log((1.0 - epsilon) / (epsilon + 1e-10))\n        alphas.append(alpha)\n\n        # Update weights\n        predictions = np.ones(m)\n        feature_i, threshold = best_stump\n        predictions[X_train[:, feature_i] * best_polarity < threshold * best_polarity] = -1\n        w *= np.exp(-alpha * y_train * predictions)\n        w /= np.sum(w)\n\n        # Save the stump\n        stumps.append((best_stump, best_polarity, alpha))\n\n    # Predict on test data\n    m_test, _ = X_test.shape\n    y_pred = np.zeros(m_test)\n\n    for (feature_i, threshold), polarity, alpha in stumps:\n        predictions = np.ones(m_test)\n        predictions[X_test[:, feature_i] * polarity < threshold * polarity] = -1\n        y_pred += alpha * predictions\n\n    return [1 if y >= 0 else -1 for y in y_pred]\n```"}
{"task_id": 261, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError(\"Shape must have at least two dimensions.\")\n\n    fan_in = shape[1]\n    fan_out = shape[0]\n    \n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n\n    std_dev = np.sqrt(2 / (fan_in + fan_out))\n    \n    return np.random.normal(0, std_dev, shape).astype(np.float)\n\n# Example usage:\nif __name__ == \"__main__\":\n    shape = (32, 64, 3, 3)  # Example shape for a convolutional layer\n    weights = glorot_normal(shape)\n    print(\"Sample mean:\", np.mean(weights))\n    print(\"Sample std dev:\", np.std(weights))\n    print(\"Theoretical std dev:\", np.sqrt(2 / (shape[1] * np.prod(shape[2:]) + shape[0] * np.prod(shape[2:]))))\n```\n\nThis script defines the `glorot_normal` function, which initializes a NumPy array with weights according to the Glorot/Xavier normal initialization method. The function calculates the `fan_in` and `fan_out` values based on the input shape and computes the standard deviation `s`. It then returns a NumPy array of the specified shape with values drawn from a normal distribution with mean 0 and standard deviation `s`. The example usage at the bottom demonstrates how to use the function and verifies that the sample mean and standard deviation are as expected."}
{"task_id": 266, "completion_id": 0, "completion": "```\npython\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    # Create a dictionary to map each vertex to its index in V\n    vertex_index = {vertex: idx for idx, vertex in enumerate(V)}\n    \n    # Initialize the adjacency list with empty sets to avoid duplicates\n    adj_list = [[] for _ in V]\n    \n    # Process each edge\n    for u, v in E:\n        # Add v to the adjacency list of u if it's not already there\n        if v not in adj_list[vertex_index[u]]:\n            adj_list[vertex_index[u]].append(v)\n        # Add u to the adjacency list of v if it's not already there\n        if u not in adj_list[vertex_index[v]]:\n            adj_list[vertex_index[v]].append(u)\n    \n    # Sort each adjacency list according to the order of appearance in V\n    for i in range(len(adj_list)):\n        adj_list[i].sort(key=lambda x: vertex_index[x])\n    \n    return adj_list\n\n# Example usage:\nV = ['a', 'b', 'c', 'd']\nE = [('a', 'b'), ('b', 'c'), ('a', 'c'), ('b', 'd')]\nprint(build_adj_list(V, E))  # Output: [['b', 'c'], ['a', 'c', 'd'], ['a', 'b'], ['b']]\n```\n\nThis script defines the `build_adj_list` function, which constructs an adjacency list representation of an undirected graph from a list of vertices `V` and a list of edges `E`. The function ensures that each adjacency list is sorted according to the order of vertices in `V` and contains no duplicate neighbors."}
{"task_id": 267, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_feature_index = 0\n    best_threshold = 0.0\n    best_polarity = 1\n    best_weighted_error = float('inf')\n\n    for feature_index in range(n_features):\n        # Get unique values from the current feature and sort them\n        unique_values = np.unique(X[:, feature_index])\n        thresholds = (unique_values[:-1] + unique_values[1:]) / 2.0\n\n        for threshold in thresholds:\n            for polarity in [1, -1]:\n                # Make predictions for the current stump\n                predictions = np.where(X[:, feature_index] < threshold, polarity, -polarity)\n                # Calculate the weighted error for this stump\n                weighted_error = np.sum(sample_weights * (predictions != y))\n                \n                # Update the best stump if the current one has a lower weighted error\n                if weighted_error < best_weighted_error:\n                    best_weighted_error = weighted_error\n                    best_feature_index = feature_index\n                    best_threshold = threshold\n                    best_polarity = polarity\n\n    return {\n        \"feature_index\": best_feature_index,\n        \"threshold\": round(best_threshold, 4),\n        \"polarity\": best_polarity,\n        \"weighted_error\": round(best_weighted_error, 4)\n    }\n```\n\nThis script defines a function `train_decision_stump` that finds the optimal weighted decision stump for a binary classification task. It iterates over each feature, considers all unique feature values as candidate thresholds, and evaluates both polarities (1 and -1). The stump with the minimal weighted error is selected and returned as a dictionary with the specified keys."}
{"task_id": 273, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of class labels.\"\"\"\n    if not labels:\n        return 0.0\n    label_counts = Counter(labels)\n    total = len(labels)\n    entropy_value = 0.0\n    for count in label_counts.values():\n        p = count / total\n        entropy_value -= p * math.log2(p)\n    return entropy_value\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    feature = np.array(feature)\n    target = np.array(target)\n    \n    # Sort feature and corresponding target labels\n    sorted_indices = np.argsort(feature)\n    sorted_feature = feature[sorted_indices]\n    sorted_target = target[sorted_indices]\n    \n    # Initialize variables\n    best_threshold = None\n    max_info_gain = 0.0\n    n = len(sorted_feature)\n    \n    # Calculate the entropy of the parent node\n    H_parent = entropy(sorted_target)\n    \n    # Iterate through the sorted feature values to find the best threshold\n    for i in range(n - 1):\n        if sorted_feature[i] != sorted_feature[i + 1]:\n            # Candidate threshold is the midpoint between current and next value\n            threshold = (sorted_feature[i] + sorted_feature[i + 1]) / 2.0\n            \n            # Split the data into left and right subsets\n            left_indices = sorted_indices[:i + 1]\n            right_indices = sorted_indices[i + 1:]\n            left_labels = sorted_target[:i + 1]\n            right_labels = sorted_target[i + 1:]\n            \n            # Calculate the entropy of the left and right subsets\n            H_left = entropy(left_labels)\n            H_right = entropy(right_labels)\n            \n            # Calculate the information gain\n            info_gain = H_parent - (len(left_labels) / n) * H_left - (len(right_labels) / n) * H_right\n            \n            # Update the best threshold and max information gain if necessary\n            if info_gain > max_info_gain:\n                max_info_gain = info_gain\n                best_threshold = threshold\n    \n    # Return the best threshold and information gain rounded to 4 decimal places\n    return (round(best_threshold, 4), round(max_info_gain, 4)) if best_threshold is not None else (None, 0.0)\n```\n\nThis script defines a function `best_split` that calculates the optimal numerical threshold for splitting a dataset in a decision tree based on information gain. The function handles cases where no legal threshold exists or where no positive information gain can be achieved."}
{"task_id": 286, "completion_id": 0, "completion": "```\npython\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    return [[0.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    return [[1.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    return [[random.uniform(low, high) for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError(\"Invalid initialization function.\")\n```\n\nThis script defines the required initializer functions (`zeros_init`, `ones_init`, and `random_uniform_init`) and the `get_initializer` function that retrieves the appropriate initializer based on the provided name. The `get_initializer` function checks if the name corresponds to a callable object in the global namespace and raises a `ValueError` if it does not."}
{"task_id": 287, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n    \n    # Calculate output dimensions\n    H_out = (H - p_h) // s_h + 1\n    W_out = (W - p_w) // s_w + 1\n    \n    # Initialize pooled output\n    pooled_output = np.zeros((N, C, H_out, W_out))\n    \n    # Forward pass\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_out):\n                for w in range(W_out):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    pooled_output[n, c, h, w] = np.mean(X[n, c, h_start:h_end, w_start:w_end])\n    \n    # Initialize gradient input\n    grad_input = np.zeros_like(X)\n    \n    # Backward pass\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_out):\n                for w in range(W_out):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += accum_grad[n, c, h, w] / (p_h * p_w)\n    \n    # Round and convert to lists\n    pooled_output = np.round(pooled_output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    \n    return pooled_output, grad_input\n```\n\nThis script defines the `average_pool2d` function, which performs both the forward and backward passes of a 2-D average-pooling layer. It computes the pooled output by averaging the elements within each pooling window and propagates the gradient back to the input by distributing it equally among the elements of each pooling window. The results are rounded to the nearest 4th decimal and converted to Python lists before being returned."}
{"task_id": 290, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        return (tree_a.feature == tree_b.feature and\n                np.isclose(tree_a.threshold, tree_b.threshold) and\n                compare_trees(tree_a.left, tree_b.left) and\n                compare_trees(tree_a.right, tree_b.right))\n    else:\n        return False\n```\n\nThis script defines the `Leaf` and `Node` classes as specified, and implements the `compare_trees` function to recursively compare two decision trees for equivalence based on the given criteria."}
{"task_id": 292, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                            parent2: list[list[int | float]],\n                            cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    # Convert parent lists to numpy arrays for easier manipulation\n    np_parent1 = np.array(parent1)\n    np_parent2 = np.array(parent2)\n    \n    # Check if the shapes of the parent matrices are the same\n    if np_parent1.shape != np_parent2.shape:\n        return -1\n    \n    # Get the number of columns\n    num_columns = np_parent1.shape[1]\n    \n    # Ensure the cutoff is within valid range\n    if cutoff < 0 or cutoff > num_columns:\n        raise ValueError(\"Cutoff must be between 0 and the number of columns (inclusive).\")\n    \n    # Create child1 and child2 using numpy slicing\n    child1 = np.concatenate((np_parent1[:, :cutoff], np_parent2[:, cutoff:]), axis=1)\n    child2 = np.concatenate((np_parent2[:, :cutoff], np_parent1[:, cutoff:]), axis=1)\n    \n    # Convert the children numpy arrays back to lists\n    child1_list = child1.tolist()\n    child2_list = child2.tolist()\n    \n    return (child1_list, child2_list)\n\n# Example usage:\nparent1 = [[1, 2, 3], [4, 5, 6]]\nparent2 = [[7, 8, 9], [10, 11, 12]]\ncutoff = 1\n\nresult = single_point_crossover(parent1, parent2, cutoff)\nprint(\"Child 1:\", result[0])\nprint(\"Child 2:\", result[1])\n```\n\nThis script defines the `single_point_crossover` function, which performs the specified single-point column crossover operation on two parent weight matrices. It checks for shape compatibility, performs the crossover using NumPy for efficient slicing, and returns the resulting child matrices as nested Python lists."}
{"task_id": 294, "completion_id": 0, "completion": "```\npython\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {label: [] for label in G['_V2I']}\n    \n    for source_index, edges in enumerate(G['_G']):\n        source_label = list(G['_V2I'].keys())[source_index]\n        for source, target, weight in edges:\n            adj[source].append((target, weight))\n            if not G['is_directed']:\n                adj[target].append((source, weight))\n    \n    # Sort the neighbour lists alphabetically by the neighbour label\n    for label in adj:\n        adj[label].sort(key=lambda x: x[0])\n    \n    return adj\n\n# Example usage:\n# G = {\n#     'is_directed': False,\n#     '_V2I': {'A': 0, 'B': 1, 'C': 2},\n#     '_G': [\n#         [('A', 'B', 1.0), ('A', 'C', 2.0)],\n#         [('B', 'A', 1.0), ('B', 'C', 3.0)],\n#         [('C', 'A', 2.0), ('C', 'B', 3.0)]\n#     ]\n# }\n# print(to_networkx(G))\n```\n\nThis script defines the `to_networkx` function which converts a custom graph representation into an adjacency dictionary. The function handles both directed and undirected graphs, ensures that edges in undirected graphs appear in both directions, and sorts the neighbor lists alphabetically. The example usage at the bottom demonstrates how to use the function with a sample graph."}
{"task_id": 296, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)  # Convert input to a NumPy array if it isn't already\n    return np.all((x == 0) | (x == 1))\n\n# Example usage:\n# print(is_binary(np.array([0, 1, 0, 1])))  # Should return True\n# print(is_binary(np.array([0, 2, 0, 1])))  # Should return False\n# print(is_binary(np.array([True, False, True])))  # Should return True\n# print(is_binary(np.array([0.0, 1.0, 0.0])))  # Should return True\n# print(is_binary(np.array([0.0, 1.5, 0.0])))  # Should return False\n```"}
{"task_id": 298, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    if N < 1:\n        raise ValueError(\"N must be at least 1\")\n\n    # Tokenize the corpus and count N-grams and (N-1)-grams\n    ngram_counts = defaultdict(int)\n    n1gram_counts = defaultdict(int)\n    total_tokens = 0\n\n    for sentence in corpus:\n        tokens = sentence.split()\n        if N > 1:\n            tokens = [\"<bol>\"] * (N - 1) + tokens + [\"<eol>\"]\n        total_tokens += len(tokens)\n        \n        for i in range(len(tokens) - N + 1):\n            ngram = tuple(tokens[i:i + N])\n            ngram_counts[ngram] += 1\n            if N > 1:\n                n1gram = tuple(tokens[i:i + N - 1])\n                n1gram_counts[n1gram] += 1\n\n    # Tokenize the query and pad it if necessary\n    query_tokens = query.split()\n    if len(query_tokens) < N:\n        return float('-inf')\n    if N > 1:\n        query_tokens = [\"<bol>\"] * (N - 1) + query_tokens + [\"<eol>\"]\n\n    # Calculate the log-probability of the query\n    log_prob = 0.0\n    for i in range(len(query_tokens) - N + 1):\n        ngram = tuple(query_tokens[i:i + N])\n        if N == 1:\n            count = ngram_counts[ngram]\n            total = total_tokens\n        else:\n            count = ngram_counts[ngram]\n            n1gram = tuple(query_tokens[i:i + N - 1])\n            total = n1gram_counts[n1gram]\n\n        if total == 0:\n            return float('-inf')\n        prob = count / total\n        if prob == 0:\n            return float('-inf')\n        log_prob += math.log(prob)\n\n    return round(log_prob, 4)\n\n# Example usage:\ncorpus = [\"a b a\", \"b a b\"]\nquery = \"a b\"\nN = 1\nprint(ngram_log_prob(corpus, query, N))  # Output: -1.3863\n```"}
{"task_id": 302, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n = X.shape[0]\n    \n    # Step 1: Build the weighted adjacency matrix W\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                W[i, j] = 1 / (1 + np.linalg.norm(X[i] - X[j]))\n    \n    # Step 2: Compute the (unnormalized) graph Laplacian L = D - W\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    \n    # Step 3: Obtain the first k eigenvectors of L\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    \n    # Step 4: Run k-means on the rows of E\n    centroids = E[:k].copy()\n    labels = np.zeros(n, dtype=int)\n    max_iterations = 100\n    \n    for _ in range(max_iterations):\n        # Assign clusters\n        for i in range(n):\n            distances = np.linalg.norm(E[i] - centroids, axis=1)\n            labels[i] = np.argmin(distances)\n        \n        # Update centroids\n        new_centroids = np.zeros_like(centroids)\n        cluster_counts = np.zeros(k, dtype=int)\n        \n        for i in range(n):\n            new_centroids[labels[i]] += E[i]\n            cluster_counts[labels[i]] += 1\n        \n        # Handle empty clusters\n        for i in range(k):\n            if cluster_counts[i] == 0:\n                new_centroids[i] = E[np.random.choice(n)]\n            else:\n                new_centroids[i] /= cluster_counts[i]\n        \n        # Check for convergence\n        if np.all(centroids == new_centroids):\n            break\n        \n        centroids = new_centroids\n    \n    return labels.tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [1, 4], [1, 0], [10, 2], [10, 4], [10, 0]])\n# k = 2\n# print(spectral_clustering(X, k))\n```\n\nThis script implements the Spectral Clustering algorithm as described. It constructs the adjacency matrix, computes the Laplacian, finds the eigenvectors, and applies k-means clustering to the eigenvectors. The k-means implementation is deterministic by using the first `k` rows of `E` as initial centroids and handles empty clusters by reinitializing them with random rows from `E`."}
{"task_id": 303, "completion_id": 0, "completion": "```\npython\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_mine, prev_label = params[prev_ix]\n    curr_mine, curr_label = params[ix]\n\n    debug_str = (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_mine}\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{golds[prev_label]}\\n\"\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_mine}\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{golds[curr_label]}{warn_str}\\n\"\n        \"----------------------- END DEBUG -----------------------\"\n    )\n    return debug_str\n```"}
{"task_id": 304, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n    \n    N, M = X.shape\n    \n    # Handle the prior mean mu\n    if np.isscalar(mu):\n        mu = np.full(M, mu)\n    \n    # Handle the prior scale V\n    if V is None:\n        V_inv = np.eye(M)\n    elif np.isscalar(V):\n        V_inv = np.eye(M) / V\n    elif isinstance(V, (list, tuple)):\n        V_inv = np.diag(1.0 / np.array(V))\n    else:\n        V_inv = np.linalg.inv(V)\n    \n    # Compute the posterior mean and covariance\n    XTX = X.T @ X\n    XTy = X.T @ y\n    \n    Sigma_b_inv = V_inv + XTX\n    Sigma_b = np.linalg.inv(Sigma_b_inv)\n    \n    mu_b = Sigma_b @ (V_inv @ mu + XTy)\n    \n    return [round(coef, 4) for coef in mu_b]\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4]])\n# y = np.array([1, 2, 3])\n# print(bayesian_posterior_mean(X, y))\n```\n\nThis script defines the `bayesian_posterior_mean` function, which calculates the posterior mean of the coefficients in a Bayesian linear regression model with an unknown noise variance. The function handles different types of prior specifications for `mu` and `V` and optionally adds an intercept to the design matrix `X`. The coefficients are rounded to four decimal places before being returned."}
{"task_id": 308, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs // 2\n\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(m):\n        return 700 * (10**(m / 2595) - 1)\n\n    # Convert Hertz to Mel\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n\n    # Generate n_filters + 2 equally spaced values on the Mel axis\n    mel_points = np.linspace(min_mel, max_mel, n_filters + 2)\n\n    # Convert Mel points back to Hertz\n    hz_points = mel_to_hz(mel_points)\n\n    # Number of DFT bins\n    n_bins = N // 2 + 1\n\n    # Initialize the filterbank\n    filterbank = np.zeros((n_filters, n_bins))\n\n    for i in range(n_filters):\n        f_left = hz_points[i]\n        f_center = hz_points[i + 1]\n        f_right = hz_points[i + 2]\n\n        for k in range(n_bins):\n            freq = k * fs / N\n\n            if f_left < freq <= f_center:\n                filterbank[i, k] = (freq - f_left) / (f_center - f_left)\n            elif f_center < freq <= f_right:\n                filterbank[i, k] = (f_right - freq) / (f_right - f_center)\n\n        if normalize:\n            filterbank[i] = 2 / (hz_points[i + 2] - hz_points[i]) * filterbank[i]\n\n    # Round to 4 decimal places and convert to a list of lists\n    filterbank = np.round(filterbank, 4).tolist()\n\n    return filterbank\n```\n\nThis script defines the `mel_filterbank` function which constructs a Mel filterbank matrix as specified. The function uses helper functions to convert between Hertz and Mel scales, generates the filterbank, and normalizes it if required. The output is rounded to four decimal places and returned as a list of lists."}
{"task_id": 312, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    \n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n    \n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    \n    n = np.arange(window_len)\n    window = (a0 - a1 * np.cos(2 * np.pi * n / N) +\n              a2 * np.cos(4 * np.pi * n / N) -\n              a3 * np.cos(6 * np.pi * n / N))\n    \n    if not symmetric:\n        window = window[:-1]\n    \n    return [round(x, 4) for x in window]\n\n# Example usage:\n# print(blackman_harris(10, symmetric=False))\n# print(blackman_harris(10, symmetric=True))\n```\n\nThis script defines the `blackman_harris` function, which generates a Blackman-Harris window of a specified length and type (symmetric or periodic). The function handles special cases for window lengths less than or equal to 1 and ensures all values are rounded to four decimal places before returning the window as a list."}
{"task_id": 313, "completion_id": 0, "completion": "```\npython\nimport math\nimport numpy as np\n\ndef digamma(x):\n    \"\"\"Compute the digamma function using recursion and asymptotic expansion.\"\"\"\n    # Shift x to a value where the asymptotic expansion is accurate\n    epsilon = 1e-5\n    if x < 6:\n        return digamma(x + 1) - 1 / x\n    \n    # Asymptotic expansion for large x\n    return math.log(x) - 1 / (2 * x) - 1 / (12 * x**2) + 1 / (120 * x**4) - 1 / (252 * x**6)\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    gamma_d = gamma[d]\n    gamma_dt = gamma_d[t]\n    sum_gamma_d = sum(gamma_d)\n    \n    psi_gamma_dt = digamma(gamma_dt)\n    psi_sum_gamma_d = digamma(sum_gamma_d)\n    \n    result = psi_gamma_dt - psi_sum_gamma_d\n    return round(result, 4)\n\n# Example usage:\n# gamma = np.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])\n# d = 0\n# t = 1\n# print(expected_log_dirichlet(gamma, d, t))  # Output should be rounded to 4 decimals\n```\n\nThis script defines the `digamma` function using the recursion and asymptotic expansion methods described in the task. The `expected_log_dirichlet` function then uses this `digamma` function to compute the expected value of the logarithm of the specified component of a Dirichlet-distributed vector, as required."}
{"task_id": 317, "completion_id": 0, "completion": "```\npython\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    header = \"------------------------- DEBUG -------------------------\\n\"\n    footer = \"----------------------- END DEBUG -----------------------\\n\"\n    \n    prev_ix = max(ix - 1, 0)\n    prev_prediction, prev_label = params[prev_ix]\n    prev_gold = golds[prev_label]\n    \n    curr_prediction, curr_label = params[ix]\n    curr_gold = golds[curr_label]\n    \n    prev_block = (\n        f\"Mine (prev) [{prev_label}]:\\n\"\n        f\"{prev_prediction}\\n\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n\"\n        f\"{prev_gold}\\n\\n\"\n    )\n    \n    curr_block = (\n        f\"Mine [{curr_label}]:\\n\"\n        f\"{curr_prediction}\\n\\n\"\n        f\"Theirs [{curr_label}]:\\n\"\n        f\"{curr_gold}\"\n    )\n    \n    return header + prev_block + curr_block + warn_str + footer\n\n# Example usage:\n# params = [(\"prediction1\", \"label1\"), (\"prediction2\", \"label2\")]\n# golds = {\"label1\": \"expected1\", \"label2\": \"expected2\"}\n# ix = 1\n# print(err_fmt(params, golds, ix, \" (WARNING: mismatch)\"))\n```\n\nThis script defines the `err_fmt` function as specified, which generates a formatted debug report comparing predictions to expected values based on the given inputs. The function constructs the report by formatting the previous and current predictions and their corresponding gold values, and then combines them with the specified header and footer."}
{"task_id": 318, "completion_id": 0, "completion": "```\npython\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    D = np.ones(n_samples) / n_samples  # Initialize weights uniformly\n    alphas = []\n    stumps = []\n\n    for _ in range(n_estimators):\n        # Find the best stump\n        min_error = float('inf')\n        best_stump = {}\n        for j in range(n_features):\n            # Get all unique values of feature j to consider as thresholds\n            thresholds = np.unique(X_train[:, j])\n            for t in thresholds:\n                for p in [-1, 1]:\n                    # Make predictions using current stump\n                    predictions = np.ones(n_samples)\n                    predictions[X_train[:, j] < t] = -1\n                    predictions *= p\n\n                    # Calculate weighted error\n                    error = D[(predictions != y_train)].sum()\n\n                    # If error > 0.5, flip polarity\n                    if error > 0.5:\n                        error = 1 - error\n                        p *= -1\n                        predictions *= -1\n\n                    # Update min error and best stump if a better stump is found\n                    if error < min_error:\n                        min_error = error\n                        best_stump = {'j': j, 't': t, 'p': p, 'pred': predictions}\n\n        # Calculate alpha\n        alpha = 0.5 * math.log((1 - min_error) / min_error)\n        alphas.append(alpha)\n        stumps.append(best_stump)\n\n        # Update weights\n        D *= np.exp(-alpha * y_train * best_stump['pred'])\n        D /= D.sum()  # Normalize to sum to 1\n\n    # Make predictions on X_test\n    predictions = np.zeros(X_test.shape[0])\n    for alpha, stump in zip(alphas, stumps):\n        pred = np.ones(X_test.shape[0])\n        pred[X_test[:, stump['j']] < stump['t']] = -1\n        pred *= stump['p']\n        predictions += alpha * pred\n\n    # Final prediction\n    final_predictions = np.sign(predictions).astype(int)\n    return final_predictions.tolist()\n```\n\nThis script defines the `adaboost_predict` function, which implements the AdaBoost.M1 algorithm using decision stumps as weak learners. The function trains the model on the provided training data and predicts the labels for the test data. The predictions are returned as a list of integers, either `-1` or `1`."}
{"task_id": 329, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n\n    delta_f = fs / N\n    if positive_only:\n        # Non-negative frequencies\n        frequencies = np.arange(0, N // 2 + 1) * delta_f\n    else:\n        # Full list of frequencies as per np.fft.fftfreq\n        frequencies = np.fft.fftfreq(N, d=1/fs)\n\n    # Round to 4 decimal places and convert to list\n    return np.round(frequencies, 4).tolist()\n\n# Example usage:\n# print(dft_bins(8, 1000, positive_only=True))\n# print(dft_bins(8, 1000, positive_only=False))\n```\n\nThis script defines the `dft_bins` function which calculates the center frequencies of DFT bins based on the given parameters. It handles both positive-only and full frequency modes, and ensures the output is rounded to four decimal places."}
{"task_id": 331, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    \n    n_samples, n_estimators = predictions.shape\n    \n    # Initialize an array to store the sum of OOB predictions and another for the count of OOB predictions\n    oob_sums = np.zeros(n_samples)\n    oob_counts = np.zeros(n_samples)\n    \n    # Calculate the sum and count of OOB predictions for each sample\n    for i in range(n_samples):\n        oob_predictions = predictions[i, oob_mask[i]]\n        oob_sums[i] = np.sum(oob_predictions)\n        oob_counts[i] = len(oob_predictions)\n    \n    # Calculate the average OOB predictions and squared errors\n    squared_errors = []\n    for i in range(n_samples):\n        if oob_counts[i] > 0:\n            oob_average = oob_sums[i] / oob_counts[i]\n            squared_error = (oob_average - y_true[i]) ** 2\n            squared_errors.append(squared_error)\n    \n    # If no sample has an OOB prediction, return -1\n    if not squared_errors:\n        return -1\n    \n    # Calculate and return the OOB MSE\n    oob_mse_value = np.mean(squared_errors)\n    return round(oob_mse_value, 4)\n```\n\nThis script defines the `oob_mse` function, which computes the out-of-bag mean squared error for a Random Forest regressor based on the provided true target values, predictions from each tree, and the out-of-bag mask. The function handles cases where no sample has an OOB prediction by returning -1."}
{"task_id": 332, "completion_id": 0, "completion": "```\npython\nfrom collections import Counter\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    # Step 1: Compute the support for every item\n    item_support = Counter()\n    for transaction in transactions:\n        for item in set(transaction):  # Consider each item only once per transaction\n            item_support[item] += 1\n\n    # Step 2: Discard items with support less than min_support\n    frequent_items = {item: support for item, support in item_support.items() if support >= min_support}\n\n    # Step 3: Create a global ordering of the remaining items\n    # First by decreasing support, then alphabetically\n    ordered_items = sorted(frequent_items, key=lambda x: (-frequent_items[x], x))\n\n    # Step 4: Build the FP-Tree\n    root = {\"support\": 0, \"children\": {}}\n\n    for transaction in transactions:\n        # Remove duplicates and keep only frequent items, then reorder\n        filtered_transaction = sorted(set(transaction) & set(frequent_items), key=lambda x: ordered_items.index(x))\n\n        # Walk from the root and update/extend the path\n        current_node = root\n        for item in filtered_transaction:\n            current_node[\"support\"] += 1\n            if item not in current_node[\"children\"]:\n                current_node[\"children\"][item] = {\"support\": 0, \"children\": {}}\n            current_node = current_node[\"children\"][item]\n        current_node[\"support\"] += 1  # Increment support for the leaf node\n\n    return root\n\n# Example usage:\ntransactions = [\n    ['a', 'b', 'c'],\n    ['a', 'b'],\n    ['a', 'c'],\n    ['b', 'c'],\n    ['a', 'b', 'c', 'd'],\n    ['a', 'b', 'd'],\n    ['b', 'c', 'd'],\n    ['a', 'c', 'd'],\n    ['b', 'd'],\n    ['c', 'd']\n]\nmin_support = 2\nfp_tree = build_fp_tree(transactions, min_support)\nprint(fp_tree)\n```\n\nThis script defines the `build_fp_tree` function, which constructs an FP-Tree from a list of transactions and a minimum support threshold. The function uses nested dictionaries to represent the tree structure and follows the steps outlined in the task description. The example usage at the end demonstrates how to call the function with a sample dataset."}
{"task_id": 336, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", Y: list[list[int | float]] | \"np.ndarray\" | None = None, c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    # Convert inputs to NumPy arrays for easier manipulation\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    \n    # Check if the number of columns in X and Y are the same\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # Calculate the kernel matrix\n    K = np.dot(X, Y.T) + c0\n    \n    # Round the results to 4 decimal places and convert to list of lists\n    K_rounded = np.round(K, 4).tolist()\n    \n    return K_rounded\n\n# Example usage:\n# X = [[1, 2], [3, 4]]\n# Y = [[5, 6], [7, 8]]\n# print(linear_kernel(X, Y))  # Output: [[17.0, 23.0], [39.0, 53.0]]\n```\n\nThis script defines the `linear_kernel` function, which computes the linear kernel matrix for two collections of input vectors `X` and `Y`. It handles both Python lists and NumPy arrays, checks for dimension compatibility, and rounds the results to four decimal places. If the dimensions are incompatible, it returns `-1`."}
{"task_id": 340, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n\n    # Update the first and second moment estimates\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * (grad ** 2)\n\n    # Compute the bias-corrected moment estimates\n    m_hat_t = m_t / (1 - beta1 ** t)\n    v_hat_t = v_t / (1 - beta2 ** t)\n\n    # Update the parameter\n    param_t = param - lr * m_hat_t / (np.sqrt(v_hat_t) + eps)\n\n    # Return the updated parameter and moment estimates as lists rounded to 8 decimal places\n    return (\n        param_t.round(8).tolist(),\n        m_t.round(8).tolist(),\n        v_t.round(8).tolist()\n    )\n\n# Example usage:\n# param = np.array([0.0, 0.0])\n# grad = np.array([0.1, 0.2])\n# t = 1\n# m = np.array([0.0, 0.0])\n# v = np.array([0.0, 0.0])\n# updated_param, new_m, new_v = adam_update(param, grad, t, m, v)\n# print(updated_param, new_m, new_v)\n```\n\nThis script defines the `adam_update` function, which performs a single step of the Adam optimization algorithm. It updates the parameter, first moment, and second moment estimates according to the Adam update rules and returns them as lists rounded to 8 decimal places. The example usage at the bottom shows how to call the function with initial parameters and gradients."}
{"task_id": 343, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                          rewards: list[float] | np.ndarray,\n                          retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # Determine the number of samples to retain\n    N = theta_samples.shape[0]\n    num_retain = int(retain_prcnt * N)\n    \n    # Get the indices of the top `num_retain` samples based on rewards\n    top_indices = np.argsort(rewards)[-num_retain:]\n    \n    # Retain the top samples\n    elite_samples = theta_samples[top_indices]\n    \n    # Compute the mean and variance of the retained samples\n    mean = np.mean(elite_samples, axis=0)\n    variance = np.var(elite_samples, axis=0)\n    \n    # Round the results to four decimal places and convert to lists\n    mean_rounded = [round(val, 4) for val in mean]\n    variance_rounded = [round(val, 4) for val in variance]\n    \n    return mean_rounded, variance_rounded\n```\n\nThis script defines the `cross_entropy_update` function, which performs the required operations to update the mean and variance of parameter samples using the Cross-Entropy Method. The function sorts the samples based on their rewards, retains the top-performing samples, and then calculates and returns the mean and variance of these samples, rounded to four decimal places."}
{"task_id": 353, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    \n    label_counts = Counter(labels)\n    total_count = len(labels)\n    entropy_value = 0.0\n    \n    for count in label_counts.values():\n        p_i = count / total_count\n        entropy_value -= p_i * math.log2(p_i)\n    \n    return round(entropy_value, 5)\n\n# Example usage:\n# labels = ['a', 'b', 'a', 'c', 'a', 'b']\n# print(entropy(labels))  # Output: 1.45915\n```\n\nThis script defines the `entropy` function, which calculates the Shannon entropy of a given sequence of class labels. It handles the special cases of empty input and identical labels, and rounds the result to five decimal places."}
{"task_id": 354, "completion_id": 0, "completion": "Certainly! Below is a self-contained Python script that implements the `conv2D` function as described. This script handles the im2col transformation, applies the convolution using GEMM (General Matrix Multiply), and returns the result as a nested Python list.\n\n```python\nimport numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kernel_rows, kernel_cols, _, out_ch = W.shape\n    \n    # Handle padding\n    if isinstance(pad, int):\n        pad = (pad, pad, pad, pad)\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pr, pc = pad\n        pad = (pr, pr, pc, pc)\n    elif isinstance(pad, tuple) and len(pad) == 4:\n        pr1, pr2, pc1, pc2 = pad\n        pad = (pr1, pr2, pc1, pc2)\n    elif pad == 'same':\n        pr1 = (out_rows - 1) * stride + kernel_rows - in_rows\n        pc1 = (out_cols - 1) * stride + kernel_cols - in_cols\n        pr2 = pr1 + (1 if pr1 % 2 else 0)\n        pc2 = pc1 + (1 if pc1 % 2 else 0)\n        pad = (pr1 // 2, pr2 // 2, pc1 // 2, pc2 // 2)\n    \n    # Compute output dimensions\n    out_rows = (in_rows + pad[0] + pad[1] - (kernel_rows + (kernel_rows - 1) * (dilation)) // stride) + 1\n    out_cols = (in_cols + pad[2] + pad[3] - (kernel_cols + (kernel_cols - 1) * (dilation)) // stride) + 1\n    \n    # Pad the input\n    X_padded = np.pad(X, ((0, 0), (pad[0], pad[1]), (pad[2], pad[3]), (0, 0)), mode='constant', constant_values=0)\n    \n    # Perform im2col\n    H_f, W_f, _, _ = W.shape\n    H_out = (X_padded.shape[1] - (H_f - 1) * dilation - 1) // stride + 1\n    W_out = (X_padded.shape[2] - (W_f - 1) * dilation - 1) // stride + 1\n    \n    X_col = np.zeros((H_f * W_f * in_ch, H_out * W_out * n_ex))\n    for ex in range(n_ex):\n        col_idx = 0\n        for i in range(0, X_padded.shape[1] - (H_f - 1) * dilation - 1 + 1, stride):\n            for j in range(0, X_padded.shape[2] - (W_f - 1) * dilation - 1 + 1, stride):\n                x_col_vec = X_padded[ex, i:i + H_f * dilation + 1:dilation, j:j + W_f * dilation + 1:dilation, :].flatten()\n                X_col[:, col_idx] = x_col_vec\n                col_idx += 1\n    \n    # Reshape weights to [F*H*W*C, O]\n    W_col = W.reshape(H_f * W_f * in_ch, out_ch)\n    \n    # Perform matrix multiplication\n    out_col = W_col.T @ X_col\n    \n    # Reshape output to [O, H_out, W_out, N]\n    out = out_col.reshape(out_ch, out_rows, out_cols, n_ex).transpose(3, 1, 2, 0)\n    \n    return out.tolist()\n\n# Example usage:\n# X = np.random.randn(1, 5, 5, 1)\n# W = np.random.randn(3, 3, 1, 1)\n# result = conv2D(X, W, stride=1, pad='same')\n# print(result)\n```\n\nThis script includes:\n- Handling different padding types, including the `'same'` option.\n- Performing the im2col transformation to convert the input image patches into a matrix form.\n- Using matrix multiplication (GEMM) to perform the convolution efficiently.\n- Reshaping the output to the correct dimensions and converting it to a nested Python list.\n\nYou can test the function with the provided example usage at the end of the script."}
{"task_id": 355, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # Step 1: Standardise the data\n    mean = np.mean(data, axis=0)\n    centred_data = data - mean\n    \n    if solver == \"svd\":\n        # Step 2: Use SVD to get eigen-vectors\n        U, S, Vt = np.linalg.svd(centred_data, full_matrices=False)\n        eigen_vectors = Vt.T  # Vt is the transposed V, so Vt.T is V\n        singular_values = S\n    elif solver == \"eigen\":\n        # Step 2: Use eigen-decomposition of the covariance matrix\n        cov_matrix = np.cov(centred_data, rowvar=False, ddof=1)\n        eigen_values, eigen_vectors = np.linalg.eigh(cov_matrix)\n        # Sort eigen values and vectors in descending order\n        idx = eigen_values.argsort()[::-1]\n        eigen_values = eigen_values[idx]\n        eigen_vectors = eigen_vectors[:, idx]\n    else:\n        raise ValueError(\"Invalid solver. Choose 'svd' or 'eigen'.\")\n    \n    # Step 3: Sort the directions and keep the first n_components\n    n_components = min(n_components, eigen_vectors.shape[1])\n    eigen_vectors = eigen_vectors[:, :n_components]\n    if solver == \"svd\":\n        singular_values = singular_values[:n_components]\n        explained_variance = singular_values ** 2 / (centred_data.shape[0] - 1)\n    else:\n        explained_variance = eigen_values[:n_components]\n    \n    # Step 4: Deterministic sign fix\n    for i in range(n_components):\n        first_non_zero_idx = next(j for j in range(eigen_vectors.shape[0]) if eigen_vectors[j, i] != 0)\n        if eigen_vectors[first_non_zero_idx, i] < 0:\n            eigen_vectors[:, i] *= -1\n            if solver == \"svd\":\n                U[:, i] *= -1\n    \n    # Step 5: Project the centred data onto the retained directions\n    if solver == \"svd\":\n        scores = U[:, :n_components] * singular_values\n    else:\n        scores = centred_data @ eigen_vectors\n    \n    # Step 6: Return the results\n    total_variance = np.sum(explained_variance)\n    explained_variance_ratio = explained_variance / total_variance\n    \n    return (np.round(scores, 4).tolist(), np.round(explained_variance_ratio, 4).tolist())\n```"}
{"task_id": 356, "completion_id": 0, "completion": "```\npython\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # For classification, return the index of the maximum probability\n        return int(numpy.argmax(leaf.value))\n    else:\n        # For regression, return the scalar value\n        return leaf.value\n\n# Example usage:\n# For classification\nleaf_class = Leaf([0.1, 0.3, 0.6])\nprint(leaf_predict(leaf_class, True))  # Output: 2\n\n# For regression\nleaf_reg = Leaf(12.5)\nprint(leaf_predict(leaf_reg, False))  # Output: 12.5\n```\n\nNote: The example usage assumes the presence of `numpy` for the `argmax` function. If `numpy` is not available, you can replace `numpy.argmax(leaf.value)` with `leaf.value.index(max(leaf.value))` to achieve the same result. Here is the modified version without `numpy`:\n\n```python\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # For classification, return the index of the maximum probability\n        return leaf.value.index(max(leaf.value))\n    else:\n        # For regression, return the scalar value\n        return leaf.value\n\n# Example usage:\n# For classification\nleaf_class = Leaf([0.1, 0.3, 0.6])\nprint(leaf_predict(leaf_class, True))  # Output: 2\n\n# For regression\nleaf_reg = Leaf(12.5)\nprint(leaf_predict(leaf_reg, False))  # Output: 12.5\n```"}
{"task_id": 357, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    # Initialize centroids with the first K samples\n    centroids = data[:K].copy()\n    \n    for _ in range(max_iters):\n        # Assign each sample to the closest centroid\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Recompute centroids\n        new_centroids = np.array([data[labels == k].mean(axis=0) for k in range(K)])\n        \n        # Check for convergence\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 1e-6):\n            break\n        \n        centroids = new_centroids\n    \n    # Sort centroids lexicographically\n    sorted_centroids = sorted(centroids, key=lambda x: tuple(x))\n    \n    # Round to four decimals\n    rounded_centroids = [[round(coord, 4) for coord in centroid] for centroid in sorted_centroids]\n    \n    return rounded_centroids\n\n# Example usage\ndata = np.array([[1, 1],\n                 [1, 2],\n                 [2, 1],\n                 [8, 8],\n                 [9, 8],\n                 [8, 9]])\nK = 2\nprint(kmeans(data, K))  # Output: [[1.3333, 1.3333], [8.3333, 8.3333]]\n```"}
{"task_id": 362, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | \"np.ndarray\") -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert input to a float NumPy array\n    matrix = np.array(data, dtype=float)\n    \n    # Compute the sum of every row\n    row_sums = matrix.sum(axis=1)\n    \n    # Check if any row sum is zero\n    if np.any(row_sums == 0):\n        return -1\n    \n    # Divide every element in a row by that row\u2019s sum\n    stochastic_matrix = matrix / row_sums[:, np.newaxis]\n    \n    # Round every entry to 4 decimal places\n    stochastic_matrix_rounded = np.round(stochastic_matrix, 4)\n    \n    # Convert the result to a native Python list\n    return stochastic_matrix_rounded.tolist()\n\n# Example usage:\n# data = [[1, 2, 3], [0, 0, 0], [4, 5, 6]]\n# print(row_stochastic_matrix(data))  # Output: -1\n\n# data = [[1, 2, 3], [4, 5, 6]]\n# print(row_stochastic_matrix(data))  # Output: [[0.1667, 0.3333, 0.5], [0.2667, 0.3333, 0.4]]\n```\n\nThis script defines a function `row_stochastic_matrix` that takes a 2-D list or NumPy array as input and returns a row-stochastic matrix with each row summing to 1, rounded to four decimal places. If any row sum is zero, it returns -1, indicating that normalization is impossible."}
{"task_id": 363, "completion_id": 0, "completion": "```\npython\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    \n    def is_all_boxes(space: Space) -> bool:\n        if isinstance(space, Box):\n            return True\n        elif isinstance(space, Tuple) or isinstance(space, Dict):\n            sub_spaces = space.spaces if isinstance(space, Dict) else space.spaces\n            return all(is_all_boxes(sub_space) for sub_space in sub_spaces)\n        else:\n            return False\n    \n    cont_action = is_all_boxes(env.action_space) if tuple_action else isinstance(env.action_space, Box)\n    cont_obs = is_all_boxes(env.observation_space) if tuple_obs else isinstance(env.observation_space, Box)\n    \n    return (cont_action, cont_obs)\n\n# Example usage:\n# env = Env(Tuple((Box(0, 1, (1,)), Box(0, 1, (1,)))), Box(0, 1, (1,)))\n# print(is_continuous(env, True, False))  # Output: (True, True)\n```"}
{"task_id": 369, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    # Initialize running prediction with zeros having the same shape as a single update array\n    running_pred = np.zeros_like(updates[0])\n    \n    # Aggregate the updates\n    for u in updates:\n        running_pred -= learning_rate * u\n    \n    # Return the result based on the type of problem\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        # Apply softmax to get class probabilities\n        exp_running_pred = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        probabilities = exp_running_pred / np.sum(exp_running_pred, axis=1, keepdims=True)\n        # Get the predicted class labels\n        return np.argmax(probabilities, axis=1)\n\n# Example usage:\n# For regression\n# updates = [np.array([0.1, 0.2, 0.3]), np.array([0.05, 0.1, 0.15])]\n# learning_rate = 0.1\n# regression = True\n# print(gradient_boosting_predict(updates, learning_rate, regression))\n\n# For classification\n# updates = [np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]), np.array([[0.05, 0.1, 0.15], [0.05, 0.05, 0.2]])]\n# learning_rate = 0.1\n# regression = False\n# print(gradient_boosting_predict(updates, learning_rate, regression))\n```\n\nThis script defines the `gradient_boosting_predict` function as specified, handling both regression and classification tasks using NumPy for efficient computation. The function initializes a running prediction, aggregates the scaled updates from each tree, and then either returns the rounded prediction for regression or the predicted class labels for classification."}
{"task_id": 371, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, _, out_channels = W.shape\n    \n    # Calculate effective kernel width with dilation\n    effective_kernel_width = (kernel_width - 1) * dilation + 1\n    \n    # Determine padding\n    if isinstance(pad, int):\n        pad_left = pad_right = pad\n    elif isinstance(pad, tuple):\n        pad_left, pad_right = pad\n    elif pad == \"same\":\n        out_len = np.ceil(signal_length / stride).astype(int)\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel_width - signal_length)\n        pad_left = total_pad // 2\n        pad_right = total_pad - pad_left\n    else:\n        raise ValueError(\"Invalid padding argument\")\n    \n    # Pad the input signal\n    X_padded = np.pad(X, ((0, 0), (pad_left, pad_right), (0, 0)), mode='constant')\n    \n    # Calculate output dimensions\n    output_length = (X_padded.shape[1] - effective_kernel_width) // stride + 1\n    \n    # Initialize output volume\n    output = np.zeros((n_examples, output_length, out_channels))\n    \n    # Perform 1-D cross-correlation\n    for n in range(n_examples):\n        for o in range(out_channels):\n            for i in range(output_length):\n                # Calculate the start and end indices of the receptive field\n                start = i * stride\n                end = start + effective_kernel_width\n                \n                # Extract the receptive field\n                receptive_field = X_padded[n, start:end:1+dilation, :]\n                \n                # Perform the cross-correlation for this receptive field and kernel\n                output[n, i, o] = np.sum(receptive_field * W[:, :, o])\n    \n    return output.tolist()\n\n# Example usage:\n# X = np.random.rand(2, 5, 3)  # 2 examples, 5-length signals, 3 input channels\n# W = np.random.rand(3, 3, 4)  # 3x3 kernels, 3 input channels, 4 output channels\n# result = conv1D(X, W, stride=1, pad=\"same\", dilation=0)\n# print(result)\n```\n\nThis script defines a function `conv1D` that performs 1-D cross-correlation between a batch of 1-D, multi-channel signals and a bank of kernels, supporting various padding options, strides, and dilation. The function returns the result as a nested Python list."}
{"task_id": 373, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gini(y: list[int] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    \n    # Convert to numpy array if it's not already\n    y = np.array(y)\n    \n    # Count the occurrences of each class\n    unique_classes, counts = np.unique(y, return_counts=True)\n    \n    # Calculate the relative frequencies\n    probabilities = counts / len(y)\n    \n    # Calculate the Gini impurity\n    gini_impurity = 1 - np.sum(probabilities ** 2)\n    \n    # Return the Gini impurity rounded to 4 decimal places\n    return round(gini_impurity, 4)\n```\n\nThis script defines a function `gini` that calculates the Gini impurity of a given sequence of integer labels. It handles both empty input and input provided as either a list or a NumPy array. The result is rounded to four decimal places as specified."}
{"task_id": 374, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    # Check if the number of samples in X and y are consistent\n    if X.shape[0] != y.shape[0]:\n        return -1\n    \n    m, n = X.shape\n    # Initialize theta and bias\n    theta = np.zeros(n)\n    b = 0.0\n    \n    for _ in range(n_iterations):\n        # Calculate predictions\n        y_pred = X.dot(theta) + b\n        \n        # Calculate gradients\n        dw = (2/m) * X.T.dot(y_pred - y)\n        db = (2/m) * np.sum(y_pred - y)\n        \n        # Update parameters\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    \n    # Return parameters rounded to 4 decimal places\n    return (theta.round(4).tolist(), round(b, 4))\n\n# Example usage:\n# X = np.array([[1, 1], [1, 2], [2, 2], [2, 3]])\n# y = np.dot(X, np.array([1, 2])) + 3\n# weights, bias = linear_regression_gd(X, y, learning_rate=0.01, n_iterations=1000)\n# print(\"Weights:\", weights)\n# print(\"Bias:\", bias)\n```\n\nThis script defines a function `linear_regression_gd` that performs multiple linear regression using batch gradient descent. It initializes the weight vector `theta` and bias `b`, iteratively updates them based on the gradients of the mean squared error, and returns the learned parameters rounded to four decimal places. If the input data is inconsistent, it returns `-1`."}
{"task_id": 376, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Convert the input list of lists to a NumPy array\n    X_np = np.array(X)\n    \n    # Check if the matrix is square\n    if X_np.shape[0] != X_np.shape[1]:\n        return False\n    \n    # Check if the matrix is symmetric using np.allclose to handle floating-point precision\n    return np.allclose(X_np, X_np.T, atol=1e-8)\n\n# Example usage:\n# symmetric_matrix = [[1, 2, 3], [2, 5, 6], [3, 6, 9]]\n# non_symmetric_matrix = [[1, 0, 3], [2, 5, 6], [3, 6, 9]]\n# print(is_symmetric(symmetric_matrix))  # Output: True\n# print(is_symmetric(non_symmetric_matrix))  # Output: False\n```\n\nThis script defines the `is_symmetric` function, which checks if a given 2-D numeric array is symmetric with respect to its main diagonal. It uses NumPy for efficient array operations and to handle floating-point precision issues with `np.allclose`. The function first checks if the matrix is square, and then it checks for symmetry by comparing the matrix to its transpose."}
{"task_id": 377, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Calculate the negative gradient of the logistic loss for binary classification.\n\n    Parameters:\n    y (list): Binary class labels (0 or 1).\n    f (list): Current prediction scores (floats).\n\n    Returns:\n    list: List of negative gradients rounded to four decimal places, or -1 if y contains invalid values.\n    \"\"\"\n    # Check if all labels are either 0 or 1\n    if not all(label in [0, 1] for label in y):\n        return -1\n    \n    # Convert labels to the set {-1, 1}\n    y_prime = [2 * label - 1 for label in y]\n    \n    # Calculate the negative gradient\n    g = [y_prime_i / (1 + np.exp(y_prime_i * f_i)) for y_prime_i, f_i in zip(y_prime, f)]\n    \n    # Round each value to four decimal places\n    g_rounded = [round(g_i, 4) for g_i in g]\n    \n    return g_rounded\n\n# Example usage:\n# y = [0, 1, 0, 1]\n# f = [0.1, 0.4, -0.2, 0.3]\n# print(logistic_negative_gradient(y, f))\n```\n\nThis script defines the `logistic_negative_gradient` function, which calculates the negative gradient of the logistic loss for binary classification. It first checks if the labels are valid (either 0 or 1). If not, it returns -1. Otherwise, it converts the labels to the set {-1, 1}, computes the negative gradient, and returns the result rounded to four decimal places."}
{"task_id": 380, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    # Constants from the original paper\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n\n    # Convert input to a NumPy array for vectorized operations\n    x = np.array(x, dtype=np.float64)\n    \n    if order == 0:\n        # SELU(x) = scale * ELU(x, alpha)\n        selu_x = np.where(x > 0, scale * x, scale * alpha * (np.exp(x) - 1))\n    elif order == 1:\n        # First derivative of SELU(x)\n        selu_x = np.where(x > 0, scale, scale * alpha * np.exp(x))\n    elif order == 2:\n        # Second derivative of SELU(x)\n        selu_x = np.where(x > 0, 0, scale * alpha * np.exp(x))\n    else:\n        raise ValueError(\"Order must be 0, 1, or 2.\")\n    \n    # Round to 4 decimal places and convert to list\n    result = np.round(selu_x, 4).tolist()\n    \n    # If the input was a scalar, return a scalar instead of a list\n    if np.isscalar(x):\n        return result[0]\n    \n    return result\n\n# Example usage:\n# print(selu(1.0, order=0))  # SELU(1.0)\n# print(selu(-1.0, order=1)) # First derivative at -1.0\n# print(selu(-1.0, order=2)) # Second derivative at -1.0\n```\n\nThis script defines the `selu` function which computes the Scaled Exponential Linear Unit (SELU) activation and its first and second derivatives. The function handles scalar, 1-D, and multi-D inputs and returns the results rounded to four decimal places as Python lists. For scalar inputs, it returns a scalar value. The function raises a `ValueError` if the `order` is not 0, 1, or 2."}
{"task_id": 387, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Initialize predictions with the mean of y\n    y_pred = np.full_like(y, np.mean(y))\n    \n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y - y_pred\n        \n        # Sort indices by x values\n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        sorted_residuals = residuals[sorted_indices]\n        \n        best_split = None\n        best_mse = float('inf')\n        best_left_mean = None\n        best_right_mean = None\n        \n        # Try every possible split point\n        for i in range(len(x) - 1):\n            if sorted_x[i] == sorted_x[i + 1]:\n                continue\n            \n            split_point = (sorted_x[i] + sorted_x[i + 1]) / 2.0\n            \n            left_indices = sorted_indices[:i + 1]\n            right_indices = sorted_indices[i + 1:]\n            \n            left_mean = np.mean(sorted_residuals[:i + 1])\n            right_mean = np.mean(sorted_residuals[i + 1:])\n            \n            mse_left = np.sum((sorted_residuals[:i + 1] - left_mean) ** 2)\n            mse_right = np.sum((sorted_residuals[i + 1:] - right_mean) ** 2)\n            \n            total_mse = mse_left + mse_right\n            \n            if total_mse < best_mse:\n                best_split = split_point\n                best_mse = total_mse\n                best_left_mean = left_mean\n                best_right_mean = right_mean\n        \n        # If no valid split was found, use the global mean residual\n        if best_split is None:\n            best_left_mean = np.mean(residuals)\n            best_right_mean = np.mean(residuals)\n            best_split = np.mean(x)\n        \n        # Update predictions\n        stump_predictions = np.where(x <= best_split, best_left_mean, best_right_mean)\n        y_pred += learning_rate * stump_predictions\n    \n    return np.round(y_pred, 4).tolist()\n\n# Example usage:\n# x = [1, 2, 3, 4, 5]\n# y = [1.1, 1.9, 3.2, 3.8, 5.1]\n# print(gradient_boosting_1d(x, y, n_estimators=10, learning_rate=0.1))\n```\n\nThis script implements a simple 1-dimensional Gradient Boosting Regressor using decision stumps. It follows the outlined procedure, including handling cases where no valid split can be made by using the global mean residual. The final predictions are rounded to four decimal places and returned as a Python list."}
{"task_id": 394, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-8\n    \n    # Initialize Eg if it is None\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    \n    # Update the running average of the squared gradients\n    Eg_next = rho * Eg + (1 - rho) * np.square(grad)\n    \n    # Update the parameters\n    w_next = w - learning_rate * grad / np.sqrt(Eg_next + epsilon)\n    \n    # Round the results to 4 decimal places and convert to lists\n    w_next_rounded = np.round(w_next, 4).tolist()\n    Eg_next_rounded = np.round(Eg_next, 4).tolist()\n    \n    return w_next_rounded, Eg_next_rounded\n```\n\nThis script defines the `rmsprop_update` function which performs a single update step using the RMSprop optimization algorithm. It initializes the running average of squared gradients if necessary, updates the parameters, and returns the updated parameters and running average, both rounded to four decimal places and converted to regular Python lists."}
{"task_id": 398, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    # Convert input to a NumPy array for efficient computation\n    x = np.array(x)\n    \n    if not derivative:\n        # Compute ELU activation\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        # Compute ELU gradient\n        elu_values = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n        result = np.where(x >= 0, 1, elu_values + alpha)\n    \n    # Round the result to 4 decimal places and convert to a list\n    return [round(value, 4) for value in result]\n\n# Example usage:\n# print(elu([1.0, -1.0, 2.0, -2.0]))  # ELU activation\n# print(elu([1.0, -1.0, 2.0, -2.0], derivative=True))  # ELU gradient\n```\n\nThis script defines the `elu` function that computes the Exponential Linear Unit (ELU) activation or its gradient based on the `derivative` flag. The function accepts a one-dimensional list or NumPy array `x`, a float `alpha` (default 0.1), and a boolean `derivative` (default `False`). It returns the computed values as a list of floats rounded to four decimal places."}
{"task_id": 411, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    def analyze(data):\n        tuple_data = any(isinstance(x, (list, tuple, np.ndarray)) for x in data)\n        flattened_data = [item for sublist in data for item in sublist] if tuple_data else data\n        multidim_data = len(flattened_data) != len(data) if tuple_data else False\n        continuous_data = any(isinstance(x, float) and not x.is_integer() for x in flattened_data)\n        \n        if tuple_data:\n            dim = len(data[0])\n            n_per_dim = [len(set(x[i] for x in data)) for i in range(dim)]\n            ids = [[sorted(set(x[i] for x in data)) for i in range(dim)]]\n        else:\n            dim = 1\n            n_per_dim = [len(set(flattened_data))]\n            ids = [sorted(set(flattened_data))]\n        \n        return {\n            'tuple': tuple_data,\n            'multidim': multidim_data,\n            'continuous': continuous_data,\n            'n_per_dim': n_per_dim,\n            'dim': dim,\n            'ids': ids\n        }\n    \n    action_stats = analyze(actions)\n    observation_stats = analyze(observations)\n    \n    return {\n        'tuple_actions': action_stats['tuple'],\n        'tuple_observations': observation_stats['tuple'],\n        'multidim_actions': action_stats['multidim'],\n        'multidim_observations': observation_stats['multidim'],\n        'continuous_actions': action_stats['continuous'],\n        'continuous_observations': observation_stats['continuous'],\n        'n_actions_per_dim': action_stats['n_per_dim'],\n        'action_dim': action_stats['dim'],\n        'n_obs_per_dim': observation_stats['n_per_dim'],\n        'obs_dim': observation_stats['dim'],\n        'action_ids': action_stats['ids'],\n        'obs_ids': observation_stats['ids']\n    }\n\n# Example usage\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]\nprint(env_stats(actions, observations))\n```\n\nThis script defines the `env_stats` function, which computes the required statistics for actions and observations as described in the task. The function handles both scalar and multi-dimensional data, checks for continuity, and calculates unique values per dimension."}
{"task_id": 413, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    \n    def mean_squared_error(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n    \n    def best_split(X, y):\n        best_idx, best_thresh, best_loss = None, None, float('inf')\n        for idx in range(X.shape[1]):\n            thresholds = np.unique(X[:, idx])\n            for thresh in thresholds:\n                left_mask = X[:, idx] < thresh\n                right_mask = ~left_mask\n                left_loss = mean_squared_error(y[left_mask], np.mean(y[left_mask]))\n                right_loss = mean_squared_error(y[right_mask], np.mean(y[right_mask]))\n                loss = left_loss + right_loss\n                if loss < best_loss:\n                    best_loss = loss\n                    best_idx = idx\n                    best_thresh = thresh\n        return best_idx, best_thresh\n    \n    class TreeNode:\n        def __init__(self, value=None, left=None, right=None, threshold=None, feature_index=None):\n            self.value = value\n            self.left = left\n            self.right = right\n            self.threshold = threshold\n            self.feature_index = feature_index\n            \n        def predict(self, X):\n            if self.value is not None:\n                return np.full(X.shape[0], self.value)\n            left_mask = X[:, self.feature_index] < self.threshold\n            right_mask = ~left_mask\n            y_pred = np.empty(X.shape[0])\n            y_pred[left_mask] = self.left.predict(X[left_mask])\n            y_pred[right_mask] = self.right.predict(X[right_mask])\n            return y_pred\n    \n    def build_tree(X, y, depth=0):\n        if depth >= max_depth or mean_squared_error(y, np.mean(y)) < 1e-7:\n            return TreeNode(value=np.mean(y))\n        feature_index, threshold = best_split(X, y)\n        if feature_index is None:\n            return TreeNode(value=np.mean(y))\n        left_mask = X[:, feature_index] < threshold\n        right_mask = ~left_mask\n        left_tree = build_tree(X[left_mask], y[left_mask], depth + 1)\n        right_tree = build_tree(X[right_mask], y[right_mask], depth + 1)\n        return TreeNode(left=left_tree, right=right_tree, threshold=threshold, feature_index=feature_index)\n    \n    predictions = np.full(y_train.shape[0], np.mean(y_train))\n    test_predictions = np.full(X_test.shape[0], np.mean(y_train))\n    \n    for _ in range(n_estimators):\n        residuals = y_train - predictions\n        tree = build_tree(X_train, residuals, depth=0)\n        predictions += learning_rate * tree.predict(X_train)\n        test_predictions += learning_rate * tree.predict(X_test)\n    \n    return [round(pred, 4) for pred in test_predictions]\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([1, 2, 3, 4])\n# X_test = np.array([[1, 1], [4, 4]])\n# print(gbdt_regression(X_train, y_train, X_test))\n```\n\nThis script implements a simplified Gradient Boosting Decision Tree (GBDT) regressor using only NumPy. The `gbdt_regression` function trains the model on `X_train` and `y_train` and then predicts the target values for `X_test`. The predictions are rounded to 4 decimal places and returned as a list of floats."}
{"task_id": 416, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Computes the probability density function (PDF) of a multivariate Gaussian distribution\n    for each data point in X given the mean and covariance matrix.\n\n    Parameters:\n    - X: A NumPy array of shape (n_samples, n_features) or (n_samples,) for a single feature.\n    - mean: A NumPy array of shape (n_features,) representing the mean vector of the distribution.\n    - cov: A NumPy array of shape (n_features, n_features) representing the covariance matrix of the distribution.\n\n    Returns:\n    - A list of PDF values for each data point in X, rounded to four decimal places.\n    \"\"\"\n    # Ensure X is a 2D array\n    if X.ndim == 1:\n        X = X[:, np.newaxis]\n    \n    n_samples, n_features = X.shape\n    mean = np.array(mean)\n    cov = np.array(cov)\n    \n    # Calculate the determinant and inverse of the covariance matrix\n    det_cov = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    \n    # Calculate the normalization factor\n    norm_factor = 1.0 / np.sqrt(((2 * math.pi) ** n_features) * det_cov)\n    \n    # Initialize the list to store the PDF values\n    pdf_values = []\n    \n    # Calculate the PDF for each sample\n    for i in range(n_samples):\n        diff = X[i] - mean\n        exponent = -0.5 * np.dot(diff, np.dot(inv_cov, diff))\n        pdf_value = norm_factor * math.exp(exponent)\n        pdf_values.append(round(pdf_value, 4))\n    \n    return pdf_values\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4]])\n# mean = np.array([0, 0])\n# cov = np.array([[1, 0], [0, 1]])\n# print(multivariate_gaussian_pdf(X, mean, cov))\n```\n\nThis script defines a function `multivariate_gaussian_pdf` that computes the PDF of a multivariate Gaussian distribution for each data point in `X` given the mean vector `mean` and covariance matrix `cov`. The function handles both one-dimensional and multi-dimensional input arrays for `X` and ensures the results are rounded to four decimal places."}
{"task_id": 419, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    # Add intercept column if fit_intercept is True\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n    \n    # Ensure mu is a numpy array\n    if isinstance(mu, (int, float)):\n        mu = np.full(X.shape[1], mu)\n    \n    # Ensure V is a numpy array\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, (int, float)):\n        V = V * np.eye(X.shape[1])\n    elif isinstance(V, np.ndarray) and V.ndim == 1:\n        V = np.diag(V)\n    \n    # Compute the posterior distribution\n    V_inv = np.linalg.inv(V)\n    Sigma_p = np.linalg.inv(V_inv + X.T @ X)\n    mu_p = Sigma_p @ (V_inv @ mu + X.T @ y)\n    \n    # Compute the MAP predictive mean\n    y_pred = X_new @ mu_p\n    \n    # Round the predictions to 4 decimal places and return as a list\n    return [round(pred, 4) for pred in y_pred]\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4]])\n# y = np.array([2, 3, 4])\n# X_new = np.array([[4, 5]])\n# print(bayesian_linear_regression_pred(X, y, X_new))\n```\n\nThis script implements Bayesian linear regression with a conjugate Gaussian prior and known observation variance. It handles the optional intercept, various forms of prior covariance `V`, and computes the MAP predictive mean for new data points. The predictions are rounded to four decimal places and returned as a regular Python list."}
{"task_id": 423, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculate the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\"\"\"\n    # Check if both lists have the same length\n    if len(actual) != len(predicted):\n        return -1\n    \n    # Check if all numbers in both lists are non-negative\n    if any(a < 0 for a in actual) or any(p < 0 for p in predicted):\n        return -1\n    \n    # Calculate RMSLE\n    n = len(actual)\n    rmsle = np.sqrt((1/n) * np.sum((np.log1p(predicted) - np.log1p(actual))**2))\n    \n    # Return the result rounded to 4 decimal places\n    return round(rmsle, 4)\n```\n\nThis script defines a function `root_mean_squared_log_error` that calculates the RMSLE between two lists of non-negative numbers. It first checks if the lists are of the same length and contain only non-negative numbers, returning -1 if either condition is not met. It then computes the RMSLE using NumPy for efficient numerical operations and returns the result rounded to four decimal places."}
{"task_id": 428, "completion_id": 0, "completion": "```\npython\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    \n    if symmetric:\n        n = np.arange(window_len)\n    else:\n        n = np.arange(window_len + 1)[:-1]\n    \n    window = 0.5 - 0.5 * np.cos(2 * np.pi * n / (len(n) - 1))\n    window = np.round(window, 4)\n    \n    return window.tolist()\n\n# Example usage:\n# print(hann(10, symmetric=True))\n# print(hann(10, symmetric=False))\n```\n\nThis script defines a function `hann` that generates a Hann window of a specified length, either symmetric or periodic, and rounds the coefficients to four decimal places. The function handles special cases for window lengths less than or equal to zero and exactly one."}
{"task_id": 433, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    # Write your code below this line\n    if len(shape) == 4:\n        # Assuming the shape is (out_channels, in_channels, kernel_height, kernel_width)\n        out_channels, in_channels, kernel_height, kernel_width = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        # For any other tensor, take the first two dimensions directly\n        fan_in = shape[1]\n        fan_out = shape[0]\n    \n    return float(fan_in), float(fan_out)\n\n# Example usage:\n# shape = (32, 64, 3, 3)  # Example for a 4D convolutional kernel\n# print(glorot_fan(shape))  # Output should be (576.0, 288.0)\n\n# shape = (128, 64)  # Example for a dense layer\n# print(glorot_fan(shape))  # Output should be (64.0, 128.0)\n```\n\nThis script defines the `glorot_fan` function which calculates the `fan_in` and `fan_out` for a given weight-tensor shape according to the specified rules. The function handles both 4D convolutional kernels and other tensor shapes."}
{"task_id": 435, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]],\n                               y: list[float],\n                               n_estimators: int = 10,\n                               learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    # Convert X and y to NumPy arrays of type float\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    \n    # Initialize the current prediction with the mean of y\n    y_pred = np.full_like(y, y.mean())\n    \n    # Special cases\n    if n_estimators <= 0 or learning_rate == 0:\n        return y_pred.round(4).tolist()\n    \n    # Number of samples\n    m = X.shape[0]\n    \n    # Add a column of ones to X for the intercept term\n    X_with_intercept = np.hstack((np.ones((m, 1)), X))\n    \n    for t in range(n_estimators):\n        # Compute the residuals\n        residuals = y - y_pred\n        \n        # Fit an OLS linear model to predict the residuals\n        # Using the normal equation: (X^T * X)^(-1) * X^T * y\n        theta = np.linalg.inv(X_with_intercept.T @ X_with_intercept) @ X_with_intercept.T @ residuals\n        \n        # Obtain the weak-learner prediction\n        h_t = X_with_intercept @ theta\n        \n        # Update the overall prediction\n        y_pred += learning_rate * h_t\n    \n    # Return the final prediction vector rounded to 4 decimal places as a regular Python list\n    return y_pred.round(4).tolist()\n```\n\nThis script implements the Tiny Gradient Boosting Regressor as described in the task. It uses NumPy for numerical operations and follows the outlined procedure, including handling special cases where `n_estimators` is less than or equal to 0 or `learning_rate` is 0. The final predictions are rounded to four decimal places and returned as a regular Python list."}
{"task_id": 437, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n\n    # Convert input to a NumPy array for vectorized operations\n    x_arr = np.array(x, dtype=float)\n    \n    # Compute the sigmoid function\n    sigma_x = 1 / (1 + np.exp(-x_arr))\n    \n    if order == 0:\n        result = sigma_x\n    elif order == 1:\n        result = sigma_x * (1 - sigma_x)\n    elif order == 2:\n        result = sigma_x * (1 - sigma_x) * (1 - 2 * sigma_x)\n    \n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n    \n    # Return the result in the appropriate format\n    if isinstance(x, (int, float)):\n        return float(result)\n    else:\n        return result.tolist()\n\n# Example usage:\n# print(sigmoid(0))  # Should return 0.5\n# print(sigmoid([0, 1, -1]))  # Should return [0.5, 0.7311, 0.2689]\n# print(sigmoid(np.array([0, 1, -1]), order=1))  # Should return [0.25, 0.1966, 0.1966]\n# print(sigmoid(0, order=3))  # Should return -1\n```"}
{"task_id": 438, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    # Convert y to a numpy array if it's not already\n    y = np.array(y)\n    \n    # Determine the number of classes if not provided\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    \n    # Check if the provided num_classes is sufficient\n    if num_classes < np.max(y) + 1:\n        return -1\n    \n    # Initialize the one-hot encoded matrix\n    one_hot_matrix = np.zeros((y.shape[0], num_classes), dtype=int)\n    \n    # Set the appropriate indices to 1\n    one_hot_matrix[np.arange(y.shape[0]), y] = 1\n    \n    # Convert the matrix to a list of lists and return\n    return one_hot_matrix.tolist()\n\n# Example usage:\n# y = [0, 1, 2, 1]\n# print(to_categorical(y))  # Output: [[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0]]\n# print(to_categorical(y, num_classes=4))  # Output: [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0]]\n# print(to_categorical(y, num_classes=2))  # Output: -1\n```\n\nThis script defines the `to_categorical` function as specified, handling the conversion of class labels to one-hot encoding and checking for valid `num_classes` input. The function returns a list of lists representing the one-hot encoded matrix or `-1` if the number of classes is insufficient."}
{"task_id": 439, "completion_id": 0, "completion": "```\npython\nimport itertools\n\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    def support(itemset):\n        return sum(1 for transaction in transactions if set(itemset).issubset(transaction)) / len(transactions)\n\n    def generate_candidates(itemsets, k):\n        # Self-join step\n        candidates = set()\n        for a in itemsets:\n            for b in itemsets:\n                c = tuple(sorted(set(a).union(set(b))))\n                if len(c) == k and all(tuple(sorted(subset)) in itemsets for subset in itertools.combinations(c, k-1)):\n                    candidates.add(c)\n        return candidates\n\n    # Step 1: Generate frequent 1-itemsets\n    item_counts = {}\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] = item_counts.get(item, 0) + 1\n\n    num_transactions = len(transactions)\n    frequent_itemsets = {frozenset([item]): count / num_transactions for item, count in item_counts.items() if count / num_transactions >= min_sup}\n\n    # Step 2: Generate frequent k-itemsets for k > 1\n    k = 2\n    while frequent_itemsets:\n        candidate_itemsets = generate_candidates(frequent_itemsets, k)\n        candidate_counts = {itemset: 0 for itemset in candidate_itemsets}\n        \n        for transaction in transactions:\n            for itemset in candidate_counts:\n                if set(itemset).issubset(transaction):\n                    candidate_counts[itemset] += 1\n        \n        frequent_itemsets = {itemset: count / num_transactions for itemset, count in candidate_counts.items() if count / num_transactions >= min_sup}\n        \n        if frequent_itemsets:\n            result.extend(sorted(frequent_itemsets.keys(), key=lambda x: (len(x), x)))\n        \n        k += 1\n\n    # Convert frozensets to tuples and sort them\n    result = sorted(result, key=lambda x: (len(x), x))\n    return [tuple(itemset) for itemset in result]\n\n# Example usage:\ntransactions = [\n    ['milk', 'bread', 'butter'],\n    ['bread', 'butter'],\n    ['milk', 'bread'],\n    ['bread', 'butter'],\n    ['bread', 'butter', 'jam'],\n    ['bread', 'jam'],\n    ['jam', 'milk'],\n    ['bread'],\n    ['milk'],\n    ['butter']\n]\n\nmin_sup = 0.3\nprint(apriori_frequent_itemsets(transactions, min_sup))\n```\n\nThis script implements the Apriori algorithm to find frequent itemsets in a given list of transactions. It starts with frequent 1-itemsets and iteratively generates larger frequent itemsets until no more can be found. The result is a list of tuples representing the frequent itemsets, sorted by length and lexicographically within each length."}
{"task_id": 440, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    # Convert the input list to a NumPy array for easier manipulation\n    predictions_array = np.array(predictions)\n    \n    # Average the probabilities over all estimators for each sample\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n    \n    # Round the averaged probabilities to 4 decimal places\n    averaged_probabilities_rounded = np.round(averaged_probabilities, 4)\n    \n    # Find the predicted class index for each sample\n    predicted_classes = np.argmax(averaged_probabilities_rounded, axis=1)\n    \n    # Convert the NumPy arrays back to regular Python lists\n    averaged_probabilities_list = averaged_probabilities_rounded.tolist()\n    predicted_classes_list = predicted_classes.tolist()\n    \n    return averaged_probabilities_list, predicted_classes_list\n\n# Example usage:\n# predictions = [\n#     [[0.2, 0.3, 0.5], [0.6, 0.3, 0.1]],\n#     [[0.1, 0.4, 0.5], [0.7, 0.2, 0.1]],\n#     [[0.3, 0.3, 0.4], [0.5, 0.3, 0.2]]\n# ]\n# averaged_probs, predicted_classes = aggregate_predictions(predictions)\n# print(\"Averaged Probabilities:\", averaged_probs)\n# print(\"Predicted Classes:\", predicted_classes)\n```\n\nThis script defines the `aggregate_predictions` function, which takes a three-level nested list of predictions, averages the probabilities for each sample across all estimators, rounds the results to four decimal places, and determines the predicted class for each sample. The function returns both the averaged probabilities and the predicted class labels as regular Python lists."}
{"task_id": 444, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    X = np.array(X)\n    if Y is not None:\n        Y = np.array(Y)\n    else:\n        Y = X  # If Y is not provided, compute the kernel matrix for X with itself\n\n    # Validate feature dimensions\n    if X.shape[1] != Y.shape[1]:\n        return -1\n\n    # Determine the number of features\n    C = X.shape[1]\n\n    # Validate sigma\n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n    elif isinstance(sigma, (list, np.ndarray)):\n        if len(sigma) != C or any(s <= 0 for s in sigma):\n            return -1\n    else:\n        return -1\n\n    # Compute the kernel matrix\n    if isinstance(sigma, (int, float)):\n        sigma = np.full(C, sigma)\n\n    sigma = np.array(sigma)\n    gamma = 0.5 / (sigma ** 2)\n\n    # Compute the squared Euclidean distance matrix\n    XX = np.sum(X ** 2, axis=1, keepdims=True)\n    YY = np.sum(Y ** 2, axis=1, keepdims=True)\n    XY = np.dot(X, Y.T)\n    distances = XX + YY.T - 2 * XY\n\n    # Compute the RBF kernel matrix\n    kernel_matrix = np.exp(-distances * gamma)\n\n    # Round the kernel matrix to 4 decimal places\n    kernel_matrix = np.round(kernel_matrix, 4)\n\n    # Convert to a nested list before returning\n    return kernel_matrix.tolist()\n\n# Example usage\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0\nprint(rbf_kernel(X, Y, sigma))\n```\n\nThis script defines the `rbf_kernel` function that computes the Radial Basis Function (RBF) kernel matrix according to the given specifications. It handles input validation, computes the kernel matrix, rounds the results to four decimal places, and returns the result as a nested list."}
{"task_id": 446, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import Counter\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n\n    def entropy(labels):\n        counts = Counter(labels)\n        probabilities = [count / len(labels) for count in counts.values()]\n        return -sum(p * np.log2(p) if p > 0 else 0 for p in probabilities)\n\n    total_entropy = entropy(y)\n    best_gain = 0\n    best_feature_index = -1\n    best_threshold = None\n    left_majority_label = None\n    right_majority_label = None\n\n    majority_label = Counter(y).most_common(1)[0][0]\n\n    for j in range(n_features):\n        # Sort the data based on the j-th feature\n        sorted_indices = np.argsort(X[:, j])\n        sorted_X = X[sorted_indices]\n        sorted_y = y[sorted_indices]\n\n        # Consider midpoints between successive distinct values as thresholds\n        for i in range(n_samples - 1):\n            if sorted_X[i, j] != sorted_X[i + 1, j]:\n                t = (sorted_X[i, j] + sorted_X[i + 1, j]) / 2\n\n                left_labels = sorted_y[:i + 1]\n                right_labels = sorted_y[i + 1:]\n\n                p_left = len(left_labels) / n_samples\n                p_right = len(right_labels) / n_samples\n\n                gain = total_entropy - (p_left * entropy(left_labels) + p_right * entropy(right_labels))\n\n                if gain > best_gain:\n                    best_gain = gain\n                    best_feature_index = j\n                    best_threshold = round(t, 4)\n                    left_majority_label = Counter(left_labels).most_common(1)[0][0]\n                    right_majority_label = Counter(right_labels).most_common(1)[0][0]\n\n    if best_gain == 0:\n        return (-1, None, majority_label, majority_label)\n\n    return (best_feature_index, best_threshold, left_majority_label, right_majority_label)\n\n# Example usage:\n# X = [[2.5, 1.0], [1.0, 1.5], [3.0, 1.0], [2.0, 0.5]]\n# y = [0, 0, 1, 0]\n# print(decision_stump(X, y))\n```\n\nThis script defines the `decision_stump` function, which calculates the best split for a decision tree based on information gain. It considers midpoints between successive distinct values in each feature column as potential thresholds and selects the split that maximizes information gain. If no split improves information gain, it returns the majority label for the dataset."}
{"task_id": 452, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom typing import List, Union\n\ndef divide_on_feature(X: Union[np.ndarray, List[List]], feature_i: int, threshold) -> List[List]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    # Convert X to a NumPy array if it's not already\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    \n    # Initialize the two subsets\n    subset1 = []\n    subset2 = []\n    \n    # Determine if the threshold is numeric\n    is_numeric = isinstance(threshold, (int, float))\n    \n    # Iterate over each sample in X\n    for sample in X:\n        if is_numeric:\n            # Numeric threshold: split based on >=\n            if sample[feature_i] >= threshold:\n                subset1.append(sample)\n            else:\n                subset2.append(sample)\n        else:\n            # Non-numeric threshold: split based on exact match\n            if sample[feature_i] == threshold:\n                subset1.append(sample)\n            else:\n                subset2.append(sample)\n    \n    # Convert the subsets to lists of lists\n    subset1 = [sample.tolist() for sample in subset1]\n    subset2 = [sample.tolist() for sample in subset2]\n    \n    return [subset1, subset2]\n\n# Example usage:\nX_numeric = np.array([[1, 5], [3, 2], [4, 6], [2, 1]])\nfeature_i_numeric = 0\nthreshold_numeric = 3\nprint(divide_on_feature(X_numeric, feature_i_numeric, threshold_numeric))  # \u279c  [[ [3, 2], [4, 6] ], [ [1, 5], [2, 1] ]]\n\nX_categorical = np.array([[1, \"A\"], [2, \"B\"], [3, \"A\"], [4, \"C\"]])\nfeature_i_categorical = 1\nthreshold_categorical = \"A\"\nprint(divide_on_feature(X_categorical, feature_i_categorical, threshold_categorical))  # \u279c  [[ [1, \"A\"], [3, \"A\"] ], [ [2, \"B\"], [4, \"C\"] ]]\n```\n\nThis script defines the `divide_on_feature` function, which splits a dataset `X` into two subsets based on a specified feature column and threshold. The function handles both numeric and non-numeric thresholds and maintains the original order of samples in each subset. The subsets are returned as lists of lists."}
{"task_id": 453, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    # Check for input consistency\n    if not (isinstance(Q, np.ndarray) and isinstance(Q_next, np.ndarray)):\n        return -1\n    if not (Q.shape == Q_next.shape):\n        return -1\n    if not (len(actions) == len(rewards) == len(dones) == Q.shape[0]):\n        return -1\n    if not (0 <= gamma <= 1):\n        return -1\n\n    batch_size, n_actions = Q.shape\n    updated_Q = Q.copy()\n\n    for i in range(batch_size):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        \n        updated_Q[i, actions[i]] = target\n\n    # Round to 4 decimal places\n    updated_Q_rounded = np.round(updated_Q, 4).tolist()\n\n    return updated_Q_rounded\n```\n\nThis script defines the `update_q_values` function, which computes the target Q-values for training a Deep Q-Network (DQN). It checks for input consistency and calculates the target values according to the specified rules. The result is rounded to four decimal places and returned as a nested Python list. If any input is invalid, it returns `-1`."}
{"task_id": 458, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    # Convert labels to a numpy array for easier manipulation\n    labels = np.array(labels)\n    \n    # Check for negative labels\n    if np.any(labels < 0):\n        return -1\n    \n    # Infer num_classes if not provided\n    if num_classes is None:\n        num_classes = np.max(labels) + 1\n    \n    # Check if num_classes is too small\n    if num_classes < np.max(labels) + 1:\n        return -1\n    \n    # Initialize the one-hot encoded matrix with zeros\n    one_hot_matrix = np.zeros((len(labels), num_classes), dtype=int)\n    \n    # Set the appropriate indices to 1\n    one_hot_matrix[np.arange(len(labels)), labels] = 1\n    \n    # Convert the numpy array to a list of lists and return\n    return one_hot_matrix.tolist()\n\n# Example usage:\n# labels = [0, 1, 2, 1, 0]\n# print(to_categorical(labels))  # Output: [[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0]]\n```\n\nThis script defines the `to_categorical` function as specified, handling the conversion of integer labels to one-hot encoded format while checking for invalid inputs. The function returns a list of lists containing the one-hot encoded labels or `-1` if the input is invalid."}
{"task_id": 461, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Step 1: Initialize predictions to the mean of the targets\n    y_pred = np.full_like(y, np.mean(y))\n    \n    # If no boosting iterations are requested, return the initial predictions\n    if n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n    \n    # Step 2: Gradient Boosting Loop\n    for _ in range(n_estimators):\n        # Step 2a: Compute residuals\n        residuals = y - y_pred\n        \n        # Step 2b: Find the best split\n        unique_x = np.unique(x)\n        if len(unique_x) == 1:\n            # No valid split, use the mean of residuals\n            v_L = v_R = np.mean(residuals)\n            t = unique_x[0]\n        else:\n            best_sse = float('inf')\n            best_t = None\n            best_v_L = None\n            best_v_R = None\n            \n            for t in unique_x[:-1]:  # Exclude the greatest value\n                left_mask = x <= t\n                right_mask = x > t\n                \n                if not np.any(left_mask) or not np.any(right_mask):\n                    continue\n                \n                v_L = np.mean(residuals[left_mask])\n                v_R = np.mean(residuals[right_mask])\n                \n                sse = np.sum((residuals[left_mask] - v_L) ** 2) + np.sum((residuals[right_mask] - v_R) ** 2)\n                \n                if sse < best_sse:\n                    best_sse = sse\n                    best_t = t\n                    best_v_L = v_L\n                    best_v_R = v_R\n            \n            # If no valid split was found, use the mean of residuals\n            if best_t is None:\n                v_L = v_R = np.mean(residuals)\n                t = unique_x[0]\n            else:\n                v_L, v_R = best_v_L, best_v_R\n        \n        # Step 2e: Predict using the best stump\n        stump_pred = np.where(x <= t, v_L, v_R)\n        \n        # Step 2f: Update the predictions\n        y_pred += learning_rate * stump_pred\n    \n    # Return the final predictions rounded to 4 decimal places\n    return np.round(y_pred, 4).tolist()\n```\n\nThis script implements the gradient boosting algorithm with decision stumps for 1-D regression as described in the task. It uses numpy for efficient array operations and follows the steps outlined in the algorithm description. The final predictions are rounded to four decimal places before being returned."}
{"task_id": 471, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    \n    if next_state is not None:\n        # Find the greedy action in the next state\n        greedy_action = np.argmax(q_table[next_state])\n        \n        # Compute the expected value of Q[next_state] under the epsilon-soft policy\n        expected_q_value = 0.0\n        for a in range(num_actions):\n            if a == greedy_action:\n                expected_q_value += (1 - epsilon + epsilon / num_actions) * q_table[next_state][a]\n            else:\n                expected_q_value += epsilon / num_actions * q_table[next_state][a]\n        \n        # Compute the target\n        target = reward + gamma * expected_q_value\n    else:\n        # If next_state is None, the target is just the reward\n        target = reward\n    \n    # Update the Q-table\n    q_table[state][action] += lr * (target - q_table[state][action])\n    \n    # Round every entry in the Q-table to four decimal places\n    q_table = [[round(q, 4) for q in row] for row in q_table]\n    \n    return q_table\n```\n\nThis script defines the `expected_sarsa_update` function, which performs one step of the Expected SARSA TD(0) algorithm to update the Q-table. The function handles both terminal and non-terminal transitions and ensures that all entries in the returned Q-table are rounded to four decimal places."}
{"task_id": 474, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n\n    for i in range(m):\n        x_min = (i // 2 + 0.1) * 10\n        x_max = (i // 2 + 0.9) * 10\n        y_min = (i % 2 * interval + 0.1) * 10\n        y_max = (i % 2 * interval + 0.9) * 10\n        label = (i - 0.5) * 2\n\n        # Generate training data\n        x_train = np.random.uniform(x_min, x_max, n_train)\n        y_train = np.random.uniform(y_min, y_max, n_train)\n        X_train.append(np.column_stack((x_train, y_train)))\n        Y_train.append(np.full(n_train, label))\n\n        # Generate validation data\n        x_val = np.random.uniform(x_min, x_max, n_val)\n        y_val = np.random.uniform(y_min, y_max, n_val)\n        X_val.append(np.column_stack((x_val, y_val)))\n        Y_val.append(np.full(n_val, label))\n\n    X_train = np.round(np.vstack(X_train), 4)\n    Y_train = np.round(np.concatenate(Y_train), 4)\n    X_val = np.round(np.vstack(X_val), 4)\n    Y_val = np.round(np.concatenate(Y_val), 4)\n\n    return X_train, X_val, Y_train, Y_val\n```\n\nThis script defines the `generate_data` function, which generates a 2-D toy data set based on the specified parameters. The function ensures that all coordinates are rounded to four decimal places and that the validation set includes labels. The optional seed parameter allows for reproducibility of the generated data."}
{"task_id": 475, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    \n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * (grad ** 2)\n    \n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    \n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    \n    return w_new, m_new, v_new\n\n# Example call\nw_new, m_new, v_new = adam_update(1.0, 0.1, 0.0, 0.0, 1)\nprint(round(w_new, 9))  # \u2248 0.999000001\n```"}
{"task_id": 479, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n\n    N = len(rewards[0])  # Number of arms\n    value_estimates = [ev_prior] * N  # Initial estimates of the expected values\n    counts = [0] * N  # Count of how many times each arm has been pulled\n\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            # Choose an arm uniformly at random\n            chosen_arm = np.random.randint(N)\n        else:\n            # Choose the arm with the largest estimated value\n            chosen_arm = np.argmax(value_estimates)\n\n        # Receive the reward for the chosen arm\n        reward = rewards[t][chosen_arm]\n\n        # Update the count for the chosen arm\n        counts[chosen_arm] += 1\n\n        # Update the estimate for the chosen arm using incremental sample mean\n        value_estimates[chosen_arm] += (reward - value_estimates[chosen_arm]) / counts[chosen_arm]\n\n    # Return the final estimated values rounded to 4 decimal places\n    return [round(value, 4) for value in value_estimates]\n\n# Example usage:\n# rewards = [\n#     [1.0, 0.0, 1.0],\n#     [0.0, 1.0, 1.0],\n#     [1.0, 0.0, 0.0],\n#     [0.0, 1.0, 0.0]\n# ]\n# print(epsilon_greedy_bandit(rewards, epsilon=0.1, ev_prior=0.5, seed=42))\n```\n\nThis script defines the `epsilon_greedy_bandit` function, which simulates one run of the \u03b5-greedy strategy for a stationary multi-armed bandit problem. The function initializes the estimated values and counts for each arm, iterates through each time-step, selects an arm based on the \u03b5-greedy policy, updates the estimated values, and finally returns the rounded estimated values for each arm."}
{"task_id": 481, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((point1 - point2) ** 2))\n\n    def region_query(point_index):\n        neighbors = []\n        for index, point in enumerate(data):\n            if euclidean_distance(data[point_index], point) <= eps:\n                neighbors.append(index)\n        return neighbors\n\n    def expand_cluster(point_index, cluster_id):\n        seeds = region_query(point_index)\n        if len(seeds) < min_samples:\n            labels[point_index] = -1\n            return False\n        else:\n            labels[point_index] = cluster_id\n            i = 0\n            while i < len(seeds):\n                neighbor_index = seeds[i]\n                if labels[neighbor_index] == -1:\n                    labels[neighbor_index] = cluster_id\n                elif labels[neighbor_index] == 0:\n                    labels[neighbor_index] = cluster_id\n                    new_neighbors = region_query(neighbor_index)\n                    if len(new_neighbors) >= min_samples:\n                        seeds.extend(new_neighbors)\n                i += 1\n            return True\n\n    labels = [0] * len(data)\n    cluster_id = 0\n\n    for point_index in range(len(data)):\n        if labels[point_index] != 0:\n            continue\n        if expand_cluster(point_index, cluster_id):\n            cluster_id += 1\n\n    return labels\n```\n\nThis script defines the `dbscan` function from scratch, implementing the DBSCAN algorithm as described. It includes helper functions for calculating Euclidean distance and performing region queries. The main function iterates over each point, expanding clusters as it finds core points and labeling noise points. Cluster labels are assigned starting from 0 and incrementing for each new cluster discovered."}
{"task_id": 482, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    \n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError(\"Labels must be non-negative and smaller than num_classes.\")\n    \n    one_hot_matrix = np.zeros((len(y), num_classes), dtype=int)\n    one_hot_matrix[np.arange(len(y)), y] = 1\n    \n    return one_hot_matrix\n\n# Example usage:\n# labels = [0, 1, 2, 1]\n# print(to_categorical(labels))\n# Output: \n# [[1 0 0]\n#  [0 1 0]\n#  [0 0 1]\n#  [0 1 0]]\n```"}
{"task_id": 485, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    \n    def sse(y):\n        return np.sum((y - np.mean(y)) ** 2)\n    \n    def best_split(X, y):\n        min_sse = float('inf')\n        best_split_point = None\n        for i in range(1, len(X)):\n            left_sse = sse(y[:i])\n            right_sse = sse(y[i:])\n            current_sse = left_sse + right_sse\n            if current_sse < min_sse:\n                min_sse = current_sse\n                best_split_point = i\n        return best_split_point\n    \n    def build_tree(X, y, depth):\n        if depth == max_depth or len(X) < 2:\n            return np.mean(y)\n        \n        split_point = best_split(X, y)\n        if split_point is None:\n            return np.mean(y)\n        \n        left_tree = build_tree(X[:split_point], y[:split_point], depth + 1)\n        right_tree = build_tree(X[split_point:], y[split_point:], depth + 1)\n        \n        return (X[split_point - 1], left_tree, right_tree)\n    \n    def predict_tree(tree, x):\n        if isinstance(tree, float):\n            return tree\n        split_point, left_tree, right_tree = tree\n        if x <= split_point:\n            return predict_tree(left_tree, x)\n        else:\n            return predict_tree(right_tree, x)\n    \n    if not X_train or not y_train:\n        return []\n    \n    # Sort the training data by the feature values\n    sorted_indices = np.argsort(X_train)\n    X_train_sorted = np.array(X_train)[sorted_indices]\n    y_train_sorted = np.array(y_train)[sorted_indices]\n    \n    # Build the tree\n    tree = build_tree(X_train_sorted, y_train_sorted, 0)\n    \n    # Make predictions for the test set\n    predictions = [predict_tree(tree, x) for x in X_test]\n    \n    return predictions\n```\n\nThis script implements a simple univariate regression tree using the CART algorithm. It sorts the training data, recursively splits the data to build the tree, and predicts the target values for the test data by traversing the tree. The tree is represented as a nested tuple structure, where each node is a tuple containing the split point, the left subtree, and the right subtree. Leaf nodes are represented by the mean of the target values in that leaf."}
{"task_id": 490, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    # Check if the input is empty\n    if not x:\n        return []\n    \n    # Convert input to a NumPy array if it's not already\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    \n    # Create a diagonal matrix using numpy's diag function\n    diagonal_matrix = np.diag(x)\n    \n    # Convert the resulting matrix to a list of lists\n    return diagonal_matrix.tolist()\n\n# Example usage:\n# vector = [1, 2, 3]\n# print(make_diagonal(vector))  # Output: [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n```\n\nThis script defines the `make_diagonal` function, which converts a one-dimensional vector into a square diagonal matrix and returns it as a list of lists. The function handles inputs that are lists, tuples, or NumPy arrays, and it correctly returns an empty list if the input is empty."}
{"task_id": 491, "completion_id": 0, "completion": "```\npython\nfrom collections import Counter, defaultdict\nimport itertools\n\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    \n    # Helper class for FP-Tree\n    class FPNode(object):\n        def __init__(self, item, count=1):\n            self.item = item\n            self.count = count\n            self.parent = None\n            self.children = defaultdict(FPNode)\n            self.link = None\n\n        def add_child(self, child_node):\n            self.children[child_node.item] = child_node\n            child_node.parent = self\n\n    # Function to build the FP-Tree\n    def build_fp_tree(transactions, min_sup):\n        header_table = defaultdict(int)\n        for transaction in transactions:\n            for item in transaction:\n                header_table[item] += 1\n        for item in list(header_table.keys()):\n            if header_table[item] < min_sup:\n                del header_table[item]\n        if not header_table:\n            return None, None\n\n        # Sort items by frequency and lexicographical order\n        items = sorted(header_table.keys(), key=lambda x: (-header_table[x], x))\n\n        root = FPNode(None)\n\n        for transaction in transactions:\n            filtered_transaction = [item for item in transaction if item in items]\n            filtered_transaction.sort(key=lambda x: (-header_table[x], x))\n            insert_tree(filtered_transaction, root, header_table)\n\n        return root, header_table\n\n    # Function to insert a transaction into the FP-Tree\n    def insert_tree(transaction, root, header_table):\n        if not transaction:\n            return\n\n        item = transaction[0]\n        if item in root.children:\n            root.children[item].count += 1\n        else:\n            new_node = FPNode(item)\n            root.add_child(new_node)\n            if header_table[item] is None:\n                header_table[item] = new_node\n            else:\n                current_node = header_table[item]\n                while current_node.link is not None:\n                    current_node = current_node.link\n                current_node.link = new_node\n        insert_tree(transaction[1:], root.children[item], header_table)\n\n    # Function to find all paths in the FP-Tree\n    def find_prefix_path(tree_node):\n        path = []\n        while tree_node.parent is not None:\n            path.append(tree_node)\n            tree_node = tree_node.parent\n        path.pop()\n        return path\n\n    # Function to build conditional pattern base\n    def build_conditional_pattern_base(tree_node):\n        conditional_pattern_base = []\n        while tree_node is not None:\n            prefix_path = find_prefix_path(tree_node)\n            if prefix_path:\n                conditional_pattern = [node.item for node in prefix_path]\n                conditional_pattern_base.append((conditional_pattern, tree_node.count))\n            tree_node = tree_node.link\n        return conditional_pattern_base\n\n    # Function to mine the FP-Tree\n    def mine_tree(tree, header_table, prefix, frequent_itemsets):\n        for item in sorted(header_table.keys(), key=lambda x: (-header_table[x], x)):\n            new_prefix = prefix + (item,)\n            frequent_itemsets.append(new_prefix)\n\n            conditional_pattern_base = build_conditional_pattern_base(header_table[item])\n\n            conditional_transactions = []\n            for pattern, count in conditional_pattern_base:\n                conditional_transactions.append(pattern * count)\n\n            conditional_tree, conditional_header_table = build_fp_tree(conditional_transactions, min_sup)\n            if conditional_header_table:\n                mine_tree(conditional_tree, conditional_header_table, new_prefix, frequent_itemsets)\n\n    # Build the initial FP-Tree\n    fp_tree, header_table = build_fp_tree(transactions, min_sup)\n    frequent_itemsets = []\n\n    # Mine the FP-Tree\n    if fp_tree and header_table:\n        mine_tree(fp_tree, header_table, (), frequent_itemsets)\n\n    # Sort frequent itemsets by length and lexicographically\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n\n    return frequent_itemsets\n\n# Example usage:\ntransactions = [\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"A\", \"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"C\", \"D\", \"E\"],\n    [\"B\", \"C\", \"D\"]\n]\n\nmin_sup = 3\nprint(fp_growth(transactions, min_sup))\n```\n\nThis script implements the FP-Growth algorithm as described. It constructs an FP-Tree from the given transactions, mines frequent itemsets, and returns them sorted by the specified criteria. The example usage at the end demonstrates how to use the `fp_growth` function with a sample dataset."}
{"task_id": 492, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n\n    X = np.array(X)\n    n_samples, n_features = X.shape\n    feature_indices = list(range(n_features))\n    \n    # Generate all combinations of feature indices with replacement\n    # This will give us the exponents for each term\n    exponents = []\n    for d in range(degree + 1):\n        exponents.extend(combinations_with_replacement(feature_indices, d))\n    \n    # Create the polynomial feature matrix\n    polynomial_feature_matrix = []\n    for sample in X:\n        polynomial_features_for_sample = [1]  # Start with the degree-0 term\n        for exp in exponents[1:]:  # Skip the first empty tuple for degree 0\n            term = 1\n            for feature_index, power in enumerate(exp):\n                term *= sample[feature_index] ** power\n            polynomial_features_for_sample.append(term)\n        polynomial_feature_matrix.append(polynomial_features_for_sample)\n    \n    return polynomial_feature_matrix\n\n# Example usage:\n# X = [[1, 2], [3, 4]]\n# degree = 2\n# print(polynomial_features(X, degree))\n```\n\nThis script defines a function `polynomial_features` that generates a polynomial feature matrix for a given input matrix `X` and a specified `degree`. The function handles the case where the degree is negative by returning `-1`. The polynomial features are generated in the specified order, starting with the degree-0 term (which is always 1), followed by terms of increasing total degree in lexicographic order."}
{"task_id": 493, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1\n    \n    y_mean = np.mean(y)\n    mse_value = np.mean((y - y_mean) ** 2)\n    \n    return round(mse_value, 4)\n\n# Example usage:\n# print(mse([1, 2, 3, 4, 5]))  # Should output 2.0\n# print(mse(np.array([1.0, 2.0, 3.0, 4.0, 5.0])))  # Should output 2.0\n# print(mse([]))  # Should output -1\n```"}
{"task_id": 496, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Ensure x is a numpy array for element-wise operations\n    x = np.array(x, dtype=float)\n    \n    # Compute the affine activation\n    y = slope * x + intercept\n    \n    # Compute the first derivative (which is constant)\n    grad = np.full_like(x, slope)\n    \n    # Compute the second derivative (which is zero)\n    grad2 = np.zeros_like(x)\n    \n    # Round the results to 4 decimal places\n    y_rounded = np.round(y, 4).tolist()\n    grad_rounded = np.round(grad, 4).tolist()\n    grad2_rounded = np.round(grad2, 4).tolist()\n    \n    return y_rounded, grad_rounded, grad2_rounded\n\n# Example usage:\n# x = [1, 2, 3]\n# slope = 2\n# intercept = 3\n# result = apply_affine(x, slope, intercept)\n# print(result)  # Output: ([5.0, 7.0, 9.0], [2.0, 2.0, 2.0], [0.0, 0.0, 0.0])\n```\n\nThis script defines the `apply_affine` function, which computes the affine activation, its first derivative, and its second derivative for a given input vector `x`, and returns these values rounded to 4 decimal places. The function handles both scalar and 1-D list/NumPy array inputs."}
{"task_id": 499, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    n_samples, n_features = data.shape\n    \n    if k < 1 or k > n_features:\n        return -1\n    \n    # Step 1: Standardize each feature\n    mean = np.mean(data, axis=0)\n    centered_data = data - mean\n    \n    # Calculate population variance for each feature\n    variance = np.var(centered_data, axis=0, ddof=1)  # Using Bessel's correction\n    \n    # Standardize features with non-zero variance\n    std_dev = np.sqrt(variance)\n    std_dev[std_dev == 0] = 1  # Avoid division by zero\n    standardized_data = centered_data / std_dev\n    \n    # Step 2: Compute the sample covariance matrix\n    cov_matrix = np.cov(standardized_data, rowvar=False)\n    \n    # Step 3: Perform eigen-decomposition\n    eigenvalues, eigenvectors = np.linalg.eigh(cov_matrix)\n    \n    # Step 4: Sort eigenvalues in descending order and arrange eigenvectors\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    \n    # Step 5: Fix the sign of every eigenvector\n    for i in range(sorted_eigenvectors.shape[1]):\n        max_abs_index = np.argmax(np.abs(sorted_eigenvectors[:, i]))\n        if sorted_eigenvectors[max_abs_index, i] < 0:\n            sorted_eigenvectors[:, i] *= -1\n    \n    # Step 6: Project the standardized data on the first k eigenvectors\n    principal_components = sorted_eigenvectors[:, :k]\n    projected_data = standardized_data @ principal_components\n    \n    # Return the projected matrix rounded to four decimal places\n    return np.round(projected_data, 4).tolist()\n```"}
{"task_id": 500, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    \n    def fit_stump(residuals, X_train):\n        n_samples, n_features = len(X_train), len(X_train[0])\n        best_feature, best_threshold, best_left_val, best_right_val = None, None, None, None\n        best_mse = float('inf')\n        \n        for feature in range(n_features):\n            thresholds = set([x[feature] for x in X_train])\n            for threshold in thresholds:\n                left_vals = [residuals[i] for i in range(n_samples) if X_train[i][feature] <= threshold]\n                right_vals = [residuals[i] for i in range(n_samples) if X_train[i][feature] > threshold]\n                \n                if len(left_vals) == 0 or len(right_vals) == 0:\n                    continue\n                \n                left_val = np.mean(left_vals)\n                right_val = np.mean(right_vals)\n                \n                mse = sum((residuals[i] - left_val) ** 2 if X_train[i][feature] <= threshold else (residuals[i] - right_val) ** 2 for i in range(n_samples))\n                \n                if mse < best_mse:\n                    best_mse = mse\n                    best_feature, best_threshold = feature, threshold\n                    best_left_val, best_right_val = left_val, right_val\n        \n        def stump(x):\n            return best_left_val if x[best_feature] <= best_threshold else best_right_val\n        \n        return stump, best_mse\n    \n    # Initialize the model\n    n_samples = len(X_train)\n    F = np.full(n_samples, np.mean(y_train))\n    stumps = []\n    \n    # Boosting loop\n    for _ in range(n_estimators):\n        residuals = y_train - F\n        stump, _ = fit_stump(residuals, X_train)\n        stumps.append(stump)\n        F += learning_rate * np.array([stump(x) for x in X_train])\n    \n    # Make predictions on the test set\n    F_test = np.full(len(X_test), np.mean(y_train))\n    for stump in stumps:\n        F_test += learning_rate * np.array([stump(x) for x in X_test])\n    \n    predictions = [1 if score >= 0.5 else 0 for score in F_test]\n    return predictions\n```\n\nThis script defines a `gradient_boosting_classifier` function that implements a simple gradient boosting classifier using decision stumps as weak learners. The function trains on the provided `X_train` and `y_train` data and predicts labels for `X_test`. The predictions are returned as a list of integers (0 or 1)."}
{"task_id": 505, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n\n    # Positive phase\n    h0_prob = 1 / (1 + np.exp(-(X @ W + hbias)))\n    pos_grad = X.T @ h0_prob\n\n    # Negative phase\n    v = X\n    for _ in range(k):\n        h_prob = 1 / (1 + np.exp(-(v @ W + hbias)))\n        v_prob = 1 / (1 + np.exp(-(h_prob @ W.T + vbias)))\n        v = v_prob  # Use probabilities directly\n\n    h_k_prob = 1 / (1 + np.exp(-(v @ W + hbias)))\n    neg_grad = v_prob.T @ h_k_prob\n\n    # Update weights\n    W_new = W + learning_rate * (pos_grad - neg_grad) / X.shape[0]\n\n    # Return the updated weight matrix rounded to 4 decimal places as a list of lists\n    return np.round(W_new, 4).tolist()\n```\n\nThis script defines the `contrastive_divergence` function which performs a single weight-update step for a binary Restricted Boltzmann Machine using the Contrastive Divergence algorithm. The function takes a mini-batch of visible vectors, the current weight matrix and bias vectors, the learning rate, and the number of Gibbs sampling steps as input, and returns the updated weight matrix as a list of lists rounded to four decimal places."}
{"task_id": 509, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Check if the lengths of the vectors are the same\n    if x.shape != y.shape:\n        return -1\n    \n    # Compute the Chebyshev distance\n    distance = np.max(np.abs(x - y))\n    \n    # Return the distance rounded to four decimal places\n    return round(float(distance), 4)\n\n# Example usage\nx = [1, 2, 3]\ny = [2, 4, 6]\nprint(chebyshev(x, y))  # Output: 3.0\n```"}
{"task_id": 510, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    # Clip y_pred to avoid log(0) issues\n    epsilon = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n    \n    # Compute the reconstruction loss (binary cross-entropy)\n    reconstruction_loss = -np.mean(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped))\n    \n    # Compute the KL divergence\n    kl_divergence = -0.5 * np.mean(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var))\n    \n    # Total VAE loss\n    total_loss = reconstruction_loss + kl_divergence\n    \n    # Return the average VAE loss rounded to 6 decimal places\n    return round(total_loss, 6)\n```\n\nThis script defines the `vae_loss` function which computes the VAE loss for a mini-batch of data with Bernoulli visible units. It includes the necessary steps to clip the reconstructed probabilities to prevent numerical instability, compute the reconstruction loss using binary cross-entropy, calculate the KL divergence, and finally return the total loss rounded to six decimal places."}
{"task_id": 513, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for efficient computation\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    \n    # Number of samples\n    n_samples = X.shape[0]\n    \n    # Initialize predictions with the bias term\n    predictions = np.full(n_samples, w0)\n    \n    # Add the linear terms\n    predictions += X.dot(w)\n    \n    # Add the interaction terms\n    # (\u03a3\u2c7c V_{j,f} x\u2c7c)\u00b2\n    sum_squared = (X @ V) ** 2\n    # \u03a3\u2c7c V_{j,f}\u00b2 x\u2c7c\u00b2\n    squared_sum = (V ** 2) @ (X ** 2)\n    # \u00bd [ (\u03a3\u2c7c V_{j,f} x\u2c7c)\u00b2 \u2212 \u03a3\u2c7c V_{j,f}\u00b2 x\u2c7c\u00b2 ]\n    interaction_terms = 0.5 * (sum_squared - squared_sum)\n    \n    # Sum the interaction terms for each sample\n    predictions += interaction_terms.sum(axis=1)\n    \n    # Round the predictions to 4 decimal places\n    predictions = np.round(predictions, 4)\n    \n    return predictions.tolist()\n```\n\nThis script defines the `fm_predict` function, which calculates the Factorization Machine predictions for a batch of samples using the provided formula. The function uses `numpy` for efficient numerical computations and ensures that the results are rounded to four decimal places."}
{"task_id": 517, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # Convert input to a numpy array for vectorized computation\n    if isinstance(z, (int, float)):\n        z = np.array([z])\n    else:\n        z = np.array(z)\n    \n    # Numerically stable sigmoid computation\n    # For large positive z, sigmoid(z) approaches 1\n    # For large negative z, sigmoid(z) approaches 0\n    sigmoid_values = np.where(z >= 0, \n                              1 / (1 + np.exp(-z)), \n                              np.exp(z) / (1 + np.exp(z)))\n    \n    # Round the results to 4 decimal places\n    sigmoid_values = np.round(sigmoid_values, 4)\n    \n    # Return the result as a scalar if the input was a scalar\n    if isinstance(z, np.ndarray) and z.size == 1:\n        return float(sigmoid_values[0])\n    \n    # Otherwise, return the result as a nested Python list\n    return sigmoid_values.tolist()\n\n# Example usage\nprint(sigmoid([-1, 0, 1]))  # Output should be [0.2689, 0.5, 0.7311]\n```"}
{"task_id": 518, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        # Check if actual is one-hot encoded and convert\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        \n        # Check if predicted is one-hot encoded and convert\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        \n        # Call the original function with the converted arrays\n        return function(actual, predicted)\n    \n    return wrapper\n\n# Example usage\n@unhot\ndef accuracy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Simple accuracy rounded to 4 decimals.\"\"\"\n    return float(np.round(np.mean(actual == predicted), 4))\n\nactual    = np.array([[0,1,0], [1,0,0], [0,0,1]])  # one-hot\npredicted = np.array([[0,1,0], [0,1,0], [0,0,1]])  # one-hot\nprint(accuracy(actual, predicted))  # 0.6667\n```\n\nThis script defines the `unhot` decorator, which converts one-hot encoded NumPy arrays to one-dimensional class label arrays before calling the wrapped metric function. The example usage demonstrates how the decorator can be used with a simple accuracy function."}
{"task_id": 520, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    def compute_gradient(x):\n        return np.round(x * (1 - x), 4)\n\n    if isinstance(z, (int, float)):\n        # If z is a scalar, return a float\n        return compute_gradient(z)\n    elif isinstance(z, list):\n        # If z is a list, return a list with the same structure\n        return [sigmoid_grad(item) for item in z]\n    elif isinstance(z, np.ndarray):\n        # If z is a NumPy array, return a NumPy array with the same shape\n        result = compute_gradient(z)\n        if result.ndim == 0:\n            return float(result)\n        else:\n            return result.tolist()\n    else:\n        raise ValueError(\"Input must be a float, list, or NumPy ndarray\")\n\n# Example usage:\n# print(sigmoid_grad(0.5))  # Output: 0.25\n# print(sigmoid_grad([0.5, 0.75]))  # Output: [0.25, 0.1875]\n# print(sigmoid_grad([[0.5, 0.75], [0.25, 0.1]]))  # Output: [[0.25, 0.1875], [0.1875, 0.09]]\n# print(sigmoid_grad(np.array([0.5, 0.75])))  # Output: [0.25, 0.1875]\n# print(sigmoid_grad(np.array([[0.5, 0.75], [0.25, 0.1]])))  # Output: [[0.25, 0.1875], [0.1875, 0.09]]\n```\n\nThis script defines the `sigmoid_grad` function that computes the element-wise gradient of the sigmoid function for a given input. The function handles scalar inputs, lists, and NumPy arrays, and returns a result with the same structure as the input, with all numeric results rounded to four decimal places."}
{"task_id": 528, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Convert X to a NumPy array for easier manipulation\n    X = np.array(X)\n    \n    # Determine the range for x1 and x2\n    x1_min, x1_max = X[:, 0].min(), X[:, 0].max()\n    x2_min, x2_max = X[:, 1].min(), X[:, 1].max()\n    \n    # Create equally spaced 1-D arrays for x1 and x2\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    \n    # Create a meshgrid from x1_plot and x2_plot\n    x1_grid, x2_grid = np.meshgrid(x1_plot, x2_plot)\n    \n    # Flatten the grid for easier computation\n    x1_flat = x1_grid.flatten()\n    x2_flat = x2_grid.flatten()\n    \n    # Compute the linear combination w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b for each point\n    z = W[0] * x1_flat + W[1] * x2_flat + b\n    \n    # Apply the sign function to get the labels\n    labels_flat = np.where(z >= 0, 1, -1)\n    \n    # Reshape the labels back to a grid_n x grid_n matrix\n    labels_grid = labels_flat.reshape((grid_n, grid_n))\n    \n    # Convert the NumPy array to a nested Python list\n    labels_list = labels_grid.tolist()\n    \n    return labels_list\n```\n\nThis script defines the `decision_boundary_grid` function, which generates a grid of predictions for a 2-D linear classifier. The function takes the original data set `X`, the weights `W`, the bias `b`, and the desired grid resolution `grid_n` as inputs, and returns a nested Python list of predictions. The implementation uses NumPy for efficient array manipulation and computation."}
{"task_id": 537, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    # Constants\n    epsilon = 1e-9\n    \n    # Number of samples and features\n    n_samples, n_features = X_train.shape\n    \n    # Calculate class priors\n    prior_0 = np.mean(y_train == 0)\n    prior_1 = np.mean(y_train == 1)\n    \n    # Separate data by class\n    X_train_0 = X_train[y_train == 0]\n    X_train_1 = X_train[y_train == 1]\n    \n    # Calculate mean and standard deviation for each feature for both classes\n    mean_0 = np.mean(X_train_0, axis=0)\n    std_0 = np.std(X_train_0, axis=0) + epsilon  # Add epsilon to avoid division by zero\n    \n    mean_1 = np.mean(X_train_1, axis=0)\n    std_1 = np.std(X_train_1, axis=0) + epsilon  # Add epsilon to avoid division by zero\n    \n    # Function to calculate Gaussian probability\n    def gaussian_pdf(x, mean, std):\n        return (1 / (np.sqrt(2 * np.pi) * std)) * np.exp(-0.5 * ((x - mean) / std) ** 2)\n    \n    # Predict class for each test sample\n    predictions = []\n    for x in X_test:\n        # Calculate likelihoods for each class\n        likelihood_0 = np.prod(gaussian_pdf(x, mean_0, std_0))\n        likelihood_1 = np.prod(gaussian_pdf(x, mean_1, std_1))\n        \n        # Calculate posterior probabilities for each class\n        posterior_0 = prior_0 * likelihood_0\n        posterior_1 = prior_1 * likelihood_1\n        \n        # Predict the class with the higher posterior probability\n        if posterior_0 > posterior_1:\n            predictions.append(0)\n        else:\n            predictions.append(1)\n    \n    return predictions\n```\n\nThis script defines a function `gaussian_naive_bayes` that implements a Gaussian Naive Bayes classifier from scratch. It calculates the necessary parameters from the training data and uses them to predict the class labels for the test data. The function returns a list of predicted class labels (0 or 1) for each test sample."}
{"task_id": 539, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\"\"\"\n    # Ensure AL and Y have the same shape\n    assert AL.shape == Y.shape, \"AL and Y must have the same shape\"\n    \n    # Number of training examples\n    m = AL.shape[0]\n    \n    # Clip the probabilities to avoid numerical overflow\n    epsilon = 1e-15\n    AL = np.clip(AL, epsilon, 1 - epsilon)\n    \n    # Compute the binary cross-entropy cost\n    cost = -1.0 / m * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    \n    # Return the cost as a plain Python float, rounded to 4 decimal places\n    return round(float(cost), 4)\n\n# Example usage:\n# AL = np.array([0.9, 0.1, 0.8, 0.2])\n# Y = np.array([1, 0, 1, 0])\n# print(compute_cost(AL, Y))  # Output should be a float rounded to 4 decimal places\n```\n\nThis script defines the `compute_cost` function, which calculates the binary cross-entropy cost for a set of predicted probabilities `AL` and true labels `Y`. The function ensures that the input arrays have the same shape, clips the probabilities to avoid numerical issues, and returns the cost as a plain Python float rounded to four decimal places."}
{"task_id": 552, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi = np.array(hmm['pi'])\n    A = np.array(hmm['A'])\n    B = np.array(hmm['B'])\n    \n    num_states = len(pi)\n    num_observations = len(observations)\n    \n    if t < 0 or t >= num_observations:\n        return []\n    \n    # Forward algorithm\n    alpha = np.zeros((num_observations, num_states))\n    alpha[0] = pi * B[:, observations[0]]\n    \n    for i in range(1, num_observations):\n        alpha[i] = np.dot(alpha[i-1], A) * B[:, observations[i]]\n    \n    # Backward algorithm\n    beta = np.zeros((num_observations, num_states))\n    beta[-1] = np.ones(num_states)\n    \n    for i in range(num_observations - 2, -1, -1):\n        beta[i] = np.dot(A, B[:, observations[i+1]] * beta[i+1])\n    \n    # Compute gamma\n    gamma_t = alpha[t] * beta[t]\n    gamma_t /= np.sum(gamma_t)\n    \n    return [round(prob, 4) for prob in gamma_t]\n\n# Example usage:\n# hmm = {\n#     'pi': [0.6, 0.4],\n#     'A': [[0.7, 0.3], [0.4, 0.6]],\n#     'B': [[0.1, 0.4, 0.5], [0.7, 0.2, 0.1]]\n# }\n# observations = [0, 1, 2]\n# t = 1\n# print(gamma_probabilities(hmm, observations, t))\n```\n\nThis script defines a function `gamma_probabilities` that calculates the posterior state distribution at a given time step `t` using the forward-backward algorithm. The function takes an HMM model defined by its initial distribution (`pi`), transition matrix (`A`), and emission matrix (`B`), along with an observation sequence and the time index `t`. It returns the posterior probabilities rounded to four decimal places. If `t` is out of bounds, it returns an empty list. The example usage at the bottom shows how to call the function with a sample HMM and observation sequence."}
{"task_id": 555, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nfrom collections import deque\nfrom scipy.spatial.distance import cdist\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples  # Initialize all points as noise\n\n    # Compute pairwise Euclidean distances\n    distance_matrix = cdist(data, data, metric='euclidean')\n\n    # Build neighborhood list for each sample\n    neighborhoods = [set(np.where(distance_matrix[i] <= eps)[0]) for i in range(n_samples)]\n\n    # Identify core points\n    core_points = [i for i in range(n_samples) if len(neighborhoods[i]) >= min_samples]\n\n    cluster_id = 0\n\n    for core_point in core_points:\n        if labels[core_point] != -1:\n            continue  # Already visited\n\n        cluster_id += 1\n        labels[core_point] = cluster_id\n        neighbors_to_expand = deque(neighborhoods[core_point])\n\n        while neighbors_to_expand:\n            neighbor = neighbors_to_expand.popleft()\n\n            if labels[neighbor] == -1:\n                labels[neighbor] = cluster_id  # Label as border point\n\n            if len(neighborhoods[neighbor]) < min_samples:\n                continue  # Not a core point\n\n            for neighbor_of_neighbor in neighborhoods[neighbor]:\n                if labels[neighbor_of_neighbor] == -1:\n                    labels[neighbor_of_neighbor] = cluster_id\n                    neighbors_to_expand.append(neighbor_of_neighbor)\n\n    return labels\n\n# Example usage:\nif __name__ == \"__main__\":\n    data = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\n    eps = 3\n    min_samples = 2\n    labels = dbscan(data, eps, min_samples)\n    print(labels)  # Output: [1, 1, 1, 2, 2, -1]\n```\n\nThis script implements the DBSCAN algorithm from scratch, following the described steps. It uses the `cdist` function from `scipy.spatial.distance` to compute the pairwise Euclidean distances efficiently. The algorithm then constructs neighborhoods, identifies core points, and performs a breadth-first search to expand clusters. Points that do not belong to any cluster are labeled as noise (-1)."}
{"task_id": 561, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"\n    Applies the Expectation-Maximization algorithm to fit a Gaussian Mixture Model to the data.\n\n    Parameters:\n    - data: np.ndarray, shape (N, D), the input data with N samples and D features.\n    - k: int, the number of Gaussian components.\n    - max_iter: int, the maximum number of iterations to perform.\n    - epsilon: float, the tolerance for convergence of the mixture weights.\n\n    Returns:\n    - list[int], the cluster labels for each sample.\n    \"\"\"\n    N, D = data.shape\n    \n    if k == 1:\n        return [0] * N\n\n    # Step 1: Random initialization\n    np.random.seed(0)  # For deterministic results\n    weights = np.ones(k) / k\n    means = data[np.random.choice(N, k, replace=False)]\n    covariances = [np.eye(D) for _ in range(k)]\n\n    def multivariate_normal_pdf(x, mean, cov):\n        det_cov = np.linalg.det(cov)\n        cov_inv = np.linalg.inv(cov)\n        diff = x - mean\n        exponent = -0.5 * diff.T @ cov_inv @ diff\n        return (1.0 / (np.sqrt((2 * np.pi) ** D * det_cov))) * np.exp(exponent)\n\n    def e_step(data, weights, means, covariances):\n        responsibilities = np.zeros((N, k))\n        for i in range(N):\n            for j in range(k):\n                responsibilities[i, j] = weights[j] * multivariate_normal_pdf(data[i], means[j], covariances[j])\n            responsibilities[i] /= np.sum(responsibilities[i])\n        return responsibilities\n\n    def m_step(data, responsibilities):\n        new_weights = np.sum(responsibilities, axis=0) / N\n        new_means = np.dot(responsibilities.T, data) / np.sum(responsibilities, axis=0, keepdims=True)\n        new_covariances = []\n        for j in range(k):\n            diff = data - new_means[j]\n            weighted_sum = np.dot(responsibilities[:, j] * diff.T, diff)\n            covariance = weighted_sum / np.sum(responsibilities[:, j])\n            new_covariances.append(covariance)\n        return new_weights, new_means, new_covariances\n\n    # Main loop\n    for _ in range(max_iter):\n        responsibilities = e_step(data, weights, means, covariances)\n        new_weights, new_means, new_covariances = m_step(data, responsibilities)\n\n        # Check for convergence\n        if np.max(np.abs(new_weights - weights)) < epsilon:\n            break\n\n        weights, means, covariances = new_weights, new_means, new_covariances\n\n    # Step 3: Assign labels\n    labels = np.argmax(responsibilities, axis=1)\n\n    # Step 4: Sort and re-label components\n    sorted_indices = np.argsort(means[:, 0])\n    mapping = {old_label: new_label for new_label, old_label in enumerate(sorted_indices)}\n    labels = [mapping[label] for label in labels]\n\n    return labels\n\n# Example usage:\n# data = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# labels = gmm_em(data, k=2)\n# print(labels)\n```\n\nThis script implements the Expectation-Maximization (EM) algorithm for fitting a Gaussian Mixture Model (GMM) to a given dataset. The function `gmm_em` takes in the data, the number of Gaussian components `k`, the maximum number of iterations `max_iter`, and the convergence tolerance `epsilon`. It returns a list of cluster labels for each sample, ensuring the output is deterministic by sorting the components by the first coordinate of their mean."}
{"task_id": 562, "completion_id": 0, "completion": "```\nimport numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n    \n    # Step 1: Build the similarity graph using the Gaussian kernel\n    N = data.shape[0]\n    pairwise_sq_dists = np.sum(data**2, axis=1).reshape(-1, 1) + np.sum(data**2, axis=1) - 2 * np.dot(data, data.T)\n    W = np.exp(-gamma * pairwise_sq_dists)\n    \n    # Step 2: Construct the Laplacian matrix\n    D = np.sum(W, axis=1)\n    if method == 'unnormalized':\n        L = np.diag(D) - W\n    elif method == 'normalized':\n        D_sqrt_inv = np.diag(np.power(D, -0.5))\n        L = np.eye(N) - D_sqrt_inv @ W @ D_sqrt_inv\n    else:\n        raise ValueError(\"Method must be either 'unnormalized' or 'normalized'\")\n    \n    # Step 3: Compute the eigenvectors corresponding to the smallest eigenvalues\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    U = eigenvectors[:, :n_cluster]\n    \n    if method == 'normalized':\n        # Row-normalize the eigenvector matrix\n        U = U / np.linalg.norm(U, axis=1, keepdims=True)\n    \n    # Step 4: Run k-means in the eigenvector space\n    def kmeans(X, k, initial_centroids):\n        centroids = X[initial_centroids]\n        while True:\n            # Assign clusters\n            distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2)\n            labels = np.argmin(distances, axis=1)\n            \n            # Update centroids\n            new_centroids = np.array([X[labels == i].mean(axis=0) for i in range(k)])\n            \n            # Check for convergence\n            if np.all(centroids == new_centroids):\n                break\n            \n            centroids = new_centroids\n        \n        return labels\n    \n    initial_centroids = list(range(n_cluster))\n    labels = kmeans(U, n_cluster, initial_centroids)\n    \n    # Step 5: Relabel clusters\n    unique_labels = np.unique(labels)\n    label_mapping = {old_label: new_label for new_label, old_label in enumerate(unique_labels)}\n    labels = [label_mapping[label] for label in labels]\n    \n    return labels\n```\n\nThis script implements the Spectral Clustering algorithm as described, using a Gaussian kernel to construct the similarity graph, computing the appropriate Laplacian matrix, finding the smallest eigenvectors, and applying a deterministic k-means algorithm to cluster the data in the eigenvector space."}
{"task_id": 563, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N = X_data.shape[0]\n    alpha = np.zeros(N)\n    b = 0.0\n    \n    # Compute the Gram matrix\n    G = np.dot(X_data, X_data.T)\n    \n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            # Compute g = \u03a3\u2c7c \u03b1\u2c7c y\u2c7c G[j, i]\n            g = np.sum(alpha * y_data * G[:, i])\n            \n            # Check the condition y\u1d62 ( g + b ) \u2264 0\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        \n        # If no update was made, break the loop\n        if not updated:\n            break\n    \n    # Recover the weight vector w\n    w = np.sum(alpha * y_data[:, np.newaxis] * X_data, axis=0)\n    \n    # Round the weight vector and bias\n    w_rounded = [round(weight, 4) for weight in w]\n    b_rounded = round(b, 4)\n    \n    return w_rounded, b_rounded\n```\n\nThis script defines the `perceptron_dual_train` function, which implements the dual-form perceptron learning algorithm as described. It computes the necessary updates and returns the weight vector and bias term, both rounded to four decimal places."}
{"task_id": 564, "completion_id": 0, "completion": "```\npython\nclass Node:\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label\n        self.x = x\n        self.s = s\n        self.y = y\n        self.child = child if child is not None else []\n\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    current_node = root\n    \n    while current_node.y is None:\n        if task_type == 'classification':\n            feature_value = features[current_node.label]\n            found_child = False\n            for child in current_node.child:\n                if child.x == feature_value:\n                    current_node = child\n                    found_child = True\n                    break\n            if not found_child:\n                current_node = current_node.child[1]\n        elif task_type == 'regression':\n            feature_value = features[current_node.label]\n            if feature_value <= current_node.s:\n                current_node = current_node.child[0]\n            else:\n                current_node = current_node.child[1]\n    \n    return current_node.y\n```\n\nThis script defines the `Node` class and the `predict_sample` function as required. The `predict_sample` function traverses the decision tree based on the given `task_type` and returns the value stored in the appropriate leaf node."}
{"task_id": 565, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport math\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    \n    def entropy(labels: np.ndarray) -> float:\n        \"\"\"Calculate the entropy of a label distribution.\"\"\"\n        value_counts = np.bincount(labels)\n        probabilities = value_counts / len(labels)\n        return -np.sum(p * np.log2(p) for p in probabilities if p > 0)\n    \n    def conditional_entropy(X: np.ndarray, y: np.ndarray, feature_index: int) -> float:\n        \"\"\"Calculate the conditional entropy of y given a feature.\"\"\"\n        feature_values = np.unique(X[:, feature_index])\n        ce = 0.0\n        for value in feature_values:\n            subset_labels = y[X[:, feature_index] == value]\n            ce += (len(subset_labels) / len(y)) * entropy(subset_labels)\n        return ce\n    \n    # Calculate the entropy of the label distribution\n    H_y = entropy(y)\n    max_information_gain = -1\n    best_feature_index = -1\n    \n    # Iterate over each feature to calculate information gain\n    for feature_index in range(X.shape[1]):\n        H_y_given_A = conditional_entropy(X, y, feature_index)\n        information_gain = H_y - H_y_given_A\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = feature_index\n    \n    return (best_feature_index, round(max_information_gain, 6))\n```\n\nThis script defines a function `choose_best_feature` that calculates the information gain for each feature in the dataset and returns the feature index with the maximum information gain. The information gain is rounded to 6 decimal places as required."}
{"task_id": 566, "completion_id": 0, "completion": "```\nimport numpy as np\nimport math\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    \n    def c(n):\n        if n == 1:\n            return 0\n        else:\n            return 2 * np.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n    \n    def build_tree(subsample):\n        if len(subsample) <= 1 or len(subsample) == sample_size:\n            return {'size': len(subsample)}\n        \n        feature = np.random.choice(data.shape[1])\n        min_val = np.min(subsample[:, feature])\n        max_val = np.max(subsample[:, feature])\n        if min_val == max_val:\n            return {'size': len(subsample)}\n        \n        threshold = np.random.uniform(min_val, max_val)\n        left_subsample = subsample[subsample[:, feature] < threshold]\n        right_subsample = subsample[subsample[:, feature] >= threshold]\n        \n        return {\n            'feature': feature,\n            'threshold': threshold,\n            'left': build_tree(left_subsample),\n            'right': build_tree(right_subsample)\n        }\n    \n    def path_length(tree, x):\n        if 'size' in tree:\n            return c(tree['size'])\n        \n        feature = tree['feature']\n        threshold = tree['threshold']\n        if x[feature] < threshold:\n            return 1 + path_length(tree['left'], x)\n        else:\n            return 1 + path_length(tree['right'], x)\n    \n    trees = [build_tree(data[np.random.choice(data.shape[0], min(sample_size, data.shape[0]), replace=False)]) for _ in range(n_trees)]\n    \n    path_lengths = np.zeros(data.shape[0])\n    for x in range(data.shape[0]):\n        for tree in trees:\n            path_lengths[x] += path_length(tree, data[x])\n    \n    path_lengths /= n_trees\n    phi = 2 * np.log(sample_size - 1) - 2 * (sample_size - 1) / sample_size\n    scores = np.power(2, -path_lengths / phi)\n    \n    threshold = np.percentile(scores, (1 - epsilon) * 100)\n    outliers = [i for i, score in enumerate(scores) if score > threshold]\n    \n    return sorted(outliers)\n```\n\nThis script implements a mini-scale version of the Isolation Forest algorithm for outlier detection as specified. The function `detect_outliers` constructs the necessary number of isolation trees, computes the average path lengths for each data point, converts these to anomaly scores, and identifies outliers based on the given epsilon value."}
{"task_id": 568, "completion_id": 0, "completion": "```\npython\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    # Step 1: Build empirical distributions\n    num_samples, num_features = X_train.shape\n    labels = set(y_train)\n    num_labels = len(labels)\n    \n    # Empirical distribution of labels P(y)\n    empirical_label_dist = defaultdict(float)\n    for label in y_train:\n        empirical_label_dist[label] += 1\n    for label in empirical_label_dist:\n        empirical_label_dist[label] /= num_samples\n    \n    # Empirical distribution of features given labels P(f_j|y)\n    empirical_feature_label_dist = defaultdict(lambda: defaultdict(float))\n    for x, y in zip(X_train, y_train):\n        for feature_index, feature_value in enumerate(x):\n            empirical_feature_label_dist[(feature_index, feature_value, y)] += 1\n    for (feature_index, feature_value, y) in empirical_feature_label_dist:\n        empirical_feature_label_dist[(feature_index, feature_value, y)] /= num_samples\n    \n    # Step 2: Initialize weights\n    weights = defaultdict(float)\n    \n    # Step 3: Generalized Iterative Scaling (GIS)\n    for iteration in range(n_iter):\n        # Compute the model distribution P(f_j|y)\n        model_feature_label_dist = defaultdict(float)\n        partition_function = defaultdict(float)\n        \n        for x in X_train:\n            for y in labels:\n                score = 0.0\n                for feature_index, feature_value in enumerate(x):\n                    score += weights[(feature_index, feature_value, y)]\n                partition_function[tuple(x)] += math.exp(score)\n        \n        for x, y in zip(X_train, y_train):\n            for feature_index, feature_value in enumerate(x):\n                score = 0.0\n                for y_prime in labels:\n                    score_prime = 0.0\n                    for feature_index_prime, feature_value_prime in enumerate(x):\n                        score_prime += weights[(feature_index_prime, feature_value_prime, y_prime)]\n                    partition_function[tuple(x)] += math.exp(score_prime) - math.exp(score)\n                model_feature_label_dist[(feature_index, feature_value, y)] = math.exp(score) / partition_function[tuple(x)]\n        \n        # Update weights\n        max_update = 0.0\n        for (feature_index, feature_value, y) in empirical_feature_label_dist:\n            empirical_prob = empirical_feature_label_dist[(feature_index, feature_value, y)]\n            model_prob = model_feature_label_dist[(feature_index, feature_value, y)]\n            update = empirical_prob - model_prob\n            weights[(feature_index, feature_value, y)] += update\n            max_update = max(max_update, abs(update))\n        \n        # Check for convergence\n        if max_update < epsilon:\n            break\n    \n    # Step 4: Predict labels for test data\n    predictions = []\n    for x in X_test:\n        max_score = -float('inf')\n        predicted_label = None\n        for y in labels:\n            score = 0.0\n            for feature_index, feature_value in enumerate(x):\n                score += weights[(feature_index, feature_value, y)]\n            if score > max_score:\n                max_score = score\n                predicted_label = y\n        predictions.append(predicted_label)\n    \n    return predictions\n```\n\nThis script implements the Maximum Entropy (MaxEnt) classifier using the Generalized Iterative Scaling (GIS) algorithm. It first builds the empirical distributions from the training data, initializes the weights, and iteratively updates them using GIS until convergence or a maximum number of iterations is reached. Finally, it predicts the labels for the test data based on the learned model."}
{"task_id": 569, "completion_id": 0, "completion": "```\npython\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    total_documents = len(data)\n    word_doc_count = Counter()\n    unique_words = set()\n\n    # Count document frequency for each word\n    for _, words in data:\n        seen_words = set(words)\n        unique_words.update(seen_words)\n        for word in seen_words:\n            word_doc_count[word] += 1\n\n    # Calculate document frequency ratio\n    word_freq_ratios = [\n        (word, round(count / total_documents, 4))\n        for word, count in word_doc_count.items()\n    ]\n\n    # Sort words by frequency ratio (descending)\n    word_freq_ratios.sort(key=lambda x: x[1], reverse=True)\n\n    # Determine the set of most common words\n    if cut_off is None or cut_off >= len(unique_words):\n        most_common_words = unique_words\n    else:\n        most_common_words = set(word for word, _ in word_freq_ratios[:cut_off])\n\n    return word_freq_ratios, most_common_words\n\n\n# Example usage:\ndocuments = [\n    (1, [\"apple\", \"banana\", \"apple\"]),\n    (2, [\"banana\", \"orange\"]),\n    (3, [\"apple\", \"orange\", \"banana\", \"grape\"]),\n    (4, [\"grape\", \"banana\"]),\n]\n\nresult = statistic_key_word(documents, cut_off=2)\nprint(result)\n```\n\nThis script defines the `statistic_key_word` function, which calculates the document-frequency ratio for each word across a collection of documents and returns a sorted list of these ratios along with a set of the most common words based on the specified `cut_off`. The example usage demonstrates how to call the function with a sample list of documents."}
{"task_id": 571, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute the weight vector w\n    w = np.sum(alpha * y[:, np.newaxis] * X, axis=0)\n    \n    # Compute the bias term b\n    b = np.mean(y - np.dot(X, w))\n    \n    # Round w and b to 4 decimal places\n    w_rounded = np.round(w, 4)\n    b_rounded = np.round(b, 4)\n    \n    # Convert w to a list\n    w_list = w_rounded.tolist()\n    \n    return w_list, b_rounded\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 3], [2, 1], [3, 2]])\n# y = np.array([1, 1, 1, -1, -1])\n# alpha = np.array([0.1, 0.2, 0.0, 0.3, 0.4])\n# w, b = compute_svm_parameters(X, y, alpha)\n# print(\"Weight vector:\", w)\n# print(\"Bias term:\", b)\n```\n\nThis script defines the `compute_svm_parameters` function, which calculates the weight vector \\( \\mathbf{w} \\) and bias term \\( b \\) for a linear SVM using the given formulas. The function rounds the results to four decimal places and returns them as specified. The example usage at the bottom demonstrates how to call the function with sample data."}
{"task_id": 572, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Implement the Local Outlier Factor (LOF) algorithm from scratch.\"\"\"\n    \n    # Step 1: Compute the full pair-wise Euclidean distance matrix\n    n = len(data)\n    distance_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i + 1, n):\n            distance = np.sqrt(np.sum((data[i] - data[j]) ** 2))\n            distance_matrix[i, j] = distance\n            distance_matrix[j, i] = distance\n    \n    # Step 2: For every sample p obtain its k-distance and the index list of those k nearest neighbours N_k(p)\n    k_distances = np.zeros(n)\n    k_neighbors = [None] * n\n    for i in range(n):\n        sorted_indices = np.argsort(distance_matrix[i])[1:k+1]  # Exclude self\n        k_distances[i] = distance_matrix[i, sorted_indices[-1]]\n        k_neighbors[i] = sorted_indices\n    \n    # Step 3: Define the reachability distance between two points\n    def reach_dist_k(p, q):\n        return max(k_distances[q], distance_matrix[p, q])\n    \n    # Step 4: The Local Reachability Density (LRD) of p\n    lrd = np.zeros(n)\n    for i in range(n):\n        sum_reach_dist = sum(reach_dist_k(i, q) for q in k_neighbors[i])\n        lrd[i] = k / sum_reach_dist\n    \n    # Step 5: Finally the Local Outlier Factor is\n    lof_scores = np.zeros(n)\n    for i in range(n):\n        sum_lrd_neighbors = sum(lrd[q] for q in k_neighbors[i])\n        lof_scores[i] = (sum_lrd_neighbors / k) / lrd[i]\n    \n    # Round every LOF score to the nearest 4th decimal place\n    lof_scores = np.round(lof_scores, 4)\n    \n    # List of indices of all samples whose LOF score is strictly larger than epsilon\n    outlier_indices = [i for i in range(n) if lof_scores[i] > epsilon]\n    outlier_indices.sort()\n    \n    return list(lof_scores), outlier_indices\n\n# Example usage:\n# data = np.array([[1, 2], [2, 3], [3, 3], [8, 7], [8, 8], [25, 80]])\n# k = 3\n# print(local_outlier_factor(data, k))\n```\n\nThis script defines the `local_outlier_factor` function, which computes the Local Outlier Factor (LOF) for a given dataset. The function returns a tuple containing the list of LOF scores rounded to four decimals and the list of indices of samples that are considered outliers based on the provided `epsilon` threshold."}
{"task_id": 574, "completion_id": 0, "completion": "```\npython\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n\n    for c in range(m):\n        base = 10 * (c // 2)\n        x_train = np.random.uniform(base + 1, base + 9, n_train)\n        y_train = np.random.uniform(base + 1, base + 9, n_train)\n        x_val = np.random.uniform(base + 1, base + 9, n_val)\n        y_val = np.random.uniform(base + 1, base + 9, n_val)\n\n        X_train.append(np.column_stack((x_train, y_train)))\n        X_val.append(np.column_stack((x_val, y_val)))\n        y_train.extend([c] * n_train)\n        y_val.extend([c] * n_val)\n\n    X_train = np.round(np.vstack(X_train), 4)\n    X_val = np.round(np.vstack(X_val), 4)\n    y_train = np.array(y_train)\n    y_val = np.array(y_val)\n\n    return X_train, X_val, y_train, y_val\n```\n\nThis script defines the `generate_data` function as specified, which generates synthetic 2-D data for a given number of classes, with specified numbers of training and validation points per class. The coordinates are rounded to four decimal places, and the function can be seeded for reproducibility."}
{"task_id": 579, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    # Step 1: Initialisation\n    centres = X[:k].copy()\n    \n    for _ in range(max_iters):\n        # Step 2: Assignment step\n        labels = []\n        for point in X:\n            distances = np.linalg.norm(point - centres, axis=1)\n            nearest_centre_index = np.argmin(distances)\n            labels.append(nearest_centre_index)\n        \n        # Step 3: Update step\n        new_centres = np.zeros_like(centres)\n        counts = np.zeros(k, dtype=int)\n        \n        for label, point in zip(labels, X):\n            new_centres[label] += point\n            counts[label] += 1\n        \n        for i in range(k):\n            if counts[i] > 0:\n                new_centres[i] /= counts[i]\n            else:\n                new_centres[i] = centres[i]  # Keep the centre unchanged if no points are assigned\n        \n        # Check for convergence\n        if np.allclose(centres, new_centres):\n            break\n        \n        centres = new_centres\n    \n    # Round the centres to 4 decimal places\n    centres = np.round(centres, 4).tolist()\n    \n    return labels, centres\n\n# Example usage:\nif __name__ == \"__main__\":\n    X = np.array([\n        [1.0, 2.0],\n        [1.5, 1.8],\n        [5.0, 8.0],\n        [8.0, 8.0],\n        [1.0, 0.6],\n        [9.0, 11.0]\n    ])\n    k = 2\n    labels, centres = kmeans(X, k)\n    print(\"Labels:\", labels)\n    print(\"Centres:\", centres)\n```\n\nThis script implements the K-Means clustering algorithm as described in the task. It initializes the cluster centers using the first `k` points, assigns each point to the nearest center, updates the centers based on the mean of the points assigned to each center, and iterates until convergence or the maximum number of iterations is reached. The final centers are rounded to four decimal places."}
{"task_id": 581, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    m, n = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n\n    if learning_rate == 0 or iterations == 0:\n        return [round(w, 4) for w in weights], round(bias, 4)\n\n    for _ in range(iterations):\n        predictions = np.dot(X, weights) + bias\n        residuals = y - predictions\n\n        # Compute gradients\n        grad_weights = (-2/m) * np.dot(X.T, residuals) + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights\n        grad_bias = (-2/m) * np.sum(residuals)\n\n        # Update weights and bias\n        weights -= learning_rate * grad_weights\n        bias -= learning_rate * grad_bias\n\n    return [round(w, 4) for w in weights], round(bias, 4)\n```\n\nThis script defines the `elastic_net_regression` function which performs Elastic-Net regularized linear regression using batch gradient descent. The function initializes weights and bias to zero, checks if learning rate or iterations are zero, and then performs the specified number of iterations to update the weights and bias. The final weights and bias are rounded to four decimal places before being returned."}
{"task_id": 591, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    # Convert input to a numpy array for easier manipulation\n    x = np.array(x, dtype=float)\n    \n    # Iterate over each layer in the network\n    for layer_weights in weights:\n        # Convert layer weights to a numpy array\n        layer_weights = np.array(layer_weights, dtype=float)\n        \n        # Extract biases and weights\n        biases = layer_weights[:, 0]\n        weights = layer_weights[:, 1:]\n        \n        # Add bias term to input\n        x = np.concatenate(([1], x))\n        \n        # Compute the dot product of input and weights, then add biases\n        x = np.dot(weights.T, x) + biases\n        \n        # Apply ReLU activation function to all layers except the last one\n        if layer_weights is not weights[-1]:\n            x = np.maximum(0, x)\n    \n    # Round the final output to four decimal places\n    if len(x) == 1:\n        return round(x[0], 4)\n    else:\n        return [round(value, 4) for value in x]\n\n# Example usage:\n# weights = [[[1.0, 2.0, 3.0], [0.5, 1.5, 2.5]], [[1.0, 1.0], [2.0, 2.0]]]\n# x = [0.1, 0.2]\n# print(neural_net_predict(weights, x))\n```\n\nThis script defines the `neural_net_predict` function which performs a forward pass through a fully-connected feed-forward neural network with ReLU activations in all hidden layers and a linear activation in the output layer. The function takes the network's weights and an input vector as arguments and returns the network's prediction rounded to four decimal places."}
{"task_id": 595, "completion_id": 0, "completion": "```\npython\nimport numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Implement the K-Means clustering algorithm to compute centroids only.\"\"\"\n    \n    # Step 1: Initialize centroids with the first k samples\n    centroids = X[:k].copy()\n    \n    for _ in range(max_iters):\n        # Step 2a: Assign each sample to the nearest centroid\n        distances = np.sum((X[:, np.newaxis] - centroids) ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Step 2b: Update centroids\n        new_centroids = np.array([X[labels == i].mean(axis=0) if np.any(labels == i) else centroids[i] for i in range(k)])\n        \n        # Step 3: Check for convergence\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 1e-4):\n            break\n        \n        centroids = new_centroids\n    \n    # Step 4: Sort centroids lexicographically and round to 4 decimal places\n    sorted_centroids = np.round(centroids[np.lexsort([centroids[:, i] for i in range(centroids.shape[1] - 1, -1, -1)])], 4)\n    \n    return sorted_centroids.tolist()\n\n# Example usage:\n# X = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# k = 3\n# print(kmeans_centroids(X, k))\n```\n\nThis script implements the K-Means clustering algorithm from scratch, focusing on computing the centroids only. It initializes the centroids with the first `k` samples, iteratively assigns samples to the nearest centroid, updates the centroids, and checks for convergence. Finally, it sorts and rounds the centroids before returning them as a list of lists."}
