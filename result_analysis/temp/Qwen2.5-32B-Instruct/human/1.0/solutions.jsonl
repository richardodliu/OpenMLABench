{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    \"\"\"\n    Computes the dot product of a matrix and a vector.\n    \n    Parameters:\n    - a (list of list of int|float): The matrix.\n    - b (list of int|float): The vector.\n    \n    Returns:\n    - list of int|float: The result as a vector (list of dot products).\n    - -1: If the number of columns in 'a' does not match the length of 'b'.\n    \"\"\"\n    if a and len(a[0]) != len(b):\n        return -1\n    result = []\n    for row in a:\n        if len(row) != len(b):\n            return -1\n        row_dot_product = sum((x * y for (x, y) in zip(row, b)))\n        result.append(row_dot_product)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"\n    Transposes the given matrix.\n    \n    Parameters:\n    a (list of list of int|float): The matrix to be transposed.\n    \n    Returns:\n    list of list of int|float: The transposed matrix.\n    \"\"\"\n    return [[a[j][i] for j in range(len(a))] for i in range(len(a[0]))]"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    \"\"\"\n    Reshapes the given matrix a into the specified new_shape if possible.\n    If the matrix cannot be reshaped into the specified shape, returns an empty list.\n    \n    :param a: List of lists representing the matrix to reshape.\n    :param new_shape: A tuple (rows, columns) representing the new shape.\n    :return: A reshaped list of lists if successful, otherwise an empty list.\n    \"\"\"\n    array = np.array(a)\n    try:\n        reshaped_array = np.reshape(array, new_shape)\n        return reshaped_array.tolist()\n    except ValueError:\n        return []"}
{"task_id": 4, "completion_id": 0, "solution": "def calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    from statistics import mean\n    if mode.lower() == 'row':\n        return [mean(row) for row in matrix]\n    elif mode.lower() == 'column':\n        num_columns = len(matrix[0])\n        columns = zip(*matrix)\n        return [mean(column) for column in columns]\n    else:\n        raise ValueError(\"Mode must be either 'row' or 'column'.\")\nmatrix = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    \"\"\"\n    Multiplies each element of the matrix by the scalar and returns the new matrix.\n    \n    :param matrix: A list of lists of numbers representing the matrix.\n    :param scalar: A number representing the scalar value to multiply the matrix with.\n    :return: A new matrix which is the result of multiplying the original matrix by the scalar.\n    \"\"\"\n    return [[element * scalar for element in row] for row in matrix]"}
{"task_id": 6, "completion_id": 0, "solution": "import numpy as np\ndef calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    \"\"\"\n    Calculate the eigenvalues of a 2x2 matrix provided as a list of lists.\n    \n    Args:\n    matrix: A 2x2 matrix given as a list of lists with integer or floating point values.\n    \n    Returns:\n    A list of eigenvalues, sorted in descending order.\n    \"\"\"\n    if len(matrix) != 2 or any((len(row) != 2 for row in matrix)):\n        raise ValueError('Input matrix must be 2x2.')\n    np_matrix = np.array(matrix)\n    eigenvalues = np.linalg.eigvals(np_matrix)\n    return sorted(eigenvalues, reverse=True)\nmatrix_example = [[4, 2], [3, 1]]\neigenvalues = calculate_eigenvalues(matrix_example)"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"\n    Transforms matrix A using the operation T^{-1}AS, where T and S are \n    invertible matrices. Returns -1 if T or S is not invertible.\n    \"\"\"\n    A = np.array(A, dtype=np.float64)\n    T = np.array(T, dtype=np.float64)\n    S = np.array(S, dtype=np.float64)\n    try:\n        T_inv = np.linalg.inv(T)\n        S_inv = np.linalg.inv(S)\n    except np.linalg.LinAlgError:\n        return -1\n    transformed_matrix = T_inv @ A @ S\n    return np.round(transformed_matrix, 4).tolist()\nA = [[1, 2], [3, 4]]\nT = [[2, 0], [0, 2]]\nS = [[1, 0], [0, 1]]"}
{"task_id": 8, "completion_id": 0, "solution": "import numpy as np\ndef inverse_2x2(matrix: list[list[float]]) -> list[list[float]] or None:\n    \"\"\"\n    Calculates the inverse of a 2x2 matrix.\n    \n    Args:\n    matrix (list of list of float): A 2x2 matrix.\n    \n    Returns:\n    list of list of float or None: The inverse of the matrix if it's invertible, otherwise None.\n    \"\"\"\n    if len(matrix) != 2 or len(matrix[0]) != 2 or len(matrix[1]) != 2:\n        raise ValueError('Matrix must be 2x2.')\n    det = matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]\n    if det == 0:\n        return None\n    inv_det = 1 / det\n    inverse_matrix = [[matrix[1][1] * inv_det, -matrix[0][1] * inv_det], [-matrix[1][0] * inv_det, matrix[0][0] * inv_det]]\n    return inverse_matrix\nmatrix = [[4.0, 7.0], [2.0, 6.0]]"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]] | int:\n    \"\"\"\n    Multiplies two matrices a and b.\n    Returns the product matrix if multiplication is possible, otherwise returns -1.\n    \"\"\"\n    if len(a[0]) != len(b):\n        return -1\n    product = [[0 for _ in range(len(b[0]))] for _ in range(len(a))]\n    for i in range(len(a)):\n        for j in range(len(b[0])):\n            for k in range(len(b)):\n                product[i][j] += a[i][k] * b[k][j]\n    return product"}
{"task_id": 10, "completion_id": 0, "solution": "import numpy as np\ndef calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    \"\"\"\n    Calculate the covariance matrix for a given set of vectors.\n    \n    Parameters:\n    vectors: A list of lists, where each inner list represents a feature with its observations.\n    \n    Returns:\n    A list of lists, representing the covariance matrix.\n    \"\"\"\n    vectors_np = np.array(vectors)\n    mean_vector = np.mean(vectors_np, axis=1)\n    zero_mean_vectors = vectors_np - mean_vector[:, np.newaxis]\n    covariance_matrix = np.dot(zero_mean_vectors, zero_mean_vectors.T) / (vectors_np.shape[1] - 1)\n    return covariance_matrix.tolist()"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    \"\"\"\n    Solves a system of linear equations using the Jacobi iteration method.\n    \n    Parameters:\n    A (np.ndarray): The coefficient matrix of the system.\n    b (np.ndarray): The constant terms matrix of the system.\n    n (int): The number of iterations for the Jacobi method.\n    \n    Returns:\n    list: The approximate solution vector as a list of values.\n    \"\"\"\n    if np.any(np.diag(A) == 0):\n        raise ValueError('Diagonal elements of A can not be zero.')\n    x = np.zeros_like(b)\n    D = np.diag(np.diag(A))\n    R = A - np.diagflat(np.diag(A))\n    for _ in range(n):\n        x = np.dot(np.linalg.inv(D), b - np.dot(R, x))\n        x = np.round(x, 4)\n    return x.tolist()\nA = np.array([[4, 1], [1, 3]])\nb = np.array([1, 2])"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.linalg import sqrtm\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    \"\"\"\n    Approximates the singular values of a 2x2 matrix A using an analytical approach.\n    \n    Parameters:\n    A (np.ndarray): A 2x2 numpy array representing the input matrix\n    \n    Returns:\n    tuple: A tuple containing the two singular values of the input matrix.\n    \"\"\"\n    B = np.dot(A.T, A)\n    eigenvalues = np.linalg.eigvals(B)\n    singular_values = np.sqrt(eigenvalues)\n    singular_values = np.sort(singular_values)[::-1]\n    return (round(singular_values[0], 4), round(singular_values[1], 4))\nA = np.array([[1, 2], [3, 4]])\nsingular_values = svd_2x2_singular_values(A)"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n    \"\"\"Calculate the determinant of a 4x4 matrix using Laplace's expansion.\"\"\"\n    if len(matrix) != 4 or any((len(row) != 4 for row in matrix)):\n        raise ValueError('Matrix must be 4x4.')\n\n    def determinant_3x3(submatrix: list[list[int | float]]) -> float:\n        \"\"\"Helper function to calculate the determinant of a 3x3 matrix.\"\"\"\n        return sum((submatrix[0][c] * (submatrix[1][(c + 1) % 3] * submatrix[2][(c + 2) % 3] - submatrix[1][(c + 2) % 3] * submatrix[2][(c + 1) % 3]) for c in range(3)))\n    det = 0\n    for col in range(4):\n        sign = (-1) ** (col % 2)\n        minor = [row[:col] + row[col + 1:] for row in matrix[1:]]\n        det += sign * matrix[0][col] * determinant_3x3(minor)\n    return det"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    \"\"\"\n    Perform linear regression using the normal equation.\n    The function takes a matrix X (features) and a vector y (target) as input,\n    and returns the coefficients of the linear regression model.\n    Coefficients are rounded to the nearest 4th decimal.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    ones = np.ones((X.shape[0], 1))\n    X = np.hstack((ones, X))\n    theta = np.linalg.inv(X.T @ X) @ X.T @ y\n    theta_rounded = np.round(theta, decimals=4)\n    return theta_rounded.tolist()"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> np.ndarray:\n    \"\"\"\n    Perform linear regression using gradient descent and return the model coefficients.\n    \n    Parameters:\n    X (np.ndarray): Input features matrix with an additional column of ones for the intercept.\n    y (np.ndarray): Target variable vector.\n    alpha (float): Learning rate for the gradient descent.\n    iterations (int): Number of iterations to perform gradient descent.\n    \n    Returns:\n    np.ndarray: The model coefficients after performing gradient descent.\n    \"\"\"\n    m = len(y)\n    theta = np.zeros(X.shape[1])\n    for _ in range(iterations):\n        predictions = np.dot(X, theta)\n        error = predictions - y\n        gradient = np.dot(X.T, error) / m\n        theta -= alpha * gradient\n    theta = np.round(theta, 4)\n    return theta.tolist()\nX = np.concatenate([np.ones((X.shape[0], 1)), X], axis=1)\ny = 5 + 2 * X + np.random.randn(100, 1)\nalpha = 0.1\niterations = 1000"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    \"\"\"\n    Scales the input data using both standardization and min-max normalization.\n    \n    :param data: A 2D NumPy array where each row is a sample and each column is a feature.\n    :return: Two 2D lists, the first is the data standardized, the second is the data with min-max normalization.\n    \"\"\"\n    if data.size == 0:\n        return ([], [])\n    standardized_data = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    standardized_data = np.round(standardized_data, 4).tolist()\n    min_max_normalized_data = (data - np.min(data, axis=0)) / (np.max(data, axis=0) - np.min(data, axis=0))\n    min_max_normalized_data = np.round(min_max_normalized_data, 4).tolist()\n    return (standardized_data, min_max_normalized_data)"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n\n    def assign_clusters(points, centroids):\n        clusters = []\n        for point in points:\n            distances = [np.linalg.norm(np.array(point) - np.array(centroid)) for centroid in centroids]\n            closest_centroid_index = np.argmin(distances)\n            clusters.append(closest_centroid_index)\n        return clusters\n\n    def update_centroids(points, clusters, k):\n        new_centroids = []\n        for i in range(k):\n            points_in_cluster = [point for (point, cluster) in zip(points, clusters) if cluster == i]\n            if not points_in_cluster:\n                distances = [np.linalg.norm(np.array(centroid) - np.array(centroids[0])) for centroid in centroids]\n                closest_centroid_index = np.argmin(distances)\n                new_centroids.append(centroids[closest_centroid_index])\n            else:\n                new_centroids.append(np.mean(points_in_cluster, axis=0).tolist())\n        return new_centroids\n    centroids = initial_centroids\n    for _ in range(max_iterations):\n        clusters = assign_clusters(points, centroids)\n        new_centroids = update_centroids(points, clusters, k)\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    rounded_centroids = [tuple(np.round(np.array(centroid), 4)) for centroid in centroids]\n    return rounded_centroids"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    \"\"\"\n    Splits the dataset into k folds for performing K-Fold Cross-Validation.\n    Returns a list of tuples, where each tuple contains train and test indices for each fold.\n\n    Parameters:\n    X (np.ndarray): Feature matrix.\n    y (np.ndarray): Target labels.\n    k (int): Number of folds.\n    shuffle (bool): Whether to shuffle the data before splitting.\n    random_seed (int): Random seed for reproducibility.\n\n    Returns:\n    list of tuples: Each tuple contains two numpy arrays, representing train and test indices respectively.\n    \"\"\"\n    if random_seed is not None:\n        np.random.seed(random_seed)\n    n_samples = X.shape[0]\n    indices = np.arange(n_samples)\n    if shuffle:\n        np.random.shuffle(indices)\n    fold_size = n_samples // k\n    extra = n_samples % k\n    current = 0\n    folds = []\n    for i in range(k):\n        if i < extra:\n            (start, end) = (current + i * (fold_size + 1), current + (i + 1) * (fold_size + 1))\n        else:\n            (start, end) = (current + extra + i * fold_size, current + extra + (i + 1) * fold_size)\n        test_idx = indices[start:end]\n        train_idx = np.concatenate([indices[:start], indices[end:]])\n        folds.append((train_idx, test_idx))\n    return folds"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"\n    Perform Principal Component Analysis on the provided data and return the top k principal components.\n    \n    Parameters:\n    - data: A 2D NumPy array where rows are samples and columns are features.\n    - k: The number of top principal components to return.\n    \n    Returns:\n    A list of lists containing the top k principal components (eigenvectors).\n    \"\"\"\n    data = data - np.mean(data, axis=0)\n    cov_matrix = np.cov(data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    top_k_eigenvectors = eigenvectors[:, :k]\n    pca_components = [list(map(lambda x: round(x, 4), vector)) for vector in top_k_eigenvectors.T]\n    return pca_components"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef entropy(data, target_attr):\n    counts = Counter([row[target_attr] for row in data])\n    total_examples = len(data)\n    entropy_val = 0\n    for count in counts.values():\n        probability = count / total_examples\n        entropy_val -= probability * math.log2(probability)\n    return entropy_val\ndef information_gain(data, data_subset, attribute, target_attr):\n    original_entropy = entropy(data, target_attr)\n    subset_entropy = entropy(data_subset, target_attr)\n    weight = len(data_subset) / len(data)\n    gain = original_entropy - weight * subset_entropy\n    return gain\ndef best_split(data, attributes, target_attr):\n    best_attr = None\n    max_gain = -1\n    for attribute in attributes:\n        gain = 0\n        values = set((row[attribute] for row in data))\n        for value in values:\n            subset = [row for row in data if row[attribute] == value]\n            gain += information_gain(data, subset, attribute, target_attr)\n        if gain > max_gain:\n            max_gain = gain\n            best_attr = attribute\n    return best_attr\ndef learn_decision_tree(examples, attributes, target_attr):\n    if len(set([row[target_attr] for row in examples])) == 1:\n        return examples[0][target_attr]\n    if len(attributes) == 0:\n        return Counter([row[target_attr] for row in examples]).most_common(1)[0][0]\n    best_attr = best_split(examples, attributes, target_attr)\n    tree = {best_attr: {}}\n    for value in set([row[best_attr] for row in examples]):\n        examples_subset = [row for row in examples if row[best_attr] == value]\n        if len(examples_subset) == 0:\n            tree[best_attr][value] = Counter([row[target_attr] for row in examples]).most_common(1)[0][0]\n        else:\n            attributes_except_best = [attr for attr in attributes if attr != best_attr]\n            subtree = learn_decision_tree(examples_subset, attributes_except_best, target_attr)\n            tree[best_attr][value] = subtree\n    return tree\nattributes = ['age', 'income', 'student', 'credit_rating']"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef kernel_matrix(data, kernel='linear', sigma=1.0):\n    n_samples = data.shape[0]\n    K = np.zeros((n_samples, n_samples))\n    if kernel == 'linear':\n        K = np.dot(data, data.T)\n    elif kernel == 'rbf':\n        for i in range(n_samples):\n            for j in range(n_samples):\n                diff = data[i, :] - data[j, :]\n                K[i, j] = np.exp(-np.sum(diff ** 2) / (2 * sigma ** 2))\n    return K\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    n_samples = data.shape[0]\n    alphas = np.zeros(n_samples)\n    b = 0\n    K = kernel_matrix(data, kernel, sigma)\n    for t in range(1, iterations + 1):\n        lambda_t = 1 / (lambda_val * t)\n        predictions = np.dot(K, alphas * labels)\n        condition = labels * predictions < 1\n        alphas *= 1 - 1 / t\n        alphas[condition] += 1 / t * labels[condition]\n    alphas = np.round(alphas * lambda_t, 4)\n    idx = np.where(alphas > 0.0001)[0][0]\n    b = labels[idx] - np.sum(alphas * labels * K[idx, :])\n    b = np.round(b, 4)\n    return (alphas.tolist(), b.tolist())"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    \"\"\"\n    Computes the sigmoid function output for a given input.\n    \n    Parameters:\n    z (float): The input value for the sigmoid function.\n    \n    Returns:\n    float: The output of the sigmoid function, rounded to four decimal places.\n    \"\"\"\n    return round(1 / (1 + math.exp(-z)), 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    \"\"\"\n    Compute the softmax values for a given list of scores.\n    Softmax function is defined as: softmax(x_i) = exp(x_i) / sum(exp(x_j) for all x_j in scores)\n    Each element in the returned list is rounded to 4 decimal places.\n    \n    Args:\n    scores (list of floats): The list of scores for which to compute the softmax.\n    \n    Returns:\n    list of floats: The list of softmax values corresponding to each score, rounded to 4 decimal places.\n    \"\"\"\n    exp_scores = [math.exp(score) for score in scores]\n    sum_exp_scores = sum(exp_scores)\n    return [round(exp_score / sum_exp_scores, 4) for exp_score in exp_scores]"}
{"task_id": 24, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n\n    def sigmoid(x):\n        return 1 / (1 + math.exp(-x))\n    predictions = []\n    for feature_vector in features:\n        linear_combination = sum((w * f for (w, f) in zip(weights, feature_vector))) + bias\n        prediction = sigmoid(linear_combination)\n        predictions.append(round(prediction, 4))\n    predictions_np = np.array(predictions)\n    labels_np = np.array(labels)\n    mse = np.mean((predictions_np - labels_np) ** 2)\n    mse_rounded = round(mse, 4)\n    return (predictions.to_list(), mse_rounded)\nfeatures = [[1, 0.5], [0, 0], [2, 1]]\nlabels = [1, 0, 1]\nweights = [0.4, 0.6]\nbias = 0.5"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-x))\ndef sigmoid_derivative(x):\n    \"\"\"Derivative of sigmoid function.\"\"\"\n    return x * (1 - x)\ndef mean_squared_error(y_true, y_pred):\n    \"\"\"Calculate the Mean Squared Error.\"\"\"\n    return np.mean((y_true - y_pred) ** 2)\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    weights = np.array(initial_weights)\n    bias = initial_bias\n    mse_list = []\n    for _ in range(epochs):\n        activation = np.dot(features, weights) + bias\n        prediction = sigmoid(activation)\n        error = labels - prediction\n        mse = mean_squared_error(labels, prediction)\n        mse_list.append(round(mse, 4))\n        delta = error * sigmoid_derivative(prediction)\n        weights += learning_rate * np.dot(features.T, delta)\n        bias += learning_rate * np.sum(delta)\n    return (weights.tolist(), round(bias, 4), mse_list)\nfeatures = np.random.rand(5, 2)\nlabels = np.random.randint(0, 2, 5)\nweights = np.zeros(features.shape[1])\nbias = 0.0\nlearning_rate = 0.1\nepochs = 10"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __repr__(self):\n        return f'Value(data={self.data})'\n\n    def __add__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data + other.data, (self, other), '+')\n\n        def _backward():\n            self.grad += out.grad\n            other.grad += out.grad\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data * other.data, (self, other), '*')\n\n        def _backward():\n            self.grad += other.data * out.grad\n            other.grad += self.data * out.grad\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')\n\n        def _backward():\n            self.grad += (out.data > 0) * out.grad\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1\n        for node in reversed(topo):\n            node._backward()"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    \"\"\"\n    Computes the transformation matrix P from basis B to basis C for R^3.\n    \n    Parameters:\n    B (list of lists of int): Basis vectors of the initial basis B.\n    C (list of lists of int): Basis vectors of the target basis C.\n    \n    Returns:\n    list of lists of float: The transformation matrix P, from B to C, rounded to the nearest 4th decimal.\n    \"\"\"\n    B_np = np.array(B)\n    C_np = np.array(C)\n    B_inv = np.linalg.inv(B_np)\n    P = np.dot(C_np, B_inv)\n    P_rounded = np.around(P, decimals=4).tolist()\n    return P_rounded\nB = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\nC = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    ATA = np.dot(A.T, A)\n    (eigenvalues, eigenvectors) = np.linalg.eig(ATA)\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    S = np.sqrt(eigenvalues).round(4)\n    S = np.diag(S)\n    V = eigenvectors.round(4)\n    U = np.zeros(V.shape)\n    for i in range(S.shape[0]):\n        if S[i, i] != 0:\n            u = np.dot(A, V[:, i]) / S[i, i]\n        else:\n            u = np.zeros(A.shape[0])\n        U[:, i] = u\n    return (U.round(4).tolist(), S.tolist(), V.tolist())\nA = np.array([[1, 2], [3, 4]])"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    \"\"\"\n    Shuffles the rows of the feature array X and the label array y in unison.\n    \n    :param X: numpy array of features\n    :param y: numpy array of corresponding labels\n    :param seed: Optional seed for the random generator for reproducibility\n    :return: shuffled X and y as python lists\n    \"\"\"\n    if not isinstance(X, np.ndarray) or not isinstance(y, np.ndarray):\n        raise ValueError('X and y should be numpy arrays')\n    if X.shape[0] != y.shape[0]:\n        raise ValueError('X and y must have the same number of samples')\n    np.random.seed(seed)\n    perm = np.random.permutation(X.shape[0])\n    shuffled_X = X[perm]\n    shuffled_y = y[perm]\n    return (shuffled_X.tolist(), shuffled_y.tolist())"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    \"\"\"\n    An iterator that yields batches of X and optionally y.\n    \n    Parameters:\n    X (numpy.ndarray): 2D array of samples.\n    y (numpy.ndarray, optional): 1D array of labels or targets.\n    batch_size (int): Number of samples per batch.\n    \n    Yields:\n    list, list: The batch of samples (and optionally labels), reshaped into lists.\n    \"\"\"\n    X = np.array(X)\n    if y is not None:\n        y = np.array(y)\n    num_samples = X.shape[0]\n    for i in range(0, num_samples, batch_size):\n        end_idx = i + batch_size\n        if y is not None:\n            yield (X[i:end_idx].tolist(), y[i:end_idx].tolist())\n        else:\n            yield X[i:end_idx].tolist()\nX = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])\ny = np.array([1, 0, 1, 0, 1])"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    \"\"\"\n    Divides a dataset based on whether the value of a specified feature is\n    greater than or equal to a given threshold.\n    \n    Parameters:\n    - X (numpy.ndarray): The dataset to be divided (n_samples, n_features).\n    - feature_i (int): The index of the feature to be checked.\n    - threshold (float): The threshold value to compare the feature against.\n    \n    Returns:\n    - above_threshold (list): Subset of the dataset where the feature value is >= threshold.\n    - below_threshold (list): Subset of the dataset where the feature value is < threshold.\n    \"\"\"\n    if feature_i >= X.shape[1]:\n        raise ValueError(f'Feature index {feature_i} is out of bounds for dataset with shape {X.shape}')\n    above_threshold = X[X[:, feature_i] >= threshold].tolist()\n    below_threshold = X[X[:, feature_i] < threshold].tolist()\n    return (above_threshold, below_threshold)"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    \"\"\"\n    Generates a 2D numpy array filled with all polynomial combinations of\n    the features with degree less than or equal to the specified degree.\n    \n    Parameters:\n    X : 2D numpy array\n        The dataset to be transformed.\n    degree : int\n        The degree of the polynomial features.\n    \n    Returns:\n    numpy array: The matrix of polynomial features.\n    \"\"\"\n    if X.ndim == 1:\n        X = X[:, None]\n    (n_samples, n_features) = X.shape\n    polynomial_combinations = combinations_with_replacement(range(n_features), degree)\n    n_output_features = int(np.math.factorial(n_features + degree - 1) / (np.math.factorial(degree) * np.math.factorial(n_features - 1)))\n    X_new = np.empty((n_samples, n_output_features))\n    for (i, c) in enumerate(polynomial_combinations):\n        column = np.prod([X[:, j] ** c.count(j) for j in range(n_features)], axis=0)\n        X_new[:, i] = column\n    return X_new.tolist()\nX = np.array([[2, 3], [3, 4]])\ndegree = 2"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    np.random.seed(seed)\n    subsets = []\n    n_samples = X.shape[0]\n    indices = np.arange(n_samples)\n    subset_size = n_samples // n_subsets\n    for _ in range(n_subsets):\n        if replacements:\n            random_indices = np.random.choice(indices, size=subset_size, replace=True)\n        else:\n            random_indices = np.random.choice(indices, size=subset_size, replace=False)\n        X_subset = X[random_indices, :]\n        y_subset = y[random_indices]\n        subsets.append((X_subset.tolist(), y_subset.tolist()))\n    return subsets\nX = np.random.rand(100, 10)\ny = np.random.randint(0, 2, 100)\nn_subsets = 5"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    \"\"\"\n    Perform one-hot encoding on a 1D numpy array of integer values.\n    \n    :param x: A 1D numpy array of integer values to be converted to a one-hot encoding.\n    :param n_col: Optional parameter to specify the number of columns for the one-hot encoding.\n                  If not specified, it will be determined from the maximum value in the input array.\n    :return: A list representing the one-hot encoded matrix, with shapes (len(x), n_col).\n    \"\"\"\n    if n_col is None:\n        n_col = np.max(x) + 1\n    one_hot = np.eye(n_col)[x]\n    return one_hot.tolist()"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    \"\"\"\n    Convert a 1D numpy array into a diagonal matrix.\n    \n    Args:\n    x (numpy.ndarray): 1D numpy array which needs to be converted into a diagonal matrix.\n    \n    Returns:\n    list: A 2D list representing the diagonal matrix.\n    \"\"\"\n    diagonal_matrix = np.zeros((len(x), len(x)))\n    np.fill_diagonal(diagonal_matrix, x)\n    return diagonal_matrix.tolist()\nx = np.array([1, 2, 3])"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    \"\"\"\n    Calculate the accuracy score of predictions.\n\n    Parameters:\n    y_true (np.array): The true labels as a 1D numpy array.\n    y_pred (np.array): The predicted labels as a 1D numpy array.\n\n    Returns:\n    float: The accuracy score of the predictions, rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(y_true, np.ndarray) or not isinstance(y_pred, np.ndarray):\n        raise ValueError('Inputs must be numpy arrays.')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('The length of y_true and y_pred does not match.')\n    correct_predictions = np.sum(y_true == y_pred)\n    total_predictions = len(y_true)\n    accuracy = correct_predictions / total_predictions\n    return round(accuracy, 4)\ny_true = np.array([1, 2, 3, 4, 5])\ny_pred = np.array([1, 2, 3, 4, 4])"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    \"\"\"\n    Calculate the correlation matrix for a given dataset.\n    \n    Parameters:\n    - X: numpy.ndarray, the first 2D input array\n    - Y: numpy.ndarray, optional, the second 2D input array. If not provided, Y is considered to be X.\n    \n    Returns:\n    - A 2D numpy array representing the correlation matrix.\n    \"\"\"\n    if Y is None:\n        Y = X\n    covariance_matrix = np.cov(X, Y, rowvar=False)\n    std_devs_X = np.std(X, axis=0, ddof=1)\n    std_devs_Y = np.std(Y, axis=0, ddof=1)\n    std_devs_outer_product = np.outer(std_devs_X, std_devs_Y)\n    correlation_matrix = np.divide(covariance_matrix, std_devs_outer_product, out=np.zeros_like(covariance_matrix), where=std_devs_outer_product != 0)\n    correlation_matrix_rounded = np.round(correlation_matrix, 4)\n    return correlation_matrix_rounded.tolist()\nX = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nY = np.array([[10, 11, 12], [13, 14, 15], [16, 17, 18]])"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.stats import mode\ndef adaboost_fit(X, y, n_clf):\n    \"\"\"\n    Fits a AdaBoost classifier on the input data.\n    \n    Parameters:\n    - X: 2D numpy array (samples x features)\n    - y: 1D numpy array (labels for each sample)\n    - n_clf: Integer (number of weak classifiers to use)\n    \n    Returns:\n    List of dictionary items representing each weak classifier, containing its feature index,\n    threshold (best split value), polarity (1 or -1), and alpha (weight for this classifier).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    classifiers = []\n    weights = np.full(n_samples, 1 / n_samples)\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_clf = {'feature_idx': None, 'threshold': None, 'polarity': None, 'alpha': None}\n        for feature_idx in range(n_features):\n            feature_values = X[:, feature_idx]\n            unique_values = np.unique(feature_values)\n            thresholds = (unique_values[:-1] + unique_values[1:]) / 2.0\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    prediction = np.ones(n_samples)\n                    if polarity == 1:\n                        prediction[feature_values < threshold] = -1\n                    else:\n                        prediction[feature_values > threshold] = -1\n                    error = np.sum(weights[y != prediction])\n                    if error < min_error:\n                        min_error = error\n                        best_clf['feature_idx'] = feature_idx\n                        best_clf['threshold'] = threshold\n                        best_clf['polarity'] = polarity\n                        best_clf['alpha'] = 0.5 * np.log((1.0 - error) / (error + 1e-10))\n        classifier_idx = best_clf['feature_idx']\n        threshold = best_clf['threshold']\n        polarity = best_clf['polarity']\n        alpha = best_clf['alpha']\n        prediction = np.ones(n_samples)\n        if polarity == 1:\n            prediction[X[:, classifier_idx] < threshold] = -1\n        else:\n            prediction[X[:, classifier_idx] > threshold] = -1\n        weights *= np.exp(-alpha * y * prediction)\n        weights /= np.sum(weights)\n        classifiers.append(best_clf)\n    return classifiers"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list):\n    \"\"\"\n    Computes the log-softmax of a list of scores.\n    \n    Args:\n        scores: A list of scores.\n        \n    Returns:\n        A list containing the log-softmax values of the input scores.\n    \"\"\"\n    scores = np.array(scores)\n    max_score = np.max(scores)\n    safe_scores = scores - max_score\n    exp_scores = np.exp(safe_scores)\n    sum_exp_scores = np.sum(exp_scores)\n    log_softmax_scores = np.log(exp_scores / sum_exp_scores)\n    result = np.round(log_softmax_scores, decimals=4).tolist()\n    return result\nscores_example = [1.0, 2.0, 3.0]\nresult = log_softmax(scores_example)"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport math\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.optimizer_W = None\n        self.optimizer_w0 = None\n\n    def initialize(self, optimizer):\n        if self.input_shape:\n            input_units = self.input_shape[0]\n            lim = 1 / math.sqrt(input_units)\n            self.W = np.random.uniform(-lim, lim, (input_units, self.n_units))\n            self.w0 = np.zeros((1, self.n_units))\n            self.optimizer_W = copy.copy(optimizer)\n            self.optimizer_w0 = copy.copy(optimizer)\n\n    def parameters(self):\n        return np.prod(self.W.shape) + np.prod(self.w0.shape)\n\n    def forward_pass(self, X, training):\n        self.layer_input = X\n        return np.dot(X, self.W) + self.w0\n\n    def backward_pass(self, accum_grad):\n        w0_grad = np.sum(accum_grad, axis=0).reshape(1, accum_grad.shape[1])\n        W_grad = np.dot(self.layer_input.T, accum_grad)\n        if self.trainable:\n            self.W = self.optimizer_W.update(self.W, W_grad)\n            self.w0 = self.optimizer_w0.update(self.w0, w0_grad)\n        accum_grad = np.dot(accum_grad, self.W.T)\n        return accum_grad\n\n    def output_shape(self):\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    \"\"\"\n    Applies a 2D convolution over an input matrix using a given kernel, padding, and stride.\n    \n    Parameters:\n    - input_matrix (np.ndarray): 2D array to which the convolution is applied.\n    - kernel (np.ndarray): 2D array representing the convolutional kernel.\n    - padding (int): Amount of padding applied to the input_matrix edges.\n    - stride (int): The step size for the convolution operation.\n    \n    Returns:\n    - List[List[float]]: 2D list containing the results of the convolution.\n    \"\"\"\n    (input_height, input_width) = input_matrix.shape\n    (kernel_height, kernel_width) = kernel.shape\n    padded_input_matrix = np.pad(input_matrix, padding, mode='constant')\n    output_height = (input_height + 2 * padding - kernel_height) // stride + 1\n    output_width = (input_width + 2 * padding - kernel_width) // stride + 1\n    output = np.zeros((output_height, output_width))\n    for h in range(0, output_height):\n        for w in range(0, output_width):\n            output[h, w] = (padded_input_matrix[h * stride:h * stride + kernel_height, w * stride:w * stride + kernel_width] * kernel).sum()\n    output_rounded = np.around(output, decimals=4).tolist()\n    return output_rounded\ninput_matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\npadding = 1\nstride = 1"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    \"\"\"\n    Implements the Rectified Linear Unit (ReLU) activation function.\n    \n    Parameters:\n    z (float): A single float input value\n    \n    Returns:\n    float: The ReLU of the input value, which is z if z > 0, else 0.\n    \"\"\"\n    return max(0, z)"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    \"\"\"\n    Calculate the Ridge Regression loss given the feature matrix, coefficients,\n    true labels, and regularization parameter.\n\n    Parameters:\n    X (np.ndarray): 2D numpy array representing the feature matrix.\n    w (np.ndarray): 1D numpy array representing the coefficients.\n    y_true (np.ndarray): 1D numpy array representing the true labels.\n    alpha (float): Regularization parameter.\n\n    Returns:\n    float: The calculated Ridge loss rounded to the nearest 4th decimal.\n    \"\"\"\n    y_pred = X @ w\n    mse = np.mean((y_true - y_pred) ** 2)\n    reg_term = alpha * np.sum(w ** 2)\n    ridge_loss = mse + reg_term\n    return round(ridge_loss, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float:\n    \"\"\"\n    Implements the Leaky Rectified Linear Unit (Leaky ReLU) activation function.\n    \n    Parameters:\n    z (float): The input value.\n    alpha (float): The slope for negative inputs. Default is 0.01.\n    \n    Returns:\n    float: The Leaky ReLU output for the input z.\n    \"\"\"\n    return max(alpha * z, z)"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    \"\"\"\n    Computes the linear kernel between two vectors x1 and x2.\n    \n    Args:\n    - x1: A numpy array representing the first vector.\n    - x2: A numpy array representing the second vector.\n    \n    Returns:\n    - The linear kernel (dot product) of x1 and x2.\n    \"\"\"\n    return np.dot(x1, x2)\nx1 = np.array([1, 2, 3])\nx2 = np.array([4, 5, 6])"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    \"\"\"\n    Calculate the precision for binary classification.\n    \n    :param y_true: numpy array, true labels.\n    :param y_pred: numpy array, predicted labels.\n    :return: Precision value as float.\n    \"\"\"\n    if y_true.shape != y_pred.shape:\n        raise ValueError('The true and predicted labels must have the same shape.')\n    true_positives = np.sum((y_true == 1) & (y_pred == 1))\n    total_positives_pred = np.sum(y_pred == 1)\n    if total_positives_pred == 0:\n        return 0.0\n    return true_positives / total_positives_pred\ny_true = np.array([1, 0, 1, 1, 0, 1])\ny_pred = np.array([1, 1, 1, 0, 0, 1])"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    \"\"\"\n    Performs gradient descent to minimize the mean squared error loss function.\n    Supports three methods: 'batch', 'stochastic', and 'mini-batch'.\n    \n    :param X: numpy array of shape (n_samples, n_features)\n              The training samples.\n    :param y: numpy array of shape (n_samples,)\n              The target values.\n    :param weights: numpy array of shape (n_features,)\n                    The initial weights.\n    :param learning_rate: float, the step size at each iteration.\n    :param n_iterations: int, the number of iterations.\n    :param batch_size: int, the size of the mini-batch, relevant for 'mini-batch' only.\n    :param method: string, can be 'batch', 'stochastic', or 'mini-batch'.\n    :return: numpy array of shape (n_features,) - the optimized weights.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    for _ in range(n_iterations):\n        if method == 'batch':\n            gradient = 2 * X.T @ (X @ weights - y) / n_samples\n            weights -= learning_rate * gradient\n        elif method == 'stochastic':\n            for i in range(n_samples):\n                gradient = 2 * (X[i] @ weights - y[i]) * X[i]\n                weights -= learning_rate * gradient\n        elif method == 'mini-batch':\n            for i in range(0, n_samples, batch_size):\n                batch_X = X[i:i + batch_size]\n                batch_y = y[i:i + batch_size]\n                gradient = 2 * batch_X.T @ (batch_X @ weights - batch_y) / batch_size\n                weights -= learning_rate * gradient\n        else:\n            raise ValueError('Invalid method: {}'.format(method))\n    return np.round(weights, 4).tolist()\nX = np.array([[1, 1], [1, 2], [2, 2], [2, 3]])\ny = np.dot(X, np.array([1, 2])) + 3\nweights = np.array([0.0, 0.0])\nlearning_rate = 0.01\nn_iterations = 1000"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    \"\"\"\n    Convert matrix to Reduced Row Echelon Form (RREF) using Gauss-Jordan elimination.\n    Parameters:\n    - matrix: 2D list or numpy array of the matrix to be converted to RREF.\n    \n    Returns the RREF of the given matrix as a list of lists.\n    \"\"\"\n    mat = np.array(matrix, dtype=np.float64)\n    (rows, cols) = mat.shape\n    r = 0\n    for col in range(cols):\n        if r >= rows:\n            break\n        max_element = np.abs(mat[r:rows, col]).max()\n        max_index = np.where(mat[:, col] == max_element)[0][0]\n        mat[[r, max_index]] = mat[[max_index, r]]\n        pivot = mat[r, col]\n        if pivot != 0:\n            mat[r] = mat[r] / pivot\n        for i in range(rows):\n            if i != r:\n                mat[i] = mat[i] - mat[r] * (mat[i, col] / mat[r, col])\n        r += 1\n    return mat.tolist()\nmatrix = [[1, 2, -1, 3], [2, 3, -1, 5], [1, 1, -2, 4]]"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=1000):\n    m = np.zeros_like(x0)\n    v = np.zeros_like(x0)\n    x = np.array(x0, dtype=np.float64)\n    for t in range(1, num_iterations + 1):\n        g = grad(x)\n        m = beta1 * m + (1 - beta1) * g\n        v = beta2 * v + (1 - beta2) * g ** 2\n        m_hat = m / (1 - beta1 ** t)\n        v_hat = v / (1 - beta2 ** t)\n        x = x - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    return x.round(4).tolist()"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    \"\"\"\n    Implement Lasso Regression using gradient descent with L1 regularization.\n    \n    Parameters:\n    X (np.array): Feature matrix.\n    y (np.array): Target vector.\n    alpha (float): Regularization parameter.\n    learning_rate (float): Learning rate for gradient descent.\n    max_iter (int): Maximum number of iterations.\n    tol (float): Tolerance for early stopping.\n    \n    Returns:\n    tuple: A tuple containing the learned weights and bias.\n    \"\"\"\n    m = X.shape[0]\n    X_b = np.c_[np.ones((m, 1)), X]\n    n_features = X_b.shape[1]\n    weights = np.zeros(n_features)\n    for iteration in range(max_iter):\n        y_pred = X_b.dot(weights)\n        error = y_pred - y\n        gradient = X_b.T.dot(error) / m + alpha * np.sign(weights)\n        weights -= learning_rate * gradient\n        if np.linalg.norm(gradient) < tol:\n            break\n    bias = weights[0]\n    weights = weights[1:]\n    bias = np.round(bias, decimals=4)\n    weights = np.round(weights, decimals=4).tolist()\n    return (weights, bias.tolist())\nX = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\ny = np.array([2, 3, 4, 5])"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    \"\"\"Calculate the optimal string alignment distance between two strings.\"\"\"\n    len_source = len(source)\n    len_target = len(target)\n    dp = np.zeros((len_source + 1, len_target + 1), dtype=int)\n    for i in range(len_source + 1):\n        dp[i, 0] = i\n    for j in range(len_target + 1):\n        dp[0, j] = j\n    for i in range(1, len_source + 1):\n        for j in range(1, len_target + 1):\n            cost = 0 if source[i - 1] == target[j - 1] else 1\n            dp[i, j] = min(dp[i - 1, j] + 1, dp[i, j - 1] + 1, dp[i - 1, j - 1] + cost)\n            if i > 1 and j > 1 and (source[i - 1] == target[j - 2]) and (source[i - 2] == target[j - 1]):\n                dp[i, j] = min(dp[i, j], dp[i - 2, j - 2] + cost)\n    return dp[len_source, len_target]\nsource = 'caper'\ntarget = 'acer'"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    \"\"\"\n    Calculate the recall metric for binary classification.\n    \n    Parameters:\n    y_true (list): List of true binary labels.\n    y_pred (list): List of predicted binary labels.\n    \n    Returns:\n    float: The recall value rounded to three decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    TP = np.sum((y_true == 1) & (y_pred == 1))\n    FN = np.sum((y_true == 1) & (y_pred == 0))\n    if TP + FN == 0:\n        return 0.0\n    recall_value = TP / (TP + FN)\n    return round(recall_value, 3)\ny_true = [0, 1, 0, 1, 1, 1]\ny_pred = [0, 1, 1, 1, 0, 1]"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    \"\"\"Implement self-attention mechanism.\n\n    Args:\n    X: numpy array of shape (seq_length, d_model) representing the input sequence for self-attention.\n    W_q: numpy array of shape (d_model, d_k) representing the query weight matrix.\n    W_k: numpy array of shape (d_model, d_k) representing the key weight matrix.\n    W_v: numpy array of shape (d_model, d_v) representing the value weight matrix.\n\n    Returns:\n    The output of self-attention mechanism as a numpy array of shape (seq_length, d_v) rounded to 4 decimals.\n    \"\"\"\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    attention_scores = np.dot(Q, K.T) / np.sqrt(W_k.shape[1])\n    attention_probs = np.exp(attention_scores) / np.sum(np.exp(attention_scores), axis=-1, keepdims=True)\n    context = np.dot(attention_probs, V)\n    return np.round(context, 4).tolist()\nseq_length = 4\nd_model = 8\nd_k = 16\nd_v = 12\nX = np.random.rand(seq_length, d_model)\nW_q = np.random.rand(d_model, d_k)\nW_k = np.random.rand(d_model, d_k)\nW_v = np.random.rand(d_model, d_v)"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    \"\"\"\n    This function performs a forward pass through a simple RNN cell for a given input sequence.\n    The tanh function is used as the activation function for the hidden states.\n    \n    :param input_sequence: A list of lists containing the sequence of input vectors (T, d)\n    :param initial_hidden_state: The initial hidden state (d,)\n    :param Wx: The input-to-hidden weight matrix (d, d)\n    :param Wh: The hidden-to-hidden weight matrix (d, d)\n    :param b: The bias vector for hidden state updates (d,)\n    :return: The final hidden state after processing the entire input sequence (d,)\n    \"\"\"\n    input_sequence = np.array(input_sequence)\n    initial_hidden_state = np.array(initial_hidden_state)\n    Wx = np.array(Wx)\n    Wh = np.array(Wh)\n    b = np.array(b)\n    current_hidden_state = initial_hidden_state\n    for x_t in input_sequence:\n        current_hidden_state = np.tanh(np.dot(x_t, Wx) + np.dot(current_hidden_state, Wh) + b)\n    return np.round(current_hidden_state, decimals=4).tolist()\ninput_sequence = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ninitial_hidden_state = [0, 0, 0]\nWx = [[0.25, 0.15, 0.3], [0.4, 0.2, 0.1], [0.45, 0.35, 0.25]]\nWh = [[0.2, 0.1, -0.2], [0.1, -0.3, 0.3], [-0.1, -0.2, 0.4]]\nb = [0.1, 0.2, 0.3]"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    \"\"\"\n    Applies a 2D translation matrix to a list of points.\n    \n    Parameters:\n    - points: List of [x, y] coordinates to be translated.\n    - tx: Translation distance in the x direction.\n    - ty: Translation distance in the y direction.\n    \n    Returns:\n    - A list of points after applying the translation matrix.\n    \"\"\"\n    points_matrix = np.array(points).T\n    translation_matrix = np.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])\n    ones_row = np.ones(points_matrix.shape[1])\n    points_matrix = np.vstack((points_matrix, ones_row))\n    translated_points_matrix = np.dot(translation_matrix, points_matrix)\n    translated_points = translated_points_matrix[:2].T.tolist()\n    return translated_points"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    Computes the Kullback-Leibler divergence between two univariate normal distributions.\n    \n    Parameters:\n    mu_p (float): Mean of the first normal distribution (P).\n    sigma_p (float): Standard deviation of the first normal distribution (P).\n    mu_q (float): Mean of the second normal distribution (Q).\n    sigma_q (float): Standard deviation of the second normal distribution (Q).\n    \n    Returns:\n    float: The KL divergence between the two distributions.\n    \"\"\"\n    if sigma_p <= 0 or sigma_q <= 0:\n        raise ValueError('Sigma values must be greater than zero.')\n    return np.log(sigma_q / sigma_p) + (sigma_p ** 2 + (mu_p - mu_q) ** 2) / (2 * sigma_q ** 2) - 0.5\nmu_p = 0\nsigma_p = 1\nmu_q = 1\nsigma_q = 2"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    \"\"\"\n    Solve a linear system using the Gauss-Seidel iterative method.\n    \n    Parameters:\n    A (np.array): Coefficient matrix of the linear system.\n    b (np.array): Right-hand side vector of the linear system.\n    n (int): Number of iterations.\n    x_ini (np.array): Initial guess for the solution vector. Defaults to None.\n    \n    Returns:\n    list: The solution vector approximated after n iterations.\n    \"\"\"\n    size = len(b)\n    if x_ini is None:\n        x = np.zeros_like(b)\n    else:\n        x = x_ini\n    for _ in range(n):\n        x_new = np.copy(x)\n        for j in range(size):\n            s1 = np.dot(A[j, :j], x_new[:j])\n            s2 = np.dot(A[j, j + 1:], x[j + 1:])\n            x_new[j] = (b[j] - s1 - s2) / A[j, j]\n        x = x_new\n    return np.round(x, decimals=4).tolist()\nA = np.array([[4, -1, 0, 0], [-1, 4, -1, 0], [0, -1, 4, -1], [0, 0, -1, 3]])\nb = np.array([4, 8, 2, -4])\nn = 10\nx_ini = np.array([1, 1, 1, 1])"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    \"\"\"\n    Solves the linear system Ax = b using Gaussian Elimination with partial pivoting.\n    \n    Parameters:\n    A (numpy.ndarray): The coefficient matrix of the system.\n    b (numpy.ndarray): The constant terms of the system.\n    \n    Returns:\n    list: The solution vector x, rounded to 4 decimal places.\n    \"\"\"\n    n = len(A)\n    Ab = np.hstack([A, b.reshape(-1, 1)])\n    for i in range(n):\n        max_element = abs(Ab[i, i])\n        max_row = i\n        for k in range(i + 1, n):\n            if abs(Ab[k, i]) > max_element:\n                max_element = abs(Ab[k, i])\n                max_row = k\n        Ab[[i, max_row]] = Ab[[max_row, i]]\n        for k in range(i + 1, n):\n            factor = Ab[k, i] / Ab[i, i]\n            for j in range(i, n + 1):\n                Ab[k, j] -= factor * Ab[i, j]\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        x[i] = round((Ab[i, n] - np.dot(Ab[i, i + 1:n], x[i + 1:n])) / Ab[i, i], 4)\n    return x.tolist()\nA = np.array([[2, 1, -1], [-3, -1, 2], [-2, 1, 2]], dtype=float)"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    @staticmethod\n    def sigmoid(x):\n        return 1 / (1 + np.exp(-x))\n\n    @staticmethod\n    def tanh(x):\n        return np.tanh(x)\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \"\"\"\n        hidden_states = []\n        current_hidden_state = initial_hidden_state\n        current_cell_state = initial_cell_state\n        for i in range(len(x)):\n            input_vector = np.zeros((self.input_size, 1))\n            input_vector[x[i]] = 1\n            combined_input = np.vstack((input_vector, current_hidden_state))\n            forget_gate = self.sigmoid(np.dot(self.Wf, combined_input) + self.bf)\n            input_gate = self.sigmoid(np.dot(self.Wi, combined_input) + self.bi)\n            candidate_cell_state = self.tanh(np.dot(self.Wc, combined_input) + self.bc)\n            output_gate = self.sigmoid(np.dot(self.Wo, combined_input) + self.bo)\n            current_cell_state = np.multiply(forget_gate, current_cell_state) + np.multiply(input_gate, candidate_cell_state)\n            current_hidden_state = np.multiply(output_gate, self.tanh(current_cell_state))\n            hidden_states.append(current_hidden_state.round(4).tolist())\n        return (hidden_states, current_hidden_state.round(4).tolist(), current_cell_state.round(4).tolist())\nx = [1, 2, 3]"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef compute_tf_idf(corpus, query):\n    if not corpus:\n        raise ValueError('Corpus is empty. Please provide at least one document.')\n\n    def term_frequency(terms, document):\n        return sum((term in document for term in terms)) / len(document) if len(document) > 0 else 0\n    n_docs = len(corpus)\n    tf_idf_scores = []\n    for doc in corpus:\n        scores = []\n        for term in query:\n            df = sum((term in doc for doc in corpus)) + 1\n            idf = math.log((1 + n_docs) / df)\n            tf = term_frequency([term], doc)\n            scores.append(tf * idf)\n        tf_idf_scores.append(scores)\n    tf_idf_scores = np.array(tf_idf_scores).round(4).tolist()\n    return tf_idf_scores\ncorpus = [['cat', 'dog', 'fish'], ['fish', 'dog', 'cat', 'rabbit'], ['dog', 'cat']]\nquery = ['cat', 'dog', 'rabbit']"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fp = np.sum((y_true == 0) & (y_pred == 1))\n    fn = np.sum((y_true == 1) & (y_pred == 0))\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0\n    beta_squared = beta ** 2\n    f_beta_num = (1 + beta_squared) * precision * recall\n    f_beta_denom = beta_squared * precision + recall\n    f_score = f_beta_num / f_beta_denom if f_beta_denom > 0 else 0\n    return round(f_score, 3)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def rnn_forward(self, input_sequence):\n        h = np.zeros((self.hidden_size, 1))\n        outputs = []\n        last_inputs = []\n        last_hiddens = []\n        for x_t in input_sequence:\n            x_t = np.array(x_t).reshape(-1, 1)\n            last_inputs.append(x_t)\n            last_hiddens.append(h)\n            h = np.tanh(np.dot(self.W_xh, x_t) + np.dot(self.W_hh, h) + self.b_h)\n            y = np.dot(self.W_hy, h) + self.b_y\n            outputs.append(y)\n        return (outputs, last_inputs, last_hiddens)\n\n    def rnn_backward(self, input_sequence, expected_output, outputs, last_inputs, last_hiddens, learning_rate):\n        W_xh_grad = np.zeros_like(self.W_xh)\n        W_hh_grad = np.zeros_like(self.W_hh)\n        W_hy_grad = np.zeros_like(self.W_hy)\n        b_h_grad = np.zeros_like(self.b_h)\n        b_y_grad = np.zeros_like(self.b_y)\n        h_next_grad = np.zeros_like(last_hiddens[0])\n        for t in reversed(range(len(input_sequence))):\n            x_t = last_inputs[t]\n            h_t = last_hiddens[t]\n            h_prev_t = last_hiddens[t - 1] if t > 0 else np.zeros_like(self.b_h)\n            output = outputs[t]\n            expected = expected_output[t].reshape(-1, 1)\n            delta_out = output - expected\n            W_hy_grad += np.dot(delta_out, h_t.T)\n            b_y_grad += delta_out\n            delta_out_h = np.dot(self.W_hy.T, delta_out) + h_next_grad\n            delta_out_h_tanh = delta_out_h * (1 - h_t ** 2)\n            W_xh_grad += np.dot(delta_out_h_tanh, x_t.T)\n            W_hh_grad += np.dot(delta_out_h_tanh, h_prev_t.T)\n            b_h_grad += delta_out_h_tanh\n            h_next_grad = np.dot(self.W_hh.T, delta_out_h_tanh)\n        self.W_xh -= learning_rate * W_xh_grad\n        self.W_hh -= learning_rate * W_hh_grad\n        self.W_hy -= learning_rate * W_hy_grad\n        self.b_h -= learning_rate * b_h_grad\n        self.b_y -= learning_rate * b_y_grad"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    if x0 is None:\n        x0 = np.zeros_like(b)\n    else:\n        assert x0.shape == b.shape, 'Initial guess x0 must have the same shape as b'\n    x = np.array(x0)\n    r = np.dot(A, x) - b\n    p = -r\n    for _ in range(n):\n        Ap = np.dot(A, p)\n        alpha = np.dot(r, r) / np.dot(p, Ap)\n        x += alpha * p\n        r_new = r + alpha * Ap\n        if np.linalg.norm(r_new) < tol:\n            break\n        beta = np.dot(r_new, r_new) / np.dot(r, r)\n        p = beta * p - r_new\n        r = r_new\n    return np.round(x, 8).tolist()\nA = np.array([[4, 1], [1, 3]])\nb = np.array([1, 2])\nn = 100\nx = conjugate_gradient(A, b, n)"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    total_samples = len(y)\n    class_labels = np.array(y)\n    (_, counts) = np.unique(class_labels, return_counts=True)\n    sum_proportions_squared = np.sum((counts / total_samples) ** 2)\n    gini = 1.0 - sum_proportions_squared\n    return round(gini, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    values = []\n    col_indices = []\n    row_ptr = [0]\n    rows = len(dense_matrix)\n    cols = len(dense_matrix[0])\n    for row in dense_matrix:\n        non_zero_count = 0\n        for (col_idx, value) in enumerate(row):\n            if value != 0:\n                values.append(value)\n                col_indices.append(col_idx)\n                non_zero_count += 1\n        row_ptr.append(row_ptr[-1] + non_zero_count)\n    return (values, col_indices, row_ptr)\ndense_matrix = [[1, 0, 0, 2], [0, 3, 0, 0], [4, 0, 5, 0]]"}
{"task_id": 66, "completion_id": 0, "solution": "import numpy as np\ndef orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    v_np = np.array(v)\n    L_np = np.array(L)\n    projection = np.dot(v_np, L_np) / np.dot(L_np, L_np) * L_np\n    return [round(float(x), 3) for x in projection]"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    rows = len(dense_matrix)\n    if rows == 0:\n        return ([], [], [])\n    cols = len(dense_matrix[0])\n    values = []\n    row_indices = []\n    col_ptr = [0]\n    for col in range(cols):\n        for row in range(rows):\n            if dense_matrix[row][col] != 0:\n                values.append(dense_matrix[row][col])\n                row_indices.append(row)\n        col_ptr.append(len(values))\n    return (values, row_indices, col_ptr)\ndense_matrix = [[1, 0, 3, 0], [0, 5, 0, 9], [0, 0, 0, 0], [7, 0, 0, 0], [8, 0, 0, 13]]"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    \"\"\"\n    Finds the column space (image/span) basis of matrix A.\n    It converts A into row echelon form to identify independent columns, which span the column space.\n    Returns the basis vectors from the original matrix corresponding to the independent columns.\n    \n    Parameters:\n        A (list of lists): A matrix represented as a list of lists.\n    \n    Returns:\n        list: A list of basis vectors spanning the column space of A, rounded to 8 decimal places.\n    \"\"\"\n    matrix = np.array(A, dtype=float)\n    (rows, cols) = matrix.shape\n    row_echelon = np.zeros_like(matrix)\n    row_echelon[:] = matrix[:]\n    (row, col) = (0, 0)\n    indep_cols = []\n    while row < rows and col < cols:\n        pivot_row = row + np.argmax(np.abs(row_echelon[row:, col]))\n        if row_echelon[pivot_row, col] == 0:\n            col += 1\n            continue\n        row_echelon[[row, pivot_row]] = row_echelon[[pivot_row, row]]\n        indep_cols.append(col)\n        for i in range(row + 1, rows):\n            factor = row_echelon[i, col] / row_echelon[row, col]\n            row_echelon[i] -= factor * row_echelon[row]\n        row += 1\n        col += 1\n    basis = matrix[:, indep_cols]\n    return basis.round(8).tolist()\nA = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    \"\"\"\n    Calculate the R-squared value for regression analysis.\n    \n    Parameters:\n    - y_true: An array of the true values.\n    - y_pred: An array of the predicted values.\n    \n    Returns:\n    - A float number representing the R-squared value, rounded to three decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    tss = np.sum((y_true - np.mean(y_true)) ** 2)\n    rss = np.sum((y_true - y_pred) ** 2)\n    r2 = 1 - rss / tss\n    return round(r2, 3)\ny_true = [1, 2, 3, 4, 5]\ny_pred = [1.1, 1.9, 3.1, 3.9, 4.8]"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    \"\"\"\n    Calculates the average brightness of a grayscale image represented as a 2D list.\n    If the image is empty, rows have inconsistent lengths, or contains invalid pixel values,\n    the function returns -1.\n    \n    :param img: A 2D list representing the grayscale image.\n    :return: Average brightness of the image as a float, or -1 for invalid inputs.\n    \"\"\"\n    if not img or not all((len(row) == len(img[0]) for row in img)):\n        return -1\n    (total_brightness, pixel_count) = (0, 0)\n    for row in img:\n        for pixel in row:\n            if not 0 <= pixel <= 255:\n                return -1\n            total_brightness += pixel\n            pixel_count += 1\n    if pixel_count == 0:\n        return -1\n    average_brightness = round(total_brightness / pixel_count, 2)\n    return average_brightness"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    \"\"\"\n    Calculate the Root Mean Square Error (RMSE) between the actual values and the predicted values.\n    \n    Args:\n    y_true (np.ndarray): An array of the true values.\n    y_pred (np.ndarray): An array of the predicted values.\n    \n    Returns:\n    float: The RMSE value rounded to three decimal places.\n    \n    Raises:\n    ValueError: If y_true and y_pred have different lengths or if either is not a np.ndarray.\n    \"\"\"\n    if not (isinstance(y_true, np.ndarray) and isinstance(y_pred, np.ndarray)):\n        raise ValueError('Input arrays must be numpy arrays.')\n    if len(y_true) != len(y_pred):\n        raise ValueError('Input arrays must have the same length.')\n    rmse_value = np.sqrt(np.mean((y_true - y_pred) ** 2))\n    return round(rmse_value, 3)\ny_true = np.array([3, -0.5, 2, 7])\ny_pred = np.array([2.5, 0.0, 2, 8])"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    \"\"\"\n    Calculate the Jaccard Index between two binary arrays y_true and y_pred.\n    \n    Parameters:\n    - y_true: list of actual binary labels\n    - y_pred: list of predicted binary labels\n    \n    Returns:\n    - The Jaccard Index as a float, rounded to 3 decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    intersection = np.sum(np.logical_and(y_true, y_pred))\n    union = np.sum(np.logical_or(y_true, y_pred))\n    if union == 0:\n        return 0.0\n    jaccard = intersection / union\n    return round(jaccard, 3)"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    \"\"\"\n    Calculate the Dice Score for binary classification.\n    \n    Parameters:\n    y_true (np.array): A 1D numpy array with true binary labels.\n    y_pred (np.array): A 1D numpy array with predicted binary labels.\n    \n    Returns:\n    float: Dice Score rounded to 3 decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    intersection = np.sum(y_true * y_pred)\n    cardinality_true = np.sum(y_true)\n    cardinality_pred = np.sum(y_pred)\n    if cardinality_true == 0 and cardinality_pred == 0:\n        return 1.0\n    score = 2.0 * intersection / (cardinality_true + cardinality_pred)\n    if np.isnan(score):\n        return 1.0\n    return round(score, 3)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef create_hypervector(dim, seed):\n    \"\"\"Create a hypervector of given dimensionality and seed for reproducibility.\"\"\"\n    np.random.seed(seed)\n    hv = np.random.choice([-1, 1], size=dim)\n    return hv\ndef xor_hypervectors(hv1, hv2):\n    \"\"\"XOR two hypervectors of the same dimensionality.\"\"\"\n    return np.mod(hv1.astype(bool) + hv2.astype(bool), 2).astype(int)\ndef bundle_hypervectors(hvs):\n    \"\"\"Bundle a list of hypervectors by element wise multiplication and normalization.\"\"\"\n    return np.sign(np.prod(hvs, axis=0))\ndef create_row_hv(row, dim, random_seeds):\n    \"\"\"\n    Generates a composite hypervector for a given dataset row using Hyperdimensional Computing (HDC).\n    \n    Parameters:\n    - row: A dictionary representing a dataset row, where keys are feature names and values are their corresponding values.\n    - dim: The dimensionality of the hypervectors.\n    - random_seeds: A dictionary where keys are feature names and values are seeds to ensure reproducibility of hypervectors.\n    \n    Returns:\n    - A composite hypervector representing the entire row as a list.\n    \"\"\"\n    hvs = []\n    for (feature, value) in row.items():\n        seed = random_seeds[feature]\n        feature_hv = create_hypervector(dim, seed)\n        value_hv = create_hypervector(dim, seed + int(value))\n        hv_bound = xor_hypervectors(feature_hv, value_hv)\n        hvs.append(hv_bound)\n    composite_hv = bundle_hypervectors(hvs)\n    return composite_hv.tolist()"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    \"\"\"\n    Generates a confusion matrix for binary classification.\n    \n    :param data: A list of lists with [y_true, y_pred] where y_true is the true label, y_pred is the predicted label.\n    :return: A 2x2 confusion matrix.\n    \"\"\"\n    counter = Counter()\n    for (y_true, y_pred) in data:\n        if y_true == y_pred == 1:\n            counter['TP'] += 1\n        elif y_true == 0 and y_pred == 1:\n            counter['FP'] += 1\n        elif y_true == y_pred == 0:\n            counter['TN'] += 1\n        elif y_true == 1 and y_pred == 0:\n            counter['FN'] += 1\n    return [[counter['TN'], counter['FP']], [counter['FN'], counter['TP']]]"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    \"\"\"\n    Calculate the cosine similarity between two vectors v1 and v2.\n    \n    Parameters:\n    - v1: numpy array representing the first input vector.\n    - v2: numpy array representing the second input vector.\n    \n    Returns:\n    - A float representing the cosine similarity between v1 and v2, rounded to three decimal places.\n    \"\"\"\n    if v1.shape != v2.shape:\n        raise ValueError('Vectors must have the same shape.')\n    if len(v1) == 0 or np.linalg.norm(v1) == 0 or np.linalg.norm(v2) == 0:\n        raise ValueError('Input vectors cannot be empty or have zero magnitude.')\n    dot_product = np.dot(v1, v2)\n    norm_v1 = np.linalg.norm(v1)\n    norm_v2 = np.linalg.norm(v2)\n    return round(dot_product / (norm_v1 * norm_v2), 3)\nv1 = np.array([1, 2, 3])\nv2 = np.array([4, 5, 6])"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\nfrom sklearn.metrics import f1_score, confusion_matrix\nfrom typing import List, Tuple\ndef performance_metrics(actual: List[int], predicted: List[int]) -> Tuple:\n    assert len(actual) == len(predicted), 'Actual and predicted lists must have the same length'\n    assert all((x in [0, 1] for x in actual)), 'Invalid values in actual list'\n    assert all((x in [0, 1] for x in predicted)), 'Invalid values in predicted list'\n    conf_matrix = confusion_matrix(actual, predicted)\n    (tn, fp, fn, tp) = conf_matrix.ravel()\n    accuracy = round((tp + tn) / (tp + tn + fp + fn), 3)\n    f1_score_value = round(f1_score(actual, predicted), 3)\n    specificity_value = round(tn / (tn + fp), 3)\n    negative_predictive_value_value = round(tn / (tn + fn), 3)\n    return (conf_matrix.tolist(), accuracy, f1_score_value, specificity_value, negative_predictive_value_value)\nactual = [1, 0, 1, 0, 1, 1, 0, 0, 0, 1]\npredicted = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0]"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\nfrom scipy import stats\ndef descriptive_statistics(data):\n    \"\"\"\n    This function calculates various descriptive statistics for a given list or NumPy array of numbers.\n    It returns a dictionary containing mean, median, mode, variance, standard deviation, percentiles (25th, 50th, 75th),\n    and interquartile range (IQR), with non-categorical statistics rounded to four decimal places.\n    \n    :param data: List or NumPy array of numerical values.\n    :return: Dictionary containing descriptive statistics.\n    \"\"\"\n    data = np.array(data)\n    stats_dict = {'mean': round(np.mean(data), 4), 'median': round(np.median(data), 4), 'mode': stats.mode(data)[0][0], 'variance': round(np.var(data, ddof=1), 4), 'standard_deviation': round(np.std(data, ddof=1), 4), '25th_percentile': np.percentile(data, 25), '50th_percentile': np.percentile(data, 50), '75th_percentile': np.percentile(data, 75), 'interquartile_range': np.percentile(data, 75) - np.percentile(data, 25)}\n    return stats_dict"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials, rounded to five decimal places\n    \"\"\"\n    binom_coeff = math.comb(n, k)\n    probability = binom_coeff * p ** k * (1 - p) ** (n - k)\n    return round(probability, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    :return: The value of the PDF rounded to 5 decimal places.\n    \"\"\"\n    exponent = math.exp(-0.5 * ((x - mean) / std_dev) ** 2)\n    denominator = std_dev * math.sqrt(2 * math.pi)\n    pdf = exponent / denominator\n    return round(pdf, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the average rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    :return: The probability of observing exactly k events\n    \"\"\"\n    probability = math.exp(-lam) * lam ** k / math.factorial(k)\n    return round(probability, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    The contrast is defined here as the difference between the maximum and minimum pixel values.\n    \n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n        \n    Returns:\n        float: The contrast of the image.\n    \"\"\"\n    if not isinstance(img, np.ndarray) or img.ndim != 2:\n        raise ValueError('Input image must be a 2D numpy array.')\n    max_val = np.max(img)\n    min_val = np.min(img)\n    contrast = max_val - min_val\n    return contrast"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    \n    Returns:\n        float: the dot product of the two vectors.\n    \"\"\"\n    if vec1.shape != vec2.shape:\n        raise ValueError('Both vectors must be of the same length.')\n    return np.dot(vec1, vec2)"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n    Returns:\n        list of list of float: A nested list where each inner list represents the transformed features of a data point.\n    \"\"\"\n    if degree < 0:\n        return []\n    data_array = np.array(data)\n    transformed_features = np.column_stack([data_array ** i for i in range(1, degree + 1)])\n    rounded_transformed_features = np.round(transformed_features, decimals=8)\n    return rounded_transformed_features.tolist()"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    \"\"\"\n    Compute the positional encodings for a specific position and model dimensionality.\n    \n    Args:\n    position: The position in the sequence to calculate the encoding for.\n    d_model: The dimensionality of the model, should be even.\n    \n    Returns:\n    A list containing the positional encoding array of shape (position, d_model) or -1 for invalid input.\n    \"\"\"\n    if position == 0 or d_model <= 0:\n        return -1\n    pe = np.zeros((position, d_model), dtype=np.float16)\n    for pos in range(position):\n        for i in range(0, d_model, 2):\n            angle_rates = 1 / np.power(10000, 2 * (i // 2) / np.float16(d_model))\n            pe[pos, i] = np.sin(pos * angle_rates)\n            if i + 1 < d_model:\n                pe[pos, i + 1] = np.cos(pos * angle_rates)\n    return pe.tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    elif training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    else:\n        return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m / (1 - np.power(beta1, t))\n    v_hat = v / (1 - np.power(beta2, t))\n    parameter -= learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    updated_parameter = parameter.round(5) if isinstance(parameter, np.ndarray) else round(parameter, 5)\n    updated_m = m.round(5) if isinstance(m, np.ndarray) else round(m, 5)\n    updated_v = v.round(5) if isinstance(v, np.ndarray) else round(v, 5)\n    updated_parameter = updated_parameter.tolist() if hasattr(updated_parameter, 'tolist') else updated_parameter\n    updated_m = updated_m.tolist() if hasattr(updated_m, 'tolist') else updated_m\n    updated_v = updated_v.tolist() if hasattr(updated_v, 'tolist') else updated_v\n    return (updated_parameter, updated_m, updated_v)"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\nclass DummyBPE:\n\n    def __init__(self):\n        self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n    def encode(self, text: str):\n        tokens = text.strip().split()\n        return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n    def decode(self, token_ids: list):\n        reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n        return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef positional_encoding(seq_len, embed_dim):\n    pos_enc = np.zeros((seq_len, embed_dim))\n    for pos in range(seq_len):\n        for i in range(embed_dim):\n            pos_enc[pos, i] = np.sin(pos / 10000 ** (2 * i / embed_dim)) if i % 2 == 0 else np.cos(pos / 10000 ** (2 * (i - 1) / embed_dim))\n    return pos_enc\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    input_ids = encoder.encode(prompt)\n    embed_dim = params['wte'].shape[1]\n    for _ in range(n_tokens_to_generate):\n        token_embeddings = params['wte'][input_ids[-hparams['n_ctx']:], :]\n        pos_embeddings = positional_encoding(hparams['n_ctx'], embed_dim)[:len(input_ids[-hparams['n_ctx']:])]\n        outputs = token_embeddings + pos_embeddings\n        outputs = params['ln_f']['g'] * outputs + params['ln_f']['b']\n        generated_token = np.argmax(np.sum(outputs, axis=-1), axis=-1)\n        input_ids.append(generated_token)\n    generated_text = encoder.decode(input_ids)\n    return generated_text"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        \"\"\"Calculates the softmax of the given values.\"\"\"\n        e_values = np.exp(values - np.max(values))\n        return e_values / e_values.sum()\n\n    def self_attention(keys, queries):\n        \"\"\"Calculates the self-attention between keys and queries.\"\"\"\n        scores = np.matmul(queries, keys.T)\n        weights = softmax(scores)\n        weighted_patterns = np.matmul(weights, keys)\n        return weighted_patterns\n    embedding = np.random.randn(n, dimension)\n    final_patterns = self_attention(embedding, embedding)\n    return [round(pattern, 4) for pattern in final_patterns.flatten().tolist()]\nn = 3\ndimension = 5"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    \"\"\"\n    Calculate BM25 scores for a given query and document corpus.\n    \n    :param corpus: List of documents as strings.\n    :param query: The query as a single string.\n    :param k1: Term frequency saturation parameter.\n    :param b: Document length normalization penalty.\n    :return: List of BM25 scores for each document in the corpus.\n    \"\"\"\n    avg_doc_len = sum((len(doc.split()) for doc in corpus)) / len(corpus)\n    doc_freq = Counter()\n    total_docs = len(corpus)\n    for doc in corpus:\n        tokens = set(doc.split())\n        for token in tokens:\n            doc_freq[token] += 1\n    query_terms = query.split()\n    scores = []\n    for doc in corpus:\n        score = 0\n        tokens = doc.split()\n        tokens_len = len(tokens)\n        doc_length = len(tokens)\n        token_counts = Counter(tokens)\n        for term in query_terms:\n            if term in doc:\n                tf = token_counts[term]\n                df = doc_freq[term]\n                idf = np.log((total_docs - df + 0.5) / (df + 0.5) + 1)\n                first_term = tf * (k1 + 1) / (tf + k1 * (1 - b + b * (doc_length / avg_doc_len)))\n                score += idf * first_term\n        scores.append(round(score, 3))\n    return scores"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    tp = fp = fn = 0\n    for i in range(len(y_true)):\n        if y_true[i] == 1 and y_pred[i] == 1:\n            tp += 1\n        if y_pred[i] == 1 and y_true[i] == 0:\n            fp += 1\n        if y_true[i] == 1 and y_pred[i] == 0:\n            fn += 1\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0\n    f1_score = 2 * (precision * recall) / (precision + recall) if precision + recall > 0 else 0\n    return round(f1_score, 3)\ny_true = [1, 0, 1, 1, 0, 1]\ny_pred = [1, 1, 1, 0, 0, 1]"}
{"task_id": 92, "completion_id": 0, "solution": "import math\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\nPI = 3.14159\ndef power_grid_forecast(consumption_data):\n    detrended_data = [consumption_data[i] - 10 * math.sin(2 * PI * i / 10) for i in range(len(consumption_data))]\n    days = np.array(range(1, 11)).reshape((-1, 1))\n    base_consumption_model = LinearRegression()\n    base_consumption_model.fit(days, detrended_data)\n    day_15 = np.array([15]).reshape((-1, 1))\n    prediction = base_consumption_model.predict(day_15)\n    day_15_fluctuation = 10 * math.sin(2 * PI * 15 / 10)\n    prediction += day_15_fluctuation\n    final_prediction = math.ceil(prediction[0] * 1.05)\n    return final_prediction"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    if not isinstance(y_true, np.ndarray) or not isinstance(y_pred, np.ndarray):\n        raise ValueError('Inputs must be numpy arrays.')\n    if len(y_true) == 0 or len(y_pred) == 0:\n        raise ValueError('Input arrays cannot be empty.')\n    if len(y_true) != len(y_pred):\n        raise ValueError('Input arrays must have the same length.')\n    absolute_errors = np.abs(y_true - y_pred)\n    result = np.mean(absolute_errors)\n    return round(result, 3)\ny_true = np.array([3, -0.5, 2, 7])\ny_pred = np.array([2.5, 0.0, 2, 8])"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray) -> tuple:\n    \"\"\"\n    Computes the queries (Q), keys (K), and values (V) for multi-head attention.\n    :param X: Input data.\n    :param W_q: Weight matrix for queries.\n    :param W_k: Weight matrix for keys.\n    :param W_v: Weight matrix for values.\n    :return: A tuple containing the query, key, and value matrices.\n    \"\"\"\n    Q = X @ W_q\n    K = X @ W_k\n    V = X @ W_v\n    return (Q, K, V)\ndef self_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Computes the self-attention between queries, keys, and values.\n    :param Q: Query matrix.\n    :param K: Key matrix.\n    :param V: Value matrix.\n    :return: The attended output after applying the softmax function over scaled dot-products and the values.\n    \"\"\"\n    d_k = Q.shape[-1]\n    scores = Q @ K.T / np.sqrt(d_k)\n    attention_weights = np.exp(scores) / np.sum(np.exp(scores), axis=-1, keepdims=True)\n    attended_values = attention_weights @ V\n    return attended_values\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Implements the multi-head attention mechanism.\n    :param X: Input data.\n    :param W_q: Weight matrix for queries.\n    :param W_k: Weight matrix for keys.\n    :param W_v: Weight matrix for values.\n    :param n_heads: The number of attention heads.\n    :return: The multi-head attended output as a python list.\n    \"\"\"\n    (batch_size, seq_length, d_model) = X.shape\n    d_k = d_model // n_heads\n    (Q, K, V) = compute_qkv(X, W_q, W_k, W_v)\n    Q_heads = Q.reshape(batch_size, seq_length, n_heads, d_k)\n    K_heads = K.reshape(batch_size, seq_length, n_heads, d_k)\n    V_heads = V.reshape(batch_size, seq_length, n_heads, d_k)\n    attended_heads = []\n    for i in range(n_heads):\n        attended = self_attention(Q_heads[:, :, i, :], K_heads[:, :, i, :], V_heads[:, :, i, :])\n        attended_heads.append(attended)\n    attended_concat = np.concatenate(attended_heads, axis=-1)\n    output = attended_concat.reshape(batch_size, seq_length, -1).round(4).tolist()\n    return output\nbatch_size = 2\nseq_length = 3\nd_model = 12\nn_heads = 3\nX_sample = np.random.rand(batch_size, seq_length, d_model)\nW_q_sample = np.random.rand(d_model, d_model)\nW_k_sample = np.random.rand(d_model, d_model)\nW_v_sample = np.random.rand(d_model, d_model)\noutput = multi_head_attention(X_sample, W_q_sample, W_k_sample, W_v_sample, n_heads)"}
{"task_id": 95, "completion_id": 0, "solution": "import numpy as np\ndef phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    (x_arr, y_arr) = (np.array(x), np.array(y))\n    n11 = np.sum((x_arr == 1) & (y_arr == 1))\n    n10 = np.sum((x_arr == 1) & (y_arr == 0))\n    n01 = np.sum((x_arr == 0) & (y_arr == 1))\n    n00 = np.sum((x_arr == 0) & (y_arr == 0))\n    numerator = n11 * n00 - n10 * n01\n    denominator = np.sqrt((n10 + n11) * (n00 + n01) * (n01 + n11) * (n00 + n10))\n    if denominator == 0:\n        return 0.0\n    phi_coefficient = numerator / denominator\n    return round(phi_coefficient, 4)"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n    \n    Args:\n        x (float): Input value\n    \n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    if x <= -2.5:\n        return 0.0\n    elif x >= 2.5:\n        return 1.0\n    else:\n        return 0.2 * x + 0.5"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value\n    \"\"\"\n    if x > 0:\n        return x\n    else:\n        return alpha * (math.exp(x) - 1)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    return max(0, x) + alpha * min(0, x)"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n    \n    Args:\n        x: Input value\n        \n    Returns:\n        The softplus value: log(1 + e^x), rounded to the 4th decimal place.\n    \"\"\"\n    if x > 100:\n        return round(x, 4)\n    elif x < -100:\n        return round(0.0, 4)\n    else:\n        return round(math.log(1 + math.exp(x)), 4)"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input, rounded to 4 decimal places\n    \"\"\"\n    result = x / (1 + abs(x))\n    return round(result, 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    rhos = np.array(rhos)\n    A = np.array(A)\n    pi_theta_old = np.array(pi_theta_old)\n    pi_theta_ref = np.array(pi_theta_ref)\n    clipped_rhos = np.clip(rhos, 1 - epsilon, 1 + epsilon)\n    pi_ratios = pi_theta_old / pi_theta_ref\n    clipped_ratios = np.clip(pi_ratios, 1 - epsilon, 1 + epsilon)\n    first_term = np.min([rhos * A, clipped_rhos * A], axis=0).mean()\n    kl_div = np.mean(pi_theta_old * np.log(pi_theta_old / pi_theta_ref))\n    objective_value = first_term - beta * kl_div\n    return round(objective_value, 6)"}
{"task_id": 102, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value\n    \"\"\"\n    return x / (1 + math.exp(-x))"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x > 0:\n        return scale * x\n    else:\n        return scale * alpha * (math.exp(x) - 1)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N x D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n\n    def sigmoid(z):\n        \"\"\"Compute the sigmoid function.\"\"\"\n        return 1 / (1 + np.exp(-z))\n    z = np.dot(X, weights) + bias\n    probabilities = sigmoid(z)\n    predictions = (probabilities > 0.5).astype(int)\n    return predictions.tolist()"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    n_classes = len(np.unique(y))\n    W = np.zeros((n_features, n_classes), dtype=float)\n\n    def softmax(z):\n        return np.exp(z) / np.sum(np.exp(z), axis=1, keepdims=True)\n\n    def one_hot_encode(y):\n        return np.eye(n_classes)[y]\n    Y = one_hot_encode(y)\n    B = []\n    losses = []\n    m = n_samples\n    for _ in range(iterations):\n        scores = X.dot(W)\n        predictions = softmax(scores)\n        loss = -np.sum(Y * np.log(predictions + 1e-08)) / m\n        losses.append(np.round(loss, 4))\n        gradient = X.T.dot(predictions - Y) / m\n        W -= learning_rate * gradient\n        B = np.round(W, 4).tolist()\n    return (B, [loss for loss in losses])\ny = np.array([0, 1, 1, 1, 0, 2])\nlearning_rate = 0.1\niterations = 1000"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"\n    Compute the sigmoid of z.\n    \"\"\"\n    return 1 / (1 + np.exp(-z))\ndef compute_loss(y, y_hat):\n    \"\"\"\n    Computes the binary cross entropy loss.\n    \"\"\"\n    m = y.shape[0]\n    loss = -np.sum(y * np.log(y_hat) + (1 - y) * np.log(1 - y_hat)) / m\n    return loss\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \"\"\"\n    (m, n) = X.shape\n    w = np.zeros((n, 1))\n    b = 0\n    losses = []\n    for i in range(iterations):\n        z = np.dot(X, w) + b\n        y_hat = sigmoid(z)\n        loss = compute_loss(y, y_hat)\n        losses.append(round(loss, 4))\n        dz = y_hat - y\n        dw = 1 / m * np.dot(X.T, dz)\n        db = 1 / m * np.sum(dz)\n        w = w - learning_rate * dw\n        b = b - learning_rate * db\n    optimized_params = np.append(w, b).ravel().tolist()\n    return (optimized_params, losses)"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    scores = np.dot(Q, K.T) / np.sqrt(Q.shape[-1])\n    scores = np.where(mask, scores, -1000000000.0)\n    attention_weights = np.exp(scores - np.max(scores, axis=-1, keepdims=True))\n    attention_weights /= np.sum(attention_weights, axis=-1, keepdims=True)\n    output = np.dot(attention_weights, V)\n    return output.tolist()"}
{"task_id": 108, "completion_id": 0, "solution": "from collections import Counter\nfrom math import log2\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    The function uses the Shannon entropy formula to calculate disorder.\n    \"\"\"\n    if len(apples) < 2:\n        return 0.0\n    n_apples = len(apples)\n    counts = Counter(apples)\n    entropy = -sum((count / n_apples * log2(count / n_apples) for count in counts.values()))\n    return round(entropy, 4)"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05) -> np.ndarray:\n    \"\"\"\n    Apply Layer Normalization to a given 3D tensor X, using scaling (gamma) and shifting (beta) parameters.\n    \n    :param X: A 3D numpy array with dimensions (batch_size, sequence_length, feature_dimensions).\n    :param gamma: Scaling parameter, 1D numpy array with dimensions (feature_dimensions,).\n    :param beta: Shifting parameter, 1D numpy array with dimensions (feature_dimensions,).\n    :param epsilon: Small constant to prevent division by zero, default to 1e-5.\n    :return: Layer normalized 3D numpy array, rounded to 5 decimal places.\n    \"\"\"\n    mean = X.mean(axis=-1, keepdims=True)\n    var = X.var(axis=-1, keepdims=True)\n    std = np.sqrt(var + epsilon)\n    X_normalized = (X - mean) / std\n    X_scaled_shifted = gamma * X_normalized + beta\n    return np.round(X_scaled_shifted, decimals=5).tolist()\nX = np.random.rand(2, 4, 3)\ngamma = np.random.rand(3)\nbeta = np.random.rand(3)"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef _stat(reference, candidate):\n    \"\"\"Calculate match statistics.\"\"\"\n    ref_counts = Counter(reference)\n    cand_counts = Counter(candidate)\n    matches = sum((ref_counts & cand_counts).values())\n    n_ref = len(reference)\n    n_cand = len(candidate)\n    return (matches, n_ref, n_cand)\ndef _ratio(matches, n_ref, n_cand):\n    \"\"\"Calculate precision and recall.\"\"\"\n    precision = matches / n_cand if n_cand > 0 else 0\n    recall = matches / n_ref if n_ref > 0 else 0\n    return (precision, recall)\ndef _fmean(precision, recall, beta):\n    \"\"\"Calculate beta-smoothed F-measure.\"\"\"\n    numerator = (1 + beta ** 2) * (precision * recall)\n    denominator = beta ** 2 * precision + recall\n    return numerator / denominator if denominator > 0 else 0\ndef _penalty(reference, candidate, gamma):\n    \"\"\"Calculate fragmentation penalty.\"\"\"\n    matches = 0\n    for i in range(len(reference)):\n        if i < len(candidate) and reference[i] == candidate[i]:\n            matches += 1\n    penalty = np.exp((1 - matches / len(reference)) * gamma)\n    return penalty\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    \"\"\"Calculate METEOR score.\"\"\"\n    (matches, n_ref, n_cand) = _stat(reference, candidate)\n    (precision, recall) = _ratio(matches, n_ref, n_cand)\n    fmean = _fmean(precision, recall, beta)\n    penalty = _penalty(reference, candidate, gamma)\n    score = (1 - alpha) * fmean + alpha * (1 - penalty)\n    return round(score, 3)\nreference = 'The cat sat on the mat'.split()\ncandidate = 'The cat is on mat'.split()"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    \"\"\"\n    Compute the Pointwise Mutual Information (PMI) for given event counts.\n    \n    Parameters:\n    joint_counts (int): The count of joint occurrence of both events.\n    total_counts_x (int): The total count occurrences of event x.\n    total_counts_y (int): The total count occurrences of event y.\n    total_samples (int): The total number of samples in the data set.\n    \n    Returns:\n    float: The computed PMI value rounded to three decimal places.\n    \"\"\"\n    expected_joint_probability = total_counts_x / total_samples * (total_counts_y / total_samples)\n    empirical_joint_probability = joint_counts / total_samples\n    pmi = np.log2(empirical_joint_probability / expected_joint_probability)\n    return round(pmi, 3)"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    \"\"\"\n    Perform Min-Max Normalization on a list of integers, scaling all values to the range [0, 1].\n    \"\"\"\n    if not x:\n        return []\n    min_val = min(x)\n    max_val = max(x)\n    if min_val == max_val:\n        return [0.0] * len(x)\n    normalized_values = [(float(i) - min_val) / (max_val - min_val) for i in x]\n    normalized_values = [round(val, 4) for val in normalized_values]\n    return normalized_values"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray) -> list:\n    \"\"\"\n    Implements a simple residual block with shortcut connection using NumPy.\n    \n    Parameters:\n    x (np.ndarray): 1D input array.\n    w1 (np.ndarray): Weight matrix for the first layer.\n    w2 (np.ndarray): Weight matrix for the second layer.\n    \n    Returns:\n    list: Output of the residual block as a list, rounded to 4 decimal places.\n    \"\"\"\n\n    def relu(z: np.ndarray) -> np.ndarray:\n        \"\"\"Apply ReLU activation function.\"\"\"\n        return np.maximum(0, z)\n    x = x.reshape(1, -1)\n    x1 = relu(x @ w1)\n    y = relu(x1 @ w2 + x)\n    return np.round(y, 4).tolist()[0]\nw1 = np.random.rand(10, 10)\nw2 = np.random.rand(10, 10)"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Perform global average pooling on the input array.\n    \n    :param x: A 3D numpy array of shape (height, width, channels) representing input feature maps\n    :return: A 1D numpy array of shape (channels,) with the average value of each feature map.\n    \"\"\"\n    averaged_maps = np.mean(x, axis=(0, 1))\n    return averaged_maps"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Applies Batch Normalization to a 4D numpy array in the BCHW format.\n    \n    Parameters:\n    X (np.ndarray): A 4D numpy array of shape (batch size, channels, height, width) representing a batch of images.\n    gamma (np.ndarray): Scale parameter of shape (channels,) to be applied after normalization.\n    beta (np.ndarray): Shift parameter of shape (channels,) to be applied after normalization.\n    epsilon (float): Small value used to prevent division by zero.\n    \n    Returns:\n    np.ndarray: Normalized 4D array rounded to 4 decimal places.\n    \"\"\"\n    mean = np.mean(X, axis=(0, 2, 3), keepdims=True)\n    var = np.var(X, axis=(0, 2, 3), keepdims=True)\n    X_norm = (X - mean) / np.sqrt(var + epsilon)\n    X_norm = X_norm * gamma + beta\n    return np.round(X_norm, decimals=4).tolist()"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    \"\"\"\n    Computes the derivative of a polynomial term of the form c * x^n at a point x.\n    \n    Parameters:\n    c (float): The coefficient of the term.\n    x (float): The point at which the derivative is to be evaluated.\n    n (float): The exponent of the term.\n    \n    Returns:\n    float: The value of the derivative, rounded to 4 decimal places.\n    \n    Example:\n    >>> poly_term_derivative(2.5, 4.0, 3.0)\n    120.0\n    \"\"\"\n    derivative = c * n * x ** (n - 1)\n    return round(derivative, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10) -> list[list[float]]:\n    \"\"\"\n    Calculates an orthonormal basis of the subspace spanned by the given list of 2D vectors using the Gram-Schmidt process.\n\n    :param vectors: A list of 2D vectors (example: [[1, 0], [0, 1]]).\n    :param tol: A tolerance value for identifying linear independence among vectors.\n    :return: A list of orthonormal vectors that form a basis for the same subspace as the input.\n    \"\"\"\n    np_vectors = np.array(vectors).T\n    (q, r) = np.linalg.qr(np_vectors)\n    cols_to_keep = [i for i in range(r.shape[1]) if np.abs(r[i, i]) > tol]\n    q = q[:, cols_to_keep]\n    orthonormal_b = q.T\n    orthonormal_b = [np.round(vector, 4).tolist() for vector in orthonormal_b]\n    return orthonormal_b"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    \"\"\"\n    Computes the cross product of two 3D vectors.\n    \n    :param a: A list or numpy array representing the first 3D vector.\n    :param b: A list or numpy array representing the second 3D vector.\n    :return: A numpy array representing the cross product, rounded to 4 decimal places.\n             The array is converted to a list using tolist().\n    \"\"\"\n    a_np = np.array(a)\n    b_np = np.array(b)\n    cross = np.cross(a_np, b_np)\n    return np.round(cross, 4).tolist()\na = [1, 2, 3]\nb = [4, 5, 6]"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    \"\"\"\n    Solves the system of linear equations Ax = b using Cramer's Rule.\n    \n    Parameters:\n        A (numpy.ndarray): A square coefficient matrix.\n        b (numpy.ndarray): The constant vector.\n        \n    Returns:\n        list: A list containing the solution vector x rounded to 4 decimal places or -1 if there is no unique solution.\n    \"\"\"\n    n = A.shape[0]\n    det_A = np.linalg.det(A)\n    if np.isclose(det_A, 0):\n        return -1\n    result = []\n    for i in range(n):\n        Ai = A.copy()\n        Ai[:, i] = b\n        det_Ai = np.linalg.det(Ai)\n        xi = det_Ai / det_A\n        result.append(xi)\n    result = [round(val, 4) for val in result]\n    return result"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    \"\"\"\n    Calculate the Bhattacharyya distance between two probability distributions.\n    If the distributions have different lengths or are empty, return 0.0.\n    The result is rounded to the nearest 4th decimal.\n    :param p: List representing a probability distribution\n    :param q: List representing another probability distribution\n    :return: Bhattacharyya distance rounded to 4 decimal places or 0.0 if inputs are invalid\n    \"\"\"\n    if not p or not q or len(p) != len(q):\n        return 0.0\n    bc = np.sum(np.sqrt(np.array(p) * np.array(q)))\n    bd = -np.log(bc)\n    return round(bd, 4)"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float] | int:\n    \"\"\"\n    Computes the element-wise sum of two vectors if they are of the same length.\n    Returns a new vector representing the sum or -1 if the vectors have incompatible dimensions.\n    \n    :param a: list of int or float representing a vector.\n    :param b: list of int or float representing another vector.\n    :return: A new list representing the element-wise sum of the input vectors or -1 if addition is not possible.\n    \"\"\"\n    if len(a) != len(b):\n        return -1\n    result = [elem_a + elem_b for (elem_a, elem_b) in zip(a, b)]\n    return result"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    (num_states, num_actions) = theta.shape\n    gradient = np.zeros_like(theta)\n    for episode in episodes:\n        states = np.array([step[0] for step in episode])\n        actions = np.array([step[1] for step in episode])\n        rewards = np.array([step[2] for step in episode])\n        returns = compute_return(rewards)\n        policies = compute_policy(theta, states)\n        for t in range(len(episode)):\n            (s, a, G) = (states[t], actions[t], returns[t])\n            prob_a = policies[t, a]\n            gradient[s, a] += G * (1 / prob_a)\n            for a_prime in range(num_actions):\n                if a_prime != a:\n                    gradient[s, a_prime] -= G * (1 / prob_a)\n    gradient /= len(episodes)\n    return np.round(gradient, 4).tolist()\ndef compute_policy(theta: np.ndarray, states: np.ndarray):\n    softmax_input = theta[states, :]\n    exp_theta = np.exp(softmax_input - np.max(softmax_input, axis=1, keepdims=True))\n    policies = exp_theta / np.sum(exp_theta, axis=1, keepdims=True)\n    return policies\ndef compute_return(rewards: np.ndarray):\n    returns = np.zeros_like(rewards)\n    for t in range(len(rewards)):\n        returns[t] = np.sum(rewards[t:])\n    return returns\ntheta = np.array([[0, 1, 2], [-1, 0, 1], [1, 2, -1]], dtype=np.float64)\nepisodes = [[(0, 1, 1.0), (1, 2, 1.0), (2, 1, 1.0)], [(0, 2, -1.0), (2, 0, 0.0)]]"}
{"task_id": 123, "completion_id": 0, "solution": "def compute_efficiency(n_experts, k_active, d_in, d_out):\n    \"\"\"\n    Calculate the computational cost savings of a MoE layer compared to a dense layer.\n    \n    Parameters:\n    - n_experts: Total number of experts in the MoE layer.\n    - k_active: Number of active experts.\n    - d_in: Dimension of the input.\n    - d_out: Dimension of the output.\n    \n    Returns:\n    - The percentage savings in FLOPs with the MoE layer compared to a dense layer, rounded to the nearest 1th decimal.\n    \"\"\"\n    dense_flops = 2 * d_in * d_out\n    moe_flops = 2 * k_active * d_in * d_out / n_experts\n    savings = (dense_flops - moe_flops) / dense_flops * 100.0\n    return round(savings, 1)\nn_experts = 128\nk_active = 4\nd_in = 1024\nd_out = 1024"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    \"\"\"\n    Implements the Noisy Top-K gating mechanism for MoE models.\n    \n    Args:\n    X (np.ndarray): Input matrix.\n    W_g (np.ndarray): Weight matrix for gating.\n    W_noise (np.ndarray): Weight matrix for noise.\n    N (np.ndarray): Pre-sampled noise matrix.\n    k (int): Sparsity constraint.\n    \n    Returns:\n    list: The gating probabilities for each input after applying noise and top-k selection, rounded to 4 decimal places.\n    \"\"\"\n    logits = np.dot(X, W_g) + N * W_noise\n    max_logits = np.max(logits, axis=1, keepdims=True)\n    numerator = np.exp(logits - max_logits)\n    probabilities = numerator / np.sum(numerator, axis=1, keepdims=True)\n    sorted_probabilities = np.sort(probabilities, axis=1)[:, ::-1]\n    topk_indices = np.argsort(probabilities, axis=1)[:, ::-1][:, :k]\n    mask = np.zeros(probabilities.shape, dtype=bool)\n    np.put_along_axis(mask, topk_indices, True, axis=1)\n    masked_probabilities = np.where(mask, sorted_probabilities[:, :k], 0)\n    row_sums = np.sum(masked_probabilities, axis=1)\n    normalized_probabilities = np.where(row_sums[:, None] != 0, masked_probabilities / row_sums[:, None], 0)\n    final_probabilities = np.round(normalized_probabilities, 4).tolist()\n    return final_probabilities"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    \"\"\"\n    Implements a Mixture-of-Experts layer using softmax gating and top-k routing.\n    \n    Parameters:\n    - x: Input tensor (batch_size, input_dim)\n    - We: Expert weight matrices (n_experts, input_dim, output_dim)\n    - Wg: Gating weight matrix (input_dim, n_experts)\n    - n_experts: Number of experts\n    - top_k: Number of top experts to consider in the mixture\n    \n    Returns:\n    - numpy.ndarray: Mixture-of-Experts output for each input in x\n    \"\"\"\n    gating_scores = np.dot(x, Wg)\n    gating_probs = np.exp(gating_scores - gating_scores.max(axis=-1, keepdims=True))\n    gating_probs /= gating_probs.sum(axis=-1, keepdims=True)\n    sort_indices = np.argsort(gating_probs, axis=-1)\n    top_k_experts = sort_indices[:, -top_k:]\n    output = np.zeros_like(x, dtype=np.float32)\n    for i in range(x.shape[0]):\n        top_probs = np.take_along_axis(gating_probs[i], top_k_experts[i], axis=-1)\n        top_probs /= top_probs.sum()\n        for (j, expert_idx) in enumerate(top_k_experts[i]):\n            output[i] += top_probs[j] * np.dot(x[i], We[expert_idx])\n    return np.round(output, decimals=4).tolist()"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    \"\"\"\n    Perform Group Normalization on a 4D input tensor.\n    Parameters:\n        X: numpy.ndarray, the input tensor of shape (B, C, H, W).\n        gamma: numpy.ndarray, the scale parameter of shape (C,).\n        beta: numpy.ndarray, the offset parameter of shape (C,).\n        num_groups: int, the number of groups to divide the channels into.\n        epsilon: float, a small value used to avoid division by zero.\n    Returns:\n        A numpy.ndarray that has the same shape as X, representing the output of Group Normalization.\n    \"\"\"\n    (B, C, H, W) = X.shape\n    G = num_groups\n    assert C % G == 0, 'Number of groups must divide number of channels'\n    x_group = X.reshape(B, G, -1)\n    mean = np.mean(x_group, axis=2, keepdims=True)\n    var = np.var(x_group, axis=2, keepdims=True)\n    x_norm = (x_group - mean) / np.sqrt(var + epsilon)\n    X_norm = x_norm.reshape(B, C, H, W)\n    X_out = gamma * X_norm + beta\n    assert X_out.shape == X.shape\n    return np.round(X_out, decimals=4).tolist()\ngamma = np.random.randn(C)\nbeta = np.random.randn(C)\nnum_groups = 3"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef df(x: float) -> float:\n    \"\"\"The derivative of the function f(x).\"\"\"\n    return 4 * x ** 3 - 9 * x ** 2\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n    \"\"\"\n    Uses gradient descent to find x where f(x) is minimum.\n    \n    Parameters:\n    - start_x: The initial position for the search.\n    - learning_rate: The step size for each gradient descent step.\n    - tolerance: The threshold difference between two consecutive x values declaring convergence.\n    - max_iters: Maximum number of iterations for the algorithm.\n    \n    Returns:\n    - The x value at which f(x) is minimum.\n    \"\"\"\n    x = start_x\n    for _ in range(max_iters):\n        prev_x = x\n        x -= learning_rate * df(prev_x)\n        if abs(x - prev_x) < tolerance:\n            break\n    return round(x, 4)\nstart_x = np.random.uniform(-10, 10)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    \"\"\"\n    Implement the Dynamic Tanh (DyT) transformation for a numpy array.\n    This transformation modifies the input based on DyT specific parameters\n    and returns a list of floats as the output.\n    \n    Parameters:\n    x (np.ndarray): The input numpy array.\n    alpha (float): The beta parameter used for scaling the input.\n    gamma (float): The gamma parameter used for scaling the tanh output.\n    beta (float): The beta parameter used for shifting the tanh output.\n    \n    Returns:\n    list[float]: The dynamic tanh activation results, rounded to 4 decimals and converted to a list.\n    \"\"\"\n    dyt_output = gamma * np.tanh(alpha * x) + beta\n    return [round(num, 4) for num in dyt_output.tolist()]"}
