{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    \"\"\"\n    Computes the dot product of a matrix 'a' and a vector 'b'. Returns the resulting vector as a list\n    if the operation is valid, or -1 if the matrix and vector dimensions are incompatible.\n    \"\"\"\n    if not a or len(a[0]) != len(b):\n        return -1\n    result = []\n    for row in a:\n        row_dot_product = sum((x * b[i] for (i, x) in enumerate(row)))\n        result.append(row_dot_product)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"\n    Computes the transpose of the given matrix.\n    \n    Parameters:\n    a (list of list of int/float): The input matrix.\n    \n    Returns:\n    list of list of int/float: The transpose of the input matrix.\n    \"\"\"\n    return [[a[j][i] for j in range(len(a))] for i in range(len(a[0]))]"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    \"\"\"\n    Reshapes the given matrix a into the specified new_shape if possible.\n    If the reshape operation cannot be performed, returns an empty list.\n    \n    :param a: Original matrix as a list of lists.\n    :param new_shape: A tuple indicating the new shape (rows, columns).\n    :return: The reshaped matrix as a list of lists, or an empty list if reshape is not possible.\n    \"\"\"\n    a_np = np.array(a)\n    if a_np.size == new_shape[0] * new_shape[1]:\n        reshaped_np = a_np.reshape(new_shape)\n        return reshaped_np.tolist()\n    else:\n        return []"}
{"task_id": 4, "completion_id": 0, "solution": "import numpy as np\ndef calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    \"\"\"\n    Calculate the mean of a matrix either by row or by column.\n    \n    Parameters:\n    - matrix: A list of lists of floats representing the matrix.\n    - mode: A string, either 'row' or 'column', specifying the mean calculation mode.\n    \n    Returns:\n    - A list of floats representing the means calculated according to the specified mode.\n    \"\"\"\n    np_matrix = np.array(matrix)\n    if mode == 'row':\n        means = np_matrix.mean(axis=1)\n    elif mode == 'column':\n        means = np_matrix.mean(axis=0)\n    else:\n        raise ValueError(\"Mode must be either 'row' or 'column'\")\n    return means.tolist()\nmatrix = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    \"\"\"\n    Multiplies each element of the given matrix by the scalar value and returns the resulting matrix.\n    \n    :param matrix: A list of lists representing the matrix, where each inner list is a row.\n    :param scalar: An integer or float representing the scalar value to multiply the matrix by.\n    :return: A new matrix (list of lists) with each element multiplied by the scalar.\n    \"\"\"\n    return [[element * scalar for element in row] for row in matrix]"}
{"task_id": 6, "completion_id": 0, "solution": "import numpy as np\ndef calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    \"\"\"\n    Calculate the eigenvalues of a 2x2 matrix and return them sorted from highest to lowest.\n    \n    :param matrix: A 2x2 matrix represented as a list of lists.\n    :return: A list of eigenvalues sorted from highest to lowest.\n    \"\"\"\n    np_matrix = np.array(matrix)\n    eigenvalues = np.linalg.eigvals(np_matrix)\n    sorted_eigenvalues = sorted(eigenvalues, reverse=True)\n    return sorted_eigenvalues"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"\n    Transforms matrix A using the operation T^{-1}AS, where T and S are invertible matrices.\n    If T or S are not invertible, returns -1.\n    \"\"\"\n    try:\n        A_np = np.array(A)\n        T_np = np.array(T)\n        S_np = np.array(S)\n        if np.linalg.det(T_np) == 0 or np.linalg.det(S_np) == 0:\n            return -1\n        T_inv = np.linalg.inv(T_np)\n        transformed_matrix = np.round(T_inv @ A_np @ S_np, 4)\n        return transformed_matrix.tolist()\n    except Exception as e:\n        return -1\nA = [[1, 2], [3, 4]]\nT = [[4, 3], [2, 1]]\nS = [[1, 2], [3, 4]]"}
{"task_id": 8, "completion_id": 0, "solution": "import numpy as np\ndef inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    \"\"\"\n    Calculate the inverse of a 2x2 matrix if it exists.\n    \n    Args:\n    matrix (list[list[float]]): A 2x2 matrix represented as a list of lists.\n    \n    Returns:\n    list[list[float]]: The inverse of the matrix if it is invertible, otherwise None.\n    \"\"\"\n    if len(matrix) != 2 or len(matrix[0]) != 2 or len(matrix[1]) != 2:\n        return None\n    det = matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]\n    if det == 0:\n        return None\n    inv_matrix = [[matrix[1][1] / det, -matrix[0][1] / det], [-matrix[1][0] / det, matrix[0][0] / det]]\n    return inv_matrix"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]] | int:\n    \"\"\"\n    Multiplies two matrices a and b.\n    Returns the resulting matrix if multiplication is possible, otherwise returns -1.\n    \"\"\"\n    if len(a[0]) != len(b):\n        return -1\n    result = [[0 for _ in range(len(b[0]))] for _ in range(len(a))]\n    for i in range(len(a)):\n        for j in range(len(b[0])):\n            for k in range(len(b)):\n                result[i][j] += a[i][k] * b[k][j]\n    return result"}
{"task_id": 10, "completion_id": 0, "solution": "import numpy as np\ndef calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    \"\"\"\n    Calculate the covariance matrix for a given set of vectors.\n    \n    Args:\n    vectors: A list of lists, where each inner list represents a feature with its observations.\n    \n    Returns:\n    A list of lists representing the covariance matrix.\n    \"\"\"\n    data = np.array(vectors)\n    covariance_matrix = np.cov(data, bias=True)\n    return covariance_matrix.tolist()"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    \"\"\"\n    Solves a system of linear equations using the Jacobi iterative method.\n    \n    Parameters:\n    A (np.ndarray): A square matrix representing the coefficients of the system of equations.\n    b (np.ndarray): A column vector representing the constants of the system of equations.\n    n (int): The number of iterations to perform.\n    \n    Returns:\n    list: The approximate solution vector x as a list, rounded to 4 decimal places.\n    \"\"\"\n    assert A.shape[0] == A.shape[1], 'Matrix A must be a square matrix'\n    assert A.shape[0] == b.shape[0], 'Matrix A and vector b dimensions do not match'\n    x = np.zeros_like(b, dtype=np.float64)\n    for _ in range(n):\n        x_new = np.zeros_like(x)\n        for i in range(A.shape[0]):\n            s1 = np.dot(A[i, :i], x[:i])\n            s2 = np.dot(A[i, i + 1:], x[i + 1:])\n            x_new[i] = (b[i] - s1 - s2) / A[i, i]\n        x = x_new\n        x = np.round(x, decimals=4)\n    return x.tolist()\nA = np.array([[4, 1, 2], [3, 5, 1], [1, 1, 3]], dtype=np.float64)\nb = np.array([4, 7, 3], dtype=np.float64)\nn = 25"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    \"\"\"\n    Approximate the singular values of a 2x2 matrix A using the eigenvalues\n    of A^T A. The singular values are returned as a tuple rounded to the nearest 4th decimal.\n    \n    :param A: A 2x2 numpy array\n    :return: A tuple containing the singular values of A\n    \"\"\"\n    ATA = np.dot(A.T, A)\n    eigenvalues = np.linalg.eigvals(ATA)\n    singular_values = np.sqrt(eigenvalues)\n    singular_values = np.sort(singular_values)[::-1]\n    singular_values_rounded = np.round(singular_values, 4)\n    return tuple(singular_values_rounded)\nA = np.array([[1, 2], [3, 4]])\nsingular_values = svd_2x2_singular_values(A)"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n    \"\"\"\n    Calculates the determinant of a 4x4 matrix using Laplace's Expansion.\n    \n    :param matrix: A 4x4 matrix represented as a list of lists.\n    :return: The determinant of the matrix.\n    \"\"\"\n\n    def determinant_3x3(sub_matrix: list[list[int | float]]) -> float:\n        \"\"\"\n        Calculates the determinant of a 3x3 matrix.\n        \n        :param sub_matrix: A 3x3 matrix represented as a list of lists.\n        :return: The determinant of the 3x3 matrix.\n        \"\"\"\n        return sub_matrix[0][0] * (sub_matrix[1][1] * sub_matrix[2][2] - sub_matrix[1][2] * sub_matrix[2][1]) - sub_matrix[0][1] * (sub_matrix[1][0] * sub_matrix[2][2] - sub_matrix[1][2] * sub_matrix[2][0]) + sub_matrix[0][2] * (sub_matrix[1][0] * sub_matrix[2][1] - sub_matrix[1][1] * sub_matrix[2][0])\n\n    def minor(matrix: list[list[int | float]], i: int, j: int) -> list[list[int | float]]:\n        \"\"\"\n        Returns the minor of the matrix by removing the ith row and jth column.\n        \n        :param matrix: The matrix from which to calculate the minor.\n        :param i: The row to remove.\n        :param j: The column to remove.\n        :return: The minor matrix.\n        \"\"\"\n        return [row[:j] + row[j + 1:] for row in matrix[:i] + matrix[i + 1:]]\n    det = 0\n    for col in range(4):\n        sign = (-1) ** (0 + col)\n        sub_det = determinant_3x3(minor(matrix, 0, col))\n        det += sign * matrix[0][col] * sub_det\n    return det"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    \"\"\"\n    Perform linear regression using the normal equation.\n    \n    Parameters:\n    - X: A list of lists of floats representing the features matrix.\n    - y: A list of floats representing the target vector.\n    \n    Returns:\n    - A list of floats representing the coefficients of the linear regression model.\n    \"\"\"\n    X_np = np.array(X)\n    y_np = np.array(y)\n    X_np = np.c_[np.ones(X_np.shape[0]), X_np]\n    theta = np.linalg.inv(X_np.T @ X_np) @ X_np.T @ y_np\n    theta_rounded = np.round(theta, decimals=4)\n    return theta_rounded.tolist()"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> list:\n    \"\"\"\n    Perform linear regression using gradient descent.\n    \n    Parameters:\n    X (np.ndarray): The input features with a column of ones for the intercept.\n    y (np.ndarray): The target values.\n    alpha (float): The learning rate.\n    iterations (int): The number of iterations to perform.\n    \n    Returns:\n    list: The coefficients of the linear regression model rounded to 4 decimal places.\n    \"\"\"\n    m = len(y)\n    theta = np.zeros(X.shape[1])\n    for _ in range(iterations):\n        predictions = np.dot(X, theta)\n        errors = predictions - y\n        gradient = np.dot(X.T, errors) / m\n        theta -= alpha * gradient\n    return np.round(theta, 4).tolist()"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    \"\"\"\n    Takes a 2D NumPy array and performs two types of feature scaling:\n    Standardization and Min-Max Normalization. Returns two 2D lists with\n    scaled values rounded to the nearest 4th decimal.\n    \"\"\"\n    standardized_data = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    min_vals = np.min(data, axis=0)\n    max_vals = np.max(data, axis=0)\n    normalized_data = (data - min_vals) / (max_vals - min_vals)\n    standardized_data = np.round(standardized_data, decimals=4).tolist()\n    normalized_data = np.round(normalized_data, decimals=4).tolist()\n    return (standardized_data, normalized_data)"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n    points_array = np.array(points)\n    centroids_array = np.array(initial_centroids)\n    for _ in range(max_iterations):\n        distances = np.sqrt(((points_array - centroids_array[:, np.newaxis]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=0)\n        new_centroids = np.array([points_array[labels == i].mean(axis=0) for i in range(k)])\n        if np.all(centroids_array == new_centroids):\n            break\n        centroids_array = new_centroids\n    final_centroids = [tuple(np.round(centroid, 4)) for centroid in centroids_array]\n    return final_centroids\npoints = [(1.0, 2.0), (1.5, 1.8), (5.0, 8.0), (8.0, 8.0), (1.0, 0.6)]\nk = 2\ninitial_centroids = [(1.0, 2.0), (8.0, 8.0)]\nmax_iterations = 100"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    \"\"\"\n    Splits the dataset into k folds for cross-validation and returns the train-test splits.\n    \n    :param X: np.ndarray, feature matrix of the dataset.\n    :param y: np.ndarray, labels of the dataset.\n    :param k: int, number of folds for cross-validation.\n    :param shuffle: bool, whether to shuffle the dataset before splitting.\n    :param random_seed: int, seed for random number generator.\n    :return: list of tuples, each tuple contains train and test indices for each fold.\n    \"\"\"\n    np.random.seed(random_seed)\n    n_samples = X.shape[0]\n    indices = np.arange(n_samples)\n    if shuffle:\n        np.random.shuffle(indices)\n    fold_size = n_samples // k\n    remainder = n_samples % k\n    start_idx = 0\n    splits = []\n    for i in range(k):\n        end_idx = start_idx + fold_size + (1 if i < remainder else 0)\n        test_idx = indices[start_idx:end_idx]\n        train_idx = np.concatenate([indices[:start_idx], indices[end_idx:]])\n        splits.append((train_idx, test_idx))\n        start_idx = end_idx\n    return splits"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"\n    Performs Principal Component Analysis (PCA) on a given dataset.\n    \n    Parameters:\n    - data: A 2D NumPy array where each row is a data sample and each column is a feature.\n    - k: The number of principal components to return.\n    \n    Returns:\n    A list of lists, where each inner list represents a principal component (eigenvector) and the components are sorted by their corresponding eigenvalues in descending order.\n    \"\"\"\n    standardized_data = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    covariance_matrix = np.cov(standardized_data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(covariance_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    principal_components = sorted_eigenvectors[:, :k]\n    principal_components_list = [list(map(lambda x: round(x, 4), pc)) for pc in principal_components.T]\n    return principal_components_list"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n    if all((examples[0][target_attr] == example[target_attr] for example in examples)):\n        return examples[0][target_attr]\n    if not attributes:\n        return Counter((example[target_attr] for example in examples)).most_common(1)[0][0]\n    best_attr = max(attributes, key=lambda attr: information_gain(examples, attr, target_attr))\n    tree = {best_attr: {}}\n    for value in set((example[best_attr] for example in examples)):\n        subset = [example for example in examples if example[best_attr] == value]\n        if not subset:\n            tree[best_attr][value] = Counter((example[target_attr] for example in examples)).most_common(1)[0][0]\n        else:\n            subtree = learn_decision_tree(subset, [attr for attr in attributes if attr != best_attr], target_attr)\n            tree[best_attr][value] = subtree\n    return tree\ndef entropy(examples: list[dict], target_attr: str) -> float:\n    \"\"\"Calculate the entropy of the examples based on the target attribute.\"\"\"\n    counts = Counter((example[target_attr] for example in examples))\n    total = len(examples)\n    return -sum((count / total * math.log2(count / total) for count in counts.values()))\ndef information_gain(examples: list[dict], attribute: str, target_attr: str) -> float:\n    \"\"\"Calculate the information gain of splitting the examples by the attribute.\"\"\"\n    total_entropy = entropy(examples, target_attr)\n    values = set((example[attribute] for example in examples))\n    weighted_entropy = sum((sum((1 for example in examples if example[attribute] == value)) / len(examples) * entropy([example for example in examples if example[attribute] == value], target_attr) for value in values))\n    return total_entropy - weighted_entropy\nexamples = [{'outlook': 'sunny', 'temperature': 'hot', 'humidity': 'high', 'wind': 'weak', 'play': 'no'}, {'outlook': 'sunny', 'temperature': 'hot', 'humidity': 'high', 'wind': 'strong', 'play': 'no'}, {'outlook': 'overcast', 'temperature': 'hot', 'humidity': 'high', 'wind': 'weak', 'play': 'yes'}, {'outlook': 'rain', 'temperature': 'mild', 'humidity': 'high', 'wind': 'weak', 'play': 'yes'}, {'outlook': 'rain', 'temperature': 'cool', 'humidity': 'normal', 'wind': 'weak', 'play': 'yes'}, {'outlook': 'rain', 'temperature': 'cool', 'humidity': 'normal', 'wind': 'strong', 'play': 'no'}, {'outlook': 'overcast', 'temperature': 'cool', 'humidity': 'normal', 'wind': 'strong', 'play': 'yes'}, {'outlook': 'sunny', 'temperature': 'mild', 'humidity': 'high', 'wind': 'weak', 'play': 'no'}, {'outlook': 'sunny', 'temperature': 'cool', 'humidity': 'normal', 'wind': 'weak', 'play': 'yes'}, {'outlook': 'rain', 'temperature': 'mild', 'humidity': 'normal', 'wind': 'weak', 'play': 'yes'}, {'outlook': 'sunny', 'temperature': 'mild', 'humidity': 'normal', 'wind': 'strong', 'play': 'yes'}, {'outlook': 'overcast', 'temperature': 'mild', 'humidity': 'high', 'wind': 'strong', 'play': 'yes'}, {'outlook': 'overcast', 'temperature': 'hot', 'humidity': 'normal', 'wind': 'weak', 'play': 'yes'}, {'outlook': 'rain', 'temperature': 'mild', 'humidity': 'high', 'wind': 'strong', 'play': 'no'}]\nattributes = ['outlook', 'temperature', 'humidity', 'wind']\ntarget_attr = 'play'\ntree = learn_decision_tree(examples, attributes, target_attr)"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    \"\"\"\n    Implementation of a deterministic version of the Pegasos algorithm for training a kernel SVM.\n    \n    Parameters:\n    data (np.ndarray): The input data matrix.\n    labels (np.ndarray): The labels for the input data.\n    kernel (str): The kernel to use, either 'linear' or 'RBF'.\n    lambda_val (float): The regularization parameter.\n    iterations (int): The number of iterations to run the algorithm.\n    sigma (float): The bandwidth parameter for the RBF kernel.\n    \n    Returns:\n    (list, float): A list of alpha coefficients and the bias term.\n    \"\"\"\n    alphas = np.zeros(data.shape[0])\n    if kernel == 'linear':\n        kernel_matrix = np.dot(data, data.T)\n    elif kernel == 'RBF':\n        pairwise_dists = np.sum(data ** 2, axis=1).reshape(-1, 1) + np.sum(data ** 2, axis=1) - 2 * np.dot(data, data.T)\n        kernel_matrix = np.exp(-pairwise_dists / (2 * sigma ** 2))\n    else:\n        raise ValueError(\"Kernel must be either 'linear' or 'RBF'.\")\n    for t in range(1, iterations + 1):\n        eta_t = 1.0 / (lambda_val * t)\n        predictions = np.dot(kernel_matrix * np.outer(labels, labels), alphas)\n        gradient = np.where(labels * predictions < 1, -labels, 0)\n        alphas -= eta_t * (np.dot(kernel_matrix * np.outer(gradient, labels), alphas) + lambda_val * alphas)\n        alphas = np.where(alphas > 0, alphas, 0)\n    support_indices = np.where(alphas > 0)[0]\n    bias = np.mean(labels[support_indices] - np.dot(kernel_matrix[support_indices, :][:, support_indices], alphas[support_indices]))\n    return (alphas.tolist(), round(float(bias), 4))"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    \"\"\"\n    Computes the sigmoid of the input z.\n    \n    Args:\n    z (float): The input value to the sigmoid function.\n    \n    Returns:\n    float: The output of the sigmoid function, rounded to four decimal places.\n    \"\"\"\n    return round(1 / (1 + math.exp(-z)), 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    \"\"\"\n    Computes the softmax of the given list of scores.\n    \n    Args:\n    scores (list of float): The list of scores to compute the softmax for.\n    \n    Returns:\n    list of float: The softmax values of the given scores, each rounded to 4 decimal places.\n    \"\"\"\n    exp_scores = [math.exp(score) for score in scores]\n    sum_exp_scores = sum(exp_scores)\n    softmax_scores = [round(score / sum_exp_scores, 4) for score in exp_scores]\n    return softmax_scores"}
{"task_id": 24, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    \"\"\"\n    Simulates a single neuron with a sigmoid activation function for binary classification.\n    \n    :param features: List of feature vectors for each example.\n    :param labels: List of true binary labels for each example.\n    :param weights: List of weights for each feature.\n    :param bias: Bias term for the neuron.\n    :return: A tuple containing a list of predicted probabilities and the mean squared error.\n    \"\"\"\n\n    def sigmoid(x):\n        return 1 / (1 + math.exp(-x))\n    predictions = []\n    for feature_vector in features:\n        weighted_sum = sum((w * f for (w, f) in zip(weights, feature_vector))) + bias\n        prediction = sigmoid(weighted_sum)\n        predictions.append(prediction)\n    mse = sum(((p - l) ** 2 for (p, l) in zip(predictions, labels))) / len(labels)\n    predictions_rounded = [round(p, 4) for p in predictions]\n    mse_rounded = round(mse, 4)\n    return (predictions_rounded, mse_rounded)\nfeatures = [[0.5, 0.3], [0.1, 0.7], [0.2, 0.4]]\nlabels = [1, 0, 1]\nweights = [0.8, 0.2]\nbias = 0.1"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\ndef sigmoid_derivative(x):\n    return x * (1 - x)\ndef mse_loss(y_true, y_pred):\n    return np.mean((y_true - y_pred) ** 2)\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    weights = initial_weights\n    bias = initial_bias\n    mse_values = []\n    for _ in range(epochs):\n        linear_output = np.dot(features, weights) + bias\n        predictions = sigmoid(linear_output)\n        mse = mse_loss(labels, predictions)\n        mse_values.append(round(mse, 4))\n        error = predictions - labels\n        derivative = sigmoid_derivative(predictions)\n        gradient = error * derivative\n        weights_gradient = np.dot(features.T, gradient)\n        bias_gradient = np.sum(gradient)\n        weights -= learning_rate * weights_gradient\n        bias -= learning_rate * bias_gradient\n    return (weights.tolist(), round(bias, 4), mse_values)\nfeatures = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\nlabels = np.array([0, 1, 1, 0])\ninitial_weights = np.array([0.5, -0.5])\ninitial_bias = 0.0\nlearning_rate = 0.1\nepochs = 1000"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __repr__(self):\n        return f'Value(data={self.data})'\n\n    def __add__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data + other.data, (self, other), '+')\n\n        def _backward():\n            self.grad += out.grad\n            other.grad += out.grad\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data * other.data, (self, other), '*')\n\n        def _backward():\n            self.grad += other.data * out.grad\n            other.grad += self.data * out.grad\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')\n\n        def _backward():\n            self.grad += (out.data > 0) * out.grad\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1\n        for node in reversed(topo):\n            node._backward()"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    \"\"\"\n    Computes the transformation matrix P from basis B to C for R^3.\n    \n    Parameters:\n    B (list of lists of int): Basis vectors in basis B.\n    C (list of lists of int): Basis vectors in basis C.\n    \n    Returns:\n    list of lists of float: The transformation matrix P from basis B to C.\n    \"\"\"\n    B_np = np.array(B)\n    C_np = np.array(C)\n    C_inv = np.linalg.inv(C_np)\n    P = C_inv @ B_np\n    P_rounded = np.round(P, decimals=4).tolist()\n    return P_rounded\nB = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\nC = [[1, 1, 0], [0, 1, 1], [1, 0, 1]]"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    \"\"\"\n    Computes the SVD of a 2x2 matrix A using eigendecomposition of A^T A.\n    \n    Parameters:\n    A (np.ndarray): A 2x2 numpy array.\n    \n    Returns:\n    tuple: A tuple containing U, S, and V matrices rounded to 4 decimal places.\n    \"\"\"\n    ATA = np.dot(A.T, A)\n    (eigenvalues, eigenvectors) = np.linalg.eig(ATA)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[sorted_indices]\n    eigenvectors = eigenvectors[:, sorted_indices]\n    S = np.sqrt(eigenvalues)\n    S = np.diag(S)\n    V = eigenvectors\n    U = np.zeros_like(A)\n    for i in range(2):\n        if S[i, i] != 0:\n            U[:, i] = np.dot(A, V[:, i]) / S[i, i]\n    if np.linalg.det(U) < 0:\n        U[:, 1] = -U[:, 1]\n    U = np.round(U, 4).tolist()\n    S = np.round(S, 4).tolist()\n    V = np.round(V, 4).tolist()\n    return (U, S, V)\nA = np.array([[1, 2], [3, 4]])"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    \"\"\"\n    Randomly shuffle the samples in two numpy arrays, X and y, maintaining the corresponding order.\n    \n    :param X: numpy array, first array to be shuffled.\n    :param y: numpy array, second array to be shuffled.\n    :param seed: Optional, the seed for random number generator for reproducibility.\n    :return: Two shuffled numpy arrays. The arrays are shuffled in the same way to maintain the correspondence between them.\n    \"\"\"\n    if not isinstance(X, np.ndarray) or not isinstance(y, np.ndarray):\n        raise ValueError('X and y must be numpy arrays')\n    if X.shape[0] != y.shape[0]:\n        raise ValueError('X and y must have the same number of samples')\n    np.random.seed(seed)\n    permutation_indices = np.random.permutation(X.shape[0])\n    shuffled_X = X[permutation_indices]\n    shuffled_y = y[permutation_indices]\n    return (shuffled_X.tolist(), shuffled_y.tolist())\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([7, 8, 9])"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    \"\"\"\n    Creates a batch iterator that yields batches of X and optionally y.\n    \n    Parameters:\n    X (np.ndarray): The input data.\n    y (np.ndarray, optional): The target data. Defaults to None.\n    batch_size (int): The size of each batch. Defaults to 64.\n    \n    Yields:\n    tuple or list: A tuple of (batch_X, batch_y) if y is not None, otherwise a list batch_X.\n    \"\"\"\n    X = np.array(X)\n    n_samples = X.shape[0]\n    if y is not None:\n        y = np.array(y)\n        assert X.shape[0] == y.shape[0], 'X and y must have the same number of samples'\n    for i in range(0, n_samples, batch_size):\n        batch_X = X[i:i + batch_size].tolist()\n        if y is not None:\n            batch_y = y[i:i + batch_size].tolist()\n            yield (batch_X, batch_y)\n        else:\n            yield batch_X"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    \"\"\"\n    Divides a dataset based on whether the value of a specified feature is greater than or equal to a given threshold.\n    \n    :param X: numpy.ndarray, the dataset to be divided.\n    :param feature_i: int, the index of the feature to use for dividing the dataset.\n    :param threshold: float, the threshold value to compare the feature values against.\n    :return: tuple of two lists, the first list contains samples where the feature value is >= threshold,\n             and the second list contains samples where the feature value is < threshold.\n    \"\"\"\n    X = np.array(X)\n    feature_values = X[:, feature_i]\n    above_threshold = X[feature_values >= threshold].tolist()\n    below_threshold = X[feature_values < threshold].tolist()\n    return (above_threshold, below_threshold)"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    \"\"\"\n    Generate polynomial and interaction features.\n    \n    Parameters:\n    X : np.ndarray\n        The input samples with shape (n_samples, n_features).\n    degree : int\n        The degree of the polynomial features.\n    \n    Returns:\n    np.ndarray\n        The matrix of features, where columns are powers of the original features.\n    \"\"\"\n    if X.ndim == 1:\n        X = X[:, np.newaxis]\n    (n_samples, n_features) = X.shape\n    indices = np.arange(n_features)\n    combinations = [combinations_with_replacement(indices, i) for i in range(0, degree + 1)]\n    flat_combinations = [item for sublist in combinations for item in sublist]\n    n_output_features = len(flat_combinations)\n    X_new = np.empty((n_samples, n_output_features))\n    for (i, index_combination) in enumerate(flat_combinations):\n        X_new[:, i] = np.prod(X[:, index_combination], axis=1)\n    return X_new.tolist()\nX = np.array([[2, 3], [4, 5]])\ndegree = 2"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    np.random.seed(seed)\n    subsets = []\n    n_samples = X.shape[0]\n    for _ in range(n_subsets):\n        if replacements:\n            indices = np.random.choice(n_samples, n_samples, replace=True)\n        else:\n            indices = np.random.choice(n_samples, n_samples, replace=False)\n        X_subset = X[indices]\n        y_subset = y[indices]\n        subsets.append((X_subset.tolist(), y_subset.tolist()))\n    return subsets"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    \"\"\"\n    Perform one-hot encoding on a 1D numpy array of integer values.\n    \n    Parameters:\n    x (np.array): 1D numpy array of integer values.\n    n_col (int, optional): Number of columns for the one-hot encoded array. If not provided, it will be determined from the input array.\n    \n    Returns:\n    list: A python list of one-hot encoded values.\n    \"\"\"\n    if n_col is None:\n        n_col = np.max(x) + 1\n    one_hot = np.eye(n_col)[x]\n    return one_hot.tolist()"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    \"\"\"\n    Converts a 1D numpy array into a diagonal matrix.\n    \n    Args:\n    x (np.array): A 1D numpy array.\n    \n    Returns:\n    list: A 2D list representing the diagonal matrix.\n    \"\"\"\n    x = np.array(x)\n    diagonal_matrix = np.diag(x)\n    return diagonal_matrix.tolist()\nx = np.array([1, 2, 3])"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    \"\"\"\n    Calculate the accuracy score given true labels and predicted labels.\n    \n    Parameters:\n    y_true (numpy.ndarray): An array of true labels.\n    y_pred (numpy.ndarray): An array of predicted labels.\n    \n    Returns:\n    float: The accuracy score, rounded to 4 decimal places.\n    \"\"\"\n    if not (isinstance(y_true, np.ndarray) and isinstance(y_pred, np.ndarray)):\n        raise ValueError('y_true and y_pred must be numpy arrays')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('y_true and y_pred must have the same shape')\n    accuracy = np.mean(y_true == y_pred)\n    return round(accuracy, 4)"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    \"\"\"\n    Calculate the correlation matrix for a given dataset.\n    \n    Parameters:\n    X (numpy.ndarray): A 2D numpy array.\n    Y (numpy.ndarray, optional): A 2D numpy array. If not provided, Y is set to X.\n    \n    Returns:\n    list: A 2D list representing the correlation matrix, rounded to 4 decimal places.\n    \"\"\"\n    if Y is None:\n        Y = X\n    mean_X = np.mean(X, axis=0)\n    mean_Y = np.mean(Y, axis=0)\n    X_zero_mean = X - mean_X\n    Y_zero_mean = Y - mean_Y\n    cov_matrix = np.dot(X_zero_mean.T, Y_zero_mean)\n    std_X = np.std(X, axis=0, ddof=0)\n    std_Y = np.std(Y, axis=0, ddof=0)\n    std_outer_product = np.outer(std_X, std_Y)\n    correlation_matrix = cov_matrix / (std_outer_product + 1e-10)\n    return np.round(correlation_matrix, 4).tolist()"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_fit(X, y, n_clf):\n    (n_samples, n_features) = X.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    classifiers = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_clf = None\n        for feature in range(n_features):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                pred = np.ones(y.shape)\n                pred[X[:, feature] < threshold] = -1\n                error = np.sum(weights[y != pred])\n                if error < min_error:\n                    min_error = error\n                    best_clf = {'feature': feature, 'threshold': threshold, 'prediction': pred.copy()}\n        alpha = 0.5 * np.log((1 - min_error) / min_error)\n        best_clf['alpha'] = alpha\n        weights *= np.exp(-alpha * y * best_clf['prediction'])\n        weights /= np.sum(weights)\n        classifiers.append(best_clf)\n    return classifiers"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list):\n    \"\"\"\n    Computes the log-softmax of a given list of scores.\n    \n    The log-softmax is computed as:\n    log_softmax(i) = log(exp(scores[i]) / sum_j(exp(scores[j])))\n    \n    This function ensures numerical stability by subtracting the max score\n    from all scores before applying the log-softmax formula.\n    \n    Parameters:\n    - scores (list): A list of scores.\n    \n    Returns:\n    - list: A list of log-softmax values, rounded to 4 decimal places.\n    \"\"\"\n    scores = np.array(scores)\n    max_score = np.max(scores)\n    scores -= max_score\n    exp_scores = np.exp(scores)\n    sum_exp_scores = np.sum(exp_scores)\n    log_softmax_scores = scores - np.log(sum_exp_scores)\n    return [round(score, 4) for score in log_softmax_scores.tolist()]\nscores = [1.0, 2.0, 3.0, 4.0, 1.0, 2.0, 3.0]"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport math\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.optimizer_W = None\n        self.optimizer_w0 = None\n\n    def initialize(self, optimizer):\n        limit = 1 / math.sqrt(self.input_shape[0])\n        self.W = np.random.uniform(-limit, limit, (self.input_shape[0], self.n_units))\n        self.w0 = np.zeros((1, self.n_units))\n        self.optimizer_W = copy.deepcopy(optimizer)\n        self.optimizer_w0 = copy.deepcopy(optimizer)\n\n    def parameters(self):\n        return np.prod(self.W.shape) + np.prod(self.w0.shape)\n\n    def forward_pass(self, X, training):\n        self.layer_input = X\n        return X.dot(self.W) + self.w0\n\n    def backward_pass(self, accum_grad):\n        w0_grad = np.sum(accum_grad, axis=0, keepdims=True)\n        W_grad = self.layer_input.T.dot(accum_grad)\n        self.W = self.optimizer_W.update(self.W, W_grad)\n        self.w0 = self.optimizer_w0.update(self.w0, w0_grad)\n        return accum_grad.dot(self.W.T)\n\n    def output_shape(self):\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    \"\"\"\n    Applies a 2D convolution operation on the input matrix using the given kernel, padding, and stride.\n    \n    Parameters:\n    input_matrix (np.ndarray): The input matrix on which the convolution will be applied.\n    kernel (np.ndarray): The convolutional kernel.\n    padding (int): The padding to be applied to the input matrix.\n    stride (int): The stride for the convolution operation.\n    \n    Returns:\n    list: The result of the convolution operation as a list.\n    \"\"\"\n    padded_input = np.pad(input_matrix, padding, mode='constant')\n    (input_height, input_width) = input_matrix.shape\n    (kernel_height, kernel_width) = kernel.shape\n    output_height = (input_height + 2 * padding - kernel_height) // stride + 1\n    output_width = (input_width + 2 * padding - kernel_width) // stride + 1\n    output = np.zeros((output_height, output_width))\n    for y in range(0, output_height):\n        for x in range(0, output_width):\n            output[y, x] = np.sum(padded_input[y * stride:y * stride + kernel_height, x * stride:x * stride + kernel_width] * kernel)\n    output = np.round(output, 4)\n    return output.tolist()\ninput_matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nkernel = np.array([[1, 0], [0, 1]])\npadding = 1\nstride = 1"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    \"\"\"\n    Implements the Rectified Linear Unit (ReLU) activation function.\n    \n    Parameters:\n    z (float): A float number input to the ReLU function.\n    \n    Returns:\n    float: The output of the ReLU function, which is z if z > 0, otherwise 0.\n    \"\"\"\n    return max(0, z)"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    \"\"\"\n    Computes the Ridge Regression loss function given the feature matrix X, \n    coefficients w, true labels y_true, and regularization parameter alpha.\n    The Ridge loss is the sum of the Mean Squared Error (MSE) and the \n    regularization term (alpha * sum of squares of coefficients).\n    \n    Parameters:\n    X (np.ndarray): 2D array representing the feature matrix.\n    w (np.ndarray): 1D array representing the coefficients.\n    y_true (np.ndarray): 1D array representing the true labels.\n    alpha (float): Regularization parameter.\n    \n    Returns:\n    float: The Ridge loss value.\n    \"\"\"\n    y_pred = X @ w\n    mse = np.mean((y_true - y_pred) ** 2)\n    reg_term = alpha * np.sum(w ** 2)\n    loss = mse + reg_term\n    return round(loss, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float:\n    \"\"\"\n    Implements the Leaky Rectified Linear Unit (Leaky ReLU) activation function.\n    \n    Parameters:\n    z (float): The input value to the Leaky ReLU function.\n    alpha (float): The slope for negative inputs. Defaults to 0.01.\n    \n    Returns:\n    float: The output of the Leaky ReLU function.\n    \"\"\"\n    return max(alpha * z, z)"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    \"\"\"\n    Computes the linear kernel between two vectors x1 and x2.\n    \n    The linear kernel is defined as the dot product of the two vectors.\n    \n    Parameters:\n    x1 (np.array): The first input vector.\n    x2 (np.array): The second input vector.\n    \n    Returns:\n    float: The computed linear kernel value.\n    \n    Raises:\n    ValueError: If the input vectors are not of the same length.\n    \"\"\"\n    if len(x1) != len(x2):\n        raise ValueError('Input vectors must be of the same length.')\n    return np.dot(x1, x2)"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    \"\"\"\n    Calculate the precision score given true labels and predicted labels.\n    \n    Parameters:\n    y_true (numpy.ndarray): An array of true binary labels.\n    y_pred (numpy.ndarray): An array of predicted binary labels.\n    \n    Returns:\n    float: The precision score.\n    \"\"\"\n    if y_true.shape != y_pred.shape:\n        raise ValueError('y_true and y_pred must have the same shape')\n    true_positives = np.sum((y_true == 1) & (y_pred == 1))\n    predicted_positives = np.sum(y_pred == 1)\n    if predicted_positives == 0:\n        return 1.0\n    precision_score = true_positives / predicted_positives\n    return precision_score\ny_true = np.array([1, 0, 1, 1, 0, 1])\ny_pred = np.array([1, 1, 1, 0, 0, 1])"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    \"\"\"\n    Perform gradient descent for linear regression using MSE loss.\n    \n    :param X: numpy array of shape (n_samples, n_features) containing the input data\n    :param y: numpy array of shape (n_samples,) containing the target values\n    :param weights: numpy array of shape (n_features,) containing the initial weights\n    :param learning_rate: float, the learning rate for the gradient descent\n    :param n_iterations: int, the number of iterations to perform\n    :param batch_size: int, the size of the batch for mini-batch gradient descent\n    :param method: str, the type of gradient descent to perform ('batch', 'stochastic', 'mini-batch')\n    :return: numpy array of shape (n_features,) containing the final weights\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    weights = np.array(weights, dtype=np.float64)\n    for iteration in range(n_iterations):\n        if method == 'stochastic':\n            for i in range(n_samples):\n                x_i = X[i:i + 1]\n                y_i = y[i:i + 1]\n                prediction = np.dot(x_i, weights)\n                error = prediction - y_i\n                gradient = 2 * np.dot(x_i.T, error) / len(x_i)\n                weights -= learning_rate * gradient\n        elif method == 'mini-batch':\n            for i in range(0, n_samples, batch_size):\n                x_i = X[i:i + batch_size]\n                y_i = y[i:i + batch_size]\n                prediction = np.dot(x_i, weights)\n                error = prediction - y_i\n                gradient = 2 * np.dot(x_i.T, error) / len(x_i)\n                weights -= learning_rate * gradient\n        elif method == 'batch':\n            prediction = np.dot(X, weights)\n            error = prediction - y\n            gradient = 2 * np.dot(X.T, error) / n_samples\n            weights -= learning_rate * gradient\n    return np.round(weights, decimals=4).tolist()\nX = np.array([[1, 1], [1, 2], [2, 2], [2, 3]])\ny = np.dot(X, np.array([1, 2])) + 3\nweights = np.array([0.0, 0.0])\nlearning_rate = 0.01\nn_iterations = 1000\nbatch_size = 2\nmethod = 'mini-batch'"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    \"\"\"\n    Converts the given matrix to its Reduced Row Echelon Form (RREF).\n    \n    Parameters:\n    matrix (list of lists): The input matrix to be converted to RREF.\n    \n    Returns:\n    list of lists: The RREF of the input matrix.\n    \"\"\"\n    mat = np.array(matrix, dtype=float)\n    (rows, cols) = mat.shape\n    lead = 0\n    for r in range(rows):\n        if cols <= lead:\n            return mat.tolist()\n        i = r\n        while mat[i, lead] == 0:\n            i += 1\n            if i == rows:\n                i = r\n                lead += 1\n                if cols == lead:\n                    return mat.tolist()\n        mat[[i, r]] = mat[[r, i]]\n        pivot = mat[r, lead]\n        mat[r] = mat[r] / pivot\n        for i in range(rows):\n            if i != r:\n                mat[i] = mat[i] - mat[i, lead] * mat[r]\n        lead += 1\n    return mat.tolist()"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=1000):\n    \"\"\"\n    Implements the Adam optimization algorithm to minimize the function f.\n    \n    Parameters:\n    f (function): The objective function to be optimized.\n    grad (function): Function that computes the gradient of f.\n    x0 (np.array): Initial parameter values.\n    learning_rate (float): The step size.\n    beta1 (float): Exponential decay rate for the first moment estimates.\n    beta2 (float): Exponential decay rate for the second moment estimates.\n    epsilon (float): A small constant for numerical stability.\n    num_iterations (int): Number of iterations to run the optimizer.\n    \n    Returns:\n    list: Optimized parameters.\n    \"\"\"\n    m = np.zeros_like(x0)\n    v = np.zeros_like(x0)\n    t = 0\n    x = x0\n    for i in range(num_iterations):\n        t += 1\n        g = grad(x)\n        m = beta1 * m + (1 - beta1) * g\n        v = beta2 * v + (1 - beta2) * g ** 2\n        m_hat = m / (1 - beta1 ** t)\n        v_hat = v / (1 - beta2 ** t)\n        x -= learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    return np.round(x, 4).tolist()"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    \"\"\"\n    Implements Lasso Regression using gradient descent with L1 regularization.\n    \n    Parameters:\n    - X: np.array, feature matrix.\n    - y: np.array, target vector.\n    - alpha: float, regularization strength.\n    - learning_rate: float, learning rate for gradient descent.\n    - max_iter: int, maximum number of iterations.\n    - tol: float, tolerance for stopping criteria.\n    \n    Returns:\n    - weights: list, learned weights.\n    - bias: float, learned bias.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    weights = np.zeros(n_features)\n    bias = 0\n    prev_cost = np.inf\n    for _ in range(max_iter):\n        y_pred = np.dot(X, weights) + bias\n        dw = -(2 * np.dot(X.T, y - y_pred) + alpha * np.sign(weights)) / n_samples\n        db = -2 * np.sum(y - y_pred) / n_samples\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n        cost = 1 / (2 * n_samples) * np.sum((y - y_pred) ** 2) + alpha / (2 * n_samples) * np.sum(np.abs(weights))\n        if np.abs(prev_cost - cost) < tol:\n            break\n        prev_cost = cost\n    return (weights.round(4).tolist(), round(bias, 4))"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    \"\"\"\n    Calculates the Optimal String Alignment (OSA) distance between two strings.\n    \n    Parameters:\n    source (str): The source string.\n    target (str): The target string.\n    \n    Returns:\n    int: The OSA distance between the source and target strings.\n    \"\"\"\n    len_source = len(source)\n    len_target = len(target)\n    dp = np.zeros((len_source + 1, len_target + 1), dtype=int)\n    for i in range(len_source + 1):\n        dp[i][0] = i\n    for j in range(len_target + 1):\n        dp[0][j] = j\n    for i in range(1, len_source + 1):\n        for j in range(1, len_target + 1):\n            if source[i - 1] == target[j - 1]:\n                cost = 0\n            else:\n                cost = 1\n            dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + cost)\n            if i > 1 and j > 1 and (source[i - 1] == target[j - 2]) and (source[i - 2] == target[j - 1]):\n                dp[i][j] = min(dp[i][j], dp[i - 2][j - 2] + cost)\n    return dp[len_source][len_target]\nsource = 'caper'\ntarget = 'acer'"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    \"\"\"\n    Calculate the recall metric for binary classification.\n    \n    Parameters:\n    - y_true: List[int], true binary labels.\n    - y_pred: List[int], predicted binary labels.\n    \n    Returns:\n    float: Recall value rounded to three decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    TP = np.sum((y_true == 1) & (y_pred == 1))\n    FN = np.sum((y_true == 1) & (y_pred == 0))\n    if TP + FN == 0:\n        return 0.0\n    else:\n        recall_value = TP / (TP + FN)\n        return round(recall_value, 3)\ny_true = [1, 0, 1, 1, 0, 1]\ny_pred = [1, 0, 1, 0, 0, 1]"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    \"\"\"\n    Implement the self-attention mechanism.\n    \n    Parameters:\n    X (numpy.ndarray): Input sequence of shape (sequence_length, input_dim).\n    W_q (numpy.ndarray): Query weight matrix of shape (input_dim, hidden_dim).\n    W_k (numpy.ndarray): Key weight matrix of shape (input_dim, hidden_dim).\n    W_v (numpy.ndarray): Value weight matrix of shape (input_dim, hidden_dim).\n    \n    Returns:\n    numpy.ndarray: Output of the self-attention mechanism.\n    \"\"\"\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    attention_scores = np.dot(Q, K.T)\n    scaled_attention_scores = attention_scores / np.sqrt(K.shape[1])\n    attention_weights = np.exp(scaled_attention_scores) / np.sum(np.exp(scaled_attention_scores), axis=-1, keepdims=True)\n    output = np.dot(attention_weights, V)\n    output = np.round(output, 4).tolist()\n    return output\nX = np.array([[1, 0], [0, 1], [1, 1]])\nW_q = np.array([[1, 0], [0, 1]])\nW_k = np.array([[1, 0], [0, 1]])\nW_v = np.array([[1, 0], [0, 1]])\noutput = self_attention(X, W_q, W_k, W_v)"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    \"\"\"\n    Implements a simple RNN cell that processes a sequence of input vectors and produces the final hidden state.\n    \n    Parameters:\n    input_sequence (list of list of float): Sequence of input vectors.\n    initial_hidden_state (list of float): Initial hidden state.\n    Wx (list of list of float): Weight matrix for input-to-hidden connections.\n    Wh (list of list of float): Weight matrix for hidden-to-hidden connections.\n    b (list of float): Bias vector.\n    \n    Returns:\n    list of float: Final hidden state after processing the entire sequence.\n    \"\"\"\n    input_sequence = np.array(input_sequence)\n    initial_hidden_state = np.array(initial_hidden_state)\n    Wx = np.array(Wx)\n    Wh = np.array(Wh)\n    b = np.array(b)\n    hidden_state = initial_hidden_state\n    for x in input_sequence:\n        hidden_state = np.tanh(Wx @ x + Wh @ hidden_state + b)\n    final_hidden_state = np.round(hidden_state, 4).tolist()\n    return final_hidden_state\ninput_sequence = [[1, 2], [3, 4], [5, 6]]\ninitial_hidden_state = [0, 0]\nWx = [[0.1, 0.2], [0.3, 0.4]]\nWh = [[0.5, 0.6], [0.7, 0.8]]\nb = [0.1, 0.1]"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    \"\"\"\n    Applies a 2D translation to a set of points.\n    \n    :param points: List of [x, y] coordinates.\n    :param tx: Translation distance in the x direction.\n    :param ty: Translation distance in the y direction.\n    :return: Translated list of [x, y] coordinates.\n    \"\"\"\n    points_array = np.array(points)\n    translation_matrix = np.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])\n    ones = np.ones((points_array.shape[0], 1))\n    points_homogeneous = np.hstack((points_array, ones))\n    translated_points_homogeneous = np.dot(translation_matrix, points_homogeneous.T).T\n    translated_points = translated_points_homogeneous[:, :2].tolist()\n    return translated_points"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    Calculate the KL divergence between two normal distributions.\n    \n    Parameters:\n    - mu_p (float): Mean of distribution P.\n    - sigma_p (float): Standard deviation of distribution P.\n    - mu_q (float): Mean of distribution Q.\n    - sigma_q (float): Standard deviation of distribution Q.\n    \n    Returns:\n    - float: KL divergence between P and Q.\n    \"\"\"\n    if sigma_p <= 0 or sigma_q <= 0:\n        raise ValueError('Standard deviations must be positive')\n    kl_div = np.log(sigma_q / sigma_p) + (sigma_p ** 2 + (mu_p - mu_q) ** 2) / (2 * sigma_q ** 2) - 0.5\n    return kl_div"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    \"\"\"\n    Implements the Gauss-Seidel method for solving a system of linear equations.\n    \n    :param A: Coefficient matrix (square matrix)\n    :param b: Right-hand side vector\n    :param n: Number of iterations\n    :param x_ini: Initial guess for the solution vector (optional)\n    :return: Approximated solution vector (x) as a list\n    \"\"\"\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    size = A.shape[0]\n    if x_ini is None:\n        x = np.zeros(size)\n    else:\n        x = np.array(x_ini, dtype=float)\n    for _ in range(n):\n        for i in range(size):\n            s = sum((A[i][j] * x[j] for j in range(size) if j != i))\n            x[i] = (b[i] - s) / A[i][i]\n    return np.round(x, 4).tolist()\nA = [[4, 1, 2], [3, 5, 1], [1, 1, 3]]\nb = [4, 7, 3]"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    \"\"\"\n    Solves the system of linear equations Ax = b using Gaussian Elimination with partial pivoting.\n    \n    Parameters:\n    A (np.array): Coefficient matrix.\n    b (np.array): Constant terms vector.\n    \n    Returns:\n    list: Solution vector x rounded to 4 decimal places.\n    \"\"\"\n    n = len(A)\n    Ab = np.hstack([A, b.reshape(-1, 1)])\n    for i in range(n):\n        pivot_row = i + np.argmax(np.abs(Ab[i:, i]))\n        Ab[[i, pivot_row]] = Ab[[pivot_row, i]]\n        for j in range(i + 1, n):\n            factor = Ab[j, i] / Ab[i, i]\n            Ab[j, i:] -= factor * Ab[i, i:]\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        x[i] = (Ab[i, -1] - np.dot(Ab[i, :-1], x)) / Ab[i, i]\n    return np.round(x, 4).tolist()\nA = np.array([[2, 1, -1], [-3, -1, 2], [-2, 1, 2]], dtype=float)"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def sigmoid(self, x):\n        return 1 / (1 + np.exp(-x))\n\n    def tanh(self, x):\n        return np.tanh(x)\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \"\"\"\n        hidden_states = []\n        cell_state = initial_cell_state\n        hidden_state = initial_hidden_state\n        for t in range(len(x)):\n            concat = np.vstack((hidden_state, x[t]))\n            forget_gate = self.sigmoid(self.Wf @ concat + self.bf)\n            input_gate = self.sigmoid(self.Wi @ concat + self.bi)\n            candidate_cell = self.tanh(self.Wc @ concat + self.bc)\n            output_gate = self.sigmoid(self.Wo @ concat + self.bo)\n            cell_state = forget_gate * cell_state + input_gate * candidate_cell\n            hidden_state = output_gate * self.tanh(cell_state)\n            hidden_states.append(hidden_state)\n        final_hidden_state = hidden_state\n        final_cell_state = cell_state\n        hidden_states_rounded = [np.round(state, 4).tolist() for state in hidden_states]\n        final_hidden_state_rounded = np.round(final_hidden_state, 4).tolist()\n        final_cell_state_rounded = np.round(final_cell_state, 4).tolist()\n        return (hidden_states_rounded, final_hidden_state_rounded, final_cell_state_rounded)\ninput_size = 3\nhidden_size = 2\nx = [np.random.randn(input_size, 1) for _ in range(5)]\ninitial_hidden_state = np.zeros((hidden_size, 1))\ninitial_cell_state = np.zeros((hidden_size, 1))"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef compute_tf_idf(corpus, query):\n    if not corpus:\n        raise ValueError('The corpus is empty.')\n\n    def term_frequency(doc, term):\n        return doc.count(term) / len(doc)\n\n    def inverse_document_frequency(corpus, term):\n        df = sum((1 for doc in corpus if term in doc)) + 1\n        return math.log(len(corpus) / df)\n    tf_idf_scores = []\n    for doc in corpus:\n        doc_scores = []\n        for term in query:\n            tf = term_frequency(doc, term)\n            idf = inverse_document_frequency(corpus, term)\n            doc_scores.append(round(tf * idf, 4))\n        tf_idf_scores.append(doc_scores)\n    return np.array(tf_idf_scores).tolist()\ncorpus = [['hello', 'world'], ['good', 'morning', 'world'], ['hello', 'good', 'bye']]\nquery = ['hello', 'good', 'world']"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    tp = np.sum((y_pred == 1) & (y_true == 1))\n    fp = np.sum((y_pred == 1) & (y_true == 0))\n    fn = np.sum((y_pred == 0) & (y_true == 1))\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0\n    if precision + recall == 0:\n        f_beta_score = 0\n    else:\n        f_beta_score = (1 + beta ** 2) * precision * recall / (beta ** 2 * precision + recall)\n    return round(f_beta_score, 3)\ny_true = np.array([1, 0, 1, 1, 0, 1])\ny_pred = np.array([1, 1, 1, 0, 0, 1])\nbeta = 1.0"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def rnn_forward(self, input_sequence):\n        \"\"\"\n        Processes a sequence of inputs and returns the output, the last inputs and the hidden states.\n        \"\"\"\n        T = len(input_sequence)\n        hiddens = [np.zeros((self.hidden_size, 1))]\n        outputs = []\n        last_inputs = []\n        for t in range(T):\n            x = input_sequence[t].reshape(-1, 1)\n            last_inputs.append(x)\n            h = np.tanh(self.W_xh @ x + self.W_hh @ hiddens[-1] + self.b_h)\n            hiddens.append(h)\n            y = self.W_hy @ h + self.b_y\n            outputs.append(y)\n        return (outputs, last_inputs, hiddens)\n\n    def rnn_backward(self, input_sequence, expected_output, outputs, last_inputs, hiddens, learning_rate):\n        \"\"\"\n        Performs backpropagation through time (BPTT) to adjust the weights based on the loss.\n        \"\"\"\n        T = len(input_sequence)\n        dW_xh = np.zeros_like(self.W_xh)\n        dW_hh = np.zeros_like(self.W_hh)\n        dW_hy = np.zeros_like(self.W_hy)\n        db_h = np.zeros_like(self.b_h)\n        db_y = np.zeros_like(self.b_y)\n        dh_next = np.zeros_like(hiddens[0])\n        for t in reversed(range(T)):\n            y = outputs[t]\n            x = last_inputs[t]\n            h = hiddens[t + 1]\n            dy = y - expected_output[t].reshape(-1, 1)\n            dW_hy += dy @ h.T\n            db_y += dy\n            dh = self.W_hy.T @ dy + dh_next\n            dh_raw = (1 - h ** 2) * dh\n            dW_xh += dh_raw @ x.T\n            dW_hh += dh_raw @ hiddens[t].T\n            db_h += dh_raw\n            dh_next = self.W_hh.T @ dh_raw\n        for (param, dparam) in zip([self.W_xh, self.W_hh, self.W_hy, self.b_h, self.b_y], [dW_xh, dW_hh, dW_hy, db_h, db_y]):\n            param -= learning_rate * dparam\n        loss = np.sum(0.5 * (expected_output - np.hstack(outputs)) ** 2) / T\n        return loss"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    if x0 is None:\n        x0 = np.zeros_like(b)\n    x = x0\n    r = np.dot(A, x) - b\n    p = -r\n    rsold = np.dot(r, r)\n    for _ in range(n):\n        Ap = np.dot(A, p)\n        alpha = rsold / np.dot(p, Ap)\n        x = x + alpha * p\n        r = r + alpha * Ap\n        rsnew = np.dot(r, r)\n        if np.sqrt(rsnew) < tol:\n            break\n        p = -r + rsnew / rsold * p\n        rsold = rsnew\n    return x.round(8).tolist()\nA = np.array([[4, 1], [1, 3]], dtype=float)\nb = np.array([1, 2], dtype=float)\nn = 100"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    if not y:\n        return 0.0\n    class_counts = np.bincount(y)\n    probabilities = class_counts / float(len(y))\n    gini = 1 - np.sum(probabilities ** 2)\n    return round(gini, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    import numpy as np\n    values = []\n    column_indices = []\n    row_pointers = [0]\n    for row in dense_matrix:\n        for (col_idx, value) in enumerate(row):\n            if value != 0:\n                values.append(value)\n                column_indices.append(col_idx)\n        row_pointers.append(len(values))\n    values_array = np.array(values)\n    column_indices_array = np.array(column_indices)\n    row_pointers_array = np.array(row_pointers)\n    return (values_array, column_indices_array, row_pointers_array)\ndense_matrix = [[1, 0, 0, 2], [0, 3, 0, 0], [4, 0, 5, 0]]"}
{"task_id": 66, "completion_id": 0, "solution": "import numpy as np\ndef orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    v = np.array(v)\n    L = np.array(L)\n    projection = (np.dot(v, L) / np.dot(L, L) * L).round(3)\n    return projection.tolist()\nv = [1, 2, 3]\nL = [4, 5, 6]"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    num_rows = len(dense_matrix)\n    num_cols = len(dense_matrix[0]) if num_rows > 0 else 0\n    col_ptr = [0]\n    values = []\n    row_indices = []\n    for col in range(num_cols):\n        for row in range(num_rows):\n            value = dense_matrix[row][col]\n            if value != 0:\n                values.append(value)\n                row_indices.append(row)\n        col_ptr.append(len(values))\n    return (values, row_indices, col_ptr)\ndense_matrix = [[0, 1, 0], [2, 0, 3], [0, 4, 0]]"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    \"\"\"\n    Calculates the column space (image) of a given matrix A.\n    Returns the basis vectors that span the column space of A.\n    These vectors are extracted from the original matrix and correspond to the independent columns.\n    \"\"\"\n    A = np.array(A)\n    (A_rref, pivot_columns) = to_row_echelon_form(A)\n    basis_vectors = A[:, pivot_columns]\n    return np.round(basis_vectors, 8).tolist()\ndef to_row_echelon_form(A):\n    \"\"\"\n    Converts a matrix to its row echelon form and returns the pivot columns.\n    \"\"\"\n    A = np.array(A, dtype=float)\n    (m, n) = A.shape\n    pivot_columns = []\n    (i, j) = (0, 0)\n    while i < m and j < n:\n        max_row = i + np.argmax(np.abs(A[i:, j]))\n        if A[max_row, j] == 0:\n            j += 1\n            continue\n        A[[i, max_row]] = A[[max_row, i]]\n        pivot_columns.append(j)\n        for k in range(i + 1, m):\n            factor = A[k, j] / A[i, j]\n            A[k, j:] -= factor * A[i, j:]\n        i += 1\n        j += 1\n    return (A, pivot_columns)\nA = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    \"\"\"\n    Calculate the R-squared (coefficient of determination) for a regression model.\n    \n    Parameters:\n    y_true : np.ndarray\n        Array of true values.\n    y_pred : np.ndarray\n        Array of predicted values.\n        \n    Returns:\n    float\n        The R-squared value rounded to three decimal places.\n    \"\"\"\n    ss_tot = np.sum((y_true - np.mean(y_true)) ** 2)\n    ss_res = np.sum((y_true - y_pred) ** 2)\n    r2 = 1 - ss_res / ss_tot\n    return np.round(r2, 3)\ny_true = np.array([3, -0.5, 2, 7])\ny_pred = np.array([2.5, 0.0, 2, 8])"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    \"\"\"\n    Calculates the average brightness of a grayscale image represented as a 2D matrix.\n    Returns the average brightness rounded to two decimal places, or -1 for invalid inputs.\n    \"\"\"\n    if not img or not img[0]:\n        return -1\n    total_brightness = 0\n    pixel_count = 0\n    for row in img:\n        if len(row) != len(img[0]):\n            return -1\n        for pixel in row:\n            if pixel < 0 or pixel > 255:\n                return -1\n            total_brightness += pixel\n            pixel_count += 1\n    if pixel_count == 0:\n        return -1\n    average_brightness = total_brightness / pixel_count\n    return round(average_brightness, 2)"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    \"\"\"\n    Calculate the Root Mean Square Error (RMSE) between the actual values and the predicted values.\n    \n    Parameters:\n    y_true (np.ndarray): Array of actual values.\n    y_pred (np.ndarray): Array of predicted values.\n    \n    Returns:\n    float: RMSE value rounded to three decimal places.\n    \n    Raises:\n    ValueError: If input arrays have different shapes or are empty.\n    TypeError: If input types are not numpy arrays or lists.\n    \"\"\"\n    if not isinstance(y_true, (np.ndarray, list)) or not isinstance(y_pred, (np.ndarray, list)):\n        raise TypeError('Inputs must be numpy arrays or lists.')\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    if y_true.size == 0 or y_pred.size == 0:\n        raise ValueError('Input arrays cannot be empty.')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Input arrays must have the same shape.')\n    squared_errors = (y_true - y_pred) ** 2\n    mse = np.mean(squared_errors)\n    rmse_val = np.sqrt(mse)\n    return round(rmse_val, 3)\ny_true = np.array([3, -0.5, 2, 7])\ny_pred = np.array([2.5, 0.0, 2, 8])"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    \"\"\"\n    Calculate the Jaccard Index for binary classification.\n    \n    Parameters:\n    - y_true: A binary numpy array of true labels.\n    - y_pred: A binary numpy array of predicted labels.\n    \n    Returns:\n    - The Jaccard Index as a float rounded to three decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    intersection = np.sum(np.logical_and(y_true, y_pred))\n    union = np.sum(np.logical_or(y_true, y_pred))\n    if union == 0:\n        return 0.0\n    jaccard = intersection / union\n    return round(jaccard, 3)\ny_true = np.array([1, 1, 0, 0, 1, 0, 1, 0])\ny_pred = np.array([1, 0, 1, 0, 0, 1, 1, 0])"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    \"\"\"\n    Calculate the Dice Score for binary classification.\n\n    Parameters:\n    y_true (np.ndarray): True binary labels.\n    y_pred (np.ndarray): Predicted binary labels.\n\n    Returns:\n    float: Dice Score rounded to 3 decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    intersection = np.sum(y_true * y_pred)\n    elements_true = np.sum(y_true)\n    elements_pred = np.sum(y_pred)\n    if elements_true == 0 and elements_pred == 0:\n        dice = 1.0\n    else:\n        dice = 2.0 * intersection / (elements_true + elements_pred)\n    return round(dice, 3)\ny_true = np.array([1, 0, 1, 1, 0, 1])\ny_pred = np.array([1, 1, 1, 0, 0, 1])"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef create_hv(seed, dim):\n    \"\"\"Generate a hypervector with a given seed and dimension.\"\"\"\n    np.random.seed(seed)\n    return np.where(np.random.rand(dim) > 0.5, 1, -1)\ndef bind_hvs(hv1, hv2):\n    \"\"\"Bind two hypervectors using element-wise multiplication and normalization.\"\"\"\n    return hv1 * hv2\ndef bundle_hvs(hvs):\n    \"\"\"Bundle a list of hypervectors by averaging them.\"\"\"\n    return np.mean(hvs, axis=0)\ndef create_row_hv(row, dim, random_seeds):\n    \"\"\"Generate a composite hypervector for a dataset row.\"\"\"\n    feature_hvs = []\n    for (feature, value) in row.items():\n        feature_hv = create_hv(hash(feature), dim)\n        value_hv = create_hv(random_seeds[feature], dim)\n        bound_hv = bind_hvs(feature_hv, value_hv)\n        feature_hvs.append(bound_hv)\n    row_hv = bundle_hvs(feature_hvs)\n    return row_hv.tolist()\ndim = 10\nrandom_seeds = {'age': 10, 'income': 20, 'education': 30}"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import List\ndef confusion_matrix(data: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Generates a confusion matrix for binary classification.\n    \n    Parameters:\n    - data: A list of lists, where each inner list is [y_true, y_pred].\n    \n    Returns:\n    - A 2x2 confusion matrix as a list of lists.\n    \"\"\"\n    cm = [[0, 0], [0, 0]]\n    counts = Counter((tuple(pair) for pair in data))\n    cm[0][0] = counts[0, 0]\n    cm[0][1] = counts[0, 1]\n    cm[1][0] = counts[1, 0]\n    cm[1][1] = counts[1, 1]\n    return cm"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    \"\"\"\n    Calculate the cosine similarity between two vectors.\n    \n    Parameters:\n    v1 (numpy.ndarray): First input vector.\n    v2 (numpy.ndarray): Second input vector.\n    \n    Returns:\n    float: Cosine similarity rounded to three decimal places.\n    \"\"\"\n    if v1.shape != v2.shape:\n        raise ValueError('Both input vectors must have the same shape.')\n    if v1.size == 0 or v2.size == 0 or np.linalg.norm(v1) == 0 or (np.linalg.norm(v2) == 0):\n        raise ValueError('Input vectors cannot be empty or have zero magnitude.')\n    dot_product = np.dot(v1, v2)\n    norm_v1 = np.linalg.norm(v1)\n    norm_v2 = np.linalg.norm(v2)\n    cos_sim = dot_product / (norm_v1 * norm_v2)\n    return round(cos_sim, 3)\nv1 = np.array([1, 2, 3])\nv2 = np.array([4, 5, 6])"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\nimport numpy as np\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    \"\"\"\n    Calculate performance metrics for a binary classification problem.\n    \n    Parameters:\n    actual (list of int): The actual class labels.\n    predicted (list of int): The predicted class labels.\n    \n    Returns:\n    tuple: A tuple containing confusion matrix, accuracy, F1 score, specificity,\n           and negative predictive value.\n    \"\"\"\n    if len(actual) != len(predicted):\n        raise ValueError(\"The length of 'actual' and 'predicted' lists must be the same.\")\n    confusion_matrix = np.zeros((2, 2), dtype=int)\n    for (a, p) in zip(actual, predicted):\n        confusion_matrix[a, p] += 1\n    tp = confusion_matrix[1, 1]\n    tn = confusion_matrix[0, 0]\n    fp = confusion_matrix[0, 1]\n    fn = confusion_matrix[1, 0]\n    accuracy = round((tp + tn) / (tp + tn + fp + fn), 3)\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0\n    f1_score = round(2 * (precision * recall) / (precision + recall), 3) if precision + recall > 0 else 0\n    specificity = round(tn / (tn + fp), 3) if tn + fp > 0 else 0\n    negative_predictive_value = round(tn / (tn + fn), 3) if tn + fn > 0 else 0\n    return (confusion_matrix, accuracy, f1_score, specificity, negative_predictive_value)\nactual = [1, 0, 1, 1, 0, 1, 0, 0, 0, 1]\npredicted = [1, 0, 1, 0, 0, 1, 1, 0, 1, 0]"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\nfrom scipy import stats\ndef descriptive_statistics(data):\n    \"\"\"\n    Calculate various descriptive statistics for a given dataset.\n    \n    Parameters:\n    data (list or numpy.ndarray): The dataset for which to calculate statistics.\n    \n    Returns:\n    dict: A dictionary containing the calculated statistics.\n    \"\"\"\n    data = np.array(data)\n    mean = np.mean(data).round(4)\n    median = np.median(data).round(4)\n    mode = stats.mode(data).mode[0]\n    variance = np.var(data, ddof=1).round(4)\n    standard_deviation = np.std(data, ddof=1).round(4)\n    percentile_25 = np.percentile(data, 25).round(4)\n    percentile_50 = np.percentile(data, 50).round(4)\n    percentile_75 = np.percentile(data, 75).round(4)\n    iqr = (percentile_75 - percentile_25).round(4)\n    statistics = {'mean': mean, 'median': median, 'mode': mode, 'variance': variance, 'standard_deviation': standard_deviation, '25th_percentile': percentile_25, '50th_percentile': percentile_50, '75th_percentile': percentile_75, 'interquartile_range': iqr}\n    return statistics\ndata = np.random.normal(loc=50, scale=10, size=100)"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials\n    \"\"\"\n    binom_coeff = math.comb(n, k)\n    probability = binom_coeff * p ** k * (1 - p) ** (n - k)\n    return round(probability, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    :return: The PDF value rounded to 5 decimal places.\n    \"\"\"\n    exponent = math.exp(-(x - mean) ** 2 / (2 * std_dev ** 2))\n    denominator = std_dev * math.sqrt(2 * math.pi)\n    pdf_value = exponent / denominator\n    return round(pdf_value, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the average rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    :return: Probability rounded to 5 decimal places\n    \"\"\"\n    try:\n        factorial_k = math.factorial(k)\n        exp_term = math.exp(-lam)\n        lam_pow_k = lam ** k\n        probability = lam_pow_k * exp_term / factorial_k\n        return round(probability, 5)\n    except Exception as e:\n        print(f'An error occurred: {e}')\n        return None"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        int: The contrast of the image, defined as the difference between the maximum and minimum pixel values.\n    \"\"\"\n    img = np.array(img)\n    max_pixel_value = np.max(img)\n    min_pixel_value = np.min(img)\n    contrast = max_pixel_value - min_pixel_value\n    return contrast"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    Returns:\n        float: The dot product of the two vectors.\n    \"\"\"\n    if vec1.shape != vec2.shape:\n        raise ValueError('Both vectors must be of the same length.')\n    return np.dot(vec1, vec2)"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n    \"\"\"\n    if degree < 0:\n        return []\n    data_array = np.array(data).reshape(-1, 1)\n    poly_features = []\n    for deg in range(1, degree + 1):\n        poly_features.append(data_array ** deg)\n    transformed_data = np.concatenate(poly_features, axis=1)\n    transformed_data_rounded = np.round(transformed_data, 8)\n    return transformed_data_rounded.tolist()\ndata = [1.0, 2.0, 3.0]\ndegree = 3\ntransformed_data = phi_transform(data, degree)"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    \"\"\"\n    Calculate the positional encoding for a given position and model dimensionality.\n    \n    Args:\n    position (int): The length of the sequence.\n    d_model (int): The dimensionality of the model.\n    \n    Returns:\n    list: The positional encoding as a list, or -1 if input parameters are invalid.\n    \n    \"\"\"\n    if position == 0 or d_model <= 0:\n        return -1\n    pe = np.zeros((position, d_model), dtype=np.float16)\n    for pos in range(position):\n        for i in range(0, d_model, 2):\n            angle_rate = pos / np.power(10000, 2 * i / d_model)\n            pe[pos, i] = np.sin(angle_rate)\n            if i + 1 < d_model:\n                pe[pos, i + 1] = np.cos(angle_rate)\n    return pe.tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    elif training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    else:\n        return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    parameter -= learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    if isinstance(parameter, np.ndarray):\n        updated_parameter = parameter.tolist()\n        updated_m = m.tolist()\n        updated_v = v.tolist()\n    else:\n        updated_parameter = parameter\n        updated_m = m\n        updated_v = v\n    updated_parameter = np.round(updated_parameter, 5)\n    updated_m = np.round(updated_m, 5)\n    updated_v = np.round(updated_v, 5)\n    return (updated_parameter, updated_m, updated_v)\nparameter = np.array([1.0, 2.0, 3.0])\ngrad = np.array([0.1, 0.2, 0.3])\nm = np.array([0.0, 0.0, 0.0])\nv = np.array([0.0, 0.0, 0.0])\nt = 1"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    token_ids = encoder.encode(prompt)\n    if len(token_ids) + n_tokens_to_generate > hparams['n_ctx']:\n        raise ValueError(\"Prompt and generation length exceed model's context size.\")\n    token_embeddings = params['wte'][token_ids]\n    pos_embeddings = params['wpe'][:len(token_ids)]\n    x = token_embeddings + pos_embeddings\n\n    def layer_norm(x, g, b, eps=1e-12):\n        u = x.mean(-1, keepdims=True)\n        s = (x - u).mean(-1, keepdims=True) ** 0.5\n        x = (x - u) / (s + eps)\n        return x * g + b\n    x = layer_norm(x, params['ln_f']['g'], params['ln_f']['b'])\n    next_token_id = np.argmax(x[-1])\n    token_ids.append(next_token_id)\n    for _ in range(n_tokens_to_generate - 1):\n        token_embeddings = params['wte'][next_token_id]\n        x = token_embeddings + pos_embeddings[-1]\n        x = layer_norm(x, params['ln_f']['g'], params['ln_f']['b'])\n        next_token_id = np.argmax(x)\n        token_ids.append(next_token_id)\n    generated_text = encoder.decode(token_ids)\n    return generated_text"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        e_values = np.exp(values - np.max(values))\n        return e_values / e_values.sum()\n    weights = np.random.rand(n, dimension)\n    transformed_crystals = np.array(crystal_values)[:, None] * weights\n    attention_scores = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                dot_product = np.dot(transformed_crystals[i], transformed_crystals[j])\n                attention_scores[i, j] = dot_product\n    attention_weights = np.apply_along_axis(softmax, axis=1, arr=attention_scores)\n    weighted_patterns = np.dot(attention_weights, transformed_crystals)\n    return [round(pattern, 4) for pattern in np.mean(weighted_patterns, axis=1)]\nn = 5\ncrystal_values = [1, 2, 3, 4, 5]\ndimension = 3"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    \"\"\"\n    Calculate BM25 scores for each document in the corpus based on the query.\n    \n    :param corpus: List of documents, where each document is represented as a list of words.\n    :param query: A list of words representing the query.\n    :param k1: Free parameter, usually set to 1.5 or 2.0.\n    :param b: Free parameter, usually set to 0.75.\n    :return: A list of BM25 scores for each document in the corpus.\n    \"\"\"\n    avgdl = sum((len(doc) for doc in corpus)) / len(corpus)\n    idf = {term: np.log((len(corpus) - sum((term in doc for doc in corpus)) + 0.5) / (sum((term in doc for doc in corpus)) + 0.5)) for term in query}\n    scores = []\n    for doc in corpus:\n        score = 0\n        doc_len = len(doc)\n        for term in query:\n            tf = doc.count(term)\n            numerator = idf[term] * tf * (k1 + 1)\n            denominator = tf + k1 * (1 - b + b * doc_len / avgdl)\n            score += numerator / denominator\n        scores.append(score)\n    return [round(score, 3) for score in scores]\ncorpus = [['the', 'cat', 'in', 'the', 'hat'], ['the', 'dog', 'ate', 'my', 'homework'], ['the', 'cat', 'ate', 'the', 'fish']]\nquery = ['the', 'cat']\nscores = calculate_bm25_scores(corpus, query)"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    tp = fp = fn = 0\n    set_true = set(y_true)\n    set_pred = set(y_pred)\n    for label in set_true.union(set_pred):\n        if label in set_true and label in set_pred:\n            tp += min(y_true.count(label), y_pred.count(label))\n        elif label in set_pred:\n            fp += y_pred.count(label)\n        elif label in set_true:\n            fn += y_true.count(label)\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0\n    f1 = 2 * (precision * recall) / (precision + recall) if precision + recall > 0 else 0\n    return round(f1, 3)\ny_true = [0, 1, 2, 1, 0]\ny_pred = [0, 2, 1, 0, 0]"}
{"task_id": 92, "completion_id": 0, "solution": "import math\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nPI = 3.14159\ndef power_grid_forecast(consumption_data):\n    \"\"\"\n    Subtract daily fluctuation, fit a linear regression model to the detrended data,\n    predict day 15's base consumption, add back the fluctuation for day 15,\n    and finally include a 5% safety margin.\n    \"\"\"\n    days = np.array(range(1, len(consumption_data) + 1)).reshape(-1, 1)\n    fluctuation = 10 * np.sin(2 * PI * days / 10)\n    detrended_data = np.array(consumption_data).reshape(-1, 1) - fluctuation\n    model = LinearRegression()\n    model.fit(days, detrended_data)\n    day_15 = np.array([[15]])\n    base_day_15 = model.predict(day_15)\n    fluctuation_day_15 = 10 * math.sin(2 * PI * 15 / 10)\n    predicted_consumption = base_day_15 + fluctuation_day_15\n    final_prediction = math.ceil(predicted_consumption * 1.05)\n    return final_prediction[0]"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        raise ValueError('The length of y_true and y_pred must be the same.')\n    absolute_errors = np.abs(y_true - y_pred)\n    mean_absolute_error = np.mean(absolute_errors)\n    return round(mean_absolute_error, 3)"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray) -> tuple:\n    \"\"\"\n    Computes the Query, Key, and Value matrices for the self-attention mechanism.\n    :param X: Input data matrix.\n    :param W_q: Weight matrix for the Query.\n    :param W_k: Weight matrix for the Key.\n    :param W_v: Weight matrix for the Value.\n    :return: Tuple containing the Query, Key, and Value matrices.\n    \"\"\"\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    return (Q, K, V)\ndef self_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Computes the self-attention for a single head.\n    :param Q: Query matrix.\n    :param K: Key matrix.\n    :param V: Value matrix.\n    :return: The attention output.\n    \"\"\"\n    d_k = K.shape[-1]\n    scores = np.dot(Q, K.T) / np.sqrt(d_k)\n    attention_weights = np.apply_along_axis(lambda x: np.exp(x) / np.sum(np.exp(x)), 1, scores)\n    output = np.dot(attention_weights, V)\n    return output\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Computes the multi-head attention.\n    :param X: Input data matrix.\n    :param W_q: Weight matrix for the Query.\n    :param W_k: Weight matrix for the Key.\n    :param W_v: Weight matrix for the Value.\n    :param n_heads: Number of attention heads.\n    :return: The attention output as a list.\n    \"\"\"\n    (Q, K, V) = compute_qkv(X, W_q, W_k, W_v)\n    head_size = Q.shape[-1] // n_heads\n    outputs = []\n    for i in range(n_heads):\n        Q_head = Q[:, i * head_size:(i + 1) * head_size]\n        K_head = K[:, i * head_size:(i + 1) * head_size]\n        V_head = V[:, i * head_size:(i + 1) * head_size]\n        output = self_attention(Q_head, K_head, V_head)\n        outputs.append(output)\n    concatenated = np.hstack(outputs)\n    rounded = np.round(concatenated, 4)\n    return rounded.tolist()\nX = np.array([[1, 2, 3], [4, 5, 6]])\nW_q = np.array([[1, 0], [0, 1], [1, 1]])\nW_k = np.array([[1, 0], [0, 1], [1, 1]])\nW_v = np.array([[1, 0], [0, 1], [1, 1]])\nn_heads = 2"}
{"task_id": 95, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.stats import chi2_contingency\ndef phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    x_arr = np.array(x)\n    y_arr = np.array(y)\n    contingency_table = np.array([[np.sum((x_arr == 0) & (y_arr == 0)), np.sum((x_arr == 0) & (y_arr == 1))], [np.sum((x_arr == 1) & (y_arr == 0)), np.sum((x_arr == 1) & (y_arr == 1))]])\n    (chi2, _, _, _) = chi2_contingency(contingency_table)\n    phi = np.sqrt(chi2 / np.sum(contingency_table))\n    return round(phi, 4)\nx = [0, 0, 1, 1, 0, 1, 0, 1]\ny = [0, 1, 0, 0, 1, 1, 1, 0]"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    if x <= -2.5:\n        return 0.0\n    elif x >= 2.5:\n        return 1.0\n    else:\n        return 0.2 * x + 0.5"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value\n    \"\"\"\n    if x > 0:\n        return x\n    else:\n        return alpha * (math.exp(x) - 1)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    return max(0, x) + alpha * min(0, x)"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x)\n    \"\"\"\n    if x > 100:\n        return round(x, 4)\n    elif x < -100:\n        return round(0.0, 4)\n    else:\n        return round(math.log(1 + math.exp(x)), 4)"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input\n    \"\"\"\n    return round(x / (1 + abs(x)), 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    rhos = np.array(rhos)\n    A = np.array(A)\n    pi_theta_old = np.array(pi_theta_old)\n    pi_theta_ref = np.array(pi_theta_ref)\n    clipped_rhos = np.clip(rhos, 1 - epsilon, 1 + epsilon)\n    clipped_objective = np.mean(np.minimum(rhos * A, clipped_rhos * A))\n    kl_divergence = np.mean(np.log(pi_theta_old / pi_theta_ref))\n    grpo_objective_value = clipped_objective - beta * kl_divergence\n    return round(grpo_objective_value, 6)\nrhos = [1.2, 0.9, 1.5, 0.8]\nA = [0.5, -0.3, 0.2, -0.1]\npi_theta_old = [0.3, 0.4, 0.6, 0.5]\npi_theta_ref = [0.2, 0.3, 0.5, 0.4]"}
{"task_id": 102, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value\n    \"\"\"\n    return round(x / (1 + math.exp(-x)), 4)"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x > 0:\n        return scale * x\n    else:\n        return scale * alpha * (math.exp(x) - 1)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Computes the sigmoid function for the input z.\n\n    Args:\n        z: Input array\n\n    Returns:\n        Sigmoid of the input array\n    \"\"\"\n    return 1 / (1 + np.exp(-z))\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00c3\\x97 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    z = np.dot(X, weights) + bias\n    probabilities = sigmoid(z)\n    predictions = (probabilities >= 0.5).astype(int)\n    return predictions.tolist()\nX_sample = np.array([[1, 2], [2, 3], [3, 4]])\nweights_sample = np.array([0.5, -0.2])\nbias_sample = 0.1\npredictions = predict_logistic(X_sample, weights_sample, bias_sample)"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef softmax(z):\n    \"\"\"Compute softmax values for each sets of scores in z.\"\"\"\n    e_z = np.exp(z - np.max(z, axis=1, keepdims=True))\n    return e_z / e_z.sum(axis=1, keepdims=True)\ndef cross_entropy_loss(y_true, y_pred):\n    \"\"\"Compute the cross entropy loss.\"\"\"\n    n_samples = y_true.shape[0]\n    loss = -np.sum(y_true * np.log(y_pred + 1e-15)) / n_samples\n    return loss\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    n_classes = y.shape[1]\n    W = np.zeros((n_features, n_classes))\n    losses = []\n    for i in range(iterations):\n        scores = X @ W\n        predictions = softmax(scores)\n        error = predictions - y\n        gradient = X.T @ error / n_samples\n        W -= learning_rate * gradient\n        loss = cross_entropy_loss(y, predictions)\n        losses.append(round(loss, 4))\n    B = W.round(4).tolist()\n    return (B, losses)"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"\n    Compute the sigmoid of z.\n    \"\"\"\n    return 1 / (1 + np.exp(-z))\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \"\"\"\n    X = np.insert(X, 0, 1, axis=1)\n    weights = np.zeros(X.shape[1])\n    loss_values = []\n    for i in range(iterations):\n        z = np.dot(X, weights)\n        y_pred = sigmoid(z)\n        gradient = np.dot(X.T, y_pred - y) / y.size\n        weights -= learning_rate * gradient\n        loss = -np.mean(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n        loss_values.append(round(loss, 4))\n    return (weights.tolist(), loss_values)"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    d_k = Q.shape[-1]\n    scores = np.matmul(Q, K.T) / np.sqrt(d_k)\n    scores += mask\n    p_attn = np.apply_along_axis(lambda x: np.exp(x) / np.sum(np.exp(x)), axis=-1, arr=scores)\n    output = np.matmul(p_attn, V)\n    return output.tolist()\nmask = np.array([[-np.inf, 0, 0], [-np.inf, -np.inf, 0], [-np.inf, -np.inf, 0]])\noutput = masked_attention(Q, K, V, mask)"}
{"task_id": 108, "completion_id": 0, "solution": "from collections import Counter\nfrom math import log\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    The disorder is calculated using Shannon entropy, which is a measure of uncertainty\n    associated with a random variable. In this case, the random variable is the color of\n    an apple in the basket. The entropy is 0 when all apples are of the same color and\n    increases as the variety of colors increases.\n    \"\"\"\n    if not apples:\n        return 0.0\n    color_counts = Counter(apples)\n    total_apples = len(apples)\n    entropy = -sum((count / total_apples * log(count / total_apples, 2) for count in color_counts.values()))\n    return round(entropy, 4)"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05) -> np.ndarray:\n    \"\"\"\n    Perform Layer Normalization on the input tensor X.\n    \n    Parameters:\n    X: Input tensor of shape (batch_size, seq_length, feature_dim)\n    gamma: Scaling parameters of shape (feature_dim,)\n    beta: Shifting parameters of shape (feature_dim,)\n    epsilon: Small constant for numerical stability\n    \n    Returns:\n    A numpy array of the same shape as X, normalized across the feature dimension.\n    \"\"\"\n    mean = np.mean(X, axis=-1, keepdims=True)\n    var = np.var(X, axis=-1, keepdims=True)\n    X_norm = (X - mean) / np.sqrt(var + epsilon)\n    X_scaled = X_norm * gamma + beta\n    return np.round(X_scaled, decimals=5).tolist()"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef harmonic_mean(precision, recall, beta):\n    \"\"\"\n    Compute the harmonic mean for METEOR score.\n    \"\"\"\n    if precision == 0 or recall == 0:\n        return 0\n    return (1 + beta ** 2) * (precision * recall) / (beta ** 2 * precision + recall)\ndef fragmentation_cost(reference, candidate):\n    \"\"\"\n    Compute the fragmentation cost based on the number of segments.\n    \"\"\"\n    ref_segments = reference.split()\n    can_segments = candidate.split()\n    ref_set = set(ref_segments)\n    can_set = set(can_segments)\n    common = ref_set.intersection(can_set)\n    ref_order = [i for (i, word) in enumerate(ref_segments) if word in common]\n    can_order = [i for (i, word) in enumerate(can_segments) if word in common]\n    if not ref_order or not can_order:\n        return 1.0\n    cost = 0.0\n    for i in range(1, len(ref_order)):\n        cost += abs(ref_order[i] - can_order[i]) != abs(can_order[i] - can_order[i - 1])\n    return cost / len(ref_order)\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    \"\"\"\n    Calculate the METEOR score for two strings: a reference and a candidate translation.\n    \"\"\"\n    ref_words = reference.split()\n    can_words = candidate.split()\n    ref_count = Counter(ref_words)\n    can_count = Counter(can_words)\n    matches = sum((ref_count & can_count).values())\n    if matches == 0:\n        return 0.0\n    precision = matches / len(can_words)\n    recall = matches / len(ref_words)\n    f_mean = harmonic_mean(precision, recall, beta)\n    fragment_cost = fragmentation_cost(reference, candidate)\n    penalty = gamma * fragment_cost\n    score = (1 - alpha) * precision + alpha * f_mean - penalty\n    return round(score, 3)"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    \"\"\"\n    Computes the Pointwise Mutual Information (PMI) given the joint occurrence count of two events,\n    their individual counts, and the total number of samples.\n    \n    PMI is calculated as:\n    PMI(x, y) = log(P(x, y) / (P(x)P(y)))\n              = log((count(x, y) / N) / ((count(x) / N) * (count(y) / N)))\n              = log(count(x, y) * N / (count(x) * count(y)))\n    \n    :param joint_counts: The number of times x and y occur together.\n    :param total_counts_x: The total number of occurrences of x.\n    :param total_counts_y: The total number of occurrences of y.\n    :param total_samples: The total number of samples.\n    :return: The PMI value rounded to 3 decimal places.\n    \"\"\"\n    if joint_counts == 0:\n        return float('-inf')\n    pmi = np.log2(joint_counts * total_samples / (total_counts_x * total_counts_y))\n    return round(pmi, 3)\njoint_counts = 10\ntotal_counts_x = 50\ntotal_counts_y = 40\ntotal_samples = 1000"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    \"\"\"\n    Perform Min-Max Normalization on a list of integers.\n    Each value is scaled to the range [0, 1] based on the minimum and maximum values in the list.\n    The result is rounded to 4 decimal places.\n    \n    Args:\n    x: A list of integers.\n    \n    Returns:\n    A list of floats representing the normalized values.\n    \"\"\"\n    if not x:\n        return []\n    min_val = min(x)\n    max_val = max(x)\n    if min_val == max_val:\n        return [1.0] * len(x)\n    normalized = [(float(i) - min_val) / (max_val - min_val) for i in x]\n    return [round(val, 4) for val in normalized]"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    \"\"\"\n    Implements a simple residual block with shortcut connection.\n    \n    Args:\n        x (np.ndarray): 1D input array.\n        w1 (np.ndarray): Weight matrix for the first layer.\n        w2 (np.ndarray): Weight matrix for the second layer.\n    \n    Returns:\n        np.ndarray: The output of the residual block, rounded to 4 decimal places.\n    \"\"\"\n    x = x.reshape(1, -1)\n    z1 = np.matmul(x, w1)\n    a1 = np.maximum(z1, 0)\n    z2 = np.matmul(a1, w2)\n    a2 = np.maximum(z2, 0)\n    z_shortcut = a2 + x\n    a_final = np.maximum(z_shortcut, 0)\n    return a_final.round(4).tolist()[0]\nx = np.array([1, 2, 3])\nw1 = np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]])\nw2 = np.array([[0.9, 0.8, 0.7], [0.6, 0.5, 0.4], [0.3, 0.2, 0.1]])"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Performs Global Average Pooling on a 3D NumPy array.\n    \n    Parameters:\n    - x: A NumPy array of shape (height, width, channels) representing feature maps.\n    \n    Returns:\n    - A 1D NumPy array of shape (channels,) where each element is the average of\n      all values in the corresponding feature map.\n    \"\"\"\n    return np.mean(x, axis=(0, 1))"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05) -> np.ndarray:\n    \"\"\"\n    Applies Batch Normalization to the input array X using the scale (gamma) and shift (beta) parameters.\n    The input X is expected to be in BCHW format (batch, channels, height, width).\n    \n    Parameters:\n    X: np.ndarray\n        The input array in BCHW format.\n    gamma: np.ndarray\n        Scale parameter for each channel.\n    beta: np.ndarray\n        Shift parameter for each channel.\n    epsilon: float\n        A small value to add to the variance for numerical stability.\n        \n    Returns:\n    np.ndarray\n        The normalized, scaled, and shifted input array.\n    \"\"\"\n    mean = np.mean(X, axis=(0, 2, 3), keepdims=True)\n    var = np.var(X, axis=(0, 2, 3), keepdims=True)\n    X_norm = (X - mean) / np.sqrt(var + epsilon)\n    X_scaled_shifted = gamma[:, None, None] * X_norm + beta[:, None, None]\n    return np.round(X_scaled_shifted, decimals=4).tolist()"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    \"\"\"\n    Calculates the derivative of a polynomial term at a given point.\n\n    Args:\n    c (float): The coefficient of the polynomial term.\n    x (float): The point at which to evaluate the derivative.\n    n (float): The exponent of the polynomial term.\n\n    Returns:\n    float: The value of the derivative at point x, rounded to 4 decimal places.\n    \"\"\"\n    derivative_value = c * n * x ** (n - 1)\n    return round(derivative_value, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10):\n    \"\"\"\n    Apply the Gram-Schmidt process to a list of 2D vectors to find an orthonormal basis.\n    \n    Parameters:\n    vectors (list of lists of float): The input vectors to process.\n    tol (float): Tolerance for considering vectors linearly independent.\n    \n    Returns:\n    list of lists of float: The orthonormal basis vectors.\n    \"\"\"\n    V = np.array(vectors).T\n    (m, n) = V.shape\n    Q = np.zeros((m, n))\n    for i in range(n):\n        v = V[:, i]\n        for j in range(i):\n            q = Q[:, j]\n            v = v - np.dot(q, V[:, i]) * q\n        if np.linalg.norm(v) < tol:\n            continue\n        Q[:, i] = v / np.linalg.norm(v)\n    Q = Q[:, ~np.all(Q == 0, axis=0)]\n    return [list(map(lambda x: round(x, 4), Q[:, i].tolist())) for i in range(Q.shape[1])]"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    \"\"\"\n    Computes the cross product of two 3-dimensional vectors.\n    \n    Parameters:\n    a (list or numpy array): A 3-dimensional vector.\n    b (list or numpy array): Another 3-dimensional vector.\n    \n    Returns:\n    list: The cross product of vectors a and b, rounded to 4 decimal places.\n    \"\"\"\n    a = np.array(a)\n    b = np.array(b)\n    cross_prod = np.cross(a, b)\n    return np.round(cross_prod, 4).tolist()"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    \"\"\"\n    Solves a system of linear equations using Cramer's Rule.\n    \n    Parameters:\n    A (np.array): A square coefficient matrix.\n    b (np.array): A constant vector.\n    \n    Returns:\n    list: The solution vector x as a list, rounded to the nearest 4th decimal.\n    If no unique solution exists, returns -1.\n    \"\"\"\n    if A.shape[0] != A.shape[1]:\n        return -1\n    det_A = np.linalg.det(A)\n    if det_A == 0:\n        return -1\n    x = []\n    for i in range(A.shape[1]):\n        A_i = A.copy()\n        A_i[:, i] = b\n        det_A_i = np.linalg.det(A_i)\n        x_i = det_A_i / det_A\n        x.append(round(x_i, 4))\n    return np.array(x).tolist()\nA = np.array([[3, 1], [1, 2]])\nb = np.array([9, 8])"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    \"\"\"\n    Calculate the Bhattacharyya distance between two probability distributions p and q.\n    If the distributions are of different lengths or empty, return 0.0.\n    Round the result to 4 decimal places.\n    \"\"\"\n    if len(p) != len(q) or len(p) == 0:\n        return 0.0\n    bc = np.sum(np.sqrt(np.multiply(p, q)))\n    bd = -np.log(bc)\n    return round(bd, 4)\np = [0.1, 0.2, 0.3, 0.4]\nq = [0.4, 0.3, 0.2, 0.1]"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float]:\n    \"\"\"\n    Computes the element-wise sum of two vectors.\n    \n    Parameters:\n    - a: list[int|float] - The first vector.\n    - b: list[int|float] - The second vector.\n    \n    Returns:\n    - A list[int|float] representing the element-wise sum of the vectors if they have the same length.\n    - -1 if the vectors have different lengths.\n    \"\"\"\n    if len(a) != len(b):\n        return -1\n    return [x + y for (x, y) in zip(a, b)]"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef softmax(x):\n    e_x = np.exp(x - np.max(x))\n    return e_x / e_x.sum(axis=0)\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    (num_states, num_actions) = theta.shape\n    gradient = np.zeros_like(theta)\n    for episode in episodes:\n        returns = 0\n        returns_list = []\n        for (_, _, reward) in reversed(episode):\n            returns = 0.99 * returns + reward\n            returns_list.append(returns)\n        returns_list = list(reversed(returns_list))\n        for (i, (state, action, _)) in enumerate(episode):\n            policy = softmax(theta[state, :])\n            log_policy = np.log(policy[action])\n            gradient[state, action] += log_policy * returns_list[i]\n            for a in range(num_actions):\n                if a != action:\n                    gradient[state, a] += np.log(1 - policy[action]) * returns_list[i]\n    average_gradient = gradient / len(episodes)\n    return np.round(average_gradient, 4).tolist()\ntheta = np.array([[1, 2], [3, 4], [5, 6]], dtype=float)\nepisodes = [[(0, 0, 1.0), (1, 1, 1.0)], [(0, 1, 1.0), (1, 0, 1.0), (2, 1, 1.0)]]\ngradient = compute_policy_gradient(theta, episodes)"}
{"task_id": 123, "completion_id": 0, "solution": "def compute_efficiency(n_experts, k_active, d_in, d_out):\n    \"\"\"\n    Calculate the computational cost savings of an MoE layer compared to a dense layer.\n    \n    Parameters:\n    n_experts (int): Total number of experts in the MoE layer.\n    k_active (int): Number of active experts.\n    d_in (int): Input dimension.\n    d_out (int): Output dimension.\n    \n    Returns:\n    float: Percentage of computational cost savings rounded to the nearest 1th decimal.\n    \"\"\"\n    flops_dense = 2 * d_in * d_out\n    flops_expert = 2 * d_in * d_out\n    flops_gating = 2 * d_in * n_experts\n    flops_moe = flops_expert * k_active / n_experts + flops_gating\n    savings = (flops_dense - flops_moe) / flops_dense * 100\n    return round(savings, 1)\nn_experts = 128\nk_active = 4\nd_in = 512\nd_out = 512"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    \"\"\"\n    Implements the Noisy Top-K gating mechanism.\n    \n    Parameters:\n    X (np.ndarray): Input matrix of shape (batch_size, input_dim).\n    W_g (np.ndarray): Weight matrix for gating of shape (input_dim, num_experts).\n    W_noise (np.ndarray): Weight matrix for noise of shape (input_dim, num_experts).\n    N (np.ndarray): Pre-sampled noise matrix of shape (batch_size, num_experts).\n    k (int): Number of experts to select.\n    \n    Returns:\n    list: Final gating probabilities matrix as a list rounded to 4 decimal places.\n    \"\"\"\n    logits = X @ W_g\n    noise = np.abs(X @ W_noise) * N\n    noisy_logits = logits + noise\n    probabilities = np.exp(noisy_logits) / np.sum(np.exp(noisy_logits), axis=-1, keepdims=True)\n    topk_indices = np.argsort(probabilities, axis=-1)[:, -k:]\n    topk_probabilities = np.take_along_axis(probabilities, topk_indices, axis=-1)\n    sum_topk = np.sum(topk_probabilities, axis=-1, keepdims=True)\n    topk_probabilities_normalized = topk_probabilities / sum_topk\n    final_probabilities = np.zeros_like(probabilities)\n    np.put_along_axis(final_probabilities, topk_indices, topk_probabilities_normalized, axis=-1)\n    final_probabilities_rounded = np.round(final_probabilities, 4).tolist()\n    return final_probabilities_rounded"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    \"\"\"\n    Implement a Mixture-of-Experts (MoE) layer using softmax gating and top-k routing.\n    \n    Parameters:\n    x (np.ndarray): Input tensor of shape (batch_size, input_dim).\n    We (np.ndarray): Expert weight matrices of shape (n_experts, input_dim, output_dim).\n    Wg (np.ndarray): Gating weight matrix of shape (input_dim, n_experts).\n    n_experts (int): Number of experts.\n    top_k (int): Number of top experts to consider for each input token.\n    \n    Returns:\n    np.ndarray: Output tensor of shape (batch_size, output_dim).\n    \"\"\"\n    gating_scores = np.dot(x, Wg)\n    gating_probs = np.exp(gating_scores) / np.sum(np.exp(gating_scores), axis=-1, keepdims=True)\n    top_k_indices = np.argsort(gating_probs, axis=-1)[:, -top_k:]\n    top_k_probs = np.take_along_axis(gating_probs, top_k_indices, axis=-1)\n    top_k_probs_normalized = top_k_probs / np.sum(top_k_probs, axis=-1, keepdims=True)\n    expert_outputs = np.dot(x[:, None, :], We[top_k_indices]).squeeze()\n    weighted_outputs = expert_outputs * top_k_probs_normalized[..., None]\n    final_output = np.sum(weighted_outputs, axis=-2)\n    return np.round(final_output, 4).tolist()"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    \"\"\"\n    Perform Group Normalization on a 4D input tensor.\n    \n    Parameters:\n    X (np.ndarray): Input tensor of shape (B, C, H, W).\n    gamma (np.ndarray): Scale parameter tensor.\n    beta (np.ndarray): Shift parameter tensor.\n    num_groups (int): Number of groups to divide the channels into.\n    epsilon (float): Small value to avoid division by zero.\n    \n    Returns:\n    np.ndarray: Normalized tensor.\n    \"\"\"\n    (B, C, H, W) = X.shape\n    G = num_groups\n    assert C % G == 0, 'Number of channels must be divisible by number of groups.'\n    X = X.reshape(B, G, -1)\n    mean = np.mean(X, axis=2, keepdims=True)\n    var = np.var(X, axis=2, keepdims=True)\n    X_norm = (X - mean) / np.sqrt(var + epsilon)\n    X_norm = X_norm.reshape(B, C, H, W)\n    X_norm = gamma * X_norm + beta\n    X_norm = np.round(X_norm, decimals=4)\n    return X_norm.tolist()"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n    \"\"\"\n    Finds the minimum of the function f(x) = x^4 - 3x^3 + 2 starting from start_x using gradient descent.\n    \n    Parameters:\n    start_x (float): The starting point for the search.\n    learning_rate (float): The step size at each iteration while moving toward a minimum of the function.\n    tolerance (float): The minimum change in the value of x to continue the iterations.\n    max_iters (int): The maximum number of iterations to perform.\n    \n    Returns:\n    float: The value of x where the function reaches its minimum, rounded to 4 decimal places.\n    \"\"\"\n\n    def f(x):\n        return x ** 4 - 3 * x ** 3 + 2\n\n    def df(x):\n        return 4 * x ** 3 - 9 * x ** 2\n    x = start_x\n    for _ in range(max_iters):\n        gradient = df(x)\n        x -= learning_rate * gradient\n        if np.abs(gradient) < tolerance:\n            break\n    return round(x, 4)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    \"\"\"\n    Implements the Dynamic Tanh (DyT) function which is a normalization-free transformation.\n    It takes an array of input values and applies the DyT transformation with given parameters.\n    \n    Parameters:\n    x (np.ndarray): Input array of values.\n    alpha (float): Scaling parameter for the input.\n    gamma (float): Scaling parameter for the tanh output.\n    beta (float): Bias parameter for the tanh output.\n    \n    Returns:\n    list[float]: List of transformed values, rounded to the nearest 4th decimal.\n    \"\"\"\n    transformed = gamma * np.tanh(alpha * x) + beta\n    return np.round(transformed, 4).tolist()"}
