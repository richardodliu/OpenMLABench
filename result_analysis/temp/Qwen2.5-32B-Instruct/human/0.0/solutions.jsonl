{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    \"\"\"\n    Computes the dot product of a matrix and a vector.\n    \n    Parameters:\n    a (list of list of int/float): The matrix.\n    b (list of int/float): The vector.\n    \n    Returns:\n    list of int/float: The resulting vector if the operation is valid, or -1 if the dimensions are incompatible.\n    \"\"\"\n    if not a or len(a[0]) != len(b):\n        return -1\n    result = []\n    for row in a:\n        dot_product = sum((x * y for (x, y) in zip(row, b)))\n        result.append(dot_product)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"\n    Computes the transpose of a given matrix.\n    \n    Parameters:\n    a (list of list of int/float): The input matrix to be transposed.\n    \n    Returns:\n    list of list of int/float: The transposed matrix.\n    \"\"\"\n    return [[a[j][i] for j in range(len(a))] for i in range(len(a[0]))]"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    \"\"\"\n    Reshapes a given 2D list (matrix) into a specified shape using numpy.\n    If the reshape is not possible, returns an empty list.\n    \n    :param a: 2D list of integers or floats representing the matrix to reshape.\n    :param new_shape: A tuple of two integers representing the new shape (rows, columns).\n    :return: A reshaped 2D list if possible, otherwise an empty list.\n    \"\"\"\n    try:\n        np_array = np.array(a)\n        reshaped_array = np_array.reshape(new_shape)\n        return reshaped_array.tolist()\n    except ValueError:\n        return []"}
{"task_id": 4, "completion_id": 0, "solution": "import numpy as np\ndef calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    \"\"\"\n    Calculate the mean of a matrix either by row or by column.\n    \n    :param matrix: A list of lists where each sublist represents a row in the matrix.\n    :param mode: A string that specifies the mode of calculation. It can be 'row' or 'column'.\n    :return: A list of means according to the specified mode.\n    \"\"\"\n    if mode == 'row':\n        return [np.mean(row) for row in matrix]\n    elif mode == 'column':\n        transposed_matrix = np.array(matrix).T.tolist()\n        return [np.mean(column) for column in transposed_matrix]\n    else:\n        raise ValueError(\"Mode must be 'row' or 'column'.\")"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    \"\"\"\n    Multiplies each element of the given matrix by the scalar value and returns the resulting matrix.\n    \n    :param matrix: A 2D list of integers or floats representing the matrix.\n    :param scalar: An integer or float representing the scalar value.\n    :return: A 2D list representing the matrix after scalar multiplication.\n    \"\"\"\n    return [[element * scalar for element in row] for row in matrix]"}
{"task_id": 6, "completion_id": 0, "solution": "import numpy as np\ndef calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    \"\"\"\n    Calculate the eigenvalues of a 2x2 matrix and return them sorted from highest to lowest.\n    \n    :param matrix: A 2x2 matrix represented as a list of lists.\n    :return: A list of eigenvalues sorted from highest to lowest.\n    \"\"\"\n    np_matrix = np.array(matrix)\n    (eigenvalues, _) = np.linalg.eig(np_matrix)\n    sorted_eigenvalues = sorted(eigenvalues, reverse=True)\n    return [float(val) for val in sorted_eigenvalues]"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"\n    Transforms matrix A using the operation T^{-1}AS, where T and S are invertible matrices.\n    If T or S are not invertible, returns -1.\n    \"\"\"\n    try:\n        A_np = np.array(A)\n        T_np = np.array(T)\n        S_np = np.array(S)\n        np.linalg.inv(T_np)\n        np.linalg.inv(S_np)\n        transformed_matrix = np.linalg.inv(T_np) @ A_np @ S_np\n        transformed_matrix_rounded = np.round(transformed_matrix, 4).tolist()\n        return transformed_matrix_rounded\n    except np.linalg.LinAlgError:\n        return -1\nA = [[1, 2], [3, 4]]\nT = [[1, 0], [0, 1]]\nS = [[2, 0], [0, 2]]"}
{"task_id": 8, "completion_id": 0, "solution": "import numpy as np\ndef inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    \"\"\"\n    Calculate the inverse of a 2x2 matrix.\n    \n    Args:\n    matrix (list[list[float]]): A 2x2 matrix represented as a list of lists.\n    \n    Returns:\n    list[list[float]]: The inverse of the matrix if it exists, otherwise None.\n    \"\"\"\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    det = a * d - b * c\n    if det == 0:\n        return None\n    inv_matrix = [[d / det, -b / det], [-c / det, a / det]]\n    return inv_matrix"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]] | int:\n    \"\"\"\n    Multiplies two matrices a and b.\n    Returns the resulting matrix if multiplication is possible, otherwise returns -1.\n    \"\"\"\n    if len(a[0]) != len(b):\n        return -1\n    result = [[0 for _ in range(len(b[0]))] for _ in range(len(a))]\n    for i in range(len(a)):\n        for j in range(len(b[0])):\n            for k in range(len(b)):\n                result[i][j] += a[i][k] * b[k][j]\n    return result"}
{"task_id": 10, "completion_id": 0, "solution": "import numpy as np\ndef calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    \"\"\"\n    Calculate the covariance matrix for a given set of vectors.\n    \n    Parameters:\n    vectors (list of list of float): A list of lists where each inner list represents a feature with its observations.\n    \n    Returns:\n    list of list of float: The covariance matrix as a list of lists.\n    \"\"\"\n    data = np.array(vectors)\n    cov_matrix = np.cov(data, bias=True)\n    return cov_matrix.tolist()"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    \"\"\"\n    Solves a system of linear equations Ax = b using the Jacobi iterative method.\n    \n    Parameters:\n    A (np.ndarray): Coefficient matrix.\n    b (np.ndarray): Constant vector.\n    n (int): Number of iterations.\n    \n    Returns:\n    list: Approximate solution vector x.\n    \"\"\"\n    if A.shape[0] != A.shape[1]:\n        raise ValueError('Matrix A must be square.')\n    x = np.zeros_like(b)\n    for _ in range(n):\n        x_new = np.zeros_like(x)\n        for i in range(A.shape[0]):\n            s = np.dot(A[i, :], x) - A[i, i] * x[i]\n            x_new[i] = (b[i] - s) / A[i, i]\n        x_new = np.round(x_new, 4)\n        x = x_new\n    return x.tolist()\nA = np.array([[4, 1, 2], [3, 5, 1], [1, 1, 3]])\nb = np.array([4, 7, 3])\nn = 25"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    \"\"\"\n    Approximates the singular values of a 2x2 matrix A using an iterative method.\n    \n    Parameters:\n    A (np.ndarray): A 2x2 matrix.\n    \n    Returns:\n    tuple: A tuple containing the two singular values of the matrix A, rounded to 4 decimal places.\n    \"\"\"\n    if A.shape != (2, 2):\n        raise ValueError('Input matrix must be 2x2.')\n    ATA = np.dot(A.T, A)\n    eigenvalues = np.array([1.0, 1.0])\n    for _ in range(1000):\n        eigenvalues_new = np.array([np.sqrt(ATA[0, 0] + ATA[1, 1] + np.sqrt((ATA[0, 0] - ATA[1, 1]) ** 2 + 4 * ATA[0, 1] ** 2)), np.sqrt(ATA[0, 0] + ATA[1, 1] - np.sqrt((ATA[0, 0] - ATA[1, 1]) ** 2 + 4 * ATA[0, 1] ** 2))])\n        if np.allclose(eigenvalues, eigenvalues_new, atol=0.0001):\n            break\n        eigenvalues = eigenvalues_new\n    singular_values = np.sqrt(eigenvalues)\n    return tuple(np.round(singular_values, 4))\nA = np.array([[1, 2], [3, 4]])\nsingular_values = svd_2x2_singular_values(A)"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n    \"\"\"\n    Calculates the determinant of a 4x4 matrix using Laplace's Expansion.\n    \n    Args:\n    matrix (list of list of int/float): A 4x4 matrix represented as a list of lists.\n    \n    Returns:\n    float: The determinant of the matrix.\n    \"\"\"\n\n    def determinant_3x3(minor: list[list[int | float]]) -> float:\n        \"\"\"\n        Calculates the determinant of a 3x3 matrix.\n        \n        Args:\n        minor (list of list of int/float): A 3x3 matrix represented as a list of lists.\n        \n        Returns:\n        float: The determinant of the 3x3 matrix.\n        \"\"\"\n        return minor[0][0] * (minor[1][1] * minor[2][2] - minor[1][2] * minor[2][1]) - minor[0][1] * (minor[1][0] * minor[2][2] - minor[1][2] * minor[2][0]) + minor[0][2] * (minor[1][0] * minor[2][1] - minor[1][1] * minor[2][0])\n\n    def minor_matrix(matrix: list[list[int | float]], i: int, j: int) -> list[list[int | float]]:\n        \"\"\"\n        Returns the minor matrix obtained by removing the ith row and jth column from the matrix.\n        \n        Args:\n        matrix (list of list of int/float): The original matrix.\n        i (int): The row index to remove.\n        j (int): The column index to remove.\n        \n        Returns:\n        list of list of int/float: The minor matrix.\n        \"\"\"\n        return [row[:j] + row[j + 1:] for row in matrix[:i] + matrix[i + 1:]]\n    det = 0\n    for j in range(4):\n        det += (-1) ** j * matrix[0][j] * determinant_3x3(minor_matrix(matrix, 0, j))\n    return det\nmatrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    \"\"\"\n    Perform linear regression using the normal equation method.\n    \n    Parameters:\n    X (list of list of float): The feature matrix.\n    y (list of float): The target vector.\n    \n    Returns:\n    list of float: The coefficients of the linear regression model.\n    \"\"\"\n    X_np = np.array(X)\n    y_np = np.array(y)\n    X_np = np.c_[np.ones(X_np.shape[0]), X_np]\n    theta = np.linalg.inv(X_np.T.dot(X_np)).dot(X_np.T).dot(y_np)\n    theta_rounded = np.round(theta, 4)\n    return theta_rounded.tolist()\nX = [[1, 2], [3, 4], [5, 6]]\ny = [2, 4, 6]"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> list:\n    \"\"\"\n    Perform linear regression using gradient descent.\n    \n    Parameters:\n    X (np.ndarray): The input features with a column of ones for the intercept.\n    y (np.ndarray): The target values.\n    alpha (float): The learning rate.\n    iterations (int): The number of iterations to perform.\n    \n    Returns:\n    list: The coefficients of the linear regression model.\n    \"\"\"\n    m = len(y)\n    theta = np.zeros(X.shape[1])\n    for _ in range(iterations):\n        predictions = np.dot(X, theta)\n        errors = predictions - y\n        gradient = np.dot(X.T, errors) / m\n        theta -= alpha * gradient\n    return np.round(theta, 4).tolist()"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    \"\"\"\n    Perform feature scaling on a dataset using standardization and min-max normalization.\n    \n    Parameters:\n    data (np.ndarray): A 2D NumPy array where each row is a sample and each column is a feature.\n    \n    Returns:\n    tuple: A tuple containing two 2D lists. The first list contains data scaled by standardization,\n           and the second list contains data scaled by min-max normalization.\n    \"\"\"\n    standardized_data = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    min_vals = np.min(data, axis=0)\n    max_vals = np.max(data, axis=0)\n    normalized_data = (data - min_vals) / (max_vals - min_vals)\n    standardized_data = np.round(standardized_data, 4).tolist()\n    normalized_data = np.round(normalized_data, 4).tolist()\n    return (standardized_data, normalized_data)"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n    \"\"\"\n    Perform k-Means clustering on a list of points.\n    \n    Parameters:\n    - points: A list of points, where each point is a tuple of coordinates.\n    - k: An integer representing the number of clusters to form.\n    - initial_centroids: A list of initial centroid points, each a tuple of coordinates.\n    - max_iterations: An integer representing the maximum number of iterations to perform.\n    \n    Returns:\n    - A list of the final centroids of the clusters, each rounded to the nearest fourth decimal.\n    \"\"\"\n    points_array = np.array(points)\n    centroids_array = np.array(initial_centroids)\n    for _ in range(max_iterations):\n        distances = np.sqrt(((points_array - centroids_array[:, np.newaxis]) ** 2).sum(axis=2))\n        closest_centroid = np.argmin(distances, axis=0)\n        new_centroids = np.array([points_array[closest_centroid == i].mean(axis=0) for i in range(k)])\n        if np.all(centroids_array == new_centroids):\n            break\n        centroids_array = new_centroids\n    final_centroids = [tuple(np.round(centroid, 4)) for centroid in centroids_array]\n    return final_centroids\npoints = [(1.0, 2.0), (1.5, 1.8), (5.0, 8.0), (8.0, 8.0), (1.0, 0.6), (9.0, 11.0)]\nk = 2\ninitial_centroids = [(1.0, 2.0), (8.0, 8.0)]\nmax_iterations = 100\nfinal_centroids = k_means_clustering(points, k, initial_centroids, max_iterations)"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    \"\"\"\n    Splits the dataset into k folds for cross-validation and returns a list of train-test indices for each fold.\n    \n    Parameters:\n    X (np.ndarray): The feature matrix of the dataset.\n    y (np.ndarray): The target vector of the dataset.\n    k (int): The number of folds for cross-validation.\n    shuffle (bool): Whether to shuffle the dataset before splitting.\n    random_seed (int): The seed for the random number generator to ensure reproducibility.\n    \n    Returns:\n    list: A list of tuples, each containing the train and test indices for each fold.\n    \"\"\"\n    np.random.seed(random_seed)\n    n_samples = X.shape[0]\n    indices = np.arange(n_samples)\n    if shuffle:\n        np.random.shuffle(indices)\n    fold_size = n_samples // k\n    extra = n_samples % k\n    start = 0\n    splits = []\n    for i in range(k):\n        end = start + fold_size + (1 if i < extra else 0)\n        test_indices = indices[start:end]\n        train_indices = np.concatenate([indices[:start], indices[end:]])\n        splits.append((train_indices, test_indices))\n        start = end\n    return splits\nX = np.random.rand(100, 5)\ny = np.random.randint(0, 2, 100)\nsplits = k_fold_cross_validation(X, y, k=5, shuffle=True, random_seed=42)"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"\n    Perform Principal Component Analysis (PCA) on the given data.\n    \n    Parameters:\n    - data: A 2D NumPy array where each row is a sample and each column is a feature.\n    - k: The number of principal components to return.\n    \n    Returns:\n    - A list of lists, where each inner list represents a principal component (eigenvector).\n    \"\"\"\n    standardized_data = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    covariance_matrix = np.cov(standardized_data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eig(covariance_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    principal_components = sorted_eigenvectors[:, :k]\n    principal_components_list = [list(map(lambda x: round(x, 4), pc)) for pc in principal_components.T]\n    return principal_components_list"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n    \"\"\"\n    Builds a decision tree from the given examples and attributes.\n    \n    :param examples: A list of examples, where each example is a dictionary of attribute-value pairs.\n    :param attributes: A list of attribute names.\n    :param target_attr: The name of the target attribute for classification.\n    :return: A nested dictionary representing the decision tree.\n    \"\"\"\n    if len(set([example[target_attr] for example in examples])) == 1:\n        return examples[0][target_attr]\n    if not attributes:\n        return Counter([example[target_attr] for example in examples]).most_common(1)[0][0]\n    best_attr = choose_best_attribute(examples, attributes, target_attr)\n    tree = {best_attr: {}}\n    for value in set([example[best_attr] for example in examples]):\n        examples_subset = [example for example in examples if example[best_attr] == value]\n        if not examples_subset:\n            tree[best_attr][value] = Counter([example[target_attr] for example in examples]).most_common(1)[0][0]\n        else:\n            subtree = learn_decision_tree(examples_subset, [attr for attr in attributes if attr != best_attr], target_attr)\n            tree[best_attr][value] = subtree\n    return tree\ndef choose_best_attribute(examples: list[dict], attributes: list[str], target_attr: str) -> str:\n    \"\"\"\n    Chooses the best attribute to split on based on information gain.\n    \n    :param examples: A list of examples.\n    :param attributes: A list of attribute names.\n    :param target_attr: The name of the target attribute.\n    :return: The name of the best attribute to split on.\n    \"\"\"\n    base_entropy = calculate_entropy([example[target_attr] for example in examples])\n    max_info_gain = -1\n    best_attr = None\n    for attribute in attributes:\n        new_entropy = 0\n        for value in set([example[attribute] for example in examples]):\n            examples_subset = [example for example in examples if example[attribute] == value]\n            probability = len(examples_subset) / float(len(examples))\n            new_entropy += probability * calculate_entropy([example[target_attr] for example in examples_subset])\n        info_gain = base_entropy - new_entropy\n        if info_gain > max_info_gain:\n            max_info_gain = info_gain\n            best_attr = attribute\n    return best_attr\ndef calculate_entropy(values: list) -> float:\n    \"\"\"\n    Calculates the entropy of a list of values.\n    \n    :param values: A list of values.\n    :return: The entropy of the values.\n    \"\"\"\n    counter = Counter(values)\n    probabilities = [count / len(values) for count in counter.values()]\n    entropy = sum([-p * math.log2(p) for p in probabilities])\n    return entropy\nexamples = [{'outlook': 'sunny', 'temperature': 'hot', 'humidity': 'high', 'wind': 'weak', 'play': 'no'}, {'outlook': 'sunny', 'temperature': 'hot', 'humidity': 'high', 'wind': 'strong', 'play': 'no'}, {'outlook': 'overcast', 'temperature': 'hot', 'humidity': 'high', 'wind': 'weak', 'play': 'yes'}, {'outlook': 'rain', 'temperature': 'mild', 'humidity': 'high', 'wind': 'weak', 'play': 'yes'}, {'outlook': 'rain', 'temperature': 'cool', 'humidity': 'normal', 'wind': 'weak', 'play': 'yes'}, {'outlook': 'rain', 'temperature': 'cool', 'humidity': 'normal', 'wind': 'strong', 'play': 'no'}, {'outlook': 'overcast', 'temperature': 'cool', 'humidity': 'normal', 'wind': 'strong', 'play': 'yes'}, {'outlook': 'sunny', 'temperature': 'mild', 'humidity': 'high', 'wind': 'weak', 'play': 'no'}, {'outlook': 'sunny', 'temperature': 'cool', 'humidity': 'normal', 'wind': 'weak', 'play': 'yes'}, {'outlook': 'rain', 'temperature': 'mild', 'humidity': 'normal', 'wind': 'weak', 'play': 'yes'}, {'outlook': 'sunny', 'temperature': 'mild', 'humidity': 'normal', 'wind': 'strong', 'play': 'yes'}, {'outlook': 'overcast', 'temperature': 'mild', 'humidity': 'high', 'wind': 'strong', 'play': 'yes'}, {'outlook': 'overcast', 'temperature': 'hot', 'humidity': 'normal', 'wind': 'weak', 'play': 'yes'}, {'outlook': 'rain', 'temperature': 'mild', 'humidity': 'high', 'wind': 'strong', 'play': 'no'}]\nattributes = ['outlook', 'temperature', 'humidity', 'wind']\ntarget_attr = 'play'\ntree = learn_decision_tree(examples, attributes, target_attr)"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef kernel_matrix(data, kernel='linear', sigma=1.0):\n    n_samples = data.shape[0]\n    K = np.zeros((n_samples, n_samples))\n    if kernel == 'linear':\n        K = np.dot(data, data.T)\n    elif kernel == 'rbf':\n        for i in range(n_samples):\n            for j in range(n_samples):\n                diff = data[i] - data[j]\n                K[i, j] = np.exp(-np.dot(diff, diff) / (2 * sigma ** 2))\n    return K\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    (n_samples, n_features) = data.shape\n    alphas = np.zeros(n_samples)\n    bias = 0.0\n    K = kernel_matrix(data, kernel, sigma)\n    for t in range(1, iterations + 1):\n        lambda_t = 1.0 / (lambda_val * t)\n        for i in range(n_samples):\n            prediction = np.sum(alphas * labels * K[:, i]) + bias\n            condition = labels[i] * prediction < 1\n            eta = 1.0 / (lambda_val * t)\n            alphas[i] = (1 - eta * lambda_val) * alphas[i] + (eta if condition else 0)\n            bias += eta * (labels[i] - prediction) if condition else 0\n    alphas_rounded = np.round(alphas, 4).tolist()\n    bias_rounded = np.round(bias, 4)\n    return (alphas_rounded, bias_rounded)"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    \"\"\"\n    Computes the sigmoid activation function for a given input z.\n    \n    Args:\n    z (float): The input value to the sigmoid function.\n    \n    Returns:\n    float: The output of the sigmoid function, rounded to four decimal places.\n    \"\"\"\n    return round(1 / (1 + math.exp(-z)), 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    \"\"\"\n    Computes the softmax of the given list of scores.\n    \n    Args:\n    scores (list of float): A list of scores.\n    \n    Returns:\n    list of float: A list of softmax values for each score, rounded to four decimal places.\n    \"\"\"\n    exp_scores = [math.exp(score) for score in scores]\n    sum_exp_scores = sum(exp_scores)\n    softmax_values = [round(exp_score / sum_exp_scores, 4) for exp_score in exp_scores]\n    return softmax_values\nscores = [1.0, 2.0, 3.0]"}
{"task_id": 24, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    \"\"\"\n    Simulates a single neuron with a sigmoid activation function for binary classification.\n    \n    :param features: A list of feature vectors, each representing multiple features for an example.\n    :param labels: A list of true binary labels.\n    :param weights: A list of weights, one for each feature.\n    :param bias: A float representing the bias term.\n    :return: A tuple containing a list of predicted probabilities and the mean squared error.\n    \"\"\"\n\n    def sigmoid(x):\n        return 1 / (1 + math.exp(-x))\n    predictions = []\n    for feature_vector in features:\n        weighted_sum = sum((w * f for (w, f) in zip(weights, feature_vector))) + bias\n        prediction = sigmoid(weighted_sum)\n        predictions.append(prediction)\n    mse = np.mean((np.array(predictions) - np.array(labels)) ** 2)\n    predictions = [round(pred, 4) for pred in predictions]\n    mse = round(mse, 4)\n    return (predictions, mse)\nfeatures = [[0.5, 0.3], [0.2, 0.8], [0.9, 0.1]]\nlabels = [1, 0, 1]\nweights = [0.4, 0.6]\nbias = 0.2"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x: np.ndarray) -> np.ndarray:\n    \"\"\"Compute the sigmoid of x element-wise.\"\"\"\n    return 1 / (1 + np.exp(-x))\ndef sigmoid_derivative(x: np.ndarray) -> np.ndarray:\n    \"\"\"Compute the derivative of the sigmoid function.\"\"\"\n    return sigmoid(x) * (1 - sigmoid(x))\ndef mean_squared_error(y_true: np.ndarray, y_pred: np.ndarray) -> float:\n    \"\"\"Compute the mean squared error between true and predicted values.\"\"\"\n    return np.mean((y_true - y_pred) ** 2)\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    weights = initial_weights\n    bias = initial_bias\n    mse_values = []\n    for _ in range(epochs):\n        z = np.dot(features, weights) + bias\n        predictions = sigmoid(z)\n        mse = mean_squared_error(labels, predictions)\n        mse_values.append(round(mse, 4))\n        error = predictions - labels\n        derivative = sigmoid_derivative(z)\n        gradient_weights = np.dot(features.T, error * derivative)\n        gradient_bias = np.sum(error * derivative)\n        weights -= learning_rate * gradient_weights\n        bias -= learning_rate * gradient_bias\n    return (weights.tolist(), round(bias, 4), mse_values)\nfeatures = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\nlabels = np.array([0, 1, 1, 0])\ninitial_weights = np.array([0.5, -0.5])\ninitial_bias = 0.0\nlearning_rate = 0.1\nepochs = 1000"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data + other.data, (self, other), '+')\n\n        def _backward():\n            self.grad += out.grad\n            other.grad += out.grad\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data * other.data, (self, other), '*')\n\n        def _backward():\n            self.grad += other.data * out.grad\n            other.grad += self.data * out.grad\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')\n\n        def _backward():\n            self.grad += (out.data > 0) * out.grad\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1\n        for node in reversed(topo):\n            node._backward()"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    \"\"\"\n    Computes the transformation matrix P from basis B to C.\n    \n    Parameters:\n    B (list of list of int): Basis vectors in basis B.\n    C (list of list of int): Basis vectors in basis C.\n    \n    Returns:\n    list of list of float: The transformation matrix P from basis B to C.\n    \"\"\"\n    B_matrix = np.array(B)\n    C_matrix = np.array(C)\n    C_inv = np.linalg.inv(C_matrix)\n    P = np.dot(C_inv, B_matrix)\n    P_rounded = np.round(P, 4)\n    return P_rounded.tolist()\nB = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\nC = [[1, 1, 0], [1, 0, 1], [0, 1, 1]]"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    \"\"\"\n    Computes the SVD of a 2x2 matrix A using eigenvalues and eigenvectors.\n    \n    Parameters:\n    A (np.ndarray): A 2x2 matrix.\n    \n    Returns:\n    tuple: A tuple containing U, S, and V matrices of the SVD.\n    \"\"\"\n    ATA = np.dot(A.T, A)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(ATA)\n    singular_values = np.sqrt(eigenvalues)\n    S = np.diag(singular_values)\n    V = eigenvectors\n    U = np.zeros_like(A)\n    for i in range(2):\n        if singular_values[i] != 0:\n            U[:, i] = np.dot(A, V[:, i]) / singular_values[i]\n    U = np.round(U, 4)\n    S = np.round(S, 4)\n    V = np.round(V, 4)\n    return (U.tolist(), S.tolist(), V.tolist())\nA = np.array([[1, 2], [3, 4]])"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    \"\"\"\n    Randomly shuffles the rows of two numpy arrays, X and y, maintaining their correspondence.\n    \n    Parameters:\n    - X: numpy array, first array to be shuffled.\n    - y: numpy array, second array to be shuffled.\n    - seed: int, optional random seed integer for reproducibility.\n    \n    Returns:\n    - Shuffled X and y as python lists.\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        raise ValueError('X and y must have the same number of rows')\n    if seed is not None:\n        np.random.seed(seed)\n    permutation = np.random.permutation(X.shape[0])\n    shuffled_X = X[permutation]\n    shuffled_y = y[permutation]\n    return (shuffled_X.tolist(), shuffled_y.tolist())"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    \"\"\"\n    Generates batches of data from X and y.\n    \n    Parameters:\n    X (np.ndarray): The input data.\n    y (np.ndarray, optional): The target data. Defaults to None.\n    batch_size (int): The size of each batch. Defaults to 64.\n    \n    Yields:\n    tuple or list: If y is not None, yields a tuple (batch_X, batch_y), \n                   otherwise yields a list batch_X.\n    \"\"\"\n    assert type(X) == np.ndarray, 'X must be a numpy array'\n    if y is not None:\n        assert type(y) == np.ndarray, 'y must be a numpy array'\n        assert X.shape[0] == y.shape[0], 'X and y must have the same number of samples'\n    num_samples = X.shape[0]\n    for start in range(0, num_samples, batch_size):\n        end = min(start + batch_size, num_samples)\n        batch_X = X[start:end].tolist()\n        if y is not None:\n            batch_y = y[start:end].tolist()\n            yield (batch_X, batch_y)\n        else:\n            yield batch_X"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    \"\"\"\n    Divides the dataset X based on whether the value of the feature at index feature_i\n    is greater than or equal to the threshold.\n    \n    Parameters:\n    X (np.ndarray): The dataset to be divided.\n    feature_i (int): The index of the feature to divide the dataset on.\n    threshold (float): The threshold value to compare the feature values against.\n    \n    Returns:\n    tuple: A tuple containing two lists. The first list contains samples where the feature value\n           is greater than or equal to the threshold, and the second list contains the rest.\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    subset1 = X[X[:, feature_i] >= threshold].tolist()\n    subset2 = X[X[:, feature_i] < threshold].tolist()\n    return (subset1, subset2)"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    \"\"\"\n    Generate a new feature matrix consisting of all polynomial combinations of the features\n    with degree less than or equal to the specified degree. For example, if an input sample is\n    two dimensional and of the form [a, b], the degree-2 polynomial features are [1, a, b, a^2, ab, b^2].\n    \n    Parameters:\n    X : numpy array of shape (n_samples, n_features)\n        The input samples.\n    degree : int\n        The degree of the polynomial features.\n    \n    Returns:\n    numpy array of shape (n_samples, new_n_features)\n        The matrix of polynomial features.\n    \"\"\"\n    if X.ndim == 1:\n        X = X[:, np.newaxis]\n    (n_samples, n_features) = X.shape\n    new_features = []\n    for d in range(degree + 1):\n        for comb in combinations_with_replacement(range(n_features), d):\n            if len(comb) == 0:\n                new_features.append(np.ones(n_samples))\n            else:\n                new_feature = np.prod([X[:, i] ** comb.count(i) for i in range(n_features)], axis=0)\n                new_features.append(new_feature)\n    return np.column_stack(new_features).tolist()\nX = np.array([[1, 2], [3, 4]])\ndegree = 2"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    \"\"\"\n    Generate a list of n_subsets random subsets of the dataset (X, y).\n    \n    Parameters:\n    X (np.ndarray): 2D numpy array representing the dataset features.\n    y (np.ndarray): 1D numpy array representing the dataset labels.\n    n_subsets (int): Number of subsets to generate.\n    replacements (bool): Whether to generate subsets with replacements.\n    seed (int): Random seed for reproducibility.\n    \n    Returns:\n    list: A list of n_subsets tuples, each containing a subset of X and y.\n    \"\"\"\n    np.random.seed(seed)\n    subsets = []\n    n_samples = X.shape[0]\n    for _ in range(n_subsets):\n        if replacements:\n            indices = np.random.choice(n_samples, n_samples, replace=True)\n        else:\n            indices = np.random.choice(n_samples, n_samples, replace=False)\n        X_subset = X[indices]\n        y_subset = y[indices]\n        subsets.append((X_subset.tolist(), y_subset.tolist()))\n    return subsets"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    \"\"\"\n    Perform one-hot encoding on a 1D numpy array of integer values.\n    \n    Parameters:\n    x (np.array): 1D numpy array of integer values.\n    n_col (int, optional): Number of columns for the one-hot encoded array. If not provided, it will be determined from the input array.\n    \n    Returns:\n    list: A list of lists representing the one-hot encoded array.\n    \"\"\"\n    if n_col is None:\n        n_col = np.max(x) + 1\n    one_hot = np.eye(n_col)[x]\n    return one_hot.tolist()\nx = np.array([0, 1, 2, 1, 3])"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    \"\"\"\n    Converts a 1D numpy array into a diagonal matrix.\n    \n    Parameters:\n    x (np.array): 1D numpy array\n    \n    Returns:\n    list: 2D list representing the diagonal matrix\n    \"\"\"\n    x = np.array(x)\n    diagonal_matrix = np.diag(x)\n    return diagonal_matrix.tolist()\nx = np.array([1, 2, 3])"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    \"\"\"\n    Calculate the accuracy score given true labels and predicted labels.\n    \n    Parameters:\n    y_true (numpy.ndarray): 1D array of true labels.\n    y_pred (numpy.ndarray): 1D array of predicted labels.\n    \n    Returns:\n    float: The accuracy score, rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(y_true, np.ndarray) or not isinstance(y_pred, np.ndarray):\n        raise ValueError('y_true and y_pred must be numpy arrays.')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('y_true and y_pred must have the same shape.')\n    accuracy = np.mean(y_true == y_pred)\n    return round(accuracy, 4)"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    \"\"\"\n    Calculate the correlation matrix for a given dataset.\n    \n    Parameters:\n    X (numpy.ndarray): A 2D numpy array.\n    Y (numpy.ndarray, optional): A 2D numpy array. If not provided, Y is set to X.\n    \n    Returns:\n    list: A 2D list representing the correlation matrix, rounded to 4 decimal places.\n    \"\"\"\n    if Y is None:\n        Y = X\n    X_centered = X - np.mean(X, axis=0)\n    Y_centered = Y - np.mean(Y, axis=0)\n    cov_matrix = np.dot(X_centered.T, Y_centered)\n    X_std = np.std(X, axis=0, keepdims=True)\n    Y_std = np.std(Y, axis=0, keepdims=True)\n    correlation_matrix = cov_matrix / (X_std.T * Y_std)\n    return np.round(correlation_matrix, 4).tolist()\nX = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nY = np.array([[10, 11, 12], [13, 14, 15], [16, 17, 18]])"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_fit(X, y, n_clf):\n    (n_samples, n_features) = X.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    classifiers = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_clf = None\n        for feature in range(n_features):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                pred = np.where(X[:, feature] > threshold, 1, -1)\n                error = np.sum(weights * (pred != y))\n                if error < min_error:\n                    min_error = error\n                    best_clf = {'feature': feature, 'threshold': threshold, 'error': error}\n        alpha = 0.5 * np.log((1 - min_error) / min_error)\n        pred = np.where(X[:, best_clf['feature']] > best_clf['threshold'], 1, -1)\n        weights *= np.exp(-alpha * y * pred)\n        weights /= np.sum(weights)\n        best_clf['alpha'] = round(alpha, 4)\n        classifiers.append(best_clf)\n    return classifiers\nX = np.array([[0, 1], [1, 1], [2, 0], [3, 0]])\ny = np.array([1, 1, -1, -1])\nn_clf = 2"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list):\n    \"\"\"\n    Computes the log-softmax of a given list of scores.\n    \n    The log-softmax function is defined as:\n    log_softmax(x_i) = x_i - log(sum(exp(x_j) for all j))\n    \n    Args:\n    scores (list): A list of scores.\n    \n    Returns:\n    list: A list of log-softmax values for each score, rounded to 4 decimal places.\n    \"\"\"\n    scores = np.array(scores)\n    max_score = np.max(scores)\n    scores -= max_score\n    exp_scores = np.exp(scores)\n    sum_exp_scores = np.sum(exp_scores)\n    log_sum_exp_scores = np.log(sum_exp_scores)\n    log_softmax_scores = scores - log_sum_exp_scores\n    return np.round(log_softmax_scores, 4).tolist()\nscores = [1.0, 2.0, 3.0]"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport math\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.optimizer = None\n\n    def initialize(self, optimizer):\n        input_shape = self.input_shape\n        limit = 1 / math.sqrt(input_shape[0])\n        self.W = np.random.uniform(-limit, limit, (input_shape[0], self.n_units))\n        self.w0 = np.zeros((1, self.n_units))\n        self.optimizer = copy.copy(optimizer)\n\n    def parameters(self):\n        return np.prod(self.W.shape) + np.prod(self.w0.shape)\n\n    def forward_pass(self, X, training):\n        self.layer_input = X\n        return X.dot(self.W) + self.w0\n\n    def backward_pass(self, accum_grad):\n        w = self.W\n        if self.trainable:\n            grad_w = self.layer_input.T.dot(accum_grad)\n            grad_w0 = np.sum(accum_grad, axis=0, keepdims=True)\n            self.optimizer.update(self.W, grad_w)\n            self.optimizer.update(self.w0, grad_w0)\n        accum_grad = accum_grad.dot(w.T)\n        return accum_grad\n\n    def output_shape(self):\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    \"\"\"\n    Applies a 2D convolution on the input_matrix using the given kernel, padding, and stride.\n    \n    Parameters:\n    input_matrix (np.ndarray): The input matrix to apply the convolution on.\n    kernel (np.ndarray): The convolutional kernel.\n    padding (int): The padding to be applied to the input matrix.\n    stride (int): The stride to be used during the convolution.\n    \n    Returns:\n    list: The result of the convolution as a list.\n    \"\"\"\n    padded_input = np.pad(input_matrix, padding, mode='constant')\n    (input_h, input_w) = input_matrix.shape\n    (kernel_h, kernel_w) = kernel.shape\n    output_h = (input_h + 2 * padding - kernel_h) // stride + 1\n    output_w = (input_w + 2 * padding - kernel_w) // stride + 1\n    output_matrix = np.zeros((output_h, output_w))\n    for i in range(0, output_h):\n        for j in range(0, output_w):\n            row = i * stride\n            col = j * stride\n            output_matrix[i, j] = np.sum(padded_input[row:row + kernel_h, col:col + kernel_w] * kernel)\n    output_matrix = np.round(output_matrix, 4)\n    return output_matrix.tolist()\ninput_matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nkernel = np.array([[1, 0], [0, 1]])\npadding = 1\nstride = 1"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    \"\"\"\n    Implements the Rectified Linear Unit (ReLU) activation function.\n    \n    Parameters:\n    z (float): The input value to the ReLU function.\n    \n    Returns:\n    float: The output of the ReLU function, which is z if z > 0, otherwise 0.\n    \"\"\"\n    return max(0, z)"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    \"\"\"\n    Calculate the Ridge Regression loss given the feature matrix, coefficients, true labels, and regularization parameter.\n    \n    Parameters:\n    X (np.ndarray): 2D numpy array representing the feature matrix.\n    w (np.ndarray): 1D numpy array representing the coefficients.\n    y_true (np.ndarray): 1D numpy array representing the true labels.\n    alpha (float): Regularization parameter.\n    \n    Returns:\n    float: The Ridge loss value.\n    \"\"\"\n    y_pred = X @ w\n    mse = np.mean((y_true - y_pred) ** 2)\n    reg_term = alpha * np.sum(w ** 2)\n    ridge_loss = mse + reg_term\n    return round(ridge_loss, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float:\n    \"\"\"\n    Implements the Leaky Rectified Linear Unit (Leaky ReLU) activation function.\n    \n    Parameters:\n    z (float): The input value to the Leaky ReLU function.\n    alpha (float): The slope for the negative part of the function. Default is 0.01.\n    \n    Returns:\n    float: The output of the Leaky ReLU function.\n    \"\"\"\n    return max(alpha * z, z)"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    \"\"\"\n    Computes the linear kernel between two vectors x1 and x2.\n    \n    Parameters:\n    x1 (np.array): The first input vector.\n    x2 (np.array): The second input vector.\n    \n    Returns:\n    float: The linear kernel value which is the dot product of x1 and x2.\n    \"\"\"\n    return np.dot(x1, x2)\nx1 = np.array([1, 2, 3])\nx2 = np.array([4, 5, 6])"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    \"\"\"\n    Calculate the precision metric given true binary labels and predicted binary labels.\n    \n    Parameters:\n    y_true (numpy.ndarray): An array of true binary labels.\n    y_pred (numpy.ndarray): An array of predicted binary labels.\n    \n    Returns:\n    float: The precision value.\n    \"\"\"\n    if y_true.shape != y_pred.shape:\n        raise ValueError('y_true and y_pred must have the same shape')\n    true_positives = np.sum((y_true == 1) & (y_pred == 1))\n    predicted_positives = np.sum(y_pred == 1)\n    if predicted_positives == 0:\n        return 1.0\n    precision_value = true_positives / predicted_positives\n    return precision_value\ny_true = np.array([1, 0, 1, 1, 0, 1])\ny_pred = np.array([1, 1, 1, 0, 0, 1])"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    \"\"\"\n    Perform gradient descent using Mean Squared Error (MSE) as the loss function.\n    \n    Parameters:\n    X (np.ndarray): The input features.\n    y (np.ndarray): The target values.\n    weights (np.ndarray): The initial weights.\n    learning_rate (float): The learning rate for the gradient descent.\n    n_iterations (int): The number of iterations to perform.\n    batch_size (int): The size of the batch for mini-batch and stochastic gradient descent.\n    method (str): The type of gradient descent to perform ('batch', 'stochastic', 'mini-batch').\n    \n    Returns:\n    list: The final weights after performing gradient descent.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    for _ in range(n_iterations):\n        if method == 'stochastic':\n            for i in range(n_samples):\n                random_index = np.random.randint(n_samples)\n                xi = X[random_index:random_index + 1]\n                yi = y[random_index:random_index + 1]\n                prediction = np.dot(xi, weights)\n                error = prediction - yi\n                gradient = 2 * xi.T.dot(error)\n                weights -= learning_rate * gradient\n        elif method == 'mini-batch':\n            for i in range(0, n_samples, batch_size):\n                xi = X[i:i + batch_size]\n                yi = y[i:i + batch_size]\n                prediction = np.dot(xi, weights)\n                error = prediction - yi\n                gradient = 2 * xi.T.dot(error)\n                weights -= learning_rate * gradient / batch_size\n        else:\n            prediction = np.dot(X, weights)\n            error = prediction - y\n            gradient = 2 * X.T.dot(error)\n            weights -= learning_rate * gradient / n_samples\n    return np.round(weights, 4).tolist()\nX = np.array([[1, 1], [1, 2], [2, 2], [2, 3]])\ny = np.dot(X, np.array([1, 2])) + 3\nweights = np.array([0.0, 0.0])\nlearning_rate = 0.01\nn_iterations = 1000\nbatch_size = 2"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    \"\"\"\n    Converts a given matrix into its Reduced Row Echelon Form (RREF).\n    \n    Parameters:\n    matrix (list of lists): The input matrix to be converted into RREF.\n    \n    Returns:\n    list of lists: The RREF of the input matrix.\n    \"\"\"\n    mat = np.array(matrix, dtype=float)\n    (rows, cols) = mat.shape\n    lead = 0\n    for r in range(rows):\n        if cols <= lead:\n            return mat.tolist()\n        i = r\n        while mat[i, lead] == 0:\n            i += 1\n            if rows == i:\n                i = r\n                lead += 1\n                if cols == lead:\n                    return mat.tolist()\n        mat[[i, r]] = mat[[r, i]]\n        mat[r] = mat[r] / mat[r, lead]\n        for i in range(rows):\n            if i != r:\n                mat[i] = mat[i] - mat[i, lead] * mat[r]\n        lead += 1\n    return mat.tolist()"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=1000):\n    \"\"\"\n    Implements the Adam optimization algorithm to update the parameters of a given function.\n    \n    Parameters:\n    f (function): The objective function to be optimized.\n    grad (function): A function that computes the gradient of f.\n    x0 (numpy array): Initial parameter values.\n    learning_rate (float): The step size.\n    beta1 (float): Exponential decay rate for the first moment estimates.\n    beta2 (float): Exponential decay rate for the second moment estimates.\n    epsilon (float): A small constant for numerical stability.\n    num_iterations (int): Number of iterations to run the optimizer.\n    \n    Returns:\n    list: The optimized parameters.\n    \"\"\"\n    m = np.zeros_like(x0)\n    v = np.zeros_like(x0)\n    t = 0\n    for _ in range(num_iterations):\n        t += 1\n        g = grad(x0)\n        m = beta1 * m + (1 - beta1) * g\n        v = beta2 * v + (1 - beta2) * g ** 2\n        m_hat = m / (1 - beta1 ** t)\n        v_hat = v / (1 - beta2 ** t)\n        x0 -= learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    return np.round(x0, 4).tolist()"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    \"\"\"\n    Implements Lasso Regression using Gradient Descent with L1 regularization.\n    \n    Parameters:\n    X (np.array): The input features.\n    y (np.array): The target values.\n    alpha (float): The regularization parameter.\n    learning_rate (float): The learning rate for gradient descent.\n    max_iter (int): The maximum number of iterations for gradient descent.\n    tol (float): The tolerance for stopping criteria.\n    \n    Returns:\n    tuple: A tuple containing the learned weights and bias.\n    \"\"\"\n    (m, n) = X.shape\n    weights = np.zeros(n)\n    bias = 0\n    prev_cost = np.inf\n    for _ in range(max_iter):\n        y_pred = np.dot(X, weights) + bias\n        loss = y_pred - y\n        dw = 1 / m * np.dot(X.T, loss) + alpha * np.sign(weights)\n        db = 1 / m * np.sum(loss)\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n        cost = 1 / (2 * m) * np.sum(loss ** 2) + alpha / m * np.sum(np.abs(weights))\n        if np.abs(prev_cost - cost) < tol:\n            break\n        prev_cost = cost\n    return (np.round(weights, 4).tolist(), np.round(bias, 4).tolist())"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    \"\"\"\n    Calculates the Optimal String Alignment (OSA) distance between two strings.\n    The OSA distance is the minimum number of edits (insert, delete, substitute, transpose)\n    required to transform one string into another.\n    \"\"\"\n    (len_source, len_target) = (len(source), len(target))\n    dp = np.zeros((len_source + 1, len_target + 1), dtype=int)\n    for i in range(len_source + 1):\n        dp[i][0] = i\n    for j in range(len_target + 1):\n        dp[0][j] = j\n    for i in range(1, len_source + 1):\n        for j in range(1, len_target + 1):\n            if source[i - 1] == target[j - 1]:\n                cost = 0\n            else:\n                cost = 1\n            dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + cost)\n            if i > 1 and j > 1 and (source[i - 1] == target[j - 2]) and (source[i - 2] == target[j - 1]):\n                dp[i][j] = min(dp[i][j], dp[i - 2][j - 2] + cost)\n    return dp[len_source][len_target]\nsource = 'caper'\ntarget = 'acer'"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    \"\"\"\n    Calculate the recall metric for binary classification.\n    \n    Parameters:\n    y_true (list): The true binary labels.\n    y_pred (list): The predicted binary labels.\n    \n    Returns:\n    float: The recall value rounded to three decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    TP = np.sum((y_true == 1) & (y_pred == 1))\n    FN = np.sum((y_true == 1) & (y_pred == 0))\n    if TP + FN == 0:\n        return 0.0\n    recall_value = TP / (TP + FN)\n    return round(recall_value, 3)\ny_true = [1, 0, 1, 1, 0, 1]\ny_pred = [1, 0, 1, 0, 0, 1]"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    \"\"\"\n    Implement the self-attention mechanism.\n    \n    Parameters:\n    X (numpy.ndarray): Input sequence of shape (seq_length, d_model).\n    W_q (numpy.ndarray): Query weight matrix of shape (d_model, d_k).\n    W_k (numpy.ndarray): Key weight matrix of shape (d_model, d_k).\n    W_v (numpy.ndarray): Value weight matrix of shape (d_model, d_v).\n    \n    Returns:\n    numpy.ndarray: The output of the self-attention mechanism, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    attention_scores = np.dot(Q, K.T) / np.sqrt(W_q.shape[1])\n    attention_weights = np.exp(attention_scores) / np.sum(np.exp(attention_scores), axis=-1, keepdims=True)\n    output = np.dot(attention_weights, V)\n    return np.round(output, 4).tolist()"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    \"\"\"\n    Implements a simple RNN cell to process a sequence of input vectors and produce the final hidden state.\n    \n    Parameters:\n    - input_sequence: A list of input vectors (each a list of floats).\n    - initial_hidden_state: The initial hidden state (a list of floats).\n    - Wx: Weight matrix for input-to-hidden connections (a list of lists of floats).\n    - Wh: Weight matrix for hidden-to-hidden connections (a list of lists of floats).\n    - b: Bias vector (a list of floats).\n    \n    Returns:\n    - The final hidden state after processing the entire sequence, rounded to four decimal places.\n    \"\"\"\n    input_sequence = np.array(input_sequence)\n    initial_hidden_state = np.array(initial_hidden_state)\n    Wx = np.array(Wx)\n    Wh = np.array(Wh)\n    b = np.array(b)\n    hidden_state = initial_hidden_state\n    for x in input_sequence:\n        hidden_state = np.tanh(np.dot(x, Wx) + np.dot(hidden_state, Wh) + b)\n    final_hidden_state = np.round(hidden_state, 4).tolist()\n    return final_hidden_state\ninput_sequence = [[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]]\ninitial_hidden_state = [0.0, 0.0]\nWx = [[0.1, 0.2], [0.3, 0.4]]\nWh = [[0.5, 0.6], [0.7, 0.8]]\nb = [0.1, 0.1]"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    \"\"\"\n    Applies a 2D translation matrix to a set of points.\n    \n    Parameters:\n    points (list of lists): A list of [x, y] coordinates.\n    tx (float): Translation distance in the x direction.\n    ty (float): Translation distance in the y direction.\n    \n    Returns:\n    list: A new list of points after applying the translation matrix.\n    \"\"\"\n    points_array = np.array(points)\n    translation_matrix = np.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])\n    ones_column = np.ones(points_array.shape[0]).reshape(-1, 1)\n    points_array_with_ones = np.hstack((points_array, ones_column))\n    translated_points_array = np.dot(translation_matrix, points_array_with_ones.T).T\n    translated_points = translated_points_array[:, :2].tolist()\n    return translated_points"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    Computes the Kullback-Leibler divergence between two normal distributions.\n    \n    Parameters:\n    mu_p (float): Mean of the first normal distribution P.\n    sigma_p (float): Standard deviation of the first normal distribution P.\n    mu_q (float): Mean of the second normal distribution Q.\n    sigma_q (float): Standard deviation of the second normal distribution Q.\n    \n    Returns:\n    float: The KL divergence between the two normal distributions.\n    \"\"\"\n    if sigma_p <= 0 or sigma_q <= 0:\n        raise ValueError('Standard deviations must be positive.')\n    term1 = np.log(sigma_q / sigma_p)\n    term2 = (sigma_p ** 2 + (mu_p - mu_q) ** 2) / (2 * sigma_q ** 2)\n    term3 = -0.5\n    kl_div = term1 + term2 + term3\n    return kl_div\nmu_p = 0\nsigma_p = 1\nmu_q = 1\nsigma_q = 2"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    \"\"\"\n    Solves a system of linear equations using the Gauss-Seidel method.\n    \n    Parameters:\n    A (np.array): Coefficient matrix.\n    b (np.array): Right-hand side vector.\n    n (int): Number of iterations.\n    x_ini (np.array, optional): Initial guess for the solution vector. Defaults to None.\n    \n    Returns:\n    list: The approximated solution vector after n iterations.\n    \"\"\"\n    A = np.array(A)\n    b = np.array(b)\n    size = A.shape[0]\n    if x_ini is None:\n        x = np.zeros(size)\n    else:\n        x = np.array(x_ini)\n    for _ in range(n):\n        for i in range(size):\n            s = 0\n            for j in range(i):\n                s += A[i][j] * x[j]\n            for j in range(i + 1, size):\n                s += A[i][j] * x[j]\n            x[i] = (b[i] - s) / A[i][i]\n    return np.round(x, 4).tolist()\nA = [[4, 1, 2], [3, 5, 1], [1, 1, 3]]\nb = [4, 7, 3]\nn = 25\nx_ini = [1, 1, 1]"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    \"\"\"\n    Solves the linear system Ax = b using Gaussian Elimination with partial pivoting.\n    \n    Parameters:\n    A (np.array): Coefficient matrix.\n    b (np.array): Constant terms.\n    \n    Returns:\n    list: Solution vector x as a list.\n    \"\"\"\n    n = len(A)\n    Ab = np.hstack([A, b.reshape(-1, 1)])\n    for i in range(n):\n        pivot_row = i + np.argmax(np.abs(Ab[i:, i]))\n        Ab[[i, pivot_row]] = Ab[[pivot_row, i]]\n        pivot = Ab[i, i]\n        for row in range(i + 1, n):\n            factor = Ab[row, i] / pivot\n            Ab[row, i:] -= factor * Ab[i, i:]\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        x[i] = (Ab[i, -1] - np.dot(Ab[i, :-1], x)) / Ab[i, i]\n    return np.round(x, 4).tolist()\nA = np.array([[2, 1, -1], [-3, -1, 2], [-2, 1, 2]], dtype=float)"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def sigmoid(self, x):\n        return 1 / (1 + np.exp(-x))\n\n    def tanh(self, x):\n        return np.tanh(x)\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \"\"\"\n        T = len(x)\n        h = initial_hidden_state\n        c = initial_cell_state\n        hidden_states = []\n        for t in range(T):\n            xt = x[t].reshape(-1, 1)\n            concat = np.vstack((h, xt))\n            ft = self.sigmoid(self.Wf @ concat + self.bf)\n            it = self.sigmoid(self.Wi @ concat + self.bi)\n            cct = self.tanh(self.Wc @ concat + self.bc)\n            ot = self.sigmoid(self.Wo @ concat + self.bo)\n            c = ft * c + it * cct\n            h = ot * self.tanh(c)\n            hidden_states.append(h.flatten())\n        return (np.round(np.array(hidden_states), 4).tolist(), np.round(h.flatten(), 4).tolist(), np.round(c.flatten(), 4).tolist())\ninput_size = 3\nhidden_size = 2\nx = [np.array([1, 2, 3]), np.array([4, 5, 6]), np.array([7, 8, 9])]\ninitial_hidden_state = np.zeros((hidden_size, 1))\ninitial_cell_state = np.zeros((hidden_size, 1))"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef compute_tf_idf(corpus, query):\n    if not corpus:\n        raise ValueError('The corpus cannot be empty.')\n    num_docs = len(corpus)\n    tf_idf_scores = []\n    for doc in corpus:\n        doc_word_count = len(doc)\n        if doc_word_count == 0:\n            tf_idf_scores.append([0.0] * len(query))\n            continue\n        doc_tf_idf = []\n        for term in query:\n            tf = doc.count(term) / doc_word_count\n            df = sum((1 for d in corpus if term in d))\n            idf = math.log((num_docs + 1) / (df + 1)) + 1\n            tf_idf = tf * idf\n            doc_tf_idf.append(round(tf_idf, 4))\n        tf_idf_scores.append(doc_tf_idf)\n    return np.array(tf_idf_scores).tolist()\ncorpus = [['the', 'quick', 'brown', 'fox'], ['the', 'lazy', 'dog'], ['the', 'quick', 'dog']]\nquery = ['the', 'quick', 'dog']"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    tp = np.sum((y_pred == 1) & (y_true == 1))\n    fp = np.sum((y_pred == 1) & (y_true == 0))\n    fn = np.sum((y_pred == 0) & (y_true == 1))\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0\n    if precision + recall == 0:\n        f_beta = 0\n    else:\n        f_beta = (1 + beta ** 2) * (precision * recall) / (beta ** 2 * precision + recall)\n    return round(f_beta, 3)\ny_true = np.array([1, 0, 1, 1, 0, 1])\ny_pred = np.array([1, 1, 1, 0, 0, 1])\nbeta = 1.0"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, input_sequence):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n        \"\"\"\n        T = len(input_sequence)\n        hidden_states = np.zeros((T + 1, self.hidden_size, 1))\n        outputs = np.zeros((T, self.W_hy.shape[0], 1))\n        last_inputs = np.zeros((T, self.W_xh.shape[0], self.W_xh.shape[1]))\n        for t in range(T):\n            x = np.array(input_sequence[t]).reshape(-1, 1)\n            last_inputs[t] = x\n            hidden_states[t + 1] = np.tanh(self.W_xh @ x + self.W_hh @ hidden_states[t] + self.b_h)\n            outputs[t] = self.W_hy @ hidden_states[t + 1] + self.b_y\n        return (outputs, last_inputs, hidden_states)\n\n    def backward(self, input_sequence, expected_output, outputs, last_inputs, hidden_states, learning_rate):\n        \"\"\"\n        Backward pass through the RNN for a given sequence of inputs and expected outputs.\n        \"\"\"\n        T = len(input_sequence)\n        dW_xh = np.zeros_like(self.W_xh)\n        dW_hh = np.zeros_like(self.W_hh)\n        dW_hy = np.zeros_like(self.W_hy)\n        db_h = np.zeros_like(self.b_h)\n        db_y = np.zeros_like(self.b_y)\n        dh_next = np.zeros_like(hidden_states[0])\n        for t in reversed(range(T)):\n            x = last_inputs[t]\n            h = hidden_states[t + 1]\n            h_prev = hidden_states[t]\n            y = outputs[t]\n            dy = y - expected_output[t].reshape(-1, 1)\n            dW_hy += dy @ h.T\n            db_y += dy\n            dh = self.W_hy.T @ dy + dh_next\n            dh_raw = (1 - h ** 2) * dh\n            dW_xh += dh_raw @ x.T\n            dW_hh += dh_raw @ h_prev.T\n            db_h += dh_raw\n            dh_next = self.W_hh.T @ dh_raw\n        for dparam in [dW_xh, dW_hh, dW_hy, db_h, db_y]:\n            np.clip(dparam, -5, 5, out=dparam)\n        self.W_xh -= learning_rate * dW_xh\n        self.W_hh -= learning_rate * dW_hh\n        self.W_hy -= learning_rate * dW_hy\n        self.b_h -= learning_rate * db_h\n        self.b_y -= learning_rate * db_y\n\n    def train(self, input_sequence, expected_output, learning_rate, epochs):\n        for epoch in range(epochs):\n            (outputs, last_inputs, hidden_states) = self.forward(input_sequence)\n            self.backward(input_sequence, expected_output, outputs, last_inputs, hidden_states, learning_rate)\n            loss = 0.5 * np.sum((outputs - np.array(expected_output)) ** 2)\n            print(f'Epoch {epoch + 1}, Loss: {loss}')\ninput_size = 2\nhidden_size = 3\noutput_size = 2\ninput_sequence = [[1, 0], [0, 1], [1, 1]]\nexpected_output = [[0, 1], [1, 0], [1, 1]]\nlearning_rate = 0.1\nepochs = 1000"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    if x0 is None:\n        x0 = np.zeros_like(b)\n    x = x0\n    r = b - np.dot(A, x)\n    p = r\n    rsold = np.dot(r, r)\n    for _ in range(n):\n        Ap = np.dot(A, p)\n        alpha = rsold / np.dot(p, Ap)\n        x = x + alpha * p\n        r = r - alpha * Ap\n        rsnew = np.dot(r, r)\n        if np.sqrt(rsnew) < tol:\n            break\n        p = r + rsnew / rsold * p\n        rsold = rsnew\n    return x.round(8).tolist()\nA = np.array([[4, 1], [1, 3]])\nb = np.array([1, 2])\nn = 100\nx0 = np.array([0, 0])"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    (classes, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    gini = 1 - np.sum(probabilities ** 2)\n    return round(gini, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    values = []\n    col_indices = []\n    row_pointers = [0]\n    for row in dense_matrix:\n        for (col_index, value) in enumerate(row):\n            if value != 0:\n                values.append(value)\n                col_indices.append(col_index)\n        row_pointers.append(len(values))\n    return (values, col_indices, row_pointers[:-1])\ndense_matrix = [[1, 0, 0, 2], [0, 3, 0, 0], [4, 0, 5, 0]]"}
{"task_id": 66, "completion_id": 0, "solution": "import numpy as np\ndef orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    v = np.array(v)\n    L = np.array(L)\n    dot_product_vL = np.dot(v, L)\n    dot_product_LL = np.dot(L, L)\n    scalar_projection = dot_product_vL / dot_product_LL\n    vector_projection = scalar_projection * L\n    return [round(x, 3) for x in vector_projection]"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    num_rows = len(dense_matrix)\n    num_cols = len(dense_matrix[0]) if num_rows > 0 else 0\n    values = []\n    row_indices = []\n    col_ptr = [0]\n    for col in range(num_cols):\n        for row in range(num_rows):\n            value = dense_matrix[row][col]\n            if value != 0:\n                values.append(value)\n                row_indices.append(row)\n        col_ptr.append(len(values))\n    return (values, row_indices, col_ptr)\ndense_matrix = [[0, 2, 0], [3, 0, 0], [0, 0, 4], [5, 0, 0]]"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    \"\"\"\n    Calculates the column space (image) of a given matrix A.\n    Returns the basis vectors that span the column space of A.\n    The vectors are extracted from the original matrix and correspond to the independent columns.\n    \"\"\"\n    A = np.array(A)\n    (A_rref, pivot_columns) = row_echelon_form(A)\n    basis_vectors = A[:, pivot_columns]\n    return np.round(basis_vectors, 8).tolist()\ndef row_echelon_form(A):\n    \"\"\"\n    Computes the row echelon form of matrix A and returns the pivot columns.\n    \"\"\"\n    A = np.array(A, dtype=float)\n    (m, n) = A.shape\n    rref = A.copy()\n    pivot_columns = []\n    (row, col) = (0, 0)\n    while row < m and col < n:\n        max_row = np.argmax(np.abs(rref[row:, col])) + row\n        if rref[max_row, col] == 0:\n            col += 1\n        else:\n            rref[[row, max_row]] = rref[[max_row, row]]\n            pivot_columns.append(col)\n            for i in range(row + 1, m):\n                factor = rref[i, col] / rref[row, col]\n                rref[i, col:] -= factor * rref[row, col:]\n            row += 1\n            col += 1\n    return (rref, pivot_columns)\nA = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    \"\"\"\n    Calculate the R-squared value for a regression model.\n    \n    Parameters:\n    y_true (np.array): An array of true values.\n    y_pred (np.array): An array of predicted values.\n    \n    Returns:\n    float: The R-squared value rounded to three decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    ssr = np.sum((y_true - y_pred) ** 2)\n    sst = np.sum((y_true - np.mean(y_true)) ** 2)\n    r2 = 1 - ssr / sst\n    return round(r2, 3)\ny_true = [3, -0.5, 2, 7]\ny_pred = [2.5, 0.0, 2, 8]"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    \"\"\"\n    Calculates the average brightness of a grayscale image.\n    \n    Parameters:\n    img (list of list of int): A 2D matrix representing the grayscale image.\n    \n    Returns:\n    float: The average brightness of the image rounded to two decimal places, or -1 for invalid input.\n    \"\"\"\n    if not img or not all((isinstance(row, list) and len(row) == len(img[0]) for row in img)):\n        return -1\n    total_brightness = 0\n    pixel_count = 0\n    for row in img:\n        for pixel in row:\n            if not 0 <= pixel <= 255:\n                return -1\n            total_brightness += pixel\n            pixel_count += 1\n    if pixel_count == 0:\n        return -1\n    average_brightness = total_brightness / pixel_count\n    return round(average_brightness, 2)"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    \"\"\"\n    Calculate the Root Mean Square Error (RMSE) between the actual values and the predicted values.\n    \n    Parameters:\n    y_true (np.ndarray): Array of actual values.\n    y_pred (np.ndarray): Array of predicted values.\n    \n    Returns:\n    float: RMSE value rounded to three decimal places.\n    \n    Raises:\n    ValueError: If input arrays have different shapes or are empty.\n    TypeError: If input is not of type np.ndarray.\n    \"\"\"\n    if not (isinstance(y_true, np.ndarray) and isinstance(y_pred, np.ndarray)):\n        raise TypeError('Inputs must be numpy arrays.')\n    if y_true.size == 0 or y_pred.size == 0:\n        raise ValueError('Input arrays cannot be empty.')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Input arrays must have the same shape.')\n    error = np.sqrt(np.mean((y_true - y_pred) ** 2))\n    return round(error, 3)"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    \"\"\"\n    Calculate the Jaccard Index for binary classification.\n    \n    Parameters:\n    y_true (np.array): True binary labels.\n    y_pred (np.array): Predicted binary labels.\n    \n    Returns:\n    float: Jaccard Index rounded to three decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    intersection = np.sum(np.logical_and(y_true, y_pred))\n    union = np.sum(np.logical_or(y_true, y_pred))\n    if union == 0:\n        return 0.0\n    jaccard = intersection / union\n    return round(jaccard, 3)\ny_true = np.array([1, 1, 0, 0, 1, 0, 1, 0])\ny_pred = np.array([1, 0, 1, 0, 0, 1, 1, 0])"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    \"\"\"\n    Calculate the Dice Score for binary classification.\n    \n    Parameters:\n    - y_true: np.array, true binary labels.\n    - y_pred: np.array, predicted binary labels.\n    \n    Returns:\n    - float, Dice Score rounded to 3 decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    intersection = np.sum(y_true * y_pred)\n    num_true = np.sum(y_true)\n    num_pred = np.sum(y_pred)\n    if num_true == 0 and num_pred == 0:\n        return 1.0\n    dice = 2.0 * intersection / (num_true + num_pred)\n    return round(dice, 3)\ny_true = np.array([1, 0, 1, 1, 0, 1])\ny_pred = np.array([1, 1, 1, 0, 0, 1])"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef create_hypervector(dim, seed):\n    \"\"\"Generate a random hypervector of a given dimension with a fixed seed.\"\"\"\n    np.random.seed(seed)\n    return np.where(np.random.rand(dim) > 0.5, 1, -1)\ndef bind_hypervectors(hv1, hv2):\n    \"\"\"Bind two hypervectors using element-wise multiplication.\"\"\"\n    return hv1 * hv2\ndef bundle_hypervectors(hvs):\n    \"\"\"Bundle a list of hypervectors by element-wise addition and normalization.\"\"\"\n    bundled = np.sum(hvs, axis=0)\n    return np.where(bundled > 0, 1, -1)\ndef create_row_hv(row, dim, random_seeds):\n    \"\"\"Generate a composite hypervector for a dataset row using HDC.\"\"\"\n    feature_hvs = []\n    for (feature, value) in row.items():\n        feature_hv = create_hypervector(dim, random_seeds[feature])\n        value_hv = create_hypervector(dim, random_seeds[feature] + hash(value))\n        bound_hv = bind_hypervectors(feature_hv, value_hv)\n        feature_hvs.append(bound_hv)\n    composite_hv = bundle_hypervectors(feature_hvs)\n    return composite_hv.tolist()\nrow = {'feature1': 10, 'feature2': 20, 'feature3': 30}\ndim = 1000\nrandom_seeds = {'feature1': 1, 'feature2': 2, 'feature3': 3}\ncomposite_hv = create_row_hv(row, dim, random_seeds)"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    \"\"\"\n    Generates a confusion matrix for binary classification.\n    \n    :param data: A list of lists, where each inner list represents a pair [y_true, y_pred]\n    :return: A 2x2 confusion matrix as a list of lists.\n    \"\"\"\n    counter = Counter()\n    for (y_true, y_pred) in data:\n        counter[y_true, y_pred] += 1\n    matrix = [[0, 0], [0, 0]]\n    matrix[0][0] = counter[0, 0]\n    matrix[0][1] = counter[0, 1]\n    matrix[1][0] = counter[1, 0]\n    matrix[1][1] = counter[1, 1]\n    return matrix"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    \"\"\"\n    Calculate the cosine similarity between two vectors.\n    \n    Parameters:\n    v1 (np.array): First input vector.\n    v2 (np.array): Second input vector.\n    \n    Returns:\n    float: Cosine similarity rounded to three decimal places.\n    \n    Raises:\n    ValueError: If vectors have different shapes or zero magnitude.\n    \"\"\"\n    if v1.shape != v2.shape:\n        raise ValueError('Both input vectors must have the same shape.')\n    if np.linalg.norm(v1) == 0 or np.linalg.norm(v2) == 0:\n        raise ValueError('Input vectors cannot have zero magnitude.')\n    dot_product = np.dot(v1, v2)\n    norm_v1 = np.linalg.norm(v1)\n    norm_v2 = np.linalg.norm(v2)\n    similarity = dot_product / (norm_v1 * norm_v2)\n    return round(similarity, 3)\nv1 = np.array([1, 2, 3])\nv2 = np.array([4, 5, 6])"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import List, Tuple\nimport numpy as np\ndef performance_metrics(actual: List[int], predicted: List[int]) -> Tuple[np.ndarray, float, float, float, float]:\n    if len(actual) != len(predicted):\n        raise ValueError('The length of actual and predicted lists must be the same.')\n    if not all((x in [0, 1] for x in actual + predicted)):\n        raise ValueError('All elements in actual and predicted lists must be either 0 or 1.')\n    confusion_matrix = np.zeros((2, 2), dtype=int)\n    for (a, p) in zip(actual, predicted):\n        confusion_matrix[a, p] += 1\n    (tp, fp, fn, tn) = (confusion_matrix[1, 1], confusion_matrix[0, 1], confusion_matrix[1, 0], confusion_matrix[0, 0])\n    accuracy = round((tp + tn) / (tp + tn + fp + fn), 3)\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0\n    f1_score = round(2 * (precision * recall) / (precision + recall), 3) if precision + recall > 0 else 0\n    specificity = round(tn / (tn + fp), 3) if tn + fp > 0 else 0\n    negative_predictive_value = round(tn / (tn + fn), 3) if tn + fn > 0 else 0\n    return (confusion_matrix, accuracy, f1_score, specificity, negative_predictive_value)\nactual = [1, 0, 1, 1, 0, 1, 0, 0, 1, 0]\npredicted = [1, 0, 1, 0, 0, 1, 1, 0, 1, 0]"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\nfrom scipy import stats\ndef descriptive_statistics(data):\n    \"\"\"\n    Calculate various descriptive statistics for a given dataset.\n    \n    Parameters:\n    data (list or numpy.ndarray): A list or numpy array of numerical values.\n    \n    Returns:\n    dict: A dictionary containing various descriptive statistics.\n    \"\"\"\n    data = np.array(data)\n    mean = np.mean(data)\n    median = np.median(data)\n    mode = stats.mode(data)[0][0]\n    variance = np.var(data, ddof=1)\n    std_dev = np.std(data, ddof=1)\n    percentile_25 = np.percentile(data, 25)\n    percentile_50 = np.percentile(data, 50)\n    percentile_75 = np.percentile(data, 75)\n    iqr = percentile_75 - percentile_25\n    output = {'mean': round(mean, 4), 'median': round(median, 4), 'mode': mode, 'variance': round(variance, 4), 'standard_deviation': round(std_dev, 4), '25th_percentile': round(percentile_25, 4), '50th_percentile': round(percentile_50, 4), '75th_percentile': round(percentile_75, 4), 'interquartile_range': round(iqr, 4)}\n    return output\ndata = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials\n    \"\"\"\n    binom_coeff = math.comb(n, k)\n    probability = binom_coeff * p ** k * (1 - p) ** (n - k)\n    return round(probability, 5)\nn = 10\nk = 3\np = 0.5"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    :return: The PDF value rounded to 5 decimal places.\n    \"\"\"\n    exponent = math.exp(-(x - mean) ** 2 / (2 * std_dev ** 2))\n    denominator = std_dev * math.sqrt(2 * math.pi)\n    pdf_value = exponent / denominator\n    return round(pdf_value, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the average rate (mean) of occurrences lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    :return: Probability rounded to 5 decimal places\n    \"\"\"\n    probability = math.exp(-lam) * lam ** k / math.factorial(k)\n    return round(probability, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        float: The contrast of the image, defined as the difference between the maximum and minimum pixel values.\n    \"\"\"\n    if not isinstance(img, np.ndarray) or img.ndim != 2:\n        raise ValueError('Input must be a 2D numpy array representing a grayscale image.')\n    max_pixel_value = np.max(img)\n    min_pixel_value = np.min(img)\n    contrast = max_pixel_value - min_pixel_value\n    return contrast"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    Returns:\n        float: The dot product of the two vectors.\n    \"\"\"\n    if vec1.shape != vec2.shape:\n        raise ValueError('Both vectors must be of the same length.')\n    return np.dot(vec1, vec2)"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n    \"\"\"\n    if degree < 0:\n        return []\n    data_array = np.array(data)\n    transformed_data = []\n    for value in data_array:\n        features = [value ** i for i in range(1, degree + 1)]\n        transformed_data.append(features)\n    transformed_data = np.round(transformed_data, 8).tolist()\n    return transformed_data"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    \"\"\"\n    Calculates the positional encodings for a sequence of a given length and model dimensionality.\n    \n    Args:\n    position (int): The length of the sequence.\n    d_model (int): The dimensionality of the model.\n    \n    Returns:\n    list: A list of positional encodings for the sequence, or -1 if input is invalid.\n    \"\"\"\n    if position == 0 or d_model <= 0:\n        return -1\n    pe = np.zeros((position, d_model), dtype=np.float16)\n    position = np.arange(0, position, dtype=np.float16).reshape(-1, 1)\n    div_term = np.exp(np.arange(0, d_model, 2, dtype=np.float16) * -(np.log(10000.0) / d_model))\n    pe[:, 0::2] = np.sin(position * div_term)\n    pe[:, 1::2] = np.cos(position * div_term)\n    return pe.tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    elif training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    else:\n        return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    parameter -= learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    updated_parameter = np.round(parameter, 5).tolist()\n    updated_m = np.round(m, 5).tolist()\n    updated_v = np.round(v, 5).tolist()\n    return (updated_parameter, updated_m, updated_v)\nparameter = np.array([1.0, 2.0])\ngrad = np.array([0.1, 0.2])\nm = np.array([0.0, 0.0])\nv = np.array([0.0, 0.0])\nt = 1"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    token_ids = encoder.encode(prompt)\n    position_ids = np.arange(len(token_ids))\n    token_embeddings = params['wte'][token_ids]\n    positional_embeddings = params['wpe'][position_ids]\n    x = token_embeddings + positional_embeddings\n    attention_output = np.random.rand(len(token_ids), 10)\n    feed_forward_output = np.random.rand(len(token_ids), 10)\n    ln_output = (feed_forward_output - np.mean(feed_forward_output, axis=-1, keepdims=True)) / (np.std(feed_forward_output, axis=-1, keepdims=True) + 1e-05)\n    ln_output = ln_output * params['ln_f']['g'] + params['ln_f']['b']\n    new_token_ids = np.random.randint(0, len(encoder.encoder_dict), n_tokens_to_generate)\n    generated_text = encoder.decode(new_token_ids)\n    return generated_text\nprompt = 'hello world'\ngenerated_text = gen_text(prompt, 5)"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        e_x = np.exp(values - np.max(values))\n        return e_x / e_x.sum(axis=0)\n    crystals = np.array(crystal_values).reshape(n, 1)\n    expanded_crystals = np.repeat(crystals, dimension, axis=1)\n    attention_scores = np.dot(expanded_crystals, expanded_crystals.T)\n    attention_weights = softmax(attention_scores)\n    weighted_patterns = np.dot(attention_weights, expanded_crystals)\n    final_patterns = np.round(weighted_patterns.flatten(), 4)\n    return final_patterns.tolist()\nn = 3\ndimension = 2"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    \"\"\"\n    Calculate BM25 scores for each document in the corpus given a query.\n    \n    :param corpus: List of documents, where each document is a list of words.\n    :param query: List of words representing the query.\n    :param k1: Term frequency saturation parameter.\n    :param b: Document length normalization parameter.\n    :return: List of BM25 scores for each document in the corpus.\n    \"\"\"\n    avgdl = sum((len(doc) for doc in corpus)) / len(corpus)\n    idf_values = {}\n    for term in query:\n        df = sum((1 for doc in corpus if term in doc))\n        idf_values[term] = np.log((len(corpus) - df + 0.5) / (df + 0.5))\n    scores = []\n    for doc in corpus:\n        doc_length = len(doc)\n        score = 0.0\n        for term in query:\n            if term in doc:\n                tf = doc.count(term)\n                numerator = idf_values[term] * tf * (k1 + 1)\n                denominator = tf + k1 * (1 - b + b * doc_length / avgdl)\n                score += numerator / denominator\n        scores.append(round(score, 3))\n    return scores\ncorpus = [['the', 'quick', 'brown', 'fox'], ['the', 'lazy', 'dog'], ['the', 'quick', 'dog'], ['the', 'lazy', 'fox']]\nquery = ['the', 'quick', 'fox']\nscores = calculate_bm25_scores(corpus, query)"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    tp = fp = fn = 0\n    set_true = set(y_true)\n    set_pred = set(y_pred)\n    for label in set_pred:\n        if label in set_true:\n            tp += min(y_true.count(label), y_pred.count(label))\n        else:\n            fp += y_pred.count(label)\n    for label in set_true:\n        if label not in set_pred:\n            fn += y_true.count(label)\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0\n    f1 = 2 * (precision * recall) / (precision + recall) if precision + recall > 0 else 0\n    return round(f1, 3)\ny_true = [0, 1, 2, 1, 0]\ny_pred = [0, 2, 1, 1, 0]"}
{"task_id": 92, "completion_id": 0, "solution": "import math\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nPI = 3.14159\ndef power_grid_forecast(consumption_data):\n    days = np.array(range(1, 11))\n    fluctuation = 10 * np.sin(2 * PI * days / 10)\n    detrended_data = np.array(consumption_data) - fluctuation\n    days = days.reshape(-1, 1)\n    model = LinearRegression()\n    model.fit(days, detrended_data)\n    day_15 = np.array([[15]])\n    base_consumption_day_15 = model.predict(day_15)[0]\n    fluctuation_day_15 = 10 * math.sin(2 * PI * 15 / 10)\n    predicted_consumption_day_15 = base_consumption_day_15 + fluctuation_day_15\n    final_consumption = math.ceil(predicted_consumption_day_15 * 1.05)\n    return final_consumption\nconsumption_data = [100, 105, 110, 115, 120, 125, 130, 135, 140, 145]"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        raise ValueError('The length of y_true and y_pred must be the same.')\n    absolute_errors = np.abs(y_true - y_pred)\n    mean_absolute_error = np.mean(absolute_errors)\n    return round(mean_absolute_error, 3)"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray) -> tuple:\n    \"\"\"\n    Computes the Query, Key, and Value matrices for the self-attention mechanism.\n    :param X: Input data matrix.\n    :param W_q: Weight matrix for the Query.\n    :param W_k: Weight matrix for the Key.\n    :param W_v: Weight matrix for the Value.\n    :return: A tuple containing the Query, Key, and Value matrices.\n    \"\"\"\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    return (Q, K, V)\ndef self_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Computes the self-attention for a single head.\n    :param Q: Query matrix.\n    :param K: Key matrix.\n    :param V: Value matrix.\n    :return: The output of the self-attention mechanism.\n    \"\"\"\n    d_k = K.shape[-1]\n    scores = np.dot(Q, K.T) / np.sqrt(d_k)\n    attention = np.dot(np.softmax(scores, axis=-1), V)\n    return attention\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Computes the multi-head attention for the input data.\n    :param X: Input data matrix.\n    :param W_q: Weight matrix for the Query.\n    :param W_k: Weight matrix for the Key.\n    :param W_v: Weight matrix for the Value.\n    :param n_heads: Number of attention heads.\n    :return: The output of the multi-head attention mechanism as a list.\n    \"\"\"\n    (Q, K, V) = compute_qkv(X, W_q, W_k, W_v)\n    head_dim = Q.shape[-1] // n_heads\n    Q_heads = np.split(Q, n_heads, axis=-1)\n    K_heads = np.split(K, n_heads, axis=-1)\n    V_heads = np.split(V, n_heads, axis=-1)\n    attention_heads = [self_attention(Q_head, K_head, V_head) for (Q_head, K_head, V_head) in zip(Q_heads, K_heads, V_heads)]\n    concatenated_heads = np.concatenate(attention_heads, axis=-1)\n    output = np.round(concatenated_heads, 4)\n    return output.tolist()\nX = np.array([[1, 2, 3], [4, 5, 6]])\nW_q = np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]])\nW_k = np.array([[0.9, 0.8, 0.7], [0.6, 0.5, 0.4], [0.3, 0.2, 0.1]])\nW_v = np.array([[0.2, 0.3, 0.4], [0.5, 0.6, 0.7], [0.8, 0.9, 0.1]])\nn_heads = 2\noutput = multi_head_attention(X, W_q, W_k, W_v, n_heads)"}
{"task_id": 95, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.stats import chi2_contingency\ndef phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    x_array = np.array(x)\n    y_array = np.array(y)\n    contingency_table = np.array([[np.sum((x_array == 0) & (y_array == 0)), np.sum((x_array == 0) & (y_array == 1))], [np.sum((x_array == 1) & (y_array == 0)), np.sum((x_array == 1) & (y_array == 1))]])\n    (chi2, _, _, _) = chi2_contingency(contingency_table)\n    phi = np.sqrt(chi2 / np.sum(contingency_table))\n    return round(phi, 4)\nx = [0, 0, 1, 1, 0, 1, 0, 1, 0, 1]\ny = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    if x <= -2.5:\n        return 0.0\n    elif x >= 2.5:\n        return 1.0\n    else:\n        return 0.2 * x + 0.5"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value\n    \"\"\"\n    if x > 0:\n        return x\n    else:\n        return alpha * (math.exp(x) - 1)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    if x > 0:\n        return x\n    else:\n        return alpha * x"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x)\n    \"\"\"\n    if x > 100:\n        return round(x, 4)\n    elif x < -100:\n        return round(0, 4)\n    else:\n        return round(math.log(1 + math.exp(x)), 4)"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input\n    \"\"\"\n    return round(x / (1 + abs(x)), 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    rhos = np.array(rhos)\n    A = np.array(A)\n    pi_theta_old = np.array(pi_theta_old)\n    pi_theta_ref = np.array(pi_theta_ref)\n    clipped_rhos = np.clip(rhos, 1 - epsilon, 1 + epsilon)\n    clipped_objective = np.minimum(rhos * A, clipped_rhos * A)\n    kl_divergence = np.sum(pi_theta_old * np.log(pi_theta_old / pi_theta_ref))\n    grpo_obj = np.mean(clipped_objective) - beta * kl_divergence\n    return round(grpo_obj, 6)\nrhos = [1.2, 0.8, 1.5, 0.9]\nA = [0.5, -0.3, 0.2, -0.1]\npi_theta_old = [0.7, 0.3, 0.8, 0.2]\npi_theta_ref = [0.6, 0.4, 0.7, 0.3]"}
{"task_id": 102, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value\n    \"\"\"\n    return x / (1 + math.exp(-x))"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x > 0:\n        return scale * x\n    else:\n        return scale * alpha * (math.exp(x) - 1)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N x D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    linear_combination = np.dot(X, weights) + bias\n    probabilities = 1 / (1 + np.exp(-linear_combination))\n    predictions = (probabilities > 0.5).astype(int)\n    return predictions.tolist()\nX = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\nweights = np.array([0.5, -0.5])\nbias = 0.1\npredictions = predict_logistic(X, weights, bias)"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    n_classes = len(np.unique(y))\n    B = np.zeros((n_features, n_classes))\n    losses = []\n    for _ in range(iterations):\n        scores = np.dot(X, B)\n        exp_scores = np.exp(scores - np.max(scores, axis=1, keepdims=True))\n        probs = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)\n        gradient = np.dot(X.T, probs - y) / n_samples\n        B -= learning_rate * gradient\n        log_probs = -np.log(probs[range(n_samples), np.argmax(y, axis=1)])\n        loss = np.sum(log_probs) / n_samples\n        losses.append(round(float(loss), 4))\n    B = np.round(B, 4).tolist()\n    return (B, losses)"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"\n    Compute the sigmoid of z.\n    \"\"\"\n    return 1 / (1 + np.exp(-z))\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \"\"\"\n    (m, n) = X.shape\n    weights = np.zeros(n)\n    bias = 0\n    losses = []\n    for _ in range(iterations):\n        z = np.dot(X, weights) + bias\n        y_pred = sigmoid(z)\n        loss = -1 / m * np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n        losses.append(round(loss, 4))\n        dw = 1 / m * np.dot(X.T, y_pred - y)\n        db = 1 / m * np.sum(y_pred - y)\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n    coefficients = np.append(weights, bias).tolist()\n    return (coefficients, losses)"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    attention_scores = np.dot(Q, K.T) / np.sqrt(K.shape[-1])\n    attention_scores = np.where(mask, -np.inf, attention_scores)\n    attention_weights = np.exp(attention_scores) / np.sum(np.exp(attention_scores), axis=-1, keepdims=True)\n    output = np.dot(attention_weights, V)\n    return output.tolist()"}
{"task_id": 108, "completion_id": 0, "solution": "from collections import Counter\nfrom math import log\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    The measure of disorder is calculated using the Shannon entropy formula.\n    \"\"\"\n    color_counts = Counter(apples)\n    total_apples = len(apples)\n    probabilities = [count / total_apples for count in color_counts.values()]\n    entropy = -sum((p * log(p, 2) for p in probabilities if p > 0))\n    return round(entropy, 4)"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05) -> np.ndarray:\n    \"\"\"\n    Perform Layer Normalization on the input tensor X.\n    \n    Parameters:\n    X: np.ndarray\n        Input tensor of shape (batch_size, seq_length, feature_dim).\n    gamma: np.ndarray\n        Scaling parameters of shape (feature_dim,).\n    beta: np.ndarray\n        Shifting parameters of shape (feature_dim,).\n    epsilon: float, optional\n        A small constant for numerical stability (default is 1e-5).\n        \n    Returns:\n    np.ndarray\n        Normalized tensor of the same shape as X.\n    \"\"\"\n    mean = np.mean(X, axis=-1, keepdims=True)\n    var = np.var(X, axis=-1, keepdims=True)\n    X_norm = (X - mean) / np.sqrt(var + epsilon)\n    X_scaled = gamma * X_norm\n    X_shifted = X_scaled + beta\n    return np.round(X_shifted, decimals=5).tolist()"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef harmonic_mean(precision, recall, beta):\n    \"\"\"Calculate the harmonic mean of precision and recall.\"\"\"\n    if precision == 0 or recall == 0:\n        return 0\n    return (1 + beta ** 2) * (precision * recall) / (beta ** 2 * precision + recall)\ndef fragmentation_score(reference, candidate):\n    \"\"\"Calculate the fragmentation penalty based on the order of matched words.\"\"\"\n    ref_words = reference.split()\n    cand_words = candidate.split()\n    matches = [c in ref_words for c in cand_words]\n    chunks = sum([1 for i in range(1, len(matches)) if matches[i] and (not matches[i - 1])])\n    return max(0, 1 - chunks / len(matches)) if matches else 0\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    \"\"\"Calculate the METEOR score for a given reference and candidate translation.\"\"\"\n    ref_words = reference.split()\n    cand_words = candidate.split()\n    ref_counter = Counter(ref_words)\n    cand_counter = Counter(cand_words)\n    matches = sum((ref_counter & cand_counter).values())\n    if matches == 0:\n        return 0\n    precision = matches / len(cand_words)\n    recall = matches / len(ref_words)\n    f_mean = harmonic_mean(precision, recall, beta)\n    fragmentation = fragmentation_score(reference, candidate)\n    score = (1 - alpha) * fragmentation + alpha * f_mean\n    score = score * np.exp(gamma * (len(ref_words) - len(cand_words)) / len(ref_words))\n    return round(score, 3)\nreference = 'the cat is on the table'\ncandidate = 'the cat is on table'"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    \"\"\"\n    Computes the Pointwise Mutual Information (PMI) given the joint occurrence count of two events,\n    their individual counts, and the total number of samples.\n    \n    Parameters:\n    joint_counts (int): The number of times both events x and y occur together.\n    total_counts_x (int): The total number of occurrences of event x.\n    total_counts_y (int): The total number of occurrences of event y.\n    total_samples (int): The total number of samples in the data.\n    \n    Returns:\n    float: The PMI value rounded to 3 decimal places.\n    \"\"\"\n    expected_joint_prob = total_counts_x / total_samples * (total_counts_y / total_samples)\n    actual_joint_prob = joint_counts / total_samples\n    pmi = np.log2(actual_joint_prob / expected_joint_prob)\n    return round(pmi, 3)"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    \"\"\"\n    Perform Min-Max Normalization on a list of integers, scaling all values to the range [0, 1].\n    Each value is transformed using the formula: (x - min(x)) / (max(x) - min(x))\n    The result is rounded to 4 decimal places.\n    \n    :param x: List of integers to be normalized.\n    :return: List of normalized floats rounded to 4 decimal places.\n    \"\"\"\n    if not x or max(x) == min(x):\n        return [0.0] * len(x)\n    min_val = min(x)\n    max_val = max(x)\n    normalized = [float(i - min_val) / (max_val - min_val) for i in x]\n    return [round(i, 4) for i in normalized]"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    \"\"\"\n    Implements a simple residual block with shortcut connection.\n    \n    Args:\n    x: np.ndarray - 1D input array.\n    w1: np.ndarray - Weight matrix for the first layer.\n    w2: np.ndarray - Weight matrix for the second layer.\n    \n    Returns:\n    np.ndarray - Output of the residual block, rounded to 4 decimal places.\n    \"\"\"\n    assert x.shape[0] == w1.shape[0], 'Input and weight dimensions are not compatible.'\n    assert w1.shape[1] == w2.shape[0], 'Weight dimensions are not compatible.'\n    z1 = np.dot(x, w1)\n    a1 = np.maximum(z1, 0)\n    z2 = np.dot(a1, w2)\n    a2 = np.maximum(z2, 0)\n    z3 = x + a2\n    output = np.maximum(z3, 0)\n    return output.round(4).tolist()\nx = np.array([1, 2, 3])\nw1 = np.array([[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]])\nw2 = np.array([[0.7, 0.8], [0.9, 1.0]])"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Perform Global Average Pooling on a 3D NumPy array.\n    \n    Parameters:\n    x (np.ndarray): A 3D array of shape (height, width, channels) representing feature maps.\n    \n    Returns:\n    np.ndarray: A 1D array of shape (channels,) where each element is the average of all values in the corresponding feature map.\n    \"\"\"\n    return np.mean(x, axis=(0, 1))"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05) -> np.ndarray:\n    \"\"\"\n    Perform batch normalization on a 4D input array in BCHW format.\n    \n    Parameters:\n    X: np.ndarray - Input array in BCHW format.\n    gamma: np.ndarray - Scale parameter for each channel.\n    beta: np.ndarray - Shift parameter for each channel.\n    epsilon: float - Small constant for numerical stability.\n    \n    Returns:\n    np.ndarray - Normalized input array.\n    \"\"\"\n    (batch_size, channels, height, width) = X.shape\n    mean = np.mean(X, axis=(0, 2, 3), keepdims=True)\n    var = np.var(X, axis=(0, 2, 3), keepdims=True)\n    X_norm = (X - mean) / np.sqrt(var + epsilon)\n    X_scaled = gamma[:, None, None] * X_norm + beta[:, None, None]\n    return np.round(X_scaled, decimals=4).tolist()"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    \"\"\"\n    Calculates the derivative of a polynomial term c * x^n at a given point x.\n    \n    Parameters:\n    c (float): The coefficient of the polynomial term.\n    x (float): The point at which to evaluate the derivative.\n    n (float): The exponent of the polynomial term.\n    \n    Returns:\n    float: The value of the derivative at point x, rounded to 4 decimal places.\n    \"\"\"\n    derivative_value = n * c * x ** (n - 1)\n    return round(derivative_value, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10) -> list[list[float]]:\n    \"\"\"\n    Computes an orthonormal basis for the subspace spanned by a list of 2D vectors using the Gram-Schmidt process.\n    \n    :param vectors: List of 2D vectors (list of lists).\n    :param tol: Tolerance value to determine linear independence.\n    :return: List of orthonormal vectors that span the same subspace.\n    \"\"\"\n    V = np.array(vectors)\n    num_vectors = V.shape[0]\n    basis = []\n    for i in range(num_vectors):\n        for b in basis:\n            V[i] -= np.dot(V[i], b) * b\n        if np.linalg.norm(V[i]) > tol:\n            basis.append(V[i] / np.linalg.norm(V[i]))\n    basis = [np.round(np.array(b), 4).tolist() for b in basis]\n    return basis\nvectors = [[1, 2], [2, 4], [1, 3]]"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    \"\"\"\n    Computes the cross product of two 3D vectors.\n    \n    Parameters:\n    a (list/tuple): The first 3D vector.\n    b (list/tuple): The second 3D vector.\n    \n    Returns:\n    list: The cross product of the two vectors, rounded to 4 decimal places.\n    \"\"\"\n    a_np = np.array(a)\n    b_np = np.array(b)\n    cross_prod = np.cross(a_np, b_np)\n    return np.round(cross_prod, 4).tolist()"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    \"\"\"\n    Solves a system of linear equations using Cramer's Rule.\n    \n    Parameters:\n    A (np.array): A square coefficient matrix.\n    b (np.array): A constant vector.\n    \n    Returns:\n    list: The solution vector x rounded to 4 decimal places, or -1 if no unique solution exists.\n    \"\"\"\n    A = np.array(A)\n    b = np.array(b)\n    det_A = np.linalg.det(A)\n    if det_A == 0:\n        return -1\n    x = []\n    for i in range(len(A)):\n        Ai = A.copy()\n        Ai[:, i] = b\n        det_Ai = np.linalg.det(Ai)\n        xi = det_Ai / det_A\n        x.append(round(xi, 4))\n    return x\nA = [[3, 2, -1], [2, -2, 4], [-1, 0.5, -1]]\nb = [1, -2, 0]"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    \"\"\"\n    Calculate the Bhattacharyya distance between two probability distributions.\n    \n    Parameters:\n    p (list of float): The first probability distribution.\n    q (list of float): The second probability distribution.\n    \n    Returns:\n    float: The Bhattacharyya distance rounded to 4 decimal places, or 0.0 if inputs are invalid.\n    \"\"\"\n    if not p or not q or len(p) != len(q):\n        return 0.0\n    bc = np.sum(np.sqrt(np.array(p) * np.array(q)))\n    bd = -np.log(bc)\n    return round(bd, 4)"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float] | int:\n    \"\"\"\n    Computes the element-wise sum of two vectors.\n    \n    Parameters:\n    a (list[int|float]): The first vector.\n    b (list[int|float]): The second vector.\n    \n    Returns:\n    list[int|float] | int: A new vector representing the element-wise sum of a and b if the operation is valid, or -1 if the vectors have incompatible dimensions.\n    \"\"\"\n    if len(a) != len(b):\n        return -1\n    result = [x + y for (x, y) in zip(a, b)]\n    return result"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef softmax(x):\n    \"\"\"Compute softmax values for each sets of scores in x.\"\"\"\n    e_x = np.exp(x - np.max(x))\n    return e_x / e_x.sum(axis=1, keepdims=True)\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    \"\"\"\n    Computes the policy gradient using the REINFORCE algorithm.\n    \n    Parameters:\n    - theta: A 2D NumPy array of shape (num_states, num_actions) representing the policy parameters.\n    - episodes: A list of episodes, where each episode is a list of (state, action, reward) tuples.\n    \n    Returns:\n    - A 2D NumPy array representing the average gradient of the log-policy multiplied by the return.\n    \"\"\"\n    (num_states, num_actions) = theta.shape\n    gradient = np.zeros_like(theta, dtype=np.float64)\n    for episode in episodes:\n        returns = 0\n        for t in reversed(range(len(episode))):\n            (state, action, reward) = episode[t]\n            returns += reward\n            policy = softmax(theta[state, :])\n            log_policy = np.log(policy[action])\n            gradient[state, action] += log_policy * returns\n            gradient[state, :] -= policy * returns\n    gradient /= len(episodes)\n    gradient = np.round(gradient, 4)\n    return gradient.tolist()\ntheta = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=np.float64)\nepisodes = [[(0, 1, 1.0), (1, 2, 1.0), (2, 0, 1.0)], [(0, 2, 1.0), (1, 0, 1.0), (2, 1, 1.0)]]"}
{"task_id": 123, "completion_id": 0, "solution": "def compute_efficiency(n_experts, k_active, d_in, d_out):\n    \"\"\"\n    Calculate the computational cost savings of an MoE layer compared to a dense layer.\n    \n    Parameters:\n    n_experts (int): Total number of experts in the MoE layer.\n    k_active (int): Number of active experts in the MoE layer.\n    d_in (int): Input dimension.\n    d_out (int): Output dimension.\n    \n    Returns:\n    float: The percentage of computational cost savings rounded to the nearest 1th decimal.\n    \"\"\"\n    flops_dense = 2 * d_in * d_out\n    flops_moe = 2 * d_in * d_out * k_active\n    flops_gating = 2 * d_in * n_experts\n    total_flops_moe = flops_moe + flops_gating\n    savings = (flops_dense - total_flops_moe) / flops_dense * 100\n    return round(savings, 1)\nn_experts = 128\nk_active = 4\nd_in = 1024\nd_out = 1024"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    \"\"\"\n    Implements the Noisy Top-K Gating mechanism for Mixture-of-Experts models.\n    \n    Parameters:\n    X (np.ndarray): Input matrix.\n    W_g (np.ndarray): Weight matrix for gating.\n    W_noise (np.ndarray): Weight matrix for noise.\n    N (np.ndarray): Pre-sampled noise matrix.\n    k (int): Sparsity constraint, number of experts to select.\n    \n    Returns:\n    list: Final gating probabilities matrix as a list, rounded to 4 decimal places.\n    \"\"\"\n    logits = X @ W_g\n    noisy_logits = logits + N * W_noise\n    exp_logits = np.exp(noisy_logits - noisy_logits.max(axis=-1, keepdims=True))\n    probs = exp_logits / exp_logits.sum(axis=-1, keepdims=True)\n    topk_indices = np.argsort(probs, axis=-1)[:, -k:]\n    topk_probs = np.zeros_like(probs)\n    for i in range(probs.shape[0]):\n        topk_probs[i, topk_indices[i]] = probs[i, topk_indices[i]]\n    topk_probs /= topk_probs.sum(axis=-1, keepdims=True)\n    return np.round(topk_probs, decimals=4).tolist()"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    \"\"\"\n    Implements a Mixture-of-Experts (MoE) layer using softmax gating and top-k routing.\n    \n    Parameters:\n    x (np.ndarray): Input tensor of shape (batch_size, input_dim).\n    We (np.ndarray): Expert weight matrices of shape (n_experts, input_dim, output_dim).\n    Wg (np.ndarray): Gating weight matrix of shape (input_dim, n_experts).\n    n_experts (int): Number of experts.\n    top_k (int): Number of top experts to select per token.\n    \n    Returns:\n    np.ndarray: The MoE output tensor of shape (batch_size, output_dim).\n    \"\"\"\n    gating_scores = np.dot(x, Wg)\n    gating_probs = np.exp(gating_scores) / np.sum(np.exp(gating_scores), axis=-1, keepdims=True)\n    top_k_indices = np.argsort(gating_probs, axis=-1)[:, -top_k:]\n    top_k_probs = np.take_along_axis(gating_probs, top_k_indices, axis=-1)\n    top_k_probs_normalized = top_k_probs / np.sum(top_k_probs, axis=-1, keepdims=True)\n    expert_outputs = np.tensordot(x, We, axes=([1], [1]))\n    top_k_expert_outputs = np.take_along_axis(expert_outputs, top_k_indices[:, :, None], axis=1)\n    weighted_expert_outputs = top_k_expert_outputs * top_k_probs_normalized[:, :, None]\n    moe_output = np.sum(weighted_expert_outputs, axis=1)\n    return np.round(moe_output, 4).tolist()"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    (B, C, H, W) = X.shape\n    G = num_groups\n    assert C % G == 0, 'Number of channels must be divisible by the number of groups'\n    X = X.reshape(B, G, -1, H, W)\n    mean = np.mean(X, axis=(2, 3, 4), keepdims=True)\n    var = np.var(X, axis=(2, 3, 4), keepdims=True)\n    X_norm = (X - mean) / np.sqrt(var + epsilon)\n    X_norm = X_norm.reshape(B, C, H, W)\n    X_out = X_norm * gamma + beta\n    X_out = np.round(X_out, decimals=4)\n    return X_out.tolist()"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n    \"\"\"\n    Finds the value of x where the function f(x) = x^4 - 3x^3 + 2 reaches its minimum.\n    \n    Parameters:\n    - start_x: The initial x position to start the search.\n    - learning_rate: The step size for each iteration.\n    - tolerance: The threshold for determining convergence.\n    - max_iters: The maximum number of iterations to perform.\n    \n    Returns:\n    - The x value where f(x) reaches its minimum, rounded to 4 decimal places.\n    \"\"\"\n\n    def f(x):\n        return x ** 4 - 3 * x ** 3 + 2\n\n    def df(x):\n        return 4 * x ** 3 - 9 * x ** 2\n    x = start_x\n    for _ in range(max_iters):\n        gradient = df(x)\n        if abs(gradient) < tolerance:\n            break\n        x -= learning_rate * gradient\n    return round(x, 4)\nstart_x = np.random.uniform(-10, 10)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    \"\"\"\n    Implements the Dynamic Tanh (DyT) function, which is a normalization-free transformation\n    inspired by the Tanh function. This function is designed to replace layer normalization\n    in Transformer architectures while preserving the squashing behavior and enabling stable training.\n    \n    Parameters:\n    x (np.ndarray): Input array.\n    alpha (float): Scaling factor for the input.\n    gamma (float): Scaling factor for the output.\n    beta (float): Bias term for the output.\n    \n    Returns:\n    list[float]: The transformed output as a list of floats, rounded to the nearest 4th decimal.\n    \"\"\"\n    scaled_input = alpha * x\n    tanh_output = np.tanh(scaled_input)\n    dyt_output = gamma * tanh_output + beta\n    rounded_output = np.round(dyt_output, 4).tolist()\n    return rounded_output\nx = np.array([0.1, 0.5, 1.0, 1.5, 2.0])\nalpha = 1.0\ngamma = 1.0\nbeta = 0.0"}
