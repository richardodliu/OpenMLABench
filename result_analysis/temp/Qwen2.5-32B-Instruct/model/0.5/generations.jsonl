{"task_id": 0, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Computes the weights for Ridge Regression using the closed-form solution.\n    \n    Parameters:\n    - data (np.ndarray): The input data where the last column is the target and preceding columns are features.\n    - alpha (float): The regularization strength. Defaults to 0.0.\n    \n    Returns:\n    - list[float]: The weight vector rounded to 4 decimal places.\n    If the matrix is not invertible, returns -1.\n    \"\"\"\n    # Separate features and target\n    X = data[:, :-1]\n    y = data[:, -1]\n    \n    # Add bias term (intercept)\n    X_bias = np.c_[np.ones(X.shape[0]), X]\n    \n    # Compute the closed-form solution\n    n_features = X_bias.shape[1]\n    identity_matrix = np.eye(n_features)\n    \n    # Add regularization term\n    A = X_bias.T @ X_bias + alpha * identity_matrix\n    \n    # Check if A is invertible\n    if np.linalg.det(A) == 0:\n        return -1\n    \n    # Compute weights\n    weights = np.linalg.inv(A) @ X_bias.T @ y\n    \n    # Round to 4 decimal places and convert to list\n    return [round(w, 4) for w in weights]\n\n# Example usage\ndata = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nalpha = 0.1\nprint(ridge_regression(data, alpha))\n```\n\nThis script defines the function `ridge_regression` which implements Ridge Regression using the closed-form solution. It takes a numpy array `data` and a regularization parameter `alpha`, and returns the weights as a list of floats rounded to four decimal places. If the matrix involved in the computation is not invertible, the function returns -1."}
{"task_id": 1, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    update_count = 0\n\n    # Compute the Gram matrix\n    K = np.dot(X_train, X_train.T)\n\n    while update_count < n_iter:\n        updated = False\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * K[:, i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n        if not updated:\n            break\n        update_count += 1\n\n    # Compute the primal weight vector w\n    w = np.dot(alpha * y_train, X_train)\n    w = [round(x, 4) for x in w]\n    b = round(b, 4)\n    return w, b\n\n# Example usage:\nX_train = np.array([[1, 2], [2, 3], [3, 4], [-1, -2], [-2, -3], [-3, -4]])\ny_train = np.array([1, 1, 1, -1, -1, -1])\nw, b = perceptron_dual(X_train, y_train)\nprint(\"w:\", w)\nprint(\"b:\", b)\n```\n\nThis script defines the `perceptron_dual` function that implements the dual-form perceptron learning algorithm as specified. It includes the computation of the Gram matrix, the iterative update of the dual parameters `alpha` and the bias `b`, and the final computation of the primal weight vector `w`. The example usage at the end demonstrates how to call the function with a sample dataset."}
{"task_id": 2, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    links = {\n        'identity': {\n            'link': lambda mu: mu,\n            'inv_link': lambda eta: eta,\n            'derivative': lambda mu: np.ones_like(mu)\n        },\n        'log': {\n            'link': lambda mu: np.log(mu),\n            'inv_link': lambda eta: np.exp(eta),\n            'derivative': lambda mu: 1 / mu\n        },\n        'logit': {\n            'link': lambda mu: np.log(mu / (1 - mu)),\n            'inv_link': lambda eta: 1 / (1 + np.exp(-eta)),\n            'derivative': lambda mu: 1 / (mu * (1 - mu))\n        }\n    }\n    return links\n\n# Example usage\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links[\"logit\"][\"link\"](mu)\nmu2 = links[\"logit\"][\"inv_link\"](eta)\n\nprint(\"Original mu:\", mu)\nprint(\"Transformed eta:\", np.round(eta, 4))\nprint(\"Recovered mu:\", np.round(mu2, 4))\n```\n\nThis script defines a `glm_links` function that returns a dictionary of link functions for the identity, log, and logit links. Each entry in the dictionary contains callables for the link function, its inverse, and its derivative. These functions are designed to work with both numpy scalars and 1-D/2-D numpy arrays through element-wise operations. The example usage at the bottom demonstrates how to use the returned link functions to transform and recover values."}
{"task_id": 3, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n\n    def build_tree(indices, depth):\n        if len(indices) < 3:\n            return indices, depth\n        f = np.random.randint(data.shape[1])\n        down = np.min(data[indices, f])\n        up = np.max(data[indices, f])\n        v = np.random.uniform(down, up)\n        left_indices = indices[data[indices, f] <= v]\n        right_indices = indices[data[indices, f] > v]\n        left_tree = build_tree(left_indices, depth + 1)\n        right_tree = build_tree(right_indices, depth + 1)\n        return left_tree, right_tree\n\n    def find_depth(tree, sample_index, current_depth):\n        if isinstance(tree, int):\n            return current_depth if tree == sample_index else None\n        if isinstance(tree, tuple):\n            left_tree, right_tree = tree\n            if sample_index in left_tree[0]:\n                return find_depth(left_tree, sample_index, current_depth)\n            else:\n                return find_depth(right_tree, sample_index, current_depth)\n        return find_depth(tree[0], sample_index, current_depth + 1)\n\n    all_indices = np.arange(data.shape[0])\n    tree = build_tree(all_indices, 0)\n    depths = [find_depth(tree, i, 0) for i in range(data.shape[0])]\n    return depths\n\n# Example usage\ndata = np.arange(5).reshape(-1, 1)\nprint(isolation_tree_path_length(data))  # Output: [2, 2, 2, 1, 1]\n```"}
{"task_id": 7, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                      itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    # Calculate the minimum support count\n    min_support_count = math.ceil(minsup * len(transactions))\n    \n    # Flatten the list of transactions to find all unique items\n    all_items = set(item for transaction in transactions for item in transaction)\n    \n    # Initialize the frequent itemsets dictionary\n    frequent_itemsets = {}\n    \n    # Function to check if an itemset is frequent\n    def is_frequent(itemset):\n        return sum(1 for transaction in transactions if set(itemset).issubset(transaction)) >= min_support_count\n    \n    # Generate frequent itemsets of all possible lengths\n    for r in range(1, len(all_items) + 1):\n        # Generate all possible combinations of the current length\n        itemsets = combinations(all_items, r)\n        for itemset in itemsets:\n            if is_frequent(itemset):\n                # Add to the dictionary with the support count\n                support_count = sum(1 for transaction in transactions if set(itemset).issubset(transaction))\n                frequent_itemsets[tuple(sorted(itemset))] = support_count\n    \n    return frequent_itemsets\n\n# Example usage\ntransactions = [\n    ['bread', 'milk'],\n    ['bread', 'diaper', 'beer', 'egg'],\n    ['milk', 'diaper', 'beer', 'coke'],\n    ['bread', 'milk', 'diaper', 'beer'],\n    ['bread', 'milk', 'diaper', 'coke']\n]\nminsup = 0.6\n\nprint(find_frequent_itemsets(transactions, minsup))\n```\n\nThis script defines a function `find_frequent_itemsets` which takes a list of transactions (where each transaction is a list of items) and a minimum support threshold as inputs. It then calculates and returns all frequent itemsets along with their support counts, adhering to the provided specifications."}
{"task_id": 11, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    n_samples, n_features = data.shape\n    centres = np.array(data[:k].copy(), dtype=float)\n    labels = np.zeros(n_samples, dtype=int)\n    changes = np.full(k, np.inf)\n    iter_count = 0\n\n    while np.max(changes) > epsilon and iter_count < max_iter:\n        # Assign each sample to the nearest centre.\n        for i in range(n_samples):\n            distances = np.sum((data[i] - centres)**2, axis=1)\n            labels[i] = np.argmin(distances)\n\n        # Recompute centres.\n        for j in range(k):\n            cluster_samples = data[labels == j]\n            if len(cluster_samples) == 0:\n                # If the cluster is empty, reinitialize with a random point.\n                centres[j] = data[np.random.randint(n_samples)]\n            else:\n                new_centre = np.mean(cluster_samples, axis=0)\n                changes[j] = np.sqrt(np.sum((centres[j] - new_centre)**2))\n                centres[j] = new_centre\n\n        iter_count += 1\n\n    # Round the centres to 4 decimal places.\n    rounded_centres = [np.round(centre, 4).tolist() for centre in centres]\n\n    return rounded_centres, labels.tolist()\n\n# Example usage:\n# data = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# k = 2\n# centres, labels = kmeans(data, k)\n# print(\"Centres:\", centres)\n# print(\"Labels:\", labels)\n```"}
{"task_id": 13, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n    \n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n    \n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n    \n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_user, n_item = data.shape\n    S = np.zeros((n_item, n_item))\n    \n    # Step 1: Build an item-item similarity matrix\n    for i in range(n_item):\n        for j in range(i+1, n_item):\n            users_rated_both = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(users_rated_both) == 0:\n                S[i, j] = S[j, i] = 0\n            else:\n                v1 = data[users_rated_both, i]\n                v2 = data[users_rated_both, j]\n                if criterion == 'cosine':\n                    if np.std(v1) > 1e-3:\n                        v1 = v1 - np.mean(v1)\n                    if np.std(v2) > 1e-3:\n                        v2 = v2 - np.mean(v2)\n                    S[i, j] = S[j, i] = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n                elif criterion == 'pearson':\n                    S[i, j] = S[j, i] = np.corrcoef(v1, v2)[0, 1]\n    \n    # Step 2: Collect the indices of the items the active user has rated\n    rated_items = np.where(data[user_ind] > 0)[0]\n    r = data[user_ind, rated_items]\n    \n    # Step 3: Compute the predicted attractiveness for every unrated item\n    scores = defaultdict(float)\n    for t in range(n_item):\n        if t not in rated_items:\n            numerator = np.sum(r * S[t, rated_items])\n            denominator = np.sum(np.abs(S[t, rated_items]))\n            if denominator > 0:\n                scores[t] = numerator / denominator\n    \n    # Step 4: Return a list with the k most promising items\n    sorted_scores = sorted(scores.items(), key=lambda x: (-x[1], x[0]))\n    return [item for item, score in sorted_scores[:k]]\n\n# Example usage:\ndata = np.array([[5, 3, 0, 1], \n                 [4, 0, 0, 1], \n                 [1, 1, 0, 5], \n                 [1, 0, 0, 4], \n                 [0, 1, 5, 4]])\n\nknn_recommend(data, 0, 2, 'cosine')\n```\n\nThis script defines the `knn_recommend` function, which implements the item-based k-NN collaborative filtering recommender system as per the task description. It builds an item-item similarity matrix, computes the predicted attractiveness for unrated items, and returns the indices of the most promising items for recommendation."}
{"task_id": 19, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_gain = -np.inf\n    best_split = None\n\n    for feature_idx in range(n_features):\n        feature_values = X[:, feature_idx]\n        unique_thresholds = np.unique(feature_values)\n\n        for threshold in unique_thresholds:\n            left_mask = feature_values <= threshold\n            right_mask = feature_values > threshold\n\n            if np.sum(left_mask) < 2 or np.sum(right_mask) < 2:\n                continue\n\n            left_g, right_g = g[left_mask], g[right_mask]\n            left_h, right_h = h[left_mask], h[right_mask]\n\n            gain = compute_gain(g, h, gamma, lam) - compute_gain(left_g, left_h, gamma, lam) - compute_gain(right_g, right_h, gamma, lam)\n\n            if gain > best_gain:\n                best_gain = gain\n                best_split = (feature_idx, threshold)\n\n    return best_split\n\ndef compute_gain(g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> float:\n    numerator = np.sum(g) ** 2\n    denominator = np.sum(h) + lam\n    loss = -0.5 * (numerator / denominator) + gamma\n    return loss\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# g = np.array([0.1, 0.2, 0.3, 0.4])\n# h = np.array([0.5, 0.6, 0.7, 0.8])\n# gamma = 0.1\n# lam = 0.1\n# print(best_split(X, g, h, gamma, lam))\n```\n\nIn the provided code, the `best_split` function iterates over all features and all unique values of each feature to find the best split. The `compute_gain` helper function calculates the loss for a set of instances based on the given formula. If no split yields a positive gain, the function returns `None`."}
{"task_id": 20, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Convert input to a NumPy array if it's a list\n    if isinstance(x, list):\n        x = np.array(x)\n    \n    # Compute the sigmoid function\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    \n    # Compute the gradient of the sigmoid function\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    \n    # Convert the results to the required format\n    if isinstance(x, (int, float)):\n        sigmoid_x = round(float(sigmoid_x), 4)\n        gradient_x = round(float(gradient_x), 4)\n    else:\n        sigmoid_x = [round(float(i), 4) for i in sigmoid_x.tolist()]\n        gradient_x = [round(float(i), 4) for i in gradient_x.tolist()]\n    \n    return sigmoid_x, gradient_x\n\n# Test cases\nprint(sigmoid_activation(1))  # Scalar input\nprint(sigmoid_activation([1, 2, 3]))  # List input\nprint(sigmoid_activation(np.array([[1, 2], [3, 4]])))  # 2D array input\n```\n\nThis script follows the provided requirements and constraints, implementing a `sigmoid_activation` function that computes both the sigmoid and its gradient for a given input, which can be a scalar, a list, or a NumPy array. The results are rounded to 4 decimal places and returned in the specified format."}
{"task_id": 21, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float],\n                        y_train: list[int],\n                        x_test: list[float],\n                        epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    # Combine training data and labels for sorting\n    combined = sorted(zip(x_train, y_train), key=lambda x: x[0])\n    x_train, y_train = zip(*combined)\n    x_train, y_train = list(x_train), list(y_train)\n    \n    # Initialize weights\n    weights = [1 / len(x_train)] * len(x_train)\n    stumps = []\n    alphas = []\n    \n    while True:\n        min_error = float('inf')\n        best_stump = None\n        \n        # Enumerate over all possible stumps\n        for i in range(len(x_train) - 1):\n            theta = (x_train[i] + x_train[i + 1]) / 2\n            for d in [0, 1]:\n                # Predict using the current stump\n                predictions = [1 if ((d == 0 and x <= theta) or (d == 1 and x > theta)) else -1 for x in x_train]\n                error = sum(w for x, y, w in zip(predictions, y_train, weights) if x != y)\n                \n                if error < min_error:\n                    min_error = error\n                    best_stump = (d, theta)\n        \n        # Compute alpha and update weights\n        if min_error == 0:\n            alpha = 1\n        else:\n            alpha = 0.5 * math.log((1 - min_error) / min_error)\n        \n        predictions = [1 if ((best_stump[0] == 0 and x <= best_stump[1]) or (best_stump[0] == 1 and x > best_stump[1])) else -1 for x in x_train]\n        for i in range(len(x_train)):\n            if predictions[i] != y_train[i]:\n                weights[i] *= math.exp(alpha)\n            else:\n                weights[i] *= math.exp(-alpha)\n        \n        # Normalize weights\n        weights = [w / sum(weights) for w in weights]\n        \n        # Append stump and alpha to the list\n        stumps.append(best_stump)\n        alphas.append(alpha)\n        \n        # Check training error\n        ensemble_prediction = [sum(alphas[i] * (1 if ((stumps[i][0] == 0 and x <= stumps[i][1]) or (stumps[i][0] == 1 and x > stumps[i][1])) else -1) for i in range(len(stumps))) for x in x_train]\n        ensemble_prediction = [1 if p > 0 else -1 for p in ensemble_prediction]\n        training_error = sum(1 for y1, y2 in zip(ensemble_prediction, y_train) if y1 != y2) / len(y_train)\n        \n        if training_error <= epsilon:\n            break\n    \n    # Predict on test data\n    test_predictions = [sum(alphas[i] * (1 if ((stumps[i][0] == 0 and x <= stumps[i][1]) or (stumps[i][0] == 1 and x > stumps[i][1])) else -1) for i in range(len(stumps))) for x in x_test]\n    test_predictions = [1 if p > 0 else -1 for p in test_predictions]\n    \n    return test_predictions\n```\n\nThis function implements the AdaBoost algorithm with one-dimensional decision stumps from scratch. The function takes training data, labels, test data, and an optional epsilon parameter as inputs and returns the predictions for the test data. The algorithm stops training once the ensemble's training error is less than or equal to the specified epsilon."}
{"task_id": 25, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    n, d = X_train.shape\n    m = X_test.shape[0]\n    \n    # Compute the matrix of squared Euclidean distances between each pair of training and test samples\n    dist_matrix = np.sum(X_test**2, axis=1)[:, np.newaxis] + np.sum(X_train**2, axis=1) - 2 * np.dot(X_test, X_train.T)\n    \n    # Compute the kernel matrix\n    kernel_matrix = np.exp(-gamma * dist_matrix)\n    \n    # Compute the decision function for each test sample\n    decision_values = np.sum(alpha * y_train * kernel_matrix, axis=1) + b\n    \n    # Predict the labels based on the sign of the decision function\n    y_pred = np.sign(decision_values)\n    \n    # Convert to list of integers\n    return list(y_pred.astype(int))\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4]])\n# y_train = np.array([1, -1, 1])\n# alpha = np.array([0.5, 0.2, 0.3])\n# b = 0.1\n# gamma = 0.5\n# X_test = np.array([[2, 3], [3, 4]])\n# print(gaussian_svm_predict(X_train, y_train, alpha, b, gamma, X_test))\n```\n\nThis code defines the `gaussian_svm_predict` function which takes as input the training data (`X_train`, `y_train`), the parameters of the trained SVM model (`alpha`, `b`, `gamma`), and the test data (`X_test`). It computes the Gaussian kernel matrix between the training and test samples, calculates the decision function for each test sample, and then predicts the labels based on the sign of the decision function. The output is a list of predicted labels for each test sample."}
{"task_id": 28, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    # Convert list of lists to numpy array\n    X_np = np.array(X)\n    m, n = X_np.shape\n    \n    # Check for valid k\n    if k < 1 or k > min(m, n):\n        return -1\n    \n    # Perform SVD\n    U, S, VT = np.linalg.svd(X_np, full_matrices=False)\n    \n    # Truncate SVD to k components\n    Sigma_k = np.diag(S[:k])\n    U_k = U[:, :k]\n    VT_k = VT[:k, :]\n    \n    # Reconstruct the matrix\n    X_hat_np = U_k @ Sigma_k @ VT_k\n    \n    # Calculate mean squared error\n    mse = np.mean((X_np - X_hat_np) ** 2)\n    \n    # Convert back to list of lists and round\n    X_hat = np.round(X_hat_np, 4).tolist()\n    mse = round(mse, 4)\n    \n    return X_hat, mse\n\n# Example usage\nX = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nk = 2\nprint(linear_autoencoder(X, k))\n```\n\nThis script defines the `linear_autoencoder` function that performs the required task, including input validation, SVD computation, matrix reconstruction, and error calculation. The output is rounded to four decimal places as requested."}
{"task_id": 29, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                           y_train: list[float] | np.ndarray,\n                           x_query: float,\n                           epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    # Convert to numpy arrays for easier manipulation\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    \n    # Sort the training samples by the single feature x\n    sorted_indices = np.argsort(x_train)\n    x_train = x_train[sorted_indices]\n    y_train = y_train[sorted_indices]\n    \n    # Initialize residuals with the target values\n    residuals = y_train.copy()\n    # Initialize the prediction with zeros\n    prediction = np.zeros_like(y_train)\n    \n    # Determine all possible split points (mid-points between consecutive x_train values)\n    split_points = (x_train[:-1] + x_train[1:]) / 2\n    \n    while True:\n        best_rss = np.inf\n        best_split = None\n        best_c1 = best_c2 = 0\n        \n        for s in split_points:\n            # Calculate the means of the residuals for each side of the split\n            mask_left = x_train <= s\n            mask_right = x_train > s\n            \n            if mask_left.sum() > 0:\n                c1 = residuals[mask_left].mean()\n            else:\n                c1 = 0\n            \n            if mask_right.sum() > 0:\n                c2 = residuals[mask_right].mean()\n            else:\n                c2 = 0\n            \n            # Predictions using the current stump\n            stump_predictions = np.where(x_train <= s, c1, c2)\n            # New residuals\n            new_residuals = residuals - stump_predictions\n            # Compute the RSS\n            rss = (new_residuals ** 2).sum()\n            \n            if rss < best_rss:\n                best_rss = rss\n                best_split = s\n                best_c1 = c1\n                best_c2 = c2\n        \n        # If the best RSS is less than epsilon, stop the loop\n        if best_rss < epsilon:\n            break\n        \n        # Add the best stump to the ensemble\n        prediction += np.where(x_train <= best_split, best_c1, best_c2)\n        # Update the residuals\n        residuals = y_train - prediction\n        \n    # Predict for the query point\n    query_prediction = np.where(x_query <= best_split, best_c1, best_c2)\n    for s, c1, c2 in zip(split_points, prediction, prediction):\n        query_prediction += np.where(x_query <= s, c1, c2)\n    \n    return round(query_prediction, 4)\n\n# Example usage:\nx_train = [1, 2, 3, 4, 5]\ny_train = [1, 2, 3, 2, 1]\nx_query = 2.5\nprint(predict_boosting_tree(x_train, y_train, x_query))\n```\n\nThis Python script implements the gradient boosting regressor for one-dimensional data with decision stumps as weak learners, as per the task description. It sorts the training samples, determines split points, iteratively adds stumps that minimize the squared residuals, and stops when the residual sum of squares is below the given tolerance. The prediction for a query point is then calculated and returned, rounded to four decimal places."}
{"task_id": 34, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None) -> np.ndarray:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s according to the specified shape and sparsity.\n    \n    :param shape: A tuple specifying the desired shape of the output tensor.\n    :param sparsity: A float in the range [0, 1] indicating the probability of generating a 1.0.\n    :param seed: An optional integer seed for reproducibility. If provided, the random generator is seeded.\n    :return: A numpy.ndarray of the specified shape whose entries are 0.0 or 1.0.\n             Returns -1 if sparsity is outside the [0, 1] range.\n    \"\"\"\n    if not (0 <= sparsity <= 1):\n        return -1\n    \n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Generate random values and apply threshold based on sparsity\n    random_tensor = np.random.rand(*shape)\n    binary_tensor = np.where(random_tensor < sparsity, 1.0, 0.0)\n    \n    return binary_tensor\n\n# Example usage\nif __name__ == \"__main__\":\n    shape = (2, 3)\n    sparsity = 0.3\n    seed = 42\n    result = random_binary_tensor(shape, sparsity, seed)\n    print(result)\n```\n\nThis script defines a function `random_binary_tensor` that generates a binary tensor according to the given specifications. It includes an example usage that demonstrates how to call the function and print the resulting tensor."}
{"task_id": 39, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    # Perform partition around the median\n    med_idx = np.argpartition(data[:, d], len(data) // 2)\n    # Get the median index\n    pivot = med_idx[len(data) // 2]\n    \n    # Find the indices of the elements that are strictly less or greater than the median\n    left = med_idx[data[med_idx, d] < data[pivot, d]].tolist()\n    right = med_idx[data[med_idx, d] > data[pivot, d]].tolist()\n    \n    # Sort the lists of indices\n    left.sort()\n    right.sort()\n    \n    return pivot, left, right\n\n# Example usage\nif __name__ == \"__main__\":\n    np.random.seed(0)  # For reproducibility\n    data = np.random.rand(10, 2)\n    print(\"Data:\\n\", data)\n    pivot, left, right = get_split(data, 0)\n    print(\"Pivot index:\", pivot)\n    print(\"Left indices:\", left)\n    print(\"Right indices:\", right)\n```\n\nThis solution uses `numpy.argpartition` to find the median in O(n) time and then determines the pivot, left, and right indices based on the partitioned data. The lists of indices are sorted to ensure the output is deterministic."}
{"task_id": 40, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, \"Input signal must be one-dimensional.\"\n    assert stride >= 1, \"Stride must be a positive integer.\"\n    assert len(x) >= frame_width, \"Input signal must be longer than frame width.\"\n    \n    # Calculate the number of frames\n    n_frames = (len(x) - frame_width) // stride + 1\n    \n    # Calculate the new strides\n    new_strides = (stride * x.itemsize, x.itemsize)\n    \n    # Create the framed view\n    framed_x = as_strided(x, shape=(n_frames, frame_width), strides=new_strides)\n    \n    # Set writeability\n    framed_x.setflags(write=writeable)\n    \n    return framed_x\n\n# Example usage:\nx = np.arange(1, 10)\nframe_width = 3\nstride = 2\nwriteable = False\n\n# Call the function\nresult = to_frames(x, frame_width, stride, writeable)\nprint(result)\n```\n\nThis code defines the `to_frames` function which implements the desired functionality to break a one-dimensional signal into overlapping frames using the `as_strided` function from NumPy's `lib.stride_tricks` module. The function also checks for the preconditions and sets the writeability flag for the returned array."}
{"task_id": 48, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Convert the input to a numpy array if it's not already one\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n\n    # Check if the matrix is two-dimensional\n    if X.ndim != 2:\n        return False\n\n    # Check if all elements are between 0 and 1\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n\n    # Check if each row sums to 1 within a tolerance\n    row_sums = X.sum(axis=1)\n    if not np.allclose(row_sums, 1, atol=1e-8):\n        return False\n\n    return True\n\n# Test cases\nprint(is_stochastic([[1, 0], [0, 1]]))  # True\nprint(is_stochastic([[0.5, 0.5], [0.3, 0.7]]))  # True\nprint(is_stochastic([[0.5, 0.5], [0.3, 0.8]]))  # False\nprint(is_stochastic([[0.5, 0.5, 0], [0.3, 0.7, 0]]))  # True\nprint(is_stochastic([[1.1, -0.1], [0, 1]]))  # False\nprint(is_stochastic(np.array([[0.5, 0.5], [0.5, 0.5]])))  # True\n```"}
{"task_id": 55, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n_samples, n_features = X.shape\n    w = np.zeros(n_features)\n    s = np.zeros(n_features)\n    n_batches = (n_samples + batch_size - 1) // batch_size  # Ceiling division\n    \n    for it in range(max_iter):\n        for batch in np.array_split(X, n_batches):\n            idx = np.random.choice(n_samples, batch.shape[0], replace=n_samples < batch_size)\n            X_batch, y_batch = X[idx], y[idx]\n            grad = (1 / batch_size) * X_batch.T @ (X_batch @ w - y_batch)\n            s = rho * s + (1 - rho) * grad ** 2\n            w -= eta * grad / (np.sqrt(s) + eps_station)\n        \n        if np.linalg.norm(grad) < epsilon:\n            break\n    \n    return [round(val, 4) for val in w.tolist()]\n\n# Example usage:\n# X = np.random.rand(100, 5)\n# y = np.random.rand(100)\n# print(rms_prop(X, y))\n```\n\nThis script provides a self-contained implementation of the RMSprop optimization algorithm for a linear regression problem. It includes the necessary imports, the function definition with the detailed docstring, and a placeholder for example usage."}
{"task_id": 56, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(x, deriv=False):\n    \"\"\"\n    Computes the SoftPlus activation function or its derivative (sigmoid) for each element of x.\n    \n    Parameters:\n    x : scalar, list, or NumPy array of real numbers\n    deriv : bool, optional\n        If True, compute the derivative (sigmoid) of SoftPlus. Default is False.\n        \n    Returns:\n    list or float:\n        A list of the SoftPlus(x) or its derivative for each element of x, rounded to 4 decimal places.\n        If x is a scalar, returns a single float.\n    \"\"\"\n    x = np.array(x if isinstance(x, list) else [x])\n    \n    if deriv:\n        # Compute the derivative (sigmoid)\n        result = 1 / (1 + np.exp(-x))\n    else:\n        # Compute SoftPlus using a numerically stable formulation\n        result = np.where(x > 0, x + np.log1p(np.exp(-x)), np.log1p(np.exp(x)))\n    \n    # Round to the nearest 4th decimal\n    result = np.round(result, 4)\n    \n    # Convert back to list if input was a list or scalar\n    return result.tolist() if isinstance(x, list) else result.item()\n\n# Test cases\nprint(softplus(0))  # Scalar input, SoftPlus\nprint(softplus([0, 1000, -1000]))  # List input, SoftPlus\nprint(softplus(0, True))  # Scalar input, derivative\nprint(softplus([0, 1000, -1000], True))  # List input, derivative\n```"}
{"task_id": 58, "completion_id": 0, "completion": "```python\nfrom typing import List\nfrom collections import Counter\nimport numpy as np\n\ndef unsmoothed_ngram_log_prob(corpus: List[str], sequence: List[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    # Convert the corpus and sequence into a list of n-grams\n    def ngrams(data, n):\n        return [' '.join(data[i:i+n]) for i in range(len(data)-n+1)]\n    \n    # Create n-gram and (n-1)-gram count dictionaries\n    ngram_counts = Counter(ngrams(corpus, N))\n    prefix_counts = Counter(ngrams(corpus, N-1)) if N > 1 else Counter([''])\n    \n    # Compute the log-probability of the sequence\n    log_prob = 0.0\n    for ngram in ngrams(sequence, N):\n        ngram_count = ngram_counts[ngram]\n        prefix_count = prefix_counts[ngram.rsplit(' ', 1)[0]] if N > 1 else len(corpus)\n        if ngram_count == 0 or prefix_count == 0:\n            return float('-inf')\n        log_prob += np.log(ngram_count / prefix_count)\n    \n    return round(log_prob, 4)\n\n# Example usage\ncorpus = [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\nsequence = [\"the\", \"quick\", \"brown\", \"fox\"]\nN = 2\nprint(unsmoothed_ngram_log_prob(corpus, sequence, N))\n```\n\nThis Python script defines a function `unsmoothed_ngram_log_prob` which calculates the unsmoothed Maximum-Likelihood Estimation (MLE) N-gram log-probability of a given sequence based on a training corpus. The function uses `Counter` to create n-gram count tables and computes the log-probability following the rules specified in the task description."}
{"task_id": 62, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef lasso_regression(X: list[float] | np.ndarray, y: list[float] | np.ndarray, degree: int, reg_factor: float, n_iterations: int = 1000, tol: float = 1e-6) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X).reshape(-1, 1)\n    y = np.array(y).reshape(-1, 1)\n    m = len(X)\n    \n    # Build polynomial features\n    X_poly = np.hstack([X**i for i in range(degree + 1)])\n    \n    # Initialize weights\n    w = np.zeros((degree + 1, 1))\n    \n    for _ in range(n_iterations):\n        w_old = w.copy()\n        \n        # Update bias (w0)\n        w[0] = np.mean(y - X_poly[:, 1:] @ w[1:])\n        \n        # Update other weights\n        for j in range(1, degree + 1):\n            X_j = X_poly[:, j]\n            rho = X_j.T @ (y - X_poly @ w + w[j] * X_j)\n            w[j] = np.sign(rho) * max(abs(rho) - reg_factor, 0) / (X_j.T @ X_j)\n        \n        # Early stopping\n        if np.max(np.abs(w - w_old)) < tol:\n            break\n    \n    return [round(float(w_i), 4) for w_i in w]\n\n# Example usage:\nX = [1, 2, 3, 4, 5]\ny = [1, 4, 9, 16, 25]\ndegree = 2\nreg_factor = 0.1\nprint(lasso_regression(X, y, degree, reg_factor))\n```\n\nThis script defines the `lasso_regression` function that implements univariate Lasso regression with polynomial feature expansion using coordinate descent. The function takes one-dimensional input `X`, target values `y`, a polynomial degree `degree`, a regularisation strength `reg_factor`, an optional maximum number of iterations `n_iterations`, and an optional tolerance `tol` for early stopping. It returns the learned weights rounded to four decimal places."}
{"task_id": 63, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculates the backward probability vector for a given time index t in a Hidden Markov Model (HMM).\n    \n    Parameters:\n    A (list[list[float]]): Transition probability matrix of shape (N, N).\n    B (list[list[float]]): Emission probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices (length T).\n    t (int): Time index (0 \u2264 t < T).\n    \n    Returns:\n    list[float]: The backward probability vector at time index t, rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    T = len(obs)\n    N = A.shape[0]\n    \n    # Initialize beta matrix with zeros\n    beta = np.zeros((T, N))\n    \n    # Set the last row of beta to 1 as per the HMM definition\n    beta[T-1, :] = 1\n    \n    # Compute the beta values from T-2 to t\n    for time in range(T-2, t-1, -1):\n        for state in range(N):\n            beta[time, state] = np.sum(A[state, :] * B[:, obs[time+1]] * beta[time+1, :])\n    \n    # Return the beta values at time t rounded to 4 decimal places\n    return [round(x, 4) for x in beta[t, :]]\n\n# Example usage\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.4, 0.5], [0.7, 0.2, 0.1]]\nobs = [0, 1, 2]\nt = 1\n\nprint(backward_beta(A, B, obs, t))\n```\n\nThis function `backward_beta` computes the backward probability vector for a given time index \\(t\\) in a Hidden Markov Model (HMM) based on the provided transition probability matrix \\(A\\), emission probability matrix \\(B\\), a list of observation indices `obs`, and the time index `t`. The output is a list of backward probabilities rounded to 4 decimal places as specified."}
{"task_id": 65, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    # Check for empty input lists\n    if not A or not B or not pi or not obs:\n        return 0.0\n\n    # Convert lists to numpy arrays for easier manipulation\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    obs = np.array(obs)\n\n    N = A.shape[0]  # number of states\n    T = len(obs)  # length of the observation sequence\n\n    # Initialize the backward variables\n    beta = np.zeros((T, N))\n    beta[T-1, :] = 1.0  # base case\n\n    # Compute the backward variables\n    for t in range(T-2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t+1]] * beta[t+1, :])\n\n    # Compute the sequence probability\n    seq_prob = np.sum(pi * B[:, obs[0]] * beta[0, :])\n\n    return round(seq_prob, 6)\n\n# Example usage:\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.5, 0.5], [0.3, 0.7]]\npi = [0.6, 0.4]\nobs = [0, 1]\n\nprint(backward_prob(A, B, pi, obs))  # Output should be the sequence probability\n```"}
{"task_id": 69, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    observations = np.array(observations)\n\n    # Validate input dimensions\n    n = A.shape[0]\n    m = B.shape[1]\n    if S.shape[0] != n or A.shape[1] != n or B.shape[0] != n:\n        return -1\n\n    # Check that every observation index is in the valid range [0, m\u22121]\n    if np.any(observations < 0) or np.any(observations >= m):\n        return -1\n\n    # Check for empty sequence\n    if len(observations) == 0:\n        return -1\n\n    # Implement the forward algorithm\n    T = len(observations)\n    alpha = np.zeros((T, n))\n    alpha[0, :] = S * B[:, observations[0]]\n\n    for t in range(1, T):\n        for j in range(n):\n            alpha[t, j] = B[j, observations[t]] * np.dot(alpha[t-1, :], A[:, j])\n\n    # Return the probability that the model generates exactly that sequence\n    return round(np.sum(alpha[-1, :]), 4)\n\n# Example usage\nS = [0.6, 0.4]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.5, 0.4, 0.1], [0.1, 0.3, 0.6]]\nobservations = [0, 1, 2]\n\nprint(forward_algorithm(S, A, B, observations))  # Should output the likelihood of the observation sequence\n```"}
{"task_id": 70, "completion_id": 0, "completion": "```python\nfrom collections import Counter, defaultdict\nfrom typing import List\n\ndef fp_growth(transactions: List[List[str]], min_support: int) -> List[List[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    # Count the support of every single item and discard infrequent ones\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_support}\n    sorted_frequent_items = sorted(frequent_items.items(), key=lambda x: (-x[1], x[0]))\n    \n    # Build one FP-tree\n    header_table = {item: [] for item, _ in sorted_frequent_items}\n    for transaction in transactions:\n        filtered_transaction = sorted((item for item in transaction if item in header_table), key=lambda x: header_table[x][0] if header_table[x] else 0)\n        for item in filtered_transaction:\n            header_table[item].append(filtered_transaction)\n    \n    # Recursively mine conditional FP-trees to obtain larger item-sets\n    def mine_tree(header_table, prefix, frequent_itemsets):\n        for item in header_table:\n            new_prefix = prefix + [item]\n            frequent_itemsets.append(new_prefix)\n            conditional_patterns = [transaction[transaction.index(item):] for transaction in header_table[item]]\n            conditional_fptree = defaultdict(list)\n            for transaction in conditional_patterns:\n                if len(transaction) > 1:\n                    conditional_fptree[transaction[1]].append(transaction[1:])\n            if conditional_fptree:\n                mine_tree(conditional_fptree, new_prefix, frequent_itemsets)\n    \n    frequent_itemsets = []\n    mine_tree(header_table, [], frequent_itemsets)\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\n\n# Example usage:\ntransactions = [\n    ['a', 'b', 'c', 'd'],\n    ['b', 'c', 'e'],\n    ['a', 'b', 'c', 'e'],\n    ['a', 'b', 'd', 'e'],\n    ['a', 'b', 'c', 'd']\n]\nmin_support = 3\nprint(fp_growth(transactions, min_support))\n```\n\nPlease note that the given solution is a simplified version of the FP-Growth algorithm and does not fully implement the algorithm as described in the original academic paper. The example provided here focuses on the core logic of mining frequent item-sets and sorting the results as required. For a full academic implementation, the structure of the FP-tree and the way conditional patterns are handled would need to be more precisely defined."}
{"task_id": 75, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if not (1 <= k <= len(X_train)):\n        return [-1]\n\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    predictions = []\n    for test_sample in X_test:\n        # Compute the Euclidean distances (without square root) between the test sample and all training samples\n        distances = np.sum((X_train - test_sample) ** 2, axis=1)\n        # Get the indices of the k nearest neighbors\n        k_indices = np.argsort(distances)[:k]\n        # Get the labels of the k nearest neighbors\n        k_nearest_labels = y_train[k_indices]\n        # Find the most common label among the k nearest neighbors\n        (values, counts) = np.unique(k_nearest_labels, return_counts=True)\n        index = np.argmax(counts)\n        # In case of a tie, return the smallest label\n        tied_labels = values[counts == counts[index]]\n        predictions.append(np.min(tied_labels))\n    \n    return predictions\n\n# Example usage:\nX_train = [[1, 2], [2, 3], [3, 4], [5, 6], [7, 8]]\ny_train = [0, 0, 0, 1, 1]\nX_test = [[2, 2], [6, 6]]\nk = 3\npredictions = knn_predict(X_train, y_train, X_test, k)\nprint(predictions)  # Output should be [0, 1]\n```"}
{"task_id": 76, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Convert to NumPy arrays if necessary\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    \n    # Machine epsilon for numerical stability\n    epsilon = np.finfo(y_pred.dtype).eps\n    \n    # Compute the categorical cross-entropy loss\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    \n    # Return the loss rounded to 4 decimal places\n    return round(loss, 4)\n\n# Example usage\ny = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\ny_pred = [[0.8, 0.1, 0.1], [0.2, 0.7, 0.1], [0.1, 0.1, 0.8]]\nprint(cross_entropy_loss(y, y_pred))\n```\n\nThis code defines the `cross_entropy_loss` function that computes the unnormalised categorical cross-entropy loss for a batch of one-hot encoded targets and predicted probabilities. It uses NumPy for efficient computation and ensures numerical stability by adding machine epsilon to the predicted probabilities before applying the logarithm. The total loss is rounded to four decimal places before being returned."}
{"task_id": 77, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> tuple[list[float], list]:\n    \"\"\"\n    Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    tuple[list[float], list]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m). And a list of caches.\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2  # number of layers in the neural network\n\n    # Implement [LINEAR -> RELU]*(L-1). Add \"cache\" to the \"caches\" list.\n    for l in range(1, L):\n        A_prev = A\n        A, cache = linear_activation_forward(A_prev, parameters['W' + str(l)], parameters['b' + str(l)], activation=\"relu\")\n        caches.append(cache)\n\n    # Implement LINEAR -> SIGMOID. Add \"cache\" to the \"caches\" list.\n    AL, cache = linear_activation_forward(A, parameters['W' + str(L)], parameters['b' + str(L)], activation=\"sigmoid\")\n    caches.append(cache)\n\n    # Convert AL to a list with 4 decimal places\n    AL_list = [round(x, 4) for x in AL.tolist()[0]]\n    \n    return AL_list, caches\n\ndef linear_activation_forward(A_prev, W, b, activation):\n    \"\"\"\n    Implement the forward propagation for the LINEAR->ACTIVATION layer\n\n    Arguments:\n    A_prev -- activations from previous layer (or input data): (size of previous layer, number of examples)\n    W -- weights matrix: numpy array of shape (size of current layer, size of previous layer)\n    b -- bias vector, numpy array of shape (size of the current layer, 1)\n    activation -- the activation to be used in this layer, stored as a text string: \"sigmoid\" or \"relu\"\n\n    Returns:\n    A -- the output of the activation function, also called the post-activation value \n    cache -- a tuple containing \"linear_cache\" and \"activation_cache\";\n             stored for computing the backward pass efficiently\n    \"\"\"\n    \n    if activation == \"sigmoid\":\n        # Inputs: \"A_prev, W, b\". Outputs: \"A, activation_cache\".\n        Z = np.dot(W, A_prev) + b\n        A = 1 / (1 + np.exp(-Z))\n        activation_cache = Z\n    \n    elif activation == \"relu\":\n        # Inputs: \"A_prev, W, b\". Outputs: \"A, activation_cache\".\n        Z = np.dot(W, A_prev) + b\n        A = np.maximum(0, Z)\n        activation_cache = Z\n\n    linear_cache = (A_prev, W, b)\n    cache = (linear_cache, activation_cache)\n\n    return A, cache\n\n# Example usage:\n# parameters = {\n#     'W1': np.array([[0.05, 0.1], [0.15, 0.2]]),\n#     'b1': np.array([[0.35], [0.35]]),\n#     'W2': np.array([[0.6], [0.7]]),\n#     'b2': np.array([[0.35]])\n# }\n# X = np.array([[0.05, 0.1]])\n# AL_list, caches = L_model_forward(X, parameters)\n# print(AL_list)\n```\n\nThis script defines a function `L_model_forward` that performs forward propagation for an L-layer neural network with ReLU activations in hidden layers and a sigmoid activation in the output layer. The function takes an input matrix `X` and a dictionary of parameters, and returns the final activation as a Python list and a list of caches for each layer. Additionally, a helper function `linear_activation_forward` is provided to perform the linear transformation followed by the activation function for each layer."}
{"task_id": 81, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    # Ensure the arrays are numpy arrays and have the same shape\n    A2 = np.array(A2)\n    Y = np.array(Y)\n    assert A2.shape == Y.shape, \"A2 and Y must have the same shape\"\n    \n    # Clip A2 to avoid log(0) and log(1)\n    epsilon = 1e-15\n    A2 = np.clip(A2, epsilon, 1 - epsilon)\n    \n    # Compute the binary cross-entropy cost\n    m = Y.shape[1] if len(Y.shape) == 2 else Y.size\n    cost = - (1/m) * np.sum(Y * np.log(A2) + (1 - Y) * np.log(1 - A2))\n    \n    return round(cost, 6)\n\n# Example usage\nA2 = np.array([[0.9, 0.1, 0.8, 0.3]])\nY = np.array([[1, 0, 1, 0]])\nprint(compute_cost(A2, Y))\n```\nThis script defines the `compute_cost` function as specified in the task and demonstrates its usage with an example."}
{"task_id": 82, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | np.ndarray, epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    n = len(Q)\n    greedy_index = np.argmax(Q)\n    base_prob = epsilon / n\n    greedy_prob = 1 - epsilon + base_prob\n    \n    probabilities = [base_prob] * n\n    probabilities[greedy_index] = greedy_prob\n    \n    # Ensure probabilities sum to 1 within numerical tolerance\n    probabilities = np.round(probabilities, decimals=4)\n    probabilities[greedy_index] += 1 - np.sum(probabilities)\n    probabilities[greedy_index] = round(probabilities[greedy_index], 4)\n    \n    return probabilities.tolist()\n\n# Example usage\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1\nprint(epsilon_soft(Q, epsilon))\n```\n\nThis solution implements the described \u03b5-soft exploration policy. It calculates the probabilities of selecting each action based on the Q-values and the given \u03b5 value, ensuring that the probabilities are rounded to 4 decimal places and sum to 1 within numerical tolerance."}
{"task_id": 86, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    # Transpose the list to group predictions by sample\n    transposed_predictions = list(zip(*predictions))\n    # Aggregate predictions using majority vote\n    aggregated_predictions = []\n    for sample_predictions in transposed_predictions:\n        # Count the occurrences of each label\n        label_counts = Counter(sample_predictions)\n        # Find the label with the highest count, breaking ties by choosing the smallest label\n        majority_vote = min(label_counts, key=lambda k: (-label_counts[k], k))\n        aggregated_predictions.append(majority_vote)\n    return aggregated_predictions\n\n# Example usage\npredictions = [\n    [1, 2, 1, 2, 1],\n    [1, 2, 2, 2, 1],\n    [2, 2, 1, 1, 1]\n]\nprint(aggregate_random_forest_votes(predictions))  # Output: [1, 2, 1, 2, 1]\n```"}
{"task_id": 88, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already one\n    z = np.array(z) if not isinstance(z, np.ndarray) else z\n    \n    # Compute the softplus using the numerically stable np.logaddexp\n    result = np.logaddexp(0.0, z)\n    \n    # Round the results to 4 decimal places\n    result_rounded = np.round(result, 4)\n    \n    # Check if the original input was a scalar, and if so, return a float\n    if result_rounded.size == 1:\n        return float(result_rounded)\n    else:\n        # Convert the NumPy array to a pure Python list\n        return result_rounded.tolist()\n\n# Example usage\nz = np.array([-1000, 0, 3])\nprint(softplus(z))  # Output: [0.0, 0.6931, 3.0486]\n```"}
{"task_id": 90, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Check if policy has no estimates\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    \n    # Extract true expected payouts and policy's estimates\n    true_evs = bandit.arm_evs\n    estimates = [policy.ev_estimates[i] for i in sorted(policy.ev_estimates)]\n    \n    # Calculate mean-squared error\n    mse_value = np.mean([(estimates[i] - true_evs[i]) ** 2 for i in range(len(true_evs))])\n    \n    # Return result rounded to 4 decimal places\n    return round(mse_value, 4)\n\n# Example usage\nbandit = {\"arm_evs\": [0.5, 0.2, 0.9]}\npolicy = {\"ev_estimates\": {0: 0.4, 1: 0.25, 2: 0.8}}\nmse_result = mse(bandit, policy)\nprint(mse_result)\n```\n\nThis script defines the `mse` function as required and includes an example usage that demonstrates how to compute the mean-squared error between a policy's estimates and the true expected payouts of a bandit's arms."}
{"task_id": 96, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # Create a vocabulary including <UNK>\n    vocab = set()\n    for sentence in corpus:\n        vocab.update(sentence.split())\n    vocab.add(\"<UNK>\")\n    vocab_size = len(vocab)\n    \n    # Build N-gram frequency tables\n    ngram_counts = defaultdict(Counter)\n    for sentence in corpus:\n        words = sentence.split()\n        for i in range(len(words) - N + 1):\n            ngram = tuple(words[i:i+N])\n            ngram_counts[N-1][ngram] += 1\n            # Also count the context for lower order ngrams\n            for n in range(1, N):\n                context = tuple(words[i:i+n])\n                ngram_counts[n-1][context] += 1\n\n    # Process the sequence\n    words = sequence.split()\n    if len(words) < N:\n        return 0.0\n    \n    log_prob = 0.0\n    for i in range(len(words) - N + 1):\n        ngram = tuple(words[i:i+N])\n        context = tuple(words[i:i+N-1])\n        count_ngram = ngram_counts[N-1][ngram]\n        count_context = ngram_counts[N-2][context] if N > 1 else len(corpus)\n        for word in ngram:\n            if word not in vocab:\n                count_ngram = ngram_counts[N-1][context + (\"<UNK>\",)]\n                break\n        prob = (count_ngram + K) / (count_context + K * vocab_size)\n        log_prob += math.log(prob)\n    \n    return round(log_prob, 4)\n\n# Example usage\ncorpus = [\"the cat sat on the mat\", \"the dog sat on the rug\", \"the cat and the dog\"]\nsequence = \"the cat sat on the rug\"\nN = 3\nK = 1.0\nprint(additive_ngram_log_prob(corpus, sequence, N, K))\n```\n```"}
{"task_id": 108, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    N, M = X.shape\n    np.random.seed(0)\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n\n    for _ in range(max_iter):\n        # Update W\n        for n in range(N):\n            W[n, :] = np.linalg.solve(\n                np.dot(H, H.T) + alpha * np.eye(K),\n                np.dot(X[n, :], H.T)\n            )\n        \n        # Update H\n        for m in range(M):\n            H[:, m] = np.linalg.solve(\n                np.dot(W.T, W) + alpha * np.eye(K),\n                np.dot(W.T, X[:, m])\n            )\n        \n        # Compute the regularised loss\n        X_hat = np.dot(W, H)\n        loss = np.linalg.norm(X - X_hat) ** 2 + alpha * (np.linalg.norm(W) ** 2 + np.linalg.norm(H) ** 2)\n        \n        # Check if the loss is below the tolerance\n        if loss < tol:\n            break\n    \n    return X_hat.round(4).tolist()\n\n# Example usage\nX = np.array([[1, 0, 2], [0, 3, 0], [4, 0, 5]])\nK = 2\nresult = als_factorization(X, K)\nprint(result)\n```\n\nThis code snippet defines a function `als_factorization` which factorizes a given matrix `X` using the regularized Alternating Least Squares (ALS) method. The function initializes the matrices `W` and `H` with random values using a fixed seed for reproducibility, then iteratively updates `W` and `H` by solving regularized least squares problems. The process stops if the regularized loss drops below a specified tolerance or if the maximum number of iterations is reached. The reconstructed matrix `X_hat` is returned as a list of lists, rounded to four decimal places."}
{"task_id": 109, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n    \n    m, n = X.shape\n    centroids = [X[np.random.choice(m)]]\n    \n    for _ in range(1, K):\n        dists = np.array([min([np.linalg.norm(x-c)**2 for c in centroids]) for x in X])\n        probs = dists / dists.sum()\n        cumprobs = probs.cumsum()\n        r = random.random()\n        for j, p in enumerate(cumprobs):\n            if r < p:\n                i = j\n                break\n        centroids.append(X[i])\n    \n    old_labels = np.zeros(m, dtype=int)\n    for _ in range(max_iter):\n        dists = np.array([[np.linalg.norm(x - c) for c in centroids] for x in X])\n        labels = np.argmin(dists, axis=1)\n        if np.array_equal(labels, old_labels):\n            break\n        old_labels = labels\n        \n        for i in range(K):\n            if np.sum(labels == i) > 0:\n                centroids[i] = np.mean(X[labels == i], axis=0)\n    \n    centroids = [np.round(c, 4).tolist() for c in centroids]\n    centroids.sort(key=lambda x: (x[0], x))\n    \n    return centroids\n```\n\nThis Python script defines the `kmeans` function which performs K-Means clustering with K-Means++ initialization. It accepts a two-dimensional NumPy array `X`, an integer `K`, an optional maximum number of iterations `max_iter`, and an optional `random_state` for reproducibility. The function initializes the centroids using the K-Means++ method, runs the Lloyd's iterations until convergence or until `max_iter` is reached, and returns the centroids rounded to four decimal places and sorted by their first coordinate."}
{"task_id": 111, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Converts a raw text string into a fixed-length list of integer token ids.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text]\n    if len(encoded) < time_steps:\n        encoded += [0] * (time_steps - len(encoded))\n    else:\n        encoded = encoded[:time_steps]\n    return encoded\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list/array of integer ids back to a text string.\"\"\"\n    return ''.join(inverse_vocab.get(idx, '') for idx in indices if idx != 0)\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes the raw text, calls model.predict, and decodes the prediction.\"\"\"\n    # Encode the raw text\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    # Convert to a batch size of 1\n    encoded_batch = np.array([encoded_text])\n    # Predict and apply argmax\n    predictions = model.predict(encoded_batch)\n    predicted_ids = np.argmax(predictions, axis=-1)[0]\n    # Decode the ids to a string\n    decoded_string = int_to_string(predicted_ids, inv_output_vocabulary)\n    return decoded_string\n\n# Example usage:\n# Note: The model used here is a placeholder. In a real scenario, it should be a trained model.\nclass DummyModel:\n    def predict(self, x):\n        # Dummy prediction that returns random probabilities for each token\n        return np.random.rand(x.shape[0], TIME_STEPS, len(input_vocabulary))\n\n# Define a simple vocabulary and its inverse\ninput_vocabulary = {char: idx for idx, char in enumerate('abcdefghijklmnopqrstuvwxyz ', 1)}\ninv_output_vocabulary = {idx: char for char, idx in input_vocabulary.items()}\n\n# Create a dummy model instance\nmodel = DummyModel()\n\n# Run an example\ndecoded_string = run_example(model, input_vocabulary, inv_output_vocabulary, 'hello world')\nprint(decoded_string)\n```\n\nThis script demonstrates how to encode and decode a string for use with a character-level sequence model, using a dummy model for demonstration purposes. The `run_example` function encapsulates the entire process from encoding an input string to decoding the model's output."}
{"task_id": 113, "completion_id": 0, "completion": "```python\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str], optional\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES  # Assume EXAMPLES is a predefined global constant\n\n    predictions = []\n\n    for example in examples:\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        output_str = ''.join(output_chars)\n        print(f\"input:  {example}\")\n        print(f\"output: {output_str}\")\n        predictions.append(output_str)\n\n    return predictions\n\n# Assuming run_example is defined elsewhere and available in the runtime.\n# The function run_example is expected to return a list of characters based on the input parameters.\n```"}
{"task_id": 115, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    m = X.shape[0]\n    z = X @ w\n    p = 1 / (1 + np.exp(-z))\n    \n    # Avoid numerical issues\n    p = np.clip(p, 1e-20, 1 - 1e-20)\n    \n    # Compute the loss\n    loss = -1/m * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    loss = round(loss, 4)\n    \n    # Compute the gradient\n    gradient = 1/m * X.T @ (p - y)\n    gradient = np.round(gradient, 4).tolist()\n    \n    return loss, gradient\n\n# Example usage\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([0, 1, 1])\nw = np.array([0.1, 0.2])\n\n# Call the function and print the result\nresult = logistic_loss_and_gradient(X, y, w)\nprint(result)\n```\n\nThe provided script includes the function `logistic_loss_and_gradient` that calculates the binary cross-entropy loss and its gradient for logistic regression, given a feature matrix `X`, a binary target vector `y`, and a weight vector `w`. The function handles numerical stability issues by clipping the predicted probabilities and ensures the output is formatted as requested."}
{"task_id": 118, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    n_clf = max(n_clf, 1)  # Ensure n_clf is at least 1\n    m, n = X_train.shape\n    n_test = X_test.shape[0]\n    weights = np.full(m, 1 / m)  # Initialize weights equally\n    classifiers = []  # Store classifiers\n\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = None\n        best_theta = None\n        best_feature = None\n        best_polarity = None\n\n        for feature in range(n):\n            for polarity in [-1, 1]:\n                for theta in np.unique(X_train[:, feature]):\n                    prediction = np.where(polarity * X_train[:, feature] > polarity * theta, 1, -1)\n                    error = np.sum(weights[prediction != y_train])\n                    if error < min_error:\n                        min_error = error\n                        best_stump = prediction\n                        best_theta = theta\n                        best_feature = feature\n                        best_polarity = polarity\n\n        epsilon = min_error\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n        classifiers.append((best_feature, best_theta, best_polarity, alpha))\n\n        # Update weights\n        weights *= np.exp(-alpha * y_train * best_stump)\n        weights /= np.sum(weights)\n\n    # Prediction\n    predictions = np.zeros(n_test)\n    for feature, theta, polarity, alpha in classifiers:\n        prediction = np.where(polarity * X_test[:, feature] > polarity * theta, 1, -1)\n        predictions += alpha * prediction\n\n    return list(np.sign(predictions))\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([1, -1, 1, -1])\n# X_test = np.array([[2, 3], [3, 4]])\n# n_clf = 2\n# print(adaboost_predict(X_train, y_train, X_test, n_clf))\n```\n\nThis script provides a complete implementation of the AdaBoost algorithm with decision stumps as weak learners, following the task description closely. The function takes training and test sets and the number of classifiers to build, and it returns a list of predictions for the test set."}
{"task_id": 128, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    if n_components <= 0 or n_components > X.shape[1]:\n        return []\n\n    classes = np.unique(y)\n    n_features = X.shape[1]\n    n_classes = len(classes)\n    \n    # Global mean\n    mean_overall = np.mean(X, axis=0)\n    \n    # Within-class scatter matrix\n    S_W = np.zeros((n_features, n_features))\n    for cls in classes:\n        class_samples = X[y == cls]\n        mean_class = np.mean(class_samples, axis=0)\n        S_W += (class_samples - mean_class).T.dot(class_samples - mean_class)\n    \n    # Between-class scatter matrix\n    S_B = np.zeros((n_features, n_features))\n    for cls in classes:\n        class_samples = X[y == cls]\n        mean_class = np.mean(class_samples, axis=0)\n        S_B += len(class_samples) * (mean_class - mean_overall).dot((mean_class - mean_overall).T)\n    \n    # Compute the matrix A = pinv(S_W) * S_B\n    A = np.linalg.pinv(S_W).dot(S_B)\n    \n    # Eigen-decomposition of A\n    eigenvalues, eigenvectors = np.linalg.eigh(A)\n    \n    # Sort eigenvalues and eigenvectors in descending order\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    \n    # Deterministic sign\n    for i in range(n_components):\n        if eigenvectors[0, i] < 0:\n            eigenvectors[:, i] *= -1\n    \n    # Projection matrix\n    W = eigenvectors[:, :n_components]\n    \n    # Project X onto the first n_components eigenvectors\n    X_projected = X.dot(W)\n    \n    # Round to 4 decimal places and convert to list of lists\n    X_projected = np.round(X_projected, 4).tolist()\n    \n    return X_projected\n\n# Example usage\nX = np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]])\ny = np.array([0,0,0,0,1,1,1,1])\nn_components = 1\nprint(multi_class_lda(X, y, n_components))\n```\nThis Python script provides a self-contained implementation of the multi-class Linear Discriminant Analysis (LDA) transformation, as per the task description. It computes the necessary scatter matrices, solves the generalised eigenvalue problem, and projects the data onto the specified number of components while ensuring the results are rounded to four decimal places."}
{"task_id": 140, "completion_id": 0, "completion": "```python\nfrom collections import deque\nimport math\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    \n    # Check if start or end is on fire\n    if grid[0][0] == 'F' or grid[n-1][n-1] == 'F':\n        return -1\n    \n    # Directions to move in the grid\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    # Initialize fire and agent queues\n    fire_queue = deque()\n    agent_queue = deque([(0, 0, 0)])  # (row, col, time)\n    \n    # Populate fire queue with initial fire cells\n    for r in range(n):\n        for c in range(n):\n            if grid[r][c] == 'F':\n                fire_queue.append((r, c, 0))\n    \n    # Spread fire and mark the cells\n    fire_spread = [[math.inf] * n for _ in range(n)]\n    while fire_queue:\n        r, c, time = fire_queue.popleft()\n        fire_spread[r][c] = time\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < n and 0 <= nc < n and grid[nr][nc] != '#' and fire_spread[nr][nc] == math.inf:\n                fire_spread[nr][nc] = time + 1\n                fire_queue.append((nr, nc, time + 1))\n    \n    # BFS to find the shortest path for the agent\n    visited = [[False] * n for _ in range(n)]\n    visited[0][0] = True\n    \n    while agent_queue:\n        r, c, time = agent_queue.popleft()\n        if r == n-1 and c == n-1:\n            return time\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < n and 0 <= nc < n and not visited[nr][nc] and grid[nr][nc] != '#' and fire_spread[nr][nc] > time + 1:\n                visited[nr][nc] = True\n                agent_queue.append((nr, nc, time + 1))\n    \n    return -1\n```\n\nThis Python script defines a function `escape_fire_maze(grid)` that takes a list of strings representing the maze and returns the minimum number of minutes required for the agent to reach the goal without entering a burning cell, or -1 if it is impossible. The script uses a combination of BFS for both fire spreading and the agent's movement, ensuring that the agent avoids cells that are on fire."}
{"task_id": 141, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"Implement the k-Nearest Neighbors classifier.\"\"\"\n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((x1 - x2)**2, axis=1))\n    \n    def manhattan_distance(x1, x2):\n        return np.sum(np.abs(x1 - x2), axis=1)\n    \n    def cosine_distance(x1, x2):\n        dot_product = np.sum(x1 * x2, axis=1)\n        norm_x1 = np.sqrt(np.sum(x1**2, axis=1))\n        norm_x2 = np.sqrt(np.sum(x2**2, axis=1))\n        return 1 - dot_product / (norm_x1 * norm_x2)\n    \n    # Select the distance metric\n    if metric == 'manhattan':\n        distance_metric = manhattan_distance\n    elif metric == 'cosine':\n        distance_metric = cosine_distance\n    else:  # Default to 'euclidean'\n        distance_metric = euclidean_distance\n    \n    # Initialize the array to hold predictions\n    predictions = np.zeros(X_test.shape[0])\n    \n    # Iterate over each test sample\n    for i, test_sample in enumerate(X_test):\n        # Compute distances from the test sample to all training samples\n        distances = distance_metric(X_train, np.tile(test_sample, (X_train.shape[0], 1)))\n        \n        # Get the indices of the k nearest neighbors\n        k_indices = np.argsort(distances)[:k]\n        \n        # Get the labels of the k nearest neighbors\n        k_nearest_labels = y_train[k_indices]\n        \n        # Find the most common label among the k nearest neighbors\n        (values, counts) = np.unique(k_nearest_labels, return_counts=True)\n        predictions[i] = values[np.argmax(counts)]\n        \n        # In case of a tie, return the smallest label value\n        if np.max(counts) == 1 or np.sum(counts == np.max(counts)) > 1:\n            predictions[i] = np.min(values)\n    \n    return predictions\n```\n\nThis Python script provides a self-contained implementation of the k-Nearest Neighbors classifier based on the provided specifications. It supports Euclidean, Manhattan, and Cosine distance metrics, and returns predictions for a test dataset using a majority vote among the nearest neighbors, with a preference for the smallest label in case of a tie."}
{"task_id": 146, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2, axis=1))\n\n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b), axis=1)\n\n    def cosine_distance(a, b):\n        eps = 1e-12\n        dot_product = np.sum(a * b, axis=1)\n        norm_a = np.linalg.norm(a, axis=1)\n        norm_b = np.linalg.norm(b, axis=1)\n        return 1 - dot_product / (norm_a * norm_b + eps)\n\n    # Ensure k does not exceed the number of training samples\n    k = min(k, len(X))\n\n    # Initialize the list to store predictions\n    predictions = []\n\n    # Iterate over each test sample\n    for test_sample in X_test:\n        # Compute distances between test sample and all training samples\n        if metric == 'euclidean':\n            distances = euclidean_distance(X, test_sample)\n        elif metric == 'manhattan':\n            distances = manhattan_distance(X, test_sample)\n        elif metric == 'cosine':\n            distances = cosine_distance(X, test_sample)\n        else:\n            raise ValueError(\"Invalid distance metric\")\n\n        # Get the indices of the k nearest neighbors\n        nearest_neighbors = np.argsort(distances)[:k]\n\n        # Get the labels of the k nearest neighbors and find the most common label\n        nearest_labels = y[nearest_neighbors]\n        unique_labels, counts = np.unique(nearest_labels, return_counts=True)\n        majority_vote = unique_labels[np.argmax(counts)]\n\n        # In case of a tie, return the smallest label\n        if np.sum(counts == counts[np.argmax(counts)]) > 1:\n            majority_vote = np.min(unique_labels[counts == counts[np.argmax(counts)]])\n\n        # Append the predicted label to the predictions list\n        predictions.append(majority_vote)\n\n    return predictions\n\n# Example usage:\n# X_train = np.array([[1,2],[2,3],[3,4],[6,7],[7,8],[8,9]])\n# y_train = np.array([0,0,0,1,1,1])\n# X_test = np.array([[2,2],[7,7]])\n# print(knn_predict(X_train, y_train, X_test, k=3, metric='euclidean'))\n```"}
{"task_id": 155, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Ensure state is a numpy array\n    state = np.array(state)\n    \n    # First Linear Layer\n    z1 = state @ weights[\"W1\"] + weights[\"b1\"]\n    a1 = np.maximum(z1, 0)  # ReLU activation\n    \n    # Second Linear Layer\n    z2 = a1 @ weights[\"W2\"] + weights[\"b2\"]\n    a2 = np.maximum(z2, 0)  # ReLU activation\n    \n    # Output Layer\n    z3 = a2 @ weights[\"W3\"] + weights[\"b3\"]\n    action = np.tanh(z3)  # tanh activation\n    \n    # Convert to list with 4 decimal places\n    return [round(float(x), 4) for x in action]\n\n# Example usage:\nweights = {\n    \"W1\": np.array([[0.1, 0.2], [0.3, 0.4]]),\n    \"b1\": np.array([0.1, 0.2]),\n    \"W2\": np.array([[0.5, 0.6], [0.7, 0.8]]),\n    \"b2\": np.array([0.3, 0.4]),\n    \"W3\": np.array([[0.9, 1.0], [1.1, 1.2]]),\n    \"b3\": np.array([0.5, 0.6])\n}\n\nstate = [1.0, 2.0]\naction = actor_forward(state, weights)\nprint(action)\n```\n\nThis script defines and implements the `actor_forward` function according to the specifications given. The function takes a state vector and a dictionary of weights, performs the forward pass through the specified neural network architecture, and returns the action vector as a list of floats, each rounded to four decimal places."}
{"task_id": 160, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    m, n = X.shape\n    # Step 1: Add intercept column\n    intercept_col = np.ones((m, 1)) if fit_intercept else np.zeros((m, 1))\n    X = np.hstack([intercept_col, X])\n    n += 1  # Update n to include intercept column\n    \n    # Step 2: Initialize parameters\n    w = np.zeros(n)\n    \n    for _ in range(max_iters):\n        if fit_intercept:\n            # Recompute intercept as mean residual\n            w[0] = np.mean(y - X[:, 1:] @ w[1:])\n        for j in range(1, n):  # Skip intercept\n            # Step 3: Temporarily set current weight to 0\n            w_j = w[j]\n            w[j] = 0\n            \n            # Compute partial residual\n            r_j = y - X @ w\n            \n            # Update weight using soft-thresholding operator\n            x_j = X[:, j]\n            dot_product = x_j @ r_j\n            threshold = lambda_param * m\n            w[j] = soft_threshold(dot_product, threshold) / (x_j @ x_j)\n    \n    # Step 4: Return the final intercept and weight vector\n    bias = w[0]\n    weights = w[1:].tolist()\n    \n    return [round(weight, 4) for weight in weights], round(bias, 4)\n\ndef soft_threshold(a: float, tau: float) -> float:\n    \"\"\"Soft-thresholding operator.\"\"\"\n    return np.sign(a) * max(abs(a) - tau, 0)\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4]])\n# y = np.array([1, 2, 3])\n# weights, bias = fit_lasso(X, y, lambda_param=0.1, max_iters=100, fit_intercept=True)\n# print(weights, bias)\n```"}
{"task_id": 165, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return -1.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or -1 if the inputs have different lengths.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are not already\n    x = np.array(x) if not isinstance(x, np.ndarray) else x\n    y = np.array(y) if not isinstance(y, np.ndarray) else y\n\n    # Check if the inputs have the same length\n    if x.shape != y.shape:\n        return -1\n\n    # Calculate the Hamming distance\n    distance = np.sum(x != y) / x.size\n\n    # Return the distance rounded to 4 decimal places\n    return round(distance, 4)\n\n# Example usage:\n# print(hamming_distance([1, 0, 1], [1, 1, 0]))  # Output: 0.6667\n# print(hamming_distance([1, 2, 3], [1, 2, 3]))  # Output: 0.0000\n# print(hamming_distance([1, 2], [1, 2, 3]))     # Output: -1\n```"}
{"task_id": 169, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if N <= 0:\n        raise ValueError(\"N must be a positive integer.\")\n    \n    n = np.arange(N)\n    if N == 1:\n        return [1.0]\n    \n    if window == \"hamming\":\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == \"hann\":\n        w = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == \"blackman_harris\":\n        a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n        w = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n    elif window == \"generalized_cosine\":\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be supplied for generalized_cosine window.\")\n        w = sum(a * np.cos(2 * np.pi * k * n / (N - 1)) for k, a in enumerate(coefficients))\n    else:\n        raise ValueError(f\"Unknown window type: {window}\")\n    \n    return [round(x, 4) for x in w]\n\n# Example usage:\n# print(generate_window(\"hamming\", 5))\n# print(generate_window(\"hann\", 5))\n# print(generate_window(\"blackman_harris\", 5))\n# print(generate_window(\"generalized_cosine\", 5, coefficients=[0.35875, 0.48829, 0.14128, 0.01168]))\n```"}
{"task_id": 171, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    # Add intercept term (bias) to the data\n    X_train = np.c_[np.ones(X_train.shape[0]), X_train]\n    X_test = np.c_[np.ones(X_test.shape[0]), X_test]\n\n    # Determine the unique labels and map to 0 and 1\n    unique_labels = np.unique(y_train)\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train_mapped = np.array([label_map[label] for label in y_train])\n\n    # Handle special case where all training labels are identical\n    if len(unique_labels) == 1:\n        return [unique_labels[0]] * len(X_test)\n\n    # Initialize weights\n    weights = np.zeros(X_train.shape[1])\n\n    # Mini-batch Gradient Descent\n    for _ in range(epochs):\n        for i in range(0, X_train.shape[0], batch_size):\n            batch_X = X_train[i:i + batch_size]\n            batch_y = y_train_mapped[i:i + batch_size]\n            predictions = sigmoid(np.dot(batch_X, weights))\n            gradient = np.dot(batch_X.T, (predictions - batch_y)) / batch_size\n            weights -= learning_rate * gradient\n\n    # Predict on test set\n    test_predictions = sigmoid(np.dot(X_test, weights))\n    test_predictions = (test_predictions > 0.5).astype(int)\n\n    # Map predictions back to original labels\n    inv_label_map = {0: unique_labels[0], 1: unique_labels[1]}\n    predictions = [inv_label_map[pred] for pred in test_predictions]\n\n    return predictions\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n```\n\nThis Python script implements a binary Logistic Regression classifier using mini-batch Gradient Descent. It handles the addition of an intercept term, mapping of arbitrary labels to `{0, 1}` for training, and mapping back to the original labels for prediction. The script also includes a special handling case for when all training labels are identical."}
{"task_id": 176, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    def decision_stump(X, y, weights):\n        min_error = float('inf')\n        best_stump = {}\n        for feature_index in range(len(X[0])):\n            for threshold in np.unique(X[:, feature_index]):\n                for polarity in [-1, 1]:\n                    predictions = np.where(X[:, feature_index] < threshold if polarity == 1 else X[:, feature_index] >= threshold, 1, -1)\n                    error = np.sum(weights * (predictions != y))\n                    if error < min_error:\n                        min_error = error\n                        best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': polarity, 'error': error}\n                    elif error == min_error:\n                        if feature_index < best_stump['feature_index']:\n                            best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': polarity, 'error': error}\n                        elif feature_index == best_stump['feature_index'] and threshold < best_stump['threshold']:\n                            best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': polarity, 'error': error}\n                        elif feature_index == best_stump['feature_index'] and threshold == best_stump['threshold'] and polarity == 1:\n                            best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': polarity, 'error': error}\n        return best_stump\n\n    def stump_predict(stump, X):\n        return np.where(X[:, stump['feature_index']] < stump['threshold'] if stump['polarity'] == 1 else X[:, stump['feature_index']] >= stump['threshold'], 1, -1)\n\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    y_train[y_train == 0] = -1  # Convert labels to {-1, 1}\n    weights = np.full(len(y_train), 1 / len(y_train))\n    stumps = []\n    alpha_list = []\n\n    for _ in range(n_estimators):\n        stump = decision_stump(X_train, y_train, weights)\n        predictions = stump_predict(stump, X_train)\n        error = np.sum(weights * (predictions != y_train))\n        if error == 0:\n            error += 1e-10  # Avoid division by zero\n        alpha = 0.5 * np.log((1 - error) / error)\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)  # Normalize weights\n        stumps.append(stump)\n        alpha_list.append(alpha)\n        if error == 0:\n            break\n\n    test_predictions = np.zeros(len(X_test))\n    for stump, alpha in zip(stumps, alpha_list):\n        test_predictions += alpha * stump_predict(stump, X_test)\n    test_predictions = np.sign(test_predictions)\n    test_predictions[test_predictions == -1] = 0  # Convert labels back to {0, 1}\n\n    return test_predictions.tolist()\n\n# Example usage:\nX_train = [[1, 2], [2, 3], [3, 4], [4, 5]]\ny_train = [0, 0, 1, 1]\nX_test = [[1.5, 2.5], [3.5, 4.5]]\npredictions = adaboost_predict(X_train, y_train, X_test, n_estimators=10)\nprint(predictions)  # Output should be [0, 1]\n```\n\nThis script implements the AdaBoost algorithm using decision stumps as weak learners. It follows the instructions and constraints provided in the task description."}
{"task_id": 178, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    # Check for invalid input\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    \n    # Initialize the random number generator\n    rng = np.random.default_rng(seed)\n    \n    # Initialize particles' positions and velocities\n    positions = rng.uniform(-1, 1, (num_particles, n_dims))\n    velocities = np.zeros((num_particles, n_dims))\n    \n    # Initialize personal and global best positions and values\n    pbest_positions = positions.copy()\n    pbest_values = np.array([np.sum(x**2) for x in positions])\n    gbest_value = np.min(pbest_values)\n    gbest_position = pbest_positions[np.argmin(pbest_values)]\n    \n    # PSO parameters\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    \n    # Main loop\n    for _ in range(num_iterations):\n        # Update velocities\n        r1 = rng.uniform(0, 1, (num_particles, n_dims))\n        r2 = rng.uniform(0, 1, (num_particles, n_dims))\n        velocities = (w * velocities +\n                      c1 * r1 * (pbest_positions - positions) +\n                      c2 * r2 * (gbest_position - positions))\n        \n        # Update positions\n        positions = np.clip(positions + velocities, -1, 1)\n        \n        # Update personal bests\n        current_values = np.array([np.sum(x**2) for x in positions])\n        mask = current_values < pbest_values\n        pbest_positions[mask] = positions[mask]\n        pbest_values[mask] = current_values[mask]\n        \n        # Update global best\n        if np.min(current_values) < gbest_value:\n            gbest_value = np.min(current_values)\n            gbest_position = positions[np.argmin(current_values)]\n    \n    return round(gbest_value, 4)\n\n# Example usage:\nprint(particle_swarm_optimisation(2, 5, 100))\n```\n\nThis Python script implements the Particle Swarm Optimization algorithm to minimize the Sphere function in an `n`-dimensional space. The function `particle_swarm_optimisation` takes the dimensionality of the search space (`n_dims`), the number of particles (`num_particles`), the number of iterations (`num_iterations`), and a seed for the random number generator (`seed`). It returns the best value of the Sphere function found, rounded to four decimal places, or `-1` if any of the input parameters are invalid."}
{"task_id": 180, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((np.array(x1) - np.array(x2)) ** 2))\n    \n    def predict_instance(x, k=k):\n        distances = []\n        for i, train_instance in enumerate(X_train):\n            dist = euclidean_distance(train_instance, x)\n            distances.append((dist, y_train[i]))\n        distances.sort()\n        if k == 0 or k > len(y_train):\n            k = len(y_train)\n        top_k = distances[:k]\n        if task == \"classification\":\n            return Counter([label for _, label in top_k]).most_common(1)[0][0]\n        else:\n            return round(np.mean([label for _, label in top_k]), 4)\n    \n    predictions = [predict_instance(x) for x in X_test]\n    return predictions\n\n# Example usage\nX_train = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]\ny_train = [1, 1, 2, 2, 3, 3]\nX_test = [[2, 3], [4, 5], [1, 2]]\nk = 3\ntask = \"classification\"\nprint(knn_predict(X_train, y_train, X_test, k, task))  # Output for classification\n\ntask = \"regression\"\ny_train = [1.5, 2.5, 3.5, 4.5, 5.5, 6.5]\nprint(knn_predict(X_train, y_train, X_test, k, task))  # Output for regression\n```"}
{"task_id": 184, "completion_id": 0, "completion": "Below is the Python script that implements a binary decision tree classifier using the CART algorithm from scratch. This implementation uses Gini impurity to measure the quality of splits and recursively performs binary splitting until the stopping criteria are met.\n\n```python\nimport numpy as np\n\ndef gini_impurity(y):\n    \"\"\"Calculate the Gini impurity of a dataset.\"\"\"\n    _, counts = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    return 1 - np.sum(probabilities ** 2)\n\ndef best_split(X, y, max_depth):\n    \"\"\"Find the best split for a node.\"\"\"\n    best_gini_gain = -1\n    best_feature = None\n    best_threshold = None\n\n    # Check if all labels are the same or max depth is reached\n    if len(np.unique(y)) == 1 or (max_depth is not None and max_depth == 0):\n        return None, None, None\n\n    n_features = X.shape[1]\n    for feature in range(n_features):\n        feature_values = np.sort(np.unique(X[:, feature]))\n        thresholds = (feature_values[:-1] + feature_values[1:]) / 2\n\n        for threshold in thresholds:\n            left_indices = X[:, feature] <= threshold\n            right_indices = X[:, feature] > threshold\n\n            if not left_indices.any() or not right_indices.any():\n                continue\n\n            left_gini = gini_impurity(y[left_indices])\n            right_gini = gini_impurity(y[right_indices])\n            gini_gain = gini_impurity(y) - (left_gini * sum(left_indices) + right_gini * sum(right_indices)) / len(y)\n\n            if gini_gain > best_gini_gain:\n                best_gini_gain = gini_gain\n                best_feature = feature\n                best_threshold = threshold\n\n    return best_feature, best_threshold, best_gini_gain\n\ndef build_tree(X, y, max_depth=None):\n    \"\"\"Recursively build the decision tree.\"\"\"\n    if len(np.unique(y)) == 1 or (max_depth is not None and max_depth == 0):\n        return {'leaf': True, 'label': np.argmax(np.bincount(y))}\n\n    feature, threshold, gini_gain = best_split(X, y, max_depth)\n    if gini_gain <= 0:\n        return {'leaf': True, 'label': np.argmax(np.bincount(y))}\n\n    left_indices = X[:, feature] <= threshold\n    right_indices = X[:, feature] > threshold\n\n    left_subtree = build_tree(X[left_indices], y[left_indices], None if max_depth is None else max_depth - 1)\n    right_subtree = build_tree(X[right_indices], y[right_indices], None if max_depth is None else max_depth - 1)\n\n    return {'leaf': False, 'feature': feature, 'threshold': threshold, 'left': left_subtree, 'right': right_subtree}\n\ndef predict_single(sample, tree):\n    \"\"\"Predict the class label of a single sample.\"\"\"\n    if tree['leaf']:\n        return tree['label']\n    if sample[tree['feature']] <= tree['threshold']:\n        return predict_single(sample, tree['left'])\n    else:\n        return predict_single(sample, tree['right'])\n\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None = None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n    tree = build_tree(X_train, y_train, max_depth=max_depth)\n    predictions = [predict_single(sample, tree) for sample in X_test]\n    return predictions\n\n# Example usage:\n# X_train = np.array([[0, 0], [1, 1]])\n# y_train = np.array([0, 1])\n# X_test = np.array([[2., 2.], [-1, -1]])\n# print(decision_tree_predict(X_train, y_train, X_test))\n```\n\nThis script defines the necessary functions to build and predict using a CART decision tree, adhering to the provided specifications."}
{"task_id": 190, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gini_impurity(labels):\n    \"\"\"Calculate the Gini impurity for a set of labels.\"\"\"\n    _, counts = np.unique(labels, return_counts=True)\n    proportions = counts / len(labels)\n    return 1 - np.sum(proportions ** 2)\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n    \n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n    \n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n    \n    # Calculate Gini impurity of the whole dataset\n    G_whole = gini_impurity(y)\n    \n    # Initialize variables to store the best split\n    best_feature_index = -1\n    best_threshold_value = None\n    best_gini = round(G_whole, 4)\n    \n    # Iterate over each feature\n    for feature_index in range(n_features):\n        # Get unique values in the feature for potential thresholds\n        unique_values = np.unique(X[:, feature_index])\n        \n        # Iterate over each unique value as a potential threshold\n        for threshold in unique_values:\n            # Split the data based on the threshold\n            left_indices = X[:, feature_index] <= threshold\n            right_indices = X[:, feature_index] > threshold\n            \n            # Skip if either node is empty\n            if np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n                continue\n            \n            # Calculate Gini impurity for each node\n            G_left = gini_impurity(y[left_indices])\n            G_right = gini_impurity(y[right_indices])\n            \n            # Calculate weighted Gini impurity for the split\n            G_split = (np.sum(left_indices) / n_samples) * G_left + (np.sum(right_indices) / n_samples) * G_right\n            \n            # Update the best split if the current split is better\n            if G_split < best_gini or (np.abs(G_split - best_gini) < 1e-12 and feature_index < best_feature_index) or (np.abs(G_split - best_gini) < 1e-12 and feature_index == best_feature_index and threshold < best_threshold_value):\n                best_feature_index = feature_index\n                best_threshold_value = threshold\n                best_gini = round(G_split, 4)\n                \n    return (best_feature_index, best_threshold_value, best_gini)\n\n# Example usage\nX = [[1, 2], [2, 3], [3, 4], [4, 5]]\ny = [0, 0, 1, 1]\nprint(best_gini_split(X, y))\n```"}
{"task_id": 191, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\"\"\"\n    def validate(x, y):\n        if not (isinstance(x, (list, tuple, np.ndarray)) and isinstance(y, (list, tuple, np.ndarray))):\n            return False\n        if len(x) == 0 or len(y) == 0 or len(x) != len(y):\n            return False\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except ValueError:\n            return False\n        return x, y\n\n    def euclidean(x, y):\n        return round(np.sqrt(np.sum((x - y) ** 2)), 4)\n\n    def manhattan(x, y):\n        return round(np.sum(np.abs(x - y)), 4)\n\n    def chebyshev(x, y):\n        return round(np.max(np.abs(x - y)), 4)\n\n    def cosine(x, y):\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        return round(1 - np.dot(x, y) / (norm_x * norm_y), 4)\n\n    def d(x, y):\n        validated = validate(x, y)\n        if not validated:\n            return -1\n        x, y = validated\n        if name == 'euclidean':\n            return euclidean(x, y)\n        elif name == 'manhattan':\n            return manhattan(x, y)\n        elif name == 'chebyshev':\n            return chebyshev(x, y)\n        elif name == 'cosine':\n            return cosine(x, y)\n        else:\n            return -1\n\n    return d\n```\n\nThe provided code snippet defines the `metric` function as requested. It includes validation for the vectors and implements the four distance metrics (Euclidean, Manhattan, Chebyshev, and Cosine). Each metric function is defined within the scope of `metric` to ensure it has access to the validated vectors and the name of the requested metric. The `d` function returned by `metric` performs the validation and then computes the distance if the validation passes; otherwise, it returns `-1`."}
{"task_id": 197, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n\n    if md_action:\n        for space in env.action_space.spaces:\n            if hasattr(space, 'n'):\n                n_actions_per_dim.append(space.n)\n            else:\n                n_actions_per_dim.append(np.inf)\n        action_dim = len(n_actions_per_dim)\n    else:\n        if cont_action:\n            n_actions_per_dim.append(np.inf)\n            action_dim = 1 if hasattr(env.action_space, 'shape') else 0\n        else:\n            n_actions_per_dim.append(env.action_space.n)\n            action_dim = 1\n\n    if not cont_action and not np.isinf(n_actions_per_dim).any():\n        action_ids = list(product(*(range(n) for n in n_actions_per_dim)))\n\n    return n_actions_per_dim, action_ids, action_dim\n\n# Example usage:\n# Assuming `env` is an environment object that follows the structure described in the problem statement.\n# env = some_environment_object\n# md_action = True\n# cont_action = False\n# stats = action_stats(env, md_action, cont_action)\n# print(stats)\n```"}
{"task_id": 198, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # Determine the number of topics T from the shape of phi[0]\n    T = phi[0].shape[1]\n    \n    # Initialize the beta matrix with zeros\n    beta = np.zeros((V, T))\n    \n    # Calculate the counts for each word-topic pair\n    for d, doc in enumerate(corpus):\n        for n, word in enumerate(doc):\n            # Update the beta matrix using the phi values\n            beta[word] += phi[d][n]\n    \n    # Normalize each column of beta to sum to 1\n    beta /= beta.sum(axis=0, keepdims=True)\n    \n    # Handle rows that are all zeros (words that do not occur in the corpus)\n    beta[np.all(beta == 0, axis=1)] = 0\n    \n    # Round the beta matrix to 4 decimal places\n    beta = np.round(beta, 4)\n    \n    # Convert the beta matrix to a list of lists\n    beta_list = beta.tolist()\n    \n    return beta_list\n\n# Example usage\nif __name__ == \"__main__\":\n    phi = [np.array([[0.1, 0.9], [0.8, 0.2]]), np.array([[0.3, 0.7]])]\n    corpus = [[0, 1], [0]]\n    V = 2\n    beta = update_beta(phi, corpus, V)\n    print(beta)\n```\n\nThis script defines the function `update_beta` which takes the variational parameters `phi`, the tokenized corpus, and the vocabulary size `V` as inputs, and returns the updated word-topic distribution \u03b2 as a list of lists, normalized and rounded to four decimal places. The example usage at the bottom demonstrates how to call this function with sample data."}
{"task_id": 202, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef euclidean_distance(x, y):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((x - y) ** 2))\n\ndef total_cost(X, medoids):\n    \"\"\"Calculate the total cost of the clustering.\"\"\"\n    cost = 0\n    for sample in X:\n        # Find the closest medoid and add the distance to the total cost\n        cost += min(euclidean_distance(sample, medoid) for medoid in medoids)\n    return cost\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    n_samples, _ = X.shape\n    medoids = X[:k].copy()  # Initialize medoids as the first k samples\n    labels = np.zeros(n_samples, dtype=int)\n    cost = total_cost(X, medoids)\n    improved = True\n\n    while improved:\n        improved = False\n        best_cost = cost\n        best_swap = None\n\n        for i in range(k):\n            for j in range(n_samples):\n                if j not in medoids:\n                    # Try swapping the current medoid with the non-medoid sample\n                    new_medoids = medoids.copy()\n                    new_medoids[i] = X[j]\n                    new_cost = total_cost(X, new_medoids)\n                    if new_cost < best_cost:\n                        best_cost = new_cost\n                        best_swap = (i, j)\n\n        if best_swap is not None:\n            i, j = best_swap\n            medoids[i] = X[j]\n            cost = best_cost\n            improved = True\n\n    # Assign each sample to the closest medoid\n    for i, sample in enumerate(X):\n        distances = [euclidean_distance(sample, medoid) for medoid in medoids]\n        labels[i] = np.argmin(distances)\n\n    return labels.tolist()\n\n# Example usage\nX = np.array([[0,0], [1,0], [0,1], [5,5], [6,5], [5,6]])\nk = 2\nprint(pam_clustering(X, k))  # Output: [0, 0, 0, 1, 1, 1]\n```"}
{"task_id": 216, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\"\"\"\n    # Ensure numpy arrays for consistency\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n\n    # Validate input shapes and n_iterations\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n\n    # Polynomial feature expansion\n    x_train_expanded = np.hstack([np.power(x_train[:, [i]], j) for i in range(x_train.shape[1]) for j in range(1, degree + 1)])\n    x_test_expanded = np.hstack([np.power(x_test[:, [i]], j) for i in range(x_test.shape[1]) for j in range(1, degree + 1)])\n\n    # Standardize features (except bias)\n    means = np.mean(x_train_expanded, axis=0)\n    stds = np.std(x_train_expanded, axis=0)\n    x_train_expanded = (x_train_expanded - means) / stds\n    x_test_expanded = (x_test_expanded - means) / stds\n\n    # Add bias term\n    x_train_expanded = np.hstack([np.ones((x_train_expanded.shape[0], 1)), x_train_expanded])\n    x_test_expanded = np.hstack([np.ones((x_test_expanded.shape[0], 1)), x_test_expanded])\n\n    # Initialize weights\n    weights = np.zeros(x_train_expanded.shape[1])\n\n    # Gradient Descent\n    for _ in range(n_iterations):\n        predictions = x_train_expanded.dot(weights)\n        errors = predictions - y_train\n\n        gradient = x_train_expanded.T.dot(errors) / len(y_train)\n\n        # Regularization part\n        l1_gradient = l1_ratio * reg_factor * np.sign(weights)\n        l1_gradient[0] = 0  # No regularization on bias term\n\n        l2_gradient = (1 - l1_ratio) * reg_factor * weights\n        l2_gradient[0] = 0  # No regularization on bias term\n\n        weights -= learning_rate * (gradient + l1_gradient + l2_gradient)\n\n    # Predictions\n    y_pred = x_test_expanded.dot(weights)\n    return np.round(y_pred, 4).tolist()\n```"}
{"task_id": 217, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Ensure inputs are numpy arrays for vectorized computation\n    actual = np.array(actual, dtype=float)\n    predicted = np.array(predicted, dtype=float)\n\n    # Compute the sigmoid function\n    sigmoid = 1 / (1 + np.exp(-predicted))\n\n    # Compute the gradient of the logistic loss\n    grad = actual * sigmoid(-actual * predicted)\n\n    # Compute the Hessian of the logistic loss\n    hess = sigmoid * (1 - sigmoid)\n\n    # Round the results to 6 decimal places\n    grad = np.round(grad, 6)\n    hess = np.round(hess, 6)\n    sigmoid = np.round(sigmoid, 6)\n\n    # Convert the results back to Python lists\n    gradient_list = grad.tolist()\n    hessian_list = hess.tolist()\n    probability_list = sigmoid.tolist()\n\n    return (gradient_list, hessian_list, probability_list)\n\n# Example usage:\nactual = [1, -1, 1]\npredicted = [0.5, -0.5, 1.0]\ngrad, hess, prob = logistic_components(actual, predicted)\nprint(\"Gradient:\", grad)\nprint(\"Hessian:\", hess)\nprint(\"Probability:\", prob)\n```\n\nThis script defines the `logistic_components` function which implements the computation of gradient, Hessian, and sigmoid probability for logistic loss. It ensures that all operations are vectorized using NumPy for efficiency, rounds the results to six decimal places as required, and then converts the results back into Python lists for the final output."}
{"task_id": 218, "completion_id": 0, "completion": "```python\ndef calculate_score(hand: list[int]) -> int:\n    \"\"\"Calculate the score of a hand in Blackjack.\"\"\"\n    score = sum(hand)\n    aces = hand.count(1)\n    while aces > 0 and score + 10 <= 21:\n        score += 10\n        aces -= 1\n    return score if score <= 21 else 0\n\ndef is_natural_blackjack(hand: list[int]) -> bool:\n    \"\"\"Check if the hand is a natural blackjack.\"\"\"\n    return len(hand) == 2 and 1 in hand and 10 in hand\n\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    player_score = calculate_score(player)\n    dealer_score = calculate_score(dealer)\n\n    if player_score == 0:\n        return -1\n    elif dealer_score == 0:\n        return 1\n    elif is_natural_blackjack(player):\n        return 1.5\n    elif player_score > dealer_score:\n        return 1\n    elif player_score < dealer_score:\n        return -1\n    else:\n        return 0\n\n# Test cases\nprint(blackjack_outcome([1, 10], [2, 3, 4]))  # 1.5\nprint(blackjack_outcome([1, 2, 3], [1, 10]))  # -1\nprint(blackjack_outcome([1, 8], [1, 8]))  # 0\nprint(blackjack_outcome([1, 2, 3], [1, 2, 3, 4]))  # 1\nprint(blackjack_outcome([1, 10, 2], [10, 10]))  # -1\n```"}
{"task_id": 221, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper function that returns element-wise squared log errors.\"\"\"\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\n\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    # Input validation\n    if not isinstance(actual, (list, tuple, np.ndarray)) or not isinstance(predicted, (list, tuple, np.ndarray)):\n        return -1\n    if len(actual) != len(predicted):\n        return -1\n    if any(i < 0 for i in actual) or any(i < 0 for i in predicted):\n        return -1\n    \n    # Convert inputs to numpy arrays for element-wise operations\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Calculate MSLE using the helper function\n    squared_errors = squared_log_error(actual, predicted)\n    msle = np.mean(squared_errors)\n    \n    return round(msle, 4)\n```\n\nThis solution includes the necessary input validation as well as the implementation of the MSLE calculation, following the requirements and constraints provided in the task description."}
{"task_id": 222, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already\n    z = np.array(z)\n\n    # Apply the sigmoid function in a numerically stable way\n    with np.errstate(over='ignore', under='ignore'):\n        # Numerically stable computation of sigmoid\n        if z.ndim == 0:  # Scalar input\n            if z >= 0:\n                return round(1 / (1 + np.exp(-z)), 4)\n            else:\n                return round(np.exp(z) / (1 + np.exp(z)), 4)\n        else:  # Array-like input\n            result = np.where(z >= 0,\n                              1 / (1 + np.exp(-z)),\n                              np.exp(z) / (1 + np.exp(z)))\n            return [round(num, 4) for num in result.tolist()]\n\n# Example usage:\n# print(sigmoid(0))  # Scalar\n# print(sigmoid([0, 1, -1]))  # List\n# print(sigmoid(np.array([0, 1, -1])))  # NumPy array\n```\n\nThis implementation of the sigmoid function ensures numerical stability by splitting the computation based on the sign of `z`. It handles scalars, lists, and NumPy arrays, returning the result with the same type and shape as the input, rounded to 4 decimal places."}
{"task_id": 224, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    # Convert input to numpy array for easier manipulation\n    if not isinstance(z, np.ndarray):\n        z = np.array(z)\n    \n    # Apply Leaky ReLU activation\n    z = np.where(z >= 0, z, a * z)\n    \n    # Convert back to Python list\n    return z.tolist()\n\n# Test cases to verify the solution\nif __name__ == \"__main__\":\n    # Test with a scalar\n    print(leaky_relu(0.5))  # Should return 0.5\n    print(leaky_relu(-0.5))  # Should return -0.005\n    \n    # Test with a list\n    print(leaky_relu([-1, 0, 1]))  # Should return [-0.01, 0, 1]\n    \n    # Test with a nested list\n    print(leaky_relu([[-1, 2], [-3, 4]]))  # Should return [[-0.01, 2], [-0.03, 4]]\n    \n    # Test with a numpy array\n    print(leaky_relu(np.array([-1, 0, 1])))  # Should return [-0.01, 0, 1]\n    \n    # Test with a custom slope\n    print(leaky_relu([-1, 0, 1], a=0.1))  # Should return [-0.1, 0, 1]\n```"}
{"task_id": 226, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    sample_weights = np.full(n_samples, 1/n_samples)\n    \n    classifiers = []\n    \n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = None\n        \n        for feature_idx in range(n_features):\n            thresholds = np.unique(X_train[:, feature_idx])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    y_pred = np.where(X_train[:, feature_idx] > threshold, polarity, -polarity)\n                    error = np.sum(sample_weights[y_pred != y_train])\n                    \n                    if error < min_error:\n                        min_error = error\n                        best_stump = (feature_idx, threshold, polarity)\n        \n        feature_idx, threshold, polarity = best_stump\n        y_pred = np.where(X_train[:, feature_idx] > threshold, polarity, -polarity)\n        error = np.sum(sample_weights[y_pred != y_train])\n        \n        alpha = 0.5 * math.log((1 - error) / (error + 1e-10))\n        classifiers.append((best_stump, alpha))\n        \n        # Update sample weights\n        sample_weights *= np.exp(-alpha * y_train * y_pred)\n        sample_weights /= np.sum(sample_weights)\n    \n    # Predict on test data\n    test_predictions = np.zeros(X_test.shape[0])\n    for stump, alpha in classifiers:\n        feature_idx, threshold, polarity = stump\n        y_pred = np.where(X_test[:, feature_idx] > threshold, polarity, -polarity)\n        test_predictions += alpha * y_pred\n    \n    return list(np.sign(test_predictions))\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([-1, -1, 1, 1])\n# X_test = np.array([[1.5, 2.5], [3.5, 4.5]])\n# predictions = adaboost_predict(X_train, y_train, X_test, n_clf=3)\n# print(predictions)  # Output will be a list of -1 or 1 predictions\n```"}
{"task_id": 241, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n\n    # Flatten the shape into rows and columns\n    flat_shape = (shape[0], np.prod(shape[1:]))\n\n    # Step 2: Create a 2-D matrix filled with i.i.d. samples from the standard normal distribution.\n    matrix = np.random.randn(*flat_shape)\n\n    # Step 3: Compute the SVD of the matrix\n    U, _, Vt = np.linalg.svd(matrix, full_matrices=False)\n\n    # Step 4: Choose the SVD factor that has the same size as the original matrix\n    if U.shape == flat_shape:\n        Q = U\n    else:\n        Q = Vt\n\n    # Step 5: Reshape Q back to the requested tensor shape and multiply it by scale\n    Q = Q.reshape(shape)\n    Q *= scale\n\n    return Q.tolist()\n\n# Example usage:\nnp.random.seed(0)\nshape = (2, 2)\nscale = 0.5\nresult = orthogonal(shape, scale)\nprint(result)\n```\n\nThe provided script defines the `orthogonal` function as described, which generates an orthogonally initialized tensor with the specified shape and scale. It returns the tensor as a list of lists, and the function returns `-1` if the shape has fewer than two dimensions, as per the instructions. The example usage demonstrates how to call the function with a fixed random seed, as specified in the task description."}
{"task_id": 243, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Convert state list to numpy array for easier operations\n    s = np.array(state)\n    \n    # Fixed weights and biases\n    W = np.ones((4, 4))\n    b = np.zeros(4)\n    \n    # Dense-1\n    z1 = np.maximum(0, np.dot(s, W) + b)\n    \n    # Dense-2\n    z2 = np.maximum(0, np.dot(z1, W) + b)\n    \n    # Dense-3\n    z3 = np.maximum(0, np.dot(z2, W) + b)\n    \n    # Actor head\n    logits = np.dot(z3, W) + b\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n    action_probs = np.round(action_probs, 4).tolist()\n    \n    # Critic head\n    state_value = np.dot(z3, W)[0]\n    state_value = np.round(state_value, 4)\n    \n    return action_probs, state_value\n\n# Example usage\nstate = [1.0, 2.0, 3.0]\naction_probs, state_value = actor_critic_forward(state)\nprint(f\"Action probabilities: {action_probs}\")\nprint(f\"State value: {state_value}\")\n```\n\nThis script defines the `actor_critic_forward` function that implements the forward pass for the specified Actor\u2013Critic network architecture. The function takes a list of floats representing the state, computes the action probabilities and the state value according to the defined network architecture, and returns the results rounded to four decimal places."}
{"task_id": 249, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    # Convert lists to numpy arrays\n    state = np.array(state)\n    W1, b1, W2, b2, W3, b3 = map(np.array, [params[k] for k in ['W1', 'b1', 'W2', 'b2', 'W3', 'b3']])\n    Wa, ba, Wc, bc = map(np.array, [params[k] for k in ['Wa', 'ba', 'Wc', 'bc']])\n    \n    # Shared layers\n    z1 = np.maximum(0, np.dot(state, W1) + b1)  # ReLU activation\n    z2 = np.maximum(0, np.dot(z1, W2) + b2)     # ReLU activation\n    z3 = np.maximum(0, np.dot(z2, W3) + b3)     # ReLU activation\n    \n    # Actor head\n    actor_scores = np.dot(z3, Wa) + ba\n    actor_scores -= np.max(actor_scores)  # To prevent overflow\n    actor_probs = np.exp(actor_scores) / np.sum(np.exp(actor_scores))\n    actor_probs = np.round(actor_probs, 4)\n    \n    # Critic head\n    state_value = np.dot(z3, Wc) + bc\n    state_value = np.round(state_value, 4)\n    \n    return actor_probs.tolist(), state_value.item()\n\n# Example usage:\nparams = {\n    'W1': [[0.1, 0.2], [0.3, 0.4]], 'b1': [0.1, 0.2],\n    'W2': [[0.5, 0.6], [0.7, 0.8]], 'b2': [0.3, 0.4],\n    'W3': [[0.9, 1.0], [1.1, 1.2]], 'b3': [0.5, 0.6],\n    'Wa': [[1.3, 1.4], [1.5, 1.6]], 'ba': [0.7, 0.8],\n    'Wc': [1.7, 1.8], 'bc': [0.9]\n}\nstate = [1.0, 2.0]\n\nprobs, value = actor_critic_forward(state, params)\nprint(probs, value)\n```\n\nThis script defines the `actor_critic_forward` function and demonstrates its usage with an example set of parameters and a state. The function implements the forward pass through an Actor-Critic network using NumPy, rounding the results as specified."}
{"task_id": 253, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l2_ratio = 1 - l1_ratio\n    \n    if gradient:\n        # Compute the gradient\n        grad = alpha * (l1_ratio * np.sign(w) + l2_ratio * w)\n        return [round(x, 4) for x in grad.tolist()]\n    else:\n        # Compute the penalty value\n        penalty = alpha * (l1_ratio * np.linalg.norm(w, ord=1) + l2_ratio * 0.5 * np.dot(w, w))\n        return round(penalty, 4)\n\n# Example usage\nweights = [1.0, -2.0, 3.0]\nalpha = 0.5\nl1_ratio = 0.7\n\npenalty = elastic_net_regularization(weights, alpha, l1_ratio)\ngradient = elastic_net_regularization(weights, alpha, l1_ratio, gradient=True)\n\nprint(\"Penalty:\", penalty)\nprint(\"Gradient:\", gradient)\n```\n\nThis script defines the `elastic_net_regularization` function to compute the Elastic-Net penalty and gradient, as per the given requirements. It uses NumPy for its vectorized operations and rounds the output to 4 decimal places as specified."}
{"task_id": 256, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in [\"X\", \"y\"]:\n        return None\n    \n    # Adjust the parameter name if necessary\n    if param_name in [\"Ba\", \"Bx\"]:\n        param_name = param_name.lower()\n    \n    # Get the current parameter value\n    param = model.parameters[param_name]\n    \n    # Initialize the gradient array\n    grads = np.zeros_like(param, dtype=np.float64)\n    \n    # Iterate over each element of the parameter\n    for i in range(param.shape[0]):\n        for j in range(param.shape[1]):\n            # Perturb the parameter by +epsilon\n            param[i, j] += epsilon\n            model.parameters[param_name] = param\n            model.flush_gradients()\n            forward_pass_results = [model.forward(X[:, :, t]) for t in range(n_t)]\n            loss_pos = loss_func(forward_pass_results)\n            \n            # Perturb the parameter by -epsilon\n            param[i, j] -= 2 * epsilon\n            model.parameters[param_name] = param\n            model.flush_gradients()\n            forward_pass_results = [model.forward(X[:, :, t]) for t in range(n_t)]\n            loss_neg = loss_func(forward_pass_results)\n            \n            # Restore original parameter value\n            param[i, j] += epsilon\n            model.parameters[param_name] = param\n            \n            # Calculate the gradient using centered finite difference\n            grads[i, j] = (loss_pos - loss_neg) / (2 * epsilon)\n    \n    return grads.T\n```"}
{"task_id": 257, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    n_clf = max(1, n_clf)  # Ensure at least one classifier\n    weights = np.full(n_samples, 1/n_samples)  # Initialize weights\n    stumps = []\n    alphas = []\n\n    for _ in range(n_clf):\n        best_stump = None\n        min_error = float('inf')\n        for feature in range(n_features):\n            for threshold in np.unique(X_train[:, feature]):\n                stump = (feature, threshold)\n                prediction = np.where(X_train[:, feature] > threshold, 1, -1)\n                error = np.sum(weights * (prediction != y_train))\n                if error < min_error:\n                    min_error = error\n                    best_stump = stump\n        feature, threshold = best_stump\n        prediction = np.where(X_train[:, feature] > threshold, 1, -1)\n        error = np.sum(weights * (prediction != y_train))\n        alpha = 0.5 * np.log((1 - error) / error)\n        weights *= np.exp(-alpha * y_train * prediction)\n        weights /= np.sum(weights)\n        stumps.append(best_stump)\n        alphas.append(alpha)\n\n    predictions = np.zeros(X_test.shape[0])\n    for (feature, threshold), alpha in zip(stumps, alphas):\n        prediction = np.where(X_test[:, feature] > threshold, 1, -1)\n        predictions += alpha * prediction\n\n    return list(np.sign(predictions))\n\n# Example usage\nX_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\ny_train = np.array([-1, -1, 1, 1])\nX_test = np.array([[2, 2], [3, 3]])\npredicted_labels = adaboost_predict(X_train, y_train, X_test, n_clf=3)\nprint(predicted_labels)\n```\n\nThis script implements the AdaBoost algorithm with decision stumps as weak learners. It takes training and test data as NumPy arrays and the number of classifiers to build. It returns a list of predicted labels for the test data. The example usage demonstrates how to call the function with a simple dataset."}
{"task_id": 261, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError(\"Shape must have at least two dimensions.\")\n    \n    fan_in = shape[1]\n    fan_out = shape[0]\n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n    \n    s = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(loc=0, scale=s, size=shape)\n\n# Example usage and check\nshape = (3, 4, 5, 5)  # Example shape for a 4D tensor\nweights = glorot_normal(shape)\n\n# Check the shape and the statistical properties\nprint(\"Shape:\", weights.shape)\nprint(\"Mean:\", np.mean(weights))\nprint(\"Std:\", np.std(weights))\nprint(\"Theoretical Std:\", np.sqrt(2 / (shape[1] * np.prod(shape[2:]) + shape[0] * np.prod(shape[2:]))))\n```\n\nThis script defines the `glorot_normal` function that generates a tensor with Glorot/Xavier normal initialization. It also includes an example usage and a check to ensure the output has the correct shape and statistical properties."}
{"task_id": 266, "completion_id": 0, "completion": "```python\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    # Initialize an empty adjacency list with the same length as V\n    adj_list = [[] for _ in V]\n\n    # Create a dictionary to map vertex to its index for quick lookup\n    vertex_index = {vertex: i for i, vertex in enumerate(V)}\n\n    # Populate the adjacency list\n    for u, v in E:\n        u_index = vertex_index[u]\n        v_index = vertex_index[v]\n        if v not in adj_list[u_index]:\n            adj_list[u_index].append(v)\n        if u not in adj_list[v_index]:\n            adj_list[v_index].append(u)\n\n    # Sort each sublist according to the order in V\n    for i in range(len(adj_list)):\n        adj_list[i] = sorted(adj_list[i], key=lambda vertex: vertex_index[vertex])\n\n    return adj_list\n\n# Example usage\nV = [0, 1, 2, 3]\nE = [(0, 1), (0, 2), (1, 2), (2, 3)]\nprint(build_adj_list(V, E))\n# Output: [[1, 2], [0, 2], [0, 1, 3], [2]]\n```\n\nThis Python script defines a function `build_adj_list` that takes a list of vertices `V` and a list of edges `E` and returns an adjacency list representation of the graph. The adjacency list is constructed by iterating over the edges and adding each vertex to the adjacency list of its neighbor, ensuring no duplicates and maintaining the order of vertices as specified by `V`."}
{"task_id": 267, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_stump = {\"feature_index\": None, \"threshold\": None, \"polarity\": None, \"weighted_error\": float('inf')}\n    \n    for feature_index in range(n_features):\n        # Sort the feature values and corresponding labels and weights\n        sorted_indices = np.argsort(X[:, feature_index])\n        sorted_X = X[sorted_indices, feature_index]\n        sorted_y = y[sorted_indices]\n        sorted_weights = sample_weights[sorted_indices]\n        \n        # Consider each unique feature value as a potential threshold\n        unique_thresholds = np.unique(sorted_X)\n        for threshold in unique_thresholds:\n            # Calculate error for both polarities\n            for polarity in [1, -1]:\n                # Predict the labels based on the threshold and polarity\n                predictions = np.where(X[:, feature_index] < threshold, 1 * polarity, -1 * polarity)\n                # Calculate the weighted error\n                error = np.sum(sample_weights * (predictions != y))\n                if error < best_stump[\"weighted_error\"]:\n                    best_stump = {\n                        \"feature_index\": feature_index,\n                        \"threshold\": round(threshold, 4),\n                        \"polarity\": polarity,\n                        \"weighted_error\": round(error, 4)\n                    }\n    \n    return best_stump\n\n# Example usage:\nX = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\ny = np.array([-1, -1, 1, 1])\nsample_weights = np.array([0.25, 0.25, 0.25, 0.25])\nprint(train_decision_stump(X, y, sample_weights))\n```\n\nThis Python script defines a function `train_decision_stump` which implements the task of finding the optimal weighted decision stump based on the input data matrix `X`, label vector `y`, and sample weights `sample_weights`. The function iterates over all features and all unique values of each feature to determine the best threshold and polarity combination that minimizes the weighted classification error. The result is returned as a dictionary with the specified keys."}
{"task_id": 273, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of labels.\"\"\"\n    label_counts = Counter(labels)\n    total_samples = len(labels)\n    entropy_value = -sum((count / total_samples) * math.log2(count / total_samples) for count in label_counts.values())\n    return entropy_value\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n    \n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n    \n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    if len(set(feature)) == 1:\n        return (None, 0.0)\n    \n    # Combine feature and target for sorting\n    combined = sorted(zip(feature, target), key=lambda x: x[0])\n    features_sorted, targets_sorted = zip(*combined)\n    \n    # Calculate the entropy of the parent node\n    parent_entropy = entropy(targets_sorted)\n    \n    best_threshold = None\n    max_info_gain = 0.0\n    \n    # Determine candidate thresholds\n    for i in range(1, len(features_sorted)):\n        if features_sorted[i] != features_sorted[i-1]:\n            threshold = (features_sorted[i] + features_sorted[i-1]) / 2\n            left_labels = [targets_sorted[j] for j in range(i) if features_sorted[j] < threshold]\n            right_labels = [targets_sorted[j] for j in range(i, len(features_sorted)) if features_sorted[j] >= threshold]\n            \n            if len(left_labels) == 0 or len(right_labels) == 0:\n                continue\n            \n            # Calculate information gain\n            info_gain = parent_entropy - (len(left_labels) / len(features_sorted)) * entropy(left_labels) \\\n                        - (len(right_labels) / len(features_sorted)) * entropy(right_labels)\n            \n            if info_gain > max_info_gain:\n                max_info_gain = info_gain\n                best_threshold = threshold\n    \n    return (round(best_threshold, 4) if best_threshold is not None else None, round(max_info_gain, 4))\n\n# Example usage\nfeature = [1, 2, 3, 4, 5]\ntarget = [0, 0, 1, 1, 1]\nprint(best_split(feature, target))\n```\n\nThis script provides a solution to the task of finding the optimal numerical threshold for splitting a decision tree node based on the information gain criterion. It includes the definition of the `entropy` function to calculate the Shannon entropy and the `best_split` function that implements the logic for finding the best split according to the given requirements."}
{"task_id": 286, "completion_id": 0, "completion": "```python\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    return [[0.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    return [[1.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    return [[random.uniform(low, high) for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError(\"Invalid initialization function.\")\n\n# Example usage\ninit_fn = get_initializer(\"ones_init\")\noutput = init_fn((2, 2))\nprint(output)  # Expected output: [[1.0, 1.0], [1.0, 1.0]]\n```"}
{"task_id": 287, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n    H_out = (H - p_h) // s_h + 1\n    W_out = (W - p_w) // s_w + 1\n    pooled_output = np.zeros((N, C, H_out, W_out))\n    \n    # Forward pass\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_out):\n                for w in range(W_out):\n                    h_start = h * s_h\n                    w_start = w * s_w\n                    window = X[n, c, h_start:h_start+p_h, w_start:w_start+p_w]\n                    pooled_output[n, c, h, w] = np.mean(window)\n    \n    # Backward pass\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_out):\n                for w in range(W_out):\n                    h_start = h * s_h\n                    w_start = w * s_w\n                    grad_input[n, c, h_start:h_start+p_h, w_start:w_start+p_w] += accum_grad[n, c, h, w] / (p_h * p_w)\n    \n    # Rounding and converting to lists\n    pooled_output = np.round(pooled_output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    \n    return pooled_output, grad_input\n\n# Example usage\nX = np.array([[[[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7]]]])\npool_shape = (2, 2)\nstride = (2, 2)\naccum_grad = np.array([[[[0.1, 0.2], [0.3, 0.4]]]])\npooled_output, grad_input = average_pool2d(X, pool_shape, stride, accum_grad)\nprint(\"Pooled Output:\", pooled_output)\nprint(\"Gradient Input:\", grad_input)\n```\n\nThis script defines the `average_pool2d` function which performs both the forward and backward passes of a 2-D average-pooling layer. It uses NumPy for efficient array operations and includes an example usage that demonstrates how to call the function with a sample input."}
{"task_id": 290, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature or not np.isclose(tree_a.threshold, tree_b.threshold):\n            return False\n        return (compare_trees(tree_a.left, tree_b.left) and\n                compare_trees(tree_a.right, tree_b.right))\n    else:\n        return False\n```"}
{"task_id": 292, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                           parent2: list[list[int | float]],\n                           cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    # Convert lists to numpy arrays for easier slicing\n    p1 = np.array(parent1)\n    p2 = np.array(parent2)\n    \n    # Validate the shape of the parents\n    if p1.shape != p2.shape:\n        return -1\n    \n    # Get the number of columns\n    num_cols = p1.shape[1]\n    \n    # Validate the cutoff\n    if cutoff < 0 or cutoff > num_cols:\n        raise ValueError(\"cutoff must be between 0 and the number of columns (inclusive)\")\n    \n    # If cutoff is 0 or max, swap all columns\n    if cutoff == 0:\n        child1 = p2.tolist()\n        child2 = p1.tolist()\n    elif cutoff == num_cols:\n        child1 = p1.tolist()\n        child2 = p2.tolist()\n    else:\n        # Create children by slicing and swapping columns\n        child1 = np.hstack((p1[:, :cutoff], p2[:, cutoff:]))\n        child2 = np.hstack((p2[:, :cutoff], p1[:, cutoff:]))\n        \n        # Convert back to lists\n        child1 = child1.tolist()\n        child2 = child2.tolist()\n    \n    return (child1, child2)\n\n# Example usage\nparent1 = [[1, 2, 3], [4, 5, 6]]\nparent2 = [[7, 8, 9], [10, 11, 12]]\ncutoff = 1\n\nchildren = single_point_crossover(parent1, parent2, cutoff)\nprint(children)\n```\n\nThe provided function `single_point_crossover` takes two 2D weight matrices and a cutoff column index, performs the crossover operation, and returns the two offspring as lists. The function also includes validation to ensure the matrices are of the same shape and that the cutoff index is valid."}
{"task_id": 294, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {label: [] for label in G['_V2I']}\n    for i, edges in enumerate(G['_G']):\n        for edge in edges:\n            source_label, target_label, weight = edge\n            adj[source_label].append((target_label, weight))\n            if not G['is_directed']:\n                adj[target_label].append((source_label, weight))\n    \n    # Sort the neighbour lists alphabetically by the neighbour label\n    for label in adj:\n        adj[label].sort(key=lambda x: x[0])\n    \n    return adj\n\n# Example usage\nG = {\n    'is_directed': False,\n    '_V2I': {'A': 0, 'B': 1, 'C': 2},\n    '_G': [\n        [('A', 'B', 1.0), ('A', 'C', 2.0)],\n        [('B', 'A', 1.0), ('B', 'C', 3.0)],\n        [('C', 'A', 2.0), ('C', 'B', 3.0)]\n    ]\n}\n\nprint(to_networkx(G))\n```\n\nThis script should correctly convert the custom graph representation into an adjacency dictionary with the properties specified. It takes into account whether the graph is directed or undirected and ensures that the neighbour lists are sorted alphabetically."}
{"task_id": 296, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    # Convert input to a NumPy array to ensure compatibility with lists and other array-like structures\n    x = np.asarray(x)\n    # Check if all elements in the array are either 0 or 1\n    return np.all(np.logical_or(x == 0, x == 1))\n\n# Test the function with provided data points\ndef check_function():\n    # Test cases\n    test_cases = [\n        (np.array([0, 1, 1, 0]), True),\n        (np.array([0, 1, 2, 0]), False),\n        (np.array([1, 1, 1]), True),\n        (np.array([0.0, 1.0, 0.0]), True),\n        (np.array([True, False, True]), True),\n        (np.array([1, 0, 2, 1, 0]), False)\n    ]\n    # Check each test case\n    for i, (input_array, expected_output) in enumerate(test_cases):\n        assert is_binary(input_array) == expected_output, f\"Test case {i+1} failed\"\n    print(\"All test cases passed.\")\n\n# Run the check function\ncheck_function()\n```"}
{"task_id": 298, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    # Tokenize the corpus and pad sentences for N > 1\n    tokenized_corpus = []\n    for sentence in corpus:\n        tokens = sentence.split()\n        if N > 1:\n            tokens = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        tokenized_corpus.append(tokens)\n\n    # Count N-grams and (N-1)-grams in the corpus\n    ngram_counts = Counter()\n    prefix_counts = Counter()\n    for tokens in tokenized_corpus:\n        for i in range(len(tokens) - N + 1):\n            ngram = tuple(tokens[i:i+N])\n            ngram_counts[ngram] += 1\n            prefix = ngram[:-1]\n            prefix_counts[prefix] += 1\n\n    # Tokenize and pad the query\n    query_tokens = query.split()\n    if N > 1:\n        query_tokens = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n\n    # Calculate the log-probability of the query\n    log_prob = 0\n    for i in range(len(query_tokens) - N + 1):\n        ngram = tuple(query_tokens[i:i+N])\n        if ngram not in ngram_counts:\n            return float('-inf')\n        prefix = ngram[:-1]\n        if prefix not in prefix_counts:\n            return float('-inf')\n        prob = ngram_counts[ngram] / prefix_counts[prefix]\n        log_prob += math.log(prob)\n\n    return round(log_prob, 4)\n\n\n# Example usage\ncorpus = [\"a b a\", \"b a b\"]\nquery = \"a b\"\nN = 1\nprint(ngram_log_prob(corpus, query, N))  # Output: -1.3863\n```\n\nThis Python script implements the `ngram_log_prob` function, which calculates the total log-probability of a query sentence under an N-gram Maximum Likelihood Estimation (MLE) model trained on a given corpus. The function handles padding for N-grams greater than 1, counts the occurrences of N-grams and their prefixes, computes the probabilities, and returns the rounded log-probability or `-inf` if any required N-gram has zero probability."}
{"task_id": 302, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n_samples, _ = X.shape\n\n    # Step 1: Build the weighted adjacency matrix W\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            distance = np.linalg.norm(X[i] - X[j])\n            W[i, j] = W[j, i] = 1 / (1 + distance)\n    \n    # Step 2: Compute the graph Laplacian L = D - W\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n\n    # Step 3: Obtain the first k eigenvectors of L\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n\n    # Step 4: Run k-means on the rows of E\n    centroids = E[:k].copy()\n    labels = np.zeros(n_samples, dtype=int)\n    prev_labels = np.zeros(n_samples, dtype=int)\n    iteration = 0\n\n    while np.any(labels != prev_labels) and iteration < 100:\n        prev_labels = labels.copy()\n        distances = np.linalg.norm(E[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n\n        for i in range(k):\n            if np.any(labels == i):\n                centroids[i] = np.mean(E[labels == i], axis=0)\n            else:\n                centroids[i] = E[np.random.choice(n_samples)]\n\n        iteration += 1\n\n    return labels.tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [1.5, 1.8], [5, 8], [8, 8], [1, 0.6], [9, 11]])\n# k = 2\n# print(spectral_clustering(X, k))\n```\n\nThis Python script implements the Spectral Clustering algorithm from scratch, adhering to the requirements and constraints provided in the task description."}
{"task_id": 303, "completion_id": 0, "completion": "```python\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_mine, prev_label = params[prev_ix]\n    curr_mine, curr_label = params[ix]\n\n    return f\"\"\"------------------------- DEBUG -------------------------\nMine (prev) [{prev_label}]:\n{prev_mine}\n\nTheirs (prev) [{prev_label}]:\n{golds[prev_label]}\n\nMine [{curr_label}]:\n{curr_mine}\n\nTheirs [{curr_label}]:\n{golds[curr_label]}{warn_str}\n----------------------- END DEBUG -----------------------\"\"\"\n\n# Example usage\nparams = [(\"output1\", \"label1\"), (\"output2\", \"label2\"), (\"output3\", \"label3\")]\ngolds = {\"label1\": \"gold1\", \"label2\": \"gold2\", \"label3\": \"gold3\"}\nix = 2\nwarn_str = \"\\nWarning: This is a test warning.\"\nprint(err_fmt(params, golds, ix, warn_str))\n```\nThis Python function `err_fmt` creates a detailed debugging string according to the specified format, including handling the optional warning message. The function uses string formatting to ensure the output adheres to the required layout precisely."}
{"task_id": 304, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    # Add intercept column if required\n    if fit_intercept:\n        X = np.column_stack((np.ones(X.shape[0]), X))\n    \n    # Determine the dimensions\n    N, M = X.shape\n    \n    # Adjust mu to be a vector of the correct length if it's a scalar\n    if np.isscalar(mu):\n        mu = np.full(M, mu)\n    \n    # Handle V cases\n    if V is None:\n        V_inv = np.eye(M)\n    elif np.isscalar(V):\n        V_inv = np.eye(M) / V\n    elif isinstance(V, (list, tuple, np.ndarray)) and len(V) == M:\n        V_inv = np.diag(1.0 / np.array(V))\n    else:\n        V_inv = np.linalg.inv(V)\n    \n    # Compute posterior covariance (up to \u03c3\u00b2)\n    Sigma_b = np.linalg.inv(V_inv + X.T @ X)\n    \n    # Compute posterior mean of the coefficients\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    \n    # Return rounded to 4 decimal places\n    return [round(float(x), 4) for x in mu_b]\n\n# Example usage:\nX = np.array([[1, 1], [1, 2], [2, 3]])\ny = np.array([1, 2, 3])\nprint(bayesian_posterior_mean(X, y, mu=0, V=1, fit_intercept=False))\n```\n\nThis script defines the `bayesian_posterior_mean` function as per the specification provided in the task. It handles the different cases for the prior scale `V` and the prior mean `mu`. It also includes an option to fit an intercept, in which case it prepends a column of ones to the design matrix `X`. The function returns the posterior mean of the coefficients rounded to four decimal places."}
{"task_id": 308, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(mel):\n        return 700 * (10**(mel / 2595) - 1)\n\n    if max_freq is None:\n        max_freq = fs / 2\n\n    mel_points = np.linspace(hz_to_mel(min_freq), hz_to_mel(max_freq), n_filters + 2)\n    hz_points = mel_to_hz(mel_points)\n\n    bins = np.fft.rfftfreq(N) * fs\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n\n    for i in range(n_filters):\n        left_hz, center_hz, right_hz = hz_points[i], hz_points[i + 1], hz_points[i + 2]\n        for k in range(N // 2 + 1):\n            freq = bins[k]\n            if freq < left_hz or freq > right_hz:\n                filterbank[i, k] = 0\n            elif freq <= center_hz:\n                filterbank[i, k] = (freq - left_hz) / (center_hz - left_hz)\n            else:\n                filterbank[i, k] = (right_hz - freq) / (right_hz - center_hz)\n        if normalize:\n            filterbank[i] *= 2 / (right_hz - left_hz)\n\n    return [list(np.round(row, 4)) for row in filterbank]\n\n# Example usage:\nN = 512\nn_filters = 20\nfs = 44100\nmin_freq = 0\nmax_freq = None\nnormalize = True\n\nfilterbank = mel_filterbank(N, n_filters, fs, min_freq, max_freq, normalize)\nfor row in filterbank:\n    print(row)\n```\n\nThis script implements the `mel_filterbank` function that builds a Mel filterbank transformation matrix according to the task specification. It also includes an example of how to use the function and print out the resulting filterbank matrix."}
{"task_id": 312, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    \n    # Blackman-Harris window coefficients\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    \n    # Adjust window length for periodic case\n    if not symmetric:\n        window_len += 1\n    \n    n = np.arange(window_len)\n    N = window_len - 1\n    \n    # Calculate Blackman-Harris window\n    bh_window = a0 - a1 * np.cos(2 * np.pi * n / N) + \\\n                a2 * np.cos(4 * np.pi * n / N) - \\\n                a3 * np.cos(6 * np.pi * n / N)\n    \n    # For periodic case, discard the last value\n    if not symmetric:\n        bh_window = bh_window[:-1]\n    \n    # Round to 4 decimal places and return as list\n    return [round(x, 4) for x in bh_window]\n\n# Example usage\nprint(blackman_harris(5))\nprint(blackman_harris(5, symmetric=True))\n```\n\nThis Python script provides a function `blackman_harris` to generate a Blackman\u2013Harris window of a specified length and type (periodic or symmetric). The function adheres to the given requirements, including handling special cases and rounding the output to four decimal places."}
{"task_id": 313, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef digamma(x):\n    \"\"\"Approximate the digamma function using recursion and asymptotic expansion.\"\"\"\n    # Step 1: Use recursion to shift small x values up to 6\n    if x < 6:\n        return digamma(x + 1) - 1 / x\n    \n    # Step 2: Apply the asymptotic expansion for large x\n    return math.log(x) - 0.5 / x - 1 / (12 * x**2) + 1 / (120 * x**4) - 1 / (252 * x**6)\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    # Convert gamma to numpy array if it's a list\n    if isinstance(gamma, list):\n        gamma = np.array(gamma)\n    \n    # Compute the digamma values\n    digamma_t = digamma(gamma[d, t])\n    digamma_sum = digamma(np.sum(gamma[d, :]))\n    \n    # Calculate the expectation of the log of the t-th component\n    expectation = digamma_t - digamma_sum\n    \n    # Round the result to four decimal places\n    return round(expectation, 4)\n\n# Example usage:\ngamma = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]\nd = 0\nt = 1\nprint(expected_log_dirichlet(gamma, d, t))\n```\n\nThis script defines a `digamma` function to approximate the digamma function using recursion and asymptotic expansion, and an `expected_log_dirichlet` function to compute the expectation of the log of a Dirichlet component, as described in the task."}
{"task_id": 317, "completion_id": 0, "completion": "```python\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_prediction, prev_label = params[prev_ix]\n    curr_prediction, curr_label = params[ix]\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    \n    report = f\"\"\"------------------------- DEBUG -------------------------\nMine (prev) [{prev_label}]:\n{prev_prediction}\n\nTheirs (prev) [{prev_label}]:\n{prev_gold}\n\n\nMine [{curr_label}]:\n{curr_prediction}\n\nTheirs [{curr_label}]:\n{curr_gold}{warn_str}\n----------------------- END DEBUG -----------------------\"\"\"\n    return report\n\n# Example usage:\nparams = [(\"Prediction 1\", \"Label1\"), (\"Prediction 2\", \"Label2\"), (\"Prediction 3\", \"Label3\")]\ngolds = {\"Label1\": \"Gold 1\", \"Label2\": \"Gold 2\", \"Label3\": \"Gold 3\"}\nix = 1\nwarn_str = \" (WARNING: mismatch)\"\nprint(err_fmt(params, golds, ix, warn_str))\n```\n```python\n```"}
{"task_id": 318, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n    \n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n    \n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    weights = np.ones(n_samples) / n_samples\n    estimators = []\n    estimator_weights = []\n\n    for _ in range(n_estimators):\n        min_error = float('inf')\n        best_stump = None\n        for feature in range(n_features):\n            for threshold in np.unique(X_train[:, feature]):\n                for polarity in [-1, 1]:\n                    prediction = polarity * np.sign(X_train[:, feature] - threshold)\n                    error = np.sum(weights[prediction != y_train])\n                    if error < min_error:\n                        min_error = error\n                        best_stump = (feature, threshold, polarity)\n        \n        feature, threshold, polarity = best_stump\n        prediction = polarity * np.sign(X_train[:, feature] - threshold)\n        error = np.sum(weights[prediction != y_train])\n        alpha = 0.5 * math.log((1 - error) / error)\n        weights *= np.exp(-alpha * y_train * prediction)\n        weights /= np.sum(weights)\n        \n        estimators.append((feature, threshold, polarity))\n        estimator_weights.append(alpha)\n    \n    test_predictions = []\n    for x in X_test:\n        total = 0\n        for (feature, threshold, polarity), alpha in zip(estimators, estimator_weights):\n            prediction = polarity * np.sign(x[feature] - threshold)\n            total += alpha * prediction\n        test_predictions.append(np.sign(total))\n    \n    return test_predictions\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([-1, -1, 1, 1])\n# X_test = np.array([[2, 3], [3, 4]])\n# predictions = adaboost_predict(X_train, y_train, X_test, n_estimators=10)\n# print(predictions)  # Output: [-1, 1]\n```"}
{"task_id": 329, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    \n    bin_frequencies = np.fft.fftfreq(N, d=1/fs)\n    \n    if positive_only:\n        bin_frequencies = bin_frequencies[:N//2 + 1]\n    \n    return [round(freq, 4) for freq in bin_frequencies.tolist()]\n\n# Example usage:\n# bins = dft_bins(8, 100, positive_only=True)\n# print(bins)\n```"}
{"task_id": 331, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    \n    # Compute the average OOB prediction for each sample\n    oob_predictions = np.zeros_like(y_true, dtype=float)\n    oob_counts = oob_mask.sum(axis=1)\n    valid_samples = oob_counts > 0\n    \n    if not np.any(valid_samples):\n        return -1\n    \n    oob_predictions[valid_samples] = np.sum(predictions[valid_samples] * oob_mask[valid_samples], axis=1) / oob_counts[valid_samples]\n    \n    # Compute the squared error between the true value and the average OOB prediction\n    squared_errors = (y_true[valid_samples] - oob_predictions[valid_samples]) ** 2\n    \n    # Compute the mean of the squared errors\n    mse = np.mean(squared_errors)\n    \n    return round(mse, 4)\n\n# Example usage\ny_true = np.array([1.0, 2.0, 3.0, 4.0])\npredictions = np.array([\n    [0.9, 1.1, 1.2],\n    [2.1, 1.9, 2.2],\n    [2.8, 3.1, 3.3],\n    [4.1, 4.2, 4.3]\n])\noob_mask = np.array([\n    [1, 0, 1],\n    [0, 1, 1],\n    [1, 1, 0],\n    [0, 0, 0]\n])\n\nprint(oob_mse(y_true, predictions, oob_mask))  # Output should be the OOB-MSE or -1\n```"}
{"task_id": 332, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nfrom typing import List\n\ndef build_fp_tree(transactions: List[List[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    # Step 1: Compute support for every item\n    item_support = Counter(item for transaction in transactions for item in set(transaction))\n    \n    # Step 2: Discard items with support less than min_support\n    frequent_items = {item: support for item, support in item_support.items() if support >= min_support}\n    \n    # Step 3: Create a global ordering of remaining items\n    ordered_items = sorted(frequent_items.keys(), key=lambda x: (-frequent_items[x], x))\n    \n    # Initialize the root of the FP-Tree\n    root = {\"support\": 0, \"children\": {}}\n    \n    # Step 4: For every transaction\n    for transaction in transactions:\n        # Remove duplicates, keep only frequent items, and reorder\n        filtered_transaction = [item for item in transaction if item in frequent_items]\n        ordered_transaction = [item for item in ordered_items if item in filtered_transaction]\n        \n        # Walk from the root and update/extend the path\n        current_node = root\n        for item in ordered_transaction:\n            if item not in current_node[\"children\"]:\n                current_node[\"children\"][item] = {\"support\": 0, \"children\": {}}\n            current_node = current_node[\"children\"][item]\n            current_node[\"support\"] += 1\n    \n    return root\n\n# Example usage:\ntransactions = [\n    [\"a\", \"b\", \"c\"],\n    [\"a\", \"b\", \"d\"],\n    [\"a\", \"b\", \"c\"],\n    [\"a\", \"b\", \"c\", \"d\"],\n    [\"a\", \"b\", \"c\"],\n    [\"a\", \"b\", \"d\"]\n]\nmin_support = 3\nprint(build_fp_tree(transactions, min_support))\n```\n\nThis script defines a function `build_fp_tree`, which constructs an FP-Tree from given transactions and a minimum support threshold. The tree is represented as a nested dictionary structure, as specified, without using any classes."}
{"task_id": 336, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", Y: list[list[int | float]] | \"np.ndarray\" | None = None, c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    # Convert X and Y to NumPy arrays if they are not already\n    if not isinstance(X, np.ndarray):\n        X = np.array(X, dtype=float)\n    if Y is not None and not isinstance(Y, np.ndarray):\n        Y = np.array(Y, dtype=float)\n\n    # Check if Y is None, if so, set Y = X\n    if Y is None:\n        Y = X\n    \n    # Check if the number of features (columns) in X and Y are the same\n    if X.shape[1] != Y.shape[1]:\n        return -1\n\n    # Initialize the kernel matrix\n    kernel_matrix = []\n\n    # Compute the kernel matrix\n    for x in X:\n        row = []\n        for y in Y:\n            row.append(round(np.dot(x, y) + c0, 4))\n        kernel_matrix.append(row)\n\n    return kernel_matrix\n\n# Example usage:\nX = [[1, 2], [3, 4]]\nY = [[5, 6], [7, 8]]\nc0 = 1\nprint(linear_kernel(X, Y, c0))\n```\n\nThis script defines a function `linear_kernel` that computes the linear kernel matrix between two collections of vectors `X` and `Y` (or `X` and `X` if `Y` is not provided) with an optional additive constant `c0`. It returns a list of lists of floats containing the kernel matrix, rounded to four decimal places, or -1 if the input dimensions are incompatible. The function handles both Python lists and NumPy arrays as inputs."}
{"task_id": 340, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n\n    # Update biased first and second moment estimates\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * (grad ** 2)\n\n    # Compute bias-corrected first and second moment estimates\n    m_t_hat = m_t / (1 - beta1 ** t)\n    v_t_hat = v_t / (1 - beta2 ** t)\n\n    # Update parameter\n    param_t = param - lr * m_t_hat / (np.sqrt(v_t_hat) + eps)\n\n    # Convert results to lists and round to 8 decimal places\n    updated_param = np.round(param_t.flatten(), 8).tolist()\n    new_m = np.round(m_t.flatten(), 8).tolist()\n    new_v = np.round(v_t.flatten(), 8).tolist()\n\n    return updated_param, new_m, new_v\n```\n\nThis function `adam_update` performs a single step of the Adam optimisation algorithm, updating the parameter, first moment, and second moment estimates according to the Adam update rules. The function returns the updated values as lists, with each element rounded to 8 decimal places."}
{"task_id": 343, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                          rewards: list[float] | np.ndarray,\n                          retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # Calculate the number of samples to retain\n    num_elite = int(retain_prcnt * len(theta_samples))\n    \n    # Sort the samples by rewards in descending order and select the top ones\n    elite_indices = np.argsort(rewards)[::-1][:num_elite]\n    elite_samples = theta_samples[elite_indices]\n    \n    # Calculate the mean and variance of the elite samples\n    elite_mean = np.mean(elite_samples, axis=0)\n    elite_variance = np.var(elite_samples, axis=0)\n    \n    # Round the results to 4 decimal places and convert to lists\n    elite_mean_rounded = [round(x, 4) for x in elite_mean]\n    elite_variance_rounded = [round(x, 4) for x in elite_variance]\n    \n    return elite_mean_rounded, elite_variance_rounded\n\n# Example usage\ntheta_samples = np.array([[1.0, 2.0], [2.0, 3.0], [3.0, 4.0], [4.0, 5.0]])\nrewards = [10.0, 20.0, 30.0, 40.0]\nretain_prcnt = 0.5\nmean, variance = cross_entropy_update(theta_samples, rewards, retain_prcnt)\nprint(\"Mean:\", mean)\nprint(\"Variance:\", variance)\n```\n\nThis script defines the `cross_entropy_update` function, which implements the core numerical step of the Cross-Entropy Method (CEM) to update the sampling distribution based on the best-performing parameter samples. The example usage demonstrates how to call the function with a sample set of parameter vectors and their corresponding rewards."}
{"task_id": 353, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    # Convert labels to a list to handle different iterable types uniformly\n    labels = list(labels)\n    \n    # Handle special case where the input is empty\n    if not labels:\n        return 0.0\n    \n    # Count the frequency of each label\n    label_counts = Counter(labels)\n    total_labels = len(labels)\n    \n    # Calculate the entropy\n    entropy_value = 0.0\n    for count in label_counts.values():\n        probability = count / total_labels\n        entropy_value -= probability * math.log2(probability)\n    \n    return round(entropy_value, 5)\n\n# Test the function with some data points\nprint(entropy([1, 1, 1, 1]))  # Expected output: 0.0\nprint(entropy([1, 2, 3, 4]))  # Expected output: 2.0\nprint(entropy([1, 1, 2, 2]))  # Expected output: 1.0\nprint(entropy([]))            # Expected output: 0.0\nprint(entropy([1, 2, 2, 3, 3, 3]))  # Expected output: 1.45915\n```"}
{"task_id": 354, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kernel_rows, kernel_cols, _, out_ch = W.shape\n    \n    # Apply dilation\n    if dilation > 0:\n        W = np.pad(W, ((0, dilation * (kernel_rows - 1)), (0, dilation * (kernel_cols - 1)), (0, 0), (0, 0)), mode='constant')\n        kernel_rows, kernel_cols = W.shape[0], W.shape[1]\n    \n    # Compute padding\n    if isinstance(pad, int):\n        pad = (pad, pad, pad, pad)\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pad = (pad[0], pad[0], pad[1], pad[1])\n    elif pad == 'same':\n        pad = ((kernel_rows - 1) // 2, kernel_rows // 2, (kernel_cols - 1) // 2, kernel_cols // 2)\n    \n    # Pad the input\n    X_padded = np.pad(X, ((0, 0), (pad[0], pad[1]), (pad[2], pad[3]), (0, 0)), mode='constant')\n    \n    # Compute output dimensions\n    out_rows = (in_rows + pad[0] + pad[1] - kernel_rows) // stride + 1\n    out_cols = (in_cols + pad[2] + pad[3] - kernel_cols) // stride + 1\n    \n    # Initialize the output array\n    output = np.zeros((n_ex, out_rows, out_cols, out_ch))\n    \n    # im2col transformation\n    img_col = []\n    for i in range(0, in_rows + pad[0] + pad[1] - kernel_rows + 1, stride):\n        for j in range(0, in_cols + pad[2] + pad[3] - kernel_cols + 1, stride):\n            patch = X_padded[:, i:i+kernel_rows, j:j+kernel_cols, :]\n            patch = patch.reshape(n_ex, -1)\n            img_col.append(patch)\n    img_col = np.array(img_col).transpose()\n    \n    # Reshape weights for matrix multiplication\n    W_col = W.reshape(-1, out_ch)\n    \n    # Perform matrix multiplication\n    output_col = np.dot(img_col, W_col)\n    \n    # Reshape output back to image\n    output = output_col.transpose().reshape(n_ex, out_rows, out_cols, out_ch)\n    \n    return output.tolist()\n\n# Example usage\nX = np.random.rand(2, 5, 5, 3)\nW = np.random.rand(3, 3, 3, 2)\nstride = 1\npad = 'same'\ndilation = 0\nresult = conv2D(X, W, stride, pad, dilation)\nprint(result)\n```\n\nThis script implements a 2-D convolution using the im2col strategy and NumPy for all computations. The function `conv2D` takes a batch of images and a set of kernels, applies the specified padding and dilation, and performs the convolution with the given stride. The result is returned as a deep Python list."}
{"task_id": 355, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # Step 1: Standardize the data by subtracting the feature-wise mean\n    centered_data = data - np.mean(data, axis=0)\n\n    # Step 2: Obtain the principal directions\n    if solver == \"svd\":\n        _, _, Vt = np.linalg.svd(centered_data, full_matrices=False)\n        directions = Vt\n    elif solver == \"eigen\":\n        cov_matrix = np.cov(centered_data, rowvar=False, ddof=1)\n        eigenvalues, directions = np.linalg.eigh(cov_matrix)\n        # Sort eigenvalues and directions in descending order\n        sorted_indices = np.argsort(eigenvalues)[::-1]\n        eigenvalues = eigenvalues[sorted_indices]\n        directions = directions[:, sorted_indices]\n    else:\n        raise ValueError(\"Invalid solver. Choose 'svd' or 'eigen'.\")\n\n    # Step 3: Keep the first n_components of the directions\n    directions = directions[:n_components]\n\n    # Step 4: Make the sign of every kept direction deterministic\n    for i in range(n_components):\n        if directions[i][np.argmax(np.abs(directions[i]))] < 0:\n            directions[i] *= -1\n\n    # Step 5: Project the centered data onto the retained directions\n    scores = np.dot(centered_data, directions.T)\n\n    # Step 6: Calculate explained variance ratio\n    total_variance = np.sum(np.var(centered_data, axis=0, ddof=1))\n    explained_variance = np.var(scores, axis=0, ddof=1)\n    explained_variance_ratio = explained_variance / total_variance\n\n    # Round results to 4 decimals and convert to list of lists\n    scores = scores.round(4).tolist()\n    explained_variance_ratio = np.round(explained_variance_ratio, 4).tolist()\n\n    return scores, explained_variance_ratio\n```"}
{"task_id": 356, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # For classification, return the index of the largest probability\n        return np.argmax(leaf.value)\n    else:\n        # For regression, return the scalar mean value\n        return leaf.value\n\n\n# Example usage:\n# Classification example\nclassification_leaf = Leaf([0.1, 0.3, 0.6])\nprint(leaf_predict(classification_leaf, classifier=True))  # Output should be 2\n\n# Regression example\nregression_leaf = Leaf(42.5)\nprint(leaf_predict(regression_leaf, classifier=False))  # Output should be 42.5\n```"}
{"task_id": 357, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    # Initialize centroids with the first K samples\n    centroids = data[:K].copy()\n    \n    for _ in range(max_iters):\n        # Assign each sample to the nearest centroid\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Recompute centroids as the mean of the assigned samples\n        new_centroids = np.array([data[labels == k].mean(axis=0) if np.any(labels == k) else centroids[k] for k in range(K)])\n        \n        # Check for convergence\n        if np.all(np.abs(new_centroids - centroids) < 1e-6):\n            break\n        \n        centroids = new_centroids\n    \n    # Sort the final centroids lexicographically and round to 4 decimals\n    centroids = np.round(np.sort(centroids, axis=0), decimals=4).tolist()\n    \n    return centroids\n\n# Example usage\ndata = np.array([[1, 1],\n                 [1, 2],\n                 [2, 1],\n                 [8, 8],\n                 [9, 8],\n                 [8, 9]])\nK = 2\nprint(kmeans(data, K))\n```\n\nThis script defines the `kmeans` function which performs the K-Means clustering algorithm as described in the task. The centroids are initialized with the first K samples, and the algorithm iterates until the centroids stop changing (within a tolerance) or until the maximum number of iterations is reached. The final centroids are sorted lexicographically and rounded to four decimal places before being returned."}
{"task_id": 362, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | \"np.ndarray\") -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert the input data to a NumPy array of floats\n    matrix = np.array(data, dtype=float)\n    \n    # Compute the sum of each row\n    row_sums = matrix.sum(axis=1)\n    \n    # Check if any row sums to 0\n    if np.any(row_sums == 0):\n        return -1\n    \n    # Normalize each row\n    stochastic_matrix = matrix / row_sums[:, np.newaxis]\n    \n    # Round the entries to 4 decimal places\n    stochastic_matrix = np.round(stochastic_matrix, 4)\n    \n    # Convert the NumPy array back to a Python list of lists\n    return stochastic_matrix.tolist()\n\n# Example usage:\ndata = [[1, 2, 3], [4, 5, 6], [0, 0, 0]]\nresult = row_stochastic_matrix(data)\nprint(result)  # This should return -1 because the last row sums to 0.\n```"}
{"task_id": 363, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    def check_continuous(space, composite):\n        if composite:\n            if isinstance(space, Tuple):\n                return all(isinstance(sub_space, Box) for sub_space in space.spaces)\n            elif isinstance(space, Dict):\n                return all(isinstance(sub_space, Box) for sub_space in space.spaces.values())\n        return isinstance(space, Box)\n\n    cont_action = check_continuous(env.action_space, tuple_action)\n    cont_obs = check_continuous(env.observation_space, tuple_obs)\n\n    return cont_action, cont_obs\n\n# Example usage:\naction_space = Tuple([Box(0.0, 1.0, (1,)), Discrete(2)])\nobservation_space = Dict({'position': Box(-1.0, 1.0, (2,)), 'velocity': Box(-1.0, 1.0, (2,))})\nenv = Env(action_space, observation_space)\nprint(is_continuous(env, True, True))  # Output: (False, True)\n```"}
{"task_id": 369, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    # Initialize running prediction\n    running_pred = np.zeros_like(updates[0])\n    \n    # Aggregate predictions\n    for update in updates:\n        running_pred -= learning_rate * update\n    \n    # Return result based on task type\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        # Apply softmax function to get probabilities\n        exps = np.exp(running_pred - running_pred.max(axis=1, keepdims=True))\n        probabilities = exps / np.sum(exps, axis=1, keepdims=True)\n        # Return class with highest probability\n        return np.argmax(probabilities, axis=1)\n\n# Example usage:\n# Regression\nupdates_reg = [np.array([1.2, 2.3, 3.4]), np.array([0.5, 0.6, 0.7])]\nprint(gradient_boosting_predict(updates_reg, 0.1, True))\n\n# Classification\nupdates_clf = [np.array([[1.2, 0.8], [2.3, 1.5], [3.4, 2.1]]),\n               np.array([[0.5, 0.3], [0.6, 0.4], [0.7, 0.2]])]\nprint(gradient_boosting_predict(updates_clf, 0.1, False))\n```"}
{"task_id": 371, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, _, out_channels = W.shape\n    effective_kernel = kernel_width + (kernel_width - 1) * (dilation)\n\n    if isinstance(pad, int):\n        pad_left = pad_right = pad\n    elif isinstance(pad, tuple):\n        pad_left, pad_right = pad\n    elif pad == 'same':\n        out_len = int(np.ceil(signal_length / stride))\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel - signal_length)\n        pad_left = total_pad // 2\n        pad_right = total_pad - pad_left\n    else:\n        raise ValueError(\"Invalid padding type\")\n\n    padded_X = np.pad(X, ((0, 0), (pad_left, pad_right), (0, 0)), mode='constant')\n\n    output_length = int((signal_length + pad_left + pad_right - effective_kernel) / stride) + 1\n    output_volume = np.zeros((n_examples, output_length, out_channels))\n\n    for n in range(n_examples):\n        for o in range(out_channels):\n            for i in range(output_length):\n                start = i * stride\n                end = start + effective_kernel\n                for k in range(kernel_width):\n                    effective_pos = start + k * (1 + dilation)\n                    output_volume[n, i, o] += np.sum(padded_X[n, effective_pos:effective_pos + 1, :] * W[k, :, o])\n\n    return output_volume.tolist()\n\n# Example Usage\nX = np.array([[[1, 2], [3, 4], [5, 6], [7, 8]]])\nW = np.array([[[1, 0], [0, 1]], [[1, 1], [1, 1]]])\nstride = 1\npad = 'same'\ndilation = 0\n\nresult = conv1D(X, W, stride, pad, dilation)\nprint(result)\n```\n\nThis script defines the `conv1D` function that performs a 1-D cross-correlation with support for batches, multiple input/output channels, padding, stride, and dilation. The function returns the result as a Python list. The example usage demonstrates how to call the function with a batch of 1-D signals and a set of kernels, and prints the resulting convolved volume."}
{"task_id": 373, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gini(y: list[int] | np.ndarray) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n\n    # Convert to NumPy array for easier manipulation if it's not already one\n    y = np.array(y)\n    # Calculate the frequency of each unique label\n    _, counts = np.unique(y, return_counts=True)\n    # Calculate the relative frequencies\n    p = counts / len(y)\n    # Calculate Gini impurity\n    gini_impurity = 1 - np.sum(p**2)\n    # Return the result rounded to 4 decimal places\n    return round(gini_impurity, 4)\n\n# Example usage\nprint(gini([1, 2, 3, 4, 5]))  # Example check\n```\n\nThe provided function `gini` computes the Gini impurity for a given list or NumPy array of integer labels, adhering to the definition provided in the task description. The function checks if the input is empty and returns `0.0` in that case, as per the convention specified. For non-empty inputs, it calculates the Gini impurity using the formula provided and returns the result rounded to four decimal places."}
{"task_id": 374, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\"\"\"\n    m, n = X.shape\n    if m != y.size:\n        return -1\n    \n    # Initialize parameters\n    theta = np.zeros(n)\n    b = 0.0\n    \n    for _ in range(n_iterations):\n        # Compute predictions\n        y_pred = X.dot(theta) + b\n        \n        # Compute gradients\n        dw = 2/m * X.T.dot(y_pred - y)\n        db = 2/m * np.sum(y_pred - y)\n        \n        # Update parameters\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    \n    # Round the results to 4 decimal places\n    theta_rounded = [round(t, 4) for t in theta]\n    b_rounded = round(b, 4)\n    \n    return (theta_rounded, b_rounded)\n\n# Example usage:\n# X = np.array([[1, 1], [1, 2], [2, 2], [2, 3]])\n# y = np.array([6, 8, 9, 11])\n# print(linear_regression_gd(X, y))\n```"}
{"task_id": 376, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Convert the list of lists to a NumPy array\n    np_X = np.array(X)\n    \n    # Check if the matrix is square\n    if np_X.shape[0] != np_X.shape[1]:\n        return False\n    \n    # Check if the matrix is equal to its transpose within the tolerance\n    return np.allclose(np_X, np_X.T, atol=1e-8)\n\n# Example test cases\n# Test square symmetric matrix\nprint(is_symmetric([[1, 2.000000001], [2, 1]]))  # Should return True\n# Test square non-symmetric matrix\nprint(is_symmetric([[1, 2], [3, 4]]))  # Should return False\n# Test non-square matrix\nprint(is_symmetric([[1, 2], [2, 1], [3, 4]]))  # Should return False\n```"}
{"task_id": 377, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Computes the negative gradient for the logistic loss function used in Gradient Boosting.\n    \n    Parameters:\n    y (list): A list of binary class labels (0 or 1).\n    f (list): A list of current prediction scores (floats).\n    \n    Returns:\n    list: A list of negative gradients rounded to four decimal places.\n    If y contains values other than 0 or 1, returns -1.\n    \"\"\"\n    # Check if y contains only binary values\n    if not all(label in [0, 1] for label in y):\n        return -1\n    \n    # Convert y to the set {-1, 1}\n    y_prime = np.array(y) * 2 - 1\n    f = np.array(f)\n    \n    # Calculate the negative gradient\n    g = y_prime / (1 + np.exp(y_prime * f))\n    \n    # Round to four decimal places and return as list\n    return [round(x, 4) for x in g]\n\n# Example usage\ny = [0, 1, 1, 0]\nf = [-1.5, 0.8, 1.2, -0.9]\nresult = logistic_negative_gradient(y, f)\nprint(result)\n```\n\nThis script defines the function `logistic_negative_gradient` that computes the negative gradient for the logistic loss used in gradient boosting for binary classification. It checks if the labels are binary, converts them to {-1, 1}, calculates the negative gradient, and rounds the result to four decimal places."}
{"task_id": 380, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    # Constants from the SELU paper\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n    \n    # Convert input to NumPy array\n    x = np.array(x)\n    \n    if order == 0:\n        # SELU function\n        result = scale * np.where(x > 0, x, alpha * (np.exp(x) - 1))\n    elif order == 1:\n        # First derivative of SELU\n        result = scale * np.where(x > 0, 1, alpha * np.exp(x))\n    elif order == 2:\n        # Second derivative of SELU\n        result = scale * np.where(x > 0, 0, alpha * np.exp(x))\n    else:\n        raise ValueError(\"Order must be 0, 1, or 2.\")\n    \n    # Round to 4 decimal places and convert to list\n    return np.round(result, 4).tolist()\n\n# Example usage:\n# print(selu([1, -1, 2, -2], order=0))\n# print(selu([1, -1, 2, -2], order=1))\n# print(selu([1, -1, 2, -2], order=2))\n```\n\nThis code snippet defines a function `selu` that calculates the SELU activation function and its first and second derivatives based on the input `x` and `order`. The function works with scalar, 1-D, and multi-D inputs. The results are rounded to 4 decimal places and returned as Python lists."}
{"task_id": 387, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(y)\n    predictions = np.full(n_samples, np.mean(y))\n    \n    for _ in range(n_estimators):\n        residuals = y - predictions\n        \n        if len(np.unique(x)) == 1:\n            predictions += learning_rate * np.mean(residuals)\n            continue\n        \n        sorted_indices = np.argsort(x)\n        sorted_x, sorted_residuals = x[sorted_indices], residuals[sorted_indices]\n        \n        best_split = None\n        best_error = np.inf\n        for i in range(1, n_samples):\n            if sorted_x[i] != sorted_x[i-1]:\n                split = (sorted_x[i] + sorted_x[i-1]) / 2\n                left_mean = np.mean(sorted_residuals[:i])\n                right_mean = np.mean(sorted_residuals[i:])\n                error = np.sum((sorted_residuals[:i] - left_mean) ** 2) + np.sum((sorted_residuals[i:] - right_mean) ** 2)\n                if error < best_error:\n                    best_error = error\n                    best_split = split\n        \n        if best_split is not None:\n            predictions += learning_rate * np.where(x <= best_split, np.mean(residuals[x <= best_split]), np.mean(residuals[x > best_split]))\n    \n    return np.round(predictions.tolist(), 4)\n```\n\nThis code implements a simple 1D gradient boosting regressor using decision stumps. The function takes a single numerical feature `x`, target values `y`, the number of boosting rounds `n_estimators`, and an optional `learning_rate`. It returns the in-sample predictions rounded to four decimal places as a Python list."}
{"task_id": 394, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    # Initialize Eg if it is None\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n\n    # Update the running average of the squared gradients\n    Eg = rho * Eg + (1 - rho) * grad**2\n\n    # Update the parameters\n    w = w - learning_rate * grad / (np.sqrt(Eg) + 1e-8)\n\n    # Convert to lists and round to 4 decimal places\n    w_next = [round(x, 4) for x in w.flat]\n    Eg_next = [round(x, 4) for x in Eg.flat]\n\n    return w_next, Eg_next\n```"}
{"task_id": 398, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if not derivative:\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        result = np.where(x >= 0, 1, alpha * np.exp(x))\n    \n    return [round(val, 4) for val in result]\n\n# Check function to verify the correctness of the elu function\ndef check_elu():\n    x = [-1.0, 0.0, 1.0]\n    alpha = 0.1\n    expected_activation = [-0.0952, 0.0, 1.0]\n    expected_derivative = [0.1, 1.0, 1.0]\n    \n    activation_result = elu(x, alpha, False)\n    derivative_result = elu(x, alpha, True)\n    \n    assert activation_result == expected_activation, f\"Activation incorrect, got {activation_result}, expected {expected_activation}\"\n    assert derivative_result == expected_derivative, f\"Derivative incorrect, got {derivative_result}, expected {expected_derivative}\"\n    print(\"elu function passes all checks.\")\n\n# Run the check function\ncheck_elu()\n```"}
{"task_id": 411, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    def analyze_data(data, name):\n        is_tuple = any(isinstance(x, (list, tuple, np.ndarray)) for x in data)\n        is_multidim = is_tuple and len(data) > 0 and len(data[0]) > 1\n        is_continuous = any(isinstance(x, float) and not x.is_integer() for x in np.array(data).flatten())\n        unique_values_per_dim = []\n        unique_ids_per_dim = []\n        if is_tuple:\n            data = np.array(data)\n            for dim in range(data.shape[1]):\n                unique_ids = sorted(set(data[:, dim]))\n                unique_values_per_dim.append(len(unique_ids))\n                unique_ids_per_dim.append(unique_ids)\n        else:\n            unique_ids = sorted(set(data))\n            unique_values_per_dim.append(len(unique_ids))\n            unique_ids_per_dim.append(unique_ids)\n        dimension = data[0] if isinstance(data[0], (list, tuple, np.ndarray)) else 1\n        return {\n            f'tuple_{name}': is_tuple,\n            f'multidim_{name}': is_multidim,\n            f'continuous_{name}': is_continuous,\n            f'n_{name}_per_dim': unique_values_per_dim,\n            f'{name}_dim': len(data[0]) if is_tuple else 1,\n            f'{name}_ids': unique_ids_per_dim\n        }\n\n    stats = {}\n    stats.update(analyze_data(actions, 'actions'))\n    stats.update(analyze_data(observations, 'observations'))\n    return stats\n\n# Example usage\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]\nprint(env_stats(actions, observations))\n```\nThis solution defines a helper function `analyze_data` that computes the required statistics for a given list of actions or observations. It checks for tuple presence, multidimensionality, continuity, and unique values per dimension. The main function `env_stats` applies this helper function to both actions and observations and combines the results into a single dictionary."}
{"task_id": 413, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    def mse(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n\n    def split_mse(X, y, index, threshold):\n        left_indices = X[:, index] < threshold\n        right_indices = X[:, index] >= threshold\n        left_mse = mse(y[left_indices], np.mean(y[left_indices]))\n        right_mse = mse(y[right_indices], np.mean(y[right_indices]))\n        return left_mse + right_mse\n\n    def best_split(X, y):\n        best_index, best_threshold, best_mse = None, None, float('inf')\n        for index in range(X.shape[1]):\n            for threshold in np.unique(X[:, index]):\n                mse = split_mse(X, y, index, threshold)\n                if mse < best_mse:\n                    best_mse, best_index, best_threshold = mse, index, threshold\n        return best_index, best_threshold\n\n    def build_tree(X, y, depth=0):\n        if depth == max_depth or len(np.unique(y)) == 1:\n            return np.mean(y)\n        index, threshold = best_split(X, y)\n        left_indices = X[:, index] < threshold\n        right_indices = X[:, index] >= threshold\n        left_tree = build_tree(X[left_indices], y[left_indices], depth + 1)\n        right_tree = build_tree(X[right_indices], y[right_indices], depth + 1)\n        return (index, threshold, left_tree, right_tree)\n\n    def predict_tree(tree, x):\n        if type(tree) != tuple:\n            return tree\n        index, threshold, left_tree, right_tree = tree\n        if x[index] < threshold:\n            return predict_tree(left_tree, x)\n        else:\n            return predict_tree(right_tree, x)\n\n    n_samples, n_features = X_train.shape\n    predictions = np.full(n_samples, np.mean(y_train))\n    final_predictions = []\n    for _ in range(n_estimators):\n        residuals = y_train - predictions\n        tree = build_tree(X_train, residuals)\n        predictions += learning_rate * np.array([predict_tree(tree, x) for x in X_train])\n\n    for x in X_test:\n        prediction = np.mean(y_train)\n        for _ in range(n_estimators):\n            tree = build_tree(X_train, y_train - prediction)\n            prediction += learning_rate * predict_tree(tree, x)\n        final_predictions.append(round(prediction, 4))\n\n    return final_predictions\n```\n\nThis Python script implements a simplified Gradient Boosting Decision Tree (GBDT) regressor from scratch, as per the task description. The function `gbdt_regression` takes training and test data, along with hyperparameters, and returns predictions for the test data by building a series of regression trees and combining their predictions with a learning rate. Each prediction is rounded to four decimal places and returned as a list of floats."}
{"task_id": 416, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Calculate the probability density function (PDF) of a multivariate Gaussian distribution.\n    \n    Parameters:\n    - X: numpy.ndarray, shape (n_samples, n_features) or (n_features,). The data points for which the PDF values must be evaluated.\n    - mean: numpy.ndarray, shape (n_features,). The mean vector of the distribution.\n    - cov: numpy.ndarray, shape (n_features, n_features). The covariance matrix of the distribution.\n    \n    Returns:\n    - A list with the PDF values for each data point in X, rounded to four decimal places.\n    \"\"\"\n    # Ensure X is a 2D array\n    if len(X.shape) == 1:\n        X = X.reshape(-1, 1)\n    \n    n_samples, n_features = X.shape\n    cov_inv = np.linalg.inv(cov)\n    cov_det = np.linalg.det(cov)\n    norm_coeff = 1.0 / (math.sqrt((2 * math.pi) ** n_features * cov_det))\n    \n    pdf_values = []\n    for x in X:\n        x_minus_mean = x - mean\n        exponent = -0.5 * np.dot(np.dot(x_minus_mean, cov_inv), x_minus_mean.T)\n        pdf = norm_coeff * math.exp(exponent)\n        pdf_values.append(round(pdf, 4))\n    \n    return pdf_values\n\n# Example usage:\nmean = np.array([0, 0])\ncov = np.array([[1, 0.5], [0.5, 1]])\nX = np.array([[0, 0], [1, 1], [-1, -1]])\n\n# Test the function\nprint(multivariate_gaussian_pdf(X, mean, cov))\n```\n\nThis code snippet defines a function `multivariate_gaussian_pdf` that computes the PDF of a multivariate Gaussian distribution for a given set of data points, mean vector, and covariance matrix. The function handles both one-dimensional and two-dimensional input arrays for `X` and ensures the returned PDF values are rounded to four decimal places."}
{"task_id": 419, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    # Add an intercept column if required\n    if fit_intercept:\n        X = np.c_[X, np.ones(X.shape[0])]\n        X_new = np.c_[X_new, np.ones(X_new.shape[0])]\n    \n    # Prepare the prior's covariance matrix V\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif np.isscalar(V):\n        V = V * np.eye(X.shape[1])\n    elif len(V.shape) == 1:\n        V = np.diag(V)\n    \n    # Prepare the prior's mean vector mu\n    if np.isscalar(mu):\n        mu = mu * np.ones(X.shape[1])\n    \n    # Compute the posterior parameters\n    V_inv = np.linalg.inv(V)\n    Sigma_p = np.linalg.inv(V_inv + X.T @ X)\n    mu_p = Sigma_p @ (V_inv @ mu + X.T @ y)\n    \n    # Compute the MAP predictive mean for X_new\n    y_pred = X_new @ mu_p\n    \n    # Return the predictions rounded to 4 decimal places\n    return [round(pred, 4) for pred in y_pred]\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([1, 2, 3])\n# X_new = np.array([[7, 8], [9, 10]])\n# predictions = bayesian_linear_regression_pred(X, y, X_new, mu=0, sigma=1, V=1, fit_intercept=True)\n# print(predictions)\n```\n\nThis code implements Bayesian linear regression with the ability to include an intercept term and to handle different types of prior covariance matrices and means. The MAP predictive means for the new data points are returned as a list of floats rounded to 4 decimal places."}
{"task_id": 423, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculates the Root Mean Squared Logarithmic Error (RMSLE) between two lists of non-negative numbers.\n    \n    Args:\n    actual: A list of actual (ground-truth) values.\n    predicted: A list of predicted values.\n    \n    Returns:\n    A float representing the RMSLE rounded to four decimal places, or -1 if inputs are invalid.\n    \"\"\"\n    # Validate input lengths\n    if len(actual) != len(predicted):\n        return -1\n    \n    # Validate non-negativity\n    if any(x < 0 for x in actual + predicted):\n        return -1\n    \n    # Calculate RMSLE\n    n = len(actual)\n    log_diffs = [(np.log(1 + predicted[i]) - np.log(1 + actual[i]))**2 for i in range(n)]\n    rmsle = np.sqrt(np.mean(log_diffs))\n    \n    return round(rmsle, 4)\n\n# Example usage\nif __name__ == \"__main__\":\n    actual = [1.0, 2.0, 3.0]\n    predicted = [1.1, 1.9, 3.5]\n    print(root_mean_squared_log_error(actual, predicted))  # Expected output: 0.0261\n```"}
{"task_id": 428, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    else:\n        if symmetric:\n            n = np.arange(window_len)\n        else:\n            # For periodic window, we need one extra sample and drop the last one\n            n = np.arange(window_len + 1)[:-1]\n\n        # Calculate the hann window values\n        hann_values = 0.5 - 0.5 * np.cos(2 * math.pi * n / (window_len - 1 if symmetric else window_len))\n        # Round to 4 decimal places and convert to list\n        return [round(value, 4) for value in hann_values]\n\n# Example usage and verification\nif __name__ == \"__main__\":\n    print(hann(5))  # Symmetric Hann window\n    print(hann(5, symmetric=True))  # Same as above\n    print(hann(5, symmetric=False))  # Periodic Hann window\n    print(hann(1))  # Special case: [1.0]\n    print(hann(0))  # Special case: []\n```\n\nThis script defines the `hann` function according to the specifications given, including handling of special cases and rounding to 4 decimal places. The example usage at the bottom demonstrates how to generate both symmetric and periodic Hann windows for a given length."}
{"task_id": 433, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:  # Convolutional kernel\n        out_channels, in_channels, kernel_height, kernel_width = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:  # Dense layer, embedding matrix, etc.\n        fan_in = shape[0]\n        fan_out = shape[1]\n    \n    return float(fan_in), float(fan_out)\n\n# Test cases to verify the correctness\nif __name__ == \"__main__\":\n    # Test for a 4D convolutional kernel\n    print(glorot_fan((32, 64, 3, 3)))  # Expected: (576.0, 288.0)\n\n    # Test for a dense layer\n    print(glorot_fan((100, 200)))  # Expected: (100.0, 200.0)\n\n    # Test for another dense layer\n    print(glorot_fan((784, 512)))  # Expected: (784.0, 512.0)\n\n    # Test for a 5D tensor (not specified in the rules, but should work)\n    print(glorot_fan((10, 20, 30, 40, 50)))  # Expected: (10.0, 20.0)\n```"}
{"task_id": 435, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]],\n                                y: list[float],\n                                n_estimators: int = 10,\n                                learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4)] * len(y)\n\n    y_hat = np.full_like(y, np.mean(y), dtype=float)\n\n    for t in range(1, n_estimators + 1):\n        residuals = y - y_hat\n        # Fit an OLS linear model\n        coefficients = np.linalg.lstsq(np.c_[X, np.ones(X.shape[0])], residuals, rcond=None)[0]\n        h_t = np.dot(X, coefficients[:-1]) + coefficients[-1]\n        y_hat += learning_rate * h_t\n\n    return [round(pred, 4) for pred in y_hat.tolist()]\n\n# Example usage:\nX = [[1, 2], [3, 4], [5, 6]]\ny = [2.1, 4.2, 6.3]\npredictions = gradient_boosting_regressor(X, y, n_estimators=10, learning_rate=0.1)\nprint(predictions)\n```\n\nThis code snippet defines the function `gradient_boosting_regressor`, which implements a simple version of the Gradient Boosting Regressor algorithm using ordinary least squares (OLS) linear regression as the weak learner. The function takes as input a list of lists representing the feature matrix `X`, a list representing the target vector `y`, and optional parameters `n_estimators` and `learning_rate`. It returns a list of predictions for the training set, rounded to four decimal places."}
{"task_id": 437, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    \n    # Convert input to numpy array if it's a list\n    is_list = isinstance(x, list)\n    x = np.array(x) if is_list or isinstance(x, np.ndarray) else np.array([x])\n    \n    # Compute sigmoid and its derivatives\n    sig = 1 / (1 + np.exp(-x))\n    d_sig = sig * (1 - sig)\n    d2_sig = d_sig * (1 - 2 * sig)\n    \n    # Select the result based on the order\n    if order == 0:\n        result = sig\n    elif order == 1:\n        result = d_sig\n    else:\n        result = d2_sig\n    \n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n    \n    # Convert back to the original type\n    if is_list:\n        return result.tolist()\n    elif isinstance(x, np.ndarray) and x.size == 1:\n        return float(result)\n    else:\n        return result.tolist()\n\n# Example usage:\nprint(sigmoid(0, 0))  # Scalar input\nprint(sigmoid([0, 1, -1], 1))  # List input for first derivative\nprint(sigmoid(np.array([[0, 1], [-1, -2]]), 2))  # Numpy array input for second derivative\n```"}
{"task_id": 438, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    # Convert input to NumPy array if it's not already one\n    y = np.array(y)\n    \n    # Determine the number of classes if not provided\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    else:\n        if num_classes < np.max(y) + 1:\n            return -1\n    \n    # Create the one-hot encoded matrix\n    one_hot = np.eye(num_classes)[y]\n    \n    # Convert to list of lists and return\n    return one_hot.tolist()\n\n# Test cases\nprint(to_categorical([0, 1, 2, 3]))  # [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]]\nprint(to_categorical([0, 1, 2, 3], num_classes=5))  # [[1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0]]\nprint(to_categorical([0, 1, 2, 3], num_classes=3))  # -1\nprint(to_categorical([0, 1, 2, 3], num_classes=4))  # [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]]\n```"}
{"task_id": 439, "completion_id": 0, "completion": "```python\nimport itertools\n\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    def is_frequent(candidate):\n        count = sum(1 for transaction in transactions if set(candidate).issubset(transaction))\n        return count / len(transactions) >= min_sup\n\n    def self_join(frequent_itemsets, k):\n        return [tuple(sorted([*a, b]))\n                for a, b in itertools.combinations(frequent_itemsets, 2)\n                if len(a) == k - 1 and len(set(a) & set(b)) == k - 1]\n\n    def prune(candidates, frequent_itemsets):\n        return [c for c in candidates if all(set(subset).issubset(c) for subset in itertools.combinations(c, len(c) - 1) if tuple(sorted(subset)) in frequent_itemsets)]\n\n    def find_frequent_itemsets():\n        itemsets = set(itertools.chain(*transactions))\n        frequent_itemsets = {item: None for item in itemsets if is_frequent([item])}\n        k = 2\n        while frequent_itemsets:\n            candidates = prune(self_join(frequent_itemsets, k), frequent_itemsets)\n            frequent_itemsets = {item: None for item in candidates if is_frequent(item)}\n            yield from frequent_itemsets.keys()\n            k += 1\n\n    return sorted(find_frequent_itemsets(), key=lambda x: (len(x), x))\n\n# Example usage\ntransactions = [\n    [1, 2, 3],\n    [2, 3],\n    [1, 2, 3, 5],\n    [2, 3, 4],\n    [1, 2, 4],\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 5],\n    [2, 3],\n    [1, 2, 3, 4],\n    [1, 2, 3]\n]\nmin_sup = 0.4\nprint(apriori_frequent_itemsets(transactions, min_sup))\n```\n\nThis script implements the Apriori algorithm to find all frequent itemsets in a given transactional database according to the specified minimum support threshold. The output is a list of tuples representing the frequent itemsets, sorted by their length and lexicographically within each length."}
{"task_id": 440, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    # Convert the list to a numpy array for easier manipulation\n    predictions_array = np.array(predictions)\n    \n    # Average the probabilities over all estimators for each sample\n    averaged_probs = np.mean(predictions_array, axis=0)\n    \n    # Round the averaged probabilities to 4 decimal places\n    rounded_probs = np.round(averaged_probs, decimals=4)\n    \n    # Determine the predicted class label by taking the argmax of the averaged probabilities\n    predicted_classes = np.argmax(rounded_probs, axis=1)\n    \n    # Convert numpy arrays back to python lists before returning\n    return rounded_probs.tolist(), predicted_classes.tolist()\n\n# Example usage:\npredictions_example = [\n    [[0.1, 0.2, 0.7], [0.5, 0.3, 0.2]],\n    [[0.2, 0.3, 0.5], [0.4, 0.4, 0.2]],\n    [[0.3, 0.5, 0.2], [0.3, 0.3, 0.4]]\n]\n\naveraged_probs, predicted_classes = aggregate_predictions(predictions_example)\nprint(\"Averaged Probabilities:\", averaged_probs)\nprint(\"Predicted Classes:\", predicted_classes)\n```\n\nThis script defines a function `aggregate_predictions` that takes a three-level nested list representing the probability distributions output by each estimator (tree) in an ensemble model. It then averages these probabilities for each sample and rounds them to four decimal places. Finally, it determines the predicted class label for each sample based on the class with the highest average probability and returns both the averaged probabilities and the predicted class labels."}
{"task_id": 444, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X = np.array(X)\n    if Y is not None:\n        Y = np.array(Y)\n    else:\n        Y = X\n    \n    # Validate dimensions\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    C = X.shape[1]\n    \n    # Validate and process sigma\n    if isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n        sigma = np.array([sigma] * C)\n    elif isinstance(sigma, (list, np.ndarray)):\n        sigma = np.array(sigma)\n        if len(sigma) != C or np.any(sigma <= 0):\n            return -1\n    elif sigma is None:\n        sigma = np.sqrt(C / 2)\n        sigma = np.array([sigma] * C)\n    else:\n        return -1\n    \n    # Compute the kernel matrix\n    kernel_matrix = np.zeros((X.shape[0], Y.shape[0]))\n    for i, x in enumerate(X):\n        for j, y in enumerate(Y):\n            diff = (x - y) / sigma\n            kernel_matrix[i, j] = np.exp(-0.5 * np.sum(diff ** 2))\n    \n    # Round to 4 decimal places and convert to list\n    kernel_matrix = np.round(kernel_matrix, 4).tolist()\n    \n    return kernel_matrix\n```\n\nThis solution follows the task description closely, making sure to validate the inputs, compute the kernel matrix using the RBF formula, and round the result to 4 decimal places. It handles both isotropic and anisotropic kernels and returns -1 in case of invalid inputs."}
{"task_id": 446, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef entropy(labels):\n    \"\"\"Computes the Shannon entropy of a list of labels.\"\"\"\n    label_counts = Counter(labels)\n    probs = [count / len(labels) for count in label_counts.values()]\n    return -sum(p * np.log2(p) for p in probs if p > 0)\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n    majority_label = Counter(y).most_common(1)[0][0]\n    \n    best_gain = -np.inf\n    best_feature_index = -1\n    best_threshold = None\n    left_majority_label = majority_label\n    right_majority_label = majority_label\n    \n    for j in range(n_features):\n        sorted_indices = np.argsort(X[:, j])\n        sorted_values = X[sorted_indices, j]\n        unique_values = np.unique(sorted_values)\n        \n        for i in range(len(unique_values) - 1):\n            threshold = (unique_values[i] + unique_values[i + 1]) / 2\n            left_indices = np.where(X[:, j] <= threshold)[0]\n            right_indices = np.where(X[:, j] > threshold)[0]\n            \n            if len(left_indices) == 0 or len(right_indices) == 0:\n                continue\n            \n            left_labels = y[left_indices]\n            right_labels = y[right_indices]\n            \n            p_left = len(left_labels) / n_samples\n            p_right = len(right_labels) / n_samples\n            \n            gain = entropy(y) - p_left * entropy(left_labels) - p_right * entropy(right_labels)\n            \n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = round(threshold, 4)\n                left_majority_label = Counter(left_labels).most_common(1)[0][0]\n                right_majority_label = Counter(right_labels).most_common(1)[0][0]\n    \n    if best_gain <= 0:\n        return (-1, None, majority_label, majority_label)\n    \n    return (best_feature_index, best_threshold, left_majority_label, right_majority_label)\n\n# Example usage:\nX = [[1.0, 2.0], [2.0, 1.0], [3.0, 3.0], [4.0, 4.0]]\ny = [0, 0, 1, 1]\nprint(decision_stump(X, y))\n```\nThis script defines a `decision_stump` function that implements the logic for finding the best decision stump according to the information gain criterion. The function first converts the input lists into NumPy arrays for efficient computation. It then iterates over each feature, sorting the values and considering midpoints between successive values as potential thresholds. For each threshold, it calculates the information gain and keeps track of the best split found. If no split yields a positive gain, it returns a default value indicating no split is beneficial."}
{"task_id": 452, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List\n\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    # Convert X to a NumPy array if it's a list\n    if isinstance(X, list):\n        X = np.array(X)\n    \n    # Determine the condition based on the type of threshold\n    if isinstance(threshold, (int, float)):\n        condition = X[:, feature_i] >= threshold\n    else:\n        condition = X[:, feature_i] == threshold\n    \n    # Apply the condition to split the data\n    subset1 = X[condition].tolist()\n    subset2 = X[~condition].tolist()\n    \n    return [subset1, subset2]\n\n# Example usage:\nX = np.array([[1, 5], [3, 2], [4, 6], [2, 1]])\nfeature_i = 0\nthreshold = 3\nprint(divide_on_feature(X, feature_i, threshold))  # \u279c  [[ [3, 2], [4, 6] ], [ [1, 5], [2, 1] ]]\n\nX = np.array([[1, \"A\"], [2, \"B\"], [3, \"A\"], [4, \"C\"]])\nfeature_i = 1\nthreshold = \"A\"\nprint(divide_on_feature(X, feature_i, threshold))  # \u279c  [[ [1, \"A\"], [3, \"A\"] ], [ [2, \"B\"], [4, \"C\"] ]]\n```"}
{"task_id": 453, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    \n    # Check for input validity\n    if not (0 <= gamma <= 1):\n        return -1\n    lengths = set([len(Q), len(Q_next), len(actions), len(rewards), len(dones)])\n    if len(lengths) != 1:\n        return -1\n    \n    # Initialize the output list\n    targets = []\n    for i in range(len(Q)):\n        target = rewards[i] if dones[i] else rewards[i] + gamma * np.max(Q_next[i])\n        Q_copy = Q[i].copy()\n        Q_copy[actions[i]] = target\n        targets.append(np.round(Q_copy, 4).tolist())\n    \n    return targets\n\n# Example usage:\nQ = np.array([[0.2, 0.3], [0.5, 0.1]])\nQ_next = np.array([[0.1, 0.4], [0.3, 0.2]])\nactions = [0, 1]\nrewards = [1.0, 0.5]\ndones = [False, True]\ngamma = 0.9\n\nprint(update_q_values(Q, Q_next, actions, rewards, dones, gamma))\n```\n\nThis script defines the `update_q_values` function that takes the specified inputs and returns the updated Q-values as required, with the constraints and checks for input validity as described."}
{"task_id": 458, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    # Convert input to a numpy array for easier manipulation\n    labels = np.array(labels)\n    \n    # Check for negative labels\n    if np.any(labels < 0):\n        return -1\n    \n    # Infer num_classes if not provided\n    if num_classes is None:\n        num_classes = np.max(labels) + 1\n    else:\n        # Check if num_classes is too small\n        if num_classes < np.max(labels) + 1:\n            return -1\n    \n    # Initialize the one-hot encoded matrix\n    one_hot = np.zeros((len(labels), num_classes), dtype=int)\n    \n    # Populate the one-hot encoded matrix\n    one_hot[np.arange(len(labels)), labels] = 1\n    \n    # Convert back to a list of lists\n    one_hot_list = one_hot.tolist()\n    \n    return one_hot_list\n\n# Test cases\nprint(to_categorical([0, 1, 2, 3]))  # [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]\nprint(to_categorical([0, 1, 2, 3], 4))  # [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]\nprint(to_categorical([0, 1, 2, 3], 3))  # -1\nprint(to_categorical([-1, 1, 2, 3]))  # -1\n```"}
{"task_id": 461, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(y)\n    \n    # Initialize predictions as the mean of the targets\n    y_pred = np.full(n_samples, np.mean(y))\n    \n    if n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n    \n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y - y_pred\n        \n        # Check if residuals are all zeros\n        if np.allclose(residuals, 0):\n            break\n        \n        # Find unique x values except the greatest one\n        split_values = np.unique(x)[:-1]\n        \n        best_sse = np.inf\n        best_split = None\n        best_left_mean = None\n        best_right_mean = None\n        \n        for t in split_values:\n            left = x <= t\n            right = x > t\n            \n            if np.any(left) and np.any(right):\n                left_mean = np.mean(residuals[left])\n                right_mean = np.mean(residuals[right])\n                \n                sse = np.sum((residuals[left] - left_mean) ** 2) + np.sum((residuals[right] - right_mean) ** 2)\n                \n                if sse < best_sse:\n                    best_sse = sse\n                    best_split = t\n                    best_left_mean = left_mean\n                    best_right_mean = right_mean\n        \n        # If no valid split was found, use the mean of the entire residuals\n        if best_split is None:\n            stump_prediction = np.mean(residuals)\n        else:\n            stump_prediction = np.where(x <= best_split, best_left_mean, best_right_mean)\n        \n        # Update the predictions\n        y_pred += learning_rate * stump_prediction\n    \n    return np.round(y_pred, 4).tolist()\n\n# Example usage\nx = [1, 2, 3, 4, 5]\ny = [1, 2, 3, 4, 5]\npredictions = gradient_boosting_regressor(x, y, n_estimators=100, learning_rate=0.5)\nprint(predictions)\n```\n\nThis script implements a gradient boosting regressor for one-dimensional regression data, using decision stumps as weak learners. The algorithm follows the specified steps and constraints, and the final predictions are rounded to four decimal places."}
{"task_id": 471, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    # Get the number of actions\n    num_actions = len(q_table[0])\n    \n    # Calculate the target value\n    if next_state is not None:\n        # Find the maximum Q-value in the next state\n        max_q_next = max(q_table[next_state])\n        # Count how many actions have the maximum Q-value\n        max_actions = [a for a, q in enumerate(q_table[next_state]) if q == max_q_next]\n        # Calculate the expectation of the next state's Q-values\n        exp_q_next = 0\n        for a in range(num_actions):\n            if a in max_actions:\n                exp_q_next += (1 - epsilon + epsilon / num_actions) * q_table[next_state][a]\n            else:\n                exp_q_next += (epsilon / num_actions) * q_table[next_state][a]\n        # Calculate the target\n        target = reward + gamma * exp_q_next\n    else:\n        # If next state is None, treat the expectation term as 0\n        target = reward\n    \n    # Update the Q-table using the learning rate and the target\n    q_table[state][action] += lr * (target - q_table[state][action])\n    \n    # Round all entries to four decimal places\n    for i in range(len(q_table)):\n        for j in range(len(q_table[i])):\n            q_table[i][j] = round(q_table[i][j], 4)\n    \n    return q_table\n\n# Example usage:\nq_table = [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]\nstate = 0\naction = 1\nreward = 1.0\nnext_state = 1\nepsilon = 0.1\nlr = 0.5\ngamma = 0.9\nupdated_q_table = expected_sarsa_update(q_table, state, action, reward, next_state, epsilon, lr, gamma)\nprint(updated_q_table)\n```\n\nThis script implements the Expected\u2013SARSA update rule for a given Q-table and a single transition. It updates the Q-table according to the Expected\u2013SARSA algorithm and returns the updated table with all entries rounded to four decimal places."}
{"task_id": 474, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n\n    def generate_points(num_samples, class_index, interval):\n        x = np.random.uniform(((class_index // 2) + 0.1) * 10, ((class_index // 2) + 0.9) * 10, num_samples)\n        y = np.random.uniform(((class_index % 2) * interval + 0.1) * 10, ((class_index % 2) * interval + 0.9) * 10, num_samples)\n        labels = np.full(num_samples, (class_index - 0.5) * 2)\n        return np.round(np.column_stack((x, y)), 4), labels\n\n    X_train, Y_train = [], []\n    X_val, Y_val = [], []\n\n    for i in range(m):\n        x_train_class, y_train_class = generate_points(n_train, i, interval)\n        x_val_class, y_val_class = generate_points(n_val, i, interval)\n        X_train.append(x_train_class)\n        Y_train.append(y_train_class)\n        X_val.append(x_val_class)\n        Y_val.append(y_val_class)\n\n    X_train = np.concatenate(X_train)\n    Y_train = np.concatenate(Y_train)\n    X_val = np.concatenate(X_val)\n    Y_val = np.concatenate(Y_val)\n\n    return X_train, X_val, Y_train, Y_val\n\n# Example usage:\nm = 2\nn_train = 100\nn_val = 50\ninterval = 1.0\nseed = 42\n\nX_train, X_val, Y_train, Y_val = generate_data(m, n_train, n_val, interval, seed)\nprint(\"X_train:\", X_train)\nprint(\"X_val:\", X_val)\nprint(\"Y_train:\", Y_train)\nprint(\"Y_val:\", Y_val)\n```\n\nThis script defines a `generate_data` function that generates a 2D toy dataset according to the given specifications. The function is parameterized and takes an optional seed for reproducibility. It returns four NumPy arrays: `X_train`, `X_val`, `Y_train`, and `Y_val`, which contain the training and validation data and their corresponding labels, respectively. The coordinates are rounded to four decimal places as required."}
{"task_id": 475, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    # Initialize moments if they are None\n    if m_prev is None:\n        m_prev = np.zeros_like(grad, dtype=np.float32)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad, dtype=np.float32)\n    \n    # Update the first and second moments\n    m_t = b1 * m_prev + (1 - b1) * grad\n    v_t = b2 * v_prev + (1 - b2) * (grad ** 2)\n    \n    # Bias correction\n    m_t_hat = m_t / (1 - b1 ** t)\n    v_t_hat = v_t / (1 - b2 ** t)\n    \n    # Update the parameters\n    w_new = w - learning_rate * m_t_hat / (np.sqrt(v_t_hat) + eps)\n    \n    return w_new, m_t, v_t\n\n# Example call\nw_new, m_new, v_new = adam_update(1.0, 0.1, 0.0, 0.0, 1)\nprint(round(w_new, 9))  # \u2248 0.999000001\n```"}
{"task_id": 479, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    \n    num_arms = len(rewards[0])\n    value_estimates = np.full(num_arms, ev_prior)\n    counts = np.zeros(num_arms)\n    \n    for row in rewards:\n        if np.random.rand() < epsilon:\n            # Choose a random arm\n            chosen_arm = np.random.randint(num_arms)\n        else:\n            # Choose the arm with the highest current estimate\n            chosen_arm = np.argmax(value_estimates)\n        \n        # Increment the count and update the estimate for the chosen arm\n        counts[chosen_arm] += 1\n        reward = row[chosen_arm]\n        value_estimates[chosen_arm] += (reward - value_estimates[chosen_arm]) / counts[chosen_arm]\n    \n    return [round(v, 4) for v in value_estimates]\n\n# Example usage:\nrewards = [\n    [1.0, 0.0, 0.5],\n    [0.0, 1.0, 0.5],\n    [1.0, 1.0, 0.5],\n    [0.0, 0.0, 0.5],\n    [1.0, 1.0, 0.5]\n]\nprint(epsilon_greedy_bandit(rewards, epsilon=0.1, ev_prior=0.0, seed=42))\n```\n\nThis Python script provides a complete implementation of the \u03b5-greedy algorithm for the stationary multi-armed bandit problem as described in the task. It uses NumPy for efficient numerical operations and handles the optional seeding for reproducibility."}
{"task_id": 481, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef euclidean_distance(point1, point2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((point1 - point2) ** 2))\n\ndef region_query(data, point_id, eps):\n    \"\"\"Find all points in the dataset within a distance `eps` from a given point.\"\"\"\n    neighbors = []\n    for index, point in enumerate(data):\n        if euclidean_distance(data[point_id], point) <= eps:\n            neighbors.append(index)\n    return neighbors\n\ndef expand_cluster(data, labels, point_id, neighbors, cluster_id, eps, min_samples):\n    \"\"\"Expand a cluster from a given point.\"\"\"\n    labels[point_id] = cluster_id\n    i = 0\n    while i < len(neighbors):\n        neighbor_id = neighbors[i]\n        if labels[neighbor_id] == -1:\n            labels[neighbor_id] = cluster_id\n        elif labels[neighbor_id] == 0:\n            labels[neighbor_id] = cluster_id\n            neighbor_neighbors = region_query(data, neighbor_id, eps)\n            if len(neighbor_neighbors) >= min_samples:\n                neighbors = neighbors + neighbor_neighbors\n        i += 1\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled -1 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n\n    labels = [0] * len(data)  # 0 means unvisited\n    cluster_id = 0\n\n    for point_id in range(len(data)):\n        if not labels[point_id]:  # If the point is unvisited\n            neighbors = region_query(data, point_id, eps)\n            if len(neighbors) < min_samples:\n                labels[point_id] = -1  # Label as noise\n            else:\n                cluster_id += 1\n                expand_cluster(data, labels, point_id, neighbors, cluster_id, eps, min_samples)\n\n    return labels\n\n# Example usage\nif __name__ == \"__main__\":\n    np.random.seed(0)\n    data = np.random.rand(30, 2)\n    eps = 0.3\n    min_samples = 5\n    labels = dbscan(data, eps, min_samples)\n    print(labels)\n```"}
{"task_id": 482, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    # Convert y to a NumPy array if it's not already\n    y = np.array(y)\n    \n    # Check if y is a 1D array\n    if y.ndim != 1:\n        raise ValueError(\"Input array must be one-dimensional.\")\n    \n    # Determine the number of classes\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    else:\n        if np.min(y) < 0 or np.max(y) >= num_classes:\n            raise ValueError(\"Labels must be non-negative and smaller than num_classes.\")\n    \n    # Initialize the result array with zeros\n    result = np.zeros((y.size, num_classes), dtype=int)\n    \n    # Set the appropriate indices to 1\n    result[np.arange(y.size), y] = 1\n    \n    return result\n\n# Test the function\nlabels = [0, 1, 2, 2, 1, 0]\nprint(to_categorical(labels))\nprint(to_categorical(labels, num_classes=3))\n# The following line should raise an exception\n# print(to_categorical(labels, num_classes=2))\n```"}
{"task_id": 485, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    \n    def build_tree(X, y, depth):\n        if depth == max_depth or len(X) < 2:\n            return np.mean(y)\n        \n        best_split = None\n        best_sse = float('inf')\n        \n        for split in set(X):\n            left_y = [y[i] for i in range(len(X)) if X[i] < split]\n            right_y = [y[i] for i in range(len(X)) if X[i] >= split]\n            if not left_y or not right_y:\n                continue\n            sse = np.sum((left_y - np.mean(left_y)) ** 2) + np.sum((right_y - np.mean(right_y)) ** 2)\n            if sse < best_sse:\n                best_sse = sse\n                best_split = split\n        \n        if best_split is None:\n            return np.mean(y)\n        \n        left_indices = [i for i in range(len(X)) if X[i] < best_split]\n        right_indices = [i for i in range(len(X)) if X[i] >= best_split]\n        \n        left_tree = build_tree([X[i] for i in left_indices], [y[i] for i in left_indices], depth + 1)\n        right_tree = build_tree([X[i] for i in right_indices], [y[i] for i in right_indices], depth + 1)\n        \n        return (best_split, left_tree, right_tree)\n    \n    def predict(point, tree):\n        if isinstance(tree, float):\n            return tree\n        split, left_tree, right_tree = tree\n        if point < split:\n            return predict(point, left_tree)\n        else:\n            return predict(point, right_tree)\n    \n    if not X_train:\n        return []\n    \n    tree = build_tree(X_train, y_train, 0)\n    return [predict(x, tree) for x in X_test]\n```"}
{"task_id": 490, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:  # Check if the input is empty\n        return []\n    \n    # Convert input to NumPy array if it is not already one\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    \n    # Create a square diagonal matrix using np.diag\n    diagonal_matrix = np.diag(x)\n    \n    # Convert the NumPy array to a list of lists and return\n    return diagonal_matrix.tolist()\n\n# Example usage:\n# Vector to diagonal matrix\nvector = [1, 2, 3]\ndiagonal_matrix = make_diagonal(vector)\nprint(diagonal_matrix)  # Output: [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\n# Empty input\nempty_input = []\nempty_matrix = make_diagonal(empty_input)\nprint(empty_matrix)  # Output: []\n```"}
{"task_id": 491, "completion_id": 0, "completion": "```python\nfrom collections import Counter, defaultdict\nimport itertools\n\nclass TreeNode:\n    def __init__(self, name, count, parent):\n        self.name = name\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.link = None\n\ndef update_tree(items, node, header_table, count):\n    if items[0] in node.children:\n        node.children[items[0]].count += count\n    else:\n        node.children[items[0]] = TreeNode(items[0], count, node)\n        if header_table[items[0]][1] is None:\n            header_table[items[0]][1] = node.children[items[0]]\n        else:\n            update_header(header_table[items[0]][1], node.children[items[0]])\n    if len(items) > 1:\n        update_tree(items[1:], node.children[items[0]], header_table, count)\n\ndef update_header(node_to_test, target_node):\n    while node_to_test.link is not None:\n        node_to_test = node_to_test.link\n    node_to_test.link = target_node\n\ndef create_tree(transactions, min_sup):\n    header_table = {}\n    for transaction in transactions:\n        for item in transaction:\n            header_table[item] = header_table.get(item, 0) + 1\n    for k in list(header_table.keys()):\n        if header_table[k] < min_sup:\n            del(header_table[k])\n    freq_item_set = set(header_table.keys())\n    if len(freq_item_set) == 0:\n        return None, None\n    for k in header_table:\n        header_table[k] = [header_table[k], None]\n    root = TreeNode('Null Set', 1, None)\n    for transaction in transactions:\n        transaction = sorted([item for item in transaction if item in freq_item_set], key=lambda x: header_table[x][0], reverse=True)\n        if len(transaction) > 0:\n            update_tree(transaction, root, header_table, 1)\n    return root, header_table\n\ndef ascend_tree(node, prefix_path):\n    if node.parent is not None:\n        prefix_path.append(node.name)\n        ascend_tree(node.parent, prefix_path)\n\ndef find_prefix_path(base_path, header_table):\n    conditional_patterns = {}\n    node = header_table[base_path][1]\n    while node is not None:\n        prefix_path = []\n        ascend_tree(node, prefix_path)\n        if len(prefix_path) > 1:\n            conditional_patterns[frozenset(prefix_path[1:])] = node.count\n        node = node.link\n    return conditional_patterns\n\ndef mine_tree(tree_node, header_table, min_sup, prefix, freq_item_list):\n    bigL = [v[0] for v in sorted(header_table.items(), key=lambda p: p[1][0])]\n    for base in bigL:\n        new_freq_set = prefix.copy()\n        new_freq_set.add(base)\n        freq_item_list.append(new_freq_set)\n        conditional_patterns = find_prefix_path(base, header_table)\n        conditional_tree, conditional_header = create_tree(list(conditional_patterns.keys()), min_sup)\n        if conditional_header is not None:\n            mine_tree(conditional_tree, conditional_header, min_sup, new_freq_set, freq_item_list)\n\ndef fp_growth(transactions, min_sup):\n    root, header_table = create_tree(transactions, min_sup)\n    freq_item_list = []\n    if header_table is not None:\n        mine_tree(root, header_table, min_sup, set([]), freq_item_list)\n    return sorted([tuple(sorted(item)) for item in freq_item_list], key=lambda x: (len(x), x))\n\n# Example usage\ntransactions = [\n    [\"A\",\"B\",\"D\",\"E\"],\n    [\"B\",\"C\",\"E\"],\n    [\"A\",\"B\",\"D\",\"E\"],\n    [\"A\",\"B\",\"C\",\"E\"],\n    [\"A\",\"B\",\"C\",\"D\",\"E\"],\n    [\"B\",\"C\",\"D\"]\n]\nmin_sup = 3\nprint(fp_growth(transactions, min_sup))\n```\n\nThis Python script implements the FP-Growth algorithm to mine frequent item-sets from a given collection of transactions. The main function `fp_growth` takes a list of transactions and a minimum support value as input and returns a sorted list of tuples representing the frequent item-sets."}
{"task_id": 492, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n\n    n_samples, n_features = len(X), len(X[0])\n    combinations = list(combinations_with_replacement(range(n_features), degree))\n    new_features = [np.ones(n_samples)]\n\n    for d in range(1, degree + 1):\n        for comb in combinations_with_replacement(range(n_features), d):\n            feature = np.prod([X[i][feature_index] for feature_index in comb], axis=0)\n            new_features.append(feature)\n\n    return np.array(new_features).T.tolist()\n\n# Example usage:\nX = [[1, 2], [3, 4]]\ndegree = 2\nprint(polynomial_features(X, degree))\n```\n\nThe example provided will generate a polynomial feature matrix for a simple 2x2 input matrix `X` with a degree of 2. The output will contain all combinations of the input features raised to the powers that do not exceed the total degree of 2, following the requirements specified in the task description."}
{"task_id": 493, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if isinstance(y, list):\n        y = np.array(y)\n    \n    if y.size == 0:\n        return -1\n    \n    y_mean = np.mean(y)\n    squared_diffs = (y - y_mean) ** 2\n    mse_value = np.mean(squared_diffs)\n    \n    return round(mse_value, 4)\n\n# Test cases to verify the correctness of the function\ntest_cases = [\n    (np.array([2, 4, 4, 4, 5, 5, 7, 9]), 4.0000),\n    ([10, 12, 23, 23, 16, 23, 21, 16], 32.6538),\n    ([], -1),\n    (np.array([]), -1),\n    ([1, 2, 3, 4, 5], 2.0000)\n]\n\n# Function to check the correctness of the mse function\ndef check_mse(test_cases):\n    for idx, (input_data, expected) in enumerate(test_cases):\n        result = mse(input_data)\n        assert result == expected, f\"Test case {idx + 1} failed: expected {expected}, got {result}\"\n    print(\"All test cases passed.\")\n\ncheck_mse(test_cases)\n```"}
{"task_id": 496, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Ensure x is a NumPy array for element-wise operations\n    x = np.array(x)\n    \n    # Compute the affine activation\n    y = slope * x + intercept\n    \n    # Compute the first derivative\n    grad = np.full_like(x, slope, dtype=float)\n    \n    # The second derivative is always zero for an affine function\n    grad2 = np.zeros_like(x)\n    \n    # Round the results to 4 decimal places\n    y_rounded = np.round(y, decimals=4).tolist()\n    grad_rounded = np.round(grad, decimals=4).tolist()\n    grad2_rounded = np.round(grad2, decimals=4).tolist()\n    \n    return y_rounded, grad_rounded, grad2_rounded\n\n# Example usage:\n# x = [1.0, 2.0, 3.0]\n# slope = 2.0\n# intercept = 1.0\n# y, grad, grad2 = apply_affine(x, slope, intercept)\n# print(y, grad, grad2)\n```"}
{"task_id": 499, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    n_samples, n_features = data.shape\n    if k < 1 or k > n_features:\n        return -1\n\n    # Step 1: Standardize each feature\n    means = np.mean(data, axis=0)\n    stds = np.std(data, axis=0, ddof=1)  # Population variance\n    # Avoid division by zero\n    stds[stds == 0] = 1\n    standardized_data = (data - means) / stds\n\n    # Step 2: Compute the sample covariance matrix\n    covariance_matrix = np.cov(standardized_data, rowvar=False, ddof=1)\n\n    # Step 3: Perform eigen-decomposition\n    eigenvalues, eigenvectors = np.linalg.eigh(covariance_matrix)\n\n    # Step 4: Sort eigenvalues and eigenvectors\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n\n    # Step 5: Fix the sign of the eigenvectors\n    max_abs_indices = np.argmax(np.abs(sorted_eigenvectors), axis=0)\n    signs = np.sign(sorted_eigenvectors[max_abs_indices, np.arange(n_features)])\n    sorted_eigenvectors = sorted_eigenvectors * signs\n\n    # Step 6: Project the standardized data onto the first k eigenvectors\n    projection_matrix = sorted_eigenvectors[:, :k]\n    projected_data = np.dot(standardized_data, projection_matrix)\n\n    return np.round(projected_data, 4).tolist()\n\n# Example usage\ndata = np.array([\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n    [10, 11, 12]\n])\nk = 2\nprint(pca_transform(data, k))\n```\n\nThis script contains the `pca_transform` function, which implements PCA from scratch according to the given instructions and constraints. It also includes an example usage of the function with a sample `data` array and a value for `k`."}
{"task_id": 500, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    n_samples, n_features = X_train.shape\n    F = np.full(n_samples, np.mean(y_train))  # Initialize F to the average of y_train\n    predictions = np.zeros(X_test.shape[0])  # Initialize predictions for X_test\n\n    for _ in range(n_estimators):\n        residuals = y_train - F  # Compute residuals\n        best_stump = None\n        best_error = float('inf')\n        best_left_value = 0\n        best_right_value = 0\n\n        # Find the best stump that minimizes the squared error on residuals\n        for feature in range(n_features):\n            sorted_indices = np.argsort(X_train[:, feature])\n            for i in range(1, n_samples):\n                threshold = (X_train[sorted_indices[i - 1], feature] + X_train[sorted_indices[i], feature]) / 2\n                left_indices = X_train[:, feature] <= threshold\n                right_indices = ~left_indices\n                if np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n                    continue\n                left_value = np.mean(residuals[left_indices])\n                right_value = np.mean(residuals[right_indices])\n                error = np.sum((residuals[left_indices] - left_value) ** 2) + np.sum((residuals[right_indices] - right_value) ** 2)\n                if error < best_error:\n                    best_error = error\n                    best_stump = (feature, threshold)\n                    best_left_value = left_value\n                    best_right_value = right_value\n\n        # Update F and make predictions for X_test\n        feature, threshold = best_stump\n        left_indices = X_train[:, feature] <= threshold\n        right_indices = ~left_indices\n        F[left_indices] += learning_rate * best_left_value\n        F[right_indices] += learning_rate * best_right_value\n\n        left_indices_test = X_test[:, feature] <= threshold\n        right_indices_test = ~left_indices_test\n        predictions[left_indices_test] += learning_rate * best_left_value\n        predictions[right_indices_test] += learning_rate * best_right_value\n\n    # Convert regression scores to binary labels by thresholding at 0.5\n    return [1 if pred >= 0.5 else 0 for pred in predictions]\n```"}
{"task_id": 505, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n\n    # Compute positive phase hidden probabilities\n    h0_prob = sigmoid(X @ W + hbias)\n\n    v_k_prob = X\n    h_k_prob = h0_prob\n\n    for _ in range(k):\n        # Compute hidden probabilities\n        h_k_prob = sigmoid(v_k_prob @ W + hbias)\n        # Compute visible probabilities\n        v_k_prob = sigmoid(h_k_prob @ W.T + vbias)\n\n    # Compute positive and negative gradients\n    pos_grad = X.T @ h0_prob\n    neg_grad = v_k_prob.T @ h_k_prob\n\n    # Update the weight matrix\n    W_new = W + learning_rate * (pos_grad - neg_grad) / X.shape[0]\n\n    # Return the updated weight matrix rounded to 4 decimal places and converted to a list\n    return np.around(W_new, decimals=4).tolist()\n\n# Example usage:\nX = np.array([[1, 0, 1], [0, 1, 1]])\nW = np.array([[0.5, -0.5], [-0.5, 0.5], [0.5, -0.5]])\nhbias = np.array([0.1, -0.1])\nvbias = np.array([0.2, -0.2, 0.2])\nlearning_rate = 0.1\nk = 1\n\nupdated_W = contrastive_divergence(X, W, hbias, vbias, learning_rate, k)\nprint(updated_W)\n```\n\nThis code snippet defines a function `contrastive_divergence` that implements a single weight-update step for a binary RBM using the Contrastive Divergence (CD-k) algorithm. The function takes as input a mini-batch of visible vectors, the current weight matrix, visible and hidden bias vectors, the learning rate, and the number of Gibbs sampling steps. It returns the updated weight matrix rounded to 4 decimal places and converted to a list of lists."}
{"task_id": 509, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Check if the lengths of both vectors are equal\n    if len(x) != len(y):\n        return -1\n    \n    # Calculate the absolute differences\n    differences = np.abs(x - y)\n    \n    # Find the maximum difference\n    max_diff = np.max(differences)\n    \n    # Return the Chebyshev distance rounded to four decimal places\n    return round(float(max_diff), 4)\n\n# Example usage\nx = [1, 2, 3]\ny = [2, 4, 6]\nprint(chebyshev(x, y))  # Output should be 3.0\n```"}
{"task_id": 510, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    # Clip y_pred to avoid log(0)\n    eps = np.finfo(float).eps\n    y_pred_clipped = np.clip(y_pred, eps, 1 - eps)\n\n    # Compute the binary cross-entropy (reconstruction loss)\n    recon_loss = -np.sum(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped), axis=1)\n\n    # Compute the KL divergence\n    kl_div = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var), axis=1)\n\n    # Total loss is the average of the sum of reconstruction loss and KL divergence\n    total_loss = np.mean(recon_loss + kl_div)\n\n    return round(total_loss, 6)\n\n# Example usage:\nbatch_size, n_features, latent_dim = 32, 100, 20\ny = np.random.randint(2, size=(batch_size, n_features))\ny_pred = np.random.rand(batch_size, n_features)\nt_mean = np.random.randn(batch_size, latent_dim)\nt_log_var = np.random.randn(batch_size, latent_dim)\n\nloss = vae_loss(y, y_pred, t_mean, t_log_var)\nprint(loss)\n```"}
{"task_id": 513, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n\n    # Linear part\n    linear_part = np.dot(X, w)\n\n    # Interaction part\n    interaction_part = 0.5 * np.sum((X @ V) ** 2 - X ** 2 @ (V ** 2), axis=1)\n\n    # Prediction\n    predictions = w0 + linear_part + interaction_part\n\n    return [round(pred, 4) for pred in predictions]\n\n# Example usage:\nX = [[1, 2, 3], [4, 5, 6]]\nw0 = 1.0\nw = [0.5, 0.5, 0.5]\nV = [[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]]\npredictions = fm_predict(X, w0, w, V)\nprint(predictions)\n```\nThis script defines the `fm_predict` function as per the requirement and includes an example usage of the function. The function takes a list of samples, a global bias, a list of linear coefficients, and a matrix of latent interaction factors, and returns a list of predictions for each sample, rounded to the nearest 4th decimal."}
{"task_id": 517, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # Convert input to numpy array if it is a list or tuple\n    if isinstance(z, (list, tuple)):\n        z = np.array(z)\n    elif not isinstance(z, np.ndarray):\n        # If it's a scalar, convert it to a 0-dim numpy array\n        z = np.array(z, ndmin=0)\n    \n    # Numerically stable sigmoid implementation\n    # For very large negative z, exp(-z) will be 0, hence result will be 0\n    # For very large positive z, 1 + exp(-z) will be 1, hence result will be 1\n    with np.errstate(over='ignore'):\n        sig = np.where(z >= 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n    \n    # Round to 4 decimal places\n    sig_rounded = np.around(sig, decimals=4)\n    \n    # Convert back to scalar if input was scalar\n    if z.ndim == 0:\n        return float(sig_rounded)\n    else:\n        return sig_rounded.tolist()\n\n# Test the function\nprint(sigmoid([-1, 0, 1]))  # Expected output: [0.2689, 0.5, 0.7311]\n```"}
{"task_id": 518, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        # Check if actual is one-hot encoded and convert if necessary\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        # Check if predicted is one-hot encoded and convert if necessary\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        # Call the original function with the processed arrays\n        return function(actual, predicted)\n    return wrapper\n\n@unhot\ndef accuracy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Simple accuracy rounded to 4 decimals.\"\"\"\n    return float(np.round(np.mean(actual == predicted), 4))\n\n# Example usage\nactual = np.array([[0,1,0], [1,0,0], [0,0,1]])  # one-hot\npredicted = np.array([[0,1,0], [0,1,0], [0,0,1]])  # one-hot\nprint(accuracy(actual, predicted))  # 0.6667\n```"}
{"task_id": 520, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    # Helper function to handle nested lists\n    def compute_grad(z):\n        if isinstance(z, (list, np.ndarray)):\n            return [compute_grad(item) for item in z]\n        else:\n            return np.round(z * (1 - z), 4)\n    \n    # Check if the input is a scalar\n    if isinstance(z, (int, float)):\n        return np.round(z * (1 - z), 4)\n    \n    # Process the input recursively if it's a list or ndarray\n    return compute_grad(z)\n\n# Test cases to verify the correctness of the code\nprint(sigmoid_grad(0.5))  # Should return 0.25\nprint(sigmoid_grad([0.5, 0.75]))  # Should return [0.25, 0.1875]\nprint(sigmoid_grad([[0.5, 0.75], [0.2, 0.8]]))  # Should return [[0.25, 0.1875], [0.16, 0.16]]\nprint(sigmoid_grad(np.array([0.5, 0.75])))  # Should return array([0.25, 0.1875])\nprint(sigmoid_grad([]))  # Should return []\n```"}
{"task_id": 528, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Convert X to a numpy array for easier manipulation\n    X = np.array(X)\n    # Extract the min and max values for each dimension\n    x1_min, x1_max = X[:, 0].min(), X[:, 0].max()\n    x2_min, x2_max = X[:, 1].min(), X[:, 1].max()\n    \n    # Generate grid points\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    x1_mesh, x2_mesh = np.meshgrid(x1_plot, x2_plot)\n    \n    # Compute the decision values for the grid points\n    decision_values = W[0] * x1_mesh + W[1] * x2_mesh + b\n    \n    # Classify the grid points\n    grid_labels = np.sign(decision_values)\n    \n    # Convert the numpy array to a list of lists\n    grid_labels_list = grid_labels.tolist()\n    \n    # Since np.sign returns 0 for zero values, we need to ensure all values are either -1 or 1\n    for i in range(grid_n):\n        for j in range(grid_n):\n            if grid_labels_list[i][j] == 0:\n                grid_labels_list[i][j] = 1  # or -1, depending on the desired behavior for zero cases\n    \n    return grid_labels_list\n\n# Example usage:\nX = [[1, 2], [2, 3], [3, 4], [-1, -2], [-2, -3]]\nW = [1, -1]\nb = 0\ngrid = decision_boundary_grid(X, W, b, grid_n=10)\nprint(grid)\n```\n\nThis script defines the function `decision_boundary_grid` as required, which generates a grid of labels based on a linear classifier's decision boundary. The `sign` function is implemented to classify each grid point as either 1 or -1, and the grid is returned as a list of lists."}
{"task_id": 537, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n    \n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n    \n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n    \n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    # Add a very small constant to avoid division by zero\n    epsilon = 1e-9\n    \n    # Separate the data into the two classes\n    X_train_0 = X_train[y_train == 0]\n    X_train_1 = X_train[y_train == 1]\n    \n    # Compute the class priors\n    prior_0 = len(X_train_0) / len(X_train)\n    prior_1 = len(X_train_1) / len(X_train)\n    \n    # Compute the mean and standard deviation for each feature\n    mean_0 = np.mean(X_train_0, axis=0)\n    std_0 = np.std(X_train_0, axis=0) + epsilon\n    mean_1 = np.mean(X_train_1, axis=0)\n    std_1 = np.std(X_train_1, axis=0) + epsilon\n    \n    # Define the Gaussian probability density function\n    def gaussian_pdf(x, mean, std):\n        exponent = np.exp(-((x - mean) ** 2 / (2 * std ** 2)))\n        return (1 / (np.sqrt(2 * np.pi) * std)) * exponent\n    \n    # Compute the likelihood for each test sample\n    likelihood_0 = gaussian_pdf(X_test, mean_0, std_0)\n    likelihood_1 = gaussian_pdf(X_test, mean_1, std_1)\n    \n    # Compute the posterior probabilities\n    posterior_0 = np.prod(likelihood_0, axis=1) * prior_0\n    posterior_1 = np.prod(likelihood_1, axis=1) * prior_1\n    \n    # Predict the class with the larger posterior probability\n    predictions = [1 if p1 > p0 else 0 for p0, p1 in zip(posterior_0, posterior_1)]\n    \n    return predictions\n```\n\nThis code snippet defines a Gaussian Naive Bayes classifier from scratch, which is capable of binary classification. It estimates the parameters (mean and standard deviation) for each feature of both classes during the training phase and computes the posterior probabilities for each class during the prediction phase. The class with the larger posterior probability is chosen as the prediction for each test sample."}
{"task_id": 539, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Computes the binary cross-entropy cost given the model probabilities and true labels.\n    \n    Args:\n        AL: NumPy array of shape (1, m) or (m,) representing the model probabilities.\n        Y: NumPy array of shape (1, m) or (m,) representing the true labels.\n    \n    Returns:\n        The binary cross-entropy cost as a float.\n    \"\"\"\n    # Ensure the arrays are 2D with shape (1, m)\n    if AL.ndim == 1:\n        AL = AL.reshape(1, -1)\n    if Y.ndim == 1:\n        Y = Y.reshape(1, -1)\n    \n    # Clip probabilities to avoid numerical issues\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    \n    # Number of training examples\n    m = Y.shape[1]\n    \n    # Binary cross-entropy cost\n    cost = -1/m * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    \n    # Convert cost to float and return\n    return float(np.squeeze(cost))\n\n# Example usage\nif __name__ == \"__main__\":\n    # Example data\n    AL = np.array([[0.9, 0.1, 0.8, 0.2]])  # Model probabilities\n    Y = np.array([[1, 0, 1, 0]])  # True labels\n    \n    # Compute and print the cost\n    cost = compute_cost(AL, Y)\n    print(f\"Cost: {cost:.4f}\")\n```\nThis code snippet defines a function `compute_cost` that calculates the binary cross-entropy cost according to the given formula, with the necessary adjustments to handle the input arrays and avoid numerical issues."}
{"task_id": 552, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi, A, B = hmm['pi'], hmm['A'], hmm['B']\n    T = len(observations)\n    N = len(pi)\n\n    if t < 0 or t >= T:\n        return []\n\n    # Step 1: Compute forward probabilities \u03b1\n    alpha = np.zeros((T, N))\n    alpha[0] = pi * B[:, observations[0]]\n    for i in range(1, T):\n        alpha[i] = np.dot(alpha[i-1], A) * B[:, observations[i]]\n\n    # Step 2: Compute backward probabilities \u03b2\n    beta = np.zeros((T, N))\n    beta[T-1] = 1\n    for i in range(T-2, -1, -1):\n        beta[i] = np.dot(A, (B[:, observations[i+1]] * beta[i+1]))\n\n    # Step 3: Compute \u03b3\u209c(i)=\u03b1\u209c(i)\u03b2\u209c(i)/\u2211\u2c7c\u03b1\u209c(j)\u03b2\u209c(j)\n    gamma_t = alpha[t] * beta[t]\n    gamma_t /= np.sum(gamma_t)\n\n    # Step 4: Round every component of \u03b3\u209c to four decimal places\n    return [round(x, 4) for x in gamma_t.tolist()]\n\n# Example usage:\nhmm = {\n    'pi': np.array([0.6, 0.4]),\n    'A': np.array([[0.7, 0.3], [0.4, 0.6]]),\n    'B': np.array([[0.1, 0.4, 0.5], [0.6, 0.3, 0.1]])\n}\nobservations = [0, 1, 2]\nt = 1\n\nprint(gamma_probabilities(hmm, observations, t))\n```\n\nThis script defines the function `gamma_probabilities` that computes the posterior state distribution (\u03b3) for a given Hidden Markov Model (HMM) and a time step t, according to the forward-backward algorithm. The example usage at the end demonstrates how to call this function with a sample HMM and observation sequence."}
{"task_id": 555, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import deque\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples  # Initialize all labels as noise (-1)\n    cluster_id = 0\n\n    # Compute pairwise distances and build neighborhood lists\n    distances = np.linalg.norm(data[:, np.newaxis] - data, axis=2)\n    neighborhoods = [np.where(distances[i] <= eps)[0] for i in range(n_samples)]\n\n    # Identify core points\n    core_points = [i for i, neighbors in enumerate(neighborhoods) if len(neighbors) >= min_samples]\n\n    # Process each core point to form clusters\n    for point in core_points:\n        if labels[point] == -1:  # Only process unlabeled core points\n            cluster_id += 1\n            labels[point] = cluster_id\n            queue = deque([point])\n\n            while queue:\n                current_point = queue.popleft()\n                for neighbor in neighborhoods[current_point]:\n                    if labels[neighbor] == -1:\n                        labels[neighbor] = cluster_id\n                        if neighbor in core_points:\n                            queue.append(neighbor)\n\n    return labels\n\n# Example usage:\ndata = np.random.rand(100, 2)  # Generate random 2D data points\neps = 0.2\nmin_samples = 5\nlabels = dbscan(data, eps, min_samples)\nprint(labels)\n```\n\nThis Python script implements the DBSCAN clustering algorithm from scratch, as per the instructions provided. It includes the computation of pairwise Euclidean distances, the identification of core points, and the use of a breadth-first search to expand clusters. The output is a list of integer labels indicating the cluster id of each sample, with noise points labeled as -1."}
{"task_id": 561, "completion_id": 0, "completion": "Below is a Python script that implements the Gaussian Mixture Model via the Expectation\u2013Maximization algorithm. The code includes a function `gmm_em` that takes a 2-D NumPy array of data, the number of Gaussian components, and optional parameters for the maximum number of iterations and tolerance for convergence.\n\n```python\nimport numpy as np\nfrom scipy.stats import multivariate_normal\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"\n    Apply the Expectation-Maximization algorithm to fit a Gaussian Mixture Model (GMM) to a dataset.\n\n    Parameters:\n    data (np.ndarray): A 2-D array of data points with shape (N, D), where N is the number of samples and D is the number of features.\n    k (int): The number of Gaussian components in the GMM.\n    max_iter (int): The maximum number of iterations for the EM algorithm.\n    epsilon (float): The tolerance level for the change in mixture weights to declare convergence.\n\n    Returns:\n    list[int]: A list of length N containing the final cluster label for each sample.\n    \"\"\"\n    N, D = data.shape\n\n    # Randomly initialize the parameters\n    np.random.seed(0)  # for deterministic results\n    mixture_weights = np.random.dirichlet(np.ones(k), size=1)[0]\n    means = np.random.randn(k, D)\n    covariances = [np.eye(D) for _ in range(k)]\n\n    for _ in range(max_iter):\n        old_mixture_weights = mixture_weights.copy()\n\n        # E-step: Compute responsibilities\n        responsibilities = np.zeros((N, k))\n        for i in range(k):\n            responsibilities[:, i] = mixture_weights[i] * multivariate_normal.pdf(data, mean=means[i], cov=covariances[i])\n        responsibilities /= responsibilities.sum(axis=1)[:, np.newaxis]\n\n        # M-step: Update parameters\n        for i in range(k):\n            resp_sum = responsibilities[:, i].sum()\n            mixture_weights[i] = resp_sum / N\n            means[i] = np.dot(responsibilities[:, i], data) / resp_sum\n            covariances[i] = np.dot(responsibilities[:, i] * (data - means[i]).T, (data - means[i])) / resp_sum\n\n        # Check for convergence\n        if np.linalg.norm(old_mixture_weights - mixture_weights) < epsilon:\n            break\n\n    # Assign points to the Gaussian component with the largest responsibility\n    labels = np.argmax(responsibilities, axis=1)\n\n    # Sort components by the first coordinate of their mean\n    sorted_indices = np.argsort(means[:, 0])\n    sorted_labels = np.zeros_like(labels)\n    for old_label, new_label in enumerate(sorted_indices):\n        sorted_labels[labels == old_label] = new_label\n\n    return sorted_labels.tolist()\n\n# Example usage\ndata = np.random.randn(100, 2)  # 100 samples, 2 features\nk = 3  # 3 Gaussian components\nlabels = gmm_em(data, k)\nprint(labels)\n```\n\nThis script defines the `gmm_em` function which implements the EM algorithm for a GMM. The function initializes the Gaussian components' parameters randomly, then iterates between the E-step and M-step until convergence or until the maximum number of iterations is reached. After convergence, it assigns each sample to the Gaussian component with the largest responsibility and sorts the components by the first coordinate of their mean to ensure deterministic output."}
{"task_id": 562, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    N = data.shape[0]\n\n    if n_cluster == 1:\n        return [0] * N\n\n    # Step 1: Build the similarity graph using the Gaussian kernel\n    pairwise_distances = np.sum(data ** 2, axis=1, keepdims=True) + np.sum(data ** 2, axis=1) - 2 * np.dot(data, data.T)\n    W = np.exp(-gamma * pairwise_distances)\n\n    # Step 2: Construct the Laplacian\n    D = np.diag(np.sum(W, axis=1))\n    if method == 'unnormalized':\n        L = D - W\n    else:  # method == 'normalized'\n        D_inv_sqrt = np.diag(1.0 / np.sqrt(np.sum(W, axis=1)))\n        L = np.identity(N) - np.dot(np.dot(D_inv_sqrt, W), D_inv_sqrt)\n\n    # Step 3: Compute the eigenvectors corresponding to the smallest eigenvalues\n    eigvals, eigvecs = np.linalg.eigh(L)\n    eigvecs = eigvecs[:, :n_cluster]\n\n    if method == 'normalized':\n        eigvecs = eigvecs / np.linalg.norm(eigvecs, axis=0)\n\n    # Step 4: Run k-means in the eigenvector space\n    centroids = eigvecs[:n_cluster]\n    labels = np.argmin(np.linalg.norm(eigvecs[:, np.newaxis] - centroids, axis=2), axis=1)\n\n    # Relabel clusters\n    sorted_labels = np.argsort(np.unique(labels))\n    label_map = {sorted_labels[i]: i for i in range(n_cluster)}\n    final_labels = [label_map[label] for label in labels]\n\n    return final_labels\n\n# Example usage:\n# data = np.random.rand(100, 2)\n# labels = spectral_clustering(data, 3, gamma=1.0, method='normalized')\n# print(labels)\n```"}
{"task_id": 563, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N, d = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    \n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    \n    w = np.round(np.sum(alpha[:, np.newaxis] * y_data[:, np.newaxis] * X_data, axis=0), 4).tolist()\n    b = round(b, 4)\n    return (w, b)\n\n# Example usage\nif __name__ == \"__main__\":\n    X_data = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n    y_data = np.array([1, 1, -1, -1])\n    w, b = perceptron_dual_train(X_data, y_data)\n    print(\"Weight vector w:\", w)\n    print(\"Bias b:\", b)\n```\nThis script implements the dual-form perceptron learning algorithm as described in the task. It takes a dataset `X_data`, labels `y_data`, a learning rate `eta`, and a maximum number of iterations `max_iter`. The function returns the weight vector `w` and bias `b` after training, both rounded to 4 decimal places."}
{"task_id": 564, "completion_id": 0, "completion": "```python\nclass Node:\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label\n        self.x = x\n        self.s = s\n        self.y = y\n        self.child = child if child is not None else []\n\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    \n    if task_type == 'classification':\n        feature_value = features[root.label]\n        for child in root.child:\n            if child.x == feature_value:\n                return predict_sample(child, features, task_type)\n        # Default to the second child if no match is found\n        return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        feature_value = features[root.label]\n        if feature_value <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)\n\n# Example usage:\n# Constructing a simple decision tree for demonstration\n# A classification tree with 2 nodes\nnode2 = Node(y=1)\nnode1 = Node(label=0, x=1, child=[node2])\n\n# A regression tree with 2 nodes\nnode4 = Node(y=10.5)\nnode3 = Node(label=0, s=5.0, child=[node4])\n\n# Predictions\nprint(predict_sample(node1, [1, 2], 'classification'))  # Output: 1 (leaf node)\nprint(predict_sample(node3, [6], 'regression'))         # Output: 10.5 (leaf node)\n```"}
{"task_id": 565, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef entropy(labels):\n    \"\"\"Calculate the entropy of a given set of labels.\"\"\"\n    value, counts = np.unique(labels, return_counts=True)\n    probabilities = counts / counts.sum()\n    return -np.sum(probabilities * np.log2(probabilities))\n\ndef conditional_entropy(X, y):\n    \"\"\"Calculate the conditional entropy of y given X.\"\"\"\n    total_entropy = entropy(y)\n    unique_values = np.unique(X)\n    conditional_entropies = []\n    \n    for value in unique_values:\n        subset_y = y[X == value]\n        conditional_entropy = entropy(subset_y)\n        conditional_entropies.append((subset_y.size / y.size) * conditional_entropy)\n    \n    return total_entropy - np.sum(conditional_entropies)\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    best_feature_index = 0\n    max_information_gain = 0.0\n\n    for i in range(X.shape[1]):\n        information_gain = conditional_entropy(X[:, i], y)\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = i\n\n    return (best_feature_index, round(max_information_gain, 6))\n\n# Example usage\nX = np.array([\n    [0, 1, 0],\n    [1, 1, 1],\n    [0, 0, 1],\n    [1, 0, 0],\n    [0, 1, 1],\n    [1, 1, 0]\n])\ny = np.array([0, 0, 1, 1, 0, 1])\nprint(choose_best_feature(X, y))\n```\n\nThis script defines the `choose_best_feature` function, which selects the feature that maximizes information gain for a given dataset `X` and labels `y`. The `entropy` and `conditional_entropy` helper functions are also defined to calculate the necessary entropies for the information gain calculation. The function returns the index of the best feature and the maximum information gain, rounded to 6 decimal places."}
{"task_id": 566, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\nnp.random.seed(42)\n\ndef build_tree(data, current_depth, height_limit):\n    n = len(data)\n    if n <= 1 or current_depth >= height_limit:\n        return {'leaf': True, 'count': n}\n    \n    feature = np.random.randint(data.shape[1])\n    min_val, max_val = np.min(data[:, feature]), np.max(data[:, feature])\n    if min_val == max_val:\n        return {'leaf': True, 'count': n}\n    \n    threshold = np.random.uniform(min_val, max_val)\n    left_indices = data[:, feature] <= threshold\n    right_indices = data[:, feature] > threshold\n    \n    left_data = data[left_indices]\n    right_data = data[right_indices]\n    \n    return {\n        'leaf': False,\n        'feature': feature,\n        'threshold': threshold,\n        'left': build_tree(left_data, current_depth + 1, height_limit),\n        'right': build_tree(right_data, current_depth + 1, height_limit)\n    }\n\ndef path_length(tree, x, current_depth=0):\n    if tree['leaf']:\n        n = tree['count']\n        return current_depth + c(n)\n    \n    feature = tree['feature']\n    threshold = tree['threshold']\n    if x[feature] <= threshold:\n        return path_length(tree['left'], x, current_depth + 1)\n    else:\n        return path_length(tree['right'], x, current_depth + 1)\n\ndef c(n):\n    if n == 1:\n        return 0\n    else:\n        return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n\ndef average_path_length(data, tree):\n    return np.array([path_length(tree, x) for x in data])\n\ndef anomaly_score(path_length, n_samples):\n    phi = 2 * math.log(n_samples - 1) - 2 * (n_samples - 1) / n_samples\n    return 2 ** (-path_length / phi)\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    n_samples, n_features = data.shape\n    height_limit = math.ceil(math.log2(sample_size))\n    trees = []\n    \n    for _ in range(n_trees):\n        if sample_size >= n_samples:\n            sample = data\n        else:\n            sample_indices = np.random.choice(n_samples, sample_size, replace=False)\n            sample = data[sample_indices]\n        tree = build_tree(sample, 0, height_limit)\n        trees.append(tree)\n    \n    avg_path_lengths = np.zeros(n_samples)\n    for tree in trees:\n        avg_path_lengths += average_path_length(data, tree)\n    avg_path_lengths /= n_trees\n    \n    scores = anomaly_score(avg_path_lengths, n_samples)\n    threshold = np.percentile(scores, 100 * (1 - epsilon))\n    outliers = np.where(scores > threshold)[0].tolist()\n    \n    return sorted(outliers)\n\n# Example usage:\n# data = np.random.rand(100, 5)\n# outliers = detect_outliers(data, n_trees=100, sample_size=256, epsilon=0.01)\n# print(outliers)\n```\n\nThis Python script defines the `detect_outliers` function that builds a small-scale version of the Isolation Forest algorithm, following the instructions provided. The function constructs random isolation trees, calculates the average path lengths, and then computes the anomaly scores to detect outliers. The `np.random.seed(42)` ensures the reproducibility of the results."}
{"task_id": 568, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    # Building the feature map\n    feature_map = defaultdict(lambda: len(feature_map))\n    labels = np.unique(y_train)\n    \n    for i in range(X_train.shape[1]):\n        for value in np.unique(X_train[:, i]):\n            for label in labels:\n                feature_map[(i, value, label)] = len(feature_map)\n    \n    num_features = len(feature_map)\n    weights = np.zeros(num_features)\n    \n    # Calculate empirical feature expectations\n    empirical_expectations = np.zeros(num_features)\n    for x, y in zip(X_train, y_train):\n        for i, value in enumerate(x):\n            empirical_expectations[feature_map[(i, value, y)]] += 1\n    empirical_expectations /= len(X_train)\n    \n    # Generalized Iterative Scaling (GIS)\n    for _ in range(n_iter):\n        model_expectations = np.zeros(num_features)\n        for x, y in zip(X_train, y_train):\n            scores = np.zeros(len(labels))\n            for i, value in enumerate(x):\n                for j, label in enumerate(labels):\n                    scores[j] += weights[feature_map[(i, value, label)]]\n            prob = np.exp(scores - logsumexp(scores))\n            for i, value in enumerate(x):\n                model_expectations[feature_map[(i, value, y)]] += prob[y]\n        model_expectations /= len(X_train)\n        \n        delta = empirical_expectations - model_expectations\n        max_update = np.max(np.abs(delta))\n        if max_update < epsilon:\n            break\n        \n        for i in range(num_features):\n            if model_expectations[i] > 0:\n                weights[i] += math.log((empirical_expectations[i] + 1e-10) / (model_expectations[i] + 1e-10))\n    \n    # Prediction\n    predictions = []\n    for x in X_test:\n        scores = np.zeros(len(labels))\n        for i, value in enumerate(x):\n            for j, label in enumerate(labels):\n                scores[j] += weights[feature_map[(i, value, label)]]\n        predictions.append(labels[np.argmax(scores)])\n    \n    return predictions\n\ndef logsumexp(scores):\n    max_score = np.max(scores)\n    if max_score == -np.inf:\n        return -np.inf\n    return max_score + np.log(np.sum(np.exp(scores - max_score)))\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 2], [3, 1]])\n# y_train = np.array([0, 1, 1])\n# X_test = np.array([[1, 1], [2, 2]])\n# predictions = maxent_predict(X_train, y_train, X_test)\n# print(predictions)\n```\n\nThis code implements a Maximum Entropy classifier using the Generalized Iterative Scaling (GIS) algorithm. The `maxent_predict` function takes training and test data, and returns predictions for the test data. The GIS algorithm is used to update the weights of the features iteratively until convergence or reaching the maximum number of iterations. The `logsumexp` function is a helper function to compute the log-sum-exp in a numerically stable way."}
{"task_id": 569, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    word_appearance_counter = Counter()\n    total_documents = len(data)\n\n    # Count how many documents each word appears in\n    for _, words in data:\n        unique_words = set(words)  # Ensure each word is counted only once per document\n        for word in unique_words:\n            word_appearance_counter[word] += 1\n\n    # Calculate the document-frequency ratio and round to 4 decimal places\n    word_ratios = [(word, round(count / total_documents, 4)) for word, count in word_appearance_counter.items()]\n\n    # Sort the list by ratio (descending) and then by word (ascending) for consistency\n    word_ratios.sort(key=lambda x: (-x[1], x[0]))\n\n    # Determine the set of most frequent words\n    if cut_off is not None and cut_off > 0:\n        most_common_words = {word for word, _ in word_ratios[:cut_off]}\n    else:\n        most_common_words = set(word for word, _ in word_ratios)\n\n    return word_ratios, most_common_words\n\n\n# Example usage:\ndocuments = [\n    (1, [\"apple\", \"banana\", \"cherry\"]),\n    (2, [\"banana\", \"cherry\", \"date\"]),\n    (3, [\"apple\", \"banana\", \"date\"]),\n    (4, [\"apple\", \"cherry\", \"date\"])\n]\n\nratios, top_words = statistic_key_word(documents, cut_off=2)\nprint(ratios)\nprint(top_words)\n```\n\nThis script defines the `statistic_key_word` function as required, which takes a list of documents and a cut-off value to return the document-frequency ratios of each word and a set of the most frequent words. The example usage at the bottom demonstrates how to call the function and print the results."}
{"task_id": 571, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Calculate the weight vector\n    w = np.dot(X.T, alpha * y)\n    \n    # Calculate the bias term\n    b = np.mean(y - np.dot(X, w))\n    \n    # Round the values to 4 decimal places\n    w_rounded = np.round(w, 4).tolist()\n    b_rounded = np.round(b, 4)\n    \n    return w_rounded, b_rounded\n\n# Example usage\nX = np.array([[1, 2], [2, 3], [3, 4]])\ny = np.array([1, -1, 1])\nalpha = np.array([0.1, 0.2, 0.3])\n\nw_list, b = compute_svm_parameters(X, y, alpha)\nprint(\"Weight vector w:\", w_list)\nprint(\"Bias term b:\", b)\n```\n\nThis script defines the function `compute_svm_parameters` which computes the weight vector and the bias term for a linear SVM given the training data matrix `X`, the label vector `y`, and the Lagrange multipliers `alpha`. The results are rounded to four decimal places as per the task requirement."}
{"task_id": 572, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef euclidean_distance(point1, point2):\n    \"\"\"Compute the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((point1 - point2) ** 2))\n\ndef pairwise_distance_matrix(data):\n    \"\"\"Compute the full pair-wise Euclidean distance matrix.\"\"\"\n    n_samples = len(data)\n    distance_matrix = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i, n_samples):\n            distance = euclidean_distance(data[i], data[j])\n            distance_matrix[i, j] = distance\n            distance_matrix[j, i] = distance\n    return distance_matrix\n\ndef k_distance(distance_matrix, k):\n    \"\"\"Get the k-distance for each sample and the index list of its k nearest neighbors.\"\"\"\n    n_samples = len(distance_matrix)\n    k_distances = np.zeros(n_samples)\n    k_nearest_neighbors = [None] * n_samples\n    for i in range(n_samples):\n        sorted_indices = np.argsort(distance_matrix[i])\n        k_distances[i] = distance_matrix[i, sorted_indices[k]]\n        k_nearest_neighbors[i] = sorted_indices[1:k+1]  # Exclude the point itself\n    return k_distances, k_nearest_neighbors\n\ndef reachability_distance(distance_matrix, k_distances, point_index, neighbor_index):\n    \"\"\"Compute the reachability distance between two points.\"\"\"\n    return max(k_distances[neighbor_index], distance_matrix[point_index, neighbor_index])\n\ndef local_reachability_density(distance_matrix, k_distances, k_nearest_neighbors, point_index):\n    \"\"\"Compute the Local Reachability Density (LRD) for a point.\"\"\"\n    reachability_distances_sum = 0\n    for neighbor_index in k_nearest_neighbors[point_index]:\n        reachability_distances_sum += reachability_distance(distance_matrix, k_distances, point_index, neighbor_index)\n    return len(k_nearest_neighbors[point_index]) / reachability_distances_sum\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Compute the Local Outlier Factor (LOF) for each sample and return the scores and outlier indices.\"\"\"\n    distance_matrix = pairwise_distance_matrix(data)\n    k_distances, k_nearest_neighbors = k_distance(distance_matrix, k)\n    lof_scores = []\n    outlier_indices = []\n    \n    for i in range(len(data)):\n        lrd_i = local_reachability_density(distance_matrix, k_distances, k_nearest_neighbors, i)\n        lrd_sum = sum(local_reachability_density(distance_matrix, k_distances, k_nearest_neighbors, q) for q in k_nearest_neighbors[i])\n        lof_score = (lrd_sum / k) / lrd_i\n        lof_scores.append(round(lof_score, 4))\n        if lof_score > epsilon:\n            outlier_indices.append(i)\n    \n    return lof_scores, sorted(outlier_indices)\n```\n\nThis Python script provides a self-contained implementation of the Local Outlier Factor (LOF) algorithm from scratch, adhering to the constraints and instructions provided."}
{"task_id": 574, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    \n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n    \n    for c in range(m):\n        base = 10 * (c // 2)\n        # Generate training points\n        x_train = np.random.uniform(base + 1, base + 9, n_train)\n        y_train_ = np.random.uniform(base + 1, base + 9, n_train)\n        X_train.extend(list(zip(x_train, y_train_)))\n        y_train.extend([c] * n_train)\n        \n        # Generate validation points\n        x_val = np.random.uniform(base + 1, base + 9, n_val)\n        y_val_ = np.random.uniform(base + 1, base + 9, n_val)\n        X_val.extend(list(zip(x_val, y_val_)))\n        y_val.extend([c] * n_val)\n    \n    # Convert to numpy arrays and round to 4 decimal places\n    X_train = np.round(np.array(X_train), 4)\n    X_val = np.round(np.array(X_val), 4)\n    y_train = np.array(y_train)\n    y_val = np.array(y_val)\n    \n    return X_train, X_val, y_train, y_val\n\n# Example usage:\n# m = 3  # Number of classes\n# n_train = 50  # Training points per class\n# n_val = 20  # Validation points per class\n# seed = 42  # Seed for reproducibility\n# X_train, X_val, y_train, y_val = generate_data(m, n_train, n_val, seed)\n# print(X_train, y_train, X_val, y_val)\n```"}
{"task_id": 579, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    # Initialize the centres as the first k points\n    centres = X[:k].copy()\n    m, d = X.shape\n    labels = np.full(m, -1)\n\n    for _ in range(max_iters):\n        # Assignment step: Assign each point to the closest centre\n        new_labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - centres, axis=2), axis=1)\n\n        # Check if the assignments have stopped changing\n        if np.array_equal(labels, new_labels):\n            break\n\n        labels = new_labels\n\n        # Update step: Update the centres to be the mean of the points assigned to them\n        for i in range(k):\n            assigned_points = X[labels == i]\n            if len(assigned_points) > 0:\n                centres[i] = np.mean(assigned_points, axis=0)\n\n    # Round the centres to 4 decimal places\n    rounded_centres = np.round(centres, 4).tolist()\n    return labels.tolist(), rounded_centres\n\n# Example usage\nif __name__ == \"__main__\":\n    np.random.seed(42)  # For reproducible results\n    X = np.random.rand(100, 2)  # 100 points in 2D\n    k = 5\n    labels, centres = kmeans(X, k)\n    print(\"Labels:\", labels)\n    print(\"Centres:\", centres)\n```\n\nThis script implements the K-Means clustering algorithm from scratch, as per the requirements. It initializes the centres with the first `k` points, performs the assignment and update steps in a loop, and stops when the assignments no longer change or the maximum number of iterations is reached. The final cluster centres are rounded to 4 decimal places for easy comparison."}
{"task_id": 581, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    m, n = X.shape\n    w = np.zeros(n)\n    b = 0.0\n\n    if learning_rate == 0 or iterations == 0:\n        return [round(float(i), 4) for i in w], round(float(b), 4)\n\n    for _ in range(iterations):\n        y_pred = X.dot(w) + b\n        residuals = y - y_pred\n\n        # Compute gradients\n        dw = -2 * X.T.dot(residuals) / m\n        db = -2 * np.sum(residuals) / m\n\n        # Add regularization terms to gradients\n        dw += (l1_penalty * np.sign(w) + 2 * l2_penalty * w) / m\n        db += (l1_penalty * -1) / m  # For bias, we only add L1, no L2\n\n        # Update weights and bias\n        w -= learning_rate * dw\n        b -= learning_rate * db\n\n    return [round(float(i), 4) for i in w], round(float(b), 4)\n\n# Example usage:\nX = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\ny = np.array([1, 2, 3, 4])\nlearning_rate = 0.01\niterations = 1000\nl1_penalty = 0.1\nl2_penalty = 0.1\n\nweights, bias = elastic_net_regression(X, y, learning_rate, iterations, l1_penalty, l2_penalty)\nprint(\"Weights:\", weights)\nprint(\"Bias:\", bias)\n```\n\nThis script defines the `elastic_net_regression` function that performs Elastic-Net regularised linear regression using batch gradient descent. The function takes the input features `X`, target values `y`, learning rate, number of iterations, and the L1 and L2 penalties as arguments. It returns the learned weights and bias, both rounded to four decimal places. The script also includes an example usage of the function."}
{"task_id": 591, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    def relu(z):\n        return max(0, z)\n    \n    # Convert the input vector to a numpy array for easier manipulation\n    x = np.array(x)\n    \n    for layer_idx, layer_weights in enumerate(weights):\n        # Add the bias term to the input vector\n        x = np.insert(x, 0, 1)\n        \n        # Compute the dot product of the input vector with the weight matrix\n        z = np.dot(layer_weights, x)\n        \n        # Apply the activation function (ReLU for all but the last layer)\n        if layer_idx < len(weights) - 1:\n            x = np.array([relu(neuron_output) for neuron_output in z])\n        else:\n            x = z  # Last layer is linear, so no activation function\n    \n    # Round the output to 4 decimal places\n    if len(x) == 1:\n        return round(x[0], 4)\n    else:\n        return [round(output, 4) for output in x]\n\n# Example usage:\nweights = [\n    [[-0.5, 0.3, 0.2], [0.1, -0.4, 0.5]],  # Layer 0\n    [[0.2, -0.1], [0.3, 0.2], [0.1, -0.3]],  # Layer 1\n    [[0.4, -0.3, 0.2, 0.1]]  # Layer 2 (output layer)\n]\n\nx = [1.0, 2.0]\nprint(neural_net_predict(weights, x))  # Should print the network's prediction\n```"}
{"task_id": 595, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"\n    Implement the K-Means clustering algorithm to compute the centroids only.\n    The initial centroids are the first k samples in X.\n    The function returns the sorted and rounded centroids.\n    \"\"\"\n    # Initialize centroids with the first k samples\n    centroids = X[:k].copy()\n    \n    for _ in range(max_iters):\n        # Initialize an empty list to store the new centroids\n        new_centroids = []\n        # Initialize a list to store the samples assigned to each centroid\n        clusters = [[] for _ in range(k)]\n        \n        # Assign each sample to the nearest centroid\n        for sample in X:\n            distances = np.sum((centroids - sample) ** 2, axis=1)\n            closest_centroid_idx = np.argmin(distances)\n            clusters[closest_centroid_idx].append(sample)\n        \n        # Update each centroid to the mean of its assigned samples\n        for i, cluster in enumerate(clusters):\n            if cluster:  # Only update if the cluster is not empty\n                new_centroids.append(np.mean(cluster, axis=0))\n            else:\n                new_centroids.append(centroids[i])\n        \n        # Convert list of np.ndarrays to np.ndarray for easier comparison\n        new_centroids = np.array(new_centroids)\n        \n        # Check for convergence\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 1e-4):\n            break\n        \n        # Update centroids for the next iteration\n        centroids = new_centroids\n    \n    # Sort centroids lexicographically and round to 4 decimal places\n    sorted_centroids = sorted(np.round(centroids, decimals=4))\n    \n    # Convert to list of lists before returning\n    return [list(centroid) for centroid in sorted_centroids]\n\n# Example usage:\n# X = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# k = 2\n# print(kmeans_centroids(X, k))\n```\n\nThis script defines the `kmeans_centroids` function which implements the K-Means clustering algorithm to compute and return the centroids only, as per the given requirements. The centroids are initialized with the first *k* samples of the dataset `X`. The function iterates up to `max_iters` times, assigning each sample to the nearest centroid and updating the centroids to the mean of their assigned samples. The iterations stop early if the centroids' movement is less than `1e-4`. After convergence, the centroids are sorted lexicographically and rounded to 4 decimal places before being returned as a list of lists."}
