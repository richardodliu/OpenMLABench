{"task_id": 0, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Compute the ridge regression coefficients using the closed-form solution.\n    \n    :param data: Input data as a numpy array, with the last column as the target variable.\n    :param alpha: Regularization strength. Default is 0.0.\n    :return: A list of coefficients (including the intercept) rounded to 4 decimal places.\n             Returns -1 if the matrix is not invertible.\n    \"\"\"\n    # Split the data into features (X) and target (y)\n    X, y = data[:, :-1], data[:, -1]\n    \n    # Add a bias term to the features\n    X = np.column_stack((np.ones(X.shape[0]), X))\n    \n    # Compute the matrix to be inverted\n    XTX = np.dot(X.T, X) + alpha * np.eye(X.shape[1])\n    \n    # Check if the matrix is invertible\n    if np.linalg.cond(XTX) < 1 / np.finfo(XTX.dtype).eps:\n        # Compute the weights\n        weights = np.dot(np.linalg.inv(XTX), np.dot(X.T, y))\n        # Round the weights to 4 decimal places and convert to a list\n        return [round(weight, 4) for weight in weights]\n    else:\n        # If the matrix is not invertible, return -1\n        return -1\n\n# Example usage:\ndata = np.array([[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]])\nalpha = 0.5\nweights = ridge_regression(data, alpha)\nprint(weights)\n```\n\nThis Python script implements ridge regression with the closed-form solution as described. It includes a check for matrix invertibility based on the condition number. If the matrix is not invertible, it returns -1 as specified in the task."}
{"task_id": 1, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    update_count = 0\n\n    # Compute the Gram matrix\n    K = np.dot(X_train, X_train.T)\n\n    while update_count < n_iter:\n        updated = False\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * K[:, i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n        if not updated:\n            break\n        update_count += 1\n\n    # Compute the primal weight vector w\n    w = np.dot(alpha * y_train, X_train)\n    w_rounded = [round(wi, 4) for wi in w]\n    b_rounded = round(b, 4)\n    return w_rounded, b_rounded\n\n# Example usage\nif __name__ == \"__main__\":\n    X_train = np.array([[3, 3], [4, 3], [1, 1]])\n    y_train = np.array([1, 1, -1])\n    w, b = perceptron_dual(X_train, y_train)\n    print(\"Weight vector w:\", w)\n    print(\"Bias b:\", b)\n```\n\nThis Python script implements the dual-form perceptron learning algorithm as described. It takes a set of training samples and their corresponding binary labels as input, and outputs the weight vector and bias of the learned classifier. The algorithm is designed to stop either after a fixed number of iterations or when no further updates are made to the model parameters, ensuring convergence in finite time for linearly separable data."}
{"task_id": 2, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1 / (1 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return mu * (1 - mu)\n\n    return {\n        \"identity\": {\n            \"link\": identity_link,\n            \"inv_link\": identity_inv_link,\n            \"derivative\": identity_derivative\n        },\n        \"log\": {\n            \"link\": log_link,\n            \"inv_link\": log_inv_link,\n            \"derivative\": log_derivative\n        },\n        \"logit\": {\n            \"link\": logit_link,\n            \"inv_link\": logit_inv_link,\n            \"derivative\": logit_derivative\n        }\n    }\n\n# Example usage:\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links[\"logit\"][\"link\"](mu)\nmu2 = links[\"logit\"][\"inv_link\"](eta)\nprint(np.round(eta, 4))  # \u2192 [-1.3863, 1.3863]\nprint(np.round(mu2, 4))  # \u2192 [0.2, 0.8]\n```"}
{"task_id": 3, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    np.random.seed(0)\n    \n    def build_tree(indices, depth=0):\n        if len(indices) < 3:\n            return (indices, depth)\n        \n        feature = np.random.randint(data.shape[1])\n        down = np.min(data[indices, feature])\n        up = np.max(data[indices, feature])\n        split_val = np.random.uniform(down, up)\n        \n        left_indices = [i for i in indices if data[i, feature] <= split_val]\n        right_indices = [i for i in indices if data[i, feature] > split_val]\n        \n        left_tree = build_tree(left_indices, depth + 1)\n        right_tree = build_tree(right_indices, depth + 1)\n        \n        return (left_tree, right_tree)\n    \n    def traverse_tree(tree, sample_idx, depth=0):\n        if isinstance(tree, tuple) and len(tree) == 2:\n            leaf_indices, leaf_depth = tree\n            if sample_idx in leaf_indices:\n                return leaf_depth\n        else:\n            left_tree, right_tree = tree\n            feature = np.random.randint(data.shape[1])\n            split_val = np.random.uniform(np.min(data[:, feature]), np.max(data[:, feature]))\n            if data[sample_idx, feature] <= split_val:\n                return traverse_tree(left_tree, sample_idx, depth + 1)\n            else:\n                return traverse_tree(right_tree, sample_idx, depth + 1)\n    \n    root = build_tree(np.arange(data.shape[0]))\n    depths = [traverse_tree(root, i) for i in range(data.shape[0])]\n    \n    return depths\n```\n```"}
{"task_id": 7, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                      itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    if not transactions or minsup <= 0 or minsup > 1:\n        return {}\n\n    N = len(transactions)\n    min_support = math.ceil(minsup * N)\n    itemsets = set()\n\n    # Flatten the list of transactions and count item occurrences\n    all_items = [item for transaction in transactions for item in set(transaction)]\n    item_counts = Counter(all_items)\n\n    # Filter items based on minimum support\n    frequent_items = {item for item, count in item_counts.items() if count >= min_support}\n    itemsets.update((item,) for item in frequent_items)\n\n    # Generate candidate itemsets and check their support\n    k = 2\n    while True:\n        candidates = set(combinations(frequent_items, k))\n        if not candidates:\n            break\n        candidate_counts = Counter()\n        for transaction in transactions:\n            transaction_set = set(transaction)\n            for candidate in candidates:\n                if set(candidate).issubset(transaction_set):\n                    candidate_counts[candidate] += 1\n        frequent_candidates = {candidate for candidate, count in candidate_counts.items() if count >= min_support}\n        if not frequent_candidates:\n            break\n        itemsets.update(frequent_candidates)\n        frequent_items = set().union(*frequent_candidates)\n        k += 1\n\n    # Return the itemsets as a dictionary with support counts\n    return {itemset: sum(1 for transaction in transactions if set(itemset).issubset(set(transaction))) for itemset in itemsets}\n\n# Example usage\ntransactions = [\n    ['bread', 'milk'],\n    ['bread', 'diaper', 'beer', 'egg'],\n    ['milk', 'diaper', 'beer', 'coke'],\n    ['bread', 'milk', 'diaper', 'beer'],\n    ['bread', 'milk', 'diaper', 'coke']\n]\nminsup = 0.6\nprint(find_frequent_itemsets(transactions, minsup))\n```\n\nThis solution first checks for valid input and then proceeds to find frequent itemsets using a brute-force approach to generate candidate itemsets of increasing size and checking their support against the transactions. The process stops when no more frequent itemsets can be found. The results are returned in the required format."}
{"task_id": 11, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    n_samples, n_features = data.shape\n    centres = np.array(data[:k].copy(), dtype=float)\n    labels = np.zeros(n_samples, dtype=int)\n    \n    for iteration in range(max_iter):\n        # Step 2: Assign each sample to the nearest centre\n        for i, sample in enumerate(data):\n            distances = np.sum((sample - centres) ** 2, axis=1)\n            labels[i] = np.argmin(distances)\n        \n        # Step 3: Recompute each centre as the mean of its assigned samples\n        new_centres = np.zeros((k, n_features))\n        counts = np.zeros(k)\n        for label, sample in zip(labels, data):\n            new_centres[label] += sample\n            counts[label] += 1\n        for i in range(k):\n            if counts[i] > 0:\n                new_centres[i] /= counts[i]\n            else:\n                # If the cluster is empty, reinitialize it with a random sample\n                new_centres[i] = data[np.random.randint(n_samples)]\n        \n        # Check for convergence\n        if np.all(np.abs(new_centres - centres) < epsilon):\n            break\n        \n        centres = new_centres\n    \n    # Round the centres to 4 decimal places\n    rounded_centres = [list(np.round(centre, 4)) for centre in centres]\n    return rounded_centres, labels.tolist()\n\n# Example usage:\n# data = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# k = 2\n# print(kmeans(data, k))\n```\n\nThis code implements the K-Means clustering algorithm as per the requirements provided, including handling empty clusters by reinitializing them with a random sample and ensuring convergence criteria are met. The centres are rounded to 4 decimal places as required."}
{"task_id": 13, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n    \n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n    \n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n    \n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_users, n_items = data.shape\n    similarity_matrix = np.zeros((n_items, n_items))\n    \n    # Step 1: Build an item-item similarity matrix\n    for i in range(n_items):\n        for j in range(i, n_items):\n            common_users = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(common_users) == 0:\n                similarity_matrix[i, j] = 0\n                similarity_matrix[j, i] = 0\n            else:\n                v1 = data[common_users, i]\n                v2 = data[common_users, j]\n                if criterion == 'cosine':\n                    if np.std(v1) > 1e-3:\n                        v1 = v1 - np.mean(v1)\n                    if np.std(v2) > 1e-3:\n                        v2 = v2 - np.mean(v2)\n                    similarity_matrix[i, j] = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n                    similarity_matrix[j, i] = similarity_matrix[i, j]\n                elif criterion == 'pearson':\n                    similarity_matrix[i, j] = np.corrcoef(v1, v2)[0, 1]\n                    similarity_matrix[j, i] = similarity_matrix[i, j]\n    \n    # Step 2: Collect rated items and ratings for the active user\n    rated_items = np.where(data[user_ind] > 0)[0]\n    ratings = data[user_ind, rated_items]\n    \n    # Step 3: Compute the predicted attractiveness for unrated items\n    predicted_scores = defaultdict(float)\n    for t in range(n_items):\n        if t not in rated_items:\n            numerator = 0\n            denominator = 0\n            for i, r in zip(rated_items, ratings):\n                numerator += r * similarity_matrix[t, i]\n                denominator += abs(similarity_matrix[t, i])\n            if denominator > 0:\n                predicted_scores[t] = numerator / denominator\n    \n    # Step 4: Return a list with the indices of the k most promising items\n    sorted_items = sorted(predicted_scores.items(), key=lambda x: (-x[1], x[0]))\n    return [item[0] for item in sorted_items[:k]]\n\n# Example usage\ndata = np.array([\n    [5, 3, 0, 1],\n    [4, 0, 0, 1],\n    [1, 1, 0, 5],\n    [1, 0, 0, 4],\n    [0, 1, 5, 4]\n])\nuser_ind = 0\nk = 2\nprint(knn_recommend(data, user_ind, k))  # Output: [2]\n```\n\nThis script defines the function `knn_recommend` that implements the described collaborative filtering algorithm and returns the most promising items for a given active user based on the specified criteria."}
{"task_id": 19, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    \n    n_samples, n_features = X.shape\n    best_gain = -np.inf\n    best_split = None\n    \n    for feature in range(n_features):\n        unique_values = np.unique(X[:, feature])\n        for threshold in unique_values:\n            left_indices = X[:, feature] < threshold\n            right_indices = X[:, feature] >= threshold\n            \n            if np.sum(left_indices) < 2 or np.sum(right_indices) < 2:\n                continue\n            \n            gain = compute_gain(g, h, left_indices, right_indices, gamma, lam)\n            if gain > best_gain:\n                best_gain = gain\n                best_split = (feature, threshold)\n    \n    if best_gain <= 0:\n        return None\n    else:\n        return best_split\n\ndef compute_gain(g, h, left_indices, right_indices, gamma, lam):\n    total_gain = compute_loss(g, h, left_indices, right_indices, gamma, lam)\n    left_loss = compute_loss(g[left_indices], h[left_indices], np.ones_like(g[left_indices]), np.zeros_like(g[left_indices]), gamma, lam)\n    right_loss = compute_loss(g[right_indices], h[right_indices], np.zeros_like(g[right_indices]), np.ones_like(g[right_indices]), gamma, lam)\n    return total_gain - left_loss - right_loss\n\ndef compute_loss(g, h, left_mask, right_mask, gamma, lam):\n    total_g = np.sum(g)\n    total_h = np.sum(h)\n    numerator = total_g ** 2\n    denominator = total_h + lam\n    return -0.5 * numerator / denominator + gamma\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# g = np.array([1, 2, 3, 4])\n# h = np.array([0.1, 0.2, 0.3, 0.4])\n# gamma = 0.1\n# lam = 1\n# print(best_split(X, g, h, gamma, lam))\n```\n\nThis script defines a function `best_split` that takes in the feature matrix `X`, first-order gradients `g`, second-order gradients `h`, and the regularisation constants `gamma` and `lam`, and returns the best feature and threshold for a split. The `compute_gain` and `compute_loss` helper functions are used to calculate the gain and loss according to the formulas provided. The example usage at the end shows how to call the function with a hypothetical dataset."}
{"task_id": 20, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Ensure x is a numpy array for operations\n    x_array = np.array(x) if not isinstance(x, np.ndarray) else x\n    # Calculate sigmoid\n    sigmoid_x = 1 / (1 + np.exp(-x_array))\n    # Calculate gradient of sigmoid\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    # Round the results to 4 decimal places\n    sigmoid_x_rounded = np.round(sigmoid_x, 4)\n    gradient_x_rounded = np.round(gradient_x, 4)\n    \n    # Convert back to the original input type\n    if isinstance(x, (int, float)):\n        return float(sigmoid_x_rounded), float(gradient_x_rounded)\n    else:\n        # Convert numpy arrays to lists for the output\n        return sigmoid_x_rounded.tolist(), gradient_x_rounded.tolist()\n\n# Example usage\nprint(sigmoid_activation(0))  # Scalar input\nprint(sigmoid_activation([0, 1, -1]))  # List input\nprint(sigmoid_activation(np.array([[0, 1], [-1, -2]])))  # 2-D array input\n```\n\nThis script defines the function `sigmoid_activation` which calculates both the sigmoid and its gradient for the given input, adhering to the specified behavior requirements and output constraints."}
{"task_id": 21, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error. Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n_samples = len(x_train)\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n\n    # Sort the training data\n    sorted_indices = np.argsort(x_train)\n    x_train_sorted = np.array(x_train)[sorted_indices]\n    y_train_sorted = np.array(y_train)[sorted_indices]\n\n    # Training loop\n    while True:\n        min_error = float('inf')\n        best_stump = None\n        best_alpha = None\n\n        # Generate stumps\n        for i in range(n_samples - 1):\n            midpoint = (x_train_sorted[i] + x_train_sorted[i + 1]) / 2\n            for d in [0, 1]:\n                stump = (d, midpoint)\n                predictions = [1 if (d == 0 and x <= midpoint) or (d == 1 and x > midpoint) else -1 for x in x_train_sorted]\n                error = sum(w for x, y, w, p in zip(x_train_sorted, y_train_sorted, weights, predictions) if y != p)\n                if error < min_error:\n                    min_error = error\n                    best_stump = stump\n                    best_alpha = 0.5 * math.log((1 - error) / error)\n\n        # Update weights\n        stumps.append(best_stump)\n        alphas.append(best_alpha)\n        predictions = [1 if (best_stump[0] == 0 and x <= best_stump[1]) or (best_stump[0] == 1 and x > best_stump[1]) else -1 for x in x_train_sorted]\n        weights *= np.exp(-best_alpha * y_train_sorted * predictions)\n        weights /= np.sum(weights)\n\n        # Check training error\n        ensemble_predictions = np.sign(sum(alpha * (1 if (stump[0] == 0 and x <= stump[1]) or (stump[0] == 1 and x > stump[1]) else -1 for stump, alpha in zip(stumps, alphas)) for x in x_train))\n        training_error = np.mean(ensemble_predictions != y_train)\n        if training_error <= epsilon:\n            break\n\n    # Predictions for test data\n    test_predictions = np.sign(sum(alpha * (1 if (stump[0] == 0 and x <= stump[1]) or (stump[0] == 1 and x > stump[1]) else -1 for stump, alpha in zip(stumps, alphas)) for x in x_test))\n    return test_predictions.astype(int).tolist()\n\n# Example usage:\nx_train = [1, 2, 3, 4, 5]\ny_train = [1, -1, 1, -1, 1]\nx_test = [2.5, 3.5]\nepsilon = 0.2\npredictions = adaboost_1d_predict(x_train, y_train, x_test, epsilon)\nprint(predictions)\n```\n\nThis code defines the `adaboost_1d_predict` function, which implements the AdaBoost algorithm using one-dimensional decision stumps. It trains the ensemble based on the provided training data, and returns the predictions for the test data. The training process continues until the training error is less than or equal to the specified `epsilon`."}
{"task_id": 25, "completion_id": 0, "completion": "Here is the self-contained Python script to solve the Gaussian Kernel SVM Prediction task as requested:\n\n```python\nimport numpy as np\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    n, d = X_train.shape\n    m = X_test.shape[0]\n    y_train = y_train.reshape(n, 1)\n    alpha = alpha.reshape(n, 1)\n\n    # Compute the Euclidean distance between each test sample and every training sample\n    dists = np.sum(X_test**2, axis=1).reshape(-1, 1) + np.sum(X_train**2, axis=1) - 2 * np.dot(X_test, X_train.T)\n    \n    # Compute the Gaussian kernel matrix\n    K = np.exp(-gamma * dists)\n    \n    # Compute the decision function for each test sample\n    g = np.sum(alpha * y_train * K.T, axis=1) + b\n    \n    # Predict the labels based on the sign of the decision function\n    predictions = np.sign(g).astype(int)\n    \n    return predictions.tolist()\n\n# Example usage:\n# X_train, y_train, alpha, b, gamma, X_test should be defined before calling the function.\n# predictions = gaussian_svm_predict(X_train, y_train, alpha, b, gamma, X_test)\n# print(predictions)\n```\n\nThis function fully vectorizes the computation of the Gaussian kernel and the decision function for each test sample, making it efficient and suitable for large datasets. The function returns a list of predicted labels for the test samples, ensuring each element is either 1 or -1."}
{"task_id": 28, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X_np = np.array(X)\n    m, n = X_np.shape\n    if k < 1 or k > min(m, n):\n        return -1\n    \n    U, S, VT = np.linalg.svd(X_np, full_matrices=False)\n    S[k:] = 0\n    X_hat_np = np.dot(U, np.dot(np.diag(S), VT))\n    \n    mse = np.mean((X_np - X_hat_np) ** 2)\n    \n    X_hat = X_hat_np.round(4).tolist()\n    mse = round(mse, 4)\n    \n    return (X_hat, mse)\n\n# Example usage:\nX = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nk = 2\nprint(linear_autoencoder(X, k))\n```\n\nThis script defines the `linear_autoencoder` function as requested, which computes the rank-\\(k\\) approximation of a given matrix using truncated SVD and calculates the mean squared error of the approximation. The output is rounded to the nearest 4th decimal."}
{"task_id": 29, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                           y_train: list[float] | np.ndarray,\n                           x_query: float,\n                           epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n\n    # Sort the training data by feature values\n    sorted_indices = np.argsort(x_train)\n    x_train = x_train[sorted_indices]\n    y_train = y_train[sorted_indices]\n\n    # Initialize residuals and the prediction for the query point\n    residuals = y_train\n    prediction = 0.0\n\n    # Generate all candidate split points\n    split_points = (x_train[:-1] + x_train[1:]) / 2\n\n    # Train the boosting model\n    while True:\n        best_rss = np.inf\n        best_stump = None\n\n        # Evaluate each candidate split point\n        for s in split_points:\n            mask_left = x_train <= s\n            mask_right = x_train > s\n\n            c1 = residuals[mask_left].mean() if mask_left.any() else 0\n            c2 = residuals[mask_right].mean() if mask_right.any() else 0\n\n            # Compute the RSS for the current split\n            rss = np.sum((residuals - (c1 * mask_left + c2 * mask_right)) ** 2)\n\n            # Check if this split is the best so far\n            if rss < best_rss:\n                best_rss = rss\n                best_stump = (s, c1, c2)\n\n        # Update the residuals and the prediction for the query point\n        s, c1, c2 = best_stump\n        mask_left = x_train <= s\n        mask_right = x_train > s\n        residuals -= (c1 * mask_left + c2 * mask_right)\n        prediction += c1 if x_query <= s else c2\n\n        # Check the stopping condition\n        if best_rss < epsilon:\n            break\n\n    return round(prediction, 4)\n\n# Example data points to test the function\nx_train = [1.0, 2.0, 3.0, 4.0, 5.0]\ny_train = [1.1, 2.1, 2.9, 4.1, 5.0]\nx_query = 3.5\nprint(predict_boosting_tree(x_train, y_train, x_query))\n```\n\nThis Python script implements the small-scale gradient boosting regressor with decision stumps as described. It handles one-dimensional data and applies the algorithm to iteratively improve the model until the residual sum of squares is below a specified tolerance. The prediction for a query point is returned rounded to four decimal places."}
{"task_id": 34, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None) -> np.ndarray:\n    \"\"\"\n    Generate a NumPy tensor filled with 0.0s and 1.0s according to the specified shape and sparsity.\n    \n    Parameters:\n    - shape: A tuple of integers representing the desired shape of the output tensor.\n    - sparsity: A float in the range [0, 1] representing the probability of generating a 1.0.\n    - seed: An optional integer seed for reproducibility of the random generation.\n    \n    Returns:\n    - A numpy.ndarray of the specified shape and sparsity, containing only 0.0 and 1.0.\n      If sparsity is not in [0, 1], the function returns -1.\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    \n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Generate a random array and apply the sparsity threshold to get 0.0s and 1.0s\n    random_array = np.random.rand(*shape)\n    binary_tensor = (random_array >= (1 - sparsity)).astype(float)\n    \n    return binary_tensor\n\n# Example usage and verification\nif __name__ == \"__main__\":\n    shape = (2, 3)\n    sparsity = 0.3\n    seed = 42\n    result = random_binary_tensor(shape, sparsity, seed)\n    print(result)\n    # Expected output (with seed 42 for reproducibility):\n    # [[0. 1. 1.]\n    #  [0. 0. 0.]]\n```\n\nThis script defines a function `random_binary_tensor` that generates a tensor of the specified shape and sparsity, and optionally uses a seed for reproducibility. It checks whether the sparsity is within the valid range and returns -1 if not. The function outputs a NumPy array containing only 0.0 and 1.0, as required."}
{"task_id": 39, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples, _ = data.shape\n    # Use np.argpartition to find the median index\n    median_index = np.argpartition(data[:, d], n_samples // 2)[n_samples // 2]\n    pivot = median_index\n\n    # Get the median value\n    median_value = data[median_index, d]\n\n    # Create masks for left and right partitions\n    left_mask = data[:, d] < median_value\n    right_mask = data[:, d] > median_value\n\n    # Get the indices for left and right partitions\n    left_indices = np.where(left_mask)[0].tolist()\n    right_indices = np.where(right_mask)[0].tolist()\n\n    # Sort the indices\n    left_indices.sort()\n    right_indices.sort()\n\n    return pivot, left_indices, right_indices\n\n# Example usage:\n# data = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])\n# d = 0\n# print(get_split(data, d))\n```\n\nThis script defines the function `get_split` which takes a 2D NumPy array and an index `d` to perform a median split on the data. The function uses `np.argpartition` to efficiently find the median value's index, and then it creates masks to partition the data into left and right subsets based on this median value. The row indices for these subsets are sorted and returned along with the pivot index."}
{"task_id": 40, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, \"Input signal must be one-dimensional.\"\n    assert stride >= 1, \"Stride must be a positive integer.\"\n    assert len(x) >= frame_width, \"Input signal must be longer than frame width.\"\n\n    n_samples = len(x)\n    n_frames = (n_samples - frame_width) // stride + 1\n\n    # Calculate the strides for the new view\n    original_dtype = x.dtype\n    original_itemsize = original_dtype.itemsize\n    new_strides = (stride * original_itemsize, original_itemsize)\n\n    # Create the new view using as_strided\n    framed_signal = as_strided(x, shape=(n_frames, frame_width), strides=new_strrides)\n\n    # Set the writability of the returned array\n    framed_signal.flags.writeable = writeable\n\n    return framed_signal\n\n# Example usage:\nx = np.arange(1, 16)\nframe_width = 4\nstride = 2\nwriteable = True\nframes = to_frames(x, frame_width, stride, writeable)\nprint(frames)\n```\n\nIn the example usage, the function `to_frames` is called with a 1D array `x`, a frame width of 4, a stride of 2, and `writeable` set to `True`. The output will be a view of the array `x` with overlapping frames, each of width 4, and each frame starting 2 samples after the start of the previous one."}
{"task_id": 48, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Convert to numpy array if it's not already one\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    \n    # Check if the matrix is two-dimensional\n    if X.ndim != 2:\n        return False\n    \n    # Check if every element is between 0 and 1 inclusive\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    \n    # Check if each row sums to 1 within a tolerance of 1e-8\n    row_sums = X.sum(axis=1)\n    if not np.allclose(row_sums, 1, atol=1e-8):\n        return False\n    \n    return True\n\n# Test cases to verify the correctness\nif __name__ == \"__main__\":\n    print(is_stochastic([[1, 0], [0.5, 0.5]]))  # True\n    print(is_stochastic([[1, 0, 0], [0, 1, 0], [0, 0, 1]]))  # True\n    print(is_stochastic([[1, 0.1], [0.5, 0.5]]))  # False, because row sums are not exactly 1\n    print(is_stochastic([[1, 0], [0, 0]]))  # False, because row sums are not exactly 1\n    print(is_stochastic([[0, 1], [1, 0], [2, -1]]))  # False, because elements are not in [0, 1]\n    print(is_stochastic([[0, 1], [1]]))  # False, because the matrix is not 2D\n```"}
{"task_id": 55, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n, d = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    \n    for _ in range(max_iter):\n        # Calculate the gradient using mini-batches\n        for start in range(0, n, batch_size):\n            end = min(start + batch_size, n)\n            X_batch = X[start:end]\n            y_batch = y[start:end]\n            y_pred = X_batch @ w\n            gradient = (1 / len(X_batch)) * X_batch.T @ (y_pred - y_batch)\n            \n            # Update running average of squared gradient\n            s = rho * s + (1 - rho) * gradient ** 2\n            \n            # Update weight vector\n            w -= eta * gradient / (np.sqrt(s) + eps_station)\n        \n        # Early stopping condition\n        if np.linalg.norm(gradient) < epsilon:\n            break\n    \n    return [round(x, 4) for x in w.tolist()]\n\n# Example usage:\n# X = np.random.rand(100, 5)\n# y = np.random.rand(100)\n# weights = rms_prop(X, y)\n# print(weights)\n```"}
{"task_id": 56, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(x, deriv=False):\n    \"\"\"\n    Compute the SoftPlus activation function or its derivative (sigmoid) on the input.\n    \n    Parameters:\n    - x: A scalar, Python list, or NumPy array of real values.\n    - deriv: A Boolean flag indicating whether to compute the SoftPlus function (False)\n             or its derivative (True).\n             \n    Returns:\n    - A Python list of the computed values rounded to the 4th decimal place, or a single\n      float if the input is a scalar.\n    \"\"\"\n    # Ensure x is a NumPy array for element-wise operations\n    x = np.array(x)\n    \n    if deriv:\n        # Compute the derivative, which is the sigmoid function\n        result = 1 / (1 + np.exp(-x))\n    else:\n        # Compute the SoftPlus function, using a numerically stable approach\n        result = np.log1p(np.exp(-np.abs(x))) + np.maximum(x, 0)\n    \n    # Round the result to the 4th decimal place\n    result_rounded = np.round(result, 4)\n    \n    # Convert the result back to a list if the input was a list or array, else return a scalar\n    if isinstance(x, (list, np.ndarray)):\n        return result_rounded.tolist()\n    else:\n        return float(result_rounded)\n\n# Example usage\nprint(softplus(0))  # Scalar input, SoftPlus\nprint(softplus([0, 1, -1], True))  # List input, derivative\n```"}
{"task_id": 58, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef ngrams(tokens, n):\n    \"\"\"Generate n-grams from a list of tokens.\"\"\"\n    return [' '.join(tokens[i:i+n]) for i in range(len(tokens) - n + 1)]\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    # Build the ngram counts from the corpus\n    corpus_ngrams = ngrams(corpus, N)\n    corpus_ngram_counts = Counter(corpus_ngrams)\n    \n    if N > 1:\n        prefix_ngrams = ngrams(corpus, N-1)\n        prefix_ngram_counts = Counter(prefix_ngrams)\n    else:\n        prefix_ngram_counts = Counter([None] * len(corpus))  # for unigrams, prefix count is always the total corpus count\n    \n    # Compute the log probability of the sequence\n    log_prob = 0.0\n    sequence_ngrams = ngrams(sequence, N)\n    for ngram in sequence_ngrams:\n        prefix = ' '.join(ngram.split()[:-1]) if N > 1 else None\n        ngram_count = corpus_ngram_counts[ngram]\n        prefix_count = prefix_ngram_counts[prefix]\n        if ngram_count == 0 or prefix_count == 0:\n            return float('-inf')\n        log_prob += np.log(ngram_count / prefix_count)\n    \n    return round(log_prob, 4)\n\n# Example usage:\ncorpus = [\"i\", \"love\", \"playing\", \"football\", \"i\", \"love\", \"watching\", \"football\"]\nsequence = [\"i\", \"love\", \"playing\", \"football\"]\nN = 2\nprint(unsmoothed_ngram_log_prob(corpus, sequence, N))\n```\n\nThis solution defines a helper function `ngrams` to generate n-grams from a list of tokens, and utilizes `Counter` from the `collections` module to count the occurrences of n-grams and their prefixes in the corpus. It then computes the log-probability of the sequence based on these counts, returning `-inf` if any required count is zero, as specified."}
{"task_id": 62, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef lasso_regression(X: list[float] | np.ndarray, y: list[float] | np.ndarray, degree: int, reg_factor: float, n_iterations: int = 1000, tol: float = 1e-6) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X).reshape(-1, 1)\n    y = np.array(y).reshape(-1, 1)\n    m = X.shape[0]\n\n    # Polynomial feature expansion\n    X_poly = np.hstack([np.ones((m, 1)), *[X ** (i + 1) for i in range(degree)]])\n\n    # Initialize weights\n    w = np.zeros((degree + 1, 1))\n\n    for iteration in range(n_iterations):\n        w_prev = w.copy()\n        \n        # Update bias w\u2080\n        w[0] = np.mean(y - X_poly[:, 1:] @ w[1:])\n        \n        # Update other weights\n        for j in range(1, degree + 1):\n            X_col = X_poly[:, j].reshape(-1, 1)\n            rho = X_col.T @ (y - X_poly @ w + w[j] * X_col)\n            w[j] = soft_threshold(rho, reg_factor) / (X_col.T @ X_col)\n\n        # Early stopping\n        if np.max(np.abs(w - w_prev)) < tol:\n            break\n\n    return [round(float(wi), 4) for wi in w.flatten()]\n\ndef soft_threshold(rho, lambda_):\n    return np.sign(rho) * np.max([np.abs(rho) - lambda_, 0])\n\n# Example usage:\nX = [1, 2, 3, 4, 5]\ny = [1, 4, 9, 16, 25]\ndegree = 2\nreg_factor = 0.1\n\nweights = lasso_regression(X, y, degree, reg_factor)\nprint(weights)\n```\n\nThis script defines the `lasso_regression` function that implements the univariate Lasso regression with polynomial features using coordinate descent. The function accepts the specified parameters, performs the necessary calculations as per the provided description, and returns the coefficients rounded to four decimal places. The example usage demonstrates how to call the function with a simple dataset."}
{"task_id": 63, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector beta for a given time index t in a Hidden Markov Model.\n    \n    Parameters:\n    A (list[list[float]]): The transition probability matrix of shape (N, N).\n    B (list[list[float]]): The emission probability matrix of shape (N, M).\n    obs (list[int]): The list of observation indices (length T).\n    t (int): The integer time index (0 \u2264 t < T).\n    \n    Returns:\n    list[float]: A Python list of N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    obs = np.array(obs)\n    T = len(obs)\n    N = A.shape[0]\n\n    # Initialize the beta matrix\n    beta = np.zeros((T, N))\n    beta[T-1, :] = 1  # Initialize the last row to 1 as per the definition\n\n    # Compute beta values from T-2 to t\n    for i in range(T-2, t-1, -1):\n        for j in range(N):\n            beta[i, j] = np.sum(A[j, :] * B[:, obs[i+1]] * beta[i+1, :])\n\n    # Return the beta values at time t, rounded to 4 decimal places\n    return [round(b, 4) for b in beta[t, :].tolist()]\n\n# Example usage:\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.5, 0.5], [0.6, 0.4]]\nobs = [0, 1, 0]\nt = 1\nprint(backward_beta(A, B, obs, t))\n```\n\nThis function implements the backward algorithm for a Hidden Markov Model as defined in the problem statement. It uses NumPy for efficient matrix operations. The backward probabilities are computed recursively from the last observation to the specified time index `t`, and the result is rounded to four decimal places as required."}
{"task_id": 65, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or not pi or not obs:\n        return 0.0\n\n    N = len(A)  # number of states\n    T = len(obs)  # length of observation sequence\n    beta = np.zeros((T, N))  # backward variables\n\n    # Initialize beta for time t = T-1 (last observation)\n    beta[T-1] = 1\n\n    # Compute backward variables for each time step\n    for t in range(T-2, -1, -1):\n        for i in range(N):\n            beta[t][i] = sum(A[i][j] * B[j][obs[t+1]] * beta[t+1][j] for j in range(N))\n\n    # Compute final probability\n    prob = round(sum(pi[i] * B[i][obs[0]] * beta[0][i] for i in range(N)), 6)\n    return prob\n\n# Example usage\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.4, 0.5], [0.7, 0.2, 0.1]]\npi = [0.6, 0.4]\nobs = [0, 2, 1]\nprint(backward_prob(A, B, pi, obs))  # Output example, the exact value will depend on the input\n```"}
{"task_id": 69, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    observations = np.array(observations)\n\n    # Validate the input dimensions\n    n = len(S)  # number of states\n    if A.shape != (n, n) or B.shape[0] != n:\n        return -1\n    m = B.shape[1]  # number of possible observations\n\n    # Check that every observation index is in the valid range\n    if not np.all((observations >= 0) & (observations < m)):\n        return -1\n\n    # Check for empty sequence\n    if len(observations) == 0:\n        return -1\n\n    # Initialize the forward variable\n    T = len(observations)\n    alpha = np.zeros((n, T))\n\n    # Initialize base case (t=0)\n    alpha[:, 0] = S * B[:, observations[0]]\n\n    # Recursion\n    for t in range(1, T):\n        for i in range(n):\n            alpha[i, t] = B[i, observations[t]] * np.dot(alpha[:, t-1], A[:, i])\n\n    # Termination (sum across all states at time T)\n    prob = np.sum(alpha[:, T-1])\n\n    return round(prob, 4)\n\n# Example usage:\nS = [0.6, 0.4]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.5, 0.5], [0.2, 0.8]]\nobservations = [0, 1]\n\nprint(forward_algorithm(S, A, B, observations))  # Output: 0.3480\n```\nThis solution follows the task requirements and implements the forward algorithm for Hidden Markov Models as specified. The input validation checks ensure the dimensions are correct, observations are within range, and the sequence is not empty. The algorithm itself is implemented with numpy for efficient computation, and the final probability is rounded to 4 decimal places as required."}
{"task_id": 70, "completion_id": 0, "completion": "```python\nfrom collections import Counter, defaultdict\nfrom typing import List\n\ndef fp_growth(transactions: List[List[str]], min_support: int) -> List[List[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    if not transactions:\n        return []\n\n    def create_tree(transactions, min_support):\n        # First pass: count item frequencies\n        item_counts = Counter(item for transaction in transactions for item in transaction)\n\n        # Filter items based on min_support\n        frequent_items = {item: count for item, count in item_counts.items() if count >= min_support}\n\n        # Sort items by frequency (descending) and then lexicographically\n        sorted_items = sorted(frequent_items.items(), key=lambda x: (-x[1], x[0]))\n        sorted_items = [item for item, count in sorted_items]\n\n        # Initialize the tree and header table\n        fp_tree = FPNode(None)\n        header_table = defaultdict(list)\n\n        # Second pass: build the FP-tree\n        for transaction in transactions:\n            trans = [item for item in transaction if item in frequent_items]\n            trans.sort(key=lambda x: sorted_items.index(x))\n            if trans:\n                insert_tree(fp_tree, header_table, trans)\n\n        return fp_tree, header_table, sorted_items\n\n    def insert_tree(tree, header_table, trans):\n        if not trans:\n            return\n        item = trans[0]\n        if item not in tree.children:\n            tree.children[item] = FPNode(item)\n            header_table[item].append(tree.children[item])\n        tree.children[item].inc()\n        if len(trans) > 1:\n            insert_tree(tree.children[item], header_table, trans[1:])\n\n    def mine_tree(header_table, prefix, frequent_itemsets):\n        if not header_table:\n            return\n\n        for base_pattern in header_table.keys():\n            new_prefix = prefix.copy()\n            new_prefix.append(base_pattern)\n            frequent_itemsets.append(new_prefix)\n\n            # Construct conditional pattern base\n            conditional_patterns = []\n            for node in header_table[base_pattern]:\n                pattern = []\n                while node.parent.item is not None:\n                    node = node.parent\n                    pattern.append(node.item)\n                if pattern:\n                    pattern.reverse()\n                    conditional_patterns.append((pattern, node.count))\n\n            # Construct conditional FP-tree\n            conditional_tree, conditional_header = create_conditional_tree(conditional_patterns, min_support)\n            if conditional_header is not None:\n                mine_tree(conditional_header, new_prefix, frequent_itemsets)\n\n    def create_conditional_tree(patterns, min_support):\n        if not patterns:\n            return None, None\n        # Count items in conditional patterns\n        item_counts = Counter(item for pattern, count in patterns for item in pattern for _ in range(count))\n        # Filter items based on min_support\n        frequent_items = {item: count for item, count in item_counts.items() if count >= min_support}\n        if not frequent_items:\n            return None, None\n\n        # Sort items by frequency and then lexicographically\n        sorted_items = sorted(frequent_items.items(), key=lambda x: (-x[1], x[0]))\n        sorted_items = [item for item, count in sorted_items]\n\n        # Initialize the tree and header table\n        conditional_tree = FPNode(None)\n        conditional_header = defaultdict(list)\n\n        for pattern, count in patterns:\n            if pattern:\n                insert_tree(conditional_tree, conditional_header, pattern)\n\n        return conditional_tree, conditional_header\n\n    class FPNode:\n        def __init__(self, item):\n            self.item = item\n            self.count = 0\n            self.children = {}\n\n        def inc(self):\n            self.count += 1\n\n    fp_tree, header_table, _ = create_tree(transactions, min_support)\n    frequent_itemsets = []\n    mine_tree(header_table, [], frequent_itemsets)\n\n    # Sort the frequent itemsets\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\n\n# Example usage:\ntransactions = [\n    [\"a\", \"b\", \"c\", \"d\"],\n    [\"a\", \"b\", \"d\"],\n    [\"a\", \"b\", \"c\", \"d\"],\n    [\"a\", \"b\", \"d\"],\n    [\"a\", \"b\", \"c\"],\n    [\"a\", \"b\", \"c\", \"d\"],\n    [\"a\", \"b\", \"d\"],\n    [\"a\", \"b\", \"c\", \"d\"],\n    [\"a\", \"b\", \"d\"],\n    [\"a\", \"b\", \"c\", \"d\"]\n]\nmin_support = 3\nprint(fp_growth(transactions, min_support))\n```\n\nThis Python script implements the FP-Growth algorithm as described in the task. It first builds an FP-tree from the transactions and then recursively mines the conditional FP-trees to discover all frequent item-sets. The output is sorted and deterministic as required."}
{"task_id": 75, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if not (1 <= k <= len(X_train)):\n        return -1\n\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    predictions = []\n    for test_sample in X_test:\n        # Compute squared Euclidean distances\n        distances = np.sum((X_train - test_sample) ** 2, axis=1)\n        \n        # Find the indices of the k nearest neighbours\n        k_nearest_indices = np.argsort(distances)[:k]\n        \n        # Extract the labels of the k nearest neighbours\n        k_nearest_labels = y_train[k_nearest_indices]\n        \n        # Find the most common label among the k nearest neighbours\n        # If there is a tie, np.unique returns labels in sorted order so the first one is the smallest\n        values, counts = np.unique(k_nearest_labels, return_counts=True)\n        prediction = values[np.argmax(counts)]\n        predictions.append(prediction)\n    \n    return predictions\n\n# Example usage:\nX_train = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\ny_train = [0, 0, 1, 1, 1]\nX_test = [[2.5, 3.5], [4.5, 5.5]]\nk = 3\n\nresult = knn_predict(X_train, y_train, X_test, k)\nprint(result)  # Expected output: [0, 1]\n```"}
{"task_id": 76, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Convert input to NumPy arrays if necessary\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    \n    # Get the number of samples and classes\n    n_samples, n_classes = y.shape\n    \n    # Ensure y_pred is within valid range\n    assert np.all(y_pred >= 0) and np.all(y_pred <= 1), \"Predicted probabilities must be in the range [0, 1]\"\n    \n    # Calculate epsilon for numerical stability\n    epsilon = np.finfo(float).eps\n    \n    # Compute the categorical cross-entropy loss\n    loss = -np.sum(y * np.log(y_pred + epsilon))\n    \n    # Return the loss rounded to 4 decimal places\n    return round(loss, 4)\n\n# Example usage\ny_true = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\ny_pred = np.array([[0.8, 0.1, 0.1], [0.1, 0.8, 0.1], [0.1, 0.1, 0.8]])\nprint(cross_entropy_loss(y_true, y_pred))\n```\nThis script defines the function `cross_entropy_loss` which calculates the categorical cross-entropy loss for a batch of predictions. It uses NumPy for efficient numerical operations and ensures numerical stability by adding machine epsilon to the predicted probabilities before taking the logarithm."}
{"task_id": 77, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> tuple[list[float], list]:\n    \"\"\"\n    Implements forward propagation for an L-layer neural network.\n\n    Parameters:\n    X (np.ndarray): Input matrix of shape (n_x, m).\n    parameters (dict[str, np.ndarray]): Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns:\n    tuple[list[float], list]: The final activation AL rounded to 4 decimals and converted to a plain Python list, and a list of caches for each layer.\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2  # number of layers in the neural network\n    \n    for l in range(1, L):\n        A_prev = A\n        W = parameters['W' + str(l)]\n        b = parameters['b' + str(l)]\n        Z = np.dot(W, A_prev) + b\n        A = relu(Z)\n        cache = (A_prev, W, b, Z)\n        caches.append(cache)\n    \n    # Output layer\n    W_L = parameters['W' + str(L)]\n    b_L = parameters['b' + str(L)]\n    Z_L = np.dot(W_L, A) + b_L\n    AL = sigmoid(Z_L)\n    cache_L = (A, W_L, b_L, Z_L)\n    caches.append(cache_L)\n    \n    # Convert AL to a Python list and round to 4 decimals\n    AL_list = [round(x, 4) for x in AL.tolist()[0]]\n    \n    return AL_list, caches\n\ndef relu(Z):\n    \"\"\"\n    Implements the ReLU activation function.\n    \"\"\"\n    return np.maximum(0, Z)\n\ndef sigmoid(Z):\n    \"\"\"\n    Implements the sigmoid activation function.\n    \"\"\"\n    return 1 / (1 + np.exp(-Z))\n\n# Example usage:\n# X = np.random.randn(5, 2)\n# parameters = {\n#     'W1': np.random.randn(4, 5),\n#     'b1': np.random.randn(4, 1),\n#     'W2': np.random.randn(1, 4),\n#     'b2': np.random.randn(1, 1)\n# }\n# AL, caches = L_model_forward(X, parameters)\n# print(AL)\n# print(caches)\n```\n\nThis script defines the `L_model_forward` function as described in the task. It also includes two helper functions `relu` and `sigmoid` for the activation functions. The example usage at the bottom shows how to pass the input matrix `X` and the network parameters to the `L_model_forward` function and how to retrieve the final activation and caches. Note that the example parameters and input matrix are randomly generated and should be replaced with actual values for a specific use case."}
{"task_id": 81, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n    \n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n    \n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    # Ensure that A2 is clipped to avoid log(0) and log(1) undefined conditions\n    epsilon = 1e-15\n    A2 = np.clip(A2, epsilon, 1 - epsilon)\n    \n    # Number of samples\n    m = Y.shape[1] if len(Y.shape) == 2 else Y.size\n    \n    # Compute the cost\n    cost = -(1/m) * np.sum(Y * np.log(A2) + (1 - Y) * np.log(1 - A2))\n    \n    return round(cost, 6)\n\n# Example usage:\n# A2 = np.array([[0.2, 0.6, 0.9, 0.4]])\n# Y = np.array([[0, 1, 1, 0]])\n# print(compute_cost(A2, Y))  # Expected output: a float number\n```"}
{"task_id": 82, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | np.ndarray, epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    n = len(Q)\n    greedy_index = np.argmax(Q)\n    base = epsilon / n\n    probabilities = [round(base, 4)] * n\n    probabilities[greedy_index] = round(1 - epsilon + base, 4)\n    return probabilities\n\n# Example usage\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1\noutput = epsilon_soft(Q, epsilon)\nprint(output)\n```\nThis code snippet defines the `epsilon_soft` function, which computes the \u03b5-soft probabilities for a set of Q-values `Q` and an exploration parameter `epsilon`. The function ensures that the probabilities are rounded to four decimal places and that their sum equals 1 within the specified tolerance."}
{"task_id": 86, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    # Transpose the list of predictions so that each inner list represents the votes for a single sample\n    transposed_predictions = list(zip(*predictions))\n    # Aggregate predictions using majority vote\n    final_predictions = []\n    for sample_votes in transposed_predictions:\n        # Count the votes for each class\n        vote_counts = Counter(sample_votes)\n        # Find the class with the highest vote count, breaking ties by selecting the smallest class\n        final_prediction = min(vote_counts, key=lambda x: (-vote_counts[x], x))\n        final_predictions.append(final_prediction)\n    return final_predictions\n\n# Example usage:\npredictions = [\n    [1, 2, 2, 2, 3],\n    [2, 2, 3, 3, 1],\n    [2, 1, 3, 2, 3],\n]\n\nprint(aggregate_random_forest_votes(predictions))\n# Expected output: [2, 2, 3, 2, 3]\n```"}
{"task_id": 88, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    # Ensure input is a NumPy array for element-wise operations\n    z = np.array(z)\n    \n    # Compute the softplus function using logaddexp to avoid overflow\n    result = np.logaddexp(0.0, z)\n    \n    # Round the result to 4 decimal places\n    result_rounded = np.round(result, 4)\n    \n    # Check if the original input was a scalar\n    if z.size == 1:\n        # Return a single float if input was a scalar\n        return float(result_rounded)\n    else:\n        # Convert to a pure Python list for array inputs\n        return result_rounded.tolist()\n\n# Test the function\nz = np.array([-1000, 0, 3])\nprint(softplus(z))  # Output: [0.0, 0.6931, 3.0486]\n```"}
{"task_id": 90, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    try:\n        # Extract true expected values and policy estimates\n        true_values = bandit['arm_evs']\n        estimates = policy['ev_estimates']\n        \n        # Check if policy has any estimates\n        if not estimates:\n            return np.nan\n        \n        # Sort estimates by arm index to match true_values\n        sorted_estimates = [estimates[i] for i in sorted(estimates.keys())]\n        \n        # Compute squared errors\n        squared_errors = [(true - est) ** 2 for true, est in zip(true_values, sorted_estimates)]\n        \n        # Calculate mean squared error\n        mse_value = np.mean(squared_errors)\n        \n        # Round the result to 4 decimal places\n        return round(mse_value, 4)\n    except KeyError:\n        # Return np.nan if 'arm_evs' or 'ev_estimates' is missing\n        return np.nan\n\n# Example usage:\nbandit = {\"arm_evs\": [0.5, 0.2, 0.9]}\npolicy = {\"ev_estimates\": {0: 0.4, 1: 0.25, 2: 0.8}}\nprint(mse(bandit, policy))  # Output should be 0.0075\n```"}
{"task_id": 96, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # Split the corpus into words\n    words = [word for sentence in corpus for word in sentence.split()]\n    vocab = set(words) | {'<UNK>'}\n    \n    # Build n-gram frequency tables\n    ngram_counts = defaultdict(Counter)\n    for sentence in corpus:\n        tokens = ['<UNK>' if word not in vocab else word for word in sentence.split()]\n        for i in range(len(tokens) - N + 1):\n            ngram = tuple(tokens[i:i+N])\n            ngram_counts[N-1][ngram] += 1\n            for n in range(1, N):\n                ngram_counts[n-1][ngram[:n]] += 1\n    \n    # Calculate the sentence log-probability\n    log_prob = 0.0\n    sequence_tokens = ['<UNK>' if word not in vocab else word for word in sequence.split()]\n    if len(sequence_tokens) < N:\n        return 0.0\n    \n    for i in range(len(sequence_tokens) - N + 1):\n        ngram = tuple(sequence_tokens[i:i+N])\n        context = ngram[:-1]\n        count_ngram = ngram_counts[N-1][ngram]\n        count_context = ngram_counts[N-2][context] if N > 1 else len(words)\n        prob = (count_ngram + K) / (count_context + K * len(vocab))\n        log_prob += math.log(prob)\n    \n    return round(log_prob, 4)\n\n# Example usage\ncorpus = [\"I like cats\", \"Dogs are nice\", \"I have a cat\", \"Cats are cool\"]\nsequence = \"I like dogs\"\nN = 2\nK = 1.0\nprint(additive_ngram_log_prob(corpus, sequence, N, K))\n```\n\nThis script defines the function `additive_ngram_log_prob` that computes the additive-smoothed log-probability of a given sequence based on a training corpus. The function first builds n-gram frequency tables from the corpus, then calculates the probability of every n-gram in the target sequence with additive smoothing, and finally returns the natural logarithm of the sentence probability rounded to 4 decimal places."}
{"task_id": 108, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    N, M = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    \n    for _ in range(max_iter):\n        # Update W\n        for i in range(N):\n            Wi = W[i, :].reshape(-1, 1)\n            HiHiT = H @ H.T + alpha * np.eye(K)\n            W[i, :] = np.linalg.solve(HiHiT, H @ X[i, :].T).T\n        \n        # Update H\n        for j in range(M):\n            Hj = H[:, j].reshape(-1, 1)\n            WTW = W.T @ W + alpha * np.eye(K)\n            H[:, j] = np.linalg.solve(WTW, W.T @ X[:, j])\n        \n        # Compute the reconstruction loss\n        X_hat = W @ H\n        loss = np.linalg.norm(X - X_hat, 'fro')**2 + alpha * (np.linalg.norm(W, 'fro')**2 + np.linalg.norm(H, 'fro')**2)\n        if loss < tol:\n            break\n\n    return X_hat.round(4).tolist()\n\n# Example usage\nX = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nK = 2\nX_hat = als_factorization(X, K)\nprint(X_hat)\n```"}
{"task_id": 109, "completion_id": 0, "completion": "Here's a self-contained Python script implementing the K-Means clustering algorithm with K-Means++ initialization:\n\n```python\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n\n    m, n = X.shape\n\n    # Step 1: Initialize centroids using K-Means++ algorithm\n    centroids = [X[random.randint(0, m-1)]]\n    for _ in range(1, K):\n        distances = np.array([min([np.linalg.norm(x-c)**2 for c in centroids]) for x in X])\n        probs = distances / distances.sum()\n        cumulative_probs = probs.cumsum()\n        r = random.random()\n        for j, prob in enumerate(cumulative_probs):\n            if r < prob:\n                i = j\n                break\n        centroids.append(X[i])\n\n    centroids = np.array(centroids)\n\n    # Step 2: Lloyd's algorithm\n    for _ in range(max_iter):\n        # Assign each point to the nearest centroid\n        clusters = [[] for _ in range(K)]\n        for x in X:\n            distances = np.linalg.norm(x - centroids, axis=1)\n            cluster_idx = np.argmin(distances)\n            clusters[cluster_idx].append(x)\n\n        # Update centroids\n        new_centroids = []\n        for i in range(K):\n            if clusters[i]:  # if the cluster is not empty\n                new_centroids.append(np.mean(clusters[i], axis=0))\n            else:\n                new_centroids.append(centroids[i])\n        new_centroids = np.array(new_centroids)\n\n        # Check for convergence\n        if np.allclose(centroids, new_centroids, atol=1e-4):\n            break\n        centroids = new_centroids\n\n    # Round to 4 decimal places and sort by the first coordinate\n    centroids = np.round(centroids, 4)\n    centroids = sorted(centroids, key=lambda x: (x[0], tuple(x)))\n\n    return centroids.tolist()\n\n# Example usage\nif __name__ == \"__main__\":\n    # Example data\n    X = np.array([[1.0, 2.0],\n                  [1.5, 1.8],\n                  [5.0, 8.0],\n                  [8.0, 8.0],\n                  [1.0, 0.6],\n                  [9.0, 11.0],\n                  [8.0, 2.0],\n                  [10.0, 2.0],\n                  [9.0, 3.0]])\n    K = 3\n    random_state = 42\n\n    # Call the function\n    centroids = kmeans(X, K, random_state=random_state)\n    print(centroids)\n```\n\nThis script includes the implementation of the K-Means algorithm with K-Means++ initialization and the necessary constraints to ensure reproducibility and correct output formatting."}
{"task_id": 111, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes the input text to a list of integer ids according to the vocabulary.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text]\n    if len(encoded) < time_steps:\n        # Pad with zeros if the encoded list is shorter than TIME_STEPS\n        encoded += [0] * (time_steps - len(encoded))\n    else:\n        # Truncate if the encoded list is longer than TIME_STEPS\n        encoded = encoded[:time_steps]\n    return encoded\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Decodes a list of integer ids into a string, ignoring padding tokens.\"\"\"\n    return ''.join([inverse_vocab[i] for i in indices if i != 0])\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes text, gets model prediction, and decodes the result.\"\"\"\n    # Encode the input text\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    \n    # Convert to a batch of size 1 and predict\n    encoded_batch = np.array([encoded_text])\n    predictions = model.predict(encoded_batch)\n    \n    # Get the argmax for each time step to get the predicted ids\n    predicted_ids = np.argmax(predictions, axis=-1)[0]\n    \n    # Decode the predicted ids back to a string\n    decoded_string = int_to_string(predicted_ids, inv_output_vocabulary)\n    \n    return decoded_string\n```\n\nThis code provides a complete solution for converting raw text into a fixed-length sequence of token IDs, simulating a model prediction process, and then converting the predicted IDs back into a readable string, while handling padding and truncation as specified."}
{"task_id": 113, "completion_id": 0, "completion": "```python\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices. Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters. Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str], optional\n        A collection of input strings. If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES  # Assuming EXAMPLES is defined globally in the user's environment\n\n    predictions = []\n    for example in examples:\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_string = ''.join(output_chars)\n        predictions.append(predicted_string)\n        print(f\"input:  {example}\")\n        print(f\"output: {predicted_string}\")\n        \n    return predictions\n\n# Assuming the following example is defined globally as requested by the task\nEXAMPLES = [\"hello world\", \"how are you\", \"what is your name\"]\n\n# Example usage:\n# The following functions and variables are assumed to be defined elsewhere in the environment\ndef run_example(model, input_vocabulary, inv_output_vocabulary, example):\n    # This is a placeholder for the actual run_example function implementation\n    return list(model(example))\n\ndef example_model(input_string):\n    # This is a placeholder for the actual model implementation\n    return input_string.upper()\n\n# Test the function with the example model\npredictions = run_examples(example_model, {}, {}, EXAMPLES)\nprint(\"Predictions:\", predictions)\n```"}
{"task_id": 115, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    m = X.shape[0]\n    z = X.dot(w)\n    p = 1 / (1 + np.exp(-z))\n    p = np.clip(p, 1e-20, 1-1e-20)  # Avoid numerical issues\n\n    # Compute the loss\n    loss = -1/m * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    loss = round(loss, 4)\n\n    # Compute the gradient\n    gradient = 1/m * X.T.dot(p - y)\n    gradient = np.round(gradient, 4).tolist()\n\n    return loss, gradient\n\n# Example usage\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([0, 1, 1])\nw = np.array([0.1, 0.2])\nprint(logistic_loss_and_gradient(X, y, w))\n```\n\nThis solution defines the function `logistic_loss_and_gradient` that computes the binary cross-entropy loss and its gradient as described in the task. It includes the necessary clipping of predicted probabilities to avoid numerical issues when taking the logarithm, and ensures the output is formatted correctly as specified."}
{"task_id": 118, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nclass DecisionStump:\n    \"\"\"A one-level decision tree used as a weak learner in AdaBoost.\"\"\"\n    def __init__(self):\n        self.feature_idx = None\n        self.threshold = None\n        self.polarity = 1\n        self.alpha = 0\n\n    def fit(self, X, y, sample_weight):\n        \"\"\"Fit the decision stump to the data using given sample weights.\"\"\"\n        min_error = float('inf')\n        for idx in range(X.shape[1]):\n            thresholds = np.unique(X[:, idx])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    pred = np.ones_like(y)\n                    pred[X[:, idx] < threshold] = -1\n                    if polarity == -1:\n                        pred = -pred\n                    error = np.sum(sample_weight * (pred != y))\n                    if error < min_error:\n                        min_error = error\n                        self.feature_idx = idx\n                        self.threshold = threshold\n                        self.polarity = polarity\n        return min_error\n\n    def predict(self, X):\n        \"\"\"Predict using the decision stump.\"\"\"\n        pred = np.ones(X.shape[0])\n        pred[X[:, self.feature_idx] < self.threshold] = -1\n        if self.polarity == -1:\n            pred = -pred\n        return pred\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    n_clf = max(1, n_clf)\n    n_samples = X_train.shape[0]\n    sample_weight = np.full(n_samples, 1 / n_samples)\n\n    stumps = []\n    for _ in range(n_clf):\n        stump = DecisionStump()\n        weighted_error = stump.fit(X_train, y_train, sample_weight)\n        stump.alpha = 0.5 * np.log((1 - weighted_error) / weighted_error)\n        stump_predictions = stump.predict(X_train)\n        sample_weight *= np.exp(-stump.alpha * y_train * stump_predictions)\n        sample_weight /= np.sum(sample_weight)\n        stumps.append(stump)\n\n    predictions = np.zeros(X_test.shape[0])\n    for stump in stumps:\n        predictions += stump.alpha * stump.predict(X_test)\n    predictions = np.sign(predictions)\n\n    return predictions.tolist()\n\n# Example usage:\n# X_train = np.array([[0, 1], [1, 1], [2, 0], [0, 0]])\n# y_train = np.array([1, 1, -1, -1])\n# X_test = np.array([[0.5, 0.5], [2, 2]])\n# predictions = adaboost_predict(X_train, y_train, X_test, 3)\n# print(predictions)  # Output should be a list of predicted labels for X_test\n```"}
{"task_id": 128, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    n_samples, n_features = X.shape\n    class_labels = np.unique(y)\n    global_mean = np.mean(X, axis=0)\n    S_W = np.zeros((n_features, n_features))\n    S_B = np.zeros((n_features, n_features))\n\n    for label in class_labels:\n        class_samples = X[y == label]\n        class_mean = np.mean(class_samples, axis=0)\n        S_W += np.dot((class_samples - class_mean).T, (class_samples - class_mean))\n        S_B += len(class_samples) * np.dot((class_mean - global_mean).reshape(n_features, 1),\n                                           (class_mean - global_mean).reshape(1, n_features))\n\n    # Compute the matrix A = pinv(S_W) * S_B\n    A = np.dot(np.linalg.pinv(S_W), S_B)\n\n    # Compute eigenvalues and eigenvectors of A\n    eigenvalues, eigenvectors = np.linalg.eigh(A)\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n\n    # Deterministic sign fix\n    for i in range(n_components):\n        if eigenvectors[0, i] < 0:\n            eigenvectors[:, i] *= -1\n\n    # Project the data onto the first n_components eigenvectors\n    W = eigenvectors[:, :n_components]\n    projected = np.dot(X, W).round(4)\n\n    return projected.tolist()\n\n# Example usage:\nX = np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]])\ny = np.array([0,0,0,0,1,1,1,1])\nn_components = 1\n\nprint(multi_class_lda(X, y, n_components))\n```"}
{"task_id": 140, "completion_id": 0, "completion": "```python\nfrom collections import deque\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if grid[0][0] == 'F' or grid[n-1][n-1] == 'F':\n        return -1\n    if n == 1 and grid[0] == '.':\n        return 0\n\n    # Directions for moving in the grid\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n\n    # Queue for BFS for both fire and agent\n    fire_queue = deque()\n    agent_queue = deque([(0, 0, 0)]) # (x, y, time)\n\n    # Mark the initial fire locations\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j, 0))\n\n    # Mark all cells that are on fire\n    fire_spread = [[math.inf for _ in range(n)] for _ in range(n)]\n    while fire_queue:\n        x, y, time = fire_queue.popleft()\n        fire_spread[x][y] = time\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] != '#' and fire_spread[nx][ny] > time + 1:\n                fire_spread[nx][ny] = time + 1\n                fire_queue.append((nx, ny, time + 1))\n\n    # BFS for agent\n    visited = [[False for _ in range(n)] for _ in range(n)]\n    visited[0][0] = True\n    while agent_queue:\n        x, y, time = agent_queue.popleft()\n        if (x, y) == (n-1, n-1):\n            return time\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] != '#' and fire_spread[nx][ny] > time + 1:\n                visited[nx][ny] = True\n                agent_queue.append((nx, ny, time + 1))\n\n    return -1\n```\n\nThis Python script defines a function `escape_fire_maze` that takes a grid representing a maze with fire and returns the minimum time for an agent to escape from the upper-left corner to the lower-right corner avoiding the fire. The function uses BFS (Breadth-First Search) to simulate the spreading of the fire and the movement of the agent. The fire spreads first, and then the agent moves to safe cells. If the agent cannot reach the goal, the function returns -1."}
{"task_id": 141, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"Implement the k-Nearest Neighbors classifier.\"\"\"\n    num_test = X_test.shape[0]\n    y_pred = np.zeros(num_test, dtype=y_train.dtype)\n    \n    # Define the distance calculation functions\n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((x1 - x2) ** 2))\n    \n    def manhattan_distance(x1, x2):\n        return np.sum(np.abs(x1 - x2))\n    \n    def cosine_distance(x1, x2):\n        dot_product = np.dot(x1, x2)\n        norm_x1 = np.sqrt(np.dot(x1, x1))\n        norm_x2 = np.sqrt(np.dot(x2, x2))\n        return 1 - (dot_product / (norm_x1 * norm_x2))\n    \n    # Choose the distance function based on the metric parameter\n    if metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:  # Default to 'euclidean'\n        distance_func = euclidean_distance\n    \n    # Compute the distance matrix\n    for i in range(num_test):\n        distances = np.array([distance_func(X_test[i], X_train[j]) for j in range(X_train.shape[0])])\n        # Get the indices of the k nearest neighbors\n        nearest_neighbors = np.argsort(distances)[:k]\n        # Get the labels of the k nearest neighbors\n        nearest_neighbors_labels = y_train[nearest_neighbors]\n        # Get the most common label\n        (values, counts) = np.unique(nearest_neighbors_labels, return_counts=True)\n        y_pred[i] = values[np.argmax(counts)]\n    \n    return y_pred\n\n# Example usage\nif __name__ == \"__main__\":\n    X_train = np.array([[1, 2], [2, 3], [3, 4], [6, 7], [7, 8], [8, 9]])\n    y_train = np.array([0, 0, 0, 1, 1, 1])\n    X_test = np.array([[2, 3], [7, 8]])\n    k = 3\n    metric = 'euclidean'\n    y_pred = knn_predict(X_train, y_train, X_test, k, metric)\n    print(y_pred)\n```\n\nThis script defines a function `knn_predict` that implements the k-Nearest Neighbors algorithm for classification. The function accepts training data (`X_train`, `y_train`), test data (`X_test`), the number of neighbors to consider (`k`), and the distance metric to use (`metric`). The function then computes the distance between each test sample and every training sample, finds the k nearest neighbors, and predicts the class by majority vote among those k neighbors. The script also includes an example usage section that demonstrates how to call the function."}
{"task_id": 146, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2, axis=1))\n\n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b), axis=1)\n\n    def cosine_distance(a, b):\n        a_norm = np.linalg.norm(a, axis=1)\n        b_norm = np.linalg.norm(b)\n        dot_product = np.dot(a, b)\n        return 1 - dot_product / (a_norm * b_norm + 1e-12)\n\n    # Define the distance function based on the metric parameter\n    if metric == 'euclidean':\n        distance_func = euclidean_distance\n    elif metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        raise ValueError(\"Invalid metric type. Choose 'euclidean', 'manhattan', or 'cosine'.\")\n\n    # Predict labels for each test sample\n    predictions = []\n    for sample in X_test:\n        # Compute distances to all training samples\n        distances = distance_func(X, sample)\n        # Get indices of k closest training samples\n        k_indices = np.argsort(distances)[:k]\n        # Get the labels of the k closest training samples\n        k_nearest_labels = y[k_indices]\n        # Perform majority vote on the labels\n        (values, counts) = np.unique(k_nearest_labels, return_counts=True)\n        # In case of a tie, return the smallest label\n        predictions.append(values[np.argmax(counts)])\n\n    return predictions\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Example data\n    X_train = np.array([[1, 2], [2, 3], [3, 4], [6, 5], [7, 8], [8, 9]])\n    y_train = np.array([0, 0, 0, 1, 1, 1])\n    X_test = np.array([[3, 3], [6, 6]])\n\n    # Predict using k-NN with different metrics\n    predictions_euclidean = knn_predict(X_train, y_train, X_test, k=3, metric='euclidean')\n    predictions_manhattan = knn_predict(X_train, y_train, X_test, k=3, metric='manhattan')\n    predictions_cosine = knn_predict(X_train, y_train, X_test, k=3, metric='cosine')\n\n    print(\"Euclidean predictions:\", predictions_euclidean)\n    print(\"Manhattan predictions:\", predictions_manhattan)\n    print(\"Cosine predictions:\", predictions_cosine)\n```"}
{"task_id": 155, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Ensure state is a numpy array for consistency\n    state = np.array(state)\n\n    # First affine transformation and ReLU\n    hidden1 = np.maximum(0, np.dot(state, weights['W1']) + weights['b1'])\n\n    # Second affine transformation and ReLU\n    hidden2 = np.maximum(0, np.dot(hidden1, weights['W2']) + weights['b2'])\n\n    # Output affine transformation and tanh\n    action = np.tanh(np.dot(hidden2, weights['W3']) + weights['b3'])\n\n    # Return the action as a list of floats rounded to 4 decimal places\n    return [round(x, 4) for x in action.tolist()]\n\n# Example usage:\n# Assuming state_dim = 4, hidden1 = 10, hidden2 = 5, action_dim = 2\nweights = {\n    'W1': np.random.randn(4, 10),\n    'b1': np.random.randn(10),\n    'W2': np.random.randn(10, 5),\n    'b2': np.random.randn(5),\n    'W3': np.random.randn(5, 2),\n    'b3': np.random.randn(2)\n}\n\nstate = [1.0, 2.0, 3.0, 4.0]\naction = actor_forward(state, weights)\nprint(action)\n```\n\nThis script defines the `actor_forward` function as required by the task, and provides an example of how to generate random weights and a state vector, then compute the action vector. The output is printed and will be rounded to four decimal places as specified."}
{"task_id": 160, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    m, n = X.shape\n    # Adding intercept column if needed\n    if fit_intercept:\n        X = np.column_stack((np.ones(m), X))\n    else:\n        X = np.column_stack((np.zeros(m), X))\n\n    # Initialize weights\n    w = np.zeros(n + 1)  # +1 for the intercept\n\n    # Coordinate descent loop\n    for _ in range(max_iters):\n        if fit_intercept:\n            w[0] = np.mean(y - X[:, 1:] @ w[1:])\n        for j in range(1, n + 1):\n            # Temporarily set the current weight to 0\n            w_old = w[j]\n            w[j] = 0\n            # Compute partial residual\n            r_j = y - X @ w\n            # Compute the dot product and the sum of squares\n            dot_product = X[:, j] @ r_j\n            sum_of_squares = np.sum(X[:, j]**2)\n            # Apply soft-thresholding operator\n            w[j] = soft_threshold(dot_product, lambda_param * m) / sum_of_squares\n\n    # Extract weights and intercept, round to 4 decimal places\n    intercept = round(w[0], 4)\n    weights_list = [round(w[j], 4) for j in range(1, n + 1)]\n\n    return weights_list, intercept\n\ndef soft_threshold(a: float, tau: float) -> float:\n    \"\"\"Soft-thresholding operator.\"\"\"\n    return np.sign(a) * max(abs(a) - tau, 0)\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([1, 2, 3])\n# weights, intercept = fit_lasso(X, y, lambda_param=0.1, max_iters=100, fit_intercept=True)\n# print(weights, intercept)\n```\n\nThis Python script implements the Lasso regression with the coordinate descent method as requested. The `fit_lasso` function takes the feature matrix `X`, the target vector `y`, and optional parameters for regularisation strength, maximum iterations, and whether to fit an intercept. It returns the learned weights and intercept, rounded to four decimal places. The soft-thresholding operator is implemented as a separate function `soft_threshold`."}
{"task_id": 165, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    # Ensure inputs are NumPy arrays for consistency\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Check if the lengths are different\n    if x.shape != y.shape:\n        return -1\n    \n    # Compute the Hamming distance\n    distance = np.sum(x != y) / len(x)\n    \n    # Return the distance rounded to 4 decimal places\n    return round(float(distance), 4)\n\n# Example usage:\nx = [1, 2, 3, 4, 5]\ny = [1, 2, 0, 4, 0]\nprint(hamming_distance(x, y))  # Output should be 0.4\n\n# Example with NumPy arrays\nx_np = np.array([1, 2, 3])\ny_np = np.array([1, 2, 3])\nprint(hamming_distance(x_np, y_np))  # Output should be 0.0\n\n# Example with different lengths\nx_diff = [1, 2, 3]\ny_diff = [1, 2]\nprint(hamming_distance(x_diff, y_diff))  # Output should be -1\n```"}
{"task_id": 169, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if N <= 0:\n        raise ValueError(\"N must be a positive integer.\")\n    \n    # Special case for N = 1\n    if N == 1:\n        return [1.0]\n    \n    # Generalized cosine coefficients\n    if window == \"generalized_cosine\":\n        if coefficients is None:\n            raise ValueError(\"coefficients must be provided for generalized_cosine.\")\n        w = sum(a * np.cos(2 * np.pi * k * np.arange(N) / (N - 1)) for k, a in enumerate(coefficients))\n    else:\n        n = np.arange(N)\n        if window == \"hamming\":\n            w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n        elif window == \"hann\":\n            w = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n        elif window == \"blackman_harris\":\n            a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n            w = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n        else:\n            raise ValueError(f\"Unknown window type: {window}\")\n    \n    # Return the window coefficients rounded to 4 decimal places\n    return [round(x, 4) for x in w]\n\n# Example usage\nprint(generate_window(\"hamming\", 5))\nprint(generate_window(\"hann\", 5))\nprint(generate_window(\"blackman_harris\", 5))\nprint(generate_window(\"generalized_cosine\", 5, coefficients=[0.35875, 0.48829, 0.14128, 0.01168]))\n```"}
{"task_id": 171, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(z):\n    return 1 / (1 + np.exp(-z))\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    \n    # Convert lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Add intercept term\n    X_train = np.c_[np.ones(X_train.shape[0]), X_train]\n    X_test = np.c_[np.ones(X_test.shape[0]), X_test]\n    \n    # Map labels to 0 and 1 internally\n    unique_labels = np.unique(y_train)\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train_mapped = np.array([label_map[label] for label in y_train])\n    \n    # Handle the case where all training labels are identical\n    if len(unique_labels) == 1:\n        return [unique_labels[0]] * len(X_test)\n    \n    # Initialize weights\n    weights = np.zeros(X_train.shape[1])\n    \n    # Mini-batch Gradient Descent\n    for _ in range(epochs):\n        shuffled_indices = np.random.permutation(X_train.shape[0])\n        X_train_shuffled = X_train[shuffled_indices]\n        y_train_shuffled = y_train_mapped[shuffled_indices]\n        \n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train_shuffled[i:i + batch_size]\n            y_batch = y_train_shuffled[i:i + batch_size]\n            predictions = sigmoid(X_batch @ weights)\n            weights -= (learning_rate / batch_size) * (X_batch.T @ (predictions - y_batch))\n    \n    # Predict\n    test_predictions = sigmoid(X_test @ weights)\n    binary_predictions = (test_predictions > 0.5).astype(int)\n    \n    # Map predictions back to original labels\n    inverse_label_map = {0: unique_labels[0], 1: unique_labels[1]}\n    final_predictions = [inverse_label_map[pred] for pred in binary_predictions]\n    \n    return final_predictions\n```"}
{"task_id": 176, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    # Convert to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Initialize weights\n    weights = np.ones(len(y_train)) / len(y_train)\n    \n    # Initialize list for storing the stumps and their respective alpha values\n    stumps = []\n    alphas = []\n\n    for _ in range(n_estimators):\n        stump, min_error, polarity = find_best_stump(X_train, y_train, weights)\n        epsilon = min_error + 1e-10  # Avoid division by zero\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n        alphas.append(alpha)\n        stumps.append((stump, polarity))\n\n        # Update weights\n        predictions = predict_stump(X_train, stump, polarity)\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)  # Normalize weights\n        \n        # Early stopping if a perfect stump is found\n        if min_error == 0:\n            break\n\n    # Make predictions on the test set\n    test_predictions = np.zeros(len(X_test))\n    for alpha, (stump, polarity) in zip(alphas, stumps):\n        test_predictions += alpha * predict_stump(X_test, stump, polarity)\n    \n    # Convert to class labels {0,1}\n    predictions = np.where(test_predictions >= 0, 1, 0).tolist()\n    \n    return predictions\n\ndef find_best_stump(X_train, y_train, weights):\n    best_stump = None\n    best_error = float('inf')\n    best_polarity = 1\n    for feature_idx in range(X_train.shape[1]):\n        for threshold in np.unique(X_train[:, feature_idx]):\n            for polarity in [1, -1]:\n                stump_error = calculate_error(X_train, y_train, weights, feature_idx, threshold, polarity)\n                if stump_error < best_error:\n                    best_stump = (feature_idx, threshold)\n                    best_error = stump_error\n                    best_polarity = polarity\n    return best_stump, best_error, best_polarity\n\ndef calculate_error(X_train, y_train, weights, feature_idx, threshold, polarity):\n    predictions = np.where(polarity * X_train[:, feature_idx] < polarity * threshold, 1, -1)\n    return np.sum(weights[y_train != predictions])\n\ndef predict_stump(X, stump, polarity):\n    feature_idx, threshold = stump\n    return np.where(polarity * X[:, feature_idx] < polarity * threshold, 1, -1)\n\n# Example usage:\n# X_train = [[-1, -1], [-2, -1], [1, 1], [2, 1]]\n# y_train = [1, 1, 2, 2]\n# X_test = [[0, 0], [1, 1]]\n# predictions = adaboost_predict(X_train, y_train, X_test, n_estimators=5)\n# print(predictions) # Output: [1, 2] (after converting labels back to the original class labels)\n```\nThis script implements the AdaBoost algorithm using decision stumps as weak learners. It follows the provided specification closely, including early stopping when a perfect stump is found and the use of weighted errors for stump selection. The output is a list of predicted class labels for the test set, as required."}
{"task_id": 178, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n\n    rng = np.random.default_rng(seed)\n    w, c1, c2 = 0.5, 1.5, 1.5\n    lower_bound, upper_bound = -1, 1\n\n    # Initialize particles\n    positions = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    velocities = rng.uniform(-0.1, 0.1, (num_particles, n_dims))\n    personal_best_positions = positions.copy()\n    personal_best_values = np.array([np.sum(x**2) for x in positions])\n\n    global_best_position = positions[np.argmin(personal_best_values)].copy()\n    global_best_value = np.min(personal_best_values)\n\n    # PSO Main Loop\n    for _ in range(num_iterations):\n        r1, r2 = rng.uniform(0, 1, (2, num_particles, n_dims))\n\n        velocities = w * velocities + c1 * r1 * (personal_best_positions - positions) + c2 * r2 * (global_best_position - positions)\n        positions += velocities\n        positions = np.clip(positions, lower_bound, upper_bound)\n\n        current_values = np.array([np.sum(x**2) for x in positions])\n\n        improved_particles = current_values < personal_best_values\n        personal_best_positions[improved_particles] = positions[improved_particles]\n        personal_best_values[improved_particles] = current_values[improved_particles]\n\n        current_global_best = np.min(current_values)\n        if current_global_best < global_best_value:\n            global_best_value = current_global_best\n            global_best_position = positions[np.argmin(current_values)].copy()\n\n    return round(global_best_value, 4)\n```"}
{"task_id": 180, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    predictions = []\n    n_train = len(X_train)\n    \n    # If k is 0 or larger than the number of training samples, use all training samples.\n    k = n_train if k <= 0 or k > n_train else k\n    \n    for x_test in X_test:\n        # Calculate distances from x_test to all samples in X_train\n        distances = [np.sqrt(np.sum((np.array(x_train) - np.array(x_test))**2)) for x_train in X_train]\n        \n        # Pair each distance with its corresponding label\n        dist_label_pairs = sorted(zip(distances, y_train))\n        \n        # Get the k nearest neighbours' labels\n        k_nearest_labels = [label for _, label in dist_label_pairs[:k]]\n        \n        if task == \"classification\":\n            # For classification, return the most frequent label\n            prediction = Counter(k_nearest_labels).most_common(1)[0][0]\n        else:\n            # For regression, return the average of the labels\n            prediction = np.mean(k_nearest_labels)\n            prediction = round(prediction, 4)\n        \n        predictions.append(prediction)\n    \n    return predictions\n```\n\nThis code defines a `knn_predict` function that implements the k-Nearest Neighbors algorithm for both classification and regression tasks, adhering to the rules specified in the task description."}
{"task_id": 184, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gini_impurity(labels):\n    \"\"\"Calculate the Gini impurity for a set of labels.\"\"\"\n    _, counts = np.unique(labels, return_counts=True)\n    probabilities = counts / len(labels)\n    return 1 - np.sum(probabilities**2)\n\ndef best_split(X, y):\n    \"\"\"Find the best split for the given data according to Gini impurity.\"\"\"\n    best_feature, best_threshold, best_gini_gain = None, None, -1\n    parent_gini = gini_impurity(y)\n    \n    for feature in range(X.shape[1]):\n        sorted_indices = np.argsort(X[:, feature])\n        for i in range(1, len(X)):\n            if X[sorted_indices[i-1], feature] != X[sorted_indices[i], feature]:\n                threshold = (X[sorted_indices[i-1], feature] + X[sorted_indices[i], feature]) / 2\n                left_labels = y[X[:, feature] <= threshold]\n                right_labels = y[X[:, feature] > threshold]\n                left_gini = gini_impurity(left_labels)\n                right_gini = gini_impurity(right_labels)\n                gini_gain = parent_gini - (len(left_labels) / len(y)) * left_gini - (len(right_labels) / len(y)) * right_gini\n                if gini_gain > best_gini_gain:\n                    best_gini_gain = gini_gain\n                    best_feature = feature\n                    best_threshold = threshold\n    return best_feature, best_threshold, best_gini_gain > 0\n\ndef majority_class(labels):\n    \"\"\"Return the majority class in the given labels.\"\"\"\n    values, counts = np.unique(labels, return_counts=True)\n    index = np.argmax(counts)\n    return values[index]\n\ndef build_tree(X, y, depth, max_depth):\n    \"\"\"Recursively build the decision tree.\"\"\"\n    if max_depth is not None and depth >= max_depth or len(np.unique(y)) == 1:\n        return {'label': majority_class(y)}\n    \n    feature, threshold, can_split = best_split(X, y)\n    if not can_split:\n        return {'label': majority_class(y)}\n    \n    left_indices = X[:, feature] <= threshold\n    right_indices = X[:, feature] > threshold\n    \n    left_tree = build_tree(X[left_indices], y[left_indices], depth + 1, max_depth)\n    right_tree = build_tree(X[right_indices], y[right_indices], depth + 1, max_depth)\n    \n    return {'feature': feature, 'threshold': threshold, 'left': left_tree, 'right': right_tree}\n\ndef predict_tree(tree, X):\n    \"\"\"Predict the class labels for the given data using the decision tree.\"\"\"\n    if 'label' in tree:\n        return tree['label']\n    feature, threshold = tree['feature'], tree['threshold']\n    if X[feature] <= threshold:\n        return predict_tree(tree['left'], X)\n    else:\n        return predict_tree(tree['right'], X)\n\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None = None) -> list[int]:\n    tree = build_tree(X_train, y_train, 0, max_depth)\n    return [predict_tree(tree, x) for x in X_test]\n\n# Example usage\nif __name__ == \"__main__\":\n    X_train = np.array([[0, 0], [1, 1], [2, 2], [3, 3]])\n    y_train = np.array([0, 1, 1, 0])\n    X_test = np.array([[1, 0], [2, 2], [3, 1]])\n    predictions = decision_tree_predict(X_train, y_train, X_test, max_depth=2)\n    print(predictions)  # Output should be [0, 1, 0] depending on the tree structure\n```"}
{"task_id": 190, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gini_impurity(labels):\n    \"\"\"Calculate the Gini impurity for a set of labels.\"\"\"\n    unique_labels, counts = np.unique(labels, return_counts=True)\n    proportions = counts / len(labels)\n    return 1 - np.sum(proportions ** 2)\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    \n    n_samples, n_features = X.shape\n    best_gini = gini_impurity(y)\n    best_feature_index, best_threshold_value = -1, None\n    \n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        for threshold in unique_values:\n            left_indices = X[:, feature_index] <= threshold\n            right_indices = X[:, feature_index] > threshold\n            \n            if np.any(left_indices) and np.any(right_indices):\n                left_gini = gini_impurity(y[left_indices])\n                right_gini = gini_impurity(y[right_indices])\n                n_left = np.sum(left_indices)\n                n_right = np.sum(right_indices)\n                \n                gini_split = (n_left / n_samples) * left_gini + (n_right / n_samples) * right_gini\n                \n                if gini_split < best_gini or (np.abs(gini_split - best_gini) < 1e-12 and feature_index < best_feature_index) or (np.abs(gini_split - best_gini) < 1e-12 and feature_index == best_feature_index and threshold < best_threshold_value):\n                    best_gini = gini_split\n                    best_feature_index = feature_index\n                    best_threshold_value = threshold\n    \n    return (best_feature_index, best_threshold_value, round(best_gini, 4))\n\n# Example usage:\nX = [[1.0, 2.0], [2.0, 3.0], [3.0, 4.0], [4.0, 5.0]]\ny = [0, 0, 1, 1]\nprint(best_gini_split(X, y))\n```"}
{"task_id": 191, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    def validate(v1, v2):\n        if not (isinstance(v1, (list, tuple, np.ndarray)) and isinstance(v2, (list, tuple, np.ndarray))):\n            return False\n        if len(v1) != len(v2) or len(v1) == 0:\n            return False\n        try:\n            v1 = np.array(v1, dtype=float)\n            v2 = np.array(v2, dtype=float)\n        except ValueError:\n            return False\n        return True\n\n    def euclidean(v1, v2):\n        return round(np.linalg.norm(v1 - v2), 4)\n\n    def manhattan(v1, v2):\n        return round(np.sum(np.abs(v1 - v2)), 4)\n\n    def chebyshev(v1, v2):\n        return round(np.max(np.abs(v1 - v2)), 4)\n\n    def cosine(v1, v2):\n        norm1 = np.linalg.norm(v1)\n        norm2 = np.linalg.norm(v2)\n        if norm1 == 0 or norm2 == 0:\n            return -1\n        return round(1 - np.dot(v1, v2) / (norm1 * norm2), 4)\n\n    def d(v1, v2):\n        if not validate(v1, v2):\n            return -1\n        if name == 'euclidean':\n            return euclidean(v1, v2)\n        elif name == 'manhattan':\n            return manhattan(v1, v2)\n        elif name == 'chebyshev':\n            return chebyshev(v1, v2)\n        elif name == 'cosine':\n            return cosine(v1, v2)\n        else:\n            return -1\n\n    return d\n\n# Example usage:\neuclidean_metric = metric('euclidean')\nprint(euclidean_metric([1, 2, 3], [4, 5, 6]))  # \u279e 5.1962\ncosine_metric = metric('cosine')\nprint(cosine_metric([1, 2, 3], [4, 5, 6]))  # \u279e 0.0142\n```"}
{"task_id": 197, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n\n    if cont_action:\n        if md_action:\n            action_dim = len(env.action_space.shape)\n            n_actions_per_dim = [np.inf] * action_dim\n        else:\n            n_actions_per_dim = [np.inf]\n            action_dim = 1\n    else:\n        if md_action:\n            action_dim = len(env.action_space.spaces)\n            n_actions_per_dim = [space.n for space in env.action_space.spaces]\n            action_ids = list(product(*[range(n) for n in n_actions_per_dim]))\n        else:\n            n_actions_per_dim = [env.action_space.n]\n            action_dim = 1\n            action_ids = [(i,) for i in range(env.action_space.n)]\n\n    return n_actions_per_dim, action_ids, action_dim\n```\n\nThis function `action_stats` effectively handles the distinction between continuous and discrete action spaces and also manages to deal with both single and multi-dimensional cases. It returns a tuple containing `n_actions_per_dim`, `action_ids` for the discrete cases, and `action_dim` which is the total number of action dimensions. If the action space is continuous, it sets the `n_actions_per_dim` to `numpy.inf` for the respective dimensions and sets `action_ids` to `None`."}
{"task_id": 198, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # Determine the number of topics T from the shape of the first phi array\n    T = phi[0].shape[1]\n    \n    # Initialize the beta matrix with zeros\n    beta = np.zeros((V, T))\n    \n    # Update the beta matrix based on the phi values and the corpus\n    for d, doc in enumerate(corpus):\n        for n, word in enumerate(doc):\n            beta[word] += phi[d][n]\n    \n    # Normalize each column (topic) of the beta matrix\n    beta /= beta.sum(axis=0, keepdims=True)\n    \n    # Round to 4 decimal places and convert to list of lists\n    beta = np.round(beta, 4).tolist()\n    \n    return beta\n\n# Example usage\nif __name__ == \"__main__\":\n    phi = [np.array([[0.1, 0.9], [0.8, 0.2]]), np.array([[0.3, 0.7]])]\n    corpus = [[0, 1], [0]]\n    V = 2\n    updated_beta = update_beta(phi, corpus, V)\n    print(updated_beta)\n```\n\nThis script will update the word-topic distribution $\\beta$ according to the variational M-step in LDA, as described. It takes into account the variational parameters $\\phi$, the corpus as a list of word indices, and the vocabulary size $V$, returning $\\beta$ as a list of lists, with each column summing to 1 and all numbers rounded to four decimal places."}
{"task_id": 202, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef euclidean_distance(a, b):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.linalg.norm(a - b)\n\ndef total_cost(X, medoids, labels):\n    \"\"\"Calculate the total cost of the clustering.\"\"\"\n    cost = 0\n    for i in range(X.shape[0]):\n        cost += euclidean_distance(X[i], medoids[labels[i]])\n    return cost\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    n_samples = X.shape[0]\n    # Initialize medoids as the first k samples\n    medoids = X[:k].copy()\n    labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - medoids, axis=2), axis=1)\n    \n    improvement = True\n    while improvement:\n        improvement = False\n        current_cost = total_cost(X, medoids, labels)\n        best_swap = (-1, -1)\n        best_cost = current_cost\n        \n        for i in range(k):\n            for j in range(n_samples):\n                if j not in medoids:\n                    new_medoids = medoids.copy()\n                    new_medoids[i] = X[j]\n                    new_labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - new_medoids, axis=2), axis=1)\n                    new_cost = total_cost(X, new_medoids, new_labels)\n                    if new_cost < best_cost:\n                        best_cost = new_cost\n                        best_swap = (i, j)\n                        improvement = True\n        \n        if improvement:\n            i, j = best_swap\n            medoids[i] = X[j]\n            labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - medoids, axis=2), axis=1)\n    \n    return labels.tolist()\n\n# Test the function with provided data\nX = np.array([[0,0], [1,0], [0,1], [5,5], [6,5], [5,6]])\nk = 2\nprint(pam_clustering(X, k))  # Expected output: [0, 0, 0, 1, 1, 1]\n```"}
{"task_id": 216, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train).reshape(-1, 1)\n    x_test = np.array(x_test)\n\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n\n    def generate_polynomial_features(X, degree):\n        X_poly = X\n        for d in range(2, degree + 1):\n            X_poly = np.hstack([X_poly, np.power(X, d)])\n        return X_poly\n\n    def standardize_features(X):\n        means = np.mean(X, axis=0)\n        stds = np.std(X, axis=0)\n        X_standardized = (X - means) / stds\n        return X_standardized, means, stds\n\n    def add_bias_term(X):\n        return np.hstack([np.ones((X.shape[0], 1)), X])\n\n    def compute_gradient(X, y, w, reg_factor, l1_ratio):\n        n_samples = X.shape[0]\n        predictions = X @ w\n        error = predictions - y\n        gradient = (X.T @ error) / n_samples\n\n        # Regularization term\n        l1_term = l1_ratio * reg_factor * np.sign(w)\n        l2_term = (1 - l1_ratio) * reg_factor * w\n        l2_term[0] = 0  # Do not regularize the bias term\n        gradient += l1_term + l2_term\n\n        return gradient\n\n    # Preprocessing\n    X_train_poly = generate_polynomial_features(x_train, degree)\n    X_train_standardized, means, stds = standardize_features(X_train_poly)\n    X_train = add_bias_term(X_train_standardized)\n\n    X_test_poly = generate_polynomial_features(x_test, degree)\n    X_test_standardized = (X_test_poly - means) / stds\n    X_test = add_bias_term(X_test_standardized)\n\n    n_features = X_train.shape[1]\n    w = np.zeros((n_features, 1))\n\n    # Training\n    for _ in range(n_iterations):\n        gradient = compute_gradient(X_train, y_train, w, reg_factor, l1_ratio)\n        w -= learning_rate * gradient\n\n    # Prediction\n    predictions = X_test @ w\n    return np.round(predictions.flatten(), 4).tolist()\n\n# Example usage:\nx_train = [[1, 2], [3, 4], [5, 6]]\ny_train = [2, 4, 6]\nx_test = [[7, 8], [9, 10]]\npredictions = elastic_net_regression(x_train, y_train, x_test)\nprint(predictions)\n```\n\nThis script implements the requested Elastic Net regression function with batch gradient descent, including polynomial feature generation, feature standardization, and handling of the bias term. The function returns predictions for a test set, rounded to four decimal places. If the input shapes are incompatible or the number of iterations is not positive, it returns `-1`."}
{"task_id": 217, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to numpy arrays for vectorized computation\n    actual_array = np.array(actual, dtype=float)\n    predicted_array = np.array(predicted, dtype=float)\n    \n    # Compute the sigmoid function\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    \n    # Compute gradient, hessian, and probability\n    grad = actual_array * sigmoid(-actual_array * predicted_array)\n    hess = sigmoid(predicted_array) * (1 - sigmoid(predicted_array))\n    prob = sigmoid(predicted_array)\n    \n    # Round results to 6 decimal places\n    grad_rounded = np.round(grad, 6).tolist()\n    hess_rounded = np.round(hess, 6).tolist()\n    prob_rounded = np.round(prob, 6).tolist()\n    \n    return (grad_rounded, hess_rounded, prob_rounded)\n\n# Example usage:\nactual = [1, -1, 1, -1]\npredicted = [0.5, 0.2, -0.3, -0.7]\ngradient_list, hessian_list, probability_list = logistic_components(actual, predicted)\nprint(\"Gradient:\", gradient_list)\nprint(\"Hessian:\", hessian_list)\nprint(\"Probability:\", probability_list)\n```"}
{"task_id": 218, "completion_id": 0, "completion": "```python\ndef calculate_score(hand: list[int]) -> int:\n    \"\"\"Calculate the score of a hand in Blackjack, considering the 'usable ace' rule.\"\"\"\n    score = sum(hand)\n    aces = hand.count(1)\n    while aces > 0 and score + 10 <= 21:\n        score += 10\n        aces -= 1\n    return score\n\ndef is_natural_blackjack(hand: list[int]) -> bool:\n    \"\"\"Check if the hand is a natural blackjack (1 Ace and 1 card of value 10).\"\"\"\n    return len(hand) == 2 and 1 in hand and 10 in hand\n\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    player_score = calculate_score(player)\n    dealer_score = calculate_score(dealer)\n\n    if player_score > 21:\n        return -1\n    elif dealer_score > 21:\n        return 1\n    elif is_natural_blackjack(player) and len(player) == 2 and not is_natural_blackjack(dealer):\n        return 1.5\n    elif player_score > dealer_score:\n        return 1\n    elif player_score < dealer_score:\n        return -1\n    else:\n        return 0\n\n# Test cases\nprint(blackjack_outcome([1, 10], [2, 3, 5]))  # 1.5\nprint(blackjack_outcome([1, 2, 3], [1, 2, 3]))  # 0\nprint(blackjack_outcome([1, 2, 3], [1, 10]))  # -1\nprint(blackjack_outcome([1, 2, 3], [1, 10, 10]))  # 1\nprint(blackjack_outcome([1, 10, 1], [1, 10]))  # -1\n```"}
{"task_id": 221, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper function that returns element-wise squared log errors.\"\"\"\n    return (np.log(1 + actual) - np.log(1 + predicted)) ** 2\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n\n    # Input validation\n    if actual.shape != predicted.shape:\n        return -1\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n\n    # Calculate the squared logarithmic errors and their mean\n    errors = squared_log_error(actual, predicted)\n    msle = np.mean(errors)\n\n    # Return the MSLE rounded to 4 decimal places\n    return round(msle, 4)\n```"}
{"task_id": 222, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    # Convert input to NumPy array if it's a list\n    if isinstance(z, list):\n        z = np.array(z)\n    elif not isinstance(z, np.ndarray):\n        # Handle scalar cases\n        if z >= 0:\n            return round(1 / (1 + np.exp(-z)), 4)\n        else:\n            return round(np.exp(z) / (1 + np.exp(z)), 4)\n\n    # Vectorized implementation\n    result = np.where(z >= 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n    return round(result, 4).tolist() if isinstance(z, np.ndarray) else round(result, 4)\n\n# Helper function to round array-like elements\ndef round(x, n):\n    if isinstance(x, np.ndarray):\n        return np.around(x, decimals=n)\n    else:\n        return round(x, n)\n\n# Test examples\nprint(sigmoid(0))  # 0.5\nprint(sigmoid([-1000, 0, 1000]))  # [0.0, 0.5, 1.0]\nprint(sigmoid(np.array([-1000, 0, 1000])))  # [0.0, 0.5, 1.0]\n```"}
{"task_id": 224, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    # Convert input to numpy array for vectorized operations if it is not already\n    if not isinstance(z, np.ndarray):\n        z = np.array(z)\n    \n    # Apply the Leaky ReLU transformation\n    activated = np.where(z >= 0, z, a * z)\n    \n    # Convert back to a plain Python list to match the expected output format\n    return activated.tolist()\n\n# Example usage:\n# Uncomment the lines below to test\n# print(leaky_relu([-1, 0, 1, 2]))  # [-0.01, 0, 1, 2]\n# print(leaky_relu([[-1, 2], [-3, 4]], a=0.1))  # [[-0.1, 2], [-0.3, 4]]\n# print(leaky_relu(5))  # 5\n# print(leaky_relu(np.array([[0, -1], [-2, 3]])))  # [[0, -0.01], [-0.02, 3]]\n```"}
{"task_id": 226, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    sample_weights = np.full(n_samples, 1 / n_samples)\n    classifiers = []\n\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_classifier = None\n\n        for feature_idx in range(n_features):\n            for threshold in np.unique(X_train[:, feature_idx]):\n                for polarity in [-1, 1]:\n                    predictions = np.where(X_train[:, feature_idx] < threshold, polarity, -polarity)\n                    error = np.sum(sample_weights * (predictions != y_train))\n                    if error < min_error:\n                        min_error = error\n                        best_classifier = (feature_idx, threshold, polarity)\n\n        feature_idx, threshold, polarity = best_classifier\n        predictions = np.where(X_train[:, feature_idx] < threshold, polarity, -polarity)\n        error = np.sum(sample_weights * (predictions != y_train))\n        alpha = 0.5 * math.log((1 - error) / (error + 1e-10))\n        classifiers.append((feature_idx, threshold, polarity, alpha))\n\n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        sample_weights /= np.sum(sample_weights)\n\n    def predict_single(x):\n        result = 0\n        for feature_idx, threshold, polarity, alpha in classifiers:\n            prediction = polarity if x[feature_idx] < threshold else -polarity\n            result += alpha * prediction\n        return np.sign(result)\n\n    return [int(predict_single(x)) for x in X_test]\n\n# Example usage\nif __name__ == \"__main__\":\n    X_train = np.array([[1, 2], [2, 1], [3, 4], [4, 3]])\n    y_train = np.array([-1, -1, 1, 1])\n    X_test = np.array([[1.5, 2.5], [3.5, 4.5]])\n    predictions = adaboost_predict(X_train, y_train, X_test, n_clf=3)\n    print(predictions)  # Output: [-1, 1]\n```\n\nThis code provides a complete implementation of the AdaBoost algorithm using decision stumps as weak learners. It includes the training phase where the best stumps are selected for each round, and the prediction phase where a weighted sum of the stumps' predictions is used to determine the final class label. The provided example usage demonstrates how to use the function with a small dataset."}
{"task_id": 241, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n\n    # Step 2: Generate a 2D matrix with shape (d0, d1*d2*...*dn)\n    flat_shape = (shape[0], np.prod(shape[1:]))\n    A = np.random.randn(*flat_shape)\n\n    # Step 3: Compute the SVD of A\n    U, _, Vt = np.linalg.svd(A, full_matrices=False)\n\n    # Step 4: Choose the SVD factor with the same size as A\n    Q = U if U.shape == flat_shape else Vt\n\n    # Step 5: Reshape Q to the requested shape and multiply by scale\n    Q = Q.reshape(shape) * scale\n\n    return Q.tolist()\n\n# Example usage\nnp.random.seed(0)\nshape = (2, 2)\nscale = 0.5\nprint(orthogonal(shape, scale))\n```\n\nThis script includes the required function `orthogonal` that generates an orthogonally initialized tensor based on the specified shape and scale. The function starts by checking if the input shape has at least two dimensions. If not, it returns `-1`. Then it creates a 2D matrix with i.i.d. samples from the standard normal distribution, computes the SVD, selects the appropriate factor to ensure orthogonality, and finally reshapes the matrix back to the requested shape and scales it. The returned tensor is a Python list due to the `tolist()` method."}
{"task_id": 243, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Define the weights and biases\n    W = np.ones((4, 4))\n    b = np.zeros(4)\n    \n    # Convert state to a numpy array for easier manipulation\n    state_np = np.array(state)\n    \n    # Dense-1: input \u2192 4 neurons, ReLU activation\n    z1 = np.maximum(0, state_np @ W + b)\n    \n    # Dense-2: 4 \u2192 4 neurons, ReLU activation\n    z2 = np.maximum(0, z1 @ W + b)\n    \n    # Dense-3: 4 \u2192 4 neurons, ReLU activation\n    z3 = np.maximum(0, z2 @ W + b)\n    \n    # Actor head: 4 \u2192 3 neurons, Softmax activation\n    Wa = np.ones((4, 3))\n    logit = z3 @ Wa\n    action_probs = np.exp(logit) / np.sum(np.exp(logit))\n    \n    # Critic head: 4 \u2192 1 neuron, no activation\n    Wc = np.ones((4, 1))\n    state_value = z3 @ Wc\n    \n    # Round the results\n    action_probs_rounded = [round(prob, 4) for prob in action_probs]\n    state_value_rounded = round(state_value[0], 4)\n    \n    return action_probs_rounded, state_value_rounded\n\n# Example usage\nstate = [1.0, 2.0, 3.0]\naction_probs, state_value = actor_critic_forward(state)\nprint(f\"Action probabilities: {action_probs}\")\nprint(f\"State value: {state_value}\")\n```\n\nThis script defines the `actor_critic_forward` function which implements the forward pass of the specified Actor\u2013Critic network architecture using NumPy operations. Given a state vector, it computes the action probabilities and the state value as described in the task, rounding the results to four decimal places."}
{"task_id": 249, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    # Convert state and params to numpy arrays\n    state = np.array(state)\n    for key in params:\n        params[key] = np.array(params[key])\n\n    # Shared layers\n    hidden = np.maximum(state @ params['W1'] + params['b1'], 0)\n    hidden = np.maximum(hidden @ params['W2'] + params['b2'], 0)\n    hidden = np.maximum(hidden @ params['W3'] + params['b3'], 0)\n\n    # Actor head\n    actor_output = hidden @ params['Wa'] + params['ba']\n    exp_scores = np.exp(actor_output - np.max(actor_output))\n    probabilities = exp_scores / np.sum(exp_scores)\n\n    # Critic head\n    value = hidden @ params['Wc'] + params['bc']\n\n    # Rounding the results\n    probabilities = np.round(probabilities, 4)\n    value = np.round(value, 4)\n\n    # Ensure probabilities and value are returned with at least one decimal place\n    probabilities = [float(f\"{p:.1f}\" if p.is_integer() else f\"{p:.4f}\") for p in probabilities]\n    value = float(f\"{value:.1f}\" if value.is_integer() else f\"{value:.4f}\")\n\n    return probabilities, value\n\n# Example usage\nstate = [1.0, 2.0, 3.0]\nparams = {\n    'W1': [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]],\n    'b1': [0.1, 0.2, 0.3],\n    'W2': [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]],\n    'b2': [0.1, 0.2, 0.3],\n    'W3': [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]],\n    'b3': [0.1, 0.2, 0.3],\n    'Wa': [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]],\n    'ba': [0.1, 0.2],\n    'Wc': [[1.0, 1.0, 1.0]],\n    'bc': [0.1]\n}\nprobs, value = actor_critic_forward(state, params)\nprint(probs, value)\n```\n\nThis script defines a function `actor_critic_forward` that implements the forward pass of an Actor-Critic network as described. It processes the input state through three shared dense layers with ReLU activations, then through separate actor and critic heads, and finally rounds the outputs to four decimal places. The example usage at the end demonstrates how to call the function with a sample state and parameters."}
{"task_id": 253, "completion_id": 0, "completion": "Below is the Python script that solves the provided task:\n\n```python\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l2_ratio = 1 - l1_ratio\n\n    if gradient:\n        # Compute the gradient of the Elastic-Net penalty\n        l1_grad = l1_ratio * np.sign(w)\n        l2_grad = l2_ratio * w\n        grad = alpha * (l1_grad + l2_grad)\n        return [round(x, 4) for x in grad.tolist()]\n    else:\n        # Compute the Elastic-Net penalty\n        l1_penalty = np.linalg.norm(w, ord=1)\n        l2_penalty = 0.5 * np.dot(w, w)\n        penalty = alpha * (l1_ratio * l1_penalty + l2_ratio * l2_penalty)\n        return round(penalty, 4)\n\n# Example usage:\nweights = [1.0, -2.0, 3.0]\nalpha = 0.5\nl1_ratio = 0.5\n\n# Calculate penalty\npenalty = elastic_net_regularization(weights, alpha, l1_ratio)\nprint(f'Elastic-Net penalty: {penalty}')\n\n# Calculate gradient\ngradient = elastic_net_regularization(weights, alpha, l1_ratio, gradient=True)\nprint(f'Elastic-Net gradient: {gradient}')\n```\n\nThis script defines the function `elastic_net_regularization` according to the provided specifications and includes an example usage that demonstrates how to compute both the penalty and the gradient for a given set of weights."}
{"task_id": 256, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in [\"X\", \"y\"]:\n        return None\n    if param_name in [\"Ba\", \"Bx\"]:\n        param_name = param_name.lower()\n    \n    param = model.parameters[param_name]\n    grads = np.zeros_like(param, dtype=np.float64)\n    \n    for i in np.ndindex(param.shape):\n        original_value = param[i]\n        \n        # Perturb +\u03b5\n        param[i] = original_value + epsilon\n        model.flush_gradients()\n        loss_pos = 0\n        for t in range(n_t):\n            loss_pos += loss_func([model.forward(X[:, :, t])])\n        \n        # Perturb -\u03b5\n        param[i] = original_value - epsilon\n        model.flush_gradients()\n        loss_neg = 0\n        for t in range(n_t):\n            loss_neg += loss_func([model.forward(X[:, :, t])])\n        \n        # Restore original value\n        param[i] = original_value\n        \n        # Compute numerical gradient\n        grads[i] = (loss_pos - loss_neg) / (2 * epsilon)\n    \n    return grads.T\n\n# Example usage:\n# Assuming a model, loss function, and input data are defined appropriately.\n# grad = grad_check_RNN(model, loss_function, \"Wx\", n_t, X, epsilon=1e-7)\n```"}
{"task_id": 257, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef decision_stump_error(X, y, weights, feature_idx, threshold):\n    \"\"\"Calculate the weighted error of a decision stump.\"\"\"\n    predictions = np.where(X[:, feature_idx] > threshold, 1, -1)\n    error = np.sum(weights * (predictions != y))\n    return error, predictions\n\ndef best_stump(X, y, weights):\n    \"\"\"Find the best decision stump based on the weighted error.\"\"\"\n    best = {'error': float('inf')}\n    for feature_idx in range(X.shape[1]):\n        for threshold in np.unique(X[:, feature_idx]):\n            error, _ = decision_stump_error(X, y, weights, feature_idx, threshold)\n            if error < best['error']:\n                best['error'] = error\n                best['feature_idx'] = feature_idx\n                best['threshold'] = threshold\n    return best\n\ndef stump_vote(X, stump):\n    \"\"\"Vote for the test data using the decision stump.\"\"\"\n    return np.where(X[:, stump['feature_idx']] > stump['threshold'], 1, -1)\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n\n    # Initialize weights\n    weights = np.full_like(y_train, 1 / len(y_train))\n\n    stumps = []\n    alpha_list = []\n\n    for _ in range(n_clf):\n        stump = best_stump(X_train, y_train, weights)\n        error, predictions = decision_stump_error(X_train, y_train, weights, stump['feature_idx'], stump['threshold'])\n        stump['predictions'] = predictions\n        stumps.append(stump)\n\n        # Compute alpha\n        alpha = 0.5 * np.log((1 - error) / error)\n        alpha_list.append(alpha)\n\n        # Update weights\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n\n    # Predict on test data\n    test_predictions = np.zeros(X_test.shape[0])\n    for stump, alpha in zip(stumps, alpha_list):\n        test_predictions += alpha * stump_vote(X_test, stump)\n    return list(np.sign(test_predictions))\n\n# Example usage\nX_train = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\ny_train = np.array([-1, -1, -1, 1])\nX_test = np.array([[0, 0], [1, 1]])\npredictions = adaboost_predict(X_train, y_train, X_test, n_clf=3)\nprint(predictions)  # Output will depend on the implementation\n```"}
{"task_id": 261, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError(\"Shape must have at least two dimensions.\")\n\n    fan_in = shape[1]\n    fan_out = shape[0]\n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n\n    std = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(loc=0, scale=std, size=shape)\n\n# Example usage and checking the output\nif __name__ == \"__main__\":\n    shape = (3, 4, 2, 2)  # Example shape for a 4D tensor\n    weights = glorot_normal(shape)\n    \n    # Output some statistics to check if they match the theory\n    print(f\"Shape of the output array: {weights.shape}\")\n    print(f\"Mean of the elements: {np.mean(weights)}\")\n    print(f\"Standard deviation of the elements: {np.std(weights)}\")\n    \n    # According to the theory, the standard deviation should be close to sqrt(2 / (fan_in + fan_out))\n    fan_in = shape[1] * np.prod(shape[2:])\n    fan_out = shape[0] * np.prod(shape[2:])\n    theoretical_std = np.sqrt(2 / (fan_in + fan_out))\n    print(f\"Theoretical standard deviation: {theoretical_std}\")\n```"}
{"task_id": 266, "completion_id": 0, "completion": "```python\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    # Create an adjacency list with empty lists for each vertex\n    adj_list = [[] for _ in V]\n    \n    # Create a dictionary to map vertex identifiers to their index in V\n    index_map = {vertex: index for index, vertex in enumerate(V)}\n    \n    # Populate the adjacency list\n    for u, v in E:\n        # Add v to u's adjacency list if it's not already there\n        if index_map[v] not in [index_map[neighbor] for neighbor in adj_list[index_map[u]]]:\n            adj_list[index_map[u]].append(v)\n        \n        # Add u to v's adjacency list if it's not already there\n        if index_map[u] not in [index_map[neighbor] for neighbor in adj_list[index_map[v]]]:\n            adj_list[index_map[v]].append(u)\n    \n    # Sort each adjacency list according to the order of appearance in V\n    for i, neighbors in enumerate(adj_list):\n        adj_list[i] = sorted(neighbors, key=lambda vertex: index_map[vertex])\n    \n    return adj_list\n\n# Example usage\nV = ['A', 'B', 'C', 'D']\nE = [('A', 'B'), ('B', 'C'), ('A', 'C'), ('B', 'D')]\nprint(build_adj_list(V, E))\n# Output: [['B', 'C'], ['A', 'C', 'D'], ['A', 'B'], ['B']]\n```\n\nThis Python function `build_adj_list` takes a list of vertices and edges as inputs and returns an adjacency list in the form of a list of lists. The adjacency list preserves the order of vertices as specified in `V` and ensures that each neighbour appears exactly once, sorted by their order of appearance in `V`."}
{"task_id": 267, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_error = float('inf')\n    best_stump = None\n\n    for feature_idx in range(n_features):\n        feature_values = np.unique(X[:, feature_idx])\n        for threshold in feature_values:\n            for polarity in [1, -1]:\n                # Predict labels based on the threshold and polarity\n                predictions = np.where(X[:, feature_idx] < threshold, 1, -1) * polarity\n                # Compute the weighted error\n                error = np.sum(sample_weights * (predictions != y))\n                # Check if this stump is better than the previous best\n                if error < best_error:\n                    best_error = error\n                    best_stump = {\n                        \"feature_index\": feature_idx,\n                        \"threshold\": np.round(threshold, 4),\n                        \"polarity\": polarity,\n                        \"weighted_error\": np.round(best_error, 4)\n                    }\n    return best_stump\n\n# Example usage\nif __name__ == \"__main__\":\n    X = np.array([[1, 2], [3, 4], [5, 6]])\n    y = np.array([-1, 1, -1])\n    sample_weights = np.array([0.5, 0.3, 0.2])\n    print(train_decision_stump(X, y, sample_weights))\n```\n\nThis script defines the `train_decision_stump` function which, given a feature matrix `X`, a label vector `y`, and a vector of sample weights `sample_weights`, will find and return the optimal weighted decision stump as described in the task. The example usage at the end demonstrates how to call the function with sample data."}
{"task_id": 273, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of class labels.\"\"\"\n    if len(labels) == 0:\n        return 0.0\n    label_counts = Counter(labels)\n    probabilities = [count / len(labels) for count in label_counts.values()]\n    return -sum(p * math.log2(p) for p in probabilities)\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    if len(feature) != len(target) or len(feature) < 2:\n        return (None, 0.0)\n\n    # Combine feature and target into a list of tuples and sort it by feature values\n    combined = sorted(zip(feature, target), key=lambda x: x[0])\n    feature_sorted = [x[0] for x in combined]\n    target_sorted = [x[1] for x in combined]\n\n    # Calculate the entropy of the parent node\n    parent_entropy = entropy(target_sorted)\n\n    # Find all distinct feature values\n    distinct_features = []\n    for i in range(len(feature_sorted) - 1):\n        if feature_sorted[i] != feature_sorted[i + 1]:\n            distinct_features.append((feature_sorted[i] + feature_sorted[i + 1]) / 2)\n\n    best_threshold = None\n    max_information_gain = 0.0\n\n    for threshold in distinct_features:\n        left_target = [target_sorted[i] for i in range(len(feature_sorted)) if feature_sorted[i] < threshold]\n        right_target = [target_sorted[i] for i in range(len(feature_sorted)) if feature_sorted[i] >= threshold]\n\n        left_entropy = entropy(left_target)\n        right_entropy = entropy(right_target)\n\n        # Calculate the information gain for the current split\n        information_gain = parent_entropy - (\n            (len(left_target) / len(target_sorted)) * left_entropy +\n            (len(right_target) / len(target_sorted)) * right_entropy\n        )\n\n        # Update the best threshold and information gain if the current one is better\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_threshold = threshold\n\n    return (round(best_threshold, 4) if best_threshold is not None else None, round(max_information_gain, 4))\n\n# Example usage\nfeature = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ntarget = [0, 0, 1, 1, 1, 0, 1, 0, 1]\nprint(best_split(feature, target))\n```\n\nThis Python script provides a function `best_split` that calculates the optimal numerical threshold for a decision tree split based on information gain. It handles the sorting of feature values, computation of entropy, and determination of the best split threshold. The function returns the optimal threshold and the corresponding information gain, both rounded to 4 decimal places."}
{"task_id": 286, "completion_id": 0, "completion": "```python\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    return [[0.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    return [[1.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    return [[random.uniform(low, high) for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError(\"Invalid initialization function.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    name = \"ones_init\"\n    shape = (2, 2)\n    init_fn = get_initializer(name)\n    output = init_fn(shape)\n    print(output)\n```"}
{"task_id": 287, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n    \n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n    out_h = (H - p_h) // s_h + 1\n    out_w = (W - p_w) // s_w + 1\n    \n    # Initialize output\n    output = np.zeros((N, C, out_h, out_w))\n    \n    # Forward pass\n    for i in range(out_h):\n        for j in range(out_w):\n            h_start, w_start = i * s_h, j * s_w\n            h_end, w_end = h_start + p_h, w_start + p_w\n            output[:, :, i, j] = np.mean(X[:, :, h_start:h_end, w_start:w_end], axis=(2, 3))\n    \n    # Backward pass\n    grad_input = np.zeros_like(X)\n    for i in range(out_h):\n        for j in range(out_w):\n            h_start, w_start = i * s_h, j * s_w\n            h_end, w_end = h_start + p_h, w_start + p_w\n            grad_input[:, :, h_start:h_end, w_start:w_end] += np.repeat(np.repeat(accum_grad[:, :, i, j][:, :, np.newaxis, np.newaxis], p_h, axis=2), p_w, axis=3) / (p_h * p_w)\n    \n    # Round and convert to list\n    output = np.round(output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    \n    return output, grad_input\n\n# Example usage\nX = np.array([[[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]]])\npool_shape = (2, 2)\nstride = (2, 2)\naccum_grad = np.array([[[[1, 2], [3, 4]]]])\n\noutput, grad_input = average_pool2d(X, pool_shape, stride, accum_grad)\nprint(\"Output:\", output)\nprint(\"Grad Input:\", grad_input)\n```\n\nThis script defines and implements the `average_pool2d` function that performs both the forward and backward passes for a 2-D average pooling layer, as described in the task. The function takes as input a 4-dimensional array representing the input data, a tuple for the pooling window size, a tuple for the stride, and a 4-dimensional array representing the accumulated gradient from the subsequent layer. It returns a tuple of two lists: the pooled output and the gradient propagated back to the input, both rounded to the nearest 4th decimal place."}
{"task_id": 290, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        return (tree_a.feature == tree_b.feature and\n                np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-8) and\n                compare_trees(tree_a.left, tree_b.left) and\n                compare_trees(tree_a.right, tree_b.right))\n    else:\n        return False\n```"}
{"task_id": 292, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                           parent2: list[list[int | float]],\n                           cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    # Convert the list of lists to numpy arrays\n    np_parent1 = np.array(parent1)\n    np_parent2 = np.array(parent2)\n    \n    # Validate that the two parent matrices have the same shape\n    if np_parent1.shape != np_parent2.shape:\n        return -1\n    \n    # Number of columns\n    num_cols = np_parent1.shape[1]\n    \n    # Validate the cutoff\n    if not (0 <= cutoff <= num_cols):\n        return -1\n    \n    # Create the children by slicing and swapping columns\n    child1 = np.concatenate((np_parent1[:, :cutoff], np_parent2[:, cutoff:]), axis=1)\n    child2 = np.concatenate((np_parent2[:, :cutoff], np_parent1[:, cutoff:]), axis=1)\n    \n    # Convert the numpy arrays back to lists of lists\n    child1_list = child1.tolist()\n    child2_list = child2.tolist()\n    \n    return (child1_list, child2_list)\n\n# Example usage:\nparent1 = [[1, 2, 3], [4, 5, 6]]\nparent2 = [[7, 8, 9], [10, 11, 12]]\ncutoff = 1\n\n# Call the function\nchildren = single_point_crossover(parent1, parent2, cutoff)\nprint(children)\n```\n\nThis Python script defines a function `single_point_crossover` which performs a single-point column crossover on two provided parent weight matrices. The function checks if the matrices have the same shape and then performs the crossover by swapping columns based on the provided cutoff value. The results are returned as a tuple of two children matrices, each represented as a list of lists."}
{"task_id": 294, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    is_directed = G['is_directed']\n    v2i = G['_V2I']\n    adj = {label: [] for label in v2i}\n    \n    for i, edges in enumerate(G['_G']):\n        for edge in edges:\n            source_label = edge[0]\n            target_label = edge[1]\n            weight = edge[2]\n            adj[source_label].append((target_label, weight))\n            if not is_directed and source_label != target_label:\n                adj[target_label].append((source_label, weight))\n                \n    for label in adj:\n        adj[label].sort(key=lambda x: x[0])\n    \n    return adj\n\n# Example usage\nG = {\n    'is_directed': False,\n    '_V2I': {'A': 0, 'B': 1, 'C': 2},\n    '_G': [\n        [('A', 'B', 1.0), ('A', 'C', 2.0)],  # Edges from 'A'\n        [('B', 'A', 1.0)],                   # Edges from 'B'\n        [('C', 'A', 2.0)]                    # Edges from 'C'\n    ]\n}\n\nprint(to_networkx(G))\n```\nThis script defines a function `to_networkx` that converts a custom graph representation into a plain adjacency dictionary as described in the task. The function handles both directed and undirected graphs, ensures that the neighbour lists are sorted alphabetically, and includes vertices without incident edges with an empty list."}
{"task_id": 296, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    # Convert to NumPy array if not already\n    x = np.asarray(x)\n    # Check if all elements are either 0 or 1\n    return np.all(np.logical_or(x == 0, x == 1))\n\n# Test cases to verify the solution\nif __name__ == \"__main__\":\n    print(is_binary(np.array([0, 1, 1, 0])))  # Should return True\n    print(is_binary(np.array([0, 1, 2, 0])))  # Should return False\n    print(is_binary(np.array([1, 1, 1])))     # Should return True\n    print(is_binary(np.array([0.0, 1.0, 0.0])))  # Should return True\n    print(is_binary(np.array([True, False, True])))  # Should return True\n    print(is_binary(np.array([0, 1, 1, 2])))  # Should return False\n```"}
{"task_id": 298, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    # Tokenize the corpus\n    tokenized_corpus = [sentence.split() for sentence in corpus]\n    \n    # Pad the corpus if N > 1\n    if N > 1:\n        pad_token = \"<bol>\"\n        end_token = \"<eol>\"\n        tokenized_corpus = [[pad_token]*(N-1) + sentence + [end_token] for sentence in tokenized_corpus]\n    else:\n        end_token = \"<eol>\"\n    \n    # Count N-grams and (N-1)-grams\n    ngram_counts = Counter()\n    prefix_counts = Counter()\n    \n    for sentence in tokenized_corpus:\n        for i in range(len(sentence) - N + 1):\n            ngram = tuple(sentence[i:i+N])\n            prefix = tuple(sentence[i:i+N-1])\n            ngram_counts[ngram] += 1\n            prefix_counts[prefix] += 1\n    \n    # Tokenize and pad the query\n    tokenized_query = query.split()\n    if N > 1:\n        tokenized_query = [pad_token] * (N-1) + tokenized_query + [end_token]\n    \n    # If the query is too short for the requested N-gram\n    if len(tokenized_query) < N:\n        return float('-inf')\n    \n    # Calculate the log-probability\n    log_prob = 0.0\n    for i in range(len(tokenized_query) - N + 1):\n        ngram = tuple(tokenized_query[i:i+N])\n        prefix = tuple(tokenized_query[i:i+N-1])\n        if ngram_counts[ngram] == 0 or prefix_counts[prefix] == 0:\n            return float('-inf')\n        prob = ngram_counts[ngram] / prefix_counts[prefix]\n        log_prob += math.log(prob)\n    \n    return round(log_prob, 4)\n\n# Example usage:\ncorpus = [\"a b a\", \"b a b\"]\nquery = \"a b\"\nN = 1\nprint(ngram_log_prob(corpus, query, N))  # Output: -1.3863\n```\n\nThis script implements the function `ngram_log_prob` as described in the task. It tokenizes the corpus and the query, calculates the necessary counts, and computes the log-probability of the query according to the MLE N-gram model."}
{"task_id": 302, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n_samples, _ = X.shape\n    \n    # Building the adjacency matrix W\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i+1, n_samples):\n            dist = np.linalg.norm(X[i] - X[j])\n            W[i, j] = W[j, i] = 1 / (1 + dist)\n    \n    # Compute the degree matrix D\n    D = np.diag(np.sum(W, axis=1))\n    \n    # Compute the graph Laplacian L\n    L = D - W\n    \n    # Obtain the first k eigenvectors of L\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    \n    # Normalize the rows of E\n    row_norms = np.linalg.norm(E, axis=1, keepdims=True)\n    E_normalized = E / row_norms\n    \n    # Run k-means on the rows of E\n    centroids = E_normalized[:k].copy()\n    labels = np.zeros(n_samples, dtype=int)\n    for _ in range(100):\n        # Assign each sample to the nearest centroid\n        dists = np.linalg.norm(E_normalized[:, np.newaxis] - centroids, axis=2)\n        new_labels = np.argmin(dists, axis=1)\n        \n        # Check if assignments have changed\n        if np.all(labels == new_labels):\n            break\n        \n        labels = new_labels\n        \n        # Update the centroids\n        for i in range(k):\n            cluster_samples = E_normalized[labels == i]\n            if cluster_samples.size > 0:\n                centroids[i] = np.mean(cluster_samples, axis=0)\n            else:\n                # Re-initialise empty cluster centroids\n                centroids[i] = E_normalized[np.random.choice(n_samples)]\n    \n    return labels.tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [1, 4], [1, 0], [10, 2], [10, 4], [10, 0]])\n# k = 2\n# print(spectral_clustering(X, k))\n```\n\nThis script implements the Spectral Clustering algorithm from scratch as per the specified requirements. The approach taken ensures that all steps are carried out manually, with NumPy used only for the necessary numerical operations. The algorithm is kept deterministic by initializing the k-means centroids with the first k rows of the eigenvector matrix."}
{"task_id": 303, "completion_id": 0, "completion": "```python\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    # Determine the previous and current indices\n    prev_ix = max(ix - 1, 0)\n    curr_ix = ix\n    \n    # Extract the previous and current labels and their corresponding mine values\n    prev_label, prev_mine = params[prev_ix]\n    curr_label, curr_mine = params[curr_ix]\n    \n    # Construct the formatted string\n    formatted_string = (\n        \"------------------------- DEBUG -------------------------\\n\"  # 25 dashes\n        f\"Mine (prev) [{prev_label}]:\\n{prev_mine}\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\"\n        f\"Mine [{curr_label}]:\\n{curr_mine}\\n\"\n        f\"Theirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\"\n        \"----------------------- END DEBUG -----------------------\"   # 23 dashes\n    )\n    \n    return formatted_string\n\n# Example usage:\nparams = [(\"output1\", \"label1\"), (\"output2\", \"label2\"), (\"output3\", \"label3\")]\ngolds = {\"label1\": \"gold1\", \"label2\": \"gold2\", \"label3\": \"gold3\"}\nix = 2\nwarn_str = \"\\nWarning: This is a test warning.\"\n\nprint(err_fmt(params, golds, ix, warn_str))\n```\n\nThis Python function follows the specifications outlined in the task description and ensures that the output is formatted precisely as required, including the exact number of dashes, line breaks, and the inclusion of `warn_str` exactly as passed."}
{"task_id": 304, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.column_stack((np.ones(X.shape[0]), X))\n    \n    N, M = X.shape\n    if isinstance(mu, (int, float)):\n        mu = np.full(M, mu)\n    \n    if V is None:\n        V = np.eye(M)\n    elif isinstance(V, (int, float)):\n        V = V * np.eye(M)\n    elif isinstance(V, (list, tuple, np.ndarray)) and len(V) == M:\n        V = np.diag(V)\n    \n    V_inv = np.linalg.inv(V)\n    X_T_X = X.T @ X\n    Sigma_b_inv = V_inv + X_T_X\n    Sigma_b = np.linalg.inv(Sigma_b_inv)\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    \n    return [round(coeff, 4) for coeff in mu_b]\n\n# Example usage\nX = np.array([[1, 2], [2, 3], [3, 4]])\ny = np.array([5, 6, 7])\nprint(bayesian_posterior_mean(X, y, fit_intercept=True))\n```\n\nThis script implements the `bayesian_posterior_mean` function as specified in the task description. The function handles various inputs for `V` and `mu` as described and includes an option to fit an intercept. The example usage demonstrates how the function can be called with a simple dataset."}
{"task_id": 308, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(m):\n        return 700 * (10**(m / 2595) - 1)\n\n    # Convert limits to Mel scale and generate equally-spaced values\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n    mel_points = np.linspace(min_mel, max_mel, n_filters + 2)\n\n    # Convert Mel values back to Hertz\n    hz_points = mel_to_hz(mel_points)\n\n    # Compute the center frequencies of the DFT bins\n    bin_frequencies = np.linspace(0, fs / 2, N // 2 + 1)\n\n    # Initialize the filterbank matrix\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n\n    for i in range(n_filters):\n        # Left and right sides of the triangle\n        left_hz = hz_points[i]\n        center_hz = hz_points[i + 1]\n        right_hz = hz_points[i + 2]\n\n        for k, freq in enumerate(bin_frequencies):\n            if freq > left_hz and freq < center_hz:\n                filterbank[i, k] = (freq - left_hz) / (center_hz - left_hz)\n            elif freq > center_hz and freq < right_hz:\n                filterbank[i, k] = (right_hz - freq) / (right_hz - center_hz)\n\n    if normalize:\n        for i in range(n_filters):\n            filterbank[i] *= 2 / (hz_points[i + 2] - hz_points[i])\n\n    # Convert to Python list and round to 4 decimal places\n    filterbank = filterbank.tolist()\n    for i in range(len(filterbank)):\n        filterbank[i] = [round(x, 4) for x in filterbank[i]]\n\n    return filterbank\n```"}
{"task_id": 312, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n\n    N = window_len - 1 if symmetric else window_len\n    n = np.arange(window_len)\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n\n    bh_window = a0 - a1 * np.cos(2 * np.pi * n / N) + \\\n                a2 * np.cos(4 * np.pi * n / N) - \\\n                a3 * np.cos(6 * np.pi * n / N)\n\n    if not symmetric:\n        bh_window = bh_window[:-1]\n\n    return [round(x, 4) for x in bh_window]\n\n# Test cases\nprint(blackman_harris(0))  # []\nprint(blackman_harris(1))  # [1.0]\nprint(blackman_harris(5, symmetric=True))  # [0.0, 0.2065, 0.6814, 0.2065, 0.0]\nprint(blackman_harris(5, symmetric=False))  # [0.0, 0.2065, 0.6814, 0.2065]\n```"}
{"task_id": 313, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef digamma(x, precision=1e-12):\n    \"\"\"Approximate the digamma function \u03c8(x) using the given precision.\"\"\"\n    # Shift x to a moderate value using the digamma recursion\n    while x < 6:\n        x += 1\n    # Apply the asymptotic expansion\n    term = 1 / (12 * x**2)\n    result = math.log(x) - 0.5 / x - term + term / (2 * x**2)\n    # Reverse the recursion\n    for _ in range(6 - int(x)):\n        result -= 1 / x\n        x -= 1\n    return result\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    # Convert gamma to a numpy array if it's a list\n    if isinstance(gamma, list):\n        gamma = np.array(gamma)\n    # Calculate the digamma values\n    psi_gamma_t = digamma(gamma[d, t])\n    psi_sum_gamma_d = digamma(np.sum(gamma[d, :]))\n    # Calculate the expectation and round it to 4 decimal places\n    expectation = psi_gamma_t - psi_sum_gamma_d\n    return round(expectation, 4)\n\n# Example usage\ngamma = np.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])\nd = 0\nt = 1\nresult = expected_log_dirichlet(gamma, d, t)\nprint(result)  # This should print the expected result rounded to 4 decimal places\n```\n\nThis script introduces a `digamma` function that approximates the digamma function using recursion and an asymptotic expansion. It then uses this function to compute the expected logarithm of a component of a Dirichlet-distributed vector, as specified in the task."}
{"task_id": 317, "completion_id": 0, "completion": "```python\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_prediction, prev_label = params[prev_ix]\n    curr_prediction, curr_label = params[ix]\n    \n    prev_gold = golds.get(prev_label, \"\")\n    curr_gold = golds.get(curr_label, \"\")\n    \n    report = f\"------------------------- DEBUG -------------------------\\n\"\n    report += f\"Mine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\n\"\n    report += f\"Theirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\n\"\n    report += f\"Mine [{curr_label}]:\\n{curr_prediction}\\n\\n\"\n    report += f\"Theirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n\"\n    report += f\"----------------------- END DEBUG -----------------------\"\n    \n    return report\n\n# Example usage:\nparams = [(\"Prediction 1\", \"label1\"), (\"Prediction 2\", \"label2\"), (\"Prediction 3\", \"label3\")]\ngolds = {\"label1\": \"Gold 1\", \"label2\": \"Gold 2\", \"label3\": \"Gold 3\"}\nix = 1\nwarn_str = \" (WARNING: mismatch)\"\n\nprint(err_fmt(params, golds, ix, warn_str))\n```\n```"}
{"task_id": 318, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    def decision_stump(X, y, weights):\n        best_error = float('inf')\n        best_feature = None\n        best_threshold = 0\n        best_polarity = 0\n        \n        for feature in range(X.shape[1]):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = polarity * np.sign(X[:, feature] - threshold)\n                    error = np.sum(weights[predictions != y])\n                    if error < best_error:\n                        best_error = error\n                        best_feature = feature\n                        best_threshold = threshold\n                        best_polarity = polarity\n        return best_feature, best_threshold, best_polarity, best_error\n    \n    n_samples, n_features = X_train.shape\n    weights = np.ones(n_samples) / n_samples\n    estimators = []\n    alphas = []\n\n    for _ in range(n_estimators):\n        feature, threshold, polarity, error = decision_stump(X_train, y_train, weights)\n        alpha = 0.5 * math.log((1 - error) / error)\n        alphas.append(alpha)\n        estimators.append((feature, threshold, polarity))\n\n        predictions = polarity * np.sign(X_train[:, feature] - threshold)\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n\n    def stump_predict(x, feature, threshold, polarity):\n        return polarity * np.sign(x[feature] - threshold)\n    \n    predictions = np.zeros(len(X_test))\n    for alpha, (feature, threshold, polarity) in zip(alphas, estimators):\n        predictions += alpha * np.array([stump_predict(x, feature, threshold, polarity) for x in X_test])\n    \n    return [1 if pred > 0 else -1 for pred in predictions]\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([-1, -1, 1, 1])\n# X_test = np.array([[1.5, 2.5], [3.5, 4.5]])\n# predictions = adaboost_predict(X_train, y_train, X_test, n_estimators=3)\n# print(predictions)  # Output: [-1, 1]\n```"}
{"task_id": 329, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n\n    bin_frequencies = np.fft.fftfreq(N, 1/fs)\n    if positive_only:\n        bin_frequencies = bin_frequencies[:N//2 + 1]\n    return [round(freq, 4) for freq in bin_frequencies.tolist()]\n\n# Example checks\nprint(dft_bins(8, 1000, True))  # [0.0, 125.0, 250.0, 375.0]\nprint(dft_bins(8, 1000, False)) # [0.0, 125.0, 250.0, 375.0, -375.0, -250.0, -125.0]\n```"}
{"task_id": 331, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    if isinstance(y_true, list):\n        y_true = np.array(y_true)\n    if isinstance(predictions, list):\n        predictions = np.array(predictions)\n    if isinstance(oob_mask, list):\n        oob_mask = np.array(oob_mask)\n\n    n_samples, n_estimators = predictions.shape\n\n    oob_errors = []\n    for i in range(n_samples):\n        oob_pred = predictions[i][oob_mask[i]]\n        if len(oob_pred) > 0:\n            avg_oob_pred = np.mean(oob_pred)\n            oob_errors.append((avg_oob_pred - y_true[i]) ** 2)\n\n    if len(oob_errors) == 0:\n        return -1\n\n    oob_mse = np.mean(oob_errors)\n    return round(oob_mse, 4)\n\n# Example usage:\ny_true = np.array([1.0, 2.0, 3.0, 4.0, 5.0])\npredictions = np.array([\n    [1.5, 1.2, 0.9],\n    [2.1, 1.8, 2.3],\n    [2.9, 3.1, 3.0],\n    [3.9, 4.1, 4.2],\n    [4.8, 5.2, 5.1]\n])\noob_mask = np.array([\n    [1, 0, 1],\n    [0, 1, 1],\n    [1, 1, 0],\n    [0, 0, 1],\n    [1, 1, 1]\n])\n\nprint(oob_mse(y_true, predictions, oob_mask))  # Output should be the OOB-MSE\n```"}
{"task_id": 332, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nfrom typing import List\n\ndef build_fp_tree(transactions: List[List[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    # Count the support of each item\n    item_counts = Counter(item for transaction in transactions for item in set(transaction))\n    \n    # Filter out items that do not meet the minimum support\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_support}\n    \n    # Sort items by decreasing support, then alphabetically\n    sorted_items = sorted(frequent_items.items(), key=lambda x: (-x[1], x[0]))\n    \n    # Create a mapping from item to its sorted position\n    item_order = {item: idx for idx, (item, _) in enumerate(sorted_items)}\n    \n    # Initialize the root of the FP-Tree\n    root = {\"support\": 0, \"children\": {}}\n    \n    # Process each transaction\n    for transaction in transactions:\n        frequent_transaction = sorted((item for item in set(transaction) if item in frequent_items), key=lambda x: item_order[x])\n        if frequent_transaction:\n            update_tree(root, frequent_transaction)\n    \n    return root\n\ndef update_tree(node: dict, transaction: List[str]):\n    \"\"\"Helper function to update the FP-Tree with the given transaction.\"\"\"\n    node[\"support\"] += 1\n    if not transaction:\n        return\n    item, *remaining = transaction\n    if item not in node[\"children\"]:\n        node[\"children\"][item] = {\"support\": 0, \"children\": {}}\n    update_tree(node[\"children\"][item], remaining)\n\n# Example usage:\ntransactions = [\n    [\"a\", \"b\", \"c\"],\n    [\"a\", \"b\", \"d\"],\n    [\"a\", \"b\", \"c\", \"d\"],\n    [\"b\", \"c\", \"e\"],\n    [\"b\", \"c\", \"d\", \"e\"]\n]\nmin_support = 2\nfp_tree = build_fp_tree(transactions, min_support)\nprint(fp_tree)\n```\n\nThis script defines a function `build_fp_tree` that constructs an FP-Tree from a list of transactions, following the rules specified in the task description. It uses a helper function `update_tree` to recursively update the tree structure."}
{"task_id": 336, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", Y: list[list[int | float]] | \"np.ndarray\" | None = None, c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    # Convert inputs to NumPy arrays for easier manipulation\n    X_arr = np.array(X, dtype=float)\n    if Y is None:\n        Y_arr = X_arr\n    else:\n        Y_arr = np.array(Y, dtype=float)\n    \n    # Check if input dimensions are compatible\n    if X_arr.shape[1] != Y_arr.shape[1]:\n        return -1\n    \n    # Calculate the kernel matrix\n    K = np.dot(X_arr, Y_arr.T) + c0\n    \n    # Round the result to 4 decimal places and convert back to list of lists\n    K_rounded = np.round(K, decimals=4).tolist()\n    \n    return K_rounded\n\n# Example test cases\nprint(linear_kernel([[1, 2], [3, 4]], c0=1))\nprint(linear_kernel([[1, 2], [3, 4]], [[5, 6], [7, 8]], c0=1))\nprint(linear_kernel([[1, 2], [3, 4]], [[5, 6, 7], [8, 9, 10]]))  # Should return -1\n```"}
{"task_id": 340, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform one Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter starting at 1.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) as\n        python lists, each rounded to 8 decimal places.\n    \"\"\"\n    \n    # Update biased first and second moment estimates\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * (grad ** 2)\n    \n    # Compute bias-corrected moment estimates\n    m_t_hat = m_t / (1 - beta1 ** t)\n    v_t_hat = v_t / (1 - beta2 ** t)\n    \n    # Update parameter\n    param_prime = param - lr * m_t_hat / (np.sqrt(v_t_hat) + eps)\n    \n    # Convert to lists and round to 8 decimal places\n    updated_param = np.round(param_prime.flatten(), 8).tolist()\n    new_m = np.round(m_t.flatten(), 8).tolist()\n    new_v = np.round(v_t.flatten(), 8).tolist()\n    \n    return (updated_param, new_m, new_v)\n\n# Example usage\nparam = np.array([0.5, -0.2, 1.0])\ngrad = np.array([0.1, -0.3, 0.2])\nt = 1\nm = np.array([0.0, 0.0, 0.0])\nv = np.array([0.0, 0.0, 0.0])\n\nupdated_param, new_m, new_v = adam_update(param, grad, t, m, v)\nprint(f\"Updated Parameter: {updated_param}\")\nprint(f\"New First Moment: {new_m}\")\nprint(f\"New Second Moment: {new_v}\")\n```\n\nThis script implements the Adam optimisation algorithm for one step, as per the given specifications. The function `adam_update` takes as input the current parameter values, gradient, time-step, moment estimates, and various hyperparameters, and returns the updated parameter and moment estimates as rounded lists."}
{"task_id": 343, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                          rewards: list[float] | np.ndarray,\n                          retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # Sort theta_samples by rewards in descending order\n    sorted_indices = np.argsort(rewards)[::-1]\n    sorted_theta_samples = theta_samples[sorted_indices]\n    \n    # Determine the number of samples to retain and select them\n    num_retain = int(retain_prcnt * len(rewards))\n    elite_samples = sorted_theta_samples[:num_retain]\n    \n    # Compute the mean and variance of the retained samples\n    mean = np.mean(elite_samples, axis=0).tolist()\n    variance = np.var(elite_samples, axis=0).tolist()\n    \n    # Round the results to four decimal places\n    mean_rounded = [round(x, 4) for x in mean]\n    variance_rounded = [round(x, 4) for x in variance]\n    \n    return mean_rounded, variance_rounded\n\n# Example usage:\ntheta_samples = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\nrewards = [10, 20, 5, 25]\nretain_prcnt = 0.5\nmean, variance = cross_entropy_update(theta_samples, rewards, retain_prcnt)\nprint(f\"Mean: {mean}\")\nprint(f\"Variance: {variance}\")\n```\nThis script defines the function `cross_entropy_update` which processes the input parameters as described, retaining the top fraction of `theta_samples` based on their corresponding `rewards`. It then calculates and returns the mean and variance of these retained samples, ensuring both are rounded to four decimal places as required."}
{"task_id": 353, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    # Convert labels to a list if it's not already a list\n    if not isinstance(labels, list):\n        labels = list(labels)\n    \n    # If the input is empty, return 0.0\n    if len(labels) == 0:\n        return 0.0\n    \n    # Count the occurrences of each label\n    label_counts = Counter(labels)\n    \n    # Calculate the probabilities of each label\n    probabilities = [count / len(labels) for count in label_counts.values()]\n    \n    # Compute the entropy\n    entropy_value = -sum(p * math.log2(p) for p in probabilities if p > 0)\n    \n    # Return the entropy rounded to 5 decimal places\n    return round(entropy_value, 5)\n\n# Test cases\nprint(entropy([]))  # 0.0\nprint(entropy([1, 1, 1, 1]))  # 0.0\nprint(entropy([1, 2, 3, 4]))  # 2.0\nprint(entropy([1, 2, 2, 2]))  # 0.81127\n```"}
{"task_id": 354, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kernel_rows, kernel_cols, _, out_ch = W.shape\n    \n    # Apply dilation by inserting zeros between kernel elements\n    if dilation > 0:\n        new_kernel_rows = 1 + dilation * (kernel_rows - 1)\n        new_kernel_cols = 1 + dilation * (kernel_cols - 1)\n        W = np.insert(W, np.arange(1, kernel_rows) * (dilation + 1), 0, axis=0)\n        W = np.insert(W, np.arange(1, kernel_cols) * (dilation + 1), 0, axis=1)\n        kernel_rows, kernel_cols = new_kernel_rows, new_kernel_cols\n    \n    # Padding the input\n    if isinstance(pad, int):\n        pad = (pad, pad, pad, pad)\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pad = (pad[0], pad[0], pad[1], pad[1])\n    elif pad == 'same':\n        pad = ((kernel_rows - 1) // 2, (kernel_rows - 1) // 2, (kernel_cols - 1) // 2, (kernel_cols - 1) // 2)\n    X_padded = np.pad(X, ((0, 0), (pad[0], pad[1]), (pad[2], pad[3]), (0, 0)), mode='constant')\n    \n    # Compute output dimensions\n    out_rows = (in_rows + pad[0] + pad[1] - kernel_rows) // stride + 1\n    out_cols = (in_cols + pad[2] + pad[3] - kernel_cols) // stride + 1\n    \n    # im2col transformation\n    cols = np.zeros((out_rows * out_cols, kernel_rows * kernel_cols * in_ch))\n    for i in range(out_rows):\n        for j in range(out_cols):\n            r_start, r_end = i * stride, i * stride + kernel_rows\n            c_start, c_end = j * stride, j * stride + kernel_cols\n            cols[i * out_cols + j, :] = X_padded[:, r_start:r_end, c_start:c_end, :].reshape(-1)\n    \n    # Reshape kernels for GEMM\n    W_reshaped = W.reshape(-1, out_ch)\n    \n    # GEMM computation\n    out = np.dot(cols, W_reshaped).reshape(n_ex, out_rows, out_cols, out_ch)\n    \n    return out.tolist()\n\n# Example usage\nX = np.random.rand(1, 5, 5, 1)  # 1 example, 5x5 size, 1 channel\nW = np.random.rand(3, 3, 1, 2)  # 3x3 kernels, 1 input channel, 2 output channels\nstride = 1\npad = 'same'\ndilation = 0\n\noutput = conv2D(X, W, stride, pad, dilation)\nprint(output)\n```\n\nThis script implements a function `conv2D` that performs 2-D convolution using the im2col + GEMM strategy. It handles dilation, various padding types, and returns the result as a Python list."}
{"task_id": 355, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # Step 1: Standardise the data by subtracting the feature-wise mean\n    centered_data = data - np.mean(data, axis=0)\n    \n    # Step 2: Obtain the principal directions depending on the chosen solver\n    if solver == \"svd\":\n        _, _, Vt = np.linalg.svd(centered_data, full_matrices=False)\n        directions = Vt\n    elif solver == \"eigen\":\n        cov_matrix = np.cov(centered_data, rowvar=False, ddof=1)\n        eigenvalues, directions = np.linalg.eigh(cov_matrix)\n        # Sort eigenvalues and corresponding directions\n        idx = eigenvalues.argsort()[::-1]\n        eigenvalues = eigenvalues[idx]\n        directions = directions[:, idx]\n    else:\n        raise ValueError(\"Solver must be 'svd' or 'eigen'\")\n    \n    # Step 3: Sort the directions and keep the first n_components\n    if n_components > directions.shape[0]:\n        n_components = directions.shape[0]\n    directions = directions[:n_components]\n    \n    # Step 4: Make the sign of every kept direction deterministic\n    for i in range(directions.shape[0]):\n        first_non_zero_idx = np.argmax(np.abs(directions[i]))\n        if directions[i, first_non_zero_idx] < 0:\n            directions[i] *= -1\n    \n    # Step 5: Project the centred data onto the retained directions\n    scores = np.dot(centered_data, directions.T)\n    \n    # Compute explained variance ratios\n    total_variance = np.sum(np.var(centered_data, axis=0, ddof=1))\n    explained_variance = np.sum(np.var(scores, axis=0, ddof=1))\n    explained_variance_ratio = [round(var / total_variance, 4) for var in np.var(scores, axis=0, ddof=1)]\n    \n    # Step 6: Return the results\n    return (np.round(scores, 4).tolist(), explained_variance_ratio)\n\n# Example usage:\ndata = np.array([[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]])\nn_components = 1\nsolver = \"svd\"\nscores, explained_variance_ratio = pca_transform(data, n_components, solver)\nprint(\"Scores:\", scores)\nprint(\"Explained Variance Ratio:\", explained_variance_ratio)\n```\n\nThis script contains a function `pca_transform` that performs PCA on the input data with either SVD or eigen-decomposition, as specified. It includes all the steps required, from standardizing the data to returning the final results in the correct format."}
{"task_id": 356, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # For classification, return the index of the maximum probability\n        return np.argmax(leaf.value)\n    else:\n        # For regression, return the scalar value\n        return leaf.value\n\n\n# Test examples\n# Classification example\nleaf_classification = Leaf([0.1, 0.3, 0.6])\nprint(leaf_predict(leaf_classification, classifier=True))  # Expected output: 2\n\n# Regression example\nleaf_regression = Leaf(42.3)\nprint(leaf_predict(leaf_regression, classifier=False))  # Expected output: 42.3\n```"}
{"task_id": 357, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = np.array(data[:K].copy())\n    for _ in range(max_iters):\n        # Assign each sample to the closest centroid\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Recompute centroids\n        new_centroids = np.array([data[labels == k].mean(axis=0) if np.any(labels == k) else centroids[k] for k in range(K)])\n        \n        # Check for convergence\n        if np.all(np.abs(new_centroids - centroids) < 1e-6):\n            break\n        \n        centroids = new_centroids\n    \n    # Sort centroids lexicographically and round to 4 decimals\n    sorted_centroids = np.sort(centroids, axis=0)\n    rounded_centroids = np.round(sorted_centroids, decimals=4).tolist()\n    \n    return rounded_centroids\n\n# Example usage\ndata = np.array([[1, 1],\n                 [1, 2],\n                 [2, 1],\n                 [8, 8],\n                 [9, 8],\n                 [8, 9]])\nK = 2\nprint(kmeans(data, K))\n```\n\nThis script defines the `kmeans` function that implements the K-Means clustering algorithm as described. It initializes the centroids with the first K samples, iterates to assign samples to the nearest centroid, updates centroids, and stops when centroids no longer change significantly or when the maximum number of iterations is reached. The sorted and rounded centroids are returned as a list of lists."}
{"task_id": 362, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | np.ndarray) -> list[list[float]] | int:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert the input to a NumPy array\n    matrix = np.array(data, dtype=float)\n    \n    # Compute the sum of each row\n    row_sums = np.sum(matrix, axis=1)\n    \n    # Check if there's any row with sum 0\n    if np.any(row_sums == 0):\n        return -1\n    \n    # Normalize each row\n    matrix /= row_sums[:, np.newaxis]\n    \n    # Round to 4 decimal places\n    matrix = np.round(matrix, decimals=4)\n    \n    # Convert back to a Python list and return\n    return matrix.tolist()\n\n# Example check function to verify the correctness of the generated function\ndef check_function():\n    # Test cases\n    test_cases = [\n        ([[1, 2], [3, 4]], [[0.3333, 0.6667], [0.4286, 0.5714]]),\n        ([[0, 0], [3, 6]], -1),\n        ([[1, 2, 3], [4, 5, 6]], [[0.1667, 0.3333, 0.5], [0.2667, 0.3333, 0.4]])\n    ]\n    \n    for i, (input_data, expected) in enumerate(test_cases, 1):\n        result = row_stochastic_matrix(input_data)\n        if result == expected:\n            print(f\"Test case {i}: Passed\")\n        else:\n            print(f\"Test case {i}: Failed - Expected {expected}, got {result}\")\n\n# Run the check function to verify the results\ncheck_function()\n```\n\nThis script contains the `row_stochastic_matrix` function that performs the required conversion and rounds the results to 4 decimal places, returning the result as a Python list of lists. The `check_function` is provided to validate the correctness of the `row_stochastic_matrix` function against predefined test cases."}
{"task_id": 363, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    def check_continuous(space: Space) -> bool:\n        if isinstance(space, Box):\n            return True\n        elif isinstance(space, (Tuple, Dict)):\n            if isinstance(space, Tuple):\n                return all(check_continuous(sub_space) for sub_space in space.spaces)\n            elif isinstance(space, Dict):\n                return all(check_continuous(sub_space) for sub_space in space.spaces.values())\n        return False\n\n    cont_action = check_continuous(env.action_space) if tuple_action else isinstance(env.action_space, Box)\n    cont_obs = check_continuous(env.observation_space) if tuple_obs else isinstance(env.observation_space, Box)\n\n    return cont_action, cont_obs\n\n# Example usage:\naction_space = Dict({\"position\": Box(-1.0, 1.0, (2,)), \"velocity\": Box(-1.0, 1.0, (2,))})\nobservation_space = Tuple((Box(-1.0, 1.0, (2,)), Discrete(3)))\nenv = Env(action_space, observation_space)\nprint(is_continuous(env, True, True))  # Output: (True, False)\n```"}
{"task_id": 369, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    # Determine the shape of the output based on the type of problem\n    if regression:\n        running_pred = np.zeros(updates[0].shape)\n    else:\n        running_pred = np.zeros(updates[0].shape)\n\n    # Aggregate the predictions of all trees\n    for update in updates:\n        running_pred -= learning_rate * update\n\n    # Final output based on the type of problem\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        # Apply softmax to convert logits to probabilities\n        exp_vals = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        probabilities = exp_vals / np.sum(exp_vals, axis=1, keepdims=True)\n        # Return the class with the highest probability\n        return np.argmax(probabilities, axis=1)\n\n# Example usage:\n# Regression\nreg_updates = [np.array([1.2, 2.3, 3.4]), np.array([0.9, 1.1, 2.2])]\nprint(gradient_boosting_predict(reg_updates, 0.1, True))\n\n# Classification\nclf_updates = [np.array([[1.2, 0.8], [0.5, 1.5], [1.0, 2.0]]), np.array([[0.8, 1.2], [1.5, 0.5], [2.0, 1.0]])]\nprint(gradient_boosting_predict(clf_updates, 0.1, False))\n```"}
{"task_id": 371, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, _, out_channels = W.shape\n\n    # Calculate effective kernel size after dilation\n    effective_kernel = kernel_width + (kernel_width - 1) * dilation - 1\n\n    # Calculate padding\n    if isinstance(pad, str) and pad.lower() == 'same':\n        out_len = int(np.ceil(signal_length / stride))\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    elif isinstance(pad, int):\n        p_left = pad\n        p_right = pad\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        p_left, p_right = pad\n    else:\n        raise ValueError(\"Padding must be an integer, a tuple, or the string 'same'\")\n\n    # Apply padding\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n\n    # Compute output length\n    output_length = int((signal_length + p_left + p_right - effective_kernel) / stride) + 1\n\n    # Initialize output volume\n    output = np.zeros((n_examples, output_length, out_channels))\n\n    # Perform convolution\n    for i in range(n_examples):\n        for j in range(output_length):\n            for k in range(out_channels):\n                start = j * stride\n                end = start + effective_kernel + 1\n                window = X_padded[i, start:end:dilation+1, :]\n                output[i, j, k] = np.sum(window * W[:, :, k])\n\n    return output.tolist()\n\n# Example usage:\nX = np.random.randn(2, 10, 3)  # 2 examples, each of length 10, 3 input channels\nW = np.random.randn(4, 3, 2)   # 4 kernel width, 3 input channels, 2 output channels\nstride = 2\npad = 1\ndilation = 1\nprint(conv1D(X, W, stride, pad, dilation))\n```\n\nThis Python script defines the `conv1D` function that performs a 1-D cross-correlation between a batch of 1-D, multi-channel signals and a bank of kernels. It supports the specified features such as batches, multiple input/output channels, padding, stride, and dilation. The output is returned as a nested Python list."}
{"task_id": 373, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gini(y: list[int] | np.ndarray) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n\n    # Convert y to a numpy array if it's a list\n    y = np.array(y)\n    \n    # Calculate the frequency of each class\n    _, counts = np.unique(y, return_counts=True)\n    N = len(y)\n    p_squared_sum = np.sum((counts / N) ** 2)\n    \n    # Calculate Gini impurity\n    gini_impurity = 1 - p_squared_sum\n    return round(gini_impurity, 4)\n\n# Example usage and testing the function\nprint(gini([1, 1, 2, 2]))  # Expected output: 0.5\nprint(gini([1, 1, 1, 1]))  # Expected output: 0.0\nprint(gini([1, 2, 3, 4, 5]))  # Expected output: 0.8\nprint(gini([]))  # Expected output: 0.0\n```"}
{"task_id": 374, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\"\"\"\n    m, n = X.shape\n    \n    # Check if inputs are consistent\n    if m != len(y):\n        return -1\n    \n    # Initialize parameters\n    theta = np.zeros(n)\n    b = 0.0\n    \n    for _ in range(n_iterations):\n        # Compute predictions\n        y_pred = np.dot(X, theta) + b\n        # Compute gradients\n        dw = 2 / m * np.dot(X.T, y_pred - y)\n        db = 2 / m * np.sum(y_pred - y)\n        # Update parameters\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    \n    # Round the parameters and convert theta to a list\n    theta = [round(x, 4) for x in theta.tolist()]\n    b = round(b, 4)\n    \n    return (theta, b)\n\n# Example usage:\n# X = np.array([[1, 1], [1, 2], [2, 2], [2, 3]])\n# y = np.array([6, 8, 9, 11])\n# print(linear_regression_gd(X, y))\n```"}
{"task_id": 376, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Convert the list of lists to a NumPy array\n    X_np = np.array(X)\n    \n    # Check if the array is square\n    if X_np.shape[0] != X_np.shape[1]:\n        return False\n    \n    # Check if the array is equal to its transpose within the given tolerance\n    return np.allclose(X_np, X_np.T, atol=1e-8)\n\n# Example checks\nprint(is_symmetric([[1, 2], [2, 1]]))  # True\nprint(is_symmetric([[1, 2.000000001], [2, 1]]))  # True\nprint(is_symmetric([[1, 2], [3, 1]]))  # False\nprint(is_symmetric([[1, 2], [2, 1], [1, 2]]))  # False\n```"}
{"task_id": 377, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Calculates the negative gradient of the logistic (binomial deviance) loss function\n    for binary classification.\n\n    Parameters:\n    y (list): A list of binary class labels (0 or 1).\n    f (list): A list of current prediction scores.\n\n    Returns:\n    list: A list of negative gradients rounded to 4 decimal places.\n    If y contains values other than 0 or 1, returns -1.\n    \"\"\"\n    # Check if y contains only binary labels\n    if not all(label in [0, 1] for label in y):\n        return -1\n    \n    # Convert labels to {-1, 1}\n    y_prime = [2*label - 1 for label in y]\n    \n    # Calculate negative gradients\n    g = [yf / (1 + np.exp(yf * f[i])) for i, yf in enumerate(y_prime)]\n    \n    # Round to 4 decimal places\n    g_rounded = [round(gradient, 4) for gradient in g]\n    \n    return g_rounded\n\n# Example usage\ny = [0, 1, 0, 1]\nf = [0.5, -0.3, 1.0, -0.2]\nprint(logistic_negative_gradient(y, f))\n```\n\nThis code snippet defines the `logistic_negative_gradient` function as requested, which calculates the negative gradient of the logistic loss function for given binary class labels `y` and current prediction scores `f`. It includes a check to ensure that `y` contains only binary labels (0 or 1) and returns -1 if this condition is not met. The negative gradient values are calculated, rounded to four decimal places, and returned in a list."}
{"task_id": 380, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    # SELU parameters\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n    \n    # Convert x to a NumPy array if it is a list or scalar\n    x = np.array(x, dtype=np.float64)\n    result = np.zeros_like(x)\n    \n    if order == 0:\n        # SELU(x)\n        result[x > 0] = scale * x[x > 0]\n        result[x <= 0] = scale * alpha * (np.exp(x[x <= 0]) - 1)\n    elif order == 1:\n        # First derivative d(SELU)/dx\n        result[x > 0] = scale\n        result[x <= 0] = scale * alpha * np.exp(x[x <= 0])\n    elif order == 2:\n        # Second derivative d\u00b2(SELU)/dx\u00b2\n        result[x > 0] = 0\n        result[x <= 0] = scale * alpha * np.exp(x[x <= 0])\n    \n    # Round to 4 decimal places\n    result = np.round(result, 4)\n    \n    # Convert back to list if input was list or scalar\n    if isinstance(x, (list, float)):\n        return result.tolist()\n    else:\n        return result\n\n# Test the function\nx = [-1, 0, 1]\nprint(selu(x, order=0))  # SELU(x)\nprint(selu(x, order=1))  # First derivative\nprint(selu(x, order=2))  # Second derivative\n```"}
{"task_id": 387, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    predictions = np.full_like(y, np.mean(y), dtype=float)\n    \n    for _ in range(n_estimators):\n        residuals = y - predictions\n        sorted_indices = np.argsort(x)\n        x_sorted = x[sorted_indices]\n        residuals_sorted = residuals[sorted_indices]\n        \n        best_t = None\n        best_error = float('inf')\n        \n        for i in range(1, len(x_sorted)):\n            if x_sorted[i] != x_sorted[i - 1]:\n                t = (x_sorted[i] + x_sorted[i - 1]) / 2\n                left = residuals_sorted[x_sorted <= t]\n                right = residuals_sorted[x_sorted > t]\n                error = np.sum(left ** 2) + np.sum(right ** 2)\n                \n                if error < best_error:\n                    best_error = error\n                    best_t = t\n        \n        if best_t is None:\n            stump_prediction = np.full_like(residuals, np.mean(residuals))\n        else:\n            stump_prediction = np.where(x <= best_t, np.mean(residuals[x <= best_t]), np.mean(residuals[x > best_t]))\n        \n        predictions += learning_rate * stump_prediction\n    \n    return np.round(predictions, 4).tolist()\n\n# Example usage:\nx = [1.0, 2.0, 3.0, 4.0, 5.0]\ny = [1.1, 2.1, 2.9, 4.1, 5.0]\nn_estimators = 100\nlearning_rate = 0.1\npredictions = gradient_boosting_1d(x, y, n_estimators, learning_rate)\nprint(predictions)\n```\n\nThis script implements the described Gradient Boosting Regressor for one-dimensional stumps. It takes lists of `x` and `y` values, the number of estimators, and a learning rate, and it returns predictions rounded to four decimal places. The provided example usage shows how to call the function and print its results."}
{"task_id": 394, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-8\n    \n    # Initialize Eg if it is None\n    if Eg is None:\n        Eg = np.zeros_like(grad, dtype=np.float64)\n    \n    # Update the running average of squared gradients\n    Eg = rho * Eg + (1 - rho) * np.power(grad, 2)\n    \n    # Update the parameters\n    w = w - (learning_rate * grad) / (np.sqrt(Eg) + epsilon)\n    \n    # Round and convert to list\n    w_next = np.round(w, decimals=4).tolist()\n    Eg_next = np.round(Eg, decimals=4).tolist()\n    \n    return w_next, Eg_next\n\n# Example usage\nw = np.array([1.0, 2.0, 3.0])\ngrad = np.array([0.1, 0.2, 0.3])\nEg = None\n\nw_next, Eg_next = rmsprop_update(w, grad, Eg)\nprint(f\"Updated parameters: {w_next}\")\nprint(f\"Updated running average: {Eg_next}\")\n```\n\nThis script defines and implements the `rmsprop_update` function as specified, performing one update step of the RMSprop optimizer and returning the updated parameters and running average in the required format."}
{"task_id": 398, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if derivative:\n        # Compute the derivative of the ELU function\n        grad = np.where(x >= 0, 1, alpha * np.exp(x) + alpha)\n        return [round(float(g), 4) for g in grad]\n    else:\n        # Compute the ELU function\n        elu_values = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n        return [round(float(v), 4) for v in elu_values]\n\n# Example usage\nx = [-2.0, -1.0, 0.0, 1.0, 2.0]\nalpha = 0.1\nprint(elu(x, alpha, derivative=False))  # ELU activation\nprint(elu(x, alpha, derivative=True))   # ELU gradient\n```"}
{"task_id": 411, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    def analyze(items):\n        tuple_items = any(isinstance(x, (tuple, list, np.ndarray)) for x in items)\n        if tuple_items:\n            items = [np.array(x) for x in items]\n            if all(x.size == 1 for x in items):\n                items = [x.item() for x in items]\n            else:\n                items = [x.tolist() for x in items]\n        multidim_items = any(isinstance(x, (list, tuple, np.ndarray)) for x in items)\n        continuous_items = any(isinstance(x, float) and not x.is_integer() for x in items if not isinstance(x, (list, tuple, np.ndarray)))\n        if multidim_items:\n            items = np.array(items)\n            unique_items = [np.unique(items[:, i]).tolist() for i in range(items.shape[1])]\n            n_unique_per_dim = [len(u) for u in unique_items]\n        else:\n            unique_items = [np.unique(items).tolist()]\n            n_unique_per_dim = [len(unique_items[0])]\n        return tuple_items, multidim_items, continuous_items, n_unique_per_dim, unique_items, items.shape[1] if multidim_items else 1\n\n    tuple_actions, multidim_actions, continuous_actions, n_actions_per_dim, action_ids, action_dim = analyze(actions)\n    tuple_observations, multidim_observations, continuous_observations, n_obs_per_dim, obs_ids, obs_dim = analyze(observations)\n\n    return {\n        'tuple_actions': tuple_actions,\n        'tuple_observations': tuple_observations,\n        'multidim_actions': multidim_actions,\n        'multidim_observations': multidim_observations,\n        'continuous_actions': continuous_actions,\n        'continuous_observations': continuous_observations,\n        'n_actions_per_dim': n_actions_per_dim,\n        'action_dim': action_dim,\n        'n_obs_per_dim': n_obs_per_dim,\n        'obs_dim': obs_dim,\n        'action_ids': action_ids,\n        'obs_ids': obs_ids\n    }\n\n# Example usage:\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]\nprint(env_stats(actions, observations))\n```\n\nThis Python script defines the `env_stats` function according to the task description. It analyzes the `actions` and `observations` lists to determine the required statistics, using helper logic to handle multidimensional and scalar cases. The output dictionary contains the statistics in the exact format specified."}
{"task_id": 413, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    def mse(y):\n        return np.mean((y - np.mean(y)) ** 2)\n\n    def find_best_split(X, y):\n        best_feature, best_value, best_error = None, None, float('inf')\n        for feature in range(X.shape[1]):\n            for value in np.unique(X[:, feature]):\n                left = y[X[:, feature] <= value]\n                right = y[X[:, feature] > value]\n                error = mse(left) * len(left) + mse(right) * len(right)\n                if error < best_error:\n                    best_feature, best_value, best_error = feature, value, error\n        return best_feature, best_value\n\n    class DecisionTree:\n        def __init__(self, max_depth):\n            self.max_depth = max_depth\n            self.tree = None\n\n        def fit(self, X, y):\n            self.tree = self._grow_tree(X, y, depth=1)\n\n        def _grow_tree(self, X, y, depth):\n            if depth > self.max_depth or len(np.unique(y)) == 1:\n                return {'value': np.mean(y)}\n            feature, value = find_best_split(X, y)\n            left = X[:, feature] <= value\n            right = X[:, feature] > value\n            return {\n                'feature': feature,\n                'value': value,\n                'left': self._grow_tree(X[left], y[left], depth + 1),\n                'right': self._grow_tree(X[right], y[right], depth + 1)\n            }\n\n        def predict(self, X):\n            return [self._predict(inputs) for inputs in X]\n\n        def _predict(self, inputs):\n            node = self.tree\n            while 'value' not in node:\n                if inputs[node['feature']] <= node['value']:\n                    node = node['left']\n                else:\n                    node = node['right']\n            return node['value']\n\n    # Initialize prediction with the mean of y_train\n    y_pred = np.full_like(y_train, np.mean(y_train))\n    for _ in range(n_estimators):\n        # Compute residuals (negative gradients of squared error loss)\n        residuals = y_train - y_pred\n\n        # Fit a CART regression tree to the residuals\n        tree = DecisionTree(max_depth)\n        tree.fit(X_train, residuals)\n\n        # Update the running prediction\n        y_pred += learning_rate * np.array(tree.predict(X_train))\n\n    # Make predictions on the test data\n    test_predictions = [np.mean(y_train)] * len(y_train)\n    for _ in range(n_estimators):\n        residuals = y_train - np.array(test_predictions)\n        tree.fit(X_train, residuals)\n        test_predictions = np.array(test_predictions) + learning_rate * np.array(tree.predict(X_test))\n\n    return [round(float(pred), 4) for pred in test_predictions]\n\n# Example usage:\nX_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\ny_train = np.array([2, 3, 5, 6])\nX_test = np.array([[1, 3], [3, 5]])\npredictions = gbdt_regression(X_train, y_train, X_test)\nprint(predictions)\n```\n\nThis code provides a basic implementation of a Gradient Boosting Decision Tree (GBDT) regressor using only NumPy. It fits a series of decision trees to the residuals of the previous predictions, gradually improving the model's performance. The predictions for the test set are returned as a Python list with each value rounded to four decimal places."}
{"task_id": 416, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Calculate the multivariate Gaussian (Normal) distribution's probability density function (PDF) for a given set of points.\n    \n    :param X: A NumPy array of shape (n_samples, n_features) containing the data points for which the PDF values must be evaluated.\n    :param mean: The mean vector of the distribution (length n_features).\n    :param cov: The covariance matrix of shape (n_features, n_features) which must be positive-definite (invertible).\n    :return: A Python list containing the PDF values for each sample in X rounded to four decimal places.\n    \"\"\"\n    # Handle the case for 1D array input\n    if len(X.shape) == 1:\n        X = X.reshape(-1, 1)\n    \n    # Number of features\n    d = len(mean)\n    # Inverse of covariance matrix\n    cov_inv = np.linalg.inv(cov)\n    # Determinant of covariance matrix\n    det_cov = np.linalg.det(cov)\n    # Normalization factor\n    norm_factor = 1 / np.sqrt((2 * np.pi) ** d * det_cov)\n    pdf_values = []\n    \n    for x in X:\n        # Calculate the difference between the sample and the mean\n        diff = x - mean\n        # Exponential part\n        exp_factor = np.exp(-0.5 * np.dot(np.dot(diff, cov_inv), diff))\n        # PDF value for the current sample\n        pdf_value = norm_factor * exp_factor\n        pdf_values.append(round(pdf_value, 4))\n    \n    return pdf_values\n\n# Example usage\nmean = np.array([0, 0])\ncov = np.array([[1, 0.5], [0.5, 1]])\nX = np.array([[0, 0], [1, 1], [-1, -1]])\n\nprint(multivariate_gaussian_pdf(X, mean, cov))\n```\n\nThis code defines the `multivariate_gaussian_pdf` function, which computes the PDF values for each sample in the input array `X` according to the provided mean vector and covariance matrix. It includes handling for 1D array inputs and rounds the PDF values to the nearest four decimal places as required."}
{"task_id": 419, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.column_stack((np.ones(X.shape[0]), X))\n        X_new = np.column_stack((np.ones(X_new.shape[0]), X_new))\n    \n    if isinstance(V, (int, float)):\n        V = V * np.eye(X.shape[1])\n    elif V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, np.ndarray) and V.ndim == 1:\n        V = np.diag(V)\n    \n    # Compute the precision matrix (inverse covariance)\n    V_inv = np.linalg.inv(V)\n    \n    # Compute the posterior precision and mean\n    posterior_precision = V_inv + X.T @ X\n    posterior_mean = np.linalg.inv(posterior_precision) @ (V_inv @ mu + X.T @ y)\n    \n    # Compute the MAP predictive mean for each row in X_new\n    y_pred = X_new @ posterior_mean\n    \n    return [round(val, 4) for val in y_pred]\n\n# Example usage:\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([2, 4, 6])\nX_new = np.array([[7, 8], [9, 10]])\nmu = 0.0\nsigma = 1.0\nV = 1.0\nfit_intercept = True\n\npredictions = bayesian_linear_regression_pred(X, y, X_new, mu, sigma, V, fit_intercept)\nprint(predictions)\n```\n\nThis script implements Bayesian linear regression as described in the task, with the ability to add an intercept, handle different forms of the prior variance matrix `V`, and compute the posterior distribution to predict new values. The predictions are rounded to four decimal places and returned as a list of floats."}
{"task_id": 423, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculates the Root Mean Squared Logarithmic Error (RMSLE) for two lists of non-negative numbers.\n    \n    Args:\n    actual (list of float): The actual target values.\n    predicted (list of float): The predicted target values.\n    \n    Returns:\n    float: The RMSLE rounded to four decimal places, or -1 if inputs are invalid.\n    \"\"\"\n    # Validate inputs\n    if len(actual) != len(predicted):\n        return -1\n    if any(x < 0 for x in actual) or any(x < 0 for x in predicted):\n        return -1\n\n    # Calculate RMSLE\n    n = len(actual)\n    log_diffs_squared = [(np.log(1 + predicted[i]) - np.log(1 + actual[i])) ** 2 for i in range(n)]\n    rmsle = np.sqrt(np.sum(log_diffs_squared) / n)\n    \n    return round(rmsle, 4)\n\n# Example usage\nactual = [1.0, 2.0, 3.0, 4.0, 5.0]\npredicted = [0.8, 2.1, 2.8, 4.2, 5.0]\nprint(root_mean_squared_log_error(actual, predicted))\n```\n\nThis Python script defines a function `root_mean_squared_log_error` that computes the RMSLE metric for two lists of non-negative numbers, adhering to the constraints and requirements specified in the task description."}
{"task_id": 428, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    else:\n        if symmetric:\n            n = window_len\n        else:\n            n = window_len + 1\n        hann_window = [0.5 - 0.5 * math.cos(2 * math.pi * i / (n - 1)) for i in range(n)]\n        if not symmetric:\n            hann_window = hann_window[:-1]\n        return [round(x, 4) for x in hann_window]\n\n# Test the function\nprint(hann(5))  # [0.0, 0.25, 0.75, 0.75, 0.25]\nprint(hann(5, symmetric=True))  # [0.0, 0.25, 0.75, 0.75, 0.25]\nprint(hann(5, symmetric=False))  # [0.0, 0.25, 0.75, 0.75]\n```"}
{"task_id": 433, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:  # Convolutional kernel case\n        out_channels, in_channels, kernel_height, kernel_width = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = float(in_channels * receptive_field_size)\n        fan_out = float(out_channels * receptive_field_size)\n    else:  # General case\n        fan_in = float(shape[1])\n        fan_out = float(shape[0])\n    return fan_in, fan_out\n\n# Test cases\nprint(glorot_fan((32, 64)))  # General case, (64, 32.0)\nprint(glorot_fan((16, 32, 3, 3)))  # Convolutional case, (288.0, 144.0)\nprint(glorot_fan((10, 20, 30)))  # General case, (20.0, 10.0)\n```"}
{"task_id": 435, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]],\n                                y: list[float],\n                                n_estimators: int = 10,\n                                learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    # Convert to NumPy arrays\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n\n    # Initialize the predictions\n    y_pred = np.full_like(y, y.mean(), dtype=float)\n\n    # If n_estimators <= 0 or learning_rate = 0, return the mean of y\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(y.mean(), 4) for _ in range(len(y))]\n\n    # Gradient boosting loop\n    for _ in range(n_estimators):\n        # Compute the residuals\n        residuals = y - y_pred\n\n        # Fit linear regression to the residuals\n        coef, _, _, _ = np.linalg.lstsq(X, residuals, rcond=None)\n        intercept = residuals.mean() - X.mean(axis=0).dot(coef)\n        weak_learner_pred = X.dot(coef) + intercept\n\n        # Update the predictions\n        y_pred += learning_rate * weak_learner_pred\n\n    # Return the predictions rounded to 4 decimal places\n    return [round(pred, 4) for pred in y_pred]\n\n# Example usage\nX = [[1, 2], [3, 4], [5, 6]]\ny = [2.1, 4.2, 6.3]\npredictions = gradient_boosting_regressor(X, y, n_estimators=10, learning_rate=0.1)\nprint(predictions)\n```\nThis script implements a small-scale gradient boosting regressor as specified, using linear regression as the weak learner and squared error as the loss function. The predictions are returned as a list of floats rounded to four decimal places."}
{"task_id": 437, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    # Convert input to numpy array for easier calculations\n    x = np.array(x)\n    if order not in [0, 1, 2]:\n        return -1\n\n    # Compute the sigmoid function\n    sig = 1 / (1 + np.exp(-x))\n\n    # Compute the derivatives based on the order\n    if order == 0:\n        result = sig\n    elif order == 1:\n        result = sig * (1 - sig)\n    elif order == 2:\n        result = sig * (1 - sig) * (1 - 2 * sig)\n\n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n\n    # Return the result in the original input format\n    if isinstance(x, (int, float)):\n        return float(result)\n    else:\n        return result.tolist()\n\n# Example usage:\nprint(sigmoid(0))  # 0.5\nprint(sigmoid([0, 1], 1))  # [0.25, 0.1966]\nprint(sigmoid(np.array([0, -1, 1]), 2))  # [0.1875, 0.1462, 0.1462]\nprint(sigmoid(0, 3))  # -1\n```"}
{"task_id": 438, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    # Convert input to numpy array if it's not already\n    y = np.array(y)\n    \n    # Determine the number of classes\n    if num_classes is None:\n        num_classes = max(y) + 1\n    elif num_classes < max(y) + 1:\n        return -1\n    \n    # Create the one-hot encoded array\n    one_hot = np.eye(num_classes)[y]\n    \n    # Convert the result to a list of lists and return\n    return one_hot.tolist()\n\n# Example usage:\n# y = [0, 1, 2, 0, 2]\n# num_classes = 3\n# print(to_categorical(y, num_classes))\n# Expected output: [[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0], [0, 0, 1]]\n\n# Test cases\nprint(to_categorical([0, 1, 2, 0, 2]))  # Automatic num_classes\nprint(to_categorical([0, 1, 2, 0, 2], 3))  # Explicit num_classes\nprint(to_categorical([0, 1, 2, 3], 3))  # num_classes smaller than max(y) + 1\n```\n\nThis Python script follows the provided guidelines and includes a function `to_categorical` that performs one-hot encoding based on the task description. It also includes example usage and test cases to illustrate the expected behavior."}
{"task_id": 439, "completion_id": 0, "completion": "```python\nimport itertools\n\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    # Convert each transaction to a set for faster membership checks\n    transactions = list(map(set, transactions))\n    num_transactions = len(transactions)\n    min_sup_count = min_sup * num_transactions\n\n    # Generate candidate itemsets of size 1\n    candidates = set(item for transaction in transactions for item in transaction)\n    candidates = {frozenset([item]) for item in candidates}\n\n    frequent_itemsets = []\n    while candidates:\n        # Count support for each candidate\n        itemset_counts = {candidate: 0 for candidate in candidates}\n        for transaction in transactions:\n            for candidate in candidates:\n                if candidate.issubset(transaction):\n                    itemset_counts[candidate] += 1\n\n        # Filter candidates to keep only frequent ones\n        frequent_candidates = {candidate for candidate, count in itemset_counts.items() if count >= min_sup_count}\n        frequent_itemsets.extend(sorted(frequent_candidates))\n\n        # Generate candidate itemsets of size k+1\n        candidates = generate_candidates(frequent_candidates, len(frequent_candidates[0]) + 1)\n\n    # Convert frozensets to tuples and sort the results\n    return sorted(tuple(itemset) for itemset in frequent_itemsets)\n\ndef generate_candidates(frequent_itemsets, k):\n    \"\"\"Generate candidate itemsets of size k from frequent itemsets of size k-1.\"\"\"\n    candidates = set()\n    for itemset1 in frequent_itemsets:\n        for itemset2 in frequent_itemsets:\n            candidate = itemset1.union(itemset2)\n            if len(candidate) == k and is_valid_candidate(candidate, frequent_itemsets):\n                candidates.add(candidate)\n    return candidates\n\ndef is_valid_candidate(candidate, frequent_itemsets):\n    \"\"\"Check if candidate is valid by ensuring all its subsets of size k-1 are frequent.\"\"\"\n    for subset in itertools.combinations(candidate, len(candidate) - 1):\n        if frozenset(subset) not in frequent_itemsets:\n            return False\n    return True\n\n# Example usage:\ntransactions = [\n    [1, 2, 3],\n    [2, 3],\n    [3, 4],\n    [1, 2, 4],\n    [2, 3, 4],\n    [1, 2, 3, 4, 5]\n]\nmin_sup = 0.5\nprint(apriori_frequent_itemsets(transactions, min_sup))\n```\n\nThis script implements the Apriori algorithm according to the specified requirements. It finds frequent itemsets from a list of transactions given a minimum support threshold. The output is a list of tuples representing the frequent itemsets, sorted by their size and lexicographically within each size group."}
{"task_id": 440, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\"\"\"\n    # Convert the nested list into a numpy array for easier manipulation\n    predictions_array = np.array(predictions)\n    \n    # Average the probability vectors over all estimators for every sample\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n    \n    # Round every averaged probability to four decimal places\n    rounded_probabilities = np.round(averaged_probabilities, 4)\n    \n    # Find the index of the class with the maximal probability for each sample\n    predicted_classes = np.argmax(rounded_probabilities, axis=1)\n    \n    # Convert numpy arrays back to python lists\n    rounded_probabilities_list = rounded_probabilities.tolist()\n    predicted_classes_list = predicted_classes.tolist()\n    \n    return rounded_probabilities_list, predicted_classes_list\n\n# Example usage\npredictions = [\n    [[0.1, 0.6, 0.3], [0.2, 0.2, 0.6]],\n    [[0.2, 0.5, 0.3], [0.3, 0.3, 0.4]],\n    [[0.1, 0.7, 0.2], [0.1, 0.6, 0.3]]\n]\n\nrounded_probs, predicted_classes = aggregate_predictions(predictions)\nprint(\"Averaged probabilities:\", rounded_probs)\nprint(\"Predicted classes:\", predicted_classes)\n```\n\nThis script defines a function `aggregate_predictions` that takes a three-level nested list of probability distributions and returns the averaged and rounded probabilities along with the predicted class index for each sample. The example usage provided at the end demonstrates how to call this function and print out the results."}
{"task_id": 444, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X = np.array(X)\n    N, C = X.shape\n    \n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n        if Y.shape[1] != C:\n            return -1\n    \n    M = Y.shape[0]\n    \n    if sigma is None:\n        sigma = np.sqrt(C / 2)\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n    elif isinstance(sigma, (list, np.ndarray)):\n        if len(sigma) != C or any(s <= 0 for s in sigma):\n            return -1\n        sigma = np.array(sigma)\n    else:\n        return -1\n    \n    # Ensure sigma is broadcastable to match X and Y dimensions\n    if isinstance(sigma, (int, float)):\n        sigma = np.array([sigma] * C)\n    \n    X_norm = np.sum((X / sigma) ** 2, axis=-1)\n    Y_norm = np.sum((Y / sigma) ** 2, axis=-1)\n    XY = np.dot(X / sigma, (Y / sigma).T)\n    \n    # exp(-0.5 * (x^2 - 2xy + y^2))\n    kernel_matrix = np.exp(-0.5 * (X_norm[:, None] - 2 * XY + Y_norm[None, :]))\n    \n    # Round to 4 decimal places\n    kernel_matrix = np.round(kernel_matrix, 4)\n    \n    # Return as a Python list\n    return kernel_matrix.tolist()\n\n# Example usage:\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0\nprint(rbf_kernel(X, Y, sigma))\n```"}
{"task_id": 446, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef entropy(y):\n    \"\"\"Calculate the entropy of a list of labels.\"\"\"\n    counts = np.array(list(Counter(y).values()))\n    p = counts / counts.sum()\n    return -np.sum(p * np.log2(p))\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n    parent_entropy = entropy(y)\n    best_gain = -np.inf\n    best_feature_index = -1\n    best_threshold = None\n    left_majority_label = None\n    right_majority_label = None\n\n    # Determine the majority label in the parent node\n    majority_label = Counter(y).most_common(1)[0][0]\n\n    # Iterate over each feature to find the best split\n    for j in range(n_features):\n        feature_values = np.unique(X[:, j])\n        if len(feature_values) == 1:\n            # Skip this feature if all values are the same\n            continue\n        # Consider only midpoints between successive sorted values\n        thresholds = (feature_values[:-1] + feature_values[1:]) / 2\n        for t in thresholds:\n            left_mask = X[:, j] <= t\n            right_mask = X[:, j] > t\n            n_left = left_mask.sum()\n            n_right = right_mask.sum()\n\n            if n_left == 0 or n_right == 0:\n                # Skip this threshold if it results in an empty partition\n                continue\n\n            left_entropy = entropy(y[left_mask])\n            right_entropy = entropy(y[right_mask])\n            left_proportion = n_left / n_samples\n            right_proportion = n_right / n_samples\n            gain = parent_entropy - left_proportion * left_entropy - right_proportion * right_entropy\n\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = round(t, 4)\n                left_majority_label = Counter(y[left_mask]).most_common(1)[0][0]\n                right_majority_label = Counter(y[right_mask]).most_common(1)[0][0]\n            elif gain == best_gain and j < best_feature_index:\n                best_threshold = round(t, 4)\n                left_majority_label = Counter(y[left_mask]).most_common(1)[0][0]\n                right_majority_label = Counter(y[right_mask]).most_common(1)[0][0]\n\n    if best_gain == -np.inf:\n        return (-1, None, majority_label, majority_label)\n    else:\n        return (best_feature_index, best_threshold, left_majority_label, right_majority_label)\n\n# Example usage:\nX = [[1, 2], [2, 3], [3, 3], [4, 1], [5, 5]]\ny = [0, 0, 1, 1, 1]\nprint(decision_stump(X, y))\n```\n\nThis code snippet defines a function `decision_stump` that implements the required functionality as described in the task. The function computes the best feature and threshold for a decision stump based on information gain criteria, and returns the best split's feature index, threshold, and the majority labels for the left and right partitions. The function handles ties by selecting the smallest feature index and threshold, and it also returns a specific value if no split can improve the information gain."}
{"task_id": 452, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List\n\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    # Convert X to a NumPy array if it's a list\n    X = np.array(X)\n    \n    # Determine the condition based on the type of threshold\n    if isinstance(threshold, (int, float)):\n        condition = X[:, feature_i] >= threshold\n    else:\n        condition = X[:, feature_i] == threshold\n    \n    # Split the data based on the condition\n    subset_1 = X[condition].tolist()\n    subset_2 = X[~condition].tolist()\n    \n    return [subset_1, subset_2]\n\n# Example usage:\nX_numeric = np.array([[1, 5], [3, 2], [4, 6], [2, 1]])\nX_categorical = np.array([[1, \"A\"], [2, \"B\"], [3, \"A\"], [4, \"C\"]])\n\nprint(divide_on_feature(X_numeric, 0, 3))\nprint(divide_on_feature(X_categorical, 1, \"A\"))\n```\n\nThis solution defines a `divide_on_feature` function that takes a dataset `X`, a feature index `feature_i`, and a threshold to split `X` into two subsets based on the given conditions. The function supports both numeric and non-numeric thresholds and ensures the order of the original samples is preserved in the subsets."}
{"task_id": 453, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    # Check for consistent lengths and valid gamma\n    if not (len(Q) == len(Q_next) == len(actions) == len(rewards) == len(dones)):\n        return -1\n    if not (0 <= gamma <= 1):\n        return -1\n\n    # Initialize the target Q-values with the same values as Q\n    Q_target = np.copy(Q)\n\n    # Calculate the target Q-values for the actions taken\n    for i in range(len(Q)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        Q_target[i, actions[i]] = target\n\n    # Round the Q-values to 4 decimal places and convert to list of lists\n    Q_target = np.round(Q_target, 4).tolist()\n\n    return Q_target\n\n# Example usage\nQ = np.array([[0.1, 0.2], [0.3, 0.4]])\nQ_next = np.array([[0.5, 0.6], [0.7, 0.8]])\nactions = [0, 1]\nrewards = [1.0, 2.0]\ndones = [True, False]\ngamma = 0.9\n\nprint(update_q_values(Q, Q_next, actions, rewards, dones, gamma))\n```"}
{"task_id": 458, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    # Convert input to a numpy array for easier handling\n    labels = np.array(labels)\n    \n    # Check for negative labels\n    if np.any(labels < 0):\n        return -1\n    \n    # Infer num_classes if not provided\n    if num_classes is None:\n        num_classes = np.max(labels) + 1\n    else:\n        # Check if provided num_classes is valid\n        if num_classes < np.max(labels) + 1:\n            return -1\n    \n    # Initialize the one-hot encoded matrix\n    one_hot = np.zeros((len(labels), num_classes), dtype=int)\n    \n    # Set the appropriate indices to 1\n    one_hot[np.arange(len(labels)), labels] = 1\n    \n    # Convert the numpy array back to a list of lists containing integers\n    return one_hot.tolist()\n\n# Example usage:\nlabels = [0, 1, 2, 0]\nnum_classes = 3\nprint(to_categorical(labels, num_classes))\n# Output: [[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0]]\n```"}
{"task_id": 461, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Initial prediction is the mean of targets\n    y_hat = np.full_like(y, np.mean(y), dtype=float)\n    \n    if n_estimators <= 0:\n        return np.round(y_hat, 4).tolist()\n    \n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y - y_hat\n        \n        # If all residuals are zero, we can stop early\n        if np.all(residuals == 0):\n            break\n        \n        # Find unique x values except the greatest one for splitting\n        split_values = np.unique(x)[:-1]\n        \n        # Initialize variables to track the best split\n        best_sse = np.inf\n        best_split = None\n        best_left_mean = None\n        best_right_mean = None\n        \n        for t in split_values:\n            # Split the data based on the current value t\n            left_indices = x <= t\n            right_indices = x > t\n            \n            # Ignore splits that result in empty sides\n            if not np.any(left_indices) or not np.any(right_indices):\n                continue\n            \n            # Compute the mean residual on each side\n            left_mean = np.mean(residuals[left_indices])\n            right_mean = np.mean(residuals[right_indices])\n            \n            # Compute the sum of squared errors (SSE) for this split\n            sse = np.sum((residuals[left_indices] - left_mean) ** 2) + \\\n                  np.sum((residuals[right_indices] - right_mean) ** 2)\n            \n            # Update the best split if this one is better\n            if sse < best_sse:\n                best_sse = sse\n                best_split = t\n                best_left_mean = left_mean\n                best_right_mean = right_mean\n        \n        # If no valid split exists, set the stump prediction to the mean residual\n        if best_split is None:\n            stump_prediction = np.full_like(y, np.mean(residuals), dtype=float)\n        else:\n            stump_prediction = np.where(x <= best_split, best_left_mean, best_right_mean)\n        \n        # Update the ensemble prediction\n        y_hat += learning_rate * stump_prediction\n        \n    return np.round(y_hat, 4).tolist()\n```"}
{"task_id": 471, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    # Number of actions\n    num_actions = len(q_table[0])\n    \n    # Calculate target\n    if next_state is not None:\n        # Find the maximum Q-value in the next state\n        max_q = max(q_table[next_state])\n        # Count how many actions have the maximum Q-value\n        max_count = q_table[next_state].count(max_q)\n        # Calculate the expectation\n        expectation = 0\n        for a in range(num_actions):\n            if q_table[next_state][a] == max_q:\n                expectation += (1 - epsilon + epsilon / num_actions) * q_table[next_state][a]\n            else:\n                expectation += epsilon / num_actions * q_table[next_state][a]\n        target = reward + gamma * expectation\n    else:\n        target = reward\n    \n    # Update Q-table\n    q_table[state][action] += lr * (target - q_table[state][action])\n    \n    # Return rounded Q-table\n    return [[round(q, 4) for q in row] for row in q_table]\n\n# Example usage\nq_table = [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]\nstate = 0\naction = 1\nreward = 1.0\nnext_state = 1\nepsilon = 0.1\nlr = 0.5\ngamma = 0.9\nupdated_q_table = expected_sarsa_update(q_table, state, action, reward, next_state, epsilon, lr, gamma)\nprint(updated_q_table)\n```"}
{"task_id": 474, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n\n    def generate_cluster_samples(n: int, class_index: int, interval: float) -> np.ndarray:\n        x_low = int(class_index / 2) + 0.1\n        x_high = int(class_index / 2) + 0.9\n        y_low = (class_index % 2) * interval + 0.1\n        y_high = (class_index % 2) * interval + 0.9\n\n        x = np.random.uniform(x_low * 10, x_high * 10, n)\n        y = np.random.uniform(y_low * 10, y_high * 10, n)\n        return np.column_stack((x, y))\n\n    X_train = np.empty((0, 2))\n    Y_train = np.empty(0)\n    X_val = np.empty((0, 2))\n    Y_val = np.empty(0)\n\n    for i in range(m):\n        label = (i - 0.5) * 2\n        X_train_cluster = generate_cluster_samples(n_train, i, interval)\n        X_val_cluster = generate_cluster_samples(n_val, i, interval)\n        X_train = np.append(X_train, X_train_cluster, axis=0)\n        X_val = np.append(X_val, X_val_cluster, axis=0)\n        Y_train = np.append(Y_train, np.full(n_train, label))\n        Y_val = np.append(Y_val, np.full(n_val, label))\n\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n    Y_train = np.round(Y_train, 4)\n    Y_val = np.round(Y_val, 4)\n\n    return X_train, X_val, Y_train, Y_val\n\n# Example usage:\nX_train, X_val, Y_train, Y_val = generate_data(m=2, n_train=100, n_val=50, interval=1, seed=42)\nprint(X_train, Y_train)\nprint(X_val, Y_val)\n```\nThis Python script defines a function `generate_data` that generates a 2-D toy dataset for a binary or multi-class classifier according to the provided specifications. The function is flexible, allowing for different numbers of classes, training and validation samples, and vertical interval distances between classes. The function also supports an optional seed for reproducibility. The output data are rounded to four decimal places as required."}
{"task_id": 475, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    # Initialize m_prev and v_prev to zero if they are None\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n\n    # Update the first and second moments\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * (grad ** 2)\n\n    # Bias correction\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n\n    # Update parameters\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n\n    return w_new, m_new, v_new\n\n# Example call\nw_new, m_new, v_new = adam_update(1.0, 0.1, 0.0, 0.0, 1)\nprint(round(w_new, 9))  # \u2248 0.999000001\n```"}
{"task_id": 479, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    \n    num_arms = len(rewards[0])\n    estimated_values = [ev_prior] * num_arms  # Initialize estimated values\n    pull_counts = [0] * num_arms  # Initialize pull counts\n\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            # Choose an arm at random\n            chosen_arm = np.random.randint(num_arms)\n        else:\n            # Choose the arm with the largest estimated value\n            chosen_arm = np.argmax(estimated_values)\n        \n        # Get the reward for the chosen arm\n        reward = rewards[t][chosen_arm]\n        pull_counts[chosen_arm] += 1\n        # Update the estimated value of the chosen arm\n        estimated_values[chosen_arm] += (reward - estimated_values[chosen_arm]) / pull_counts[chosen_arm]\n    \n    # Return the estimated values rounded to 4 decimal places\n    return [round(v, 4) for v in estimated_values]\n\n# Example usage:\nrewards_matrix = [\n    [1.0, 0.0, 2.0],\n    [0.5, 1.5, 0.0],\n    [0.0, 2.0, 1.0]\n]\nprint(epsilon_greedy_bandit(rewards_matrix, epsilon=0.1, ev_prior=0.5, seed=42))\n```\nThis code defines the `epsilon_greedy_bandit` function which simulates one run of the \u03b5-greedy policy on a stationary multi-armed bandit problem, returning the final estimated values for each arm. The function is self-contained and includes necessary imports."}
{"task_id": 481, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef euclidean_distance(point1, point2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((point1 - point2) ** 2))\n\ndef region_query(data, point_id, eps):\n    \"\"\"Find all points in the dataset within the given radius (eps) of the point.\"\"\"\n    neighbors = []\n    for i, point in enumerate(data):\n        if euclidean_distance(data[point_id], point) <= eps:\n            neighbors.append(i)\n    return neighbors\n\ndef expand_cluster(data, cluster_id, point_id, neighbors, labels, eps, min_samples):\n    \"\"\"Expand a cluster from a given point, using its neighbors.\"\"\"\n    labels[point_id] = cluster_id\n    i = 0\n    while i < len(neighbors):\n        point_id_neigh = neighbors[i]\n        if labels[point_id_neigh] == -2:  # not visited\n            labels[point_id_neigh] = cluster_id\n            neighs = region_query(data, point_id_neigh, eps)\n            if len(neighs) >= min_samples:\n                neighbors += neighs\n        elif labels[point_id_neigh] == -1:  # noise\n            labels[point_id_neigh] = cluster_id\n        i += 1\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled -1 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n    \n    # Initialize all points as unvisited\n    labels = np.full(data.shape[0], -2)\n    cluster_id = 0\n    \n    for point_id in range(data.shape[0]):\n        if labels[point_id] == -2:\n            neighbors = region_query(data, point_id, eps)\n            if len(neighbors) < min_samples:\n                labels[point_id] = -1  # Mark as noise\n            else:\n                # Found a new cluster\n                expand_cluster(data, cluster_id, point_id, neighbors, labels, eps, min_samples)\n                cluster_id += 1\n                \n    return labels.tolist()\n```\n\nThis Python script defines the `dbscan` function which performs density-based clustering on the provided `data` array using the DBSCAN algorithm. It does not rely on any external machine learning libraries and uses basic NumPy operations to perform the Euclidean distance calculations and array manipulations required."}
{"task_id": 482, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    else:\n        if np.any(y < 0) or np.any(y >= num_classes):\n            raise ValueError(\"Elements in y must be non-negative and less than num_classes\")\n    \n    n = len(y)\n    categorical = np.zeros((n, num_classes), dtype=int)\n    categorical[np.arange(n), y] = 1\n    return categorical\n\n# Example usage:\n# y = [0, 1, 2, 0]\n# print(to_categorical(y))\n# Expected output:\n# [[1 0 0]\n#  [0 1 0]\n#  [0 0 1]\n#  [1 0 0]]\n```"}
{"task_id": 485, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    def sse(targets):\n        mean = np.mean(targets)\n        return np.sum((targets - mean) ** 2)\n    \n    def best_split(X, y):\n        best_sse = float('inf')\n        best_split_point = None\n        for i in range(1, len(X)):\n            left_y = y[:i]\n            right_y = y[i:]\n            current_sse = sse(left_y) + sse(right_y)\n            if current_sse < best_sse:\n                best_sse = current_sse\n                best_split_point = (X[i-1] + X[i]) / 2\n        return best_split_point, best_sse\n    \n    def build_tree(X, y, depth):\n        if len(X) < 2 or depth == max_depth:\n            return np.mean(y)\n        \n        split_point, _ = best_split(X, y)\n        left_indices = np.where(X < split_point)[0]\n        right_indices = np.where(X >= split_point)[0]\n        \n        if len(left_indices) == 0 or len(right_indices) == 0:\n            return np.mean(y)\n        \n        left_tree = build_tree(X[left_indices], y[left_indices], depth + 1)\n        right_tree = build_tree(X[right_indices], y[right_indices], depth + 1)\n        \n        return (split_point, left_tree, right_tree)\n    \n    def predict_tree(tree, x):\n        if isinstance(tree, float):\n            return tree\n        else:\n            split_point, left_tree, right_tree = tree\n            if x < split_point:\n                return predict_tree(left_tree, x)\n            else:\n                return predict_tree(right_tree, x)\n    \n    if not X_train or not y_train:\n        return []\n    \n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    sorted_indices = np.argsort(X_train)\n    X_train = X_train[sorted_indices]\n    y_train = y_train[sorted_indices]\n    \n    tree = build_tree(X_train, y_train, 0)\n    \n    predictions = [predict_tree(tree, x) for x in X_test]\n    \n    return predictions\n```"}
{"task_id": 490, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    # Ensure x is a NumPy array\n    x = np.array(x)\n    \n    # Check if the input is empty\n    if x.size == 0:\n        return []\n    \n    # Create a diagonal matrix using NumPy's diagonal function and convert to list of lists\n    diagonal_matrix = np.diag(x).tolist()\n    \n    return diagonal_matrix\n\n# Example usage:\nprint(make_diagonal([1, 2, 3]))\nprint(make_diagonal((4, 5, 6)))\nprint(make_diagonal(np.array([7, 8])))\nprint(make_diagonal([]))\n```"}
{"task_id": 491, "completion_id": 0, "completion": "Below is a self-contained Python script implementing the FP-Growth algorithm as specified in the task description. This script includes the necessary imports and the `fp_growth` function, which constructs the FP-tree and recursively mines frequent item-sets.\n\n```python\nfrom collections import Counter, defaultdict\nimport itertools\n\nclass TreeNode:\n    def __init__(self, name, count, parent):\n        self.name = name\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.link = None\n\ndef create_tree(transactions, min_sup):\n    header_table = {}\n    for trans in transactions:\n        for item in trans:\n            header_table[item] = header_table.get(item, 0) + 1\n    \n    # Remove items not reaching min_sup and sort the header table\n    header_table = {k: v for k, v in header_table.items() if v >= min_sup}\n    header_table = dict(sorted(header_table.items(), key=lambda x: x[1], reverse=True))\n    \n    if not header_table:\n        return None, None\n\n    tree = TreeNode('root', 1, None)\n    for trans in transactions:\n        sorted_trans = [item for item in trans if item in header_table]\n        sorted_trans.sort(key=lambda item: header_table[item], reverse=True)\n        if sorted_trans:\n            update_tree(tree, sorted_trans, header_table)\n\n    return tree, header_table\n\ndef update_tree(tree, trans, header_table):\n    if trans[0] in tree.children:\n        tree.children[trans[0]].count += 1\n    else:\n        tree.children[trans[0]] = TreeNode(trans[0], 1, tree)\n        if header_table[trans[0]][1] is None:\n            header_table[trans[0]][1] = tree.children[trans[0]]\n        else:\n            update_header(header_table[trans[0]][1], tree.children[trans[0]])\n    if len(trans) > 1:\n        update_tree(tree.children[trans[0]], trans[1:], header_table)\n\ndef update_header(node_to_test, target_node):\n    while node_to_test.link:\n        node_to_test = node_to_test.link\n    node_to_test.link = target_node\n\ndef ascend_tree(leaf_node, prefix_path):\n    if leaf_node.parent is not None:\n        prefix_path.append(leaf_node.name)\n        ascend_tree(leaf_node.parent, prefix_path)\n\ndef find_prefix_path(base_path, tree_node):\n    cond_pats = {}\n    while tree_node is not None:\n        prefix_path = []\n        ascend_tree(tree_node, prefix_path)\n        if len(prefix_path) > 1:\n            cond_pats[frozenset(prefix_path[:-1])] = tree_node.count\n        tree_node = tree_node.link\n    return cond_pats\n\ndef mine_tree(tree, header_table, min_sup, prefix, freq_item_list):\n    sorted_items = [item[0] for item in sorted(header_table.items(), key=lambda p: p[1])]\n    for base in sorted_items:\n        new_freq_set = prefix.copy()\n        new_freq_set.add(base)\n        freq_item_list.append(tuple(sorted(new_freq_set)))\n        cond_patt_bases = find_prefix_path(base, header_table[base][1])\n        cond_tree, cond_header = create_tree(cond_patt_bases, min_sup)\n        if cond_header is not None:\n            mine_tree(cond_tree, cond_header, min_sup, new_freq_set, freq_item_list)\n\ndef fp_growth(transactions, min_sup):\n    tree, header_table = create_tree(transactions, min_sup)\n    if not header_table:\n        return []\n    freq_item_list = []\n    mine_tree(tree, header_table, min_sup, set([]), freq_item_list)\n    return sorted(freq_item_list, key=lambda x: (len(x), x))\n\n# Example usage\ntransactions = [\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"A\", \"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"C\", \"D\", \"E\"],\n    [\"B\", \"C\", \"D\"]\n]\nmin_sup = 3\nprint(fp_growth(transactions, min_sup))\n```\n\nThis code defines the `fp_growth` function, which implements the FP-Growth algorithm for mining frequent item-sets. The `TreeNode` class is used to construct the FP-tree, and the `create_tree` function builds the initial tree and header table. The `mine_tree` function recursively mines the conditional trees to find all frequent item-sets. The final list of frequent item-sets is sorted as specified in the task description."}
{"task_id": 492, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n\n    X = np.array(X)\n    n_samples, n_features = X.shape\n    indices = list(combinations_with_replacement(range(n_features), degree))\n    n_output_features = len(indices) + sum(len(list(combinations_with_replacement(range(n_features), i))) for i in range(degree))\n\n    def get_feature(row):\n        features = [1.0]  # starting with the degree-0 term\n        for d in range(1, degree + 1):\n            for index in combinations_with_replacement(range(n_features), d):\n                feature = 1.0\n                for idx in index:\n                    feature *= row[idx]\n                features.append(feature)\n        return features\n\n    new_X = [get_feature(row) for row in X]\n    return np.array(new_X).tolist()\n\n# Example usage\nX = [[1, 2], [3, 4]]\ndegree = 2\nprint(polynomial_features(X, degree))\n```\n\nThis script will generate a polynomial feature matrix for an input matrix `X` up to the specified degree. It handles the case when the degree is negative by returning `-1`. The feature matrix includes all monomials of the original features up to the given degree, arranged in ascending total degree and lexicographic order within the same degree."}
{"task_id": 493, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    # Check if y is empty\n    if len(y) == 0:\n        return -1\n    \n    # Convert y to a numpy array if it is not already one\n    y = np.array(y)\n    \n    # Calculate the mean of y\n    y_mean = np.mean(y)\n    \n    # Calculate the squared error for each element in y\n    squared_errors = (y - y_mean) ** 2\n    \n    # Calculate the mean of the squared errors\n    mse_value = np.mean(squared_errors)\n    \n    # Return the MSE value rounded to 4 decimal places\n    return round(mse_value, 4)\n\n# Example usage\nsample_data = [1.0, 2.0, 3.0, 4.0]\nprint(mse(sample_data))  # Expected output: 1.25\n```"}
{"task_id": 496, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Ensure x is a numpy array for element-wise operations\n    x = np.array(x)\n    \n    # Calculate the affine transformation, the first derivative, and the second derivative\n    y = slope * x + intercept\n    grad = np.full_like(x, slope)\n    grad2 = np.zeros_like(x)\n    \n    # Round the results to 4 decimal places\n    y_rounded = np.round(y, 4).tolist()\n    grad_rounded = np.round(grad, 4).tolist()\n    grad2_rounded = np.round(grad2, 4).tolist()\n    \n    return y_rounded, grad_rounded, grad2_rounded\n\n# Example usage\nx = [1.0, 2.0, 3.0]\nslope = 2.0\nintercept = 1.0\ny, grad, grad2 = apply_affine(x, slope, intercept)\nprint(\"y:\", y)\nprint(\"grad:\", grad)\nprint(\"grad2:\", grad2)\n```\n\nThis code defines the function `apply_affine` as per the task requirements, providing the affine transformation of an input vector along with its first and second derivatives, all rounded to the nearest 4th decimal place. The example usage demonstrates how to call this function and print the results."}
{"task_id": 499, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    # Check if k is within the valid range\n    n_samples, n_features = data.shape\n    if k < 1 or k > n_features:\n        return -1\n\n    # Step 1: Standardize each feature\n    means = np.mean(data, axis=0)\n    stds = np.std(data, axis=0, ddof=1)  # Population standard deviation\n    std_data = (data - means) / np.where(stds != 0, stds, 1)\n\n    # Step 2: Compute the sample covariance matrix\n    cov_matrix = np.cov(std_data, rowvar=False, ddof=1)\n\n    # Step 3: Perform eigen-decomposition\n    eigenvalues, eigenvectors = np.linalg.eigh(cov_matrix)\n\n    # Step 4: Sort eigenvalues and eigenvectors in descending order\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n\n    # Step 5: Fix the sign of eigenvectors\n    max_abs_indices = np.argmax(np.abs(eigenvectors), axis=0)\n    signs = np.sign(eigenvectors[max_abs_indices, np.arange(eigenvectors.shape[1])])\n    eigenvectors = eigenvectors * signs\n\n    # Step 6: Project the standardised data onto the first k eigenvectors\n    projection_matrix = eigenvectors[:, :k]\n    projected_data = np.dot(std_data, projection_matrix)\n\n    # Return the projected data as a list, rounded to 4 decimal places\n    return np.round(projected_data, 4).tolist()\n\n# Example usage:\n# data = np.array([[1, 2], [3, 4], [5, 6]])\n# k = 1\n# print(pca_transform(data, k))\n```\n\nThis script contains a function `pca_transform` that performs PCA dimensionality reduction as specified in the task. The function standardizes the input data, computes the covariance matrix, performs eigen-decomposition, sorts the eigenvectors, fixes their signs, and then projects the data onto the first `k` principal components. The result is rounded to 4 decimal places and returned as a Python list."}
{"task_id": 500, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    n_samples, n_features = X_train.shape\n    \n    # Initialize the model with the mean of y_train\n    F = np.mean(y_train)\n    \n    def fit_stump(X, residuals):\n        best_feature, best_threshold, best_left_val, best_right_val, best_error = None, None, None, None, np.inf\n        \n        for feature in range(n_features):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                left_indices = X[:, feature] <= threshold\n                right_indices = X[:, feature] > threshold\n                \n                left_val = np.mean(residuals[left_indices])\n                right_val = np.mean(residuals[right_indices])\n                \n                predictions = np.where(X[:, feature] <= threshold, left_val, right_val)\n                error = np.sum((residuals - predictions) ** 2)\n                \n                if error < best_error:\n                    best_error = error\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_left_val = left_val\n                    best_right_val = right_val\n        \n        return best_feature, best_threshold, best_left_val, best_right_val\n    \n    stumps = []\n    \n    for _ in range(n_estimators):\n        residuals = y_train - F\n        feature, threshold, left_val, right_val = fit_stump(X_train, residuals)\n        stumps.append((feature, threshold, left_val, right_val))\n        F += learning_rate * (np.where(X_train[:, feature] <= threshold, left_val, right_val))\n    \n    def predict_single(x):\n        score = np.mean(y_train)\n        for feature, threshold, left_val, right_val in stumps:\n            score += learning_rate * (left_val if x[feature] <= threshold else right_val)\n        return 1 if score > 0.5 else 0\n    \n    predictions = [predict_single(x) for x in X_test]\n    \n    return predictions\n```"}
{"task_id": 505, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x):\n    \"\"\"Compute the sigmoid of x.\"\"\"\n    return 1 / (1 + np.exp(-x))\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n\n    batch_size = X.shape[0]\n    n_visible = X.shape[1]\n    n_hidden = hbias.shape[0]\n\n    # Positive phase: calculate the hidden probabilities\n    pos_hidden_probs = sigmoid(X @ W + hbias)\n    pos_grad = X.T @ pos_hidden_probs\n\n    # Start with the positive phase hidden probabilities\n    h_k_probs = pos_hidden_probs\n\n    for _ in range(k):\n        # Gibbs sampling step: h_k \u2192 v_k \u2192 h_k+1\n        v_k_probs = sigmoid(h_k_probs @ W.T + vbias)\n        h_k_probs = sigmoid(v_k_probs @ W + hbias)\n\n    # Negative phase: calculate the hidden probabilities\n    neg_grad = v_k_probs.T @ h_k_probs\n\n    # Update the weights\n    W_new = W + learning_rate * (pos_grad - neg_grad) / batch_size\n    W_new = np.round(W_new, decimals=4).tolist()\n\n    return W_new\n\n# Example usage:\n# X = np.random.rand(10, 5)  # 10 samples, 5 visible units\n# W = np.random.rand(5, 3)  # 5 visible units, 3 hidden units\n# hbias = np.random.rand(3)\n# vbias = np.random.rand(5)\n# learning_rate = 0.1\n# k = 1\n# print(contrastive_divergence(X, W, hbias, vbias, learning_rate, k))\n```"}
{"task_id": 509, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Ensure inputs are NumPy arrays for consistent handling\n    x_array = np.array(x)\n    y_array = np.array(y)\n    \n    # Check if input arrays are of the same length\n    if x_array.shape != y_array.shape:\n        return -1\n    \n    # Calculate the Chebyshev distance\n    distance = np.max(np.abs(x_array - y_array))\n    \n    # Return the distance rounded to four decimal places\n    return round(distance, 4)\n\n# Example usage\nx = [1, 2, 3]\ny = [2, 4, 6]\nprint(chebyshev(x, y))  # Output: 3.0\n```"}
{"task_id": 510, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    # Clip y_pred to avoid log(0) and log(1)\n    eps = np.finfo(np.float32).eps\n    y_pred_clipped = np.clip(y_pred, eps, 1 - eps)\n    \n    # Calculate Binary Cross-Entropy\n    reconstruction_loss = -np.sum(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped), axis=1)\n    \n    # Calculate KL Divergence\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var), axis=1)\n    \n    # Total Loss\n    total_loss = np.mean(reconstruction_loss + kl_divergence)\n    \n    return round(total_loss, 6)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Example data\n    y = np.array([[0, 1, 1],\n                  [1, 0, 0]])\n    y_pred = np.array([[0.1, 0.9, 0.8],\n                       [0.9, 0.2, 0.1]])\n    t_mean = np.array([[0.1, -0.1],\n                       [-0.1, 0.1]])\n    t_log_var = np.array([[-0.2, 0.2],\n                          [0.2, -0.2]])\n    \n    # Compute loss\n    loss = vae_loss(y, y_pred, t_mean, t_log_var)\n    print(f\"VAE Loss: {loss}\")\n```\n\nThis Python script implements the VAE loss function as specified in the task. It includes a check at the end with example data to demonstrate how to use the implemented function."}
{"task_id": 513, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    \n    n_samples, n_features = X.shape\n    _, k = V.shape\n    \n    # Linear term\n    linear_term = np.dot(X, w)\n    \n    # Interaction term: \u00bd \u03a3_{f=1}^{k} [ (\u03a3\u2c7c V_{j,f} x\u2c7c)\u00b2 \u2212 \u03a3\u2c7c V_{j,f}\u00b2 x\u2c7c\u00b2 ]\n    interaction_term = 0.5 * np.sum(\n        np.square(np.dot(X, V)) - np.dot(np.square(X), np.square(V)),\n        axis=1\n    )\n    \n    # Combine terms and add bias\n    predictions = w0 + linear_term + interaction_term\n    \n    # Round to 4 decimal places and convert to list\n    return [round(pred, 4) for pred in predictions]\n\n# Example usage\nX = [[1, 2, 3], [4, 5, 6]]\nw0 = 1.0\nw = [0.5, 0.5, 0.5]\nV = [[0.1, 0.2], [0.2, 0.3], [0.3, 0.4]]\npredictions = fm_predict(X, w0, w, V)\nprint(predictions)\n```\n\nThis script defines the `fm_predict` function that takes in the feature matrix `X`, global bias `w0`, linear coefficients `w`, and interaction factors `V` to compute predictions using the Factorization Machine regression formula. The results are rounded to four decimal places as required."}
{"task_id": 517, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # Convert input to a NumPy array if it's not a scalar\n    if isinstance(z, (list, tuple)):\n        z = np.array(z)\n    elif not isinstance(z, np.ndarray):\n        # Handle scalar case\n        return round(1 / (1 + np.exp(-z)), 4)\n    \n    # Use np.where to handle large values for numerical stability\n    with np.errstate(over='ignore'):\n        sig = np.where(z >= 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n    \n    # Round to 4 decimal places and convert to list if necessary\n    return np.round(sig, 4).tolist()\n\n# Example usage:\nprint(sigmoid([-1, 0, 1]))  # Output: [0.2689, 0.5, 0.7311]\n```"}
{"task_id": 518, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    \n    return wrapper\n\n@unhot\ndef accuracy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Simple accuracy rounded to 4 decimals.\"\"\"\n    return float(np.round(np.mean(actual == predicted), 4))\n\n# Example usage\nactual    = np.array([[0,1,0], [1,0,0], [0,0,1]])  # one-hot\npredicted = np.array([[0,1,0], [0,1,0], [0,0,1]])  # one-hot\nprint(accuracy(actual, predicted))  # 0.6667\n```\n\nThis code snippet defines an `unhot` decorator that converts one-hot encoded arrays to their corresponding class labels by calculating the `argmax` along the second axis of the arrays. The decorator then passes the converted arrays to the wrapped metric function, which in this case is the `accuracy` function. The `accuracy` function calculates the accuracy by comparing the actual and predicted labels and rounding the result to four decimal places."}
{"task_id": 520, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    def compute_grad(z):\n        if isinstance(z, (float, int)):\n            return np.round(z * (1 - z), 4)\n        elif isinstance(z, list):\n            return [compute_grad(item) for item in z]\n        elif isinstance(z, np.ndarray):\n            return np.round(z * (1 - z), 4).tolist()\n        else:\n            raise ValueError(\"Unsupported type\")\n\n    return compute_grad(z)\n\n# Check function to verify the correctness\ndef check():\n    test_cases = [\n        (0.5, 0.25),\n        ([0.25, 0.75], [0.1875, 0.1875]),\n        ([[0.1, 0.9], [0.4, 0.6]], [[0.09, 0.09], [0.24, 0.24]]),\n        (np.array([0.25, 0.75]), [0.1875, 0.1875]),\n        (np.array([[0.1, 0.9], [0.4, 0.6]]), [[0.09, 0.09], [0.24, 0.24]]),\n        ([], []),\n    ]\n    \n    for input_val, expected in test_cases:\n        result = sigmoid_grad(input_val)\n        assert result == expected, f\"Failed on input {input_val}. Expected {expected}, got {result}.\"\n    print(\"All test cases passed.\")\n\n# Run the check function to verify the correctness of the sigmoid_grad function\ncheck()\n```"}
{"task_id": 528, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Convert X to a numpy array for easier manipulation\n    X_np = np.array(X)\n    # Extract the min and max values for each dimension\n    x1_min, x2_min = X_np.min(axis=0)\n    x1_max, x2_max = X_np.max(axis=0)\n    \n    # Create the 1D arrays for the grid\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    \n    # Create the mesh grid\n    x1_mesh, x2_mesh = np.meshgrid(x1_plot, x2_plot)\n    \n    # Compute the function values using the given rule\n    func_values = W[0] * x1_mesh + W[1] * x2_mesh + b\n    \n    # Generate the sign values for the grid\n    grid_signs = np.sign(func_values)\n    \n    # Convert the signs to the required 1/-1 labels\n    grid_labels = (grid_signs == 1).astype(int) * 2 - 1\n    \n    # Convert the numpy array to a nested list\n    return grid_labels.tolist()\n\n# Example usage:\nX = [[1, 2], [2, 3], [3, 4], [4, 5]]\nW = [1, -1]\nb = 0\ngrid = decision_boundary_grid(X, W, b, grid_n=10)\nprint(grid)\n```\nThis script defines a function `decision_boundary_grid` that generates a grid of labels based on the decision boundary of a 2D linear classifier. The function takes a dataset `X`, a weight vector `W`, a bias `b`, and an optional parameter `grid_n` to define the resolution of the grid. The script also includes an example usage of the function."}
{"task_id": 537, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n    \n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n    \n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n    \n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    \n    # Determine the number of classes and features\n    num_classes = 2\n    num_features = X_train.shape[1]\n    \n    # Calculate class priors\n    class_priors = np.array([np.mean(y_train == c) for c in range(num_classes)])\n\n    # Calculate mean and std for each feature for each class\n    class_parameters = []\n    for c in range(num_classes):\n        # Get the samples of class c\n        class_samples = X_train[y_train == c]\n        \n        # Calculate mean and std for each feature\n        means = np.mean(class_samples, axis=0)\n        stds = np.std(class_samples, axis=0) + 1e-9  # Add a small constant to avoid division by zero\n        \n        class_parameters.append((means, stds))\n    \n    # Predict the class for each test sample\n    predictions = []\n    for x in X_test:\n        posteriors = []\n        for c in range(num_classes):\n            means, stds = class_parameters[c]\n            # Compute the Gaussian likelihood for each feature\n            likelihoods = (1 / (np.sqrt(2 * np.pi) * stds)) * np.exp(- (x - means) ** 2 / (2 * stds ** 2))\n            # Multiply the likelihoods and the class prior to get the posterior\n            posterior = np.prod(likelihoods) * class_priors[c]\n            posteriors.append(posterior)\n        \n        # Choose the class with the highest posterior probability\n        predictions.append(np.argmax(posteriors))\n    \n    return predictions\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([0, 0, 1, 1])\n# X_test = np.array([[1, 2], [3, 4]])\n# predictions = gaussian_naive_bayes(X_train, y_train, X_test)\n# print(predictions)  # Output should be [0, 1]\n```"}
{"task_id": 539, "completion_id": 0, "completion": "Below is the Python script that solves the task as described:\n\n```python\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n    \n    Args:\n        AL (np.ndarray): A NumPy array of shape (1,m) or (m,) representing the model's predicted probabilities.\n        Y (np.ndarray): A NumPy array of shape (1,m) or (m,) representing the true labels (0 or 1).\n    \n    Returns:\n        float: The computed binary cross-entropy cost.\n    \"\"\"\n    # Clip the probabilities to avoid numerical instability\n    AL_clipped = np.clip(AL, 1e-15, 1 - 1e-15)\n    \n    # Number of examples\n    m = Y.shape[0]\n    \n    # Compute the binary cross-entropy cost\n    cost = -1/m * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    \n    return float(cost)\n\n# Example usage and verification\nif __name__ == \"__main__\":\n    # Example data points\n    AL = np.array([0.1, 0.9, 0.8, 0.3])\n    Y = np.array([0, 1, 1, 0])\n    \n    # Compute the cost\n    cost = compute_cost(AL, Y)\n    \n    # Print the cost rounded to 4 decimal places\n    print(f\"{cost:.4f}\")\n```\n\nThis script defines the `compute_cost` function which calculates the binary cross-entropy cost using the provided arrays `AL` and `Y`. It includes clipping the predicted probabilities to prevent numerical instability when taking the logarithm. The function returns the cost as a float, and an example usage is provided to demonstrate its correctness."}
{"task_id": 552, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    \n    # Check if t is out of bounds\n    if t < 0 or t >= len(observations):\n        return []\n\n    # Extract HMM parameters\n    pi = hmm['pi']\n    A = hmm['A']\n    B = hmm['B']\n    \n    # Number of hidden states\n    num_states = len(pi)\n    # Length of observation sequence\n    T = len(observations)\n    \n    # Initialize forward and backward matrices\n    alpha = np.zeros((T, num_states))\n    beta = np.zeros((T, num_states))\n    \n    # Initialize the first column of the forward matrix\n    alpha[0] = pi * B[:, observations[0]]\n    \n    # Compute the forward probabilities\n    for i in range(1, T):\n        alpha[i] = alpha[i-1].dot(A) * B[:, observations[i]]\n    \n    # Initialize the last column of the backward matrix\n    beta[-1] = 1\n    \n    # Compute the backward probabilities\n    for i in range(T-2, -1, -1):\n        beta[i] = A.dot(B[:, observations[i+1]] * beta[i+1])\n    \n    # Compute the gamma probabilities\n    gamma = (alpha * beta) / np.sum(alpha * beta, axis=1, keepdims=True)\n    \n    # Return the gamma values for the specified time step, rounded to 4 decimal places\n    return np.round(gamma[t], 4).tolist()\n\n# Example usage\nhmm = {\n    'pi': np.array([0.2, 0.4, 0.4]),\n    'A': np.array([[0.5, 0.2, 0.3], [0.3, 0.5, 0.2], [0.2, 0.3, 0.5]]),\n    'B': np.array([[0.5, 0.5], [0.4, 0.6], [0.7, 0.3]])\n}\nobservations = [0, 1, 0]\nt = 1\nprint(gamma_probabilities(hmm, observations, t))\n```\n\nThis script defines a function `gamma_probabilities` that calculates the posterior state distribution (\u03b3) for a given Hidden Markov Model (HMM), an observation sequence, and a time index `t`. It uses the forward-backward algorithm to compute the forward and backward probabilities and then combines them to get \u03b3\u209c(i). The result is rounded to four decimal places and returned as a list."}
{"task_id": 555, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import deque\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    visited = [False] * n_samples\n    labels = [-1] * n_samples  # Initially, all points are noise\n    cluster_id = 0\n    \n    def get_neighbours(index):\n        \"\"\"Returns the indices of the points which are in the neighbourhood of the point at the given index.\"\"\"\n        return [i for i in range(n_samples) if np.linalg.norm(data[index] - data[i]) <= eps]\n    \n    for i in range(n_samples):\n        if visited[i]:\n            continue\n        \n        visited[i] = True\n        neighbours = get_neighbours(i)\n        \n        if len(neighbours) < min_samples:\n            continue  # This point is not a core point\n        \n        cluster_id += 1\n        labels[i] = cluster_id\n        queue = deque([i])\n        \n        while queue:\n            current_point = queue.popleft()\n            current_neighbours = get_neighbours(current_point)\n            \n            if len(current_neighbours) >= min_samples:\n                for neighbour in current_neighbours:\n                    if not visited[neighbour]:\n                        visited[neighbour] = True\n                        queue.append(neighbour)\n                    \n                    if labels[neighbour] == -1:\n                        labels[neighbour] = cluster_id\n    \n    return labels\n```"}
{"task_id": 561, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom scipy.stats import multivariate_normal\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"\n    Fits a Gaussian Mixture Model to the given data using the EM algorithm and returns the cluster labels.\n    \n    Parameters:\n    data (np.ndarray): The input data, a 2-D NumPy array of shape (N, D).\n    k (int): The number of Gaussian components in the mixture model.\n    max_iter (int): The maximum number of iterations for the EM algorithm.\n    epsilon (float): The tolerance for convergence based on the change in mixture weights.\n    \n    Returns:\n    list[int]: A list of length N containing the final cluster label of each sample.\n    \"\"\"\n    N, D = data.shape\n    if k == 1:\n        return [0] * N\n\n    # Initialize parameters\n    np.random.seed(0)  # For deterministic output\n    weights = np.ones(k) / k\n    means = data[np.random.choice(N, k, replace=False)]\n    covariances = [np.cov(data.T) for _ in range(k)]\n    \n    for _ in range(max_iter):\n        # E-step\n        resp = np.zeros((N, k))\n        for j in range(k):\n            resp[:, j] = weights[j] * multivariate_normal.pdf(data, mean=means[j], cov=covariances[j])\n        resp /= resp.sum(axis=1)[:, np.newaxis]\n        \n        # M-step\n        new_weights = resp.sum(axis=0) / N\n        new_means = (resp.T[:, :, np.newaxis] * data).sum(axis=1) / resp.sum(axis=0)[:, np.newaxis]\n        new_covariances = []\n        for j in range(k):\n            diff = (data - new_means[j])\n            new_covariances.append(np.dot(resp[:, j] * diff.T, diff) / resp.sum(axis=0)[j])\n        \n        # Check for convergence\n        if np.linalg.norm(new_weights - weights) < epsilon:\n            break\n        \n        weights = new_weights\n        means = new_means\n        covariances = new_covariances\n    \n    # Assign clusters based on highest responsibility\n    labels = np.argmax(resp, axis=1)\n    \n    # Sort components by the first coordinate of their mean\n    sorted_indices = np.argsort(means[:, 0])\n    sorted_labels = np.zeros_like(labels)\n    for new_label, old_label in enumerate(sorted_indices):\n        sorted_labels[labels == old_label] = new_label\n    \n    return sorted_labels.tolist()\n```\n\nThis implementation takes into account the instructions and requirements specified, including the initialization, EM iterations, convergence criteria, and final labeling based on deterministic sorting of components by their means. The use of `np.random.seed(0)` ensures that the initialization is deterministic given the same input, which is necessary for the output to be consistent across multiple runs."}
{"task_id": 562, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    N = data.shape[0]\n    \n    # Step 1: Build a fully-connected similarity graph\n    pairwise_distances = np.sum(data**2, axis=1, keepdims=True) + np.sum(data**2, axis=1) - 2 * np.dot(data, data.T)\n    W = np.exp(-gamma * pairwise_distances)\n\n    # Step 2: Construct the Laplacian\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    if method == 'normalized':\n        D_inv_sqrt = np.diag(1.0 / np.sqrt(np.diag(D)))\n        L = np.dot(np.dot(D_inv_sqrt, L), D_inv_sqrt)\n\n    # Step 3: Compute the eigenvectors\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    eigenvectors = eigenvectors[:, :n_cluster]\n\n    if method == 'normalized':\n        eigenvectors = eigenvectors / np.linalg.norm(eigenvectors, axis=0)\n\n    # Step 4: Run k-means in the eigenvector space\n    centroids = eigenvectors[:n_cluster]\n    old_labels = np.zeros(N, dtype=int)\n    while True:\n        distances = np.linalg.norm(eigenvectors[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        if np.array_equal(labels, old_labels):\n            break\n        old_labels = labels\n        for i in range(n_cluster):\n            centroids[i] = np.mean(eigenvectors[labels == i], axis=0)\n\n    # Step 5: Relabel clusters\n    cluster_order = np.argsort([np.min(np.where(labels == i)) for i in range(n_cluster)])\n    labels = np.array([np.where(cluster_order == i)[0][0] for i in labels])\n    \n    if n_cluster == 1:\n        return [0] * N\n    else:\n        return list(labels)\n\n# Example usage:\n# data = np.array([[1, 2], [1, 4], [1, 0], [10, 2], [10, 4], [10, 0]])\n# labels = spectral_clustering(data, 2)\n# print(labels)\n```"}
{"task_id": 563, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N, d = X_data.shape\n    alpha = np.zeros(N)\n    b = 0\n    G = np.dot(X_data, X_data.T)  # Gram matrix\n    \n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.dot(alpha * y_data, G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    \n    w = np.dot(alpha * y_data, X_data)\n    w = np.round(w, 4).tolist()\n    b = round(b, 4)\n    return (w, b)\n\n# Example usage:\n# X_data = np.array([[1, 2], [2, 3], [3, 4], [-1, -2], [-2, -3], [-3, -4]])\n# y_data = np.array([1, 1, 1, -1, -1, -1])\n# w, b = perceptron_dual_train(X_data, y_data)\n# print(w, b)\n```\nIn the provided code snippet, the `perceptron_dual_train` function implements the dual-form perceptron learning algorithm that adheres to the specified task requirements. The function accepts the training data `X_data`, labels `y_data`, a learning rate `eta`, and a maximum number of iterations `max_iter`. It returns the learned weight vector `w` and the bias term `b`, both rounded to four decimal places."}
{"task_id": 564, "completion_id": 0, "completion": "```python\nclass Node:\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label\n        self.x = x\n        self.s = s\n        self.y = y\n        self.child = child if child else []\n\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    elif task_type == 'classification':\n        feature_value = features[root.label]\n        for child in root.child:\n            if child.x == feature_value:\n                return predict_sample(child, features, task_type)\n        # Default to second child if no match is found\n        return predict_sample(root.child[1], features, task_type)\n    else:  # task_type == 'regression'\n        feature_value = features[root.label]\n        if feature_value <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)\n\n# Example usage:\n# Assuming we have a classification tree\nnode1 = Node(label=0, child=[Node(x=0, y='A'), Node(x=1, y='B')])\nclassification_root = Node(child=[node1])\n\n# And a regression tree\nnode2 = Node(s=5, child=[Node(y=10), Node(y=20)])\nregression_root = Node(label=0, child=[node2])\n\n# Predictions\nprint(predict_sample(classification_root, [0], 'classification'))  # Output: 'A'\nprint(predict_sample(regression_root, [3], 'regression'))          # Output: 10\n```"}
{"task_id": 565, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef entropy(labels: np.ndarray) -> float:\n    \"\"\"Calculate the entropy of a label distribution.\"\"\"\n    value, counts = np.unique(labels, return_counts=True)\n    probabilities = counts / counts.sum()\n    return -np.sum(probabilities * np.log2(probabilities))\n\ndef conditional_entropy(feature: np.ndarray, labels: np.ndarray) -> float:\n    \"\"\"Calculate the conditional entropy given a feature.\"\"\"\n    unique_values = np.unique(feature)\n    total_samples = len(feature)\n    cond_entropy = 0.0\n    for value in unique_values:\n        subset_indices = np.where(feature == value)[0]\n        subset_labels = labels[subset_indices]\n        subset_prob = len(subset_indices) / total_samples\n        cond_entropy += subset_prob * entropy(subset_labels)\n    return cond_entropy\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    H_y = entropy(y)\n    best_feature_index = 0\n    max_information_gain = 0.0\n\n    for i in range(X.shape[1]):\n        H_y_given_A = conditional_entropy(X[:, i], y)\n        information_gain = H_y - H_y_given_A\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = i\n\n    return (best_feature_index, round(max_information_gain, 6))\n```"}
{"task_id": 566, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\nnp.random.seed(42)  # Set the random seed for reproducibility\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    def build_tree(data, height_limit):\n        if data.shape[0] <= 1 or height_limit == 0:\n            return {'data': data, 'left': None, 'right': None}\n        \n        feature = np.random.randint(data.shape[1])\n        min_val, max_val = data[:, feature].min(), data[:, feature].max()\n        if min_val == max_val:\n            return {'data': data, 'left': None, 'right': None}\n        threshold = np.random.uniform(min_val, max_val)\n        left_idx = data[:, feature] < threshold\n        right_idx = data[:, feature] >= threshold\n        \n        return {\n            'data': data,\n            'left': build_tree(data[left_idx], height_limit - 1),\n            'right': build_tree(data[right_idx], height_limit - 1),\n            'feature': feature,\n            'threshold': threshold\n        }\n    \n    def path_length(tree, x, height_limit):\n        if tree['data'].shape[0] <= 1 or height_limit == 0:\n            n = tree['data'].shape[0]\n            return path_length_correction(n)\n        \n        if x[tree['feature']] < tree['threshold']:\n            return 1 + path_length(tree['left'], x, height_limit - 1)\n        else:\n            return 1 + path_length(tree['right'], x, height_limit - 1)\n    \n    def path_length_correction(n):\n        if n > 1:\n            return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n        return 0\n    \n    n_samples = data.shape[0]\n    height_limit = int(math.ceil(math.log2(sample_size)))\n    trees = []\n    \n    for _ in range(n_trees):\n        if sample_size < n_samples:\n            indices = np.random.choice(n_samples, sample_size, replace=False)\n            sample = data[indices]\n        else:\n            sample = data\n        trees.append(build_tree(sample, height_limit))\n    \n    scores = np.zeros(n_samples)\n    for i in range(n_samples):\n        path_lengths = [path_length(tree, data[i], height_limit) for tree in trees]\n        scores[i] = 2 ** (-np.mean(path_lengths) / (2 * math.log(n_samples - 1) - 2 * (n_samples - 1) / n_samples))\n    \n    threshold = np.quantile(scores, 1 - epsilon)\n    outliers = np.where(scores >= threshold)[0]\n    \n    return sorted(outliers.tolist())\n\n# Example usage:\ndata = np.array([[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [1000, 1000]])\noutliers = detect_outliers(data, n_trees=10, sample_size=5, epsilon=0.1)\nprint(outliers)\n```\n\nThis script provides a small-scale implementation of the Isolation Forest algorithm for anomaly detection. It includes the building of random isolation trees, calculating path lengths, and identifying outliers based on a specified fraction."}
{"task_id": 568, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    \"\"\"Implement a Maximum Entropy classifier using Generalized Iterative Scaling.\"\"\"\n    # Extract unique labels and features\n    labels = np.unique(y_train)\n    n_labels = len(labels)\n    n_features = X_train.shape[1]\n\n    # Count (feature_index, feature_value, label) occurrences in training data\n    feature_counts = defaultdict(int)\n    label_counts = defaultdict(int)\n    for x, y in zip(X_train, y_train):\n        for i, v in enumerate(x):\n            feature_counts[(i, v, y)] += 1\n        label_counts[y] += 1\n\n    # Compute empirical expectations\n    empirical_expectations = {\n        (i, v, y): count / len(X_train) for (i, v, y), count in feature_counts.items()\n    }\n\n    # Initialize weights\n    weights = defaultdict(float)\n\n    # Generalized Iterative Scaling\n    for _ in range(n_iter):\n        largest_update = 0\n        for (i, v, y) in empirical_expectations:\n            # Compute the current expectation\n            current_expectation = 0\n            for x in X_train:\n                if x[i] == v:\n                    score = sum(weights[i, x[i], y1] for y1 in labels)\n                    current_expectation += math.exp(score) / sum(math.exp(sum(weights[i, x[i], y2] for y2 in labels)) for y2 in labels)\n            current_expectation /= len(X_train)\n\n            # Update the weight\n            update = math.log(empirical_expectations[(i, v, y)] / current_expectation)\n            weights[(i, v, y)] += update\n            largest_update = max(largest_update, abs(update))\n\n        # Stop if converged\n        if largest_update < epsilon:\n            break\n\n    # Predict labels for test data\n    predictions = []\n    for x in X_test:\n        scores = [sum(weights[i, x[i], y] for i in range(n_features)) for y in labels]\n        predictions.append(labels[np.argmax(scores)])\n    \n    return predictions\n```\n\nThis solution implements a Maximum Entropy (MaxEnt) classifier using the Generalized Iterative Scaling (GIS) algorithm. The `maxent_predict` function takes training data, test data, and hyperparameters to predict the labels of the test data based on the learned model. The code uses `numpy` for numerical operations and the standard `collections` library for efficient counting and storage of feature occurrences."}
{"task_id": 569, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    word_docs = Counter()\n    total_docs = len(data)\n    \n    for _, words in data:\n        unique_words = set(words)\n        for word in unique_words:\n            word_docs[word] += 1\n\n    # Calculate the document frequency ratios and round them to 4 decimal places\n    doc_freq_ratios = [(word, round(count / total_docs, 4)) for word, count in word_docs.items()]\n    doc_freq_ratios.sort(key=lambda x: (-x[1], x[0]))  # Sort by ratio (descending), then alphabetically\n\n    # Determine the set of most common words based on cut_off\n    if cut_off is None or cut_off >= len(doc_freq_ratios):\n        most_common_words = set(word for word, _ in doc_freq_ratios)\n    else:\n        most_common_words = set(word for word, _ in doc_freq_ratios[:cut_off])\n\n    return doc_freq_ratios, most_common_words\n```"}
{"task_id": 571, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute the weight vector w\n    w = np.dot(X.T, alpha * y)\n    \n    # Round the weight vector to 4 decimal places\n    w = np.round(w, 4)\n    \n    # Compute the bias term b\n    b = np.mean(y - np.dot(X, w))\n    \n    # Round the bias term to 4 decimal places\n    b = np.round(b, 4)\n    \n    # Convert w to a Python list\n    w_list = w.tolist()\n    \n    return w_list, b\n\n# Example usage and check function\ndef check_svm_parameters():\n    X = np.array([[1, 2], [2, 3], [3, 4]])\n    y = np.array([-1, 1, -1])\n    alpha = np.array([0.5, 0.1, 0.2])\n    w_list, b = compute_svm_parameters(X, y, alpha)\n    print(\"Weight vector:\", w_list)\n    print(\"Bias term:\", b)\n    assert np.allclose(w_list, [-0.2, -0.1], atol=1e-4), \"Weight vector is incorrect\"\n    assert np.isclose(b, 0.4333, atol=1e-4), \"Bias term is incorrect\"\n    print(\"Check passed.\")\n\n# Run the check function to verify the solution\ncheck_svm_parameters()\n```\n\nThis script defines the `compute_svm_parameters` function as described in the task, and includes an example usage and a check function to validate the implementation."}
{"task_id": 572, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef euclidean_distance(p1, p2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((p1 - p2) ** 2))\n\ndef compute_distance_matrix(data):\n    \"\"\"Compute the full pair-wise Euclidean distance matrix.\"\"\"\n    n_samples = data.shape[0]\n    distance_matrix = np.zeros((n_samples, n_samples))\n    \n    for i in range(n_samples):\n        for j in range(i, n_samples):\n            distance = euclidean_distance(data[i], data[j])\n            distance_matrix[i, j] = distance\n            distance_matrix[j, i] = distance\n    \n    return distance_matrix\n\ndef k_distance_and_neighbours(distance_matrix, k):\n    \"\"\"For every sample p, obtain its k-distance and the index list of its k nearest neighbours.\"\"\"\n    n_samples = distance_matrix.shape[0]\n    k_distances = np.zeros(n_samples)\n    k_neighbours = [None] * n_samples\n    \n    for i in range(n_samples):\n        sorted_indices = np.argsort(distance_matrix[i])\n        k_neighbours[i] = sorted_indices[1:k+1].tolist()\n        k_distances[i] = distance_matrix[i, sorted_indices[k]]\n    \n    return k_distances, k_neighbours\n\ndef reachability_distance(distance_matrix, k_distances, p, q):\n    \"\"\"Calculate the reachability distance between two points p and q.\"\"\"\n    return max(k_distances[q], distance_matrix[p, q])\n\ndef local_reachability_density(distance_matrix, k_distances, k_neighbours, p):\n    \"\"\"Calculate the Local Reachability Density (LRD) of a point p.\"\"\"\n    lrd_numerator = k_distances[p]\n    lrd_denominator = sum(reachability_distance(distance_matrix, k_distances, p, q) for q in k_neighbours[p])\n    return lrd_numerator / lrd_denominator\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Compute the Local Outlier Factor (LOF) for each sample in the dataset.\"\"\"\n    distance_matrix = compute_distance_matrix(data)\n    k_distances, k_neighbours = k_distance_and_neighbours(distance_matrix, k)\n    \n    n_samples = data.shape[0]\n    lof_scores = np.zeros(n_samples)\n    \n    for p in range(n_samples):\n        lrd_p = local_reachability_density(distance_matrix, k_distances, k_neighbours, p)\n        lrd_neighbours = sum(local_reachability_density(distance_matrix, k_distances, k_neighbours, q) for q in k_neighbours[p])\n        lof_scores[p] = (lrd_neighbours / k) / lrd_p\n    \n    lof_scores = np.round(lof_scores, 4)\n    outlier_indices = [i for i, score in enumerate(lof_scores) if score > epsilon]\n    \n    return lof_scores.tolist(), sorted(outlier_indices)\n\n# Example usage:\ndata = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\nk = 3\nepsilon = 1.5\nscores, outliers = local_outlier_factor(data, k, epsilon)\nprint(scores)\nprint(outliers)\n```\n\nThis script implements the Local Outlier Factor (LOF) algorithm from scratch, as per the task requirements. It computes the full pair-wise Euclidean distance matrix, calculates the k-distances and the list of k nearest neighbours for each sample, defines reachability distances, calculates Local Reachability Densities, and finally computes the LOF scores. The script returns a tuple of LOF scores rounded to four decimal places and the indices of samples considered outliers based on the LOF scores and the provided `epsilon` value."}
{"task_id": 574, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n\n    for c in range(m):\n        base = 10 * (c // 2)\n        # Generate training data\n        x_train = np.random.uniform(base + 1, base + 9, n_train)\n        y_train_class = np.random.uniform(base + 1, base + 9, n_train)\n        X_train.extend(list(zip(x_train, y_train_class)))\n        y_train.extend([c] * n_train)\n\n        # Generate validation data\n        x_val = np.random.uniform(base + 1, base + 9, n_val)\n        y_val_class = np.random.uniform(base + 1, base + 9, n_val)\n        X_val.extend(list(zip(x_val, y_val_class)))\n        y_val.extend([c] * n_val)\n    \n    # Convert to NumPy arrays and round to 4 decimal places\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n    y_train = np.array(y_train)\n    y_val = np.array(y_val)\n    \n    return (X_train, X_val, y_train, y_val)\n\n# Example usage:\n# X_train, X_val, y_train, y_val = generate_data(m=4, n_train=50, n_val=30, seed=42)\n# print(X_train, X_val, y_train, y_val)\n```\nThis solution provides a self-contained Python script that generates synthetic 2-D data according to the task's specifications. It uses `numpy` for array manipulation and `random` for seeding the random number generator, ensuring reproducibility when a seed is provided. The coordinates of the points are rounded to four decimal places as required."}
{"task_id": 579, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    # Initialize centres as the first k points\n    centres = np.array(X[:k].copy())\n    labels = np.zeros(X.shape[0], dtype=int)\n\n    for it in range(max_iters):\n        # Assignment step\n        new_labels = np.array([np.argmin([np.linalg.norm(x - c) for c in centres]) for x in X])\n        \n        # Check for convergence\n        if np.array_equal(labels, new_labels):\n            break\n        \n        labels = new_labels\n\n        # Update step\n        for i in range(k):\n            assigned_points = X[labels == i]\n            if len(assigned_points) > 0:\n                centres[i] = np.mean(assigned_points, axis=0)\n\n    # Round the centres to 4 decimal places\n    rounded_centres = np.round(centres, 4).tolist()\n    return labels.tolist(), rounded_centres\n\n# Example usage\nif __name__ == \"__main__\":\n    X = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n    k = 2\n    labels, centres = kmeans(X, k)\n    print(\"Labels:\", labels)\n    print(\"Centres:\", centres)\n```\n\nThis Python script defines the `kmeans` function as specified, which performs the classical K-Means clustering algorithm in a deterministic way. The example usage at the end demonstrates how to call the function with a sample dataset and prints the resulting labels and centres."}
{"task_id": 581, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    m, n = X.shape\n    w = np.zeros(n)\n    b = 0.0\n\n    if learning_rate == 0 or iterations == 0:\n        return [round(float(i), 4) for i in w], round(float(b), 4)\n\n    for _ in range(iterations):\n        y_pred = X.dot(w) + b\n        residuals = y - y_pred\n\n        for j in range(n):\n            sign_w = -1 if w[j] == 0 else np.sign(w[j])\n            grad_wj = -2 * X[:, j].dot(residuals) + l1_penalty * sign_w + 2 * l2_penalty * w[j]\n            w[j] -= learning_rate * grad_wj / m\n\n        grad_b = -2 * residuals.sum()\n        b -= learning_rate * grad_b / m\n\n    return [round(float(i), 4) for i in w], round(float(b), 4)\n\n# Example usage:\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([1, 2, 3])\nlearning_rate = 0.01\niterations = 1000\nl1_penalty = 0.1\nl2_penalty = 0.1\n\nweights, bias = elastic_net_regression(X, y, learning_rate, iterations, l1_penalty, l2_penalty)\nprint(\"Weights:\", weights)\nprint(\"Bias:\", bias)\n```"}
{"task_id": 591, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    # Add bias term to input\n    x = [1] + x\n\n    # Forward pass through each layer\n    for layer_weights in weights[:-1]:  # Exclude the last layer for now\n        # Compute the dot product and apply ReLU activation\n        x = [max(0, np.dot(neuron_weights, x)) for neuron_weights in layer_weights]\n\n    # Add bias term for the last layer\n    x = [1] + x\n\n    # Compute the dot product for the last layer\n    output = [np.dot(neuron_weights, x) for neuron_weights in weights[-1]]\n\n    # Apply rounding and convert to single float if there is only one output\n    output = [round(val, 4) for val in output]\n    return output[0] if len(output) == 1 else output\n\n# Example usage\nweights = [\n    [[-0.2, 0.3, -0.1], [0.4, -0.5, 0.2]],  # Layer 0\n    [[0.1, -0.2, 0.3], [-0.4, 0.5, -0.2], [0.6, -0.7, 0.8]]  # Layer 1 (output)\n]\nx = [0.5, -0.3]\nprint(neural_net_predict(weights, x))  # Example output\n```\nThis script defines the function `neural_net_predict` which takes the network's weights and an input vector `x` to compute the network's output prediction, adhering to the ReLU activation for hidden layers and a linear activation for the output layer. The prediction is rounded to four decimal places as required."}
{"task_id": 595, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"\n    Compute the centroids of clusters using the K-Means clustering algorithm.\n    \n    Parameters:\n    X (np.ndarray): 2-D array with shape (n_samples, n_features).\n    k (int): Number of clusters.\n    max_iters (int): Maximum number of iterations.\n    \n    Returns:\n    list[list[float]]: List of centroids as lists, each rounded to 4 decimal places.\n    \"\"\"\n    n_samples, n_features = X.shape\n    centroids = np.copy(X[:k, :])  # Initialize centroids to the first k samples\n    \n    for _ in range(max_iters):\n        # Step 1: Assign each sample to the nearest centroid\n        distances = np.sum((X[:, np.newaxis, :] - centroids) ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Step 2: Update each centroid to the mean of its assigned samples\n        new_centroids = np.copy(centroids)\n        for i in range(k):\n            if np.any(labels == i):  # Check if the cluster is not empty\n                new_centroids[i] = np.mean(X[labels == i], axis=0)\n        \n        # Check for convergence\n        if np.all(np.abs(new_centroids - centroids) < 1e-4):\n            break\n        \n        centroids = new_centroids\n    \n    # Sort centroids in ascending lexicographical order and round to 4 decimal places\n    sorted_centroids = np.round(np.sort(centroids, axis=0), 4)\n    return sorted_centroids.tolist()\n\n# Example usage\nX = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0], [8.0, 2.0], [10.0, 2.0], [9.0, 3.0]])\nk = 3\nprint(kmeans_centroids(X, k))\n```\n\nThis script implements the K-Means clustering algorithm from scratch according to the provided specifications. It initializes centroids, assigns samples to the nearest centroid, updates centroids, checks for convergence, and returns the centroids sorted and rounded as required."}
