{"task_id": 0, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Perform Ridge (L2-regularised) Regression on the provided dataset.\n    \n    Args:\n    data (np.ndarray): The input data, with the last column as the target variable.\n    alpha (float): The regularisation strength.\n    \n    Returns:\n    list[float]: The weights of the ridge regression model.\n                  Returns -1 if the matrix inversion is not possible.\n    \"\"\"\n    # Separate features and target\n    X = np.array(data[:, :-1])\n    y = np.array(data[:, -1]).reshape(-1, 1)\n    \n    # Add bias (intercept) term to X\n    X = np.c_[np.ones(X.shape[0]), X]\n    \n    # Calculate the matrix to be inverted\n    I = np.eye(X.shape[1])\n    try:\n        # Compute weights using the closed-form solution\n        weights = np.linalg.inv(X.T @ X + alpha * I) @ X.T @ y\n        \n        # Round to 4 decimal places\n        weights = np.round(weights, 4)\n        \n        # Convert to list\n        return list(np.squeeze(weights))\n    except np.linalg.LinAlgError:\n        # If the matrix inversion is not possible\n        return -1\n\n# Example usage\ndata = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nalpha = 0.01\nprint(ridge_regression(data, alpha))\n```\n\nThis script defines the function `ridge_regression` as required, which implements ridge regression using the closed-form solution and returns the weight vector with the constraints specified in the task."}
{"task_id": 1, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    updates = 0\n\n    # Compute Gram matrix\n    gram_matrix = X_train @ X_train.T\n\n    while updates < n_iter:\n       updated = False\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * gram_matrix[:, i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n        if not updated:\n            break\n        updates += 1\n\n    w = np.sum(alpha[:, np.newaxis] * y_train[:, np.newaxis] * X_train, axis=0)\n    return [round(w_i, 4) for w_i in w], round(b, 4)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Example data\n    X_train = np.array([[3, 3], [4, 3], [1, 1]])\n    y_train = np.array([1, 1, -1])\n    \n    w, b = perceptron_dual(X_train, y_train)\n    print(w, b)\n```\n\nThis script implements the dual-form perceptron learning algorithm according to the specified rules. It takes a set of training samples `X_train`, their labels `y_train`, a learning rate `eta`, and a maximum number of iterations `n_iter`. The training algorithm updates the dual parameters `alpha` and the bias `b` iteratively until convergence or until a maximum number of iterations is reached. The final weight vector `w` and bias `b` are computed from the final `alpha` values and returned as a tuple, with each component rounded to four decimal places."}
{"task_id": 2, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glm_links():\n    \"\"\"\n    Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse, and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    # Define the identity link and its inverse and derivative\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    # Define the log link and its inverse and derivative\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1 / mu\n\n    # Define the logit link and its inverse and derivative\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1 / (1 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return mu * (1 - mu)\n\n    # Return the dictionary of functions\n    return {\n        \"identity\": {\n            \"link\": identity_link,\n            \"inv_link\": identity_inv_link,\n            \"derivative\": identity_derivative,\n        },\n        \"log\": {\n            \"link\": log_link,\n            \"inv_link\": log_inv_link,\n            \"derivative\": log_derivative,\n        },\n        \"logit\": {\n            \"link\": logit_link,\n            \"inv_link\": logit_inv_link,\n            \"derivative\": logit_derivative,\n        },\n    }\n\n# Testing the glm_links function\nlinks = glm_links()\n\n# Testing the logit link function\nmu_logit = np.array([0.2, 0.8])\neta_logit = links[\"logit\"][\"link\"](mu_logit)\nmu_logit_recovered = links[\"logit\"][\"inv_link\"](eta_logit)\n\nprint(f\"Original Mu (logit): {mu_logit}\")\nprint(f\"Transformed via link (logit): {np.round(eta_logit, 4)}\")\nprint(f\"Recovered Mu (logit): {np.round(mu_logit_recovered, 4)}\")\n\n# Testing the identity link function\nmu_identity = np.array([1.0, 5.0])\neta_identity = links[\"identity\"][\"link\"](mu_identity)\nmu_identity_recovered = links[\"identity\"][\"inv_link\"](eta_identity)\n\nprint(f\"Original Mu (identity): {mu_identity}\")\nprint(f\"Transformed via link (identity): {np.round(eta_identity, 4)}\")\nprint(f\"Recovered Mu (identity): {np.round(mu_identity_recovered, 4)}\")\n\n# Testing the log link function\nmu_log = np.array([np.exp(1), np.exp(2)])\neta_log = links[\"log\"][\"link\"](mu_log)\nmu_log_recovered = links[\"log\"][\"inv_link\"](eta_log)\n\nprint(f\"Original Mu (log): {mu_log}\")\nprint(f\"Transformed via link (log): {np.round(eta_log, 4)}\")\nprint(f\"Recovered Mu (log): {np.round(mu_log_recovered, 4)}\")\n```\n\nThis script defines and returns the specified GLM link functions as requested. Each of the three link functions (identity, log, and logit) are defined along with their respective inverse functions and derivatives. The correctness of these functions is verified through several test cases, which should output the original values upon transformation and inverse transformation. The numerical outputs are rounded to four decimal places for readability."}
{"task_id": 3, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n\n    def build_tree(data_indices, depth=0):\n        if len(data_indices) < 3:\n            return [depth] * len(data_indices)\n        \n        feature_idx = np.random.randint(data.shape[1])\n        down = data[data_indices, feature_idx].min()\n        up = data[data_indices, feature_idx].max()\n        split_val = np.random.uniform(down, up)\n\n        left_indices = data_indices[data[data_indices, feature_idx] <= split_val]\n        right_indices = data_indices[data[data_indices, feature_idx] > split_val]\n\n        left_depths = build_tree(left_indices, depth + 1) if left_indices.size > 0 else []\n        right_depths = build_tree(right_indices, depth + 1) if right_indices.size > 0 else []\n\n        return left_depths + right_depths\n\n    data_indices = np.arange(data.shape[0])\n    result = build_tree(data_indices)\n    \n    return result\n```"}
{"task_id": 7, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                      itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    if not transactions or minsup <= 0 or minsup > 1:\n        return {}\n\n    N = len(transactions)\n    min_support_count = math.ceil(minsup * N)\n    \n    # Flatten the transactions and find all unique items\n    all_items = set(item for transaction in transactions for item in transaction)\n\n    # Recursive function to find all frequent itemsets\n    def find_frequent_with_size(items, size):\n        itemsets = combinations(items, size)\n        counter = Counter()\n        for transaction in transactions:\n            transaction_set = set(transaction)\n            for itemset in itemsets:\n                if set(itemset).issubset(transaction_set):\n                    counter[itemset] += 1\n        return {itemset: count for itemset, count in counter.items() if count >= min_support_count}\n\n    frequent_itemsets = {}\n    for size in range(1, len(all_items) + 1):\n        frequent_itemsets.update(find_frequent_with_size(all_items, size))\n    \n    # Sort the tuples in increasing order of their items\n    frequent_itemsets = {tuple(sorted(k)): v for k, v in frequent_itemsets.items()}\n    return frequent_itemsets\n\n# Example usage\ntransactions = [\n    ['bread', 'milk'],\n    ['bread', 'diaper', 'beer', 'egg'],\n    ['milk', 'diaper', 'beer', 'coke'],\n    ['bread', 'milk', 'diaper', 'beer'],\n    ['bread', 'milk', 'diaper', 'coke']\n]\nminsup = 0.6\n\nresult = find_frequent_itemsets(transactions, minsup)\nprint(result)\n```\n\nThe provided script defines a function `find_frequent_itemsets` which takes a list of transactions and a minimum support threshold to find frequent itemsets. Each transaction is a list of items where items can be any hashable data type. The function returns a dictionary mapping frequent itemsets to their support counts. The support is calculated based on the threshold given in `minsup`, which represents the minimum fraction of transactions an itemset must appear in to be considered frequent."}
{"task_id": 11, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    # Initialize the centroids with the first k samples\n    centroids = data[:k].copy()\n    \n    # Initialize the labels and old centroids for the loop\n    labels = np.zeros(data.shape[0], dtype=int)\n    old_centroids = np.zeros_like(centroids)\n    \n    # Main loop\n    for _ in range(max_iter):\n        # Compute the difference between old and current centroids\n        if np.allclose(centroids, old_centroids, atol=epsilon):\n            break\n        \n        # Assign each sample to the closest centroid\n        for i, sample in enumerate(data):\n            distances = np.linalg.norm(sample - centroids, axis=1)\n            labels[i] = np.argmin(distances)\n        \n        # Update centroids\n        old_centroids = centroids.copy()\n        for j in range(k):\n            if np.sum(labels == j) == 0:\n                # If a cluster is empty, reassign the centroid to a random sample\n                new_centroid_idx = np.random.randint(data.shape[0])\n                centroids[j] = data[new_centroid_idx]\n            else:\n                centroids[j] = np.mean(data[labels == j], axis=0)\n    \n    # Round the centroids to 4 decimal places\n    centroids = np.around(centroids, decimals=4)\n    \n    # Convert centroids and labels to the required return types\n    centroids_list = centroids.tolist()\n    labels_list = labels.tolist()\n    \n    return centroids_list, labels_list\n\n# Example usage and testing:\ndata = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0], [8.0, 2.0], [10.0, 2.0], [9.0, 3.0]])\nk = 2\nepsilon = 1e-3\nmax_iter = 2000\ncentroids, labels = kmeans(data, k, epsilon, max_iter)\nprint(\"Centroids:\", centroids)\nprint(\"Labels:\", labels)\n```\n\nThis code snippet follows the described guidelines and constraints to implement the K-Means algorithm in Python without the use of external machine learning libraries beyond NumPy. It explicitly manages the convergence criteria and the initialization of centroids based on the provided specifications, ensuring a functional and testable implementation."}
{"task_id": 13, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import defaultdict\n\ndef mean_center(vector):\n    \"\"\"Mean centers a non-empty vector unless the sample std is <= 1e-3.\"\"\"\n    std = np.std(vector)\n    if std > 1e-3:\n        vector = vector - np.mean(vector)\n    return vector\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_user, n_item = data.shape\n    S = np.zeros((n_item, n_item))\n\n    # Compute item-item similarity matrix\n    for i in range(n_item):\n        for j in range(i, n_item):\n            rated_users = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n\n            if len(rated_users) == 0:\n                S[i, j] = S[j, i] = 0\n            else:\n                r1 = data[rated_users, i]\n                r2 = data[rated_users, j]\n\n                if criterion == \"cosine\":\n                    r1 = mean_center(r1)\n                    r2 = mean_center(r2)\n                    sim = np.dot(r1, r2) / (np.linalg.norm(r1) * np.linalg.norm(r2))\n                    S[i, j] = S[j, i] = sim if np.isfinite(sim) else 0\n                elif criterion == \"pearson\":\n                    S[i, j] = S[j, i] = np.corrcoef(r1, r2)[0, 1]\n\n    # Collect the items the user has rated.  Denote the ratings with `r`.\n    rated_item_indices = np.where(data[user_ind] > 0)[0]\n    r = data[user_ind, rated_item_indices]\n\n    # Predict the attractiveness of every yet unrated item `t`.\n    item_scores = defaultdict(float)\n    for t in range(n_item):\n        if t in rated_item_indices:\n            continue\n\n        sim_scores = S[t, rated_item_indices]\n        denominator = np.abs(sim_scores).sum()\n        if denominator > 0:\n            item_scores[t] = np.dot(r, sim_scores) / denominator\n\n    # Retrieve top-k elements.\n    recommendations = sorted(item_scores, key=item_scores.get, reverse=True)[:k]\n    return recommendations\n```\n\nThis Python script defines a function `knn_recommend` based on the description and requirements given. It implements item-based k-NN collaborative filtering using either cosine similarity or Pearson correlation, as specified by the user. It returns a list containing the indices of the most appealing items that the active user has not yet rated."}
{"task_id": 19, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n        \n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_gain = -np.inf\n    best_split = None\n\n    def compute_objective(g_values, h_values):\n        num = np.sum(g_values) ** 2\n        denom = np.sum(h_values) + lam\n        return -0.5 * num / denom + gamma\n\n    total_obj = compute_objective(g, h)\n\n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        for threshold in unique_values:\n            left_indices = X[:, feature_index] < threshold\n            right_indices = X[:, feature_index] >= threshold\n\n            if left_indices.sum() < 2 or right_indices.sum() < 2:\n                continue\n\n            left_obj = compute_objective(g[left_indices], h[left_indices])\n            right_obj = compute_objective(g[right_indices], h[right_indices])\n\n            gain = total_obj - left_obj - right_obj\n\n            if gain > best_gain:\n                best_gain = gain\n                best_split = (feature_index, threshold)\n                \n    return best_split if best_gain > 0 else None\n\n# Example usage:\n# X = np.array([[1.5, 2.5], [2.5, 3.5], [3.5, 4.5], [4.5, 5.5]])\n# g = np.array([0.9, -0.9, 1.1, -1.1])\n# h = np.array([0.5, 0.5, 0.5, 0.5])\n# gamma = 0.1\n# lam = 1.0\n\n# print(best_split(X, g, h, gamma, lam))\n```\n\nThis function leverages the provided gradient and Hessian statistics to determine how each potential split would affect the loss function, in turn selecting the optimal split that maximises gain. If no such split exists (i.e., none of the splits yield a strictly positive gain), the function returns `None`."}
{"task_id": 20, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Convert input to numpy array if it's not already\n    x = np.asarray(x)\n    \n    # Compute sigmoid\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    \n    # Compute gradient\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    \n    # Round to 4 decimal places\n    sigmoid_x = np.round(sigmoid_x, 4)\n    gradient_x = np.round(gradient_x, 4)\n    \n    # Convert to Python list if original input was not a numpy array\n    if not isinstance(x, np.ndarray):\n        sigmoid_x = sigmoid_x.tolist()\n        gradient_x = gradient_x.tolist()\n    \n    # Return float if the input is scalar\n    if x.size == 1:\n        sigmoid_x = float(sigmoid_x)\n        gradient_x = float(gradient_x)\n    \n    return sigmoid_x, gradient_x\n\n# Check function with provided data points\nprint(sigmoid_activation(1))  # Should return a tuple of floats\nprint(sigmoid_activation([1, 2, 3]))  # Should return a tuple of lists\nprint(sigmoid_activation(np.array([[1, 2], [3, 4]])))  # Should return a tuple of lists\n```"}
{"task_id": 21, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float],\n                        y_train: list[int],\n                        x_test: list[float],\n                        epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    # Initialization\n    n_samples = len(x_train)\n    sample_weights = np.full(n_samples, 1 / n_samples)\n    stumps = []\n    train_predictions = np.zeros(n_samples)\n    \n    x_train_sorted = sorted(zip(x_train, y_train), key=lambda x: x[0])\n    x_train, y_train = zip(*x_train_sorted)\n    \n    # Training the AdaBoost ensemble\n    while True:\n        min_error = float('inf')\n        best_stump = None\n        \n        # Evaluate all possible thresholds\n        for i in range(n_samples - 1):\n            threshold = (x_train[i] + x_train[i + 1]) / 2.0\n            for d in [0, 1]:\n                stump = (d, threshold)\n                error = calculate_error(stump, x_train, y_train, sample_weights)\n                if error < min_error:\n                    min_error = error\n                    best_stump = stump\n        \n        # Stopping criterion\n        if min_error >= 0.5 or calculate_train_error(train_predictions, y_train) <= epsilon:\n            break\n        \n        d, theta = best_stump\n        error = calculate_error(best_stump, x_train, y_train, sample_weights)\n        alpha = 0.5 * math.log((1.0 - error) / max(error, 1e-10))\n        \n        stumps.append((d, theta, alpha))\n        \n        # Update sample weights\n        for i in range(n_samples):\n            if (d == 0 and x_train[i] <= theta) or (d == 1 and x_train[i] > theta):\n                prediction = 1\n            else:\n                prediction = -1\n                \n            if prediction != y_train[i]:\n                sample_weights[i] *= math.exp(alpha)\n        \n        sample_weights /= np.sum(sample_weights)\n        \n        # Update train predictions\n        for i in range(n_samples):\n            train_predictions[i] += alpha * (((d == 0 and x_train[i] <= theta) or (d == 1 and x_train[i] > theta)) * 2 - 1)\n    \n    # Making predictions on test set\n    test_predictions = np.zeros(len(x_test))\n    for d, theta, alpha in stumps:\n        for i, x in enumerate(x_test):\n            test_predictions[i] += alpha * (((d == 0 and x <= theta) or (d == 1 and x > theta)) * 2 - 1)\n    \n    return [1 if pred > 0 else -1 for pred in test_predictions]\n\ndef calculate_error(stump, X, Y, weights):\n    d, theta = stump\n    error = 0.0\n    for x, y, w in zip(X, Y, weights):\n        if (d == 0 and x <= theta and y != 1) or (d == 1 and x > theta and y != 1):\n            error += w\n    return error\n\ndef calculate_train_error(predictions, y_train):\n    return np.mean([1 if pred * true != 1 else 0 for pred, true in zip(predictions, y_train)])\n\n# Example usage\nx_train = [1.0, 2.0, 3.0, 4.0, 5.0]\ny_train = [1, -1, 1, -1, 1]\nx_test = [1.5, 2.5, 3.5, 4.5]\nepsilon = 0.1\npredictions = adaboost_1d_predict(x_train, y_train, x_test, epsilon)\nprint(predictions)\n```\nThis Python script fulfills the requirements specified by implementing AdaBoost using one-dimensional decision stumps. It contains the requested function which trains the ensemble and makes predictions on a given test set."}
{"task_id": 25, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    n_train_samples, n_features = X_train.shape\n    n_test_samples = X_test.shape[0]\n\n    # Compute the Gaussian kernel matrix between X_train and X_test vectors.\n    K = np.zeros((n_test_samples, n_train_samples))\n    for i in range(n_test_samples):\n        for j in range(n_train_samples):\n            distance_squared = np.sum((X_train[j, :] - X_test[i, :]) ** 2)\n            K[i, j] = np.exp(-gamma * distance_squared)\n\n    # Make predictions\n    predictions = np.sign(np.dot(K, alpha * y_train) + b).astype(int)\n\n    return predictions.tolist()\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4]])\n# y_train = np.array([-1, 1, -1])\n# alpha = np.array([0.5, 0.3, 0.2])\n# b = 0.6\n# gamma = 0.5\n# X_test = np.array([[1, 2], [3, 2]])\n\n# predictions = gaussian_svm_predict(X_train, y_train, alpha, b, gamma, X_test)\n# print(predictions)  # Output should be a list of 1 or -1 based on the defined Gaussian-SVM function\n```\nThis code defines the `gaussian_svm_predict` function and demonstrates how to use it. The user would need to provide their own training and test data for real use."}
{"task_id": 28, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    # Convert list of lists to numpy array\n    X_array = np.array(X)\n    m, n = X_array.shape\n    \n    # Check for valid k\n    if k < 1 or k > min(m, n):\n        return -1\n\n    # Perform SVD\n    U, S, VT = np.linalg.svd(X_array, full_matrices=False)\n    \n    # Truncate U, S, and VT to rank k\n    U_k = U[:, :k]\n    S_k = S[:k]\n    VT_k = VT[:k, :]\n    \n    # Perform reconstruction\n    X_hat_array = np.dot(U_k * S_k, VT_k)\n    \n    # Calculate MSE\n    mse = np.mean((X_array - X_hat_array) ** 2)\n    \n    # Convert back to list of lists and round\n    X_hat = [list(np.round(row, 4)) for row in X_hat_array]\n    mse = round(mse, 4)\n    \n    return X_hat, mse\n```\n\nThis Python function takes a two-dimensional list of integers or floats `X` and an integer `k` and computes the rank-k reconstruction \\(\\hat X\\) using truncated SVD, returning the reconstructed matrix and the mean squared reconstruction error both rounded to four decimal places as required. If `k` is an invalid value, the function returns -1."}
{"task_id": 29, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                           y_train: list[float] | np.ndarray,\n                           x_query: float,\n                           epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    # Convert to numpy arrays for convenience\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    \n    # Initial prediction is the mean of y_train\n    prediction = np.mean(y_train)\n    residuals = y_train - prediction\n    \n    # Sort the feature and target by feature values\n    sorted_indices = np.argsort(x_train)\n    x_train_sorted = x_train[sorted_indices]\n    residuals = residuals[sorted_indices]\n    \n    # Generate candidate split points\n    split_points = (x_train_sorted[1:] + x_train_sorted[:-1]) / 2\n    \n    # Gradient boosting loop\n    while np.sum(residuals**2) > epsilon:\n        best_split = None\n        best_rss = np.inf\n        best_c1 = None\n        best_c2 = None\n        \n        for split in split_points:\n            mask_left = x_train_sorted <= split\n            mask_right = x_train_sorted > split\n            \n            c1 = residuals[mask_left].mean()\n            c2 = residuals[mask_right].mean()\n            \n            predictions = np.where(mask_left, c1, c2)\n            rss = np.sum((residuals - predictions)**2)\n            \n            if rss < best_rss:\n                best_split = split\n                best_rss = rss\n                best_c1 = c1\n                best_c2 = c2\n        \n        # Update residuals\n        mask_left = x_train_sorted <= best_split\n        mask_right = x_train_sorted > best_split\n        predictions = np.where(mask_left, best_c1, best_c2)\n        residuals -= predictions\n        \n        # Add the best stump to the prediction\n        if x_query <= best_split:\n            prediction += best_c1\n        else:\n            prediction += best_c2\n    \n    return round(prediction, 4)\n\n# Example usage:\nx_train = [1, 2, 3, 4, 5]\ny_train = [1.1, 1.9, 3.1, 4.1, 5.0]\nx_query = 3.5\nprint(predict_boosting_tree(x_train, y_train, x_query))\n```\n\nThis code snippet follows the instructions and implements the described algorithm. It first initializes the prediction as the mean of the training targets and calculates the residuals. Then, it enters the boosting loop where it iteratively finds the best split point that minimizes the residual sum of squares (RSS). After finding the best split, it updates the residuals and adds the contribution of the best stump to the prediction. It exits the loop when the total RSS is below the specified tolerance `epsilon`. The final prediction for the query `x_query` is calculated and returned."}
{"task_id": 34, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None) -> np.ndarray:\n    \"\"\"\n    Generates a random binary tensor with specified shape and sparsity.\n    \n    Parameters:\n    - shape (tuple[int, ...]): The shape of the tensor.\n    - sparsity (float): The probability of generating a 1.0 in the tensor.\n    - seed (int | None): Seed for the random number generator to ensure\n      reproducibility. Defaults to None for random seeding.\n      \n    Returns:\n    - numpy.ndarray: A binary tensor with values 0.0 and 1.0.\n      If sparsity is outside [0, 1], returns -1.\n    \"\"\"\n    \n    # Verify sparsity is within the allowed range.\n    if not (0.0 <= sparsity <= 1.0):\n        return np.array(-1, dtype=float)\n    \n    # Set the seed for reproducibility if provided.\n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Generate a tensor of random floats in the [0.0, 1.0) range.\n    random_tensor = np.random.rand(*shape)\n    \n    # Create a binary tensor based on the sparsity threshold.\n    binary_tensor = np.where(random_tensor < sparsity, 1.0, 0.0)\n    \n    return binary_tensor\n\n# Example usage\nshape = (2, 3)\nsparsity = 0.3\nseed = 42\n\n# Expected Output with given seed, sparsity and shape:\n# [[0.0, 1.0, 1.0],\n#  [0.0, 0.0, 0.0]]\nprint(random_binary_tensor(shape, sparsity, seed))\n```"}
{"task_id": 39, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    # Find the index of the median element without fully sorting the array.\n    n_samples = data.shape[0]\n    middle = n_samples // 2\n    # Use `argpartition` to get indices that would partition the array.\n    # Only the k-th smallest element's position is of interest.\n    median_idx = np.argpartition(data[:, d], middle)[middle]\n    pivot = median_idx\n\n    # Separate the left and right indices.\n    left_indices = np.argpartition(data[:, d], middle)[:middle]\n    right_indices = np.argpartition(data[:, d], middle)[middle+1:]\n\n    # Convert the numpy arrays to sorted lists as required.\n    left = sorted(left_indices)\n    right = sorted(right_indices)\n\n    return pivot, left, right\n\n# Example usage\ndata = np.array([[3, 2], [1, 4], [4, 1], [2, 3]])\nd = 0\npivot, left, right = get_split(data, d)\nprint(f\"Median row index: {pivot}\")\nprint(f\"Left indices: {left}\")\nprint(f\"Right indices: {right}\")\n```\n\nThis solution adheres to the specification and executes the median split required for a KD-Tree construction in an efficient manner, using `numpy.argpartition` to achieve the desired O(n) time complexity."}
{"task_id": 40, "completion_id": 0, "completion": "Here is the self-contained Python script to solve the provided task:\n\n```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, \"x must be one-dimensional.\"\n    assert stride >= 1, \"stride must be >= 1.\"\n    assert len(x) >= frame_width, \"len(x) must be >= frame_width.\"\n\n    # Number of complete frames\n    n_frames = (len(x) - frame_width) // stride + 1\n    # New shape\n    new_shape = (n_frames, frame_width)\n    # Strides for the new view\n    new_strides = (x.strides[0] * stride, x.strides[0])\n\n    # Creating the view on the original array\n    framed_signal = as_strided(x, shape=new_shape, strides=new_strides)\n\n    # Setting writeability\n    framed_signal.setflags(write=writeable)\n\n    return framed_signal\n\n# Example usage\nif __name__ == \"__main__\":\n    signal = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    frame_width = 4\n    stride = 2\n    framed_x = to_frames(signal, frame_width, stride)\n    print(framed_x)\n```\n\nThis script defines the function `to_frames` that creates overlapping frames from a 1-D NumPy array according to the given parameters. It ensures that the resulting array has the proper shape and that it is a view on the original data. The function also considers the `writeable` flag to control the writability of the returned array."}
{"task_id": 48, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_stochastic(X: list[list[float]] | np.ndarray) -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Ensure the input is a numpy array\n    X = np.array(X)\n    \n    # Check if the matrix is two-dimensional\n    if X.ndim != 2:\n        return False\n    \n    # Check if all elements are between 0 and 1 inclusive\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    \n    # Check if the sum of each row is close to 1 with a tolerance\n    row_sums = X.sum(axis=1)\n    if not np.allclose(row_sums, np.ones(X.shape[0]), atol=1e-8):\n        return False\n    \n    return True\n\n# Example usage and testing\nmatrix = [[1, 0], [0.5, 0.5], [0, 1]]\nprint(is_stochastic(matrix))  # Should return True\n\nmatrix = [[1, 0], [0.5, 0.7], [0, 1]]\nprint(is_stochastic(matrix))  # Should return False\n\nmatrix = [[1, 0], [-0.1, 1.1], [0, 1]]\nprint(is_stochastic(matrix))  # Should return False\n\nmatrix = [[1, 0], [0.5, 0.5]]\nprint(is_stochastic(matrix))  # Should return True\n```"}
{"task_id": 55, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n_samples, n_features = X.shape\n    w = np.zeros(n_features)\n    s = np.zeros(n_features)\n    \n    for i in range(max_iter):\n        # Determine batch indices\n        start_idx = (i * batch_size) % n_samples\n        end_idx = (start_idx + batch_size) % n_samples\n        if start_idx != 0 and end_idx == 0:\n            end_idx = n_samples\n        \n        batch_X = X[start_idx:end_idx]\n        batch_y = y[start_idx:end_idx]\n        \n        # Compute gradient\n        pred = np.dot(batch_X, w)\n        g = np.dot(batch_X.T, pred - batch_y) / len(batch_y)\n        \n        # Update running average of squared gradients\n        s = rho * s + (1 - rho) * (g ** 2)\n        \n        # Update weights\n        w = w - eta * g / (np.sqrt(s) + eps_station)\n        \n        # Check convergence criterion\n        if np.linalg.norm(g) < epsilon:\n            break\n\n    return [round(x, 4) for x in w]\n\n# Example usage\nX = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\ny = np.array([3, 4, 5, 6])\nprint(rms_prop(X, y))\n```\n\nThis code snippet implements the RMSprop algorithm to perform an optimization for linear regression. The method iteratively updates the weight vector `w` using the described RMSprop update rule. The function checks for convergence by comparing the norm of the gradient to a threshold `epsilon` and stops early if the norm is below this threshold or the maximum number of iterations is reached."}
{"task_id": 56, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n    def safe_log1p(x):\n        return np.log1p(np.exp(x))\n    \n    def safe_logistic(x):\n        return 1 / (1 + np.exp(-x))\n    \n    # Convert input to a numpy array for ease of computation\n    x = np.array(x if isinstance(x, (list, np.ndarray)) else [x])\n    \n    if deriv:\n        # Derivative of SoftPlus is the sigmoid function\n        result = safe_logistic(x)\n    else:\n        # Numerically stable computation of SoftPlus\n        result = np.where(x > 0, x + np.log1p(np.exp(-x)), safe_log1p(x))\n    \n    # Round result to the nearest 4th decimal\n    result = np.round(result, 4)\n    \n    # Convert back to a list or float\n    if isinstance(x, np.ndarray) and x.size == 1:\n        return float(result)\n    else:\n        return result.tolist()\n\n# Test the function\nx_scalar = 2.0\nx_list = [-1.0, 2.0, 3.0]\nx_array = np.array([0.5, -0.5, -5.5])\n\nprint(softplus(x_scalar))  # Scalar input\nprint(softplus(x_list))  # List input\nprint(softplus(x_array))  # Array input\nprint(softplus(x_scalar, deriv=True))  # Scalar input with derivative\nprint(softplus(x_list, deriv=True))  # List input with derivative\nprint(softplus(x_array, deriv=True))  # Array input with derivative\n```"}
{"task_id": 58, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import defaultdict, Counter\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\"\"\"\n    \n    # Helper function to generate n-grams\n    def generate_ngrams(tokens, n):\n        return [' '.join(tokens[i:i+n]) for i in range(len(tokens)-n+1)]\n\n    # Count n-grams and (n-1)-grams in the corpus\n    ngrams = generate_ngrams(corpus, N)\n    ngram_counts = Counter(ngrams)\n    \n    if N > 1:\n        prefix_ngrams = generate_ngrams(corpus, N-1)\n        prefix_counts = Counter(prefix_ngrams)\n    else:\n        prefix_counts = Counter(corpus)\n\n    # Compute the log-probability\n    log_prob_sum = 0.0\n    sequence_ngrams = generate_ngrams(sequence, N)\n    for ngram in sequence_ngrams:\n        if N == 1:\n            prefix_count = prefix_counts[sequence[0]]\n            ngram_count = ngram_counts[ngram] if ngram in ngram_counts else 0\n        else:\n            parts = ngram.split(' ')\n            prefix_count = prefix_counts[' '.join(parts[:-1])]\n            ngram_count = ngram_counts[ngram] if ngram in ngram_counts else 0\n        \n        if prefix_count == 0 or ngram_count == 0:\n            return float('-inf')\n        \n        probability = ngram_count / prefix_count\n        log_prob_sum += np.log(probability)\n    \n    return round(log_prob_sum, 4)\n\n# Example usage\ncorpus = [\"the\", \"cat\", \"is\", \"on\", \"the\", \"mat\", \"the\", \"dog\", \"is\", \"on\", \"the\", \"rug\"]\nsequence = [\"the\", \"dog\", \"is\", \"on\"]\nN = 2\nprint(unsmoothed_ngram_log_prob(corpus, sequence, N))\n```\n\nThis script defines the function `unsmoothed_ngram_log_prob` which computes the unsmoothed MLE N-gram log-probability of a given sequence based on a training corpus. It generates n-grams from the corpus and counts their occurrences to calculate probabilities. The log-probability is then computed, handling empty counts by returning negative infinity. The function is rounded to four decimal places as requested."}
{"task_id": 62, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef lasso_regression(X: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\", degree: int, reg_factor: float, n_iterations: int = 1000, tol: float = 1e-6) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    \n    # Convert inputs to numpy arrays for ease of use\n    X = np.array(X).reshape(-1, 1)\n    y = np.array(y).reshape(-1, 1)\n    \n    # Create polynomial features\n    X_poly = np.hstack([X**i for i in range(degree + 1)])\n    \n    # Initialize weights\n    w = np.zeros(degree + 1)\n    \n    for _ in range(n_iterations):\n        w_old = w.copy()\n        for j in range(degree + 1):\n            if j == 0:\n                # Bias term update, no regularization\n                w[j] = np.mean(y - X_poly[:, 1:] @ w[1:])\n            else:\n                # Coordinate descent update step\n                X_j = X_poly[:, j]\n                rho = X_j.T @ (y - X_poly @ w + w[j] * X_j)\n                soft_threshold = np.sign(rho) * max(abs(rho) - reg_factor, 0)\n                w[j] = soft_threshold / (X_j.T @ X_j)\n        \n        # Check convergence\n        max_change = np.max(np.abs(w - w_old))\n        if max_change < tol:\n            break\n    \n    # Return weights rounded to 4 decimal places\n    return [round(float(weight), 4) for weight in w]\n\n# Example usage:\nX_example = [1, 2, 3, 4, 5]\ny_example = [2, 4, 6, 8, 10]\ndegree_example = 1\nreg_factor_example = 0.1\nprint(lasso_regression(X_example, y_example, degree_example, reg_factor_example))\n```\n\nThis script defines a function `lasso_regression` which takes one-dimensional input `X`, target values `y`, a polynomial degree `degree`, a regularization factor `reg_factor`, and implements coordinate descent optimization for the univariate Lasso regression model. The coefficients are returned rounded to four decimal places."}
{"task_id": 63, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Computes the backward probability vector \u03b2 for a given time index t in a Hidden Markov Model.\n    \n    Parameters:\n    A (list[list[float]]): Transition-probability matrix, shape(N, N).\n    B (list[list[float]]): Emission-probability matrix, shape(N, M).\n    obs (list[int]): List of observed symbols as indices, length T.\n    t (int): Integer time index, 0 \u2264 t < T.\n    \n    Returns:\n    list[float]: A list containing the backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    obs = np.array(obs)\n    \n    # Number of hidden states\n    N = A.shape[0]\n    \n    # Number of observations\n    T = len(obs)\n    \n    # Initialize the beta T-1 vector with ones as per the backward algorithm\n    beta = np.ones(N)\n    \n    # Compute the backward probabilities for each index from T-2 to t\n    for i in range(T-2, t-1, -1):\n        new_beta = []\n        for s in range(N):\n            # Compute the sum for the new beta value for state s\n            new_beta_s = 0\n            for s_prime in range(N):\n                new_beta_s += A[s][s_prime] * B[s_prime][obs[i+1]] * beta[s_prime]\n            new_beta.append(new_beta_s)\n        # Assign the new beta values to beta\n        beta = new_beta\n    \n    # Ensure to return a list with elements rounded to 4 decimal places\n    return [round(x, 4) for x in beta]\n\n# Example usage\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.5, 0.5], [0.2, 0.8]]\nobs = [0, 1, 0]\nt = 1\nprint(backward_beta(A, B, obs, t))\n```\nThe provided code snippet is meant to serve as an example that showcases the usage of the `backward_beta` function for a hypothetical HMM scenario."}
{"task_id": 65, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or not pi or not obs:\n        return 0.0\n\n    N = len(A)  # Number of states\n    T = len(obs)  # Length of the observation sequence\n\n    # Initialize the backward variables\n    beta = np.zeros((T, N))\n\n    # Base case initialization\n    beta[T-1] = 1\n\n    # Recursive computation of beta values\n    for t in range(T-2, -1, -1):\n        for i in range(N):\n            for j in range(N):\n                beta[t][i] += A[i][j] * B[j][obs[t + 1]] * beta[t + 1][j]\n\n    # Calculate and return the probability of the observation sequence\n    P = 0\n    for i in range(N):\n        P += pi[i] * B[i][obs[0]] * beta[0][i]\n\n    return round(P, 6)\n\n# Example usage:\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.5, 0.5], [0.8, 0.2]]\npi = [0.6, 0.4]\nobs = [0, 1]\nprint(backward_prob(A, B, pi, obs))  # Expected output: 0.120000\n```"}
{"task_id": 69, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # Convert lists to numpy arrays for easier computation\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    observations = np.array(observations)\n\n    n = A.shape[0]  # Number of states\n    m = B.shape[1]  # Number of possible observations\n\n    # Validate dimensions and input\n    if not (S.shape == (n,) and A.shape == (n, n) and B.shape[1] == m):\n        return -1\n    if not len(observations) > 0:\n        return -1\n    if not all(0 <= x < m for x in observations):\n        return -1\n\n    # Initialize the alpha table, with the same dimensions as observations plus one for the initial state\n    alpha = np.zeros((len(observations) + 1, n))\n\n    # The alpha initialization step: probability of being in each state at time 0 (start)\n    alpha[0] = S * B[:, observations[0]]\n\n    # Apply the forward algorithm\n    for t in range(1, len(observations)):\n        for j in range(n):\n            alpha[t][j] = alpha[t-1] @ A[:, j] * B[j][observations[t]]\n\n    # The result is the sum of being in any state at the last observation\n    sequence_likelihood = np.sum(alpha[-2, :])\n\n    return round(sequence_likelihood, 4)\n\n# Example usage:\nS = [0.3, 0.4, 0.3]\nA = [[0.5, 0.2, 0.3],\n     [0.3, 0.5, 0.2],\n     [0.2, 0.3, 0.5]]\nB = [[0.5, 0.5],\n     [0.4, 0.6],\n     [0.7, 0.3]]\nobservations = [0, 1, 0]\n\nprint(forward_algorithm(S, A, B, observations))  # Example should output 0.0442\n```"}
{"task_id": 70, "completion_id": 0, "completion": "```python\nfrom collections import Counter, defaultdict\nfrom typing import List, Dict, Tuple\n\ndef construct_tree(transactions: List[List[str]], headers: Dict[str, int]) -> 'FPTree':\n    root = FPTree(None, None, '/')\n    for transaction in transactions:\n        sorted_items = [item for item in sorted(transaction) if item in headers]\n        curr_node = root\n        for item in sorted_items:\n            next_node = curr_node.get_child(item)\n            if next_node:\n                next_node.increment()\n            else:\n                next_node = FPTree(item, headers, curr_node)\n                curr_node.add_child(next_node)\n            curr_node = next_node\n    return root\n\ndef fp_growth(transactions: List[List[str]], min_support: int) -> List[List[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n    \n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n    \n    The result must be deterministic:\n        \u2022 Inside each item-set the items have to be sorted alphabetically.\n        \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_support}\n    \n    if not frequent_items:\n        return []\n    \n    frequent_items = dict(sorted(frequent_items.items(), key=lambda item: (-item[1], item[0])))\n    \n    tree = construct_tree(transactions, frequent_items)\n    headers = tree.headers\n    frequent_itemsets = []\n    \n    def mine_tree(node: 'FPTree', prefix_path: List[str]):\n        if node.item:\n            prefix_path.append(node.item)\n            frequent_itemsets.append(prefix_path[:])\n        \n        for item, path in node.paths.items():\n            conditional_patterns = []\n            for count, node in path:\n                path = []\n                current = node\n                while current.parent and current.item != '/':\n                    path.append((current.item, count))\n                    current = current.parent\n                if len(path) > 1:\n                    path.pop()\n                    conditional_patterns.append((count, [p[0] for p in reversed(path)]))\n                    \n            conditional_fptree = construct_tree(conditional_patterns, headers)\n            new_suffix = []\n            for count, node in node.paths[item]:\n                new_suffix.append(node.item)\n                \n            new_prefix = prefix_path + new_suffix\n            \n            mine_tree(conditional_fptree, new_prefix)\n    \n    mine_tree(tree, [])\n    \n    # Sort and remove duplicates\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    frequent_itemsets = [list(x) for x in sorted(set(tuple(x) for x in frequent_itemsets))]\n    \n    return frequent_itemsets\n\nclass FPTree:\n    def __init__(self, item: str, headers: Dict[str, int], parent: 'FPTree'):\n        self.item = item\n        self.count = 0\n        self.children = []\n        self.parent = parent\n        self.paths = defaultdict(list)\n        if parent:\n            parent.add_child(self)\n            parent.paths[item].append((1, self))\n        self.headers = headers\n    \n    def add_child(self, child: 'FPTree'):\n        self.children.append(child)\n    \n    def get_child(self, item: str) -> 'FPTree':\n        for child in self.children:\n            if child.item == item:\n                return child\n        return None\n    \n    def increment(self):\n        self.count += 1\n\n# Example usage\ntransactions = [\n    ['r', 'z', 'h', 'j', 'p'],\n    ['z', 'y', 'x', 'w', 'v', 'u', 't', 's'],\n    ['z'],\n    ['r', 'x', 'n', 'o', 's'],\n    ['y', 'r', 'x', 'z', 'q', 't', 'p'],\n    ['y', 'z', 'x', 'e', 'q', 's', 't', 'm']\n]\nmin_support = 3\nprint(fp_growth(transactions, min_support))\n```\n\nThis code provides a detailed implementation of the FP-Growth algorithm. It constructs an FP-tree from the transaction data, then recursively mines the tree to find all frequent item-sets. The main function `fp_growth` takes a list of transactions and a minimum support threshold, and returns a list of frequent item-sets that meet the criteria, sorted as specified in the task requirements."}
{"task_id": 75, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    # Validate k\n    if not 1 <= k <= len(X_train):\n        return [-1]\n\n    # Convert the lists to NumPy arrays for computation\n    X_train_np = np.array(X_train)\n    X_test_np = np.array(X_test)\n    predictions = []\n\n    # Iterate over test samples\n    for x_test in X_test_np:\n        # Compute distances (Euclidean, skipping square root)\n        distances = np.sum((X_train_np - x_test) ** 2, axis=1)\n        # Get indices of k nearest neighbors\n        nearest_indices = np.argsort(distances)[:k]\n        # Extract the labels of these neighbors\n        nearest_labels = [y_train[i] for i in nearest_indices]\n        # Count the votes and find the smallest class label among the tied ones\n        label_counts = np.bincount(nearest_labels)\n        prediction = np.where(label_counts == max(label_counts))[0].min()\n        predictions.append(prediction)\n\n    return predictions\n\n# Example Usage\nX_train = [[0], [1], [2], [3]]\ny_train = [0, 0, 1, 1]\nX_test = [[1.5]]\nk = 1\nprint(knn_predict(X_train, y_train, X_test, k))  # Output: [0]\n```"}
{"task_id": 76, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Ensure input validation by converting them to NumPy arrays\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    \n    # Add machine epsilon to probabilities to ensure numerical stability\n    epsilon = np.finfo(float).eps\n    y_pred = np.clip(y_pred, epsilon, 1.0 - epsilon)\n    \n    # Compute the categorical cross-entropy loss\n    loss = -np.sum(y * np.log(y_pred))\n    \n    # Return the loss, rounded to four decimal places\n    return round(loss, 4)\n\n# Example usage\ny_true = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\ny_pred = np.array([[0.9, 0.05, 0.05], [0.05, 0.9, 0.05], [0.05, 0.05, 0.9]])\nloss = cross_entropy_loss(y_true, y_pred)\nprint(f\"The categorical cross-entropy loss is: {loss}\")\n```\n\nThis Python script defines a function `cross_entropy_loss` that calculates the unnormalised categorical cross-entropy loss for a batch of one-hot encoded targets given the true labels and the predicted class probabilities. The function ensures numerical stability by adding machine epsilon and ensures the values do not exceed the range (0, 1) by clipping the probabilities, though the function assumes valid input by design. The example usage demonstrates the function with a hypothetical data example."}
{"task_id": 77, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef relu(Z):\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(0, Z)\n\ndef sigmoid(Z):\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\n\ndef linear_forward(A, W, b):\n    \"\"\"Linear forward step to calculate Z.\"\"\"\n    Z = np.dot(W, A) + b\n    cache = (A, W, b)\n    return Z, cache\n\ndef linear_activation_forward(A_prev, W, b, activation):\n    \"\"\"Apply a linear forward step followed by an activation step.\"\"\"\n    Z, linear_cache = linear_forward(A_prev, W, b)\n    if activation == \"relu\":\n        A, activation_cache = relu(Z), Z\n    elif activation == \"sigmoid\":\n        A, activation_cache = sigmoid(Z), Z\n    else:\n        raise ValueError(\"Activation function not recognized.\")\n    cache = (linear_cache, activation_cache)\n    return A, cache\n\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"\n    Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m).\n    \"\"\"\n    caches = []\n    L = len(parameters) // 2  # number of layers in the neural network\n    A = X\n    \n    # Implement [LINEAR -> RELU]*(L-1). Add \"cache\" to the \"caches\" list.\n    for l in range(1, L):\n        A_prev = A\n        A, cache = linear_activation_forward(A_prev, parameters[f'W{l}'], parameters[f'b{l}'], \"relu\")\n        caches.append(cache)\n    \n    # Implement LINEAR -> SIGMOID. Add \"cache\" to the \"caches\" list.\n    AL, cache = linear_activation_forward(A, parameters[f'W{L}'], parameters[f'b{L}'], \"sigmoid\")\n    caches.append(cache)\n\n    # Return AL and caches; round AL to 4 decimal places and convert to list\n    AL_to_list = np.round(AL, 4).tolist()\n    return AL_to_list\n\n# Example usage:\n# parameters = {'W1': np.array([[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]]), 'b1': np.array([[0.5], [1.0], [1.5]]),\n#               'W2': np.array([[-1.0, -2.0, -3.0]]), 'b2': np.array([[2.0]])}\n# X = np.array([[2.0, 3.0], [4.0, 5.0]])\n# print(L_model_forward(X, parameters))\n```\n\nThis Python script defines functions to perform the forward propagation for an L-layer neural network using ReLU activation for hidden layers and Sigmoid activation for the output layer. It includes handling for an arbitrary number of layers and adheres to the constraints specified in the task description, particularly ensuring that the output is rounded and listified as required."}
{"task_id": 81, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    m = Y.shape[1] if Y.shape[0] == 1 else Y.size  # Number of samples\n    \n    # Clip A2 to prevent log(0)\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    \n    # Compute the log loss for each sample\n    log_loss = - (Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    \n    # Compute the average cost and round it to six decimal places\n    cost = np.sum(log_loss) / m\n    \n    return np.round(cost, 6)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Example data\n    A2 = np.array([[0.9, 0.1, 0.85, 0.6]])  # Example predicted probabilities\n    Y = np.array([[1, 0, 1, 0]])  # Example ground-truth labels\n    \n    # Compute the cost\n    cost = compute_cost(A2, Y)\n    \n    # Output the result\n    print(cost)\n```\n\nThis code snippet provides a function `compute_cost` that computes the binary cross-entropy cost given the predicted probabilities `A2` and the ground-truth labels `Y`. The code includes a clipping step to ensure numerical stability and rounds the final cost to six decimal places as required. An example of how to use the function is also provided."}
{"task_id": 82, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | \"np.ndarray\", epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    # Convert Q to a numpy array if it isn't already\n    Q = np.array(Q)\n    n = len(Q)\n    \n    # Calculate the greedy index (first occurrence in case of ties)\n    greedy_index = np.argmax(Q)\n    \n    # Calculate the base probability for non-greedy actions\n    base_probability = epsilon / n\n    \n    # Calculate the probability for the greedy action\n    greedy_probability = 1 - epsilon + base_probability\n    \n    # Initialize the probabilities array\n    probabilities = np.full(n, base_probability)\n    probabilities[greedy_index] = greedy_probability\n\n    # Round the probabilities to 4 decimal places and return as a list\n    return [round(prob, 4) for prob in probabilities]\n\n# Function to test the epsilon_soft function with different inputs\ndef test_epsilon_soft():\n    test_cases = [\n        ([1.2, 0.3, 1.2, -0.1], 0.1, [0.925, 0.025, 0.025, 0.025]),\n        ([0.3, 0.3, 0.3, 0.3], 0.4, [0.25, 0.25, 0.25, 0.25]),\n        ([1.0, 0.5, 0.5, 0.5], 0.2, [0.805, 0.035, 0.035, 0.035]),\n        ([7.0, 7.0, 7.0, 7.0], 0.5, [0.25, 0.25, 0.25, 0.25])\n    ]\n    \n    for input_Q, epsilon, expected_output in test_cases:\n        result = epsilon_soft(input_Q, epsilon)\n        assert np.isclose(sum(result), 1, atol=1e-12), \"Probabilities do not sum to 1 within tolerance\"\n        assert result == expected_output, f\"Unexpected result: expected {expected_output}, got {result}\"\n        print(f\"Passed for: Q = {input_Q}, epsilon = {epsilon}\")\n\n# Run test cases\ntest_epsilon_soft()\n```"}
{"task_id": 86, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nfrom typing import List, Union\n\ndef aggregate_random_forest_votes(predictions: List[List[Union[int, float, str]]]) -> List[Union[int, float, str]]:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n    \n    Parameters\n    ----------\n    predictions : List[List[Union[int, float, str]]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n    \n    Returns\n    -------\n    List[Union[int, float, str]]\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    # Transpose the predictions list so each inner list corresponds to votes for one sample\n    sample_votes = zip(*predictions)\n    \n    # For each sample, compute the most common vote\n    final_predictions = []\n    for votes in sample_votes:\n        # Count the votes for each class\n        vote_counts = Counter(votes)\n        # Get the list of common elements sorted by frequency (and by natural order for elements with the same frequency)\n        common_votes = vote_counts.most_common()\n        # Select the most common (and smallest in case of a tie) class\n        most_common_vote = min((vote for vote, count in common_votes if count == common_votes[0][1]])\n        final_predictions.append(most_common_vote)\n        \n    return final_predictions\n\n# Example usage\npredictions = [\n    ['A', 'A', 'B'],\n    ['A', 'B', 'A'],\n    ['A', 'A', 'B']\n]\n\nprint(aggregate_random_forest_votes(predictions))  # Output should be ['A', 'A', 'A']\n```"}
{"task_id": 88, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    # Convert input to NumPy array if it's a list\n    if isinstance(z, list):\n        z = np.array(z)\n    \n    # Compute the softplus function for the input array or scalar\n    result = np.logaddexp(0.0, z)\n    \n    # Round the result to 4 decimal places\n    rounded_result = np.round(result, 4)\n    \n    # If the input was a scalar, return a single float\n    if isinstance(z, (int, float)):\n        return float(rounded_result)\n    # Otherwise, return a Python list of the rounded results\n    else:\n        return rounded_result.tolist()\n\n# Test the function\nz = np.array([-1000, 0, 3])\nprint(softplus(z))  # Output: [0.0, 0.6931, 3.0486]\n```"}
{"task_id": 90, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mse(bandit: dict, policy: dict) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : dict\n        Dictionary that stores the true expected payout of each arm under the\n        key ``arm_evs``.\n    policy : dict\n        Dictionary that stores the policy's current estimate of each arm's\n        expectation under the key ``ev_estimates``. The field must be a\n        dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    true_values = bandit.get(\"arm_evs\", [])\n    estimates = policy.get(\"ev_estimates\", {})\n    \n    if not estimates:  # If the dictionary is empty or doesn't exist\n        return np.nan\n    \n    sorted_estimates = [estimates[i] for i in range(len(true_values))]\n    \n    mse_value = np.mean((np.array(sorted_estimates) - np.array(true_values)) ** 2)\n    \n    return round(mse_value, 4)\n\n# Example usage:\nbandit = {\"arm_evs\": [0.5, 0.2, 0.9]}\npolicy = {\"ev_estimates\": {0: 0.4, 1: 0.25, 2: 0.8}}\nprint(mse(bandit, policy))  # Expected output: 0.0075\n```"}
{"task_id": 96, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # Tokenize the corpus and sequence\n    tokenized_corpus = [sentence.split() for sentence in corpus]\n    tokenized_sequence = sequence.split()\n    \n    # Initialize frequency tables\n    ngram_counts = [defaultdict(int) for _ in range(N)]\n    vocabulary = set()\n    \n    # Build n-gram frequency tables\n    for sentence in tokenized_corpus:\n        for n in range(1, N+1):\n            for i in range(len(sentence) - n + 1):\n                ngram = tuple(sentence[i:i+n])\n                ngram_counts[n-1][ngram] += 1\n                vocabulary.update(ngram)\n    \n    # Add the <UNK> token to the vocabulary\n    vocabulary.add(\"<UNK>\")\n    \n    # Calculate probabilities for the sequence\n    log_prob = 0.0\n    vocab_size = len(vocabulary)\n    for n in range(1, N+1):\n        for i in range(len(tokenized_sequence) - n + 1):\n            ngram = tuple(tokenized_sequence[i:i+n])\n            count_ngram = ngram_counts[n-1][ngram]\n            if n > 1:\n                context = ngram[:-1]\n                count_context = sum(ngram_counts[n-2][context])\n            else:\n                count_context = len([token for sentence in tokenized_corpus for token in sentence])\n            \n            smoothed_prob = (count_ngram + K) / (count_context + K * vocab_size)\n            log_prob += math.log(smoothed_prob)\n    \n    return round(log_prob, 4) if len(tokenized_sequence) >= N else 0.0\n```\n\nThis Python script addresses the task of computing the additive-smoothed log-probability of a given sequence based on a provided corpus using N-grams. The function `additive_ngram_log_prob` is designed to handle the task as described in the prompt, including the building of n-gram frequency tables, handling of the \"<UNK>\" token, and the additive smoothing of probabilities for the N-gram model."}
{"task_id": 108, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    N, M = X.shape\n    rng = np.random.default_rng(seed=0)\n    W = rng.standard_normal((N, K))\n    H = rng.standard_normal((K, M))\n    \n    I_K = np.eye(K)\n    for _ in range(max_iter):\n        # Update W\n        for n in range(N):\n            W[n] = np.linalg.solve(\n                X[n, :] @ H.T + alpha * W[n, :] @ H.T,\n                X[n, :] @ H + alpha * W[n, :] @ I_K\n            )\n        \n        # Update H\n        for m in range(M):\n            H[:, m] = np.linalg.solve(\n                W.T @ X[:, m] + alpha * H[:, m] * I_K,\n                W.T @ X[:, m] + alpha * H[:, m] @ W.T\n            )\n        \n        # Compute the regularized loss\n        X_hat = W @ H\n        loss = np.linalg.norm(X - X_hat)**2 + alpha * (np.linalg.norm(W)**2 + np.linalg.norm(H)**2)\n        if loss < tol:\n            break\n    \n    # Return the reconstructed matrix rounded and converted to list of lists\n    return np.round(X_hat, 4).tolist()\n\n# Example usage\nX = np.array([[1, 0, 2], [3, 4, 5]])\nK = 2\nreconstructed_matrix = als_factorization(X, K)\nprint(reconstructed_matrix)\n```\n\nThis solution implements the regularized ALS algorithm with the specified parameters and constraints. It uses numpy for matrix operations and ensures deterministic behavior by setting a specific seed for random number generation during the initialization of the factor matrices."}
{"task_id": 109, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n    \n    def euclidean_distance(a, b):\n        return np.linalg.norm(a - b)\n    \n    def initialize_centroids(X, K):\n        centroids = [X[random.randint(0, len(X) - 1)]]\n        for _ in range(1, K):\n            distances = np.array([min([euclidean_distance(x, c) for c in centroids]) for x in X])\n            probabilities = distances / distances.sum()\n            cumulative_probabilities = probabilities.cumsum()\n            r = random.random()\n            for i in range(len(cumulative_probabilities)):\n                if r < cumulative_probabilities[i]:\n                    centroids.append(X[i])\n                    break\n        return np.array(centroids)\n    \n    centroids = initialize_centroids(X, K)\n    old_centroids = np.zeros(centroids.shape)\n    clusters = np.zeros(len(X))\n    \n    def assign_clusters(X, centroids):\n        for i in range(len(X)):\n            distances = euclidean_distance(X[i], centroids)\n            cluster = np.argmin(distances)\n            clusters[i] = cluster\n        return clusters\n    \n    def update_centroids(X, clusters, K):\n        for i in range(K):\n            points = [X[j] for j in range(len(X)) if clusters[j] == i]\n            if points:\n                centroids[i] = np.mean(points, axis=0)\n        return centroids\n    \n    for _ in range(max_iter):\n        old_clusters = clusters.copy()\n        clusters = assign_clusters(X, centroids)\n        if np.array_equal(clusters, old_clusters):\n            break\n        centroids = update_centroids(X, clusters, K)\n    \n    centroids = np.round(centroids, decimals=4)\n    centroids = sorted(centroids, key=lambda x: (x[0], tuple(x)))\n    \n    return centroids.tolist()\n\n# Example usage:\nif __name__ == \"__main__\":\n    X = np.random.rand(100, 2)  # 100 samples with 2 features each\n    K = 5\n    random_state = 42\n    centroids = kmeans(X, K, random_state=random_state)\n    print(centroids)\n```\n\nThis Python script implements the K-Means clustering algorithm with the K-Means++ initialization method, as described in the task. Centroids are calculated and refined iteratively until convergence or until a maximum number of iterations is reached. Each centroid is then rounded to four decimal places and the list of centroids is sorted by their first coordinate, with full tuple used as a tie-breaker."}
{"task_id": 111, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Converts a text string to a fixed-length encoded list of integers using a provided vocabulary.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text]\n    encoded += [0] * (time_steps - len(encoded))  # Padding with 0s\n    return encoded[:time_steps]  # Truncate if longer than time_steps\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list/array of integer ids back to text using an inverse vocabulary, ignoring padding tokens.\"\"\"\n    return ''.join(inverse_vocab[idx] for idx in indices if idx != 0)\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes input text, predicts using the model, and decodes the prediction.\"\"\"\n    # Encode the raw text\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    \n    # Dummy model prediction (replace with actual model.predict if using a real model)\n    prediction = model.predict(np.expand_dims(encoded_text, 0))\n    # Dummy prediction simulation: just repeating the input in this place\n    # In real applications, replace with actual model's output\n    prediction = np.array([encoded_text])\n    \n    # Apply argmax over the last axis\n    predicted_ids = np.argmax(prediction, axis=-1)[0]\n    \n    # Decode the ids back to text\n    decoded_text = int_to_string(predicted_ids, inv_output_vocabulary)\n    \n    return decoded_text\n\n# Dummy model for demonstration purposes; replace with real model logic\nclass DummyModel:\n    def predict(self, input_data):\n        return input_data\n\n# Test the functions\ninput_vocab = {char: idx for idx, char in enumerate('abcdefghijklmnopqrstuvwxyz', 1)}\noutput_vocab = {idx: char for char, idx in input_vocab.items()}\ndummy_model = DummyModel()  # Replace with your real model\ninput_text = 'hello world'\nprediction = run_example(dummy_model, input_vocab, output_vocab, input_text)\nprint(prediction)  # Expected: \"hello world\" (if model simply returns input)\n```"}
{"task_id": 113, "completion_id": 0, "completion": "```python\nEXAMPLES = [\"hello\", \"world\", \"python\", \"programming\"]\n\ndef run_example(model, input_vocabulary, inv_output_vocabulary, example):\n    # Simulate a call to a real example runner that takes an example and returns a list of characters\n    # This is the stand-in for the helper function, which we're not implementing in detail\n    return list(model(example))\n\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n\n    predictions = []\n    for example in examples:\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_str = ''.join(output_chars)\n        print(f'input:  {example}')\n        print(f'output: {predicted_str}')\n        predictions.append(predicted_str)\n    \n    return predictions\n\n# Example usage\nif __name__ == \"__main__\":\n    # Mock model as a placeholder\n    def mock_model(input_str):\n        return input_str.upper()\n\n    # Additional parameters for compatibility, though not used\n    input_vocab = {'a': 1, 'b': 2}\n    output_vocab = {1: 'a', 2: 'b'}\n\n    # Test the function with the mock model\n    predictions = run_examples(mock_model, input_vocab, output_vocab, [\"hello\", \"world\"])\n    print(predictions)\n```"}
{"task_id": 115, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    # Ensure y is a column vector\n    y = y.reshape(-1, 1)\n\n    # Predicted probabilities\n    z = X @ w\n    p = 1 / (1 + np.exp(-z))\n    p = np.clip(p, 1e-20, 1 - 1e-20)  # Avoid 0s and 1s\n\n    # Binary cross-entropy loss\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    loss = round(loss, 4)\n\n    # Gradient of the loss\n    gradient = (X.T @ (p - y)) / len(y)\n    gradient = np.round(gradient, 4).tolist()\n\n    return loss, gradient\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([0, 1, 1])\n# w = np.array([0.5, -0.5])\n# print(logistic_loss_and_gradient(X, y, w))\n```\nThis script implements the logistic_loss_and_gradient function which calculates the loss and the gradient of the binary cross-entropy loss function used in logistic regression. It includes a step to reshape the target vector y to ensure consistency and uses a clipping operation to handle cases where predicted probabilities might be exactly 0 or 1, which could cause numerical issues."}
{"task_id": 118, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    # Ensure n_clf is at least 1\n    n_clf = max(n_clf, 1)\n    \n    m, n = X_train.shape\n    # Initialize weights\n    weights = np.full(m, 1/m)\n    stumps = []\n    alphas = []\n\n    for _ in range(n_clf):\n        stump, error = best_stump(X_train, y_train, weights)\n        beta = error / (1.0 - error)\n        alpha = np.log(1.0 / beta)\n        \n        # Add the stump and its weight to the list\n        stumps.append(stump)\n        alphas.append(alpha)\n        \n        # Update weights\n        predictions = stump_predictions(X_train, stump)\n        weights *= np.power(beta, (1 - (predictions == y_train)).astype(int))\n        weights /= np.sum(weights)\n\n    # Make predictions on the test set\n    predictions = np.zeros(len(X_test))\n    for i, stump in enumerate(stumps):\n        predictions += alphas[i] * stump_predictions(X_test, stump)\n    return [1 if p > 0 else -1 for p in predictions]\n\ndef stump_predictions(X, stump):\n    feature, threshold, polarity = stump\n    predictions = np.ones(X.shape[0])\n    predictions[X[:, feature] < threshold] = -1\n    predictions = np.multiply(predictions, polarity)\n    return predictions\n\ndef best_stump(X, y, weights):\n    m, n = X.shape\n    best_error = 1.0\n    best_stump = None\n    \n    for feature in range(n):\n        thresholds = np.unique(X[:, feature])\n        for threshold in thresholds:\n            for polarity in [-1, 1]:\n                predictions = np.ones(m)\n                predictions[X[:, feature] < threshold] = -1\n                predictions = np.multiply(predictions, polarity)\n                error = np.sum(weights * (predictions != y))\n                if error < best_error:\n                    best_error = error\n                    best_stump = (feature, threshold, polarity)\n    return best_stump, best_error\n```\n\nThis script defines a function `adaboost_predict` for training an AdaBoost classifier with decision stumps as weak learners and predicting labels for a provided test set. The function iteratively constructs decision stumps, which are the simplest form of decision trees, and aggregates their weighted predictions to determine the final class label, using the sign of the weighted sum as the decision rule. The individual stump's weights are determined based on their accuracy, such that more accurate stumps contribute more to the final decision."}
{"task_id": 128, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    # Calculate the within-class scatter matrix S_W\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    for c in np.unique(y):\n        X_c = X[y == c]\n        mu_c = X_c.mean(axis=0)\n        S_W += (X_c - mu_c).T.dot(X_c - mu_c)\n\n    # Calculate the between-class scatter matrix S_B\n    overall_mean = X.mean(axis=0)\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    for c in np.unique(y):\n        X_c = X[y == c]\n        mu_c = X_c.mean(axis=0)\n        n_c = X_c.shape[0]\n        S_B += n_c * (mu_c - overall_mean).T.dot(mu_c - overall_mean)\n\n    # Calculate the matrix A = pinv(S_W) * S_B\n    A = np.linalg.pinv(S_W).dot(S_B)\n\n    # Eigen decomposition of A\n    eigenvalues, eigenvectors = np.linalg.eigh(A)\n    sorted_indices = eigenvalues.argsort()[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n\n    # Select the first n_components eigenvectors\n    W = sorted_eigenvectors[:, :n_components]\n\n    # Fix the signs of the eigenvectors so that the first non-zero\n    # element is positive\n    for i in range(W.shape[1]):\n        idx = np.argmax(np.abs(W[:, i]))\n        if W[idx, i] < 0:\n            W[:, i] *= -1\n\n    # Project the data and round to 4 decimal places\n    projected_data = X.dot(W)\n    projected_data = np.round(projected_data, 4).tolist()\n\n    return projected_data\n\n# Example usage\nX = np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]])\ny = np.array([0,0,0,0,1,1,1,1])\nn_components = 1\n\nprojected_data = multi_class_lda(X, y, n_components)\nprint(projected_data)\n```\n\nThe provided implementation follows the given instructions to perform multi-class LDA and project the input data onto the specified number of discriminant components. The example at the end of the script demonstrates how to use this implementation with a small dataset, producing the expected output illustrated in the example of the prompt."}
{"task_id": 140, "completion_id": 0, "completion": "```python\nfrom collections import deque\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\"\"\"\n    n = len(grid)\n    if grid[0][0] == 'F' or grid[n-1][n-1] == 'F':\n        return -1\n    if n == 1 and grid[0] == '.':\n        return 0\n\n    # Directions for movement: up, down, left, right\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    # Initialize the fire spreading and movements of the agent.\n    fire_queue = deque()\n    agent_queue = deque([(0, 0, 0)])  # (y, x, time)\n    visited = set([(0, 0)])\n    for r in range(n):\n        for c in range(n):\n            if grid[r][c] == 'F':\n                fire_queue.append((r, c, 0))\n\n    # Spread fire and move agent\n    while fire_queue and agent_queue:\n        spread_fire(fire_queue, grid, visited)\n        if not move_agent(agent_queue, grid, visited, directions):\n            break\n\n    return grid[n-1][n-1] if grid[n-1][n-1] else -1\n\ndef spread_fire(fire_queue, grid, visited):\n    \"\"\"Helper function to spread the fire across the grid.\"\"\"\n    fires_to_add = []\n    while fire_queue:\n        r, c, t = fire_queue.popleft()\n        for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < len(grid) and 0 <= nc < len(grid) and grid[nr][nc] == '.' and (nr, nc) not in visited:\n                grid[nr] = grid[nr][:nc] + 'F' + grid[nr][nc+1:]\n                fires_to_add.append((nr, nc, t+1))\n                visited.add((nr, nc))\n    for fire in fires_to_add:\n        fire_queue.append(fire)\n\ndef move_agent(agent_queue, grid, visited, directions):\n    \"\"\"Helper function to move the agent safely in the grid.\"\"\"\n    moves_to_add = []\n    while agent_queue:\n        r, c, t = agent_queue.popleft()\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < len(grid) and 0 <= nc < len(grid) and grid[nr][nc] not in visited and (nr, nc) not in visited:\n                if grid[nr][nc] != 'F':\n                    grid[nr] = grid[nr][:nc] + str(t+1) + grid[nr][nc+1:]\n                    moves_to_add.append((nr, nc, t+1))\n                    visited.add((nr, nc))\n                    if nr == len(grid) - 1 and nc == len(grid) - 1:\n                        return False\n    for move in moves_to_add:\n        agent_queue.append(move)\n    return True\n\n\n# Example usage\nmaze = [\"#..\", \"F.F\", \"..#\"]\nprint(escape_fire_maze(maze))  # Output: 2\n```\n\nThis code defines the `escape_fire_maze` function, which simulates both the movement of the agent and the spreading of the fire. The function uses a queue for each (the agent and fire), and updates the grid and visited set appropriately. If the agent reaches the bottom-right cell, it returns the time, or -1 if it's impossible to reach the goal without encountering fire. Note that this implementation assumes the use of additional helper functions for clarity."}
{"task_id": 141, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \n    # Function to compute distance based on the given metric\n    def compute_distances(X_train, X_test_sample, metric):\n        if metric == 'euclidean':\n            return np.sqrt(((X_train - X_test_sample) ** 2).sum(axis=1))\n        elif metric == 'manhattan':\n            return np.abs((X_train - X_test_sample)).sum(axis=1)\n        elif metric == 'cosine':\n            norms = np.linalg.norm(X_train, axis=1) * np.linalg.norm(X_test_sample)\n            cos_sim = np.dot(X_train, X_test_sample.T) / norms\n            return 1 - cos_sim\n        else:\n            return np.sqrt(((X_train - X_test_sample) ** 2).sum(axis=1))  # default to euclidean\n    \n    # Iterate over each test sample to predict\n    predictions = []\n    for test_sample in X_test:\n        # Compute distances from this sample to all training samples\n        distances = compute_distances(X_train, test_sample, metric)\n        # Get indices of the k smallest distances\n        k_indices = np.argsort(distances)[:k]\n        # Get the corresponding labels of the neighbours\n        k_nearest_labels = y_train[k_indices]\n        # Use np.unique for counting labels and finding the most common\n        values, counts = np.unique(k_nearest_labels, return_counts=True)\n        # Find the index of the maximum count label. In case of tie, np.argmax automatically takes the first index which is the smallest label.\n        majority_index = np.argmax(counts)\n        predictions.append(values[majority_index])\n    \n    return np.array(predictions)\n```"}
{"task_id": 146, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((x1 - x2)**2))\n\n    def manhattan_distance(x1, x2):\n        return np.sum(np.abs(x1 - x2))\n\n    def cosine_distance(x1, x2, eps=1e-12):\n        dot_product = np.dot(x1, x2)\n        norm_x1 = np.linalg.norm(x1)\n        norm_x2 = np.linalg.norm(x2)\n        return 1 - (dot_product / ((norm_x1 * norm_x2) + eps))\n\n    distance_metrics = {\n        'euclidean': euclidean_distance,\n        'manhattan': manhattan_distance,\n        'cosine': cosine_distance\n    }\n\n    if metric not in distance_metrics:\n        raise ValueError(\"Invalid distance metric\")\n\n    # Ensure k does not exceed the number of training samples\n    k = min(k, X.shape[0])\n\n    y_pred = []\n    for test_sample in X_test:\n        # Compute the distance between the test sample and every training sample\n        distances = [distance_metrics[metric](test_sample, train_sample) for train_sample in X]\n\n        # Get indices of the k nearest neighbours\n        nearest_neighbours_indices = np.argsort(distances)[:k]\n\n        # Fetch the labels of the k nearest neighbours\n        nearest_neighbours_labels = y[nearest_neighbours_indices]\n\n        # Perform majority vote among the labels of the k nearest neighbours\n        unique_labels, counts = np.unique(nearest_neighbours_labels, return_counts=True)\n        majority_vote = unique_labels[np.argmax(counts)]\n        y_pred.append(majority_vote)\n\n    return y_pred\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4], [6, 7], [7, 8], [8, 9]])\n# y = np.array([0, 0, 0, 1, 1, 1])\n# X_test = np.array([[2, 2], [7, 7]])\n# predicted_labels = knn_predict(X, y, X_test, k=3, metric='euclidean')\n# print(predicted_labels)  # Output would be [0, 1]\n```"}
{"task_id": 155, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Ensure the state is a NumPy array\n    state = np.array(state)\n\n    # First Linear Transformation\n    hidden1 = np.dot(state, weights[\"W1\"]) + weights[\"b1\"]\n    # ReLU Activation\n    hidden1 = np.maximum(hidden1, 0)\n\n    # Second Linear Transformation\n    hidden2 = np.dot(hidden1, weights[\"W2\"]) + weights[\"b2\"]\n    # ReLU Activation\n    hidden2 = np.maximum(hidden2, 0)\n\n    # Third Linear Transformation\n    output = np.dot(hidden2, weights[\"W3\"]) + weights[\"b3\"]\n    # Tanh Activation\n    output = np.tanh(output)\n\n    # Convert the output to a Python list and round each element to 4 decimals\n    return [round(x, 4) for x in output]\n\n# Example usage:\n# Define a set of weights and a state vector for testing the function\nstate = [1, 2, 3]\nweights = {\n    \"W1\": np.array([[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]]),\n    \"b1\": np.array([0.1, 0.2]),\n    \"W2\": np.array([[0.7, 0.8], [0.9, 1.0]]),\n    \"b2\": np.array([0.3, 0.4]),\n    \"W3\": np.array([[1.1, 1.2], [1.3, 1.4]]),\n    \"b3\": np.array([0.5, 0.6])\n}\n# Call the function with the state and weights\naction = actor_forward(state, weights)\nprint(action)  # Output should be a list of actions, each rounded to 4 decimals\n```"}
{"task_id": 160, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    m, n = X.shape\n    # Adjust X for intercept\n    if fit_intercept:\n        X = np.column_stack([np.ones(m), X])\n        n += 1\n    else:\n        X = np.column_stack([np.zeros(m), X])\n\n    # Initialize parameters\n    w = np.zeros(n)\n\n    for t in range(max_iters):\n        if fit_intercept:\n            w[0] = np.mean(y - X[:, 1:] @ w[1:])\n        for j in range(1, n):\n            X_j = X[:, j]\n            r_j = y - X @ w + w[j] * X_j\n            z_j = np.sum(X_j ** 2)\n\n            # Compute the soft-thresholding operation\n            rho_j = X_j.T @ r_j\n            if rho_j < -lambda_param * m:\n                w[j] = (rho_j + lambda_param * m) / z_j\n            elif rho_j > lambda_param * m:\n                w[j] = (rho_j - lambda_param * m) / z_j\n            else:\n                w[j] = 0\n\n    bias = w[0] if fit_intercept else 0\n    weights = w[1:].tolist()\n    \n    return ([round(num, 4) for num in weights], round(bias, 4))\n\n# Example of usage\nX = np.array([[1, 2], [2, 3], [3, 4]])\ny = np.array([1, 2, 3])\nlambda_param = 0.1\nmax_iters = 100\nfit_intercept = True\n\nweights, bias = fit_lasso(X, y, lambda_param, max_iters, fit_intercept)\nprint(\"Weights:\", weights)\nprint(\"Bias:\", bias)\n```\n\nThis script implements Lasso regression using the coordinate descent method, following the specified guidelines and constraints. It expects a design matrix `X`, a target vector `y`, and optional parameters for regularisation strength, number of iterations, and whether to fit an intercept. The output is a tuple containing the weight vector and intercept (if fitted), both rounded to four decimal places."}
{"task_id": 165, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    # Convert inputs to numpy arrays to simplify operations\n    x_arr = np.array(x, dtype=int)\n    y_arr = np.array(y, dtype=int)\n    \n    # Check if lengths are different\n    if x_arr.shape != y_arr.shape:\n        return -1\n    \n    # Compute the element-wise inequality, sum up the number of differing elements\n    diff_count = np.sum(x_arr != y_arr)\n    \n    # Normalize by the total number of elements and round to 4 decimal places\n    return round(diff_count / x_arr.size, 4)\n\n# Example usage:\n# Should print 0.5000\nprint(hamming_distance([1, 0, 1], [1, 1, 0]))\n# Should print -1\nprint(hamming_distance([1, 0, 1], [1, 1]))\n# Should print 0.0000\nprint(hamming_distance([1, 0, 1, 0], [1, 0, 1, 0]))\n# Should print 1.0000\nprint(hamming_distance([0, 0, 0, 0], [1, 1, 1, 1]))\n```"}
{"task_id": 169, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError(\"N must be a positive integer.\")\n\n    if window not in [\"hamming\", \"hann\", \"blackman_harris\", \"generalized_cosine\"]:\n        raise ValueError(\"Unknown window type.\")\n\n    if window == \"generalized_cosine\" and coefficients is None:\n        raise ValueError(\"Coefficients must be provided for generalized cosine window.\")\n\n    n = np.arange(N)\n    if N == 1:\n        return [1.0]\n\n    def round_coefficients(coeffs):\n        return [round(float(coeff), 4) for coeff in coeffs]\n\n    if window == \"hamming\":\n        w_n = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == \"hann\":\n        w_n = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == \"blackman_harris\":\n        a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n        w_n = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) \\\n              + a2 * np.cos(4 * np.pi * n / (N - 1)) \\\n              - a3 * np.cos(6 * np.pi * n / (N - 1))\n    elif window == \"generalized_cosine\":\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be provided for generalized cosine window.\")\n        w_n = sum(coeff * np.cos(2 * np.pi * k * n / (N - 1)) for k, coeff in enumerate(coefficients))\n    else:\n        raise ValueError(\"Unknown window type.\")\n\n    return round_coefficients(w_n)\n\n# Example usage:\nprint(generate_window(\"hamming\", 5))\nprint(generate_window(\"hann\", 5))\nprint(generate_window(\"blackman_harris\", 5))\nprint(generate_window(\"generalized_cosine\", 5, coefficients=[0.5, 0.3, 0.2]))\n```"}
{"task_id": 171, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    \n    # Convert to numpy arrays\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Ensure X_train and y_train have matching lengths\n    assert X_train.shape[0] == y_train.shape[0]\n    \n    # Insert bias term\n    X_train = np.insert(X_train, 0, 1, axis=1)\n    X_test = np.insert(X_test, 0, 1, axis=1)\n    \n    # Map y_train to {0,1}\n    unique_labels = np.unique(y_train)\n    assert len(unique_labels) == 2, \"y_train must have exactly two distinct values\"\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train_mapped = np.array([label_map[y] for y in y_train])\n    \n    # Handle case with single label\n    if unique_labels[0] == unique_labels[1]:\n        return [unique_labels[0]] * X_test.shape[0]\n    \n    # Initialize weights\n    weights = np.zeros(X_train.shape[1])\n    \n    # Mini-batch Gradient Descent\n    for _ in range(epochs):\n        # Shuffle training data\n        indices = np.arange(X_train.shape[0])\n        np.random.shuffle(indices)\n        for start in range(0, len(indices), batch_size):\n            end = min(start + batch_size, len(indices))\n            batch_indices = indices[start:end]\n            X_batch = X_train[batch_indices]\n            y_batch = y_train_mapped[batch_indices]\n            \n            # Compute predictions\n            preds = 1 / (1 + np.exp(-np.dot(X_batch, weights)))\n            \n            # Compute gradient of weights\n            gradient = -np.dot(X_batch.T, (y_batch - preds)) / len(batch_indices)\n            \n            # Update weights\n            weights -= learning_rate * gradient\n    \n    # Compute predictions on test data\n    test_preds = 1 / (1 + np.exp(-np.dot(X_test, weights)))\n    test_preds_label = np.array([unique_labels[0] if p < 0.5 else unique_labels[1] for p in test_preds])\n    \n    return test_preds_label.tolist()\n\n# Example usage\nX_train = [[0.], [1.], [2.], [3.], [4.], [5.]]\ny_train = [0, 0, 0, 1, 1, 1]\nX_test = [[0.5], [1.5], [2.5], [3.5]]\n\npredictions = logistic_regression_train_predict(X_train, y_train, X_test)\nprint(predictions)\n```\nThis Python script implements a binary Logistic Regression classifier training using mini-batch Gradient Descent. It automatically adds a bias term, works with any two distinct numeric labels, handles special cases, and returns predictions for the test set in the same label set as the training labels."}
{"task_id": 176, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    n_samples = X_train.shape[0]\n    n_features = X_train.shape[1]\n\n    # Initialize weights\n    weights = np.full(n_samples, 1 / n_samples)\n\n    weak_learners = []\n    learner_weights = []\n\n    for _ in range(n_estimators):\n        min_error = float('inf')\n        best_stump = {}\n\n        for feature_index in range(n_features):\n            thresholds = np.unique(X_train[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = polarity * (X_train[:, feature_index] < threshold)\n                    predictions = np.where(predictions == 0, -1, predictions)  # Convert 0 to -1\n                    error = np.sum(weights[(predictions != y_train)])\n                    if error < min_error:\n                        best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': polarity}\n                        min_error = error\n                    elif error == min_error:\n                        # Tie-breaking rule\n                        if feature_index < best_stump['feature_index'] or \\\n                        (feature_index == best_stump['feature_index'] and threshold < best_stump['threshold']) or \\\n                        (feature_index == best_stump['feature_index'] and threshold == best_stump['threshold'] and polarity == 1):\n                            best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': polarity}\n\n        alpha = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n        learner_weights.append(alpha)\n        weak_learners.append(best_stump)\n\n        # Update sample weights\n        predictions = best_stump['polarity'] * (X_train[:, best_stump['feature_index']] < best_stump['threshold'])\n        predictions = np.where(predictions == 0, -1, predictions)\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n\n        # Early stopping if a perfect learner is found\n        if min_error == 0:\n            break\n\n    # Make predictions for the test set\n    test_predictions = np.zeros(len(X_test))\n    for i, learner in enumerate(weak_learners):\n        predictions = learner['polarity'] * (X_test[:, learner['feature_index']] < learner['threshold'])\n        predictions = np.where(predictions == 0, -1, predictions)\n        test_predictions += learner_weights[i] * predictions\n\n    # Convert to class labels {0, 1}\n    final_predictions = np.where(test_predictions >= 0, 1, 0)\n    return final_predictions.tolist()\n\n# Example usage:\n# X_train = [[1, 2], [2, 1], [3, 2], [4, 3], [5, 3], [4, 5]]\n# y_train = [0, 0, 0, 1, 1, 1]\n# X_test = [[2, 2], [3, 3]]\n# predictions = adaboost_predict(X_train, y_train, X_test, n_estimators=10)\n# print(predictions)  # Output might be [0, 1] depending on the data and number of estimators\n```\n\nThis script implements the AdaBoost algorithm from scratch, using decision stumps as weak learners. It follows the precise specification provided in the task description and handles early stopping if a perfect learner is found. The output is a Python list of integers representing the predicted class labels for the provided test set *X_test*."}
{"task_id": 178, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    # Check for valid input\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n\n    # Set constants and RNG\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    rng = np.random.default_rng(seed=seed)\n\n    # Initialize position and velocity arrays\n    positions = rng.uniform(-1, 1, (num_particles, n_dims))\n    velocities = rng.uniform(-0.1, 0.1, (num_particles, n_dims))\n\n    # Personal best positions and values\n    p_best_positions = positions.copy()\n    p_best_values = np.array([sphere_func(p) for p in positions])\n\n    # Global best\n    g_best_index = np.argmin(p_best_values)\n    g_best_position = p_best_positions[g_best_index]\n\n    # Main loop\n    for _ in range(num_iterations):\n        # Update velocities\n        r1, r2 = rng.uniform(0, 1, (2, num_particles, n_dims))\n        velocities = w * velocities + c1 * r1 * (p_best_positions - positions) + c2 * r2 * (g_best_position - positions)\n\n        # Update positions and check boundaries\n        positions += velocities\n        positions = np.clip(positions, -1, 1)\n\n        # Update personal bests\n        current_values = np.array([sphere_func(p) for p in positions])\n        improved = current_values < p_best_values\n        p_best_positions[improved] = positions[improved]\n        p_best_values[improved] = current_values[improved]\n\n        # Update global best\n        if np.min(current_values) < sphere_func(g_best_position):\n            g_best_index = np.argmin(current_values)\n            g_best_position = positions[g_best_index]\n\n    return round(sphere_func(g_best_position), 4)\n\ndef sphere_func(vector):\n    \"\"\"Compute the Sphere function value for a vector.\"\"\"\n    return np.sum(np.power(vector, 2))\n```"}
{"task_id": 180, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List\nfrom collections import Counter\n\ndef euclidean_distance(x1: List[float], x2: List[float]) -> float:\n    \"\"\"Compute the Euclidean distance between two feature vectors.\"\"\"\n    return np.sqrt(np.sum((np.array(x1) - np.array(x2)) ** 2))\n\ndef knn_predict(X_train: List[List[float]],\n                y_train: List,\n                X_test: List[List[float]],\n                k: int = 5,\n                task: str = \"classification\") -> List:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : List[List[float]]\n        Training feature vectors.\n    y_train : List\n        Targets associated with *X_train*.\n    X_test : List[List[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    List\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    predictions = []\n    n_train_samples = len(X_train)\n    use_all_samples = k <= 0 or k > n_train_samples\n\n    for test_sample in X_test:\n        distances = []\n        for idx, train_sample in enumerate(X_train):\n            dist = euclidean_distance(test_sample, train_sample)\n            distances.append((dist, y_train[idx]))\n        distances.sort()\n        \n        if use_all_samples:\n            nearest_neighbours = distances\n        else:\n            nearest_neighbours = distances[:k]\n\n        if task == \"classification\":\n            labels = [label for _, label in nearest_neighbours]\n            prediction = Counter(labels).most_common(1)[0][0]\n        elif task == \"regression\":\n            values = [value for _, value in nearest_neighbours]\n            prediction = round(np.mean(values), 4)\n        else:\n            raise ValueError(\"Invalid task type specified.\")\n        \n        predictions.append(prediction)\n\n    return predictions\n\n# Example usage:\nX_train = [[0], [1], [2], [3]]\ny_train = [0, 0, 1, 1]\nX_test = [[1.1], [2.9]]\nk = 2\ntask = \"classification\"\nprint(knn_predict(X_train, y_train, X_test, k, task))  # Output: [0, 1]\n```"}
{"task_id": 184, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gini_impurity(y):\n    _, counts = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    return 1 - np.sum(probabilities ** 2)\n\ndef split_features(X, y, feature_index, threshold):\n    left_indices = X[:, feature_index] <= threshold\n    X_left, X_right = X[left_indices], X[~left_indices]\n    y_left, y_right = y[left_indices], y[~left_indices]\n    return X_left, X_right, y_left, y_right\n\ndef best_split_gini(X, y):\n    best_gini_gain = -1\n    best_threshold = None\n    best_feature_index = None\n    parent_gini = gini_impurity(y)\n\n    for feature_index in range(X.shape[1]):\n        sorted_indices = np.argsort(X[:, feature_index])\n        unique_values = np.unique(X[:, feature_index])\n\n        for i in range(1, len(unique_values)):\n            if unique_values[i] == unique_values[i-1]:\n                continue\n            threshold = (unique_values[i] + unique_values[i-1]) / 2\n            X_left, X_right, y_left, y_right = split_features(X, y, feature_index, threshold)\n            if len(y_left) == 0 or len(y_right) == 0:\n                continue\n            \n            gini_left = gini_impurity(y_left)\n            gini_right = gini_impurity(y_right)\n            gini_gain = parent_gini - (len(y_left) / len(y)) * gini_left - (len(y_right) / len(y)) * gini_right\n            \n            if gini_gain > best_gini_gain:\n                best_gini_gain = gini_gain\n                best_threshold = threshold\n                best_feature_index = feature_index\n\n    return best_feature_index, best_threshold, best_gini_gain\n\ndef build_tree(X, y, max_depth=None, depth=0):\n    unique_labels, counts = np.unique(y, return_counts=True)\n    majority_label = unique_labels[np.argmax(counts)]\n    \n    if np.all(y == y[0]) or (max_depth is not None and depth >= max_depth):\n        return {'label': majority_label}\n\n    feature_index, threshold, gini_gain = best_split_gini(X, y)\n\n    if gini_gain == 0:\n        return {'label': majority_label}\n\n    left_indices = X[:, feature_index] <= threshold\n    X_left, X_right = X[left_indices], X[~left_indices]\n    y_left, y_right = y[left_indices], y[~left_indices]\n\n    if len(X_left) == 0 or len(X_right) == 0:\n        return {'label': majority_label}\n\n    left_subtree = build_tree(X_left, y_left, max_depth=max_depth, depth=depth + 1)\n    right_subtree = build_tree(X_right, y_right, max_depth=max_depth, depth=depth + 1)\n\n    return {\n        'feature_index': feature_index,\n        'threshold': threshold,\n        'left': left_subtree,\n        'right': right_subtree\n    }\n\ndef predict_single(sample, tree):\n    while 'label' not in tree:\n        feature_index = tree['feature_index']\n        threshold = tree['threshold']\n        if sample[feature_index] <= threshold:\n            tree = tree['left']\n        else:\n            tree = tree['right']\n    return tree['label']\n\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None = None) -> list[int]:\n    tree = build_tree(X_train, y_train, max_depth=max_depth)\n    predictions = [predict_single(x, tree) for x in X_test]\n    return predictions\n```\n\nThis code defines a decision tree algorithm (CART algorithm) for binary classification according to the provided guidelines and criteria. It includes functions for computing Gini impurity, finding the best split for nodes, building the tree recursively, and predicting labels for test samples."}
{"task_id": 190, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gini_impurity(labels):\n    \"\"\"Compute the Gini impurity of a node.\"\"\"\n    _, counts = np.unique(labels, return_counts=True)\n    probabilities = counts / counts.sum()\n    return 1 - np.sum(probabilities ** 2)\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    \n    # Initial Gini impurity of the entire data\n    G_whole = gini_impurity(y)\n    \n    # Initialize the best split parameters\n    best_feature_index = -1\n    best_threshold = None\n    best_gini = round(G_whole, 4)\n    \n    # Iterate over all features\n    for feature_index in range(X.shape[1]):\n        # Get unique values in the feature and sort them\n        feature_values = np.unique(X[:, feature_index])\n        # Iterate over all unique feature values as potential thresholds\n        for threshold in feature_values:\n            # Create left and right subsets\n            left_indices = X[:, feature_index] <= threshold\n            right_indices = X[:, feature_index] > threshold\n            \n            # Skip if either subset is empty\n            if left_indices.sum() == 0 or right_indices.sum() == 0:\n                continue\n            \n            # Calculate Gini impurity for each subset\n            G_left = gini_impurity(y[left_indices])\n            G_right = gini_impurity(y[right_indices])\n            \n            # Calculate weighted Gini impurity of the split\n            G_split = (left_indices.sum() / len(y)) * G_left + (right_indices.sum() / len(y)) * G_right\n            \n            # Update best split if this G_split is better\n            if G_split < best_gini - 1e-12 or (abs(G_split - best_gini) < 1e-12 and feature_index < best_feature_index):\n                best_feature_index = feature_index\n                best_threshold = threshold\n                best_gini = round(G_split, 4)\n    \n    return (best_feature_index, best_threshold, best_gini)\n\n# Example usage\nX = [[0], [1], [2], [3]]\ny = [0, 0, 1, 1]\nprint(best_gini_split(X, y))\n```\nIn this solution, the `best_gini_split` function iterates over all features and all unique values of each feature to find the split that minimizes the weighted Gini impurity. It handles ties according to the specified tie-breaking rules and returns the best split's feature index, threshold value, and rounded Gini impurity."}
{"task_id": 191, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n    Please refer to the docstring in the question for details.\n    \"\"\"\n    def is_valid_vector(vec):\n        if not isinstance(vec, (list, tuple, np.ndarray)):\n            return False\n        if isinstance(vec, np.ndarray) and vec.ndim != 1:\n            return False\n        if len(vec) == 0:\n            return False\n        try:\n            vec = np.array(vec, dtype=float)\n        except ValueError:\n            return False\n        return True\n\n    def euclidean(vec1, vec2):\n        return np.round(np.linalg.norm(vec1 - vec2), 4)\n\n    def manhattan(vec1, vec2):\n        return np.round(np.linalg.norm(vec1 - vec2, ord=1), 4)\n\n    def chebyshev(vec1, vec2):\n        return np.round(np.linalg.norm(vec1 - vec2, ord=np.inf), 4)\n\n    def cosine(vec1, vec2):\n        norm1 = np.linalg.norm(vec1)\n        norm2 = np.linalg.norm(vec2)\n        if norm1 == 0 or norm2 == 0:\n            return -1\n        return np.round(1 - np.dot(vec1, vec2) / (norm1 * norm2), 4)\n\n    def distance(vec1, vec2, func):\n        if not (is_valid_vector(vec1) and is_valid_vector(vec2)):\n            return -1\n        vec1, vec2 = np.array(vec1, dtype=float), np.array(vec2, dtype=float)\n        if len(vec1) != len(vec2):\n            return -1\n        return func(vec1, vec2)\n\n    if name == 'euclidean':\n        return lambda vec1, vec2: distance(vec1, vec2, euclidean)\n    elif name == 'manhattan':\n        return lambda vec1, vec2: distance(vec1, vec2, manhattan)\n    elif name == 'chebyshev':\n        return lambda vec1, vec2: distance(vec1, vec2, chebyshev)\n    elif name == 'cosine':\n        return lambda vec1, vec2: distance(vec1, vec2, cosine)\n    else:\n        return lambda vec1, vec2: -1\n\n# Example calls\nd1 = metric('euclidean')\nprint(d1([1, 2, 3], [4, 5, 6]))  # \u279e 5.1962\n\nd2 = metric('manhattan')\nprint(d2([1, 2, 3], [4, 5, 6]))  # \u279e 9.0000\n\nd3 = metric('chebyshev')\nprint(d3([1, 2, 3], [4, 5, 6]))  # \u279e 3.0000\n\nd4 = metric('cosine')\nprint(d4([1, 2, 3], [4, 5, 6]))  # \u279e 0.0055\n```\nThis script defines a `metric` factory function which, based on the given metric name, returns a callable that computes the respective distance between two numeric vectors with integrated validation."}
{"task_id": 197, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n\n    if cont_action:\n        # Handle continuous space\n        if md_action:\n            action_dim = len(env.action_space.shape)\n            n_actions_per_dim = [np.inf] * action_dim\n        else:\n            action_dim = 1\n            n_actions_per_dim = [np.inf]\n    else:\n        # Handle discrete space\n        if md_action:\n            # Collect all discrete action numbers per dimension\n            n_actions_per_dim = [sub_space.n for sub_space in env.action_space.spaces]\n            action_dim = len(n_actions_per_dim)\n\n            # Handle multi-dimensional discrete\n            if any(np.isinf(n) for n in n_actions_per_dim):\n                action_ids = None\n            else:\n                action_ids = list(product(*[range(n) for n in n_actions_per_dim]))\n        else:\n            # Handle single-dimensional discrete\n            action_dim = 1\n            n_actions_per_dim = [env.action_space.n]\n            action_ids = [(i,) for i in range(env.action_space.n)]\n\n    return n_actions_per_dim, action_ids, action_dim\n```"}
{"task_id": 198, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # Determine the number of topics T\n    T = phi[0].shape[1]\n\n    # Initialize the word-topic distribution\n    beta = np.zeros((V, T))\n\n    # Compute the unnormalized beta matrix\n    for d in range(len(corpus)):\n        for n in range(len(corpus[d])):\n            v = corpus[d][n]\n            beta[v] += phi[d][n]\n\n    # Normalize the columns of beta\n    beta /= beta.sum(axis=0, keepdims=True)\n\n    # Round the values to 4 decimal places and convert to list of lists\n    beta = beta.round(4).tolist()\n\n    return beta\n\n# Example usage\nif __name__ == \"__main__\":\n    import numpy as np\n\n    # Example data\n    phi = [np.array([[0.3, 0.7], [0.2, 0.8]]), np.array([[0.4, 0.6]])]\n    corpus = [[0, 0], [1]]\n    V = 2\n\n    # Call the function and print the result\n    beta = update_beta(phi, corpus, V)\n    print(beta)\n```\n\nThis code defines the `update_beta` function as specified in the task, uses it to calculate the word-topic matrix \u03b2 based on the provided phi values, the corpus, and the vocabulary size V, and finally normalizes and rounds the computed matrix. An example usage of the function is provided at the bottom to demonstrate how the function works with a sample dataset."}
{"task_id": 202, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef calculate_cost(X, medoids, labels):\n    \"\"\"Calculates the total cost of the clustering.\"\"\"\n    cost = 0\n    for i, label in enumerate(labels):\n        distance = np.linalg.norm(X[i] - X[medoids[label]])\n        cost += distance\n    return cost\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n    \n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n    \n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n    \n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    n_samples = X.shape[0]\n    # Step 1: Initialize medoids\n    medoids = list(range(k))\n    \n    # Step 2: Assign initial labels based on the initial medoids\n    labels = [np.argmin([np.linalg.norm(X[i] - X[j]) for j in medoids]) for i in range(n_samples)]\n    \n    # To store the optimal cost\n    best_cost = calculate_cost(X, medoids, labels)\n    \n    # Continue swapping until no further improvement\n    improved = True\n    while improved:\n        improved = False\n        for medoid in medoids:\n            for non_medoid in range(n_samples):\n                if non_medoid not in medoids:\n                    # Swap and calculate new cost\n                    temp_medoids = medoids.copy()\n                    index = temp_medoids.index(medoid)\n                    temp_medoids[index] = non_medoid\n                    temp_labels = [np.argmin([np.linalg.norm(X[i] - X[j]) for j in temp_medoids]) for i in range(n_samples)]\n                    temp_cost = calculate_cost(X, temp_medoids, temp_labels)\n                    \n                    # If the new cost is better, accept the swap\n                    if temp_cost < best_cost:\n                        best_cost = temp_cost\n                        medoids = temp_medoids\n                        labels = temp_labels\n                        improved = True\n                        break\n            if improved:\n                break\n    \n    # Step 3: Assign each sample the label of the closest medoid\n    final_labels = [np.argmin([np.linalg.norm(X[i] - X[j]) for j in medoids]) for i in range(n_samples)]\n    return final_labels\n\n# Example usage\nX = np.array([[0,0], [1,0], [0,1], [5,5], [6,5], [5,6]])\nk = 2\nlabels = pam_clustering(X, k)\nprint(labels)\n```\n\nIn this implementation, the algorithm starts with an initial set of medoids and iteratively improves the clustering by swapping medoids with non-medoids until no further improvement can be made. The labels returned correspond to the index of the medoid that each sample is closest to."}
{"task_id": 216, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\"\"\"\n    if n_iterations < 1 or x_train.shape[1] != x_test.shape[1]:\n        return -1\n\n    # Polynomial feature expansion\n    def poly_features(X, degree):\n        n_samples, n_features = X.shape\n        features = [np.ones(n_samples)]\n        for deg in range(1, degree + 1):\n            for d in range(n_features):\n                features.append(X[:, d] ** deg)\n        return np.column_stack(features)\n    \n    # Standardization\n    def standardize(X):\n        mean = np.nanmean(X, axis=0)\n        std = np.nanstd(X, axis=0)\n        X_std = (X - mean) / std\n        return X_std, mean, std\n\n    # Gradient update rule\n    def update_weights(X, y, theta, learning_rate, reg_factor, l1_ratio):\n        n_samples, n_features = X.shape\n        l1_term = l1_ratio * reg_factor * np.sign(theta)[1:]\n        l2_term = (1 - l1_ratio) * reg_factor * theta[1:]\n        \n        predictions = np.dot(X, theta)\n        errors = predictions - y\n        gradient = (1 / n_samples) * np.dot(X.T, errors)\n        gradient[1:] += l1_term + l2_term\n        \n        theta -= learning_rate * gradient\n        return theta\n    \n    # Add polynomial features\n    x_train_poly = poly_features(x_train, degree)\n    x_test_poly = poly_features(x_test, degree)\n    \n    # Standardize\n    x_train_std, mean, std = standardize(x_train_poly[:, 1:])\n    x_test_std = (x_test_poly[:, 1:] - mean) / std\n    \n    x_train_std = np.insert(x_train_std, 0, np.ones(x_train_std.shape[0]), axis=1)\n    x_test_std = np.insert(x_test_std, 0, np.ones(x_test_std.shape[0]), axis=1)\n    \n    # Initialize theta\n    theta = np.zeros(x_train_std.shape[1])\n    \n    # Gradient descent\n    for _ in range(n_iterations):\n        theta = update_weights(x_train_std, y_train, theta, learning_rate, reg_factor, l1_ratio)\n    \n    # Prediction\n    predictions = np.dot(x_test_std, theta)\n    return np.round(predictions, 4).tolist()\n```"}
{"task_id": 217, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to numpy arrays for vectorized computation\n    actual_np = np.array(actual)\n    predicted_np = np.array(predicted)\n\n    # Ensure that labels are in the set {-1, 1}\n    if not np.all((actual_np == 1) | (actual_np == -1)):\n        raise ValueError(\"Labels in 'actual' must be +1 or -1.\")\n\n    # Compute the sigmoid of the raw predicted values\n    sigmoid_pred = 1 / (1 + np.exp(-predicted_np))\n    \n    # Compute the logistic gradient, Hessian, and probabilities\n    gradient = actual_np * sigmoid(-actual_np * predicted_np)\n    hessian = sigmoid_pred * (1 - sigmoid_pred)\n    probability = sigmoid_pred\n    \n    # Round the values to 6 decimal places\n    gradient_list = [round(val, 6) for val in gradient]\n    hessian_list = [round(val, 6) for val in hessian]\n    probability_list = [round(val, 6) for val in probability]\n\n    return (gradient_list, hessian_list, probability_list)\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n```\n\n# Test the function with some sample data\n```python\n# Sample data\ny_true = [1, -1, 1, -1, 1]\ny_scores = [1.2, -0.5, 1.9, -1.3, 2.1]\n\n# Compute logistic components\ngradient, hessian, probability = logistic_components(y_true, y_scores)\nprint(\"Gradient:\", gradient)\nprint(\"Hessian:\", hessian)\nprint(\"Probability:\", probability)\n```\n```"}
{"task_id": 218, "completion_id": 0, "completion": "```python\ndef calculate_hand_score(hand: list[int]) -> int:\n    \"\"\"Calculate the score of the hand using Blackjack rules including usable ace.\"\"\"\n    score = sum(hand)\n    aces = hand.count(1)\n    while score + 10 <= 21 and aces > 0:\n        score += 10\n        aces -= 1\n    return score\n\ndef is_natural_blackjack(hand: list[int]) -> bool:\n    \"\"\"Check if the hand is a natural blackjack (one Ace and one 10-value card).\"\"\"\n    return len(hand) == 2 and 1 in hand and 10 in hand\n\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    player_score = calculate_hand_score(player)\n    dealer_score = calculate_hand_score(dealer)\n    \n    if player_score > 21:\n        return -1.0\n    elif dealer_score > 21:\n        return 1.0\n    elif player_score > dealer_score:\n        return 1.5 if is_natural_blackjack(player) else 1.0\n    elif player_score == dealer_score:\n        return 0.0 if not is_natural_blackjack(player) else 1.0\n    else:\n        return -1.0\n\n# Example testing to ensure the function works as expected\nprint(blackjack_outcome([1, 10], [2, 3, 10]))  # 1.5 (player wins with natural blackjack)\nprint(blackjack_outcome([1, 10], [10, 10]))   # 1.0 (player wins, dealer loses)\nprint(blackjack_outcome([1, 2, 3], [10, 10])) # -1.0 (player loses, dealer wins)\nprint(blackjack_outcome([10, 10, 1], [9, 9])) # 0.0 (draw)\n```"}
{"task_id": 221, "completion_id": 0, "completion": "Here is the Python script that implements the required functionality for calculating the Mean Squared Logarithmic Error (MSLE) according to the given task description.\n\n```python\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper function that returns element-wise squared log errors.\"\"\"\n    return (np.log(1 + actual) - np.log(1 + predicted)) ** 2\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    # Convert inputs to numpy arrays for convenience\n    actual_array = np.array(actual)\n    predicted_array = np.array(predicted)\n    \n    # Input validation\n    if actual_array.shape != predicted_array.shape:\n        return -1\n    if np.any(actual_array < 0) or np.any(predicted_array < 0):\n        return -1\n    \n    # Calculate the squared log error\n    sl_errors = squared_log_error(actual_array, predicted_array)\n    \n    # Calculate the mean squared log error\n    msle = np.mean(sl_errors)\n    \n    return round(msle, 4)\n\n# Example usage\nactual = [3, 0, 2, 6]\npredicted = [3, 1, 2, 5]\n\nprint(mean_squared_log_error(actual, predicted))  # Output: 0.0396\n```\n\nMake sure to import `numpy` as it is needed for the logarithmic calculations and array manipulations necessary for this implementation. Also, check the example usage provided at the end to see how the function works with sample data."}
{"task_id": 222, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    \n    # Define a helper function for the numerical stable sigmoid\n    def stable_sigmoid(x):\n        return np.where(x >= 0, \n                        1 / (1 + np.exp(-x)), \n                        np.exp(x) / (1 + np.exp(x)))\n    \n    # Check if z is a scalar\n    if isinstance(z, (int, float)):\n        result = stable_sigmoid(z)\n    # Check if z is a list \n    elif isinstance(z, list):\n        z = np.array(z)  # Convert the list to a numpy array for vectorized computation\n        result = stable_sigmoid(z).tolist()\n    # Assume z is a numpy array\n    else:\n        result = stable_sigmoid(z).tolist()\n    \n    # Round the result to the 4th decimal place\n    if isinstance(result, list):\n        # Flatten the list, apply rounding, and restore its structure\n        nest_struc = [isinstance(i, list) for i in result]\n        flat_list = [item for sublist in result for item in (sublist if isinstance(sublist, list) else [sublist])]\n        rounded_list = [round(num, 4) for num in flat_list]\n        # Restore the original nested structure\n        result = [rounded_list.pop(0) if not nest else [rounded_list.pop(0) for _ in range(len(nest))] for nest in nest_struc]\n    else:\n        result = round(result, 4)\n    \n    return result\n\n# Test example\nprint(sigmoid(1000))  # Should return a numerically stable value close to 1\nprint(sigmoid([-1000, 0, 1000]))  # Should return a list with numerically stable values close to 0, 0.5, and 1\n```"}
{"task_id": 224, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    # Helper function to apply Leaky ReLU, handles both scalars and numpy arrays\n    def _leaky_relu_helper(x):\n        return np.where(x >= 0, x, a * x)\n    \n    if isinstance(z, (int, float)):\n        # If z is a scalar, apply Leaky ReLU directly\n        return float(_leaky_relu_helper(z))\n    elif isinstance(z, list):\n        # If z is a list, recursively apply the function\n        return [_leaky_relu_helper(item).tolist() if isinstance(item, np.ndarray) else leaky_relu(item, a) for item in z]\n    elif isinstance(z, np.ndarray):\n        # If z is a numpy array, apply the function and convert to list\n        return _leaky_relu_helper(z).tolist()\n    else:\n        raise TypeError(\"Unsupported input type, must be int, float, list, or numpy.ndarray.\")\n\n# Test cases to verify the correctness of the function\nprint(leaky_relu(-5))  # Should output -0.05\nprint(leaky_relu([[-1, 2], [3, -4]]))  # Should output [[-0.01, 2.0], [3.0, -0.04]]\nprint(leaky_relu(np.array([[-1, 2], [3, -4]])))  # Should output [[-0.01, 2.0], [3.0, -0.04]]\n```"}
{"task_id": 226, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    sample_weights = np.full(n_samples, 1 / n_samples)\n    classifiers = []\n\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = None\n        for feature_idx in range(n_features):\n            thresholds = np.unique(X_train[:, feature_idx])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = np.where(X_train[:, feature_idx] < threshold, polarity, -polarity)\n                    error = np.sum(sample_weights * (predictions != y_train))\n                    if error < min_error:\n                        min_error = error\n                        best_stump = (feature_idx, threshold, polarity)\n\n        classifiers.append(best_stump)\n\n        # Compute the learner weight (alpha)\n        alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n        predictions = np.where(X_train[:, best_stump[0]] < best_stump[1], best_stump[2], -best_stump[2])\n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        sample_weights /= np.sum(sample_weights)\n\n    # Predictions for X_test\n    predictions = np.zeros(len(X_test))\n    for feature_idx, threshold, polarity in classifiers:\n        stump_predictions = np.where(X_test[:, feature_idx] < threshold, polarity, -polarity)\n        predictions += stump_predictions\n\n    return [int(math.copysign(1, pred)) for pred in predictions]\n\n# Example usage\nif __name__ == \"__main__\":\n    X_train = np.array([[1, 2], [2, 3], [3, 3], [4, 5]])\n    y_train = np.array([-1, -1, 1, 1])\n    X_test = np.array([[0, 0], [4, 4]])\n    n_clf = 3\n    print(adaboost_predict(X_train, y_train, X_test, n_clf))\n```\n\nThis code defines the `adaboost_predict` function that implements an AdaBoost algorithm using decision stumps as weak learners. The function selects the best stump for each boosting round, updates sample weights based on classification errors, and finally predicts the labels for unseen data by aggregating the predictions of each stump."}
{"task_id": 241, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    \n    # Calculate the product of dimensions after the first one.\n    remaining_shape = np.prod(shape[1:])\n    matrix_shape = (shape[0], remaining_shape)\n    \n    # Create a matrix with the required shape filled with standard normal samples.\n    A = np.random.randn(*matrix_shape)\n    \n    # Compute the SVD of A.\n    U, _, Vt = np.linalg.svd(A, full_matrices=False)\n    \n    # Choose the right orthogonal matrix (U or V^T) based on the shape.\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = Vt\n    \n    # Reshape the orthogonal matrix to the requested shape.\n    orthogonal_tensor = Q.reshape(shape)\n    \n    # Scale the orthogonal matrix.\n    orthogonal_tensor *= scale\n    \n    # Convert the numpy array to a list and return it.\n    return orthogonal_tensor.tolist()\n\n# Example usage:\nnp.random.seed(0)\nshape = (2, 2)\nscale = 0.5\nresult = orthogonal(shape, scale)\nprint(np.array(result))\n# Output should be approximately:\n# [[0.25900777   0.42574999 ]\n#  [0.42574999  -0.25972337]]\n```"}
{"task_id": 243, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Define the weights and biases\n    weights = np.ones((4, 4))  # All weights initialized to 1.0\n    biases = np.zeros(4)       # All biases are 0.0\n    \n    # Dense-1: state \u2192 4 neurons, ReLU activation\n    z1 = np.maximum(0, np.dot(state, weights[:3].T) + biases)\n\n    # Dense-2: 4 \u2192 4 neurons, ReLU activation\n    z2 = np.maximum(0, np.dot(z1, weights) + biases)\n\n    # Dense-3: 4 \u2192 4 neurons, ReLU activation\n    z3 = np.maximum(0, np.dot(z2, weights) + biases)\n    \n    # Actor head: 4 \u2192 3 neurons, Softmax activation\n    logits = np.dot(z3, weights[:3])\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n    action_probs = [round(prob, 4) for prob in action_probs]\n    \n    # Critic head: 4 \u2192 1 neuron, no activation\n    state_value = np.dot(z3, weights[0]) \n    state_value = round(state_value, 4)\n    \n    return action_probs, state_value\n\n# Test the function\nstate = [1.0, 2.0, 3.0]\naction_probs, state_value = actor_critic_forward(state)\nprint(\"Action Probabilities:\", action_probs)\nprint(\"State Value:\", state_value)\n```\n\nThis script adheres to the specified task of implementing a basic forward pass for an Actor-Critic network with shared layers and distinct output heads, using only NumPy for operations. The values for the weights and biases are set according to the task's requirements and the network's architecture described."}
{"task_id": 249, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    # Convert state and parameters to NumPy arrays\n    state = np.array(state)\n    for key, val in params.items():\n        params[key] = np.array(val)\n\n    # Shared layers\n    hidden = np.maximum(state @ params['W1'] + params['b1'], 0)  # ReLU activation\n    hidden = np.maximum(hidden @ params['W2'] + params['b2'], 0)  # ReLU activation\n    hidden = np.maximum(hidden @ params['W3'] + params['b3'], 0)  # ReLU activation\n\n    # Actor head\n    actor_scores = hidden @ params['Wa'] + params['ba']\n    exp_scores = np.exp(actor_scores - np.max(actor_scores))  # For numerical stability\n    action_probabilities = exp_scores / np.sum(exp_scores)\n\n    # Critic head\n    state_value = hidden @ params['Wc'] + params['bc']\n\n    # Round the results to 4 decimal places\n    action_probabilities = np.round(action_probabilities, 4)\n    state_value = np.round(state_value.item(), 4)\n\n    return list(action_probabilities), state_value\n\n# Example params dictionary\nparams = {\n    'W1': [[0.1, 0.2], [0.3, 0.4]], 'b1': [0.1, 0.2],\n    'W2': [[0.5, 0.6], [0.7, 0.8]], 'b2': [0.3, 0.4],\n    'W3': [[0.9, 1.0], [1.1, 1.2]], 'b3': [0.5, 0.6],\n    'Wa': [[1.3, 1.4], [1.5, 1.6]], 'ba': [0.7, 0.8],\n    'Wc': [[1.7, 1.8]], 'bc': [0.9],\n}\n\n# Example state\nstate = [1.0, 2.0]\n\n# Example call\nprint(actor_critic_forward(state, params))\n```\n\nThis solution implements the `actor_critic_forward` function as requested, including the forward pass through the shared layers followed by the actor and critic heads. It uses basic operations from NumPy and the soft-max function to produce the output. The example call at the end provides a way to check the correctness of the implementation with a sample input."}
{"task_id": 253, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l2_ratio = 1 - l1_ratio\n    \n    if gradient:\n        grad = alpha * (l1_ratio * np.sign(w) + l2_ratio * w)\n        return [round(g, 4) for g in grad.tolist()]\n    else:\n        penalty = alpha * (l1_ratio * np.linalg.norm(w, 1) + l2_ratio * 0.5 * (w.T @ w))\n        return round(penalty, 4)\n\n# Example usage:\nweights = [1, -2, 1.5]\nalpha = 0.1\nl1_ratio = 0.5\n\n# Calculate penalty\npenalty = elastic_net_regularization(weights, alpha, l1_ratio)\nprint(\"Penalty:\", penalty)\n\n# Calculate gradient\ngradient = elastic_net_regularization(weights, alpha, l1_ratio, gradient=True)\nprint(\"Gradient:\", gradient)\n```\n\nThis Python function `elastic_net_regularization` encapsulates the calculation of both the Elastic-Net penalty and its gradient, adhering to the given specifications for input and output. The example usage at the bottom demonstrates applying this function with an example weight vector, `alpha`, and `l1_ratio`."}
{"task_id": 256, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    # Check if the parameter name is invalid\n    if param_name in [\"X\", \"y\"]:\n        return None\n\n    # Redirect Ba and Bx to their lowercase equivalents if necessary\n    param_key = param_name.lower() if param_name in [\"Ba\", \"Bx\"] else param_name\n\n    # Retrieve the parameter to be checked\n    param = model.parameters[param_key]\n\n    # Initialize empty array for numerical gradient\n    num_grads = np.zeros_like(param, dtype=np.float64)\n\n    # Perform gradient checking for each element of the parameter\n    for i in range(param.size):\n        # Create a copy of the parameter to perturb a single element\n        perturbed_param = deepcopy(param)\n\n        # Perturb the element by +\u03b5\n        perturbed_param.flat[i] += epsilon\n        model.parameters[param_key] = perturbed_param\n        model.flush_gradients()\n        forward_pass_result = [model.forward(X[:, :, t]) for t in range(n_t)]\n        loss_plus = loss_func(forward_pass_result)\n\n        # Perturb the element by -\u03b5\n        perturbed_param.flat[i] -= 2 * epsilon\n        model.parameters[param_key] = perturbed_param\n        model.flush_gradients()\n        forward_pass_result = [model.forward(X[:, :, t]) for t in range(n_t)]\n        loss_minus = loss_func(forward_pass_result)\n\n        # Reset the parameter to its original value\n        perturbed_param.flat[i] += epsilon\n        model.parameters[param_key] = perturbed_param\n\n        # Calculate the numerical gradient for the current element\n        num_grads.flat[i] = (loss_plus - loss_minus) / (2 * epsilon)\n\n    return num_grads.T\n```"}
{"task_id": 257, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nclass DecisionStump:\n    def __init__(self):\n        self.feature = None\n        self.threshold = None\n        self.polarity = None\n        self.alpha = None\n\n    def fit(self, X, y, sample_weight):\n        n_samples, n_features = X.shape\n        best_error = float('inf')\n        best_feature, best_threshold = None, None\n        best_polarity = None\n\n        for feature in range(n_features):\n            for threshold in np.unique(X[:, feature]):\n                for polarity in [-1, 1]:\n                    prediction = polarity * np.where(X[:, feature] <= threshold, -1, 1)\n                    error = np.sum(sample_weight * (prediction != y))\n                    if error < best_error:\n                        best_error = error\n                        best_feature = feature\n                        best_threshold = threshold\n                        best_polarity = polarity\n\n        self.feature = best_feature\n        self.threshold = best_threshold\n        self.polarity = best_polarity\n        self.error = best_error\n\n    def predict(self, X):\n        return self.polarity * np.where(X[:, self.feature] <= self.threshold, -1, 1)\n\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels -1 or 1.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n\n    n_samples = X_train.shape[0]\n    sample_weight = np.full(n_samples, 1 / n_samples)\n\n    clfs = []\n    for _ in range(n_clf):\n        clf = DecisionStump()\n        clf.fit(X_train, y_train, sample_weight)\n\n        error = clf.error\n        alpha = 0.5 * np.log((1 - error) / error)\n        clf.alpha = alpha\n\n        predictions = clf.predict(X_train)\n        sample_weight *= np.exp(-alpha * y_train * predictions)\n        sample_weight /= np.sum(sample_weight)\n\n        clfs.append(clf)\n\n    predictions = np.zeros(X_test.shape[0])\n    for clf in clfs:\n        predictions += clf.alpha * clf.predict(X_test)\n\n    return [1 if pred > 0 else -1 for pred in predictions]\n\n# Example usage:\nX_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\ny_train = np.array([-1, -1, 1, 1])\nX_test = np.array([[1.5, 2.5], [3.5, 4.5]])\npredicted = adaboost_predict(X_train, y_train, X_test, n_clf=3)\nprint(predicted)  # Output: [-1, 1]\n```"}
{"task_id": 261, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    assert len(shape) >= 2, \"Shape must have at least two dimensions.\"\n    \n    fan_in = shape[1]\n    fan_out = shape[0]\n    \n    if len(shape) > 2:\n        # For shapes with more than two dimensions, calculate the receptive field size\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n        \n    # Calculate the standard deviation\n    s = np.sqrt(2.0 / (fan_in + fan_out))\n    \n    # Return a NumPy array with elements from a normal distribution with mean 0 and std s\n    return np.random.normal(loc=0.0, scale=s, size=shape)\n\n# Example usage and a simple check to verify the output\ndef check_glorot_normal():\n    np.random.seed(0)  # Fixing random state for reproducibility\n    shape = (3, 4, 2, 2)  # Example shape\n    tensor = glorot_normal(shape)\n    \n    print(\"Sample Tensor:\\n\", tensor)\n    print(\"Mean: \", np.mean(tensor))\n    print(\"Standard Deviation: \", np.std(tensor))\n    \n    # Calculate expected standard deviation for a check\n    receptive_field_size = np.prod(shape[2:])\n    fan_in = shape[1] * receptive_field_size\n    fan_out = shape[0] * receptive_field_size\n    expected_std = np.sqrt(2.0 / (fan_in + fan_out))\n    \n    print(\"Expected Standard Deviation: \", expected_std)\n\n# Run the check\ncheck_glorot_normal()\n```\n\nThis Python script provides a self-contained implementation of the Glorot (Xavier) normal weight-initialisation function as per the task description. It also includes a small check routine to validate the correctness of the implementation by comparing the theoretical standard deviation with the empirical standard deviation of the generated tensor. The random seed is fixed for reproducibility."}
{"task_id": 266, "completion_id": 0, "completion": "Here is a self-contained Python script to solve the task described above:\n\n```python\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"\n    Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples (u, v) describing undirected edges that connect\n        vertices u and v.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list G where G[i] contains all vertices adjacent to V[i].\n        \u2022 The outer list has the same length and order as V.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in V.\n    \"\"\"\n    # Create a dictionary to represent the adjacency list\n    adj_list_dict = {v: [] for v in V}\n\n    # Fill in the adjacency list with the edge information\n    for u, v in E:\n        # Since the graph is undirected, add both directions of the edge\n        if v not in adj_list_dict[u]:\n            adj_list_dict[u].append(v)\n        if u not in adj_list_dict[v]:\n            adj_list_dict[v].append(u)\n\n    # Convert the dictionary back into the desired list of lists format\n    adj_list = [sorted(adj_list_dict[v], key=lambda x: V.index(x)) for v in V]\n\n    return adj_list\n\n# Test the function with a sample graph\nif __name__ == \"__main__\":\n    V = ['A', 'B', 'C', 'D']\n    E = [('A', 'B'), ('A', 'C'), ('B', 'C'), ('C', 'D'), ('B', 'D')]\n    adjacency_list = build_adj_list(V, E)\n    print(adjacency_list)\n    # Should output: [['B', 'C'], ['A', 'C', 'D'], ['A', 'B', 'D'], ['C', 'B']]\n```\n\nThis script defines the function `build_adj_list` as required by the task. The adjacency list is initially constructed as a dictionary for easy updates and then converted into the required list of lists format. The adjacency list is then sorted based on the order of vertices in `V`."}
{"task_id": 267, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n    \n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n    \n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_err = np.inf\n    best_stump = None\n    \n    # Consider all features\n    for feature_idx in range(n_features):\n        # Consider all unique thresholds for current feature\n        thresholds = np.unique(X[:, feature_idx])\n        for threshold in thresholds:\n            # Test both polarities: 1 and -1\n            for polarity in [1, -1]:\n                pred = np.where(X[:, feature_idx] < threshold, 1, -1) * polarity\n                err = np.sum(sample_weights * (pred != y))\n                if err < best_err:\n                    best_stump = {\n                        \"feature_index\": feature_idx,\n                        \"threshold\": round(threshold, 4),\n                        \"polarity\": polarity,\n                        \"weighted_error\": round(err, 4)\n                    }\n                    best_err = err\n    \n    return best_stump\n\n# Example usage\nif __name__ == \"__main__\":\n    # Example data points and corresponding labels\n    X = np.array([[2.7810836, 2.550537003],\n                  [1.465489372, 2.362125076],\n                  [3.396561688, 4.400293529],\n                  [1.38807019, 1.850220317],\n                  [3.06407232, 3.005305973]])\n    y = np.array([-1, -1, 1, -1, 1])\n    # Weights for each sample - sum to 1 but not required\n    sample_weights = np.array([0.2, 0.2, 0.1, 0.3, 0.2])\n    \n    # Train the decision stump\n    stump = train_decision_stump(X, y, sample_weights)\n    print(stump)\n```\n\nThis code defines and implements the `train_decision_stump` function as per the specifications in the task description. It tests all possible stumps defined by each feature and threshold combination, calculating the weighted error for each. The function returns the stump with the minimum weighted error, considering both polarities. The example usage at the end demonstrates how to use the function with a small dataset."}
{"task_id": 273, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(class_labels):\n    \"\"\"Compute the Shannon entropy of a list of class labels.\"\"\"\n    label_counts = Counter(class_labels)\n    total = len(class_labels)\n    entropy = -sum((count/total) * math.log2(count/total) for count in label_counts.values())\n    return entropy\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    # Combine feature and target for easier sorting and grouping\n    combined = sorted(zip(feature, target), key=lambda x: x[0])\n    \n    # Sort unique features to find candidate thresholds\n    sorted_features = sorted(set(feature))\n    candidate_thresholds = [(sorted_features[i] + sorted_features[i+1]) / 2 \n                            for i in range(len(sorted_features) - 1)]\n    \n    # Compute entropy for parent node\n    H_parent = entropy(target)\n    n = len(target)\n    \n    best_gain = 0.0\n    best_threshold = None\n    \n    for threshold in candidate_thresholds:\n        left_indices = [i for i in range(n) if combined[i][0] < threshold]\n        right_indices = [i for i in range(n) if combined[i][0] >= threshold]\n        \n        # Compute the entropy of the left and right subsets\n        H_left = entropy([combined[i][1] for i in left_indices])\n        H_right = entropy([combined[i][1] for i in right_indices])\n        \n        # Calculate the information gain\n        IG = H_parent - (len(left_indices) / n) * H_left - (len(right_indices) / n) * H_right\n        \n        if IG > best_gain:\n            best_gain = IG\n            best_threshold = threshold\n            \n    best_gain = round(best_gain, 4) if best_gain > 0 else 0.0\n    best_threshold = round(best_threshold, 4) if best_gain > 0 else None\n    \n    return (best_threshold, best_gain)\n\n# Example usage\nfeature = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ntarget = [0, 0, 1, 1, 0, 1, 1, 0, 1]\nprint(best_split(feature, target))\n```\n\nThis solution provides a self-contained function `best_split` for determining the optimal numerical threshold for a decision tree split based on information gain. It includes all required imports, documentation, and example usage."}
{"task_id": 286, "completion_id": 0, "completion": "Below is the Python script that fulfills the requirements of the given task:\n\n```python\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    return [[0.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    return [[1.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    return [[random.uniform(low, high) for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. 'zeros_init').\n\n    Returns:\n        A callable initializer.\n\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    global_dict = globals()\n    initializer = global_dict.get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError(\"Invalid initialization function.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    name = \"ones_init\"\n    shape = (2, 2)\n    init_fn = get_initializer(name)\n    output = init_fn(shape)\n    print(output)  # Should print: [[1.0, 1.0], [1.0, 1.0]]\n```\n\nThe code provides a straightforward implementation of three weight-initialization functions and a `get_initializer` function that retrieves them based on their name. It then applies a check to see if the retrieved object is indeed callable before returning it; otherwise, it raises a `ValueError`."}
{"task_id": 287, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\"\"\"\n    batch_size, channels, height, width = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n    o_h = (height - p_h) // s_h + 1\n    o_w = (width - p_w) // s_w + 1\n    \n    # Initialize output and gradient arrays\n    output = np.zeros((batch_size, channels, o_h, o_w))\n    grad_input = np.zeros_like(X)\n    \n    # Perform forward pass\n    for n in range(batch_size):\n        for c in range(channels):\n            for i in range(o_h):\n                for j in range(o_w):\n                    h_start, w_start = i * s_h, j * s_w\n                    h_end, w_end = h_start + p_h, w_start + p_w\n                    output[n, c, i, j] = np.mean(X[n, c, h_start:h_end, w_start:w_end])\n    \n    # Perform backward pass\n    for n in range(batch_size):\n        for c in range(channels):\n            for i in range(o_h):\n                for j in range(o_w):\n                    h_start, w_start = i * s_h, j * s_w\n                    h_end, w_end = h_start + p_h, w_start + p_w\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += (accum_grad[n, c, i, j] / (p_h * p_w))\n    \n    # Round values and convert to lists\n    output = np.round(output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    \n    return output, grad_input\n\n# Example usage\nif __name__ == \"__main__\":\n    X = np.random.randn(2, 3, 6, 6)\n    pool_shape = (3, 3)\n    stride = (2, 2)\n    accum_grad = np.random.randn(2, 3, 2, 2)\n    output, grad_input = average_pool2d(X, pool_shape, stride, accum_grad)\n    print(\"Output:\", output)\n    print(\"Gradient Input:\", grad_input)\n```\nThis Python script contains the implementation of both the forward and backward passes of a 2-D average-pooling layer as described in the task. It includes a simple example usage at the bottom to demonstrate how to call the function and to verify its core functioning."}
{"task_id": 290, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(np.array(tree_a.value), np.array(tree_b.value))\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature or not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-8):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    else:\n        return False\n\n# Example usage:\n# tree1 = Node(3, 5.5, Leaf(1), Node(4, 7.1, Leaf(2), Leaf(3)))\n# tree2 = Node(3, 5.500000009, Node(4, 7.1, Leaf(2), Leaf(3)), Leaf(1))\n# print(compare_trees(tree1, tree2))  # Output should be False due to different structures\n```"}
{"task_id": 292, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                            parent2: list[list[int | float]],\n                            cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    # Convert parent matrices to numpy arrays for slicing\n    parent1_arr = np.array(parent1)\n    parent2_arr = np.array(parent2)\n    \n    # Check if the shapes of parent1 and parent2 are the same\n    if parent1_arr.shape != parent2_arr.shape:\n        return -1\n    \n    # Validate cutoff\n    if cutoff < 0 or cutoff > parent1_arr.shape[1]:\n        return -1\n    \n    # If the cutoff is at the start or the end, then the children are the parents themselves\n    if cutoff == 0:\n        return (parent1, parent2)\n    elif cutoff == parent1_arr.shape[1]:\n        return (parent2, parent1)\n    \n    # Split the columns according to the cutoff\n    child1 = np.hstack([parent1_arr[:, :cutoff], parent2_arr[:, cutoff:]])\n    child2 = np.hstack([parent2_arr[:, :cutoff], parent1_arr[:, cutoff:]])\n    \n    # Convert back to list of lists\n    return (child1.tolist(), child2.tolist())\n\n# Example usage:\nparent1 = [[1, 2, 3], [4, 5, 6]]\nparent2 = [[7, 8, 9], [10, 11, 12]]\ncutoff = 1\nprint(single_point_crossover(parent1, parent2, cutoff))\n```\n\nThis script implements the single-point column crossover for the weights of neural network layers. It adheres to the task requirements and provides a clear example of its usage."}
{"task_id": 294, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    # Initialize the adjacency dictionary with empty lists for each vertex\n    adj: Dict[Any, List[Tuple[Any, float]]] = {label: [] for label in G['_V2I']}\n    \n    # Process each vertex and its outgoing edges\n    for source_index, edges in enumerate(G['_G']):\n        for edge in edges:\n            source_label, target_label, weight = edge\n            if source_label in G['_V2I'] and target_label in G['_V2I']:\n                # Direct edges as per the directed graph\n                adj[source_label].append((target_label, weight))\n                # If undirected, add the reverse edge\n                if not G['is_directed']:\n                    adj[target_label].append((source_label, weight))\n    \n    # Sort the neighbour lists alphabetically\n    for label in adj:\n        adj[label].sort()\n    \n    return adj\n\n# Example usage:\nG = {\n    'is_directed': False,\n    '_V2I': {'A': 0, 'B': 1, 'C': 2, 'D': 3},\n    '_G': [\n        [('A', 'B', 10.0), ('A', 'C', 20.0)],\n        [('B', 'A', 30.0)],\n        [('C', 'A', 40.0), ('C', 'D', 50.0)],\n        [('D', 'C', 60.0)]\n    ]\n}\n\n# Call the function and print the result\nprint(to_networkx(G))\n```\n\nThis script provides a function `to_networkx` that accomplishes the task of converting a custom graph dictionary into an adjacency dictionary as specified in the problem description. It accounts for both directed and undirected graphs and ensures the adjacency lists are sorted. The example usage demonstrates how to use this function with a mock graph dictionary `G`."}
{"task_id": 296, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)  # Convert to NumPy array if not already\n    return np.all(np.logical_or(x == 0, x == 1))\n\n# Test cases to verify the solution\nif __name__ == \"__main__\":\n    # Test Case 1: Typical binary array\n    print(is_binary(np.array([0, 1, 1, 0, 1])))  # Expected: True\n    \n    # Test Case 2: Numeric but not binary\n    print(is_binary(np.array([0, 1, 1, 2, 1])))  # Expected: False\n    \n    # Test Case 3: Boolean array\n    print(is_binary(np.array([True, False, True])))  # Expected: True\n    \n    # Test Case 4: Float binary array\n    print(is_binary(np.array([1.0, 0.0, 1.0, 0.0]))) # Expected: True\n    \n    # Test Case 5: Float array not strictly binary\n    print(is_binary(np.array([1.0, 0.1, 1.0, 0.0]))) # Expected: False\n    \n    # Test Case 6: Multi-dimensional array\n    print(is_binary(np.array([[1, 0], [0, 1]]))) # Expected: True\n```"}
{"task_id": 298, "completion_id": 0, "completion": "Here is a self-contained Python script to solve the task:\n\n```python\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\n\ndef pad_sequence(sequence: List[str], N: int) -> List[str]:\n    \"\"\"Helper function to pad sequences with <bol> and <eol> tokens.\"\"\"\n    return ([\"<bol>\"] * (N - 1)) + sequence + [\"<eol>\"]\n\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    if N < 1:\n        raise ValueError(\"N must be \u2265 1\")\n\n    # Tokenize the corpus\n    tokenized_corpus = [sentence.split() for sentence in corpus]\n    flat_tokens = [token for sentence in tokenized_corpus for token in sentence]\n\n    # Count N-grams and (N-1)-grams\n    ngram_counts = defaultdict(int)\n    prefix_counts = defaultdict(int)\n    for sentence in tokenized_corpus:\n        padded_sentence = pad_sequence(sentence, N)\n        for i in range(len(padded_sentence) - N + 1):\n            ngram = ' '.join(padded_sentence[i:i + N])\n            ngram_counts[ngram] += 1\n            prefix_counts[' '.join(padded_sentence[i:i + N - 1])] += 1\n\n    # Special case for unigrams: use total token count as denominator\n    if N == 1:\n        total_tokens = len(flat_tokens)\n        token_counts = Counter(flat_tokens)\n        ngram_counts = {f\"{token}\": count for token, count in token_counts.items()}\n        prefix_counts = {\"\": total_tokens}\n\n    # Tokenize and pad the query\n    tokenized_query = query.split()\n    padded_query = pad_sequence(tokenized_query, N)\n\n    # Calculate probability and log-probability\n    log_prob_sum = 0.0\n    for i in range(len(padded_query) - N + 1):\n        ngram = ' '.join(padded_query[i:i + N])\n        prefix = ' '.join(padded_query[i:i + N - 1])\n        if ngram not in ngram_counts or prefix not in prefix_counts:\n            return float('-inf')\n        prob = ngram_counts[ngram] / prefix_counts[prefix]\n        if prob == 0:\n            return float('-inf')\n        log_prob_sum += math.log(prob)\n\n    return round(log_prob_sum, 4)\n\n\n# Example usage\ncorpus = [\"a b a\", \"b a b\"]\nquery = \"a b\"\nN = 1\nprint(ngram_log_prob(corpus, query, N))  # Output: -1.3863\n```\n\nIn this code, the function `ngram_log_prob` is the main performer that calculates the total log-probability of a query considering a given corpus and N-gram order. The helper function `pad_sequence` is to pad sentences with special tokens. Both functions are thoroughly commented to follow the N-gram MLE probability calculation logic."}
{"task_id": 302, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n_samples, _ = X.shape\n    \n    # 1. Build the weighted adjacency matrix W\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            dist = np.linalg.norm(X[i] - X[j])\n            W[i, j] = 1 / (1 + dist)\n            W[j, i] = W[i, j]\n    \n    # 2. Compute the (unnormalized) graph Laplacian L=D\u2212W\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    \n    # 3. Obtain the first k eigenvectors (those associated with the k smallest eigen-values) of L\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    \n    # 4. Run k-means on the rows of E\n    centroids = E[:k].copy()\n    labels = np.zeros(n_samples, dtype=int)\n    iterations = 0\n    \n    while iterations < 100:\n        # Assign points to clusters\n        new_labels = np.argmin(np.linalg.norm(E[:, np.newaxis] - centroids, axis=2), axis=1)\n        \n        # Update centroids\n        for i in range(k):\n            if np.any(new_labels == i):\n                centroids[i] = np.mean(E[new_labels == i], axis=0)\n            else:\n                # If a cluster is empty, reinitialize centroid with a random sample\n                centroids[i] = E[np.random.choice(n_samples)]\n        \n        # Break if labels have converged or if too many iterations\n        if np.all(new_labels == labels):\n            break\n        labels = new_labels\n        iterations += 1\n\n    return labels.tolist()\n\n# Example usage:\n# X = np.random.rand(10, 2)  # 10 samples in 2 dimensions\n# k = 3\n# labels = spectral_clustering(X, k)\n# print(labels)\n```"}
{"task_id": 303, "completion_id": 0, "completion": "```python\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    curr_label = params[ix][1]\n    prev_label = params[prev_ix][1]\n    prev_mine = params[prev_ix][0]\n    curr_mine = params[ix][0]\n\n    return f\"{'-'*25} DEBUG {'-'*25}\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\n\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\nMine [{curr_label}]:\\n{curr_mine}\\n\\nTheirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n{'-'*23} END DEBUG {'-'*23}\"\n\n# Example Usage\nparams = [(\"output1\", \"label1\"), (\"output2\", \"label2\")]\ngolds = {\"label1\": \"gold1\", \"label2\": \"gold2\"}\nwarn_str = \"\\nWarning: Something is wrong.\"\n\nprint(err_fmt(params, golds, 1, warn_str))\n```\n\nIn this script, the `err_fmt` function follows the task specification exactly, including the layout and the inclusion of optional warning messages. The example at the bottom demonstrates how to call this function with some mock data to generate the required debugging output."}
{"task_id": 304, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n    \n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n    \n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n    \n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n    N, M = X.shape\n\n    if V is None:\n        V = np.eye(M)\n    elif np.isscalar(V):\n        V = V * np.eye(M)\n    elif isinstance(V, (list, tuple)):\n        V = np.diag(V)\n\n    if np.isscalar(mu):\n        mu = mu * np.ones(M)\n    mu = np.array(mu)\n\n    V_inv = np.linalg.inv(V)\n    Sigma_b_inv = V_inv + X.T @ X\n    Sigma_b = np.linalg.inv(Sigma_b_inv)\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n\n    return [round(m, 4) for m in mu_b]\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([2, 4, 6])\n# print(bayesian_posterior_mean(X, y, mu=1.0, V=2.0))\n``` \n\nThis code defines a function `bayesian_posterior_mean`, which calculates the posterior mean for the coefficients of a Bayesian linear regression model under an inverse-gamma prior for the noise variance. The example usage demonstrates how to execute the function with a sample dataset."}
{"task_id": 308, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(mel):\n        return 700 * (10**(mel / 2595) - 1)\n\n    # Step 1: Convert limits to Mel and create equally-spaced values on Mel axis\n    mel_min = hz_to_mel(min_freq)\n    mel_max = hz_to_mel(max_freq)\n    mels = np.linspace(mel_min, mel_max, n_filters + 2)\n    \n    # Step 2: Convert Mel values back to Hertz\n    freqs = mel_to_hz(mels)\n    \n    # Compute the DFT bin frequencies\n    dft_bins = np.linspace(0, fs / 2, N // 2 + 1)\n    \n    # Build the filterbank matrix\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n    \n    for i in range(n_filters):\n        # Find the points where the filter is non-zero, which are just the DFT bins.\n        # We'll use linear interpolation to find the corresponding Mel values.\n        left = freqs[i]\n        center = freqs[i + 1]\n        right = freqs[i + 2]\n        \n        # Find the DFT bin indices that correspond to left, center and right frequencies\n        left_idx = np.searchsorted(dft_bins, left)\n        center_idx = np.searchsorted(dft_bins, center)\n        right_idx = np.searchsorted(dft_bins, right)\n        \n        # The filter is triangular, so we find the slopes on the left and right\n        for k in range(N // 2 + 1):\n            if k > left_idx and k < center_idx:\n                filterbank[i, k] = (k - left_idx) / (center_idx - left_idx)\n            elif k > center_idx and k < right_idx:\n                filterbank[i, k] = (right_idx - k) / (right_idx - center_idx)\n    \n    # Normalize the filters\n    if normalize:\n        for i in range(n_filters):\n            filterbank[i] *= 2 / (freqs[i + 2] - freqs[i])\n    \n    # Convert to plain Python list and round to 4 decimal places\n    filterbank = filterbank.tolist()\n    for i, row in enumerate(filterbank):\n        filterbank[i] = [round(x, 4) for x in row]\n    \n    return filterbank\n```"}
{"task_id": 312, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    \n    if symmetric:\n        N = window_len - 1\n    else:\n        N = window_len\n    \n    coefficients = [0.35875, 0.48829, 0.14128, 0.01168]\n    \n    window = [coefficients[0] - coefficients[1] * np.cos(2 * np.pi * n / N) +\n              coefficients[2] * np.cos(4 * np.pi * n / N) -\n              coefficients[3] * np.cos(6 * np.pi * n / N) for n in range(window_len)]\n    \n    return [round(sample, 4) for sample in window]\n\n# Example usage\nprint(blackman_harris(5))  # Periodic variant\nprint(blackman_harris(5, symmetric=True))  # Symmetric variant\nprint(blackman_harris(0))  # Empty list\nprint(blackman_harris(1))  # Single element list\n```\n\nThis solution defines the `blackman_harris()` function which takes in the window length and a boolean indicating whether the symmetric or periodic form is desired. It includes the necessary special cases and returns the Blackman-Harris window as a list of floats rounded to four decimal places."}
{"task_id": 313, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef digamma(x):\n    \"\"\"Approximate the digamma function using recursion and asymptotic expansion.\"\"\"\n    # Recursively transform x to be at least 6\n    if x < 6:\n        return digamma(x + 1) - 1 / x\n    # Asymptotic expansion\n    return math.log(x) - 1/(2*x) - 1/(12*x**2) + 1/(120*x**4) - 1/(252*x**6)\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    # Convert gamma to np.ndarray if it is a list of lists\n    if isinstance(gamma, list):\n        gamma = np.array(gamma)\n    # Compute the expectation of the log of the t-th component\n    result = digamma(gamma[d, t]) - digamma(sum(gamma[d, :]))\n    # Round and return the result as a float\n    return round(result, 4)\n\n# Example usage\nif __name__ == \"__main__\":\n    gamma_example = np.array([\n        [1.0, 2.0, 3.0],\n        [2.0, 3.0, 4.0],\n        [3.0, 4.0, 5.0]\n    ])\n    expected_log = expected_log_dirichlet(gamma_example, 1, 1)\n    print(f\"Expected log Dirichlet component: {expected_log}\")\n```\n\nThis code implements the digamma function as described, and then applies it to compute the expectation of the log of a Dirichlet component, as detailed in your task. It is a self-contained script that rounds the result to 4 decimal places before returning it. The example usage section provides a clear demonstration of how to call the function with a sample Dirichlet parameter matrix and expected indices."}
{"task_id": 317, "completion_id": 0, "completion": "```python\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    # Prepare the debug string\n    header = '-' * 25 + ' DEBUG ' + '-' * 25 + '\\n'\n    footer = '\\n' + '-' * 23 + ' END DEBUG ' + '-' * 23\n    \n    # Extract the current and previous items\n    prev_ix = max(ix - 1, 0)\n    prev_pred, prev_label = params[prev_ix]\n    curr_pred, curr_label = params[ix]\n    \n    # Construct the string\n    debug_str = (header +\n                 f'Mine (prev) [{prev_label}]:\\n'\n                 f'{prev_pred}\\n\\n'\n                 f'Theirs (prev) [{prev_label}]:\\n'\n                 f'{golds[prev_label]}\\n\\n'\n                 f'Mine [{curr_label}]:\\n'\n                 f'{curr_pred}\\n'\n                 f'Theirs [{curr_label}]:\\n'\n                 f'{golds[curr_label]}{warn_str}\\n' +\n                 footer)\n    \n    return debug_str\n\n# Example usage\nparams_example = [(\"Hello there\", \"greeting\"), (\"Goodbye\", \"farewell\")]\ngolds_example = {\"greeting\": \"Hi!\", \"farewell\": \"Goodbye!\"}\nix_example = 1\nwarn_str_example = \" (WARNING: mismatch)\"\n\nprint(err_fmt(params_example, golds_example, ix_example, warn_str_example))\n```\n\nThis code block provides a function `err_fmt` that formats the given inputs into a structured debug report string as specified in the task. The example usage at the end demonstrates how to call the function and what the output would look like."}
{"task_id": 318, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    n_test_samples = X_test.shape[0]\n    weights = np.full(n_samples, 1/n_samples)\n    final_predictions = np.zeros(n_test_samples)\n\n    for _ in range(n_estimators):\n        # Find the best weak learner\n        best_feature, best_threshold, best_polarity, error, stump_prediction = find_best_stump(X_train, y_train, weights)\n        # Calculate stump weight (alpha)\n        alpha = 0.5 * math.log((1.0 - error) / max(error, 1e-10))\n        # Update sample weights\n        weights *= np.exp(-alpha * y_train * stump_prediction)\n        weights /= weights.sum()\n        # Update final prediction for X_test\n        test_stump_prediction = np.array([stump(x, best_feature, best_threshold, best_polarity) for x in X_test])\n        final_predictions += alpha * test_stump_prediction\n\n    # Return sign of final predictions as list\n    return list(map(lambda x: -1 if x < 0 else 1, final_predictions))\n\ndef find_best_stump(X, y, weights):\n    \"\"\"Find the best decision stump based on weighted error.\"\"\"\n    n_samples, n_features = X.shape\n    best_error = 1\n    best_feature = best_threshold = best_polarity = 0\n    best_stump_prediction = np.zeros(n_samples)\n    \n    for feature in range(n_features):\n        sorted_indices = np.argsort(X[:, feature])\n        for index in range(1, n_samples):\n            threshold = (X[sorted_indices[index], feature] + X[sorted_indices[index-1], feature]) / 2\n            for polarity in [-1, 1]:\n                predictions = polarity * np.sign(X[:, feature] - threshold)\n                error = sum(weights[y != predictions])\n                if error < best_error:\n                    best_error = error\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_polarity = polarity\n                    best_stump_prediction = predictions\n    \n    return best_feature, best_threshold, best_polarity, best_error, best_stump_prediction\n\ndef stump(x, feature, threshold, polarity):\n    \"\"\"Compute the prediction for a single data point x using the stump.\"\"\"\n    return polarity * (1 if x[feature] > threshold else -1)\n```\n\nThis implementation covers all the asked requirements, including training an AdaBoost classifier on a given training set with decision stumps as weak learners and predicting labels for a test set. It is done entirely without third-party machine-learning libraries, relying only on `math` and `numpy`."}
{"task_id": 329, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When True return only the non-negative frequency bins; when\n        False return all N bins.  Default is True.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when N or fs is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n\n    if positive_only:\n        # Calculating the center frequencies for positive bins\n        bin_centers = np.arange((N // 2) + 1) * (fs / N)\n    else:\n        # Calculating the center frequencies for all bins as per NumPy's fftfreq\n        bin_centers = np.fft.fftfreq(N, 1/fs)\n    \n    # Rounding the frequencies to 4 decimal places and converting to a list\n    return [round(freq, 4) for freq in bin_centers.tolist()]\n    \n# Example check function to verify the correctness of the solution\ndef check_solution():\n    positive_only_output = dft_bins(10, 100, True)\n    all_bars_output = dft_bins(10, 100, False)\n    print(\"Positive Only:\", positive_only_output)\n    print(\"All Frequency Bins:\", all_bars_output)\n\n# Running the check function\ncheck_solution()\n```\n\nThe provided function `dft_bins` calculates the centre frequencies for every DFT bin based on the number of DFT coefficients `N` and the sampling frequency `fs`. It correctly handles the requirement to either return only the non-negative frequency bins when `positive_only` is `True` or all `N` bins arranged according to NumPy's `fftfreq` when `positive_only` is `False`. The frequencies are rounded to the fourth decimal place as per the constraints."}
{"task_id": 331, "completion_id": 0, "completion": "Below is the Python code that completes the specified task. The function `oob_mse` computes the out-of-bag mean squared error based on the parameters provided in the task description.\n\n```python\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n\n    # Initialize an array to hold the out-of-bag average predictions\n    oob_predictions = np.zeros_like(y_true)\n\n    # Count how many out-of-bag predictions each sample has\n    oob_counts = np.sum(oob_mask, axis=1)\n\n    # Compute the out-of-bag average for each sample\n    for i in range(len(y_true)):\n        if oob_counts[i] > 0:\n            oob_predictions[i] = np.mean(predictions[i][oob_mask[i]])\n\n    # Compute squared errors only for samples with at least one out-of-bag prediction\n    valid_indices = np.where(oob_counts > 0)\n    if len(valid_indices[0]) == 0:\n        return -1\n\n    squared_errors = (y_true[valid_indices] - oob_predictions[valid_indices])**2\n    oob_mse_result = np.mean(squared_errors)\n\n    return round(oob_mse_result, 4)\n```\n\nThis code snippet accepts `y_true`, `predictions`, and `oob_mask` as input and computes the desired OOB-MSE according to the specification. It handles edge cases, such as when no samples have out-of-bag predictions, returning -1 as specified."}
{"task_id": 332, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nfrom typing import List\n\ndef build_fp_tree(transactions: List[List[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    # Step 1: Compute support for every item\n    item_counts = Counter(item for transaction in transactions for item in set(transaction))\n    \n    # Step 2: Filter items based on min_support\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_support}\n    \n    # Step 3: Create global ordering of items\n    ordered_items = sorted(frequent_items.items(), key=lambda x: (-x[1], x[0]))\n    \n    # Initialize the root of the FP-Tree\n    root = {\"support\": 0, \"children\": {}}\n    \n    # Step 4: Build the FP-Tree\n    for transaction in transactions:\n        # Filter and order transaction items\n        filtered_items = [item for item in transaction if item in frequent_items]\n        filtered_items.sort(key=lambda x: ordered_items.index((x, frequent_items[x])))\n        \n        # Walk through the tree and update nodes' support counts\n        current_node = root\n        for item in filtered_items:\n            if item not in current_node[\"children\"]:\n                current_node[\"children\"][item] = {\"support\": 0, \"children\": {}}\n            current_node = current_node[\"children\"][item]\n            current_node[\"support\"] += 1\n    \n    return root\n\n# Example usage:\ntransactions = [\n    ['a', 'b', 'c', 'd'],\n    ['a', 'b', 'c', 'd'],\n    ['a', 'b', 'c', 'd'],\n    ['b', 'c', 'e'],\n    ['b', 'c', 'e']\n]\nmin_support = 2\nfp_tree = build_fp_tree(transactions, min_support)\nprint(fp_tree)\n```\nThis code correctly implements the FP-Tree construction algorithm as described, using only nested dictionaries and basic Python functionality."}
{"task_id": 336, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", Y: list[list[int | float]] | \"np.ndarray\" | None = None, c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    \n    # Convert X and Y into NumPy arrays if they are not already\n    if not isinstance(X, np.ndarray):\n        X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    elif not isinstance(Y, np.ndarray):\n        Y = np.array(Y, dtype=float)\n    \n    # Check if the number of columns in X and Y match\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # To compute the linear kernel matrix using numpy's broadcasting and summing over the appropriate axis\n    K = np.dot(X, Y.T) + c0\n    \n    # Convert to a list of lists and round to 4 decimal places\n    K_list = [list(np.round(row, 4)) for row in K]\n    \n    return K_list\n\n# Test cases\nX = [[1, 2], [3, 4]]\nY = [[2, 3], [5, 6]]\nc0 = 1\n\n# When Y is not provided, it is equal to X\nprint(linear_kernel(X, c0=c0))  # Square symmetric matrix\nprint(linear_kernel(X, Y, c0=c0))  # Rectangular matrix\nprint(linear_kernel([[1, 2]], [[3, 4], [5, 6]], c0=0))  # Incompatible shapes\n```\n\nThis code implements the function `linear_kernel` as requested, where the parameters `X` and `Y` are expected to be a list of lists or NumPy arrays, and `c0` is the constant to be added to the dot product. The function returns the kernel matrix as a list of lists, rounded to 4 decimal places, or `-1` if `X` and `Y` have incompatible shapes. I also provided three test cases to illustrate different scenarios: a square symmetric matrix with an added constant, a rectangular matrix with a different `Y` and constant, and an example with different shapes for `X` and `Y`, which should return `-1`."}
{"task_id": 340, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n\n    # Update the first and second moments\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * grad ** 2\n\n    # Bias correction\n    m_hat = m_t / (1 - beta1 ** t)\n    v_hat = v_t / (1 - beta2 ** t)\n\n    # Update parameters\n    param_new = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n\n    # Convert to list and round to 8 decimal places\n    return (\n        np.round(param_new, 8).tolist(),\n        np.round(m_t, 8).tolist(),\n        np.round(v_t, 8).tolist()\n    )\n\n# Example usage:\nparam = np.array([1.0, 2.0])\ngrad = np.array([0.1, 0.2])\nt = 1\nm = np.array([0.0, 0.0])\nv = np.array([0.0, 0.0])\nupdated_param, new_m, new_v = adam_update(param, grad, t, m, v)\nprint(updated_param, new_m, new_v)\n```\n\nThis code snippet provides the implementation for performing a single update step using the Adam optimisation algorithm. This implementation respects the specified requirements, such as handling multi-dimensional parameters and returning the updated parameters and moment estimates as Python lists rounded to 8 decimal places."}
{"task_id": 343, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                         rewards: list[float] | np.ndarray,\n                         retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    num_retain = int(retain_prcnt * theta_samples.shape[0])\n    # Sort samples by rewards in descending order and retain top-ranked samples\n    sorted_indices = np.argsort(rewards)[::-1][:num_retain]\n    retained_samples = theta_samples[sorted_indices]\n    \n    # Compute mean and variance of the retained samples\n    mean = np.mean(retained_samples, axis=0).tolist()\n    variance = np.var(retained_samples, axis=0).tolist()\n    \n    # Round to four decimal places\n    mean = [round(x, 4) for x in mean]\n    variance = [round(x, 4) for x in variance]\n    \n    return mean, variance\n\n# Example usage:\ntheta_samples = np.random.rand(10, 5)  # 10 samples, each of 5 dimensions\nrewards = np.random.rand(10)  # Random rewards for each sample\nretain_prcnt = 0.5  # Keep the top 50% of samples\n\nmean, variance = cross_entropy_update(theta_samples, rewards, retain_prcnt)\nprint(\"Mean:\", mean)\nprint(\"Variance:\", variance)\n```\nThis script defines the function `cross_entropy_update`, which implements the core numerical step of the Cross-Entropy Method (CEM) to find the new mean and variance for the policy parameters using the best scoring parameter vectors by a given reward metric."}
{"task_id": 353, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    # If the labels are empty, return 0.0 as specified.\n    if not labels:\n        return 0.0\n    \n    # Count the occurrences of each label.\n    label_counts = Counter(labels)\n    total_labels = len(labels)\n\n    # Compute the entropy\n    entropy_value = 0.0\n    for count in label_counts.values():\n        probability = count / total_labels\n        entropy_value -= probability * math.log2(probability)\n    \n    # Return the entropy value rounded to 5 decimal places.\n    return round(entropy_value, 5)\n\n# Example usage:\n# print(entropy([1, 1, 0, 1, 0]))\n# print(entropy([]))\n# print(entropy(['A', 'B', 'C', 'A', 'B', 'B']))\n```"}
{"task_id": 354, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kr, kc, _, out_ch = W.shape\n\n    # Compute effective kernel size considering dilation\n    if dilation > 0:\n        kr = 1 + dilation * (kr - 1)\n        kc = 1 + dilation * (kc - 1)\n\n    # Determine padding size\n    if type(pad) == int:\n        pr1, pr2, pc1, pc2 = pad, pad, pad, pad\n    elif len(pad) == 2:\n        pr1, pr2, pc1, pc2 = pad[0], pad[0], pad[1], pad[1]\n    elif len(pad) == 4:\n        pr1, pr2, pc1, pc2 = pad\n    elif pad == 'same':\n        pr1, pr2 = (kr - 1) // 2, kr // 2\n        pc1, pc2 = (kc - 1) // 2, kc // 2\n    else:\n        raise ValueError(\"Invalid padding specification\")\n\n    # Pad the input\n    X_padded = np.pad(X, ((0, 0), (pr1, pr2), (pc1, pc2), (0, 0)), mode='constant', constant_values=0)\n\n    # Output dimensions\n    out_rows = (in_rows + pr1 + pr2 - kr) // stride + 1\n    out_cols = (in_cols + pc1 + pc2 - kc) // stride + 1\n\n    # Initialize output array\n    Y = np.zeros((n_ex, out_rows, out_cols, out_ch))\n\n    # Perform im2col + GEMM\n    for i in range(out_rows):\n        for j in range(out_cols):\n            for k in range(out_ch):\n                window = X_padded[:, i*stride:i*stride+kr, j*stride:j*stride+kc, :]\n                W_dilated = np.zeros((kr, kc, in_ch))\n                if dilation > 0:\n                    # Apply dilation\n                    for mi in range(kr):\n                        for mj in range(kc):\n                            if mi % (dilation + 1) == 0 and mj % (dilation + 1) == 0:\n                                W_dilated[mi, mj, :] = W[mi // (dilation + 1), mj // (dilation + 1), :, k]\n                else:\n                    W_dilated = W[:, :, :, k]\n                Y[:, i, j, k] = np.sum(window * W_dilated, axis=(1, 2, 3))\n\n    return Y.tolist()\n```"}
{"task_id": 355, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    if n_components < 1:\n        raise ValueError(\"n_components must be \u22651\")\n    \n    # Step 1: Standardize the data by subtracting the feature-wise mean\n    centered_data = data - np.mean(data, axis=0)\n    \n    # Step 2: Obtain principal directions based on solver\n    if solver == \"svd\":\n        _, _, Vt = np.linalg.svd(centered_data, full_matrices=False)\n        principal_components = Vt\n    elif solver == \"eigen\":\n        cov_matrix = np.cov(centered_data, rowvar=False, ddof=1)\n        eigenvalues, eigenvectors = np.linalg.eigh(cov_matrix)\n        # Sort eigenvectors by corresponding eigenvalues in descending order\n        sorted_indices = np.argsort(eigenvalues)[::-1]\n        principal_components = eigenvectors[:, sorted_indices]\n    else:\n        raise ValueError(\"solver must be 'svd' or 'eigen'\")\n    \n    # Step 3: Sort and keep the first n_components\n    if n_components > principal_components.shape[1]:\n        n_components = principal_components.shape[1]\n    principal_components = principal_components[:, :n_components]\n    \n    # Step 4: Make the sign of every kept direction deterministic\n    for i in range(principal_components.shape[1]):\n        if principal_components[0, i] < 0:\n            principal_components[:, i] *= -1\n    \n    # Step 5: Project the centred data onto the retained directions\n    scores = centered_data @ principal_components\n    \n    # Calculate explained variance ratio\n    if solver == \"svd\":\n        explained_variance = (_ ** 2) / (data.shape[0] - 1)\n    else:  # eigen\n        explained_variance = eigenvalues[sorted_indices][:n_components]\n    total_variance = np.sum(explained_variance)\n    explained_variance_ratio = [var / total_variance for var in explained_variance]\n    \n    # Round and convert to Python lists\n    scores = scores.round(4).tolist()\n    explained_variance_ratio = [round(ratio, 4) for ratio in explained_variance_ratio]\n    \n    return scores, explained_variance_ratio\n```\n\nPlease notice there is a missing block under the SVD to calculate explained variance, you may need to assign the singular values to a variable and use it to compute the explained variance ratio."}
{"task_id": 356, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # Return the index of the largest probability in the leaf's value\n        return np.argmax(leaf.value)\n    else:\n        # Return the scalar mean stored in the leaf's value\n        return leaf.value\n\n# Example usage:\n# Classification leaf\nclassification_leaf = Leaf([0.1, 0.5, 0.4])\nprint(leaf_predict(classification_leaf, True))  # Should print the index of the highest probability, which is 1\n\n# Regression leaf\nregression_leaf = Leaf(15.2)\nprint(leaf_predict(regression_leaf, False))  # Should print the raw scalar value, which is 15.2\n```"}
{"task_id": 357, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    if K == 1:\n        centroid = np.mean(data, axis=0)\n        return [centroid.tolist()]\n    \n    n_samples, n_features = data.shape\n    centroids = data[:K].copy()\n    \n    for _ in range(max_iters):\n        # Assign each sample to the nearest centroid\n        labels = np.array([np.argmin([np.linalg.norm(x - c) for c in centroids]) for x in data])\n        \n        # Recalculate centroids\n        new_centroids = np.array([data[labels == k].mean(axis=0) if (labels == k).any() else centroids[k] for k in range(K)])\n        \n        # Check for convergence\n        if np.all(np.abs(new_centroids - centroids) < 1e-6):\n            break\n        \n        centroids = new_centroids\n    \n    # Sort and round the centroids\n    centroids = np.round(centroids, decimals=4)\n    sorted_centroids = sorted(centroids.tolist())\n    \n    return sorted_centroids\n\n# Example data\ndata = np.array([[1, 1],\n                 [1, 2],\n                 [2, 1],\n                 [8, 8],\n                 [9, 8],\n                 [8, 9]])\nK = 2\n\n# Call the kmeans function\ncentroids = kmeans(data, K)\nprint(centroids)\n```\n\nThe provided script defines the `kmeans` function, which performs the K-means clustering algorithm according to the specified task parameters. The function accepts a numpy array `data`, an integer `K` for the number of clusters, and an optional maximum number of iterations `max_iters`. After running the algorithm, the function returns the centroids of the clusters as a sorted list of lists, with each value rounded to four decimal places. The example at the end demonstrates how to call the function and print its output."}
{"task_id": 362, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | np.ndarray) -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert input data to a numpy array\n    data_array = np.array(data, dtype=float)\n    \n    # Compute the sum of every row\n    row_sums = data_array.sum(axis=1)\n    \n    # If any row sums to 0, return -1\n    if np.any(row_sums == 0):\n        return -1\n    \n    # Otherwise, divide each element by its row's sum\n    stochastic_matrix = data_array / row_sums[:, np.newaxis]\n    \n    # Round values to 4 decimal places\n    stochastic_matrix = np.round(stochastic_matrix, decimals=4)\n    \n    # Convert the numpy array back to a list of lists and return\n    return stochastic_matrix.tolist()\n\n# Check function with provided data points\ndef check_result():\n    # Test with a valid matrix\n    data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    expected = [[0.1667, 0.3333, 0.5000], [0.2667, 0.3333, 0.4000], [0.2963, 0.3265, 0.3772]]\n    assert row_stochastic_matrix(data) == expected, \"Test case 1 failed.\"\n    \n    # Test with a matrix that has a zero sum row\n    data = [[1, 2, 3], [0, 0, 0], [7, 8, 9]]\n    assert row_stochastic_matrix(data) == -1, \"Test case 2 failed.\"\n\ncheck_result()\n```\nThis code snippet defines the function `row_stochastic_matrix` as requested which transforms a given 2-D list or NumPy array into a row-stochastic matrix according to the criteria given. The checks at the end ensure the function works for both valid cases and cases where normalisation is impossible due to a row summing to 0."}
{"task_id": 363, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    def check_continuous(space: Space) -> bool:\n        \"\"\"Check if a space or all subspaces are Box.\"\"\"\n        if isinstance(space, (Tuple, Dict)):\n            subspaces = space.spaces.values() if isinstance(space, Dict) else space.spaces\n            return all(isinstance(sub, Box) for sub in subspaces)\n        return isinstance(space, Box)\n\n    cont_action = check_continuous(env.action_space) if tuple_action else isinstance(env.action_space, Box)\n    cont_obs = check_continuous(env.observation_space) if tuple_obs else isinstance(env.observation_space, Box)\n\n    return (cont_action, cont_obs)\n```"}
{"task_id": 369, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    # Calculate the number of updates (trees)\n    num_trees = len(updates)\n    \n    # Initialize the running prediction array with zeros\n    if regression:\n        running_pred = np.zeros_like(updates[0], dtype=float)\n    else:\n        running_pred = np.zeros_like(updates[0], dtype=float)\n    \n    # Aggregate the updates\n    for update in updates:\n        running_pred -= learning_rate * update\n    \n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        # Apply softmax function to convert logits to probabilities\n        exp_vars = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        probabilities = exp_vars / np.sum(exp_vars, axis=1, keepdims=True)\n        # Return the indices of the maximum probability as class predictions\n        return np.argmax(probabilities, axis=1)\n\n# Example usage\nif __name__ == \"__main__\":\n    updates_reg = [np.array([1.0, 2.0, 3.0]), np.array([0.5, 0.5, 0.5]), np.array([0.1, 0.2, 0.3])]\n    updates_cls = [np.array([[0.1, 0.2], [0.3, 0.4]]), np.array([[0.2, 0.1], [0.4, 0.3]]), np.array([[0.1, 0.2], [0.3, 0.4]])]\n    \n    learning_rate = 0.1\n    regression = True\n    \n    print(gradient_boosting_predict(updates_reg, learning_rate, regression))  # Regression example\n    \n    regression = False\n    print(gradient_boosting_predict(updates_cls, learning_rate, regression))  # Classification example\n```"}
{"task_id": 371, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, _, out_channels = W.shape\n    effective_kernel = kernel_width + (kernel_width - 1) * (dilation)\n\n    if isinstance(pad, str) and pad == 'same':\n        out_len = int(np.ceil(signal_length / stride))\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    elif isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple):\n        p_left, p_right = pad\n    else:\n        raise ValueError(\"Invalid padding type\")\n\n    padded_x = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    output_length = ((signal_length + p_left + p_right - effective_kernel) // stride) + 1\n\n    out = np.zeros((n_examples, output_length, out_channels))\n\n    for i in range(n_examples):\n        for j in range(output_length):\n            for k in range(out_channels):\n                start = j * stride\n                sliced = padded_x[i, start:start + effective_kernel:dilation + 1, :]\n                out[i, j, k] = np.sum(sliced * W[:, :, k])\n\n    return out.tolist()\n\n# Example Usage\nX = np.random.rand(2, 10, 3)  # 2 examples, 10 length signals, 3 input channels\nW = np.random.rand(3, 3, 2)   # 3x3 weight kernel, 2 output channels\nstride = 2\npad = 1\ndilation = 1\n\noutput = conv1D(X, W, stride, pad, dilation)\nprint(output)\n```\nIn this solution, the function `conv1D` implements the 1-D cross-correlation with the specified functionality. It uses numpy for efficient computations and handles padding, dilation, and stride as described in the problem statement. The output is returned as a list, as required."}
{"task_id": 373, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gini(y: list[int] | np.ndarray) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    # Convert to numpy array for easier manipulation\n    y = np.array(y)\n    \n    # Handle empty input\n    if len(y) == 0:\n        return 0.0\n    \n    # Calculate the number of samples\n    N = len(y)\n    \n    # Find all unique labels/classes in y\n    classes = np.unique(y)\n    C = len(classes)\n\n    # Compute the sum of squared probabilities\n    p_squared_sum = 0.0\n    for c in classes:\n        n_c = np.sum(y == c)  # Count the number of samples for class c\n        p_c = n_c / N  # Probability of class c\n        p_squared_sum += p_c ** 2  # Add the square of the probability to the sum\n    \n    # Compute Gini impurity\n    gini_impurity = 1 - p_squared_sum\n    \n    # Return the result rounded to 4 decimal places\n    return round(gini_impurity, 4)\n```"}
{"task_id": 374, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\"\"\"\n    # Check if the input sizes are consistent\n    m, n = X.shape\n    if m != y.shape[0]:\n        return -1\n    \n    # Initialize parameters\n    theta = np.zeros(n)\n    b = 0\n    \n    # Gradient descent\n    for _ in range(n_iterations):\n        # Predicted values\n        y_pred = np.dot(X, theta) + b\n        \n        # Error\n        error = y_pred - y\n        \n        # Gradients\n        dw = 2/m * np.dot(X.T, error)\n        db = 2/m * np.sum(error)\n        \n        # Update parameters\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    \n    # Rounding to the nearest 4th decimal\n    return (list(np.round(theta, 4)), np.round(b, 4))\n\n# Example usage\nif __name__ == \"__main__\":\n    # Generate some example data\n    X = np.random.rand(100, 3)\n    y = np.random.rand(100)\n    \n    # Run the gradient descent\n    theta, b = linear_regression_gd(X, y)\n    print(\"Weights:\", theta)\n    print(\"Bias:\", b)\n```"}
{"task_id": 376, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n    \n    A matrix is symmetric if it is square and equal to its own transpose.\n    \n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n    \n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Convert the list of lists into a NumPy array\n    X_np = np.array(X)\n    \n    # Check if the matrix is square\n    if X_np.shape[0] != X_np.shape[1]:\n        return False\n    \n    # Check if the matrix is equal to its transpose within a tolerance\n    return np.allclose(X_np, X_np.T, atol=1e-8)\n\n# Test suite\ntest_data = [\n    ([[1, 2], [2, 3]], True),\n    ([[1, 2.000000001], [2, 3]], True),  # Checking precision\n    ([[1, 2], [3, 4]], False),\n    ([[1, 2], [2]], False),  # Not a square matrix\n]\n\n# Run tests\nfor X, expected in test_data:\n    result = is_symmetric(X)\n    assert result == expected, f\"Expected {expected}, got {result} for matrix {X}\"\nprint(\"All tests passed!\")\n```\n\nThis script defines the `is_symmetric` function, which checks if a given 2-D array (list of lists) is symmetric considering the floating-point precision issues. It then runs a series of tests to verify the correctness of the function."}
{"task_id": 377, "completion_id": 0, "completion": "Below is a self-contained Python script that solves the specified task:\n\n```python\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Computes the negative gradient for the logistic (binomial deviance) loss function\n    in the context of gradient boosting for binary classification.\n    \n    Args:\n    y (list): A list of binary class labels (0 or 1).\n    f (list): A list of current prediction scores (floats).\n    \n    Returns:\n    list: A list of negative gradients rounded to four decimal places.\n    If the label list contains values other than 0 or 1, the function returns -1.\n    \"\"\"\n    # Check if y contains values other than 0 or 1\n    if any(label not in [0, 1] for label in y):\n        return -1\n    \n    y_prime = np.array(y) * 2 - 1\n    f_array = np.array(f)\n    exp_values = np.exp(y_prime * f_array)\n    \n    # Calculate the negative gradient\n    gradient = y_prime / (1 + exp_values)\n    rounded_gradients = [round(value, 4) for value in gradient]\n    \n    return rounded_gradients\n\n# Example usage:\ny = [0, 1, 0, 1]\nf = [0.1, -0.1, -0.2, 0.2]\nprint(logistic_negative_gradient(y, f))\n```\n\nThis script defines a function `logistic_negative_gradient` that takes two lists, `y` and `f`, as input, checks for valid label values, computes the negative gradient using the logistic loss function, and returns the results rounded to four decimal places."}
{"task_id": 380, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    # Constants from SELU paper\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n    \n    # Convert input to numpy array to handle scalars and arrays uniformly\n    x = np.atleast_1d(x)\n    \n    # Compute SELU depending on the 'order' parameter\n    if order == 0:\n        selu_result = np.where(x > 0, scale * x, scale * alpha * (np.exp(x) - 1))\n    elif order == 1:\n        selu_result = np.where(x > 0, scale, scale * alpha * np.exp(x))\n    elif order == 2:\n        selu_result = np.where(x > 0, 0, scale * alpha * np.exp(x))\n    else:\n        raise ValueError(\"Order must be 0, 1, or 2.\")\n    \n    # Round results to 4 decimals and convert to list\n    rounded_result = np.round(selu_result, 4).tolist()\n    \n    # Return scalar if input was a scalar, else list\n    return rounded_result if isinstance(x, np.ndarray) else rounded_result[0]\n    \n# Example usage\nprint(selu(-1.23, 0))           # SELU value\nprint(selu(-1.23, 1))           # First derivative\nprint(selu([1, 2, 3], 0))       # SELU for array\nprint(selu([1, 2, 3], 2))       # Second derivative for array\n```\n\nThis implementation of the `selu` function takes an input value `x` and an optional `order` parameter, which specifies whether the user wants to compute the SELU activation function (order 0), its first derivative (order 1), or its second derivative (order 2). The function uses NumPy for efficient element-wise operations and handling of both scalars and arrays. The results are rounded to 4 decimal places and returned as a Python list (or as a scalar, if the input was a scalar)."}
{"task_id": 387, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n    \n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n    \n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(x)\n    predictions = np.full(n_samples, np.mean(y))\n\n    for _ in range(n_estimators):\n        gradients = y - predictions\n        idx = np.argsort(x)\n        sorted_x = x[idx]\n        sorted_gradients = gradients[idx]\n        \n        best_t = None\n        best_error = np.inf\n        best_left_mean = 0\n        best_right_mean = 0\n        \n        for i in range(n_samples - 1):\n            if sorted_x[i] != sorted_x[i+1]:  # Check for different consecutive x values\n                mid_point = (sorted_x[i] + sorted_x[i+1]) / 2.0\n                left_mask = sorted_x <= mid_point\n                right_mask = sorted_x > mid_point\n\n                left_mean = np.mean(sorted_gradients[left_mask])\n                right_mean = np.mean(sorted_gradients[right_mask])\n\n                error = np.sum(left_mask * (sorted_gradients - left_mean) ** 2) + np.sum(right_mask * (sorted_gradients - right_mean) ** 2)\n\n                if error < best_error:\n                    best_error = error\n                    best_t = mid_point\n                    best_left_mean = left_mean\n                    best_right_mean = right_mean\n            \n        # If no splits were valid (all x values identical), predict the global mean residual\n        if best_t is None:\n            update = np.mean(gradients)\n        else:\n            update = np.where(x <= best_t, best_left_mean, best_right_mean)\n        \n        predictions += learning_rate * update\n\n    return np.round(predictions.tolist(), 4)\n\n# Example usage:\nx = [1, 2, 3, 4, 5]\ny = [1, 2, 3, 2, 1]\npreds = gradient_boosting_1d(x, y, n_estimators=10, learning_rate=0.1)\nprint(preds)\n```\nThis script implements the specified Gradient Boosting with One-Dimensional Stumps. It uses only `numpy` and does not utilize any external machine learning libraries as per the instruction."}
{"task_id": 394, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-8\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    \n    Eg = rho * Eg + (1 - rho) * np.square(grad)\n    w = w - learning_rate * grad / (np.sqrt(Eg) + epsilon)\n    \n    # Round and convert to regular Python lists\n    w_next = np.round(w, decimals=4).tolist()\n    Eg_next = np.round(Eg, decimals=4).tolist()\n    \n    return w_next, Eg_next\n\n# Example usage\nw = np.array([1.0, 2.0, 3.0])\ngrad = np.array([0.1, 0.2, 0.3])\nEg = np.array([0.01, 0.02, 0.03])\n\nw_next, Eg_next = rmsprop_update(w, grad, Eg)\nprint(w_next)  # Expected output for parameters after rounding and conversion\nprint(Eg_next)  # Expected output for the new running average after rounding and conversion\n```"}
{"task_id": 398, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)  # Convert input to a numpy array for vectorized operations\n\n    if derivative:\n        # Compute the derivative of ELU\n        gradient = np.where(x >= 0, 1, alpha * np.exp(x) + alpha)\n        return [round(float(i), 4) for i in gradient]\n    else:\n        # Compute the ELU activation\n        activation = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n        return [round(float(i), 4) for i in activation]\n\n# Check function\ndef check_elu():\n    sample_x = [-2.0, -1.0, 0.0, 1.0, 2.0]\n    # Expected ELU values for example input\n    expected_elu = [-0.2642, -0.6321, 0.0000, 1.0000, 2.0000]\n    # Expected derivative values for example input\n    expected_derivative = [0.0916, 0.2642, 1.0000, 1.0000, 1.0000]\n    \n    assert elu(sample_x) == expected_elu, \"ELU values do not match expected values\"\n    assert elu(sample_x, derivative=True) == expected_derivative, \"Derivative values do not match expected values\"\n    \n    print(\"All checks passed.\")\n\ncheck_elu()\n```\n\nThis solution ensures the functions properly compute both the ELU activation and its gradient, returning results as a Python list of floats, rounded to 4 decimal places. The sample check function helps validate the implementation against expected values."}
{"task_id": 411, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    def extract_stats(data_list):\n        # Check if any element is an iterable (list, tuple, ndarray)\n        tuple_data = any(isinstance(el, (list, tuple, np.ndarray)) for el in data_list)\n        # Determine if data is multidimensional\n        multidim_data = tuple_data and len(data_list[0]) > 1\n        # Determine if data is continuous\n        continuous_data = any(isinstance(item, float) and not item.is_integer() for item in data_list if isinstance(item, (int, float)))\n        # Flatten data if multidimensional\n        flattened_data = [item if not isinstance(item, (list, tuple, np.ndarray)) else item for item in data_list]\n        flattened_data = [item for sublist in flattened_data for item in sublist] if multidim_data else flattened_data\n        # Determine unique values and count in each dimension\n        n_dims = len(data_list[0]) if multidim_data else 1\n        unique_counts = [len({flattened_data[i] for i, _ in enumerate(dim)}) for dim in range(n_dims)]\n        dim_ids = [sorted(list({flattened_data[i] for i, _ in enumerate(dim)})) for dim in range(n_dims)]\n        # Return dimensionality\n        dim = len(data_list[0]) if tuple_data else 1\n        return {\n            'tuple_data': tuple_data,\n            'multidim_data': multidim_data,\n            'continuous_data': continuous_data,\n            'n_data_per_dim': unique_counts,\n            'data_dim': dim,\n            'data_ids': dim_ids\n        }\n\n    action_stats = extract_stats(actions)\n    observation_stats = extract_stats(observations)\n\n    # Extracting necessary values for the return dictionary\n    stats_dict = {\n        'tuple_actions': action_stats['tuple_data'],\n        'tuple_observations': observation_stats['tuple_data'],\n        'multidim_actions': action_stats['multidim_data'],\n        'multidim_observations': observation_stats['multidim_data'],\n        'continuous_actions': action_stats['continuous_data'],\n        'continuous_observations': observation_stats['continuous_data'],\n        'n_actions_per_dim': action_stats['n_data_per_dim'],\n        'action_dim': action_stats['data_dim'],\n        'n_obs_per_dim': observation_stats['n_data_per_dim'],\n        'obs_dim': observation_stats['data_dim'],\n        'action_ids': action_stats['data_ids'],\n        'obs_ids': observation_stats['data_ids']\n    }\n    return stats_dict\n\n# Example usage\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]\n\n# Output check\noutput = env_stats(actions, observations)\nprint(output)\n```"}
{"task_id": 413, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n    \n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n    \n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    def mse(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n\n    def split_mse(data, val):\n        left, right = data[data[:, 0] <= val][:, 1:], data[data[:, 0] > val][:, 1:]\n        mse_left = mse(left[:, 0], np.mean(left[:, 0])) if len(left) > 0 else 0\n        mse_right = mse(right[:, 0], np.mean(right[:, 0])) if len(right) > 0 else 0\n        return mse_left + mse_right, (np.mean(left[:, 0]) if len(left) > 0 else 0, np.mean(right[:, 0]) if len(right) > 0 else 0)\n\n    def find_best_split(data):\n        best_split = None, float('inf'), None, None\n        for i in range(data.shape[1] - 1):\n            for val in np.unique(data[:, i]):\n                mse_val, (left_pred, right_pred) = split_mse(np.hstack((data[:, [i]], data[:, -1:])), val)\n                if mse_val < best_split[2]:\n                    best_split = i, val, mse_val, (left_pred, right_pred)\n        return best_split\n\n    def build_tree(data, depth):\n        if depth == max_depth or len(data) <= 1:\n            return np.mean(data[:, -1])\n        best_split = find_best_split(data)\n        left = data[data[:, best_split[0]] <= best_split[1]][:, -1]\n        right = data[data[:, best_split[0]] > best_split[1]][:, -1]\n        return {\n            'feature': best_split[0],\n            'value': best_split[1],\n            'left': build_tree(left, depth + 1),\n            'right': build_tree(right, depth + 1)\n        }\n\n    def predict_tree(tree, x):\n        if isinstance(tree, np.ndarray) or isinstance(tree, float):\n            return tree\n        if x[tree['feature']] <= tree['value']:\n            return predict_tree(tree['left'], x)\n        return predict_tree(tree['right'], x)\n\n    predictions = np.full(len(y_train), np.mean(y_train))\n    for _ in range(n_estimators):\n        residuals = y_train - predictions\n        tree = build_tree(np.hstack((X_train, residuals[:, None])), 0)\n        predictions += learning_rate * np.array([predict_tree(tree, x) for x in X_train])\n    \n    final_predictions = np.mean(y_train) + np.array([sum(learning_rate * predict_tree(build_tree(np.hstack((X_train, (y_train - np.mean(y_train))[:, None])), 0), x) for _ in range(n_estimators)) for x in X_test])\n    return [round(float(pred), 4) for pred in final_predictions.tolist()]\n\n# Example usage (you can modify this to test the function):\nX_train = np.array([[1, 1], [1, 2], [2, 2], [2, 3]])\ny_train = np.array([1, 2, 1.5, 3])\nX_test = np.array([[1, 3], [2, 5], [3, 5]])\npredictions = gbdt_regression(X_train, y_train, X_test)\nprint(predictions)\n```\nThis code provides a simplified implementation of a GBDT regressor from scratch. It builds CART regression trees based on the mean squared error, and iteratively updates predictions by combining multiple weak learners into a strong predictor, as described in the task requirement. The result is then rounded to four decimal places and returned in a list."}
{"task_id": 416, "completion_id": 0, "completion": "Here is the self-contained Python script fulfilling the provided task:\n\n```python\nimport numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Computes the Probability Density Function (PDF) for each data point in X under\n    the multivariate Gaussian distribution defined by its mean and covariance matrix.\n    \n    Parameters:\n    X (NumPy ndarray): shape (n_samples, n_features), the data points for which the PDF values must be evaluated.\n    mean (array-like): shape (n_features,), the mean vector of the distribution.\n    cov (array-like): shape (n_features, n_features), the covariance matrix of the distribution.\n    \n    Returns:\n    Python list with PDF values for each data point in X, rounded to four decimal places.\n    \"\"\"\n    # Convert inputs to NumPy arrays to ensure consistent data handling\n    X = np.array(X)\n    mean = np.array(mean)\n    cov = np.array(cov)\n    \n    # Ensure X is a 2D array: treat 1D arrays as (n_samples, 1)\n    if len(X.shape) == 1:\n        X = X[:, np.newaxis]\n    \n    # Store the number of features for later use\n    d = len(mean)\n    \n    # Compute the determinant of the covariance matrix\n    det = np.linalg.det(cov)\n    \n    # Compute the inverse of the covariance matrix\n    inv_cov = np.linalg.inv(cov)\n    \n    # Compute the normalization factor (1/sqrt((2*pi)^d*det(Sigma)))\n    norm_factor = 1.0 / math.sqrt((2 * math.pi) ** d * det)\n    \n    # Initialize the list to store the PDF values\n    pdf_values = []\n    \n    # Compute the PDF value for each data point\n    for x in X:\n        # Compute the exponent term\n        exp_term = -0.5 * (x - mean).T @ inv_cov @ (x - mean)\n        \n        # Compute the PDF value for the current data point\n        pdf_value = norm_factor * math.exp(exp_term)\n        \n        # Append the PDF value, rounded to 4 decimal places, to the list\n        pdf_values.append(round(pdf_value, 4))\n    \n    return pdf_values\n\n# Example usage\nX = [[1, 2], [3, 4]]\nmean = [0, 0]\ncov = [[1, 0.5], [0.5, 1]]\nprint(multivariate_gaussian_pdf(X, mean, cov))\n```\n\nThis Python script creates a function to compute the PDF of a multivariate Gaussian distribution for a set of input data points. The function handles the input dimensions gracefully and ensures that the computed PDF values are returned with sufficient precision."}
{"task_id": 419, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        # Add intercept column to X and X_new\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n    \n    # Ensure V is a matrix\n    n_features = X.shape[1]\n    if V is None:\n        V = np.eye(n_features)\n    elif np.isscalar(V):\n        V = V * np.eye(n_features)\n    elif V.shape == (n_features,):\n        V = np.diag(V)\n    \n    # Ensure mu is a vector\n    if np.isscalar(mu):\n        mu = mu * np.ones(n_features)\n    \n    # Compute posterior covariance\n    Sigma_p = np.linalg.inv(np.linalg.inv(V) + X.T @ X)\n    # Compute posterior mean\n    mu_p = Sigma_p @ (np.linalg.inv(V) @ mu + X.T @ y)\n    \n    # Predictions for new data\n    y_pred = X_new @ mu_p\n    return [round(pred, 4) for pred in y_pred]\n\n# Example usage:\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([2, 4, 6])\nX_new = np.array([[7, 8], [9, 10]])\nmu = [1, 2, 3]\nV = 1.0\nresult = bayesian_linear_regression_pred(X, y, X_new, mu, fit_intercept=True)\nprint(result)  # This will output the MAP predictive means for X_new.\n```\nThe given script includes a function `bayesian_linear_regression_pred` which computes the Maximum A Posteriori (MAP) estimate for bayesian linear regression problems. The function handles the addition of an intercept term, converts and processes the covariance `V` and the mean `mu` of the prior distribution, calculates the posterior mean and covariance, and predicts the MAP predictive means for new samples. The predictions are rounded to four decimal places and returned as a Python list."}
{"task_id": 423, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"\n    Calculate the Root Mean Squared Logarithmic Error (RMSLE) between two lists of non-negative numbers.\n\n    :param actual: A list of non-negative floats representing the actual values.\n    :param predicted: A list of non-negative floats representing the predicted values.\n    :return: The RMSLE as a float rounded to four decimal places, or -1 if inputs are invalid.\n    \"\"\"\n    # Input validation\n    if len(actual) != len(predicted) or not all(isinstance(x, (int, float)) and x >= 0 for x in actual + predicted):\n        return -1\n\n    # Calculate RMSLE\n    diff = np.log1p(predicted) - np.log1p(actual)\n    rmsle = np.sqrt(np.mean(diff ** 2))\n    \n    # Return the result rounded to 4 decimal places\n    return round(rmsle, 4)\n\n# Example check function to verify the correctness of the generated function\ndef check(actual: list[float], predicted: list[float]):\n    print(f\"Actual: {actual}\")\n    print(f\"Predicted: {predicted}\")\n    print(f\"RMSLE: {root_mean_squared_log_error(actual, predicted)}\")\n\n# Test cases\ncheck([3, 5, 2, 7, 10], [2.5, 5, 4, 8, 11])\ncheck([1, 2, 3], [1.5, 2.5, 3.5])\ncheck([1, 2, 3], [1, 2, -1])  # Should return -1 due to negative value\ncheck([1, 2], [1])  # Should return -1 due to different lengths\n```\n\nThis script defines a function `root_mean_squared_log_error` that implements the RMSLE metric as described, including validation for non-negative numbers and equal length of input lists, and rounds the output to four decimal places. Additionally, a `check` function is provided to test the implementation against a few scenarios."}
{"task_id": 428, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero. When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    \n    if not symmetric:\n        window_len += 1  # For periodic window, add one to make it symmetric first\n    \n    hann_window = [\n        0.5 - 0.5 * math.cos(2 * math.pi * n / (window_len - 1))\n        for n in range(window_len)\n    ]\n    \n    if not symmetric:\n        hann_window.pop()  # Remove the last element for periodic window\n    \n    return [round(val, 4) for val in hann_window]\n\n# A function to check the correctness of the generated Hann window function\ndef check_hann():\n    print(hann(0))  # Should be []\n    print(hann(1))  # Should be [1.0]\n    print(hann(5, symmetric=True))  # Example output [0.0, 0.3455, 1.0, 0.3455, 0.0]\n    print(hann(5, symmetric=False)) # Example output [0.0, 0.3455, 1.0, 0.3455]\n\n# Call the check function to print some test cases\ncheck_hann()\n```\n\nThis code block includes a `check_hann` function to quickly test the functionality with a few examples. The `hann` function fulfills the task requirements and returns the coefficients of the Hann window rounded to four decimal places as specified."}
{"task_id": 433, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:  # Convolutional layer\n        in_channels, out_channels, kernel_height, kernel_width = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        fan_in, fan_out = shape[:2]\n    \n    return float(fan_in), float(fan_out)\n\n# Test cases to verify the correctness of the code\nassert glorot_fan((64, 3, 3, 3)) == (27.0, 54.0), \"Test case 1 failed\"\nassert glorot_fan((128, 64)) == (128.0, 64.0), \"Test case 2 failed\"\nassert glorot_fan((10, 20, 30)) == (10.0, 20.0), \"Test case 3 failed\"\nprint(\"All test cases passed!\")\n```\n\nThis function correctly calculates the *fan-in* and *fan-out* according to the specifications and formats provided, handling both convolutional and non-convolutional layers."}
{"task_id": 435, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]], \n                                y: list[float], \n                                n_estimators: int = 10, \n                                learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    y_mean = np.mean(y)\n    \n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(y_mean, 4) for _ in range(len(y))]\n    \n    current_prediction = np.full_like(y, y_mean)\n    \n    for t in range(1, n_estimators + 1):\n        residuals = y - current_prediction\n        coef, intercept = ols_fit(X, residuals)\n        weak_learner_prediction = np.dot(X, coef) + intercept\n        current_prediction += learning_rate * weak_learner_prediction\n    \n    return [round(pred, 4) for pred in current_prediction]\n\ndef ols_fit(X, y):\n    \"\"\"Fits an OLS model and returns the coefficients and intercept.\"\"\"\n    X_b = np.c_[np.ones((X.shape[0], 1)), X]\n    theta = np.linalg.inv(X_b.T.dot(X_b)).dot(X_b.T).dot(y)\n    intercept, *coef = theta\n    return np.array(coef), intercept\n```\n\nTo utilize the function with a specific dataset, you can do the following:\n\n```python\n# Example dataset\nX = [[1, 2], [2, 3], [3, 4], [4, 5]]\ny = [1, 2, 3, 4]\n\n# Calling the function with the example data\npredictions = gradient_boosting_regressor(X, y, n_estimators=5, learning_rate=0.1)\nprint(predictions)\n```\n\nThe function `gradient_boosting_regressor` takes in the data, checks for special cases, initializes the predictions, and then iteratively fits the OLS model and updates the predictions based on the gradient boosting algorithm. The predictions are returned as a list of floats, each rounded to 4 decimal places."}
{"task_id": 437, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n    \n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n            \n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    \n    # Convert scalar input to ndarray for uniform processing\n    x = np.array(x)\n    scalar_input = x.ndim == 0\n    \n    sig = 1 / (1 + np.exp(-x))\n    if order == 0:\n        result = sig\n    elif order == 1:\n        result = sig * (1 - sig)\n    elif order == 2:\n        result = sig * (1 - sig) * (1 - 2 * sig)\n    \n    # Convert result to list if input was list\n    if not scalar_input:\n        result = result.tolist()\n    else:\n        result = float(np.round(result, decimals=4))\n    \n    return round(result, 4) if scalar_input else result\n\n# Example usage:\nprint(sigmoid(0, 0))  # Scalar input, order=0\nprint(sigmoid([0, 1], 0))  # List input, order=0\nprint(sigmoid(np.array([-1, 0, 1]), 1))  # Numpy array input, order=1\nprint(sigmoid(2, 2))  # Scalar input, order=2\nprint(sigmoid(0, 3))  # Invalid order case\n```"}
{"task_id": 438, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]] | int:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if not isinstance(y, (list, np.ndarray)):\n        raise ValueError(\"y must be a list or a NumPy array\")\n    \n    if any(isinstance(i, (list, tuple)) for i in y):\n        raise ValueError(\"y should be a 1-D sequence of non-negative integers\")\n\n    if isinstance(y, list):\n        y = np.array(y)\n\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    elif num_classes < np.max(y) + 1:\n        return -1\n    \n    one_hot = np.eye(num_classes)[y]\n    return one_hot.tolist()\n\n# Example Usage and Verification:\n# Test Cases:\n\ny1 = [0, 1, 2, 0]\noutcome1 = [[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0]]\nassert to_categorical(y1) == outcome1, \"Test case 1 failed.\"\n\ny2 = [0, 5, 1, 4]\noutcome2 = [[1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0]]\nassert to_categorical(y2, num_classes=6) == outcome2, \"Test case 2 failed.\"\n\ny3 = [3, 4, 5, 6]\noutcome3 = -1\nassert to_categorical(y3, num_classes=5) == outcome3, \"Test case 3 failed.\"\n\nprint(\"All tests passed!\")\n```"}
{"task_id": 439, "completion_id": 0, "completion": "```python\nimport itertools\nfrom collections import Counter\n\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n    \n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    def support(itemset):\n        count = sum(1 for t in transactions if set(itemset).issubset(t))\n        return count / len(transactions)\n\n    def self_join(frequent_itemsets, k):\n        return [tuple(sorted(x.union(y))) for x in frequent_itemsets for y in frequent_itemsets \n                if len(x.union(y)) == k]\n\n    def prune(itemset, k_minus_one_frequent_itemsets):\n        subsets = itertools.combinations(itemset, k_minus_one)\n        return all(set(subset) in k_minus_one_frequent_itemsets for subset in subsets)\n\n    # Convert each transaction to a set of unique items\n    transactions = [set(t) for t in transactions]\n\n    # Initialize frequent itemsets\n    single_items = set(item for t in transactions for item in t)\n    frequents = [item for item in single_items if support((item,)) >= min_sup]\n\n    frequent_itemsets = [(item,) for item in frequents]\n    k = 2\n\n    while True:\n        candidate_itemsets = self_join(frequents, k)\n        frequent_items = [c for c in candidate_itemsets if support(c) >= min_sup]\n        if not frequent_items:\n            break\n        frequent_itemsets.extend(frequent_items)\n        frequents = frequent_items\n        k += 1\n\n    return frequent_itemsets\n\n# Example usage:\ntransactions = [\n    [1, 2, 3],\n    [2, 3],\n    [3, 4],\n    [2, 4],\n    [1, 2, 4],\n    [1, 3],\n    [2, 3],\n    [1, 3],\n    [1, 2, 3, 4],\n    [1, 2]\n]\n\nmin_sup = 0.4\nfrequent_itemsets = apriori_frequent_itemsets(transactions, min_sup)\nprint(frequent_itemsets)\n```\n\nIn this Python solution, the implementation starts by defining a support function to calculate the empirical support of an itemset. Then the `self_join` function generates new potential itemsets, and `prune` ensures that these candidates only contain subsets that are already known to be frequent.\n\nThe main loop starts with single items, calculating their support, and then iteratively generates new candidates until no more frequent itemsets can be found. The generated frequent itemsets are returned sorted as required by the task description."}
{"task_id": 440, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    # Convert nested list to a NumPy array for easier handling.\n    predictions_array = np.array(predictions)\n    \n    # Average the probability vectors over all estimators.\n    avg_probs_array = np.mean(predictions_array, axis=0)\n    \n    # Round the averaged probabilities to 4 decimal places.\n    avg_probs_rounded = np.round(avg_probs_array, 4)\n    \n    # Find the predicted class index for each sample.\n    predicted_classes = np.argmax(avg_probs_rounded, axis=1).tolist()\n    \n    # Convert the averaged probabilities array back to a Python list.\n    avg_probs_list = avg_probs_rounded.tolist()\n    \n    return avg_probs_list, predicted_classes\n\n# Example usage:\npredictions = [\n    [[0.7, 0.2, 0.1], [0.2, 0.7, 0.1]],\n    [[0.1, 0.7, 0.2], [0.4, 0.3, 0.3]],\n    [[0.2, 0.7, 0.1], [0.3, 0.5, 0.2]]\n]\nprint(aggregate_predictions(predictions))\n```\n\nPlease note that the example usage provided in the script is just to demonstrate how you can call the `aggregate_predictions` function. The `predictions` list is an illustrative example and in practice, should be replaced with the actual ensemble predictions that you might have from a Random Forest or similar ensemble method."}
{"task_id": 444, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    # Convert to numpy arrays for easy manipulation\n    X_np = np.array(X)\n    Y_np = np.array(X) if Y is None else np.array(Y)\n\n    n, c = X_np.shape\n    m, c2 = Y_np.shape\n\n    if c != c2:\n        return -1\n\n    if sigma is None:\n        sigma = np.sqrt(c / 2)\n\n    if isinstance(sigma, float) or isinstance(sigma, int):\n        if sigma <= 0:\n            return -1\n        sigma = np.array([sigma] * c)\n    elif isinstance(sigma, list):\n        sigma = np.array(sigma)\n        if sigma.shape[0] != c or np.any(sigma <= 0):\n            return -1\n\n    # Expand dimensions for broadcasting\n    X_np_exp = X_np[:, :, np.newaxis]  # shape (N, C, 1)\n    Y_np_exp = Y_np[:, np.newaxis, :]  # shape (1, C, M)\n\n    # Calculate the squared distance matrix\n    dist_matrix = np.sum(((X_np_exp - Y_np_exp) / sigma) ** 2, axis=1)\n\n    # Apply the kernel function\n    kernel_matrix = np.exp(-0.5 * dist_matrix)\n\n    # Round to 4 decimal places and convert to list\n    return kernel_matrix.round(4).tolist()\n\n# Test case\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0\nprint(rbf_kernel(X, Y, sigma))\n```\n\nFor the sample input provided, this script correctly outputs the specified Radial Basis Function (RBF) kernel matrix, rounded to four decimal places. The function includes comprehensive checks for the validity of the input, ensuring it meets the requirements specified."}
{"task_id": 446, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef entropy(labels):\n    \"\"\"Calculate the entropy of a list of labels.\"\"\"\n    _, counts = np.unique(labels, return_counts=True)\n    probabilities = counts / counts.sum()\n    return -np.sum(probabilities * np.log2(probabilities))\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    \n    # Initial Best Gain\n    best_gain = 0\n    best_feature = -1\n    best_threshold = None\n    best_left_majority = None\n    best_right_majority = None\n    \n    parent_entropy = entropy(y)\n    majority_labels, counts = np.unique(y, return_counts=True)\n    \n    # No split can improve gain if all samples have the same label\n    if len(counts) == 1:\n        return -1, None, majority_labels[0], majority_labels[0]\n    \n    majority_label = majority_labels[np.argmax(counts)]\n    \n    for feature_index in range(X.shape[1]):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n        \n        if len(unique_values) == 1:\n            continue\n        \n        sorted_values = np.sort(unique_values)\n        thresholds = (sorted_values[:-1] + sorted_values[1:]) / 2\n        \n        for threshold in thresholds:\n            left_indices = feature_values <= threshold\n            right_indices = feature_values > threshold\n            \n            left_y = y[left_indices]\n            right_y = y[right_indices]\n            \n            if len(left_y) == 0 or len(right_y) == 0:\n                continue\n            \n            p_left = len(left_y) / len(y)\n            p_right = len(right_y) / len(y)\n            \n            left_entropy = entropy(left_y)\n            right_entropy = entropy(right_y)\n            \n            gain = parent_entropy - (p_left * left_entropy) - (p_right * right_entropy)\n            \n            if gain > best_gain or (gain == best_gain and feature_index < best_feature):\n                best_gain = gain\n                best_feature = feature_index\n                best_threshold = round(threshold, 4)\n                \n                left_majority, _ = np.unique(left_y, return_counts=True)\n                left_majority = left_majority[np.argmax(np.unique(left_y, return_counts=True)[1])]\n                \n                right_majority, _ = np.unique(right_y, return_counts=True)\n                right_majority = right_majority[np.argmax(np.unique(right_y, return_counts=True)[1])]\n                \n                best_left_majority = left_majority\n                best_right_majority = right_majority\n    \n    return (best_feature, best_threshold, best_left_majority, best_right_majority)\n```"}
{"task_id": 452, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List\n\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n    \n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    # Ensure X is an array, so we can use array operations\n    X_array = np.array(X)\n    \n    # Determine if the threshold is numeric\n    is_numeric_threshold = isinstance(threshold, (int, float))\n    \n    # Create a filter based on the threshold type\n    if is_numeric_threshold:\n        subset1_filter = X_array[:, feature_i] >= threshold\n    else:\n        subset1_filter = X_array[:, feature_i] == threshold\n    \n    # Apply the filter to get the subsets and convert them back to native Python lists\n    subset1 = X_array[subset1_filter].tolist()\n    subset2 = X_array[~subset1_filter].tolist()\n    \n    return [subset1, subset2]\n\n# Test cases\nX_numeric = np.array([[1, 5], [3, 2], [4, 6], [2, 1]])\nprint(divide_on_feature(X_numeric, 0, 3))  # \u279c  [[ [3, 2], [4, 6] ], [ [1, 5], [2, 1] ]]\n\nX_categorical = np.array([[1, \"A\"], [2, \"B\"], [3, \"A\"], [4, \"C\"]])\nprint(divide_on_feature(X_categorical, 1, \"A\"))  # \u279c  [[ [1, \"A\"], [3, \"A\"] ], [ [2, \"B\"], [4, \"C\"] ]]\n```\n\nThis script implements the function `divide_on_feature` which performs the described split on the provided dataset `X` and returns the two subsets as lists of lists, while preserving the original order of the samples. The examples given demonstrate its usage on both a numeric and a categorical feature for splitting."}
{"task_id": 453, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    # Check for input validity\n    batch_size = Q.shape[0]\n    n_actions = Q.shape[1]\n    if not (Q_next.shape == Q.shape and \n            len(actions) == batch_size and \n            len(rewards) == batch_size and \n            len(dones) == batch_size and \n            0 <= gamma <= 1):\n        return -1\n\n    # Initialize the target matrix with the current Q-values\n    y = np.copy(Q)\n\n    # Compute the targets for each sample in the batch\n    for i in range(batch_size):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        y[i][actions[i]] = target\n\n    # Return the result rounded to 4 decimal places as a nested Python list\n    return np.round(y, decimals=4).tolist()\n\n# Example usage:\n# Define example inputs\nQ = np.array([[0.1, 0.2], [0.3, 0.4]])\nQ_next = np.array([[0.2, 0.1], [0.4, 0.3]])\nactions = [1, 0]\nrewards = [1.0, 0.5]\ndones = [False, True]\ngamma = 0.9\n\n# Call the function\nupdated_q_values = update_q_values(Q, Q_next, actions, rewards, dones, gamma)\nprint(updated_q_values)\n```"}
{"task_id": 458, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    # Convert `labels` to a NumPy array for easier manipulation\n    labels_array = np.array(labels)\n    \n    # Check for negative labels\n    if np.any(labels_array < 0):\n        return -1\n    \n    # Infer the number of classes if not provided\n    if num_classes is None:\n        num_classes = np.max(labels_array) + 1\n    else:\n        # Check if provided `num_classes` is too small\n        if np.max(labels_array) >= num_classes:\n            return -1\n    \n    # Initialize the one-hot encoded matrix as a NumPy array of zeros\n    one_hot = np.zeros((len(labels_array), num_classes), dtype=int)\n    \n    # Populate the one-hot encoded matrix\n    one_hot[np.arange(len(labels_array)), labels_array] = 1\n    \n    # Convert to Python list of lists and return\n    return one_hot.tolist()\n\n# Example usage\nlabels = [0, 3, 2, 1, 3, 2, 0, 1]\nnum_classes = 4\nprint(to_categorical(labels, num_classes))\n```\nThis function checks for negative values and ensures that `num_classes` is large enough to fit the labels. It uses NumPy for efficient computation and then converts the final result to the required list of lists format."}
{"task_id": 461, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n = len(y)\n    y_hat = np.full(n, np.mean(y))  # Initial predictions\n\n    if n_estimators <= 0:\n        return np.round(y_hat, 4).tolist()\n\n    for _ in range(n_estimators):\n        residuals = y - y_hat\n\n        # Compute SSE for all possible splits and choose the best\n        best_sse = np.inf\n        best_split = None\n        for t in np.unique(x)[:-1]:  # exclude the greatest x value\n            left_mask = (x <= t)\n            right_mask = ~left_mask\n\n            if not (left_mask.any() and right_mask.any()):\n                continue\n\n            left_mean = residuals[left_mask].mean()\n            right_mean = residuals[right_mask].mean()\n            sse = ((residuals[left_mask] - left_mean) ** 2).sum() + \\\n                  ((residuals[right_mask] - right_mean) ** 2).sum()\n\n            if sse < best_sse:\n                best_sse = sse\n                best_split = (t, left_mean, right_mean)\n\n        if best_split is None:\n            # No valid splits, use the mean residual for all predictions\n            stump_pred = np.full(n, residuals.mean())\n        else:\n            t, left_mean, right_mean = best_split\n            stump_pred = np.where(x <= t, left_mean, right_mean)\n\n        # Update predictions\n        y_hat += learning_rate * stump_pred\n\n    return np.round(y_hat, 4).tolist()\n\n# Example usage:\nx = [1.0, 2.5, 3.0, 4.5, 5.0, 6.0]\ny = [1.1, 2.2, 3.3, 4.4, 5.5, 6.6]\npredictions = gradient_boosting_regressor(x, y, n_estimators=20, learning_rate=0.5)\nprint(predictions)\n```\n```"}
{"task_id": 471, "completion_id": 0, "completion": "Below is a Python script that implements the requested Expected SARSA TD(0) Q-Table update according to the specifications:\n\n```python\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    # Number of actions: |A| \n    num_actions = len(q_table[0])\n    \n    # Compute the TD target\n    if next_state is not None:\n        # Get Q-values for next state\n        next_q_values = q_table[next_state]\n        \n        # Greedy action (ties are broken by choosing the first one)\n        max_q = max(next_q_values)\n        greedy_actions = [a for a, q in enumerate(next_q_values) if q == max_q]\n        \n        greedy_a = greedy_actions[0]\n        \n        # Compute the expectation term\n        expectation_term = 0\n        for a in range(num_actions):\n            if a == greedy_a:\n                expectation_term += q_table[next_state][a] * (1 - epsilon + epsilon / num_actions)\n            else:\n                expectation_term += q_table[next_state][a] * (epsilon / num_actions)\n        \n        # TD target\n        target = reward + gamma * expectation_term\n    else:\n        # If the next state is terminal\n        target = reward\n    \n    # Update the Q-table\n    q_table[state][action] += lr * (target - q_table[state][action])\n    \n    # Round to four decimal places\n    for row in q_table:\n        for i in range(len(row)):\n            row[i] = round(row[i], 4)\n    \n    return q_table\n\n\n# Example usage:\nif __name__ == '__main__':\n    q_table = [[1.0, 0.2, 0.8], [0.5, 0.9, 0.3]]\n    updated_q_table = expected_sarsa_update(q_table, 0, 1, 0.6, 1, 0.1, 0.5, 0.9)\n    print(updated_q_table)\n```\n\nThis script defines the `expected_sarsa_update` function and provides an example usage within a main block. The function correctly implements the Expected SARSA update for a tabular Q-function and rounds all Q-values to four decimal places as specified."}
{"task_id": 474, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n\n    X_train, Y_train = [], []\n    X_val, Y_val = [], []\n\n    for i in range(m):\n        label = (i - 0.5) * 2\n        x_start, x_end = (i // 2 + 0.1) * 10, (i // 2 + 0.9) * 10\n        y_start, y_end = (i % 2) * interval * 10 + 0.1 * 10, (i % 2) * interval * 10 + 0.9 * 10\n\n        # Generate training data\n        train_x = np.random.uniform(x_start, x_end, n_train)\n        train_y = np.random.uniform(y_start, y_end, n_train)\n        train_labels = np.full(n_train, label)\n        X_train.append(np.column_stack((train_x, train_y)))\n        Y_train.append(train_labels)\n\n        # Generate validation data\n        val_x = np.random.uniform(x_start, x_end, n_val)\n        val_y = np.random.uniform(y_start, y_end, n_val)\n        val_labels = np.full(n_val, label)\n        X_val.append(np.column_stack((val_x, val_y)))\n        Y_val.append(val_labels)\n\n    # Concatenate arrays and round to 4 decimal places\n    X_train = np.vstack(X_train).round(4)\n    X_val = np.vstack(X_val).round(4)\n    Y_train = np.concatenate(Y_train)\n    Y_val = np.concatenate(Y_val)\n\n    return X_train, X_val, Y_train, Y_val\n\n# Example usage\nm = 2\nn_train = 100\nn_val = 50\ninterval = 1.0\nseed = 42\n\nX_train, X_val, Y_train, Y_val = generate_data(m, n_train, n_val, interval, seed)\nprint(\"X_train:\", X_train)\nprint(\"X_val:\", X_val)\nprint(\"Y_train:\", Y_train)\nprint(\"Y_val:\", Y_val)\n```"}
{"task_id": 475, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    # Initialize m_prev and v_prev to zeros if they are None.\n    if m_prev is None:\n        m_prev = np.zeros_like(grad, dtype=np.float)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad, dtype=np.float)\n\n    # Update the first and second moment estimates\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * (grad ** 2)\n\n    # Bias correction\n    m_unbiased = m_new / (1 - b1**t)\n    v_unbiased = v_new / (1 - b2**t)\n\n    # Update parameters\n    w_new = w - learning_rate * m_unbiased / (np.sqrt(v_unbiased) + eps)\n\n    return w_new, m_new, v_new\n\n# Example usage\nif __name__ == \"__main__\":\n    w = 1.0\n    grad = 0.1\n    m_prev = 0.0\n    v_prev = 0.0\n    t = 1\n    w_new, m_new, v_new = adam_update(w, grad, m_prev, v_prev, t)\n    print(f\"w_new: {w_new:.9f}\")  # Should be close to 0.999000001\n```"}
{"task_id": 479, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(seed)\n\n    num_arms = len(rewards[0])\n    value_estimates = np.full(num_arms, ev_prior)\n    counter = np.zeros(num_arms)\n    \n    for row in rewards:\n        if np.random.rand() < epsilon:\n            chosen_arm = np.random.randint(num_arms)\n        else:\n            chosen_arm = np.argmax(value_estimates)\n        \n        counter[chosen_arm] += 1\n        reward = row[chosen_arm]\n        value_estimates[chosen_arm] += (reward - value_estimates[chosen_arm]) / counter[chosen_arm]\n    \n    return [round(val, 4) for val in value_estimates]\n\n# Example usage:\n# rewards = [\n#     [1.0, 0.0, -1.0],\n#     [0.0, 1.0, -1.0],\n#     [-1.0, 0.0, 1.0],\n#     [1.0, -1.0, 0.0]\n# ]\n# print(epsilon_greedy_bandit(rewards, epsilon=0.1, ev_prior=0.9, seed=42))\n```\n\nThis function implements the \u03b5-greedy algorithm for a stationary multi-armed bandit problem, taking into account the rewards, exploration probability, initial expected value of each arm, and a potentially provided seed for randomness control. The results of estimated values are returned as a list of floats, each rounded to the nearest 4th decimal place."}
{"task_id": 481, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef euclidean_distance(point1, point2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((point1 - point2) ** 2))\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled -1 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n\n    num_samples = data.shape[0]\n    visited = [False] * num_samples\n    labels = [-1] * num_samples  # Initialize all points as noise (-1)\n    cluster_id = 0\n\n    for i in range(num_samples):\n        if not visited[i]:\n            visited[i] = True\n            neighbors = [j for j in range(num_samples) if j != i and euclidean_distance(data[i], data[j]) <= eps]\n\n            if len(neighbors) < min_samples - 1:\n                continue  # Point is noise\n\n            # This point is a core point and starts a new cluster\n            labels[i] = cluster_id\n            expand_cluster(data, i, neighbors, labels, visited, eps, min_samples, cluster_id)\n            cluster_id += 1\n\n    return labels\n\ndef expand_cluster(data, point_id, neighbors, labels, visited, eps, min_samples, cluster_id):\n    \"\"\"Expand a cluster starting from a core point.\"\"\"\n    for neighbor_id in neighbors:\n        if not visited[neighbor_id]:\n            visited[neighbor_id] = True\n            new_neighbors = [j for j in range(data.shape[0]) if j != neighbor_id and euclidean_distance(data[neighbor_id], data[j]) <= eps]\n            if len(new_neighbors) >= min_samples - 1:\n                neighbors += new_neighbors  # Append new neighbors to the list\n\n        if labels[neighbor_id] == -1:\n            labels[neighbor_id] = cluster_id\n\nif __name__ == \"__main__\":\n    # Example usage\n    X = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\n    eps = 3\n    min_samples = 2\n    print(dbscan(X, eps, min_samples))\n```\n```"}
{"task_id": 482, "completion_id": 0, "completion": "Here is a self-contained Python script that implements the `to_categorical` function for converting integer labels to one-hot encoded format:\n\n```python\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n    \n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n    \n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n    \n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError(\"y contains labels that are negative or exceed num_classes\")\n    \n    result = np.zeros((len(y), num_classes), dtype=int)\n    result[np.arange(len(y)), y] = 1\n    \n    return result\n\n# Example usage:\ny = [0, 1, 2, 0, 1]\nnum_classes = 3\nencoded_y = to_categorical(y, num_classes)\nprint(encoded_y)\n# Expected output:\n# [[1 0 0]\n#  [0 1 0]\n#  [0 0 1]\n#  [1 0 0]\n#  [0 1 0]]\n\n# Testing the function with the absence of `num_classes`\ny = [3, 2, 1]\nencoded_y = to_categorical(y)\nprint(encoded_y)\n# Expected output:\n# [[0 0 0 1]\n#  [0 0 1 0]\n#  [0 1 0 0]]\n\n# Testing the function with negative labels or labels exceeding num_classes\ntry:\n    y = [0, -1, 3]\n    print(to_categorical(y, num_classes=3))\nexcept ValueError as e:\n    print(e)  # Expected output: y contains labels that are negative or exceed num_classes\n```\n\nThis script defines the `to_categorical` function according to the specifications given, including the handling of the optional `num_classes` parameter and the validation that prevents negative labels or labels that exceed the given (or inferred) number of classes from being processed, raising a `ValueError` in such cases."}
{"task_id": 485, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n\n    # Helper function to compute the sum of squared errors\n    def sse(y):\n        return np.sum((y - np.mean(y)) ** 2)\n\n    # Helper function to build the tree\n    def build_tree(X_train, y_train, depth):\n        n_samples = len(X_train)\n        if n_samples < 2 or depth == max_depth:\n            return np.mean(y_train)\n        best_score = np.inf\n        best_feature = 0\n        best_split = 0\n        for feature in range(1, n_samples):\n            left_Y = y_train[:feature]\n            right_Y = y_train[feature:]\n            score = sse(left_Y) + sse(right_Y)\n            if score < best_score:\n                best_score = score\n                best_split = (X_train[feature] + X_train[feature - 1]) / 2\n        left_X = X_train[0:best_split]\n        right_X = X_train[best_split:]\n        left_Y = y_train[0:best_split]\n        right_Y = y_train[best_split:]\n        return [build_tree(left_X, left_Y, depth + 1), build_tree(right_X, right_Y, depth + 1), best_split]\n\n    # Helper function to make predictions\n    def predict(x, tree):\n        if type(tree) == float:\n            return tree\n        elif x <= tree[2]:\n            return predict(x, tree[0])\n        else:\n            return predict(x, tree[1])\n\n    if len(X_train) == 0:\n        return []\n    else:\n        zipped = sorted(zip(X_train, y_train))\n        X_train_sorted, y_train_sorted = zip(*zipped)\n        tree = build_tree(X_train_sorted, y_train_sorted, 0)\n        predictions = [predict(x, tree) for x in X_test]\n        return predictions\n```"}
{"task_id": 490, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    # Check for empty input\n    if len(x) == 0:\n        return []\n    \n    # Convert input to a NumPy array\n    x_np = np.array(x)\n    \n    # Create diagonal matrix using np.diag\n    diagonal_matrix = np.diag(x_np)\n    \n    # Convert NumPy array back to list of lists\n    return diagonal_matrix.tolist()\n\n# Function to test the make_diagonal function\ndef test_make_diagonal():\n    # Test data points\n    test_cases = [\n        ([1, 2, 3], [[1, 0, 0], [0, 2, 0], [0, 0, 3]]),\n        ((10,), [[10]]),\n        ([], []),\n        (np.array([0, 1]), [[0, 0], [0, 1]])\n    ]\n    \n    # Test each case\n    for i, (input_val, expected_output) in enumerate(test_cases):\n        assert make_diagonal(input_val) == expected_output, f\"Test case {i + 1} failed\"\n        print(f\"Test case {i + 1} passed\")\n\n# Run the tests\ntest_make_diagonal()\n```\n\nIn this code, we implement a function `make_diagonal` that takes a single argument of type list, tuple, or NumPy array, and returns a list of list structures representing the diagonal matrix. We cover several edge cases including empty input, single element arrays, and multiple elements. After implementing the function, we test it with several test cases to ensure its correctness."}
{"task_id": 491, "completion_id": 0, "completion": "```python\nfrom collections import Counter, defaultdict\nimport itertools\n\ndef construct_tree(transactions, min_sup):\n    # First scan to get item frequencies\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    \n    # Item-header table with items >= min_sup and sorted by frequency (desc) then lexicographically\n    header = {item: count for item, count in item_counts.items() if count >= min_sup}\n    header = dict(sorted(header.items(), key=lambda x: (-x[1], x[0])))\n    \n    # Second scan to sort items in transactions by descending global frequency and build the FP-tree\n    fp_tree = FPNode(None)\n    for transaction in transactions:\n        filtered_trans = sorted((item for item in transaction if item in header), key=lambda x: (-header[x], x))\n        if filtered_trans:  # Transaction must contain at least one item that meets min_sup\n            fp_tree.insert(filtered_trans)\n    \n    return fp_tree, header\n\ndef find_frequent_itemsets(fp_tree, header):\n    # Helper function to mine the FP-tree\n    def mine_tree(tree, prefix, header, item_sets):\n        # Single path heuristic\n        if tree.is_single_path():\n            for item, count in tree.yield_path():\n                yield (tuple(sorted(prefix + (item,))), count)\n                for path_item, path_count in tree.yield_path():\n                    if path_item != item:\n                        yield (tuple(sorted(prefix + (item, path_item))), min(path_count, count))\n        else:\n            # Recursive mining\n            for item in header:\n                new_prefix = prefix + (item,)\n                yield (new_prefix, header[item])\n                conditional_tree, _ = construct_tree(tree.get_conditional_patterns(item), 0)\n                for pattern, count in mine_tree(conditional_tree, new_prefix, conditional_tree.header, item_sets):\n                    yield (pattern, min(count, header[item]))\n    \n    all_item_sets = set()\n    for item_set, _ in mine_tree(fp_tree, (), header, all_item_sets):\n        all_item_sets.add(item_set)\n    \n    return all_item_sets\n\nclass FPNode:\n    def __init__(self, item):\n        self.item = item\n        self.count = 0\n        self.children = {}\n        self.parent = None\n        self.next_node = None\n    \n    def insert(self, transaction):\n        self.count += 1\n        if not transaction:\n            return\n    \n        next_item, *remaining_items = transaction\n        if next_item in self.children:\n            next_node = self.children[next_item]\n        else:\n            next_node = FPNode(next_item)\n            next_node.parent = self\n            self.children[next_item] = next_node\n        next_node.insert(remaining_items)\n    \n    def is_single_path(self):\n        if not self.children or self.count <= 1:\n            return True\n        for child in self.children.values():\n            if not child.is_single_path():\n                return False\n        return True\n    \n    def yield_path(self):\n        for child in self.children.values():\n            yield from child.yield_path()\n        yield (self.item, self.count)\n    \n    def get_conditional_patterns(self, item):\n        def traverse(node, path):\n            if node.item == item:\n                yield path[::-1]\n            else:\n                for child in node.children.values():\n                    yield from traverse(child, path + [child.item])\n        \n        return [path for path in traverse(self, [])]\n\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    fp_tree, header = construct_tree(transactions, min_sup)\n    frequent_item_sets = find_frequent_itemsets(fp_tree, header)\n    return sorted(frequent_item_sets, key=lambda x: (len(x), x))\n```"}
{"task_id": 492, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    n_samples, n_features = len(X), len(X[0])\n\n    if degree < 0:\n        return -1\n\n    powers = list(combinations_with_replacement(range(n_features), degree))\n    for i in range(degree):\n        powers.extend(combinations_with_replacement(range(n_features), i))\n    powers = sorted(set(powers), key=lambda x: (len(x), x))\n\n    def compute_row(row):\n        return [np.prod([row[i] ** exp for i, exp in enumerate(power)]) for power in powers]\n\n    return [compute_row(row) for row in X]\n\n# Example usage:\nX_example = [\n    [1, 2],\n    [3, 4]\n]\ndegree_example = 2\nresult = polynomial_features(X_example, degree_example)\nprint(result)\n```\n\nThis script defines the `polynomial_features` function according to the task specification, which generates a full polynomial feature matrix for provided input data up to a specified degree. It uses combinations with replacement to generate all necessary powers and sorts them within the appropriate constraints. Then, it computes the new features for each sample (row in X). Note that the example usage shows how to use the function and prints the resulting polynomial feature matrix."}
{"task_id": 493, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | np.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    # Convert the input to a numpy array if it's not already one\n    y = np.array(y)\n\n    # Check if the input array is empty\n    if y.size == 0:\n        return -1\n\n    # Calculate the mean of the input array\n    y_mean = np.mean(y)\n\n    # Compute the squared differences from the mean\n    squared_diff = (y - y_mean)**2\n\n    # Calculate the mean of the squared differences to get MSE\n    mse_value = np.mean(squared_diff)\n\n    # Return the MSE rounded to 4 decimal places\n    return round(mse_value, 4)\n\n# Example usage:\n# sample = [1.0, 2.0, 3.0, 4.0]\n# print(mse(sample))  # Output will be 1.25\n```"}
{"task_id": 496, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(x, (int, float)):\n        x = [x]\n\n    x = np.array(x)\n    y = slope * x + intercept\n    grad = np.full_like(x, slope)\n    grad2 = np.zeros_like(x)\n    \n    # Round the results to the nearest 4th decimal place\n    y = np.round(y, 4)\n    grad = np.round(grad, 4)\n    grad2 = np.round(grad2, 4)\n\n    return (y.tolist(), grad.tolist(), grad2.tolist())\n\n# Example usage:\nx = [1.0, 2.0, 3.0, 4.0]\nslope = 2.0\nintercept = 1.0\ny, grad, grad2 = apply_affine(x, slope, intercept)\nprint(f\"y: {y}, grad1: {grad}, grad2: {grad2}\")\n```\nThis script defines the `apply_affine` function as specified, ensuring it handles both scalars and lists as input, while also fulfilling the requirement to round the results to four decimal places."}
{"task_id": 499, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    n_samples, n_features = data.shape\n    \n    if k < 1 or k > n_features:\n        return -1\n\n    # Standardize each feature\n    means = np.mean(data, axis=0)\n    stds = np.std(data, axis=0, ddof=1)\n    # To handle division by zero: if std is zero, keep the original column\n    stds[stds == 0] = 1 \n    standardized_data = (data - means) / stds\n\n    # Compute the sample covariance matrix using Bessel's correction\n    covariance_matrix = np.cov(standardized_data.T, ddof=1)\n    \n    # Perform eigen-decomposition\n    eigenvalues, eigenvectors = np.linalg.eigh(covariance_matrix)\n\n    # Sort eigenvalues and eigenvectors in descending order\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n\n    # Remove the sign ambiguity by ensuring the largest absolute value entry is positive\n    for i in range(n_features):\n        max_index = np.argmax(np.abs(sorted_eigenvectors[:, i]))\n        if sorted_eigenvectors[max_index, i] < 0:\n            sorted_eigenvectors[:, i] *= -1\n\n    # Project the standardized data onto the first k eigenvectors\n    projection_matrix = sorted_eigenvectors[:, :k]\n    projected_data = np.dot(standardized_data, projection_matrix)\n\n    # Round the projected data to 4 decimal places and convert to list\n    rounded_projected_data = np.round(projected_data, 4).tolist()\n    \n    return rounded_projected_data\n\n# Example usage:\ndata = np.array([\n    [1.0, 2.0, 3.0],\n    [4.0, 5.0, 6.0],\n    [7.0, 8.0, 9.0],\n    [10.0, 11.0, 12.0]\n])\nk = 2\nprint(pca_transform(data, k))\n```\n\nThis script defines the `pca_transform` function according to the given requirements and demonstrates its usage on a sample dataset."}
{"task_id": 500, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    \n    def decision_stump(X, y):\n        best_error = float('inf')\n        best_feature, best_threshold, best_left_value, best_right_value = None, None, None, None\n        \n        for feature_index in range(len(X[0])):\n            feature_values = [sample[feature_index] for sample in X]\n            thresholds = sorted(set(feature_values))\n            \n            for threshold in thresholds:\n                y_pred_left = np.mean([y[i] for i, value in enumerate(feature_values) if value <= threshold])\n                y_pred_right = np.mean([y[i] for i, value in enumerate(feature_values) if value > threshold])\n                \n                error_left = np.sum((np.array([y[i] for i, value in enumerate(feature_values) if value <= threshold]) - y_pred_left) ** 2)\n                error_right = np.sum((np.array([y[i] for i, value in enumerate(feature_values) if value > threshold]) - y_pred_right) ** 2)\n                current_error = error_left + error_right\n                \n                if current_error < best_error:\n                    best_error = current_error\n                    best_feature = feature_index\n                    best_threshold = threshold\n                    best_left_value = y_pred_left\n                    best_right_value = y_pred_right\n                    \n        return best_feature, best_threshold, best_left_value, best_right_value\n    \n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    F = np.mean(y_train)\n    residuals = y_train - F\n    \n    stumps = []\n    for _ in range(n_estimators):\n        feature, threshold, left_value, right_value = decision_stump(X_train, residuals)\n        residuals_left = residuals[X_train[:, feature] <= threshold]\n        residuals_right = residuals[X_train[:, feature] > threshold]\n        \n        residuals[X_train[:, feature] <= threshold] -= learning_rate * left_value\n        residuals[X_train[:, feature] > threshold] -= learning_rate * right_value\n        \n        stumps.append((feature, threshold, left_value, right_value))\n        \n    predictions = np.full(X_test.shape[0], F)\n    for feature, threshold, left_value, right_value in stumps:\n        predictions[X_test[:, feature] <= threshold] += learning_rate * left_value\n        predictions[X_test[:, feature] > threshold] += learning_rate * right_value\n        \n    return [1 if pred >= 0.5 else 0 for pred in predictions]\n\n# Example usage\nX_train = [[1,2,3], [4,5,6], [7,8,9], [10,11,12]]\ny_train = [0, 1, 0, 1]\nX_test = [[2,3,1], [5,6,4], [8,9,7], [11,12,10]]\npredictions = gradient_boosting_classifier(X_train, y_train, X_test)\nprint(predictions)\n```\n\nThis code defines the `gradient_boosting_classifier` function as per the task description. It uses decision stumps to train a gradient boosting model on the `X_train` and `y_train` datasets and then predicts the class labels for the `X_test` samples. It assumes that the data are clean and the labels are binary."}
{"task_id": 505, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n\n    n_samples = X.shape[0]\n    # Compute the positive phase hidden probabilities\n    pos_hidden_prob = sigmoid(X @ W + hbias)\n    pos_grad = X.T @ pos_hidden_prob\n\n    v_k_prob, h_k_prob = X, pos_hidden_prob\n    for _ in range(k):\n        # Compute probabilities and use them directly for Gibbs sampling\n        h_k_prob = sigmoid(v_k_prob @ W + hbias)\n        v_k_prob = sigmoid(h_k_prob @ W.T + vbias)\n\n    neg_grad = v_k_prob.T @ h_k_prob\n\n    # Update the weight matrix\n    W_new = W + learning_rate * (pos_grad - neg_grad) / n_samples\n    return np.round(W_new, decimals=4).tolist()\n\n# Example usage\nif __name__ == \"__main__\":\n    np.random.seed(0)  # Seed for reproducibility\n\n    X = np.random.randint(0, 2, size=(32, 10))  # Mini-batch of 32 samples, 10 visible units\n    W = np.random.randn(10, 5)  # Weight matrix for 10 visible units and 5 hidden units\n    hbias = np.random.randn(5)  # Hidden biases\n    vbias = np.random.randn(10)  # Visible biases\n    learning_rate = 0.01\n    k = 1\n\n    updated_weights = contrastive_divergence(X, W, hbias, vbias, learning_rate, k)\n    print(updated_weights)\n```"}
{"task_id": 509, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n\n    # Convert to NumPy arrays for easier calculation\n    x_array = np.array(x)\n    y_array = np.array(y)\n\n    # Calculate the absolute differences\n    abs_diff = np.abs(x_array - y_array)\n\n    # Return the maximum difference rounded to four decimal places\n    return round(np.max(abs_diff), 4)\n\n# Example usage\nx = [1, 2, 3]\ny = [2, 4, 6]\n\nprint(chebyshev(x, y))  # Expected output: 3.0\n```"}
{"task_id": 510, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n\n    # Define the epsilon value for numerical stability\n    eps = np.finfo(float).eps\n    # Clip y_pred to (eps, 1-eps)\n    y_pred_clipped = np.clip(y_pred, eps, 1 - eps)\n\n    # Compute the binary cross-entropy\n    reconstruction_loss = -np.sum(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped), axis=1)\n\n    # Compute the KL divergence\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var), axis=1)\n\n    # Compute the total loss\n    total_loss = np.mean(reconstruction_loss + kl_divergence)\n\n    return round(total_loss, 6)\n\n# Example usage\nbatch_size = 32\nn_features = 10\nlatent_dim = 2\n\ny = np.random.randint(2, size=(batch_size, n_features))\ny_pred = np.random.rand(batch_size, n_features)\nt_mean = np.random.randn(batch_size, latent_dim)\nt_log_var = np.random.randn(batch_size, latent_dim)\n\nloss = vae_loss(y, y_pred, t_mean, t_log_var)\nprint(f\"VAE Loss: {loss}\")\n```"}
{"task_id": 513, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    # Convert lists to numpy arrays for vectorized operations\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n\n    # Compute the linear components of the FM\n    linear_part = np.dot(X, w)\n\n    # Compute the interaction components of the FM\n    interaction_part = 0.5 * np.sum(\n        np.square(np.dot(X, V)) -\n        np.sum(np.square(X) * np.square(V), axis=1)[:, np.newaxis],\n        axis=1\n    )\n\n    # Combine the linear, bias, and interaction parts\n    predictions = w0 + linear_part + interaction_part\n\n    # Round to the 4th decimal place\n    predictions = np.round(predictions, 4)\n    return predictions.tolist()\n\n# Example usage\nX_example = [[1, 2, 3], [4, 5, 6]]\nw0_example = 0.5\nw_example = [0.4, 0.2, 0.1]\nV_example = [[0.05, 0.02], [0.03, 0.01], [0.02, 0.04]]\npredictions = fm_predict(X_example, w0_example, w_example, V_example)\nprint(predictions)\n```\nThis function `fm_predict` computes factorization machine predictions using the specified formula for a given batch of samples represented by `X`, the bias term `w0`, the linear weights `w`, and the latent interaction factors `V`. The function ensures the results are rounded to the nearest 4th decimal place as required."}
{"task_id": 517, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # Convert input to NumPy array if it's a list or tuple for easier manipulation\n    if isinstance(z, (list, tuple)):\n        z = np.array(z)\n    elif isinstance(z, np.ndarray):\n        pass\n    else:  # single scalar\n        return round(1 / (1 + np.exp(-z)), 4)\n\n    # Compute sigmoid in a numerically stable way\n    # Use max(0, z) to avoid overflow in np.exp\n    sig = np.where(z >= 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n    \n    # Ensure that the result is rounded to the nearest 4th decimal\n    sig_rounded = np.around(sig, decimals=4)\n    \n    # Convert back to float or list based on original input type\n    if isinstance(z, np.ndarray):\n        if z.size == 1:  # single item array\n            return float(sig_rounded[0])\n        else:\n            return sig_rounded.tolist()\n    else:\n        raise TypeError(\"Input must be int, float, list, tuple, or numpy.ndarray\")\n\n# Test the function with provided data points\nprint(sigmoid([-1, 0, 1]))  # Output should be [0.2689, 0.5, 0.7311]\n```"}
{"task_id": 518, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        # Process actual if it's a 2D one-hot encoded array\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n\n        # Process predicted if it's a 2D one-hot encoded array\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n\n        # Call the wrapped function with processed arrays\n        return function(actual, predicted)\n\n    return wrapper\n\n# Example usage\n@unhot\ndef accuracy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Simple accuracy rounded to 4 decimals.\"\"\"\n    return np.round(np.mean(actual == predicted), 4)\n\nactual = np.array([[0,1,0], [1,0,0], [0,0,1]])  # one-hot\npredicted = np.array([[0,1,0], [0,1,0], [0,0,1]])  # one-hot\nprint(accuracy(actual, predicted))  # 0.6667\n```"}
{"task_id": 520, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, (float, int)):\n        return np.round(z * (1 - z), 4)\n    elif isinstance(z, list) and len(z) == 0:\n        return []\n    elif isinstance(z, list):\n        return [sigmoid_grad(item) for item in z]\n    elif isinstance(z, np.ndarray):\n        # Apply the gradient calculation and then round off the results.\n        result = z * (1 - z)\n        result = np.round(result, 4)\n        if z.shape == ():\n            return float(result)\n        return result.tolist()\n    else:\n        raise ValueError(\"Unsupported input type. Please use a float, list, or NumPy ndarray.\")\n\n# Test cases\nprint(sigmoid_grad(0.7))  # 0.21\nprint(sigmoid_grad([0.2, 0.8]))  # [0.16, 0.16]\nprint(sigmoid_grad(np.array([0.1, 0.9])))  # [0.09, 0.09]\nprint(sigmoid_grad(np.array([[0.3, 0.7], [0.5, 0.5]])))  # [[0.21, 0.21], [0.25, 0.25]]\nprint(sigmoid_grad([]))  # []\n```"}
{"task_id": 528, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    W = np.array(W)\n    x1_min, x2_min = X.min(axis=0)\n    x1_max, x2_max = X.max(axis=0)\n    \n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    \n    x1_mesh, x2_mesh = np.meshgrid(x1_plot, x2_plot)\n    \n    Z = W[0] * x1_mesh + W[1] * x2_mesh + b\n    Z_classified = np.sign(Z)\n    \n    return Z_classified.tolist()\n\n# Example usage\nif __name__ == \"__main__\":\n    X = [[1, 2], [3, 4], [5, 6], [7, 8]]\n    W = [1, -1]\n    b = 0\n    grid = decision_boundary_grid(X, W, b)\n    for row in grid:\n        print(row)\n```\n\nThis script follows the instructions provided, implementing the function `decision_boundary_grid` that generates a dense grid of predictions for a 2D linear classifier, based on given training data points. The provided example usage at the end demonstrates how to call the function and visualize its output."}
{"task_id": 537, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    # Number of classes (0 or 1)\n    n_classes = 2\n    \n    # Number of features\n    n_features = X_train.shape[1]\n    \n    # Calculate class priors\n    class_priors = np.zeros(n_classes)\n    for c in range(n_classes):\n        class_priors[c] = np.sum(y_train == c) / len(y_train)\n    \n    # Calculate mean and standard deviation for each class and each feature\n    means = np.zeros((n_classes, n_features))\n    stds = np.zeros((n_classes, n_features))\n    for c in range(n_classes):\n        for f in range(n_features):\n            means[c, f] = np.mean(X_train[y_train == c, f])\n            stds[c, f] = np.std(X_train[y_train == c, f]) + 1e-9  # Add a small constant to avoid division by zero\n    \n    # Predict the class for each test sample\n    predictions = []\n    for sample in X_test:\n        posteriors = []\n        for c in range(n_classes):\n            likelihoods = np.zeros(n_features)\n            for f in range(n_features):\n                likelihoods[f] = (1 / (np.sqrt(2 * np.pi) * stds[c, f])) * np.exp(- (sample[f] - means[c, f])**2 / (2 * stds[c, f]**2))\n            posteriors.append(np.log(class_priors[c]) + np.sum(np.log(likelihoods)))\n        predictions.append(np.argmax(posteriors))\n    \n    return predictions\n```"}
{"task_id": 539, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    m = Y.shape[1] if Y.ndim == 2 else Y.size\n    # Clip AL to avoid log(0)\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    # Compute the binary cross-entropy\n    cost = -1/m * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    # Convert cost to a float (it might be a zero-dimensional numpy array)\n    return float(np.squeeze(cost))\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    AL1 = np.array([0.9, 0.1, 0.8, 0.75])\n    Y1 = np.array([1, 0, 1, 0])\n    print(f\"Cost 1: {compute_cost(AL1, Y1):.4f}\")\n\n    AL2 = np.array([[0.9, 0.1], [0.8, 0.75]])\n    Y2 = np.array([[1, 0], [1, 0]])\n    print(f\"Cost 2: {compute_cost(AL2, Y2):.4f}\")\n```\nThis script defines a function that computes the binary cross-entropy cost given the model predictions and the true labels, following the requirements of the task. It includes a rounding operation when printing the cost to ensure the output is a float value with 4 decimal places."}
{"task_id": 552, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef forward(hmm, observations):\n    pi, A, B = hmm['pi'], hmm['A'], hmm['B']\n    T = len(observations)\n    N = len(pi)\n    \n    F = np.zeros((T, N))\n    F[0, :] = pi * B[:, observations[0]]\n    \n    for i in range(1, T):\n        F[i, :] = np.dot(F[i - 1, :], A) * B[:, observations[i]]\n        \n    return F\n\ndef backward(hmm, observations):\n    pi, A, B = hmm['pi'], hmm['A'], hmm['B']\n    T = len(observations)\n    N = len(pi)\n    \n    Bk = np.zeros((T, N))\n    Bk[T - 1, :] = 1\n    \n    for i in range(T - 2, -1, -1):\n        Bk[i, :] = np.dot(A, B[:, observations[i + 1]] * Bk[i + 1, :])\n        \n    return Bk\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    T = len(observations)\n    if t < 0 or t >= T:\n        return []\n    \n    # Compute Forward and Backward probabilities\n    alpha = forward(hmm, observations)\n    beta = backward(hmm, observations)\n    \n    gamma_t = alpha[t, :] * beta[t, :]\n    gamma_t /= np.sum(gamma_t)\n    \n    return [round(p, 4) for p in gamma_t]\n\n# Example usage\nhmm = {\n    'pi': np.array([0.6, 0.4]),\n    'A': np.array([[0.7, 0.3], [0.4, 0.6]]),\n    'B': np.array([[0.1, 0.4, 0.5], [0.6, 0.3, 0.1]])\n}\nobservations = [0, 1, 2]\nt = 1\nprint(gamma_probabilities(hmm, observations, t))\n```\n\nThis script computes the gamma probabilities using forward and backward algorithms, as described in the task. It rounds off the probabilities to four decimal places and returns them as a list. The example usage demonstrates how to use the function."}
{"task_id": 555, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import deque\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    \n    n_samples = data.shape[0]\n    distances = np.linalg.norm(data[:, np.newaxis] - data, axis=2)\n    labels = [-1] * n_samples\n    cluster_id = 1\n    \n    # Determine core samples\n    core_samples = np.where(np.sum(distances <= eps, axis=1) >= min_samples)[0]\n    \n    for core in core_samples:\n        if labels[core] != -1:\n            continue  # Core point already processed\n        queue = deque([core])\n        while queue:\n            current = queue.popleft()\n            if labels[current] == -1:\n                labels[current] = cluster_id\n            neighbors = np.where((distances[current] <= eps) & (distances[current] > 0))[0]\n            for neighbor in neighbors:\n                if labels[neighbor] == -1:\n                    labels[neighbor] = cluster_id\n                    if neighbor in core_samples:\n                        queue.append(neighbor)\n        cluster_id += 1\n        \n    return labels\n```\nThis Python script implements the core components of the DBSCAN algorithm as described in the task. It computes the pairwise Euclidean distances, builds the neighborhood list for each sample, identifies core points, and performs a type of breadth-first search to form clusters while marking noise points. The returned list contains integers representing the cluster id of each sample, with noise points labeled as -1."}
{"task_id": 561, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom scipy.stats import multivariate_normal\n\ndef initialize_parameters(data: np.ndarray, k: int) -> tuple:\n    \"\"\"Randomly initializes mixture weights, means, and covariance matrices.\"\"\"\n    n, d = data.shape\n    weights = np.ones(k) / k\n    means = data[np.random.choice(n, k, replace=False)]\n    covariances = [np.cov(data, rowvar=False) for _ in range(k)]\n    return weights, means, covariances\n\ndef expectation_step(data: np.ndarray, weights: np.ndarray, means: np.ndarray, covariances: list) -> np.ndarray:\n    \"\"\"Performs the Expectation step of the EM algorithm.\"\"\"\n    n, d = data.shape\n    k = len(weights)\n    posteriors = np.zeros((n, k))\n    for j in range(k):\n        posteriors[:, j] = weights[j] * multivariate_normal.pdf(data, mean=means[j], cov=covariances[j])\n    posteriors /= posteriors.sum(axis=1)[:, np.newaxis]\n    return posteriors\n\ndef maximization_step(data: np.ndarray, posteriors: np.ndarray) -> tuple:\n    \"\"\"Performs the Maximization step of the EM algorithm.\"\"\"\n    n, k = posteriors.shape\n    d = data.shape[1]\n    weights = posteriors.sum(axis=0) / n\n    means = (posteriors.T @ data) / posteriors.sum(axis=0)[:, np.newaxis]\n    covariances = [np.zeros((d, d)) for _ in range(k)]\n    for j in range(k):\n        diff = data - means[j]\n        covariances[j] = np.dot(posteriors[:, j] * diff.T, diff) / posteriors[:, j].sum()\n    return weights, means, covariances\n\ndef sort_components(means: np.ndarray, posteriors: np.ndarray) -> np.ndarray:\n    \"\"\"Sorts the components and re-labels the cluster indices.\"\"\"\n    sorted_indices = np.argsort(means[:, 0])\n    sorted_posteriors = posteriors[:, sorted_indices]\n    labels = np.argmax(sorted_posteriors, axis=1)\n    return sorted_posteriors, labels\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    weights, means, covariances = initialize_parameters(data, k)\n    for _ in range(max_iter):\n        old_weights = weights\n        posteriors = expectation_step(data, weights, means, covariances)\n        weights, means, covariances = maximization_step(data, posteriors)\n        if np.allclose(weights, old_weights, atol=epsilon):\n            break\n            \n    _, labels = sort_components(means, posteriors)\n    return labels.tolist()\n\n# Example usage:\ndata = np.random.multivariate_normal([0, 0], [[1, 0.5], [0.5, 1]], 200)\nlabels = gmm_em(data, k=2)\nprint(labels)\n```"}
{"task_id": 562, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_kernel(x, y, gamma):\n    return np.exp(-gamma * np.sum((x - y) ** 2))\n\ndef pairwise_similarities(points, gamma):\n    N = points.shape[0]\n    W = np.zeros((N, N))\n    for i in range(N):\n        for j in range(i, N):\n            W[i, j] = W[j, i] = gaussian_kernel(points[i], points[j], gamma)\n    return W\n\ndef laplacian(W, method='unnormalized'):\n    D = np.diag(np.sum(W, axis=1))\n    if method == 'unnormalized':\n        L = D - W\n    else:  # normalized\n        D_inv_sqrt = np.linalg.inv(np.sqrt(D))\n        L = np.dot(np.dot(D_inv_sqrt, W), D_inv_sqrt)\n    return L\n\ndef kmeans(X, k):\n    centroids = X[:k].copy()\n    prev_labels = np.zeros(X.shape[0])\n    while True:\n        dists = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(dists, axis=1)\n        if np.array_equal(labels, prev_labels):\n            break\n        prev_labels = labels\n        for i in range(k):\n            if np.any(labels == i):\n                centroids[i] = np.mean(X[labels == i], axis=0)\n    return labels\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    N = data.shape[0]\n    if n_cluster == 1:\n        return [0] * N\n\n    W = pairwise_similarities(data, gamma)\n    L = laplacian(W, method=method)\n\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    U = eigenvectors[:, :n_cluster]\n    if method == 'normalized':\n        row_norms = np.linalg.norm(U, axis=1, keepdims=True)\n        U = U / row_norms\n    \n    cluster_labels = kmeans(U, n_cluster)\n    sorted_labels = np.argsort(np.argmin(cluster_labels))\n    sorted_labels_to_original = {i: np.argmin(cluster_labels == i) for i in range(n_cluster)}\n    \n    final_labels = [sorted_labels_to_original[label] for label in cluster_labels]\n    return final_labels\n```"}
{"task_id": 563, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N, d = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n\n    # Training loop\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n\n    # Recover the weight vector\n    w = np.dot(alpha * y_data, X_data)\n    w = np.round(w, decimals=4).tolist()\n    b = np.round(b, decimals=4)\n\n    return w, b\n\n# Example usage:\n# X_data = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_data = np.array([-1, -1, 1, 1])\n# print(perceptron_dual_train(X_data, y_data, eta=1.0, max_iter=1000))\n```\n\nThis code implements the training of a dual-form perceptron as per the provided guidelines. It takes into account the learning rate `eta` and the maximum number of iterations `max_iter`. The algorithm builds the Gram matrix, iteratively updates the alpha coefficients and the bias `b`, and finally computes the weight vector `w` and the bias `b` to return. The `w` is converted to a Python list and both `w` and `b` are rounded to four decimal places before being returned."}
{"task_id": 564, "completion_id": 0, "completion": "```python\nclass Node:\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label\n        self.x = x\n        self.s = s\n        self.y = y\n        self.child = child if child is not None else []\n\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    if task_type == 'classification':\n        feature_value = features[root.label]\n        for child in root.child:\n            if child.x == feature_value:\n                return predict_sample(child, features, task_type)\n        # Default to second child if no match.\n        return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        feature_value = features[root.label]\n        if feature_value <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)\n\n# Example usage:\n# Constructing a small example tree\nroot = Node(label=0, child=[\n    Node(x=1, child=[\n        Node(y=0),\n        Node(y=1)\n    ]),\n    Node(x=2, child=[\n        Node(y=2),\n        Node(y=3)\n    ])\n])\n\n# Classification tree example\nprediction = predict_sample(root, [1], 'classification')\nprint(\"Classification prediction:\", prediction)  # Output: Classification prediction: 0\n\n# Regression tree example\nroot_reg = Node(label=0, s=1.5, child=[\n    Node(y=0),\n    Node(y=2)\n])\n\nprediction_reg = predict_sample(root_reg, [1], 'regression')\nprint(\"Regression prediction:\", prediction_reg)  # Output: Regression prediction: 0\n```"}
{"task_id": 565, "completion_id": 0, "completion": "Below is the Python script that solves the given task. It includes the necessary imports and implements the entropy calculation, conditional entropy calculation, and information gain calculation. The best feature (column) that provides the maximum information gain is selected, and the index along with the gain value are returned.\n\n```python\nimport numpy as np\nimport math\n\ndef entropy(labels: np.ndarray) -> float:\n    \"\"\"Calculate the entropy of the label distribution.\"\"\"\n    label_counts = np.bincount(labels)\n    probabilities = label_counts / len(labels)\n    entropy = -np.sum([p * math.log2(p) for p in probabilities if p > 0])\n    return entropy\n\ndef conditional_entropy(feature: np.ndarray, labels: np.ndarray) -> float:\n    \"\"\"Calculate the conditional entropy of labels given the feature.\"\"\"\n    feature_values = np.unique(feature)\n    conditional_entropy = 0\n    for value in feature_values:\n        subset_labels = labels[feature == value]\n        subset_entropy = entropy(subset_labels)\n        conditional_entropy += (len(subset_labels) / len(labels)) * subset_entropy\n    return conditional_entropy\n\ndef information_gain(feature: np.ndarray, labels: np.ndarray) -> float:\n    \"\"\"Calculate the information gain of a feature.\"\"\"\n    base_entropy = entropy(labels)\n    cond_entropy = conditional_entropy(feature, labels)\n    return base_entropy - cond_entropy\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    information_gains = [information_gain(X[:, col_index], y) for col_index in range(X.shape[1])]\n    best_feature_index = np.argmax(information_gains)\n    max_information_gain = round(information_gains[best_feature_index], 6)\n    return (best_feature_index, max_information_gain)\n\n# Example usage:\n# X = np.array([[0, 1, 0], [2, 2, 9], [1, 0, 3], [0, 1, 1]])\n# y = np.array([1, 2, 3, 1])\n# print(choose_best_feature(X, y))  # Returns the tuple with the best feature and its information gain\n```\n\nThis script defines auxiliary functions (`entropy`, `conditional_entropy`, and `information_gain`) to compute the necessary values before selecting the best feature for the ID3 algorithm. These functionalities are used inside the `choose_best_feature` function to provide a solution to the given task."}
{"task_id": 566, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\nfrom typing import List\n\nnp.random.seed(42)\n\ndef average_path_length(n: int) -> float:\n    \"\"\"Calculate the average path length for a binary tree.\"\"\"\n    if n <= 1:\n        return 0.0\n    return 2.0 * math.log(n - 1) + 0.57721566490153286060651209 - 2.0 * (n - 1) / n\n\ndef build_tree(data: np.ndarray, height_limit: int, depth: int = 0) -> dict:\n    \"\"\"Build a randomly split isolation tree.\"\"\"\n    if data.shape[0] <= 1 or depth >= height_limit:\n        return {'c': data.shape[0]}\n\n    feature = np.random.randint(data.shape[1])\n    min_val, max_val = data[:, feature].min(), data[:, feature].max()\n    if min_val == max_val:\n        threshold = min_val\n    else:\n        threshold = np.random.uniform(min_val, max_val)\n\n    left = data[data[:, feature] <= threshold]\n    right = data[data[:, feature] > threshold]\n\n    return {\n        'feature': feature,\n        'threshold': threshold,\n        'left': build_tree(left, height_limit, depth + 1),\n        'right': build_tree(right, height_limit, depth + 1)\n    }\n\ndef path_length(tree: dict, x: np.ndarray) -> float:\n    \"\"\"Calculate path length of x in the isolation tree.\"\"\"\n    while True:\n        if 'c' in tree:\n            return tree['c']\n        if x[tree['feature']] <= tree['threshold']:\n            tree = tree['left']\n        else:\n            tree = tree['right']\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> List[int]:\n    \"\"\"Tiny Isolation Forest implementation.\"\"\"\n    n_samples = data.shape[0]\n    if sample_size >= n_samples:\n        sample_indices = np.arange(n_samples)\n    else:\n        sample_indices = np.random.choice(n_samples, sample_size, replace=False)\n\n    trees = []\n    height_limit = math.ceil(math.log2(sample_size))\n    for _ in range(n_trees):\n        sample_data = data[sample_indices]\n        trees.append(build_tree(sample_data, height_limit))\n\n    path_lengths = np.zeros(n_samples)\n    for i in range(n_samples):\n        for tree in trees:\n            path_lengths[i] += path_length(tree, data[i])\n\n    path_lengths /= n_trees\n    c_n = average_path_length(sample_size)\n    anomaly_scores = 2.0 ** (-path_lengths / c_n)\n\n    threshold = np.sort(anomaly_scores)[int((1 - epsilon) * n_samples)]\n    outlier_indices = np.where(anomaly_scores >= threshold)[0].tolist()\n    \n    return sorted(outlier_indices)\n```\n\nThis script provides everything needed to detect outliers in a dataset using a small-scale version of the Isolation Forest algorithm, as specified in the task description."}
{"task_id": 568, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef compute_features(X, y, feature_map):\n    \"\"\"Compute the empirical distribution of features given labels.\"\"\"\n    feature_count = defaultdict(float)\n    for i, label in enumerate(y):\n        for j, value in enumerate(X[i]):\n            feature_count[(j, value, label)] += 1\n    return feature_count\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    # Initialize a feature map and weights\n    unique_features = np.unique(X_train)\n    unique_labels = np.unique(y_train)\n    weights = defaultdict(float)\n    \n    # Compute the empirical distribution\n    feature_count = compute_features(X_train, y_train, unique_features)\n    total_samples = len(y_train)\n\n    # Generalized Iterative Scaling (GIS)\n    for _ in range(n_iter):\n        largest_update = 0\n        for (j, value, label), count in feature_count.items():\n            empirical_prob = count / total_samples\n\n            model_prob = 0\n            for y in unique_labels:\n                score = sum(weights[(f, v, y)] for (f, v, _), _ in feature_count.items() if f == j and v == value)\n                model_prob += math.exp(score) if y == label else 0\n            \n            total_prob = sum(math.exp(sum(weights[(f, v, y)] for (f, v, _), _ in feature_count.items() if f == j and v == value)) for y in unique_labels)\n            model_prob /= total_prob\n            \n            update = math.log(empirical_prob / model_prob) if model_prob > 0 else 0\n            weights[(j, value, label)] += update\n            largest_update = max(largest_update, abs(update))\n        \n        if largest_update < epsilon:\n            break\n\n    # Predict labels for X_test\n    predictions = []\n    for x in X_test:\n        label_scores = defaultdict(float)\n        for y in unique_labels:\n            score = 0.0\n            for j, value in enumerate(x):\n                if (j, value, y) in weights:\n                    score += weights[(j, value, y)]\n            label_scores[y] = score\n        predictions.append(max(label_scores, key=label_scores.get))\n    \n    return predictions\n\n# Example usage\nX_train = np.array([\n    [1, 2, 1],\n    [2, 1, 2],\n    [1, 2, 2],\n    [2, 2, 1],\n])\ny_train = np.array([0, 1, 0, 1])\nX_test = np.array([\n    [1, 1, 2],\n    [2, 2, 2],\n])\n\npredictions = maxent_predict(X_train, y_train, X_test)\nprint(predictions)  # Output depends on the convergence of the algorithm\n```\nThis implementation simulates training a Maximum Entropy (MaxEnt) classifier using Generalized Iterative Scaling (GIS) and predicts the labels of a test set. It employs a weight vector to store and update the learned feature weights, using the training data `X_train` and `y_train` to compute empirical statistics and iteratively adjust the weights to fit the model distribution to the empirical one. The function then classifies the `X_test` data with the learned weights, predicting the label that maximizes the conditional probability P(y|x)."}
{"task_id": 569, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                 ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    doc_count = len(data)\n    word_presence = Counter()\n\n    for _, words in data:\n        word_presence.update(set(words))\n\n    word_ratios = [(word, round(count/doc_count, 4)) for word, count in word_presence.items()]\n    word_ratios.sort(key=lambda x: (-x[1], x[0]))\n\n    top_words = {word for word, _ in word_ratios[:cut_off]} if cut_off is not None else set(word for word, _ in word_ratios)\n\n    return word_ratios, top_words\n\n# Example usage:\ndata = [\n    ('doc1', ['apple', 'banana', 'cherry']),\n    ('doc2', ['apple', 'cherry', 'cherry', 'date']),\n    ('doc3', ['banana', 'date'])\n]\n\nword_ratios, top_words = statistic_key_word(data, 2)\nprint(word_ratios)\nprint(top_words)\n```\n\n# This function `statistic_key_word` correctly implements the task's requirements. It calculates the document-frequency ratio for each word across the provided documents and returns the results as specified. The example usage at the bottom of the script demonstrates how to call the function with sample data and a cut-off value of 2.\n```"}
{"task_id": 571, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute the weight vector\n    w = np.dot(X.T, alpha * y)\n    \n    # Compute the bias term\n    b = np.mean(y - np.dot(X, w))\n    \n    # Round w and b to 4 decimal places and convert w to a list\n    w_list = [round(val, 4) for val in w]\n    b = round(b, 4)\n    \n    return w_list, b\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y = np.array([1, 1, -1, -1])\n# alpha = np.array([0.1, 0.2, 0.3, 0.4])\n# print(compute_svm_parameters(X, y, alpha))\n```\n\nThis code block provides a self-contained Python script that implements the `compute_svm_parameters` function as requested, and follows the instructions and constraints specified in the task description."}
{"task_id": 572, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef euclidean_distance(point1, point2):\n    \"\"\"Compute the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((point1 - point2) ** 2))\n\ndef pairwise_euclidean_distances(data):\n    \"\"\"Compute the Euclidean distance matrix for a dataset.\"\"\"\n    n_samples = data.shape[0]\n    dist_matrix = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i, n_samples):\n            dist = euclidean_distance(data[i], data[j])\n            dist_matrix[i][j] = dist\n            dist_matrix[j][i] = dist\n    return dist_matrix\n\ndef k_distance_and_nearest_neighbors(dist_matrix, k):\n    \"\"\"Find the k-distance and indexes of the k nearest neighbors for each point.\"\"\"\n    k_distances = []\n    neighbors = []\n    for i in range(dist_matrix.shape[0]):\n        sorted_indices = np.argsort(dist_matrix[i])\n        k_nearest_indices = sorted_indices[1:k+1]  # exclude self\n        k_dist = dist_matrix[i][k_nearest_indices[-1]]\n        k_distances.append(k_dist)\n        neighbors.append(k_nearest_indices)\n    return k_distances, neighbors\n\ndef reachability_distance(dist_matrix, k_distances, point1, point2):\n    \"\"\"Calculate reachability distance.\"\"\"\n    return max(k_distances[point2], dist_matrix[point1][point2])\n\ndef local_reachability_density(dist_matrix, k_distances, neighbors, point):\n    \"\"\"Calculate Local Reachability Density for a given point.\"\"\"\n    reach_dists = [reachability_distance(dist_matrix, k_distances, point, neighbor) for neighbor in neighbors[point]]\n    return len(neighbors[point]) / np.sum(reach_dists)\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Compute the Local Outlier Factor (LOF) score for each point in the dataset.\"\"\"\n    dist_matrix = pairwise_euclidean_distances(data)\n    k_distances, neighbors = k_distance_and_nearest_neighbors(dist_matrix, k)\n    \n    lrd = [local_reachability_density(dist_matrix, k_distances, neighbors, point) for point in range(data.shape[0])]\n    lof_scores = []\n    \n    for point in range(data.shape[0]):\n        lrd_nk_sum = np.sum([lrd[neighbor] for neighbor in neighbors[point]])\n        lof = (lrd_nk_sum / k) / lrd[point]\n        lof_scores.append(lof)\n    \n    lof_scores = np.round(lof_scores, decimals=4)\n    outlier_indices = [i for i, score in enumerate(lof_scores) if score > epsilon]\n    \n    return lof_scores, sorted(outlier_indices)\n\n# Example usage and output:\ndata = np.array([[1, 1], [1, 2], [2, 5], [3, 3], [4, 2], [5, 5], [6, 2]])\nk = 3\nepsilon = 1.5\nscores, outliers = local_outlier_factor(data, k, epsilon)\nprint(\"LOF scores:\", scores)\nprint(\"Outlier indices:\", outliers)\n```\nIn this code, the `local_outlier_factor` function calculates the Local Outlier Factor scores for each data point using the specified parameters. The function first computes the pairwise distances between all points, then it determines the K-distance for each point along with its K nearest neighbors. These values are used to compute the Local Reachability Density (LRD) for each data point, which in turn is used to calculate the Local Outlier Factor scores. The scores rounded to four decimal places are then returned, along with a sorted list of indices of data points that are classified as outliers based on a threshold defined by `epsilon`."}
{"task_id": 574, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n\n    X_train = []\n    X_val = []\n    y_train = []\n    y_val = []\n\n    for c in range(m):\n        base = 10 * (c // 2)\n\n        # Training data\n        X_train_c = np.array([\n            [round(random.uniform(base + 1, base + 9), 4),\n             round(random.uniform(base + 1, base + 9), 4)]\n            for _ in range(n_train)\n        ])\n        y_train.extend([c] * n_train)\n\n        # Validation data\n        X_val_c = np.array([\n            [round(random.uniform(base + 1, base + 9), 4),\n             round(random.uniform(base + 1, base + 9), 4)]\n            for _ in range(n_val)\n        ])\n        y_val.extend([c] * n_val)\n\n        X_train.append(X_train_c)\n        X_val.append(X_val_c)\n\n    X_train = np.concatenate(X_train)\n    X_val = np.concatenate(X_val)\n    y_train = np.array(y_train)\n    y_val = np.array(y_val)\n\n    return X_train, X_val, y_train, y_val\n```"}
{"task_id": 579, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    # Initialization step\n    m, d = X.shape\n    centres = np.array(X[:k, :])\n    labels = np.zeros(m, dtype=int)\n    \n    for iter in range(max_iters):\n        # Assignment step\n        new_labels = np.zeros(m, dtype=int)\n        for i in range(m):\n            distances = np.linalg.norm(centres - X[i], axis=1)\n            new_labels[i] = np.argmin(distances)\n        \n        # Break if labels haven't changed\n        if np.array_equal(new_labels, labels):\n            break\n        else:\n            labels = new_labels\n\n        # Update step\n        for j in range(k):\n            cluster_points = X[labels == j]\n            if len(cluster_points) > 0:\n                centres[j] = np.mean(cluster_points, axis=0)\n    \n    # Round the coordinates of the final centres\n    rounded_centres = np.round(centres, decimals=4).tolist()\n    \n    return labels.tolist(), rounded_centres\n```"}
{"task_id": 581, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    m, n = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n\n    if learning_rate == 0 or iterations == 0:\n        return [round(weight, 4) for weight in weights], round(bias, 4)\n\n    for _ in range(iterations):\n        y_pred = np.dot(X, weights) + bias\n        residuals = y - y_pred\n\n        weight_gradients = -2 * np.dot(X.T, residuals) / m\n        for j in range(n):\n            weight_gradients[j] += (l1_penalty * np.sign(weights[j]) if weights[j] != 0 else -l1_penalty) + 2 * l2_penalty * weights[j]\n\n        bias_gradient = -2 * np.sum(residuals) / m\n\n        weights -= learning_rate * weight_gradients\n        bias -= learning_rate * bias_gradient\n\n    return [round(weight, 4) for weight in weights], round(bias, 4)\n```"}
{"task_id": 591, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    \n    def relu(x):\n        \"\"\"ReLU activation function.\"\"\"\n        return np.maximum(0, x)\n    \n    # Convert input feature vector to numpy array and append a 1 for the bias term\n    input_vector = np.array(x + [1])\n    \n    for layer_idx, layer_weights in enumerate(weights):\n        # Convert layer_weights to a numpy array for matrix multiplication\n        layer_weights = np.array(layer_weights)\n        \n        # The next input is the result of the activation function of the weighted outputs\n        next_input = np.matmul(layer_weights, input_vector)\n        \n        # Apply ReLU activation for all but the last layer\n        if layer_idx < len(weights) - 1:\n            next_input = relu(next_input)\n        \n        # Add the bias term for the next layer (1) if it's not the last layer\n        input_vector = np.append(next_input, 1) if layer_idx < len(weights) - 1 else next_input\n    \n    # The final result, should it have more than one output, is the input_vector now.\n    # We need to make sure it is rounded and converted to the proper type.\n    result = np.round(input_vector, decimals=4).tolist()\n    # If there's only one output, return a float; otherwise, return a list of floats.\n    return result[0] if len(result) == 1 else result\n\n# Example usage:\nweights_example = [\n    [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]],  # Layer 0 weights\n    [[7.0, 8.0, 9.0], [10.0, 11.0, 12.0], [13.0, 14.0, 15.0]],  # Layer 1 weights\n    [[16.0, 17.0, 18.0, 19.0]]  # Layer 2 weights (output layer)\n]\ninput_example = [0.5, 1.0]\nprediction = neural_net_predict(weights_example, input_example)\nprint(prediction)  # Output will vary based on the weights and input provided\n```"}
{"task_id": 595, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"\n    Perform k-means clustering and return the centroids of the clusters.\n    \n    Parameters:\n    X (np.ndarray): n_samples \u00d7 n_features array containing the samples.\n    k (int): The number of clusters to form.\n    max_iters (int): The maximum number of iterations for the algorithm. Default is 100.\n    \n    Returns:\n    list[list[float]]: A list of centroids, each centroid is a list of float values rounded to 4 decimal places.\n    \"\"\"\n    n_samples, n_features = X.shape\n    centroids = X[:k].copy()\n\n    for _ in range(max_iters):\n        # Assign each sample to the nearest centroid\n        distances = np.sum((X[:, np.newaxis, :] - centroids) ** 2, axis=2)\n        closest_centroids = np.argmin(distances, axis=1)\n        \n        # Update centroids to the mean of the assigned samples\n        new_centroids = np.array([X[closest_centroids == i].mean(axis=0) if np.any(closest_centroids == i) else centroids[i] for i in range(k)])\n        \n        # Check for convergence\n        if np.all(np.abs(new_centroids - centroids) < 1e-4):\n            break\n        centroids = new_centroids\n\n    # Sort centroids in ascending lexicographical order and round to 4 decimal places\n    sorted_centroids = np.round(np.sort(centroids, axis=0), 4).tolist()\n    \n    return sorted_centroids\n\n# Example usage\nif __name__ == \"__main__\":\n    np.random.seed(0)  # For reproducible random results\n    X = np.random.rand(100, 2)  # Generate random samples\n    k = 3  # Number of clusters\n    centroids = kmeans_centroids(X, k)\n    print(\"Final centroids:\")\n    for centroid in centroids:\n        print(centroid)\n```\n\nThis script implements the k-means clustering algorithm from scratch according to the provided description. It includes the initialization, iteration up to `max_iters` or until convergence, and handling of empty clusters. The centroids are sorted and rounded as specified before returning them as a list of lists."}
