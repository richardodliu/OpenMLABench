{"task_id": 0, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Implements Ridge Regression using the closed-form solution.\n    \n    Parameters:\n    - data: np.ndarray, the input data where the last column is the target y and the preceding columns are the features X.\n    - alpha: float, the regularization strength. Default is 0.0.\n    \n    Returns:\n    - list[float]: The weight vector rounded to 4 decimal places. Returns -1 if the matrix is not invertible.\n    \"\"\"\n    # Separate features and target\n    X = data[:, :-1]\n    y = data[:, -1]\n    \n    # Add bias term\n    X = np.c_[np.ones(X.shape[0]), X]\n    \n    # Identity matrix with the size of X's columns\n    I = np.eye(X.shape[1])\n    \n    # Compute the matrix to be inverted\n    matrix = np.dot(X.T, X) + alpha * I\n    \n    # Check if the matrix is invertible\n    if np.linalg.det(matrix) == 0:\n        return -1\n    \n    # Compute the weights\n    weights = np.dot(np.linalg.inv(matrix), np.dot(X.T, y))\n    \n    # Return the weights rounded to 4 decimal places\n    return [round(w, 4) for w in weights]\n\n# Example usage\ndata = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nalpha = 0.1\nprint(ridge_regression(data, alpha))\n```\n\nThis script defines a function `ridge_regression` that implements Ridge Regression using the closed-form solution. It takes an ndarray `data` and a regularization strength `alpha` as inputs, and returns the weight vector rounded to 4 decimal places. If the matrix to be inverted is not invertible, it returns -1."}
{"task_id": 1, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    updates = 0\n\n    # Compute the Gram matrix\n    K = np.dot(X_train, X_train.T)\n\n    while updates < n_iter:\n        updated = False\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * K[:, i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n                updates += 1\n        if not updated:\n            break\n\n    # Compute the primal weight vector w\n    w = np.dot(alpha * y_train, X_train).tolist()\n    w = [round(x, 4) for x in w]\n    b = round(b, 4)\n\n    return w, b\n\n# Example usage\nif __name__ == \"__main__\":\n    X_train = np.array([[3, 3], [4, 3], [1, 1]])\n    y_train = np.array([1, 1, -1])\n    w, b = perceptron_dual(X_train, y_train)\n    print(f\"Weight vector w: {w}\")\n    print(f\"Bias b: {b}\")\n```\n\nThis script implements the dual-form perceptron learning algorithm as described in the task. It includes the computation of the Gram matrix, the update rules for the dual parameters `alpha` and the bias `b`, and the final computation of the primal weight vector `w`. The example usage at the end demonstrates how to call the function with a simple dataset."}
{"task_id": 2, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1 / (1 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return mu * (1 - mu)\n\n    return {\n        \"identity\": {\n            \"link\": identity_link,\n            \"inv_link\": identity_inv_link,\n            \"derivative\": identity_derivative\n        },\n        \"log\": {\n            \"link\": log_link,\n            \"inv_link\": log_inv_link,\n            \"derivative\": log_derivative\n        },\n        \"logit\": {\n            \"link\": logit_link,\n            \"inv_link\": logit_inv_link,\n            \"derivative\": logit_derivative\n        }\n    }\n\n# Example usage\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links[\"logit\"][\"link\"](mu)\nmu2 = links[\"logit\"][\"inv_link\"](eta)\n\n# Output with precision of 4 decimal places\nprint(np.round(eta, 4))  # \u2192 [-1.3863, 1.3863]\nprint(np.round(mu2, 4))  # \u2192 [0.2, 0.8]\n```"}
{"task_id": 3, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    \n    def build_tree(indices, depth=0):\n        if len(indices) < 3:\n            return depth, indices\n        feature = np.random.randint(data.shape[1])\n        down = np.min(data[indices, feature])\n        up = np.max(data[indices, feature])\n        split_value = np.random.uniform(down, up)\n        left_indices = [i for i in indices if data[i, feature] <= split_value]\n        right_indices = [i for i in indices if data[i, feature] > split_value]\n        left_depth, left_leaf = build_tree(left_indices, depth + 1)\n        right_depth, right_leaf = build_tree(right_indices, depth + 1)\n        return max(left_depth, right_depth), left_leaf + right_leaf\n    \n    _, leaf_indices = build_tree(list(range(data.shape[0])))\n    depths = [0] * data.shape[0]\n    for depth, indices in enumerate(leaf_indices):\n        for index in indices:\n            depths[index] = depth\n    return depths\n\n# Example usage\ndata = np.arange(5).reshape(-1, 1)\nprint(isolation_tree_path_length(data))\n```\n\nThis script defines a function `isolation_tree_path_length` that builds an isolation tree according to the specified rules and returns the depth of the leaf reached by each sample. The example usage demonstrates the function with a simple dataset, and the output should match the expected output given in the task description."}
{"task_id": 7, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                      itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    # Calculate the minimum support count\n    min_support_count = math.ceil(minsup * len(transactions))\n    \n    # Flatten the list of transactions to get all items and count their occurrences\n    all_items = set(item for transaction in transactions for item in transaction)\n    \n    # Initialize the frequent itemsets dictionary\n    frequent_itemsets = {}\n    \n    # Function to find frequent itemsets of a given size\n    def find_frequent(k):\n        if k == 1:\n            # For single items, just count their occurrences\n            item_counts = Counter(item for transaction in transactions for item in set(transaction))\n            for item, count in item_counts.items():\n                if count >= min_support_count:\n                    frequent_itemsets[(item,)] = count\n        else:\n            # Generate candidate itemsets of size k\n            candidates = set(combinations(all_items, k))\n            candidate_counts = Counter()\n            for transaction in transactions:\n                transaction_set = set(transaction)\n                for candidate in candidates:\n                    if set(candidate).issubset(transaction_set):\n                        candidate_counts[candidate] += 1\n            # Filter candidates to find frequent itemsets\n            for candidate, count in candidate_counts.items():\n                if count >= min_support_count:\n                    frequent_itemsets[candidate] = count\n    \n    # Start with single items and increase the size until no frequent itemsets are found\n    k = 1\n    while True:\n        find_frequent(k)\n        if not frequent_itemsets:\n            break\n        k += 1\n    \n    return frequent_itemsets\n\n# Example usage\ntransactions = [\n    ['bread', 'milk'],\n    ['bread', 'diaper', 'beer', 'egg'],\n    ['milk', 'diaper', 'beer', 'coke'],\n    ['bread', 'milk', 'diaper', 'beer'],\n    ['bread', 'milk', 'diaper', 'coke']\n]\nminsup = 0.6\nprint(find_frequent_itemsets(transactions, minsup))\n```\n\nThis script defines the `find_frequent_itemsets` function that implements the logic to find all frequent itemsets in a given list of transactions based on a minimum support threshold. The function iteratively finds frequent itemsets of increasing size until no more frequent itemsets can be found."}
{"task_id": 11, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    n_samples, n_features = data.shape\n    centres = np.array(data[:k].copy(), dtype=float)\n    labels = np.zeros(n_samples, dtype=int)\n    for _ in range(max_iter):\n        # Assign each sample to the nearest centre\n        for i in range(n_samples):\n            distances = np.sum((data[i] - centres) ** 2, axis=1)\n            labels[i] = np.argmin(distances)\n        \n        # Recompute centres\n        new_centres = np.zeros((k, n_features))\n        counts = np.zeros(k)\n        for i in range(n_samples):\n            new_centres[labels[i]] += data[i]\n            counts[labels[i]] += 1\n        \n        for i in range(k):\n            if counts[i] > 0:\n                new_centres[i] /= counts[i]\n            else:\n                # If a cluster is empty, reinitialize its centre\n                new_centres[i] = data[np.random.randint(n_samples)]\n        \n        # Check for convergence\n        max_change = np.max(np.linalg.norm(new_centres - centres, axis=1))\n        if max_change < epsilon:\n            break\n        \n        centres = new_centres\n    \n    # Round the centres to 4 decimal places\n    centres = np.round(centres, 4).tolist()\n    return centres, labels.tolist()\n\n# Example usage:\n# data = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# k = 2\n# centres, labels = kmeans(data, k)\n# print(\"Centres:\", centres)\n# print(\"Labels:\", labels)\n```"}
{"task_id": 13, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_users, n_items = data.shape\n    S = np.zeros((n_items, n_items))\n\n    # Step 1: Build the item-item similarity matrix\n    for i in range(n_items):\n        for j in range(i, n_items):\n            common_users = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(common_users) == 0:\n                S[i, j] = S[j, i] = 0\n            else:\n                v1 = data[common_users, i]\n                v2 = data[common_users, j]\n                if criterion == 'cosine':\n                    if np.std(v1) > 1e-3:\n                        v1 = v1 - np.mean(v1)\n                    if np.std(v2) > 1e-3:\n                        v2 = v2 - np.mean(v2)\n                    S[i, j] = S[j, i] = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n                elif criterion == 'pearson':\n                    S[i, j] = S[j, i] = np.corrcoef(v1, v2)[0, 1]\n\n    # Step 2: Collect the indices of the items the active user has rated\n    rated_items = np.where(data[user_ind] > 0)[0]\n    ratings = data[user_ind, rated_items]\n\n    # Step 3: Compute the predicted attractiveness for each unrated item\n    scores = defaultdict(float)\n    for t in range(n_items):\n        if t not in rated_items:\n            numerator = 0\n            denominator = 0\n            for i, r in zip(rated_items, ratings):\n                numerator += r * S[t, i]\n                denominator += abs(S[t, i])\n            if denominator != 0:\n                scores[t] = numerator / denominator\n\n    # Step 4: Return the indices of the k most promising items\n    top_items = sorted(scores.items(), key=lambda x: (-x[1], x[0]))[:k]\n    return [item[0] for item in top_items]\n\n# Example usage:\ndata = np.array([\n    [5, 3, 0, 1],\n    [4, 0, 0, 1],\n    [1, 1, 0, 5],\n    [1, 0, 0, 4],\n    [0, 1, 5, 4]\n])\nuser_ind = 0\nk = 2\ncriterion = 'cosine'\nprint(knn_recommend(data, user_ind, k, criterion))  # Output: [2]\n```\n\nThis code implements the item-based k-NN collaborative filtering recommender as described in the task. It first builds an item-item similarity matrix based on the specified criterion, then computes the predicted attractiveness for each unrated item for the active user, and finally returns the indices of the most promising items."}
{"task_id": 19, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_gain = -np.inf\n    best_split = None\n\n    for feature_index in range(n_features):\n        # Sort the data by the current feature\n        sorted_indices = np.argsort(X[:, feature_index])\n        sorted_g = g[sorted_indices]\n        sorted_h = h[sorted_indices]\n        sorted_X = X[sorted_indices, feature_index]\n\n        # Calculate the cumulative sums for g and h\n        cum_g = np.cumsum(sorted_g)\n        cum_h = np.cumsum(sorted_h)\n\n        # Calculate the regularised loss for the parent node\n        parent_loss = -0.5 * (cum_g[-1] ** 2) / (cum_h[-1] + lam) + gamma\n\n        # Iterate over all possible thresholds\n        for i in range(1, n_samples - 1):\n            if sorted_X[i] == sorted_X[i - 1]:\n                continue  # Skip duplicate values\n\n            # Calculate the left and right losses\n            left_loss = -0.5 * (cum_g[i - 1] ** 2) / (cum_h[i - 1] + lam) + gamma\n            right_loss = -0.5 * ((cum_g[-1] - cum_g[i - 1]) ** 2) / (cum_h[-1] - cum_h[i - 1] + lam) + gamma\n\n            # Calculate the gain\n            gain = parent_loss - left_loss - right_loss\n\n            # Update the best split if the current gain is better\n            if gain > best_gain:\n                best_gain = gain\n                best_split = (feature_index, (sorted_X[i] + sorted_X[i - 1]) / 2)\n\n    return best_split if best_gain > 0 else None\n\n# Example usage\nX = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\ng = np.array([1, -1, 1, -1])\nh = np.array([1, 1, 1, 1])\ngamma = 0.1\nlam = 1.0\n\nprint(best_split(X, g, h, gamma, lam))\n```\n\nThis script defines the `best_split` function that computes the best split for a node in a gradient-boosting tree based on the gain. It iterates over all features and all possible thresholds, calculating the gain for each potential split and returning the one with the highest gain if it is positive."}
{"task_id": 20, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Convert input to a NumPy array if it's a list\n    if isinstance(x, list):\n        x = np.array(x)\n    \n    # Compute sigmoid\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    \n    # Compute gradient of sigmoid\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    \n    # Round results to 4 decimal places\n    sigmoid_x = np.round(sigmoid_x, 4)\n    gradient_x = np.round(gradient_x, 4)\n    \n    # Convert back to Python list if input was not a scalar\n    if not np.isscalar(x):\n        sigmoid_x = sigmoid_x.tolist()\n        gradient_x = gradient_x.tolist()\n    \n    return sigmoid_x, gradient_x\n\n# Example usage:\n# scalar input\nprint(sigmoid_activation(0.5))\n# list input\nprint(sigmoid_activation([0.5, -0.5]))\n# numpy array input\nprint(sigmoid_activation(np.array([[0.5, -0.5], [-1, 1]])))\n```\n\nThis script defines the `sigmoid_activation` function that computes the sigmoid of the input and its gradient, adhering to the specified requirements. It handles scalar, list, and NumPy array inputs, and ensures the output is rounded to 4 decimal places and formatted as requested."}
{"task_id": 21, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n_samples = len(x_train)\n    sample_weights = np.full(n_samples, 1 / n_samples)\n    stumps = []\n    alphas = []\n\n    # Sort the training data\n    sorted_indices = np.argsort(x_train)\n    x_train_sorted = np.array(x_train)[sorted_indices]\n    y_train_sorted = np.array(y_train)[sorted_indices]\n\n    while True:\n        min_error = float('inf')\n        best_stump = None\n        best_alpha = None\n\n        # Enumerate all possible stumps\n        for i in range(n_samples - 1):\n            threshold = (x_train_sorted[i] + x_train_sorted[i + 1]) / 2\n            for d in [0, 1]:\n                stump = (d, threshold)\n                error = 0\n                for j in range(n_samples):\n                    prediction = 1 if (d == 0 and x_train_sorted[j] <= threshold) or (d == 1 and x_train_sorted[j] > threshold) else -1\n                    if prediction != y_train_sorted[j]:\n                        error += sample_weights[j]\n                if error < min_error:\n                    min_error = error\n                    best_stump = stump\n                    best_alpha = 0.5 * math.log((1 - error) / error)\n\n        # Update sample weights\n        for i in range(n_samples):\n            prediction = 1 if (best_stump[0] == 0 and x_train_sorted[i] <= best_stump[1]) or (best_stump[0] == 1 and x_train_sorted[i] > best_stump[1]) else -1\n            if prediction != y_train_sorted[i]:\n                sample_weights[i] *= math.exp(best_alpha)\n            else:\n                sample_weights[i] *= math.exp(-best_alpha)\n        sample_weights /= np.sum(sample_weights)\n\n        stumps.append(best_stump)\n        alphas.append(best_alpha)\n\n        # Check training error\n        predictions = np.zeros(n_samples)\n        for i in range(len(stumps)):\n            for j in range(n_samples):\n                prediction = 1 if (stumps[i][0] == 0 and x_train_sorted[j] <= stumps[i][1]) or (stumps[i][0] == 1 and x_train_sorted[j] > stumps[i][1]) else -1\n                predictions[j] += alphas[i] * prediction\n        training_error = np.mean(np.sign(predictions) != y_train_sorted)\n        if training_error <= epsilon:\n            break\n\n    # Make predictions on test data\n    test_predictions = np.zeros(len(x_test))\n    for i in range(len(stumps)):\n        for j in range(len(x_test)):\n            prediction = 1 if (stumps[i][0] == 0 and x_test[j] <= stumps[i][1]) or (stumps[i][0] == 1 and x_test[j] > stumps[i][1]) else -1\n            test_predictions[j] += alphas[i] * prediction\n    return np.sign(test_predictions).astype(int).tolist()\n\n# Example usage\nx_train = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]\ny_train = [1, 1, 1, -1, -1, -1, 1, 1, 1, -1]\nx_test = [1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5]\npredictions = adaboost_1d_predict(x_train, y_train, x_test, epsilon=0.1)\nprint(predictions)\n```\n\nThis script implements the AdaBoost algorithm with one-dimensional decision stumps as described in the task. It sorts the training data, iteratively selects the best stump based on the minimum weighted error, updates the sample weights, and stops when the training error is below the specified threshold. The function returns predictions for the test set based on the trained ensemble."}
{"task_id": 25, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    n, d = X_train.shape\n    m = X_test.shape[0]\n    y_train = y_train.reshape(-1, 1)\n    alpha = alpha.reshape(-1, 1)\n\n    # Compute the kernel matrix between X_train and X_test\n    K = np.exp(-gamma * np.sum((X_train[:, np.newaxis, :] - X_test) ** 2, axis=2))\n\n    # Compute the decision function for each test sample\n    g = np.sum(alpha * y_train * K, axis=0) + b\n\n    # Predict the labels based on the sign of the decision function\n    predictions = np.sign(g).astype(int).tolist()\n\n    return predictions\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4]])\n# y_train = np.array([1, -1, 1])\n# alpha = np.array([0.5, 0.2, 0.3])\n# b = 0.1\n# gamma = 0.5\n# X_test = np.array([[1, 1], [4, 4]])\n# print(gaussian_svm_predict(X_train, y_train, alpha, b, gamma, X_test))\n```\n\nThis script defines a function `gaussian_svm_predict` that takes in the necessary parameters to predict labels for test samples using a Gaussian-kernel SVM. The function is fully vectorized and uses only NumPy for its computations, adhering to the constraints provided."}
{"task_id": 28, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    # Convert the list of lists to a numpy array\n    X_np = np.array(X)\n    m, n = X_np.shape\n    \n    # Check if k is within the valid range\n    if k < 1 or k > min(m, n):\n        return -1\n    \n    # Perform SVD\n    U, S, VT = np.linalg.svd(X_np, full_matrices=False)\n    \n    # Truncate to k components\n    U_k = U[:, :k]\n    S_k = S[:k]\n    VT_k = VT[:k, :]\n    \n    # Reconstruct the matrix\n    X_hat_np = U_k @ np.diag(S_k) @ VT_k\n    \n    # Calculate the mean squared error\n    mse = np.mean((X_np - X_hat_np) ** 2)\n    \n    # Convert back to list of lists and round to 4 decimals\n    X_hat = np.round(X_hat_np, 4).tolist()\n    mse = round(mse, 4)\n    \n    return (X_hat, mse)\n\n# Example usage\nX = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nk = 2\nprint(linear_autoencoder(X, k))\n```\n\nThis script defines the `linear_autoencoder` function that performs the task as described. It uses NumPy for the SVD computation and matrix operations, ensuring efficient and accurate calculations. The function checks the validity of the input `k`, performs the truncated SVD, reconstructs the matrix, and calculates the mean squared error, rounding the results as required."}
{"task_id": 29, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                           y_train: list[float] | np.ndarray,\n                           x_query: float,\n                           epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    indices = np.argsort(x_train)\n    x_train = x_train[indices]\n    y_train = y_train[indices]\n    \n    residuals = y_train\n    stumps = []\n    \n    while True:\n        rss = np.sum(residuals**2)\n        if rss < epsilon:\n            break\n        \n        best_rss = float('inf')\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n        \n        for i in range(len(x_train) - 1):\n            split = (x_train[i] + x_train[i + 1]) / 2\n            c1 = np.mean(residuals[x_train <= split])\n            c2 = np.mean(residuals[x_train > split])\n            rss = np.sum((residuals - (c1 * (x_train <= split) + c2 * (x_train > split)))**2)\n            \n            if rss < best_rss:\n                best_rss = rss\n                best_split = split\n                best_c1 = c1\n                best_c2 = c2\n        \n        stumps.append((best_split, best_c1, best_c2))\n        residuals -= best_c1 * (x_train <= best_split) + best_c2 * (x_train > best_split)\n    \n    prediction = sum(c1 if x_query <= split else c2 for split, c1, c2 in stumps)\n    return round(prediction, 4)\n\n# Example usage:\nx_train = [1, 2, 3, 4, 5]\ny_train = [1, 2, 3, 4, 5]\nx_query = 3.5\nprint(predict_boosting_tree(x_train, y_train, x_query))\n```\n\nThis script defines the `predict_boosting_tree` function that implements a simple 1-D gradient boosting model using decision stumps. The function sorts the training data, iteratively adds the best stump to the ensemble, and stops when the residual sum of squares is below a specified tolerance. The prediction for a query point is then calculated and returned, rounded to four decimal places."}
{"task_id": 34, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None) -> np.ndarray | int:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s based on the specified shape and sparsity.\n    \n    Parameters:\n    - shape: A tuple of integers representing the desired shape of the tensor.\n    - sparsity: A float in the range [0, 1] representing the probability of generating a 1.0.\n    - seed: An optional integer seed for reproducibility.\n    \n    Returns:\n    - A NumPy array of the specified shape and sparsity, with dtype float.\n    - -1 if the sparsity is outside the range [0, 1].\n    \"\"\"\n    if not (0 <= sparsity <= 1):\n        return -1\n    \n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Generate a random array and apply the sparsity threshold\n    random_array = np.random.rand(*shape)\n    binary_tensor = (random_array >= (1 - sparsity)).astype(float)\n    \n    return binary_tensor\n\n# Example usage\nshape = (2, 3)\nsparsity = 0.3\nseed = 42\nresult = random_binary_tensor(shape, sparsity, seed)\nprint(result)\n```\n\nThis script defines the `random_binary_tensor` function according to the specifications provided. It checks if the sparsity is within the valid range, optionally sets a seed for reproducibility, and then generates a binary tensor with the specified sparsity. The example usage demonstrates how to call the function with a specific shape, sparsity, and seed, and prints the resulting tensor."}
{"task_id": 39, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    # Find the index of the median value in column `d`\n    n_samples = data.shape[0]\n    median_idx = np.argpartition(data[:, d], n_samples // 2)[n_samples // 2]\n    pivot = median_idx\n    \n    # Get the median value\n    median_value = data[median_idx, d]\n    \n    # Find the indices of the left and right partitions\n    left = np.where(data[:, d] < median_value)[0].tolist()\n    right = np.where(data[:, d] > median_value)[0].tolist()\n    \n    # Sort the left and right lists\n    left.sort()\n    right.sort()\n    \n    return pivot, left, right\n\n# Example usage\nif __name__ == \"__main__\":\n    np.random.seed(0)  # For reproducibility\n    data = np.random.rand(10, 2)\n    d = 1  # Split along the second column\n    pivot, left, right = get_split(data, d)\n    print(f\"Pivot index: {pivot}\")\n    print(f\"Left indices: {left}\")\n    print(f\"Right indices: {right}\")\n```\n\nThis script defines the `get_split` function that performs a median split on a given 2D NumPy array `data` along a specified column `d`. The function uses `numpy.argpartition` to find the median in linear time, and then it determines the indices of the elements that are strictly less than or greater than the median value. The indices are sorted to ensure deterministic output. The example usage demonstrates how to call the function and print the results."}
{"task_id": 40, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, \"Input signal must be one-dimensional.\"\n    assert stride >= 1, \"Stride must be a positive integer.\"\n    assert len(x) >= frame_width, \"Input signal must be longer than frame width.\"\n    \n    n_frames = (len(x) - frame_width) // stride + 1\n    frame_shape = (n_frames, frame_width)\n    frame_strides = (stride * x.itemsize, x.itemsize)\n    \n    framed_signal = as_strided(x, shape=frame_shape, strides=frame_strides)\n    \n    if not writeable:\n        framed_signal.setflags(write=False)\n    \n    return framed_signal\n\n# Example usage\nx = np.arange(10)\nframe_width = 4\nstride = 2\nwriteable = False\nresult = to_frames(x, frame_width, stride, writeable)\nprint(result)\n```\n\nThis script defines the `to_frames` function as specified, which takes a one-dimensional NumPy array and returns a view on it with overlapping frames. The function uses `numpy.lib.stride_tricks.as_strided` to create the view without copying the data, and it respects the constraints on the input parameters and the writeability of the returned array."}
{"task_id": 48, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Convert input to numpy array if it's a list of lists\n    if isinstance(X, list):\n        X = np.array(X)\n    \n    # Check if the matrix is two-dimensional\n    if X.ndim != 2:\n        return False\n    \n    # Check if all elements are between 0 and 1 inclusive\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    \n    # Check if each row sums to 1 within a tolerance\n    row_sums = X.sum(axis=1)\n    if not np.allclose(row_sums, 1, atol=1e-8):\n        return False\n    \n    return True\n\n# Test cases to verify the correctness of the function\nprint(is_stochastic([[1, 0], [0, 1]]))  # True\nprint(is_stochastic([[0.5, 0.5], [0.2, 0.8]]))  # True\nprint(is_stochastic([[0.5, 0.5], [0.2, 0.7]]))  # False\nprint(is_stochastic([[1, 0, 0], [0, 0.5, 0.5]]))  # False, not square\nprint(is_stochastic([[1, -0.1], [0.1, 0.9]]))  # False, contains negative value\nprint(is_stochastic([[1, 0], [0, 0.999999999]]))  # True, within tolerance\n```"}
{"task_id": 55, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n, d = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    for t in range(max_iter):\n        # Determine the batch indices\n        batch_indices = np.arange(t * batch_size, (t + 1) * batch_size) % n\n        X_batch = X[batch_indices]\n        y_batch = y[batch_indices]\n        \n        # Compute the gradient\n        g = (1 / batch_size) * X_batch.T @ (X_batch @ w - y_batch)\n        \n        # Update the running average of squared gradients\n        s = rho * s + (1 - rho) * g ** 2\n        \n        # Update the weights\n        w -= eta * g / (np.sqrt(s) + eps_station)\n        \n        # Check for early stopping\n        if np.linalg.norm(g) < epsilon:\n            break\n    \n    return [round(x, 4) for x in w.tolist()]\n\n# Example usage:\n# X = np.random.rand(100, 5)\n# y = np.random.rand(100)\n# weights = rms_prop(X, y)\n# print(weights)\n```"}
{"task_id": 56, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n    \"\"\"Computes the SoftPlus activation function or its derivative (sigmoid) for a given input.\n    \n    Args:\n        x: A scalar, Python list, or NumPy array of real values.\n        deriv: A boolean flag indicating whether to return the SoftPlus function (False) or its derivative (True).\n    \n    Returns:\n        A Python list of the SoftPlus function or its derivative, with each value rounded to the nearest 4th decimal.\n        If the input is a scalar, returns a single float.\n    \"\"\"\n    # Convert input to NumPy array for element-wise operations\n    x = np.array(x)\n    \n    if deriv:\n        # Compute the derivative of SoftPlus, which is the sigmoid function\n        result = 1 / (1 + np.exp(-x))\n    else:\n        # Compute SoftPlus using a numerically stable formulation\n        result = np.log1p(np.exp(-np.abs(x))) + np.maximum(x, 0)\n    \n    # Round the result to the nearest 4th decimal\n    result = np.round(result, 4)\n    \n    # Convert back to Python list if necessary\n    if isinstance(x, (list, float, int)):\n        return result.tolist() if isinstance(x, list) else float(result)\n    else:\n        return result.tolist()\n\n# Example usage:\nprint(softplus(0))  # Scalar input\nprint(softplus([0, 1, -1]))  # List input\nprint(softplus(np.array([0, 1, -1]), deriv=True))  # NumPy array input with derivative\n```"}
{"task_id": 58, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nimport numpy as np\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    # Convert the corpus and sequence into n-grams\n    def ngrams(tokens, n):\n        return [' '.join(tokens[i:i+n]) for i in range(len(tokens)-n+1)]\n    \n    # Count the n-grams in the corpus\n    ngram_counts = Counter(ngrams(corpus, N))\n    n_minus_1_gram_counts = Counter(ngrams(corpus, N-1)) if N > 1 else Counter([None])\n    \n    # Calculate the log-probability of the sequence\n    log_prob = 0.0\n    for ngram in ngrams(sequence, N):\n        ngram_count = ngram_counts[ngram]\n        prefix = ' '.join(ngram.split()[:-1]) if N > 1 else None\n        prefix_count = n_minus_1_gram_counts[prefix]\n        \n        if ngram_count == 0 or prefix_count == 0:\n            return float('-inf')\n        \n        log_prob += np.log(ngram_count / prefix_count)\n    \n    return round(log_prob, 4)\n\n# Example usage:\ncorpus = [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\nsequence = [\"the\", \"quick\", \"brown\", \"fox\"]\nN = 2\nprint(unsmoothed_ngram_log_prob(corpus, sequence, N))\n```\n\nThis script defines the function `unsmoothed_ngram_log_prob` which calculates the unsmoothed MLE N-gram log-probability of a given sequence based on a provided corpus. The function uses the `Counter` class from the `collections` module to count the occurrences of n-grams and (n-1)-grams in the corpus. It then calculates the log-probability of the sequence by iterating over its n-grams and applying the MLE formula. If any required count is zero, the function returns negative infinity."}
{"task_id": 62, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef lasso_regression(X: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\", degree: int, reg_factor: float, n_iterations: int = 1000, tol: float = 1e-6) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    m = len(X)\n    X_design = np.vander(X, degree + 1, increasing=True)\n    w = np.zeros(degree + 1)\n    \n    for iteration in range(n_iterations):\n        w_prev = w.copy()\n        for j in range(degree + 1):\n            if j == 0:\n                w[j] = np.mean(y - X_design[:, 1:] @ w[1:])\n            else:\n                rho = X_design[:, j].T @ (y - X_design @ w + w[j] * X_design[:, j])\n                w[j] = np.sign(rho) * max(abs(rho) - reg_factor, 0) / (X_design[:, j].T @ X_design[:, j])\n        \n        if np.max(np.abs(w - w_prev)) < tol:\n            break\n    \n    return [round(coef, 4) for coef in w]\n\n# Example usage:\nX = [1, 2, 3, 4, 5]\ny = [1, 4, 9, 16, 25]\ndegree = 2\nreg_factor = 0.1\nprint(lasso_regression(X, y, degree, reg_factor))\n```\n\nThis script defines the `lasso_regression` function that implements univariate Lasso regression with polynomial features using coordinate descent. The function takes one-dimensional input `X`, target values `y`, a polynomial degree `degree`, a regularisation strength `reg_factor`, and optional parameters for the maximum number of iterations and tolerance for early stopping. It returns the learned coefficients rounded to four decimal places."}
{"task_id": 63, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector for a given time index in a Hidden Markov Model.\n    \n    Parameters:\n    A (list[list[float]]): Transition probability matrix of shape (N, N).\n    B (list[list[float]]): Emission probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices (length T).\n    t (int): Integer time index (0 \u2264 t < T).\n    \n    Returns:\n    list[float]: A list containing the N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    T = len(obs)\n    N = A.shape[0]\n    \n    # Initialize the backward probabilities\n    beta = np.zeros((T, N))\n    beta[T-1, :] = 1\n    \n    # Calculate the backward probabilities\n    for i in range(T-2, t-1, -1):\n        for j in range(N):\n            beta[i, j] = np.sum(A[j, :] * B[:, obs[i+1]] * beta[i+1, :])\n    \n    # Return the backward probabilities at time t, rounded to 4 decimal places\n    return [round(prob, 4) for prob in beta[t, :]]\n\n# Example usage:\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.4, 0.5], [0.7, 0.2, 0.1]]\nobs = [0, 1, 2]\nt = 1\nprint(backward_beta(A, B, obs, t))\n```\n\nThis script defines a function `backward_beta` that calculates the backward probability vector for a given time index in a Hidden Markov Model, as per the task description. The function takes the transition probability matrix `A`, the emission probability matrix `B`, a list of observation indices `obs`, and a time index `t` as inputs. It returns a list of backward probabilities rounded to 4 decimal places."}
{"task_id": 65, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or not pi or not obs:\n        return 0.0\n\n    N = len(A)  # Number of states\n    T = len(obs)  # Length of observation sequence\n\n    # Initialize the backward variables\n    beta = np.zeros((T, N))\n\n    # Base case: beta(T-1, i) = 1 for all states i\n    beta[T-1, :] = 1\n\n    # Recursive case: beta(t, i) = sum_j A[i][j] * B[j][obs[t+1]] * beta(t+1, j)\n    for t in range(T-2, -1, -1):\n        for i in range(N):\n            beta[t, i] = sum(A[i][j] * B[j][obs[t+1]] * beta[t+1, j] for j in range(N))\n\n    # Calculate the sequence probability\n    seq_prob = sum(pi[i] * B[i][obs[0]] * beta[0, i] for i in range(N))\n\n    return round(seq_prob, 6)\n\n# Example usage\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.4, 0.5], [0.7, 0.2, 0.1]]\npi = [0.5, 0.5]\nobs = [0, 1, 2]\n\nprint(backward_prob(A, B, pi, obs))  # Output should be the probability of the observation sequence\n```"}
{"task_id": 69, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    observations = np.array(observations)\n    \n    # Validate input dimensions\n    n = len(S)\n    if A.shape != (n, n) or B.shape[0] != n:\n        return -1\n    \n    m = B.shape[1]\n    if not all(0 <= obs < m for obs in observations):\n        return -1\n    \n    if len(observations) == 0:\n        return -1\n    \n    # Initialize the forward variables\n    T = len(observations)\n    alpha = np.zeros((T, n))\n    \n    # Base case: alpha_1(j) = S(j) * B(j, obs_1)\n    alpha[0, :] = S * B[:, observations[0]]\n    \n    # Inductive step: alpha_t(j) = [sum_i alpha_t-1(i) * A(i, j)] * B(j, obs_t)\n    for t in range(1, T):\n        for j in range(n):\n            alpha[t, j] = np.sum(alpha[t-1] * A[:, j]) * B[j, observations[t]]\n    \n    # The probability of the sequence is the sum of the last alpha values\n    prob = np.sum(alpha[-1])\n    \n    return round(prob, 4)\n\n# Example usage:\nS = [0.5, 0.5]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.4, 0.5], [0.6, 0.3, 0.1]]\nobservations = [0, 1, 2]\n\nprint(forward_algorithm(S, A, B, observations))  # Example output\n```\n\nThis script defines the `forward_algorithm` function that implements the forward algorithm for Hidden Markov Models. It validates the input dimensions and checks the validity of the observation indices. If the input is valid, it proceeds to compute the likelihood of the observation sequence using the forward algorithm and returns the result rounded to 4 decimal places."}
{"task_id": 70, "completion_id": 0, "completion": "```python\nfrom collections import Counter, defaultdict\nfrom typing import List\n\ndef fp_growth(transactions: List[List[str]], min_support: int) -> List[List[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    def build_tree(transactions, headers):\n        root = FPNode(None, None)\n        for transaction in transactions:\n            sorted_items = [item for item in headers if item in transaction]\n            if sorted_items:\n                root.add_transaction(sorted_items)\n        return root\n\n    def mine_tree(node, prefix, frequent_itemsets):\n        for item, count in node.items():\n            new_prefix = prefix + [item]\n            frequent_itemsets.append(new_prefix)\n            conditional_tree = build_tree(node.get_conditional_tree(item), headers)\n            if conditional_tree.root.children:\n                mine_tree(conditional_tree.root, new_prefix, frequent_itemsets)\n\n    class FPNode:\n        def __init__(self, item, count, parent=None):\n            self.item = item\n            self.count = count\n            self.parent = parent\n            self.children = {}\n            self.link = None\n\n        def add_transaction(self, items):\n            if items:\n                next_item = items[0]\n                if next_item in self.children:\n                    self.children[next_item].count += 1\n                else:\n                    self.children[next_item] = FPNode(next_item, 1, self)\n                    if self.link:\n                        current = self.link\n                        while current.link:\n                            current = current.link\n                        current.link = self.children[next_item]\n                    else:\n                        headers[next_item]['header_node'] = self.children[next_item]\n                self.children[next_item].add_transaction(items[1:])\n\n        def get_conditional_tree(self, item):\n            conditional_pattern_base = []\n            node = headers[item]['header_node']\n            while node:\n                pattern = []\n                parent = node.parent\n                while parent and parent.item is not None:\n                    pattern.append(parent.item)\n                    parent = parent.parent\n                if pattern:\n                    conditional_pattern_base.append((pattern, node.count))\n                node = node.link\n            return conditional_pattern_base\n\n    # Count item frequencies and filter out infrequent items\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_support}\n\n    # Sort items by frequency and then lexicographically\n    headers = {item: {'count': count, 'header_node': None} for item, count in sorted(frequent_items.items(), key=lambda x: (-x[1], x[0]))}\n\n    # Build the FP-tree\n    tree = build_tree(transactions, headers)\n\n    # Mine the tree\n    frequent_itemsets = []\n    mine_tree(tree, [], frequent_itemsets)\n\n    # Sort the itemsets\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n\n    return frequent_itemsets\n\n# Example usage\ntransactions = [\n    ['a', 'b', 'c', 'd'],\n    ['b', 'c', 'e'],\n    ['a', 'b', 'c', 'e'],\n    ['a', 'b', 'd', 'e'],\n    ['a', 'b', 'c', 'd']\n]\nmin_support = 2\nprint(fp_growth(transactions, min_support))\n```\n\nThis Python script implements the FP-Growth algorithm to find frequent item-sets in a given list of transactions. The function `fp_growth` takes a list of transactions and a minimum support threshold as input and returns a list of frequent item-sets, sorted as specified. The script includes a simple example usage at the end."}
{"task_id": 75, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if not (1 <= k <= len(X_train)):\n        return -1\n\n    predictions = []\n    for test_sample in X_test:\n        # Compute squared Euclidean distances to all training samples\n        distances = [np.sum((np.array(train_sample) - np.array(test_sample))**2) for train_sample in X_train]\n        \n        # Get indices of the k nearest training samples\n        k_nearest_indices = np.argsort(distances)[:k]\n        \n        # Get the labels of the k nearest training samples\n        k_nearest_labels = [y_train[i] for i in k_nearest_indices]\n        \n        # Find the most common label among the k nearest\n        label_counts = {}\n        for label in k_nearest_labels:\n            if label in label_counts:\n                label_counts[label] += 1\n            else:\n                label_counts[label] = 1\n        \n        # In case of a tie, return the smallest label\n        max_count = max(label_counts.values())\n        best_labels = [label for label, count in label_counts.items() if count == max_count]\n        predicted_label = min(best_labels)\n        \n        predictions.append(predicted_label)\n    \n    return predictions\n\n# Example usage:\nX_train = [[1, 2], [2, 3], [3, 4], [5, 6], [6, 7]]\ny_train = [0, 0, 1, 1, 1]\nX_test = [[2, 2], [5, 5]]\nk = 3\nprint(knn_predict(X_train, y_train, X_test, k))  # Output: [0, 1]\n```"}
{"task_id": 76, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to NumPy arrays for easier manipulation\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    \n    # Add machine epsilon to y_pred to avoid log(0)\n    epsilon = np.finfo(float).eps\n    y_pred = np.clip(y_pred, epsilon, 1.0 - epsilon)\n    \n    # Calculate the categorical cross-entropy loss\n    loss = -np.sum(y * np.log(y_pred))\n    \n    # Return the loss rounded to 4 decimal places\n    return round(loss, 4)\n\n# Example usage\ny = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\ny_pred = [[0.7, 0.2, 0.1], [0.2, 0.6, 0.2], [0.1, 0.1, 0.8]]\nprint(cross_entropy_loss(y, y_pred))\n```\n\nThis code snippet defines a function `cross_entropy_loss` that calculates the unnormalised categorical cross-entropy loss for a batch of one-hot encoded targets and their predicted probabilities. It includes the necessary import statement, the function definition with a docstring, and an example usage that demonstrates how to call the function with sample data."}
{"task_id": 77, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> tuple[list[float], list]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    tuple[list[float], list]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m). Also returns a list of caches.\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2  # number of layers in the neural network\n\n    for l in range(1, L):\n        A_prev = A\n        W = parameters['W' + str(l)]\n        b = parameters['b' + str(l)]\n        Z = np.dot(W, A_prev) + b\n        A = relu(Z)\n        cache = (A_prev, W, b, Z)\n        caches.append(cache)\n    \n    # Output layer\n    W = parameters['W' + str(L)]\n    b = parameters['b' + str(L)]\n    Z = np.dot(W, A) + b\n    AL = sigmoid(Z)\n    cache = (A, W, b, Z)\n    caches.append(cache)\n    \n    # Convert AL to a list and round to 4 decimal places\n    AL_list = [round(x, 4) for x in AL.tolist()[0]]\n    \n    return AL_list, caches\n\ndef relu(Z):\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(0, Z)\n\ndef sigmoid(Z):\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\n\n# Example usage\nif __name__ == \"__main__\":\n    # Example parameters and input\n    parameters = {\n        'W1': np.array([[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]]),\n        'b1': np.array([[0.1], [0.2], [0.3]]),\n        'W2': np.array([[0.1, 0.2, 0.3]]),\n        'b2': np.array([[0.1]])\n    }\n    X = np.array([[1, 2], [3, 4]])\n\n    AL, caches = L_model_forward(X, parameters)\n    print(\"Final activation AL:\", AL)\n    print(\"Caches:\", caches)\n```\n\nThis script defines the `L_model_forward` function for forward propagation in an L-layer neural network with ReLU activations in the hidden layers and a sigmoid activation in the output layer. It also includes helper functions for the ReLU and sigmoid activation functions. The example usage at the bottom demonstrates how to use the function with a simple set of parameters and an input matrix."}
{"task_id": 81, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    # Ensure A2 is within [\u03b5, 1-\u03b5] to avoid log(0) and log(1) issues\n    epsilon = 1e-15\n    A2 = np.clip(A2, epsilon, 1 - epsilon)\n    \n    # Number of samples\n    m = Y.shape[1] if len(Y.shape) == 2 else Y.size\n    \n    # Compute the binary cross-entropy cost\n    cost = -1/m * np.sum(Y * np.log(A2) + (1 - Y) * np.log(1 - A2))\n    \n    # Return the cost rounded to 6 decimal places\n    return round(float(cost), 6)\n\n# Example usage\nA2 = np.array([[0.9, 0.1, 0.8, 0.2]])\nY = np.array([[1, 0, 1, 0]])\nprint(compute_cost(A2, Y))  # Expected output: 0.351036\n```"}
{"task_id": 82, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | np.ndarray, epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    n = len(Q)\n    greedy_index = np.argmax(Q)\n    base_prob = epsilon / n\n    greedy_prob = 1 - epsilon + base_prob\n    \n    probabilities = [round(base_prob, 4) for _ in range(n)]\n    probabilities[greedy_index] = round(greedy_prob, 4)\n    \n    # Ensure the probabilities sum to 1 within the numerical tolerance\n    if abs(sum(probabilities) - 1) > 1e-12:\n        probabilities[greedy_index] += round(1 - sum(probabilities), 4)\n    \n    return probabilities\n\n# Example usage\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1\nprint(epsilon_soft(Q, epsilon))\n```\n\nThis script defines the `epsilon_soft` function that calculates the \u03b5-soft probabilities for a given set of Q-values and an exploration parameter \u03b5. The function ensures that the probabilities sum to 1 within a specified tolerance and rounds the probabilities to 4 decimal places."}
{"task_id": 86, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nfrom typing import List, Union\n\ndef aggregate_random_forest_votes(predictions: List[List[Union[int, float, str]]]) -> List[Union[int, float, str]]:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    # Transpose the predictions to group predictions by sample\n    transposed_predictions = list(zip(*predictions))\n    \n    # Aggregate predictions for each sample\n    aggregated_predictions = []\n    for sample_predictions in transposed_predictions:\n        # Count the occurrences of each prediction\n        prediction_counts = Counter(sample_predictions)\n        # Find the prediction with the highest count\n        # In case of a tie, the smallest label is chosen due to the nature of min\n        aggregated_predictions.append(min(prediction_counts, key=lambda k: (-prediction_counts[k], k)))\n    \n    return aggregated_predictions\n\n# Example usage\npredictions = [\n    [1, 2, 1, 2],\n    [1, 1, 2, 2],\n    [2, 2, 1, 1]\n]\n\nprint(aggregate_random_forest_votes(predictions))  # Output: [1, 2, 1, 2]\n```"}
{"task_id": 88, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already one\n    z = np.array(z) if not isinstance(z, np.ndarray) else z\n    \n    # Compute the softplus values using the numerically stable identity\n    result = np.logaddexp(0.0, z)\n    \n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n    \n    # Convert back to a Python list if the input was not a scalar\n    if z.shape:\n        return result.tolist()\n    else:\n        return float(result)\n\n# Example usage\nz = np.array([-1000, 0, 3])\nprint(softplus(z))  # Output: [0.0, 0.6931, 3.0486]\n```"}
{"task_id": 90, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Check if policy has estimates and if they are not empty\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    \n    # Extract true expected values and policy estimates\n    true_evs = bandit.arm_evs\n    estimates = policy.ev_estimates\n    \n    # Sort estimates by arm index\n    sorted_estimates = [estimates[i] for i in sorted(estimates.keys())]\n    \n    # Calculate squared errors\n    squared_errors = [(true - est) ** 2 for true, est in zip(true_evs, sorted_estimates)]\n    \n    # Compute mean squared error\n    mse_value = np.mean(squared_errors)\n    \n    # Return rounded MSE\n    return round(mse_value, 4)\n\n# Example usage\nbandit = {\"arm_evs\": [0.5, 0.2, 0.9]}\npolicy = {\"ev_estimates\": {0: 0.4, 1: 0.25, 2: 0.8}}\n\n# Assuming the input objects are instances of a class or dictionary with the required attributes/keys\nmse_value = mse(bandit, policy)\nprint(mse_value)  # Expected output: 0.0075\n```"}
{"task_id": 96, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # Tokenize the corpus and the sequence\n    corpus_tokens = [sentence.split() for sentence in corpus]\n    sequence_tokens = sequence.split()\n    \n    # Build vocabulary and n-gram frequency tables\n    vocab = set()\n    ngram_counts = defaultdict(Counter)\n    \n    for sentence in corpus_tokens:\n        for n in range(1, N+1):\n            for i in range(len(sentence) - n + 1):\n                ngram = tuple(sentence[i:i+n])\n                ngram_counts[n][ngram] += 1\n                vocab.update(ngram)\n    \n    # Add <UNK> token to the vocabulary\n    vocab.add(\"<UNK>\")\n    vocab_size = len(vocab)\n    \n    # Replace unknown words in the sequence with <UNK>\n    for i in range(len(sequence_tokens)):\n        if sequence_tokens[i] not in vocab:\n            sequence_tokens[i] = \"<UNK>\"\n    \n    # Calculate the log-probability of the sequence\n    log_prob = 0.0\n    for i in range(len(sequence_tokens) - N + 1):\n        ngram = tuple(sequence_tokens[i:i+N])\n        context = ngram[:-1]\n        count_ngram = ngram_counts[N][ngram]\n        count_context = sum(ngram_counts[N-1][context + (word,)] for word in vocab)\n        smoothed_prob = (count_ngram + K) / (count_context + K * vocab_size)\n        log_prob += math.log(smoothed_prob)\n    \n    # Return the log-probability rounded to 4 decimals\n    return round(log_prob, 4) if len(sequence_tokens) >= N else 0.0\n\n# Example usage\ncorpus = [\"I like cats\", \"I like dogs\", \"I like fish\", \"I like cats and dogs\"]\nsequence = \"I like cats and fish\"\nN = 3\nK = 1.0\nprint(additive_ngram_log_prob(corpus, sequence, N, K))\n```\n\nThis script defines the `additive_ngram_log_prob` function that computes the additive-smoothed log-probability of a given sequence based on a provided corpus. The function tokenizes the corpus and the sequence, builds n-gram frequency tables, handles unknown words by replacing them with `<UNK>`, and calculates the log-probability of the sequence using additive smoothing. The result is rounded to 4 decimal places and returned."}
{"task_id": 108, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    N, M = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    \n    for _ in range(max_iter):\n        # Update W\n        for n in range(N):\n            W[n, :] = np.linalg.solve(np.dot(H, H.T) + alpha * np.eye(K), np.dot(X[n, :], H.T))\n        \n        # Update H\n        for m in range(M):\n            H[:, m] = np.linalg.solve(np.dot(W.T, W) + alpha * np.eye(K), np.dot(W.T, X[:, m]))\n        \n        # Compute the regularised loss\n        X_hat = np.dot(W, H)\n        loss = np.linalg.norm(X - X_hat) ** 2 + alpha * (np.linalg.norm(W) ** 2 + np.linalg.norm(H) ** 2)\n        \n        if loss < tol:\n            break\n    \n    return np.round(X_hat, 4).tolist()\n\n# Example usage\nX = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nK = 2\nX_hat = als_factorization(X, K)\nprint(X_hat)\n```\n\nThis script defines the `als_factorization` function that implements the regularized Alternating Least Squares algorithm to factorize a given matrix `X` into two low-rank matrices `W` and `H`. The function iteratively updates `W` and `H` while monitoring the regularized loss. If the loss drops below a specified tolerance (`tol`) or the maximum number of iterations (`max_iter`) is reached, the algorithm stops and returns the reconstructed matrix `X_hat` rounded to four decimal places and converted to a Python list of lists."}
{"task_id": 109, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n\n    m, n = X.shape\n    centroids = [X[random.randint(0, m-1)].tolist()]\n\n    for _ in range(1, K):\n        dist = np.array([min([np.linalg.norm(x-c)**2 for c in centroids]) for x in X])\n        probs = dist / dist.sum()\n        cumprobs = probs.cumsum()\n        r = random.random()\n        for j, p in enumerate(cumprobs):\n            if r < p:\n                i = j\n                break\n        centroids.append(X[i].tolist())\n\n    old_labels = np.zeros(m)\n    for _ in range(max_iter):\n        # Assign\n        dists = np.array([[np.linalg.norm(x - c) for c in centroids] for x in X])\n        labels = np.argmin(dists, axis=1)\n        if np.array_equal(old_labels, labels):\n            break\n        old_labels = labels\n\n        # Update\n        for k in range(K):\n            if np.sum(labels == k) > 0:\n                centroids[k] = X[labels == k].mean(axis=0).tolist()\n            # If the cluster is empty, keep the centroid unchanged\n\n    centroids = [list(map(lambda x: round(x, 4), c)) for c in centroids]\n    centroids.sort(key=lambda x: (x[0], x))\n    return centroids\n\n# Example usage:\nX = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\nK = 2\nrandom_state = 42\nprint(kmeans(X, K, random_state=random_state))\n```\n\nThis script defines the `kmeans` function that implements the K-Means clustering algorithm with K-Means++ initialization. The function takes a two-dimensional NumPy array `X`, the number of clusters `K`, the maximum number of iterations `max_iter`, and a `random_state` for reproducibility. The centroids are returned as a list of lists, rounded to four decimal places and sorted by their first coordinate."}
{"task_id": 111, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes a string into a fixed-length list of integer token ids.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text]\n    if len(encoded) < time_steps:\n        encoded += [0] * (time_steps - len(encoded))\n    else:\n        encoded = encoded[:time_steps]\n    return encoded\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Decodes a list of integer ids back into a string, ignoring padding tokens.\"\"\"\n    return ''.join(inverse_vocab.get(idx, '') for idx in indices if idx != 0)\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes text, predicts using the model, and decodes the prediction.\"\"\"\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    # Assuming model.predict returns a batch of predictions, we take the first one\n    prediction = model.predict(np.array([encoded_text]))[0]\n    # Apply argmax to get the most likely token id for each time step\n    predicted_ids = np.argmax(prediction, axis=-1)\n    # Decode the predicted ids back to a string\n    decoded_prediction = int_to_string(predicted_ids, inv_output_vocabulary)\n    return decoded_prediction\n\n# Example usage:\n# Assuming `model` is a pre-trained model with a `predict` method\n# input_vocabulary = {'a': 1, 'b': 2, 'c': 3, ...}\n# inv_output_vocabulary = {1: 'a', 2: 'b', 3: 'c', ...}\n# text = \"example text\"\n# print(run_example(model, input_vocabulary, inv_output_vocabulary, text))\n```\n\nThis script provides the implementation for the three functions as described in the task. The `run_example` function assumes that the `model` object has a `predict` method that returns a batch of predictions, from which the first prediction is taken for further processing. The `string_to_int` and `int_to_string` functions handle the encoding and decoding of text according to the provided vocabularies, with padding and truncation as required."}
{"task_id": 113, "completion_id": 0, "completion": "```python\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str], optional\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n\n    predictions = []\n    for example in examples:\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        predicted_string = ''.join(output_chars)\n        print(f\"input:  {example}\")\n        print(f\"output: {predicted_string}\")\n        predictions.append(predicted_string)\n    return predictions\n\n# Assuming the following global constant is defined in the user's environment\nEXAMPLES = [\"example1\", \"example2\", \"example3\"]\n\n# Example usage:\n# def dummy_model(input_string):\n#     return input_string.upper()\n# \n# input_vocab = {'a': 1, 'b': 2}\n# inv_output_vocab = {1: 'A', 2: 'B'}\n# \n# predictions = run_examples(dummy_model, input_vocab, inv_output_vocab, [\"test1\", \"test2\"])\n# print(predictions)\n```"}
{"task_id": 115, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    m = X.shape[0]\n    z = X @ w\n    p = 1 / (1 + np.exp(-z))\n    p = np.clip(p, 1e-20, 1 - 1e-20)  # Avoid numerical issues\n\n    loss = -1/m * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    gradient = 1/m * X.T @ (p - y)\n\n    return round(loss, 4), np.round(gradient, 4).tolist()\n\n# Example usage\nif __name__ == \"__main__\":\n    X = np.array([[1, 2], [3, 4], [5, 6]])\n    y = np.array([0, 1, 1])\n    w = np.array([0.1, 0.2])\n    loss, gradient = logistic_loss_and_gradient(X, y, w)\n    print(f\"Loss: {loss}\")\n    print(f\"Gradient: {gradient}\")\n```\n\nThis script defines the `logistic_loss_and_gradient` function that computes the binary cross-entropy loss and its gradient for logistic regression, as per the task description. It also includes an example usage section to demonstrate how to call the function and print the results."}
{"task_id": 118, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    m, n = X_train.shape\n    n_clf = max(1, n_clf)  # Ensure n_clf is at least 1\n    weights = np.full(m, 1 / m)  # Initialize weights\n    stumps = []\n    alphas = []\n\n    for _ in range(n_clf):\n        best_stump = None\n        best_error = float('inf')\n        best_threshold = None\n        best_feature = None\n        best_polarity = None\n\n        for feature in range(n):\n            for threshold in np.unique(X_train[:, feature]):\n                for polarity in [-1, 1]:\n                    prediction = np.where(polarity * X_train[:, feature] > polarity * threshold, 1, -1)\n                    error = np.sum(weights[prediction != y_train])\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feature, threshold)\n                        best_polarity = polarity\n\n        # Calculate alpha\n        alpha = 0.5 * np.log((1 - best_error) / best_error)\n        alphas.append(alpha)\n\n        # Update weights\n        prediction = np.where(best_polarity * X_train[:, best_stump[0]] > best_polarity * best_stump[1], 1, -1)\n        weights *= np.exp(-alpha * y_train * prediction)\n        weights /= np.sum(weights)\n\n        stumps.append((best_stump, best_polarity))\n\n    # Predict on test data\n    predictions = np.zeros(X_test.shape[0])\n    for (stump, polarity), alpha in zip(stumps, alphas):\n        feature, threshold = stump\n        prediction = np.where(polarity * X_test[:, feature] > polarity * threshold, 1, -1)\n        predictions += alpha * prediction\n\n    return list(np.sign(predictions))\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([1, 1, -1, -1])\n# X_test = np.array([[1, 1], [4, 4]])\n# predictions = adaboost_predict(X_train, y_train, X_test, n_clf=3)\n# print(predictions)  # Output: [1, -1]\n```"}
{"task_id": 128, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute the global mean\n    global_mean = np.mean(X, axis=0)\n    \n    # Compute the within-class scatter matrix\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    for c in np.unique(y):\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        S_W += (X_c - mean_c).T.dot(X_c - mean_c)\n    \n    # Compute the between-class scatter matrix\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    for c in np.unique(y):\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        S_B += X_c.shape[0] * (mean_c - global_mean).T.dot(mean_c - global_mean)\n    \n    # Compute the matrix A = pinv(S_W) * S_B\n    A = np.linalg.pinv(S_W).dot(S_B)\n    \n    # Perform eigen-decomposition of A\n    eigenvalues, eigenvectors = np.linalg.eigh(A)\n    \n    # Sort eigen-pairs in descending order of eigenvalues\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    \n    # Select the first n_components eigenvectors\n    W = sorted_eigenvectors[:, :n_components]\n    \n    # Fix the sign of the eigenvectors\n    for i in range(W.shape[1]):\n        if W[0, i] < 0:\n            W[:, i] *= -1\n    \n    # Project X on the first n_components eigenvectors\n    X_projected = X.dot(W)\n    \n    # Round every element to four decimal places\n    X_projected_rounded = np.round(X_projected, 4)\n    \n    # Convert to list of lists\n    return X_projected_rounded.tolist()\n\n# Example usage\nX = np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]])\ny = np.array([0,0,0,0,1,1,1,1])\nn_components = 1\nprint(multi_class_lda(X, y, n_components))\n```\n\nThis script defines the `multi_class_lda` function that performs multi-class Linear Discriminant Analysis (LDA) and projects the data onto the first `n_components` discriminant directions. The function takes a data matrix `X`, a label vector `y`, and the number of components to keep `n_components` as input, and returns the projected data as a list of lists, with each element rounded to four decimal places."}
{"task_id": 140, "completion_id": 0, "completion": "```python\nfrom collections import deque\nimport math\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    fire_queue = deque()\n    agent_queue = deque([(0, 0, 0)])  # (x, y, time)\n    visited = set()\n    fire_time = [[math.inf] * n for _ in range(n)]\n\n    # Initialize fire positions\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j, 0))\n                fire_time[i][j] = 0\n\n    # Spread fire\n    while fire_queue:\n        x, y, time = fire_queue.popleft()\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] != '#' and fire_time[nx][ny] == math.inf:\n                fire_time[nx][ny] = time + 1\n                fire_queue.append((nx, ny, time + 1))\n\n    # Check if start or end is on fire\n    if fire_time[0][0] == 0 or fire_time[n-1][n-1] == 0:\n        return -1\n\n    # Agent's BFS\n    while agent_queue:\n        x, y, time = agent_queue.popleft()\n        if (x, y) == (n-1, n-1):\n            return time\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] != '#' and (nx, ny) not in visited and fire_time[nx][ny] > time + 1:\n                visited.add((nx, ny))\n                agent_queue.append((nx, ny, time + 1))\n\n    return -1\n\n# Example usage\nmaze = [\n    \".F.\",\n    \".#.\",\n    \"...\"\n]\nprint(escape_fire_maze(maze))  # Output: 2\n```\n\nThis Python script defines a function `escape_fire_maze` that takes a list of strings representing a maze and returns the minimum number of minutes required for an agent to escape the maze while avoiding fire, or -1 if it is impossible. The script includes a BFS algorithm to simulate the spread of fire and the agent's movement through the maze."}
{"task_id": 141, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"Implement k-Nearest Neighbors classifier.\"\"\"\n    # Function to compute distances\n    def compute_distances(X_train, X_test, metric):\n        if metric == 'euclidean':\n            return np.sqrt(((X_train[:, np.newaxis] - X_test) ** 2).sum(axis=2))\n        elif metric == 'manhattan':\n            return np.abs(X_train[:, np.newaxis] - X_test).sum(axis=2)\n        elif metric == 'cosine':\n            dot_product = (X_train[:, np.newaxis] * X_test).sum(axis=2)\n            norm_train = np.linalg.norm(X_train, axis=1)[:, np.newaxis]\n            norm_test = np.linalg.norm(X_test, axis=1)\n            cosine_sim = dot_product / (norm_train * norm_test)\n            return 1 - cosine_sim\n        else:\n            return np.sqrt(((X_train[:, np.newaxis] - X_test) ** 2).sum(axis=2))  # Default to Euclidean\n\n    # Compute distances\n    distances = compute_distances(X_train, X_test, metric)\n\n    # Find k nearest neighbors\n    nearest_indices = np.argsort(distances, axis=0)[:k]\n\n    # Predict labels by majority vote\n    y_pred = []\n    for indices in nearest_indices.T:\n        labels = y_train[indices]\n        unique_labels, counts = np.unique(labels, return_counts=True)\n        # In case of a tie, return the smallest label value\n        y_pred.append(unique_labels[np.argmax(counts)])\n\n    return np.array(y_pred)\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [6, 7], [7, 8], [8, 9]])\n# y_train = np.array([0, 0, 0, 1, 1, 1])\n# X_test = np.array([[2, 2], [7, 7]])\n# k = 3\n# predictions = knn_predict(X_train, y_train, X_test, k, metric='euclidean')\n# print(predictions)  # Output: [0 1]\n```"}
{"task_id": 146, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2, axis=1))\n\n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b), axis=1)\n\n    def cosine_distance(a, b):\n        dot_product = np.sum(a * b, axis=1)\n        norm_a = np.sqrt(np.sum(a ** 2, axis=1))\n        norm_b = np.sqrt(np.sum(b ** 2, axis=1))\n        return 1 - dot_product / (norm_a * norm_b + 1e-12)\n\n    # Ensure k does not exceed the number of training samples\n    k = min(k, X.shape[0])\n\n    # Initialize the list to store predictions\n    predictions = []\n\n    # Iterate over each test sample\n    for test_sample in X_test:\n        # Compute distances to all training samples\n        if metric == 'euclidean':\n            distances = euclidean_distance(X, test_sample)\n        elif metric == 'manhattan':\n            distances = manhattan_distance(X, test_sample)\n        elif metric == 'cosine':\n            distances = cosine_distance(X, test_sample)\n        else:\n            raise ValueError(\"Invalid metric. Choose 'euclidean', 'manhattan', or 'cosine'.\")\n\n        # Get the indices of the k nearest neighbours\n        nearest_indices = np.argsort(distances)[:k]\n\n        # Get the labels of the k nearest neighbours\n        nearest_labels = y[nearest_indices]\n\n        # Perform majority vote\n        unique_labels, counts = np.unique(nearest_labels, return_counts=True)\n        majority_vote = unique_labels[np.argmax(counts)]\n\n        # In case of a tie, return the smallest label\n        if np.sum(counts == counts.max()) > 1:\n            majority_vote = unique_labels[counts == counts.max()].min()\n\n        # Append the predicted label to the predictions list\n        predictions.append(majority_vote)\n\n    return predictions\n```\n\nThis script defines a function `knn_predict` that implements the k-Nearest Neighbours algorithm from scratch, using only NumPy for numerical operations. The function supports three distance metrics: Euclidean, Manhattan, and Cosine. It returns a list of predicted labels for the test samples, adhering to the constraints and requirements specified in the task description."}
{"task_id": 155, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Ensure state is a numpy array\n    state = np.array(state)\n    \n    # First layer: Linear transformation followed by ReLU\n    hidden1 = np.maximum(0, np.dot(state, weights['W1']) + weights['b1'])\n    \n    # Second layer: Linear transformation followed by ReLU\n    hidden2 = np.maximum(0, np.dot(hidden1, weights['W2']) + weights['b2'])\n    \n    # Output layer: Linear transformation followed by tanh\n    action = np.tanh(np.dot(hidden2, weights['W3']) + weights['b3'])\n    \n    # Convert to list and round to 4 decimal places\n    return [round(x, 4) for x in action]\n\n# Example usage\nif __name__ == \"__main__\":\n    # Example state and weights\n    state = [1.0, 2.0, 3.0]\n    weights = {\n        \"W1\": np.array([[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]]),\n        \"b1\": np.array([0.1, 0.2]),\n        \"W2\": np.array([[0.7, 0.8], [0.9, 1.0]]),\n        \"b2\": np.array([0.3, 0.4]),\n        \"W3\": np.array([[1.1, 1.2], [1.3, 1.4]]),\n        \"b3\": np.array([0.5, 0.6])\n    }\n    \n    # Perform forward pass\n    action = actor_forward(state, weights)\n    print(action)\n```\n\nThis script defines the `actor_forward` function that performs the forward pass of a two-hidden-layer actor network as described in the task. The function takes a state vector and a dictionary of weights, and returns the action vector as a list of floats, each rounded to four decimal places. The example usage at the bottom demonstrates how to use the function with a sample state and weights."}
{"task_id": 160, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    m, n = X.shape\n    if fit_intercept:\n        X = np.hstack([np.ones((m, 1)), X])\n        n += 1\n    else:\n        X = np.hstack([np.zeros((m, 1)), X])\n    \n    w = np.zeros(n)\n    \n    for _ in range(max_iters):\n        if fit_intercept:\n            w[0] = np.mean(y - X[:, 1:] @ w[1:])\n        for j in range(1, n):\n            temp_w = w.copy()\n            temp_w[j] = 0\n            r_j = y - X @ temp_w\n            x_j = X[:, j]\n            dot_product = x_j @ r_j\n            soft_threshold = np.sign(dot_product) * max(abs(dot_product) - lambda_param * m, 0)\n            w[j] = soft_threshold / (x_j @ x_j)\n    \n    bias = w[0] if fit_intercept else 0.0\n    weights = w[1:].tolist() if fit_intercept else w.tolist()\n    return [round(weight, 4) for weight in weights], round(bias, 4)\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4]])\n# y = np.array([1, 2, 3])\n# weights, bias = fit_lasso(X, y, lambda_param=0.1, max_iters=100, fit_intercept=True)\n# print(weights, bias)\n```\n\nThis script defines the `fit_lasso` function that implements Lasso regression using the coordinate descent method as described in the task. The function takes a feature matrix `X`, a target vector `y`, a regularisation strength `lambda_param`, a maximum number of iterations `max_iters`, and a boolean `fit_intercept` to determine whether to fit an intercept term. The function returns a tuple containing the list of weights and the bias, both rounded to four decimal places."}
{"task_id": 165, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef hamming_distance(x: list[int] | np.ndarray, y: list[int] | np.ndarray) -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    x = np.array(x) if not isinstance(x, np.ndarray) else x\n    y = np.array(y) if not isinstance(y, np.ndarray) else y\n\n    # Check if the lengths of the vectors are equal\n    if x.shape != y.shape:\n        return -1\n\n    # Calculate the Hamming distance\n    distance = np.sum(x != y) / x.size\n\n    # Return the distance rounded to 4 decimal places\n    return round(distance, 4)\n\n# Example usage:\n# Uncomment the lines below to test the function\n# print(hamming_distance([1, 0, 1], [1, 1, 0]))  # Expected output: 0.6667\n# print(hamming_distance(np.array([1, 0, 1]), np.array([1, 0, 1])))  # Expected output: 0.0000\n# print(hamming_distance([1, 0, 1], [1, 0]))  # Expected output: -1\n```"}
{"task_id": 169, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if N <= 0:\n        raise ValueError(\"N must be a positive integer\")\n    \n    if window not in [\"hamming\", \"hann\", \"blackman_harris\", \"generalized_cosine\"]:\n        raise ValueError(\"Unknown window type\")\n    \n    if window == \"generalized_cosine\" and coefficients is None:\n        raise ValueError(\"Coefficients must be provided for generalized_cosine window\")\n    \n    if N == 1:\n        return [1.0]\n    \n    n = np.arange(N)\n    w = np.zeros(N)\n    \n    if window == \"hamming\":\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == \"hann\":\n        w = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == \"blackman_harris\":\n        a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n        w = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n    elif window == \"generalized_cosine\":\n        for k, a_k in enumerate(coefficients):\n            w += a_k * np.cos(2 * np.pi * k * n / (N - 1))\n    \n    return [round(x, 4) for x in w]\n\n# Example usage:\nprint(generate_window(\"hamming\", 5))\nprint(generate_window(\"hann\", 5))\nprint(generate_window(\"blackman_harris\", 5))\nprint(generate_window(\"generalized_cosine\", 5, [0.5, 0.5]))\n```"}
{"task_id": 171, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    # Add intercept term (bias) to the data\n    X_train = np.c_[np.ones(X_train.shape[0]), X_train]\n    X_test = np.c_[np.ones(X_test.shape[0]), X_test]\n\n    # Map original labels to {0, 1}\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) != 2:\n        raise ValueError(\"y_train must contain exactly two distinct labels\")\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train_mapped = np.array([label_map[label] for label in y_train])\n\n    # Handle the special case where all training labels are identical\n    if unique_labels[0] == unique_labels[1]:\n        return [unique_labels[0]] * len(X_test)\n\n    # Initialize weights\n    weights = np.zeros(X_train.shape[1])\n\n    # Mini-batch Gradient Descent\n    for _ in range(epochs):\n        # Shuffle the training data\n        indices = np.random.permutation(X_train.shape[0])\n        X_train_shuffled = X_train[indices]\n        y_train_shuffled = y_train_mapped[indices]\n\n        # Split into mini-batches\n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train_shuffled[i:i + batch_size]\n            y_batch = y_train_shuffled[i:i + batch_size]\n\n            # Compute predictions\n            predictions = 1 / (1 + np.exp(-np.dot(X_batch, weights)))\n\n            # Compute gradients\n            gradients = np.dot(X_batch.T, (predictions - y_batch)) / len(X_batch)\n\n            # Update weights\n            weights -= learning_rate * gradients\n\n    # Predict on test set\n    test_predictions = 1 / (1 + np.exp(-np.dot(X_test, weights)))\n    test_predictions = (test_predictions > 0.5).astype(int)\n\n    # Map predictions back to original labels\n    reverse_label_map = {0: unique_labels[0], 1: unique_labels[1]}\n    final_predictions = [reverse_label_map[pred] for pred in test_predictions]\n\n    return final_predictions\n```"}
{"task_id": 176, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    n_samples, n_features = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    estimators = []\n    estimator_weights = []\n\n    for _ in range(n_estimators):\n        min_error = float('inf')\n        best_stump = None\n\n        for feature_idx in range(n_features):\n            thresholds = np.unique(X_train[:, feature_idx])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.where(X_train[:, feature_idx] < threshold, 1, -1) if polarity == 1 else np.where(X_train[:, feature_idx] >= threshold, 1, -1)\n                    error = np.sum(weights[y_train != predictions])\n                    if error < min_error:\n                        min_error = error\n                        best_stump = (feature_idx, threshold, polarity)\n                    elif error == min_error:\n                        if feature_idx < best_stump[0] or (feature_idx == best_stump[0] and threshold < best_stump[1]) or (feature_idx == best_stump[0] and threshold == best_stump[1] and polarity == 1):\n                            best_stump = (feature_idx, threshold, polarity)\n\n        if min_error == 0:\n            break\n\n        feature_idx, threshold, polarity = best_stump\n        predictions = np.where(X_train[:, feature_idx] < threshold, 1, -1) if polarity == 1 else np.where(X_train[:, feature_idx] >= threshold, 1, -1)\n        estimator_weight = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n        weights *= np.exp(-estimator_weight * y_train * predictions)\n        weights /= np.sum(weights)\n\n        estimators.append(best_stump)\n        estimator_weights.append(estimator_weight)\n\n    test_predictions = np.zeros(X_test.shape[0])\n    for (feature_idx, threshold, polarity), estimator_weight in zip(estimators, estimator_weights):\n        predictions = np.where(X_test[:, feature_idx] < threshold, 1, -1) if polarity == 1 else np.where(X_test[:, feature_idx] >= threshold, 1, -1)\n        test_predictions += estimator_weight * predictions\n\n    final_predictions = np.where(test_predictions > 0, 1, 0)\n    return final_predictions.tolist()\n\n# Example usage:\nX_train = [[-1, -1], [-2, -1], [1, 1], [2, 1]]\ny_train = [1, 1, 2, 2]\nX_test = [[0, 0], [1, 1]]\ny_test = adaboost_predict(X_train, y_train, X_test, n_estimators=10)\nprint(y_test)  # Output should be the predicted class labels for X_test\n```\n\nThis script implements the AdaBoost algorithm using decision stumps as weak learners. It follows the specified requirements and constraints, including the use of standard AdaBoost weight and vote update rules. The function returns a list of integers representing the predicted class labels for the test set."}
{"task_id": 178, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n\n    rng = np.random.default_rng(seed)\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    lower_bound = -1\n    upper_bound = 1\n\n    # Initialize particles\n    positions = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    velocities = np.zeros((num_particles, n_dims))\n    personal_best_positions = positions.copy()\n    personal_best_values = np.array([np.sum(x**2) for x in positions])\n    global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n    global_best_value = np.min(personal_best_values)\n\n    for _ in range(num_iterations):\n        r1 = rng.uniform(0, 1, (num_particles, n_dims))\n        r2 = rng.uniform(0, 1, (num_particles, n_dims))\n\n        velocities = w * velocities + c1 * r1 * (personal_best_positions - positions) + c2 * r2 * (global_best_position - positions)\n        positions = np.clip(positions + velocities, lower_bound, upper_bound)\n\n        current_values = np.array([np.sum(x**2) for x in positions])\n        improved_particles = current_values < personal_best_values\n        personal_best_positions[improved_particles] = positions[improved_particles]\n        personal_best_values[improved_particles] = current_values[improved_particles]\n\n        global_best_position = personal_best_positions[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n\n    return round(global_best_value, 4)\n\n# Example usage:\nprint(particle_swarm_optimisation(3, 10, 100, 1))\n```\n\nThis script implements the Particle Swarm Optimization algorithm to minimize the Sphere function in a given number of dimensions. The function is deterministic with respect to the seed provided, and it returns the best Sphere-function value encountered, rounded to four decimal places. If any of the input parameters are non-positive, the function returns -1."}
{"task_id": 180, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((np.array(x1) - np.array(x2)) ** 2))\n    \n    def predict_one(x):\n        # Compute distances from x to all training samples\n        distances = [(euclidean_distance(x, x_train), y) for x_train, y in zip(X_train, y_train)]\n        # Sort by distance and get the k nearest\n        k_nearest = sorted(distances, key=lambda x: x[0])[:k]\n        # Extract the labels of the k nearest\n        k_nearest_labels = [label for _, label in k_nearest]\n        if task == \"classification\":\n            # Majority vote\n            most_common = Counter(k_nearest_labels).most_common(1)\n            return most_common[0][0]\n        else:\n            # Average for regression\n            return round(np.mean(k_nearest_labels), 4)\n    \n    # If k is 0 or larger than the number of training samples, use all\n    if k <= 0 or k > len(X_train):\n        k = len(X_train)\n    \n    # Predict for each test sample\n    return [predict_one(x) for x in X_test]\n\n# Example usage:\nX_train = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\ny_train = [0, 0, 1, 1, 1]\nX_test = [[1.5, 2.5], [4.5, 5.5]]\nk = 3\ntask = \"classification\"\npredictions = knn_predict(X_train, y_train, X_test, k, task)\nprint(predictions)  # Output: [0, 1]\n\n# Regression example\ny_train_regression = [1.5, 2.5, 3.5, 4.5, 5.5]\ntask = \"regression\"\npredictions_regression = knn_predict(X_train, y_train_regression, X_test, k, task)\nprint(predictions_regression)  # Output: [2.5, 4.5]\n```"}
{"task_id": 184, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gini_impurity(y):\n    \"\"\"Calculate the Gini impurity for a set of labels.\"\"\"\n    _, counts = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    return 1 - np.sum(probabilities ** 2)\n\ndef best_split(X, y, max_depth):\n    \"\"\"Find the best split for a node.\"\"\"\n    if len(np.unique(y)) == 1 or (max_depth is not None and max_depth == 0):\n        return None, np.bincount(y).argmax()\n    \n    best_gain = -1\n    best_feature = None\n    best_threshold = None\n    parent_gini = gini_impurity(y)\n    \n    for feature in range(X.shape[1]):\n        unique_values = np.unique(X[:, feature])\n        thresholds = (unique_values[:-1] + unique_values[1:]) / 2\n        for threshold in thresholds:\n            left_indices = X[:, feature] <= threshold\n            right_indices = X[:, feature] > threshold\n            if not np.any(left_indices) or not np.any(right_indices):\n                continue\n            left_gini = gini_impurity(y[left_indices])\n            right_gini = gini_impurity(y[right_indices])\n            gain = parent_gini - (len(y[left_indices]) * left_gini + len(y[right_indices]) * right_gini) / len(y)\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature\n                best_threshold = threshold\n    \n    if best_gain == -1:\n        return None, np.bincount(y).argmax()\n    \n    return (best_feature, best_threshold), None\n\ndef build_tree(X, y, max_depth=None):\n    \"\"\"Build a decision tree recursively.\"\"\"\n    split, leaf_value = best_split(X, y, max_depth)\n    if max_depth is not None:\n        max_depth -= 1\n    if split is None:\n        return {'leaf': leaf_value}\n    else:\n        feature, threshold = split\n        left_indices = X[:, feature] <= threshold\n        right_indices = X[:, feature] > threshold\n        return {\n            'split': (feature, threshold),\n            'left': build_tree(X[left_indices], y[left_indices], max_depth),\n            'right': build_tree(X[right_indices], y[right_indices], max_depth)\n        }\n\ndef predict_single(x, tree):\n    \"\"\"Predict the class of a single sample.\"\"\"\n    if 'leaf' in tree:\n        return tree['leaf']\n    feature, threshold = tree['split']\n    if x[feature] <= threshold:\n        return predict_single(x, tree['left'])\n    else:\n        return predict_single(x, tree['right'])\n\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None = None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n    tree = build_tree(X_train, y_train, max_depth)\n    return [predict_single(x, tree) for x in X_test]\n\n# Example usage:\n# X_train = np.array([[0, 0], [1, 1]])\n# y_train = np.array([0, 1])\n# X_test = np.array([[2., 2.], [-1, -1]])\n# predictions = decision_tree_predict(X_train, y_train, X_test)\n# print(predictions)  # Output: [1, 0]\n```"}
{"task_id": 190, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gini_impurity(labels):\n    \"\"\"Calculate the Gini impurity for a set of labels.\"\"\"\n    _, counts = np.unique(labels, return_counts=True)\n    proportions = counts / len(labels)\n    return 1 - np.sum(proportions ** 2)\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n    best_gini = gini_impurity(y)\n    best_feature_index = -1\n    best_threshold_value = None\n\n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        for threshold in unique_values:\n            left_indices = X[:, feature_index] <= threshold\n            right_indices = X[:, feature_index] > threshold\n\n            if np.any(left_indices) and np.any(right_indices):\n                left_labels = y[left_indices]\n                right_labels = y[right_indices]\n\n                gini_left = gini_impurity(left_labels)\n                gini_right = gini_impurity(right_labels)\n\n                gini_split = (len(left_labels) / n_samples) * gini_left + (len(right_labels) / n_samples) * gini_right\n\n                if gini_split < best_gini or (np.abs(gini_split - best_gini) < 1e-12 and feature_index < best_feature_index) or (np.abs(gini_split - best_gini) < 1e-12 and feature_index == best_feature_index and threshold < best_threshold_value):\n                    best_gini = gini_split\n                    best_feature_index = feature_index\n                    best_threshold_value = threshold\n\n    return (best_feature_index, best_threshold_value, round(best_gini, 4))\n\n# Example usage:\nX = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\ny = [0, 0, 1, 1, 1]\nprint(best_gini_split(X, y))\n```"}
{"task_id": 191, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\"\"\"\n    def validate(v1, v2):\n        if not (isinstance(v1, (list, tuple, np.ndarray)) and isinstance(v2, (list, tuple, np.ndarray))):\n            return False\n        if len(v1) != len(v2) or len(v1) == 0:\n            return False\n        try:\n            v1 = np.array(v1, dtype=float)\n            v2 = np.array(v2, dtype=float)\n        except ValueError:\n            return False\n        if name == 'cosine' and (np.linalg.norm(v1) == 0 or np.linalg.norm(v2) == 0):\n            return False\n        return v1, v2\n\n    def euclidean(v1, v2):\n        return round(np.linalg.norm(v1 - v2), 4)\n\n    def manhattan(v1, v2):\n        return round(np.sum(np.abs(v1 - v2)), 4)\n\n    def chebyshev(v1, v2):\n        return round(np.max(np.abs(v1 - v2)), 4)\n\n    def cosine(v1, v2):\n        norm1 = np.linalg.norm(v1)\n        norm2 = np.linalg.norm(v2)\n        return round(1 - np.dot(v1, v2) / (norm1 * norm2), 4)\n\n    def d(v1, v2):\n        validated = validate(v1, v2)\n        if not validated:\n            return -1\n        v1, v2 = validated\n        if name == 'euclidean':\n            return euclidean(v1, v2)\n        elif name == 'manhattan':\n            return manhattan(v1, v2)\n        elif name == 'chebyshev':\n            return chebyshev(v1, v2)\n        elif name == 'cosine':\n            return cosine(v1, v2)\n        else:\n            return -1\n\n    return d\n\n# Example usage\nprint(metric('euclidean')([1, 2, 3], [4, 5, 6]))  # \u279e 5.1962\nprint(metric('manhattan')([1, 2, 3], [4, 5, 6]))  # \u279e 9.0\nprint(metric('chebyshev')([1, 2, 3], [4, 5, 6]))  # \u279e 3.0\nprint(metric('cosine')([1, 2, 3], [4, 5, 6]))     # \u279e 0.0254\n```"}
{"task_id": 197, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n\n    if md_action:\n        # Multi-dimensional action space\n        action_dim = len(env.action_space.spaces)\n        for space in env.action_space.spaces:\n            if hasattr(space, 'n'):\n                # Discrete space\n                n_actions_per_dim.append(space.n)\n            else:\n                # Continuous space\n                n_actions_per_dim.append(np.inf)\n                action_ids = None\n    else:\n        # Single-dimensional action space\n        action_dim = 1\n        if cont_action:\n            # Continuous space\n            n_actions_per_dim.append(np.inf)\n        else:\n            # Discrete space\n            n_actions_per_dim.append(env.action_space.n)\n    \n    if not cont_action and not any(np.isinf(x) for x in n_actions_per_dim):\n        # If the action space is fully discrete, calculate the cartesian product\n        action_ids = list(product(*[range(int(n)) for n in n_actions_per_dim]))\n\n    return n_actions_per_dim, action_ids, action_dim\n```\n\nThis function `action_stats` is designed to handle both single and multi-dimensional action spaces, as well as continuous and discrete action spaces, and it returns the required statistics as specified in the task description."}
{"task_id": 198, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # Determine the number of topics T from the shape of the first phi array\n    T = phi[0].shape[1]\n    \n    # Initialize the beta matrix with zeros\n    beta = np.zeros((V, T))\n    \n    # Compute the sum for each word-topic pair\n    for d, doc in enumerate(corpus):\n        for n, word in enumerate(doc):\n            beta[word] += phi[d][n]\n    \n    # Normalize each column of beta\n    beta /= beta.sum(axis=0, keepdims=True)\n    \n    # Round the values to 4 decimal places and convert to list of lists\n    beta = beta.round(4).tolist()\n    \n    return beta\n\n# Example usage\nif __name__ == \"__main__\":\n    phi = [np.array([[0.1, 0.9], [0.8, 0.2]]), np.array([[0.3, 0.7]])]\n    corpus = [[0, 1], [0]]\n    V = 2\n    beta = update_beta(phi, corpus, V)\n    print(beta)\n```\n\nThis script defines the `update_beta` function that updates the word-topic distribution \u03b2 in Latent Dirichlet Allocation according to the provided specifications. The function takes a list of variational parameters `phi`, a tokenised corpus, and the vocabulary size `V` as inputs, and returns the updated \u03b2 matrix as a list of lists, with each column summing to one and all values rounded to four decimal places."}
{"task_id": 202, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef euclidean_distance(x, y):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((x - y) ** 2))\n\ndef total_cost(X, medoids, labels):\n    \"\"\"Calculate the total cost of the clustering.\"\"\"\n    cost = 0\n    for i, label in enumerate(labels):\n        cost += euclidean_distance(X[i], X[medoids[label]])\n    return cost\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    n_samples = X.shape[0]\n    medoids = list(range(k))\n    labels = np.zeros(n_samples, dtype=int)\n    \n    # Initialize labels\n    for i in range(n_samples):\n        distances = [euclidean_distance(X[i], X[medoid]) for medoid in medoids]\n        labels[i] = np.argmin(distances)\n    \n    # Main loop\n    while True:\n        best_cost = total_cost(X, medoids, labels)\n        best_swap = None\n        \n        for i in range(k):\n            for j in range(n_samples):\n                if j not in medoids:\n                    new_medoids = medoids[:]\n                    new_medoids[i] = j\n                    new_labels = np.zeros(n_samples, dtype=int)\n                    \n                    for l in range(n_samples):\n                        distances = [euclidean_distance(X[l], X[medoid]) for medoid in new_medoids]\n                        new_labels[l] = np.argmin(distances)\n                    \n                    new_cost = total_cost(X, new_medoids, new_labels)\n                    if new_cost < best_cost:\n                        best_cost = new_cost\n                        best_swap = (i, j)\n        \n        if best_swap is None:\n            break\n        \n        medoids[best_swap[0]] = best_swap[1]\n        labels = np.zeros(n_samples, dtype=int)\n        \n        for i in range(n_samples):\n            distances = [euclidean_distance(X[i], X[medoid]) for medoid in medoids]\n            labels[i] = np.argmin(distances)\n    \n    return labels.tolist()\n\n# Example usage\nX = np.array([[0,0], [1,0], [0,1], [5,5], [6,5], [5,6]])\nk = 2\nprint(pam_clustering(X, k))\n```\n\nThis script implements the PAM clustering algorithm as described in the task. It initializes the medoids as the first `k` samples, iteratively tries to reduce the total clustering cost by swapping medoids, and finally assigns each sample to the closest medoid. The function returns the cluster labels as a list of integers."}
{"task_id": 216, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n\n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n\n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    # Convert inputs to numpy arrays\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    \n    # Check for invalid inputs\n    if x_train.shape[1] != x_test.shape[1] or n_iterations <= 0:\n        return -1\n    \n    # Polynomial feature expansion\n    x_train_poly = np.vander(x_train, degree+1, increasing=True)[:, 1:]\n    x_test_poly = np.vander(x_test, degree+1, increasing=True)[:, 1:]\n    \n    # Standardize features\n    means = np.mean(x_train_poly, axis=0)\n    stds = np.std(x_train_poly, axis=0)\n    x_train_poly = (x_train_poly - means) / stds\n    x_test_poly = (x_test_poly - means) / stds\n    \n    # Add bias term\n    x_train_poly = np.c_[np.ones(x_train_poly.shape[0]), x_train_poly]\n    x_test_poly = np.c_[np.ones(x_test_poly.shape[0]), x_test_poly]\n    \n    # Initialize weights\n    weights = np.zeros(x_train_poly.shape[1])\n    \n    # Gradient descent\n    for _ in range(n_iterations):\n        predictions = x_train_poly.dot(weights)\n        errors = predictions - y_train\n        gradient = 2 * x_train_poly.T.dot(errors) / len(y_train)\n        l1_grad = l1_ratio * reg_factor * np.sign(weights)\n        l2_grad = (1 - l1_ratio) * reg_factor * 2 * weights\n        l1_grad[0] = 0  # No regularization for bias term\n        l2_grad[0] = 0  # No regularization for bias term\n        weights -= learning_rate * (gradient + l1_grad + l2_grad)\n    \n    # Predictions\n    predictions = x_test_poly.dot(weights)\n    return np.round(predictions, 4).tolist()\n\n# Example usage\nx_train = [[1, 2], [2, 3], [3, 4], [4, 5]]\ny_train = [2, 3, 4, 5]\nx_test = [[5, 6], [6, 7]]\nprint(elastic_net_regression(x_train, y_train, x_test, degree=2))\n```\n\nThis script defines the `elastic_net_regression` function that implements Elastic Net regression using batch gradient descent. It includes polynomial feature expansion, standardization of features, and the application of both L1 and L2 regularization penalties. The function returns predictions for the test set, rounded to four decimal places."}
{"task_id": 217, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to numpy arrays for vectorized computation\n    actual = np.array(actual, dtype=float)\n    predicted = np.array(predicted, dtype=float)\n\n    # Compute sigmoid\n    sigmoid_pred = 1 / (1 + np.exp(-predicted))\n    \n    # Compute gradient\n    grad = actual * (sigmoid(0 - actual * predicted))\n    \n    # Compute Hessian\n    hess = sigmoid_pred * (1 - sigmoid_pred)\n    \n    # Compute probability\n    prob = sigmoid_pred\n    \n    # Round results to 6 decimal places\n    grad_rounded = np.round(grad, 6)\n    hess_rounded = np.round(hess, 6)\n    prob_rounded = np.round(prob, 6)\n    \n    # Convert back to Python lists\n    gradient_list = grad_rounded.tolist()\n    hessian_list = hess_rounded.tolist()\n    probability_list = prob_rounded.tolist()\n    \n    return (gradient_list, hessian_list, probability_list)\n\n# Example usage\nactual = [1, -1, 1]\npredicted = [0.5, -0.5, 1.0]\ngradient, hessian, probability = logistic_components(actual, predicted)\nprint(\"Gradient:\", gradient)\nprint(\"Hessian:\", hessian)\nprint(\"Probability:\", probability)\n```\n\nThis script defines the `logistic_components` function that computes the gradient, Hessian, and probability for logistic loss based on the provided actual labels and predicted scores. The function ensures that all computations are done using NumPy for efficiency and that the results are rounded to six decimal places before returning them as Python lists."}
{"task_id": 218, "completion_id": 0, "completion": "```python\ndef calculate_score(hand: list[int]) -> int:\n    \"\"\"Calculate the score of a hand in Blackjack.\"\"\"\n    score = sum(hand)\n    aces = hand.count(1)\n    while score <= 11 and aces > 0:\n        score += 10\n        aces -= 1\n    return min(score, 22)\n\ndef is_natural_blackjack(hand: list[int]) -> bool:\n    \"\"\"Check if the hand is a natural blackjack.\"\"\"\n    return len(hand) == 2 and 1 in hand and 10 in hand\n\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    player_score = calculate_score(player)\n    dealer_score = calculate_score(dealer)\n    \n    if player_score > 21:\n        return -1\n    elif dealer_score > 21:\n        return 1\n    elif player_score > dealer_score:\n        if is_natural_blackjack(player):\n            return 1.5\n        return 1\n    elif player_score < dealer_score:\n        return -1\n    else:\n        return 0\n\n# Example usage:\n# print(blackjack_outcome([1, 10], [10, 2]))  # Natural blackjack, should return 1.5\n# print(blackjack_outcome([1, 10], [1, 10]))  # Draw, should return 0\n# print(blackjack_outcome([1, 10], [10, 10])) # Player wins, should return 1\n# print(blackjack_outcome([10, 10], [1, 10])) # Dealer wins, should return -1\n# print(blackjack_outcome([10, 10], [10, 10])) # Draw, should return 0\n# print(blackjack_outcome([1, 10], [10, 10, 10])) # Dealer busts, should return 1\n# print(blackjack_outcome([10, 10, 10], [1, 10])) # Player busts, should return -1\n```"}
{"task_id": 221, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper that returns element-wise squared log errors.\"\"\"\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\n\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    # Convert inputs to NumPy arrays for easier manipulation\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Input validation\n    if actual.shape != predicted.shape:\n        return -1\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    \n    # Calculate MSLE\n    squared_errors = squared_log_error(actual, predicted)\n    msle = np.mean(squared_errors)\n    \n    return round(msle, 4)\n```\n\nThis code snippet provides a complete implementation of the MSLE calculation, including the helper function for squared logarithmic errors and the main function for computing the MSLE, with input validation as specified."}
{"task_id": 222, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    # Convert input to a NumPy array if it's a list\n    if isinstance(z, list):\n        z = np.array(z)\n    \n    # Check if input is a scalar\n    if np.isscalar(z):\n        return round(1 / (1 + np.exp(-z)), 4)\n    \n    # Apply the sigmoid function in a numerically stable way\n    result = np.where(z >= 0,\n                      1 / (1 + np.exp(-z)),\n                      np.exp(z) / (1 + np.exp(z)))\n    \n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n    \n    # Convert back to list if the original input was a list\n    if isinstance(z, np.ndarray) and z.dtype == 'object':\n        return result.tolist()\n    else:\n        return result.tolist()\n\n# Example usage:\nprint(sigmoid(0))  # 0.5\nprint(sigmoid([-1000, 0, 1000]))  # [0.0, 0.5, 1.0]\nprint(sigmoid(np.array([-1000, 0, 1000])))  # [0.0, 0.5, 1.0]\n```"}
{"task_id": 224, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    # Helper function to apply Leaky ReLU to a single value\n    def apply_leaky_relu(x):\n        return max(x, a * x)\n    \n    # Helper function to apply the function recursively to nested lists\n    def apply_recursively(data, func):\n        if isinstance(data, list):\n            return [apply_recursively(item, func) for item in data]\n        elif isinstance(data, np.ndarray):\n            return func(data).tolist()\n        else:\n            return func(data)\n    \n    # Convert input to numpy array if it's a list for easier processing\n    if isinstance(z, list):\n        z = np.array(z)\n    \n    # Apply the Leaky ReLU function\n    result = np.vectorize(apply_leaky_relu)(z)\n    \n    # Convert back to list if necessary\n    if isinstance(z, list):\n        result = result.tolist()\n    \n    return apply_recursively(result, lambda x: x)\n\n# Example usage:\nprint(leaky_relu([-1, 0, 1, 2], a=0.01))  # Output: [-0.01, 0, 1, 2]\nprint(leaky_relu([[-1, 0], [1, 2]], a=0.01))  # Output: [[-0.01, 0], [1, 2]]\nprint(leaky_relu(np.array([-1, 0, 1, 2]), a=0.01))  # Output: [-0.01, 0, 1, 2]\n```"}
{"task_id": 226, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    sample_weights = np.full(n_samples, 1 / n_samples)\n    classifiers = []\n\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_stump = None\n\n        for feature_index in range(n_features):\n            thresholds = np.unique(X_train[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.where(X_train[:, feature_index] < threshold, polarity, -polarity)\n                    error = np.sum(sample_weights[y_train != predictions])\n                    if error < min_error:\n                        min_error = error\n                        best_stump = (feature_index, threshold, polarity)\n\n        feature_index, threshold, polarity = best_stump\n        predictions = np.where(X_train[:, feature_index] < threshold, polarity, -polarity)\n        error = np.sum(sample_weights[y_train != predictions])\n        alpha = 0.5 * math.log((1 - error) / (error + 1e-10))\n        classifiers.append((feature_index, threshold, polarity, alpha))\n\n        # Update sample weights\n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        sample_weights /= np.sum(sample_weights)\n\n    # Prediction\n    predictions = np.zeros(X_test.shape[0])\n    for feature_index, threshold, polarity, alpha in classifiers:\n        stump_predictions = np.where(X_test[:, feature_index] < threshold, polarity, -polarity)\n        predictions += alpha * stump_predictions\n\n    return [1 if pred > 0 else -1 for pred in predictions]\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([-1, -1, 1, 1])\n# X_test = np.array([[1.5, 2.5], [3.5, 4.5]])\n# predictions = adaboost_predict(X_train, y_train, X_test, n_clf=3)\n# print(predictions)  # Output: [-1, 1]\n```"}
{"task_id": 241, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n\n    # Flatten the shape into a 2D matrix shape\n    d0 = shape[0]\n    d1 = np.prod(shape[1:])\n    matrix_shape = (d0, d1)\n\n    # Create a 2D matrix with i.i.d. samples from the standard normal distribution\n    A = np.random.randn(*matrix_shape)\n\n    # Compute the SVD of A\n    U, _, Vt = np.linalg.svd(A, full_matrices=False)\n\n    # Choose the SVD factor that has the same size as A\n    Q = U if U.shape == matrix_shape else Vt\n\n    # Reshape Q back to the requested tensor shape and multiply it by scale\n    result = (Q * scale).reshape(shape)\n\n    return result.tolist()\n\n# Example usage\nnp.random.seed(0)\nshape = (2, 2)\nscale = 0.5\nresult = orthogonal(shape, scale)\nprint(result)\n```\n\nThis script defines the `orthogonal` function that generates an orthogonally initialized tensor according to the specified shape and scale. The function checks if the shape has at least two dimensions, generates a 2D matrix with random samples, computes the SVD, and reshapes the orthogonal matrix back to the desired shape. The result is returned as a Python list."}
{"task_id": 243, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Convert state to numpy array for easier manipulation\n    state = np.array(state)\n    \n    # Define weights and biases (all weights = 1.0, all biases = 0.0)\n    W1 = np.ones((3, 4))\n    W2 = np.ones((4, 4))\n    W3 = np.ones((4, 4))\n    Wa = np.ones((4, 3))\n    Wc = np.ones((4, 1))\n    b1 = np.zeros(4)\n    b2 = np.zeros(4)\n    b3 = np.zeros(4)\n    ba = np.zeros(3)\n    bc = np.zeros(1)\n    \n    # Forward pass through the network\n    z1 = np.maximum(0, np.dot(state, W1) + b1)  # ReLU activation\n    z2 = np.maximum(0, np.dot(z1, W2) + b2)     # ReLU activation\n    z3 = np.maximum(0, np.dot(z2, W3) + b3)     # ReLU activation\n    logits = np.dot(z3, Wa) + ba\n    state_value = np.dot(z3, Wc) + bc\n    \n    # Softmax activation for actor head\n    exp_logits = np.exp(logits)\n    action_probs = exp_logits / np.sum(exp_logits)\n    \n    # Round the action probabilities and state value to 4 decimal places\n    action_probs = [round(prob, 4) for prob in action_probs]\n    state_value = round(state_value[0], 4)\n    \n    return action_probs, state_value\n\n# Example usage\nstate = [1.0, 2.0, 3.0]\naction_probs, state_value = actor_critic_forward(state)\nprint(\"Action Probabilities:\", action_probs)\nprint(\"State Value:\", state_value)\n```\n\nThis script defines the `actor_critic_forward` function that performs the forward pass of a small fully-connected Actor\u2013Critic network as described in the task. The function takes a state vector as input and returns the action probabilities and the state value, both rounded to four decimal places."}
{"task_id": 249, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    # Convert state and params to numpy arrays\n    state = np.array(state)\n    for key in params:\n        params[key] = np.array(params[key])\n\n    # Shared layers\n    x = np.maximum(0, state @ params['W1'] + params['b1'])\n    x = np.maximum(0, x @ params['W2'] + params['b2'])\n    x = np.maximum(0, x @ params['W3'] + params['b3'])\n\n    # Actor head\n    actor_output = x @ params['Wa'] + params['ba']\n    exp_scores = np.exp(actor_output - np.max(actor_output))\n    probabilities = exp_scores / np.sum(exp_scores)\n\n    # Critic head\n    value = x @ params['Wc'] + params['bc']\n\n    # Rounding\n    probabilities = np.round(probabilities, 4)\n    value = np.round(value, 4)\n\n    # Ensure 0 or 1 values are represented with one decimal place\n    probabilities = [float(f\"{p:.1f}\" if p == 0 or p == 1 else p) for p in probabilities]\n    value = float(f\"{value:.1f}\" if value == 0 or value == 1 else value)\n\n    return probabilities.tolist(), value\n\n# Example usage\nstate = [1.0, 2.0, 3.0]\nparams = {\n    'W1': [[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]],\n    'b1': [0.1, 0.2],\n    'W2': [[0.7, 0.8], [0.9, 1.0]],\n    'b2': [0.3, 0.4],\n    'W3': [[1.1, 1.2], [1.3, 1.4]],\n    'b3': [0.5, 0.6],\n    'Wa': [[1.5, 1.6], [1.7, 1.8]],\n    'ba': [0.7, 0.8],\n    'Wc': [[1.9, 2.0]],\n    'bc': [0.9]\n}\n\nprint(actor_critic_forward(state, params))\n```\n\nThis script defines the `actor_critic_forward` function that performs the forward pass through a three-layer Actor\u2013Critic network using NumPy. The function takes the current state and a dictionary of parameters, and returns the action probabilities and the state value, both rounded to four decimal places."}
{"task_id": 253, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l2_ratio = 1 - l1_ratio\n    \n    if gradient:\n        grad = alpha * (l1_ratio * np.sign(w) + l2_ratio * w)\n        return [round(x, 4) for x in grad.tolist()]\n    else:\n        penalty = alpha * (l1_ratio * np.linalg.norm(w, ord=1) + l2_ratio * 0.5 * np.dot(w, w))\n        return round(penalty, 4)\n\n# Example usage:\nweights = [1.0, -2.0, 3.0]\nalpha = 0.5\nl1_ratio = 0.7\n\n# Compute penalty\npenalty = elastic_net_regularization(weights, alpha, l1_ratio)\nprint(f\"Penalty: {penalty}\")\n\n# Compute gradient\ngrad = elastic_net_regularization(weights, alpha, l1_ratio, gradient=True)\nprint(f\"Gradient: {grad}\")\n```\n\nThis script defines the `elastic_net_regularization` function as requested, which computes either the Elastic-Net penalty or its gradient based on the `gradient` flag. The function accepts a weight vector `w`, a regularisation strength `alpha`, an L1 ratio `l1_ratio`, and a Boolean flag `gradient`. It returns the penalty value as a float or the gradient as a list of floats, both rounded to 4 decimal places as required."}
{"task_id": 256, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in [\"X\", \"y\"]:\n        return None\n\n    # Adjust parameter name if necessary\n    if param_name in [\"Ba\", \"Bx\"]:\n        param_name = param_name.lower()\n\n    # Get the parameter to be checked\n    param = model.parameters[param_name]\n\n    # Initialize the gradient array\n    grads = np.zeros_like(param, dtype=np.float64)\n\n    # Perform the gradient check\n    for i in range(param.size):\n        # Perturb the parameter\n        param_flat = param.flatten()\n        param_flat[i] += epsilon\n        model.parameters[param_name] = param_flat.reshape(param.shape)\n        model.flush_gradients()\n        predictions = [model.forward(X[:, :, t]) for t in range(n_t)]\n        loss_pos = loss_func(predictions)\n\n        param_flat[i] -= 2 * epsilon\n        model.parameters[param_name] = param_flat.reshape(param.shape)\n        model.flush_gradients()\n        predictions = [model.forward(X[:, :, t]) for t in range(n_t)]\n        loss_neg = loss_func(predictions)\n\n        # Compute the gradient\n        grads.flat[i] = (loss_pos - loss_neg) / (2 * epsilon)\n\n        # Reset the parameter\n        param_flat[i] += epsilon\n        model.parameters[param_name] = param_flat.reshape(param.shape)\n\n    return grads.T\n```"}
{"task_id": 257, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    m, n = X_train.shape\n    n_clf = max(1, n_clf)  # Ensure n_clf is at least 1\n    weights = np.full(m, 1 / m)  # Initialize weights\n    stumps = []\n    alphas = []\n\n    for _ in range(n_clf):\n        best_stump = None\n        best_error = float('inf')\n        best_threshold = None\n        best_feature = None\n        best_polarity = None\n\n        for feature in range(n):\n            for threshold in np.unique(X_train[:, feature]):\n                for polarity in [-1, 1]:\n                    prediction = np.where(polarity * X_train[:, feature] > polarity * threshold, 1, -1)\n                    error = np.sum(weights * (prediction != y_train))\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feature, threshold)\n                        best_polarity = polarity\n\n        alpha = 0.5 * np.log((1 - best_error) / best_error)\n        stumps.append((best_stump, best_polarity))\n        alphas.append(alpha)\n\n        # Update weights\n        prediction = np.where(best_polarity * X_train[:, best_stump[0]] > best_polarity * best_stump[1], 1, -1)\n        weights *= np.exp(-alpha * y_train * prediction)\n        weights /= np.sum(weights)\n\n    # Prediction for X_test\n    predictions = np.zeros(X_test.shape[0])\n    for (stump, polarity), alpha in zip(stumps, alphas):\n        feature, threshold = stump\n        prediction = np.where(polarity * X_test[:, feature] > polarity * threshold, 1, -1)\n        predictions += alpha * prediction\n\n    return list(np.sign(predictions))\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([1, 1, -1, -1])\n# X_test = np.array([[1, 1], [4, 4]])\n# predictions = adaboost_predict(X_train, y_train, X_test, n_clf=3)\n# print(predictions)  # Output: [1, -1]\n```"}
{"task_id": 261, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError(\"Shape must have at least two dimensions.\")\n    \n    fan_in = shape[1]\n    fan_out = shape[0]\n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n    \n    std = np.sqrt(2 / (fan_in + fan_out))\n    \n    with np.random.default_rng() as rng:\n        return rng.normal(loc=0, scale=std, size=shape)\n\n# Example usage and check\nshape = (3, 4, 5)  # Example shape for a tensor\nweights = glorot_normal(shape)\n\n# Output the shape and statistics to verify\nprint(\"Shape:\", weights.shape)\nprint(\"Mean:\", np.mean(weights))\nprint(\"Std Dev:\", np.std(weights))\nprint(\"Expected Std Dev:\", np.sqrt(2 / (4*5 + 3*5)))\n```\n\nThis script defines the `glorot_normal` function that generates a tensor with the specified shape using the Glorot/Xavier normal initialization method. It calculates the `fan_in` and `fan_out` values based on the tensor shape, computes the standard deviation, and then samples from a normal distribution with mean 0 and the calculated standard deviation. The example usage at the end demonstrates how to use the function and checks the output's shape and statistics to ensure they match the expected values."}
{"task_id": 266, "completion_id": 0, "completion": "```python\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    # Initialize adjacency list with empty lists for each vertex\n    adj_list = [[] for _ in V]\n    \n    # Create a dictionary to map vertex to its index in V\n    vertex_to_index = {vertex: index for index, vertex in enumerate(V)}\n    \n    # Process each edge and update the adjacency list\n    for u, v in E:\n        # Add v to u's adjacency list if not already present\n        if vertex_to_index[v] not in [vertex_to_index[neighbor] for neighbor in adj_list[vertex_to_index[u]]]:\n            adj_list[vertex_to_index[u]].append(v)\n        # Add u to v's adjacency list if not already present\n        if vertex_to_index[u] not in [vertex_to_index[neighbor] for neighbor in adj_list[vertex_to_index[v]]]:\n            adj_list[vertex_to_index[v]].append(u)\n    \n    # Sort each adjacency list according to the order in V\n    for i in range(len(adj_list)):\n        adj_list[i] = sorted(adj_list[i], key=lambda x: vertex_to_index[x])\n    \n    return adj_list\n\n# Example usage\nV = ['A', 'B', 'C', 'D']\nE = [('A', 'B'), ('B', 'C'), ('A', 'C'), ('C', 'D'), ('A', 'D'), ('A', 'D')]\nprint(build_adj_list(V, E))\n# Expected output: [['B', 'C', 'D'], ['A', 'C'], ['A', 'B', 'D'], ['A', 'C']]\n```\n\nThis Python function `build_adj_list` takes a list of vertices `V` and a list of edges `E` and returns an adjacency list representation of the graph. The adjacency list is a list of lists where each sublist contains the neighbors of the corresponding vertex in `V`, sorted by their order in `V`. The function ensures that each neighbor appears exactly once in the adjacency list."}
{"task_id": 267, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_stump = {\"feature_index\": -1, \"threshold\": 0.0, \"polarity\": 1, \"weighted_error\": float('inf')}\n    \n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_thresholds = np.unique(feature_values)\n        \n        for threshold in unique_thresholds:\n            for polarity in [1, -1]:\n                predictions = np.where((feature_values < threshold) == (polarity == 1), 1, -1)\n                error = np.sum(sample_weights * (predictions != y))\n                \n                if error < best_stump[\"weighted_error\"]:\n                    best_stump = {\n                        \"feature_index\": feature_index,\n                        \"threshold\": round(threshold, 4),\n                        \"polarity\": polarity,\n                        \"weighted_error\": round(error, 4)\n                    }\n    \n    return best_stump\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y = np.array([1, -1, 1, -1])\n# sample_weights = np.array([0.25, 0.25, 0.25, 0.25])\n# print(train_decision_stump(X, y, sample_weights))\n```\n\nThis script defines the `train_decision_stump` function that implements the logic to find the optimal weighted decision stump as described in the task. The function iterates over all features and all unique values of each feature to consider them as potential thresholds. It evaluates the weighted classification error for each possible stump and keeps track of the best one found. The function returns a dictionary with the details of the best stump."}
{"task_id": 273, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of labels.\"\"\"\n    label_counts = Counter(labels)\n    total = len(labels)\n    return -sum((count / total) * math.log2(count / total) for count in label_counts.values())\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    # Combine feature and target into a list of tuples for easier sorting and processing\n    combined = sorted(zip(feature, target), key=lambda x: x[0])\n    feature_sorted, target_sorted = zip(*combined)\n    \n    # Calculate the entropy of the parent node\n    parent_entropy = entropy(target_sorted)\n    \n    # Initialize variables to store the best threshold and its information gain\n    best_threshold = None\n    best_ig = 0.0\n    \n    # Iterate over all possible thresholds\n    for i in range(1, len(feature_sorted)):\n        if feature_sorted[i] != feature_sorted[i-1]:\n            threshold = (feature_sorted[i] + feature_sorted[i-1]) / 2\n            left_labels = [label for value, label in combined if value < threshold]\n            right_labels = [label for value, label in combined if value >= threshold]\n            \n            # Calculate the information gain for the current threshold\n            ig = parent_entropy - (len(left_labels) / len(target_sorted)) * entropy(left_labels) - \\\n                 (len(right_labels) / len(target_sorted)) * entropy(right_labels)\n            \n            # Update the best threshold and information gain if the current one is better\n            if ig > best_ig:\n                best_ig = ig\n                best_threshold = threshold\n    \n    # Return the best threshold and information gain, rounded to 4 decimal places\n    return (round(best_threshold, 4), round(best_ig, 4)) if best_threshold is not None else (None, 0.0)\n\n# Example usage\nfeature = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntarget = [0, 0, 1, 1, 1, 0, 0, 1, 1, 1]\nprint(best_split(feature, target))\n```\n\nThis script defines a function `best_split` that calculates the optimal numerical threshold for a decision tree split based on the information gain criterion. It uses the Shannon entropy to measure the quality of the split and iterates over all possible thresholds to find the one that maximizes the information gain. The function returns the best threshold and the corresponding information gain, both rounded to 4 decimal places."}
{"task_id": 286, "completion_id": 0, "completion": "```python\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    return [[0.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    return [[1.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    return [[random.uniform(low, high) for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError(\"Invalid initialization function.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    name = \"ones_init\"\n    shape = (2, 2)\n    init_fn = get_initializer(name)\n    output = init_fn(shape)\n    print(output)\n```"}
{"task_id": 287, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n    H_out = (H - p_h) // s_h + 1\n    W_out = (W - p_w) // s_w + 1\n    \n    # Initialize output and gradient input arrays\n    output = np.zeros((N, C, H_out, W_out))\n    grad_input = np.zeros_like(X)\n    \n    # Forward pass\n    for n in range(N):\n        for c in range(C):\n            for i in range(H_out):\n                for j in range(W_out):\n                    h_start, w_start = i * s_h, j * s_w\n                    h_end, w_end = h_start + p_h, w_start + p_w\n                    output[n, c, i, j] = np.mean(X[n, c, h_start:h_end, w_start:w_end])\n    \n    # Backward pass\n    for n in range(N):\n        for c in range(C):\n            for i in range(H_out):\n                for j in range(W_out):\n                    h_start, w_start = i * s_h, j * s_w\n                    h_end, w_end = h_start + p_h, w_start + p_w\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += accum_grad[n, c, i, j] / (p_h * p_w)\n    \n    # Rounding and converting to list\n    output = np.round(output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    \n    return output, grad_input\n\n# Example usage\nX = np.array([[[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]]])\npool_shape = (2, 2)\nstride = (2, 2)\naccum_grad = np.array([[[[1, 2], [3, 4]]]])\noutput, grad_input = average_pool2d(X, pool_shape, stride, accum_grad)\nprint(\"Output:\", output)\nprint(\"Gradient Input:\", grad_input)\n```\n\nThis script defines the `average_pool2d` function that performs both the forward and backward passes of a 2-D average-pooling layer. The function takes a 4-D NumPy array `X` as input, along with the pooling window size `pool_shape`, the stride `stride`, and the accumulated gradient `accum_grad`. It returns a tuple `(output, grad_input)` where both arrays are rounded to the nearest 4th decimal and converted to Python lists. The example usage demonstrates how to call the function with a sample input."}
{"task_id": 290, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature or not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-8):\n            return False\n        return (compare_trees(tree_a.left, tree_b.left) and\n                compare_trees(tree_a.right, tree_b.right))\n    else:\n        return False\n```"}
{"task_id": 292, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                           parent2: list[list[int | float]],\n                           cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    # Convert the parent lists to numpy arrays for easier manipulation\n    p1 = np.array(parent1)\n    p2 = np.array(parent2)\n    \n    # Validate that the two parent matrices have the same shape\n    if p1.shape != p2.shape:\n        return -1\n    \n    # Get the number of columns in the matrices\n    num_cols = p1.shape[1]\n    \n    # Validate the cutoff value\n    if cutoff < 0 or cutoff > num_cols:\n        raise ValueError(\"Cutoff value must be within the range of the number of columns.\")\n    \n    # Create the children matrices\n    child1 = np.copy(p1)\n    child2 = np.copy(p2)\n    \n    # Perform the crossover\n    if cutoff > 0:\n        child1[:, cutoff:] = p2[:, cutoff:]\n        child2[:, cutoff:] = p1[:, cutoff:]\n    \n    # Convert the children matrices back to lists and return\n    return child1.tolist(), child2.tolist()\n\n# Example usage:\nparent1 = [[1, 2, 3], [4, 5, 6]]\nparent2 = [[7, 8, 9], [10, 11, 12]]\ncutoff = 1\nchild1, child2 = single_point_crossover(parent1, parent2, cutoff)\nprint(\"Child 1:\", child1)\nprint(\"Child 2:\", child2)\n```\n\nThis script defines the `single_point_crossover` function that performs the crossover operation as described in the task. It includes validation for the input matrices and the cutoff value, and it ensures that the final children matrices are returned as Python lists."}
{"task_id": 294, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {label: [] for label in G['_V2I']}\n    for i, edges in enumerate(G['_G']):\n        for edge in edges:\n            source_label, target_label, weight = edge\n            adj[source_label].append((target_label, weight))\n            if not G['is_directed']:\n                adj[target_label].append((source_label, weight))\n    \n    # Sort the neighbour lists alphabetically by the neighbour label\n    for label in adj:\n        adj[label].sort(key=lambda x: x[0])\n    \n    return adj\n\n# Example usage:\nG = {\n    'is_directed': False,\n    '_V2I': {'A': 0, 'B': 1, 'C': 2},\n    '_G': [\n        [('A', 'B', 1.0), ('A', 'C', 2.0)],\n        [('B', 'A', 1.0), ('B', 'C', 3.0)],\n        [('C', 'A', 2.0), ('C', 'B', 3.0)]\n    ]\n}\n\nprint(to_networkx(G))\n```\n\nThis script defines the `to_networkx` function that converts a custom graph dictionary into a plain adjacency dictionary as specified in the task. The example usage at the end demonstrates how to call the function with a sample graph dictionary `G`."}
{"task_id": 296, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    # Convert input to NumPy array if it's not already one\n    x = np.asarray(x)\n    # Check if all elements are either 0 or 1\n    return np.all(np.logical_or(x == 0, x == 1))\n\n# Test cases to verify the correctness of the function\nif __name__ == \"__main__\":\n    test_cases = [\n        (np.array([0, 1, 1, 0]), True),\n        (np.array([0, 1, 2, 0]), False),\n        (np.array([1, 1, 1]), True),\n        (np.array([0.0, 1.0, 0.0]), True),\n        (np.array([True, False, True]), True),\n        (np.array([0, 1, 2, 3, 4]), False),\n        (np.array([]), True)  # An empty array technically does not contain non-binary values\n    ]\n    for i, (input_array, expected) in enumerate(test_cases):\n        result = is_binary(input_array)\n        assert result == expected, f\"Test case {i+1} failed: expected {expected}, got {result}\"\n        print(f\"Test case {i+1} passed.\")\n```\n\nThis script includes a function `is_binary` that checks if a given NumPy array contains only binary values (0 or 1). It also includes several test cases to verify the correctness of the function, covering different scenarios such as boolean arrays, float arrays, and arrays with non-binary values."}
{"task_id": 298, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    # Tokenize the corpus and query\n    tokenized_corpus = [sentence.split() for sentence in corpus]\n    tokenized_query = query.split()\n\n    # Pad the sentences for N-grams\n    if N > 1:\n        padding = ['<bol>'] * (N - 1)\n        tokenized_corpus = [padding + sentence + ['<eol>'] for sentence in tokenized_corpus]\n        tokenized_query = padding + tokenized_query + ['<eol>']\n\n    # Count N-grams and (N-1)-grams\n    ngram_counts = Counter()\n    prefix_counts = Counter()\n    for sentence in tokenized_corpus:\n        for i in range(len(sentence) - N + 1):\n            ngram = tuple(sentence[i:i+N])\n            prefix = tuple(sentence[i:i+N-1])\n            ngram_counts[ngram] += 1\n            prefix_counts[prefix] += 1\n\n    # Calculate the log-probability of the query\n    log_prob = 0.0\n    for i in range(len(tokenized_query) - N + 1):\n        ngram = tuple(tokenized_query[i:i+N])\n        prefix = tuple(tokenized_query[i:i+N-1])\n        if ngram_counts[ngram] == 0 or prefix_counts[prefix] == 0:\n            return float('-inf')\n        prob = ngram_counts[ngram] / prefix_counts[prefix]\n        log_prob += math.log(prob)\n\n    return round(log_prob, 4)\n\n\n# Example usage\ncorpus = [\"a b a\", \"b a b\"]\nquery = \"a b\"\nN = 1\nprint(ngram_log_prob(corpus, query, N))  # Output: -1.3863\n```\n\nThis script defines the `ngram_log_prob` function that calculates the total log-probability of a query sentence under an N-gram Maximum Likelihood Estimation (MLE) model trained on a given corpus. The function handles tokenization, padding for N-grams, counting of N-grams and their prefixes, and the calculation of log-probabilities. It returns the rounded log-probability or `float('-inf')` if any required N-gram has zero probability."}
{"task_id": 302, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n_samples, _ = X.shape\n    \n    # Step 1: Build the weighted adjacency matrix W\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i+1, n_samples):\n            dist = np.linalg.norm(X[i] - X[j])\n            W[i, j] = W[j, i] = 1 / (1 + dist)\n    \n    # Step 2: Compute the graph Laplacian L = D - W\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    \n    # Step 3: Obtain the first k eigenvectors of L\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    \n    # Step 4: Run k-means on the rows of E\n    centroids = E[:k].copy()\n    labels = np.zeros(n_samples, dtype=int)\n    for _ in range(100):\n        # Assign each point to the nearest centroid\n        distances = np.linalg.norm(E[:, np.newaxis] - centroids, axis=2)\n        new_labels = np.argmin(distances, axis=1)\n        \n        # Check for convergence\n        if np.array_equal(labels, new_labels):\n            break\n        \n        labels = new_labels\n        \n        # Update centroids\n        for i in range(k):\n            cluster_points = E[labels == i]\n            if len(cluster_points) > 0:\n                centroids[i] = np.mean(cluster_points, axis=0)\n            else:\n                # Reinitialize empty cluster centroid\n                centroids[i] = E[np.random.choice(n_samples)]\n    \n    return labels.tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [1, 4], [1, 0], [10, 2], [10, 4], [10, 0]])\n# k = 2\n# print(spectral_clustering(X, k))\n```\n\nThis script implements the Spectral Clustering algorithm from scratch, adhering to the constraints and requirements specified in the task description. It includes all necessary steps, from constructing the adjacency matrix to performing k-means clustering on the eigenvectors derived from the graph Laplacian."}
{"task_id": 303, "completion_id": 0, "completion": "```python\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_mine, prev_label = params[prev_ix]\n    curr_mine, curr_label = params[ix]\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n\n    return f\"\"\"------------------------- DEBUG -------------------------\nMine (prev) [{prev_label}]:\n{prev_mine}\n\nTheirs (prev) [{prev_label}]:\n{prev_gold}\n\nMine [{curr_label}]:\n{curr_mine}\n\nTheirs [{curr_label}]:\n{curr_gold}{warn_str}\n----------------------- END DEBUG -----------------------\"\"\"\n\n# Example usage\nparams = [(\"output1\", \"label1\"), (\"output2\", \"label2\")]\ngolds = {\"label1\": \"gold1\", \"label2\": \"gold2\"}\nix = 1\nwarn_str = \"\\nWarning: This is a test warning.\"\nprint(err_fmt(params, golds, ix, warn_str))\n```\n\nThis code snippet defines the `err_fmt` function as per the task description and includes an example usage that demonstrates how to call the function with sample data."}
{"task_id": 304, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.column_stack((np.ones(X.shape[0]), X))\n    \n    N, M = X.shape\n    \n    if isinstance(mu, (int, float)):\n        mu = np.full(M, mu)\n    \n    if V is None:\n        V = np.eye(M)\n    elif isinstance(V, (int, float)):\n        V = V * np.eye(M)\n    elif isinstance(V, (list, tuple)):\n        V = np.diag(V)\n    elif isinstance(V, np.ndarray) and V.ndim == 1:\n        V = np.diag(V)\n    \n    V_inv = np.linalg.inv(V)\n    X_T_X = X.T @ X\n    Sigma_b_inv = V_inv + X_T_X\n    Sigma_b = np.linalg.inv(Sigma_b_inv)\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    \n    return [round(x, 4) for x in mu_b]\n\n# Example usage:\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([2, 4, 6])\nmu = 0\nV = 1\nfit_intercept = True\nprint(bayesian_posterior_mean(X, y, mu=mu, V=V, fit_intercept=fit_intercept))\n```\n\nThis script defines the function `bayesian_posterior_mean` that computes the posterior mean of the coefficients in Bayesian linear regression with an unknown noise variance, as per the task description. The function handles the optional fitting of an intercept and various forms of prior specification for `V` and `mu`. The example usage at the end demonstrates how to call the function with a simple dataset."}
{"task_id": 308, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs // 2\n\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(mel):\n        return 700 * (10**(mel / 2595) - 1)\n\n    # Convert limits to Mel scale and generate equally-spaced values\n    mel_min = hz_to_mel(min_freq)\n    mel_max = hz_to_mel(max_freq)\n    mels = np.linspace(mel_min, mel_max, n_filters + 2)\n\n    # Convert back to Hertz\n    freqs = mel_to_hz(mels)\n\n    # Initialize the filterbank matrix\n    fbank = np.zeros((n_filters, N // 2 + 1))\n\n    # Compute the center points of each DFT bin\n    bin_centers = np.arange(N // 2 + 1) * fs / N\n\n    for i in range(n_filters):\n        # Find the triangle's left, center, and right points\n        left = freqs[i]\n        center = freqs[i + 1]\n        right = freqs[i + 2]\n\n        # Compute the slopes of the triangle\n        for k in range(N // 2 + 1):\n            freq = bin_centers[k]\n            if freq >= left and freq <= center:\n                fbank[i, k] = (freq - left) / (center - left)\n            elif freq >= center and freq <= right:\n                fbank[i, k] = (right - freq) / (right - center)\n\n    if normalize:\n        # Normalize each filter\n        for i in range(n_filters):\n            fbank[i] *= 2 / (freqs[i + 2] - freqs[i])\n\n    # Convert to list of lists and round to 4 decimal places\n    fbank_list = [[round(val, 4) for val in row] for row in fbank.tolist()]\n\n    return fbank_list\n\n# Example usage\nN = 512\nn_filters = 20\nfs = 44100\nmin_freq = 0\nmax_freq = None\nnormalize = True\n\nfilterbank = mel_filterbank(N, n_filters, fs, min_freq, max_freq, normalize)\nprint(filterbank)\n```\n\nThis script defines the `mel_filterbank` function that constructs a Mel filterbank matrix according to the specifications provided. The function is self-contained and includes the necessary helper functions for converting between Hertz and Mel scales. The resulting filterbank matrix is returned as a list of lists, with each value rounded to 4 decimal places as required."}
{"task_id": 312, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    \n    # Coefficients for the Blackman-Harris window\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    \n    # Adjust window length for periodic variant\n    if not symmetric:\n        window_len += 1\n    \n    # Generate the window\n    n = np.arange(window_len)\n    N = window_len - 1\n    bh_window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    \n    # Truncate for periodic variant\n    if not symmetric:\n        bh_window = bh_window[:-1]\n    \n    # Round to 4 decimal places and convert to list\n    return [round(x, 4) for x in bh_window]\n\n# Example usage\nprint(blackman_harris(5, symmetric=True))\nprint(blackman_harris(5, symmetric=False))\n```\n\nThis script defines the `blackman_harris` function that generates a Blackman-Harris window of a specified length and type (symmetric or periodic). The function handles special cases for window lengths of 0 or 1 and rounds the output to four decimal places."}
{"task_id": 313, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef digamma(x):\n    \"\"\"Approximate the digamma function using recursion and asymptotic expansion.\"\"\"\n    # Use recursion to shift x to a larger value\n    if x < 6:\n        return digamma(x + 1) - 1 / x\n    # Apply the asymptotic expansion for large x\n    return math.log(x) - 1 / (2 * x) - 1 / (12 * x**2) + 1 / (120 * x**4) - 1 / (252 * x**6)\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    # Convert to numpy array for easier manipulation\n    gamma = np.array(gamma)\n    # Compute the digamma values\n    digamma_t = digamma(gamma[d, t])\n    digamma_sum = digamma(np.sum(gamma[d, :]))\n    # Calculate the expected log\n    expected_log = digamma_t - digamma_sum\n    # Return the result rounded to 4 decimal places\n    return round(expected_log, 4)\n\n# Example usage\ngamma = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]\nd = 0\nt = 1\nprint(expected_log_dirichlet(gamma, d, t))  # Output should be the expected log value rounded to 4 decimals\n```\n\nThis script defines a `digamma` function to approximate the digamma function using recursion and asymptotic expansion, and an `expected_log_dirichlet` function to compute the expectation of the log of a Dirichlet component as specified in the task. The example usage at the end demonstrates how to call the function with a sample `gamma` matrix and indices `d` and `t`."}
{"task_id": 317, "completion_id": 0, "completion": "```python\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    header = '-' * 25 + ' DEBUG ' + '-' * 25 + '\\n'\n    footer = '\\n' + '-' * 23 + ' END DEBUG ' + '-' * 23 + '\\n'\n    \n    prev_ix = max(ix - 1, 0)\n    prev_prediction, prev_label = params[prev_ix]\n    prev_gold = golds[prev_label]\n    \n    curr_prediction, curr_label = params[ix]\n    curr_gold = golds[curr_label]\n    \n    report = (header +\n              f'Mine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\n' +\n              f'Theirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\n\\n' +\n              f'Mine [{curr_label}]:\\n{curr_prediction}\\n\\n' +\n              f'Theirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n' +\n              footer)\n    \n    return report\n\n# Example usage\nparams = [(\"Prediction1\", \"Label1\"), (\"Prediction2\", \"Label2\"), (\"Prediction3\", \"Label3\")]\ngolds = {\"Label1\": \"Gold1\", \"Label2\": \"Gold2\", \"Label3\": \"Gold3\"}\nix = 1\nwarn_str = \" (WARNING: mismatch)\"\n\nprint(err_fmt(params, golds, ix, warn_str))\n```\n\nThis script defines the `err_fmt` function as per the task description and includes an example usage that demonstrates how to call the function with sample data. The output will be a formatted multi-line string that can be used for debugging purposes."}
{"task_id": 318, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    weights = np.full(n_samples, 1/n_samples)\n    estimators = []\n    alphas = []\n\n    for _ in range(n_estimators):\n        min_error = float('inf')\n        best_stump = None\n        for feature in range(n_features):\n            for threshold in np.unique(X_train[:, feature]):\n                for polarity in [-1, 1]:\n                    prediction = polarity * np.sign(X_train[:, feature] - threshold)\n                    error = np.sum(weights[y_train != prediction])\n                    if error < min_error:\n                        min_error = error\n                        best_stump = (feature, threshold, polarity)\n        feature, threshold, polarity = best_stump\n        prediction = polarity * np.sign(X_train[:, feature] - threshold)\n        error = np.sum(weights[y_train != prediction])\n        alpha = 0.5 * math.log((1 - error) / error)\n        weights *= np.exp(-alpha * y_train * prediction)\n        weights /= np.sum(weights)\n        estimators.append(best_stump)\n        alphas.append(alpha)\n\n    def predict_sample(sample):\n        return sum(alpha * polarity * np.sign(sample[feature] - threshold)\n                   for (feature, threshold, polarity), alpha in zip(estimators, alphas))\n\n    predictions = [1 if predict_sample(sample) > 0 else -1 for sample in X_test]\n    return predictions\n```"}
{"task_id": 329, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    \n    bin_frequencies = np.fft.fftfreq(N, 1/fs)\n    if positive_only:\n        bin_frequencies = bin_frequencies[:N//2 + 1]\n    \n    return [round(freq, 4) for freq in bin_frequencies.tolist()]\n\n# Example usage:\nprint(dft_bins(8, 100, True))  # Example with positive_only=True\nprint(dft_bins(8, 100, False)) # Example with positive_only=False\n```\n\nThis script defines the `dft_bins` function as per the task description, which computes the centre frequency of each DFT bin based on the provided parameters. It handles both modes of operation and ensures the output is a list of frequencies rounded to four decimal places."}
{"task_id": 331, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    \n    # Calculate the number of OOB predictions for each sample\n    num_oob_predictions = np.sum(oob_mask, axis=1)\n    \n    # Find the indices of samples with at least one OOB prediction\n    valid_samples = np.where(num_oob_predictions > 0)[0]\n    \n    if len(valid_samples) == 0:\n        return -1\n    \n    # Calculate the average OOB prediction for each valid sample\n    oob_predictions = predictions[valid_samples] * oob_mask[valid_samples]\n    avg_oob_predictions = np.sum(oob_predictions, axis=1) / num_oob_predictions[valid_samples]\n    \n    # Calculate the squared error for each valid sample\n    y_true_valid = y_true[valid_samples]\n    squared_errors = (y_true_valid - avg_oob_predictions) ** 2\n    \n    # Calculate the mean of the squared errors\n    mse = np.mean(squared_errors)\n    \n    return round(mse, 4)\n\n# Example usage\ny_true = [1.0, 2.0, 3.0, 4.0]\npredictions = [[1.1, 1.2, 1.3], [1.9, 2.1, 2.2], [2.8, 3.0, 3.2], [3.9, 4.1, 4.2]]\noob_mask = [[0, 1, 1], [1, 0, 1], [1, 1, 0], [0, 1, 1]]\nprint(oob_mse(y_true, predictions, oob_mask))\n```\n\nThis script defines a function `oob_mse` that calculates the out-of-bag mean squared error for a Random Forest regressor based on the provided true target values, predictions from each tree, and a mask indicating which predictions were made out-of-bag. The function returns the OOB-MSE rounded to four decimal places, or -1 if the OOB estimate cannot be computed."}
{"task_id": 332, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    # Step 1: Compute the support for every item\n    item_counts = Counter(item for transaction in transactions for item in set(transaction))\n    \n    # Step 2: Discard items whose support is smaller than min_support\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_support}\n    \n    # Step 3: Create a global ordering of the remaining items\n    ordered_items = sorted(frequent_items.keys(), key=lambda x: (-frequent_items[x], x))\n    \n    # Initialize the root of the FP-Tree\n    root = {\"support\": 0, \"children\": {}}\n    \n    # Step 4: For every transaction, update the tree\n    for transaction in transactions:\n        # Remove duplicates, keep only frequent items, and reorder them\n        filtered_transaction = [item for item in transaction if item in frequent_items]\n        filtered_transaction.sort(key=lambda x: ordered_items.index(x) if x in ordered_items else -1)\n        \n        # Walk from the root and update/extend the path\n        current_node = root\n        for item in filtered_transaction:\n            if item in current_node[\"children\"]:\n                current_node[\"children\"][item][\"support\"] += 1\n            else:\n                current_node[\"children\"][item] = {\"support\": 1, \"children\": {}}\n            current_node = current_node[\"children\"][item]\n    \n    return root\n\n# Example usage\ntransactions = [\n    [\"a\", \"b\", \"c\", \"d\"],\n    [\"a\", \"b\", \"c\"],\n    [\"a\", \"b\"],\n    [\"a\", \"b\", \"d\"],\n    [\"b\", \"c\", \"d\"],\n    [\"b\", \"c\"],\n    [\"b\", \"d\"],\n    [\"b\", \"c\"],\n    [\"b\", \"d\"],\n    [\"c\", \"d\"]\n]\nmin_support = 3\nfp_tree = build_fp_tree(transactions, min_support)\nprint(fp_tree)\n```\n\nThis script defines the `build_fp_tree` function that constructs an FP-Tree from a list of transactions and a minimum support threshold. The tree is represented as a nested dictionary structure, as specified in the task description. The example usage at the end demonstrates how to call the function and print the resulting FP-Tree."}
{"task_id": 336, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", Y: list[list[int | float]] | \"np.ndarray\" | None = None, c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    # Convert inputs to NumPy arrays for easier manipulation\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    \n    # Check if the number of columns (features) in X and Y are the same\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # Compute the kernel matrix\n    K = np.dot(X, Y.T) + c0\n    \n    # Round the kernel matrix to 4 decimal places and convert to list of lists\n    K_rounded = np.round(K, decimals=4).tolist()\n    \n    return K_rounded\n\n# Example usage:\nX = [[1, 2], [3, 4]]\nY = [[5, 6], [7, 8]]\nc0 = 1\nprint(linear_kernel(X, Y, c0))\n```\n\nThis script defines the `linear_kernel` function as specified in the task, which computes the linear kernel matrix for two sets of input vectors `X` and `Y` (or `X` alone if `Y` is not provided). The function checks for compatibility in the dimensions of `X` and `Y`, computes the kernel matrix, rounds the results to 4 decimal places, and returns the matrix in the form of a list of lists. If the dimensions are incompatible, it returns `-1`."}
{"task_id": 340, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    # Update biased first and second moment estimates\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * (grad ** 2)\n    \n    # Compute bias-corrected first and second moment estimates\n    m_t_hat = m_t / (1 - beta1 ** t)\n    v_t_hat = v_t / (1 - beta2 ** t)\n    \n    # Update parameter\n    param_t = param - lr * m_t_hat / (np.sqrt(v_t_hat) + eps)\n    \n    # Convert to lists and round to 8 decimal places\n    updated_param = np.round(param_t.flatten(), 8).tolist()\n    new_m = np.round(m_t.flatten(), 8).tolist()\n    new_v = np.round(v_t.flatten(), 8).tolist()\n    \n    return updated_param, new_m, new_v\n\n# Example usage\nparam = np.array([1.0, 2.0])\ngrad = np.array([0.1, 0.2])\nt = 1\nm = np.array([0.0, 0.0])\nv = np.array([0.0, 0.0])\n\nupdated_param, new_m, new_v = adam_update(param, grad, t, m, v)\nprint(updated_param, new_m, new_v)\n```\n\nThis script defines the `adam_update` function that performs a single step of the Adam optimization algorithm. The function takes the current parameter value, its gradient, the time step, and the first and second moment estimates as inputs. It returns the updated parameter and the new moment estimates as lists, each rounded to 8 decimal places. The example usage at the end demonstrates how to call the function with sample data."}
{"task_id": 343, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                         rewards: list[float] | np.ndarray,\n                         retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # Calculate the number of samples to retain\n    num_retain = int(retain_prcnt * len(rewards))\n    \n    # Sort the rewards and get the indices of the top rewards\n    sorted_indices = np.argsort(rewards)[::-1][:num_retain]\n    \n    # Select the top samples based on the sorted indices\n    elite_samples = theta_samples[sorted_indices]\n    \n    # Compute the mean and variance of the elite samples\n    mean = np.mean(elite_samples, axis=0).tolist()\n    variance = np.var(elite_samples, axis=0).tolist()\n    \n    # Round the results to four decimal places\n    mean_rounded = [round(x, 4) for x in mean]\n    variance_rounded = [round(x, 4) for x in variance]\n    \n    return mean_rounded, variance_rounded\n\n# Example usage\ntheta_samples = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\nrewards = [10, 20, 30, 40]\nretain_prcnt = 0.5\nmean, variance = cross_entropy_update(theta_samples, rewards, retain_prcnt)\nprint(\"Mean:\", mean)\nprint(\"Variance:\", variance)\n```\n\nThis script defines the `cross_entropy_update` function that implements the core numerical step of the Cross-Entropy Method (CEM) for updating the sampling distribution based on the best-scoring parameter samples. The function takes in the sampled parameter vectors, their corresponding rewards, and the fraction of samples to retain, and returns the mean and variance of the retained samples, rounded to four decimal places."}
{"task_id": 353, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n\n    # Count the occurrences of each label\n    label_counts = Counter(labels)\n    total_labels = len(labels)\n\n    # Calculate the entropy\n    entropy_value = 0.0\n    for count in label_counts.values():\n        probability = count / total_labels\n        entropy_value -= probability * math.log2(probability)\n\n    return round(entropy_value, 5)\n\n# Test cases to verify the correctness\nif __name__ == \"__main__\":\n    # Test case 1: Empty labels\n    print(entropy([]))  # Expected output: 0.0\n\n    # Test case 2: All labels are identical\n    print(entropy(['apple', 'apple', 'apple']))  # Expected output: 0.0\n\n    # Test case 3: Mixed labels\n    print(entropy(['apple', 'orange', 'banana', 'apple', 'orange']))  # Expected output: 1.37095\n\n    # Test case 4: Using numpy array\n    print(entropy(np.array([1, 2, 3, 1, 2, 3, 3, 3])))  # Expected output: 1.34785\n```"}
{"task_id": 354, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kernel_rows, kernel_cols, _, out_ch = W.shape\n\n    # Handle padding\n    if isinstance(pad, int):\n        pad = (pad, pad, pad, pad)\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pad = (pad[0], pad[0], pad[1], pad[1])\n    elif pad == 'same':\n        pad = ((kernel_rows - 1) // 2, (kernel_rows - 1) // 2, (kernel_cols - 1) // 2, (kernel_cols - 1) // 2)\n\n    # Apply padding\n    X_padded = np.pad(X, ((0, 0), (pad[0], pad[1]), (pad[2], pad[3]), (0, 0)), mode='constant')\n\n    # Compute output dimensions\n    out_rows = (in_rows + pad[0] + pad[1] - (dilation * (kernel_rows - 1) + 1)) // stride + 1\n    out_cols = (in_cols + pad[2] + pad[3] - (dilation * (kernel_cols - 1) + 1)) // stride + 1\n\n    # Initialize output array\n    output = np.zeros((n_ex, out_rows, out_cols, out_ch))\n\n    # Dilate the kernel\n    if dilation > 0:\n        W_dilated = np.zeros((kernel_rows + (dilation * (kernel_rows - 1)), kernel_cols + (dilation * (kernel_cols - 1)), in_ch, out_ch))\n        W_dilated[::dilation + 1, ::dilation + 1, :, :] = W\n        kernel_rows, kernel_cols = W_dilated.shape[:2]\n        W = W_dilated\n\n    # Convert W to column matrix\n    W_col = W.reshape(-1, out_ch)\n\n    # Perform convolution\n    for i in range(out_rows):\n        for j in range(out_cols):\n            row_start = i * stride\n            row_end = row_start + kernel_rows\n            col_start = j * stride\n            col_end = col_start + kernel_cols\n            X_patch = X_padded[:, row_start:row_end, col_start:col_end, :]\n            X_col = X_patch.reshape(n_ex, -1)\n            output[:, i, j, :] = X_col @ W_col\n\n    return output.tolist()\n\n# Example usage\nX = np.random.rand(2, 5, 5, 3)\nW = np.random.rand(3, 3, 3, 2)\nstride = 1\npad = 'same'\ndilation = 0\nresult = conv2D(X, W, stride, pad, dilation)\nprint(result)\n```\n\nThis script defines a function `conv2D` that performs 2-D convolution using the im2col + GEMM strategy. The function accepts a batch of images and a bank of kernels, along with parameters for stride, padding, and dilation. The output is returned as a Python list."}
{"task_id": 355, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # Step 1: Standardize the data\n    centered_data = data - np.mean(data, axis=0)\n    \n    # Step 2: Obtain the principal directions\n    if solver == \"svd\":\n        _, _, Vt = np.linalg.svd(centered_data, full_matrices=False)\n        directions = Vt\n    elif solver == \"eigen\":\n        cov_matrix = np.cov(centered_data, rowvar=False, ddof=1)\n        eigenvalues, directions = np.linalg.eigh(cov_matrix)\n        # Sort eigenvalues and directions\n        sorted_indices = np.argsort(eigenvalues)[::-1]\n        eigenvalues = eigenvalues[sorted_indices]\n        directions = directions[:, sorted_indices]\n    else:\n        raise ValueError(\"Invalid solver. Choose 'svd' or 'eigen'.\")\n    \n    # Step 3: Keep the first n_components\n    n_components = min(n_components, directions.shape[1])\n    directions = directions[:, :n_components]\n    \n    # Step 4: Make the sign of every kept direction deterministic\n    for i in range(directions.shape[1]):\n        if directions[0, i] < 0:\n            directions[:, i] *= -1\n    \n    # Step 5: Project the centred data onto the retained directions\n    scores = np.dot(centered_data, directions)\n    \n    # Step 6: Calculate explained variance ratio\n    if solver == \"svd\":\n        explained_variance = np.sum(centered_data**2, axis=0) / centered_data.shape[0]\n    else:\n        explained_variance = eigenvalues[:n_components]\n    total_variance = np.sum(explained_variance)\n    explained_variance_ratio = (explained_variance / total_variance).tolist()\n    \n    # Round the results\n    scores = np.round(scores, 4).tolist()\n    explained_variance_ratio = [round(ratio, 4) for ratio in explained_variance_ratio]\n    \n    return scores, explained_variance_ratio\n```"}
{"task_id": 356, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # For classification, return the index of the maximum probability\n        return np.argmax(leaf.value)\n    else:\n        # For regression, return the scalar value\n        return leaf.value\n\n# Example usage:\n# Classification leaf\nclassification_leaf = Leaf([0.2, 0.5, 0.3])\nprint(leaf_predict(classification_leaf, True))  # Output: 1\n\n# Regression leaf\nregression_leaf = Leaf(15.6)\nprint(leaf_predict(regression_leaf, False))  # Output: 15.6\n```"}
{"task_id": 357, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    # Initialize centroids with the first K samples\n    centroids = data[:K].copy()\n    \n    for _ in range(max_iters):\n        # Assign each sample to the nearest centroid\n        distances = np.sqrt(((data - centroids[:, np.newaxis])**2).sum(axis=2))\n        labels = np.argmin(distances, axis=0)\n        \n        # Recompute centroids\n        new_centroids = np.array([data[labels == k].mean(axis=0) if np.any(labels == k) else centroids[k] for k in range(K)])\n        \n        # Check for convergence\n        if np.allclose(centroids, new_centroids, atol=1e-6):\n            break\n        \n        centroids = new_centroids\n    \n    # Sort centroids lexicographically and round to 4 decimals\n    sorted_centroids = np.round(np.sort(centroids, axis=0), decimals=4)\n    return sorted_centroids.tolist()\n\n# Example usage\ndata = np.array([[1, 1],\n                 [1, 2],\n                 [2, 1],\n                 [8, 8],\n                 [9, 8],\n                 [8, 9]])\nK = 2\nprint(kmeans(data, K))\n```\n\nThis script implements the K-Means clustering algorithm as described in the task. It initializes centroids with the first K samples, iteratively assigns each sample to the nearest centroid, recomputes centroids, and checks for convergence. The final centroids are sorted lexicographically and rounded to four decimal places before being returned."}
{"task_id": 362, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | np.ndarray) -> list[list[float]] | int:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert the input to a NumPy array of floats\n    matrix = np.array(data, dtype=float)\n    \n    # Compute the sum of every row\n    row_sums = matrix.sum(axis=1)\n    \n    # Check if any row sums to 0\n    if np.any(row_sums == 0):\n        return -1\n    \n    # Divide every element in a row by that row's sum\n    stochastic_matrix = matrix / row_sums[:, np.newaxis]\n    \n    # Round every entry to 4 decimal places\n    stochastic_matrix = np.round(stochastic_matrix, 4)\n    \n    # Convert the NumPy array back to a Python list of lists\n    return stochastic_matrix.tolist()\n\n# Example usage:\ndata = [[1, 2, 3], [4, 5, 6], [0, 0, 0]]\nresult = row_stochastic_matrix(data)\nprint(result)  # Should return -1 because the last row sums to 0\n```"}
{"task_id": 363, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    def check_continuous(space: Space) -> bool:\n        if isinstance(space, Box):\n            return True\n        elif isinstance(space, (Tuple, Dict)):\n            if isinstance(space, Tuple):\n                return all(check_continuous(sub_space) for sub_space in space.spaces)\n            else:  # Dict\n                return all(check_continuous(sub_space) for sub_space in space.spaces.values())\n        return False\n\n    cont_action = not tuple_action or check_continuous(env.action_space)\n    cont_obs = not tuple_obs or check_continuous(env.observation_space)\n\n    return cont_action, cont_obs\n\n# Example usage\naction_space = Tuple([Box(0.0, 1.0, (2,)), Box(-1.0, 1.0, (3,))])\nobservation_space = Dict({'position': Box(-10.0, 10.0, (2,)), 'velocity': Box(-1.0, 1.0, (2,))})\nenv = Env(action_space, observation_space)\nprint(is_continuous(env, True, True))  # Output: (True, True)\n```\n\nThis solution defines the `is_continuous` function that checks if the action and observation spaces of an environment are continuous based on the provided flags and the structure of the spaces. The `check_continuous` helper function is used to recursively check if all sub-spaces in a `Tuple` or `Dict` are instances of `Box`."}
{"task_id": 369, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    # Initialize the running prediction with zeros\n    running_pred = np.zeros_like(updates[0])\n    \n    # Aggregate the updates\n    for update in updates:\n        running_pred -= learning_rate * update\n    \n    # Return the result based on the problem type\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        # Apply softmax to convert logits to probabilities\n        exps = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        probabilities = exps / np.sum(exps, axis=1, keepdims=True)\n        # Return the class with the highest probability\n        return np.argmax(probabilities, axis=1)\n\n# Example usage:\n# Regression\nreg_updates = [np.array([1.0, 2.0, 3.0]), np.array([0.5, 1.5, 2.5])]\nreg_pred = gradient_boosting_predict(reg_updates, 0.1, True)\nprint(\"Regression Prediction:\", reg_pred)\n\n# Classification\nclass_updates = [np.array([[1.0, 2.0], [2.0, 1.0], [3.0, 0.5]]), np.array([[0.5, 1.5], [1.5, 0.5], [2.5, 1.0]])]\nclass_pred = gradient_boosting_predict(class_updates, 0.1, False)\nprint(\"Classification Prediction:\", class_pred)\n```"}
{"task_id": 371, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, _, out_channels = W.shape\n    \n    # Calculate effective kernel width considering dilation\n    effective_kernel_width = (kernel_width - 1) * dilation + 1\n    \n    # Calculate padding\n    if isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple):\n        p_left, p_right = pad\n    elif pad == \"same\":\n        out_len = int(np.ceil(signal_length / stride))\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel_width - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    else:\n        raise ValueError(\"Invalid padding type\")\n    \n    # Pad the input\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    \n    # Calculate output length\n    output_length = (signal_length + p_left + p_right - effective_kernel_width) // stride + 1\n    \n    # Initialize output volume\n    output = np.zeros((n_examples, output_length, out_channels))\n    \n    # Perform convolution\n    for i in range(n_examples):\n        for j in range(output_length):\n            for k in range(out_channels):\n                start = j * stride\n                end = start + effective_kernel_width\n                window = X_padded[i, start:end:dilation+1, :]\n                output[i, j, k] = np.sum(window * W[:, :, k])\n    \n    return output.tolist()\n\n# Example usage\nX = np.random.rand(2, 10, 3)  # 2 examples, 10 signal length, 3 input channels\nW = np.random.rand(3, 3, 2)   # 3 kernel width, 3 input channels, 2 output channels\nstride = 2\npad = \"same\"\ndilation = 1\n\nresult = conv1D(X, W, stride, pad, dilation)\nprint(result)\n```\n\nThis script defines the `conv1D` function that performs a 1-D cross-correlation between a batch of 1-D, multi-channel signals and a bank of kernels, supporting batches, multiple input/output channels, padding, stride, and dilation. The function returns the resulting 3-D volume as a regular Python list."}
{"task_id": 373, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gini(y: list[int] | np.ndarray) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    \n    # Convert to numpy array for easier manipulation\n    y = np.array(y)\n    # Count the number of unique classes and their occurrences\n    unique, counts = np.unique(y, return_counts=True)\n    # Calculate the relative frequencies\n    p = counts / len(y)\n    # Calculate the Gini impurity\n    gini_impurity = 1 - np.sum(p**2)\n    # Return the Gini impurity rounded to 4 decimal places\n    return round(gini_impurity, 4)\n\n# Example usage\nprint(gini([1, 1, 2, 2, 3, 3, 3]))  # Example input\n```\n\nThis code snippet defines a function `gini` that calculates the Gini impurity of a given list or NumPy array of integer labels. It handles the case of an empty input by returning `0.0` and uses NumPy for efficient computation of the Gini impurity."}
{"task_id": 374, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\"\"\"\n    # Check if the number of samples in X and y are consistent\n    if X.shape[0] != y.shape[0]:\n        return -1\n    \n    m, n = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n    \n    for _ in range(n_iterations):\n        y_pred = np.dot(X, theta) + b\n        error = y_pred - y\n        \n        dw = 2/m * np.dot(X.T, error)\n        db = 2/m * np.sum(error)\n        \n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    \n    # Round the results to 4 decimal places\n    theta_rounded = [round(t, 4) for t in theta]\n    b_rounded = round(b, 4)\n    \n    return (theta_rounded, b_rounded)\n\n# Example usage:\n# X = np.array([[1, 1], [1, 2], [2, 2], [2, 3]])\n# y = np.array([6, 8, 9, 11])\n# print(linear_regression_gd(X, y))\n```"}
{"task_id": 376, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Convert the list of lists to a NumPy array\n    X_np = np.array(X)\n    \n    # Check if the matrix is square\n    if X_np.shape[0] != X_np.shape[1]:\n        return False\n    \n    # Check if the matrix is equal to its transpose within the tolerance\n    return np.allclose(X_np, X_np.T, atol=1e-08)\n\n# Example usage:\n# matrix = [[1, 2.00000001], [2, 1]]\n# print(is_symmetric(matrix))  # Should return True\n```"}
{"task_id": 377, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Computes the negative gradient of the logistic loss function for binary classification.\n    \n    Parameters:\n    y (list): A list of binary class labels (0 or 1).\n    f (list): A list of current prediction scores (floats).\n    \n    Returns:\n    list: A list of negative gradients rounded to four decimal places.\n         Returns -1 if y contains values other than 0 or 1.\n    \"\"\"\n    # Check if y contains only 0 or 1\n    if not all(label in [0, 1] for label in y):\n        return -1\n    \n    # Convert labels to {-1, 1}\n    y_prime = np.array(y) * 2 - 1\n    f = np.array(f)\n    \n    # Compute the negative gradient\n    g = y_prime / (1 + np.exp(y_prime * f))\n    \n    # Round to four decimal places and return as a list\n    return [round(gradient, 4) for gradient in g]\n\n# Example usage\ny = [0, 1, 0, 1]\nf = [0.1, -0.2, 0.3, -0.4]\nprint(logistic_negative_gradient(y, f))\n```\n\nThis script defines a function `logistic_negative_gradient` that computes the negative gradient of the logistic loss function for binary classification, as described in the task. It checks if the labels are binary, converts them to {-1, 1}, computes the negative gradient, rounds the result to four decimal places, and returns the list of gradients. If the labels are not binary, it returns -1."}
{"task_id": 380, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    # Constants from the SELU paper\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n\n    # Convert input to NumPy array if it's not already\n    x = np.array(x)\n\n    if order == 0:\n        # SELU function\n        result = np.where(x > 0, scale * x, scale * alpha * (np.exp(x) - 1))\n    elif order == 1:\n        # First derivative of SELU\n        result = np.where(x > 0, scale, scale * alpha * np.exp(x))\n    elif order == 2:\n        # Second derivative of SELU\n        result = np.where(x > 0, 0, scale * alpha * np.exp(x))\n    else:\n        raise ValueError(\"Order must be 0, 1, or 2\")\n\n    # Round to 4 decimal places and convert to list\n    result = np.round(result, 4).tolist()\n\n    return result\n\n# Example usage:\n# print(selu([1, -1, 0], order=0))\n# print(selu([1, -1, 0], order=1))\n# print(selu([1, -1, 0], order=2))\n```"}
{"task_id": 387, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(x)\n    predictions = np.full(n_samples, np.mean(y))\n    \n    for _ in range(n_estimators):\n        residuals = y - predictions\n        \n        # Sort the samples by their x value\n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        sorted_residuals = residuals[sorted_indices]\n        \n        # Find all unique x values and their indices\n        unique_x, unique_indices = np.unique(sorted_x, return_index=True)\n        \n        # If all x values are identical, predict the global mean residual\n        if len(unique_x) == 1:\n            predictions += learning_rate * np.mean(sorted_residuals)\n            continue\n        \n        # Evaluate every possible split\n        best_split = None\n        best_error = float('inf')\n        for i in range(len(unique_indices) - 1):\n            split = (unique_x[i] + unique_x[i + 1]) / 2\n            left_mask = sorted_x <= split\n            right_mask = ~left_mask\n            \n            left_mean = np.mean(sorted_residuals[left_mask])\n            right_mean = np.mean(sorted_residuals[right_mask])\n            \n            error = np.sum((sorted_residuals[left_mask] - left_mean) ** 2) + np.sum((sorted_residuals[right_mask] - right_mean) ** 2)\n            \n            if error < best_error:\n                best_error = error\n                best_split = split\n        \n        # Update predictions\n        left_mask = x <= best_split\n        right_mask = ~left_mask\n        predictions[left_mask] += learning_rate * np.mean(residuals[left_mask])\n        predictions[right_mask] += learning_rate * np.mean(residuals[right_mask])\n    \n    return np.round(predictions, 4).tolist()\n\n# Example usage:\nx = [1.0, 2.0, 3.0, 4.0, 5.0]\ny = [1.1, 2.2, 3.3, 4.4, 5.5]\nn_estimators = 100\nlearning_rate = 0.1\npredictions = gradient_boosting_1d(x, y, n_estimators, learning_rate)\nprint(predictions)\n```\n\nThis script implements a 1-D gradient boosting regressor using decision stumps as described in the task. It sorts the samples by their x value, evaluates every possible split, and updates the predictions based on the residuals. The final predictions are rounded to four decimal places and returned as a Python list."}
{"task_id": 394, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-8\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    \n    Eg = rho * Eg + (1 - rho) * grad**2\n    w = w - learning_rate * grad / (np.sqrt(Eg) + epsilon)\n    \n    return np.round(w, 4).tolist(), np.round(Eg, 4).tolist()\n\n# Example usage\nw = np.array([1.0, 2.0, 3.0])\ngrad = np.array([0.1, 0.2, 0.3])\nEg = np.array([0.01, 0.02, 0.03])\n\nw_next, Eg_next = rmsprop_update(w, grad, Eg)\nprint(\"Updated parameters:\", w_next)\nprint(\"Updated running average:\", Eg_next)\n```\n\nThis script defines the `rmsprop_update` function which performs one update step of the RMSprop optimizer according to the provided specifications. The function initializes the running average of the squared gradients if it is `None`, updates the parameters and the running average, and returns both as rounded Python lists."}
{"task_id": 398, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if not derivative:\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        result = np.where(x >= 0, 1, alpha * np.exp(x))\n        result[x < 0] += alpha * (np.exp(x[x < 0]) - 1)\n    \n    return [round(float(num), 4) for num in result]\n\n# Example usage:\nx = [-1.0, 0.0, 1.0]\nalpha = 0.1\nprint(elu(x, alpha))  # Activation\nprint(elu(x, alpha, derivative=True))  # Gradient\n```\n\nThis code snippet defines the `elu` function that computes the ELU activation function or its gradient based on the input parameters. It uses NumPy for efficient computation and ensures the output is a list of floats rounded to 4 decimal places."}
{"task_id": 411, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    def analyze_data(data):\n        is_tuple = any(isinstance(x, (list, tuple, np.ndarray)) for x in data)\n        is_multidim = is_tuple and len(data[0]) > 1 if is_tuple else False\n        is_continuous = any(isinstance(x, float) and not x.is_integer() for x in data)\n        if is_tuple:\n            data = [item for sublist in data for item in sublist]\n        unique_values = np.unique(data)\n        n_unique_per_dim = [len(np.unique(np.array(data)[:, i])) for i in range(len(data[0]))] if is_multidim else [len(unique_values)]\n        return is_tuple, is_multidim, is_continuous, n_unique_per_dim, len(data[0]) if is_multidim else 1, unique_values.tolist()\n\n    actions_tuple, actions_multidim, actions_continuous, n_actions_per_dim, action_dim, action_ids = analyze_data(actions)\n    obs_tuple, obs_multidim, obs_continuous, n_obs_per_dim, obs_dim, obs_ids = analyze_data(observations)\n\n    return {\n        'tuple_actions': actions_tuple,\n        'tuple_observations': obs_tuple,\n        'multidim_actions': actions_multidim,\n        'multidim_observations': obs_multidim,\n        'continuous_actions': actions_continuous,\n        'continuous_observations': obs_continuous,\n        'n_actions_per_dim': n_actions_per_dim,\n        'action_dim': action_dim,\n        'n_obs_per_dim': n_obs_per_dim,\n        'obs_dim': obs_dim,\n        'action_ids': [list(set(action_ids[i:i+action_dim])) for i in range(0, len(action_ids), action_dim)] if actions_multidim else [action_ids],\n        'obs_ids': [list(set(obs_ids[i:i+obs_dim])) for i in range(0, len(obs_ids), obs_dim)] if obs_multidim else [obs_ids]\n    }\n\n# Example usage\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]\nprint(env_stats(actions, observations))\n```\n\nThis script defines the `env_stats` function as required, which analyzes the provided actions and observations lists and returns a dictionary with the specified statistics. The function uses a helper function `analyze_data` to handle the common logic for analyzing both actions and observations."}
{"task_id": 413, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    def mse(y):\n        return np.mean((y - np.mean(y)) ** 2)\n    \n    def split_node(X, y, depth):\n        if depth == max_depth or len(y) < 2:\n            return np.mean(y)\n        \n        best_split = {}\n        best_mse = float('inf')\n        \n        for i in range(X.shape[1]):\n            for value in np.unique(X[:, i]):\n                left_idx = X[:, i] <= value\n                right_idx = X[:, i] > value\n                \n                if np.sum(left_idx) == 0 or np.sum(right_idx) == 0:\n                    continue\n                \n                mse_left = mse(y[left_idx])\n                mse_right = mse(y[right_idx])\n                mse_split = (len(y[left_idx]) * mse_left + len(y[right_idx]) * mse_right) / len(y)\n                \n                if mse_split < best_mse:\n                    best_mse = mse_split\n                    best_split = {\n                        'feature_index': i,\n                        'value': value,\n                        'left': split_node(X[left_idx], y[left_idx], depth + 1),\n                        'right': split_node(X[right_idx], y[right_idx], depth + 1)\n                    }\n        \n        return best_split\n    \n    def predict_tree(x, tree):\n        if isinstance(tree, float):\n            return tree\n        if x[tree['feature_index']] <= tree['value']:\n            return predict_tree(x, tree['left'])\n        else:\n            return predict_tree(x, tree['right'])\n    \n    def predict(X, trees):\n        return np.array([sum(learning_rate * predict_tree(x, tree) for tree in trees) for x in X])\n    \n    # Initialize predictions to the mean of the training targets\n    F = np.mean(y_train)\n    predictions = np.full_like(y_train, F, dtype=float)\n    \n    trees = []\n    for _ in range(n_estimators):\n        # Compute residuals (negative gradients of the squared-error loss)\n        residuals = y_train - predictions\n        \n        # Fit a CART regression tree to the residuals\n        tree = split_node(X_train, residuals, 0)\n        trees.append(tree)\n        \n        # Update the running prediction\n        predictions += learning_rate * predict(X_train, [tree])\n    \n    # Make predictions on the test set\n    test_predictions = predict(X_test, trees)\n    return [round(float(pred), 4) for pred in test_predictions]\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([2, 3, 5, 6])\n# X_test = np.array([[2, 3], [3, 4]])\n# predictions = gbdt_regression(X_train, y_train, X_test)\n# print(predictions)\n```"}
{"task_id": 416, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Computes the multivariate Gaussian probability density function for a given set of data points.\n    \n    Parameters:\n    X (np.ndarray): A NumPy array of shape (n_samples, n_features) containing the data points.\n    mean (np.ndarray): The mean vector of the distribution.\n    cov (np.ndarray): The covariance matrix of the distribution.\n    \n    Returns:\n    list: A list of PDF values for each data point in X, rounded to 4 decimal places.\n    \"\"\"\n    # Ensure X is at least 2D\n    X = np.atleast_2d(X)\n    mean = np.atleast_1d(mean)\n    cov = np.atleast_2d(cov)\n    \n    n_samples, n_features = X.shape\n    det_cov = np.linalg.det(cov)\n    inv_cov = np.linalg.inv(cov)\n    \n    # Precompute the constant factor\n    const_factor = 1.0 / (math.sqrt((2 * math.pi) ** n_features * det_cov))\n    \n    pdf_values = []\n    for x in X:\n        diff = x - mean\n        exponent = -0.5 * np.dot(np.dot(diff, inv_cov), diff)\n        pdf = const_factor * math.exp(exponent)\n        pdf_values.append(round(pdf, 4))\n    \n    return pdf_values\n\n# Example usage\nX = np.array([[1, 2], [2, 3], [3, 4]])\nmean = np.array([1, 2])\ncov = np.array([[1, 0.5], [0.5, 1]])\nprint(multivariate_gaussian_pdf(X, mean, cov))\n```\n\nThis script defines a function `multivariate_gaussian_pdf` that calculates the probability density function for a multivariate Gaussian distribution for a given set of data points, mean vector, and covariance matrix. The function handles the input data points `X` as a NumPy array and ensures it is treated as a two-dimensional array even if it is one-dimensional. The output is a list of PDF values for each data point in `X`, rounded to four decimal places."}
{"task_id": 419, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    # Add intercept column if required\n    if fit_intercept:\n        X = np.column_stack((np.ones(X.shape[0]), X))\n        X_new = np.column_stack((np.ones(X_new.shape[0]), X_new))\n    \n    # Handle V as scalar, 1-D array, or None\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, (int, float)):\n        V = V * np.eye(X.shape[1])\n    elif V.ndim == 1:\n        V = np.diag(V)\n    \n    # Compute the posterior mean and covariance\n    V_inv = np.linalg.inv(V)\n    Sigma_p = np.linalg.inv(V_inv + X.T @ X)\n    mu_p = Sigma_p @ (V_inv @ mu + X.T @ y)\n    \n    # Compute the MAP predictive mean for new data\n    y_pred = X_new @ mu_p\n    \n    # Round predictions to 4 decimal places and convert to list\n    return [round(pred, 4) for pred in y_pred]\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([1, 2, 3])\n# X_new = np.array([[7, 8], [9, 10]])\n# mu = 0.0\n# sigma = 1.0\n# V = None\n# fit_intercept = True\n# predictions = bayesian_linear_regression_pred(X, y, X_new, mu, sigma, V, fit_intercept)\n# print(predictions)\n```\n\nThis script defines the function `bayesian_linear_regression_pred` which implements Bayesian linear regression with a conjugate Gaussian prior and known observation variance. The function takes in training data `X` and `y`, a new design matrix `X_new`, and optional parameters for the prior mean `mu`, prior variance `sigma`, prior covariance `V`, and whether to fit an intercept. It returns the MAP predictive means for every row in `X_new`, rounded to 4 decimal places."}
{"task_id": 423, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    # Validate input lengths\n    if len(actual) != len(predicted):\n        return -1\n    \n    # Validate non-negative numbers\n    if any(x < 0 for x in actual) or any(x < 0 for x in predicted):\n        return -1\n    \n    # Compute RMSLE\n    n = len(actual)\n    log_diffs = [(np.log(1 + predicted[i]) - np.log(1 + actual[i]))**2 for i in range(n)]\n    rmsle = np.sqrt(np.mean(log_diffs))\n    \n    # Return rounded result\n    return round(rmsle, 4)\n\n# Example usage\nactual = [1.0, 2.0, 3.0, 4.0, 5.0]\npredicted = [1.1, 1.9, 3.1, 3.9, 5.1]\nprint(root_mean_squared_log_error(actual, predicted))\n```\n\nThis script defines the `root_mean_squared_log_error` function that calculates the RMSLE between two lists of non-negative numbers, ensuring the inputs are valid and returning the result rounded to four decimal places."}
{"task_id": 428, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    else:\n        if symmetric:\n            n = np.arange(window_len)\n        else:\n            n = np.arange(window_len + 1)[:-1]\n        hann_window = 0.5 - 0.5 * np.cos(2 * math.pi * n / (window_len - 1 if symmetric else window_len))\n        return [round(x, 4) for x in hann_window]\n\n# Example usage:\nprint(hann(5, symmetric=True))  # Symmetric Hann window\nprint(hann(5, symmetric=False)) # Periodic Hann window\n```\n\nThis script defines the `hann` function that generates a Hann window of a specified length, with an option to generate either a symmetric or periodic window. The function handles special cases for window lengths of 0 or 1 and rounds the window coefficients to 4 decimal places."}
{"task_id": 433, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:  # Convolutional kernel\n        out_channels, in_channels, kernel_height, kernel_width = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:  # Dense layer, embedding matrix, etc.\n        fan_in, fan_out = shape[1], shape[0]\n    \n    return float(fan_in), float(fan_out)\n\n# Example usage:\n# print(glorot_fan((32, 64, 3, 3)))  # Convolutional kernel\n# print(glorot_fan((100, 200)))      # Dense layer\n```"}
{"task_id": 435, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]],\n                                y: list[float],\n                                n_estimators: int = 10,\n                                learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    # Convert X and y to NumPy arrays of type float\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n\n    # Initialize the current prediction with the mean of y\n    y_pred = np.full_like(y, np.mean(y), dtype=float)\n\n    # If n_estimators <= 0 or learning_rate = 0, return a vector filled with the target mean\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4) for _ in range(len(y))]\n\n    # Gradient Boosting loop\n    for t in range(n_estimators):\n        # Compute the residuals\n        residuals = y - y_pred\n\n        # Fit an OLS linear model to predict the residuals\n        # Add a column of ones to X for the intercept\n        X_with_intercept = np.column_stack((np.ones(X.shape[0]), X))\n        # Solve the normal equation to get the coefficients\n        coefficients = np.linalg.lstsq(X_with_intercept, residuals, rcond=None)[0]\n        # Obtain the weak-learner prediction\n        h_t = X_with_intercept @ coefficients\n\n        # Update the overall prediction\n        y_pred += learning_rate * h_t\n\n    # Return the final prediction vector rounded to 4 decimal places and converted to a regular Python list\n    return [round(pred, 4) for pred in y_pred]\n\n# Example usage:\nX = [[1, 2], [3, 4], [5, 6]]\ny = [2, 4, 6]\npredictions = gradient_boosting_regressor(X, y, n_estimators=10, learning_rate=0.1)\nprint(predictions)\n```\n\nThis script implements a small-scale version of the Gradient Boosting Regressor as described in the task. It uses ordinary least squares (OLS) linear regression as the weak learner and the squared error as the loss function. The predictions are returned as a list of floats, each rounded to four decimal places."}
{"task_id": 437, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    # Check if order is valid\n    if order not in [0, 1, 2]:\n        return -1\n\n    # Convert input to numpy array if it's not already\n    x = np.array(x) if not isinstance(x, np.ndarray) else x\n\n    # Compute the sigmoid function\n    sig = 1 / (1 + np.exp(-x))\n\n    # Compute the derivatives based on the order\n    if order == 0:\n        result = sig\n    elif order == 1:\n        result = sig * (1 - sig)\n    elif order == 2:\n        result = sig * (1 - sig) * (1 - 2 * sig)\n\n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n\n    # Return a float if the input was a scalar, otherwise return a list\n    return result.item() if result.size == 1 else result.tolist()\n\n# Example usage:\nprint(sigmoid(0))  # Scalar input\nprint(sigmoid([0, 1, -1], 1))  # List input with first derivative\nprint(sigmoid(np.array([0, 1, -1]), 2))  # Numpy array input with second derivative\n```"}
{"task_id": 438, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if not isinstance(y, np.ndarray):\n        y = np.array(y)\n    \n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    elif num_classes < np.max(y) + 1:\n        return -1\n    \n    one_hot = np.eye(num_classes)[y]\n    return one_hot.tolist()\n\n# Test cases\nprint(to_categorical([0, 1, 2, 3]))  # [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]]\nprint(to_categorical([0, 1, 2, 3], 4))  # [[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]]\nprint(to_categorical([0, 1, 2, 3], 3))  # -1\nprint(to_categorical([0, 1, 2, 3], 5))  # [[1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0]]\n```"}
{"task_id": 439, "completion_id": 0, "completion": "```python\nimport itertools\n\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    # Convert each transaction to a set for faster subset checking\n    transactions = [set(transaction) for transaction in transactions]\n    num_transactions = len(transactions)\n    min_sup_count = min_sup * num_transactions\n\n    # Generate candidate 1-itemsets\n    candidate_itemsets = set()\n    for transaction in transactions:\n        for item in transaction:\n            candidate_itemsets.add(frozenset([item]))\n    \n    frequent_itemsets = []\n    k = 1\n    while candidate_itemsets:\n        # Filter frequent itemsets\n        current_frequent_itemsets = set()\n        for itemset in candidate_itemsets:\n            support = sum(1 for transaction in transactions if itemset.issubset(transaction))\n            if support >= min_sup_count:\n                current_frequent_itemsets.add(itemset)\n        \n        # Add frequent itemsets to the result\n        frequent_itemsets.extend([tuple(sorted(itemset)) for itemset in current_frequent_itemsets])\n        \n        # Generate candidate (k+1)-itemsets\n        candidate_itemsets = set()\n        for itemset1, itemset2 in itertools.combinations(current_frequent_itemsets, 2):\n            candidate = itemset1.union(itemset2)\n            if len(candidate) == k + 1:\n                candidate_itemsets.add(candidate)\n        \n        # Prune candidates that contain infrequent subsets\n        candidate_itemsets = {c for c in candidate_itemsets if all(\n            frozenset(subset) in current_frequent_itemsets for subset in itertools.combinations(c, k))}\n        \n        k += 1\n    \n    # Sort the frequent itemsets by length and then lexicographically\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\n\n# Example usage\ntransactions = [\n    [1, 2, 3],\n    [2, 3],\n    [1, 3],\n    [2, 4],\n    [1, 2, 4],\n    [1, 2, 3, 4],\n    [2, 3],\n    [1, 2],\n    [1, 3],\n    [2, 3]\n]\nmin_sup = 0.4\nprint(apriori_frequent_itemsets(transactions, min_sup))\n```\n\nThis script implements the Apriori algorithm to find all frequent itemsets in a given transactional database, adhering to the constraints and requirements specified in the task description."}
{"task_id": 440, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    # Convert the list to a NumPy array for easier manipulation\n    predictions_array = np.array(predictions)\n    \n    # Average the predictions over the estimators\n    averaged_predictions = np.mean(predictions_array, axis=0)\n    \n    # Round the averaged probabilities to 4 decimal places\n    rounded_averaged_predictions = np.round(averaged_predictions, 4)\n    \n    # Find the class with the highest probability for each sample\n    predicted_classes = np.argmax(rounded_averaged_predictions, axis=1)\n    \n    # Convert back to Python lists before returning\n    return rounded_averaged_predictions.tolist(), predicted_classes.tolist()\n\n# Example usage\npredictions = [\n    [[0.1, 0.2, 0.7], [0.3, 0.4, 0.3]],\n    [[0.2, 0.6, 0.2], [0.4, 0.2, 0.4]],\n    [[0.3, 0.1, 0.6], [0.5, 0.3, 0.2]]\n]\n\naveraged_probs, predicted_classes = aggregate_predictions(predictions)\nprint(\"Averaged Probabilities:\", averaged_probs)\nprint(\"Predicted Classes:\", predicted_classes)\n```\n\nThis script defines the `aggregate_predictions` function that takes a three-level nested list of probability distributions as input and returns the averaged probabilities and the predicted class labels as specified in the task. The example usage demonstrates how to call the function and print the results."}
{"task_id": 444, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    \n    # Validate the inputs\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    if sigma is None:\n        sigma = np.sqrt(X.shape[1] / 2)\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n    elif isinstance(sigma, (list, np.ndarray)):\n        if len(sigma) != X.shape[1]:\n            return -1\n        if any(s <= 0 for s in sigma):\n            return -1\n        sigma = np.array(sigma)\n    else:\n        return -1\n    \n    # Compute the kernel matrix\n    N, C = X.shape\n    M, _ = Y.shape\n    kernel_matrix = np.zeros((N, M))\n    \n    for i in range(N):\n        for j in range(M):\n            diff = (X[i] - Y[j]) / sigma\n            kernel_matrix[i, j] = np.exp(-0.5 * np.sum(diff ** 2))\n    \n    # Round the kernel matrix to 4 decimal places and convert to list\n    kernel_matrix = np.round(kernel_matrix, 4).tolist()\n    \n    return kernel_matrix\n\n# Example usage\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0\nprint(rbf_kernel(X, Y, sigma))\n```\n\nThis script defines the `rbf_kernel` function that computes the RBF kernel matrix according to the given specifications. It validates the inputs, computes the kernel matrix, rounds the values to four decimal places, and returns the result as a nested list."}
{"task_id": 446, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of labels.\"\"\"\n    label_counts = Counter(labels)\n    total_samples = len(labels)\n    entropy = 0.0\n    for count in label_counts.values():\n        p = count / total_samples\n        entropy -= p * np.log2(p)\n    return entropy\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n    best_gain = -1\n    best_feature_index = -1\n    best_threshold = None\n    left_majority_label = None\n    right_majority_label = None\n\n    # Calculate the entropy of the parent node\n    parent_entropy = entropy(y)\n\n    # Iterate over all features\n    for j in range(n_features):\n        # Sort the feature column and get unique values\n        sorted_values = np.unique(X[:, j])\n        # Consider midpoints between successive values as thresholds\n        thresholds = (sorted_values[:-1] + sorted_values[1:]) / 2\n\n        for t in thresholds:\n            # Split the dataset based on the threshold\n            left_indices = X[:, j] <= t\n            right_indices = X[:, j] > t\n\n            # Calculate the entropy of the left and right children\n            left_entropy = entropy(y[left_indices])\n            right_entropy = entropy(y[right_indices])\n\n            # Calculate the information gain\n            p_left = np.sum(left_indices) / n_samples\n            p_right = np.sum(right_indices) / n_samples\n            gain = parent_entropy - p_left * left_entropy - p_right * right_entropy\n\n            # Update the best split if the current gain is higher\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = round(t, 4)\n                left_majority_label = Counter(y[left_indices]).most_common(1)[0][0]\n                right_majority_label = Counter(y[right_indices]).most_common(1)[0][0]\n\n    # If no split can improve information gain\n    if best_gain == -1:\n        majority_label = Counter(y).most_common(1)[0][0]\n        return (-1, None, majority_label, majority_label)\n\n    return (best_feature_index, best_threshold, left_majority_label, right_majority_label)\n\n# Example usage\nX = [[1.0, 2.0], [2.0, 3.0], [3.0, 4.0], [4.0, 5.0]]\ny = [0, 0, 1, 1]\nprint(decision_stump(X, y))\n```\n\nThis script defines a `decision_stump` function that implements the logic for finding the best single-level split (decision stump) based on information gain. It also includes a helper function `entropy` to calculate the Shannon entropy of a list of labels. The example usage at the end demonstrates how to call the function with a sample dataset."}
{"task_id": 452, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List\n\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    # Convert X to a NumPy array if it's not already one\n    X = np.array(X)\n    \n    # Determine the condition based on the type of threshold\n    if isinstance(threshold, (int, float)):\n        condition = X[:, feature_i] >= threshold\n    else:\n        condition = X[:, feature_i] == threshold\n    \n    # Split the data based on the condition\n    subset1 = X[condition].tolist()\n    subset2 = X[~condition].tolist()\n    \n    return [subset1, subset2]\n\n# Example usage:\nX_numeric = np.array([[1, 5], [3, 2], [4, 6], [2, 1]])\nfeature_i_numeric = 0\nthreshold_numeric = 3\nprint(divide_on_feature(X_numeric, feature_i_numeric, threshold_numeric))\n\nX_categorical = np.array([[1, \"A\"], [2, \"B\"], [3, \"A\"], [4, \"C\"]])\nfeature_i_categorical = 1\nthreshold_categorical = \"A\"\nprint(divide_on_feature(X_categorical, feature_i_categorical, threshold_categorical))\n```\n\nThis script defines the `divide_on_feature` function that splits a dataset based on a feature and a threshold, as described in the task. It handles both numeric and non-numeric thresholds and ensures the subsets are returned in their original order."}
{"task_id": 453, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    # Check for input consistency and gamma validity\n    batch_size = Q.shape[0]\n    if not (len(actions) == len(rewards) == len(dones) == batch_size):\n        return -1\n    if not (0 <= gamma <= 1):\n        return -1\n\n    # Initialize the target Q-values\n    Q_targets = Q.copy()\n\n    # Compute the target Q-values\n    for i in range(batch_size):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        Q_targets[i, actions[i]] = round(target, 4)\n\n    # Convert to list of lists and return\n    return Q_targets.tolist()\n\n# Example usage\nQ = np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]])\nQ_next = np.array([[0.2, 0.3, 0.4], [0.5, 0.6, 0.7]])\nactions = [1, 2]\nrewards = [1.0, 2.0]\ndones = [False, True]\ngamma = 0.9\n\nprint(update_q_values(Q, Q_next, actions, rewards, dones, gamma))\n```\n\nThis script defines the `update_q_values` function that computes the target Q-values for a batch of samples in a Deep Q-Network (DQN) setting. It checks for input consistency and the validity of the discount factor `gamma`. The function then computes the target Q-values based on the provided formula and returns the updated Q-values as a nested list, with each element rounded to four decimal places."}
{"task_id": 458, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if not labels:\n        return -1\n    \n    # Convert input to a list if it's not already\n    labels = list(labels)\n    \n    # Check for negative labels\n    if any(label < 0 for label in labels):\n        return -1\n    \n    # Infer num_classes if not provided\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    else:\n        if num_classes < max(labels) + 1:\n            return -1\n    \n    # Create the one-hot encoded list of lists\n    one_hot = []\n    for label in labels:\n        row = [0] * num_classes\n        row[label] = 1\n        one_hot.append(row)\n    \n    return one_hot\n\n# Example usage:\nlabels = [0, 1, 2, 0, 2]\nnum_classes = 3\nprint(to_categorical(labels, num_classes))  # [[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0], [0, 0, 1]]\n```"}
{"task_id": 461, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(y)\n    predictions = np.full(n_samples, np.mean(y))\n    \n    if n_estimators <= 0:\n        return np.round(predictions, 4).tolist()\n    \n    for _ in range(n_estimators):\n        residuals = y - predictions\n        if np.all(residuals == 0):\n            break\n        \n        best_sse = float('inf')\n        best_split = None\n        best_left_mean = None\n        best_right_mean = None\n        \n        unique_x = np.unique(x)\n        for t in unique_x[:-1]:\n            left_mask = x <= t\n            right_mask = x > t\n            \n            if np.any(left_mask) and np.any(right_mask):\n                left_residuals = residuals[left_mask]\n                right_residuals = residuals[right_mask]\n                \n                left_mean = np.mean(left_residuals)\n                right_mean = np.mean(right_residuals)\n                \n                sse = np.sum((left_residuals - left_mean) ** 2) + np.sum((right_residuals - right_mean) ** 2)\n                \n                if sse < best_sse:\n                    best_sse = sse\n                    best_split = t\n                    best_left_mean = left_mean\n                    best_right_mean = right_mean\n        \n        if best_split is None:\n            stump_prediction = np.mean(residuals)\n        else:\n            stump_prediction = np.where(x <= best_split, best_left_mean, best_right_mean)\n        \n        predictions += learning_rate * stump_prediction\n    \n    return np.round(predictions, 4).tolist()\n\n# Example usage:\nx = [1.0, 2.0, 3.0, 4.0, 5.0]\ny = [1.1, 2.1, 2.9, 4.1, 5.1]\npredictions = gradient_boosting_regressor(x, y, n_estimators=100, learning_rate=0.1)\nprint(predictions)\n```\n\nThis script implements the gradient boosting algorithm for one-dimensional regression data using decision stumps as weak learners. It follows the algorithm described in the task, including the special cases and constraints."}
{"task_id": 471, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    target = reward\n\n    if next_state is not None:\n        q_values_next_state = q_table[next_state]\n        max_q_value = max(q_values_next_state)\n        greedy_actions = [a for a, q in enumerate(q_values_next_state) if q == max_q_value]\n        expected_value = 0.0\n\n        for a in range(num_actions):\n            if a in greedy_actions:\n                expected_value += (1 - epsilon + epsilon / num_actions) * q_values_next_state[a]\n            else:\n                expected_value += (epsilon / num_actions) * q_values_next_state[a]\n\n        target += gamma * expected_value\n\n    q_table[state][action] += lr * (target - q_table[state][action])\n    return [[round(q, 4) for q in row] for row in q_table]\n\n# Example usage:\nq_table = [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]\nstate = 0\naction = 1\nreward = 1.0\nnext_state = 1\nepsilon = 0.1\nlr = 0.5\ngamma = 0.9\n\nupdated_q_table = expected_sarsa_update(q_table, state, action, reward, next_state, epsilon, lr, gamma)\nprint(updated_q_table)\n```\n\nThis script defines the `expected_sarsa_update` function that performs one step of the Expected\u2013SARSA algorithm. It takes the current Q-table, the state and action taken, the reward received, the next state (or `None` if the episode ends), and the SARSA hyperparameters as input. The function then updates the Q-table according to the Expected\u2013SARSA update rule and returns the updated Q-table with all entries rounded to four decimal places."}
{"task_id": 474, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n\n    def generate_samples(n_samples, m_classes, interval):\n        X = []\n        Y = []\n        for i in range(m_classes):\n            x_min = (i // 2 + 0.1) * 10\n            x_max = (i // 2 + 0.9) * 10\n            y_min = ((i % 2) * interval + 0.1) * 10\n            y_max = ((i % 2) * interval + 0.9) * 10\n            label = (i - 0.5) * 2\n            for _ in range(n_samples):\n                x = round(random.uniform(x_min, x_max), 4)\n                y = round(random.uniform(y_min, y_max), 4)\n                X.append([x, y])\n                Y.append(label)\n        return np.array(X), np.array(Y)\n\n    X_train, Y_train = generate_samples(n_train, m, interval)\n    X_val, Y_val = generate_samples(n_val, m, interval)\n\n    return X_train, X_val, Y_train, Y_val\n\n# Example usage:\nm = 2\nn_train = 100\nn_val = 50\ninterval = 1.0\nseed = 42\n\nX_train, X_val, Y_train, Y_val = generate_data(m, n_train, n_val, interval, seed)\nprint(\"X_train:\", X_train)\nprint(\"X_val:\", X_val)\nprint(\"Y_train:\", Y_train)\nprint(\"Y_val:\", Y_val)\n```\n\nThis script defines the `generate_data` function that generates a 2-D toy data set for a binary or multi-class classifier. The function accepts parameters for the number of classes, the number of training and validation samples per class, the vertical distance between class clusters, and an optional seed for reproducibility. The function returns four NumPy arrays: `X_train`, `X_val`, `Y_train`, and `Y_val`, which represent the training and validation sets with their corresponding labels. The coordinates are rounded to four decimal places as required."}
{"task_id": 475, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    # Initialize m_prev and v_prev to zero if they are None\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    \n    # Update the first and second moments\n    m_t = b1 * m_prev + (1 - b1) * grad\n    v_t = b2 * v_prev + (1 - b2) * (grad ** 2)\n    \n    # Bias correction\n    m_t_hat = m_t / (1 - b1 ** t)\n    v_t_hat = v_t / (1 - b2 ** t)\n    \n    # Update the parameters\n    w_new = w - learning_rate * m_t_hat / (np.sqrt(v_t_hat) + eps)\n    \n    return w_new, m_t, v_t\n\n# Example usage\nw_new, m_new, v_new = adam_update(1.0, 0.1, 0.0, 0.0, 1)\nprint(round(w_new, 9))  # \u2248 0.999000001\n```"}
{"task_id": 479, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n\n    num_arms = len(rewards[0])\n    value_estimates = np.full(num_arms, ev_prior)\n    pull_counts = np.zeros(num_arms)\n\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            # Explore: choose a random arm\n            chosen_arm = np.random.randint(num_arms)\n        else:\n            # Exploit: choose the arm with the highest estimated value\n            chosen_arm = np.argmax(value_estimates)\n\n        reward = rewards[t][chosen_arm]\n        pull_counts[chosen_arm] += 1\n        # Update the value estimate for the chosen arm\n        value_estimates[chosen_arm] += (reward - value_estimates[chosen_arm]) / pull_counts[chosen_arm]\n\n    return [round(v, 4) for v in value_estimates]\n\n# Example usage:\nrewards = [\n    [1.0, 0.0, 0.0],\n    [0.0, 1.0, 0.0],\n    [1.0, 0.0, 1.0],\n    [0.0, 1.0, 0.0],\n    [1.0, 0.0, 0.0]\n]\nprint(epsilon_greedy_bandit(rewards, epsilon=0.1, ev_prior=0.5, seed=42))\n```\n\nThis script defines the `epsilon_greedy_bandit` function that simulates the \u03b5-greedy strategy for a stationary multi-armed bandit problem. The function takes a matrix of rewards, an exploration probability (\u03b5), an initial expected value for each arm, and an optional seed for the random number generator. It returns the final estimated values for each arm after simulating the strategy over the provided rewards."}
{"task_id": 481, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef euclidean_distance(point1, point2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((point1 - point2) ** 2))\n\ndef region_query(data, point_index, eps):\n    \"\"\"Find all points within the eps radius of the given point.\"\"\"\n    neighbors = []\n    for index, point in enumerate(data):\n        if euclidean_distance(data[point_index], point) < eps:\n            neighbors.append(index)\n    return neighbors\n\ndef expand_cluster(data, labels, point_index, cluster_id, eps, min_samples):\n    \"\"\"Expand the cluster from the given point.\"\"\"\n    seeds = region_query(data, point_index, eps)\n    if len(seeds) < min_samples:\n        labels[point_index] = -1  # Label as noise\n        return False\n    else:\n        for seed_index in seeds:\n            labels[seed_index] = cluster_id\n        while seeds:\n            current_point = seeds.pop(0)\n            new_seeds = region_query(data, current_point, eps)\n            if len(new_seeds) >= min_samples:\n                for seed_index in new_seeds:\n                    if labels[seed_index] == -1:\n                        labels[seed_index] = cluster_id\n                    elif labels[seed_index] == 0:\n                        labels[seed_index] = cluster_id\n                        seeds.append(seed_index)\n        return True\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled -1 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n\n    labels = [0] * len(data)  # 0 means unvisited\n    cluster_id = 0\n\n    for point_index in range(len(data)):\n        if labels[point_index] == 0:\n            if expand_cluster(data, labels, point_index, cluster_id, eps, min_samples):\n                cluster_id += 1\n\n    return labels\n\n# Example usage:\ndata = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\neps = 3\nmin_samples = 2\nprint(dbscan(data, eps, min_samples))\n```\n\nThis script defines a `dbscan` function that implements the DBSCAN clustering algorithm from scratch. It includes a helper function for calculating Euclidean distance and another for querying the neighborhood of a point. The `expand_cluster` function is used to grow clusters from core points. The example usage at the end demonstrates how to call the `dbscan` function with a sample dataset."}
{"task_id": 482, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError(\"y contains labels that are out of the range [0, num_classes - 1]\")\n    categorical = np.zeros((y.size, num_classes), dtype=int)\n    categorical[np.arange(y.size), y] = 1\n    return categorical\n\n# Example usage:\n# labels = [0, 1, 2, 0, 1]\n# one_hot = to_categorical(labels)\n# print(one_hot)\n```"}
{"task_id": 485, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    if not X_train or not y_train:\n        return []\n\n    def sse(y):\n        mean_y = np.mean(y)\n        return np.sum((y - mean_y) ** 2)\n\n    def split_data(X, y, split_val):\n        left_idx = X <= split_val\n        right_idx = X > split_val\n        return X[left_idx], X[right_idx], y[left_idx], y[right_idx]\n\n    def build_tree(X, y, depth=0):\n        if depth == max_depth or len(X) < 2:\n            return np.mean(y)\n        \n        best_sse = float('inf')\n        best_split = None\n        for split_val in np.unique(X):\n            X_left, X_right, y_left, y_right = split_data(X, y, split_val)\n            if len(X_left) == 0 or len(X_right) == 0:\n                continue\n            current_sse = sse(y_left) + sse(y_right)\n            if current_sse < best_sse:\n                best_sse = current_sse\n                best_split = (X_left, X_right, y_left, y_right, split_val)\n        \n        if best_split is None:\n            return np.mean(y)\n        \n        X_left, X_right, y_left, y_right, split_val = best_split\n        left_tree = build_tree(X_left, y_left, depth + 1)\n        right_tree = build_tree(X_right, y_right, depth + 1)\n        \n        return (split_val, left_tree, right_tree)\n\n    def predict_tree(tree, x):\n        if isinstance(tree, float):\n            return tree\n        split_val, left_tree, right_tree = tree\n        if x <= split_val:\n            return predict_tree(left_tree, x)\n        else:\n            return predict_tree(right_tree, x)\n\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    tree = build_tree(X_train, y_train)\n    predictions = [predict_tree(tree, x) for x in X_test]\n    \n    return predictions\n```"}
{"task_id": 490, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:  # Check if the input is empty\n        return []\n    \n    # Convert input to a NumPy array if it's not already one\n    x_np = np.array(x)\n    \n    # Create a square diagonal matrix using np.diag and convert it back to list of lists\n    diagonal_matrix = np.diag(x_np).tolist()\n    \n    return diagonal_matrix\n\n# Example usage:\nvector = [1, 2, 3]\nprint(make_diagonal(vector))  # Output: [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n\nvector_empty = []\nprint(make_diagonal(vector_empty))  # Output: []\n```"}
{"task_id": 491, "completion_id": 0, "completion": "```python\nfrom collections import Counter, defaultdict\nimport itertools\n\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    # First pass: count item frequencies\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    # Filter items by min_sup\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_sup}\n    # Sort items by frequency (descending) and lexicographical order (ascending)\n    sorted_items = sorted(frequent_items, key=lambda x: (-frequent_items[x], x))\n    \n    # Build the FP-tree\n    root = FPNode(None, None)\n    for transaction in transactions:\n        transaction = sorted([item for item in transaction if item in frequent_items], key=lambda x: sorted_items.index(x))\n        if transaction:\n            insert_transaction(root, transaction, frequent_items)\n    \n    # Header table for quick access to nodes\n    header_table = defaultdict(list)\n    for node in root.iterate():\n        if node.item is not None:\n            header_table[node.item].append(node)\n    \n    # Recursive mining\n    def mine_tree(node_path, prefix):\n        for item in sorted(header_table, key=lambda x: header_table[x][0].count):\n            new_prefix = prefix + (item,)\n            yield new_prefix\n            suffixes = []\n            for node in header_table[item]:\n                suffixes.extend(find_prefix_paths(node))\n            if suffixes:\n                conditional_tree = build_tree(suffixes, min_sup)\n                for pattern in mine_tree(conditional_tree, new_prefix):\n                    yield pattern\n    \n    def find_prefix_paths(node):\n        paths = []\n        while node:\n            path = []\n            current = node\n            while current.parent.item is not None:\n                path.append(current.parent.item)\n                current = current.parent\n            if path:\n                paths.append((path, node.count))\n            node = node.link\n        return paths\n    \n    def build_tree(paths, min_sup):\n        root = FPNode(None, None)\n        for path, count in paths:\n            insert_transaction(root, path, {item: count for item in path}, count)\n        return root\n    \n    def insert_transaction(root, transaction, item_counts, count=1):\n        current = root\n        for item in transaction:\n            if item in current.children:\n                current.children[item].count += count\n            else:\n                new_node = FPNode(item, current)\n                current.children[item] = new_node\n                if item in header_table:\n                    header_table[item][-1].link = new_node\n                    header_table[item].append(new_node)\n                else:\n                    header_table[item].append(new_node)\n            current = current.children[item]\n    \n    class FPNode:\n        def __init__(self, item, parent):\n            self.item = item\n            self.count = 0\n            self.parent = parent\n            self.children = {}\n            self.link = None\n        \n        def iterate(self):\n            yield self\n            for child in self.children.values():\n                yield from child.iterate()\n    \n    # Start mining\n    frequent_itemsets = list(mine_tree(root, ()))\n    # Sort the itemsets by length and lexicographically\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\n\n# Example usage\ntransactions = [\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"A\", \"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"C\", \"D\", \"E\"],\n    [\"B\", \"C\", \"D\"]\n]\nmin_sup = 3\nprint(fp_growth(transactions, min_sup))\n```\n\nThis script implements the FP-Growth algorithm to mine frequent item-sets from a collection of transactions. It first constructs an FP-tree and then recursively mines the tree to find all frequent item-sets. The output is sorted by item-set length and lexicographically."}
{"task_id": 492, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n\n    X = np.array(X)\n    n_samples, n_features = X.shape\n    indices = list(combinations_with_replacement(range(n_features), degree))\n    n_output_features = len(indices) + sum(range(n_features + degree))\n\n    # Initialize the output matrix\n    output = np.ones((n_samples, n_output_features))\n\n    # Compute the polynomial features\n    for i, index in enumerate(indices):\n        output[:, i+1] = np.prod(X[:, index], axis=1)\n\n    return output.tolist()\n\n# Example usage:\nX = [[1, 2], [3, 4]]\ndegree = 2\nprint(polynomial_features(X, degree))\n```\n\nThis script defines the `polynomial_features` function that generates a full polynomial feature matrix up to a given degree for a given input data matrix `X`. The function checks if the degree is negative and returns -1 in that case. Otherwise, it computes the polynomial features and returns the result as a list of lists."}
{"task_id": 493, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1\n    y = np.array(y)\n    y_mean = np.mean(y)\n    mse_value = np.mean((y - y_mean) ** 2)\n    return round(mse_value, 4)\n\n# Example usage:\n# sample = [1.0, 2.0, 3.0, 4.0]\n# print(mse(sample))  # Output should be 1.25\n```"}
{"task_id": 496, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Convert input to NumPy array if it's a list\n    x = np.array(x) if not isinstance(x, np.ndarray) else x\n    \n    # Ensure x is treated as a 1-D array\n    x = np.atleast_1d(x)\n    \n    # Calculate the affine activation\n    y = slope * x + intercept\n    \n    # The first derivative of the affine function is the slope\n    grad = np.full_like(x, slope, dtype=float)\n    \n    # The second derivative of the affine function is always 0\n    grad2 = np.zeros_like(x, dtype=float)\n    \n    # Round the results to 4 decimal places\n    y_rounded = np.round(y, 4).tolist()\n    grad_rounded = np.round(grad, 4).tolist()\n    grad2_rounded = np.round(grad2, 4).tolist()\n    \n    return y_rounded, grad_rounded, grad2_rounded\n\n# Example usage:\nx = [1.0, 2.0, 3.0]\nslope = 2.0\nintercept = 1.0\ny, grad, grad2 = apply_affine(x, slope, intercept)\nprint(f\"y: {y}, grad: {grad}, grad2: {grad2}\")\n```\n\nThis script defines the `apply_affine` function as requested, which takes a 1-D list or NumPy array `x`, and optional `slope` and `intercept` parameters. It returns a tuple of three lists: the affine activation output, the first derivative, and the second derivative, each rounded to 4 decimal places. The example usage demonstrates how to call the function and print the results."}
{"task_id": 499, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    n_samples, n_features = data.shape\n\n    if k < 1 or k > n_features:\n        return -1\n\n    # Step 1: Standardise each feature\n    means = np.mean(data, axis=0)\n    stds = np.std(data, axis=0, ddof=1)  # Population variance (ddof=0), but we use sample std (ddof=1)\n    std_data = (data - means) / np.where(stds != 0, stds, 1)\n\n    # Step 2: Compute the sample covariance matrix\n    cov_matrix = np.cov(std_data, rowvar=False, bias=False)  # rowvar=False: each row represents a variable\n\n    # Step 3: Perform eigen-decomposition\n    eigenvalues, eigenvectors = np.linalg.eigh(cov_matrix)\n\n    # Step 4: Sort eigenvalues and eigenvectors\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n\n    # Step 5: Fix the sign of every eigenvector\n    max_abs_indices = np.argmax(np.abs(sorted_eigenvectors), axis=0)\n    signs = np.sign(sorted_eigenvectors[max_abs_indices, np.arange(n_features)])\n    sorted_eigenvectors = sorted_eigenvectors * signs\n\n    # Step 6: Project the standardised data on the first k eigenvectors\n    projection_matrix = sorted_eigenvectors[:, :k]\n    projected_data = np.dot(std_data, projection_matrix)\n\n    # Return the projected data as a Python list, rounded to 4 decimal places\n    return np.round(projected_data, 4).tolist()\n\n# Example usage:\n# data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n# k = 2\n# print(pca_transform(data, k))\n```"}
{"task_id": 500, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    n_samples, n_features = X_train.shape\n    F = np.full(n_samples, np.mean(y_train))\n    predictions = np.zeros(X_test.shape[0])\n    \n    for _ in range(n_estimators):\n        residuals = y_train - F\n        best_feature, best_threshold, best_left_value, best_right_value, best_error = None, None, None, None, float('inf')\n        \n        for feature in range(n_features):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                left_indices = X_train[:, feature] <= threshold\n                right_indices = X_train[:, feature] > threshold\n                \n                left_value = np.mean(residuals[left_indices])\n                right_value = np.mean(residuals[right_indices])\n                \n                error = np.sum((residuals[left_indices] - left_value) ** 2) + np.sum((residuals[right_indices] - right_value) ** 2)\n                \n                if error < best_error:\n                    best_feature, best_threshold, best_left_value, best_right_value, best_error = feature, threshold, left_value, right_value, error\n        \n        F += learning_rate * (best_left_value * (X_train[:, best_feature] <= best_threshold) + best_right_value * (X_train[:, best_feature] > best_threshold))\n        \n        predictions += learning_rate * (best_left_value * (X_test[:, best_feature] <= best_threshold) + best_right_value * (X_test[:, best_feature] > best_threshold))\n    \n    return [1 if pred >= 0.5 else 0 for pred in predictions]\n\n# Example usage:\nX_train = [[1, 2], [2, 3], [3, 4], [4, 5]]\ny_train = [0, 0, 1, 1]\nX_test = [[1.5, 2.5], [3.5, 4.5]]\npredictions = gradient_boosting_classifier(X_train, y_train, X_test)\nprint(predictions)  # Output should be a list of 0s and 1s\n```"}
{"task_id": 505, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n\n    m, n_v = X.shape\n    n_h = hbias.shape[0]\n\n    # Positive phase\n    h0_prob = sigmoid(X @ W + hbias)\n    pos_grad = X.T @ h0_prob\n\n    # Initialize the hidden and visible probabilities\n    v_k_prob = X\n    h_k_prob = h0_prob\n\n    # Gibbs sampling steps\n    for _ in range(k):\n        v_k_prob = sigmoid(h_k_prob @ W.T + vbias)\n        h_k_prob = sigmoid(v_k_prob @ W + hbias)\n\n    # Negative phase\n    neg_grad = v_k_prob.T @ h_k_prob\n\n    # Update weights\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n\n    # Return the updated weights as a list of lists, rounded to 4 decimal places\n    return np.round(W_new, 4).tolist()\n\n# Example usage\nif __name__ == \"__main__\":\n    X = np.array([[0, 1], [1, 0]])\n    W = np.array([[0.1, 0.2], [0.3, 0.4]])\n    hbias = np.array([0.5, 0.6])\n    vbias = np.array([0.7, 0.8])\n    learning_rate = 0.1\n    k = 1\n\n    updated_W = contrastive_divergence(X, W, hbias, vbias, learning_rate, k)\n    print(updated_W)\n```"}
{"task_id": 509, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Check if the vectors have the same length\n    if x.shape != y.shape:\n        return -1\n    \n    # Calculate the Chebyshev distance\n    distance = np.max(np.abs(x - y))\n    \n    # Return the distance rounded to four decimal places\n    return round(float(distance), 4)\n\n# Example usage\nx = [1, 2, 3]\ny = [2, 4, 6]\nprint(chebyshev(x, y))  # Output: 3.0\n```"}
{"task_id": 510, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    # Clip y_pred to avoid log(0) and log(1) which are undefined or -inf\n    eps = np.finfo(float).eps\n    y_pred = np.clip(y_pred, eps, 1 - eps)\n    \n    # Compute the binary cross-entropy\n    reconstruction_loss = -np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred), axis=1)\n    \n    # Compute the KL divergence\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var), axis=1)\n    \n    # Compute the total loss\n    total_loss = np.mean(reconstruction_loss + kl_divergence)\n    \n    # Return the average loss rounded to 6 decimal places\n    return round(total_loss, 6)\n\n# Example usage\nif __name__ == \"__main__\":\n    y = np.array([[1, 0], [0, 1]])\n    y_pred = np.array([[0.9, 0.1], [0.1, 0.9]])\n    t_mean = np.array([[0.5, -0.5], [-0.5, 0.5]])\n    t_log_var = np.array([[-1, -2], [-2, -1]])\n    \n    loss = vae_loss(y, y_pred, t_mean, t_log_var)\n    print(loss)\n```\n\nThis script defines the `vae_loss` function that calculates the VAE loss for Bernoulli visible units as described in the task. It includes clipping of the predicted values to avoid numerical instability, computes the reconstruction loss and KL divergence, and returns the average loss rounded to six decimal places. An example usage is also provided to demonstrate how to call the function with sample data."}
{"task_id": 513, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    \n    # Linear term\n    linear_term = np.dot(X, w)\n    \n    # Interaction term\n    interaction_term = 0.5 * np.sum((X @ V) ** 2 - X ** 2 @ (V ** 2), axis=1)\n    \n    # Prediction\n    predictions = w0 + linear_term + interaction_term\n    \n    return [round(pred, 4) for pred in predictions]\n\n# Example usage\nX = [[1, 2, 3], [4, 5, 6]]\nw0 = 1.0\nw = [0.1, 0.2, 0.3]\nV = [[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]]\n\npredictions = fm_predict(X, w0, w, V)\nprint(predictions)\n```\n\nThis script defines the `fm_predict` function that implements the Factorization Machine regression formula for a batch of samples. The function takes a 2D feature matrix `X`, a global bias term `w0`, a list of linear coefficients `w`, and a matrix of latent interaction factors `V`. It returns a list of predictions for each sample, rounded to 4 decimal places. The example usage demonstrates how to call the function with sample data."}
{"task_id": 517, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # Convert input to numpy array if it is not already one\n    if not isinstance(z, np.ndarray):\n        z = np.array(z)\n    \n    # Compute the sigmoid in a numerically stable way\n    # For very large positive values of z, use 1 / (1 + e^(-z))\n    # For very large negative values of z, use e^z / (1 + e^z)\n    # This avoids overflow issues\n    with np.errstate(over='ignore', under='ignore'):\n        result = np.where(z >= 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n    \n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n    \n    # Convert back to scalar or list if necessary\n    if result.size == 1:\n        return float(result)\n    else:\n        return result.tolist()\n\n# Test the function\nprint(sigmoid([-1, 0, 1]))  # Expected output: [0.2689, 0.5, 0.7311]\n```"}
{"task_id": 518, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        # Convert actual if it's a one-hot encoded array\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        # Convert predicted if it's a one-hot encoded array\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        # Call the original function with the processed arrays\n        return function(actual, predicted)\n    return wrapper\n\n@unhot\ndef accuracy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Simple accuracy rounded to 4 decimals.\"\"\"\n    return float(np.round(np.mean(actual == predicted), 4))\n\n# Example usage\nactual    = np.array([[0,1,0], [1,0,0], [0,0,1]])  # one-hot\npredicted = np.array([[0,1,0], [0,1,0], [0,0,1]])  # one-hot\nprint(accuracy(actual, predicted))  # 0.6667\n```"}
{"task_id": 520, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    def compute_grad(x):\n        return np.round(x * (1 - x), 4)\n    \n    if isinstance(z, float):\n        return compute_grad(z)\n    elif isinstance(z, np.ndarray):\n        return compute_grad(z)\n    elif isinstance(z, list):\n        if not z:\n            return []\n        elif isinstance(z[0], list):\n            return [sigmoid_grad(sublist) for sublist in z]\n        else:\n            return [compute_grad(x) for x in z]\n    else:\n        raise ValueError(\"Input must be a float, list, or NumPy ndarray.\")\n\n# Check function to verify the correctness of the generated function\ndef check_sigmoid_grad():\n    test_cases = [\n        (0.5, 0.25),\n        ([0.5, 0.75], [0.25, 0.1875]),\n        ([[0.5, 0.75], [0.25, 0.1]], [[0.25, 0.1875], [0.1875, 0.09]]),\n        (np.array([0.5, 0.75]), np.array([0.25, 0.1875])),\n        (np.array([[0.5, 0.75], [0.25, 0.1]]), np.array([[0.25, 0.1875], [0.1875, 0.09]])),\n        ([], []),\n    ]\n    for input_val, expected in test_cases:\n        result = sigmoid_grad(input_val)\n        if isinstance(result, np.ndarray):\n            assert np.allclose(result, expected), f\"Test failed for input {input_val}. Expected {expected}, got {result}.\"\n        elif isinstance(result, list):\n            assert result == expected, f\"Test failed for input {input_val}. Expected {expected}, got {result}.\"\n        else:\n            assert result == expected, f\"Test failed for input {input_val}. Expected {expected}, got {result}.\"\n    print(\"All tests passed.\")\n\n# Run the check function\ncheck_sigmoid_grad()\n```"}
{"task_id": 528, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Convert X to a NumPy array for easier manipulation\n    X = np.array(X)\n    # Extract the min and max values for each dimension\n    x1_min, x2_min = X.min(axis=0)\n    x1_max, x2_max = X.max(axis=0)\n    \n    # Create the equally spaced arrays for the grid\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    \n    # Create the meshgrid\n    x1_mesh, x2_mesh = np.meshgrid(x1_plot, x2_plot)\n    \n    # Flatten the meshgrid for easier computation\n    x1_flat = x1_mesh.ravel()\n    x2_flat = x2_mesh.ravel()\n    \n    # Compute the predictions for each grid point\n    predictions = np.sign(W[0] * x1_flat + W[1] * x2_flat + b)\n    \n    # Reshape the predictions back to the grid shape\n    predictions_grid = predictions.reshape(grid_n, grid_n)\n    \n    # Convert the predictions to a list of lists\n    predictions_list = predictions_grid.tolist()\n    \n    return predictions_list\n\n# Example usage:\nX = [[1, 2], [2, 3], [3, 4], [4, 5]]\nW = [1, -1]\nb = 0\ngrid_n = 10\nresult = decision_boundary_grid(X, W, b, grid_n)\nprint(result)\n```\n\nThis script defines the `decision_boundary_grid` function as specified in the task. It takes a dataset `X`, a weight vector `W`, a bias `b`, and an optional grid resolution `grid_n`. It then generates a grid of points spanning the bounding box of `X`, classifies each point according to the linear classifier defined by `W` and `b`, and returns the classification results as a list of lists."}
{"task_id": 537, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    # Calculate class priors\n    class_priors = np.bincount(y_train) / len(y_train)\n    \n    # Separate the data by class\n    X_train_class_0 = X_train[y_train == 0]\n    X_train_class_1 = X_train[y_train == 1]\n    \n    # Calculate mean and std for each feature in each class\n    means_class_0 = np.mean(X_train_class_0, axis=0)\n    stds_class_0 = np.std(X_train_class_0, axis=0) + 1e-9  # Add epsilon to avoid division by zero\n    means_class_1 = np.mean(X_train_class_1, axis=0)\n    stds_class_1 = np.std(X_train_class_1, axis=0) + 1e-9  # Add epsilon to avoid division by zero\n    \n    # Function to calculate Gaussian probability\n    def gaussian_prob(x, mean, std):\n        exponent = np.exp(-((x - mean) ** 2) / (2 * std ** 2))\n        return (1 / (np.sqrt(2 * np.pi) * std)) * exponent\n    \n    # Predict the class for each test sample\n    predictions = []\n    for x in X_test:\n        prob_class_0 = np.prod(gaussian_prob(x, means_class_0, stds_class_0)) * class_priors[0]\n        prob_class_1 = np.prod(gaussian_prob(x, means_class_1, stds_class_1)) * class_priors[1]\n        predictions.append(0 if prob_class_0 > prob_class_1 else 1)\n    \n    return predictions\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([0, 0, 1, 1])\n# X_test = np.array([[1, 2], [3, 4]])\n# predictions = gaussian_naive_bayes(X_train, y_train, X_test)\n# print(predictions)  # Output: [0, 1]\n```"}
{"task_id": 539, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Computes the binary cross-entropy cost for a binary classification problem.\n    \n    Parameters:\n    AL (np.ndarray): A NumPy array of shape (1, m) or (m,) representing the model's predicted probabilities.\n    Y (np.ndarray): A NumPy array of shape (1, m) or (m,) representing the true labels (0 or 1).\n    \n    Returns:\n    float: The computed binary cross-entropy cost.\n    \"\"\"\n    # Ensure the probabilities are within the valid range to avoid numerical issues\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    \n    # Number of training examples\n    m = Y.shape[0]\n    \n    # Compute the binary cross-entropy cost\n    cost = -1/m * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    \n    # Convert the cost to a Python float and return\n    return float(np.squeeze(cost))\n\n# Example usage\nif __name__ == \"__main__\":\n    # Example data\n    AL = np.array([0.9, 0.1, 0.8, 0.2])\n    Y = np.array([1, 0, 1, 0])\n    \n    # Compute the cost\n    cost = compute_cost(AL, Y)\n    \n    # Print the cost\n    print(f\"Cost: {cost:.4f}\")\n```\n\nThis script defines a function `compute_cost` that calculates the binary cross-entropy cost given the model's predicted probabilities and the true labels. It includes a small example to demonstrate how to use the function. The probabilities are clipped to avoid numerical issues when taking the logarithm."}
{"task_id": 552, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi, A, B = hmm['pi'], hmm['A'], hmm['B']\n    num_states = len(pi)\n    num_observations = len(observations)\n    \n    if t < 0 or t >= num_observations:\n        return []\n\n    # Initialize forward and backward probabilities\n    alpha = np.zeros((num_observations, num_states))\n    beta = np.zeros((num_observations, num_states))\n\n    # Compute forward probabilities\n    alpha[0] = pi * B[:, observations[0]]\n    for i in range(1, num_observations):\n        alpha[i] = np.dot(alpha[i-1], A) * B[:, observations[i]]\n\n    # Compute backward probabilities\n    beta[-1] = 1\n    for i in range(num_observations - 2, -1, -1):\n        beta[i] = np.dot(A, B[:, observations[i+1]] * beta[i+1])\n\n    # Compute gamma probabilities\n    gamma = (alpha * beta) / np.sum(alpha * beta, axis=1)[:, np.newaxis]\n    \n    # Return the gamma probabilities for the given time step t, rounded to 4 decimal places\n    return [round(x, 4) for x in gamma[t]]\n\n# Example usage:\nhmm = {\n    'pi': np.array([0.6, 0.4]),\n    'A': np.array([[0.7, 0.3], [0.4, 0.6]]),\n    'B': np.array([[0.1, 0.4, 0.5], [0.6, 0.3, 0.1]])\n}\nobservations = [0, 1, 2]\nt = 1\nprint(gamma_probabilities(hmm, observations, t))\n```\n\nThis script defines the `gamma_probabilities` function that computes the posterior state distribution \u03b3\u209c for a given Hidden Markov Model (HMM) and observation sequence. The function uses the forward-backward algorithm to calculate the forward and backward probabilities, and then combines them to compute the posterior probabilities. The result is rounded to four decimal places and returned as a list."}
{"task_id": 555, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import deque\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((point1 - point2) ** 2))\n\n    def get_neighbors(point_index, data, eps):\n        neighbors = []\n        for i in range(len(data)):\n            if euclidean_distance(data[point_index], data[i]) < eps:\n                neighbors.append(i)\n        return neighbors\n\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples  # Initialize all labels as noise (-1)\n    cluster_id = 0\n\n    for point_index in range(n_samples):\n        if labels[point_index] != -1:\n            continue  # Skip already processed points\n\n        neighbors = get_neighbors(point_index, data, eps)\n        if len(neighbors) < min_samples:\n            continue  # This point is noise\n\n        cluster_id += 1\n        labels[point_index] = cluster_id\n\n        queue = deque(neighbors)\n        while queue:\n            current_point_index = queue.popleft()\n            if labels[current_point_index] == -1:\n                labels[current_point_index] = cluster_id\n            elif labels[current_point_index] == 0:\n                labels[current_point_index] = cluster_id\n                current_neighbors = get_neighbors(current_point_index, data, eps)\n                if len(current_neighbors) >= min_samples:\n                    queue.extend(current_neighbors)\n\n    return labels\n\n# Example usage:\ndata = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\neps = 3\nmin_samples = 2\nprint(dbscan(data, eps, min_samples))\n```\n\nThis script implements the DBSCAN algorithm from scratch, as per the task description. It includes a function to calculate the Euclidean distance between two points, a function to get the neighbors of a point within a specified radius, and the main `dbscan` function that performs the clustering. The example usage at the end demonstrates how to call the `dbscan` function with a sample dataset."}
{"task_id": 561, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom scipy.stats import multivariate_normal\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"\n    Fits a Gaussian Mixture Model to the given data using the Expectation-Maximization algorithm.\n    \n    Parameters:\n    data (np.ndarray): 2-D array with N samples and D features.\n    k (int): Number of Gaussian components.\n    max_iter (int): Maximum number of iterations.\n    epsilon (float): Tolerance for convergence based on change in mixture weights.\n    \n    Returns:\n    list[int]: List of length N containing the final cluster label of each sample.\n    \"\"\"\n    N, D = data.shape\n    np.random.seed(0)  # For deterministic results\n    \n    # Initialize parameters\n    weights = np.ones(k) / k\n    means = data[np.random.choice(N, k, replace=False)]\n    covariances = [np.cov(data.T) for _ in range(k)]\n    \n    for _ in range(max_iter):\n        old_weights = weights.copy()\n        \n        # E-step: Compute responsibilities\n        responsibilities = np.zeros((N, k))\n        for i in range(k):\n            responsibilities[:, i] = weights[i] * multivariate_normal.pdf(data, mean=means[i], cov=covariances[i])\n        responsibilities /= responsibilities.sum(axis=1)[:, np.newaxis]\n        \n        # M-step: Update parameters\n        weights = responsibilities.sum(axis=0) / N\n        for i in range(k):\n            resp_sum = responsibilities[:, i].sum()\n            means[i] = np.dot(responsibilities[:, i], data) / resp_sum\n            covariances[i] = np.dot(responsibilities[:, i] * (data - means[i]).T, (data - means[i])) / resp_sum\n        \n        # Check for convergence\n        if np.linalg.norm(weights - old_weights) < epsilon:\n            break\n    \n    # Assign each sample to the component with the largest responsibility\n    labels = np.argmax(responsibilities, axis=1)\n    \n    # Sort components by the first coordinate of their mean\n    sorted_indices = np.argsort(means[:, 0])\n    sorted_labels = np.zeros_like(labels)\n    for new_label, old_label in enumerate(sorted_indices):\n        sorted_labels[labels == old_label] = new_label\n    \n    return sorted_labels.tolist()\n\n# Example usage\ndata = np.random.multivariate_normal([0, 0], [[1, 0], [0, 1]], 100)\nk = 3\nlabels = gmm_em(data, k)\nprint(labels)\n```\n\nThis script implements the EM algorithm for fitting a Gaussian Mixture Model to a given dataset. It initializes the parameters randomly, iterates through the E-step and M-step until convergence, and finally assigns each sample to the most likely component. The components are sorted by their mean's first coordinate to ensure deterministic output."}
{"task_id": 562, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    N = data.shape[0]\n    if n_cluster == 1:\n        return [0] * N\n\n    # Step 1: Build a fully-connected similarity graph using the Gaussian kernel\n    pairwise_distances = np.sum(data**2, axis=1, keepdims=True) + np.sum(data**2, axis=1) - 2 * np.dot(data, data.T)\n    W = np.exp(-gamma * pairwise_distances)\n\n    # Step 2: Construct the Laplacian\n    D = np.diag(np.sum(W, axis=1))\n    if method == 'unnormalized':\n        L = D - W\n    else:  # normalized\n        D_inv_sqrt = np.diag(1.0 / np.sqrt(np.diag(D)))\n        L = np.dot(np.dot(D_inv_sqrt, L), D_inv_sqrt)\n\n    # Step 3: Compute the eigenvectors corresponding to the smallest eigenvalues\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    eigenvectors = eigenvectors[:, :n_cluster]\n\n    if method == 'normalized':\n        eigenvectors = eigenvectors / np.linalg.norm(eigenvectors, axis=0)\n\n    # Step 4: Run k-means in the eigenvector space\n    centroids = eigenvectors[:n_cluster]\n    labels = np.argmin(np.linalg.norm(eigenvectors[:, np.newaxis] - centroids, axis=2), axis=1)\n\n    # Relabel clusters\n    sorted_indices = np.argsort(np.min(np.linalg.norm(eigenvectors[:, np.newaxis] - centroids, axis=2), axis=1))\n    sorted_labels = labels[sorted_indices]\n    label_map = {sorted_labels[i]: i for i in range(n_cluster)}\n    labels = [label_map[l] for l in labels]\n\n    return labels\n```"}
{"task_id": 563, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N, d = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    \n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    \n    w = np.round(np.sum(alpha[:, np.newaxis] * y_data[:, np.newaxis] * X_data, axis=0), 4).tolist()\n    b = np.round(b, 4)\n    \n    return w, b\n\n# Example usage:\n# X_data = np.array([[1, 2], [2, 3], [3, 4]])\n# y_data = np.array([1, -1, 1])\n# w, b = perceptron_dual_train(X_data, y_data)\n# print(w, b)\n```\n\nThis script defines the `perceptron_dual_train` function as specified in the task. It implements the dual-form perceptron learning algorithm, which updates the coefficients `alpha` and the bias `b` based on the training data `X_data` and labels `y_data`. The function returns the weight vector `w` and the bias `b`, both rounded to 4 decimal places."}
{"task_id": 564, "completion_id": 0, "completion": "```python\nclass Node:\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label\n        self.x = x\n        self.s = s\n        self.y = y\n        self.child = child if child is not None else []\n\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    if task_type == 'classification':\n        feature_value = features[root.label]\n        for child in root.child:\n            if child.x == feature_value:\n                return predict_sample(child, features, task_type)\n        # Default to the second child if no match is found\n        return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        feature_value = features[root.label]\n        if feature_value <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)\n\n# Example usage:\n# Constructing a simple classification tree\nnode1 = Node(label=0, x=1)\nnode2 = Node(label=0, x=2)\nnode3 = Node(y=10)\nnode4 = Node(y=20)\nnode5 = Node(child=[node1, node2])\nnode6 = Node(child=[node3, node4])\nroot_classification = Node(label=0, child=[node5, node6])\n\n# Constructing a simple regression tree\nnode7 = Node(s=5, child=[Node(y=15), Node(y=25)])\nroot_regression = Node(s=10, child=[Node(y=5), node7])\n\n# Predictions\nprint(predict_sample(root_classification, [1, 2], 'classification'))  # Output: 10\nprint(predict_sample(root_regression, [12], 'regression'))  # Output: 25\n```"}
{"task_id": 565, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef entropy(labels):\n    \"\"\"Calculate the entropy of a label distribution.\"\"\"\n    value, counts = np.unique(labels, return_counts=True)\n    probs = counts / len(labels)\n    return -np.sum(probs * np.log2(probs))\n\ndef conditional_entropy(X, y):\n    \"\"\"Calculate the conditional entropy H(y|X).\"\"\"\n    total_entropy = 0\n    for value in np.unique(X):\n        subset_y = y[X == value]\n        total_entropy += (len(subset_y) / len(y)) * entropy(subset_y)\n    return total_entropy\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    best_feature_index = 0\n    max_information_gain = -1\n    base_entropy = entropy(y)\n    \n    for i in range(X.shape[1]):\n        feature = X[:, i]\n        conditional_ent = conditional_entropy(feature, y)\n        information_gain = base_entropy - conditional_ent\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = i\n    \n    return (best_feature_index, round(max_information_gain, 6))\n\n# Example usage\nX = np.array([\n    [0, 1, 0],\n    [1, 1, 1],\n    [0, 0, 0],\n    [1, 0, 1],\n    [0, 1, 0]\n])\ny = np.array([0, 1, 0, 1, 0])\n\nprint(choose_best_feature(X, y))\n```\n\nThis script defines a function `choose_best_feature` that calculates the information gain for each feature in the dataset `X` with respect to the labels `y`. It returns the index of the feature with the highest information gain and the value of that gain, rounded to 6 decimal places. The helper functions `entropy` and `conditional_entropy` are used to calculate the entropy of the label distribution and the conditional entropy after splitting by the values of a feature, respectively."}
{"task_id": 566, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\nnp.random.seed(42)\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    n_samples, n_features = data.shape\n    height_limit = math.ceil(math.log2(sample_size))\n    c_values = [0] + [2 * math.log(i - 1) + 0.5772156649 - 2 * (i - 1) / i for i in range(1, n_samples + 1)]\n    \n    def build_tree(data_subset, depth=0):\n        if depth >= height_limit or len(data_subset) <= 1:\n            return len(data_subset)\n        feature = np.random.randint(n_features)\n        min_val, max_val = data_subset[:, feature].min(), data_subset[:, feature].max()\n        if min_val == max_val:\n            return len(data_subset)\n        threshold = np.random.uniform(min_val, max_val)\n        left_indices = data_subset[:, feature] <= threshold\n        right_indices = data_subset[:, feature] > threshold\n        left = build_tree(data_subset[left_indices], depth + 1)\n        right = build_tree(data_subset[right_indices], depth + 1)\n        return (feature, threshold, left, right)\n    \n    def path_length(tree, x, depth=0):\n        if isinstance(tree, int):\n            return depth + c_values[tree]\n        feature, threshold, left, right = tree\n        if x[feature] <= threshold:\n            return path_length(left, x, depth + 1)\n        else:\n            return path_length(right, x, depth + 1)\n    \n    def compute_scores(data, trees):\n        scores = np.zeros(n_samples)\n        for tree in trees:\n            for i, x in enumerate(data):\n                scores[i] += path_length(tree, x)\n        scores /= len(trees)\n        scores = 2 ** (-scores / (2 * math.log(n_samples - 1) - 2 * (n_samples - 1) / n_samples))\n        return scores\n    \n    trees = []\n    for _ in range(n_trees):\n        if sample_size >= n_samples:\n            sample = data\n        else:\n            sample = data[np.random.choice(n_samples, sample_size, replace=False)]\n        trees.append(build_tree(sample))\n    \n    scores = compute_scores(data, trees)\n    threshold = np.percentile(scores, (1 - epsilon) * 100)\n    outliers = np.where(scores >= threshold)[0]\n    \n    return sorted(outliers.tolist())\n\n# Example usage:\n# data = np.random.rand(100, 5)\n# outliers = detect_outliers(data, n_trees=10, sample_size=256, epsilon=0.01)\n# print(outliers)\n```"}
{"task_id": 568, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    \"\"\"Implements a Maximum Entropy classifier using Generalized Iterative Scaling.\"\"\"\n    \n    # Helper function to compute the empirical distribution\n    def empirical_distribution(X, y):\n        dist = defaultdict(int)\n        for x, label in zip(X, y):\n            for feature_index, feature_value in enumerate(x):\n                dist[(feature_index, feature_value, label)] += 1\n        return dist\n    \n    # Helper function to compute the normalization factor Z(x)\n    def compute_Z(x, weights):\n        Z = 0\n        for label in labels:\n            score = 0\n            for feature_index, feature_value in enumerate(x):\n                score += weights[(feature_index, feature_value, label)]\n            Z += math.exp(score)\n        return Z\n    \n    # Helper function to compute the conditional probability P(y|x)\n    def compute_conditional_prob(x, y, weights):\n        score = 0\n        for feature_index, feature_value in enumerate(x):\n            score += weights[(feature_index, feature_value, y)]\n        Z = compute_Z(x, weights)\n        return math.exp(score) / Z\n    \n    # Build the empirical distribution\n    empirical_dist = empirical_distribution(X_train, y_train)\n    \n    # Initialize weights\n    weights = defaultdict(float)\n    \n    # Get unique labels\n    labels = np.unique(y_train)\n    \n    # Generalized Iterative Scaling\n    for _ in range(n_iter):\n        max_update = 0\n        for (feature_index, feature_value, label), count in empirical_dist.items():\n            expected_count = 0\n            for x, y in zip(X_train, y_train):\n                if y == label:\n                    expected_count += compute_conditional_prob(x, label, weights)\n            update = math.log(count / expected_count)\n            weights[(feature_index, feature_value, label)] += update\n            max_update = max(max_update, abs(update))\n        if max_update < epsilon:\n            break\n    \n    # Predict labels for test set\n    predictions = []\n    for x in X_test:\n        best_label = None\n        best_prob = -1\n        for label in labels:\n            prob = compute_conditional_prob(x, label, weights)\n            if prob > best_prob:\n                best_prob = prob\n                best_label = label\n        predictions.append(best_label)\n    \n    return predictions\n```\n\nThis script implements a Maximum Entropy classifier using the Generalized Iterative Scaling (GIS) algorithm. It takes training samples and labels, a test set, and hyperparameters for the optimization process, and returns the predicted labels for the test set. The implementation uses only the standard library together with `numpy` and `math`."}
{"task_id": 569, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    word_appearances = Counter()\n    total_docs = len(data)\n    \n    for _, words in data:\n        unique_words = set(words)\n        for word in unique_words:\n            word_appearances[word] += 1\n    \n    # Calculate the document-frequency ratio for each word\n    word_ratios = [(word, round(count / total_docs, 4)) for word, count in word_appearances.items()]\n    word_ratios.sort(key=lambda x: x[1], reverse=True)\n    \n    # Determine the set of most common words\n    if cut_off is None or cut_off >= len(word_ratios):\n        most_common_words = set(word for word, _ in word_ratios)\n    else:\n        most_common_words = set(word for word, _ in word_ratios[:cut_off])\n    \n    return word_ratios, most_common_words\n\n\n# Example usage\ndocuments = [\n    ('doc1', ['apple', 'banana', 'cherry']),\n    ('doc2', ['banana', 'cherry', 'date']),\n    ('doc3', ['apple', 'date', 'fig']),\n    ('doc4', ['apple', 'banana', 'cherry', 'date']),\n]\n\nprint(statistic_key_word(documents, cut_off=2))\n```\n\nThis script defines the `statistic_key_word` function as requested, which calculates the document-frequency ratio for each word across a collection of documents and returns the ratios along with a set of the most common words based on the `cut_off` parameter. The example usage at the end demonstrates how to call the function with a list of documents and a cut-off value."}
{"task_id": 571, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute the weight vector\n    w = np.dot(X.T, alpha * y)\n    \n    # Compute the bias term\n    wX = np.dot(X, w)\n    b = np.mean(y - wX)\n    \n    # Round the values to 4 decimal places\n    w_rounded = np.round(w, 4).tolist()\n    b_rounded = np.round(b, 4)\n    \n    return w_rounded, b_rounded\n\n# Example usage\nif __name__ == \"__main__\":\n    X = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n    y = np.array([1, 1, -1, -1])\n    alpha = np.array([0.1, 0.2, 0.3, 0.4])\n    \n    w_list, b = compute_svm_parameters(X, y, alpha)\n    print(\"Weight vector:\", w_list)\n    print(\"Bias term:\", b)\n```\n\nThis script defines the `compute_svm_parameters` function that computes the weight vector and bias term for a linear SVM given the training samples, labels, and Lagrange multipliers. The function then rounds the results to four decimal places and returns them. The example usage at the bottom demonstrates how to call the function with sample data."}
{"task_id": 572, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef euclidean_distance(point1, point2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((point1 - point2) ** 2))\n\ndef pairwise_distance_matrix(data):\n    \"\"\"Compute the full pairwise Euclidean distance matrix.\"\"\"\n    n_samples = data.shape[0]\n    distance_matrix = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            distance_matrix[i, j] = euclidean_distance(data[i], data[j])\n            distance_matrix[j, i] = distance_matrix[i, j]\n    return distance_matrix\n\ndef k_distance(distance_matrix, k):\n    \"\"\"Compute the k-distance for each sample and the index list of k nearest neighbours.\"\"\"\n    n_samples = distance_matrix.shape[0]\n    k_distances = np.zeros(n_samples)\n    k_nearest_neighbours = []\n    for i in range(n_samples):\n        sorted_indices = np.argsort(distance_matrix[i])\n        k_distances[i] = distance_matrix[i, sorted_indices[k]]\n        k_nearest_neighbours.append(sorted_indices[:k])\n    return k_distances, k_nearest_neighbours\n\ndef reachability_distance(distance_matrix, k_distances, p, q):\n    \"\"\"Compute the reachability distance between two points.\"\"\"\n    return max(k_distances[q], distance_matrix[p, q])\n\ndef local_reachability_density(distance_matrix, k_distances, k_nearest_neighbours, p):\n    \"\"\"Compute the Local Reachability Density for a sample.\"\"\"\n    reach_dists = [reachability_distance(distance_matrix, k_distances, p, q) for q in k_nearest_neighbours[p]]\n    return k / sum(reach_dists)\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Compute the Local Outlier Factor for each sample.\"\"\"\n    distance_matrix = pairwise_distance_matrix(data)\n    k_distances, k_nearest_neighbours = k_distance(distance_matrix, k)\n    n_samples = data.shape[0]\n    lof_scores = []\n    outlier_indices = []\n    for p in range(n_samples):\n        lrd_p = local_reachability_density(distance_matrix, k_distances, k_nearest_neighbours, p)\n        lrd_neighbours = [local_reachability_density(distance_matrix, k_distances, k_nearest_neighbours, q) for q in k_nearest_neighbours[p]]\n        lof_score = (sum(lrd_neighbours) / k) / lrd_p\n        lof_scores.append(lof_score)\n        if lof_score > epsilon:\n            outlier_indices.append(p)\n    return np.round(lof_scores, 4).tolist(), sorted(outlier_indices)\n\n# Example usage:\n# data = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\n# k = 3\n# epsilon = 1.5\n# print(local_outlier_factor(data, k, epsilon))\n```\n\nThis script defines a function `local_outlier_factor` that computes the Local Outlier Factor for each sample in a given dataset. It follows the steps outlined in the task description, including computing the pairwise distance matrix, determining the k-distance and k-nearest neighbours, calculating reachability distances, and finally computing the LOF scores. The function returns a tuple containing the list of LOF scores rounded to four decimal places and the list of indices of samples that are considered outliers based on the `epsilon` threshold."}
{"task_id": 574, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n\n    for c in range(m):\n        base = 10 * (c // 2)\n        # Training data\n        for _ in range(n_train):\n            x = round(random.uniform(base + 1, base + 9), 4)\n            y = round(random.uniform(base + 1, base + 9), 4)\n            X_train.append([x, y])\n            y_train.append(c)\n        # Validation data\n        for _ in range(n_val):\n            x = round(random.uniform(base + 1, base + 9), 4)\n            y = round(random.uniform(base + 1, base + 9), 4)\n            X_val.append([x, y])\n            y_val.append(c)\n\n    return (np.array(X_train), np.array(X_val), np.array(y_train), np.array(y_val))\n\n# Example usage:\nm = 3\nn_train = 5\nn_val = 2\nseed = 42\nX_train, X_val, y_train, y_val = generate_data(m, n_train, n_val, seed)\nprint(\"X_train:\", X_train)\nprint(\"X_val:\", X_val)\nprint(\"y_train:\", y_train)\nprint(\"y_val:\", y_val)\n```\n\nThis script defines the `generate_data` function as per the task description and includes an example usage that demonstrates how to call the function and print the generated data. The function ensures that the data points are generated within the specified ranges and are rounded to 4 decimal places, as required."}
{"task_id": 579, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    m, d = X.shape\n    centres = X[:k].copy()\n    labels = np.zeros(m, dtype=int)\n    \n    for _ in range(max_iters):\n        old_labels = labels.copy()\n        \n        # Assignment step\n        for i, point in enumerate(X):\n            distances = np.linalg.norm(point - centres, axis=1)\n            labels[i] = np.argmin(distances)\n        \n        # Update step\n        for j in range(k):\n            if np.any(labels == j):\n                centres[j] = np.mean(X[labels == j], axis=0)\n        \n        # Check for convergence\n        if np.array_equal(old_labels, labels):\n            break\n    \n    # Round the centres to 4 decimal places\n    rounded_centres = np.round(centres, 4).tolist()\n    return labels.tolist(), rounded_centres\n\n# Example usage\nif __name__ == \"__main__\":\n    np.random.seed(42)  # For reproducibility\n    X = np.random.rand(10, 2)  # 10 points in 2D\n    k = 3\n    labels, centres = kmeans(X, k)\n    print(\"Labels:\", labels)\n    print(\"Centres:\", centres)\n```\n\nThis script implements the K-Means clustering algorithm from scratch, adhering to the constraints and requirements specified in the task description. It uses NumPy for efficient numerical operations and ensures that the results are deterministic by using the first `k` points as initial centres and rounding the final centres to 4 decimal places."}
{"task_id": 581, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    m, n = X.shape\n    w = np.zeros(n)\n    b = 0.0\n\n    if learning_rate == 0 or iterations == 0:\n        return [round(float(i), 4) for i in w], round(b, 4)\n\n    for _ in range(iterations):\n        y_pred = np.dot(X, w) + b\n        residuals = y - y_pred\n\n        for j in range(n):\n            grad_w = -2 * np.dot(X[:, j], residuals) + l1_penalty * np.sign(w[j]) + 2 * l2_penalty * w[j]\n            w[j] -= learning_rate * grad_w / m\n\n        grad_b = -2 * np.sum(residuals)\n        b -= learning_rate * grad_b / m\n\n    return [round(float(i), 4) for i in w], round(b, 4)\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4], [5, 6]])\n# y = np.array([1, 2, 3])\n# learning_rate = 0.01\n# iterations = 1000\n# l1_penalty = 0.1\n# l2_penalty = 0.1\n# weights, bias = elastic_net_regression(X, y, learning_rate, iterations, l1_penalty, l2_penalty)\n# print(weights, bias)\n```"}
{"task_id": 591, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    # Add the bias term to the input vector\n    x = [1] + x\n    \n    for layer_idx, layer_weights in enumerate(weights):\n        # Compute the dot product of the current input and the weight matrix\n        layer_output = []\n        for neuron_weights in layer_weights:\n            neuron_output = np.dot(x, neuron_weights)\n            # Apply ReLU activation for all layers except the last one\n            if layer_idx < len(weights) - 1:\n                neuron_output = max(0, neuron_output)\n            layer_output.append(neuron_output)\n        \n        # Update the input for the next layer\n        x = [1] + layer_output\n    \n    # Remove the bias term from the final output\n    final_output = x[1:]\n    \n    # Round the final output to 4 decimal places\n    final_output = [round(output, 4) for output in final_output]\n    \n    # Return a single float if there is only one output neuron\n    if len(final_output) == 1:\n        return final_output[0]\n    else:\n        return final_output\n\n# Example usage:\nweights = [\n    [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]],  # Layer 0\n    [[0.7, 0.8, 0.9], [1.0, 1.1, 1.2]],  # Layer 1\n    [[1.3, 1.4, 1.5]]                    # Layer 2\n]\nx = [0.5, 0.6]\nprint(neural_net_predict(weights, x))\n```\n\nThis script defines the `neural_net_predict` function that performs a forward pass through a fully-connected ReLU neural network with the given weights and input vector `x`. The function adheres to the constraints and requirements specified in the task description."}
{"task_id": 595, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"\n    Implement the K-Means clustering algorithm from scratch to compute the centroids.\n    \n    Parameters:\n    X (np.ndarray): A 2-D array of shape (n_samples, n_features).\n    k (int): The number of clusters.\n    max_iters (int): Maximum number of iterations. Default is 100.\n    \n    Returns:\n    list[list[float]]: A list of centroids, each centroid is a list of floats rounded to 4 decimal places.\n    \"\"\"\n    # Initialize centroids with the first k samples\n    centroids = X[:k].copy()\n    \n    for _ in range(max_iters):\n        # Assign each sample to the nearest centroid\n        distances = np.sum((X[:, np.newaxis] - centroids) ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Update centroids\n        new_centroids = np.array([X[labels == i].mean(axis=0) if np.sum(labels == i) > 0 else centroids[i] for i in range(k)])\n        \n        # Check for convergence\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 1e-4):\n            break\n        \n        centroids = new_centroids\n    \n    # Sort centroids and round to 4 decimal places\n    sorted_centroids = np.round(np.sort(centroids, axis=0), decimals=4).tolist()\n    \n    return sorted_centroids\n\n# Example usage:\n# X = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# k = 2\n# print(kmeans_centroids(X, k))\n```\n\nThis script defines the `kmeans_centroids` function that implements the K-Means clustering algorithm from scratch, adhering to the specified requirements. The function initializes centroids with the first `k` samples, iteratively assigns samples to the nearest centroid, updates centroids, and stops early if the centroids' movement is less than `1e-4`. It also handles empty clusters and sorts the final centroids before returning them."}
