{"task_id": 0, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Implements Ridge (L2-regularised) Linear Regression using its closed-form solution.\n    \n    Parameters:\n    - data: An ndarray where the last column is the target y and all preceding columns are the features X.\n    - alpha: Regularisation strength. Must be a non-negative float.\n    \n    Returns:\n    - A list of floats representing the weight vector rounded to 4 decimal places.\n    - Returns -1 if the matrix is not invertible.\n    \"\"\"\n    # Separate features and target\n    X = data[:, :-1]\n    y = data[:, -1]\n    \n    # Add bias term\n    X = np.column_stack((np.ones(X.shape[0]), X))\n    \n    # Construct the regularised matrix\n    n_features = X.shape[1]\n    regularised_matrix = np.dot(X.T, X) + alpha * np.eye(n_features)\n    \n    # Check if the matrix is invertible\n    if np.linalg.det(regularised_matrix) == 0:\n        return -1\n    \n    # Compute the weight vector\n    weights = np.dot(np.linalg.inv(regularised_matrix), np.dot(X.T, y))\n    \n    # Round the weights to 4 decimal places and convert to list\n    rounded_weights = [round(weight, 4) for weight in weights]\n    \n    return rounded_weights\n```\n\nThis Python script defines a function `ridge_regression` that implements Ridge Regression using the closed-form solution. It takes a numpy ndarray as input, where the last column is the target and the preceding columns are the features. It also takes an optional `alpha` parameter for L2-regularisation strength. The function returns the weight vector rounded to 4 decimal places as a list, or -1 if the matrix is not invertible."}
{"task_id": 1, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    updates = 0\n\n    # Compute the Gram matrix\n    K = np.dot(X_train, X_train.T)\n\n    while updates < n_iter:\n        updated = False\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * K[:, i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updates += 1\n                updated = True\n        if not updated:\n            break\n\n    # Compute the primal weight vector w\n    w = np.dot(alpha * y_train, X_train)\n    w = [round(x, 4) for x in w]\n    b = round(b, 4)\n\n    return w, b\n\n# Example usage:\n# X_train = np.array([[3, 3], [4, 3], [1, 1]])\n# y_train = np.array([1, 1, -1])\n# w, b = perceptron_dual(X_train, y_train)\n# print(w, b)\n```\n\nThis script defines the `perceptron_dual` function which implements the dual-form perceptron learning algorithm. The function takes in training samples `X_train`, labels `y_train`, a learning rate `eta`, and a maximum number of updates `n_iter`. It returns the weight vector `w` and the bias `b` as a tuple of a list and a scalar, respectively, both rounded to four decimal places. The example usage demonstrates how to call the function with a simple dataset."}
{"task_id": 2, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1 / (1 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return mu * (1 - mu)\n\n    return {\n        'identity': {\n            'link': identity_link,\n            'inv_link': identity_inv_link,\n            'derivative': identity_derivative\n        },\n        'log': {\n            'link': log_link,\n            'inv_link': log_inv_link,\n            'derivative': log_derivative\n        },\n        'logit': {\n            'link': logit_link,\n            'inv_link': logit_inv_link,\n            'derivative': logit_derivative\n        }\n    }\n\n# Example usage\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links[\"logit\"][\"link\"](mu)\nmu2 = links[\"logit\"][\"inv_link\"](eta)\nprint(np.round(eta, 4))  # \u2192 [-1.3863  1.3863]\nprint(np.round(mu2, 4))  # \u2192 [0.2 0.8]\n```"}
{"task_id": 3, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    np.random.seed(0)  # Ensure reproducibility\n    \n    def build_tree(indices, depth=0):\n        if len(indices) < 3:\n            return {'depth': depth, 'indices': indices}\n        \n        feature = np.random.randint(data.shape[1])\n        down, up = np.min(data[indices, feature]), np.max(data[indices, feature])\n        split_value = np.random.uniform(down, up)\n        \n        left_indices = [i for i in indices if data[i, feature] <= split_value]\n        right_indices = [i for i in indices if data[i, feature] > split_value]\n        \n        left_tree = build_tree(left_indices, depth + 1)\n        right_tree = build_tree(right_indices, depth + 1)\n        \n        return {'left': left_tree, 'right': right_tree}\n    \n    def get_depths(tree):\n        if 'depth' in tree:\n            for index in tree['indices']:\n                depths[index] = tree['depth']\n        else:\n            get_depths(tree['left'])\n            get_depths(tree['right'])\n    \n    n_samples = data.shape[0]\n    depths = [0] * n_samples\n    root_tree = build_tree(list(range(n_samples)))\n    get_depths(root_tree)\n    \n    return depths\n\n# Example usage\ndata = np.arange(5).reshape(-1, 1)\nprint(isolation_tree_path_length(data))\n```\nThis script defines a function `isolation_tree_path_length` that builds an isolation tree according to the provided specifications and computes the depth of the leaf reached by each sample. The function uses recursion to build the tree and another recursive function to collect the depths of the leaves. The random seed is set to ensure reproducibility of results."}
{"task_id": 7, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    # Calculate the minimum support count\n    min_support_count = math.ceil(minsup * len(transactions))\n    \n    # Flatten the list of transactions to get all items and count their occurrences\n    all_items = set(item for transaction in transactions for item in transaction)\n    \n    # Initialize the frequent itemsets dictionary\n    frequent_itemsets = {}\n    \n    # Function to generate candidate itemsets of a given length\n    def generate_candidates(itemset_size):\n        if itemset_size == 1:\n            return [(item,) for item in all_items]\n        else:\n            return combinations(all_items, itemset_size)\n    \n    # Function to count the support of itemsets\n    def count_support(itemsets):\n        support_counts = Counter()\n        for transaction in transactions:\n            transaction_set = set(transaction)\n            for itemset in itemsets:\n                if set(itemset).issubset(transaction_set):\n                    support_counts[itemset] += 1\n        return support_counts\n    \n    # Start with itemsets of size 1\n    itemset_size = 1\n    while True:\n        candidates = generate_candidates(itemset_size)\n        support_counts = count_support(candidates)\n        frequent = {itemset: count for itemset, count in support_counts.items() if count >= min_support_count}\n        if not frequent:\n            break\n        frequent_itemsets.update(frequent)\n        itemset_size += 1\n    \n    return frequent_itemsets\n\n# Example usage\ntransactions = [\n    ['bread', 'milk'],\n    ['bread', 'diaper', 'beer', 'egg'],\n    ['milk', 'diaper', 'beer', 'coke'],\n    ['bread', 'milk', 'diaper', 'beer'],\n    ['bread', 'milk', 'diaper', 'coke']\n]\nminsup = 0.6\n\nprint(find_frequent_itemsets(transactions, minsup))\n```\n\nThis script defines a function `find_frequent_itemsets` that implements the logic to find all frequent itemsets given a list of transactions and a minimum support threshold. The function uses a brute-force approach to generate candidate itemsets of increasing size, counts their support, and checks if they meet the minimum support threshold. The process continues until no more frequent itemsets are found."}
{"task_id": 11, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    n_samples, n_features = data.shape\n    centres = np.array(data[:k].copy())\n    labels = np.zeros(n_samples, dtype=int)\n    \n    for _ in range(max_iter):\n        old_centres = centres.copy()\n        \n        # Assign each sample to the nearest centre\n        for i in range(n_samples):\n            distances = np.sum((centres - data[i])**2, axis=1)\n            labels[i] = np.argmin(distances)\n        \n        # Recompute centres\n        for j in range(k):\n            cluster_samples = data[labels == j]\n            if cluster_samples.size == 0:\n                # Reinitialize empty cluster centre with a random sample\n                random_index = np.random.randint(n_samples)\n                centres[j] = data[random_index]\n            else:\n                centres[j] = np.mean(cluster_samples, axis=0)\n        \n        # Check for convergence\n        max_movement = np.max(np.linalg.norm(centres - old_centres, axis=1))\n        if max_movement < epsilon:\n            break\n    \n    # Round centres to 4 decimal places\n    rounded_centres = [np.round(centre, 4).tolist() for centre in centres]\n    \n    return rounded_centres, labels.tolist()\n\n# Example usage\nif __name__ == \"__main__\":\n    np.random.seed(0)  # For reproducibility\n    data = np.random.rand(100, 2)  # 100 samples with 2 features\n    k = 3\n    centres, labels = kmeans(data, k)\n    print(\"Centres:\", centres)\n    print(\"Labels:\", labels)\n```\n\nThis script defines a `kmeans` function that implements the K-Means clustering algorithm from scratch, adhering to the requirements specified in the task description. It includes a simple example usage that demonstrates how to call the function and print the resulting cluster centres and labels."}
{"task_id": 13, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\"\"\"\n    n_user, n_item = data.shape\n    S = np.zeros((n_item, n_item))\n\n    # Step 1: Build item-item similarity matrix\n    for i in range(n_item):\n        for j in range(i, n_item):\n            common_users = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(common_users) == 0:\n                S[i, j] = S[j, i] = 0\n            else:\n                v1 = data[common_users, i]\n                v2 = data[common_users, j]\n                if criterion == \"cosine\":\n                    if np.std(v1) > 1e-3:\n                        v1 = v1 - np.mean(v1)\n                    if np.std(v2) > 1e-3:\n                        v2 = v2 - np.mean(v2)\n                    S[i, j] = S[j, i] = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n                elif criterion == \"pearson\":\n                    S[i, j] = S[j, i] = np.corrcoef(v1, v2)[0, 1]\n\n    # Step 2: Collect indices of rated items by the active user\n    rated_items = np.where(data[user_ind] > 0)[0]\n    if len(rated_items) == n_item:\n        return []\n\n    # Step 3: Compute predicted attractiveness for unrated items\n    scores = defaultdict(float)\n    for t in range(n_item):\n        if t not in rated_items:\n            numerator = 0\n            denominator = 0\n            for i in rated_items:\n                numerator += data[user_ind, i] * S[t, i]\n                denominator += abs(S[t, i])\n            if denominator != 0:\n                scores[t] = numerator / denominator\n\n    # Step 4: Return top k items sorted by score\n    return [item for item, score in sorted(scores.items(), key=lambda x: (-x[1], x[0]))[:k]]\n\n# Example usage\ndata = np.array([\n    [5, 3, 0, 1],\n    [4, 0, 0, 1],\n    [1, 1, 0, 5],\n    [1, 0, 0, 4],\n    [0, 1, 5, 4],\n])\nuser_ind = 0\nk = 2\ncriterion = 'cosine'\nprint(knn_recommend(data, user_ind, k, criterion))\n```\n\nThis script implements the item-based k-NN collaborative filtering recommender as described. It first builds the item-item similarity matrix using the specified criterion, then calculates the predicted attractiveness of each unrated item for the active user, and finally returns the indices of the most promising items up to `k`."}
{"task_id": 19, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_gain = -np.inf\n    best_split = None\n\n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        for threshold in unique_values:\n            left_indices = X[:, feature_index] < threshold\n            right_indices = X[:, feature_index] >= threshold\n\n            if np.sum(left_indices) < 2 or np.sum(right_indices) < 2:\n                continue\n\n            gain = compute_gain(g, h, left_indices, right_indices, gamma, lam)\n            if gain > best_gain:\n                best_gain = gain\n                best_split = (feature_index, threshold)\n\n    return best_split if best_gain > 0 else None\n\ndef compute_gain(g, h, left_indices, right_indices, gamma, lam):\n    total_g = np.sum(g)\n    total_h = np.sum(h)\n    left_g = np.sum(g[left_indices])\n    left_h = np.sum(h[left_indices])\n    right_g = np.sum(g[right_indices])\n    right_h = np.sum(h[right_indices])\n\n    parent_loss = -0.5 * (total_g ** 2) / (total_h + lam) + gamma\n    left_loss = -0.5 * (left_g ** 2) / (left_h + lam) + gamma\n    right_loss = -0.5 * (right_g ** 2) / (right_h + lam) + gamma\n\n    gain = parent_loss - left_loss - right_loss\n    return gain\n\n# Example usage\nX = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\ng = np.array([1, 2, 3, 4])\nh = np.array([0.1, 0.2, 0.3, 0.4])\ngamma = 0.1\nlam = 1.0\n\nprint(best_split(X, g, h, gamma, lam))\n```\n\nThis script defines the `best_split` function that computes the best split for a given node in a gradient boosting tree. The function iterates over all features and their unique values to find the split that maximises the gain, which is the reduction in the regularised loss. If no split yields a positive gain, the function returns `None`."}
{"task_id": 20, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Convert input to a NumPy array if it's a list\n    if isinstance(x, list):\n        x = np.array(x)\n    \n    # Compute sigmoid\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    \n    # Compute the gradient of sigmoid\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    \n    # Round the results to 4 decimal places\n    sigmoid_x = np.round(sigmoid_x, 4)\n    gradient_x = np.round(gradient_x, 4)\n    \n    # Convert back to float or list depending on the input type\n    if isinstance(x, (int, float, np.int64, np.float64)):\n        sigmoid_x, gradient_x = float(sigmoid_x), float(gradient_x)\n    else:\n        sigmoid_x, gradient_x = sigmoid_x.tolist(), gradient_x.tolist()\n    \n    return sigmoid_x, gradient_x\n\n# Test cases to verify the correctness\nif __name__ == \"__main__\":\n    # Scalar\n    print(sigmoid_activation(0))  # Expected: (0.5, 0.25)\n\n    # 1-D array\n    print(sigmoid_activation([0, 1, -1]))  # Expected: ([0.5, 0.7311, 0.2689], [0.25, 0.1966, 0.1966])\n\n    # 2-D array\n    print(sigmoid_activation([[0, 1], [-1, 2]]))  # Expected: [[0.5, 0.7311], [0.2689, 0.8808]], [[0.25, 0.1966], [0.1966, 0.1049]])\n```"}
{"task_id": 21, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    x_train, y_train = np.array(x_train), np.array(y_train)\n    x_test = np.array(x_test)\n    n_samples = len(x_train)\n    sample_weights = np.full(n_samples, 1 / n_samples)\n    stumps = []\n    alphas = []\n\n    # Sort training data\n    sorted_indices = np.argsort(x_train)\n    x_train = x_train[sorted_indices]\n    y_train = y_train[sorted_indices]\n\n    while True:\n        min_error = float('inf')\n        best_stump = None\n\n        # Enumerate stumps\n        for i in range(n_samples - 1):\n            theta = (x_train[i] + x_train[i + 1]) / 2\n            for d in [0, 1]:\n                stump = (d, theta)\n                error = 0\n                for j in range(n_samples):\n                    if (d == 0 and x_train[j] <= theta and y_train[j] == -1) or \\\n                       (d == 0 and x_train[j] > theta and y_train[j] == 1) or \\\n                       (d == 1 and x_train[j] <= theta and y_train[j] == 1) or \\\n                       (d == 1 and x_train[j] > theta and y_train[j] == -1):\n                        error += sample_weights[j]\n                if error < min_error:\n                    min_error = error\n                    best_stump = stump\n\n        # Compute alpha\n        if min_error == 0:\n            min_error = 1e-10  # Avoid division by zero\n        alpha = 0.5 * math.log((1 - min_error) / min_error)\n        stumps.append(best_stump)\n        alphas.append(alpha)\n\n        # Update weights\n        for i in range(n_samples):\n            if (best_stump[0] == 0 and x_train[i] <= best_stump[1] and y_train[i] == -1) or \\\n               (best_stump[0] == 0 and x_train[i] > best_stump[1] and y_train[i] == 1) or \\\n               (best_stump[0] == 1 and x_train[i] <= best_stump[1] and y_train[i] == 1) or \\\n               (best_stump[0] == 1 and x_train[i] > best_stump[1] and y_train[i] == -1):\n                sample_weights[i] *= math.exp(alpha)\n            else:\n                sample_weights[i] *= math.exp(-alpha)\n        sample_weights /= np.sum(sample_weights)\n\n        # Check training error\n        predictions = np.zeros(n_samples)\n        for i, stump in enumerate(stumps):\n            for j in range(n_samples):\n                if (stump[0] == 0 and x_train[j] <= stump[1]) or (stump[0] == 1 and x_train[j] > stump[1]):\n                    predictions[j] += alphas[i]\n                else:\n                    predictions[j] -= alphas[i]\n        training_error = np.mean(np.sign(predictions) != y_train)\n        if training_error <= epsilon:\n            break\n\n    # Make predictions on test set\n    test_predictions = np.zeros(len(x_test))\n    for i, stump in enumerate(stumps):\n        for j in range(len(x_test)):\n            if (stump[0] == 0 and x_test[j] <= stump[1]) or (stump[0] == 1 and x_test[j] > stump[1]):\n                test_predictions[j] += alphas[i]\n            else:\n                test_predictions[j] -= alphas[i]\n\n    return np.sign(test_predictions).astype(int).tolist()\n\n# Example usage\nx_train = [1, 2, 3, 4, 5]\ny_train = [1, 1, -1, -1, -1]\nx_test = [0.5, 1.5, 2.5, 3.5, 4.5]\npredictions = adaboost_1d_predict(x_train, y_train, x_test, epsilon=0.1)\nprint(predictions)\n```\n\nThis code implements a 1-D AdaBoost classifier using decision stumps as weak learners. It sorts the training data, iteratively finds the best stump, updates sample weights, and stops when the training error is below the specified threshold. Finally, it returns predictions for the test set."}
{"task_id": 25, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    n, d = X_train.shape\n    m, _ = X_test.shape\n\n    # Compute the kernel matrix (Gaussian/RBF)\n    K = np.exp(-gamma * np.sum((X_train[:, np.newaxis, :] - X_test)**2, axis=2))\n    \n    # Compute the decision function for each test sample\n    g = np.sum(alpha[:, np.newaxis] * y_train[:, np.newaxis] * K, axis=0) + b\n    \n    # Predict the labels based on the sign of the decision function\n    predictions = np.sign(g).astype(int)\n    \n    return predictions.tolist()\n\n# Example usage (the following example data is for illustration only)\n# X_train = np.array([[1, 2], [2, 3], [3, 4]])\n# y_train = np.array([1, -1, 1])\n# alpha = np.array([0.5, 0.2, 0.3])\n# b = 0.1\n# gamma = 0.5\n# X_test = np.array([[1.5, 2.5], [2.5, 3.5]])\n# print(gaussian_svm_predict(X_train, y_train, alpha, b, gamma, X_test))\n```\n\nThis script defines the `gaussian_svm_predict` function that takes training samples, their labels, the Lagrange multipliers, bias term, the Gaussian kernel parameter, and test samples to predict the labels for the test samples using a Gaussian-kernel SVM. The function returns a list of predicted labels for all test samples, where each label is either 1 or -1."}
{"task_id": 28, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    m, n = len(X), len(X[0])\n    if k < 1 or k > min(m, n):\n        return -1\n\n    # Convert the list of lists to a numpy array\n    X_np = np.array(X, dtype=float)\n\n    # Compute the truncated SVD\n    U, S, VT = np.linalg.svd(X_np, full_matrices=False)\n    S_k = np.diag(S[:k])\n    U_k = U[:, :k]\n    VT_k = VT[:k, :]\n\n    # Compute the rank-k reconstruction\n    X_hat_np = U_k @ S_k @ VT_k\n    X_hat = X_hat_np.round(4).tolist()\n\n    # Compute the mean squared reconstruction error\n    mse = np.mean((X_np - X_hat_np) ** 2).round(4)\n\n    return X_hat, mse\n\n# Example usage\nX = [[1, 2], [3, 4], [5, 6]]\nk = 1\nprint(linear_autoencoder(X, k))\n```\n\nThis script defines the `linear_autoencoder` function that computes the rank-\\(k\\) reconstruction of a given matrix \\(X\\) using truncated SVD and returns the reconstructed matrix and the mean squared reconstruction error. It also includes an example usage of the function."}
{"task_id": 29, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                           y_train: list[float] | np.ndarray,\n                           x_query: float,\n                           epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    # Ensure x_train and y_train are numpy arrays\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n\n    # Sort the training data by x_train\n    sorted_indices = np.argsort(x_train)\n    x_train = x_train[sorted_indices]\n    y_train = y_train[sorted_indices]\n\n    # Initialize residuals as the y_train values\n    residuals = y_train.copy()\n    predictions = np.zeros_like(y_train)\n    \n    # Determine all possible split points\n    split_points = (x_train[:-1] + x_train[1:]) / 2\n\n    while True:\n        best_rss = np.inf\n        best_stump = None\n\n        for s in split_points:\n            left_indices = x_train <= s\n            right_indices = x_train > s\n\n            c1 = np.mean(residuals[left_indices]) if np.any(left_indices) else 0\n            c2 = np.mean(residuals[right_indices]) if np.any(right_indices) else 0\n\n            # Compute the RSS for this split\n            rss = np.sum((residuals[left_indices] - c1) ** 2) + np.sum((residuals[right_indices] - c2) ** 2)\n\n            if rss < best_rss:\n                best_rss = rss\n                best_stump = (s, c1, c2)\n\n        if best_rss < epsilon:\n            break\n\n        s, c1, c2 = best_stump\n        left_indices = x_train <= s\n        right_indices = x_train > s\n\n        predictions[left_indices] += c1\n        predictions[right_indices] += c2\n\n        residuals = y_train - predictions\n\n    # Predict the value for x_query\n    prediction = 0\n    for s, c1, c2 in best_stump:\n        if x_query <= s:\n            prediction += c1\n        else:\n            prediction += c2\n\n    return round(prediction, 4)\n\n# Example usage:\nx_train = [1, 2, 3, 4, 5]\ny_train = [1, 2, 3, 2.5, 2]\nx_query = 3.5\nprint(predict_boosting_tree(x_train, y_train, x_query))\n```\n\nPlease note that the code above has a small issue in the final prediction loop where `best_stump` is used as a list of stumps, but it is actually a single stump. To correctly accumulate the predictions from all stumps, a list of stumps should be maintained and used in the final prediction loop. Here is the corrected version of the script:\n\n```python\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                           y_train: list[float] | np.ndarray,\n                           x_query: float,\n                           epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    # Ensure x_train and y_train are numpy arrays\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n\n    # Sort the training data by x_train\n    sorted_indices = np.argsort(x_train)\n    x_train = x_train[sorted_indices]\n    y_train = y_train[sorted_indices]\n\n    # Initialize residuals as the y_train values\n    residuals = y_train.copy()\n    predictions = np.zeros_like(y_train)\n    \n    # Determine all possible split points\n    split_points = (x_train[:-1] + x_train[1:]) / 2\n    stumps = []\n\n    while True:\n        best_rss = np.inf\n        best_stump = None\n\n        for s in split_points:\n            left_indices = x_train <= s\n            right_indices = x_train > s\n\n            c1 = np.mean(residuals[left_indices]) if np.any(left_indices) else 0\n            c2 = np.mean(residuals[right_indices]) if np.any(right_indices) else 0\n\n            # Compute the RSS for this split\n            rss = np.sum((residuals[left_indices] - c1) ** 2) + np.sum((residuals[right_indices] - c2) ** 2)\n\n            if rss < best_rss:\n                best_rss = rss\n                best_stump = (s, c1, c2)\n\n        if best_rss < epsilon:\n            break\n\n        s, c1, c2 = best_stump\n        left_indices = x_train <= s\n        right_indices = x_train > s\n\n        predictions[left_indices] += c1\n        predictions[right_indices] += c2\n\n        residuals = y_train - predictions\n        stumps.append(best_stump)\n\n    # Predict the value for x_query\n    prediction = 0\n    for s, c1, c2 in stumps:\n        if x_query <= s:\n            prediction += c1\n        else:\n            prediction += c2\n\n    return round(prediction, 4)\n\n# Example usage:\nx_train = [1, 2, 3, 4, 5]\ny_train = [1, 2, 3, 2.5, 2]\nx_query = 3.5\nprint(predict_boosting_tree(x_train, y_train, x_query))\n```"}
{"task_id": 34, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None) -> np.ndarray:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s based on the specified shape and sparsity.\n    \n    Parameters:\n    - shape (tuple of ints): The shape of the output tensor.\n    - sparsity (float): Probability of generating a 1.0, must be in the range [0, 1].\n    - seed (int, optional): Seed for the random number generator to ensure reproducibility.\n    \n    Returns:\n    - np.ndarray: A tensor of the specified shape and sparsity, or -1 if sparsity is out of range.\n    \"\"\"\n    # Check if sparsity is within the valid range\n    if not (0 <= sparsity <= 1):\n        return -1\n    \n    # Set the seed if provided\n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Generate the random tensor\n    random_tensor = np.random.rand(*shape)\n    binary_tensor = (random_tensor >= (1 - sparsity)).astype(float)\n    \n    return binary_tensor\n\n# Example usage\nshape = (2, 3)\nsparsity = 0.3\nseed = 42\nresult = random_binary_tensor(shape, sparsity, seed)\nprint(result)\n```\n\nThis script defines the function `random_binary_tensor` which, given a shape, a sparsity value, and an optional seed, generates a NumPy array filled with 0.0s and 1.0s according to the specified sparsity. The function checks if the sparsity value is within the valid range and uses the seed for reproducibility if provided."}
{"task_id": 39, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    # Perform an argpartition to get the index of the median element\n    median_index = np.argpartition(data[:, d], len(data) // 2)[len(data) // 2]\n    pivot = median_index\n\n    # Get the median value\n    median_value = data[median_index, d]\n\n    # Find the indices of the left and right partitions\n    left = np.where(data[:, d] < median_value)[0].tolist()\n    right = np.where(data[:, d] > median_value)[0].tolist()\n\n    # Sort the indices to make the output deterministic\n    left.sort()\n    right.sort()\n\n    return pivot, left, right\n\n# Example usage\nif __name__ == \"__main__\":\n    # Create a sample dataset\n    np.random.seed(0)\n    data = np.random.rand(10, 2)\n    print(\"Data:\\n\", data)\n\n    # Perform a median split on the first column\n    pivot, left, right = get_split(data, 0)\n    print(\"Pivot index:\", pivot)\n    print(\"Left indices:\", left)\n    print(\"Right indices:\", right)\n```\n\nThis code defines a function `get_split` that performs a median split on a given two-dimensional NumPy array `data` along a specified column `d`. The function uses `numpy.argpartition` to find the median value efficiently and then determines the indices of the elements that are strictly less than or greater than the median value. The indices are sorted to ensure deterministic output."}
{"task_id": 40, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, \"Input signal must be one-dimensional.\"\n    assert stride >= 1, \"Stride must be a positive integer.\"\n    assert len(x) >= frame_width, \"Input signal must be longer than frame width.\"\n\n    n_frames = (len(x) - frame_width) // stride + 1\n    frame_strides = (stride * x.itemsize, x.itemsize)\n    framed_signal = as_strided(x, shape=(n_frames, frame_width), strides=frame_strides)\n\n    if not writeable:\n        framed_signal.setflags(write=False)\n\n    return framed_signal\n\n# Example usage:\nx = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nframe_width = 4\nstride = 2\nwriteable = False\nframes = to_frames(x, frame_width, stride, writeable)\nprint(frames)\n```\n\nThis script implements the `to_frames` function as specified in the task description. It uses the `as_strided` function from NumPy's `stride_tricks` module to create a view on the input array `x` with the desired frame structure. The function also includes assertions to check the preconditions and adjusts the writeability of the returned array based on the `writeable` parameter."}
{"task_id": 48, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Convert input to numpy array if it is a list of lists\n    if isinstance(X, list):\n        X = np.array(X)\n\n    # Check if X is a 2D array\n    if X.ndim != 2:\n        return False\n\n    # Check if all elements are between 0 and 1 inclusive\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n\n    # Check if each row sums to 1 within the tolerance\n    row_sums = np.sum(X, axis=1)\n    if not np.allclose(row_sums, 1, atol=1e-8):\n        return False\n\n    return True\n```"}
{"task_id": 55, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n, d = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n\n    for iteration in range(max_iter):\n        # Shuffle the data for mini-batch gradient descent\n        indices = np.random.permutation(n)\n        X_shuffled = X[indices]\n        y_shuffled = y[indices]\n\n        for i in range(0, n, batch_size):\n            batch_X = X_shuffled[i:i + batch_size]\n            batch_y = y_shuffled[i:i + batch_size]\n            batch_size_eff = batch_X.shape[0]\n\n            # Compute the gradient\n            g = (1 / batch_size_eff) * batch_X.T @ (batch_X @ w - batch_y)\n\n            # Update the running average of squared gradients\n            s = rho * s + (1 - rho) * g**2\n\n            # Update the weights\n            w = w - eta * g / (np.sqrt(s) + eps_station)\n\n            # Early stopping\n            if np.linalg.norm(g) < epsilon:\n                return [round(x, 4) for x in w.tolist()]\n\n    return [round(x, 4) for x in w.tolist()]\n\n# Example usage:\n# X = np.random.rand(100, 5)\n# y = np.random.rand(100)\n# weights = rms_prop(X, y)\n# print(weights)\n```"}
{"task_id": 56, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n    \"\"\"Implement the SoftPlus activation function and its derivative (sigmoid).\n    \n    Args:\n    x: A scalar, Python list, or NumPy array of real values.\n    deriv: A boolean flag indicating whether to return the SoftPlus function (False) or its derivative (True).\n    \n    Returns:\n    A Python list (or a single float if input is a scalar) of the SoftPlus function or its derivative, \n    with each value rounded to the nearest 4th decimal.\n    \"\"\"\n    # Convert input to a NumPy array for vectorized operations\n    x = np.array(x)\n    \n    if deriv:\n        # Derivative of SoftPlus is the sigmoid function\n        # Numerically stable sigmoid implementation\n        result = np.where(x >= 0, 1 / (1 + np.exp(-x)), np.exp(x) / (1 + np.exp(x)))\n    else:\n        # Numerically stable SoftPlus implementation\n        result = np.where(x >= 0, x + np.log1p(np.exp(-x)), np.log1p(np.exp(x)))\n    \n    # Round every value to the nearest 4th decimal\n    result = np.round(result, decimals=4)\n    \n    # Convert back to list if necessary, or return a scalar if input was a scalar\n    if isinstance(x, (int, float)):\n        return float(result)\n    else:\n        return result.tolist()\n\n# Check function to verify the correctness of the generated function\ndef check_softplus():\n    test_cases = [\n        (0, False, 0.6931),\n        (0, True, 0.5),\n        (100, False, 100.0),\n        (100, True, 1.0),\n        (-100, False, 0.0),\n        (-100, True, 0.0),\n        ([0, 100, -100], False, [0.6931, 100.0, 0.0]),\n        ([0, 100, -100], True, [0.5, 1.0, 0.0])\n    ]\n    \n    for x, deriv, expected in test_cases:\n        result = softplus(x, deriv)\n        assert result == expected, f\"softplus({x}, {deriv}) returned {result}, expected {expected}\"\n    print(\"All test cases passed!\")\n\n# Run the check function\ncheck_softplus()\n```"}
{"task_id": 58, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nimport numpy as np\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    # Convert the corpus into a list of n-grams\n    corpus_ngrams = [' '.join(corpus[i:i+N]) for i in range(len(corpus)-N+1)]\n    # Convert the sequence into a list of n-grams\n    sequence_ngrams = [' '.join(sequence[i:i+N]) for i in range(len(sequence)-N+1)]\n    \n    # Count the occurrences of each n-gram in the corpus\n    corpus_ngram_counts = Counter(corpus_ngrams)\n    # Count the occurrences of (N-1)-grams in the corpus\n    context_ngram_counts = Counter([' '.join(corpus[i:i+N-1]) for i in range(len(corpus)-N+2)])\n    \n    log_prob = 0.0\n    for ngram in sequence_ngrams:\n        ngram_count = corpus_ngram_counts[ngram]\n        context = ngram.rsplit(' ', 1)[0]\n        context_count = context_ngram_counts[context] if N > 1 else len(corpus)\n        \n        if ngram_count == 0 or context_count == 0:\n            return float('-inf')\n        \n        log_prob += np.log(ngram_count / context_count)\n    \n    return round(log_prob, 4)\n\n# Example usage:\ncorpus = \"the cat sat on the mat the dog sat on the bed\".split()\nsequence = \"the cat sat\".split()\nN = 2\nprint(unsmoothed_ngram_log_prob(corpus, sequence, N))  # Example output\n```\n\nThis script defines the `unsmoothed_ngram_log_prob` function that computes the unsmoothed Maximum-Likelihood Estimation (MLE) N-gram log-probability of a sequence given a corpus and the order N of the N-gram model. It uses the `Counter` class from the `collections` module to count the occurrences of n-grams and their contexts in the corpus, and then calculates the log-probability of the sequence. If any required count is zero, it returns `float('-inf')`."}
{"task_id": 62, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef lasso_regression(X: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\", degree: int, reg_factor: float, n_iterations: int = 1000, tol: float = 1e-6) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    X = np.array(X).reshape(-1, 1)\n    y = np.array(y).reshape(-1, 1)\n    m = len(X)\n    \n    # Build the design matrix\n    X_design = np.hstack([np.ones((m, 1)), *[X ** (i + 1) for i in range(degree)]])\n    \n    # Initialize weights\n    weights = np.zeros((degree + 1, 1))\n    \n    for iteration in range(n_iterations):\n        weights_prev = weights.copy()\n        # Update bias (w0)\n        weights[0] = np.mean(y - X_design[:, 1:] @ weights[1:])\n        \n        # Update other weights (w1 to wd)\n        for j in range(1, degree + 1):\n            rho = X_design[:, j].T @ (y - X_design @ weights + weights[j] * X_design[:, j])\n            soft_threshold = np.sign(rho) * max(abs(rho) - reg_factor, 0)\n            weights[j] = soft_threshold / (X_design[:, j].T @ X_design[:, j])\n        \n        # Check for early stopping\n        if np.max(np.abs(weights - weights_prev)) < tol:\n            break\n    \n    return [round(w, 4) for w in weights.flatten().tolist()]\n\n# Example usage:\nX = [1, 2, 3, 4, 5]\ny = [2, 4, 5, 4, 5]\ndegree = 2\nreg_factor = 0.1\nprint(lasso_regression(X, y, degree, reg_factor))\n```\n\nThis script defines a `lasso_regression` function that implements univariate Lasso regression with polynomial feature expansion. The function uses coordinate descent to optimize the Lasso objective and returns the learned coefficients rounded to four decimal places."}
{"task_id": 63, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculates the backward probability vector \u03b2_t for a given time index t in a Hidden Markov Model.\n    \n    Parameters:\n    A (list[list[float]]): Transition-probability matrix of shape (N, N).\n    B (list[list[float]]): Emission-probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices (length T).\n    t (int): Integer time index (0 \u2264 t < T).\n    \n    Returns:\n    list[float]: A list containing the N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    T = len(obs)\n    N = A.shape[0]\n    \n    beta = np.zeros((T, N))\n    \n    # Initialize the last step of beta\n    beta[T-1, :] = 1\n    \n    # Calculate the backward probabilities\n    for i in range(T - 2, t - 1, -1):\n        for j in range(N):\n            beta[i, j] = np.sum(A[j, :] * B[:, obs[i + 1]] * beta[i + 1, :])\n    \n    # Return the beta vector for the given time index t\n    return [round(x, 4) for x in beta[t, :].tolist()]\n\n# Example usage:\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.4, 0.5], [0.7, 0.2, 0.1]]\nobs = [0, 1, 2]\nt = 1\n\nprint(backward_beta(A, B, obs, t))\n```\n\nThis script defines a function `backward_beta` that calculates the backward probability vector for a given time index \\(t\\) in a Hidden Markov Model. The function takes as input the transition-probability matrix \\(A\\), the emission-probability matrix \\(B\\), the list of observation indices `obs`, and the time index \\(t\\). It returns a list of backward probabilities for each state at time \\(t\\), rounded to 4 decimal places."}
{"task_id": 65, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    # Check for empty lists\n    if not A or not B or not pi or not obs:\n        return 0.0\n\n    N = len(A)  # Number of states\n    T = len(obs)  # Length of observation sequence\n\n    # Initialize the backward variables\n    beta = np.zeros((T, N))\n\n    # Base case: beta_{T-1}(i) = 1 for all states i\n    beta[T-1] = 1\n\n    # Recursive case: beta_t(i) = sum_j A_{ij} * B_{j, o_{t+1}} * beta_{t+1}(j)\n    for t in range(T-2, -1, -1):\n        for i in range(N):\n            beta[t][i] = sum(A[i][j] * B[j][obs[t+1]] * beta[t+1][j] for j in range(N))\n\n    # The sequence probability\n    prob = sum(pi[i] * B[i][obs[0]] * beta[0][i] for i in range(N))\n\n    return round(prob, 6)\n\n# Example usage:\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.5, 0.5], [0.3, 0.7]]\npi = [0.6, 0.4]\nobs = [0, 1]\nprint(backward_prob(A, B, pi, obs))\n```"}
{"task_id": 69, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    observations = np.array(observations)\n    \n    # Validate input dimensions\n    n, m = B.shape\n    if S.shape[0] != n or A.shape[0] != n or A.shape[1] != n:\n        return -1\n    \n    # Check for empty sequence\n    if len(observations) == 0:\n        return -1\n    \n    # Check for out-of-range indices\n    if np.any(observations < 0) or np.any(observations >= m):\n        return -1\n    \n    # Initialize the forward variables\n    T = len(observations)\n    alpha = np.zeros((T, n))\n    \n    # Base case: alpha_1(j) = S(j) * B(j, obs_1)\n    alpha[0, :] = S * B[:, observations[0]]\n    \n    # Inductive step: alpha_t(j) = [sum_i alpha_t-1(i) * A(i,j)] * B(j, obs_t)\n    for t in range(1, T):\n        for j in range(n):\n            alpha[t, j] = np.sum(alpha[t-1] * A[:, j]) * B[j, observations[t]]\n    \n    # The probability of the sequence is the sum of the last alpha values\n    sequence_likelihood = np.sum(alpha[-1])\n    \n    return round(sequence_likelihood, 4)\n\n# Example usage\nS = [0.5, 0.5]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.4, 0.5], [0.6, 0.3, 0.1]]\nobservations = [0, 1, 2]\n\nprint(forward_algorithm(S, A, B, observations))\n```\n\nThis code snippet defines a function `forward_algorithm` that implements the forward algorithm for computing the likelihood of a sequence of observations given a Hidden Markov Model. It checks for valid input dimensions and observation indices, and computes the sequence likelihood using the forward variables. The result is rounded to 4 decimal places as required."}
{"task_id": 70, "completion_id": 0, "completion": "```python\nfrom collections import Counter, defaultdict\nfrom typing import List\n\ndef fp_growth(transactions: List[List[str]], min_support: int) -> List[List[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    def create_tree(transactions, headers):\n        tree = FPNode('Null', 1)\n        for transaction in transactions:\n            transaction = sorted(transaction, key=lambda x: headers[x], reverse=True)\n            tree.add(transaction)\n        return tree\n\n    def mine_tree(tree, headers, min_support, prefix, frequent_itemsets):\n        for item, count in headers.items():\n            new_prefix = prefix.copy()\n            new_prefix.add(item)\n            frequent_itemsets.append(list(new_prefix))\n            conditional_patterns = tree.get_conditional_patterns(item)\n            conditional_tree, conditional_headers = build_conditional_tree(conditional_patterns, min_support)\n            if conditional_headers:\n                mine_tree(conditional_tree, conditional_headers, min_support, new_prefix, frequent_itemsets)\n\n    def build_conditional_tree(patterns, min_support):\n        headers = defaultdict(int)\n        for pattern in patterns:\n            for item in pattern:\n                headers[item] += 1\n        headers = {k: v for k, v in headers.items() if v >= min_support}\n        if not headers:\n            return None, None\n        tree = create_tree(patterns, headers)\n        return tree, headers\n\n    class FPNode:\n        def __init__(self, item, count, parent=None):\n            self.item = item\n            self.count = count\n            self.parent = parent\n            self.children = {}\n            self.link = None\n\n        def add(self, transaction):\n            if transaction:\n                item = transaction[0]\n                if item in self.children:\n                    self.children[item].count += 1\n                else:\n                    child = FPNode(item, 1, self)\n                    self.children[item] = child\n                    update_header(child)\n                self.children[item].add(transaction[1:])\n\n        def get_conditional_patterns(self, item):\n            patterns = []\n            for child in self.children.values():\n                if child.item == item:\n                    pattern = []\n                    current_node = child\n                    while current_node.parent.item != 'Null':\n                        pattern.append(current_node.item)\n                        current_node = current_node.parent\n                    patterns.append(pattern)\n            return patterns\n\n    def update_header(node):\n        if node.item in headers:\n            current_node = headers[node.item]\n            while current_node.link:\n                current_node = current_node.link\n            current_node.link = node\n        else:\n            headers[node.item] = node\n\n    if not transactions:\n        return []\n\n    # Count item frequency\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_support}\n\n    if not frequent_items:\n        return []\n\n    # Sort items by frequency\n    headers = {item: count for item, count in sorted(frequent_items.items(), key=lambda x: x[1], reverse=True)}\n\n    # Build FP-tree\n    tree = create_tree(transactions, headers)\n\n    # Mine the tree\n    frequent_itemsets = []\n    mine_tree(tree, headers, min_support, set(), frequent_itemsets)\n\n    # Sort the results\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\n\n# Example usage\ntransactions = [\n    ['milk', 'bread', 'eggs'],\n    ['milk', 'bread', 'jam'],\n    ['bread', 'eggs'],\n    ['milk', 'bread', 'eggs'],\n    ['milk', 'jam'],\n    ['bread', 'jam']\n]\nmin_support = 2\nprint(fp_growth(transactions, min_support))\n```\n\nThis script implements the FP-Growth algorithm to discover frequent item-sets in a given transactional data base. The function `fp_growth` takes a list of transactions and a minimum support threshold, and returns a list of all frequent item-sets that meet the threshold. The implementation includes an inner class `FPNode` for constructing the FP-tree and helper functions for building the tree, mining the tree, and updating the header table. The results are sorted to ensure a deterministic output as specified in the task description."}
{"task_id": 75, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if not (1 <= k <= len(X_train)):\n        return -1\n\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    predictions = []\n    for test_sample in X_test:\n        # Compute the Euclidean distances (without square root) between the test sample and all training samples\n        distances = np.sum((X_train - test_sample) ** 2, axis=1)\n        # Get the indices of the k nearest samples\n        nearest_indices = np.argsort(distances)[:k]\n        # Get the labels of the k nearest samples\n        nearest_labels = y_train[nearest_indices]\n        # Count the occurrences of each label\n        label_counts = np.bincount(nearest_labels)\n        # Find the label(s) with the highest count\n        max_count = np.max(label_counts)\n        # Get the smallest label among the tied ones\n        predicted_label = np.where(label_counts == max_count)[0][0]\n        predictions.append(predicted_label)\n    \n    return predictions\n\n# Example usage:\nX_train = [[1.0, 2.0], [2.0, 3.0], [3.0, 4.0], [4.0, 5.0]]\ny_train = [0, 0, 1, 1]\nX_test = [[1.5, 2.5], [3.5, 4.5]]\nk = 2\nprint(knn_predict(X_train, y_train, X_test, k))  # Output should be [0, 1]\n```"}
{"task_id": 76, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    \n    # Add machine epsilon to y_pred to avoid log(0)\n    epsilon = np.finfo(float).eps\n    y_pred = np.clip(y_pred, epsilon, 1.0 - epsilon)\n    \n    # Compute the categorical cross-entropy loss\n    loss = -np.sum(y * np.log(y_pred))\n    \n    # Return the loss rounded to 4 decimal places\n    return round(loss, 4)\n\n# Example usage:\n# y = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n# y_pred = [[0.7, 0.2, 0.1], [0.1, 0.8, 0.1], [0.2, 0.2, 0.6]]\n# print(cross_entropy_loss(y, y_pred))  # Output should be the computed loss rounded to 4 decimal places.\n```"}
{"task_id": 77, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> tuple[list[float], list]:\n    \"\"\"\n    Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    tuple[list[float], list]\n        The final activation AL rounded to 4 decimals and converted to a plain\n        Python list. The shape is (1, m). Also returns a list of caches.\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2  # number of layers in the neural network\n    \n    for l in range(1, L):\n        A_prev = A\n        W = parameters['W' + str(l)]\n        b = parameters['b' + str(l)]\n        Z = np.dot(W, A_prev) + b\n        A = relu(Z)\n        cache = (A_prev, W, b, Z)\n        caches.append(cache)\n    \n    # Output layer\n    W = parameters['W' + str(L)]\n    b = parameters['b' + str(L)]\n    Z = np.dot(W, A) + b\n    AL = sigmoid(Z)\n    cache = (A, W, b, Z)\n    caches.append(cache)\n    \n    AL = np.round(AL, 4).tolist()\n    return AL, caches\n\ndef relu(Z):\n    return np.maximum(0, Z)\n\ndef sigmoid(Z):\n    return 1 / (1 + np.exp(-Z))\n\n# Example usage\nif __name__ == \"__main__\":\n    # Example input\n    X = np.random.randn(3, 2)\n    parameters = {\n        'W1': np.random.randn(2, 3),\n        'b1': np.random.randn(2, 1),\n        'W2': np.random.randn(1, 2),\n        'b2': np.random.randn(1, 1)\n    }\n    \n    AL, caches = L_model_forward(X, parameters)\n    print(\"Final activation AL:\", AL)\n    print(\"Caches:\", caches)\n```\n\nThis script defines a function `L_model_forward` that performs forward propagation for an L-layer neural network, using ReLU activation for hidden layers and sigmoid for the output layer. The function takes an input matrix `X` and a dictionary of parameters `parameters`, and returns the final activation `AL` and a list of caches for each layer. The example usage at the bottom demonstrates how to call this function with random data."}
{"task_id": 81, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    m = Y.shape[1] if Y.ndim == 2 else Y.size\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    cost = -(1 / m) * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    return round(cost, 6)\n\n# Example usage\nif __name__ == \"__main__\":\n    A2 = np.array([[0.9, 0.1, 0.8, 0.4]])  # Predicted probabilities\n    Y = np.array([[1, 0, 1, 0]])           # Ground-truth labels\n    cost = compute_cost(A2, Y)\n    print(cost)\n```\nThis script defines the `compute_cost` function to compute the binary cross-entropy cost as described, with the necessary clipping to avoid undefined log(0) operations. The example usage at the bottom demonstrates how to call the function with sample data."}
{"task_id": 82, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | np.ndarray, epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    n = len(Q)\n    greedy_index = np.argmax(Q)\n    base_prob = epsilon / n\n    greedy_prob = 1 - epsilon + base_prob\n    \n    probabilities = [round(base_prob, 4) for _ in range(n)]\n    probabilities[greedy_index] = round(greedy_prob, 4)\n    \n    # Ensure the probabilities sum to 1 within numerical tolerance\n    if abs(sum(probabilities) - 1) > 1e-12:\n        probabilities[greedy_index] += round(1 - sum(probabilities), 4)\n    \n    return probabilities\n\n# Example usage:\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1\noutput = epsilon_soft(Q, epsilon)\nprint(output)  # Expected: [0.925, 0.025, 0.025, 0.025]\n```\n\nThis code snippet defines the `epsilon_soft` function as requested, which computes the \u03b5-soft probabilities for a given set of Q-values and an exploration parameter \u03b5. The function ensures that the probabilities are rounded to 4 decimal places and sum to 1 within a specified tolerance."}
{"task_id": 86, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    # Transpose the list of predictions so that each list represents the votes for one sample\n    transposed_predictions = list(zip(*predictions))\n    \n    # Aggregate the votes for each sample and determine the majority vote\n    aggregated_predictions = []\n    for sample_votes in transposed_predictions:\n        # Count the occurrences of each vote\n        vote_counts = Counter(sample_votes)\n        # Find the class label with the highest count. In case of a tie, the smallest label is chosen due to the nature of min()\n        majority_vote = min(vote_counts, key=lambda k: (-vote_counts[k], k))\n        aggregated_predictions.append(majority_vote)\n    \n    return aggregated_predictions\n\n# Example usage\npredictions = [\n    [1, 2, 1, 2],\n    [1, 2, 2, 2],\n    [2, 2, 1, 1],\n    [1, 1, 2, 2],\n    [1, 2, 1, 2]\n]\n\nprint(aggregate_random_forest_votes(predictions))\n# Expected output: [1, 2, 1, 2]\n```\n```"}
{"task_id": 88, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    # Convert input to a numpy array if it's a list\n    if isinstance(z, list):\n        z = np.array(z)\n    \n    # Apply the softplus function using logaddexp to avoid overflow/underflow\n    result = np.logaddexp(0.0, z)\n    \n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n    \n    # Convert back to a list if the input was a list or ndarray\n    if isinstance(z, (list, np.ndarray)):\n        return result.tolist()\n    else:\n        # Return a single float if the input was a scalar\n        return float(result)\n\n# Example usage\nz = np.array([-1000, 0, 3])\nprint(softplus(z))  # Output: [0.0, 0.6931, 3.0486]\n```"}
{"task_id": 90, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Extract the true expected values and the policy's estimates\n    true_evs = bandit.get('arm_evs', [])\n    estimates = policy.get('ev_estimates', {})\n    \n    # Check if the policy does not contain any estimates\n    if not estimates:\n        return np.nan\n    \n    # Sort the estimates by arm index to match the order of true_evs\n    sorted_estimates = [estimates[i] for i in sorted(estimates.keys())]\n    \n    # Check if the number of arms in estimates matches the number of arms in true_evs\n    if len(sorted_estimates) != len(true_evs):\n        return np.nan\n    \n    # Calculate the mean-squared error\n    mse_value = np.mean((np.array(true_evs) - np.array(sorted_estimates))**2)\n    \n    # Return the MSE rounded to 4 decimal places\n    return round(mse_value, 4)\n\n# Example usage\nbandit = {\"arm_evs\": [0.5, 0.2, 0.9]}\npolicy = {\"ev_estimates\": {0: 0.4, 1: 0.25, 2: 0.8}}\nprint(mse(bandit, policy))  # Expected output: 0.0075\n```"}
{"task_id": 96, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # Tokenize the corpus and sequence\n    corpus_words = [word for sentence in corpus for word in sentence.split()]\n    sequence_words = sequence.split()\n\n    # Create vocabulary including <UNK>\n    vocab = set(corpus_words) | {\"<UNK>\"}\n    vocab_size = len(vocab)\n\n    # Build n-gram frequency tables\n    ngram_counts = defaultdict(Counter)\n    for sentence in corpus:\n        words = [\"<UNK>\" if word not in vocab else word for word in sentence.split()]\n        for i in range(len(words) - N + 1):\n            ngram = tuple(words[i:i+N])\n            ngram_counts[N-1][ngram[:-1]] += 1\n            ngram_counts[N][ngram] += 1\n\n    # Calculate the log-probability of the sequence\n    log_prob = 0.0\n    for i in range(len(sequence_words) - N + 1):\n        ngram = tuple([\"<UNK>\" if word not in vocab else word for word in sequence_words[i:i+N]])\n        context = ngram[:-1]\n        ngram_count = ngram_counts[N][ngram]\n        context_count = ngram_counts[N-1][context]\n        smoothed_prob = (ngram_count + K) / (context_count + K * vocab_size)\n        log_prob += math.log(smoothed_prob)\n\n    # Return the log-probability rounded to 4 decimals\n    return round(log_prob, 4) if len(sequence_words) >= N else 0.0\n\n# Example usage\ncorpus = [\"I like cats\", \"I like dogs\", \"I like fish\", \"I like cats and dogs\"]\nsequence = \"I like cats and dogs\"\nN = 3\nK = 1.0\nprint(additive_ngram_log_prob(corpus, sequence, N, K))\n```\n\nThis script defines a function `additive_ngram_log_prob` that computes the additive-smoothed log-probability of a given sequence based on an N-gram model trained on a provided corpus. The function handles unknown words by mapping them to an `<UNK>` token and applies additive smoothing to estimate probabilities. The result is the natural logarithm of the sentence probability, rounded to four decimal places."}
{"task_id": 108, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    N, M = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    \n    for i in range(max_iter):\n        # Update W\n        for n in range(N):\n            A = H @ H.T + alpha * np.eye(K)\n            B = X[n, :].reshape(-1, 1) @ H.T\n            W[n, :] = np.linalg.solve(A, B).T\n        \n        # Update H\n        for m in range(M):\n            A = W.T @ W + alpha * np.eye(K)\n            B = X[:, m].reshape(-1, 1) @ W.T\n            H[:, m] = np.linalg.solve(A, B).T\n        \n        # Compute the regularized loss\n        X_hat = W @ H\n        loss = np.linalg.norm(X - X_hat)**2 + alpha * (np.linalg.norm(W)**2 + np.linalg.norm(H)**2)\n        \n        # Check for convergence\n        if loss < tol:\n            break\n    \n    return X_hat.round(4).tolist()\n\n# Example usage\nX = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nK = 2\nreconstructed_matrix = als_factorization(X, K)\nprint(reconstructed_matrix)\n```"}
{"task_id": 109, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n    \n    m, n = X.shape\n    centroids = [X[random.randint(0, m-1)].tolist()]\n    \n    for _ in range(1, K):\n        dist = np.array([min([np.linalg.norm(x-c)**2 for c in centroids]) for x in X])\n        probs = dist / dist.sum()\n        cumulative_probs = probs.cumsum()\n        r = random.random()\n        for j, p in enumerate(cumulative_probs):\n            if r < p:\n                i = j\n                break\n        centroids.append(X[i].tolist())\n    \n    old_labels = np.zeros(m)\n    for _ in range(max_iter):\n        distances = np.array([[np.linalg.norm(x - c) for c in centroids] for x in X])\n        labels = np.argmin(distances, axis=1)\n        if np.array_equal(old_labels, labels):\n            break\n        old_labels = labels\n        \n        for i in range(K):\n            points = [X[j] for j in range(m) if labels[j] == i]\n            if points:\n                centroids[i] = np.mean(points, axis=0).tolist()\n    \n    centroids = [np.round(c, 4).tolist() for c in centroids]\n    centroids.sort()\n    return centroids\n\n# Example usage\nX = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\nK = 2\nrandom_state = 42\nprint(kmeans(X, K, random_state=random_state))\n```\n\nThis script implements the K-Means clustering algorithm with K-Means++ initialization as specified in the task. The final centroids are rounded to four decimal places and sorted by their first coordinate. The example usage demonstrates how to call the function with a sample dataset and a random state for reproducibility."}
{"task_id": 111, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes every character of the input string using a provided vocabulary.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text]  # Encode characters, using 0 for unknown characters\n    if len(encoded) < time_steps:\n        encoded += [0] * (time_steps - len(encoded))  # Pad with zeros if shorter than time_steps\n    else:\n        encoded = encoded[:time_steps]  # Truncate if longer than time_steps\n    return encoded\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list/array of integer ids back to text using an inverse vocabulary.\"\"\"\n    decoded = ''.join(inverse_vocab.get(idx, '') for idx in indices if idx != 0)  # Convert ids to characters, ignore padding\n    return decoded\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes the raw text, predicts with the model, and decodes the prediction.\"\"\"\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded_text = np.array([encoded_text])  # Model expects a batch, so wrap in a list\n    prediction = model.predict(encoded_text)  # Simulate model prediction\n    predicted_ids = np.argmax(prediction, axis=-1)  # Get the predicted ids\n    decoded_prediction = int_to_string(predicted_ids[0], inv_output_vocabulary)  # Decode the first (and only) prediction\n    return decoded_prediction\n\n# Example usage\nif __name__ == \"__main__\":\n    # Mock model and vocabularies\n    class MockModel:\n        def predict(self, x):\n            return np.random.rand(x.shape[0], TIME_STEPS, 10)  # Random prediction with 10 classes\n    \n    input_vocab = {char: idx for idx, char in enumerate('abcdefghijklmnopqrstuvwxyz', 1)}\n    output_vocab = {idx: char for char, idx in input_vocab.items()}\n    \n    model = MockModel()\n    text = \"hello world\"\n    print(run_example(model, input_vocab, output_vocab, text))\n```\n\nThis script defines the required functions and demonstrates their usage with a mock model and simple vocabularies. The `run_example` function simulates the model prediction step with random data, as the actual model is not provided."}
{"task_id": 113, "completion_id": 0, "completion": "```python\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str], optional\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    # If examples is not provided, use the global constant EXAMPLES\n    if examples is None:\n        examples = EXAMPLES\n\n    predictions = []  # List to hold the predicted strings\n\n    for example in examples:\n        # Call the helper function to get the model's output as a list of characters\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        # Concatenate the characters into a single string\n        predicted_string = ''.join(output_chars)\n        # Print the input and output\n        print(f\"input:  {example}\")\n        print(f\"output: {predicted_string}\")\n        # Add the predicted string to the list\n        predictions.append(predicted_string)\n\n    return predictions\n```"}
{"task_id": 115, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    # Ensure y is a column vector\n    y = y.reshape(-1, 1)\n    \n    # Compute the linear combination of features and weights\n    z = X @ w\n    \n    # Compute the predicted probabilities\n    p = 1 / (1 + np.exp(-z))\n    \n    # Clamp probabilities to avoid numerical issues\n    p = np.clip(p, 1e-20, 1 - 1e-20)\n    \n    # Compute the average binary cross-entropy loss\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    \n    # Compute the gradient of the loss with respect to the weights\n    gradient = (X.T @ (p - y)) / len(y)\n    \n    # Return the loss rounded to 4 decimals and the gradient as a nested list rounded to 4 decimals\n    return round(loss, 4), np.round(gradient, 4).tolist()\n\n# Example usage\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([0, 1, 1])\nw = np.array([0.1, 0.2])\n\n# Compute the loss and gradient\nloss, gradient = logistic_loss_and_gradient(X, y, w)\nprint(loss, gradient)\n```\n\nThis code snippet defines a function `logistic_loss_and_gradient` that calculates the binary cross-entropy loss and its gradient for a logistic regression model given a feature matrix `X`, a binary target vector `y`, and a weight vector `w`. The function ensures numerical stability by clamping the predicted probabilities and returns the loss rounded to four decimal places and the gradient as a nested list rounded to four decimal places."}
{"task_id": 118, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    n_clf = max(1, n_clf)\n    \n    # Initialize weights\n    weights = np.full(n_samples, 1 / n_samples)\n    \n    # Store stumps and their weights\n    stumps = []\n    stump_weights = []\n    \n    for _ in range(n_clf):\n        # Find the best stump\n        best_stump = None\n        best_error = float('inf')\n        best_threshold = None\n        best_feature = None\n        \n        for feature in range(n_features):\n            for threshold in np.unique(X_train[:, feature]):\n                pred = np.where(X_train[:, feature] > threshold, 1, -1)\n                error = np.sum(weights[y_train != pred])\n                \n                if error < best_error:\n                    best_error = error\n                    best_stump = pred\n                    best_threshold = threshold\n                    best_feature = feature\n        \n        # Compute stump weight\n        alpha = 0.5 * np.log((1 - best_error) / best_error)\n        \n        # Update weights\n        weights *= np.exp(-alpha * y_train * best_stump)\n        weights /= np.sum(weights)\n        \n        # Store the stump and its weight\n        stumps.append((best_feature, best_threshold))\n        stump_weights.append(alpha)\n    \n    # Make predictions on test data\n    predictions = np.zeros(len(X_test))\n    for (feature, threshold), alpha in zip(stumps, stump_weights):\n        pred = np.where(X_test[:, feature] > threshold, 1, -1)\n        predictions += alpha * pred\n    \n    return list(np.sign(predictions))\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([-1, -1, 1, 1])\n# X_test = np.array([[1, 1], [3, 3]])\n# predictions = adaboost_predict(X_train, y_train, X_test, n_clf=3)\n# print(predictions)  # Output will depend on the specific implementation and input data\n```"}
{"task_id": 128, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    # Step 1: Compute the within-class scatter matrix S_W\n    classes = np.unique(y)\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    for cls in classes:\n        X_cls = X[y == cls]\n        mu_cls = np.mean(X_cls, axis=0)\n        S_W += np.dot((X_cls - mu_cls).T, (X_cls - mu_cls))\n\n    # Step 2: Compute the between-class scatter matrix S_B\n    mu = np.mean(X, axis=0)\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    for cls in classes:\n        X_cls = X[y == cls]\n        mu_cls = np.mean(X_cls, axis=0)\n        S_B += X_cls.shape[0] * np.dot((mu_cls - mu).reshape(-1, 1), (mu_cls - mu).reshape(1, -1))\n\n    # Step 3: Compute the matrix A = pinv(S_W) * S_B\n    A = np.dot(np.linalg.pinv(S_W), S_B)\n\n    # Step 4: Perform eigen-decomposition of A and sort eigen-pairs\n    eigenvalues, eigenvectors = np.linalg.eigh(A)\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n\n    # Step 5: Apply deterministic sign fix to eigenvectors\n    for i in range(eigenvectors.shape[1]):\n        first_non_zero_idx = np.argmax(eigenvectors[:, i] != 0)\n        if eigenvectors[first_non_zero_idx, i] < 0:\n            eigenvectors[:, i] *= -1\n\n    # Step 6: Project X on the first n_components eigenvectors\n    W = eigenvectors[:, :n_components]\n    projected_data = np.dot(X, W)\n\n    # Step 7: Round the elements to four decimal places and convert to list of lists\n    projected_data_rounded = np.round(projected_data, 4).tolist()\n\n    return projected_data_rounded\n\n# Example usage\nX = np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]])\ny = np.array([0,0,0,0,1,1,1,1])\nn_components = 1\nresult = multi_class_lda(X, y, n_components)\nprint(result)\n```\n\nThis Python script implements the multi-class Linear Discriminant Analysis (LDA) transformation as described in the task. It includes all the necessary steps from computing the scatter matrices, solving the eigenvalue problem, applying the sign fix, and projecting the data onto the selected components, followed by rounding the results to four decimal places."}
{"task_id": 140, "completion_id": 0, "completion": "```python\nfrom collections import deque\nimport math\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    fire_time = [[math.inf] * n for _ in range(n)]\n    queue = deque()\n    \n    # Initialize fire_time with the initial fire positions\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_time[i][j] = 0\n                queue.append((i, j, 0))\n    \n    # Spread fire through the grid\n    while queue:\n        x, y, t = queue.popleft()\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] != '#' and fire_time[nx][ny] > t + 1:\n                fire_time[nx][ny] = t + 1\n                queue.append((nx, ny, t + 1))\n    \n    # Check if start or end is on fire\n    if fire_time[0][0] == 0 or fire_time[n-1][n-1] == 0:\n        return -1\n    \n    # BFS for the agent\n    agent_queue = deque([(0, 0, 0)])\n    visited = set([(0, 0)])\n    \n    while agent_queue:\n        x, y, t = agent_queue.popleft()\n        if (x, y) == (n-1, n-1):\n            return t\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] != '#' and (nx, ny) not in visited and fire_time[nx][ny] > t + 1:\n                visited.add((nx, ny))\n                agent_queue.append((nx, ny, t + 1))\n    \n    return -1\n```\n\n# This script defines a function `escape_fire_maze` that takes a grid as input and returns the minimum number of minutes required for the agent to reach the goal without entering a burning cell, or -1 if this is impossible.\n```"}
{"task_id": 141, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"Implement k-Nearest Neighbors classifier.\"\"\"\n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((x1 - x2) ** 2, axis=1))\n    \n    def manhattan_distance(x1, x2):\n        return np.sum(np.abs(x1 - x2), axis=1)\n    \n    def cosine_distance(x1, x2):\n        dot_product = np.sum(x1 * x2, axis=1)\n        norm_x1 = np.sqrt(np.sum(x1 ** 2, axis=1))\n        norm_x2 = np.sqrt(np.sum(x2 ** 2, axis=1))\n        return 1 - (dot_product / (norm_x1 * norm_x2))\n    \n    # Select the distance function based on the metric parameter\n    if metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:  # Default to 'euclidean'\n        distance_func = euclidean_distance\n    \n    # Initialize the array to store the predictions\n    predictions = np.zeros(X_test.shape[0])\n    \n    # Iterate over each test sample\n    for i, test_sample in enumerate(X_test):\n        # Compute the distance between the test sample and each training sample\n        distances = distance_func(X_train, np.expand_dims(test_sample, axis=0))\n        \n        # Get the indices of the k nearest neighbors\n        k_indices = np.argsort(distances)[:k]\n        \n        # Get the labels of the k nearest neighbors\n        k_nearest_labels = y_train[k_indices]\n        \n        # Find the most common label among the k nearest neighbors\n        # In case of a tie, the smallest label is returned\n        unique_labels, counts = np.unique(k_nearest_labels, return_counts=True)\n        predictions[i] = unique_labels[np.argmax(counts)]\n    \n    return predictions\n```\n\nThis Python script defines a function `knn_predict` that implements the k-Nearest Neighbors algorithm for classification. It supports three distance metrics: Euclidean, Manhattan, and Cosine. The function takes training and test sets as NumPy arrays, the number of neighbors `k`, and a metric string to specify the distance metric. It returns a NumPy array of predicted labels for the test set."}
{"task_id": 146, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    n_samples, n_features = X.shape\n    m_samples = X_test.shape[0]\n    predictions = []\n\n    for test_sample in X_test:\n        distances = []\n        for i in range(n_samples):\n            if metric == 'euclidean':\n                dist = np.sqrt(np.sum((X[i] - test_sample) ** 2))\n            elif metric == 'manhattan':\n                dist = np.sum(np.abs(X[i] - test_sample))\n            elif metric == 'cosine':\n                dot_product = np.dot(X[i], test_sample)\n                norm_product = np.linalg.norm(X[i]) * np.linalg.norm(test_sample)\n                dist = 1 - dot_product / (norm_product + 1e-12)\n            distances.append((dist, y[i]))\n        \n        # Sort by distance and take the k closest\n        distances.sort(key=lambda x: x[0])\n        k_nearest_labels = [label for _, label in distances[:min(k, n_samples)]]\n        \n        # Perform majority vote\n        unique_labels, counts = np.unique(k_nearest_labels, return_counts=True)\n        majority_vote = unique_labels[np.argmax(counts)]\n        predictions.append(majority_vote)\n\n    return predictions\n```\n\nThis implementation of the k-Nearest Neighbors classifier follows the given specifications, including the use of the three specified distance metrics. It is designed to be self-contained and only uses the NumPy library for numerical operations as requested."}
{"task_id": 155, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a NumPy array if it is not already\n    state = np.array(state)\n\n    # First affine transformation and ReLU activation\n    hidden1 = np.maximum(0, np.dot(state, weights['W1']) + weights['b1'])\n\n    # Second affine transformation and ReLU activation\n    hidden2 = np.maximum(0, np.dot(hidden1, weights['W2']) + weights['b2'])\n\n    # Output affine transformation and tanh activation\n    action = np.tanh(np.dot(hidden2, weights['W3']) + weights['b3'])\n\n    # Convert output to a list and round to 4 decimal places\n    return [round(x, 4) for x in action.tolist()]\n\n# Example usage:\n# Define the weights and state vector\nweights = {\n    'W1': np.array([[0.1, 0.2], [0.3, 0.4]]),\n    'b1': np.array([0.5, 0.6]),\n    'W2': np.array([[0.7, 0.8], [0.9, 1.0]]),\n    'b2': np.array([1.1, 1.2]),\n    'W3': np.array([[1.3, 1.4], [1.5, 1.6]]),\n    'b3': np.array([1.7, 1.8])\n}\nstate = [1.0, 2.0]\n\n# Perform the forward pass\naction = actor_forward(state, weights)\nprint(action)\n```\nThis script defines the `actor_forward` function that takes a state vector and a dictionary of weights, and performs the forward pass through the described actor network, returning the action vector rounded to four decimal places."}
{"task_id": 160, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    m, n = X.shape\n    if fit_intercept:\n        X = np.hstack([np.ones((m, 1)), X])\n        n += 1\n    else:\n        X = np.hstack([np.zeros((m, 1)), X])\n    \n    w = np.zeros(n)\n    for _ in range(max_iters):\n        if fit_intercept:\n            w[0] = np.mean(y - X[:, 1:] @ w[1:])\n        for j in range(1, n):\n            temp_w = w.copy()\n            temp_w[j] = 0\n            r_j = y - X @ temp_w\n            x_j = X[:, j]\n            numerator = np.sum(x_j * r_j)\n            denominator = np.sum(x_j ** 2)\n            w[j] = soft_thresholding(numerator, lambda_param * m) / denominator\n    \n    bias = w[0] if fit_intercept else 0\n    weights_list = w[1:].tolist()\n    return [round(w, 4) for w in weights_list], round(bias, 4)\n\ndef soft_thresholding(a: float, tau: float) -> float:\n    return np.sign(a) * max(abs(a) - tau, 0)\n\n# Example usage:\nX = np.array([[1, 2], [2, 3], [3, 4]])\ny = np.array([1, 2, 3])\nweights, bias = fit_lasso(X, y, lambda_param=0.1, max_iters=100, fit_intercept=True)\nprint(\"Weights:\", weights)\nprint(\"Bias:\", bias)\n```\n\nThis script implements the Lasso regression using coordinate descent as described in the task. It includes the `fit_lasso` function and a helper function `soft_thresholding` to perform the soft-thresholding operation. The example usage demonstrates how to call the function and print the resulting weights and bias."}
{"task_id": 165, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are not already\n    x = np.array(x) if not isinstance(x, np.ndarray) else x\n    y = np.array(y) if not isinstance(y, np.ndarray) else y\n\n    # Check if the lengths of the vectors are equal\n    if x.shape != y.shape:\n        return -1\n\n    # Compute the Hamming distance\n    distance = np.sum(x != y) / x.size\n\n    # Return the distance rounded to 4 decimal places\n    return round(distance, 4)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(hamming_distance([1, 2, 3], [1, 2, 3]))  # 0.0\n    print(hamming_distance([1, 2, 3], [4, 5, 6]))  # 1.0\n    print(hamming_distance([1, 2, 3], [1, 5, 3]))  # 0.3333\n    print(hamming_distance([1, 2], [1, 2, 3]))     # -1\n```"}
{"task_id": 169, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if N <= 0:\n        raise ValueError(\"N must be a positive integer\")\n    \n    if window == \"hamming\":\n        a0, a1 = 0.54, 0.46\n        window_coeffs = [a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) for n in range(N)]\n    elif window == \"hann\":\n        a0, a1 = 0.5, 0.5\n        window_coeffs = [a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) for n in range(N)]\n    elif window == \"blackman_harris\":\n        a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n        window_coeffs = [a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1)) for n in range(N)]\n    elif window == \"generalized_cosine\":\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be provided for generalized_cosine window\")\n        window_coeffs = [sum(a * np.cos(2 * np.pi * k * n / (N - 1)) for k, a in enumerate(coefficients)) for n in range(N)]\n    else:\n        raise ValueError(\"Unknown window type\")\n    \n    # For N = 1, return [1.0] as per the conventional definition\n    if N == 1:\n        return [1.0]\n    \n    # Round to 4 decimal places\n    return [round(coeff, 4) for coeff in window_coeffs]\n\n# Example usage\nprint(generate_window(\"hamming\", 4))\nprint(generate_window(\"hann\", 4))\nprint(generate_window(\"blackman_harris\", 4))\nprint(generate_window(\"generalized_cosine\", 4, coefficients=[0.5, 0.5]))\n```\n\nThis script defines a function `generate_window` that implements the generation of window coefficients for various types of windows as specified in the task description. It includes error handling for invalid input and rounds the coefficients to 4 decimal places before returning them in a list."}
{"task_id": 171, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    # Add intercept term (bias)\n    X_train = np.c_[np.ones(X_train.shape[0]), X_train]\n    X_test = np.c_[np.ones(X_test.shape[0]), X_test]\n\n    # Map labels to 0 and 1\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) != 2:\n        raise ValueError(\"There must be exactly two distinct labels.\")\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train_mapped = np.array([label_map[label] for label in y_train])\n\n    # Handle case where all training labels are identical\n    if unique_labels[0] == unique_labels[1]:\n        return [unique_labels[0]] * len(X_test)\n\n    # Initialize weights\n    weights = np.zeros(X_train.shape[1])\n\n    # Mini-batch gradient descent\n    for _ in range(epochs):\n        # Shuffle the data for each epoch\n        indices = np.random.permutation(X_train.shape[0])\n        X_train_shuffled = X_train[indices]\n        y_train_shuffled = y_train_mapped[indices]\n\n        # Iterate over mini-batches\n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train_shuffled[i:i + batch_size]\n            y_batch = y_train_shuffled[i:i + batch_size]\n\n            # Compute predictions\n            predictions = 1 / (1 + np.exp(-np.dot(X_batch, weights)))\n\n            # Compute gradient\n            gradient = np.dot(X_batch.T, (predictions - y_batch)) / len(y_batch)\n\n            # Update weights\n            weights -= learning_rate * gradient\n\n    # Predict on test set\n    test_predictions = 1 / (1 + np.exp(-np.dot(X_test, weights)))\n    test_labels_mapped = (test_predictions >= 0.5).astype(int)\n\n    # Map predictions back to original labels\n    reverse_label_map = {0: unique_labels[0], 1: unique_labels[1]}\n    test_labels = [reverse_label_map[label] for label in test_labels_mapped]\n\n    return test_labels\n```"}
{"task_id": 176, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    n_samples, n_features = X_train.shape\n    y_train[y_train == 0] = -1  # Convert labels to -1 and 1 for computation\n\n    sample_weights = np.full(n_samples, 1 / n_samples)\n    estimators = []\n    estimator_weights = []\n\n    for _ in range(n_estimators):\n        best_error = float('inf')\n        best_estimator = None\n\n        for feature_index in range(n_features):\n            thresholds = np.unique(X_train[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    y_pred = np.where(X_train[:, feature_index] < threshold if polarity == 1 else X_train[:, feature_index] >= threshold, 1, -1)\n                    error = np.sum(sample_weights * (y_pred != y_train))\n                    if error < best_error:\n                        best_error = error\n                        best_estimator = (feature_index, threshold, polarity)\n                    elif error == best_error:\n                        # Tie-breaking rules\n                        if (feature_index, threshold, polarity) < best_estimator:\n                            best_estimator = (feature_index, threshold, polarity)\n\n        feature_index, threshold, polarity = best_estimator\n        y_pred = np.where(X_train[:, feature_index] < threshold if polarity == 1 else X_train[:, feature_index] >= threshold, 1, -1)\n        estimator_weight = 0.5 * np.log((1 - best_error) / (best_error + 1e-10))\n        sample_weights *= np.exp(-estimator_weight * y_train * y_pred)\n        sample_weights /= np.sum(sample_weights)\n\n        estimators.append(best_estimator)\n        estimator_weights.append(estimator_weight)\n\n        if best_error == 0:\n            break\n\n    y_test_pred = np.zeros(X_test.shape[0])\n    for estimator, estimator_weight in zip(estimators, estimator_weights):\n        feature_index, threshold, polarity = estimator\n        y_pred = np.where(X_test[:, feature_index] < threshold if polarity == 1 else X_test[:, feature_index] >= threshold, 1, -1)\n        y_test_pred += estimator_weight * y_pred\n\n    y_test_pred = np.where(y_test_pred >= 0, 1, 0).tolist()  # Convert back to 0 and 1 labels\n    return y_test_pred\n```\nThis code implements the AdaBoost algorithm using decision stumps as weak learners. It follows the specified rules for training and prediction, including the tie-breaking rules and the conversion of labels between -1 and 1 for internal computation."}
{"task_id": 178, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    # Check for invalid input\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n\n    # Initialize parameters\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    rng = np.random.default_rng(seed)\n\n    # Initialize particles\n    positions = rng.uniform(-1, 1, (num_particles, n_dims))\n    velocities = np.zeros((num_particles, n_dims))\n    personal_best_positions = positions.copy()\n    personal_best_values = np.apply_along_axis(lambda x: np.sum(x**2), 1, positions)\n    global_best_position = positions[np.argmin(personal_best_values)]\n    global_best_value = np.min(personal_best_values)\n\n    # Main loop\n    for _ in range(num_iterations):\n        for i in range(num_particles):\n            r1, r2 = rng.uniform(0, 1, 2)\n            velocities[i] = (w * velocities[i] +\n                             c1 * r1 * (personal_best_positions[i] - positions[i]) +\n                             c2 * r2 * (global_best_position - positions[i]))\n            positions[i] = np.clip(positions[i] + velocities[i], -1, 1)\n\n            # Update personal best\n            current_value = np.sum(positions[i]**2)\n            if current_value < personal_best_values[i]:\n                personal_best_values[i] = current_value\n                personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = positions[i]\n\n    return round(global_best_value, 4)\n```"}
{"task_id": 180, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import Counter\n\ndef euclidean_distance(x1, x2):\n    \"\"\"Compute the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((np.array(x1) - np.array(x2)) ** 2))\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    predictions = []\n    for test_point in X_test:\n        # Calculate distances from test point to all training points\n        distances = [euclidean_distance(test_point, train_point) for train_point in X_train]\n        # Sort distances and get the indices of the sorted distances\n        sorted_indices = np.argsort(distances)\n        # Determine the k nearest indices\n        k_indices = sorted_indices[:k] if k > 0 and k < len(X_train) else sorted_indices\n        # Get the labels of the k nearest points\n        k_nearest_labels = [y_train[i] for i in k_indices]\n        # Predict the label based on the task\n        if task == \"classification\":\n            # For classification, return the most common label\n            prediction = Counter(k_nearest_labels).most_common(1)[0][0]\n        else:\n            # For regression, return the average of the labels\n            prediction = round(np.mean(k_nearest_labels), 4)\n        predictions.append(prediction)\n    return predictions\n```\n\nThis script defines a function `knn_predict` that implements the k-Nearest Neighbours algorithm for both classification and regression tasks, based on the provided parameters and rules."}
{"task_id": 184, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gini_impurity(labels):\n    \"\"\"Calculate the Gini impurity for a list of labels.\"\"\"\n    _, counts = np.unique(labels, return_counts=True)\n    probabilities = counts / len(labels)\n    return 1 - np.sum(probabilities ** 2)\n\ndef best_split(X, y):\n    \"\"\"Find the best split for a node based on Gini impurity.\"\"\"\n    best_gini_gain = -1\n    best_feature_idx = None\n    best_threshold = None\n    parent_gini = gini_impurity(y)\n    \n    for feature_idx in range(X.shape[1]):\n        feature_values = X[:, feature_idx]\n        sorted_indices = np.argsort(feature_values)\n        sorted_y = y[sorted_indices]\n        sorted_features = feature_values[sorted_indices]\n        \n        for i in range(1, len(sorted_features)):\n            if sorted_features[i] != sorted_features[i-1]:\n                threshold = (sorted_features[i] + sorted_features[i-1]) / 2\n                left_y = sorted_y[:i]\n                right_y = sorted_y[i:]\n                \n                left_gini = gini_impurity(left_y)\n                right_gini = gini_impurity(right_y)\n                weighted_gini = (len(left_y) * left_gini + len(right_y) * right_gini) / len(y)\n                gini_gain = parent_gini - weighted_gini\n                \n                if gini_gain > best_gini_gain:\n                    best_gini_gain = gini_gain\n                    best_feature_idx = feature_idx\n                    best_threshold = threshold\n    \n    return best_feature_idx, best_threshold, best_gini_gain\n\ndef build_tree(X, y, depth, max_depth=None):\n    \"\"\"Recursively build a decision tree.\"\"\"\n    if len(np.unique(y)) == 1:\n        return {'label': y[0]}\n    if max_depth is not None and depth >= max_depth:\n        return {'label': np.argmax(np.bincount(y))}\n    \n    feature_idx, threshold, gini_gain = best_split(X, y)\n    if gini_gain <= 0:\n        return {'label': np.argmax(np.bincount(y))}\n    \n    left_indices = X[:, feature_idx] < threshold\n    right_indices = X[:, feature_idx] >= threshold\n    \n    left_tree = build_tree(X[left_indices], y[left_indices], depth + 1, max_depth)\n    right_tree = build_tree(X[right_indices], y[right_indices], depth + 1, max_depth)\n    \n    return {'feature_idx': feature_idx, 'threshold': threshold, 'left': left_tree, 'right': right_tree}\n\ndef predict_tree(tree, X):\n    \"\"\"Predict the class for a single sample using the decision tree.\"\"\"\n    if 'label' in tree:\n        return tree['label']\n    feature_idx = tree['feature_idx']\n    threshold = tree['threshold']\n    \n    if X[feature_idx] < threshold:\n        return predict_tree(tree['left'], X)\n    else:\n        return predict_tree(tree['right'], X)\n\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None = None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n    tree = build_tree(X_train, y_train, depth=0, max_depth=max_depth)\n    predictions = [predict_tree(tree, x) for x in X_test]\n    return predictions\n```\n\nThis Python script implements a binary decision tree classifier using the CART algorithm, based on Gini impurity for splitting nodes. It supports a maximum depth parameter to control the depth of the tree. The `decision_tree_predict` function takes training and test data as NumPy arrays, builds the tree, and returns predictions for the test data."}
{"task_id": 190, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gini_impurity(labels):\n    \"\"\"Calculate the Gini impurity for a set of labels.\"\"\"\n    _, counts = np.unique(labels, return_counts=True)\n    proportions = counts / len(labels)\n    return 1 - np.sum(proportions ** 2)\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n    best_gini = gini_impurity(y)\n    best_feature_index = -1\n    best_threshold_value = None\n\n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        for threshold in unique_values:\n            left_indices = X[:, feature_index] <= threshold\n            right_indices = X[:, feature_index] > threshold\n\n            if np.any(left_indices) and np.any(right_indices):\n                left_labels = y[left_indices]\n                right_labels = y[right_indices]\n\n                n_left = len(left_labels)\n                n_right = len(right_labels)\n                gini_left = gini_impurity(left_labels)\n                gini_right = gini_impurity(right_labels)\n\n                gini_split = (n_left / n_samples) * gini_left + (n_right / n_samples) * gini_right\n\n                if gini_split < best_gini or (np.abs(gini_split - best_gini) < 1e-12 and feature_index < best_feature_index) or (np.abs(gini_split - best_gini) < 1e-12 and feature_index == best_feature_index and threshold < best_threshold_value):\n                    best_gini = gini_split\n                    best_feature_index = feature_index\n                    best_threshold_value = threshold\n\n    if best_feature_index == -1:\n        return (-1, None, round(best_gini, 4))\n    else:\n        return (best_feature_index, best_threshold_value, round(best_gini, 4))\n\n# Example usage\nX = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\ny = [0, 0, 1, 1, 1]\nprint(best_gini_split(X, y))\n```"}
{"task_id": 191, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\"\"\"\n    def validate_vectors(x, y):\n        # Check if both are one-dimensional and can be converted to float\n        if not (isinstance(x, (list, tuple, np.ndarray)) and isinstance(y, (list, tuple, np.ndarray))):\n            return False\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except ValueError:\n            return False\n        # Check if vectors are non-empty and of the same length\n        if x.size == 0 or y.size == 0 or x.shape != y.shape:\n            return False\n        return x, y\n\n    def euclidean(x, y):\n        return round(np.sqrt(np.sum((x - y) ** 2)), 4)\n\n    def manhattan(x, y):\n        return round(np.sum(np.abs(x - y)), 4)\n\n    def chebyshev(x, y):\n        return round(np.max(np.abs(x - y)), 4)\n\n    def cosine(x, y):\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        return round(1 - (np.dot(x, y) / (norm_x * norm_y)), 4)\n\n    metric_dict = {\n        'euclidean': euclidean,\n        'manhattan': manhattan,\n        'chebyshev': chebyshev,\n        'cosine': cosine\n    }\n\n    if name not in metric_dict:\n        return lambda x, y: -1\n\n    def d(x, y):\n        validated = validate_vectors(x, y)\n        if not validated:\n            return -1\n        x, y = validated\n        return metric_dict[name](x, y)\n\n    return d\n\n# Example usage:\neuclidean_distance = metric('euclidean')\nprint(euclidean_distance([1, 2, 3], [4, 5, 6]))  # \u279e 5.1962\n```"}
{"task_id": 197, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n\n    if md_action:\n        # Multi-dimensional action space\n        action_dim = len(env.action_space.spaces)\n        for space in env.action_space.spaces:\n            if hasattr(space, 'n'):\n                # Discrete space\n                n_actions_per_dim.append(space.n)\n            else:\n                # Continuous space\n                n_actions_per_dim.append(np.inf)\n                action_ids = None\n    else:\n        # Single-dimensional action space\n        action_dim = 1\n        if cont_action:\n            # Continuous space\n            n_actions_per_dim.append(np.inf)\n        else:\n            # Discrete space\n            n_actions_per_dim.append(env.action_space.n)\n\n    if not cont_action and not any(np.isinf(x) for x in n_actions_per_dim):\n        # If the space is fully discrete, calculate the cartesian product of all dimensions\n        action_ids = list(product(*[range(int(x)) for x in n_actions_per_dim]))\n\n    return n_actions_per_dim, action_ids, action_dim\n```"}
{"task_id": 198, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # Initialize the beta matrix with zeros\n    T = phi[0].shape[1]  # Number of topics\n    beta = np.zeros((V, T))\n    \n    # Compute the sum of phi values for each word-topic pair\n    for d, doc in enumerate(corpus):\n        for n, word in enumerate(doc):\n            beta[word, :] += phi[d][n, :]\n    \n    # Normalize each column of beta so that it sums to 1\n    beta /= beta.sum(axis=0, keepdims=True)\n    \n    # Handle the case where a word never occurs in the corpus\n    beta[np.isnan(beta)] = 0  # Replace NaNs with 0s (occurs when a column sum is zero)\n    \n    # Round the values to 4 decimal places and convert to a list of lists\n    beta = beta.round(4).tolist()\n    \n    return beta\n\n# Example usage\nif __name__ == \"__main__\":\n    phi = [np.array([[0.1, 0.9], [0.9, 0.1]]), np.array([[0.2, 0.8], [0.3, 0.7]])]\n    corpus = [[0, 1], [1, 0]]\n    V = 2\n    beta = update_beta(phi, corpus, V)\n    print(beta)\n```\n\nThis script implements the \u03b2-maximisation step for Latent Dirichlet Allocation (LDA) as described in the task. It takes the variational parameters `phi`, the tokenised corpus, and the vocabulary size `V` as inputs and returns the updated word-topic distribution \u03b2 as a list of lists, with each column summing to 1 and values rounded to four decimal places."}
{"task_id": 202, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef euclidean_distance(x, y):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((x - y) ** 2))\n\ndef total_clustering_cost(X, medoids, labels):\n    \"\"\"Calculate the total clustering cost given the current medoids and labels.\"\"\"\n    cost = 0\n    for i, label in enumerate(labels):\n        cost += euclidean_distance(X[i], medoids[label])\n    return cost\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    n_samples = X.shape[0]\n    medoids = X[:k].copy()\n    labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - medoids, axis=2), axis=1)\n    cost = total_clustering_cost(X, medoids, labels)\n    \n    improvement = True\n    \n    while improvement:\n        improvement = False\n        for i in range(k):\n            for j in range(n_samples):\n                if j not in medoids:\n                    new_medoids = medoids.copy()\n                    new_medoids[i] = X[j]\n                    new_labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - new_medoids, axis=2), axis=1)\n                    new_cost = total_clustering_cost(X, new_medoids, new_labels)\n                    if new_cost < cost:\n                        cost = new_cost\n                        medoids = new_medoids\n                        labels = new_labels\n                        improvement = True\n    \n    return labels.tolist()\n\n# Test the function with the provided example\nX = np.array([[0,0], [1,0], [0,1], [5,5], [6,5], [5,6]])\nk = 2\nprint(pam_clustering(X, k))\n```\n\nThe provided Python script implements the PAM clustering algorithm as requested. It includes a function to calculate the Euclidean distance, a function to calculate the total clustering cost, and the main `pam_clustering` function which follows the deterministic PAM algorithm to cluster the data. The script also includes a test case with the provided example."}
{"task_id": 216, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\"\"\"\n    # Check if inputs are valid\n    if n_iterations < 1 or x_train.shape[1] != x_test.shape[1]:\n        return -1\n    \n    # Polynomial feature expansion\n    def generate_polynomial_features(X, degree):\n        n_samples, n_features = X.shape\n        X_poly = np.zeros((n_samples, n_features * degree + 1))\n        X_poly[:, 0] = 1  # Bias term\n        for i in range(1, degree + 1):\n            X_poly[:, i * n_features:(i + 1) * n_features] = X ** i\n        return X_poly\n    \n    # Standardize features\n    def standardize(X):\n        mean = np.mean(X, axis=0)\n        std = np.std(X, axis=0)\n        X_standardized = (X - mean) / std\n        X_standardized[:, 0] = 1  # Keep bias term as 1\n        return X_standardized, mean, std\n    \n    # Add polynomial features and standardize\n    x_train_poly = generate_polynomial_features(x_train, degree)\n    x_train_poly, mean, std = standardize(x_train_poly)\n    x_test_poly = generate_polynomial_features(x_test, degree)\n    x_test_poly[:, 1:] = (x_test_poly[:, 1:] - mean[1:]) / std[1:]  # Standardize test set without recalculating mean and std\n    \n    # Initialize weights\n    n_features = x_train_poly.shape[1]\n    weights = np.zeros(n_features)\n    \n    # Gradient descent\n    for _ in range(n_iterations):\n        y_pred = x_train_poly.dot(weights)\n        error = y_pred - y_train\n        gradient = x_train_poly.T.dot(error) / len(y_train) + reg_factor * (l1_ratio * np.sign(weights) + (1 - l1_ratio) * weights)\n        gradient[0] = x_train_poly.T.dot(error)[0] / len(y_train)  # No regularization for bias term\n        weights -= learning_rate * gradient\n    \n    # Predict\n    y_pred_test = x_test_poly.dot(weights)\n    return np.round(y_pred_test, 4).tolist()\n\n# Example usage\nx_train = np.array([[1, 2], [2, 3], [3, 4]])\ny_train = np.array([1, 2, 3])\nx_test = np.array([[4, 5], [5, 6]])\n\npredictions = elastic_net_regression(x_train, y_train, x_test, degree=2)\nprint(predictions)\n```\n\nThis script defines an `elastic_net_regression` function that implements Elastic Net regression using batch gradient descent. It includes polynomial feature expansion, feature standardization, and the application of both L1 and L2 regularization penalties. The function returns predictions for the test set, rounded to four decimal places."}
{"task_id": 217, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert to numpy arrays for vectorized operations\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n\n    # Compute the sigmoid of the predicted values\n    sigmoid_pred = 1 / (1 + np.exp(-predicted))\n    \n    # Compute the gradient\n    grad = actual * (sigmoid( - actual * predicted ))\n    \n    # Compute the Hessian\n    hess = sigmoid_pred * (1 - sigmoid_pred)\n    \n    # Compute the probability\n    prob = sigmoid_pred\n    \n    # Round to 6 decimal places\n    grad = np.round(grad, 6)\n    hess = np.round(hess, 6)\n    prob = np.round(prob, 6)\n    \n    # Convert back to Python lists\n    gradient_list = grad.tolist()\n    hessian_list = hess.tolist()\n    probability_list = prob.tolist()\n    \n    return (gradient_list, hessian_list, probability_list)\n\n# Helper function for sigmoid calculation\ndef sigmoid(z):\n    return 1 / (1 + np.exp(-z))\n\n# Example usage\nactual = [1, -1, 1, -1]\npredicted = [0.5, -0.5, 2.0, -2.0]\ngradient, hessian, probability = logistic_components(actual, predicted)\nprint(\"Gradient:\", gradient)\nprint(\"Hessian:\", hessian)\nprint(\"Probability:\", probability)\n```\n\nThis code defines the `logistic_components` function which computes the gradient, Hessian, and probability for the logistic loss given the actual labels and predicted scores. It also includes a helper function `sigmoid` for computing the sigmoid transformation. The function ensures all outputs are rounded to 6 decimal places and works with Python lists, tuples, or NumPy arrays."}
{"task_id": 218, "completion_id": 0, "completion": "```python\ndef calculate_score(hand: list[int]) -> int:\n    \"\"\"Calculate the score of a hand, considering the value of Aces.\"\"\"\n    score = sum(hand)\n    ace_count = hand.count(1)\n    while ace_count > 0 and score + 10 <= 21:\n        score += 10\n        ace_count -= 1\n    return score\n\ndef is_natural_blackjack(hand: list[int]) -> bool:\n    \"\"\"Check if the hand is a natural blackjack.\"\"\"\n    return len(hand) == 2 and 1 in hand and 10 in hand\n\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    player_score = calculate_score(player)\n    dealer_score = calculate_score(dealer)\n    \n    if player_score > 21:\n        return -1\n    elif dealer_score > 21:\n        return 1\n    elif player_score > dealer_score:\n        if is_natural_blackjack(player):\n            return 1.5\n        else:\n            return 1\n    elif player_score < dealer_score:\n        return -1\n    else:\n        return 0\n\n# Example usage:\nplayer_hand = [1, 10]  # Natural Blackjack\ndealer_hand = [9, 6]\nprint(blackjack_outcome(player_hand, dealer_hand))  # Expected output: 1.5\n```"}
{"task_id": 221, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper that returns element-wise squared log errors.\"\"\"\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\n\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    # Convert inputs to NumPy arrays for consistency\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Input validation\n    if actual.shape != predicted.shape:\n        return -1\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    \n    # Calculate the MSLE\n    squared_errors = squared_log_error(actual, predicted)\n    msle = np.mean(squared_errors)\n    \n    return round(msle, 4)\n```\n\nThis solution adheres to the requirements:\n- It implements the `squared_log_error` helper function which returns a NumPy array of squared logarithmic errors.\n- The `mean_squared_log_error` function calculates the MSLE and returns it rounded to 4 decimal places.\n- It performs input validation to check if the shapes are the same and all values are non-negative, returning -1 if any check fails."}
{"task_id": 222, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    def stable_sigmoid(z):\n        # Numerically stable sigmoid function\n        return np.where(z >= 0,\n                        1 / (1 + np.exp(-z)),\n                        np.exp(z) / (1 + np.exp(z)))\n\n    # Convert input to np array if it's a list\n    if isinstance(z, list):\n        z = np.array(z)\n    elif not isinstance(z, np.ndarray):\n        z = np.array([z])\n\n    result = stable_sigmoid(z)\n\n    # Convert back to list if original input was a list\n    if isinstance(z, np.ndarray) and z.shape == (1,):\n        return round(float(result), 4)\n    else:\n        return [round(float(num), 4) for num in result.tolist()]\n\n# Example usage\nprint(sigmoid(0))  # 0.5\nprint(sigmoid([-1000, 0, 1000]))  # [0.0, 0.5, 1.0]\nprint(sigmoid(np.array([-1000, 0, 1000])))  # [0.0, 0.5, 1.0]\n```"}
{"task_id": 224, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    # Helper function to apply leaky ReLU to a single value\n    def apply_leaky_relu(x, a):\n        return max(x, a * x)\n    \n    # Convert input to numpy array if it's not already\n    z_array = np.array(z)\n    \n    # Apply the leaky ReLU element-wise\n    result = np.where(z_array >= 0, z_array, a * z_array)\n    \n    # Convert the result back to a list if necessary\n    if isinstance(z, list):\n        return result.tolist()\n    else:\n        return result\n\n# Test cases\nprint(leaky_relu(-1))  # Should print -0.01\nprint(leaky_relu([1, -1, 2, -2]))  # Should print [1, -0.01, 2, -0.02]\nprint(leaky_relu([[1, -1], [2, -2]], a=0.1))  # Should print [[1, -0.1], [2, -0.2]]\nprint(leaky_relu(np.array([[1, -1], [2, -2]]), a=0.2))  # Should print [[1, -0.2], [2, -0.4]]\n```"}
{"task_id": 226, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    sample_weights = np.full(n_samples, 1/n_samples)\n    classifiers = []\n\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_classifier = None\n\n        for feature_index in range(n_features):\n            thresholds = np.unique(X_train[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = np.where(X_train[:, feature_index] < threshold, polarity, -polarity)\n                    error = np.sum(sample_weights * (predictions != y_train))\n                    if error < best_error:\n                        best_error = error\n                        best_classifier = (feature_index, threshold, polarity)\n\n        feature_index, threshold, polarity = best_classifier\n        predictions = np.where(X_train[:, feature_index] < threshold, polarity, -polarity)\n        error = np.sum(sample_weights * (predictions != y_train))\n        alpha = 0.5 * math.log((1 - error) / (error + 1e-10))\n        classifiers.append((feature_index, threshold, polarity, alpha))\n\n        # Update sample weights\n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        sample_weights /= np.sum(sample_weights)\n\n    # Prediction for X_test\n    test_predictions = np.zeros(X_test.shape[0])\n    for feature_index, threshold, polarity, alpha in classifiers:\n        predictions = np.where(X_test[:, feature_index] < threshold, polarity, -polarity)\n        test_predictions += alpha * predictions\n\n    return list(np.sign(test_predictions))\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([-1, -1, 1, 1])\n# X_test = np.array([[1.5, 2.5], [3.5, 4.5]])\n# predictions = adaboost_predict(X_train, y_train, X_test, n_clf=3)\n# print(predictions)  # Output: [-1, 1]\n```"}
{"task_id": 241, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n\n    flat_shape = (shape[0], np.prod(shape[1:]))\n    a = np.random.randn(*flat_shape)\n    u, _, vh = np.linalg.svd(a, full_matrices=False)\n    q = u if u.shape == flat_shape else vh\n    q = q.reshape(shape)\n    return (scale * q).tolist()\n\n# Example usage:\nnp.random.seed(0)\nshape = (2, 2)\nscale = 0.5\nresult = orthogonal(shape, scale)\nprint(np.array(result))\n```\n\nThis code snippet defines the `orthogonal` function that generates an orthogonally initialized tensor according to the Saxe et al. (2014) algorithm. The function accepts a tuple `shape` representing the desired output shape and an optional `scale` factor. It returns a Python list representing the tensor, or `-1` if the shape has fewer than two dimensions. The example usage demonstrates how to call the function with a fixed random seed for reproducibility."}
{"task_id": 243, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Convert state to a NumPy array for easier manipulation\n    state = np.array(state)\n    \n    # Define the weights and biases (all set to 1.0 and 0.0 respectively)\n    W = np.ones((4, 4))\n    b = np.zeros(4)\n    \n    # Dense-1 layer\n    z1 = np.maximum(0, np.dot(state, W) + b)\n    \n    # Dense-2 layer\n    z2 = np.maximum(0, np.dot(z1, W) + b)\n    \n    # Dense-3 layer\n    z3 = np.maximum(0, np.dot(z2, W) + b)\n    \n    # Actor head (logits)\n    logits = np.dot(z3, W)\n    \n    # Softmax activation for actor head\n    exp_logits = np.exp(logits - np.max(logits))  # Subtract max for numerical stability\n    action_probs = (exp_logits / exp_logits.sum()).round(4).tolist()\n    \n    # Critic head\n    state_value = np.dot(z3, W)[0].round(4)\n    \n    return action_probs, state_value\n\n# Example usage\nstate = [1.0, 2.0, 3.0]\naction_probs, state_value = actor_critic_forward(state)\nprint(action_probs, state_value)\n```\n\nThis code block implements the forward pass of a small fully-connected Actor\u2013Critic network as per the provided specifications. The function `actor_critic_forward` takes a list of three floats as input, performs the necessary computations, and returns the action probabilities and state value, both rounded to four decimal places."}
{"task_id": 249, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    # Convert state and params to numpy arrays\n    state = np.array(state)\n    for key in params:\n        params[key] = np.array(params[key])\n\n    # Shared layers\n    x = np.maximum(0, state @ params['W1'] + params['b1'])  # ReLU activation\n    x = np.maximum(0, x @ params['W2'] + params['b2'])\n    x = np.maximum(0, x @ params['W3'] + params['b3'])\n\n    # Actor head\n    actor_output = x @ params['Wa'] + params['ba']\n    exp_scores = np.exp(actor_output - np.max(actor_output))  # Subtract max for numerical stability\n    probabilities = exp_scores / np.sum(exp_scores)\n\n    # Critic head\n    value = x @ params['Wc'] + params['bc']\n\n    # Rounding\n    probabilities = np.round(probabilities, decimals=4)\n    value = np.round(value, decimals=4)\n\n    # Ensure exact 0 or 1 are returned as 0.0 or 1.0\n    probabilities = [float(f\"{p:.1f}\" if p == 0 or p == 1 else f\"{p:.4f}\") for p in probabilities]\n    value = float(f\"{value:.1f}\" if value == 0 or value == 1 else f\"{value:.4f}\")\n\n    return probabilities, value\n\n# Example usage\nstate = [1.0, 2.0, 3.0]\nparams = {\n    'W1': [[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]],\n    'b1': [0.1, 0.2],\n    'W2': [[0.7, 0.8], [0.9, 1.0]],\n    'b2': [0.3, 0.4],\n    'W3': [[1.1, 1.2], [1.3, 1.4]],\n    'b3': [0.5, 0.6],\n    'Wa': [[1.5, 1.6], [1.7, 1.8]],\n    'ba': [0.7, 0.8],\n    'Wc': [[1.9], [2.0]],\n    'bc': [0.9]\n}\n\nprobabilities, value = actor_critic_forward(state, params)\nprint(probabilities, value)\n```\nThis code snippet defines the `actor_critic_forward` function as described in the task, using NumPy for the necessary calculations. The function takes a state vector and a dictionary of parameters, performs the forward pass through the network, and returns the action probabilities and the state value, rounded as specified."}
{"task_id": 253, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l2_ratio = 1 - l1_ratio\n\n    if gradient:\n        grad = alpha * (l1_ratio * np.sign(w) + l2_ratio * w)\n        return [round(x, 4) for x in grad.tolist()]\n    else:\n        penalty = alpha * (l1_ratio * np.linalg.norm(w, ord=1) + l2_ratio * 0.5 * np.dot(w, w))\n        return round(penalty, 4)\n\n# Example usage:\nweights = [1.0, -2.0, 3.0]\nalpha = 0.1\nl1_ratio = 0.5\n\npenalty_value = elastic_net_regularization(weights, alpha, l1_ratio)\ngradient_value = elastic_net_regularization(weights, alpha, l1_ratio, gradient=True)\n\nprint(\"Penalty Value:\", penalty_value)\nprint(\"Gradient Value:\", gradient_value)\n```\n\nThis script defines a function `elastic_net_regularization` that computes the Elastic-Net penalty or its gradient depending on the value of the `gradient` argument. The function accepts a weight vector `w`, a regularisation strength `alpha`, an L1 ratio `l1_ratio`, and a Boolean flag `gradient`. It returns the scalar penalty value rounded to 4 decimals if `gradient` is `False`, or the gradient as a Python list rounded element-wise to 4 decimals if `gradient` is `True`."}
{"task_id": 256, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in [\"X\", \"y\"]:\n        return None\n\n    real_param_name = param_name.lower() if param_name in [\"Ba\", \"Bx\"] else param_name\n    param = model.parameters[real_param_name]\n    grads = np.zeros_like(param, dtype=np.float64)\n\n    for idx, _ in np.ndenumerate(param):\n        param_plus = deepcopy(param)\n        param_minus = deepcopy(param)\n        param_plus[idx] += epsilon\n        param_minus[idx] -= epsilon\n\n        model.parameters[real_param_name] = param_plus\n        loss_plus = 0\n        for t in range(n_t):\n            model.flush_gradients()\n            loss_plus += loss_func([model.forward(X[:, :, t])])\n\n        model.parameters[real_param_name] = param_minus\n        loss_minus = 0\n        for t in range(n_t):\n            model.flush_gradients()\n            loss_minus += loss_func([model.forward(X[:, :, t])])\n\n        grads[idx] = (loss_plus - loss_minus) / (2 * epsilon)\n\n    model.parameters[real_param_name] = param  # Restore original parameter\n    return grads.T\n\n# Example usage:\n# Assuming we have a model, a loss function, and input data X\n# numerical_grad = grad_check_RNN(model, loss_func, \"Wx\", n_t, X, epsilon=1e-7)\n```"}
{"task_id": 257, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef decision_stump(X, y, weights):\n    \"\"\"Build a decision stump by minimizing weighted classification error.\"\"\"\n    m, n = X.shape\n    min_error = float('inf')\n    best_theta = 0\n    best_feature = 0\n    best_polarity = 1\n    \n    for feature in range(n):\n        thresholds = np.unique(X[:, feature])\n        for threshold in thresholds:\n            for polarity in [-1, 1]:\n                prediction = np.ones_like(y)\n                prediction[X[:, feature] < polarity * threshold] = -1\n                error = np.sum(weights[y != prediction])\n                if error < min_error:\n                    min_error = error\n                    best_theta = threshold\n                    best_feature = feature\n                    best_polarity = polarity\n    \n    def stump_predict(x):\n        return np.where(x[:, best_feature] < best_polarity * best_theta, -1, 1)\n    \n    return stump_predict, min_error\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    m, _ = X_train.shape\n    n_clf = max(1, n_clf)\n    weights = np.full(m, 1 / m)\n    classifiers = []\n    alphas = []\n    \n    for _ in range(n_clf):\n        stump, error = decision_stump(X_train, y_train, weights)\n        alpha = 0.5 * np.log((1 - error) / error)\n        classifiers.append(stump)\n        alphas.append(alpha)\n        prediction = stump(X_train)\n        weights *= np.exp(-alpha * y_train * prediction)\n        weights /= np.sum(weights)\n    \n    predictions = np.zeros(len(X_test))\n    for alpha, clf in zip(alphas, classifiers):\n        predictions += alpha * clf(X_test)\n    \n    return list(np.sign(predictions))\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([1, 1, -1, -1])\n# X_test = np.array([[1.5, 2.5], [3.5, 4.5]])\n# predictions = adaboost_predict(X_train, y_train, X_test, n_clf=3)\n# print(predictions)  # Output will be a list of -1 or 1\n```"}
{"task_id": 261, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError(\"Shape must have at least two dimensions.\")\n    \n    fan_in = shape[1]\n    fan_out = shape[0]\n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n    \n    std = np.sqrt(2 / (fan_in + fan_out))\n    \n    with np.random.default_rng() as rng:\n        return rng.normal(loc=0, scale=std, size=shape)\n\n# Example usage and a simple check\nshape = (3, 4, 5)\ntensor = glorot_normal(shape)\nprint(\"Generated tensor:\", tensor)\nprint(\"Mean:\", np.mean(tensor))\nprint(\"Standard Deviation:\", np.std(tensor))\n```\n\nThis script defines a function `glorot_normal` that generates a tensor with the specified shape using the Glorot/Xavier normal initialisation method. It calculates the `fan_in` and `fan_out` values correctly based on the shape of the tensor, computes the standard deviation, and then samples from a normal distribution with mean 0 and the calculated standard deviation. The example usage at the end demonstrates how to use the function and checks the mean and standard deviation of the generated tensor."}
{"task_id": 266, "completion_id": 0, "completion": "```python\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\"\"\"\n    # Initialize adjacency list with empty lists for each vertex\n    adj_list = [[] for _ in V]\n    \n    # Create a dictionary to map vertex to its index in V for quick lookup\n    vertex_indices = {vertex: index for index, vertex in enumerate(V)}\n    \n    # Populate the adjacency list\n    for u, v in E:\n        # Add v to u's adjacency list if not already present\n        if vertex_indices[v] not in [vertex_indices[neighbor] for neighbor in adj_list[vertex_indices[u]]]:\n            adj_list[vertex_indices[u]].append(v)\n        # Add u to v's adjacency list if not already present\n        if vertex_indices[u] not in [vertex_indices[neighbor] for neighbor in adj_list[vertex_indices[v]]]:\n            adj_list[vertex_indices[v]].append(u)\n    \n    # Sort each adjacency list according to the order of appearance in V\n    for i in range(len(adj_list)):\n        adj_list[i] = sorted(adj_list[i], key=lambda vertex: vertex_indices[vertex])\n    \n    return adj_list\n\n# Example usage\nV = [1, 2, 3, 4]\nE = [(1, 2), (2, 3), (3, 4), (4, 1), (1, 3)]\nprint(build_adj_list(V, E))\n# Expected output: [[2, 3, 4], [1, 3], [1, 2, 4], [1, 3]]\n```\n\nThis solution defines the `build_adj_list` function that takes a list of vertices and a list of edges to construct an adjacency list for an undirected graph, following the constraints and requirements provided."}
{"task_id": 267, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_stump = {\"feature_index\": -1, \"threshold\": 0, \"polarity\": 1, \"weighted_error\": float('inf')}\n    \n    for feature_index in range(n_features):\n        # Sort the feature values and corresponding labels and weights\n        sorted_indices = np.argsort(X[:, feature_index])\n        sorted_X = X[sorted_indices, feature_index]\n        sorted_y = y[sorted_indices]\n        sorted_weights = sample_weights[sorted_indices]\n        \n        # Consider each unique feature value as a candidate threshold\n        unique_values = np.unique(sorted_X)\n        for i in range(len(unique_values) - 1):\n            threshold = (unique_values[i] + unique_values[i + 1]) / 2\n            for polarity in [1, -1]:\n                # Predictions based on the current threshold and polarity\n                predictions = np.where(X[:, feature_index] < threshold, 1 * polarity, -1 * polarity)\n                error = np.sum(sample_weights * (predictions != y))\n                \n                # Update the best stump if the current one is better\n                if error < best_stump[\"weighted_error\"]:\n                    best_stump = {\n                        \"feature_index\": feature_index,\n                        \"threshold\": round(threshold, 4),\n                        \"polarity\": polarity,\n                        \"weighted_error\": round(error, 4)\n                    }\n    \n    return best_stump\n\n# Example usage\nif __name__ == \"__main__\":\n    X = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n    y = np.array([-1, 1, 1, -1])\n    sample_weights = np.array([0.25, 0.25, 0.25, 0.25])\n    \n    result = train_decision_stump(X, y, sample_weights)\n    print(result)\n```\n\nThis script defines the `train_decision_stump` function as requested and includes an example usage at the bottom. The function iterates over each feature and each unique value of that feature to consider as a potential threshold. It also considers both polarities (1 and -1) to find the stump with the minimum weighted error."}
{"task_id": 273, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(class_labels):\n    \"\"\"Calculate the Shannon entropy of a list of class labels.\"\"\"\n    counts = Counter(class_labels)\n    total = len(class_labels)\n    return -sum((count / total) * math.log2(count / total) for count in counts.values())\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    feature = np.array(feature)\n    target = np.array(target)\n    \n    # Sort feature and target by feature values\n    sorted_indices = np.argsort(feature)\n    feature_sorted = feature[sorted_indices]\n    target_sorted = target[sorted_indices]\n    \n    # Find unique, sorted feature values and their indices\n    unique_features, unique_indices = np.unique(feature_sorted, return_index=True)\n    \n    # If all feature values are the same, return None, 0.0\n    if len(unique_features) == 1:\n        return (None, 0.0)\n    \n    # Calculate initial entropy\n    initial_entropy = entropy(target_sorted)\n    \n    best_threshold = None\n    best_ig = 0.0\n    \n    # Iterate over unique feature values to find candidate thresholds\n    for i in range(len(unique_features) - 1):\n        # Calculate threshold\n        threshold = (unique_features[i] + unique_features[i + 1]) / 2\n        \n        # Split data based on threshold\n        left_mask = feature_sorted < threshold\n        right_mask = feature_sorted >= threshold\n        \n        # Calculate entropy for left and right subsets\n        left_entropy = entropy(target_sorted[left_mask])\n        right_entropy = entropy(target_sorted[right_mask])\n        \n        # Calculate information gain\n        ig = initial_entropy - (left_mask.sum() / len(feature_sorted)) * left_entropy - (right_mask.sum() / len(feature_sorted)) * right_entropy\n        \n        # Update best threshold and information gain if current is better\n        if ig > best_ig:\n            best_ig = ig\n            best_threshold = threshold\n    \n    # If no positive information gain, return None, 0.0\n    if best_ig <= 0.0:\n        return (None, 0.0)\n    \n    return (round(best_threshold, 4), round(best_ig, 4))\n\n# Example usage\nfeature = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntarget = [0, 0, 0, 0, 1, 1, 1, 1, 1, 1]\nprint(best_split(feature, target))\n```\n\nThis script defines a function `best_split` that calculates the best numerical threshold for a decision tree split based on information gain. It includes an example usage at the end."}
{"task_id": 286, "completion_id": 0, "completion": "```python\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    return [[0.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    return [[1.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    return [[random.uniform(low, high) for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError(\"Invalid initialization function.\")\n\n# Example usage:\nname = \"ones_init\"\nshape = (2, 2)\n\ninit_fn = get_initializer(name)      # returns the function ones_init\noutput  = init_fn(shape)             # [[1.0, 1.0], [1.0, 1.0]]\n\nprint(output)\n```"}
{"task_id": 287, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n    \n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n    H_out = (H - p_h) // s_h + 1\n    W_out = (W - p_w) // s_w + 1\n    \n    # Initialize output and gradient input\n    output = np.zeros((N, C, H_out, W_out))\n    grad_input = np.zeros_like(X)\n    \n    # Forward pass\n    for n in range(N):\n        for c in range(C):\n            for i in range(H_out):\n                for j in range(W_out):\n                    h_start, h_end = i * s_h, i * s_h + p_h\n                    w_start, w_end = j * s_w, j * s_w + p_w\n                    window = X[n, c, h_start:h_end, w_start:w_end]\n                    output[n, c, i, j] = np.mean(window)\n    \n    # Backward pass\n    for n in range(N):\n        for c in range(C):\n            for i in range(H_out):\n                for j in range(W_out):\n                    h_start, h_end = i * s_h, i * s_h + p_h\n                    w_start, w_end = j * s_w, j * s_w + p_w\n                    window_grad = accum_grad[n, c, i, j]\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += window_grad / (p_h * p_w)\n    \n    output = np.round(output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n    \n    return output, grad_input\n\n# Example usage\nif __name__ == \"__main__\":\n    X = np.random.rand(2, 3, 4, 4)\n    pool_shape = (2, 2)\n    stride = (2, 2)\n    accum_grad = np.random.rand(2, 3, 2, 2)\n    output, grad_input = average_pool2d(X, pool_shape, stride, accum_grad)\n    print(\"Pooled Output:\", output)\n    print(\"Gradient Input:\", grad_input)\n```\n\nThis script defines a function `average_pool2d` that performs both the forward and backward passes of a 2-D average pooling layer. It takes as input the 4-D array `X` representing the input feature maps, the pooling window size `pool_shape`, the stride `stride`, and the accumulated gradient `accum_grad`. The function returns a tuple containing the pooled output and the gradient propagated back to the input, both rounded and converted to Python lists as required."}
{"task_id": 290, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        return (tree_a.feature == tree_b.feature and\n                np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-8) and\n                compare_trees(tree_a.left, tree_b.left) and\n                compare_trees(tree_a.right, tree_b.right))\n    else:\n        return False\n\n# Example usage:\n# tree_a = Node(feature=0, threshold=0.5, left=Leaf(value=1), right=Leaf(value=0))\n# tree_b = Node(feature=0, threshold=0.5, left=Leaf(value=1), right=Leaf(value=0))\n# print(compare_trees(tree_a, tree_b))  # Should return True\n```"}
{"task_id": 292, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                           parent2: list[list[int | float]],\n                           cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    # Convert the parents to numpy arrays for easier slicing\n    parent1_np = np.array(parent1)\n    parent2_np = np.array(parent2)\n    \n    # Validate that the two parent matrices have the same shape\n    if parent1_np.shape != parent2_np.shape:\n        return -1\n    \n    # Create two new children matrices\n    child1 = parent1_np.copy()\n    child2 = parent2_np.copy()\n    \n    # Perform crossover\n    if cutoff > 0:\n        child1[:, cutoff:] = parent2_np[:, cutoff:]\n        child2[:, cutoff:] = parent1_np[:, cutoff:]\n    \n    # Convert back to Python lists and return\n    return (child1.tolist(), child2.tolist())\n\n# Example usage\nparent1 = [[1, 2, 3], [4, 5, 6]]\nparent2 = [[7, 8, 9], [10, 11, 12]]\ncutoff = 1\nchildren = single_point_crossover(parent1, parent2, cutoff)\nprint(children)\n```\n\nThis script defines the `single_point_crossover` function that performs the specified crossover operation on two neural network weight matrices. It checks for the same shape, performs the crossover, and returns the offspring as Python lists."}
{"task_id": 294, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {label: [] for label in G['_V2I']}\n    for i, edges in enumerate(G['_G']):\n        for edge in edges:\n            u, v, w = edge\n            adj[u].append((v, w))\n            if not G['is_directed']:\n                adj[v].append((u, w))\n    \n    # Sort the neighbour lists alphabetically\n    for label in adj:\n        adj[label].sort(key=lambda x: x[0])\n    \n    return adj\n\n# Example usage\nG = {\n    'is_directed': False,\n    '_V2I': {'A': 0, 'B': 1, 'C': 2},\n    '_G': [\n        [('A', 'B', 1.0), ('A', 'C', 2.0)],  # Edges from 'A'\n        [('B', 'A', 1.0), ('B', 'C', 3.0)],  # Edges from 'B'\n        [('C', 'A', 2.0), ('C', 'B', 3.0)]   # Edges from 'C'\n    ]\n}\n\nprint(to_networkx(G))\n```\n\nThis script defines the `to_networkx` function that takes a graph `G` in the specified format and returns an adjacency dictionary. The function ensures that for undirected graphs, each edge appears in both directions and sorts the neighbours alphabetically."}
{"task_id": 296, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    # Convert input to NumPy array to ensure consistency\n    x = np.asarray(x)\n    # Check if all elements are either 0 or 1\n    return np.all(np.logical_or(x == 0, x == 1))\n\n# Test cases to verify the correctness of the function\nprint(is_binary(np.array([0, 1, 1, 0])))  # True\nprint(is_binary(np.array([0, 1, 2, 0])))  # False\nprint(is_binary(np.array([1.0, 0.0, 1.0])))  # True\nprint(is_binary(np.array([True, False, True])))  # True\nprint(is_binary(np.array([0, 1, 0, 2])))  # False\n```"}
{"task_id": 298, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    # Tokenize the corpus and pad sentences for N > 1\n    padded_corpus = []\n    for sentence in corpus:\n        tokens = sentence.split()\n        if N > 1:\n            tokens = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        padded_corpus.append(tokens)\n\n    # Count N-grams and (N-1)-grams\n    ngram_counts = Counter()\n    prefix_counts = Counter()\n    for sentence in padded_corpus:\n        for i in range(len(sentence) - N + 1):\n            ngram = tuple(sentence[i:i+N])\n            prefix = tuple(sentence[i:i+N-1])\n            ngram_counts[ngram] += 1\n            prefix_counts[prefix] += 1\n\n    # Tokenize the query and pad it\n    query_tokens = query.split()\n    if N > 1:\n        query_tokens = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n\n    # Compute the log-probability of the query\n    log_prob = 0.0\n    for i in range(len(query_tokens) - N + 1):\n        ngram = tuple(query_tokens[i:i+N])\n        prefix = tuple(query_tokens[i:i+N-1])\n        if ngram not in ngram_counts or prefix not in prefix_counts:\n            return float('-inf')\n        ngram_count = ngram_counts[ngram]\n        prefix_count = prefix_counts[prefix]\n        prob = ngram_count / prefix_count\n        log_prob += math.log(prob)\n\n    return round(log_prob, 4)\n\n\n# Example usage\ncorpus = [\"a b a\", \"b a b\"]\nquery = \"a b\"\nN = 1\nprint(ngram_log_prob(corpus, query, N))  # Output: -1.3863\n```\n```"}
{"task_id": 302, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n_samples, _ = X.shape\n    \n    # Step 1: Build the weighted adjacency matrix W\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i + 1, n_samples):\n            distance = np.linalg.norm(X[i] - X[j])\n            W[i, j] = W[j, i] = 1 / (1 + distance)\n    \n    # Step 2: Compute the graph Laplacian L = D - W\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    \n    # Step 3: Obtain the first k eigenvectors of L\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    \n    # Step 4: Run k-means on the rows of E\n    centroids = E[:k].copy()\n    labels = np.zeros(n_samples, dtype=int)\n    for _ in range(100):\n        # Assign each sample to the nearest centroid\n        distances = np.linalg.norm(E[:, np.newaxis] - centroids, axis=2)\n        new_labels = np.argmin(distances, axis=1)\n        \n        if np.array_equal(labels, new_labels):\n            break\n        \n        labels = new_labels\n        for i in range(k):\n            cluster_points = E[labels == i]\n            if len(cluster_points) > 0:\n                centroids[i] = np.mean(cluster_points, axis=0)\n            else:\n                # Reinitialize the centroid if the cluster is empty\n                centroids[i] = E[np.random.choice(n_samples)]\n    \n    return labels.tolist()\n\n# Example usage:\n# X = np.random.rand(100, 2)  # 100 samples in 2D\n# k = 3\n# labels = spectral_clustering(X, k)\n# print(labels)\n```"}
{"task_id": 303, "completion_id": 0, "completion": "```python\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_mine, prev_label = params[prev_ix]\n    curr_mine, curr_label = params[ix]\n\n    return f\"\"\"------------------------- DEBUG -------------------------\nMine (prev) [{prev_label}]:\n{prev_mine}\n\nTheirs (prev) [{prev_label}]:\n{golds[prev_label]}\n\nMine [{curr_label}]:\n{curr_mine}\n\nTheirs [{curr_label}]:\n{golds[curr_label]}{warn_str}\n----------------------- END DEBUG -----------------------\"\"\"\n\n# Example usage\nparams = [(\"output1\", \"label1\"), (\"output2\", \"label2\"), (\"output3\", \"label3\")]\ngolds = {\"label1\": \"gold1\", \"label2\": \"gold2\", \"label3\": \"gold3\"}\nix = 2\nwarn_str = \"\\nWarning: This is a test warning.\"\n\nprint(err_fmt(params, golds, ix, warn_str))\n```\nThis script defines the `err_fmt` function as specified, which formats the debugging string according to the layout described. The example usage at the end demonstrates how to call the function with a list of parameters, a dictionary of gold-standard outputs, an index, and an optional warning string."}
{"task_id": 304, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.column_stack((np.ones(X.shape[0]), X))\n    \n    N, M = X.shape\n    \n    if np.isscalar(mu):\n        mu = np.full(M, mu)\n    \n    if V is None:\n        V_inv = np.eye(M)\n    elif np.isscalar(V):\n        V_inv = np.eye(M) / V\n    elif isinstance(V, (list, tuple)):\n        V_inv = np.diag(1 / np.array(V))\n    else:\n        V_inv = np.linalg.inv(V)\n    \n    Sigma_b_inv = V_inv + X.T @ X\n    Sigma_b = np.linalg.inv(Sigma_b_inv)\n    \n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    \n    return [round(x, 4) for x in mu_b]\n\n# Example usage:\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([1, 2, 3])\nalpha = 1.0\nbeta = 1.0\nmu = 0.0\nV = 1.0\nfit_intercept = True\n\nprint(bayesian_posterior_mean(X, y, alpha, beta, mu, V, fit_intercept))\n```\n\nThis code snippet defines a function `bayesian_posterior_mean` that computes the posterior mean of the coefficients in Bayesian linear regression with an unknown noise variance. The function takes into account the specified prior parameters and the option to fit an intercept. It returns the coefficients rounded to 4 decimal places as a list of floats."}
{"task_id": 308, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs / 2\n\n    def hz_to_mel(f):\n        return 2595 * np.log10(1 + f / 700)\n\n    def mel_to_hz(mel):\n        return 700 * (10**(mel / 2595) - 1)\n\n    # Convert frequency limits to Mel scale\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n\n    # Generate Mel values and convert back to Hz\n    mel_points = np.linspace(min_mel, max_mel, n_filters + 2)\n    hz_points = mel_to_hz(mel_points)\n\n    # Calculate the center frequencies for the DFT bins\n    bin_frequencies = np.linspace(0, fs / 2, N // 2 + 1)\n\n    # Create the filterbank matrix\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n    for i in range(n_filters):\n        # Find the indices of the bins where the filter starts and ends\n        left_hz, center_hz, right_hz = hz_points[i], hz_points[i + 1], hz_points[i + 2]\n        left_bin = np.argmin(np.abs(bin_frequencies - left_hz))\n        right_bin = np.argmin(np.abs(bin_frequencies - right_hz))\n\n        # Calculate the slopes of the triangle\n        for k in range(left_bin, right_bin + 1):\n            if bin_frequencies[k] <= center_hz:\n                filterbank[i, k] = (bin_frequencies[k] - left_hz) / (center_hz - left_hz)\n            else:\n                filterbank[i, k] = (right_hz - bin_frequencies[k]) / (right_hz - center_hz)\n\n    # Normalize the filterbank if required\n    if normalize:\n        for i in range(n_filters):\n            filterbank[i] *= 2 / (hz_points[i + 2] - hz_points[i])\n\n    # Convert to list and round to 4 decimal places\n    filterbank_list = [list(map(lambda x: round(x, 4), row)) for row in filterbank]\n\n    return filterbank_list\n```"}
{"task_id": 312, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    \n    N = window_len - 1 if symmetric else window_len\n    n = np.arange(window_len)\n    a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n    \n    bh_window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    \n    if not symmetric:\n        bh_window = bh_window[:-1]\n    \n    return [round(x, 4) for x in bh_window]\n\n# Example usage\nprint(blackman_harris(5, symmetric=True))\nprint(blackman_harris(5, symmetric=False))\n```\n\nThis Python script provides a function `blackman_harris` that generates a Blackman\u2013Harris window of a specified length and type (symmetric or periodic). The function adheres to the requirements of returning a list of floats rounded to four decimal places, and handles special cases as specified."}
{"task_id": 313, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef digamma(x):\n    \"\"\"Approximate the digamma function using recursion and asymptotic expansion.\"\"\"\n    # Recursion to shift small x to a moderate value\n    if x < 6:\n        return digamma(x + 1) - 1 / x\n    # Asymptotic expansion for large x\n    return math.log(x) - 0.5 / x - 1 / (12 * x**2) + 1 / (120 * x**4) - 1 / (252 * x**6)\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    # Convert gamma to a numpy array if it is a list\n    gamma = np.array(gamma)\n    \n    # Extract the row and compute the sum of its elements\n    gamma_d = gamma[d, :]\n    gamma_d_sum = np.sum(gamma_d)\n    \n    # Compute the digamma values\n    digamma_gamma_dt = digamma(gamma_d[t])\n    digamma_gamma_d_sum = digamma(gamma_d_sum)\n    \n    # Compute the expectation of log X_t\n    expectation = digamma_gamma_dt - digamma_gamma_d_sum\n    \n    # Round the result to four decimal places\n    return round(expectation, 4)\n\n# Example usage\ngamma = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]\nd = 1\nt = 2\nprint(expected_log_dirichlet(gamma, d, t))\n```\n\nThis script includes the `digamma` function to approximate the digamma function using the specified recursion and asymptotic expansion. The `expected_log_dirichlet` function computes the expectation of the logarithm of the t-th component of the Dirichlet distribution for the d-th row of the gamma matrix, and rounds the result to four decimal places."}
{"task_id": 317, "completion_id": 0, "completion": "```python\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    header = \"-\" * 25 + \" DEBUG \" + \"-\" * 25 + \"\\n\"\n    footer = \"\\n\" + \"-\" * 23 + \" END DEBUG \" + \"-\" * 23\n    \n    prev_ix = max(0, ix - 1)\n    prev_prediction, prev_label = params[prev_ix]\n    curr_prediction, curr_label = params[ix]\n    \n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    \n    report = (header +\n              f\"Mine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\n\" +\n              f\"Theirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\n\\n\" +\n              f\"Mine [{curr_label}]:\\n{curr_prediction}\\n\\n\" +\n              f\"Theirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n\" +\n              footer)\n    \n    return report\n\n# Example usage\nparams = [(\"Prediction 1\", \"label1\"), (\"Prediction 2\", \"label2\"), (\"Prediction 3\", \"label3\")]\ngolds = {\"label1\": \"Gold 1\", \"label2\": \"Gold 2\", \"label3\": \"Gold 3\"}\nix = 1\nwarn_str = \" (WARNING: mismatch)\"\n\nprint(err_fmt(params, golds, ix, warn_str))\n```\n\nThis script defines the `err_fmt` function as per the task description and provides an example usage of the function. The output of the function is a string formatted according to the specified guidelines, which includes the optional warning message if provided."}
{"task_id": 318, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    weights = np.full(n_samples, 1/n_samples)\n    estimators = []\n    estimator_weights = []\n\n    for _ in range(n_estimators):\n        best_error = float('inf')\n        best_polarity, best_threshold, best_feature = None, None, None\n        best_predictions = None\n\n        for feature in range(n_features):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = polarity * np.sign(X_train[:, feature] - threshold)\n                    error = np.sum(weights * (predictions != y_train))\n                    if error < best_error:\n                        best_error = error\n                        best_polarity = polarity\n                        best_threshold = threshold\n                        best_feature = feature\n                        best_predictions = predictions\n\n        alpha = 0.5 * math.log((1 - best_error) / best_error)\n        weights *= np.exp(-alpha * y_train * best_predictions)\n        weights /= np.sum(weights)\n\n        estimators.append((best_feature, best_threshold, best_polarity))\n        estimator_weights.append(alpha)\n\n    def predict_sample(sample):\n        return sum(alpha * (polarity * np.sign(sample[feature] - threshold))\n                   for (feature, threshold, polarity), alpha in zip(estimators, estimator_weights))\n\n    predictions = [np.sign(predict_sample(sample)) for sample in X_test]\n    return [int(p) for p in predictions]\n```"}
{"task_id": 329, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    \n    freqs = np.fft.fftfreq(N, d=1/fs)\n    if positive_only:\n        freqs = freqs[:np.ceil(N/2).astype(int)]\n    return [round(freq, 4) for freq in freqs.tolist()]\n\n# Example usage:\nprint(dft_bins(8, fs=100, positive_only=True))  # [0.0, 12.5, 25.0, 37.5]\nprint(dft_bins(8, fs=100, positive_only=False)) # [0.0, 12.5, 25.0, 37.5, -50.0, -37.5, -25.0, -12.5]\n```"}
{"task_id": 331, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n\n    # Initialize the squared errors list\n    squared_errors = []\n\n    # Iterate over each sample\n    for i in range(len(y_true)):\n        # Get the OOB predictions for the current sample\n        oob_preds = predictions[i][oob_mask[i] == 1]\n        # If there are OOB predictions, compute the average and the squared error\n        if oob_preds.size > 0:\n            oob_avg = np.mean(oob_preds)\n            squared_error = (oob_avg - y_true[i]) ** 2\n            squared_errors.append(squared_error)\n    \n    # If there are no OOB predictions at all, return -1\n    if not squared_errors:\n        return -1\n    \n    # Compute the mean of the squared errors\n    mse = np.mean(squared_errors)\n    \n    # Return the MSE rounded to 4 decimal places\n    return round(mse, 4)\n\n# Example usage:\ny_true = np.array([1, 2, 3, 4, 5])\npredictions = np.array([\n    [1.1, 1.2, 0.9],\n    [1.9, 2.1, 2.2],\n    [2.8, 3.1, 3.2],\n    [3.9, 4.1, 4.2],\n    [4.8, 5.1, 5.2]\n])\noob_mask = np.array([\n    [1, 0, 1],\n    [0, 1, 1],\n    [1, 1, 0],\n    [0, 1, 1],\n    [1, 0, 1]\n])\n\n# Call the function with the example data\nprint(oob_mse(y_true, predictions, oob_mask))\n```"}
{"task_id": 332, "completion_id": 0, "completion": "```python\nfrom collections import Counter\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    # Step 1: Compute the support for every item\n    item_counts = Counter(item for transaction in transactions for item in set(transaction))\n    \n    # Step 2: Discard items whose support is smaller than min_support\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_support}\n    \n    # Step 3: Create a global ordering of the remaining items\n    frequent_items = sorted(frequent_items.items(), key=lambda x: (-x[1], x[0]))\n    item_order = {item: idx for idx, (item, _) in enumerate(frequent_items)}\n    \n    # Initialize the root of the FP-Tree\n    root = {\"support\": 0, \"children\": {}}\n    \n    # Step 4: For every transaction\n    for transaction in transactions:\n        # Remove duplicates and keep only frequent items\n        frequent_transaction = sorted({item for item in transaction if item in item_order}, key=lambda x: item_order[x])\n        \n        # Walk from the root and update/extend the path\n        current_node = root\n        for item in frequent_transaction:\n            if item not in current_node[\"children\"]:\n                current_node[\"children\"][item] = {\"support\": 0, \"children\": {}}\n            current_node = current_node[\"children\"][item]\n            current_node[\"support\"] += 1\n    \n    return root\n\n# Example usage\ntransactions = [\n    [\"a\", \"b\", \"c\", \"d\"],\n    [\"b\", \"c\", \"e\"],\n    [\"a\", \"b\", \"c\", \"e\"],\n    [\"a\", \"b\", \"d\", \"e\"],\n    [\"a\", \"b\", \"c\", \"d\"]\n]\nmin_support = 2\nfp_tree = build_fp_tree(transactions, min_support)\nprint(fp_tree)\n```\n\nThis script defines a function `build_fp_tree` that constructs an FP-Tree from a list of transactions and a minimum support threshold, following the rules specified in the task. The final tree is printed out as a nested dictionary."}
{"task_id": 336, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", Y: list[list[int | float]] | \"np.ndarray\" | None = None, c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n\n    # Check if the number of columns in X and Y are the same\n    if X.shape[1] != Y.shape[1]:\n        return -1\n\n    # Compute the kernel matrix\n    K = np.dot(X, Y.T) + c0\n\n    # Round the kernel matrix to 4 decimal places\n    K_rounded = np.round(K, decimals=4)\n\n    # Convert the kernel matrix back to a list of lists\n    return K_rounded.tolist()\n\n# Example usage:\nX = [[1, 2], [3, 4]]\nY = [[5, 6], [7, 8]]\nc0 = 1\nprint(linear_kernel(X, Y, c0))\n```\n\nThis code snippet defines the `linear_kernel` function as specified in the task description. It uses NumPy for efficient matrix operations and handles both Python lists and NumPy arrays as inputs. The function checks for compatibility between the dimensions of `X` and `Y`, computes the kernel matrix, rounds the results to 4 decimal places, and returns the kernel matrix as a list of lists."}
{"task_id": 340, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n\n    # Update biased first and second moment estimates\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * (grad ** 2)\n\n    # Compute bias-corrected moment estimates\n    m_t_hat = m_t / (1 - beta1 ** t)\n    v_t_hat = v_t / (1 - beta2 ** t)\n\n    # Update the parameter\n    param_t = param - lr * m_t_hat / (np.sqrt(v_t_hat) + eps)\n\n    # Convert to lists and round to 8 decimal places\n    updated_param = np.round(param_t.flatten(), 8).tolist()\n    new_m = np.round(m_t.flatten(), 8).tolist()\n    new_v = np.round(v_t.flatten(), 8).tolist()\n\n    return updated_param, new_m, new_v\n\n# Example usage:\nparam = np.array([1.0, 2.0])\ngrad = np.array([0.1, 0.2])\nm = np.array([0.0, 0.0])\nv = np.array([0.0, 0.0])\nt = 1\n\nupdated_param, new_m, new_v = adam_update(param, grad, t, m, v)\nprint(updated_param, new_m, new_v)\n```\n\nThis script defines a function `adam_update` that performs a single step of the Adam optimisation algorithm. It takes the current parameter values, gradients, time-step, and moment estimates as inputs, and returns the updated parameter and moment estimates as lists, each rounded to 8 decimal places. The example usage at the end demonstrates how to call this function with a simple set of parameters."}
{"task_id": 343, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                         rewards: list[float] | np.ndarray,\n                         retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # Calculate the number of samples to retain\n    num_retain = int(retain_prcnt * len(rewards))\n    \n    # Sort the rewards and get the indices of the top rewards\n    top_indices = np.argsort(rewards)[-num_retain:]\n    \n    # Select the corresponding theta samples\n    elite_samples = theta_samples[top_indices]\n    \n    # Calculate the mean and variance of the elite samples\n    mean = np.mean(elite_samples, axis=0).tolist()\n    variance = np.var(elite_samples, axis=0).tolist()\n    \n    # Round the results to four decimal places\n    mean_rounded = [round(x, 4) for x in mean]\n    variance_rounded = [round(x, 4) for x in variance]\n    \n    return mean_rounded, variance_rounded\n\n# Example usage\nif __name__ == \"__main__\":\n    theta_samples = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\n    rewards = [10, 20, 30, 40]\n    retain_prcnt = 0.5\n    mean, variance = cross_entropy_update(theta_samples, rewards, retain_prcnt)\n    print(\"Mean:\", mean)\n    print(\"Variance:\", variance)\n```"}
{"task_id": 353, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    # Count the occurrences of each label\n    label_counts = Counter(labels)\n    \n    # Calculate the total number of labels\n    total_labels = sum(label_counts.values())\n    \n    # Handle the case of an empty input\n    if total_labels == 0:\n        return 0.0\n    \n    # Calculate the entropy\n    entropy_value = 0.0\n    for count in label_counts.values():\n        probability = count / total_labels\n        entropy_value -= probability * math.log2(probability)\n    \n    return round(entropy_value, 5)\n\n# Test cases to verify the correctness of the function\nprint(entropy([]))  # Expected output: 0.0\nprint(entropy([1, 1, 1, 1]))  # Expected output: 0.0\nprint(entropy([1, 2, 3, 4]))  # Expected output: 2.0\nprint(entropy([1, 2, 2, 3, 3, 3]))  # Expected output: 1.45915\n```"}
{"task_id": 354, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kernel_rows, kernel_cols, _, out_ch = W.shape\n\n    # Apply dilation\n    if dilation > 0:\n        kernel_rows = 1 + dilation * (kernel_rows - 1)\n        kernel_cols = 1 + dilation * (kernel_cols - 1)\n        W = np.pad(W, ((dilation, 0), (dilation, 0), (0, 0), (0, 0)), mode='constant')\n\n    # Compute padding\n    if pad == 'same':\n        pad_rows = (stride * (in_rows - 1) - in_rows + kernel_rows) // 2\n        pad_cols = (stride * (in_cols - 1) - in_cols + kernel_cols) // 2\n        pad = (pad_rows, pad_cols)\n    if isinstance(pad, int):\n        pad = (pad, pad)\n    if len(pad) == 2:\n        pad = (pad[0], pad[0], pad[1], pad[1])\n\n    # Apply padding\n    X = np.pad(X, ((0, 0), (pad[0], pad[1]), (pad[2], pad[3]), (0, 0)), mode='constant')\n\n    # Compute output dimensions\n    out_rows = (X.shape[1] - kernel_rows) // stride + 1\n    out_cols = (X.shape[2] - kernel_cols) // stride + 1\n\n    # Initialize output\n    out = np.zeros((n_ex, out_rows, out_cols, out_ch))\n\n    # im2col\n    cols = np.zeros((kernel_rows * kernel_cols * in_ch, out_rows * out_cols * n_ex))\n    for i in range(n_ex):\n        for r in range(out_rows):\n            for c in range(out_cols):\n                r_start, r_end = r * stride, r * stride + kernel_rows\n                c_start, c_end = c * stride, c * stride + kernel_cols\n                cols[:, r * out_cols * n_ex + c * n_ex + i] = X[i, r_start:r_end, c_start:c_end, :].ravel()\n\n    # GEMM\n    W_reshaped = W.reshape(-1, out_ch)\n    out = (W_reshaped @ cols).reshape(n_ex, out_rows, out_cols, out_ch)\n\n    return out.tolist()\n\n# Example usage\nX = np.random.rand(2, 5, 5, 3)\nW = np.random.rand(2, 2, 3, 4)\nstride = 1\npad = 'same'\ndilation = 0\n\nresult = conv2D(X, W, stride, pad, dilation)\nprint(result)\n```\n\nThis code defines a function `conv2D` that performs a 2-D convolution using the im2col + GEMM strategy. The function handles padding, dilation, and stride as specified, and returns the result as a Python list. The example usage demonstrates how to call the function with a random input batch `X` and a random bank of kernels `W`."}
{"task_id": 355, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # Step 1: Standardize the data\n    centered_data = data - np.mean(data, axis=0)\n    \n    # Step 2: Obtain the principal directions\n    if solver == \"svd\":\n        _, _, Vt = np.linalg.svd(centered_data, full_matrices=False)\n        directions = Vt\n    elif solver == \"eigen\":\n        cov_matrix = np.cov(centered_data, rowvar=False, ddof=1)\n        eigenvalues, directions = np.linalg.eigh(cov_matrix)\n        sorted_indices = np.argsort(eigenvalues)[::-1]\n        directions = directions[:, sorted_indices]\n    else:\n        raise ValueError(\"Invalid solver. Choose 'svd' or 'eigen'.\")\n    \n    # Step 3: Sort and keep the first n_components\n    if n_components > data.shape[1]:\n        n_components = data.shape[1]\n    directions = directions[:n_components]\n    \n    # Step 4: Make the sign of every kept direction deterministic\n    for i in range(directions.shape[0]):\n        if directions[i, 0] < 0:\n            directions[i] *= -1\n    \n    # Step 5: Project the centred data onto the retained directions\n    scores = np.dot(centered_data, directions.T)\n    \n    # Step 6: Calculate explained variance ratio\n    if solver == \"svd\":\n        explained_variance = np.sum(centered_data**2, axis=0) / centered_data.shape[0]\n        total_variance = np.sum(explained_variance)\n    elif solver == \"eigen\":\n        explained_variance = eigenvalues[:n_components]\n        total_variance = np.sum(eigenvalues)\n    explained_variance_ratio = (explained_variance / total_variance).round(4)\n    \n    # Return the results\n    return (np.round(scores, 4).tolist(), explained_variance_ratio.tolist())\n\n# Example usage\ndata = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nn_components = 2\nsolver = \"svd\"\nscores, explained_variance_ratio = pca_transform(data, n_components, solver)\nprint(\"Scores:\", scores)\nprint(\"Explained Variance Ratio:\", explained_variance_ratio)\n```\nThis script defines a function `pca_transform` that performs PCA with the specified parameters and returns the projected data and explained variance ratios, adhering to the constraints and requirements provided."}
{"task_id": 356, "completion_id": 0, "completion": "```python\nimport numpy as np\n\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # For classification, return the index of the maximum probability\n        return np.argmax(leaf.value)\n    else:\n        # For regression, return the scalar value\n        return leaf.value\n\n# Example usage:\n# Classification leaf\nclassification_leaf = Leaf([0.1, 0.3, 0.6])\nprint(leaf_predict(classification_leaf, True))  # Output: 2\n\n# Regression leaf\nregression_leaf = Leaf(15.5)\nprint(leaf_predict(regression_leaf, False))  # Output: 15.5\n```"}
{"task_id": 357, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = np.array(data[:K].copy())\n    for _ in range(max_iters):\n        # Assign each sample to the closest centroid\n        distances = np.sqrt(((data - centroids[:, np.newaxis])**2).sum(axis=2))\n        labels = np.argmin(distances, axis=0)\n\n        # Recompute centroids\n        new_centroids = np.array([data[labels == k].mean(axis=0) if np.any(labels == k) else centroids[k] for k in range(K)])\n\n        # Check for convergence\n        if np.all(np.abs(new_centroids - centroids) < 1e-6):\n            break\n\n        centroids = new_centroids\n\n    # Sort centroids and round to 4 decimals\n    sorted_centroids = np.sort(centroids, axis=0)\n    rounded_centroids = np.round(sorted_centroids, decimals=4)\n    return rounded_centroids.tolist()\n\n# Example usage:\ndata = np.array([[1, 1],\n                 [1, 2],\n                 [2, 1],\n                 [8, 8],\n                 [9, 8],\n                 [8, 9]])\nK = 2\nprint(kmeans(data, K))\n```\n\nThe provided function `kmeans` implements the K-Means clustering algorithm as described in the task. It takes a NumPy array `data`, an integer `K` for the number of clusters, and an optional maximum number of iterations `max_iters`. The function returns the centroids of the clusters after sorting them lexicographically and rounding each coordinate to four decimal places."}
{"task_id": 362, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | np.ndarray) -> list[list[float]] | int:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert the input to a NumPy array of floats\n    matrix = np.array(data, dtype=float)\n    \n    # Compute the sum of each row\n    row_sums = matrix.sum(axis=1)\n    \n    # Check if any row sum is 0\n    if np.any(row_sums == 0):\n        return -1\n    \n    # Normalize each row\n    row_stochastic = matrix / row_sums[:, np.newaxis]\n    \n    # Round to 4 decimal places and convert back to a Python list\n    row_stochastic_rounded = np.round(row_stochastic, decimals=4).tolist()\n    \n    return row_stochastic_rounded\n\n# Example usage:\n# data = [[1, 2, 3], [4, 5, 6], [0, 0, 0]]\n# print(row_stochastic_matrix(data))  # Should return -1\n# data = [[1, 2, 3], [4, 5, 6]]\n# print(row_stochastic_matrix(data))  # Should return the row-stochastic matrix\n```"}
{"task_id": 363, "completion_id": 0, "completion": "```python\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    def check_continuous(space: Space) -> bool:\n        if isinstance(space, Box):\n            return True\n        elif isinstance(space, (Tuple, Dict)):\n            subspaces = space.spaces.values() if isinstance(space, Dict) else space.spaces\n            return all(check_continuous(subspace) for subspace in subspaces)\n        else:\n            return False\n\n    cont_action = check_continuous(env.action_space) if tuple_action else isinstance(env.action_space, Box)\n    cont_obs = check_continuous(env.observation_space) if tuple_obs else isinstance(env.observation_space, Box)\n    \n    return cont_action, cont_obs\n\n# Example usage:\naction_space = Tuple([Box(0.0, 1.0, (1,)), Box(-1.0, 1.0, (2,))])\nobservation_space = Dict({'position': Box(-1.0, 1.0, (3,)), 'velocity': Box(-1.0, 1.0, (3,))})\nenv = Env(action_space, observation_space)\nprint(is_continuous(env, True, True))  # Expected output: (True, True)\n```"}
{"task_id": 369, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    # Initialize the running prediction\n    running_pred = np.zeros_like(updates[0])\n    \n    # Aggregate the updates\n    for update in updates:\n        running_pred -= learning_rate * update\n    \n    # Return the running prediction for regression\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        # Apply softmax to convert logits to probabilities\n        exp_pred = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        softmax_pred = exp_pred / np.sum(exp_pred, axis=1, keepdims=True)\n        \n        # Return the predicted class labels\n        return np.argmax(softmax_pred, axis=1)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Regression example\n    updates_reg = [np.array([1.0, 2.0, 3.0]), np.array([0.5, 1.5, 2.5])]\n    learning_rate = 0.1\n    regression = True\n    print(gradient_boosting_predict(updates_reg, learning_rate, regression))  # Output: [-0.15 -0.35 -0.55]\n\n    # Classification example\n    updates_clf = [np.array([[0.1, 0.2], [0.3, 0.4]]), np.array([[0.05, 0.1], [0.15, 0.2]])]\n    learning_rate = 0.1\n    regression = False\n    print(gradient_boosting_predict(updates_clf, learning_rate, regression))  # Output: [0 1]\n```"}
{"task_id": 371, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, _, out_channels = W.shape\n    \n    # Calculate effective kernel width considering dilation\n    effective_kernel_width = (W.shape[0] - 1) * dilation + 1\n    \n    # Handle padding\n    if isinstance(pad, str) and pad == \"same\":\n        out_length = int(np.ceil(signal_length / stride))\n        total_pad = max(0, (out_length - 1) * stride + effective_kernel_width - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    elif isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple):\n        p_left, p_right = pad\n    else:\n        raise ValueError(\"Invalid padding format\")\n    \n    # Pad the input signals\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n    \n    # Calculate output length\n    output_length = (signal_length + p_left + p_right - effective_kernel_width) // stride + 1\n    \n    # Initialize the output volume\n    output_volume = np.zeros((n_examples, output_length, out_channels))\n    \n    # Perform the cross-correlation\n    for i in range(n_examples):\n        for j in range(output_length):\n            for k in range(out_channels):\n                output_volume[i, j, k] = np.sum(\n                    X_padded[i, j*stride:j*stride+effective_kernel_width:dilation+1, :] * W[:, :, k]\n                )\n    \n    return output_volume.tolist()\n\n# Example usage:\nX = np.random.rand(2, 10, 3)  # 2 examples, 10 signal length, 3 input channels\nW = np.random.rand(4, 3, 2)   # 4 kernel width, 3 input channels, 2 output channels\nstride = 2\npad = \"same\"\ndilation = 1\n\noutput = conv1D(X, W, stride, pad, dilation)\nprint(output)\n```\n\nThis script defines the `conv1D` function according to the specifications provided. It supports batch processing, multi-channel inputs and outputs, different padding options, stride, and dilation. The function returns the output as a nested Python list."}
{"task_id": 373, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gini(y: list[int] | np.ndarray) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    \n    # Convert to numpy array for easier manipulation\n    y = np.array(y)\n    # Get the unique classes and their counts\n    classes, counts = np.unique(y, return_counts=True)\n    # Calculate the probabilities\n    probabilities = counts / len(y)\n    # Calculate the Gini impurity\n    gini_impurity = 1 - np.sum(probabilities ** 2)\n    return round(gini_impurity, 4)\n\n# Example usage\nprint(gini([1, 1, 2, 2, 3, 3]))  # Example input\n```\n\nThis solution defines the `gini` function as required, which calculates the Gini impurity for a given sequence of integer labels. The function handles the case of an empty input sequence by returning `0.0`, as specified. It uses NumPy for efficient computation of unique classes and their counts, and then calculates the Gini impurity according to the given formula. The result is rounded to four decimal places as required."}
{"task_id": 374, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\"\"\"\n    # Check if the number of samples in X and y are consistent\n    if X.shape[0] != y.shape[0]:\n        return -1\n    \n    m, n = X.shape\n    # Initialize parameters\n    theta = np.zeros(n)\n    b = 0.0\n    \n    for _ in range(n_iterations):\n        # Compute predictions\n        y_pred = np.dot(X, theta) + b\n        # Compute gradients\n        dw = (2/m) * np.dot(X.T, (y_pred - y))\n        db = (2/m) * np.sum(y_pred - y)\n        # Update parameters\n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    \n    # Round the parameters to 4 decimal places\n    theta_rounded = [round(t, 4) for t in theta]\n    b_rounded = round(b, 4)\n    \n    return (theta_rounded, b_rounded)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Example data\n    X = np.array([[1, 2], [3, 4], [5, 6]])\n    y = np.array([1, 2, 3])\n    # Train the model\n    weights, bias = linear_regression_gd(X, y)\n    print(\"Weights:\", weights)\n    print(\"Bias:\", bias)\n```"}
{"task_id": 376, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Convert the list of lists to a NumPy array for easier manipulation\n    X_np = np.array(X)\n    \n    # Check if the matrix is square\n    if X_np.shape[0] != X_np.shape[1]:\n        return False\n    \n    # Check if the matrix is equal to its transpose within a tolerance\n    return np.allclose(X_np, X_np.T)\n\n# Example usage:\n# print(is_symmetric([[1, 2.00000001], [2, 1]]))  # True\n# print(is_symmetric([[1, 2], [3, 4]]))  # False\n# print(is_symmetric([[1, 2], [2, 1]]))  # True\n# print(is_symmetric([[1, 2, 3], [2, 1, 4], [3, 4, 1]]))  # True\n# print(is_symmetric([[1, 2, 3], [2, 1, 4], [3, 4, 1], [5, 6, 7]]))  # False\n```"}
{"task_id": 377, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Calculate the negative gradient of the logistic loss function for binary classification.\n    \n    Parameters:\n    y (list): A list of binary class labels (0 or 1).\n    f (list): A list of current prediction scores (floats).\n    \n    Returns:\n    list: A list of negative gradients g, rounded to four decimal places.\n    \n    If the label array contains values other than 0 or 1, return -1.\n    \"\"\"\n    # Check if y contains only 0s and 1s\n    if not all(label in [0, 1] for label in y):\n        return -1\n    \n    # Convert y to {-1, 1}\n    y_prime = np.array([2*label - 1 for label in y])\n    \n    # Calculate the negative gradient\n    g = y_prime / (1 + np.exp(y_prime * np.array(f)))\n    \n    # Round to 4 decimal places and convert back to list\n    return [round(gradient, 4) for gradient in g]\n\n# Example usage\ny = [0, 1, 0, 1]\nf = [0.1, -0.1, 0.2, -0.2]\nprint(logistic_negative_gradient(y, f))\n```\n\nThis script defines the `logistic_negative_gradient` function according to the task description. It first checks if the input labels are valid (only 0 or 1). Then, it converts the labels to {-1, 1}, calculates the negative gradient of the logistic loss function, rounds the results to four decimal places, and returns them as a list. If the labels are invalid, it returns -1."}
{"task_id": 380, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    # Constants from the SELU paper\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n    \n    # Convert input to numpy array for easier manipulation\n    x = np.array(x)\n    \n    if order == 0:\n        # SELU function\n        result = np.where(x > 0, scale * x, scale * alpha * (np.exp(x) - 1))\n    elif order == 1:\n        # First derivative of SELU\n        result = np.where(x > 0, scale, scale * alpha * np.exp(x))\n    elif order == 2:\n        # Second derivative of SELU\n        result = np.where(x > 0, 0, scale * alpha * np.exp(x))\n    else:\n        raise ValueError(\"Order must be 0, 1, or 2.\")\n    \n    # Round to 4 decimals and convert to list\n    return np.round(result, 4).tolist()\n\n# Example usage:\n# Scalar input\nprint(selu(1.0))  # SELU(1.0)\nprint(selu(1.0, 1))  # d(SELU)/dx at x=1.0\nprint(selu(1.0, 2))  # d\u00b2(SELU)/dx\u00b2 at x=1.0\n\n# Array input\nprint(selu([-1.0, 0.0, 1.0]))  # SELU([-1.0, 0.0, 1.0])\nprint(selu([-1.0, 0.0, 1.0], 1))  # d(SELU)/dx at x=[-1.0, 0.0, 1.0]\nprint(selu([-1.0, 0.0, 1.0], 2))  # d\u00b2(SELU)/dx\u00b2 at x=[-1.0, 0.0, 1.0]\n```"}
{"task_id": 387, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(y)\n    predictions = np.full(n_samples, np.mean(y))\n    \n    for _ in range(n_estimators):\n        residuals = y - predictions\n        \n        if len(np.unique(x)) == 1:\n            predictions += learning_rate * np.mean(residuals)\n            continue\n        \n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        sorted_residuals = residuals[sorted_indices]\n        \n        best_split = None\n        best_error = float('inf')\n        \n        for i in range(1, n_samples):\n            if sorted_x[i] != sorted_x[i - 1]:\n                t = (sorted_x[i] + sorted_x[i - 1]) / 2\n                left_mean = np.mean(sorted_residuals[:i])\n                right_mean = np.mean(sorted_residuals[i:])\n                error = np.sum((sorted_residuals[:i] - left_mean) ** 2) + np.sum((sorted_residuals[i:] - right_mean) ** 2)\n                if error < best_error:\n                    best_error = error\n                    best_split = t\n        \n        if best_split is not None:\n            left_indices = x <= best_split\n            right_indices = x > best_split\n            left_mean = np.mean(residuals[left_indices])\n            right_mean = np.mean(residuals[right_indices])\n            stump_predictions = np.where(left_indices, left_mean, right_mean)\n            predictions += learning_rate * stump_predictions\n    \n    return np.round(predictions, 4).tolist()\n\n# Example usage:\nx = [1.0, 2.0, 3.0, 4.0, 5.0]\ny = [1.1, 2.2, 2.9, 4.1, 5.0]\nn_estimators = 100\nlearning_rate = 0.1\npredictions = gradient_boosting_1d(x, y, n_estimators, learning_rate)\nprint(predictions)\n```\n\nThis script implements a 1-D gradient boosting regressor using decision stumps as the base learners. The function `gradient_boosting_1d` takes in a list of single numeric features `x`, a list of target values `y`, the number of boosting rounds `n_estimators`, and an optional `learning_rate`. It returns the in-sample predictions as a list of floats, each rounded to four decimal places."}
{"task_id": 394, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-8\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    \n    Eg = rho * Eg + (1 - rho) * grad ** 2\n    w = w - learning_rate * grad / (np.sqrt(Eg) + epsilon)\n    \n    # Convert to Python lists and round to 4 decimal places\n    w_next = [round(x, 4) for x in w.flatten()]\n    Eg_next = [round(x, 4) for x in Eg.flatten()]\n    \n    return w_next, Eg_next\n\n# Example usage:\nw = np.array([0.5, -0.2, 0.1])\ngrad = np.array([0.01, -0.02, 0.03])\nEg = np.array([0.01, 0.02, 0.03])\n\nw_next, Eg_next = rmsprop_update(w, grad, Eg)\nprint(\"Updated parameters:\", w_next)\nprint(\"Updated running average:\", Eg_next)\n```\n\nThis script provides a complete implementation of the RMSprop update step, including the necessary initialisation, calculation, and formatting as per the task description."}
{"task_id": 398, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if not derivative:\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    else:\n        result = np.where(x >= 0, 1, alpha * np.exp(x))\n        result[x < 0] += np.where(x < 0, alpha * (np.exp(x) - 1), 0)\n    \n    return [round(float(num), 4) for num in result]\n\n# Check function to verify the correctness\ndef check_elu():\n    x = [-2.0, -1.0, 0.0, 1.0, 2.0]\n    alpha = 0.1\n    expected_activation = [-0.1813, -0.0952, 0.0, 1.0, 2.0]\n    expected_derivative = [0.1181, 0.0952, 1.0, 1.0, 1.0]\n    \n    activation = elu(x, alpha, False)\n    derivative = elu(x, alpha, True)\n    \n    assert activation == expected_activation, f\"Activation incorrect, got {activation}, expected {expected_activation}\"\n    assert derivative == expected_derivative, f\"Derivative incorrect, got {derivative}, expected {expected_derivative}\"\n    print(\"All checks pass.\")\n\ncheck_elu()\n```\n\nThis code defines the `elu` function which computes the ELU activation function or its gradient based on the input parameters. The function takes a list or NumPy array of numeric values, an `alpha` parameter, and a flag to determine if the derivative should be returned. The results are rounded to the 4th decimal place and returned as a list of floats. The `check_elu` function is used to verify the correctness of the `elu` function with predefined inputs and expected outputs."}
{"task_id": 411, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    def analyze_data(data):\n        is_tuple = any(isinstance(x, (list, tuple, np.ndarray)) for x in data)\n        is_multidim = is_tuple and len(data[0]) > 1 if is_tuple else False\n        is_continuous = any(isinstance(x, float) and not x.is_integer() for x in data)\n        data_flat = [item for sublist in data for item in (sublist if isinstance(sublist, (list, tuple, np.ndarray)) else [sublist])]\n        unique_values = np.unique(data_flat)\n        n_unique_per_dim = [len(np.unique(np.array([x[i] for x in data if isinstance(x, (list, tuple, np.ndarray))]))) for i in range(len(data[0]))] if is_multidim else [len(unique_values)]\n        dim = len(data[0]) if is_multidim else 1\n        return is_tuple, is_multidim, is_continuous, n_unique_per_dim, dim, unique_values\n\n    tuple_actions, multidim_actions, continuous_actions, n_actions_per_dim, action_dim, action_ids = analyze_data(actions)\n    tuple_observations, multidim_observations, continuous_observations, n_obs_per_dim, obs_dim, obs_ids = analyze_data(observations)\n\n    return {\n        'tuple_actions': tuple_actions,\n        'tuple_observations': tuple_observations,\n        'multidim_actions': multidim_actions,\n        'multidim_observations': multidim_observations,\n        'continuous_actions': continuous_actions,\n        'continuous_observations': continuous_observations,\n        'n_actions_per_dim': n_actions_per_dim,\n        'action_dim': action_dim,\n        'n_obs_per_dim': n_obs_per_dim,\n        'obs_dim': obs_dim,\n        'action_ids': [list(set(x)) for x in zip(*actions)] if multidim_actions else [list(set(actions))],\n        'obs_ids': [list(set(observations))]\n    }\n\n# Example usage\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]\nprint(env_stats(actions, observations))\n```\n\nThis solution provides a function `env_stats` that takes two lists as inputs and returns a dictionary with the required statistics. The function `analyze_data` is a helper that processes the lists to extract the necessary information. The main function then constructs the output dictionary based on the processed data."}
{"task_id": 413, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\"\"\"\n    def mse(y):\n        return np.mean((y - np.mean(y)) ** 2)\n\n    def split_mse(y_left, y_right):\n        n = len(y_left) + len(y_right)\n        return (mse(y_left) * len(y_left) + mse(y_right) * len(y_right)) / n\n\n    def best_split(X, y):\n        best_feature = -1\n        best_value = -1\n        best_score = float('inf')\n        for feature in range(X.shape[1]):\n            for value in np.unique(X[:, feature]):\n                left_mask = X[:, feature] <= value\n                right_mask = X[:, feature] > value\n                if np.any(left_mask) and np.any(right_mask):\n                    score = split_mse(y[left_mask], y[right_mask])\n                    if score < best_score:\n                        best_score = score\n                        best_feature = feature\n                        best_value = value\n        return best_feature, best_value\n\n    def build_tree(X, y, depth=0):\n        if depth >= max_depth or len(np.unique(y)) == 1:\n            return np.mean(y)\n        feature, value = best_split(X, y)\n        left_mask = X[:, feature] <= value\n        right_mask = X[:, feature] > value\n        left_tree = build_tree(X[left_mask], y[left_mask], depth + 1)\n        right_tree = build_tree(X[right_mask], y[right_mask], depth + 1)\n        return {'feature': feature, 'value': value, 'left': left_tree, 'right': right_tree}\n\n    def predict_tree(tree, x):\n        if isinstance(tree, float):\n            return tree\n        if x[tree['feature']] <= tree['value']:\n            return predict_tree(tree['left'], x)\n        else:\n            return predict_tree(tree['right'], x)\n\n    # Start with the mean of the training targets as the initial prediction\n    F = np.mean(y_train)\n    predictions = np.full(X_train.shape[0], F)\n    test_predictions = np.full(X_test.shape[0], F)\n\n    for _ in range(n_estimators):\n        # Compute the residuals (negative gradients of the squared-error loss)\n        residuals = y_train - predictions\n\n        # Fit a CART regression tree to the residuals\n        tree = build_tree(X_train, residuals)\n\n        # Update the running prediction\n        predictions += learning_rate * np.array([predict_tree(tree, x) for x in X_train])\n        test_predictions += learning_rate * np.array([predict_tree(tree, x) for x in X_test])\n\n    return [round(pred, 4) for pred in test_predictions]\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([1, 2, 3, 4])\n# X_test = np.array([[2, 3], [3, 4]])\n# predictions = gbdt_regression(X_train, y_train, X_test)\n# print(predictions)\n```\n\nThis code snippet provides a simplified implementation of a Gradient Boosting Decision Tree (GBDT) regressor, strictly adhering to the constraints provided. The internal CART regression trees are implemented using only NumPy, and the output is rounded to four decimal places and returned as a Python list."}
{"task_id": 416, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Computes the multivariate Gaussian probability density function (PDF) for a given\n    set of data points, mean vector, and covariance matrix.\n    \n    Parameters:\n    X (numpy.ndarray): A (n_samples, n_features) array of data points.\n    mean (numpy.ndarray): A (n_features,) mean vector.\n    cov (numpy.ndarray): A (n_features, n_features) covariance matrix.\n    \n    Returns:\n    list: A list of PDF values for each data point in X, rounded to 4 decimal places.\n    \"\"\"\n    # Ensure X is at least 2D\n    X = np.atleast_2d(X)\n    mean = np.atleast_1d(mean)\n    cov = np.atleast_2d(cov)\n    \n    n_samples, n_features = X.shape\n    \n    # Compute the determinant of the covariance matrix\n    det = np.linalg.det(cov)\n    \n    # Compute the inverse of the covariance matrix\n    inv_cov = np.linalg.inv(cov)\n    \n    # Compute the constant factor\n    norm_coeff = 1.0 / (math.pow(2 * math.pi, n_features / 2) * math.sqrt(det))\n    \n    # Compute the PDF values for each sample\n    pdf_values = []\n    for x in X:\n        # Compute the exponent term for the current sample\n        exp_term = -0.5 * np.dot(np.dot((x - mean).T, inv_cov), (x - mean))\n        \n        # Compute the PDF value for the current sample\n        pdf_value = norm_coeff * math.exp(exp_term)\n        \n        # Append the PDF value to the list, rounded to 4 decimal places\n        pdf_values.append(round(pdf_value, 4))\n    \n    return pdf_values\n\n# Example usage:\nX = np.array([[1, 2], [2, 3], [3, 4]])\nmean = np.array([1, 2])\ncov = np.array([[1, 0], [0, 1]])\nprint(multivariate_gaussian_pdf(X, mean, cov))\n```\n\nThis script defines the function `multivariate_gaussian_pdf` which calculates the multivariate Gaussian PDF for each data point in the given data set `X`, using the provided mean vector and covariance matrix. The function ensures that `X`, `mean`, and `cov` are in the correct shape for computation, calculates the necessary constants and exponent terms, and returns a list of PDF values rounded to four decimal places."}
{"task_id": 419, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    # Add intercept column if required\n    if fit_intercept:\n        X = np.hstack([np.ones((X.shape[0], 1)), X])\n        X_new = np.hstack([np.ones((X_new.shape[0], 1)), X_new])\n\n    # Prior covariance matrix\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif np.isscalar(V):\n        V = V * np.eye(X.shape[1])\n    elif V.ndim == 1:\n        V = np.diag(V)\n\n    # Prior mean vector\n    if np.isscalar(mu):\n        mu = mu * np.ones(X.shape[1])\n\n    # Posterior covariance matrix\n    Sigma_p = np.linalg.inv(np.linalg.inv(V) + X.T @ X)\n\n    # Posterior mean vector\n    mu_p = Sigma_p @ (np.linalg.inv(V) @ mu + X.T @ y)\n\n    # MAP predictive mean\n    y_pred = X_new @ mu_p\n\n    # Round the predictions to 4 decimal places and return as a list\n    return [round(pred, 4) for pred in y_pred]\n\n# Example usage\nif __name__ == \"__main__\":\n    X = np.array([[1, 2], [3, 4], [5, 6]])\n    y = np.array([2, 4, 6])\n    X_new = np.array([[7, 8], [9, 10]])\n    mu = 0.0\n    sigma = 1.0\n    V = None\n    fit_intercept = True\n\n    predictions = bayesian_linear_regression_pred(X, y, X_new, mu, sigma, V, fit_intercept)\n    print(predictions)\n```\n\nThis code snippet implements the Bayesian linear regression with the given specifications. It handles the optional intercept addition, computes the posterior distribution based on the provided prior and data, and returns the MAP predictive means for the new data points, rounded to four decimal places."}
{"task_id": 423, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Calculates the Root Mean Squared Logarithmic Error (RMSLE) between actual and predicted values.\n    \n    Args:\n    actual: A list of non-negative floats representing the ground truth values.\n    predicted: A list of non-negative floats representing the predicted values.\n    \n    Returns:\n    A float representing the RMSLE, rounded to four decimal places, or -1 if inputs are invalid.\n    \"\"\"\n    # Validate input lengths\n    if len(actual) != len(predicted):\n        return -1\n    \n    # Validate non-negative values\n    if any(x < 0 for x in actual) or any(x < 0 for x in predicted):\n        return -1\n    \n    # Compute RMSLE\n    n = len(actual)\n    log_diffs_squared = [(np.log(1 + predicted[i]) - np.log(1 + actual[i]))**2 for i in range(n)]\n    rmsle = np.sqrt(np.mean(log_diffs_squared))\n    \n    return round(rmsle, 4)\n\n# Example usage\nactual_values = [1.0, 2.0, 3.0, 4.0, 5.0]\npredicted_values = [0.8, 2.1, 2.8, 4.2, 4.9]\nprint(root_mean_squared_log_error(actual_values, predicted_values))\n```\n\nThis script defines a function `root_mean_squared_log_error` that calculates the RMSLE between two lists of non-negative floats, adhering to the task requirements and constraints."}
{"task_id": 428, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    else:\n        if symmetric:\n            n = np.arange(window_len)\n        else:\n            n = np.arange(window_len + 1)[:-1]\n        \n        hann_window = 0.5 - 0.5 * np.cos(2 * np.pi * n / (window_len - 1 + int(not symmetric)))\n        return [round(x, 4) for x in hann_window]\n\n# Example usage:\nprint(hann(5, symmetric=True))\nprint(hann(5, symmetric=False))\n```\n\nThis code snippet defines a Python function `hann` that generates a Hann window of a specified length, either symmetric or periodic, as per the given requirements. The output is a list of floating-point numbers rounded to four decimal places, as specified."}
{"task_id": 433, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        # For 4D tensors (convolutional kernels), calculate fan_in and fan_out\n        # based on the receptive field size.\n        receptive_field_size = shape[2] * shape[3]\n        fan_in = float(shape[1] * receptive_field_size)\n        fan_out = float(shape[0] * receptive_field_size)\n    else:\n        # For other tensors, directly take the first two dimensions.\n        fan_in = float(shape[1])\n        fan_out = float(shape[0])\n    \n    return (fan_in, fan_out)\n\n# Example usage:\nprint(glorot_fan((64, 32, 3, 3)))  # For a 4D tensor (convolutional kernel)\nprint(glorot_fan((100, 200)))      # For a 2D tensor (dense layer)\n```"}
{"task_id": 435, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int = 10, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    # Convert X and y to NumPy arrays of type float\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    \n    # If n_estimators <= 0 or learning_rate = 0, return a vector filled with the target mean\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4)] * len(y)\n    \n    # Initialize the current prediction with the mean of y\n    y_pred = np.full_like(y, np.mean(y), dtype=float)\n    \n    # Repeat for t = 1 \u2026 n_estimators\n    for _ in range(n_estimators):\n        # Compute the residuals\n        residuals = y - y_pred\n        \n        # Fit an OLS linear model (including an intercept) that predicts the residuals from X\n        # Add a column of ones to X to include the intercept\n        X_with_intercept = np.column_stack((np.ones(len(X)), X))\n        # Calculate the coefficients using the normal equation\n        coefficients = np.linalg.lstsq(X_with_intercept, residuals, rcond=None)[0]\n        \n        # Obtain the weak-learner prediction\n        h_t = X_with_intercept @ coefficients\n        \n        # Update the overall prediction\n        y_pred += learning_rate * h_t\n    \n    # Return the final prediction vector rounded to 4 decimal places and converted to a regular Python list\n    return [round(pred, 4) for pred in y_pred]\n\n# Example usage:\nX = [[1, 2], [3, 4], [5, 6]]\ny = [2, 4, 6]\npredictions = gradient_boosting_regressor(X, y, n_estimators=10, learning_rate=0.1)\nprint(predictions)\n```"}
{"task_id": 437, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    \n    # Convert input to numpy array if it's a list\n    if isinstance(x, list):\n        x = np.array(x)\n    \n    # Compute the sigmoid function\n    sig = 1 / (1 + np.exp(-x))\n    \n    # Compute the derivatives based on the order\n    if order == 0:\n        result = sig\n    elif order == 1:\n        result = sig * (1 - sig)\n    elif order == 2:\n        result = sig * (1 - sig) * (1 - 2 * sig)\n    \n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n    \n    # Return the result in the appropriate format\n    if isinstance(x, (float, int)):\n        return float(result)\n    else:\n        return result.tolist()\n\n# Example usage\nprint(sigmoid(0, 0))  # Scalar input, function value\nprint(sigmoid([0, 1], 1))  # List input, first derivative\nprint(sigmoid(np.array([0, -1, 1]), 2))  # NumPy array input, second derivative\n```"}
{"task_id": 438, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if num_classes is None:\n        num_classes = max(y) + 1\n    elif num_classes < max(y) + 1:\n        return -1\n\n    # Initialize a 2-D array with zeros\n    one_hot = np.zeros((len(y), num_classes), dtype=int)\n\n    # Set the appropriate indices to 1\n    one_hot[np.arange(len(y)), y] = 1\n\n    # Convert the NumPy array to a list of lists\n    return one_hot.tolist()\n\n# Example usage:\n# y = [0, 1, 2, 1]\n# num_classes = 3\n# print(to_categorical(y, num_classes))\n# Expected output: [[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0]]\n```"}
{"task_id": 439, "completion_id": 0, "completion": "```python\nimport itertools\n\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    # Convert each transaction to a set to remove duplicates and for faster lookup\n    transactions = [set(transaction) for transaction in transactions]\n    num_transactions = len(transactions)\n    min_sup_count = min_sup * num_transactions\n\n    # Generate 1-item frequent itemsets\n    item_counts = {}\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] = item_counts.get(item, 0) + 1\n\n    frequent_itemsets = {frozenset([item]): count for item, count in item_counts.items() if count >= min_sup_count}\n    all_frequent_itemsets = list(frequent_itemsets.keys())\n\n    # Generate k-item frequent itemsets from k-1 itemsets\n    k = 2\n    while frequent_itemsets:\n        # Generate candidate itemsets\n        candidates = set()\n        for itemset1, itemset2 in itertools.combinations(frequent_itemsets.keys(), 2):\n            candidate = itemset1.union(itemset2)\n            if len(candidate) == k:\n                candidates.add(candidate)\n\n        # Prune candidates that contain infrequent subsets\n        candidates = {itemset for itemset in candidates if all(\n            frozenset(subset) in frequent_itemsets for subset in itertools.combinations(itemset, k-1)\n        )}\n\n        # Count support for each candidate\n        candidate_counts = {itemset: 0 for itemset in candidates}\n        for transaction in transactions:\n            for itemset in candidates:\n                if itemset.issubset(transaction):\n                    candidate_counts[itemset] += 1\n\n        # Filter frequent itemsets\n        frequent_itemsets = {itemset: count for itemset, count in candidate_counts.items() if count >= min_sup_count}\n        all_frequent_itemsets.extend(frequent_itemsets.keys())\n        k += 1\n\n    # Convert frozensets to sorted tuples and sort the result\n    all_frequent_itemsets = [tuple(sorted(itemset)) for itemset in all_frequent_itemsets]\n    all_frequent_itemsets.sort(key=lambda x: (len(x), x))\n\n    return all_frequent_itemsets\n\n# Example usage:\ntransactions = [\n    [1, 2, 3],\n    [2, 3],\n    [1, 3],\n    [2, 3],\n    [1, 2, 3, 4],\n    [1, 2, 3]\n]\nmin_sup = 0.5\nprint(apriori_frequent_itemsets(transactions, min_sup))\n```\n\nThis implementation of the Apriori algorithm will generate all frequent itemsets based on the provided transactions and minimum support threshold. The output is a list of tuples representing the frequent itemsets, sorted first by their length and then lexicographically."}
{"task_id": 440, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    # Convert to numpy array for easier manipulation\n    predictions_np = np.array(predictions)\n    \n    # Average over the first dimension (estimators)\n    averaged_probs = np.mean(predictions_np, axis=0)\n    \n    # Round to the nearest 4th decimal place\n    rounded_probs = np.round(averaged_probs, 4)\n    \n    # Find the argmax of each sample's probabilities\n    predicted_classes = np.argmax(rounded_probs, axis=1)\n    \n    # Convert back to python lists\n    rounded_probs_list = rounded_probs.tolist()\n    predicted_classes_list = predicted_classes.tolist()\n    \n    return rounded_probs_list, predicted_classes_list\n\n# Example usage\npredictions = [\n    [[0.2, 0.5, 0.3], [0.1, 0.3, 0.6]],\n    [[0.3, 0.4, 0.3], [0.2, 0.6, 0.2]],\n    [[0.1, 0.6, 0.3], [0.3, 0.1, 0.6]]\n]\n\naveraged_probs, predicted_classes = aggregate_predictions(predictions)\nprint(\"Averaged Probabilities:\", averaged_probs)\nprint(\"Predicted Classes:\", predicted_classes)\n```\n\nThis script defines the `aggregate_predictions` function that takes a three-level nested list of class probabilities from multiple estimators and returns the averaged probabilities and the predicted class for each sample, adhering to the specified constraints."}
{"task_id": 444, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    \n    N, C = X.shape\n    M, C_Y = Y.shape\n    \n    if C != C_Y:\n        return -1\n    \n    if isinstance(sigma, list):\n        if len(sigma) != C:\n            return -1\n        elif any(s <= 0 for s in sigma):\n            return -1\n    elif isinstance(sigma, (int, float)):\n        if sigma <= 0:\n            return -1\n        sigma = [sigma] * C\n    elif sigma is None:\n        sigma = [np.sqrt(C / 2)] * C\n    else:\n        return -1\n    \n    # Compute the kernel matrix\n    kernel_matrix = np.zeros((N, M))\n    for i in range(N):\n        for j in range(M):\n            diff = (X[i] - Y[j]) / sigma\n            kernel_matrix[i, j] = np.exp(-0.5 * np.sum(diff ** 2))\n    \n    # Round to 4 decimal places and convert to list\n    kernel_matrix = np.round(kernel_matrix, 4).tolist()\n    return kernel_matrix\n\n# Example usage\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0\nprint(rbf_kernel(X, Y, sigma))\n```\n\nThis code defines a function `rbf_kernel` that computes the RBF kernel matrix for two sets of vectors X and Y, with an optional scale parameter `sigma`. It validates the inputs, computes the kernel matrix, rounds the values to 4 decimal places, and returns the result as a nested list. If the inputs are invalid, it returns -1."}
{"task_id": 446, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of labels.\"\"\"\n    value, counts = np.unique(labels, return_counts=True)\n    norm_counts = counts / counts.sum()\n    return -(norm_counts * np.log2(norm_counts)).sum()\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\n\n    A *decision stump* is a one-level decision tree: it chooses one feature and\n    one threshold to split the dataset into two parts. This function must find\n    the split that maximises the decrease of entropy (information gain) and\n    return a summarising tuple. Read the detailed task description for exact\n    requirements, tie-breaking rules and the expected return value.\n\n    Args:\n        X: 2-D list (or array-like) of shape (n_samples, n_features) containing\n           only numeric values.\n        y: 1-D list (or array-like) with the class label of every sample.\n\n    Returns:\n        \u2022 (best_feature_index, best_threshold, left_majority_label,\n           right_majority_label)\n        \u2022 If no split can improve information gain, returns\n          (-1, None, majority_label, majority_label).\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n    \n    # Calculate initial entropy\n    parent_entropy = entropy(y)\n    \n    best_gain = -1\n    best_feature_index = -1\n    best_threshold = None\n    left_majority_label = None\n    right_majority_label = None\n    \n    # Iterate over all features\n    for j in range(n_features):\n        # Sort the feature values and corresponding labels\n        sorted_indices = np.argsort(X[:, j])\n        sorted_X = X[sorted_indices, j]\n        sorted_y = y[sorted_indices]\n        \n        # Consider mid-points as thresholds\n        thresholds = (sorted_X[:-1] + sorted_X[1:]) / 2\n        for t in thresholds:\n            # Split the data\n            left_indices = np.where(X[:, j] <= t)[0]\n            right_indices = np.where(X[:, j] > t)[0]\n            \n            # Calculate the entropy of the children\n            left_entropy = entropy(y[left_indices])\n            right_entropy = entropy(y[right_indices])\n            \n            # Calculate the information gain\n            p_left = len(left_indices) / n_samples\n            p_right = len(right_indices) / n_samples\n            gain = parent_entropy - p_left * left_entropy - p_right * right_entropy\n            \n            # Update the best split if this one is better\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = round(t, 4)\n                left_majority_label = np.argmax(np.bincount(y[left_indices]))\n                right_majority_label = np.argmax(np.bincount(y[right_indices]))\n    \n    # If no split can improve information gain, return the majority label\n    if best_gain == -1:\n        majority_label = np.argmax(np.bincount(y))\n        return (-1, None, majority_label, majority_label)\n    \n    return (best_feature_index, best_threshold, left_majority_label, right_majority_label)\n\n# Example usage:\nX = [[1.0], [2.0], [3.0], [4.0], [5.0]]\ny = [0, 0, 1, 1, 1]\nprint(decision_stump(X, y))\n```\n\nThis script implements the `decision_stump` function as described in the task. It calculates the Shannon entropy of the labels and iterates over all features and possible thresholds to find the split that maximizes the information gain. The function returns the details of the best split or the majority label if no split improves the information gain."}
{"task_id": 452, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List\n\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    # Convert X to a NumPy array if it's not already one\n    X = np.array(X)\n\n    # Initialize the two subsets\n    subset1 = []\n    subset2 = []\n\n    # Determine the splitting condition based on the type of threshold\n    if isinstance(threshold, (int, float)):\n        condition = X[:, feature_i] >= threshold\n    else:\n        condition = X[:, feature_i] == threshold\n\n    # Split the data according to the condition\n    subset1 = X[condition].tolist()\n    subset2 = X[~condition].tolist()\n\n    return [subset1, subset2]\n\n# Example usage:\nX = np.array([[1, 5], [3, 2], [4, 6], [2, 1]])\nfeature_i = 0\nthreshold = 3\nprint(divide_on_feature(X, feature_i, threshold))\n\nX = np.array([[1, \"A\"], [2, \"B\"], [3, \"A\"], [4, \"C\"]])\nfeature_i = 1\nthreshold = \"A\"\nprint(divide_on_feature(X, feature_i, threshold))\n```\n\nThis script defines the `divide_on_feature` function as requested, which takes a data set `X`, a feature index `feature_i`, and a `threshold` to split the data set into two subsets based on the given conditions. The function handles both numeric and non-numeric thresholds and ensures that the order of the original samples is preserved in the output subsets."}
{"task_id": 453, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    # Check for input consistency and gamma validity\n    batch_size = Q.shape[0]\n    if Q.shape != Q_next.shape or batch_size != len(actions) or batch_size != len(rewards) or batch_size != len(dones) or not (0 <= gamma <= 1):\n        return -1\n    \n    # Initialize the target Q-values\n    Q_targets = Q.copy()\n    \n    # Compute the target Q-values\n    for i in range(batch_size):\n        if not dones[i]:\n            Q_targets[i, actions[i]] = rewards[i] + gamma * np.max(Q_next[i])\n        else:\n            Q_targets[i, actions[i]] = rewards[i]\n    \n    # Round to 4 decimal places and convert to list of lists\n    Q_targets = np.round(Q_targets, 4).tolist()\n    \n    return Q_targets\n\n# Example usage\nQ = np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]])\nQ_next = np.array([[0.2, 0.3, 0.4], [0.5, 0.6, 0.7]])\nactions = [1, 2]\nrewards = [1.0, 2.0]\ndones = [False, True]\ngamma = 0.95\n\nprint(update_q_values(Q, Q_next, actions, rewards, dones, gamma))\n```\n\nThis script defines the `update_q_values` function as required and includes an example usage to demonstrate how the function can be called with sample inputs. The function checks for input consistency and the validity of the `gamma` value, computes the target Q-values, rounds them to four decimal places, and returns the updated Q-values as a nested list."}
{"task_id": 458, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if not labels:\n        return -1\n    \n    labels = np.array(labels)\n    \n    if labels.min() < 0:\n        return -1\n    \n    if num_classes is None:\n        num_classes = labels.max() + 1\n    elif num_classes < labels.max() + 1:\n        return -1\n    \n    one_hot = np.zeros((labels.size, num_classes), dtype=int)\n    one_hot[np.arange(labels.size), labels] = 1\n    \n    return one_hot.tolist()\n\n# Example usage:\nlabels = [0, 1, 2, 3, 2, 1, 0]\nnum_classes = 4\nprint(to_categorical(labels, num_classes))\n# Output: [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1], [0, 0, 1, 0], [0, 1, 0, 0], [1, 0, 0, 0]]\n\nlabels = [0, 1, 2, 3, 2, 1, 0]\nprint(to_categorical(labels))\n# Output: [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1], [0, 0, 1, 0], [0, 1, 0, 0], [1, 0, 0, 0]]\n\nlabels = [0, 1, 2, 3, 2, 1, 0]\nnum_classes = 3\nprint(to_categorical(labels, num_classes))\n# Output: -1\n\nlabels = [0, -1, 2, 3, 2, 1, 0]\nnum_classes = 4\nprint(to_categorical(labels, num_classes))\n# Output: -1\n```"}
{"task_id": 461, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(y)\n    y_hat = np.full(n_samples, np.mean(y))\n    \n    if n_estimators <= 0:\n        return np.round(y_hat, 4).tolist()\n    \n    for _ in range(n_estimators):\n        residuals = y - y_hat\n        if np.all(residuals == 0):\n            break\n        \n        best_sse = float('inf')\n        best_split = None\n        best_left_mean = np.mean(residuals)\n        best_right_mean = np.mean(residuals)\n        \n        unique_x = np.unique(x)\n        for t in unique_x[:-1]:\n            left_mask = x <= t\n            right_mask = x > t\n            \n            if np.any(left_mask) and np.any(right_mask):\n                left_residuals = residuals[left_mask]\n                right_residuals = residuals[right_mask]\n                \n                left_mean = np.mean(left_residuals)\n                right_mean = np.mean(right_residuals)\n                \n                sse = np.sum((left_residuals - left_mean) ** 2) + np.sum((right_residuals - right_mean) ** 2)\n                \n                if sse < best_sse:\n                    best_sse = sse\n                    best_left_mean = left_mean\n                    best_right_mean = right_mean\n                    best_split = t\n        \n        if best_split is not None:\n            stump_predictions = np.where(x <= best_split, best_left_mean, best_right_mean)\n        else:\n            stump_predictions = np.full(n_samples, np.mean(residuals))\n        \n        y_hat += learning_rate * stump_predictions\n    \n    return np.round(y_hat, 4).tolist()\n\n# Example usage:\nx = [1.0, 2.0, 3.0, 4.0, 5.0]\ny = [1.1, 2.2, 3.3, 4.4, 5.5]\npredictions = gradient_boosting_regressor(x, y, n_estimators=100, learning_rate=0.1)\nprint(predictions)\n```\n\nThis script defines the `gradient_boosting_regressor` function as described in the task, implementing the essential idea of gradient boosting for one-dimensional regression data using decision stumps. The function takes feature values `x`, target values `y`, and optional parameters `n_estimators` and `learning_rate`, and returns the final predictions for the training data, rounded to four decimal places."}
{"task_id": 471, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    # Number of actions\n    num_actions = len(q_table[0])\n    \n    # Calculate the expected value for the next state if it exists\n    if next_state is not None:\n        # Find the maximum Q-value for the next state\n        max_q = max(q_table[next_state])\n        # Calculate the probability of choosing the greedy action\n        greedy_prob = 1 - epsilon + epsilon / num_actions\n        # Calculate the probability of choosing a non-greedy action\n        non_greedy_prob = epsilon / num_actions\n        # Calculate the expected value\n        expected_value = 0\n        for a in range(num_actions):\n            if q_table[next_state][a] == max_q:\n                expected_value += q_table[next_state][a] * greedy_prob\n            else:\n                expected_value += q_table[next_state][a] * non_greedy_prob\n    else:\n        expected_value = 0\n    \n    # Calculate the target\n    target = reward + gamma * expected_value\n    \n    # Update the Q-value for the current state-action pair\n    q_table[state][action] += lr * (target - q_table[state][action])\n    \n    # Round the Q-table to 4 decimal places\n    for s in range(len(q_table)):\n        for a in range(len(q_table[s])):\n            q_table[s][a] = round(q_table[s][a], 4)\n    \n    return q_table\n\n# Example usage\nq_table = [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]\nstate = 0\naction = 1\nreward = 1.0\nnext_state = 1\nepsilon = 0.1\nlr = 0.5\ngamma = 0.9\n\nupdated_q_table = expected_sarsa_update(q_table, state, action, reward, next_state, epsilon, lr, gamma)\nprint(updated_q_table)\n```\n\nThis script defines the `expected_sarsa_update` function that performs one step of the on-policy TD(0) Expected\u2013SARSA algorithm for a tabular setting. The function takes the current Q-table, the indices of the transition that has just been taken, the immediate reward, the next state index (or `None` if the transition terminates the episode), and the usual Expected\u2013SARSA hyper-parameters as inputs. The function returns the updated Q-table with all entries rounded to four decimal places."}
{"task_id": 474, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n\n    X_train, Y_train = [], []\n    X_val, Y_val = [], []\n\n    for i in range(m):\n        label = (i - 0.5) * 2\n        x_range = [(i // 2 + 0.1) * 10, (i // 2 + 0.9) * 10]\n        y_range = [(i % 2) * interval + 0.1, (i % 2) * interval + 0.9]\n        y_range = [y * 10 for y in y_range]\n\n        for _ in range(n_train):\n            X_train.append([np.random.uniform(x_range[0], x_range[1]),\n                            np.random.uniform(y_range[0], y_range[1])])\n            Y_train.append(label)\n\n        for _ in range(n_val):\n            X_val.append([np.random.uniform(x_range[0], x_range[1]),\n                          np.random.uniform(y_range[0], y_range[1])])\n            Y_val.append(label)\n\n    X_train = np.round(X_train, 4)\n    X_val = np.round(X_val, 4)\n    Y_train = np.array(Y_train)\n    Y_val = np.array(Y_val)\n\n    return X_train, X_val, Y_train, Y_val\n\n# Example usage:\nm = 2\nn_train = 100\nn_val = 50\ninterval = 1.0\nseed = 42\n\nX_train, X_val, Y_train, Y_val = generate_data(m, n_train, n_val, interval, seed)\nprint(\"X_train:\", X_train)\nprint(\"X_val:\", X_val)\nprint(\"Y_train:\", Y_train)\nprint(\"Y_val:\", Y_val)\n```"}
{"task_id": 475, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n    \n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n    \n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    # Initialize m_prev and v_prev as zeros if they are None\n    if m_prev is None:\n        m_prev = np.zeros_like(grad, dtype=np.float32)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad, dtype=np.float32)\n    \n    # Update the first moment estimate\n    m_t = b1 * m_prev + (1 - b1) * grad\n    # Update the second moment estimate\n    v_t = b2 * v_prev + (1 - b2) * (grad ** 2)\n    \n    # Bias correction\n    m_t_hat = m_t / (1 - b1 ** t)\n    v_t_hat = v_t / (1 - b2 ** t)\n    \n    # Update parameters\n    w_new = w - learning_rate * m_t_hat / (np.sqrt(v_t_hat) + eps)\n    \n    return w_new, m_t, v_t\n\n# Example usage:\nw, grad, m_prev, v_prev, t = 1.0, 0.1, 0.0, 0.0, 1\nw_new, m_new, v_new = adam_update(w, grad, m_prev, v_prev, t)\nprint(round(w_new, 9))  # \u2248 0.999000001\n```"}
{"task_id": 479, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n\n    n_arms = len(rewards[0])\n    value_estimates = np.full(n_arms, ev_prior)\n    counts = np.zeros(n_arms)\n\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            # Explore: choose a random arm\n            chosen_arm = np.random.randint(n_arms)\n        else:\n            # Exploit: choose the arm with the highest current estimate\n            chosen_arm = np.argmax(value_estimates)\n\n        reward = rewards[t][chosen_arm]\n        counts[chosen_arm] += 1\n        # Update the estimate for the chosen arm\n        value_estimates[chosen_arm] += (reward - value_estimates[chosen_arm]) / counts[chosen_arm]\n\n    return [round(v, 4) for v in value_estimates]\n\n# Example usage:\nrewards = [\n    [1.0, 0.0, 0.0],\n    [0.0, 1.0, 0.0],\n    [1.0, 0.0, 1.0],\n    [0.0, 1.0, 0.0],\n    [1.0, 0.0, 1.0]\n]\n\nestimated_values = epsilon_greedy_bandit(rewards, epsilon=0.1, ev_prior=0.5, seed=42)\nprint(estimated_values)\n```\n\nThis script defines the `epsilon_greedy_bandit` function which implements the \u03b5-greedy algorithm for the stationary multi-armed bandit problem. The function takes a list of rewards, an exploration probability (\u03b5), an initial expected value for each arm, and an optional seed for the random number generator. It returns the estimated values for each arm after simulating the policy over the provided rewards."}
{"task_id": 481, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef euclidean_distance(point1, point2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((point1 - point2) ** 2))\n\ndef region_query(data, point_id, eps):\n    \"\"\"Find all points in the dataset within a radius of eps from the given point.\"\"\"\n    neighbors = []\n    for i, point in enumerate(data):\n        if euclidean_distance(data[point_id], point) < eps:\n            neighbors.append(i)\n    return neighbors\n\ndef expand_cluster(data, cluster_id, point_id, neighbors, labels, eps, min_samples):\n    \"\"\"Expand a cluster from a given point and its neighbors.\"\"\"\n    labels[point_id] = cluster_id\n    i = 0\n    while i < len(neighbors):\n        neighbor_id = neighbors[i]\n        if labels[neighbor_id] == -1:\n            labels[neighbor_id] = cluster_id\n        elif labels[neighbor_id] == 0:\n            labels[neighbor_id] = cluster_id\n            neighbor_neighbors = region_query(data, neighbor_id, eps)\n            if len(neighbor_neighbors) >= min_samples:\n                neighbors = neighbors + neighbor_neighbors\n        i += 1\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled -1 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n\n    n_samples = data.shape[0]\n    labels = [0] * n_samples\n    cluster_id = 0\n\n    for point_id in range(n_samples):\n        if labels[point_id] != 0:\n            continue\n\n        neighbors = region_query(data, point_id, eps)\n\n        if len(neighbors) < min_samples:\n            labels[point_id] = -1\n        else:\n            cluster_id += 1\n            expand_cluster(data, cluster_id, point_id, neighbors, labels, eps, min_samples)\n\n    return labels\n\n# Example usage:\ndata = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\neps = 3\nmin_samples = 2\nprint(dbscan(data, eps, min_samples))\n```\n\nThis Python script implements the DBSCAN clustering algorithm from scratch, adhering to the rules and constraints specified in the task description. The `dbscan` function takes a two-dimensional NumPy array, a distance threshold `eps`, and a minimum number of samples `min_samples` to form a dense region, and returns a list of cluster labels for each sample in the input data."}
{"task_id": 482, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if np.any(y < 0) or (num_classes is not None and np.any(y >= num_classes)):\n        raise ValueError(\"Labels must be non-negative and less than num_classes.\")\n    n = len(y)\n    categorical = np.zeros((n, num_classes), dtype=int)\n    categorical[np.arange(n), y] = 1\n    return categorical\n\n# Check function to verify the correctness of the generated function\ndef check_function():\n    test_cases = [\n        ([0, 1, 2, 3], None, np.array([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])),\n        ([1, 2, 3, 4], 5, np.array([[0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1]])),\n        ([0, 2, 1, 4], 5, np.array([[1, 0, 0, 0, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0], [0, 0, 0, 0, 1]]))\n    ]\n    for y, num_classes, expected in test_cases:\n        result = to_categorical(y, num_classes)\n        assert np.array_equal(result, expected), f\"Test failed for input y={y} with num_classes={num_classes}. Expected {expected}, got {result}\"\n\n    try:\n        to_categorical([0, 1, 2], 2)\n    except ValueError as e:\n        assert str(e) == \"Labels must be non-negative and less than num_classes.\"\n\n    print(\"All tests passed!\")\n\ncheck_function()\n```"}
{"task_id": 485, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    if not X_train or not y_train:\n        return []\n\n    def sse(y):\n        mean = np.mean(y)\n        return np.sum((y - mean) ** 2)\n\n    def split_data(X, y, split_value):\n        left_indices = [i for i, x in enumerate(X) if x <= split_value]\n        right_indices = [i for i, x in enumerate(X) if x > split_value]\n        return left_indices, right_indices\n\n    def build_tree(X, y, depth):\n        if depth == max_depth or len(X) < 2:\n            return np.mean(y)\n        \n        min_sse = float('inf')\n        best_split = None\n        for i in range(len(X)):\n            left_indices, right_indices = split_data(X, y, X[i])\n            if not left_indices or not right_indices:\n                continue\n            left_sse = sse([y[j] for j in left_indices])\n            right_sse = sse([y[j] for j in right_indices])\n            total_sse = left_sse + right_sse\n            if total_sse < min_sse:\n                min_sse = total_sse\n                best_split = X[i]\n        \n        if best_split is None:\n            return np.mean(y)\n        \n        left_indices, right_indices = split_data(X, y, best_split)\n        left_tree = build_tree([X[i] for i in left_indices], [y[i] for i in left_indices], depth + 1)\n        right_tree = build_tree([X[i] for i in right_indices], [y[i] for i in right_indices], depth + 1)\n        \n        return (best_split, left_tree, right_tree)\n\n    def predict(x, tree):\n        if isinstance(tree, float):\n            return tree\n        else:\n            split_value, left_tree, right_tree = tree\n            if x <= split_value:\n                return predict(x, left_tree)\n            else:\n                return predict(x, right_tree)\n\n    # Build the tree\n    tree = build_tree(X_train, y_train, 0)\n    # Predict for test data\n    predictions = [predict(x, tree) for x in X_test]\n    return predictions\n```"}
{"task_id": 490, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:  # Check if the input is empty\n        return []\n    \n    # Convert input to a NumPy array\n    x_np = np.array(x)\n    \n    # Create a diagonal matrix using np.diag and convert it back to a list of lists\n    diagonal_matrix = np.diag(x_np).tolist()\n    \n    return diagonal_matrix\n\n# Example usage:\nvector = [1, 2, 3, 4]\nprint(make_diagonal(vector))\n# Expected output: [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]]\n\nvector = (5, 6, 7)\nprint(make_diagonal(vector))\n# Expected output: [[5, 0, 0], [0, 6, 0], [0, 0, 7]]\n\nvector = np.array([8, 9])\nprint(make_diagonal(vector))\n# Expected output: [[8, 0], [0, 9]]\n\nvector = []\nprint(make_diagonal(vector))\n# Expected output: []\n```"}
{"task_id": 491, "completion_id": 0, "completion": "Below is a Python script that implements the FP-Growth algorithm to mine all frequent item-sets that appear in a collection of transactions at least `min_sup` times. The code is self-contained and follows the guidelines provided.\n\n```python\nfrom collections import Counter, defaultdict\nimport itertools\n\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    # First pass: count item frequencies and filter out infrequent items\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_sup}\n\n    # Sort items by frequency and then lexicographically\n    frequent_items = sorted(frequent_items.items(), key=lambda x: (-x[1], x[0]))\n\n    # Build the header table and FP-tree\n    header_table = defaultdict(list)\n    fp_tree = defaultdict(int)\n\n    for transaction in transactions:\n        # Filter and sort transaction items by global frequency\n        transaction = [item for item in transaction if item in frequent_items]\n        transaction.sort(key=lambda x: frequent_items.index(x))\n\n        # Insert transaction into the FP-tree\n        current_path = fp_tree\n        for item in transaction:\n            current_path = current_path.setdefault(item, defaultdict(int))\n            current_path['count'] += 1\n            header_table[item].append(current_path)\n\n    # Recursive mining function\n    def mine_tree(tree, prefix, frequent_itemsets):\n        for item, node in tree.items():\n            if item != 'count':\n                new_prefix = prefix + (item,)\n                frequent_itemsets.append(new_prefix)\n                cond_pattern_base = []\n                for path in header_table[item]:\n                    cond_pattern = []\n                    while path is not None:\n                        if path['count'] > 0:\n                            cond_pattern.append((path, path['count']))\n                        path = path.get('parent', None)\n                    if cond_pattern:\n                        cond_pattern_base.append(cond_pattern)\n                cond_tree = defaultdict(int)\n                for pattern, count in cond_pattern_base:\n                    current_path = cond_tree\n                    for node, _ in reversed(pattern):\n                        current_path = current_path.setdefault(node, defaultdict(int))\n                        current_path['count'] += count\n                mine_tree(cond_tree, new_prefix, frequent_itemsets)\n\n    # Start mining from the root\n    frequent_itemsets = []\n    mine_tree(fp_tree, (), frequent_itemsets)\n\n    # Sort the frequent itemsets by length and lexicographically\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n\n    return frequent_itemsets\n\n# Example usage\ntransactions = [\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"A\", \"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"C\", \"D\", \"E\"],\n    [\"B\", \"C\", \"D\"]\n]\nmin_sup = 3\nprint(fp_growth(transactions, min_sup))\n```\n\nThis code provides a complete implementation of the FP-Growth algorithm, including the construction of the FP-tree and the recursive mining process. The frequent item-sets are returned in the specified sorted order."}
{"task_id": 492, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n    \n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n    \n    If *degree* is negative the function must return -1.\n    \n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n    \n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    \n    # Convert the list of lists to a numpy array for easier manipulation\n    X = np.array(X)\n    n_samples, n_features = X.shape\n    \n    # Generate the list of all combinations of features up to the given degree\n    indices = list(combinations_with_replacement(range(n_features), degree))\n    # Add the zero-degree terms (constant terms)\n    indices = [(0,) * n_features] + [tuple(i) for i in indices if sum(i) <= degree]\n    \n    # Initialize the output matrix\n    output = np.ones((n_samples, len(indices)))\n    \n    # Compute the polynomial features\n    for col, idx in enumerate(indices):\n        if col == 0:\n            continue  # Skip the constant term\n        output[:, col] = np.prod(np.power(X, idx), axis=1)\n    \n    # Convert the numpy array back to a list of lists and return\n    return output.tolist()\n\n# Example usage:\nX = [[1, 2], [3, 4]]\ndegree = 2\nprint(polynomial_features(X, degree))\n```\n\nThis code defines the function `polynomial_features` that generates polynomial features for a given data matrix `X` and a non-negative integer `degree`. It uses `combinations_with_replacement` from `itertools` to generate all possible combinations of feature indices up to the given degree and then calculates the corresponding monomials for each sample. The result is returned as a list of lists. If the degree is negative, the function returns -1."}
{"task_id": 493, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1\n    \n    y = np.array(y)\n    mean_y = np.mean(y)\n    squared_diffs = (y - mean_y) ** 2\n    mse_value = np.mean(squared_diffs)\n    \n    return round(mse_value, 4)\n\n# Example usage:\n# sample = [1.0, 2.0, 3.0, 4.0]\n# print(mse(sample))  # Output should be the MSE of the sample\n```"}
{"task_id": 496, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Ensure x is a numpy array for element-wise operations\n    x = np.array(x)\n    \n    # Calculate the affine activation\n    y = slope * x + intercept\n    \n    # The first derivative of an affine function is constant (the slope)\n    grad = np.full_like(x, slope, dtype=float)\n    \n    # The second derivative of an affine function is always 0\n    grad2 = np.zeros_like(x, dtype=float)\n    \n    # Convert results to lists and round them to 4 decimal places\n    y_rounded = [round(val, 4) for val in y]\n    grad_rounded = [round(val, 4) for val in grad]\n    grad2_rounded = [round(val, 4) for val in grad2]\n    \n    return y_rounded, grad_rounded, grad2_rounded\n\n# Example usage:\nx = [1.0, 2.0, 3.0]\nslope = 2.0\nintercept = 1.0\ny, grad, grad2 = apply_affine(x, slope, intercept)\nprint(f\"y: {y}, grad: {grad}, grad2: {grad2}\")\n```\n\nThis code block provides a complete solution to the task, including handling both Python lists and NumPy arrays as input, and ensuring that all output values are rounded to four decimal places as required."}
{"task_id": 499, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    n_samples, n_features = data.shape\n    \n    if k < 1 or k > n_features:\n        return -1\n    \n    # Step 1: Standardise each feature\n    means = np.mean(data, axis=0)\n    stds = np.std(data, axis=0, ddof=1)  # Population std, ddof=1 for sample std\n    std_data = (data - means) / np.where(stds != 0, stds, 1)\n    \n    # Step 2: Compute the sample covariance matrix\n    cov_matrix = np.cov(std_data, rowvar=False, ddof=1)\n    \n    # Step 3: Perform eigen-decomposition\n    eigenvalues, eigenvectors = np.linalg.eigh(cov_matrix)\n    \n    # Step 4: Sort eigenvalues and eigenvectors\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    \n    # Step 5: Fix the sign of eigenvectors\n    max_abs_indices = np.argmax(np.abs(sorted_eigenvectors), axis=0)\n    signs = np.sign(sorted_eigenvectors[max_abs_indices, np.arange(n_features)])\n    signed_eigenvectors = sorted_eigenvectors * signs\n    \n    # Step 6: Project the standardised data on the first k eigenvectors\n    projection_matrix = signed_eigenvectors[:, :k]\n    projected_data = std_data @ projection_matrix\n    \n    # Return the projected data as a Python list rounded to 4 decimal places\n    return np.round(projected_data, 4).tolist()\n\n# Example usage:\ndata = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nk = 2\nprint(pca_transform(data, k))\n```\nThis script implements PCA dimensionality reduction from scratch as per the provided specifications."}
{"task_id": 500, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    n_samples, n_features = X_train.shape\n    F = np.full(n_samples, np.mean(y_train))\n    predictions = np.full(X_test.shape[0], np.mean(y_train))\n    \n    for _ in range(n_estimators):\n        residuals = y_train - F\n        \n        best_feature, best_threshold, best_left_val, best_right_val, best_error = None, None, None, None, float('inf')\n        \n        for feature in range(n_features):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                left_indices = X_train[:, feature] <= threshold\n                right_indices = X_train[:, feature] > threshold\n                \n                left_val = np.mean(residuals[left_indices])\n                right_val = np.mean(residuals[right_indices])\n                \n                error = np.sum((residuals[left_indices] - left_val) ** 2) + np.sum((residuals[right_indices] - right_val) ** 2)\n                \n                if error < best_error:\n                    best_feature, best_threshold, best_left_val, best_right_val, best_error = feature, threshold, left_val, right_val, error\n        \n        F += learning_rate * (best_left_val * (X_train[:, best_feature] <= best_threshold) + best_right_val * (X_train[:, best_feature] > best_threshold))\n        predictions += learning_rate * (best_left_val * (X_test[:, best_feature] <= best_threshold) + best_right_val * (X_test[:, best_feature] > best_threshold))\n    \n    return [1 if pred > 0.5 else 0 for pred in predictions]\n\n# Example usage\nX_train = [[1, 2], [2, 3], [3, 4], [4, 5]]\ny_train = [0, 0, 1, 1]\nX_test = [[1, 1], [3, 3]]\npredictions = gradient_boosting_classifier(X_train, y_train, X_test)\nprint(predictions)  # Output might vary depending on the implementation details\n```"}
{"task_id": 505, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n\n    # Positive phase hidden probabilities\n    h0_prob = sigmoid(X @ W + hbias)\n\n    # Initialize v_k_prob and h_k_prob with X and h0_prob\n    v_k_prob, h_k_prob = X, h0_prob\n\n    # Run k full Gibbs steps\n    for _ in range(k):\n        v_k_prob = sigmoid(h_k_prob @ W.T + vbias)\n        h_k_prob = sigmoid(v_k_prob @ W + hbias)\n\n    # Compute positive and negative gradients\n    pos_grad = X.T @ h0_prob\n    neg_grad = v_k_prob.T @ h_k_prob\n\n    # Update the weight matrix\n    W_new = W + learning_rate * (pos_grad - neg_grad) / X.shape[0]\n\n    # Return the updated weight matrix rounded to 4 decimal places\n    return np.round(W_new, 4).tolist()\n\n# Example usage\nif __name__ == \"__main__\":\n    X = np.array([[0.0, 1.0], [1.0, 0.0]])\n    W = np.array([[0.1, 0.2], [0.3, 0.4]])\n    hbias = np.array([0.5, 0.6])\n    vbias = np.array([0.7, 0.8])\n    learning_rate = 0.1\n    k = 1\n\n    updated_W = contrastive_divergence(X, W, hbias, vbias, learning_rate, k)\n    print(updated_W)\n```"}
{"task_id": 509, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Convert inputs to NumPy arrays for easier manipulation\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Check if the vectors have the same length\n    if x.shape != y.shape:\n        return -1\n    \n    # Calculate the absolute differences between the vectors\n    differences = np.abs(x - y)\n    \n    # The Chebyshev distance is the maximum of these differences\n    chebyshev_distance = np.max(differences)\n    \n    # Return the distance rounded to 4 decimal places\n    return round(chebyshev_distance, 4)\n\n# Example usage\nx = [1, 2, 3]\ny = [2, 4, 6]\nprint(chebyshev(x, y))  # Output: 3.0\n```"}
{"task_id": 510, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    # Clip y_pred to avoid log(0) or log(1)\n    eps = np.finfo(float).eps\n    y_pred = np.clip(y_pred, eps, 1 - eps)\n    \n    # Compute binary cross-entropy loss\n    reconstruction_loss = -np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred), axis=1)\n    \n    # Compute KL divergence\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var), axis=1)\n    \n    # Sum the losses and take the average over the batch\n    total_loss = np.mean(reconstruction_loss + kl_divergence)\n    \n    # Return the result rounded to 6 decimal places\n    return round(total_loss, 6)\n\n# Example usage:\ny = np.array([[0, 1], [1, 0]])\ny_pred = np.array([[0.1, 0.9], [0.9, 0.1]])\nt_mean = np.array([[0.5, -0.5], [-0.5, 0.5]])\nt_log_var = np.array([[-1, -1], [-1, -1]])\nprint(vae_loss(y, y_pred, t_mean, t_log_var))\n```\n\nThis code implements the VAE loss function as specified in the task description. It calculates the reconstruction loss using binary cross-entropy and the KL divergence analytically. The function returns the mini-batch average of these losses, rounded to six decimal places."}
{"task_id": 513, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    # Convert input lists to numpy arrays for efficient computation\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n\n    # Initialize an array to store predictions\n    predictions = []\n\n    # Iterate over each sample in the dataset\n    for x in X:\n        # Linear term\n        linear_term = np.dot(w, x)\n        \n        # Interaction term\n        interaction_term = 0.5 * np.sum((np.dot(V.T, x))**2 - np.dot(V.T**2, x**2))\n        \n        # Prediction for the current sample\n        prediction = w0 + linear_term + interaction_term\n        predictions.append(round(prediction, 4))\n    \n    return predictions\n\n# Example usage\nX = [[1, 2, 3], [2, 3, 4]]\nw0 = 1.0\nw = [0.5, 0.5, 0.5]\nV = [[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]]\n\nprint(fm_predict(X, w0, w, V))\n```\n\nThis code defines a `fm_predict` function that takes a feature matrix `X`, a global bias term `w0`, a list of linear coefficients `w`, and a matrix of latent interaction factors `V`. It computes the Factorization Machine predictions for each sample in `X` according to the given formula and returns the predictions rounded to 4 decimal places."}
{"task_id": 517, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # Convert input to NumPy array if it is not already one\n    if not isinstance(z, np.ndarray):\n        z = np.array(z)\n    \n    # Compute the sigmoid in a numerically stable way\n    with np.errstate(over='ignore'):\n        # Use np.where to avoid overflow issues\n        sigm = np.where(z >= 0, \n                        1 / (1 + np.exp(-z)), \n                        np.exp(z) / (1 + np.exp(z)))\n    \n    # Round the result to 4 decimal places\n    sigm = np.round(sigm, 4)\n    \n    # Convert back to scalar if input was a scalar\n    if sigm.size == 1:\n        return float(sigm)\n    else:\n        # Convert to list if input was a list or tuple\n        return sigm.tolist()\n\n# Check function with provided data points\nprint(sigmoid([-1, 0, 1]))  # Expected output: [0.2689, 0.5, 0.7311]\nprint(sigmoid(0))  # Expected output: 0.5\nprint(sigmoid(np.array([-100, 0, 100])))  # Expected output: [0.0, 0.5, 1.0]\n```"}
{"task_id": 518, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        # Check and convert actual if necessary\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        \n        # Check and convert predicted if necessary\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        \n        # Call the original function with the processed arrays\n        return function(actual, predicted)\n    \n    return wrapper\n\n@unhot\ndef accuracy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Simple accuracy rounded to 4 decimals.\"\"\"\n    return float(np.round(np.mean(actual == predicted), 4))\n\n# Example usage\nactual    = np.array([[0,1,0], [1,0,0], [0,0,1]])  # one-hot\npredicted = np.array([[0,1,0], [0,1,0], [0,0,1]])  # one-hot\nprint(accuracy(actual, predicted))  # 0.6667\n```"}
{"task_id": 520, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    def recursive_apply(func, data):\n        if isinstance(data, list):\n            if not data:\n                return []\n            return [recursive_apply(func, item) for item in data]\n        elif isinstance(data, np.ndarray):\n            return np.round(func(data), 4)\n        else:\n            return np.round(func(data), 4)\n    \n    def grad(x):\n        return x * (1 - x)\n    \n    return recursive_apply(grad, z)\n\n# Check function to verify the correctness of the sigmoid_grad function\ndef check():\n    test_cases = [\n        (0.5, 0.25),\n        ([0.5, 0.75], [0.25, 0.1875]),\n        ([[0.5, 0.75], [0.25, 0.1]], [[0.25, 0.1875], [0.1875, 0.09]]),\n        (np.array([0.5, 0.75]), np.array([0.25, 0.1875])),\n        (np.array([[0.5, 0.75], [0.25, 0.1]]), np.array([[0.25, 0.1875], [0.1875, 0.09]])),\n        ([], []),\n    ]\n    \n    for input_val, expected in test_cases:\n        result = sigmoid_grad(input_val)\n        if isinstance(result, np.ndarray) or isinstance(expected, np.ndarray):\n            assert np.allclose(result, expected), f\"Failed for input: {input_val}\"\n        elif isinstance(result, list) and isinstance(expected, list):\n            assert result == expected, f\"Failed for input: {input_val}\"\n        else:\n            assert result == expected, f\"Failed for input: {input_val}\"\n    print(\"All test cases passed.\")\n\n# Run the check function to verify the solution\ncheck()\n```"}
{"task_id": 528, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Convert X to a numpy array for easier manipulation\n    X = np.array(X)\n    # Extract the min and max values for each dimension\n    x1_min, x2_min = X.min(axis=0)\n    x1_max, x2_max = X.max(axis=0)\n    \n    # Create equally spaced arrays for x1 and x2\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    \n    # Create a mesh grid\n    x1_mesh, x2_mesh = np.meshgrid(x1_plot, x2_plot)\n    \n    # Flatten the mesh grid to use in the classification\n    x1_flat = x1_mesh.ravel()\n    x2_flat = x2_mesh.ravel()\n    \n    # Classify every grid point\n    classifications = np.sign(W[0]*x1_flat + W[1]*x2_flat + b)\n    \n    # Reshape the classifications to match the grid shape\n    classifications = classifications.reshape(grid_n, grid_n)\n    \n    # Convert the numpy array back to a list of lists\n    classifications_list = classifications.tolist()\n    \n    return classifications_list\n\n# Example usage:\nX = [[1, 2], [2, 3], [3, 4], [4, 5]]\nW = [1, -1]\nb = 0\ngrid_n = 50\nresult = decision_boundary_grid(X, W, b, grid_n)\nprint(result)\n```\n\nThis script defines a function `decision_boundary_grid` that generates a grid of points and classifies each point based on a linear classifier defined by the weights `W` and the bias `b`. The grid spans the bounding box of the original data set `X` and contains `grid_n` points along each axis. The function returns a nested list of integers, where each integer is either 1 or -1, representing the predicted labels of the grid points."}
{"task_id": 537, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    # Calculate class priors\n    class_priors = np.bincount(y_train) / len(y_train)\n    \n    # Separate the training data by class\n    X_train_class_0 = X_train[y_train == 0]\n    X_train_class_1 = X_train[y_train == 1]\n    \n    # Calculate mean and std for each feature in each class\n    mean_class_0 = np.mean(X_train_class_0, axis=0)\n    std_class_0 = np.std(X_train_class_0, axis=0) + 1e-9  # Add epsilon to avoid division by zero\n    mean_class_1 = np.mean(X_train_class_1, axis=0)\n    std_class_1 = np.std(X_train_class_1, axis=0) + 1e-9  # Add epsilon to avoid division by zero\n    \n    # Function to calculate Gaussian probability\n    def gaussian_prob(x, mean, std):\n        exponent = np.exp(-((x - mean) ** 2) / (2 * std ** 2))\n        return (1 / (np.sqrt(2 * np.pi) * std)) * exponent\n    \n    # Predict the class for each test sample\n    predictions = []\n    for x in X_test:\n        likelihood_class_0 = np.prod(gaussian_prob(x, mean_class_0, std_class_0))\n        likelihood_class_1 = np.prod(gaussian_prob(x, mean_class_1, std_class_1))\n        \n        posterior_class_0 = likelihood_class_0 * class_priors[0]\n        posterior_class_1 = likelihood_class_1 * class_priors[1]\n        \n        if posterior_class_0 > posterior_class_1:\n            predictions.append(0)\n        else:\n            predictions.append(1)\n    \n    return predictions\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([0, 0, 1, 1])\n# X_test = np.array([[1.5, 2.5], [3.5, 4.5]])\n# predictions = gaussian_naive_bayes(X_train, y_train, X_test)\n# print(predictions)  # Output should be a list of predicted class labels for X_test\n```"}
{"task_id": 539, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Computes the binary cross-entropy cost given the model's probabilities and the true labels.\n    \n    Parameters:\n    - AL: np.ndarray, the array of probabilities output by the model, shape (1,m) or (m,)\n    - Y: np.ndarray, the array of true labels, shape (1,m) or (m,)\n    \n    Returns:\n    - float, the computed binary cross-entropy cost\n    \"\"\"\n    # Ensure the probabilities are within the numerical stability range\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    \n    # Number of training examples\n    m = Y.shape[0] if Y.ndim == 1 else Y.shape[1]\n    \n    # Compute the binary cross-entropy cost\n    cost = -1/m * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    \n    # Convert the numpy float to a built-in Python float\n    return float(cost)\n\n# Example usage and check function\ndef check_function():\n    Y = np.array([[1, 1, 0]])\n    AL = np.array([[0.9, 0.1, 0.8]])\n    cost = compute_cost(AL, Y)\n    print(f\"Computed Cost: {cost:.4f}\")\n    \n    # Expected cost calculation\n    # J = -1/3 * (1*log(0.9) + 1*log(0.1) + 0*log(0.2))\n    expected_cost = -1/3 * (np.log(0.9) + np.log(0.1) + np.log(0.2))\n    print(f\"Expected Cost: {expected_cost:.4f}\")\n    assert np.isclose(cost, expected_cost, atol=1e-4), \"The computed cost does not match the expected cost.\"\n\ncheck_function()\n```\n\nThis script defines the `compute_cost` function that computes the binary cross-entropy cost given the model's output probabilities and the true labels. It includes clipping of probabilities for numerical stability, and it ensures the returned cost is a plain Python float. The `check_function` provides an example usage and a simple check against an expected value for validation."}
{"task_id": 552, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi, A, B = hmm['pi'], hmm['A'], hmm['B']\n    num_states = len(pi)\n    num_observations = len(observations)\n    \n    if t < 0 or t >= num_observations:\n        return []\n    \n    # Initialize forward and backward probabilities\n    alpha = np.zeros((num_observations, num_states))\n    beta = np.zeros((num_observations, num_states))\n    \n    # Compute forward probabilities\n    alpha[0] = pi * B[:, observations[0]]\n    for i in range(1, num_observations):\n        alpha[i] = alpha[i-1] @ A * B[:, observations[i]]\n    \n    # Compute backward probabilities\n    beta[-1] = 1\n    for i in range(num_observations - 2, -1, -1):\n        beta[i] = A @ (B[:, observations[i+1]] * beta[i+1])\n    \n    # Compute gamma probabilities\n    gamma = (alpha * beta) / (alpha * beta).sum()\n    \n    # Return the gamma values for the specified time step t\n    return [round(gamma[t][i], 4) for i in range(num_states)]\n\n# Example usage:\nhmm = {\n    'pi': np.array([0.2, 0.4, 0.4]),\n    'A': np.array([[0.5, 0.2, 0.3], [0.3, 0.5, 0.2], [0.2, 0.3, 0.5]]),\n    'B': np.array([[0.5, 0.5], [0.4, 0.6], [0.7, 0.3]])\n}\nobservations = [0, 1, 0]\nt = 1\nprint(gamma_probabilities(hmm, observations, t))\n```\n\nThis script defines the `gamma_probabilities` function that computes the posterior state distribution (\u03b3) for a given HMM, observation sequence, and time index using the forward-backward algorithm. It ensures the output is rounded to four decimal places as required."}
{"task_id": 555, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import deque\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples  # Initialize all samples as noise\n    cluster_id = 0\n\n    # Function to compute the Euclidean distance between two points\n    def euclidean_distance(point1, point2):\n        return np.sqrt(np.sum((point1 - point2) ** 2))\n\n    # Function to find all points within the epsilon radius of a point\n    def find_neighbours(sample_index):\n        neighbours = []\n        for i in range(n_samples):\n            if euclidean_distance(data[sample_index], data[i]) < eps:\n                neighbours.append(i)\n        return neighbours\n\n    # Main loop to find clusters\n    for sample in range(n_samples):\n        if labels[sample] != -1:\n            continue  # Skip if the sample is already labeled\n\n        # Find the neighbors of the current sample\n        neighbours = find_neighbours(sample)\n        if len(neighbours) < min_samples:\n            continue  # This sample is not a core point\n\n        # This sample is a core point, start a new cluster\n        cluster_id += 1\n        labels[sample] = cluster_id\n\n        # Initialize the queue with the current sample's neighbors\n        queue = deque(neighbours)\n        while queue:\n            current = queue.popleft()\n            if labels[current] == -1:\n                labels[current] = cluster_id\n            if labels[current] != 0:  # 0 is a temporary label for visited\n                continue\n\n            # Mark the current point as visited\n            labels[current] = 0\n\n            # Find all neighbors of the current point\n            current_neighbours = find_neighbours(current)\n            if len(current_neighbours) >= min_samples:\n                queue.extend(current_neighbours)\n\n    return labels\n\n# Example usage\nif __name__ == \"__main__\":\n    # Example data points\n    data = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\n    eps = 3\n    min_samples = 2\n    labels = dbscan(data, eps, min_samples)\n    print(labels)\n```\n\nThis script implements the DBSCAN algorithm as described in the task. It starts by initializing all points as noise and then iteratively finds clusters by expanding from core points. The provided example usage demonstrates how to call the `dbscan` function with a sample dataset."}
{"task_id": 561, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom scipy.stats import multivariate_normal\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"\n    Fits a Gaussian Mixture Model to the data using the Expectation-Maximization (EM) algorithm.\n    \n    Parameters:\n    data (np.ndarray): The input data, a 2-D numpy array of shape (N, D).\n    k (int): The number of Gaussian components.\n    max_iter (int): The maximum number of iterations for the EM algorithm.\n    epsilon (float): The tolerance for convergence based on change in mixture weights.\n    \n    Returns:\n    list[int]: A list of length N containing the final cluster label of each sample.\n    \"\"\"\n    N, D = data.shape\n    np.random.seed(0)  # For deterministic results\n\n    # Initialize parameters\n    pi = np.ones(k) / k  # Mixture weights\n    mu = data[np.random.choice(N, k, replace=False)]  # Means\n    sigma = [np.cov(data.T) for _ in range(k)]  # Covariance matrices\n\n    for _ in range(max_iter):\n        old_pi = pi.copy()\n\n        # E-step: Compute responsibilities\n        resp = np.zeros((N, k))\n        for j in range(k):\n            resp[:, j] = pi[j] * multivariate_normal.pdf(data, mean=mu[j], cov=sigma[j])\n        resp /= resp.sum(axis=1)[:, np.newaxis]\n\n        # M-step: Update parameters\n        Nk = resp.sum(axis=0)\n        pi = Nk / N\n        mu = (resp.T @ data) / Nk[:, np.newaxis]\n        for j in range(k):\n            diff = data - mu[j]\n            sigma[j] = np.dot(resp[:, j] * diff.T, diff) / Nk[j]\n\n        # Check for convergence\n        if np.linalg.norm(pi - old_pi) < epsilon:\n            break\n\n    # Assign each sample to the component with the largest responsibility\n    labels = resp.argmax(axis=1)\n\n    # Sort components by the first coordinate of their mean\n    sorted_indices = np.argsort(mu[:, 0])\n    sorted_labels = np.zeros_like(labels)\n    for new_label, old_label in enumerate(sorted_indices):\n        sorted_labels[labels == old_label] = new_label\n\n    return sorted_labels.tolist()\n\n# Example usage\ndata = np.random.multivariate_normal([0, 0], [[1, 0], [0, 1]], 100)\ndata = np.append(data, np.random.multivariate_normal([5, 5], [[1, 0], [0, 1]], 100), axis=0)\nk = 2\nlabels = gmm_em(data, k)\nprint(labels)\n```\n\nThis script implements the Expectation-Maximization (EM) algorithm for fitting a Gaussian Mixture Model (GMM) to a given dataset. It initializes the parameters for each Gaussian component randomly and iteratively performs the E-step and M-step until convergence or the maximum number of iterations is reached. After convergence, it assigns each sample to the component with the largest posterior probability and sorts the components by the first coordinate of their mean to ensure deterministic output."}
{"task_id": 562, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * data.shape[0]\n\n    N = data.shape[0]\n    # Build similarity graph\n    pairwise_distances = np.sum(data**2, axis=1, keepdims=True) + np.sum(data**2, axis=1) - 2 * np.dot(data, data.T)\n    W = np.exp(-gamma * pairwise_distances)\n\n    # Construct Laplacian\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    if method == 'normalized':\n        D_inv_sqrt = np.diag(1.0 / np.sqrt(np.diag(D)))\n        L = np.dot(np.dot(D_inv_sqrt, L), D_inv_sqrt)\n\n    # Compute eigenvectors\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    eigenvectors = eigenvectors[:, :n_cluster]\n\n    if method == 'normalized':\n        eigenvectors = eigenvectors / np.linalg.norm(eigenvectors, axis=0)\n\n    # K-means in eigenvector space\n    centroids = eigenvectors[:n_cluster, :]\n    distances = np.sum((eigenvectors[:, np.newaxis, :] - centroids[np.newaxis, :, :]) ** 2, axis=2)\n    labels = np.argmin(distances, axis=1)\n\n    # Relabel clusters\n    sorted_indices = np.argsort(np.argmax(eigenvectors, axis=0))\n    relabel_map = {i: j for j, i in enumerate(sorted_indices)}\n    labels = [relabel_map[label] for label in labels]\n\n    return labels\n\n# Example usage:\n# data = np.random.rand(100, 2)\n# labels = spectral_clustering(data, n_cluster=3, gamma=1.0, method='normalized')\n# print(labels)\n```"}
{"task_id": 563, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N, d = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    converged = False\n\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            converged = True\n            break\n\n    w = np.dot(alpha * y_data, X_data)\n    w = np.round(w, 4).tolist()\n    b = round(b, 4)\n\n    return w, b\n\n# Example usage:\n# X_data = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_data = np.array([1, 1, -1, -1])\n# w, b = perceptron_dual_train(X_data, y_data)\n# print(w, b)\n```"}
{"task_id": 564, "completion_id": 0, "completion": "```python\nclass Node:\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label\n        self.x = x\n        self.s = s\n        self.y = y\n        self.child = child if child is not None else []\n\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    \n    if task_type == 'classification':\n        feature_value = features[root.label]\n        for child in root.child:\n            if child.x == feature_value:\n                return predict_sample(child, features, task_type)\n        # Default to the second child if no match is found\n        return predict_sample(root.child[1], features, task_type)\n    \n    elif task_type == 'regression':\n        feature_value = features[root.label]\n        if feature_value <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)\n\n# Example usage:\n# Classification tree\nnode1 = Node(label=0, child=[Node(y=1), Node(y=2)])\nnode2 = Node(label=1, x=0, child=[Node(y=3)])\nroot_classification = Node(label=0, child=[node1, node2])\n\n# Regression tree\nnode3 = Node(s=5, child=[Node(y=10), Node(y=20)])\nroot_regression = Node(s=3, child=[Node(y=5), node3])\n\n# Predictions\nprint(predict_sample(root_classification, [0, 0], 'classification'))  # Output: 3\nprint(predict_sample(root_regression, [4], 'regression'))  # Output: 10\n```"}
{"task_id": 565, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\ndef entropy(labels):\n    \"\"\"Calculate the entropy of a label distribution.\"\"\"\n    value, counts = np.unique(labels, return_counts=True)\n    probabilities = counts / counts.sum()\n    return -np.sum(probabilities * np.log2(probabilities))\n\ndef conditional_entropy(X, y):\n    \"\"\"Calculate the conditional entropy H(y|X) for a given feature X.\"\"\"\n    unique_values = np.unique(X)\n    conditional_entropies = []\n    \n    for value in unique_values:\n        subset_y = y[X == value]\n        conditional_entropies.append(entropy(subset_y) * (len(subset_y) / len(y)))\n    \n    return np.sum(conditional_entropies)\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    # Calculate the entropy of the label distribution\n    base_entropy = entropy(y)\n    \n    # Initialize variables to store the best feature index and the maximum information gain\n    best_feature_index = -1\n    max_information_gain = -1\n    \n    # Iterate over each feature\n    for i in range(X.shape[1]):\n        feature = X[:, i]\n        # Calculate the conditional entropy for this feature\n        cond_entropy = conditional_entropy(feature, y)\n        # Calculate the information gain\n        information_gain = base_entropy - cond_entropy\n        # Update the best feature index and the maximum information gain\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = i\n    \n    return (best_feature_index, round(max_information_gain, 6))\n\n# Example usage\nX = np.array([\n    [0, 1, 0],\n    [1, 1, 1],\n    [0, 0, 0],\n    [1, 0, 1],\n    [0, 1, 1]\n])\ny = np.array([0, 1, 0, 1, 1])\nprint(choose_best_feature(X, y))\n```\n\nThis script defines a function `choose_best_feature` that implements the ID3 algorithm's feature selection based on information gain. It includes helper functions to calculate the entropy and conditional entropy, which are used to determine the information gain for each feature. The function returns the index of the feature with the highest information gain and the gain itself, rounded to 6 decimal places."}
{"task_id": 566, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport math\n\nnp.random.seed(42)\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    def build_tree(data, height_limit, depth=0):\n        if data.shape[0] <= 1 or depth >= height_limit:\n            return data, depth\n        feature = np.random.randint(data.shape[1])\n        threshold = np.random.uniform(data[:, feature].min(), data[:, feature].max())\n        left_data = data[data[:, feature] < threshold]\n        right_data = data[data[:, feature] >= threshold]\n        return (build_tree(left_data, height_limit, depth + 1),\n                build_tree(right_data, height_limit, depth + 1))\n\n    def path_length(tree, x, depth=0):\n        if len(tree) <= 1:\n            return depth + c(len(tree))\n        feature, threshold, left_tree, right_tree = tree\n        if x[feature] < threshold:\n            return path_length(left_tree, x, depth + 1)\n        else:\n            return path_length(right_tree, x, depth + 1)\n\n    def c(n):\n        if n == 1:\n            return 0\n        return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n\n    def average_path_length(n):\n        if n > 2:\n            return 2 * (math.log(n - 1) + 0.5772156649) - 2 * (n - 1) / n\n        elif n == 2:\n            return 1\n        else:\n            return 0\n\n    n_samples = data.shape[0]\n    n_features = data.shape[1]\n    height_limit = math.ceil(math.log2(sample_size))\n    path_lengths = np.zeros(n_samples)\n\n    for _ in range(n_trees):\n        if sample_size >= n_samples:\n            sample_data = data\n        else:\n            sample_data = data[np.random.choice(n_samples, sample_size, replace=False)]\n        tree = build_tree(sample_data, height_limit)\n        for i in range(n_samples):\n            path_lengths[i] += path_length(tree, data[i])\n\n    path_lengths /= n_trees\n    c_n = average_path_length(n_samples)\n    scores = 2 ** (-path_lengths / c_n)\n    threshold = np.percentile(scores, (1 - epsilon) * 100)\n    outliers = np.where(scores > threshold)[0]\n\n    return sorted(outliers.tolist())\n\n# Example usage:\n# data = np.random.rand(100, 2)  # Example data\n# outliers = detect_outliers(data, n_trees=100, sample_size=256, epsilon=0.05)\n# print(outliers)\n```\n\nThis script implements a small-scale version of the Isolation Forest algorithm for anomaly detection, as described in the task. The function `detect_outliers` takes a data matrix and parameters to build random isolation trees, compute anomaly scores, and return the indices of the detected outliers."}
{"task_id": 568, "completion_id": 0, "completion": "```python\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    # Extract the unique labels and features\n    labels = np.unique(y_train)\n    num_features = X_train.shape[1]\n    \n    # Initialize weights\n    weights = defaultdict(float)\n    \n    # Build empirical distributions\n    empirical_counts = defaultdict(int)\n    for x, y in zip(X_train, y_train):\n        for feature_index, feature_value in enumerate(x):\n            empirical_counts[(feature_index, feature_value, y)] += 1\n    \n    # Normalize empirical counts to get empirical distribution\n    empirical_distribution = {k: v / len(X_train) for k, v in empirical_counts.items()}\n    \n    # Generalized Iterative Scaling (GIS)\n    for _ in range(n_iter):\n        max_update = 0\n        for (feature_index, feature_value, label), empirical_prob in empirical_distribution.items():\n            model_prob = 0\n            for y in labels:\n                model_prob += np.exp(sum(weights[(feature_index, feature_value, y)] for feature_index, feature_value in enumerate(X_train[0]) if X_train[0][feature_index] == feature_value))\n            model_prob = np.exp(weights[(feature_index, feature_value, label)]) / model_prob\n            update = math.log(empirical_prob / model_prob)\n            weights[(feature_index, feature_value, label)] += update\n            max_update = max(max_update, abs(update))\n        \n        if max_update < epsilon:\n            break\n    \n    # Predict labels for test set\n    predictions = []\n    for x in X_test:\n        scores = defaultdict(float)\n        for y in labels:\n            for feature_index, feature_value in enumerate(x):\n                scores[y] += weights[(feature_index, feature_value, y)]\n        predictions.append(max(scores, key=scores.get))\n    \n    return predictions\n```\n\nThis script implements a Maximum Entropy classifier using the Generalized Iterative Scaling algorithm to learn the weights of (feature-value, label) pairs from categorical training data. It then uses these weights to predict labels for the test samples. The script uses only the standard library and the `numpy` and `math` packages as requested."}
{"task_id": 569, "completion_id": 0, "completion": "```python\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    # Count the number of documents where each word appears\n    word_counts = Counter()\n    for _, words in data:\n        word_counts.update(set(words))\n\n    # Calculate the document frequency ratio for each word\n    total_docs = len(data)\n    doc_freq_ratios = [(word, round(count / total_docs, 4)) for word, count in word_counts.items()]\n\n    # Sort the words by their document frequency ratio (descending)\n    doc_freq_ratios.sort(key=lambda x: x[1], reverse=True)\n\n    # Determine the set of top words\n    top_words = set()\n    if cut_off is not None:\n        top_words = set(word for word, _ in doc_freq_ratios[:cut_off])\n\n    return doc_freq_ratios, top_words\n\n\n# Example usage\ndocuments = [\n    ('doc1', ['apple', 'banana', 'cherry']),\n    ('doc2', ['banana', 'cherry', 'date']),\n    ('doc3', ['apple', 'date', 'fig']),\n    ('doc4', ['banana', 'apple']),\n]\n\nprint(statistic_key_word(documents, cut_off=2))\n```\n\nThis script defines the `statistic_key_word` function that calculates the document-frequency ratio for each word across a collection of documents and returns the ratios alongside a set of the most frequent words according to the `cut_off` parameter. The example usage demonstrates how to call the function with a list of documents and a specified `cut_off` value."}
{"task_id": 571, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute the weight vector w\n    w = np.dot(X.T, alpha * y)\n    \n    # Compute the bias term b\n    wX = np.dot(X, w)\n    b = np.mean(y - wX)\n    \n    # Round the weight vector and bias term to 4 decimal places\n    w_list = [round(wi, 4) for wi in w]\n    b = round(b, 4)\n    \n    return w_list, b\n\n# Example usage\nif __name__ == \"__main__\":\n    X = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n    y = np.array([1, -1, 1, -1])\n    alpha = np.array([0.1, 0.2, 0.3, 0.4])\n    w_list, b = compute_svm_parameters(X, y, alpha)\n    print(\"Weight vector:\", w_list)\n    print(\"Bias term:\", b)\n```\n\nThis script defines the `compute_svm_parameters` function which calculates the weight vector and bias term for a linear SVM given the training samples `X`, labels `y`, and Lagrange multipliers `alpha`. The function returns the weight vector as a Python list and the bias term, both rounded to four decimal places. An example usage of the function is also provided."}
{"task_id": 572, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef euclidean_distance(p1, p2):\n    \"\"\"Compute the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((p1 - p2) ** 2))\n\ndef pairwise_distance_matrix(data):\n    \"\"\"Compute the full pairwise Euclidean distance matrix for the data.\"\"\"\n    n = len(data)\n    dist_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i+1, n):\n            dist_matrix[i, j] = euclidean_distance(data[i], data[j])\n            dist_matrix[j, i] = dist_matrix[i, j]\n    return dist_matrix\n\ndef k_distance(dist_matrix, k):\n    \"\"\"Compute the k-distance for each point and the list of k nearest neighbors.\"\"\"\n    k_distances = []\n    k_neighbors = []\n    n = len(dist_matrix)\n    for i in range(n):\n        sorted_indices = np.argsort(dist_matrix[i])\n        k_distances.append(dist_matrix[i, sorted_indices[k]])\n        k_neighbors.append(sorted_indices[:k])\n    return k_distances, k_neighbors\n\ndef reachability_distance(dist_matrix, k_distances, i, j):\n    \"\"\"Compute the reachability distance between two points i and j.\"\"\"\n    return max(k_distances[j], dist_matrix[i, j])\n\ndef local_reachability_density(dist_matrix, k_distances, k_neighbors, i):\n    \"\"\"Compute the local reachability density for point i.\"\"\"\n    reach_distances = [reachability_distance(dist_matrix, k_distances, i, j) for j in k_neighbors[i]]\n    return len(k_neighbors[i]) / sum(reach_distances)\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"Compute the Local Outlier Factor (LOF) for each point in the data.\"\"\"\n    dist_matrix = pairwise_distance_matrix(data)\n    k_distances, k_neighbors = k_distance(dist_matrix, k)\n    lrd = [local_reachability_density(dist_matrix, k_distances, k_neighbors, i) for i in range(len(data))]\n    lof_scores = []\n    outlier_indices = []\n    for i in range(len(data)):\n        lrd_sum = sum(lrd[j] for j in k_neighbors[i])\n        lof = (lrd_sum / k) / lrd[i]\n        lof_scores.append(np.round(lof, 4))\n        if lof > epsilon:\n            outlier_indices.append(i)\n    return lof_scores, sorted(outlier_indices)\n\n# Example usage:\ndata = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\nk = 2\nepsilon = 1.5\nscores, outliers = local_outlier_factor(data, k, epsilon)\nprint(scores)\nprint(outliers)\n```\n\nThis script contains the implementation of the Local Outlier Factor (LOF) algorithm from scratch, as per the requirements provided in the task. It calculates the LOF scores for each sample in the dataset and identifies the outliers based on a given `epsilon` threshold."}
{"task_id": 574, "completion_id": 0, "completion": "```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n\n    for c in range(m):\n        base = 10 * (c // 2)\n        # Generate training points\n        X_train.extend([(round(random.uniform(base + 1, base + 9), 4),\n                         round(random.uniform(base + 1, base + 9), 4)) for _ in range(n_train)])\n        y_train.extend([c] * n_train)\n\n        # Generate validation points\n        X_val.extend([(round(random.uniform(base + 1, base + 9), 4),\n                       round(random.uniform(base + 1, base + 9), 4)) for _ in range(n_val)])\n        y_val.extend([c] * n_val)\n\n    X_train = np.array(X_train)\n    X_val = np.array(X_val)\n    y_train = np.array(y_train)\n    y_val = np.array(y_val)\n\n    return X_train, X_val, y_train, y_val\n\n# Example usage:\nm = 3\nn_train = 10\nn_val = 5\nseed = 42\nX_train, X_val, y_train, y_val = generate_data(m, n_train, n_val, seed)\nprint(\"X_train:\", X_train)\nprint(\"y_train:\", y_train)\nprint(\"X_val:\", X_val)\nprint(\"y_val:\", y_val)\n```\nThis script defines the `generate_data` function according to the specifications provided, ensuring that the generated points are uniformly distributed within the specified range and that the output is reproducible when a seed is provided."}
{"task_id": 579, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    m, d = X.shape\n    centres = X[:k].copy()\n    labels = np.zeros(m, dtype=int)\n    \n    for _ in range(max_iters):\n        old_labels = labels.copy()\n        \n        # Assignment step\n        for i, point in enumerate(X):\n            distances = np.linalg.norm(point - centres, axis=1)\n            labels[i] = np.argmin(distances)\n        \n        # Update step\n        for j in range(k):\n            points_in_cluster = X[labels == j]\n            if len(points_in_cluster) > 0:\n                centres[j] = np.mean(points_in_cluster, axis=0)\n        \n        # Check for convergence\n        if np.array_equal(old_labels, labels):\n            break\n    \n    # Round the coordinates of the centres to 4 decimal places\n    rounded_centres = np.round(centres, 4).tolist()\n    return labels.tolist(), rounded_centres\n\n# Example usage\nX = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\nk = 2\nlabels, centres = kmeans(X, k)\nprint(\"Labels:\", labels)\nprint(\"Centres:\", centres)\n```\n\nThis script implements the K-Means clustering algorithm according to the specifications provided. It initializes the centres with the first `k` points, assigns points to the nearest centre, updates the centres based on the mean of their assigned points, and repeats until convergence or until the maximum number of iterations is reached. The coordinates of the centres are rounded to 4 decimal places before returning."}
{"task_id": 581, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    m, n = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n\n    if learning_rate == 0 or iterations == 0:\n        return [round(float(w), 4) for w in weights], round(bias, 4)\n\n    for _ in range(iterations):\n        y_pred = np.dot(X, weights) + bias\n        residuals = y - y_pred\n\n        # Compute gradients for weights and bias\n        gradient_weights = -2 * np.dot(X.T, residuals) / m\n        gradient_bias = -2 * np.sum(residuals) / m\n\n        # Add regularization terms\n        gradient_weights += (l1_penalty * np.sign(weights) + 2 * l2_penalty * weights) / m\n        gradient_bias += (l1_penalty * np.sign(bias) + 2 * l2_penalty * bias) / m\n\n        # Update weights and bias\n        weights -= learning_rate * gradient_weights\n        bias -= learning_rate * gradient_bias\n\n    return [round(float(w), 4) for w in weights], round(bias, 4)\n\n# Example usage:\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([1, 2, 3])\nlearning_rate = 0.01\niterations = 1000\nl1_penalty = 0.5\nl2_penalty = 0.1\n\nweights, bias = elastic_net_regression(X, y, learning_rate, iterations, l1_penalty, l2_penalty)\nprint(\"Weights:\", weights)\nprint(\"Bias:\", bias)\n```"}
{"task_id": 591, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    # Convert the input list to a numpy array for easier computation\n    current_input = np.array(x)\n    \n    # Iterate through each layer in the network\n    for layer_weights in weights:\n        # Add a bias term to the current input\n        current_input_with_bias = np.insert(current_input, 0, 1)\n        \n        # Compute the dot product of the current input with the layer's weights\n        dot_product = np.dot(current_input_with_bias, np.array(layer_weights).T)\n        \n        # Apply ReLU activation function to all but the last layer\n        if layer_weights is not weights[-1]:\n            current_input = np.maximum(dot_product, 0)\n        else:\n            # The last layer uses a linear activation\n            current_input = dot_product\n    \n    # Round the output to 4 decimal places\n    rounded_output = np.round(current_input, 4)\n    \n    # Return the output as a float if there's only one output neuron, otherwise as a list\n    return rounded_output[0] if len(rounded_output) == 1 else rounded_output.tolist()\n\n# Example usage:\nweights = [\n    [[1.0, 0.2, -0.3], [0.5, 0.1, 0.4]],  # Layer 0: 2 neurons, 2 input features\n    [[-0.1, 0.3, 0.5], [0.2, -0.4, 0.1], [0.3, 0.2, -0.2]],  # Layer 1: 3 neurons, 2 input features from previous layer\n    [[0.4, -0.1, 0.2, 0.5]]  # Layer 2 (output): 1 neuron, 3 input features from previous layer\n]\nx = [1.5, -0.5]\nprint(neural_net_predict(weights, x))  # Example output: 0.425\n```"}
{"task_id": 595, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"\n    Implement the K-Means clustering algorithm from scratch to compute the centroids.\n    \n    Parameters:\n    X (np.ndarray): 2-D array of shape (n_samples, n_features) representing the data.\n    k (int): Number of clusters.\n    max_iters (int): Maximum number of iterations (default = 100).\n    \n    Returns:\n    list[list[float]]: List of sorted, rounded centroids.\n    \"\"\"\n    \n    # Initialize centroids with the first k samples\n    centroids = X[:k].copy()\n    \n    for _ in range(max_iters):\n        # Assign each sample to the nearest centroid\n        distances = np.sum((X[:, np.newaxis] - centroids) ** 2, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Update centroids\n        new_centroids = np.zeros_like(centroids)\n        counts = np.zeros(k)\n        for i in range(k):\n            if np.sum(labels == i) > 0:\n                new_centroids[i] = np.mean(X[labels == i], axis=0)\n                counts[i] = np.sum(labels == i)\n        \n        # Check for convergence\n        if np.all(np.abs(new_centroids - centroids) < 1e-4):\n            break\n        \n        # Update centroids\n        centroids = new_centroids\n    \n    # Sort centroids and round to 4 decimal places\n    centroids = np.round(centroids, decimals=4)\n    sorted_centroids = centroids[np.lexsort(centroids.T)]\n    \n    # Convert to list of lists\n    return sorted_centroids.tolist()\n\n# Example usage:\n# X = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# k = 2\n# centroids = kmeans_centroids(X, k)\n# print(centroids)\n```\n\nThis Python script implements the K-Means clustering algorithm from scratch to compute the centroids of the clusters. It adheres to the specified requirements, including initializing centroids with the first `k` samples, stopping early if centroids move less than `1e-4`, handling empty clusters, and sorting and rounding the final centroids."}
