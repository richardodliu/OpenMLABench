{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    if not all((len(row) == len(b) for row in a)):\n        return -1\n    result = []\n    for row in a:\n        dot_product = sum((x * y for (x, y) in zip(row, b)))\n        result.append(dot_product)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"\n    Compute the transpose of a given matrix.\n\n    Parameters:\n    a (list of list of int/float): The input matrix.\n\n    Returns:\n    list of list of int/float: The transposed matrix.\n    \"\"\"\n    return [list(row) for row in zip(*a)]"}
{"task_id": 3, "completion_id": 0, "solution": "def reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    \"\"\"\n    Reshapes the input matrix into the specified new_shape.\n    If the reshape is not possible, returns an empty list.\n    \"\"\"\n    a_np = np.array(a)\n    if a_np.size != new_shape[0] * new_shape[1]:\n        return []\n    reshaped = a_np.reshape(new_shape)\n    return reshaped.tolist()"}
{"task_id": 4, "completion_id": 0, "solution": "def calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    \"\"\"\n    Calculate the mean of a matrix either by row or by column.\n\n    Parameters:\n    matrix (list of list of float): A 2D list representing the matrix.\n    mode (str): 'row' to calculate mean of each row, 'column' to calculate mean of each column.\n\n    Returns:\n    list of float: A list of means based on the specified mode.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return []\n    if mode == 'row':\n        return [sum(row) / len(row) for row in matrix]\n    elif mode == 'column':\n        rows = len(matrix)\n        cols = len(matrix[0])\n        return [sum((matrix[row][col] for row in range(rows))) / rows for col in range(cols)]\n    else:\n        raise ValueError(\"Mode must be 'row' or 'column'.\")\nmatrix = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    \"\"\"\n    Multiplies a matrix by a scalar and returns the resulting matrix.\n\n    Parameters:\n    matrix (list[list[int | float]]): A 2D list representing the matrix.\n    scalar (int | float): The scalar value to multiply with the matrix.\n\n    Returns:\n    list[list[int | float]]: The resulting matrix after scalar multiplication.\n    \"\"\"\n    return [[element * scalar for element in row] for row in matrix]"}
{"task_id": 6, "completion_id": 0, "solution": "def calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    import math\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    trace = a + d\n    determinant = a * d - b * c\n    discriminant = trace ** 2 - 4 * determinant\n    sqrt_discriminant = math.sqrt(discriminant)\n    lambda1 = (trace + sqrt_discriminant) / 2\n    lambda2 = (trace - sqrt_discriminant) / 2\n    return sorted([lambda1, lambda2], reverse=True)"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    \"\"\"\n    Transforms matrix A using the operation T^{-1} @ A @ S.\n    \n    Parameters:\n    A (list[list[int|float]]): The input matrix to be transformed.\n    T (list[list[int|float]]): The invertible matrix T.\n    S (list[list[int|float]]): The invertible matrix S.\n    \n    Returns:\n    list[list[float]]: The transformed matrix rounded to 4 decimal places.\n    -1 if T or S is not invertible.\n    \"\"\"\n    try:\n        A_np = np.array(A)\n        T_np = np.array(T)\n        S_np = np.array(S)\n        if T_np.shape[0] != T_np.shape[1] or S_np.shape[0] != S_np.shape[1]:\n            return -1\n        if np.isclose(np.linalg.det(T_np), 0) or np.isclose(np.linalg.det(S_np), 0):\n            return -1\n        result = np.round(np.linalg.inv(T_np) @ A_np @ S_np, 4)\n        return result.tolist()\n    except np.linalg.LinAlgError:\n        return -1"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    if len(matrix) != 2 or len(matrix[0]) != 2 or len(matrix[1]) != 2:\n        raise ValueError('Input must be a 2x2 matrix.')\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    determinant = a * d - b * c\n    if determinant == 0:\n        return None\n    inv_matrix = [[d / determinant, -b / determinant], [-c / determinant, a / determinant]]\n    return inv_matrix"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    if len(a[0]) != len(b):\n        return -1\n    result = [[0 for _ in range(len(b[0]))] for _ in range(len(a))]\n    for i in range(len(a)):\n        for j in range(len(b[0])):\n            for k in range(len(b)):\n                result[i][j] += a[i][k] * b[k][j]\n    return result"}
{"task_id": 10, "completion_id": 0, "solution": "def calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    \"\"\"\n    Calculate the covariance matrix for a list of vectors.\n    \n    Parameters:\n        vectors (list of list of float): Each inner list represents a feature.\n    \n    Returns:\n        list of list of float: The covariance matrix.\n    \"\"\"\n    n = len(vectors[0])\n    m = len(vectors)\n    means = [sum(feature) / n for feature in vectors]\n    cov_matrix = [[0.0 for _ in range(m)] for _ in range(m)]\n    for i in range(m):\n        for j in range(m):\n            covariance = 0.0\n            for k in range(n):\n                covariance += (vectors[i][k] - means[i]) * (vectors[j][k] - means[j])\n            cov_matrix[i][j] = covariance / (n - 1)\n    return cov_matrix"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    \"\"\"\n    Solves the system of linear equations Ax = b using the Jacobi method.\n    \n    Parameters:\n        A (np.ndarray): Coefficient matrix (n x n)\n        b (np.ndarray): Constant vector (n x 1)\n        n (int): Number of iterations\n    \n    Returns:\n        list: Approximate solution vector x as a list, rounded to 4 decimal places\n    \"\"\"\n    N = len(b)\n    x = np.zeros(N)\n    for _ in range(n):\n        x_new = np.zeros(N)\n        for i in range(N):\n            s = sum((A[i][j] * x[j] for j in range(N) if j != i))\n            x_new[i] = (b[i] - s) / A[i][i]\n        x = np.round(x_new, 4)\n    return x.tolist()\nA = np.array([[4, 1, -1], [1, 4, -1], [1, 1, 4]])\nb = np.array([3, 6, 4])\nn = 10"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    \"\"\"\n    Computes the singular values of a 2x2 real matrix A using the Jacobi method.\n\n    Parameters:\n        A (np.ndarray): A 2x2 real matrix.\n\n    Returns:\n        tuple: A tuple of two singular values (sigma1, sigma2), both rounded to 4 decimal places.\n    \"\"\"\n    A_shape = A.shape\n    if A_shape != (2, 2):\n        raise ValueError('Input matrix A must be of shape (2, 2).')\n    AtA = A.T @ A\n    (a, b) = (AtA[0, 0], AtA[0, 1])\n    (c, d) = (AtA[1, 0], AtA[1, 1])\n    trace = a + d\n    det = a * d - b * c\n    eigenvalues = np.sort([trace / 2 + np.sqrt((trace / 2) ** 2 - det), trace / 2 - np.sqrt((trace / 2) ** 2 - det)])\n    sigma1 = np.sqrt(eigenvalues[1])\n    sigma2 = np.sqrt(eigenvalues[0])\n    return (round(sigma1, 4), round(sigma2, 4))"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n\n    def determinant_3x3(mat: list[list[int | float]]) -> float:\n        return mat[0][0] * (mat[1][1] * mat[2][2] - mat[1][2] * mat[2][1]) - mat[0][1] * (mat[1][0] * mat[2][2] - mat[1][2] * mat[2][0]) + mat[0][2] * (mat[1][0] * mat[2][1] - mat[1][1] * mat[2][0])\n    det = 0.0\n    for col in range(4):\n        minor = [[matrix[i][j] for j in range(4) if j != col] for i in range(1, 4)]\n        sign = (-1) ** col\n        det += sign * matrix[0][col] * determinant_3x3(minor)\n    return det\nmatrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    \"\"\"\n    Perform linear regression using the normal equation.\n    \n    Args:\n        X: A 2D list of floats, where each sublist is a sample of features.\n        y: A 1D list of floats, the target values.\n        \n    Returns:\n        A list of floats, the coefficients of the linear regression model.\n        Results are rounded to four decimal places.\n    \"\"\"\n    X_np = np.array(X)\n    y_np = np.array(y).reshape(-1, 1)\n    X_np = np.c_[np.ones((X_np.shape[0], 1)), X_np]\n    theta = np.linalg.pinv(X_np.T @ X_np) @ X_np.T @ y_np\n    theta_flat = [round(float(val), 4) for val in theta]\n    return theta_flat"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> np.ndarray:\n    m = y.shape[0]\n    theta = np.zeros(X.shape[1])\n    for _ in range(iterations):\n        h = X @ theta\n        error = h - y\n        gradient = 1 / m * X.T @ error\n        theta -= alpha * gradient\n    rounded_theta = np.round(theta, 4)\n    return rounded_theta.tolist()"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    standardized_data = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    standardized_data = np.round(standardized_data, 4)\n    min_vals = np.min(data, axis=0)\n    max_vals = np.max(data, axis=0)\n    min_max_data = (data - min_vals) / (max_vals - min_vals)\n    min_max_data = np.round(min_max_data, 4)\n    standardized_data_list = standardized_data.tolist()\n    min_max_data_list = min_max_data.tolist()\n    return (standardized_data_list, min_max_data_list)"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Tuple\ndef k_means_clustering(points: List[Tuple[float, float]], k: int, initial_centroids: List[Tuple[float, float]], max_iterations: int) -> List[Tuple[float, float]]:\n    points_array = np.array(points)\n    centroids = np.array(initial_centroids)\n    for _ in range(max_iterations):\n        distances = np.sqrt(((points_array[:, np.newaxis] - centroids) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([points_array[labels == i].mean(axis=0) for i in range(k)])\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    final_centroids = [(round(centroid[0], 4), round(centroid[1], 4)) for centroid in centroids]\n    return final_centroids"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    \"\"\"\n    Generate train and test splits for K-Fold Cross-Validation.\n    \n    Parameters:\n        X (np.ndarray): Feature array of shape (n_samples, n_features).\n        y (np.ndarray): Target array of shape (n_samples,).\n        k (int): Number of folds.\n        shuffle (bool): Whether to shuffle the data before splitting.\n        random_seed (int): Random seed for reproducibility.\n        \n    Returns:\n        list: List of tuples, each containing train and test indices for a fold.\n    \"\"\"\n    n_samples = X.shape[0]\n    indices = np.arange(n_samples)\n    if shuffle:\n        np.random.seed(random_seed)\n        np.random.shuffle(indices)\n    folds = []\n    fold_size = n_samples // k\n    for i in range(k):\n        start = i * fold_size\n        end = start + fold_size\n        test_indices = indices[start:end]\n        train_indices = np.concatenate([indices[:start], indices[end:]])\n        folds.append((train_indices, test_indices))\n    return folds"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    mean = np.mean(data, axis=0)\n    standardized_data = data - mean\n    covariance_matrix = np.cov(standardized_data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eig(covariance_matrix)\n    idx = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[idx]\n    sorted_eigenvectors = eigenvectors[:, idx]\n    principal_components = sorted_eigenvectors[:, :k]\n    principal_components_rounded = [list(map(lambda x: round(x, 4), component)) for component in principal_components.T]\n    return principal_components_rounded"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom typing import Dict, List, Any, Union, Tuple\ndef entropy(class_counts: Dict[Any, int]) -> float:\n    \"\"\"\n    Calculate the entropy of a list of class counts.\n    \"\"\"\n    total = sum(class_counts.values())\n    if total == 0:\n        return 0.0\n    return -sum((count / total * math.log(count / total, 2) for count in class_counts.values() if count > 0))\ndef information_gain(parent_entropy: float, left_counts: Dict[Any, int], right_counts: Dict[Any, int]) -> float:\n    \"\"\"\n    Calculate the information gain from splitting a dataset into two parts.\n    \"\"\"\n    total = sum(left_counts.values()) + sum(right_counts.values())\n    if total == 0:\n        return 0.0\n    left_weight = sum(left_counts.values()) / total\n    right_weight = sum(right_counts.values()) / total\n    return parent_entropy - (left_weight * entropy(left_counts) + right_weight * entropy(right_counts))\ndef get_majority_class(examples: List[Dict[str, Any]], target_attr: str) -> Any:\n    \"\"\"\n    Return the most common target attribute value among examples.\n    \"\"\"\n    class_values = [example[target_attr] for example in examples]\n    return Counter(class_values).most_common(1)[0][0]\ndef all_same_class(examples: List[Dict[str, Any]], target_attr: str) -> bool:\n    \"\"\"\n    Check if all examples have the same target attribute value.\n    \"\"\"\n    first_class = examples[0][target_attr]\n    for example in examples:\n        if example[target_attr] != first_class:\n            return False\n    return True\ndef split_dataset(examples: List[Dict[str, Any]], attribute: str, value: Any) -> Tuple[List[Dict[str, Any]], List[Dict[str, Any]]]:\n    \"\"\"\n    Split the examples into two sets based on the value of `attribute`.\n    \"\"\"\n    true_set = [example for example in examples if example[attribute] == value]\n    false_set = [example for example in examples if example[attribute] != value]\n    return (true_set, false_set)\ndef learn_decision_tree(examples: List[Dict[str, Any]], attributes: List[str], target_attr: str) -> Union[Dict, Any]:\n    \"\"\"\n    Build a decision tree using recursive binary splitting based on entropy and information gain.\n    Returns a nested dictionary representing the decision tree.\n    \"\"\"\n    if not examples:\n        return get_majority_class(examples, target_attr)\n    if all_same_class(examples, target_attr):\n        return examples[0][target_attr]\n    if not attributes:\n        return get_majority_class(examples, target_attr)\n    best_gain = -1\n    best_attribute = None\n    best_value = None\n    best_splits = None\n    parent_entropy = entropy(Counter((example[target_attr] for example in examples)))\n    for attr in attributes:\n        if attr == target_attr:\n            continue\n        unique_values = set((example[attr] for example in examples))\n        for val in unique_values:\n            (true_split, false_split) = split_dataset(examples, attr, val)\n            if len(true_split) == 0 or len(false_split) == 0:\n                continue\n            left_classes = Counter((example[target_attr] for example in true_split))\n            right_classes = Counter((example[target_attr] for example in false_split))\n            gain = information_gain(parent_entropy, left_classes, right_classes)\n            if gain > best_gain:\n                best_gain = gain\n                best_attribute = attr\n                best_value = val\n                best_splits = (true_split, false_split)\n    if best_gain <= 0:\n        return get_majority_class(examples, target_attr)\n    attributes.remove(best_attribute)\n    true_tree = learn_decision_tree(best_splits[0], attributes.copy(), target_attr)\n    false_tree = learn_decision_tree(best_splits[1], attributes.copy(), target_attr)\n    return {'attribute': best_attribute, 'value': best_value, 'true': true_tree, 'false': false_tree}\nexamples = [{'Outlook': 'Sunny', 'Temperature': 'Hot', 'Humidity': 'High', 'Play': 'No'}, {'Outlook': 'Sunny', 'Temperature': 'Hot', 'Humidity': 'High', 'Play': 'No'}, {'Outlook': 'Overcast', 'Temperature': 'Hot', 'Humidity': 'High', 'Play': 'Yes'}, {'Outlook': 'Rain', 'Temperature': 'Mild', 'Humidity': 'High', 'Play': 'Yes'}, {'Outlook': 'Rain', 'Temperature': 'Cool', 'Humidity': 'Normal', 'Play': 'Yes'}, {'Outlook': 'Rain', 'Temperature': 'Cool', 'Humidity': 'Normal', 'Play': 'No'}, {'Outlook': 'Overcast', 'Temperature': 'Cool', 'Humidity': 'Normal', 'Play': 'Yes'}, {'Outlook': 'Sunny', 'Temperature': 'Mild', 'Humidity': 'High', 'Play': 'No'}, {'Outlook': 'Sunny', 'Temperature': 'Cool', 'Humidity': 'Normal', 'Play': 'Yes'}, {'Outlook': 'Rain', 'Temperature': 'Mild', 'Humidity': 'Normal', 'Play': 'Yes'}, {'Outlook': 'Sunny', 'Temperature': 'Mild', 'Humidity': 'Normal', 'Play': 'Yes'}, {'Outlook': 'Overcast', 'Temperature': 'Mild', 'Humidity': 'High', 'Play': 'Yes'}, {'Outlook': 'Overcast', 'Temperature': 'Hot', 'Humidity': 'Normal', 'Play': 'Yes'}, {'Outlook': 'Rain', 'Temperature': 'Mild', 'Humidity': 'High', 'Play': 'No'}]\nattributes = ['Outlook', 'Temperature', 'Humidity']\ntarget_attr = 'Play'"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    \"\"\"\n    Implements a deterministic version of the Pegasos Kernel SVM algorithm.\n    \n    Parameters:\n    - data: 2D numpy array of shape (n_samples, n_features)\n    - labels: 1D numpy array of shape (n_samples,)\n    - kernel: 'linear' or 'rbf'\n    - lambda_val: Regularization parameter\n    - iterations: Number of training iterations (deterministic, not stochastic)\n    - sigma: Bandwidth for RBF kernel (used only if kernel is 'rbf')\n    \n    Returns:\n    - alphas: 1D list of computed alpha coefficients (rounded to 4 decimals)\n    - b: Bias term (rounded to 4 decimals)\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    alphas = np.zeros(n_samples)\n    b = 0.0\n\n    def kernel_function(x1, x2):\n        if kernel == 'linear':\n            return np.dot(x1, x2)\n        elif kernel == 'rbf':\n            return np.exp(-np.linalg.norm(x1 - x2) ** 2 / (2 * sigma ** 2))\n        else:\n            raise ValueError(\"Unknown kernel type. Use 'linear' or 'rbf'.\")\n    for t in range(1, iterations + 1):\n        eta = 1.0 / (lambda_val * t)\n        predictions = np.zeros(n_samples)\n        for i in range(n_samples):\n            for j in range(n_samples):\n                predictions[i] += alphas[j] * labels[j] * kernel_function(data[j], data[i])\n        predictions += b\n        margin = predictions * labels\n        gradient = np.zeros(n_samples)\n        for i in range(n_samples):\n            if margin[i] < 1:\n                gradient[i] = -labels[i]\n            else:\n                gradient[i] = 0\n        alphas = (1 - 1 / t) * alphas - 0.5 * lambda_val * eta * gradient\n        grad_b = np.mean(gradient)\n        b -= eta * grad_b\n        norm = 0.0\n        for i in range(n_samples):\n            for j in range(n_samples):\n                norm += alphas[i] * alphas[j] * labels[i] * labels[j] * kernel_function(data[i], data[j])\n        norm = np.sqrt(norm)\n        if norm > 1 / np.sqrt(lambda_val):\n            scale = 1 / lambda_val ** 0.5 / norm\n            alphas = scale * alphas\n    alphas_list = [round(val, 4) for val in alphas.tolist()]\n    b_rounded = round(b, 4)\n    return (alphas_list, b_rounded)"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    \"\"\"\n    Compute the sigmoid of a scalar z.\n    \n    Parameters:\n        z (float): Input value.\n        \n    Returns:\n        float: Sigmoid of z, rounded to four decimal places.\n    \"\"\"\n    result = 1 / (1 + math.exp(-z))\n    return round(result, 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    exp_scores = [math.exp(score) for score in scores]\n    sum_exp = sum(exp_scores)\n    softmax_values = [round(score_exp / sum_exp, 4) for score_exp in exp_scores]\n    return softmax_values"}
{"task_id": 24, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    \"\"\"\n    Simulates a single neuron with a sigmoid activation function for binary classification.\n    \n    Args:\n        features (List[List[float]]): List of feature vectors.\n        labels (List[int]): True binary labels (0 or 1).\n        weights (List[float]): Weights for each feature.\n        bias (float): Bias term.\n    \n    Returns:\n        Tuple[List[float], float]: Predicted probabilities and mean squared error.\n    \"\"\"\n    predicted_probabilities = []\n    for x in features:\n        z = sum((w * f for (w, f) in zip(weights, x))) + bias\n        prob = 1 / (1 + math.exp(-z))\n        predicted_probabilities.append(prob)\n    mse = sum(((y_true - y_pred) ** 2 for (y_true, y_pred) in zip(labels, predicted_probabilities))) / len(labels)\n    predicted_probabilities_rounded = [round(p, 4) for p in predicted_probabilities]\n    mse_rounded = round(mse, 4)\n    return (predicted_probabilities_rounded, mse_rounded)"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    weights = initial_weights.copy()\n    bias = initial_bias\n    mse_history = []\n\n    def sigmoid(x):\n        return 1 / (1 + np.exp(-x))\n\n    def sigmoid_derivative(x):\n        return x * (1 - x)\n    for epoch in range(epochs):\n        total_error = 0\n        weight_gradient = np.zeros_like(weights)\n        bias_gradient = 0\n        for i in range(len(features)):\n            x = features[i]\n            y_true = labels[i]\n            z = np.dot(weights, x) + bias\n            y_pred = sigmoid(z)\n            error = (y_pred - y_true) ** 2\n            total_error += error\n            delta = (y_pred - y_true) * sigmoid_derivative(y_pred)\n            weight_gradient += delta * x\n            bias_gradient += delta\n        weight_gradient /= len(features)\n        bias_gradient /= len(features)\n        weights -= learning_rate * weight_gradient\n        bias -= learning_rate * bias_gradient\n        avg_mse = total_error / len(features)\n        mse_history.append(round(avg_mse, 4))\n    final_weights = np.round(weights, 4).tolist()\n    final_bias = round(bias, 4)\n    return (final_weights, final_bias, mse_history)\ninitial_bias = 0.1\nlearning_rate = 0.1\nepochs = 1000"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data + other.data, _children=(self, other), _op='add')\n\n        def _backward():\n            self.grad += out.grad * 1\n            other.grad += out.grad * 1\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data * other.data, _children=(self, other), _op='mul')\n\n        def _backward():\n            self.grad += out.grad * other.data\n            other.grad += out.grad * self.data\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(self.data if self.data > 0 else 0, _children=(self,), _op='relu')\n\n        def _backward():\n            self.grad += (out.data > 0) * out.grad\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1.0\n        for node in reversed(topo):\n            node._backward()\n\n    def __neg__(self):\n        return self * -1\n\n    def __sub__(self, other):\n        return self + -other\n\n    def __radd__(self, other):\n        return self + other\n\n    def __rsub__(self, other):\n        return other + -self\n\n    def __rmul__(self, other):\n        return self * other\n\n    def __truediv__(self, other):\n        return self * other ** (-1)\n\n    def __rtruediv__(self, other):\n        return other * self ** (-1)\n\n    def __pow__(self, other):\n        assert isinstance(other, (int, float)), 'Only int/float exponents supported'\n        out = Value(self.data ** other, _children=(self,), _op=f'**{other}')\n\n        def _backward():\n            self.grad += out.grad * other * self.data ** (other - 1)\n        out._backward = _backward\n        return out\n\n    def __repr__(self):\n        return f'Value(data={self.data}, grad={self.grad})'"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    \"\"\"\n    Compute the transformation matrix P from basis B to basis C.\n\n    :param B: List of basis vectors for basis B (3x3 matrix columns)\n    :param C: List of basis vectors for basis C (3x3 matrix columns)\n    :return: Transformation matrix P from basis B to basis C\n    \"\"\"\n    B_matrix = np.array(B, dtype=float)\n    C_matrix = np.array(C, dtype=float)\n    P = np.linalg.inv(C_matrix) @ B_matrix\n    return np.round(P, 4).tolist()"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    AtA = np.dot(A.T, A)\n    (eigenvalues, eigenvectors) = np.linalg.eig(AtA)\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    sigmas = np.sqrt(eigenvalues)\n    V = eigenvectors\n    U = np.zeros_like(A)\n    for i in range(2):\n        v_i = V[:, i]\n        av_i = np.dot(A, v_i)\n        if np.isclose(sigmas[i], 0):\n            if i == 0:\n                U[:, 1] = np.array([-U[1, 0], U[0, 0]])\n            else:\n                U[:, 1] = np.array([-U[1, 0], U[0, 0]])\n        else:\n            U[:, i] = av_i / sigmas[i]\n    S = np.diag(sigmas)\n    U_rounded = np.round(U, 4).tolist()\n    S_rounded = np.round(S, 4).tolist()\n    V_rounded = np.round(V, 4).tolist()\n    return (U_rounded, S_rounded, V_rounded)"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    \"\"\"\n    Randomly shuffles two numpy arrays X and y while preserving their alignment.\n    \n    Parameters:\n    - X (np.ndarray): Features array.\n    - y (np.ndarray): Labels array.\n    - seed (int, optional): Seed for the random number generator for reproducibility.\n    \n    Returns:\n    - List: A list representation of the shuffled arrays after reshaping.\n    \"\"\"\n    X = np.asarray(X)\n    y = np.asarray(y)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError('X and y must have the same number of samples.')\n    if seed is not None:\n        np.random.seed(seed)\n    indices = np.random.permutation(X.shape[0])\n    X_shuffled = X[indices]\n    y_shuffled = y[indices]\n    return [X_shuffled.tolist(), y_shuffled.tolist()]"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    \"\"\"\n    An iterator that yields batches of data from the input arrays X and y.\n    \n    Parameters:\n        X (np.ndarray): Input features.\n        y (np.ndarray, optional): Target labels. Defaults to None.\n        batch_size (int): Number of samples per batch. Defaults to 64.\n    \n    Yields:\n        If y is provided: (X_batch, y_batch)\n        If y is not provided: (X_batch,)\n    \"\"\"\n    n_samples = X.shape[0]\n    for i in range(0, n_samples, batch_size):\n        batch_end = min(i + batch_size, n_samples)\n        X_batch = X[i:batch_end].tolist()\n        if y is not None:\n            y_batch = y[i:batch_end].tolist()\n            yield (X_batch, y_batch)\n        else:\n            yield (X_batch,)"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    \"\"\"\n    Divide the dataset into two subsets based on the value of a specified feature.\n    \n    Parameters:\n        X (numpy.ndarray): The input dataset.\n        feature_i (int): Index of the feature to use for division.\n        threshold (float): Threshold to compare the feature value against.\n        \n    Returns:\n        list: Two lists containing the subsets of the dataset.\n    \"\"\"\n    condition = X[:, feature_i] >= threshold\n    left_subset = X[condition].tolist()\n    right_subset = X[~condition].tolist()\n    return (left_subset, right_subset)"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    (n_samples, n_features) = X.shape\n    features = []\n    for d in range(1, degree + 1):\n        for indices in combinations_with_replacement(range(n_features), d):\n            feature = np.prod(X[:, indices], axis=1)\n            features.append(feature)\n    return np.column_stack(features).tolist()"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    \"\"\"\n    Generate random subsets of a given dataset.\n\n    Parameters:\n    - X (np.ndarray): 2D feature matrix.\n    - y (np.ndarray): 1D label vector.\n    - n_subsets (int): Number of subsets to generate.\n    - replacements (bool): Whether to sample with replacement.\n    - seed (int): Random seed for reproducibility.\n\n    Returns:\n    - List of tuples: Each tuple is (X_subset, y_subset) as Python lists.\n    \"\"\"\n    np.random.seed(seed)\n    n_samples = X.shape[0]\n    result = []\n    for _ in range(n_subsets):\n        if replacements:\n            indices = np.random.choice(n_samples, size=n_samples, replace=True)\n        else:\n            indices = np.random.permutation(n_samples)\n        X_subset = X[indices]\n        y_subset = y[indices]\n        result.append((X_subset.tolist(), y_subset.tolist()))\n    return result"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    if n_col is None:\n        n_col = np.max(x) + 1 if x.size > 0 else 0\n    if x.size == 0:\n        return np.zeros((0, n_col), dtype=int).tolist()\n    categorical = np.zeros((x.size, n_col), dtype=int)\n    categorical[np.arange(x.size), x] = 1\n    return categorical.tolist()"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    diagonal_matrix = np.diag(x)\n    return diagonal_matrix.tolist()"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    \"\"\"\n    Calculate the accuracy score between true labels and predicted labels.\n    \n    Parameters:\n    y_true (np.ndarray): 1D array of true labels.\n    y_pred (np.ndarray): 1D array of predicted labels.\n    \n    Returns:\n    float: Accuracy score rounded to 4 decimal places.\n    \"\"\"\n    if y_true.shape != y_pred.shape:\n        raise ValueError('y_true and y_pred must be the same shape.')\n    correct = np.sum(y_true == y_pred)\n    total = y_true.shape[0]\n    accuracy = correct / total\n    return round(accuracy, 4)"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    \"\"\"\n    Calculate the correlation matrix between X and Y (or X with itself if Y is not provided).\n    \n    Parameters:\n    X (np.ndarray): A 2D numpy array (n_samples, n_features).\n    Y (np.ndarray, optional): A 2D numpy array (n_samples, m_features). Defaults to X.\n    \n    Returns:\n    list: Correlation matrix rounded to 4 decimal places as a nested Python list.\n    \"\"\"\n    if Y is None:\n        Y = X\n    X_centered = X - np.mean(X, axis=0)\n    Y_centered = Y - np.mean(Y, axis=0)\n    std_X = np.std(X, ddof=0, axis=0)\n    std_Y = np.std(Y, ddof=0, axis=0)\n    covariance_matrix = np.dot(X_centered.T, Y_centered) / X.shape[0]\n    correlation_matrix = covariance_matrix / np.outer(std_X, std_Y)\n    return np.round(correlation_matrix, 4).tolist()"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_fit(X, y, n_clf):\n    (n_samples, n_features) = X.shape\n    D = np.ones(n_samples) / n_samples\n    classifiers = []\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_feature = best_threshold = best_direction = None\n        best_predictions = None\n        for feature in range(n_features):\n            values = X[:, feature]\n            unique_vals = np.unique(values)\n            thresholds = (unique_vals[:-1] + unique_vals[1:]) / 2\n            for threshold in thresholds:\n                for direction in [1, -1]:\n                    predictions = np.where(values * direction > threshold * direction, 1, -1)\n                    error = np.sum(D * (predictions != y))\n                    if error < best_error:\n                        best_error = error\n                        best_feature = feature\n                        best_threshold = threshold\n                        best_direction = direction\n                        best_predictions = predictions\n        epsilon = best_error\n        alpha = 0.5 * np.log((1 - epsilon) / (epsilon + 1e-10))\n        D *= np.exp(-alpha * y * best_predictions)\n        D /= np.sum(D)\n        classifiers.append({'feature': best_feature, 'threshold': round(best_threshold, 4), 'direction': best_direction, 'alpha': round(alpha, 4)})\n    return classifiers\nX = np.array([[1.0, 2.0], [2.0, 3.0], [3.0, 2.0], [4.0, 5.0]])\ny = np.array([1, 1, -1, -1])\nclassifiers = adaboost_fit(X, y, n_clf=2)"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list):\n    scores = np.array(scores)\n    scores -= np.max(scores)\n    exp_scores = np.exp(scores)\n    log_softmax_values = scores - np.log(np.sum(exp_scores))\n    return np.round(log_softmax_values, 4).tolist()"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport copy\nimport math\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.param_optimizers = dict()\n\n    def initialize(self, optimizer):\n        input_size = self.input_shape[0]\n        limit = 1 / math.sqrt(input_size)\n        self.W = np.random.uniform(-limit, limit, size=(input_size, self.n_units))\n        self.w0 = np.zeros((self.n_units,))\n        self.param_optimizers['W'] = copy.copy(optimizer)\n        self.param_optimizers['w0'] = copy.copy(optimizer)\n\n    def parameters(self):\n        return self.W.size + self.w0.size\n\n    def forward_pass(self, X, training=True):\n        self.layer_input = X\n        output = np.dot(X, self.W) + self.w0\n        return output\n\n    def backward_pass(self, accum_grad):\n        X = self.layer_input\n        grad_W = np.dot(X.T, accum_grad)\n        grad_w0 = np.sum(accum_grad, axis=0)\n        grad_input = np.dot(accum_grad, self.W.T)\n        if self.trainable:\n            self.W = self.param_optimizers['W'].update(self.W, grad_W)\n            self.w0 = self.param_optimizers['w0'].update(self.w0, grad_w0)\n        return grad_input\n\n    def output_shape(self):\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    \"\"\"\n    Perform 2D convolution on an input matrix with given kernel, padding, and stride.\n\n    Parameters:\n        input_matrix (np.ndarray): 2D input array (image).\n        kernel (np.ndarray): 2D convolution kernel.\n        padding (int): Number of zero-padding layers to add on each side.\n        stride (int): Step size for moving the kernel over the input.\n\n    Returns:\n        list: 2D feature map as a list (rounded to 4 decimal places).\n    \"\"\"\n    input_padded = np.pad(input_matrix, ((padding, padding), (padding, padding)), mode='constant')\n    (in_height, in_width) = input_matrix.shape\n    (k_height, k_width) = kernel.shape\n    out_height = (in_height - k_height + 2 * padding) // stride + 1\n    out_width = (in_width - k_width + 2 * padding) // stride + 1\n    output = np.zeros((out_height, out_width))\n    for i in range(out_height):\n        for j in range(out_width):\n            h_start = i * stride\n            w_start = j * stride\n            h_end = h_start + k_height\n            w_end = w_start + k_width\n            region = input_padded[h_start:h_end, w_start:w_end]\n            output[i, j] = np.sum(region * kernel)\n    output = np.round(output, decimals=4)\n    return output.tolist()"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    return max(0, z)"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    \"\"\"\n    Compute the Ridge Regression loss.\n\n    Parameters:\n    - X: 2D numpy array (n_samples x n_features) representing the feature matrix.\n    - w: 1D numpy array (n_features) representing the model coefficients.\n    - y_true: 1D numpy array (n_samples) representing the true target values.\n    - alpha: float, the regularization parameter.\n\n    Returns:\n    - float: The Ridge loss rounded to 4 decimal places.\n    \"\"\"\n    y_pred = X @ w\n    mse = np.mean((y_true - y_pred) ** 2)\n    l2_penalty = alpha * np.sum(w ** 2)\n    loss = mse + l2_penalty\n    return round(loss, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float:\n    \"\"\"\n    Applies the Leaky Rectified Linear Unit (Leaky ReLU) activation function.\n\n    Parameters:\n    - z (float): Input value.\n    - alpha (float): Slope for negative values. Default is 0.01.\n\n    Returns:\n    - float: Output after applying Leaky ReLU.\n    \"\"\"\n    if z > 0:\n        return z\n    else:\n        return alpha * z"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    \"\"\"\n    Computes the linear kernel (dot product) between two input vectors x1 and x2.\n\n    Parameters:\n    x1 (np.ndarray): First input vector.\n    x2 (np.ndarray): Second input vector.\n\n    Returns:\n    float: The dot product of x1 and x2.\n    \"\"\"\n    return np.dot(x1, x2)"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    \"\"\"\n    Calculate the precision metric for binary classification.\n    \n    Parameters:\n    y_true (np.ndarray): True binary labels (0 or 1).\n    y_pred (np.ndarray): Predicted binary labels (0 or 1).\n    \n    Returns:\n    float: Precision score\n    \"\"\"\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    true_positives = np.sum((y_true == 1) & (y_pred == 1))\n    false_positives = np.sum((y_true == 0) & (y_pred == 1))\n    if true_positives + false_positives == 0:\n        return 0.0\n    return true_positives / (true_positives + false_positives)"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    \"\"\"\n    Perform gradient descent using specified method (batch, stochastic, or mini-batch).\n    \n    Parameters:\n    X (np.ndarray): Input features (n_samples, n_features)\n    y (np.ndarray): Target variable (n_samples,)\n    weights (np.ndarray): Initial weights (n_features,)\n    learning_rate (float): Learning rate for the update step\n    n_iterations (int): Number of iterations for gradient descent\n    batch_size (int): Number of samples per batch (for mini-batch only)\n    method (str): 'batch', 'stochastic', or 'mini-batch'\n    \n    Returns:\n    weights (list): Final weights after training, rounded to 4 decimals\n    loss_history (list): MSE loss at each iteration, rounded to 4 decimals\n    \"\"\"\n    n_samples = X.shape[0]\n    loss_history = []\n    y = y.reshape(-1, 1)\n    for _ in range(n_iterations):\n        if method in ['stochastic', 'mini-batch']:\n            indices = np.random.permutation(n_samples)\n            X_shuffled = X[indices]\n            y_shuffled = y[indices]\n        else:\n            X_shuffled = X\n            y_shuffled = y\n        if method == 'batch':\n            batch_indices = [np.arange(n_samples)]\n        elif method == 'stochastic':\n            batch_indices = [np.array([i]) for i in range(n_samples)]\n        else:\n            batch_indices = [np.arange(i, min(i + batch_size, n_samples)) for i in range(0, n_samples, batch_size)]\n        for batch_idx in batch_indices:\n            X_batch = X_shuffled[batch_idx]\n            y_batch = y_shuffled[batch_idx]\n            y_pred = X_batch @ weights\n            gradient = 2 / batch_idx.size * X_batch.T @ (y_pred - y_batch)\n            weights -= learning_rate * gradient\n            loss = np.mean((y_batch - y_pred) ** 2)\n            loss_history.append(np.round(loss, 4))\n        if method in ['batch', 'mini-batch']:\n            break\n    return (weights.tolist(), [np.round(loss, 4) for loss in loss_history])"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    \"\"\"\n    Convert a given matrix to its Reduced Row Echelon Form (RREF).\n    \n    Parameters:\n    matrix (list of lists): A 2D list representing the matrix.\n    \n    Returns:\n    list of lists: The matrix in RREF.\n    \"\"\"\n    matrix = np.array(matrix, dtype=float)\n    (rows, cols) = matrix.shape\n    r = 0\n    for c in range(cols):\n        if r >= rows:\n            break\n        pivot_row = None\n        for i in range(r, rows):\n            if matrix[i, c] != 0:\n                pivot_row = i\n                break\n        if pivot_row is None:\n            continue\n        matrix[[r, pivot_row]] = matrix[[pivot_row, r]]\n        matrix[r] = matrix[r] / matrix[r, c]\n        for i in range(rows):\n            if i != r and matrix[i, c] != 0:\n                matrix[i] = matrix[i] - matrix[i, c] * matrix[r]\n        r += 1\n    non_zero_rows = [i for i in range(rows) if np.any(matrix[i] != 0)]\n    zero_rows = [i for i in range(rows) if np.all(matrix[i] == 0)]\n    ordered_indices = non_zero_rows + zero_rows\n    sorted_matrix = matrix[ordered_indices]\n    return sorted_matrix.tolist()"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=10):\n    \"\"\"\n    Implements the Adam optimization algorithm.\n    \n    Parameters:\n    - f: Objective function to be optimized\n    - grad: Function that computes the gradient of `f`\n    - x0: Initial parameter values\n    - learning_rate: Step size (default: 0.001)\n    - beta1: Exponential decay rate for the first moment estimates (default: 0.9)\n    - beta2: Exponential decay rate for the second moment estimates (default: 0.999)\n    - epsilon: Small constant for numerical stability (default: 1e-8)\n    - num_iterations: Number of iterations to run the optimizer (default: 10)\n    \n    Returns:\n    - Optimized parameters (as a list)\n    \"\"\"\n    x = np.array(x0, dtype=np.float64)\n    m = np.zeros_like(x)\n    v = np.zeros_like(x)\n    t = 0\n    for _ in range(num_iterations):\n        t += 1\n        g = np.array(grad(x))\n        m = beta1 * m + (1 - beta1) * g\n        v = beta2 * v + (1 - beta2) * g ** 2\n        m_hat = m / (1 - beta1 ** t)\n        v_hat = v / (1 - beta2 ** t)\n        x -= learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    return np.round(x, 4).tolist()"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    \"\"\"\n    Perform Lasso Regression using Gradient Descent with L1 regularization.\n    \n    Parameters:\n    - X: np.array, feature matrix of shape (n_samples, n_features)\n    - y: np.array, target vector of shape (n_samples,)\n    - alpha: float, L1 regularization strength\n    - learning_rate: float, step size for gradient descent\n    - max_iter: int, maximum number of iterations\n    - tol: float, convergence tolerance\n    \n    Returns:\n    - w: np.array, optimized weights of shape (n_features,)\n    - b: float, optimized bias (intercept)\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    w = np.zeros(n_features)\n    b = 0.0\n    for _ in range(max_iter):\n        y_pred = np.dot(X, w) + b\n        dw = -1 / n_samples * np.dot(X.T, y - y_pred) + alpha * np.sign(w)\n        db = -1 / n_samples * np.sum(y - y_pred)\n        prev_w = np.copy(w)\n        w -= learning_rate * dw\n        b -= learning_rate * db\n        if np.linalg.norm(w - prev_w) < tol:\n            break\n    w = np.round(w, 4)\n    b = round(b, 4)\n    return (w.tolist(), b)\nX = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\ny = np.array([2, 3, 4, 5])"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    (m, n) = (len(source), len(target))\n    dp = np.zeros((m + 1, n + 1), dtype=int)\n    for i in range(m + 1):\n        dp[i][0] = i\n    for j in range(n + 1):\n        dp[0][j] = j\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if source[i - 1] == target[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                sub_cost = dp[i - 1][j - 1]\n                del_ins_cost = min(dp[i - 1][j], dp[i][j - 1])\n                trans_cost = float('inf')\n                if i >= 2 and j >= 2 and (source[i - 2] == target[j - 1]) and (source[i - 1] == target[j - 2]):\n                    trans_cost = dp[i - 2][j - 2]\n                dp[i][j] = min(sub_cost, del_ins_cost, trans_cost) + 1\n    return dp[m][n]"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    \"\"\"\n    Calculate the recall metric for binary classification.\n    \n    Recall = TP / (TP + FN)\n    \n    Parameters:\n    - y_true: List of true binary labels (0 or 1).\n    - y_pred: List of predicted binary labels (0 or 1).\n    \n    Returns:\n    - Recall value rounded to three decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    TP = np.sum((y_true == 1) & (y_pred == 1))\n    FN = np.sum((y_true == 1) & (y_pred == 0))\n    if TP + FN == 0:\n        return 0.0\n    else:\n        return round(TP / (TP + FN), 3)"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    \"\"\"\n    Implements the self-attention mechanism.\n\n    Parameters:\n    - X: Input array of shape (sequence_length, input_dim)\n    - W_q: Query weight matrix of shape (input_dim, d_k)\n    - W_k: Key weight matrix of shape (input_dim, d_k)\n    - W_v: Value weight matrix of shape (input_dim, d_v)\n\n    Returns:\n    - attention_output: Self-attention output as a Python list (rounded to 4 decimals)\n    \"\"\"\n    Q = X @ W_q\n    K = X @ W_k\n    V = X @ W_v\n    d_k = K.shape[1]\n    scores = Q @ K.T / np.sqrt(d_k)\n    exp_scores = np.exp(scores)\n    attention_weights = exp_scores / exp_scores.sum(axis=1, keepdims=True)\n    attention_output = attention_weights @ V\n    return np.round(attention_output, 4).tolist()"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    h_prev = np.array(initial_hidden_state)\n    Wx = np.array(Wx)\n    Wh = np.array(Wh)\n    b = np.array(b)\n    for x in input_sequence:\n        x_t = np.array(x)\n        h_prev = np.tanh(np.dot(Wx, x_t) + np.dot(Wh, h_prev) + b)\n    return np.round(h_prev, 4).tolist()"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    points_array = np.array(points)\n    translated_points = points_array + [tx, ty]\n    return translated_points.tolist()"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    Compute the KL divergence between two univariate normal distributions:\n    P ~ N(mu_p, sigma_p^2) and Q ~ N(mu_q, sigma_q^2).\n    \n    Parameters:\n    mu_p (float): Mean of distribution P\n    sigma_p (float): Standard deviation of distribution P\n    mu_q (float): Mean of distribution Q\n    sigma_q (float): Standard deviation of distribution Q\n    \n    Returns:\n    float: The KL divergence D_KL(P || Q)\n    \"\"\"\n    return np.log(sigma_q / sigma_p) + (sigma_p ** 2 + (mu_p - mu_q) ** 2) / (2 * sigma_q ** 2) - 0.5"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    \"\"\"\n    Solves the system of linear equations Ax = b using the Gauss-Seidel method.\n\n    Parameters:\n    - A: Square matrix of coefficients (2D numpy array or list of lists)\n    - b: Right-hand side vector (1D numpy array or list)\n    - n: Number of iterations\n    - x_ini: Optional initial guess for x (default is a zero vector)\n\n    Returns:\n    - x: Approximated solution vector after `n` iterations (rounded to 4 decimals)\n    \"\"\"\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    m = len(b)\n    if x_ini is None:\n        x = np.zeros(m, dtype=float)\n    else:\n        x = np.array(x_ini, dtype=float)\n    for _ in range(n):\n        for i in range(m):\n            s1 = np.dot(A[i, :i], x[:i])\n            s2 = np.dot(A[i, i + 1:], x[i + 1:])\n            x[i] = (b[i] - s1 - s2) / A[i, i]\n    x_rounded = np.round(x, 4)\n    return x_rounded.tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    \"\"\"\n    Solves the linear system Ax = b using Gaussian Elimination with partial pivoting.\n    \n    Parameters:\n    A (list of lists): Coefficient matrix.\n    b (list): Right-hand side vector.\n    \n    Returns:\n    list: Solution vector x, rounded to 4 decimal places.\n    \"\"\"\n    n = len(b)\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    for i in range(n):\n        max_row = i + np.argmax(np.abs(A[i:, i]))\n        A[[i, max_row]] = A[[max_row, i]]\n        b[[i, max_row]] = b[[max_row, i]]\n        for j in range(i + 1, n):\n            factor = A[j, i] / A[i, i]\n            A[j] = A[j] - factor * A[i]\n            b[j] = b[j] - factor * b[i]\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        x[i] = b[i] / A[i, i]\n        for j in range(i + 1, n):\n            x[i] -= A[i, j] * x[j]\n    return np.round(x, 4).tolist()"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \"\"\"\n        hidden_states = []\n        cell_states = []\n        h_prev = initial_hidden_state\n        c_prev = initial_cell_state\n        for t in range(x.shape[1]):\n            x_t = x[:, t].reshape(-1, 1)\n            xh = np.concatenate((x_t, h_prev), axis=0)\n            f = self.sigmoid(np.dot(self.Wf, xh) + self.bf)\n            i = self.sigmoid(np.dot(self.Wi, xh) + self.bi)\n            c_tilde = np.tanh(np.dot(self.Wc, xh) + self.bc)\n            c = f * c_prev + i * c_tilde\n            o = self.sigmoid(np.dot(self.Wo, xh) + self.bo)\n            h = o * np.tanh(c)\n            hidden_states.append(h)\n            cell_states.append(c)\n            h_prev = h\n            c_prev = c\n        hidden_states = np.array(hidden_states)\n        cell_states = np.array(cell_states)\n        hidden_states = np.around(hidden_states, 4).tolist()\n        final_hidden_state = np.around(h_prev, 4).tolist()\n        final_cell_state = np.around(c_prev, 4).tolist()\n        return (hidden_states, final_hidden_state, final_cell_state)\n\n    def sigmoid(self, x):\n        return 1 / (1 + np.exp(-x))"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\ndef compute_tf_idf(corpus, query):\n    if not corpus:\n        raise ValueError('The corpus cannot be empty.')\n    vocabulary = set()\n    for doc in corpus:\n        vocabulary.update(doc)\n    vocabulary.update(query)\n    vocabulary = sorted(list(vocabulary))\n    tf_matrix = np.zeros((len(corpus), len(vocabulary)))\n    for (i, doc) in enumerate(corpus):\n        if not doc:\n            continue\n        word_counts = {}\n        total_words = len(doc)\n        for word in doc:\n            word_counts[word] = word_counts.get(word, 0) + 1\n        for (j, term) in enumerate(vocabulary):\n            tf = word_counts.get(term, 0) / total_words if total_words > 0 else 0\n            tf_matrix[i, j] = tf\n    df = np.zeros(len(vocabulary))\n    for (j, term) in enumerate(vocabulary):\n        count = 0\n        for doc in corpus:\n            if term in doc:\n                count += 1\n        df[j] = np.log((len(corpus) + 1) / (count + 1))\n    tf_idf = tf_matrix * df\n    tf_idf_rounded = np.round(tf_idf, 4)\n    return tf_idf_rounded.tolist()\ncorpus = [['this', 'is', 'the', 'first', 'document'], ['this', 'document', 'is', 'the', 'second', 'document'], ['and', 'this', 'is', 'the', 'third', 'one']]\nquery = ['this', 'document', 'is']"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fp = np.sum((y_true == 0) & (y_pred == 1))\n    fn = np.sum((y_true == 1) & (y_pred == 0))\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0\n    f_score = (1 + beta ** 2) * precision * recall / (beta ** 2 * precision + recall)\n    return round(f_score, 3)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, x):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n        \n        Args:\n            x: Input sequence, shape (input_size, sequence_length)\n            \n        Returns:\n            outputs: Output sequence, shape (output_size, sequence_length)\n            last_inputs: The last input (for backpropagation)\n            last_hiddens: The last hidden state (for backpropagation)\n        \"\"\"\n        hidden_size = self.hidden_size\n        sequence_length = x.shape[1]\n        h = np.zeros((hidden_size, sequence_length))\n        outputs = np.zeros((self.W_hy.shape[0], sequence_length))\n        h_prev = np.zeros((hidden_size, 1))\n        for t in range(sequence_length):\n            x_t = x[:, t].reshape(-1, 1)\n            h_t = np.tanh(np.dot(self.W_xh, x_t) + np.dot(self.W_hh, h_prev) + self.b_h)\n            y_t = np.dot(self.W_hy, h_t) + self.b_y\n            h[:, t] = h_t[:, 0]\n            outputs[:, t] = y_t[:, 0]\n            h_prev = h_t.copy()\n        return (outputs, x, h)\n\n    def backward(self, x, y, outputs, last_inputs, last_hiddens, learning_rate=0.01):\n        \"\"\"\n        Backward pass using BPTT.\n        \n        Args:\n            x: Input sequence, shape (input_size, sequence_length)\n            y: Target sequence, shape (output_size, sequence_length)\n            outputs: Predicted outputs from forward pass\n            last_inputs: The input sequence (used as reference for backprop)\n            last_hiddens: The hidden states from forward pass\n            learning_rate: Learning rate for weight updates\n            \n        Returns:\n            loss: Total loss (sum of squared errors)\n        \"\"\"\n        sequence_length = x.shape[1]\n        input_size = x.shape[0]\n        hidden_size = self.hidden_size\n        output_size = self.W_hy.shape[0]\n        dW_xh = np.zeros_like(self.W_xh)\n        dW_hh = np.zeros_like(self.W_hh)\n        dW_hy = np.zeros_like(self.W_hy)\n        db_h = np.zeros_like(self.b_h)\n        db_y = np.zeros_like(self.b_y)\n        dh_next = np.zeros((hidden_size, 1))\n        loss = 0\n        for t in reversed(range(sequence_length)):\n            x_t = x[:, t].reshape(-1, 1)\n            h_t = last_hiddens[:, t].reshape(-1, 1)\n            y_t = outputs[:, t].reshape(-1, 1)\n            y_hat_t = y[:, t].reshape(-1, 1)\n            dy = y_hat_t - y_t\n            loss += 0.5 * np.sum(dy ** 2)\n            dW_hy += np.dot(dy, h_t.T)\n            db_y += dy\n            dh = np.dot(self.W_hy.T, dy) + dh_next\n            dh_raw = (1 - h_t ** 2) * dh\n            dW_xh += np.dot(dh_raw, x_t.T)\n            dW_hh += np.dot(dh_raw, h_prev.T)\n            db_h += dh_raw\n            dh_next = dh_raw\n            if t > 0:\n                h_prev = last_hiddens[:, t - 1].reshape(-1, 1)\n            else:\n                h_prev = np.zeros((hidden_size, 1))\n        self.W_xh -= learning_rate * dW_xh\n        self.W_hh -= learning_rate * dW_hh\n        self.W_hy -= learning_rate * dW_hy\n        self.b_h -= learning_rate * db_h\n        self.b_y -= learning_rate * db_y\n        return loss\n\n    def train(self, input_sequence, expected_output, learning_rate=0.01):\n        \"\"\"\n        Performs a forward and backward pass for training.\n        \n        Args:\n            input_sequence: Input sequence to train on, shape (input_size, sequence_length)\n            expected_output: Expected output sequence, shape (output_size, sequence_length)\n            learning_rate: Learning rate for weight updates\n            \n        Returns:\n            loss: Total loss for this training step\n        \"\"\"\n        (outputs, last_inputs, last_hiddens) = self.forward(input_sequence)\n        loss = self.backward(input_sequence, expected_output, outputs, last_inputs, last_hiddens, learning_rate)\n        return loss\n\n    def predict(self, x):\n        \"\"\"\n        Predict the output sequence for a given input sequence.\n        \n        Args:\n            x: Input sequence, shape (input_size, sequence_length)\n            \n        Returns:\n            output: Predicted output sequence, shape (output_size, sequence_length)\n        \"\"\"\n        return self.forward(x)[0]"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol: float=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x (rounded to 8 decimal places and converted to a list)\n    \"\"\"\n    m = len(b)\n    if x0 is None:\n        x = np.zeros(m)\n    else:\n        x = x0.copy()\n    r = b - A @ x\n    p = r.copy()\n    rs_old = r @ r\n    for i in range(n):\n        Ap = A @ p\n        alpha = rs_old / (p @ Ap)\n        x = x + alpha * p\n        r = r - alpha * Ap\n        rs_new = r @ r\n        if np.sqrt(rs_new) < tol:\n            break\n        beta = rs_new / rs_old\n        p = r + beta * p\n        rs_old = rs_new\n    return np.round(x, 8).tolist()"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef gini_impurity(y: List[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    if not y:\n        return 0.0\n    counts = np.bincount(y)\n    probabilities = counts / len(y)\n    gini = 1 - np.sum(probabilities ** 2)\n    return round(gini, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    values = []\n    column_indices = []\n    row_pointer = [0]\n    for row in dense_matrix:\n        count = 0\n        for (col_index, value) in enumerate(row):\n            if value != 0:\n                values.append(value)\n                column_indices.append(col_index)\n                count += 1\n        row_pointer.append(row_pointer[-1] + count)\n    return (values, column_indices, row_pointer)"}
{"task_id": 66, "completion_id": 0, "solution": "def orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n\n    def dot_product(a, b):\n        return sum((ai * bi for (ai, bi) in zip(a, b)))\n    dot_vL = dot_product(v, L)\n    dot_LL = dot_product(L, L)\n    scale = dot_vL / dot_LL\n    projection = [round(scale * li, 3) for li in L]\n    return projection"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    if not dense_matrix or not dense_matrix[0]:\n        return ([], [], [])\n    num_rows = len(dense_matrix)\n    num_cols = len(dense_matrix[0])\n    values = []\n    row_indices = []\n    col_ptr = [0]\n    for col in range(num_cols):\n        for row in range(num_rows):\n            val = dense_matrix[row][col]\n            if val != 0:\n                values.append(val)\n                row_indices.append(row)\n        col_ptr.append(len(values))\n    return (values, row_indices, col_ptr)"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    \"\"\"\n    Compute the column space (image) of a matrix A.\n    \n    Parameters:\n        A (np.ndarray): Input matrix.\n    \n    Returns:\n        list: Basis vectors of the column space as a list of lists.\n    \"\"\"\n    A = np.array(A, dtype=float)\n    (n_rows, n_cols) = A.shape\n    mat = A.copy()\n    pivot_cols = []\n    pivot_indices = []\n    for col in range(n_cols):\n        pivot_row = None\n        for row in range(col, n_rows):\n            if abs(mat[row, col]) > 1e-10:\n                pivot_row = row\n                break\n        if pivot_row is None:\n            continue\n        mat[[col, pivot_row]] = mat[[pivot_row, col]]\n        pivot_val = mat[col, col]\n        mat[col, :] /= pivot_val\n        for row in range(col + 1, n_rows):\n            factor = mat[row, col]\n            mat[row, :] -= factor * mat[col, :]\n        pivot_cols.append(col)\n        pivot_indices.append(col)\n    image_basis = A[:, pivot_cols]\n    return np.round(image_basis, 8).tolist()"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    mean_y_true = np.mean(y_true)\n    ss_total = np.sum((y_true - mean_y_true) ** 2)\n    ss_residual = np.sum((y_true - y_pred) ** 2)\n    r2 = 1 - ss_residual / ss_total\n    return round(r2, 3)"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    if not img:\n        return -1\n    rows = len(img)\n    cols = len(img[0])\n    for row in img:\n        if len(row) != cols:\n            return -1\n    total_pixels = rows * cols\n    total_brightness = 0\n    for row in img:\n        for pixel in row:\n            if not 0 <= pixel <= 255:\n                return -1\n            total_brightness += pixel\n    average = total_brightness / total_pixels\n    return round(average, 2)"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    \"\"\"\n    Calculate the Root Mean Square Error (RMSE) between two arrays.\n    \n    Parameters:\n    y_true (array-like): A list or array of actual values.\n    y_pred (array-like): A list or array of predicted values.\n    \n    Returns:\n    float: RMSE rounded to three decimal places.\n    \n    Raises:\n    ValueError: If inputs are not of the same length or are empty.\n    TypeError: If inputs are not list-like or contain non-numeric values.\n    \"\"\"\n    try:\n        y_true = np.array(y_true, dtype=np.float64)\n        y_pred = np.array(y_pred, dtype=np.float64)\n    except (ValueError, TypeError) as e:\n        raise TypeError('Both y_true and y_pred must be array-like and contain numeric values.') from e\n    if len(y_true) == 0 or len(y_pred) == 0:\n        raise ValueError('Input arrays cannot be empty.')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Input arrays must have the same shape.')\n    squared_errors = (y_true - y_pred) ** 2\n    mean_squared_error = np.mean(squared_errors)\n    root_mean_squared_error = np.sqrt(mean_squared_error)\n    return round(root_mean_squared_error, 3)"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    \"\"\"\n    Calculate the Jaccard Index between two binary arrays y_true and y_pred.\n\n    Parameters:\n    y_true (np.ndarray or list): Ground truth binary labels.\n    y_pred (np.ndarray or list): Predicted binary labels.\n\n    Returns:\n    float: Jaccard Index rounded to three decimal places.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    intersection = np.sum(np.logical_and(y_true, y_pred))\n    union = np.sum(np.logical_or(y_true, y_pred))\n    if union == 0:\n        return 1.0\n    jaccard = intersection / union\n    return round(jaccard, 3)"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    \"\"\"\n    Calculate the Dice Score (S\u00f8rensen-Dice coefficient or F1-score) between two binary arrays.\n    \n    Parameters:\n    - y_true: numpy array of true binary labels (0 or 1)\n    - y_pred: numpy array of predicted binary labels (0 or 1)\n    \n    Returns:\n    - float: Dice score rounded to 3 decimal places\n    \"\"\"\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    intersection = np.sum(y_true * y_pred)\n    sum_true_pred = np.sum(y_true) + np.sum(y_pred)\n    if sum_true_pred == 0:\n        return 1.0 if intersection == 0 else 0.0\n    score = 2.0 * intersection / sum_true_pred\n    return round(score, 3)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef create_row_hv(row, dim, random_seeds):\n    \"\"\"\n    Generate a composite hypervector for a dataset row using Hyperdimensional Computing (HDC).\n    \n    Each feature in the row is represented by binding a hypervector for the feature name\n    with a hypervector for the feature value. All feature hypervectors are bundled \n    to form the composite hypervector for the row.\n\n    Parameters:\n    - row: dict, A dictionary representing a dataset row.\n    - dim: int, The dimensionality of the hypervectors.\n    - random_seeds: dict, A dictionary mapping feature names to random seeds.\n    \n    Returns:\n    - A list representing the composite hypervector of the row.\n    \"\"\"\n    composite_hv = np.zeros(dim)\n    for (feature, value) in row.items():\n        if feature not in random_seeds:\n            raise ValueError(f'No random seed provided for feature: {feature}')\n        np.random.seed(random_seeds[feature])\n        feature_hv = np.random.choice([-1, 1], size=dim)\n        value_hv = np.random.choice([-1, 1], size=dim)\n        bound_hv = feature_hv * value_hv\n        composite_hv += bound_hv\n    composite_hv = np.sign(composite_hv)\n    return composite_hv.tolist()"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    matrix = [[0, 0], [0, 0]]\n    for (y_true, y_pred) in data:\n        if y_true == 0 and y_pred == 0:\n            matrix[0][0] += 1\n        elif y_true == 0 and y_pred == 1:\n            matrix[0][1] += 1\n        elif y_true == 1 and y_pred == 0:\n            matrix[1][0] += 1\n        elif y_true == 1 and y_pred == 1:\n            matrix[1][1] += 1\n    return matrix"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    v1 = np.array(v1)\n    v2 = np.array(v2)\n    if v1.shape != v2.shape:\n        raise ValueError('Input vectors must have the same shape.')\n    if np.linalg.norm(v1) == 0 or np.linalg.norm(v2) == 0:\n        raise ValueError('Input vectors must not have zero magnitude.')\n    dot_product = np.dot(v1, v2)\n    magnitude_v1 = np.linalg.norm(v1)\n    magnitude_v2 = np.linalg.norm(v2)\n    similarity = dot_product / (magnitude_v1 * magnitude_v2)\n    return round(similarity, 3)"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    if len(actual) != len(predicted):\n        raise ValueError(\"The 'actual' and 'predicted' lists must have the same length.\")\n    for label in actual + predicted:\n        if label not in {0, 1}:\n            raise ValueError(\"All elements in 'actual' and 'predicted' must be either 0 or 1.\")\n    tp = sum((a == 1 and p == 1 for (a, p) in zip(actual, predicted)))\n    tn = sum((a == 0 and p == 0 for (a, p) in zip(actual, predicted)))\n    fp = sum((a == 0 and p == 1 for (a, p) in zip(actual, predicted)))\n    fn = sum((a == 1 and p == 0 for (a, p) in zip(actual, predicted)))\n    confusion_matrix = [[tn, fp], [fn, tp]]\n    accuracy = (tp + tn) / (tp + tn + fp + fn) if tp + tn + fp + fn > 0 else 0.0\n    accuracy = round(accuracy, 3)\n    precision = tp / (tp + fp) if tp + fp > 0 else 0.0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0.0\n    f1_score = 2 * (precision * recall) / (precision + recall) if precision + recall > 0 else 0.0\n    f1_score = round(f1_score, 3)\n    specificity = tn / (tn + fp) if tn + fp > 0 else 0.0\n    specificity = round(specificity, 3)\n    npv = tn / (tn + fn) if tn + fn > 0 else 0.0\n    negative_predictive_value = round(npv, 3)\n    return (confusion_matrix, accuracy, f1_score, specificity, negative_predictive_value)"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\ndef descriptive_statistics(data):\n    data = np.array(data)\n    mean = np.mean(data)\n    median = np.median(data)\n    (values, counts) = np.unique(data, return_counts=True)\n    max_count = np.max(counts)\n    modes = values[counts == max_count]\n    mode = modes[0]\n    variance = np.var(data, ddof=0)\n    standard_deviation = np.std(data, ddof=0)\n    percentiles = np.percentile(data, [25, 50, 75])\n    (p25, p50, p75) = percentiles\n    iqr = p75 - p25\n    result = {'mean': round(mean, 4), 'median': round(median, 4), 'mode': mode, 'variance': round(variance, 4), 'standard_deviation': round(standard_deviation, 4), '25th_percentile': round(p25, 4), '50th_percentile': round(p50, 4), '75th_percentile': round(p75, 4), 'interquartile_range': round(iqr, 4)}\n    return result"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials\n    \"\"\"\n    comb = math.comb(n, k)\n    probability = comb * p ** k * (1 - p) ** (n - k)\n    return round(probability, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    :return: PDF value rounded to 5 decimal places.\n    \"\"\"\n    coefficient = 1 / (std_dev * math.sqrt(2 * math.pi))\n    exponent = -(x - mean) ** 2 / (2 * std_dev ** 2)\n    pdf_value = coefficient * math.exp(exponent)\n    return round(pdf_value, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    \"\"\"\n    probability = math.exp(-lam) * lam ** k / math.factorial(k)\n    return round(probability, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        int: The contrast of the image, defined as the difference between the maximum and minimum pixel values.\n    \"\"\"\n    if img.ndim != 2:\n        raise ValueError('Input image must be a 2D array (grayscale image).')\n    max_pixel = np.max(img)\n    min_pixel = np.min(img)\n    return max_pixel - min_pixel"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    Returns:\n        float: The dot product of the two vectors.\n    \"\"\"\n    return np.dot(vec1, vec2)"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n    \"\"\"\n    if degree < 0:\n        return []\n    transformed_data = []\n    for point in data:\n        features = []\n        for d in range(1, degree + 1):\n            features.append(round(point ** d, 8))\n        transformed_data.append(features)\n    return transformed_data"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    if position == 0 or d_model <= 0:\n        return -1\n    pe = np.zeros((position, d_model), dtype=np.float16)\n    for pos in range(position):\n        for i in range(0, d_model, 2):\n            if i + 1 <= d_model:\n                div_term = 10000 ** (i / d_model)\n                pe[pos, i] = np.sin(pos / div_term)\n                if i + 1 < d_model:\n                    pe[pos, i + 1] = np.cos(pos / div_term)\n    return pe.tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    if training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    parameter = parameter - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    return (np.round(parameter, 5).tolist(), np.round(m, 5).tolist(), np.round(v, 5).tolist())"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    token_ids = encoder.encode(prompt)\n    context_size = hparams['n_ctx']\n    if len(token_ids) > context_size:\n        token_ids = token_ids[-context_size:]\n    for _ in range(n_tokens_to_generate):\n        seq_len = len(token_ids)\n        if seq_len >= context_size:\n            token_ids = token_ids[-context_size + 1:]\n            seq_len = len(token_ids)\n        token_embeddings = params['wte'][token_ids, :]\n        positional_embeddings = params['wpe'][:seq_len, :]\n        x = token_embeddings + positional_embeddings\n        mean = np.mean(x, axis=-1, keepdims=True)\n        var = np.var(x, axis=-1, keepdims=True)\n        x = (x - mean) / np.sqrt(var + 1e-08)\n        x = x * params['ln_f']['g'][np.newaxis, :] + params['ln_f']['b'][np.newaxis, :]\n        logits = x[-1]\n        probs = np.exp(logits) / np.sum(np.exp(logits))\n        next_token_id = np.random.choice(len(probs), p=probs)\n        token_ids.append(next_token_id)\n    return encoder.decode(token_ids)"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        exp_values = np.exp(values - np.max(values, axis=1, keepdims=True))\n        return exp_values / np.sum(exp_values, axis=1, keepdims=True)\n    Q = np.array(crystal_values).reshape(n, -1)\n    K = Q.copy()\n    V = Q.copy()\n    scores = Q @ K.T\n    attention_weights = softmax(scores)\n    output = attention_weights @ V\n    final_output = [float(np.round(x, 4)) for x in output.flatten()]\n    return final_output\nn = 3"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    corpus_terms = [Counter(doc.lower().split()) for doc in corpus]\n    query_terms = Counter(query.lower().split())\n    N = len(corpus)\n    total_terms = sum((len(doc.split()) for doc in corpus))\n    avgdl = total_terms / N\n    scores = np.zeros(N)\n    for (term, q_freq) in query_terms.items():\n        df = sum((1 for doc in corpus_terms if term in doc))\n        idf = np.log((N - df + 0.5) / (df + 0.5) + 1)\n        for (doc_idx, doc) in enumerate(corpus_terms):\n            tf = doc.get(term, 0)\n            doc_len = len(corpus[doc_idx].split())\n            numerator = tf * (k1 + 1)\n            denominator = tf + k1 * (1 - b + b * doc_len / avgdl)\n            scores[doc_idx] += idf * numerator / denominator\n    return [round(score, 3) for score in scores]\ncorpus = ['information retrieval is an important field in computer science', 'BM25 is a ranking function used in information retrieval', 'retrieval systems need to be efficient and accurate']"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        raise ValueError('The lengths of y_true and y_pred must be the same.')\n    tp = 0\n    fp = 0\n    tn = 0\n    fn = 0\n    for (true, pred) in zip(y_true, y_pred):\n        if true == 1 and pred == 1:\n            tp += 1\n        elif true == 0 and pred == 1:\n            fp += 1\n        elif true == 0 and pred == 0:\n            tn += 1\n        elif true == 1 and pred == 0:\n            fn += 1\n    precision = tp / (tp + fp) if tp + fp > 0 else 0.0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0.0\n    f1_score = 2 * (precision * recall) / (precision + recall) if precision + recall > 0 else 0.0\n    return round(f1_score, 3)\ny_true = [1, 0, 1, 1, 0, 1]\ny_pred = [1, 0, 1, 0, 0, 1]"}
{"task_id": 92, "completion_id": 0, "solution": "import math\ndef power_grid_forecast(consumption_data):\n    \"\"\"\n    Forecasts the power consumption for day 15 with a safety margin,\n    after removing the daily sine fluctuation and fitting a linear model.\n    \n    Args:\n        consumption_data (list of float): 10-day power consumption data.\n        \n    Returns:\n        int: Rounded power consumption for day 15 including the fluctuation and a 5% safety margin.\n    \"\"\"\n    detrended = []\n    for i in range(1, 11):\n        fluctuation = 10 * math.sin(2 * math.pi * i / 10)\n        detrended.append(consumption_data[i - 1] - fluctuation)\n    n = len(detrended)\n    x = list(range(1, n + 1))\n    y = detrended\n    sum_x = sum(x)\n    sum_y = sum(y)\n    sum_xy = sum([xi * yi for (xi, yi) in zip(x, y)])\n    sum_x2 = sum([xi ** 2 for xi in x])\n    m = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x ** 2)\n    b = (sum_y - m * sum_x) / n\n    base_day15 = m * 15 + b\n    fluctuation_day15 = 10 * math.sin(2 * math.pi * 15 / 10)\n    total_day15 = base_day15 + fluctuation_day15\n    safety_margin = total_day15 * 1.05\n    final_forecast = math.ceil(safety_margin)\n    return final_forecast\nconsumption_data = [120, 130, 140, 150, 160, 170, 180, 190, 200, 210]"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    absolute_errors = np.abs(y_true - y_pred)\n    mean_error = np.mean(absolute_errors)\n    return round(mean_error, 3)"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Perform scaled dot-product attention.\n    \n    Args:\n        Q: Query matrix of shape (n_samples, d_k)\n        K: Key matrix of shape (n_samples, d_k)\n        V: Value matrix of shape (n_samples, d_v)\n    \n    Returns:\n        Output of attention of shape (n_samples, d_v)\n    \"\"\"\n    d_k = Q.shape[1]\n    scores = Q @ K.T / np.sqrt(d_k)\n    weights = np.softmax(scores, axis=1)\n    output = weights @ V\n    return output\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Multi-head attention mechanism.\n    \n    Args:\n        X: Input data of shape (n_samples, input_dim)\n        W_q, W_k, W_v: Weight matrices for Q, K, V transformations\n        n_heads: Number of attention heads\n    \n    Returns:\n        Concatenated attention outputs, rounded to 4 decimal points and converted to list.\n    \"\"\"\n    d_k = W_q.shape[1]\n    head_dim = d_k // n_heads\n    W_q_heads = np.split(W_q, n_heads, axis=1)\n    W_k_heads = np.split(W_k, n_heads, axis=1)\n    W_v_heads = np.split(W_v, n_heads, axis=1)\n    outputs = []\n    for i in range(n_heads):\n        W_q_i = W_q_heads[i]\n        W_k_i = W_k_heads[i]\n        W_v_i = W_v_heads[i]\n        Q_i = X @ W_q_i\n        K_i = X @ W_k_i\n        V_i = X @ W_v_i\n        attention_i = self_attention(Q_i, K_i, V_i)\n        outputs.append(attention_i)\n    output = np.hstack(outputs)\n    return np.round(output, 4).tolist()"}
{"task_id": 95, "completion_id": 0, "solution": "def phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError('The lists x and y must be of the same length.')\n    n11 = sum((1 for (a, b) in zip(x, y) if a == 1 and b == 1))\n    n10 = sum((1 for (a, b) in zip(x, y) if a == 1 and b == 0))\n    n01 = sum((1 for (a, b) in zip(x, y) if a == 0 and b == 1))\n    n00 = sum((1 for (a, b) in zip(x, y) if a == 0 and b == 0))\n    n = len(x)\n    numerator = n11 * n00 - n10 * n01\n    denominator = (n11 + n10) * (n11 + n01) * (n00 + n10) * (n00 + n01)\n    if denominator == 0:\n        return 0.0\n    phi = numerator / denominator ** 0.5\n    return round(phi, 4)"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    if x <= -2.5:\n        return 0.0\n    elif x >= 2.5:\n        return 1.0\n    else:\n        return 0.2 * x + 0.5"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value, rounded to the 4th decimal place\n    \"\"\"\n    if x > 0:\n        return round(x, 4)\n    else:\n        return round(alpha * (math.exp(x) - 1), 4)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    if x > 0:\n        return x\n    else:\n        return alpha * x"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x)\n    \"\"\"\n    if x > 100:\n        result = x\n    elif x < -100:\n        result = math.exp(x)\n    else:\n        result = math.log1p(math.exp(x))\n    return round(result, 4)"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input, rounded to 4 decimal places\n    \"\"\"\n    result = x / (1 + abs(x))\n    return round(result, 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    rhos = np.array(rhos)\n    A = np.array(A)\n    pi_theta_old = np.array(pi_theta_old)\n    pi_theta_ref = np.array(pi_theta_ref)\n    rho_clipped = np.clip(rhos, a_min=1 - epsilon, a_max=1 + epsilon)\n    L_unclipped = rhos * A\n    L_clipped = rho_clipped * A\n    L = np.minimum(L_unclipped, L_clipped)\n    kl = np.sum(pi_theta_old * np.log(pi_theta_old / pi_theta_ref))\n    objective_value = np.mean(L - beta * kl)\n    return round(objective_value, 6)"}
{"task_id": 102, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value, rounded to 4 decimal places\n    \"\"\"\n    return round(x / (1 + math.exp(-x)), 4)"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value, rounded to 4 decimal places\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x > 0:\n        result = scale * x\n    else:\n        result = scale * alpha * (math.exp(x) - 1)\n    return round(result, 4)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00d7 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    z = np.dot(X, weights) + bias\n    probabilities = 1 / (1 + np.exp(-z))\n    predictions = (probabilities >= 0.5).astype(int)\n    return predictions.tolist()"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Args:\n        X: np.ndarray of shape (N, M), input data (N samples, M features)\n        y: np.ndarray of shape (N,), class labels (0-based)\n        learning_rate: float, learning rate for gradient descent\n        iterations: int, number of iterations for training\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of Cross Entropy rounded to 4 floating points\n    \"\"\"\n    (N, M) = X.shape\n    C = len(np.unique(y))\n    y_onehot = np.zeros((N, C))\n    y_onehot[np.arange(N), y] = 1\n    np.random.seed(42)\n    B = np.random.randn(M, C) * 0.01\n    losses = []\n    for _ in range(iterations):\n        scores = X @ B\n        exp_scores = np.exp(scores - np.max(scores, axis=1, keepdims=True))\n        probs = exp_scores / exp_scores.sum(axis=1, keepdims=True)\n        log_likelihood = -np.log(probs[np.arange(N), y])\n        loss = np.mean(log_likelihood)\n        losses.append(np.round(loss, 4))\n        grad = X.T @ (probs - y_onehot) / N\n        B -= learning_rate * grad\n    B_rounded = np.round(B, 4).tolist()\n    losses_rounded = np.round(losses, 4).tolist()\n    return (B_rounded, losses_rounded)"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \n    Parameters:\n        X (np.ndarray): Input feature matrix of shape (n_samples, n_features)\n        y (np.ndarray): Target vector of shape (n_samples,)\n        learning_rate (float): Learning rate for gradient descent\n        iterations (int): Number of iterations for training\n    \n    Returns:\n        tuple: A tuple containing:\n            - list[float]: Optimized coefficients (including intercept)\n            - list[float]: Loss values after each iteration (rounded to 4th decimal)\n    \"\"\"\n    X_b = np.c_[np.ones(X.shape[0]), X]\n    weights = np.zeros(X_b.shape[1])\n    losses = []\n    for _ in range(iterations):\n        z = np.dot(X_b, weights)\n        y_pred = 1 / (1 + np.exp(-z))\n        epsilon = 1e-15\n        y_pred_clipped = np.clip(y_pred, epsilon, 1 - epsilon)\n        loss = -np.mean(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped))\n        losses.append(round(loss, 4))\n        gradient = np.dot(X_b.T, y_pred - y) / X_b.shape[0]\n        weights -= learning_rate * gradient\n    weights = np.round(weights, 4).tolist()\n    losses = np.round(losses, 4).tolist()\n    return (weights, losses)"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \n    Parameters:\n    - Q, K, V: Query, Key, Value matrices of shape (seq_len, d_k/d_v)\n    - mask: Attention mask of shape (seq_len, seq_len), where 0 = no attention, 1 = attend to\n    \n    Returns:\n    - Output of masked attention of shape (seq_len, d_v)\n    \"\"\"\n    d_k = K.shape[1]\n    scores = np.dot(Q, K.T) / np.sqrt(d_k)\n    scores = np.where(mask == 0, -np.inf, scores)\n    exp_scores = np.exp(scores)\n    exp_scores = np.where(mask == 0, 0, exp_scores)\n    attention_weights = exp_scores / (exp_scores.sum(axis=1, keepdims=True) + 1e-08)\n    output = np.dot(attention_weights, V)\n    return output.tolist()"}
{"task_id": 108, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    The disorder is computed using Shannon entropy and is normalized by log2(n),\n    where n is the number of apples. The result is rounded to 4 decimal places.\n    \"\"\"\n    n = len(apples)\n    if n == 0:\n        return 0.0\n    counts = Counter(apples)\n    entropy = 0.0\n    for count in counts.values():\n        prob = count / n\n        entropy -= prob * math.log2(prob)\n    max_entropy = math.log2(n) if n > 0 else 0.0\n    normalized_entropy = entropy / max_entropy if max_entropy > 0 else 0.0\n    return round(normalized_entropy, 4)"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Perform Layer Normalization on the input tensor.\n\n    Parameters:\n        X (np.ndarray): Input tensor of shape (batch_size, sequence_length, features)\n        gamma (np.ndarray): Scale parameter of shape (features,)\n        beta (np.ndarray): Shift parameter of shape (features,)\n        epsilon (float): Small value to prevent division by zero.\n\n    Returns:\n        np.ndarray: Normalized tensor, rounded to 5 decimal places and converted to list.\n    \"\"\"\n    mean = np.mean(X, axis=-1, keepdims=True)\n    variance = np.var(X, axis=-1, keepdims=True)\n    X_normalized = (X - mean) / np.sqrt(variance + epsilon)\n    X_scaled = gamma * X_normalized + beta\n    return np.round(X_scaled, 5).tolist()"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\nfrom math import exp\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    \"\"\"\n    Computes the METEOR score between a reference and a candidate translation.\n    \n    Parameters:\n    - reference (str): the reference translation.\n    - candidate (str): the candidate translation.\n    - alpha (float): weight of the F-mean score (between precision and recall).\n    - beta (float): penalty factor for word order fragmentation.\n    - gamma (float): weight of the fragmentation penalty.\n    \n    Returns:\n    - float: the METEOR score rounded to 3 decimal places.\n    \"\"\"\n    ref_words = reference.lower().split()\n    can_words = candidate.lower().split()\n    ref_set = set(ref_words)\n    can_set = set(can_words)\n    matches = ref_set.intersection(can_set)\n    num_matches = len(matches)\n    if num_matches == 0:\n        return 0.0\n    precision = num_matches / len(can_set)\n    recall = num_matches / len(ref_set)\n    f_mean = precision * recall / (alpha * precision + (1 - alpha) * recall)\n    f_mean = f_mean / (1 - alpha * (1 - f_mean))\n\n    def get_positions(words, word):\n        return [i for (i, w) in enumerate(words) if w == word]\n    fragmentation = 0\n    for word in matches:\n        ref_positions = get_positions(ref_words, word)\n        can_positions = get_positions(can_words, word)\n        for r_pos in ref_positions:\n            for c_pos in can_positions:\n                if abs(r_pos - c_pos) > 1:\n                    fragmentation += 1\n    fragmentation = fragmentation / num_matches if num_matches > 0 else 0\n    meteor_score = f_mean * (1 - gamma * fragmentation)\n    return round(meteor_score, 3)"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    \"\"\"\n    Compute the Pointwise Mutual Information (PMI) between two events.\n\n    Parameters:\n    - joint_counts (int): Number of times both events occur together.\n    - total_counts_x (int): Total occurrences of event x.\n    - total_counts_y (int): Total occurrences of event y.\n    - total_samples (int): Total number of samples in the context.\n\n    Returns:\n    - float: PMI value rounded to 3 decimal places.\n    \"\"\"\n    p_xy = joint_counts / total_samples\n    p_x = total_counts_x / total_samples\n    p_y = total_counts_y / total_samples\n    epsilon = 1e-12\n    pmi = np.log((p_xy + epsilon) / ((p_x + epsilon) * (p_y + epsilon)))\n    return round(pmi, 3)"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    if not x:\n        return []\n    min_val = min(x)\n    max_val = max(x)\n    if min_val == max_val:\n        return [0.0 for _ in x]\n    normalized = [(val - min_val) / (max_val - min_val) for val in x]\n    return [round(val, 4) for val in normalized]"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    z1 = np.dot(x, w1)\n    a1 = np.maximum(0, z1)\n    z2 = np.dot(a1, w2)\n    out = z2 + x\n    output = np.maximum(0, out)\n    return np.round(output, 4).tolist()"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray):\n    \"\"\"\n    Perform Global Average Pooling on a 3D NumPy array.\n\n    Parameters:\n    x (np.ndarray): Input array of shape (height, width, channels)\n\n    Returns:\n    np.ndarray: 1D array of shape (channels,), where each element is the average of\n                the corresponding feature map.\n    \"\"\"\n    if x.ndim != 3:\n        raise ValueError('Input must be a 3D array of shape (height, width, channels).')\n    (height, width, channels) = x.shape\n    avg = np.zeros(channels)\n    for c in range(channels):\n        avg[c] = np.mean(x[:, :, c])\n    return avg"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Perform Batch Normalization on a 4D input array in BCHW format.\n\n    Parameters:\n    - X (np.ndarray): Input array of shape (Batch, Channels, Height, Width)\n    - gamma (np.ndarray): Scale parameters of shape (Channels,)\n    - beta (np.ndarray): Shift parameters of shape (Channels,)\n    - epsilon (float): Small value for numerical stability\n\n    Returns:\n    - np.ndarray: Normalized output rounded to 4 decimal places\n    \"\"\"\n    (B, C, H, W) = X.shape\n    X_flat = X.transpose(0, 2, 3, 1).reshape(-1, C)\n    mean = X_flat.mean(axis=0)\n    var = X_flat.var(axis=0)\n    X_norm_flat = (X_flat - mean) / np.sqrt(var + epsilon)\n    X_norm = X_norm_flat.reshape(B, H, W, C).transpose(0, 3, 1, 2)\n    X_out = gamma[None, :, None, None] * X_norm + beta[None, :, None, None]\n    return np.round(X_out, 4).tolist()"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    \"\"\"\n    Compute the derivative of the polynomial term c * x^n at a given point x.\n    \n    Parameters:\n    c (float): Coefficient of the term.\n    x (float): Point at which to evaluate the derivative.\n    n (float): Exponent of the term.\n    \n    Returns:\n    float: The value of the derivative at point x, rounded to 4 decimal places.\n    \"\"\"\n    derivative = c * n * x ** (n - 1)\n    return round(derivative, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10):\n    vectors = np.array(vectors)\n    basis = []\n    for v in vectors:\n        v_orth = v.copy()\n        for u in basis:\n            v_orth = v_orth - np.dot(v, u) * u\n        norm = np.linalg.norm(v_orth)\n        if norm > tol:\n            u = v_orth / norm\n            basis.append(u)\n    return [np.round(u, 4).tolist() for u in basis]"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    result = np.cross(a, b)\n    return np.round(result, 4).tolist()"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    \"\"\"\n    Solves the system of linear equations Ax = b using Cramer's Rule.\n    \n    Parameters:\n        A (list of lists or np.ndarray): Square coefficient matrix.\n        b (list or np.ndarray): Constant vector.\n    \n    Returns:\n        list: Solution vector x rounded to 4 decimal places.\n        -1: If the system has no unique solution (det(A) == 0).\n    \"\"\"\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    if A.shape[0] != A.shape[1]:\n        return -1\n    if b.shape != (A.shape[0],):\n        return -1\n    det_A = np.linalg.det(A)\n    if abs(det_A) < 1e-10:\n        return -1\n    n = A.shape[0]\n    x = []\n    for i in range(n):\n        A_i = A.copy()\n        A_i[:, i] = b\n        det_Ai = np.linalg.det(A_i)\n        x_i = det_Ai / det_A\n        x.append(round(x_i, 4))\n    return x"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    \"\"\"\n    Calculate the Bhattacharyya distance between two discrete probability distributions.\n\n    Parameters:\n    p (list[float]): First probability distribution.\n    q (list[float]): Second probability distribution.\n\n    Returns:\n    float: Bhattacharyya distance between p and q, rounded to 4 decimal places.\n           Returns 0.0 if inputs are empty or not of equal length.\n    \"\"\"\n    if not p or not q or len(p) != len(q):\n        return 0.0\n    p = np.array(p, dtype=np.float64)\n    q = np.array(q, dtype=np.float64)\n    p = p / np.sum(p)\n    q = q / np.sum(q)\n    bc = np.sum(np.sqrt(p * q))\n    distance = -np.log(bc)\n    return round(distance, 4)\np = [0.1, 0.4, 0.5]\nq = [0.2, 0.3, 0.5]"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float]:\n    if len(a) != len(b):\n        return -1\n    return [x + y for (x, y) in zip(a, b)]"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    (num_states, num_actions) = theta.shape\n    gradient = np.zeros_like(theta)\n    total_timesteps = 0\n    for episode in episodes:\n        G = 0\n        for t in reversed(range(len(episode))):\n            (state, action, reward) = episode[t]\n            G += reward\n            exp_theta = np.exp(theta[state, :])\n            pi = exp_theta / np.sum(exp_theta)\n            log_pi = np.log(pi[action])\n            grad_log_pi = np.zeros((num_actions,))\n            grad_log_pi[action] = 1 - pi[action]\n            for a in range(num_actions):\n                if a != action:\n                    grad_log_pi[a] = -pi[a]\n            gradient[state] += (log_pi * grad_log_pi).reshape(-1)\n        total_timesteps += len(episode)\n    if total_timesteps > 0:\n        gradient /= total_timesteps\n    gradient = np.round(gradient, 4)\n    return gradient.tolist()\ntheta = np.array([[1.0, 0.5, 0.1], [0.3, 1.2, 0.9], [0.7, 0.8, 1.1]])\nepisodes = [[(0, 0, 1.0), (1, 2, 0.5), (2, 1, -0.2)], [(0, 1, 0.8), (1, 0, 0.3), (2, 2, 0.4)], [(0, 2, -0.5), (1, 1, 1.0), (2, 0, 0.1)]]"}
{"task_id": 123, "completion_id": 0, "solution": "def compute_efficiency(n_experts, k_active, d_in, d_out):\n    flops_per_expert = d_in * d_out\n    flops_moe = k_active * flops_per_expert\n    flops_dense = n_experts * flops_per_expert\n    savings_percentage = (flops_dense - flops_moe) / flops_dense * 100\n    flops_moe_rounded = round(flops_moe, 1)\n    flops_dense_rounded = round(flops_dense, 1)\n    savings_percentage_rounded = round(savings_percentage, 1)\n    return (flops_moe_rounded, flops_dense_rounded, savings_percentage_rounded)"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    \"\"\"\n    Computes the Noisy Top-k Gating Function used in MoE models.\n\n    Parameters:\n    - X: Input matrix (batch_size x input_dim)\n    - W_g: Gating weights matrix (input_dim x num_experts)\n    - W_noise: Noise weights matrix (input_dim x num_experts)\n    - N: Pre-sampled noise matrix (batch_size x num_Experts)\n    - k: Sparsity constraint (number of experts to select)\n\n    Returns:\n    - List of final gating probabilities after rounding and reshaping.\n    \"\"\"\n    (batch_size, num_experts) = N.shape\n    gate_logits = X @ W_g\n    noise_logits = N @ W_noise.T\n    noisy_logits = gate_logits + noise_logits\n    gate_probs_noisy = np.exp(noisy_logits - np.max(noisy_logits, axis=1, keepdims=True))\n    gate_probs_noisy /= np.sum(gate_probs_noisy, axis=1, keepdims=True)\n    (topk_values, topk_indices) = zip(*[np.topk(row, k, axis=0) for row in gate_probs_noisy])\n    topk_indices = np.stack(topk_indices, axis=0)\n    topk_values = np.stack(topk_values, axis=0)\n    topk_values /= np.sum(topk_values, axis=1, keepdims=True)\n    final_gate_probs = np.zeros_like(gate_probs_noisy)\n    for i in range(batch_size):\n        final_gate_probs[i, topk_indices[i]] = topk_values[i]\n    final_gate_probs_rounded = np.round(final_gate_probs, 4)\n    return final_gate_probs_rounded.tolist()"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int) -> list:\n    \"\"\"\n    Mixture-of-Experts (MoE) layer with softmax gating and top-k routing.\n\n    Parameters:\n        x (np.ndarray): Input tensor of shape (batch_size, input_dim)\n        We (np.ndarray): Expert weights of shape (n_experts, input_dim, output_dim)\n        Wg (np.ndarray): Gating weights of shape (input_dim, n_experts)\n        n_experts (int): Number of experts\n        top_k (int): Number of top experts to select per token\n\n    Returns:\n        list: Mixture-of-Experts output as a Python list, rounded to 4 decimal places\n    \"\"\"\n    batch_size = x.shape[0]\n    input_dim = x.shape[1]\n    output_dim = We.shape[2]\n    gate_logits = x @ Wg\n    gate_scores = np.softmax(gate_logits, axis=1)\n    topk_indices = np.argsort(gate_scores, axis=1)[:, -top_k:][:, ::-1]\n    moe_output = np.zeros((batch_size, output_dim))\n    for i in range(batch_size):\n        top_experts = topk_indices[i]\n        top_scores = gate_scores[i, top_experts]\n        top_scores = top_scores / np.sum(top_scores)\n        for j in range(top_k):\n            expert_idx = top_experts[j]\n            expert_weight = We[expert_idx]\n            token_input = x[i]\n            expert_output = token_input @ expert_weight\n            moe_output[i] += top_scores[j] * expert_output\n    return np.round(moe_output, 4).tolist()\nx = np.array([[1.0, 2.0, 3.0]])\nWe = np.array([[[0.1, 0.2], [0.3, 0.4]], [[0.5, 0.6], [0.7, 0.8]], [[0.9, 1.0], [1.1, 1.2]]])\nWg = np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]])\ntop_k = 2"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    \"\"\"\n    Perform Group Normalization on a 4D input tensor.\n    \n    Parameters:\n    - X: Input tensor of shape (B, C, H, W)\n    - gamma: Scale parameter (learned) of shape (C,)\n    - beta: Shift parameter (learned) of shape (C,)\n    - num_groups: Number of groups to split the channels into\n    - epsilon: A small value for numerical stability\n\n    Returns:\n    - Normalized output as a Python list with values rounded to 4 decimal places.\n    \"\"\"\n    (B, C, H, W) = X.shape\n    X = X.reshape(B, num_groups, C // num_groups, H, W)\n    mean = np.mean(X, axis=(2, 3, 4), keepdims=True)\n    var = np.var(X, axis=(2, 3, 4), keepdims=True)\n    X_normalized = (X - mean) / np.sqrt(var + epsilon)\n    X_normalized = X_normalized.reshape(B, C, H, W)\n    gamma = gamma.reshape(1, C, 1, 1)\n    beta = beta.reshape(1, C, 1, 1)\n    X_output = gamma * X_normalized + beta\n    return np.round(X_output, 4).tolist()"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n    x = start_x\n    for i in range(max_iters):\n        df_dx = 4 * x ** 3 - 9 * x ** 2\n        x_new = x - learning_rate * df_dx\n        if abs(x_new - x) < tolerance:\n            break\n        x = x_new\n    return round(x, 4)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    \"\"\"\n    Applies the Dynamic Tanh (DyT) activation function to the input array.\n    \n    Parameters:\n    - x (np.ndarray): Input array.\n    - alpha (float): Scaling factor.\n    - gamma (float): Scaling factor for mean.\n    - beta (float): Centering offset.\n    \n    Returns:\n    - list[float]: Output after applying Dynamic Tanh, rounded to 4 decimal places.\n    \"\"\"\n    mean_x = np.mean(x)\n    std_x = np.std(x)\n    transformed_x = alpha * np.tanh((x - gamma * mean_x) / (std_x + 1e-08)) + beta\n    result = np.round(transformed_x, 4).tolist()\n    return result"}
