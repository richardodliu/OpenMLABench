{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    if len(a) == 0 or len(a[0]) != len(b):\n        return -1\n    result = []\n    for row in a:\n        dot_product = sum((x * y for (x, y) in zip(row, b)))\n        result.append(dot_product)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    rows = len(a)\n    cols = len(a[0]) if rows > 0 else 0\n    transposed = [[0] * rows for _ in range(cols)]\n    for i in range(rows):\n        for j in range(cols):\n            transposed[j][i] = a[i][j]\n    return transposed"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    arr = np.array(a)\n    original_shape = arr.shape\n    total_elements = original_shape[0] * original_shape[1]\n    new_total = new_shape[0] * new_shape[1]\n    if total_elements != new_total:\n        return []\n    reshaped = arr.reshape(new_shape)\n    return reshaped.tolist()"}
{"task_id": 4, "completion_id": 0, "solution": "def calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    if mode == 'row':\n        return [sum(row) / len(row) for row in matrix]\n    elif mode == 'column':\n        num_columns = len(matrix[0]) if matrix else 0\n        return [sum((matrix[row][col] for row in range(len(matrix)))) / len(matrix) for col in range(num_columns)]\n    else:\n        raise ValueError(\"Mode must be either 'row' or 'column'\")"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    \"\"\"\n    Multiplies a matrix by a scalar and returns the resulting matrix.\n    \n    Args:\n        matrix: A 2D list of integers or floats representing the matrix.\n        scalar: A number to multiply each element of the matrix by.\n    \n    Returns:\n        The resulting matrix after scalar multiplication.\n    \"\"\"\n    return [[element * scalar for element in row] for row in matrix]"}
{"task_id": 6, "completion_id": 0, "solution": "def calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    \"\"\"\n    Calculate the eigenvalues of a 2x2 matrix and return them sorted in descending order.\n    \n    Args:\n        matrix: A 2x2 list of lists containing float or int values.\n        \n    Returns:\n        A list of eigenvalues sorted from highest to lowest.\n    \"\"\"\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    trace = a + d\n    determinant = a * d - b * c\n    discriminant = trace ** 2 - 4 * determinant\n    sqrt_discriminant = discriminant ** 0.5\n    eigenvalue1 = (trace + sqrt_discriminant) / 2\n    eigenvalue2 = (trace - sqrt_discriminant) / 2\n    return [eigenvalue1, eigenvalue2] if eigenvalue1 >= eigenvalue2 else [eigenvalue2, eigenvalue1]\nmatrix = [[4, 2], [1, 3]]"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    try:\n        A_np = np.array(A, dtype=float)\n        T_np = np.array(T, dtype=float)\n        S_np = np.array(S, dtype=float)\n        if T_np.shape[0] != T_np.shape[1] or S_np.shape[0] != S_np.shape[1]:\n            return -1\n        if A_np.shape[1] != T_np.shape[0] or A_np.shape[0] != S_np.shape[1]:\n            return -1\n        if np.round(np.linalg.det(T_np), 4) == 0 or np.round(np.linalg.det(S_np), 4) == 0:\n            return -1\n        T_inv = np.linalg.inv(T_np)\n        result = T_inv @ A_np @ S_np\n        result_rounded = np.round(result, 4)\n        return result_rounded.tolist()\n    except np.linalg.LinAlgError:\n        return -1\nA = [[1, 2], [3, 4]]\nT = [[2, 0], [0, 2]]\nS = [[1, 1], [0, 1]]"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    if len(matrix) != 2 or len(matrix[0]) != 2 or len(matrix[1]) != 2:\n        raise ValueError('Input matrix must be a 2x2 matrix.')\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    determinant = a * d - b * c\n    if determinant == 0:\n        return None\n    inv_matrix = [[d / determinant, -b / determinant], [-c / determinant, a / determinant]]\n    return inv_matrix"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    rows_a = len(a)\n    cols_a = len(a[0]) if rows_a > 0 else 0\n    rows_b = len(b)\n    cols_b = len(b[0]) if rows_b > 0 else 0\n    if cols_a != rows_b:\n        return -1\n    result = [[0] * cols_b for _ in range(rows_a)]\n    for i in range(rows_a):\n        for j in range(cols_b):\n            for k in range(cols_a):\n                result[i][j] += a[i][k] * b[k][j]\n    return result\na = [[1, 2], [3, 4]]\nb = [[5, 6], [7, 8]]\nresult = matrixmul(a, b)"}
{"task_id": 10, "completion_id": 0, "solution": "def calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    \"\"\"\n    Calculate the covariance matrix for a list of feature vectors.\n    \n    Each inner list in `vectors` represents a feature with its observations.\n    The covariance matrix is returned as a list of lists.\n    \n    Parameters:\n        vectors (list[list[float]]): A list of vectors (each vector is a list of floats).\n    \n    Returns:\n        list[list[float]]: The covariance matrix.\n    \"\"\"\n    n_samples = len(vectors[0])\n    if not all((len(v) == n_samples for v in vectors)):\n        raise ValueError('All feature vectors must have the same number of samples.')\n    n_features = len(vectors)\n    covariance_matrix = [[0.0 for _ in range(n_features)] for _ in range(n_features)]\n    means = [sum(vector) / n_samples for vector in vectors]\n    for i in range(n_features):\n        for j in range(n_features):\n            covariance = 0.0\n            for k in range(n_samples):\n                covariance += (vectors[i][k] - means[i]) * (vectors[j][k] - means[j])\n            covariance_matrix[i][j] = covariance / (n_samples - 1)\n    return covariance_matrix"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    \"\"\"\n    Solves the system Ax = b using the Jacobi iterative method for n iterations.\n    Rounds each intermediate solution to 4 decimal places.\n\n    Parameters:\n        A: np.ndarray - Coefficient matrix.\n        b: np.ndarray - Right-hand side vector.\n        n: int - Number of iterations.\n\n    Returns:\n        list: Approximate solution x after n iterations, rounded to 4 decimal places.\n    \"\"\"\n    if not np.all(np.abs(np.diag(A)) > np.sum(np.abs(A), axis=1) - np.abs(np.diag(A))):\n        raise ValueError('Jacobi method may not converge. Matrix A is not diagonally dominant.')\n    x = np.zeros_like(b, dtype=float)\n    size = len(b)\n    for _ in range(n):\n        x_new = np.zeros_like(x)\n        for i in range(size):\n            s = np.sum((A[i, j] * x[j] for j in range(size) if j != i))\n            x_new[i] = (b[i] - s) / A[i, i]\n        x = np.round(x_new, 4)\n    return np.round(x, 4).tolist()\nA = np.array([[4, 1], [1, 3]])\nb = np.array([5, 4])\nn = 10"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    \"\"\"\n    Compute the singular values of a 2x2 matrix using the Jacobi method.\n    \n    Args:\n        A (np.ndarray): A 2x2 real-valued matrix.\n    \n    Returns:\n        tuple: A tuple of two singular values, rounded to four decimal places.\n    \"\"\"\n    A = np.asarray(A)\n    if A.shape != (2, 2):\n        raise ValueError('Matrix must be 2x2')\n    ATA = A.T @ A\n    (a, b) = (ATA[0, 0], ATA[0, 1])\n    (c, d) = (ATA[1, 0], ATA[1, 1])\n    eps = 1e-10\n    max_iter = 1000\n    tol = 1e-06\n    for _ in range(max_iter):\n        off = np.sqrt(b ** 2 + c ** 2) / 2\n        if off < tol:\n            break\n        t = (a - d) / (2 * b) if abs(b) > abs(c) else (a - d) / (2 * c)\n        if t == 0:\n            t = 1.0\n        theta = np.arctan(1 / t)\n        cos_theta = np.cos(theta)\n        sin_theta = np.sin(theta)\n        a_new = a * cos_theta ** 2 - 2 * b * sin_theta * cos_theta + d * sin_theta ** 2\n        b_new = (a - d) * sin_theta * cos_theta + b * (cos_theta ** 2 - sin_theta ** 2)\n        d_new = d * cos_theta ** 2 + 2 * b * sin_theta * cos_theta + a * sin_theta ** 2\n        (a, b, d) = (a_new, b_new, d_new)\n    singular_values = np.sort(np.sqrt([a, d]))[::-1]\n    return tuple(np.round(singular_values, 4))\nA = np.array([[1, 2], [3, 4]])"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n\n    def determinant_2x2(mat: list[list[int | float]]) -> float:\n        return mat[0][0] * mat[1][1] - mat[0][1] * mat[1][0]\n\n    def determinant_3x3(mat: list[list[int | float]]) -> float:\n        return mat[0][0] * mat[1][1] * mat[2][2] + mat[0][1] * mat[1][2] * mat[2][0] + mat[0][2] * mat[1][0] * mat[2][1] - mat[0][2] * mat[1][1] * mat[2][0] - mat[0][1] * mat[1][0] * mat[2][2] - mat[0][0] * mat[1][2] * mat[2][1]\n\n    def get_minor(mat: list[list[int | float]], row: int, col: int) -> list[list[int | float]]:\n        return [[mat[i][j] for j in range(len(mat)) if j != col] for i in range(len(mat)) if i != row]\n    det = 0.0\n    for col in range(4):\n        minor = get_minor(matrix, 0, col)\n        sign = (-1) ** col\n        det += sign * matrix[0][col] * determinant_3x3(minor)\n    return det"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    X_np = np.array(X)\n    y_np = np.array(y)\n    X_b = np.c_[np.ones((X_np.shape[0], 1)), X_np]\n    theta = np.linalg.inv(X_b.T @ X_b) @ X_b.T @ y_np\n    theta_rounded = np.round(theta, decimals=4)\n    return theta_rounded.tolist()\nX = [[1], [2], [3], [4], [5]]\ny = [2.1, 2.9, 4.1, 4.9, 6.2]"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> np.ndarray:\n    theta = np.zeros(X.shape[1])\n    m = len(y)\n    for _ in range(iterations):\n        predictions = X @ theta\n        error = predictions - y\n        gradient = 1 / m * X.T @ error\n        theta -= alpha * gradient\n    theta = np.round(theta, 4)\n    return theta.tolist()"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    \"\"\"\n    Performs feature scaling on a dataset using standardization and min-max normalization.\n    \n    Parameters:\n    data (np.ndarray): A 2D NumPy array where each row is a sample and each column is a feature.\n    \n    Returns:\n    tuple: Two 2D lists. The first is standardized data, the second is min-max normalized data.\n           Both are rounded to 4 decimal places and converted to lists.\n    \"\"\"\n    standardized = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    standardized = np.round(standardized, 4)\n    data_min = np.min(data, axis=0)\n    data_max = np.max(data, axis=0)\n    min_max_normalized = (data - data_min) / (data_max - data_min)\n    min_max_normalized = np.round(min_max_normalized, 4)\n    standardized_list = standardized.tolist()\n    min_max_list = min_max_normalized.tolist()\n    return (standardized_list, min_max_list)"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Tuple\ndef k_means_clustering(points: List[Tuple[float, float]], k: int, initial_centroids: List[Tuple[float, float]], max_iterations: int) -> List[Tuple[float, float]]:\n    \"\"\"\n    Perform k-Means clustering on the given points.\n\n    Args:\n        points: A list of points (tuples) in 2D space.\n        k: Number of clusters.\n        initial_centroids: Initial guesses for cluster centroids.\n        max_iterations: Maximum number of iterations to run.\n\n    Returns:\n        A list of final centroids, each rounded to 4 decimal places.\n    \"\"\"\n    points = np.array(points, dtype=np.float64)\n    centroids = np.array(initial_centroids, dtype=np.float64)\n    for _ in range(max_iterations):\n        distances = np.sqrt(((points[:, np.newaxis, :] - centroids[np.newaxis, :, :]) ** 2).sum(axis=2))\n        cluster_indices = np.argmin(distances, axis=1)\n        new_centroids = np.array([points[cluster_indices == i].mean(axis=0) for i in range(k)], dtype=np.float64)\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    return [tuple(np.round(centroid, 4)) for centroid in centroids]"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    \"\"\"\n    Generate train and test splits for K-Fold Cross-Validation.\n\n    Parameters:\n    - X (np.ndarray): Feature matrix of shape (n_samples, n_features)\n    - y (np.ndarray): Target vector of shape (n_samples,)\n    - k (int): Number of folds\n    - shuffle (bool): Whether to shuffle the data before splitting\n    - random_seed (int): Seed for random number generator (for reproducibility)\n\n    Returns:\n    - List of tuples: Each tuple contains (train_indices, test_indices)\n    \"\"\"\n    n_samples = X.shape[0]\n    indices = np.arange(n_samples)\n    if shuffle:\n        rng = np.random.RandomState(random_seed)\n        rng.shuffle(indices)\n    fold_size = n_samples // k\n    folds = []\n    for i in range(k):\n        start = i * fold_size\n        end = (i + 1) * fold_size if i < k - 1 else n_samples\n        test_indices = indices[start:end]\n        train_indices = np.concatenate((indices[:start], indices[end:]))\n        folds.append((train_indices, test_indices))\n    return folds"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    mean = np.mean(data, axis=0)\n    standardized_data = data - mean\n    covariance_matrix = np.cov(standardized_data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eig(covariance_matrix)\n    idx = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvectors = eigenvectors[:, idx]\n    principal_components = sorted_eigenvectors[:, :k]\n    rounded_components = np.round(principal_components, 4).tolist()\n    return rounded_components"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom typing import Any, Dict, List\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n    \"\"\"\n    Learns a decision tree using the ID3 algorithm based on entropy and information gain,\n    recursively splitting the data into binary branches.\n\n    Args:\n        examples (list[dict]): List of examples, each is a dictionary of attribute-value pairs.\n        attributes (list[str]): List of attribute names (excluding the target_attr).\n        target_attr (str): The name of the target attribute.\n\n    Returns:\n        dict: A nested dictionary representing the decision tree.\n    \"\"\"\n\n    def entropy(examples: list[dict]) -> float:\n        \"\"\"Calculate the entropy of the target attribute values in examples.\"\"\"\n        target_values = [e[target_attr] for e in examples]\n        counter = Counter(target_values)\n        total = len(examples)\n        return -sum((count / total * math.log2(count / total) for count in counter.values()))\n\n    def information_gain(examples: list[dict], attribute: str) -> float:\n        \"\"\"Calculate the information gain of using 'attribute' to split 'examples'.\"\"\"\n        base_entropy = entropy(examples)\n        values = set([e[attribute] for e in examples])\n        weighted_entropy = 0.0\n        for value in values:\n            subset = [e for e in examples if e[attribute] == value]\n            prob = len(subset) / len(examples)\n            weighted_entropy += prob * entropy(subset)\n        return base_entropy - weighted_entropy\n\n    def major_class(examples: list[dict]) -> Any:\n        \"\"\"Return the majority class of the target attribute in examples.\"\"\"\n        return Counter([e[target_attr] for e in examples]).most_common(1)[0][0]\n\n    def same_values(examples: list[dict]) -> bool:\n        \"\"\"Check if all examples have the same target attribute value.\"\"\"\n        first = examples[0][target_attr]\n        return all((e[target_attr] == first for e in examples))\n\n    def split_on_attribute(examples: list[dict], attribute: str) -> Dict[Any, list[dict]]:\n        \"\"\"Split examples into subsets based on each value of 'attribute'.\"\"\"\n        values = set([e[attribute] for e in examples])\n        return {val: [e for e in examples if e[attribute] == val] for val in values}\n    if not examples:\n        return {'class': major_class(examples)}\n    if same_values(examples):\n        return {'class': examples[0][target_attr]}\n    if not attributes:\n        return {'class': major_class(examples)}\n    best_attr = max(attributes, key=lambda a: information_gain(examples, a))\n    tree = {best_attr: {}}\n    remaining_attributes = [a for a in attributes if a != best_attr]\n    for (value, subset) in split_on_attribute(examples, best_attr).items():\n        subtree = learn_decision_tree(subset, remaining_attributes, target_attr)\n        tree[best_attr][value] = subtree\n    return tree"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    \"\"\"\n    Implements a deterministic version of the PEGASOS algorithm for Kernel SVM.\n\n    Parameters:\n    - data: 2D numpy array of shape (n_samples, n_features)\n    - labels: 1D numpy array of shape (n_samples,)\n    - kernel: 'linear' or 'rbf'\n    - lambda_val: regularization parameter\n    - iterations: number of training iterations\n    - sigma: bandwidth for RBF kernel\n\n    Returns:\n    - alpha: 1D numpy array of Lagrange multipliers (rounded to 4 decimals)\n    - bias: float (rounded to 4 decimals)\n    \"\"\"\n    n_samples = data.shape[0]\n    alpha = np.zeros(n_samples)\n    bias = 0\n    t = 1\n    for _ in range(iterations):\n        t += 1\n        eta = 1.0 / (lambda_val * t)\n\n        def kernel_func(x1, x2):\n            if kernel == 'linear':\n                return np.dot(x1, x2)\n            elif kernel == 'rbf':\n                return np.exp(-np.linalg.norm(x1 - x2) ** 2 / (2 * sigma ** 2))\n            else:\n                raise ValueError(\"Unsupported kernel type. Use 'linear' or 'rbf'.\")\n        K = np.zeros((n_samples, n_samples))\n        for i in range(n_samples):\n            for j in range(n_samples):\n                K[i, j] = kernel_func(data[i], data[j])\n        predictions = np.zeros(n_samples)\n        for i in range(n_samples):\n            for j in range(n_samples):\n                predictions[i] += alpha[j] * labels[j] * K[j, i]\n            predictions[i] += bias\n        margin = predictions * labels >= 1\n        grad_alpha = np.zeros(n_samples)\n        for i in range(n_samples):\n            if not margin[i]:\n                grad_alpha[i] += -labels[i] * K[i, :].dot(alpha * labels)\n        alpha -= eta * (lambda_val * alpha + 1 / n_samples * grad_alpha)\n        bias_update = (labels * predictions < 1).astype(float)\n        grad_bias = 1 / n_samples * bias_update @ labels\n        bias -= eta * grad_bias\n    alpha = np.round(alpha, 4)\n    bias = np.round(bias, 4)\n    return (alpha.tolist(), bias)"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    \"\"\"\n    Compute the sigmoid of the input value z.\n    \n    The sigmoid function is defined as:\n    sigmoid(z) = 1 / (1 + exp(-z))\n    \n    Args:\n        z (float): The input value.\n        \n    Returns:\n        float: The output of the sigmoid function rounded to 4 decimal places.\n    \"\"\"\n    result = 1 / (1 + math.exp(-z))\n    return round(result, 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    exp_scores = [math.exp(score) for score in scores]\n    sum_exp = sum(exp_scores)\n    softmax_scores = [round(score_exp / sum_exp, 4) for score_exp in exp_scores]\n    return softmax_scores"}
{"task_id": 24, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    features = np.array(features)\n    weights = np.array(weights)\n    linear_output = np.dot(features, weights) + bias\n    probabilities = 1.0 / (1.0 + np.exp(-linear_output))\n    probabilities = np.round(probabilities, 4)\n    probabilities_list = probabilities.tolist()\n    labels = np.array(labels)\n    error = np.mean((probabilities - labels) ** 2)\n    mse = round(error, 4)\n    return (probabilities_list, mse)"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n\n    def sigmoid(x):\n        return 1 / (1 + np.exp(-x))\n\n    def sigmoid_derivative(x):\n        return x * (1 - x)\n\n    def mse_loss(predictions, true_values):\n        return np.mean((predictions - true_values) ** 2)\n    weights = initial_weights.copy()\n    bias = initial_bias\n    mse_values = []\n    for _ in range(epochs):\n        linear_output = np.dot(features, weights) + bias\n        predictions = sigmoid(linear_output)\n        loss = mse_loss(predictions, labels)\n        mse_values.append(round(loss, 4))\n        error = predictions - labels\n        d_predictions = error\n        d_linear_output = d_predictions * sigmoid_derivative(predictions)\n        d_weights = np.dot(features.T, d_linear_output) / features.shape[0]\n        d_bias = np.mean(d_linear_output)\n        weights -= learning_rate * d_weights\n        bias -= learning_rate * d_bias\n    return (weights.round(4), round(bias, 4), mse_values)"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data + other.data, _children=(self, other), _op='add')\n\n        def _backward():\n            self.grad += out.grad * 1\n            other.grad += out.grad * 1\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data * other.data, _children=(self, other), _op='mul')\n\n        def _backward():\n            self.grad += other.data * out.grad\n            other.grad += self.data * out.grad\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(self.data if self.data > 0 else 0, (self,), 'relu')\n\n        def _backward():\n            self.grad += (out.data > 0) * out.grad\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1\n        for node in reversed(topo):\n            node._backward()\n\n    def __repr__(self):\n        return f'Value(data={self.data}, grad={self.grad})'"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    \"\"\"\n    Compute the transformation matrix from basis B to basis C in R^3.\n    \n    Parameters:\n        B (list[list[int]]): List of three basis vectors of basis B.\n        C (list[list[int]]): List of three basis vectors of basis C.\n        \n    Returns:\n        list[list[float]]: Transformation matrix P that converts coordinates from B to C.\n    \"\"\"\n    B_matrix = np.array(B, dtype=float)\n    C_matrix = np.array(C, dtype=float)\n    C_inv = np.linalg.inv(C_matrix)\n    P = C_inv @ B_matrix\n    return np.round(P, decimals=4).tolist()"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    A_T_A = A.T @ A\n    (eigenvalues, eigenvectors) = np.linalg.eig(A_T_A)\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    singular_values = np.sqrt(eigenvalues)\n    V = eigenvectors\n    U = np.zeros_like(A)\n    for i in range(2):\n        if singular_values[i] > 1e-10:\n            U[:, i] = A @ V[:, i] / singular_values[i]\n        else:\n            U[:, i] = np.zeros_like(A[:, 0])\n    S = np.diag(singular_values)\n    U = np.round(U, 4)\n    S = np.round(S, 4)\n    V = np.round(V, 4)\n    return (U.tolist(), S.tolist(), V.tolist())\nA = np.array([[1, 2], [3, 4]])"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    \"\"\"\n    Shuffle two numpy arrays X and y in the same random order to maintain correspondence.\n\n    Parameters:\n    X (np.ndarray): Input features array.\n    y (np.ndarray): Labels or target array.\n    seed (int, optional): Random seed for reproducibility.\n\n    Returns:\n    list: A list [X_shuffled, y_shuffled], both as python lists after reshaping.\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        raise ValueError('X and y must have the same number of samples.')\n    if seed is not None:\n        np.random.seed(seed)\n    indices = np.random.permutation(X.shape[0])\n    X_shuffled = X[indices]\n    y_shuffled = y[indices]\n    return [X_shuffled.tolist(), y_shuffled.tolist()]"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    \"\"\"\n    An iterable function that yields batches of data from X and an optional label y.\n\n    Parameters:\n    X (np.ndarray): Input data of shape (n_samples, ...).\n    y (np.ndarray, optional): Labels of shape (n_samples, ...). Defaults to None.\n    batch_size (int): The size of each batch.\n\n    Yields:\n    tuple: A batch of (X_batch, y_batch) if y is provided, or (X_batch,) otherwise.\n    \"\"\"\n    n_samples = X.shape[0]\n    indices = np.arange(n_samples)\n    for start in range(0, n_samples, batch_size):\n        batch_indices = indices[start:start + batch_size]\n        X_batch = X[batch_indices]\n        if y is not None:\n            y_batch = y[batch_indices]\n            yield (X_batch.tolist(), y_batch.tolist())\n        else:\n            yield (X_batch.tolist(),)"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    \"\"\"\n    Divides the dataset into two parts based on whether the value of a \n    specified feature is greater than or equal to a given threshold.\n\n    Parameters:\n    X (np.ndarray): The dataset of shape (n_samples, n_features).\n    feature_i (int): Index of the feature to evaluate.\n    threshold (float): Threshold value for splitting.\n\n    Returns:\n    list: Two lists containing the split subsets of the dataset.\n    \"\"\"\n    mask = X[:, feature_i] >= threshold\n    left = X[mask].copy()\n    right = X[~mask].copy()\n    return [left.tolist(), right.tolist()]"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    (n_samples, n_features) = X.shape\n    features = [np.ones(n_samples)]\n    for deg in range(1, degree + 1):\n        for comb in combinations_with_replacement(range(n_features), deg):\n            feature = np.prod(X[:, comb], axis=1)\n            features.append(feature)\n    return np.column_stack(features).tolist()"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    \"\"\"\n    Generate random subsets of the given dataset.\n\n    Parameters:\n    - X: 2D numpy array of features.\n    - y: 1D numpy array of labels.\n    - n_subsets: Number of subsets to generate.\n    - replacements: Boolean indicating whether to sample with replacement.\n    - seed: Random seed for reproducibility.\n\n    Returns:\n    - List of tuples, each tuple is a random subset (X_subset, y_subset).\n    \"\"\"\n    np.random.seed(seed)\n    n_samples = X.shape[0]\n    subsets = []\n    for _ in range(n_subsets):\n        if replacements:\n            indices = np.random.choice(n_samples, size=n_samples, replace=True)\n        else:\n            indices = np.random.permutation(n_samples)\n        X_subset = X[indices]\n        y_subset = y[indices]\n        subsets.append((X_subset, y_subset))\n    return [(x_sub.tolist(), y_sub.tolist()) for (x_sub, y_sub) in subsets]"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    \"\"\"\n    Convert a 1D numpy array of integer values to one-hot encoded representation.\n\n    Parameters:\n    - x (np.ndarray): 1D array of integer values (nominal).\n    - n_col (int, optional): Number of columns in the one-hot encoded output.\n                             If None, determined from max value in x + 1.\n\n    Returns:\n    - list: A 2D list representing the one-hot encoded array.\n    \"\"\"\n    x = np.asarray(x)\n    if n_col is None:\n        n_col = x.max() + 1\n    one_hot = np.zeros((x.size, n_col), dtype=int)\n    one_hot[np.arange(x.size), x] = 1\n    return one_hot.tolist()"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    diagonal_matrix = np.diag(x)\n    return diagonal_matrix.tolist()"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    \"\"\"\n    Calculate the accuracy score between true and predicted labels.\n    \n    Parameters:\n    y_true (np.ndarray): 1D array of true labels.\n    y_pred (np.ndarray): 1D array of predicted labels.\n    \n    Returns:\n    float: Accuracy score rounded to 4 decimal places.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        raise ValueError('y_true and y_pred must be the same length.')\n    correct = np.sum(y_true == y_pred)\n    accuracy = correct / len(y_true)\n    return round(accuracy, 4)"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    \"\"\"\n    Calculate the correlation matrix between X and Y or X with itself if Y is not provided.\n    \n    Parameters:\n        X (np.ndarray): 2D array of shape (n_samples, n_features)\n        Y (np.ndarray, optional): 2D array of shape (n_samples, m_features), default None\n    \n    Returns:\n        list: Correlation matrix as a 2D list with values rounded to 4 decimal places.\n    \"\"\"\n    if Y is None:\n        Y = X\n    X_centered = X - np.mean(X, axis=0)\n    Y_centered = Y - np.mean(Y, axis=0)\n    covariance_matrix = X_centered.T @ Y_centered / (X.shape[0] - 1)\n    std_X = np.std(X, axis=0, ddof=1)\n    std_Y = np.std(Y, axis=0, ddof=1)\n    std_grid_X = std_X[:, None]\n    std_grid_Y = std_Y[None, :]\n    std_grid_X[std_grid_X == 0] = 1e-10\n    std_grid_Y[std_grid_Y == 0] = 1e-10\n    correlation_matrix = covariance_matrix / (std_grid_X * std_grid_Y)\n    return np.round(correlation_matrix, decimals=4).tolist()"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\nimport math\nimport numpy as np\ndef adaboost_fit(X, y, n_clf):\n    \"\"\"\n    Implements the AdaBoost fit method for binary classification.\n    \n    Parameters:\n    X (np.ndarray): 2D array of shape (n_samples, n_features)\n    y (np.ndarray): 1D array of shape (n_samples,) with labels +1 or -1\n    n_clf (int): Number of weak classifiers to train\n    \n    Returns:\n    List of tuples: Each tuple contains:\n        - feature index\n        - threshold\n        - direction (+1 or -1)\n        - alpha (classifier weight)\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    w = np.ones(n_samples) / n_samples\n    classifiers = []\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_clf = None\n        best_pred = None\n        for feature in range(n_features):\n            unique_vals = np.unique(X[:, feature])\n            thresholds = (unique_vals[:-1] + unique_vals[1:]) / 2\n            for t in thresholds:\n                for direction in [1, -1]:\n                    pred = np.where(X[:, feature] >= t, 1 * direction, -1 * direction)\n                    error = np.sum(w[y != pred])\n                    if error > 0.5:\n                        continue\n                    if error == 0:\n                        error = 1e-10\n                    alpha = 0.5 * np.log((1 - error) / error)\n                    if error < best_error:\n                        best_error = error\n                        best_pred = pred\n                        best_clf = (feature, t, direction, alpha)\n        w *= np.exp(-best_clf[3] * y * best_pred)\n        w /= np.sum(w)\n        classifiers.append((round(best_clf[0], 4), round(best_clf[1], 4), best_clf[2], round(best_clf[3], 4)))\n    return classifiers\nX = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\ny = np.array([1, -1, -1, 1])\nn_clf = 2"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list):\n    \"\"\"\n    Compute the log-softmax of a list of scores.\n    \n    Args:\n        scores (list): A 1D list of numerical scores.\n        \n    Returns:\n        list: A 1D list of log-softmax values, rounded to 4 decimal places.\n    \"\"\"\n    scores_array = np.array(scores)\n    max_score = np.max(scores_array)\n    exp_scores = np.exp(scores_array - max_score)\n    sum_exp_scores = np.sum(exp_scores)\n    log_softmax_values = scores_array - max_score - np.log(sum_exp_scores)\n    return [round(x, 4) for x in log_softmax_values.tolist()]"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport copy\nimport math\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.optimizer = None\n        self.grad_W = None\n        self.grad_w0 = None\n\n    def initialize(self, optimizer):\n        if self.input_shape:\n            limit = 1.0 / math.sqrt(self.input_shape[0])\n            self.W = np.random.uniform(-limit, limit, size=(self.input_shape[0], self.n_units))\n            self.w0 = np.zeros((1, self.n_units))\n            self.optimizer = optimizer\n\n    def parameters(self):\n        return self.input_shape[0] * self.n_units + self.n_units if self.input_shape else 0\n\n    def forward_pass(self, X, training):\n        self.layer_input = X\n        output = X.dot(self.W) + self.w0\n        return output\n\n    def backward_pass(self, accum_grad):\n        grad_input = accum_grad.dot(self.W.T)\n        if self.trainable:\n            grad_W = self.layer_input.T.dot(accum_grad)\n            grad_w0 = np.sum(accum_grad, axis=0, keepdims=True)\n            self.W = self.optimizer.update(self.W, grad_W)\n            self.w0 = self.optimizer.update(self.w0, grad_w0)\n        return grad_input\n\n    def output_shape(self):\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int) -> list:\n    \"\"\"\n    Perform a 2D convolution on the input matrix using the specified kernel, padding, and stride.\n    \n    Parameters:\n    - input_matrix: 2D numpy array representing the input image.\n    - kernel: 2D numpy array representing the convolution kernel.\n    - padding: integer specifying the padding size (zero padding).\n    - stride: integer specifying the stride for convolution.\n    \n    Returns:\n    - Output as a list after applying convolution, rounded to 4 decimal places.\n    \"\"\"\n    (in_height, in_width) = input_matrix.shape\n    (kernel_height, kernel_width) = kernel.shape\n    padded_input = np.pad(input_matrix, pad_width=padding, mode='constant', constant_values=0)\n    out_height = (in_height + 2 * padding - kernel_height) // stride + 1\n    out_width = (in_width + 2 * padding - kernel_width) // stride + 1\n    output = np.zeros((out_height, out_width))\n    for i in range(out_height):\n        for j in range(out_width):\n            start_i = i * stride\n            start_j = j * stride\n            region = padded_input[start_i:start_i + kernel_height, start_j:start_j + kernel_width]\n            output[i, j] = np.sum(region * kernel)\n    output = np.round(output, 4)\n    return output.tolist()"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    return z if z > 0 else 0"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    \"\"\"\n    Compute the Ridge Regression loss function.\n    \n    Parameters:\n        X (np.ndarray): 2D feature matrix of shape (n_samples, n_features)\n        w (np.ndarray): 1D weight vector of shape (n_features,)\n        y_true (np.ndarray): 1D true label vector of shape (n_samples,)\n        alpha (float): Regularization parameter (lambda)\n    \n    Returns:\n        float: Ridge loss with 4 decimal places precision\n    \"\"\"\n    n_samples = X.shape[0]\n    y_pred = X @ w\n    mse = np.mean((y_true - y_pred) ** 2)\n    regularization = alpha * np.sum(w ** 2)\n    total_loss = mse + regularization\n    return round(total_loss, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float:\n    \"\"\"\n    Applies the Leaky ReLU activation function to the input z.\n    \n    Parameters:\n    z (float): The input value.\n    alpha (float): The slope value for negative inputs (default is 0.01).\n    \n    Returns:\n    float: The output after applying the Leaky ReLU function.\n    \"\"\"\n    return z if z > 0 else alpha * z"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    \"\"\"\n    Computes the linear kernel between two input vectors.\n\n    Parameters:\n    x1 (array-like): First input vector.\n    x2 (array-like): Second input vector.\n\n    Returns:\n    float: The linear kernel (dot product) of x1 and x2.\n    \"\"\"\n    x1 = np.array(x1)\n    x2 = np.array(x2)\n    if x1.shape != x2.shape:\n        raise ValueError('Input vectors must be of the same length.')\n    return np.dot(x1, x2)"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    \"\"\"\n    Calculate the precision metric given true and predicted binary labels.\n\n    Parameters:\n    y_true (np.ndarray): True binary labels (0 or 1).\n    y_pred (np.ndarray): Predicted binary labels (0 or 1).\n\n    Returns:\n    float: Precision score.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    true_positives = np.sum((y_true == 1) & (y_pred == 1))\n    false_positives = np.sum((y_true == 0) & (y_pred == 1))\n    if true_positives + false_positives == 0:\n        return 0.0\n    return true_positives / (true_positives + false_positives)"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    \"\"\"\n    Perform Gradient Descent optimization with Mean Squared Error (MSE) loss.\n\n    Parameters:\n    ----------\n    X : numpy.ndarray\n        Input feature matrix of shape (n_samples, n_features)\n    y : numpy.ndarray\n        Target vector of shape (n_samples,)\n    weights : numpy.ndarray\n        Initial weights of shape (n_features,)\n    learning_rate : float\n        Learning rate (step size)\n    n_iterations : int\n        Number of iterations for descent\n    batch_size : int\n        Size of mini-batch for mini-batch gradient descent (default: 1 for SGD)\n    method : str\n        Type of gradient descent: 'batch', 'stochastic', or 'mini_batch'\n\n    Returns:\n    ----------\n    weights : list\n        Optimized weights, rounded to 4 decimal places\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    weights = np.array(weights)\n    loss_history = []\n    for _ in range(n_iterations):\n        if method == 'batch':\n            predictions = X @ weights\n            gradients = 2 / n_samples * X.T @ (predictions - y)\n        elif method == 'stochastic':\n            i = np.random.randint(n_samples)\n            x_i = X[i, :].reshape(1, -1)\n            y_i = y[i].reshape(1, -1)\n            predictions = x_i @ weights\n            gradients = 2 * x_i.T * (predictions - y_i)\n        elif method == 'mini_batch':\n            indices = np.random.choice(n_samples, batch_size, replace=False)\n            X_batch = X[indices]\n            y_batch = y[indices]\n            predictions = X_batch @ weights\n            gradients = 2 / batch_size * X_batch.T @ (predictions - y_batch)\n        else:\n            raise ValueError(\"Method must be 'batch', 'stochastic', or 'mini_batch'\")\n        weights -= learning_rate * gradients\n    return np.round(weights, 4).tolist()"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    \"\"\"\n    Converts a given matrix into its Reduced Row Echelon Form (RREF).\n    \n    Args:\n        matrix: A 2D list of numbers representing the matrix.\n    \n    Returns:\n        A Python list representing the RREF of the input matrix.\n    \"\"\"\n    matrix = np.array(matrix, dtype=float)\n    (m, n) = matrix.shape\n    pivot_col = 0\n    for r in range(m):\n        if pivot_col >= n:\n            return matrix.tolist()\n        pivot_row = None\n        for i in range(r, m):\n            if matrix[i, pivot_col] != 0:\n                pivot_row = i\n                break\n        if pivot_row is None:\n            pivot_col += 1\n            continue\n        matrix[[r, pivot_row]] = matrix[[pivot_row, r]]\n        pivot = matrix[r, pivot_col]\n        matrix[r] = matrix[r] / pivot\n        for i in range(m):\n            if i != r and matrix[i, pivot_col] != 0:\n                factor = matrix[i, pivot_col]\n                matrix[i] = matrix[i] - factor * matrix[r]\n        pivot_col += 1\n    return matrix.tolist()\nmatrix = [[1, 2, -1, -4], [2, 3, -1, -11], [-2, 0, -3, 22]]"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=10):\n    \"\"\"\n    Optimizes the given objective function using the Adam optimization algorithm.\n    \n    Parameters:\n    - f: Objective function to be minimized.\n    - grad: Function that returns the gradient of f with respect to x.\n    - x0: Initial values of the parameters.\n    - learning_rate: Step size (default: 0.001).\n    - beta1: Exponential decay rate for first moment estimates (default: 0.9).\n    - beta2: Exponential decay rate for second moment estimates (default: 0.999).\n    - epsilon: Small constant for numerical stability (default: 1e-8).\n    - num_iterations: Number of iterations (default: 10).\n    \n    Returns:\n    - x: Optimized parameters as a list.\n    \"\"\"\n    x = np.array(x0, dtype=np.float64)\n    m = np.zeros_like(x)\n    v = np.zeros_like(x)\n    t = 0\n    for t in range(1, num_iterations + 1):\n        grad_val = grad(x)\n        t += 1\n        m = beta1 * m + (1 - beta1) * grad_val\n        v = beta2 * v + (1 - beta2) * grad_val ** 2\n        m_hat = m / (1 - beta1 ** t)\n        v_hat = v / (1 - beta2 ** t)\n        x -= learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    optimized_params = np.round(x, 4).tolist()\n    return optimized_params"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    \"\"\"\n    Lasso Regression using Gradient Descent with L1 Regularization.\n\n    Parameters:\n    X (np.array): Input feature matrix of shape (n_samples, n_features)\n    y (np.array): Target vector of shape (n_samples,)\n    alpha (float): L1 regularization strength\n    learning_rate (float): Step size for gradient descent\n    max_iter (int): Maximum number of iterations\n    tol (float): Tolerance for stopping criterion\n\n    Returns:\n    (weights, bias): Trained model weights and bias as lists\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    weights = np.zeros(n_features)\n    bias = 0.0\n    previous_weights = weights.copy()\n    previous_bias = bias\n    for _ in range(max_iter):\n        y_pred = np.dot(X, weights) + bias\n        dw = -1 / n_samples * np.dot(X.T, y - y_pred) + alpha * np.sign(weights)\n        db = -1 / n_samples * np.sum(y - y_pred)\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n        if np.linalg.norm(weights - previous_weights) < tol and abs(bias - previous_bias) < tol:\n            break\n        previous_weights = weights.copy()\n        previous_bias = bias\n    weights = np.round(weights, 4).tolist()\n    bias = round(bias, 4)\n    return (weights, bias)"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    m = len(source)\n    n = len(target)\n    cost = np.zeros((m + 1, n + 1), dtype=int)\n    for i in range(m + 1):\n        cost[i][0] = i\n    for j in range(n + 1):\n        cost[0][j] = j\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if source[i - 1] == target[j - 1]:\n                cost[i][j] = cost[i - 1][j - 1]\n            else:\n                sub_cost = cost[i - 1][j - 1]\n                ins_cost = cost[i][j - 1]\n                del_cost = cost[i - 1][j]\n                trans_cost = cost[i - 2][j - 2] if i > 1 and j > 1 and (source[i - 2] == target[j - 1]) and (source[i - 1] == target[j - 2]) else float('inf')\n                cost[i][j] = 1 + min(sub_cost, ins_cost, del_cost, trans_cost)\n    return cost[m][n]"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    \"\"\"\n    Calculate the recall metric for binary classification.\n    \n    Parameters:\n        y_true (list): True binary labels (0 or 1).\n        y_pred (list): Predicted binary labels (0 or 1).\n        \n    Returns:\n        float: Recall value rounded to three decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    TP = np.sum((y_true == 1) & (y_pred == 1))\n    FN = np.sum((y_true == 1) & (y_pred == 0))\n    if TP + FN == 0:\n        return 0.0\n    recall_value = TP / (TP + FN)\n    return round(recall_value, 3)"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    \"\"\"\n    Perform self-attention operation on the input matrix X using query, key, and value weight matrices.\n\n    Parameters:\n        X (np.ndarray): Input matrix of shape (sequence_length, input_dim)\n        W_q (np.ndarray): Query weight matrix of shape (input_dim, d_k)\n        W_k (np.ndarray): Key weight matrix of shape (input_dim, d_k)\n        W_v (np.ndarray): Value weight matrix of shape (input_dim, d_v)\n    \n    Returns:\n        list: Self-attention output as a Python list (after rounding to 4 decimal places)\n    \"\"\"\n    Q = X @ W_q\n    K = X @ W_k\n    V = X @ W_v\n    scores = Q @ K.T\n    exp_scores = np.exp(scores)\n    attention_weights = exp_scores / exp_scores.sum(axis=1, keepdims=True)\n    attention_output = attention_weights @ V\n    return np.round(attention_output, 4).tolist()"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    input_sequence = np.array(input_sequence, dtype=np.float64)\n    h_prev = np.array(initial_hidden_state, dtype=np.float64)\n    Wx = np.array(Wx, dtype=np.float64)\n    Wh = np.array(Wh, dtype=np.float64)\n    b = np.array(b, dtype=np.float64)\n    for x_t in input_sequence:\n        x_t = np.array(x_t, dtype=np.float64)\n        h_prev = np.tanh(np.dot(Wx, x_t) + np.dot(Wh, h_prev) + b)\n    return np.round(h_prev, 4).tolist()"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    \"\"\"\n    Applies a 2D translation to a list of [x, y] points using a translation matrix.\n    \n    Parameters:\n    - points: List of [x, y] coordinates.\n    - tx: Translation distance along x-axis.\n    - ty: Translation distance along y-axis.\n    \n    Returns:\n    - A new list of translated points.\n    \"\"\"\n    points_array = np.array(points)\n    translated_array = points_array + [tx, ty]\n    return translated_array.tolist()"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    Compute the KL divergence between two normal distributions.\n    \n    Parameters:\n        mu_p (float): Mean of distribution P\n        sigma_p (float): Standard deviation of distribution P\n        mu_q (float): Mean of distribution Q\n        sigma_q (float): Standard deviation of distribution Q\n    \n    Returns:\n        float: KL divergence between P and Q\n    \"\"\"\n    var_p = sigma_p ** 2\n    var_q = sigma_q ** 2\n    kl = np.log(sigma_q / sigma_p) + (var_p + (mu_p - mu_q) ** 2) / (2 * var_q) - 0.5\n    return kl"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    if x_ini is None:\n        x = np.zeros_like(b)\n    else:\n        x = np.array(x_ini, dtype=float)\n    for _ in range(n):\n        for i in range(len(b)):\n            x[i] = (b[i] - np.dot(A[i, :i], x[:i]) - np.dot(A[i, i + 1:], x[i + 1:])) / A[i, i]\n    return np.round(x, 4).tolist()\nA = [[4, 1, 2, 8], [3, 1, -1, 4], [2, 3, 10, 13], [2, 6, 10, 1]]\nb = [20, 12, 28, 6]\nn = 10"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    n = len(b)\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    for i in range(n):\n        max_row = np.argmax(np.abs(A[i:n, i])) + i\n        A[[i, max_row]] = A[[max_row, i]]\n        b[[i, max_row]] = b[[max_row, i]]\n        for j in range(i + 1, n):\n            factor = A[j, i] / A[i, i]\n            A[j, i:] = A[j, i:] - factor * A[i, i:]\n            b[j] = b[j] - factor * b[i]\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        x[i] = (b[i] - np.dot(A[i, i + 1:], x[i + 1:])) / A[i, i]\n    x = np.round(x, 4)\n    return x.tolist()"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def tanh(self, x):\n        return np.tanh(x)\n\n    def sigmoid(self, x):\n        return 1 / (1 + np.exp(-x))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns all hidden states,\n        final hidden state, and final cell state.\n        \n        Parameters:\n        - x: Input sequence, shape (input_size, T), where T is the sequence length\n        - initial_hidden_state: Initial hidden state, shape (hidden_size, 1)\n        - initial_cell_state: Initial cell state, shape (hidden_size, 1)\n        \n        Returns:\n        - hiddens: Hidden states for all time steps, shape (hidden_size, T)\n        - final_hidden_state: Hidden state at last time step\n        - final_cell_state: Cell state at last time step\n        \"\"\"\n        T = x.shape[1]\n        h = np.zeros((self.hidden_size, T))\n        c = np.zeros((self.hidden_size, T))\n        h[:, 0] = initial_hidden_state[:, 0]\n        c[:, 0] = initial_cell_state[:, 0]\n        for t in range(T):\n            xt = x[:, t].reshape(self.input_size, 1)\n            ht_prev = h[:, t].reshape(self.hidden_size, 1)\n            concat = np.concatenate((xt, ht_prev), axis=0)\n            ft = self.sigmoid(np.dot(self.Wf, concat) + self.bf)\n            it = self.sigmoid(np.dot(self.Wi, concat) + self.bi)\n            cct = self.tanh(np.dot(self.Wc, concat) + self.bc)\n            ct = ft * c[:, t].reshape(-1, 1) + it * cct\n            ot = self.sigmoid(np.dot(self.Wo, concat) + self.bo)\n            ht = ot * self.tanh(ct)\n            h[:, t] = ht.squeeze()\n            c[:, t] = ct.squeeze()\n        final_hidden_state = h[:, -1].reshape(self.hidden_size, 1)\n        final_cell_state = c[:, -1].reshape(self.hidden_size, 1)\n        hiddens = np.around(h, decimals=4).tolist()\n        final_hidden_state = np.around(final_hidden_state, decimals=4).tolist()\n        final_cell_state = np.around(final_cell_state, decimals=4).tolist()\n        return (hiddens, final_hidden_state, final_cell_state)"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict\ndef compute_tf_idf(corpus, query):\n    if not corpus:\n        return []\n    vocabulary = set()\n    for doc in corpus:\n        for word in doc:\n            vocabulary.add(word)\n    for word in query:\n        vocabulary.add(word)\n    vocabulary = list(vocabulary)\n    vocab_index = {word: i for (i, word) in enumerate(vocabulary)}\n    num_docs = len(corpus)\n    num_terms = len(vocabulary)\n    tf = np.zeros((num_docs, num_terms))\n    df = np.zeros(num_terms)\n    for (doc_idx, doc) in enumerate(corpus):\n        word_count = defaultdict(int)\n        for word in doc:\n            word_count[word] += 1\n        total_words = len(doc) if len(doc) > 0 else 1\n        for (word, count) in word_count.items():\n            if word in vocab_index:\n                idx = vocab_index[word]\n                tf[doc_idx][idx] = count / total_words\n                df[idx] += 1\n    idf = np.log((num_docs + 1) / (df + 1)) + 1\n    tf_idf = tf * idf\n    return np.round(tf_idf, 4).tolist()\ncorpus = [['the', 'quick', 'brown', 'fox'], ['jumps', 'over', 'the', 'lazy', 'dog'], ['book', 'the', 'book']]\nquery = ['the', 'book']"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fp = np.sum((y_true == 0) & (y_pred == 1))\n    fn = np.sum((y_true == 1) & (y_pred == 0))\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0\n    numerator = (1 + beta ** 2) * precision * recall\n    denominator = beta ** 2 * precision + recall\n    f_score_val = numerator / denominator if denominator > 0 else 0\n    return round(f_score_val, 3)\ny_true = np.array([1, 0, 1, 1, 0, 1])\ny_pred = np.array([1, 0, 0, 1, 0, 1])"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, x):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n        \n        Args:\n            x: a 2D numpy array of input sequence, shape (input_size, sequence_length)\n            \n        Returns:\n            outputs: outputs at each time step, shape (output_size, sequence_length)\n            hiddens: hidden states at each time step, shape (hidden_size, sequence_length)\n            inputs: input vectors, shape (input_size, sequence_length)\n        \"\"\"\n        sequence_length = x.shape[1]\n        hiddens = np.zeros((self.hidden_size, sequence_length))\n        outputs = np.zeros((x.shape[0], sequence_length))\n        inputs = x\n        for t in range(sequence_length):\n            h_prev = hiddens[:, t - 1] if t > 0 else np.zeros((self.hidden_size,))\n            h = np.tanh(np.dot(self.W_xh, x[:, t]) + np.dot(self.W_hh, h_prev.reshape(-1, 1)) + self.b_h)\n            hiddens[:, t] = h.flatten()\n            y = np.dot(self.W_hy, h.reshape(-1, 1)) + self.b_y\n            outputs[:, t] = y.flatten()\n        return (outputs, hiddens)\n\n    def backward(self, x, y_true, hiddens, learning_rate=0.01):\n        \"\"\"\n        Backpropagation Through Time (BPTT) for weight updates.\n        \n        Args:\n            x: input sequence, shape (input_size, sequence_length)\n            y_true: true output sequence, shape (output_size, sequence_length)\n            hiddens: hidden states computed from forward pass\n            learning_rate: learning rate for gradient descent\n            \n        Returns:\n            loss: aggregated loss over the sequence\n            gradients: dictionary of gradients for W_xh, W_hh, W_hy, b_h, b_y\n        \"\"\"\n        sequence_length = x.shape[1]\n        output_size = y_true.shape[0]\n        input_size = x.shape[0]\n        hidden_size = self.hidden_size\n        dW_xh = np.zeros_like(self.W_xh)\n        dW_hh = np.zeros_like(self.W_hh)\n        dW_hy = np.zeros_like(self.W_hy)\n        db_h = np.zeros_like(self.b_h)\n        db_y = np.zeros_like(self.b_y)\n        dh_next = np.zeros((hidden_size, 1))\n        loss = 0.0\n        for t in reversed(range(sequence_length)):\n            y = np.dot(self.W_hy, hiddens[:, t].reshape(-1, 1)) + self.b_y\n            dy = y - y_true[:, t].reshape(-1, 1)\n            dW_hy += np.dot(dy, hiddens[:, t].reshape(1, -1))\n            db_y += dy\n            dh = np.dot(self.W_hy.T, dy) + dh_next\n            dtanh = (1 - hiddens[:, t].reshape(-1, 1) ** 2) * dh\n            db_h += dtanh\n            dW_xh += np.dot(dtanh, x[:, t].reshape(1, -1))\n            dW_hh += np.dot(dtanh, hiddens[:, t - 1].reshape(1, -1) if t > 0 else np.zeros((1, hidden_size)))\n            dh_next = dtanh\n            loss += 0.5 * np.sum(dy ** 2)\n        self.W_xh -= learning_rate * dW_xh\n        self.W_hh -= learning_rate * dW_hh\n        self.W_hy -= learning_rate * dW_hy\n        self.b_h -= learning_rate * db_h\n        self.b_y -= learning_rate * db_y\n        return loss\n\n    def train(self, X_train, y_train, epochs=1000, learning_rate=0.01, print_every=100):\n        \"\"\"\n        Trains the RNN on the provided sequence data.\n        \n        Args:\n            X_train: training input sequences, shape (input_size, num_sequences, sequence_length)\n            y_train: training output sequences, shape (output_size, num_sequences, sequence_length)\n            epochs: number of training iterations\n            learning_rate: learning rate for updates\n            print_every: print loss every N epochs\n        \"\"\"\n        num_sequences = X_train.shape[1]\n        for epoch in range(epochs):\n            total_loss = 0.0\n            for seq_idx in range(num_sequences):\n                x = X_train[:, seq_idx, :]\n                y_true = y_train[:, seq_idx, :]\n                x_input = x.reshape(x.shape[0], x.shape[1])\n                y_output = y_true.reshape(y_true.shape[0], y_true.shape[1])\n                (outputs, hiddens) = self.forward(x_input)\n                loss = self.backward(x_input, y_output, hiddens, learning_rate)\n                total_loss += loss\n            if (epoch + 1) % print_every == 0:\n                avg_loss = total_loss / num_sequences\n                print(f'Epoch {epoch + 1}/{epochs}, Loss: {avg_loss}')"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    if x0 is None:\n        x = np.zeros_like(b)\n    else:\n        x = np.array(x0, dtype=np.float64)\n    r = b - A @ x\n    p = r.copy()\n    rsold = r @ r\n    for i in range(n):\n        if np.sqrt(rsold) < tol:\n            break\n        Ap = A @ p\n        alpha = rsold / (p @ Ap)\n        x += alpha * p\n        r -= alpha * Ap\n        rsnew = r @ r\n        beta = rsnew / rsold\n        p = r + beta * p\n        rsold = rsnew\n    return np.round(x, 8).tolist()"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    if not y:\n        return 0.0\n    (unique_classes, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    gini = 1.0 - np.sum(probabilities ** 2)\n    return round(gini, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    values = []\n    column_indices = []\n    row_pointer = [0]\n    for row in dense_matrix:\n        count = 0\n        for (col_index, value) in enumerate(row):\n            if value != 0:\n                values.append(value)\n                column_indices.append(col_index)\n                count += 1\n        row_pointer.append(row_pointer[-1] + count)\n    return (values, column_indices, row_pointer)\ndense_matrix = [[0, 0, 3], [4, 0, 0], [0, 5, 0]]"}
{"task_id": 66, "completion_id": 0, "solution": "def orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    import numpy as np\n    v_array = np.array(v)\n    L_array = np.array(L)\n    dot_product_vL = np.dot(v_array, L_array)\n    dot_product_LL = np.dot(L_array, L_array)\n    scalar_projection = dot_product_vL / dot_product_LL\n    projection_vector = scalar_projection * L_array\n    return [round(x, 3) for x in projection_vector.tolist()]"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    if not dense_matrix or not dense_matrix[0]:\n        return ([], [], [0])\n    num_rows = len(dense_matrix)\n    num_cols = len(dense_matrix[0])\n    values = []\n    row_indices = []\n    col_pointer = [0]\n    for col in range(num_cols):\n        non_zero_count = 0\n        for row in range(num_rows):\n            val = dense_matrix[row][col]\n            if val != 0:\n                values.append(val)\n                row_indices.append(row)\n                non_zero_count += 1\n        col_pointer.append(col_pointer[-1] + non_zero_count)\n    return (values, row_indices, col_pointer)\ndense_matrix = [[0, 3, 0], [4, 0, 6], [0, 0, 0], [0, 8, 1]]"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    \"\"\"\n    Find the basis for the column space (image) of a matrix A using REF.\n    \n    Parameters:\n    A (list of lists or np.ndarray): The input matrix.\n\n    Returns:\n    list of lists: The basis vectors for the column space of A, rounded to 8 decimal places.\n    \"\"\"\n    A = np.array(A, dtype=np.float64)\n    (rref, pivots) = sympy.Matrix(A).rref()\n    pivot_columns_indices = [int(i) for i in pivots]\n    basis_columns = A[:, pivot_columns_indices]\n    basis_columns = np.round(basis_columns, 8)\n    return basis_columns.tolist()"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    mean_y_true = np.mean(y_true)\n    tss = np.sum((y_true - mean_y_true) ** 2)\n    rss = np.sum((y_true - y_pred) ** 2)\n    r2 = 1 - rss / tss\n    return round(r2, 3)"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    if not img:\n        return -1\n    height = len(img)\n    width = len(img[0]) if height > 0 else 0\n    for row in img:\n        if len(row) != width:\n            return -1\n    total_brightness = 0\n    pixel_count = 0\n    for row in img:\n        for pixel in row:\n            if not isinstance(pixel, int) or pixel < 0 or pixel > 255:\n                return -1\n            total_brightness += pixel\n            pixel_count += 1\n    if pixel_count == 0:\n        return -1\n    average_brightness = total_brightness / pixel_count\n    return round(average_brightness, 2)"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    \"\"\"\n    Calculate the Root Mean Square Error (RMSE) between actual and predicted values.\n    \n    Parameters:\n        y_true (array-like): Ground truth (correct) target values.\n        y_pred (array-like): Estimated target values.\n        \n    Returns:\n        float: The RMSE value rounded to three decimal places.\n        \n    Raises:\n        ValueError: If inputs are not of the same length or are empty.\n        TypeError: If inputs are not array-like.\n    \"\"\"\n    if not isinstance(y_true, (list, np.ndarray)) or not isinstance(y_pred, (list, np.ndarray)):\n        raise TypeError('Both inputs must be array-like (list or numpy array).')\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    if len(y_true) == 0 or len(y_pred) == 0:\n        raise ValueError('Input arrays must not be empty.')\n    if y_true.shape != y_pred.shape:\n        raise ValueError(f'Shapes of y_true ({y_true.shape}) and y_pred ({y_pred.shape}) do not match.')\n    squared_diffs = (y_true - y_pred) ** 2\n    mse = np.mean(squared_diffs)\n    rmse_value = np.sqrt(mse)\n    return round(rmse_value, 3)\ny_true = [3, -0.5, 2, 7]\ny_pred = [2.5, 0.0, 2, 8]"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    \"\"\"\n    Calculate the Jaccard Index between two binary arrays.\n    \n    Parameters:\n    y_true (array-like): Ground truth (correct) binary labels.\n    y_pred (array-like): Predicted binary labels.\n    \n    Returns:\n    float: Jaccard Index rounded to three decimal places.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Input arrays must have the same shape.')\n    if not np.all(np.isin(y_true, [0, 1]) & np.isin(y_pred, [0, 1])):\n        raise ValueError('Inputs must be binary arrays (0s and 1s only).')\n    intersection = np.sum(np.logical_and(y_true, y_pred))\n    union = np.sum(np.logical_or(y_true, y_pred))\n    if union == 0:\n        return 1.0\n    return round(float(intersection / union), 3)"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    if len(y_true) != len(y_pred):\n        raise ValueError('Input arrays y_true and y_pred must be of the same length.')\n    intersection = np.sum(np.logical_and(y_true, y_pred))\n    sum_counts = np.sum(y_true) + np.sum(y_pred)\n    if sum_counts == 0:\n        return 1.0\n    dice = 2 * intersection / sum_counts\n    return round(dice, 3)\ny_true = [1, 0, 1, 1, 0]\ny_pred = [1, 1, 1, 0, 0]"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef create_row_hv(row, dim, random_seeds):\n    \"\"\"\n    Generates a composite hypervector for a dataset row using HDC.\n\n    Parameters:\n    - row (dict): Dictionary representing a dataset row (feature values).\n    - dim (int): Dimensionality of the hypervectors.\n    - random_seeds (dict): Dictionary mapping feature names to random seeds for reproducibility.\n\n    Returns:\n    - list: Composite hypervector representing the row, converted to a list.\n    \"\"\"\n    np.random.seed(0)\n    composite_hv = None\n    for (feature, value) in row.items():\n        seed = random_seeds.get(feature, hash(feature) % (2 ** 32 - 1))\n        np.random.seed(seed)\n        feature_hv = np.random.choice([-1, 1], size=dim)\n        value_seed = seed + hash(str(value)) % (2 ** 32 - 1)\n        np.random.seed(value_seed)\n        value_hv = np.random.choice([-1, 1], size=dim)\n        bound_hv = feature_hv * value_hv\n        if composite_hv is None:\n            composite_hv = bound_hv\n        else:\n            composite_hv = composite_hv + bound_hv\n        composite_hv = composite_hv / np.linalg.norm(composite_hv)\n    return composite_hv.tolist()"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    matrix = [[0, 0], [0, 0]]\n    for (y_true, y_pred) in data:\n        if y_true not in {0, 1} or y_pred not in {0, 1}:\n            raise ValueError('Labels must be 0 or 1 for binary classification.')\n        if y_true == 1 and y_pred == 1:\n            matrix[1][1] += 1\n        elif y_true == 1 and y_pred == 0:\n            matrix[1][0] += 1\n        elif y_true == 0 and y_pred == 1:\n            matrix[0][1] += 1\n        elif y_true == 0 and y_pred == 0:\n            matrix[0][0] += 1\n    return matrix"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    v1 = np.array(v1)\n    v2 = np.array(v2)\n    if v1.shape != v2.shape:\n        raise ValueError('Input vectors must have the same shape.')\n    if np.linalg.norm(v1) == 0 or np.linalg.norm(v2) == 0:\n        raise ValueError('Input vectors cannot have zero magnitude.')\n    dot_product = np.dot(v1, v2)\n    magnitude_v1 = np.linalg.norm(v1)\n    magnitude_v2 = np.linalg.norm(v2)\n    similarity = dot_product / (magnitude_v1 * magnitude_v2)\n    return round(similarity, 3)"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Tuple, List\ndef performance_metrics(actual: List[int], predicted: List[int]) -> Tuple:\n    \"\"\"\n    Calculate performance metrics for a binary classification model.\n    \n    Parameters:\n        actual (List[int]): Ground truth labels (0 or 1).\n        predicted (List[int]): Predicted labels (0 or 1).\n    \n    Returns:\n        Tuple:\n            confusion_matrix: 2x2 matrix [[TN, FP], [FN, TP]]\n            accuracy: float\n            f1_score: float\n            specificity: float\n            negative_predictive_value: float\n    \"\"\"\n    if len(actual) != len(predicted):\n        raise ValueError('Length of actual and predicted must be the same.')\n    for label in actual + predicted:\n        if label not in (0, 1):\n            raise ValueError('All values in actual and predicted must be 0 or 1.')\n    tp = sum((a == 1 and p == 1 for (a, p) in zip(actual, predicted)))\n    tn = sum((a == 0 and p == 0 for (a, p) in zip(actual, predicted)))\n    fp = sum((a == 0 and p == 1 for (a, p) in zip(actual, predicted)))\n    fn = sum((a == 1 and p == 0 for (a, p) in zip(actual, predicted)))\n    confusion_matrix = [[tn, fp], [fn, tp]]\n    total = len(actual)\n    accuracy = (tp + tn) / total if total > 0 else 0\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0\n    f1_score = 2 * precision * recall / (precision + recall) if precision + recall > 0 else 0\n    specificity = tn / (tn + fp) if tn + fp > 0 else 0\n    negative_predictive_value = tn / (tn + fn) if tn + fn > 0 else 0\n    accuracy = round(accuracy, 3)\n    f1_score = round(f1_score, 3)\n    specificity = round(specificity, 3)\n    negative_predictive_value = round(negative_predictive_value, 3)\n    return (confusion_matrix, accuracy, f1_score, specificity, negative_predictive_value)\nactual = [1, 0, 1, 0, 1]\npredicted = [1, 0, 0, 0, 1]"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\nfrom scipy import stats\ndef descriptive_statistics(data):\n    \"\"\"\n    Calculate descriptive statistics for a list or NumPy array of numerical values.\n\n    Parameters:\n    data (list or np.ndarray): Input numerical data.\n\n    Returns:\n    dict: Dictionary containing descriptive statistics.\n    \"\"\"\n    data_array = np.array(data)\n    mean = np.mean(data_array)\n    median = np.median(data_array)\n    mode = float(stats.mode(data_array, keepdims=True).mode)\n    variance = np.var(data_array, ddof=1)\n    std_dev = np.std(data_array, ddof=1)\n    percentile_25 = np.percentile(data_array, 25)\n    percentile_50 = np.percentile(data_array, 50)\n    percentile_75 = np.percentile(data_array, 75)\n    iqr = percentile_75 - percentile_25\n    stats_dict = {'mean': round(mean, 4), 'median': round(median, 4), 'mode': mode, 'variance': round(variance, 4), 'standard_deviation': round(std_dev, 4), '25th_percentile': round(percentile_25, 4), '50th_percentile': round(percentile_50, 4), '75th_percentile': round(percentile_75, 4), 'interquartile_range': round(iqr, 4)}\n    return stats_dict"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials\n    \"\"\"\n    combination = math.comb(n, k)\n    probability = combination * p ** k * (1 - p) ** (n - k)\n    return round(probability, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    :return: PDF value at x, rounded to 5 decimal places.\n    \"\"\"\n    coefficient = 1 / (std_dev * math.sqrt(2 * math.pi))\n    exponent = -(x - mean) ** 2 / (2 * std_dev ** 2)\n    pdf = coefficient * math.exp(exponent)\n    return round(pdf, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    \"\"\"\n    probability = math.exp(-lam) * lam ** k / math.factorial(k)\n    return round(probability, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        int: Contrast value, defined as the difference between the maximum and minimum pixel values.\n    \"\"\"\n    if img.ndim != 2:\n        raise ValueError('Input image must be a 2D grayscale image.')\n    if img.dtype != np.uint8:\n        raise ValueError('Input image must have pixel values of type uint8 (0 to 255).')\n    max_pixel = np.max(img)\n    min_pixel = np.min(img)\n    return max_pixel - min_pixel"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    \n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    \n    Returns:\n        float: The dot product of the two vectors.\n    \"\"\"\n    if vec1.ndim != 1 or vec2.ndim != 1:\n        raise ValueError('Both inputs must be 1D arrays.')\n    if len(vec1) != len(vec2):\n        raise ValueError('Vectors must be of the same length.')\n    return np.dot(vec1, vec2)"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n    \n    Returns:\n        list[list[float]]: A nested list where each sublist represents the transformed features of a data point.\n    \"\"\"\n    if degree < 0:\n        return []\n    transformed_data = []\n    for x in data:\n        features = [x ** d for d in range(1, degree + 1)]\n        rounded_features = [round(val, 8) for val in features]\n        transformed_data.append(rounded_features)\n    return transformed_data\ndegree = 3"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    if position <= 0 or d_model <= 0:\n        return -1\n    pos = np.arange(position)[:, np.newaxis]\n    i = np.arange(d_model)[np.newaxis, :]\n    angle_rates = 1 / np.power(10000, 2 * (i // 2) / np.float32(d_model))\n    angle_rads = pos * angle_rates\n    angle_rads[:, 0::2] = np.sin(angle_rads[:, 0::2])\n    angle_rads[:, 1::2] = np.cos(angle_rads[:, 1::2])\n    return angle_rads.astype(np.float16).tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    elif training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    else:\n        return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    parameter = parameter - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    if isinstance(parameter, np.ndarray):\n        updated_parameter = np.round(parameter, 5).tolist()\n    else:\n        updated_parameter = round(float(parameter), 5)\n    updated_m = np.round(m, 5).tolist() if isinstance(m, np.ndarray) else round(float(m), 5)\n    updated_v = np.round(v, 5).tolist() if isinstance(v, np.ndarray) else round(float(v), 5)\n    return (updated_parameter, updated_m, updated_v)"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    (vocab_size, emb_size) = params['wte'].shape\n    max_ctx_len = hparams['n_ctx']\n    n_head = hparams['n_head']\n    n_channels = emb_size // n_head\n    for _ in range(5):\n        block = {'attn': {'c_attn': {'w': np.random.rand(emb_size, emb_size), 'b': np.zeros(emb_size)}, 'c_proj': {'w': np.random.rand(emb_size, emb_size), 'b': np.zeros(emb_size)}, 'ln': {'g': np.ones(emb_size), 'b': np.zeros(emb_size)}}, 'mlp': {'c_fc': {'w': np.random.rand(emb_size, 4 * emb_size), 'b': np.zeros(4 * emb_size)}, 'c_proj': {'w': np.random.rand(4 * emb_size, emb_size), 'b': np.zeros(emb_size)}, 'ln': {'g': np.ones(emb_size), 'b': np.zeros(emb_size)}}}\n        params['blocks'].append(block)\n    token_ids = encoder.encode(prompt)\n    generated_text = encoder.decode(token_ids)\n    token_ids = token_ids[-max_ctx_len:]\n    context_length = len(token_ids)\n    for _ in range(n_tokens_to_generate):\n        input_ids = np.array(token_ids[-max_ctx_len:], dtype=np.int64)\n        token_embeddings = params['wte'][input_ids]\n        position_embeddings = params['wpe'][:len(input_ids)]\n        x = token_embeddings + position_embeddings\n        for block in params['blocks']:\n            residual = x\n            ln_attn = batch_norm(x, block['attn']['ln']['g'], block['attn']['ln']['b'], axis=1)\n            attn_input = ln_attn @ block['attn']['c_attn']['w'] + block['attn']['c_attn']['b']\n            (q, k, v) = np.split(attn_input, 3, axis=-1)\n            q = q.reshape(context_length, n_head, n_channels).transpose(1, 0, 2)\n            k = k.reshape(context_length, n_head, n_channels).transpose(1, 0, 2)\n            v = v.reshape(context_length, n_head, n_channels).transpose(1, 0, 2)\n            scores = q @ k.transpose(0, 2, 1) / math.sqrt(n_channels)\n            attention = softmax(scores)\n            context = (attention @ v).transpose(1, 0, 2)\n            context = context.reshape(context_length, n_head * n_channels)\n            attn_output = context @ block['attn']['c_proj']['w'] + block['attn']['c_proj']['b']\n            x = residual + attn_output\n            residual = x\n            ln_mlp = batch_norm(x, block['mlp']['ln']['g'], block['mlp']['ln']['b'], axis=1)\n            mlp_input = ln_mlp @ block['mlp']['c_fc']['w'] + block['mlp']['c_fc']['b']\n            mlp_output = gelu(mlp_input)\n            mlp_output = mlp_output @ block['mlp']['c_proj']['w'] + block['mlp']['c_proj']['b']\n            x = residual + mlp_output\n        x = batch_norm(x, params['ln_f']['g'], params['ln_f']['b'], axis=1)\n        logits = x @ params['wte'].T\n        probs = softmax(logits[[-1]])\n        predicted_token_id = np.random.choice(len(logits[-1]), p=probs[0])\n        token_ids.append(predicted_token_id)\n        generated_text = encoder.decode(token_ids)\n        context_length += 1\n    return generated_text\ndef batch_norm(x, g, b, axis, eps=1e-05):\n    mean = np.mean(x, axis=axis, keepdims=True)\n    var = np.var(x, axis=axis, keepdims=True)\n    x_norm = (x - mean) / np.sqrt(var + eps)\n    return g * x_norm + b\ndef softmax(x, axis=-1):\n    exp_x = np.exp(x - np.max(x, axis=axis, keepdims=True))\n    return exp_x / np.sum(exp_x, axis=axis, keepdims=True)\ndef gelu(x):\n    return 0.5 * x * (1 + np.tanh(np.sqrt(2 / np.pi) * (x + 0.044715 * np.power(x, 3))))"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        exp_values = np.exp(values - np.max(values))\n        return exp_values / np.sum(exp_values)\n    embedded = np.array([[val / dimension for _ in range(dimension)] for val in crystal_values])\n    Q = embedded\n    K = embedded\n    V = embedded\n    attention_scores = np.dot(Q, K.T)\n    attention_weights = np.apply_along_axis(softmax, 1, attention_scores)\n    output = np.dot(attention_weights, V)\n    final_pattern = [round(np.sum(output[i]), 4) for i in range(n)]\n    return final_pattern"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    N = len(corpus)\n    avgdl = np.mean([len(doc.split()) for doc in corpus])\n    tf = []\n    for doc in corpus:\n        tf.append(Counter(doc.split()))\n    df = {}\n    for term in set(query):\n        count = 0\n        for doc in corpus:\n            if term in doc.split():\n                count += 1\n        df[term] = count\n    scores = []\n    for (i, doc) in enumerate(corpus):\n        dl = len(doc.split())\n        score = 0.0\n        for term in query:\n            if term in df and df[term] > 0:\n                Ni = df[term]\n                idf = np.log((N - Ni + 0.5) / (Ni + 0.5))\n                tf_i = tf[i].get(term, 0)\n                numerator = tf_i * (k1 + 1)\n                denominator = tf_i + k1 * (1 - b + b * (dl / avgdl))\n                score += idf * (numerator / denominator)\n        scores.append(round(score, 3))\n    return scores"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        raise ValueError('Input lists must have the same length.')\n    tp = sum((t == 1 and p == 1 for (t, p) in zip(y_true, y_pred)))\n    fp = sum((t == 0 and p == 1 for (t, p) in zip(y_true, y_pred)))\n    fn = sum((t == 1 and p == 0 for (t, p) in zip(y_true, y_pred)))\n    precision = tp / (tp + fp + 1e-09)\n    recall = tp / (tp + fn + 1e-09)\n    f1 = 2 * (precision * recall) / (precision + recall + 1e-09)\n    return round(f1, 3)\ny_true = [1, 0, 1, 1, 0, 1]\ny_pred = [1, 0, 1, 0, 0, 1]\nf1 = calculate_f1_score(y_true, y_pred)"}
{"task_id": 92, "completion_id": 0, "solution": "import math\nPI = 3.14159\ndef power_grid_forecast(consumption_data):\n    n = len(consumption_data)\n    detrended_data = []\n    for i in range(n):\n        fluctuation = 10 * math.sin(2 * PI * (i + 1) / 10)\n        detrended = consumption_data[i] - fluctuation\n        detrended_data.append(detrended)\n    x = [i + 1 for i in range(n)]\n    y = detrended_data\n    sum_x = sum(x)\n    sum_y = sum(y)\n    sum_xy = sum([x[i] * y[i] for i in range(n)])\n    sum_x2 = sum([xi * xi for xi in x])\n    m = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x)\n    b = (sum_y - m * sum_x) / n\n    predicted_base = m * 15 + b\n    fluctuation_day_15 = 10 * math.sin(2 * PI * 15 / 10)\n    final_prediction = predicted_base + fluctuation_day_15\n    final_prediction += 0.05 * final_prediction\n    final_prediction = math.ceil(final_prediction)\n    return int(final_prediction)\nconsumption_data = [150, 200, 250, 300, 350, 400, 450, 500, 550, 600]"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    absolute_errors = np.abs(y_true - y_pred)\n    mean_error = np.mean(absolute_errors)\n    return round(mean_error, 3)"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray) -> tuple:\n    \"\"\"\n    Computes Query, Key, and Value matrices.\n    \n    Parameters:\n        X (np.ndarray): Input sequence of shape (seq_len, input_dim)\n        W_q (np.ndarray): Query weight matrix of shape (input_dim, d_k)\n        W_k (np.ndarray): Key weight matrix of shape (input_dim, d_k)\n        W_v (np.ndarray): Value weight matrix of shape (input_dim, d_v)\n    \n    Returns:\n        tuple of Q, K, V (np.ndarrays) of shape (seq_len, d_k/d_v)\n    \"\"\"\n    Q = X @ W_q\n    K = X @ W_k\n    V = X @ W_v\n    return (Q, K, V)\ndef self_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Computes scaled dot-product attention.\n    \n    Parameters:\n        Q (np.ndarray): Query matrix\n        K (np.ndarray): Key matrix\n        V (np.ndarray): Value matrix\n    \n    Returns:\n        Output of attention mechanism\n    \"\"\"\n    d_k = K.shape[-1]\n    scores = Q @ K.T / np.sqrt(d_k)\n    scores = np.exp(scores) / np.sum(np.exp(scores), axis=1, keepdims=True)\n    output = scores @ V\n    return output\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Implements Multi-Head Attention.\n    \n    Parameters:\n        X (np.ndarray): Input sequence of shape (seq_len, input_dim)\n        W_q (np.ndarray): Query weight matrix of shape (input_dim, n_heads * d_k)\n        W_k (np.ndarray): Key weight matrix of shape (input_dim, n_heads * d_k)\n        W_v (np.ndarray): Value weight matrix of shape (input_dim, n_heads * d_v)\n        n_heads (int): Number of attention heads\n    \n    Returns:\n        list: Final concatenated attention outputs after splitting and reshaping\n    \"\"\"\n    (seq_len, input_dim) = X.shape\n    n_heads = n_heads\n    d_k = W_q.shape[-1] // n_heads\n    d_v = W_v.shape[-1] // n_heads\n    head_outputs = []\n    for i in range(n_heads):\n        W_q_head = W_q[:, i * d_k:(i + 1) * d_k]\n        W_k_head = W_k[:, i * d_k:(i + 1) * d_k]\n        W_v_head = W_v[:, i * d_v:(i + 1) * d_v]\n        (Q, K, V) = compute_qkv(X, W_q_head, W_k_head, W_v_head)\n        head_out = self_attention(Q, K, V)\n        head_outputs.append(head_out)\n    combined_output = np.concatenate(head_outputs, axis=1)\n    return np.around(combined_output, decimals=4).tolist()"}
{"task_id": 95, "completion_id": 0, "solution": "def phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError('The input lists must be of the same length.')\n    n11 = sum((1 for (a, b) in zip(x, y) if a == 1 and b == 1))\n    n10 = sum((1 for (a, b) in zip(x, y) if a == 1 and b == 0))\n    n01 = sum((1 for (a, b) in zip(x, y) if a == 0 and b == 1))\n    n00 = sum((1 for (a, b) in zip(x, y) if a == 0 and b == 0))\n    numerator = n11 * n00 - n10 * n01\n    denominator = ((n11 + n10) * (n11 + n01) * (n00 + n10) * (n00 + n01)) ** 0.5\n    if denominator == 0:\n        return 0.0\n    phi = numerator / denominator\n    return round(phi, 4)\nx = [1, 0, 1, 1, 0, 0]\ny = [1, 1, 0, 1, 0, 1]"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    The hard sigmoid is defined as:\n    f(x) = 0, if x <= -2.5\n    f(x) = 1, if x >= 2.5\n    f(x) = 0.2 * x + 0.5, otherwise\n\n    This is a computationally efficient approximation of the standard sigmoid.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    if x <= -2.5:\n        return 0.0\n    elif x >= 2.5:\n        return 1.0\n    else:\n        return 0.2 * x + 0.5"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value rounded to 4 decimal places\n    \"\"\"\n    if x > 0:\n        return round(x, 4)\n    else:\n        return round(alpha * (math.exp(x) - 1), 4)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    return max(x, 0) if x >= 0 else alpha * x"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x)\n    \"\"\"\n    if x > 20:\n        return round(x, 4)\n    elif x < -20:\n        return round(math.exp(x), 4)\n    else:\n        return round(math.log(1 + math.exp(x)), 4)"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input, rounded to the 4th decimal place\n    \"\"\"\n    return round(x / (1 + abs(x)), 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    clipped_rhos = np.clip(rhos, 1 - epsilon, 1 + epsilon)\n    kl_old_ref = np.sum(pi_theta_old * np.log(pi_theta_old / np.array(pi_theta_ref)))\n    objective = np.sum(clipped_rhos * np.array(A)) - beta * kl_old_ref\n    return round(objective, 6)\nrhos = [1.1, 0.98, 1.05, 0.93]\nA = [2.0, -1.0, 0.5, 1.2]\npi_theta_old = [0.3, 0.2, 0.4, 0.1]\npi_theta_ref = [0.28, 0.21, 0.42, 0.09]"}
{"task_id": 102, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value, rounded to 4 decimal places\n    \"\"\"\n    sigmoid = 1 / (1 + math.exp(-x))\n    result = x * sigmoid\n    return round(result, 4)"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x > 0:\n        result = scale * x\n    else:\n        result = scale * alpha * (np.exp(x) - 1)\n    return round(result, 4)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00d7 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    linear_output = np.dot(X, weights) + bias\n    probabilities = 1 / (1 + np.exp(-linear_output))\n    predictions = (probabilities >= 0.5).astype(int)\n    return predictions.tolist()\nX = np.array([[1, 2], [3, 4], [5, 6]])\nweights = np.array([0.5, -0.5])\nbias = 1.0\npredictions = predict_logistic(X, weights, bias)"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    (N_samples, N_features) = X.shape\n    K_classes = len(np.unique(y))\n    y_onehot = np.eye(K_classes)[y]\n    B = np.random.randn(K_classes, N_features + 1)\n    X_b = np.hstack([X, np.ones((N_samples, 1))])\n    losses = []\n    for _ in range(iterations):\n        logits = X_b @ B.T\n        exp_logits = np.exp(logits)\n        y_pred = exp_logits / exp_logits.sum(axis=1, keepdims=True)\n        loss = -np.mean(np.log(y_pred[range(N_samples), y] + 1e-10))\n        losses.append(round(loss, 4))\n        grad = X_b.T @ (y_pred - y_onehot) / N_samples\n        B -= learning_rate * grad\n    B_flat = B.flatten()\n    B_list = [round(b, 4) for b in B_flat]\n    losses = [round(loss, 4) for loss in losses]\n    return (B_list, losses.tolist())"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n\n    Parameters:\n    - X: Feature matrix of shape (n_samples, n_features)\n    - y: Target vector of shape (n_samples,)\n    - learning_rate: Step size for parameter updates\n    - iterations: Number of iterations to perform\n\n    Returns:\n    - params: List of optimized coefficients (weights + bias) rounded to 4 decimal places\n    - losses: List of losses over iterations rounded to 4 decimal places\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    weights = np.zeros(n_features)\n    bias = 0.0\n    losses = []\n    for _ in range(iterations):\n        z = np.dot(X, weights) + bias\n        y_pred = 1 / (1 + np.exp(-z))\n        epsilon = 1e-15\n        y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n        loss = -np.mean(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n        losses.append(round(loss, 4))\n        dw = 1 / n_samples * np.dot(X.T, y_pred - y)\n        db = 1 / n_samples * np.sum(y_pred - y)\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n    params = np.concatenate((weights, np.array([bias])))\n    return (np.round(params, 4).tolist(), np.round(losses, 4).tolist())"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    d_k = K.shape[-1]\n    scores = np.matmul(Q, K.T) / np.sqrt(d_k)\n    scores = np.where(mask == 0, float('-inf'), scores)\n    attention_weights = np.exp(scores - np.max(scores, axis=-1, keepdims=True))\n    attention_weights = attention_weights / np.sum(attention_weights, axis=-1, keepdims=True)\n    output = np.matmul(attention_weights, V)\n    return output"}
{"task_id": 108, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    \"\"\"\n    total_apples = len(apples)\n    if total_apples == 0:\n        return 0.0\n    counts = Counter(apples)\n    entropy = 0.0\n    for count in counts.values():\n        probability = count / total_apples\n        entropy -= probability * math.log2(probability)\n    return round(entropy, 4)"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Perform Layer Normalization on a 3D tensor.\n\n    Parameters:\n    X (np.ndarray): Input tensor of shape (batch_size, sequence_length, features)\n    gamma (np.ndarray): Scaling parameters of shape (features,)\n    beta (np.ndarray): Shifting parameters of shape (features,)\n    epsilon (float): Small value to avoid division by zero\n\n    Returns:\n    list: Normalized and scaled tensor rounded to 5 decimal places as a list\n    \"\"\"\n    mean = np.mean(X, axis=-1, keepdims=True)\n    var = np.var(X, axis=-1, keepdims=True)\n    X_norm = (X - mean) / np.sqrt(var + epsilon)\n    X_scaled = X_norm * gamma + beta\n    return np.round(X_scaled, 5).tolist()"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter, defaultdict\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    reference = reference.lower().split()\n    candidate = candidate.lower().split()\n    matching_words = set(reference) & set(candidate)\n    count_match = sum((min(reference.count(w), candidate.count(w)) for w in matching_words))\n    count_ref = len(reference)\n    count_candidate = len(candidate)\n    if count_match == 0:\n        return 0.0\n    precision = count_match / count_candidate\n    recall = count_match / count_ref\n    f_mean = precision * recall / (alpha * precision + (1 - alpha) * recall + 1e-07)\n    m = defaultdict(list)\n    for (i, w) in enumerate(reference):\n        m[w].append(i)\n    alignment = []\n    matches = 0\n    for (i, w) in enumerate(candidate):\n        if w in matching_words:\n            for r_index in m[w]:\n                if r_index >= i:\n                    alignment.append((i, r_index))\n                    m[w].remove(r_index)\n                    matches += 1\n                    break\n    max_pos = 0\n    order = [0] * len(candidate)\n    for (i, (c_idx, r_idx)) in enumerate(alignment):\n        order[c_idx] = i + 1\n        if r_idx < max_pos:\n            order[c_idx] = order[reference.index(r_idx, 0, c_idx)]\n        else:\n            max_pos = r_idx\n    length = 0\n    for i in range(len(candidate) - 1):\n        if order[i] > 0 and order[i + 1] > 0 and (order[i + 1] == order[i] + 1):\n            length += 1\n    if matches == 0:\n        c = 0\n    else:\n        c = 1 - length / (matches - 1) if matches > 1 else 0\n    penalty = 1 - np.exp(-gamma * c)\n    final_score = (1 - penalty) * f_mean\n    return round(final_score, 3)\nreference = 'the cat is on the mat'\ncandidate = 'the cat is sitting on the mat'"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    p_xy = joint_counts / total_samples\n    p_x = total_counts_x / total_samples\n    p_y = total_counts_y / total_samples\n    epsilon = 1e-10\n    p_xy = np.clip(p_xy, epsilon, None)\n    p_x = np.clip(p_x, epsilon, None)\n    p_y = np.clip(p_y, epsilon, None)\n    pmi = np.log2(p_xy / (p_x * p_y))\n    return float(np.round(pmi, 3))\ntotal_samples = 1000"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    if not x:\n        return []\n    min_val = min(x)\n    max_val = max(x)\n    if min_val == max_val:\n        return [0.0 for _ in x]\n    return [round((val - min_val) / (max_val - min_val), 4) for val in x]"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    out = np.dot(x, w1)\n    out = np.maximum(out, 0)\n    out = np.dot(out, w2)\n    out = np.maximum(out, 0)\n    out += x\n    out = np.maximum(out, 0)\n    return out.round(4).tolist()\nx = np.array([1.0, 2.0, 3.0])\nw1 = np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]])\nw2 = np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]])"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray):\n    \"\"\"\n    Perform Global Average Pooling on a 3D input array.\n    \n    Parameters:\n        x (np.ndarray): A 3D NumPy array of shape (height, width, channels).\n        \n    Returns:\n        np.ndarray: A 1D array of shape (channels,) containing the average\n                    of each feature map.\n    \"\"\"\n    if x.ndim != 3:\n        raise ValueError('Input must be a 3D array (height, width, channels).')\n    (height, width, channels) = x.shape\n    return np.mean(x, axis=(0, 1))"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Perform batch normalization on a 4D input array in BCHW format.\n\n    Parameters:\n        X (np.ndarray): Input feature maps of shape (batch, channels, height, width)\n        gamma (np.ndarray): Scale parameter of shape (channels,)\n        beta (np.ndarray): Shift parameter of shape (channels,)\n        epsilon (float): Small value to avoid division by zero\n\n    Returns:\n        np.ndarray: Normalized output of the same shape as X, rounded to 4 decimal places\n    \"\"\"\n    (batch, channels, height, width) = X.shape\n    X_mean = np.mean(X, axis=(0, 2, 3), keepdims=True)\n    X_var = np.var(X, axis=(0, 2, 3), keepdims=True)\n    X_std = np.sqrt(X_var + epsilon)\n    X_normalized = (X - X_mean) / X_std\n    gamma = gamma.reshape(1, -1, 1, 1)\n    beta = beta.reshape(1, -1, 1, 1)\n    output = gamma * X_normalized + beta\n    return np.round(output, 4).tolist()"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    return round(c * n * x ** (n - 1), 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10):\n    vectors = np.array(vectors)\n    n = len(vectors)\n    basis = []\n    for i in range(n):\n        u = vectors[i]\n        for v in basis:\n            u -= np.dot(u, v) * v\n        norm = np.linalg.norm(u)\n        if norm > tol:\n            e = u / norm\n            basis.append(e)\n    return [vec.round(4).tolist() for vec in basis]"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    result = np.cross(a, b)\n    return np.round(result, 4).tolist()"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    \"\"\"\n    Solves the system of linear equations Ax = b using Cramer's Rule.\n    \n    Parameters:\n        A (list of lists or np.ndarray): Square coefficient matrix.\n        b (list or np.ndarray): Constant vector.\n    \n    Returns:\n        list: Solution vector x rounded to 4 decimal places.\n        int: -1 if the determinant of A is zero (no unique solution).\n    \"\"\"\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    if A.shape[0] != A.shape[1]:\n        raise ValueError('Matrix A must be square.')\n    if A.shape[0] != b.shape[0]:\n        raise ValueError('Dimensions of A and b must match.')\n    det_A = np.linalg.det(A)\n    if np.isclose(det_A, 0):\n        return -1\n    n = A.shape[0]\n    x = np.zeros(n)\n    for i in range(n):\n        A_i = A.copy()\n        A_i[:, i] = b\n        det_A_i = np.linalg.det(A_i)\n        x[i] = det_A_i / det_A\n    return np.round(x, 4).tolist()"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    if not p or not q or len(p) != len(q):\n        return 0.0\n    p = np.array(p)\n    q = np.array(q)\n    bc = np.sum(np.sqrt(p * q))\n    distance = -np.log(bc)\n    return round(distance, 4)"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float]:\n    if len(a) != len(b):\n        return -1\n    return [x + y for (x, y) in zip(a, b)]"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    \"\"\"\n    Compute the policy gradient using the REINFORCE algorithm.\n    \n    Parameters:\n    - theta (np.ndarray): Policy parameters of shape (num_states, num_actions)\n    - episodes (list of list of tuples): Each episode is a list of (state, action, reward) tuples\n    \n    Returns:\n    - grad (np.ndarray): The average gradient, reshaped and rounded to 4 decimals.\n    \"\"\"\n    (num_states, num_actions) = theta.shape\n    grad = np.zeros_like(theta)\n    for episode in episodes:\n        T = len(episode)\n        returns = np.zeros(T)\n        episode_returns = np.zeros(T)\n        cumulative_return = 0\n        for t in reversed(range(T)):\n            cumulative_return += episode[t][2]\n            episode_returns[t] = cumulative_return\n        for t in range(T):\n            (s, a, _) = episode[t]\n            exp_logits = np.exp(theta[s, :])\n            policy = exp_logits / exp_logits.sum()\n            log_pi = np.log(policy[a])\n            grad[s, a] += log_pi * episode_returns[t]\n            grad[s, :] -= policy[s, :] * episode_returns[t]\n    grad = grad / len(episodes)\n    return np.round(grad, 4).tolist()\ntheta = np.array([[1.0, 2.0], [0.5, -1.0]])\nepisodes = [[(0, 0, 1.0), (0, 1, 2.0)], [(1, 0, -1.0), (1, 1, 0.5)]]"}
{"task_id": 123, "completion_id": 0, "solution": "def compute_efficiency(n_experts, k_active, d_in, d_out):\n    flops_dense = d_in * d_out * 2\n    flops_moe = k_active / n_experts * flops_dense\n    savings = flops_dense - flops_moe\n    savings_percentage = savings / flops_dense * 100\n    flops_dense = round(flops_dense, 1)\n    flops_moe = round(flops_moe, 1)\n    savings = round(savings, 1)\n    savings_percentage = round(savings_percentage, 1)\n    return {'FLOPs (Dense Layer)': flops_dense, 'FLOPs (MoE Layer)': flops_moe, 'FLOPs Savings': savings, 'Savings Percentage (%)': savings_percentage}"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int) -> list:\n    \"\"\"\n    Perform the Noisy Top-K Gating as used in Mixture-of-Experts (MoE) models.\n    \n    Parameters:\n        X (np.ndarray): Input matrix (batch_size x input_dim)\n        W_g (np.ndarray): Gating weights (input_dim x num_experts)\n        W_noise (np.ndarray): Noise weights (input_dim x num_Experts)\n        N (np.ndarray): Noisy input compontents matrix (batch_size x num_Experts)\n        k (int): Top-k sparsity constraint\n    \n    Returns:\n        list: Final top-k gate probabilities (batch_size x num_Experts)\n    \"\"\"\n    (batch_size, input_dim) = X.shape\n    num_experts = W_g.shape[1]\n    assert W_noise.shape == (input_dim, num_experts), 'W_noise shape mismatch'\n    assert N.shape == (batch_size, num_experts), 'Noise matrix shape mismatch'\n    gate_logits = X @ W_g\n    noise_logits = X @ W_noise\n    noisy_logits = gate_logits + 0.5 * noise_logits * N\n    probs = np.softmax(noisy_logits, axis=1)\n    topk_values = np.partition(probs, -k, axis=1)[:, -k:]\n    threshold = np.min(topk_values, axis=1, keepdims=True)\n    probs *= (probs >= threshold).astype(np.float32)\n    probs /= np.sum(probs, axis=1, keepdims=True) + 1e-10\n    probs = np.round(probs, 4)\n    return probs.tolist()\nX = np.random.randn(10, 64)\nW_g = np.random.randn(64, 8)\nW_noise = np.random.randn(64, 8)\nN = np.random.randn(10, 8)\nk = 2"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    \"\"\"\n    Implements a Mixture-of-Experts (MoE) layer with softmax gating and top-k routing.\n\n    Args:\n        x (np.ndarray): Input tensor of shape (batch_size, in_dim).\n        We (np.ndarray): Expert weight matrices of shape (n_experts, out_dim, in_dim).\n        Wg (np.ndarray): Gating weight matrix of shape (in_dim, n_experts).\n        n_experts (int): Number of experts.\n        top_k (int): Number of top experts to select per token.\n\n    Returns:\n        list: MoE output after applying top-k routing, rounded to 4 decimals.\n    \"\"\"\n    (batch_size, in_dim) = x.shape\n    out_dim = We.shape[1]\n    gate_scores = x @ Wg\n    top_k_indices = np.argpartition(-gate_scores, top_k)[:, :top_k]\n    top_k_values = np.take_along_axis(gate_scores, top_k_indices, axis=1)\n    gate_logits = x @ Wg\n    gate_probs = np.exp(gate_logits - np.max(gate_logits, axis=1, keepdims=True))\n    gate_probs = gate_probs / np.sum(gate_probs, axis=1, keepdims=True)\n    top_k_probs = np.take_along_axis(gate_probs, top_k_indices, axis=1)\n    top_k_probs = top_k_probs / np.sum(top_k_probs, axis=1, keepdims=True)\n    output = np.zeros((batch_size, out_dim))\n    for i in range(batch_size):\n        for j in range(top_k):\n            expert_index = top_k_indices[i, j]\n            expert_weight = We[expert_index]\n            expert_output = x[i] @ expert_weight.T\n            output[i] += top_k_probs[i, j] * expert_output\n    output = np.round(output, 4)\n    return output.tolist()"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    \"\"\"\n    Perform Group Normalization on input tensor X of shape (B, C, H, W).\n    \n    Parameters:\n    - X: Input tensor of shape (B, C, H, W)\n    - gamma: Scale parameters of shape (C,)\n    - beta: Shift parameters of shape (C,)\n    - num_groups: Number of groups to divide channels into\n    - epsilon: Small value to avoid division by zero\n    Returns:\n    - Normalized and transformed tensor as a Python list (after rounding).\n    \"\"\"\n    (B, C, H, W) = X.shape\n    assert C % num_groups == 0, 'Number of groups must divide the number of channels.'\n    group_size = C // num_groups\n    X_reshaped = X.reshape(B, num_groups, group_size, H, W)\n    mean = np.mean(X_reshaped, axis=(2, 3, 4), keepdims=True)\n    var = np.var(X_reshaped, axis=(2, 3, 4), keepdims=True)\n    X_normalized = (X_reshaped - mean) / np.sqrt(var + epsilon)\n    X_normalized = X_normalized.reshape(B, C, H, W)\n    output = gamma * X_normalized + beta\n    return np.round(output, 4).tolist()"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n\n    def f(x):\n        return x ** 4 - 3 * x ** 3 + 2\n\n    def df(x):\n        return 4 * x ** 3 - 9 * x ** 2\n    current_x = start_x\n    for i in range(max_iters):\n        gradient = df(current_x)\n        if abs(gradient) < tolerance:\n            break\n        current_x -= learning_rate * gradient\n    return round(current_x, 4)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    \"\"\"\n    Applies the Dynamic Tanh (DyT) activation function.\n\n    Args:\n        x (np.ndarray): Input data (usually a 1D or 2D array).\n        alpha (float): Scaling factor for non-linearity adjustment.\n        gamma (float): Gain parameter for activation scaling.\n        beta (float): Shift parameter for activation centering.\n\n    Returns:\n        list[float]: Output after applying DyT, rounded to 4 decimal places and converted to list.\n    \"\"\"\n    mean_x = np.mean(x)\n    centered_x = x - mean_x\n    std_x = np.std(x) + 1e-08\n    normalized_x = centered_x / std_x\n    dyt = gamma * np.tanh(alpha + beta * normalized_x)\n    return np.around(dyt, decimals=4).tolist()"}
