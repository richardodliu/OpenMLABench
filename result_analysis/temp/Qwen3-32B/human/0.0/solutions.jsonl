{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    if len(a) == 0 or len(a[0]) != len(b):\n        return -1\n    result = []\n    for row in a:\n        dot_product = sum((x * y for (x, y) in zip(row, b)))\n        result.append(dot_product)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    return [list(row) for row in zip(*a)]"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    flat = [item for sublist in a for item in sublist]\n    if len(flat) != new_shape[0] * new_shape[1]:\n        return []\n    reshaped = np.array(flat).reshape(new_shape)\n    return reshaped.tolist()"}
{"task_id": 4, "completion_id": 0, "solution": "def calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    if mode == 'row':\n        return [sum(row) / len(row) for row in matrix]\n    elif mode == 'column':\n        num_rows = len(matrix)\n        num_cols = len(matrix[0]) if num_rows > 0 else 0\n        return [sum((matrix[row][col] for row in range(num_rows))) / num_rows for col in range(num_cols)]\n    else:\n        raise ValueError(\"Mode must be 'row' or 'column'.\")"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    \"\"\"\n    Multiplies a matrix by a scalar and returns the resulting matrix.\n    \n    Parameters:\n    matrix (list of list of int/float): The input matrix.\n    scalar (int/float): The scalar value to multiply with the matrix.\n    \n    Returns:\n    list of list of int/float: The resulting matrix after scalar multiplication.\n    \"\"\"\n    result = [[element * scalar for element in row] for row in matrix]\n    return result"}
{"task_id": 6, "completion_id": 0, "solution": "def calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    import math\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    trace = a + d\n    determinant = a * d - b * c\n    discriminant = trace ** 2 - 4 * determinant\n    eigenvalue1 = (trace + math.sqrt(discriminant)) / 2\n    eigenvalue2 = (trace - math.sqrt(discriminant)) / 2\n    return [eigenvalue1, eigenvalue2] if eigenvalue1 > eigenvalue2 else [eigenvalue2, eigenvalue1]"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    try:\n        A_np = np.array(A, dtype=float)\n        T_np = np.array(T, dtype=float)\n        S_np = np.array(S, dtype=float)\n        if T_np.shape[0] != T_np.shape[1] or S_np.shape[0] != S_np.shape[1]:\n            return -1\n        if np.isclose(np.linalg.det(T_np), 0) or np.isclose(np.linalg.det(S_np), 0):\n            return -1\n        result = np.linalg.inv(T_np) @ A_np @ S_np\n        return np.round(result, 4).tolist()\n    except np.linalg.LinAlgError:\n        return -1"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    determinant = a * d - b * c\n    if determinant == 0:\n        return None\n    inv = [[d / determinant, -b / determinant], [-c / determinant, a / determinant]]\n    return inv"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    if len(a[0]) != len(b):\n        return -1\n    result = [[0 for _ in range(len(b[0]))] for _ in range(len(a))]\n    for i in range(len(a)):\n        for j in range(len(b[0])):\n            for k in range(len(b)):\n                result[i][j] += a[i][k] * b[k][j]\n    return result"}
{"task_id": 10, "completion_id": 0, "solution": "def calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    \"\"\"\n    Calculate the covariance matrix for a given list of vectors.\n    \n    Parameters:\n    vectors (list of list of float): A list of feature vectors, where each inner list\n                                     represents a feature with its observations.\n    \n    Returns:\n    list of list of float: The covariance matrix.\n    \"\"\"\n    n = len(vectors[0])\n    m = len(vectors)\n    means = [sum(vector) / n for vector in vectors]\n    covariance_matrix = [[0.0 for _ in range(m)] for _ in range(m)]\n    for i in range(m):\n        for j in range(m):\n            covariance = 0.0\n            for k in range(n):\n                covariance += (vectors[i][k] - means[i]) * (vectors[j][k] - means[j])\n            covariance /= n - 1\n            covariance_matrix[i][j] = covariance\n    return covariance_matrix"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    \"\"\"\n    Solves the system of linear equations Ax = b using the Jacobi method for n iterations.\n    Each intermediate solution is rounded to four decimal places.\n    \n    Parameters:\n    A (np.ndarray): Coefficient matrix (n x n)\n    b (np.ndarray): Constant vector (n x 1)\n    n (int): Number of iterations\n    \n    Returns:\n    list: Approximate solution vector x as a Python list\n    \"\"\"\n    x = np.zeros_like(b)\n    D = np.diag(A)\n    R = A - np.diagflat(D)\n    for _ in range(n):\n        x = (b - np.dot(R, x)) / D\n        x = np.round(x, 4)\n    return x.tolist()"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    \"\"\"\n    Compute the singular values of a 2x2 matrix using the Jacobian method.\n    \n    Parameters:\n    A (np.ndarray): A 2x2 real matrix.\n    \n    Returns:\n    tuple: A tuple of two singular values (s1, s2), rounded to 4 decimal places.\n    \"\"\"\n    A_T_A = np.dot(A.T, A)\n    M = A_T_A.copy()\n    eps = 1e-10\n    max_iter = 1000\n    for _ in range(max_iter):\n        if abs(M[0, 1]) < eps:\n            break\n        theta = 0.5 * np.arctan2(2 * M[0, 1], M[0, 0] - M[1, 1])\n        c = np.cos(theta)\n        s = np.sin(theta)\n        R = np.array([[c, s], [-s, c]])\n        M = np.dot(np.dot(R.T, M), R)\n    s1 = np.sqrt(M[0, 0])\n    s2 = np.sqrt(M[1, 1])\n    (s1, s2) = sorted([s1, s2], reverse=True)\n    return (round(s1, 4), round(s2, 4))\nA = np.array([[3, 4], [1, 2]])"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n\n    def determinant_3x3(mat: list[list[int | float]]) -> float:\n        return mat[0][0] * (mat[1][1] * mat[2][2] - mat[1][2] * mat[2][1]) - mat[0][1] * (mat[1][0] * mat[2][2] - mat[1][2] * mat[2][0]) + mat[0][2] * (mat[1][0] * mat[2][1] - mat[1][1] * mat[2][0])\n    det = 0\n    for col in range(4):\n        minor = [row[:col] + row[col + 1:] for row in matrix[1:]]\n        sign = (-1) ** col\n        det += sign * matrix[0][col] * determinant_3x3(minor)\n    return det\nmatrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    X_np = np.array(X)\n    y_np = np.array(y)\n    X_b = np.c_[np.ones((X_np.shape[0], 1)), X_np]\n    theta = np.linalg.inv(X_b.T @ X_b) @ X_b.T @ y_np\n    theta_rounded = [round(val, 4) for val in theta]\n    return theta_rounded\nX = [[1.0, 2.0], [2.0, 3.0], [3.0, 4.0]]\ny = [3.0, 5.0, 7.0]"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> np.ndarray:\n    m = len(y)\n    theta = np.zeros(X.shape[1])\n    for _ in range(iterations):\n        predictions = X @ theta\n        error = predictions - y\n        gradient = 1 / m * X.T @ error\n        theta -= alpha * gradient\n    return np.round(theta, 4).tolist()"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    standardized = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    min_vals = np.min(data, axis=0)\n    max_vals = np.max(data, axis=0)\n    min_max_scaled = (data - min_vals) / (max_vals - min_vals)\n    standardized_list = np.round(standardized, 4).tolist()\n    min_max_list = np.round(min_max_scaled, 4).tolist()\n    return (standardized_list, min_max_list)"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Tuple\ndef k_means_clustering(points: List[Tuple[float, float]], k: int, initial_centroids: List[Tuple[float, float]], max_iterations: int) -> List[Tuple[float, float]]:\n    points = np.array(points)\n    centroids = np.array(initial_centroids)\n    for _ in range(max_iterations):\n        distances = np.sqrt(((points[:, np.newaxis, :] - centroids[np.newaxis, :, :]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([points[labels == i].mean(axis=0) for i in range(k)])\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    final_centroids = [tuple(np.round(centroid, 4)) for centroid in centroids]\n    return final_centroids\npoints = [(1.0, 2.0), (1.5, 1.8), (5.0, 8.0), (8.0, 8.0), (1.0, 0.6), (9.0, 11.0)]\nk = 2\ninitial_centroids = [(1.0, 1.0), (9.0, 9.0)]\nmax_iterations = 100"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    \"\"\"\n    Generate train and test splits for K-Fold Cross-Validation.\n\n    Parameters:\n    - X: np.ndarray, feature matrix of shape (n_samples, n_features)\n    - y: np.ndarray, target vector of shape (n_samples,)\n    - k: int, number of folds\n    - shuffle: bool, whether to shuffle the data before splitting\n    - random_seed: int, seed for random number generator\n\n    Returns:\n    - List of tuples, where each tuple contains (train_indices, test_indices)\n    \"\"\"\n    n_samples = X.shape[0]\n    indices = np.arange(n_samples)\n    if shuffle:\n        if random_seed is not None:\n            np.random.seed(random_seed)\n        np.random.shuffle(indices)\n    fold_size = n_samples // k\n    folds = []\n    for i in range(k):\n        test_start = i * fold_size\n        test_end = (i + 1) * fold_size if i < k - 1 else n_samples\n        test_indices = indices[test_start:test_end]\n        train_indices = np.concatenate((indices[:test_start], indices[test_end:]))\n        folds.append((train_indices, test_indices))\n    return folds"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    mean = np.mean(data, axis=0)\n    standardized_data = data - mean\n    covariance_matrix = np.cov(standardized_data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eig(covariance_matrix)\n    idx = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvectors = eigenvectors[:, idx]\n    principal_components = sorted_eigenvectors[:, :k]\n    principal_components_rounded = np.round(principal_components, 4)\n    return principal_components_rounded.tolist()"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom typing import Dict, List, Any, Tuple\ndef entropy(class_counts: Dict[Any, int]) -> float:\n    \"\"\"Calculate the entropy of a set of class counts.\"\"\"\n    total = sum(class_counts.values())\n    if total == 0:\n        return 0.0\n    return -sum((count / total * math.log2(count / total) for count in class_counts.values()))\ndef information_gain(parent_entropy: float, subsets: List[Tuple[float, Dict[Any, int]]]) -> float:\n    \"\"\"Calculate the information gain from splitting into subsets.\"\"\"\n    weighted_entropy = 0.0\n    for (weight, class_counts) in subsets:\n        weighted_entropy += weight * entropy(class_counts)\n    return parent_entropy - weighted_entropy\ndef best_split(examples: List[Dict[str, Any]], attributes: List[str], target_attr: str) -> Tuple[str, Dict[Any, Dict[str, Any]]]:\n    \"\"\"Find the best attribute to split on based on information gain.\"\"\"\n    parent_class_counts = Counter((example[target_attr] for example in examples))\n    parent_entropy = entropy(parent_class_counts)\n    best_gain = -1.0\n    best_attribute = None\n    best_splits = {}\n    for attr in attributes:\n        if attr == target_attr:\n            continue\n        attr_values = {}\n        for example in examples:\n            val = example[attr]\n            if val not in attr_values:\n                attr_values[val] = []\n            attr_values[val].append(example)\n        subsets = [(len(subset) / len(examples), Counter((e[target_attr] for e in subset))) for subset in attr_values.values()]\n        gain = information_gain(parent_entropy, subsets)\n        if gain > best_gain:\n            best_gain = gain\n            best_attribute = attr\n            best_splits = attr_values\n    return (best_attribute, best_splits)\ndef learn_decision_tree(examples: List[Dict[str, Any]], attributes: List[str], target_attr: str) -> Dict[str, Any]:\n    \"\"\"Learn a decision tree using recursive binary splitting based on entropy and information gain.\"\"\"\n    if not examples:\n        return 'None'\n    class_values = [example[target_attr] for example in examples]\n    if len(set(class_values)) == 1:\n        return class_values[0]\n    if not attributes:\n        return Counter(class_values).most_common(1)[0][0]\n    (best_attr, splits) = best_split(examples, attributes, target_attr)\n    if best_attr is None:\n        return Counter(class_values).most_common(1)[0][0]\n    tree = {best_attr: {}}\n    remaining_attributes = [attr for attr in attributes if attr != best_attr]\n    for (value, subset) in splits.items():\n        subtree = learn_decision_tree(subset, remaining_attributes, target_attr)\n        tree[best_attr][value] = subtree\n    return tree"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    \"\"\"\n    Implements a deterministic version of the Pegasos algorithm for kernel SVM.\n    \n    Parameters:\n    - data: 2D NumPy array of shape (n_samples, n_features)\n    - labels: 1D NumPy array of shape (n_samples,)\n    - kernel: 'linear' or 'rbf'\n    - lambda_val: Regularization parameter\n    - iterations: Number of training iterations\n    - sigma: Kernel width for RBF kernel\n    \n    Returns:\n    - alphas: Alpha coefficients (1D list)\n    - bias: Bias term (float)\n    \"\"\"\n    n_samples = data.shape[0]\n    alphas = np.zeros(n_samples)\n    bias = 0.0\n    for t in range(1, iterations + 1):\n        eta = 1.0 / (lambda_val * t)\n        K = np.zeros((n_samples, n_samples))\n        for i in range(n_samples):\n            for j in range(n_samples):\n                if kernel == 'linear':\n                    K[i, j] = np.dot(data[i], data[j])\n                elif kernel == 'rbf':\n                    K[i, j] = np.exp(-np.linalg.norm(data[i] - data[j]) ** 2 / (2 * sigma ** 2))\n                else:\n                    raise ValueError(\"Unsupported kernel type. Use 'linear' or 'rbf'.\")\n        y_pred = np.dot(K, alphas * labels) + bias\n        grad = np.zeros(n_samples)\n        for i in range(n_samples):\n            if labels[i] * y_pred[i] < 1:\n                grad[i] = -labels[i] * K[:, i]\n            else:\n                grad[i] = 0\n        alphas = alphas - eta * (lambda_val * alphas + grad)\n        norm = np.sqrt(np.dot(alphas.T, np.dot(K, alphas)))\n        if norm > 1 / np.sqrt(lambda_val):\n            alphas = alphas * (1 / (lambda_val * norm ** 2))\n    bias = 0.0\n    for i in range(n_samples):\n        if labels[i] * (np.dot(alphas * labels, K[:, i]) + bias) < 1:\n            bias = labels[i] - np.dot(alphas * labels, K[:, i])\n    alphas = np.round(alphas, 4)\n    bias = round(bias, 4)\n    return (alphas.tolist(), bias)\ndata = np.array([[1, 2], [2, 3], [3, 3], [6, 7], [7, 8], [8, 8]])\nlabels = np.array([1, 1, 1, -1, -1, -1])"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    \"\"\"\n    Computes the output of the sigmoid activation function for a given input z.\n    \n    Parameters:\n    z (float): The input value to the sigmoid function.\n    \n    Returns:\n    float: The output of the sigmoid function, rounded to four decimal places.\n    \"\"\"\n    output = 1 / (1 + math.exp(-z))\n    return round(output, 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    exp_scores = [math.exp(score) for score in scores]\n    sum_exp = sum(exp_scores)\n    softmax_values = [round(exp / sum_exp, 4) for exp in exp_scores]\n    return softmax_values"}
{"task_id": 24, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    if len(weights) != len(features[0]):\n        raise ValueError('Number of weights must match the number of features in each example.')\n    predicted_probabilities = []\n    for x in features:\n        z = sum((w * f for (w, f) in zip(weights, x))) + bias\n        probability = 1 / (1 + math.exp(-z))\n        predicted_probabilities.append(probability)\n    predicted_probabilities = [round(p, 4) for p in predicted_probabilities]\n    mse = sum(((p - y) ** 2 for (p, y) in zip(predicted_probabilities, labels))) / len(labels)\n    mse = round(mse, 4)\n    return (predicted_probabilities, mse)"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    weights = initial_weights.copy()\n    bias = initial_bias\n    mse_values = []\n    for _ in range(epochs):\n        z = np.dot(features, weights) + bias\n        predictions = 1 / (1 + np.exp(-z))\n        mse = np.mean((predictions - labels) ** 2)\n        mse_values.append(round(mse, 4))\n        error = predictions - labels\n        d_weights = np.dot(features.T, error * predictions * (1 - predictions)) / len(labels)\n        d_bias = np.mean(error * predictions * (1 - predictions))\n        weights -= learning_rate * d_weights\n        bias -= learning_rate * d_bias\n    weights = np.round(weights, 4)\n    bias = round(bias, 4)\n    mse_values = [round(mse, 4) for mse in mse_values]\n    return (weights.tolist(), bias, mse_values)"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data + other.data, _children=(self, other), _op='add')\n\n        def _backward():\n            self.grad += out.grad * 1\n            other.grad += out.grad * 1\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data * other.data, _children=(self, other), _op='mul')\n\n        def _backward():\n            self.grad += out.grad * other.data\n            other.grad += out.grad * self.data\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(self.data if self.data > 0 else 0, _children=(self,), _op='relu')\n\n        def _backward():\n            self.grad += (out.data > 0) * out.grad\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1.0\n        for node in reversed(topo):\n            node._backward()\n\n    def __neg__(self):\n        return self * -1\n\n    def __radd__(self, other):\n        return self + other\n\n    def __sub__(self, other):\n        return self + -other\n\n    def __rsub__(self, other):\n        return other + -self\n\n    def __rmul__(self, other):\n        return self * other\n\n    def __truediv__(self, other):\n        return self * other ** (-1)\n\n    def __rtruediv__(self, other):\n        return other * self ** (-1)\n\n    def __pow__(self, other):\n        assert isinstance(other, (int, float)), 'Only int/float exponents are supported'\n        out = Value(self.data ** other, _children=(self,), _op=f'**{other}')\n\n        def _backward():\n            self.grad += out.grad * other * self.data ** (other - 1)\n        out._backward = _backward\n        return out\n\n    def __repr__(self):\n        return f'Value(data={self.data}, grad={self.grad})'"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    \"\"\"\n    Compute the transformation matrix from basis B to basis C.\n    \n    Parameters:\n    B (list of list of int): Basis vectors of B as columns.\n    C (list of list of int): Basis vectors of C as columns.\n    \n    Returns:\n    list of list of float: Transformation matrix P from B to C, rounded to 4 decimal places.\n    \"\"\"\n    B_matrix = np.array(B, dtype=float)\n    C_matrix = np.array(C, dtype=float)\n    C_inv = np.linalg.inv(C_matrix)\n    P = np.dot(C_inv, B_matrix)\n    P_rounded = np.round(P, 4)\n    return P_rounded.tolist()"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    A_T_A = np.dot(A.T, A)\n    (eigenvalues, eigenvectors) = np.linalg.eig(A_T_A)\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    singular_values = np.sqrt(eigenvalues)\n    V = eigenvectors\n    S = np.diag(singular_values)\n    U = np.zeros_like(A)\n    for i in range(2):\n        if singular_values[i] > 1e-10:\n            U[:, i] = np.dot(A, V[:, i]) / singular_values[i]\n        else:\n            U[:, i] = np.zeros(2)\n    U = np.round(U, 4)\n    S = np.round(S, 4)\n    V = np.round(V, 4)\n    return (U.tolist(), S.tolist(), V.tolist())"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    \"\"\"\n    Shuffles two numpy arrays X and y in the same random order.\n    \n    Parameters:\n    - X (np.ndarray): Features array.\n    - y (np.ndarray): Labels array.\n    - seed (int, optional): Seed for random number generator for reproducibility.\n    \n    Returns:\n    - X_shuffled (list): Shuffled features as a Python list.\n    - y_shuffled (list): Shuffled labels as a Python list.\n    \"\"\"\n    X = np.asarray(X)\n    y = np.asarray(y)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError('X and y must have the same number of samples.')\n    if seed is not None:\n        np.random.seed(seed)\n    indices = np.random.permutation(X.shape[0])\n    X_shuffled = X[indices]\n    y_shuffled = y[indices]\n    return (X_shuffled.tolist(), y_shuffled.tolist())"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    \"\"\"\n    Yields batches of data from the input arrays X and y.\n    \n    Parameters:\n    - X: numpy array of input data.\n    - y: optional numpy array of labels.\n    - batch_size: size of each batch.\n    \n    Yields:\n    - If y is provided: (X_batch, y_batch)\n    - If y is not provided: X_batch\n    \"\"\"\n    n_samples = X.shape[0]\n    for i in range(0, n_samples, batch_size):\n        batch_end = min(i + batch_size, n_samples)\n        X_batch = X[i:batch_end]\n        if y is not None:\n            y_batch = y[i:batch_end]\n            yield (X_batch.tolist(), y_batch.tolist())\n        else:\n            yield X_batch.tolist()"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    \"\"\"\n    Divides the dataset into two subsets based on whether the value of a specified feature\n    is greater than or equal to a given threshold.\n\n    Parameters:\n    - X: numpy.ndarray, the dataset (2D array)\n    - feature_i: int, the index of the feature to use for splitting\n    - threshold: float, the threshold value for splitting\n\n    Returns:\n    - left: list, subset of samples where feature_i >= threshold\n    - right: list, subset of samples where feature_i < threshold\n    \"\"\"\n    feature_values = X[:, feature_i]\n    left_mask = feature_values >= threshold\n    right_mask = feature_values < threshold\n    left = X[left_mask].tolist()\n    right = X[right_mask].tolist()\n    return (left, right)"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    (n_samples, n_features) = X.shape\n    feature_indices = list(range(n_features))\n    poly_indices = []\n    for total_degree in range(1, degree + 1):\n        for c in combinations_with_replacement(feature_indices, total_degree):\n            poly_indices.append(c)\n    n_poly_features = len(poly_indices)\n    X_poly = np.zeros((n_samples, n_poly_features))\n    for (i, indices) in enumerate(poly_indices):\n        X_poly[:, i] = np.prod(X[:, indices], axis=1)\n    return X_poly.tolist()\nX = np.array([[2, 3], [4, 5]])\ndegree = 2"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    \"\"\"\n    Generate random subsets of a dataset.\n\n    Parameters:\n    - X: 2D numpy array of shape (n_samples, n_features)\n    - y: 1D numpy array of shape (n_samples,)\n    - n_subsets: Number of random subsets to generate\n    - replacements: Boolean indicating whether to sample with replacement\n    - seed: Random seed for reproducibility\n\n    Returns:\n    - List of tuples, where each tuple is (X_subset, y_subset)\n    \"\"\"\n    np.random.seed(seed)\n    n_samples = X.shape[0]\n    subsets = []\n    for _ in range(n_subsets):\n        if replacements:\n            indices = np.random.choice(n_samples, size=n_samples, replace=True)\n        else:\n            indices = np.random.permutation(n_samples)\n        X_subset = X[indices]\n        y_subset = y[indices]\n        subsets.append((X_subset, y_subset))\n    return [(X_sub.tolist(), y_sub.tolist()) for (X_sub, y_sub) in subsets]"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    \"\"\"\n    Perform one-hot encoding on a 1D numpy array of integer values.\n\n    Parameters:\n    x (np.ndarray): 1D numpy array of integer values.\n    n_col (int, optional): Number of columns for the one-hot encoded array. \n                           If not provided, it is determined from the max value in x.\n\n    Returns:\n    list: One-hot encoded array as a Python list.\n    \"\"\"\n    x = np.array(x)\n    if n_col is None:\n        n_col = np.max(x) + 1\n    n_row = x.shape[0]\n    one_hot = np.zeros((n_row, n_col))\n    one_hot[np.arange(n_row), x] = 1\n    return one_hot.tolist()"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    \"\"\"\n    Convert a 1D numpy array into a diagonal matrix and return it as a list.\n    \n    Parameters:\n    x (np.ndarray): A 1D numpy array.\n    \n    Returns:\n    list: A 2D list representing the diagonal matrix.\n    \"\"\"\n    diagonal_matrix = np.diag(x)\n    return diagonal_matrix.tolist()"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    \"\"\"\n    Calculate the accuracy score between true and predicted labels.\n    \n    Parameters:\n    y_true (np.ndarray): 1D array of true labels.\n    y_pred (np.ndarray): 1D array of predicted labels.\n    \n    Returns:\n    float: Accuracy score rounded to 4 decimal places.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        raise ValueError('y_true and y_pred must be of the same length.')\n    correct = np.sum(y_true == y_pred)\n    total = len(y_true)\n    accuracy = correct / total\n    return round(accuracy, 4)"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    \"\"\"\n    Calculate the correlation matrix between X and Y (or X with itself if Y is None).\n    \n    Parameters:\n    - X: 2D numpy array (n_samples, n_features)\n    - Y: Optional 2D numpy array (n_samples, m_features)\n    \n    Returns:\n    - Correlation matrix as a 2D list (rounded to 4 decimal places)\n    \"\"\"\n    if Y is None:\n        Y = X\n    X_centered = X - np.mean(X, axis=0)\n    Y_centered = Y - np.mean(Y, axis=0)\n    std_X = np.std(X, axis=0, ddof=0)\n    std_Y = np.std(Y, axis=0, ddof=0)\n    std_X[std_X == 0] = 1.0\n    std_Y[std_Y == 0] = 1.0\n    X_normalized = X_centered / std_X\n    Y_normalized = Y_centered / std_Y\n    correlation_matrix = np.dot(X_normalized.T, Y_normalized) / X.shape[0]\n    return np.round(correlation_matrix, 4).tolist()"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_fit(X, y, n_clf):\n    (n_samples, n_features) = X.shape\n    weights = np.ones(n_samples) / n_samples\n    classifiers = []\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_threshold = None\n        best_feature = None\n        best_direction = None\n        best_prediction = None\n        for feature in range(n_features):\n            indices = np.argsort(X[:, feature])\n            sorted_X = X[indices, feature]\n            sorted_y = y[indices]\n            sorted_weights = weights[indices]\n            for i in range(n_samples - 1):\n                threshold = (sorted_X[i] + sorted_X[i + 1]) / 2\n                for direction in ['lt', 'gt']:\n                    prediction = np.ones(n_samples) * -1\n                    if direction == 'lt':\n                        prediction[sorted_X <= threshold] = 1\n                    else:\n                        prediction[sorted_X > threshold] = 1\n                    error = np.sum(sorted_weights[sorted_y != prediction])\n                    if error > 0.5:\n                        error = 1 - error\n                        prediction *= -1\n                    if error < best_error:\n                        best_error = error\n                        best_threshold = threshold\n                        best_feature = feature\n                        best_direction = direction\n                        best_prediction = prediction\n        epsilon = best_error\n        if epsilon == 0:\n            epsilon = 1e-10\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n        weights *= np.exp(-alpha * y * best_prediction)\n        weights /= np.sum(weights)\n        classifiers.append({'feature': best_feature, 'threshold': round(best_threshold, 4), 'direction': best_direction, 'alpha': round(alpha, 4)})\n    return classifiers"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list):\n    scores = np.array(scores, dtype=np.float64)\n    shifted_scores = scores - np.max(scores)\n    log_sum_exp = np.log(np.sum(np.exp(shifted_scores)))\n    log_softmax_values = shifted_scores - log_sum_exp\n    return np.round(log_softmax_values, 4).tolist()"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport copy\nimport math\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.optimizer = None\n        self.optimizer_w0 = None\n\n    def initialize(self, optimizer):\n        input_dim = self.input_shape[0]\n        limit = 1 / math.sqrt(input_dim)\n        self.W = np.random.uniform(-limit, limit, size=(input_dim, self.n_units))\n        self.w0 = np.zeros((1, self.n_units))\n        self.optimizer = copy.copy(optimizer)\n        self.optimizer_w0 = copy.copy(optimizer)\n\n    def parameters(self):\n        return self.W.size + self.w0.size\n\n    def forward_pass(self, X, training):\n        self.layer_input = X\n        output = np.dot(X, self.W) + self.w0\n        return output\n\n    def backward_pass(self, accum_grad):\n        X = self.layer_input\n        grad_input = np.dot(accum_grad, self.W.T)\n        if self.trainable:\n            grad_W = np.dot(X.T, accum_grad)\n            grad_w0 = np.sum(accum_grad, axis=0, keepdims=True)\n            self.W = self.optimizer.update(self.W, grad_W)\n            self.w0 = self.optimizer_w0.update(self.w0, grad_w0)\n        return grad_input\n\n    def output_shape(self):\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    \"\"\"\n    Perform a 2D convolution on the input matrix using the given kernel, padding, and stride.\n    \n    Parameters:\n    - input_matrix: 2D numpy array representing the input image.\n    - kernel: 2D numpy array representing the convolutional kernel.\n    - padding: integer specifying the number of zero-padding layers to add.\n    - stride: integer specifying the stride of the convolution.\n    \n    Returns:\n    - Output of the convolution as a Python list (rounded to 4 decimal places).\n    \"\"\"\n    (in_height, in_width) = input_matrix.shape\n    (kernel_height, kernel_width) = kernel.shape\n    padded_input = np.pad(input_matrix, ((padding, padding), (padding, padding)), mode='constant')\n    out_height = (in_height + 2 * padding - kernel_height) // stride + 1\n    out_width = (in_width + 2 * padding - kernel_width) // stride + 1\n    output = np.zeros((out_height, out_width))\n    for i in range(out_height):\n        for j in range(out_width):\n            region = padded_input[i * stride:i * stride + kernel_height, j * stride:j * stride + kernel_width]\n            output[i, j] = np.sum(region * kernel)\n    output = np.round(output, 4)\n    return output.tolist()"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    return max(0, z)"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    \"\"\"\n    Compute the Ridge Regression loss function.\n    \n    Parameters:\n    - X: 2D numpy array of shape (n_samples, n_features), the feature matrix.\n    - w: 1D numpy array of shape (n_features,), the coefficients.\n    - y_true: 1D numpy array of shape (n_samples,), the true labels.\n    - alpha: float, the regularization parameter.\n    \n    Returns:\n    - float: The Ridge loss, rounded to 4 decimal places.\n    \"\"\"\n    y_pred = X @ w\n    mse = np.mean((y_true - y_pred) ** 2)\n    regularization = alpha * np.sum(w ** 2)\n    loss = mse + regularization\n    return round(loss, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float:\n    \"\"\"\n    Applies the Leaky ReLU activation function to the input z.\n    \n    Parameters:\n    z (float): Input value.\n    alpha (float): Slope for negative inputs. Default is 0.01.\n    \n    Returns:\n    float: Output after applying Leaky ReLU.\n    \"\"\"\n    return z if z > 0 else alpha * z"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    \"\"\"\n    Compute the linear kernel (dot product) between two vectors x1 and x2.\n    \n    Parameters:\n    x1 (array-like): First input vector.\n    x2 (array-like): Second input vector.\n    \n    Returns:\n    float: The linear kernel value (dot product).\n    \"\"\"\n    x1 = np.array(x1)\n    x2 = np.array(x2)\n    return np.dot(x1, x2)"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    \"\"\"\n    Calculate the precision metric for binary classification.\n    \n    Parameters:\n    y_true (np.ndarray): True binary labels (0 or 1).\n    y_pred (np.ndarray): Predicted binary labels (0 or 1).\n    \n    Returns:\n    float: Precision score.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    true_positives = np.sum((y_true == 1) & (y_pred == 1))\n    false_positives = np.sum((y_true == 0) & (y_pred == 1))\n    if true_positives + false_positives == 0:\n        return 0.0\n    return true_positives / (true_positives + false_positives)"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    \"\"\"\n    Perform gradient descent optimization using the specified method (batch, stochastic, or mini-batch).\n    \n    Parameters:\n    - X: numpy array of shape (n_samples, n_features)\n    - y: numpy array of shape (n_samples,)\n    - weights: numpy array of shape (n_features,)\n    - learning_rate: float\n    - n_iterations: int\n    - batch_size: int (default=1)\n    - method: str, one of ['batch', 'stochastic', 'mini-batch']\n    \n    Returns:\n    - weights: numpy array of optimized weights\n    - losses: list of MSE losses at each iteration\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    losses = []\n    for _ in range(n_iterations):\n        if method == 'batch':\n            batch_indices = np.arange(n_samples)\n        elif method == 'stochastic':\n            batch_indices = np.random.choice(n_samples, size=1, replace=False)\n        elif method == 'mini-batch':\n            batch_indices = np.random.choice(n_samples, size=batch_size, replace=False)\n        else:\n            raise ValueError(\"Method must be 'batch', 'stochastic', or 'mini-batch'\")\n        X_batch = X[batch_indices]\n        y_batch = y[batch_indices]\n        y_pred = X_batch @ weights\n        loss = np.mean((y_batch - y_pred) ** 2)\n        losses.append(round(loss, 4))\n        gradient = -2 * X_batch.T @ (y_batch - y_pred) / len(batch_indices)\n        weights -= learning_rate * gradient\n    weights = np.round(weights, 4).tolist()\n    losses = [round(loss, 4) for loss in losses]\n    return (weights, losses)"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    \"\"\"\n    Convert a given matrix to its Reduced Row Echelon Form (RREF).\n    \n    Parameters:\n    matrix (list of lists or np.ndarray): The input matrix.\n    \n    Returns:\n    list: The RREF of the matrix as a Python list.\n    \"\"\"\n    mat = np.array(matrix, dtype=float)\n    (rows, cols) = mat.shape\n    lead = 0\n    for r in range(rows):\n        if lead >= cols:\n            return mat.tolist()\n        i = r\n        while mat[i, lead] == 0:\n            i += 1\n            if i == rows:\n                i = r\n                lead += 1\n                if lead == cols:\n                    return mat.tolist()\n        mat[[i, r]] = mat[[r, i]]\n        mat[r] = mat[r] / mat[r, lead]\n        for i in range(rows):\n            if i != r and mat[i, lead] != 0:\n                mat[i] = mat[i] - mat[i, lead] * mat[r]\n        lead += 1\n    return mat.tolist()"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=10):\n    \"\"\"\n    Implements the Adam optimization algorithm to minimize a given function.\n    \n    Parameters:\n    - f: Objective function to be optimized\n    - grad: Function that computes the gradient of f\n    - x0: Initial parameter values (numpy array)\n    - learning_rate: Step size (default: 0.001)\n    - beta1: Exponential decay rate for the first moment estimates (default: 0.9)\n    - beta2: Exponential decay rate for the second moment estimates (default: 0.999)\n    - epsilon: Small constant for numerical stability (default: 1e-8)\n    - num_iterations: Number of iterations to run the optimizer (default: 10)\n    \n    Returns:\n    - Optimized parameters as a list (rounded to 4 decimal places)\n    \"\"\"\n    x = np.array(x0, dtype=np.float64)\n    m = np.zeros_like(x)\n    v = np.zeros_like(x)\n    t = 0\n    for _ in range(num_iterations):\n        t += 1\n        grad_x = grad(x)\n        m = beta1 * m + (1 - beta1) * grad_x\n        v = beta2 * v + (1 - beta2) * grad_x ** 2\n        m_hat = m / (1 - beta1 ** t)\n        v_hat = v / (1 - beta2 ** t)\n        x = x - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    return np.round(x, 4).tolist()"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    (n_samples, n_features) = X.shape\n    w = np.zeros(n_features)\n    b = 0.0\n    for _ in range(max_iter):\n        y_pred = np.dot(X, w) + b\n        dw = -1 / n_samples * np.dot(X.T, y - y_pred) + alpha * np.sign(w)\n        db = -1 / n_samples * np.sum(y - y_pred)\n        w_new = w - learning_rate * dw\n        b_new = b - learning_rate * db\n        if np.linalg.norm(w_new - w) < tol and abs(b_new - b) < tol:\n            break\n        (w, b) = (w_new, b_new)\n    w = np.round(w, 4)\n    b = round(b, 4)\n    return (w.tolist(), b)\nX = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\ny = np.array([3, 5, 7, 9])"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    m = len(source)\n    n = len(target)\n    dp = np.zeros((m + 1, n + 1), dtype=int)\n    for i in range(m + 1):\n        dp[i][0] = i\n    for j in range(n + 1):\n        dp[0][j] = j\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            sub_cost = 0 if source[i - 1] == target[j - 1] else 1\n            dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + sub_cost)\n            if i > 1 and j > 1 and (source[i - 1] == target[j - 2]) and (source[i - 2] == target[j - 1]):\n                dp[i][j] = min(dp[i][j], dp[i - 2][j - 2] + 1)\n    return dp[m][n]"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    \"\"\"\n    Calculate the recall metric for binary classification.\n    \n    Parameters:\n    - y_true: List of true binary labels (0 or 1)\n    - y_pred: List of predicted binary labels (0 or 1)\n    \n    Returns:\n    - Recall value rounded to three decimal places\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    TP = np.sum((y_true == 1) & (y_pred == 1))\n    FN = np.sum((y_true == 1) & (y_pred == 0))\n    denominator = TP + FN\n    if denominator == 0:\n        return 0.0\n    else:\n        return round(TP / denominator, 3)"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    \"\"\"\n    Compute the self-attention output for a given input matrix X.\n    \n    Parameters:\n    - X: Input matrix of shape (seq_len, input_dim)\n    - W_q: Query weight matrix of shape (input_dim, d_k)\n    - W_k: Key weight matrix of shape (input_dim, d_k)\n    - W_v: Value weight matrix of shape (input_dim, d_v)\n    \n    Returns:\n    - Attention output as a Python list (rounded to 4 decimal places)\n    \"\"\"\n    (seq_len, input_dim) = X.shape\n    d_k = W_q.shape[1]\n    d_v = W_v.shape[1]\n    Q = X @ W_q\n    K = X @ W_k\n    V = X @ W_v\n    scores = Q @ K.T / np.sqrt(d_k)\n    exp_scores = np.exp(scores - np.max(scores, axis=1, keepdims=True))\n    attention_weights = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)\n    attention_output = attention_weights @ V\n    attention_output = np.round(attention_output, 4)\n    return attention_output.tolist()"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    \"\"\"\n    Implements a simple RNN forward pass.\n    \n    Parameters:\n    - input_sequence: List of input vectors (each is a list of floats)\n    - initial_hidden_state: Initial hidden state vector\n    - Wx: Weight matrix for input-to-hidden connections\n    - Wh: Weight matrix for hidden-to-hidden connections\n    - b: Bias vector\n    \n    Returns:\n    - Final hidden state after processing the entire sequence (rounded to 4 decimals)\n    \"\"\"\n    h_prev = np.array(initial_hidden_state)\n    Wx = np.array(Wx)\n    Wh = np.array(Wh)\n    b = np.array(b)\n    for x in input_sequence:\n        x_t = np.array(x)\n        h_t = np.tanh(np.dot(Wx, x_t) + np.dot(Wh, h_prev) + b)\n        h_prev = h_t\n    return h_prev.round(4).tolist()"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    \"\"\"\n    Applies a 2D translation to a list of [x, y] points.\n    \n    Parameters:\n    - points: List of [x, y] coordinates.\n    - tx: Translation distance in x-direction.\n    - ty: Translation distance in y-direction.\n    \n    Returns:\n    - A new list of translated [x, y] coordinates.\n    \"\"\"\n    points_array = np.array(points, dtype=np.float64)\n    translation = np.array([tx, ty])\n    translated_array = points_array + translation\n    return translated_array.tolist()"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    Compute the KL divergence between two univariate normal distributions.\n    \n    Parameters:\n    mu_p (float): Mean of distribution P\n    sigma_p (float): Standard deviation of distribution P\n    mu_q (float): Mean of distribution Q\n    sigma_q (float): Standard deviation of distribution Q\n    \n    Returns:\n    float: KL divergence D_KL(P || Q)\n    \"\"\"\n    return np.log(sigma_q / sigma_p) + (sigma_p ** 2 + (mu_p - mu_q) ** 2) / (2 * sigma_q ** 2) - 0.5"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    \"\"\"\n    Solves the linear system Ax = b using the Gauss-Seidel iterative method.\n    \n    Parameters:\n    - A: Square matrix of coefficients (numpy array)\n    - b: Right-hand side vector (numpy array)\n    - n: Number of iterations\n    - x_ini: Optional initial guess for x (default is a vector of zeros)\n    \n    Returns:\n    - x: Approximated solution vector after n iterations (rounded to 4 decimals)\n    \"\"\"\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    if x_ini is None:\n        x = np.zeros_like(b, dtype=float)\n    else:\n        x = np.array(x_ini, dtype=float)\n    for _ in range(n):\n        for i in range(A.shape[0]):\n            x[i] = (b[i] - np.dot(A[i, :i], x[:i]) - np.dot(A[i, i + 1:], x[i + 1:])) / A[i, i]\n    return np.round(x, 4).tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    \"\"\"\n    Solves the linear system Ax = b using Gaussian Elimination with partial pivoting.\n    \n    Parameters:\n    A (list of lists or np.ndarray): Coefficient matrix.\n    b (list or np.ndarray): Right-hand side vector.\n    \n    Returns:\n    list: Solution vector x, rounded to 4 decimal places.\n    \"\"\"\n    n = len(b)\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    for i in range(n):\n        max_row = i + np.argmax(np.abs(A[i:, i]))\n        if A[max_row, i] == 0:\n            raise ValueError('Matrix is singular or nearly singular.')\n        A[[i, max_row]] = A[[max_row, i]]\n        b[[i, max_row]] = b[[max_row, i]]\n        for j in range(i + 1, n):\n            factor = A[j, i] / A[i, i]\n            A[j, i:] = A[j, i:] - factor * A[i, i:]\n            b[j] = b[j] - factor * b[i]\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        x[i] = (b[i] - np.dot(A[i, i + 1:], x[i + 1:])) / A[i, i]\n    return np.round(x, 4).tolist()"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \"\"\"\n        h = [initial_hidden_state]\n        c = [initial_cell_state]\n        for t in range(x.shape[1]):\n            xt = x[:, t].reshape(-1, 1)\n            concat = np.concatenate((xt, h[-1]), axis=0)\n            ft = self.sigmoid(np.dot(self.Wf, concat) + self.bf)\n            it = self.sigmoid(np.dot(self.Wi, concat) + self.bi)\n            cct = np.tanh(np.dot(self.Wc, concat) + self.bc)\n            ot = self.sigmoid(np.dot(self.Wo, concat) + self.bo)\n            ct = ft * c[-1] + it * cct\n            ht = ot * np.tanh(ct)\n            c.append(ct)\n            h.append(ht)\n        h = [np.round(ht, 4).tolist() for ht in h]\n        final_hidden_state = np.round(h[-1], 4).tolist()\n        final_cell_state = np.round(c[-1], 4).tolist()\n        return (h, final_hidden_state, final_cell_state)\n\n    def sigmoid(self, x):\n        \"\"\"Sigmoid activation function\"\"\"\n        return 1 / (1 + np.exp(-x))"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\ndef compute_tf_idf(corpus, query):\n    if not corpus:\n        raise ValueError('The corpus is empty. Cannot compute TF-IDF.')\n    vocabulary = set()\n    for doc in corpus:\n        vocabulary.update(doc)\n    vocabulary.update(query)\n    vocabulary = list(vocabulary)\n    vocab_size = len(vocabulary)\n    word_to_index = {word: i for (i, word) in enumerate(vocabulary)}\n    num_docs = len(corpus)\n    tf = np.zeros((num_docs, vocab_size))\n    df = np.zeros(vocab_size)\n    for (doc_idx, doc) in enumerate(corpus):\n        word_count = {}\n        for word in doc:\n            word_count[word] = word_count.get(word, 0) + 1\n        total_words = len(doc)\n        for (word, count) in word_count.items():\n            if word in word_to_index:\n                tf[doc_idx, word_to_index[word]] = count / total_words\n    for doc in corpus:\n        unique_words = set(doc)\n        for word in unique_words:\n            if word in word_to_index:\n                df[word_to_index[word]] += 1\n    idf = np.log((num_docs + 1) / (df + 1)) + 1\n    tf_idf = tf * idf\n    query_indices = [word_to_index[word] for word in query if word in word_to_index]\n    if not query_indices:\n        return []\n    result = tf_idf[:, query_indices]\n    result = np.round(result, 4)\n    return result.tolist()"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    true_positives = np.sum(np.logical_and(y_true == 1, y_pred == 1))\n    false_positives = np.sum(np.logical_and(y_true == 0, y_pred == 1))\n    false_negatives = np.sum(np.logical_and(y_true == 1, y_pred == 0))\n    precision = true_positives / (true_positives + false_positives) if true_positives + false_positives > 0 else 0\n    recall = true_positives / (true_positives + false_negatives) if true_positives + false_negatives > 0 else 0\n    f_score = (1 + beta ** 2) * precision * recall / (beta ** 2 * precision + recall) if beta ** 2 * precision + recall > 0 else 0\n    return round(f_score, 3)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, x):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n        \"\"\"\n        h = np.tanh(self.W_xh @ x + self.W_hh @ self.h_prev + self.b_h)\n        y = self.W_hy @ h + self.b_y\n        return (h, y)\n\n    def rnn_forward(self, W_xh, W_hh, W_hy, b_h, b_y, hidden_size, input_sequence):\n        \"\"\"\n        Processes a sequence of inputs and returns the output, the last inputs and the hidden states.\n        \"\"\"\n        T = input_sequence.shape[1]\n        h = np.zeros((hidden_size, T + 1))\n        y = np.zeros((W_hy.shape[0], T))\n        inputs = {}\n        hiddens = {}\n        outputs = {}\n        for t in range(T):\n            x = input_sequence[:, t].reshape(-1, 1)\n            h[:, t] = np.tanh(W_xh @ x + W_hh @ h[:, t - 1].reshape(-1, 1) + b_h).flatten()\n            y[:, t] = (W_hy @ h[:, t].reshape(-1, 1) + b_y).flatten()\n            inputs[t] = x\n            hiddens[t] = h[:, t].copy()\n            outputs[t] = y[:, t].copy()\n        return (y, inputs, hiddens)\n\n    def rnn_backward(self, W_xh, W_hh, W_hy, b_h, b_y, hidden_size, input_sequence, expected_output, outputs, last_inputs, last_hiddens, learning_rate):\n        \"\"\"\n        Performs backpropagation through time (BPTT) to adjust the weights based on the loss.\n        \"\"\"\n        T = input_sequence.shape[1]\n        dW_xh = np.zeros_like(W_xh)\n        dW_hh = np.zeros_like(W_hh)\n        dW_hy = np.zeros_like(W_hy)\n        db_h = np.zeros_like(b_h)\n        db_y = np.zeros_like(b_y)\n        dh_next = np.zeros((hidden_size, 1))\n        for t in reversed(range(T)):\n            dy = outputs[t] - expected_output[:, t].reshape(-1, 1)\n            dW_hy += dy @ last_hiddens[t].reshape(1, -1)\n            db_y += dy\n            dh = W_hy.T @ dy + dh_next\n            dh_raw = (1 - last_hiddens[t].reshape(-1, 1) ** 2) * dh\n            dx = W_xh.T @ dh_raw\n            dW_xh += dh_raw @ last_inputs[t].T\n            db_h += dh_raw\n            dh_next = W_hh.T @ dh_raw\n            dW_hh += dh_raw @ last_hiddens[t - 1].reshape(1, -1)\n        for grad in [dW_xh, dW_hh, dW_hy, db_h, db_y]:\n            np.clip(grad, -1, 1, out=grad)\n        W_xh -= learning_rate * dW_xh\n        W_hh -= learning_rate * dW_hh\n        W_hy -= learning_rate * dW_hy\n        b_h -= learning_rate * db_h\n        b_y -= learning_rate * db_y\n        return (W_xh, W_hh, W_hy, b_h, b_y)\n\n    def train(self, input_sequence, expected_output, learning_rate=0.01):\n        \"\"\"\n        Trains the RNN on a sequence prediction task.\n        \"\"\"\n        (outputs, last_inputs, last_hiddens) = self.rnn_forward(self.W_xh, self.W_hh, self.W_hy, self.b_h, self.b_y, self.hidden_size, input_sequence)\n        (self.W_xh, self.W_hh, self.W_hy, self.b_h, self.b_y) = self.rnn_backward(self.W_xh, self.W_hh, self.W_hy, self.b_h, self.b_y, self.hidden_size, input_sequence, expected_output, outputs, last_inputs, last_hiddens, learning_rate)\n\n    def predict(self, input_sequence):\n        \"\"\"\n        Predicts the next item in the sequence.\n        \"\"\"\n        (_, T) = input_sequence.shape\n        h = np.zeros((self.hidden_size, 1))\n        predictions = np.zeros((self.W_hy.shape[0], T))\n        for t in range(T):\n            x = input_sequence[:, t].reshape(-1, 1)\n            h = np.tanh(self.W_xh @ x + self.W_hh @ h + self.b_h)\n            y = self.W_hy @ h + self.b_y\n            predictions[:, t] = y.flatten()\n        return predictions"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    A = np.array(A, dtype=float)\n    assert np.allclose(A, A.T), 'Matrix A must be symmetric.'\n    b = np.array(b, dtype=float)\n    if x0 is None:\n        x = np.zeros_like(b)\n    else:\n        x = np.array(x0, dtype=float)\n    r = b - A @ x\n    p = r.copy()\n    r_norm_squared = r @ r\n    tol_squared = tol ** 2\n    for i in range(n):\n        if r_norm_squared < tol_squared:\n            break\n        Ap = A @ p\n        alpha = r_norm_squared / (p @ Ap)\n        x += alpha * p\n        r -= alpha * Ap\n        r_new_norm_squared = r @ r\n        beta = r_new_norm_squared / r_norm_squared\n        p = r + beta * p\n        r_norm_squared = r_new_norm_squared\n    return np.round(x, 8).tolist()\nA = np.array([[4, 1], [1, 3]])\nb = np.array([1, 2])\nx = conjugate_gradient(A, b, n=100)"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef gini_impurity(y: List[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    if not y:\n        return 0.0\n    counts = np.bincount(y)\n    total = len(y)\n    probabilities = counts / total\n    squared_probabilities = np.sum(probabilities ** 2)\n    gini = 1 - squared_probabilities\n    return round(gini, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    num_rows = len(dense_matrix)\n    values = []\n    column_indices = []\n    row_pointer = [0]\n    for row in dense_matrix:\n        for (col_idx, val) in enumerate(row):\n            if val != 0:\n                values.append(val)\n                column_indices.append(col_idx)\n        row_pointer.append(len(values))\n    return (values, column_indices, row_pointer)"}
{"task_id": 66, "completion_id": 0, "solution": "def orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    import numpy as np\n    v = np.array(v)\n    L = np.array(L)\n    dot_vL = np.dot(v, L)\n    dot_LL = np.dot(L, L)\n    if dot_LL == 0:\n        raise ValueError('The line vector L cannot be a zero vector.')\n    scalar_proj = dot_vL / dot_LL\n    proj_vector = scalar_proj * L\n    return [round(x, 3) for x in proj_vector.tolist()]"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    if not dense_matrix or not dense_matrix[0]:\n        return ([], [], [0])\n    num_rows = len(dense_matrix)\n    num_cols = len(dense_matrix[0])\n    values = []\n    row_indices = []\n    col_ptr = [0]\n    for col in range(num_cols):\n        for row in range(num_rows):\n            val = dense_matrix[row][col]\n            if val != 0:\n                values.append(val)\n                row_indices.append(row)\n        col_ptr.append(len(values))\n    return (values, row_indices, col_ptr)"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    \"\"\"\n    Computes the column space (image) of a matrix A.\n    \n    Parameters:\n    A (list of lists or np.ndarray): The input matrix.\n    \n    Returns:\n    list: A list of basis vectors that span the column space of A.\n    \"\"\"\n    A = np.array(A, dtype=float)\n    (num_rows, num_cols) = A.shape\n    B = A.copy()\n    pivot_cols = []\n    for col in range(num_cols):\n        pivot_row = None\n        for row in range(num_rows):\n            if abs(B[row, col]) > 1e-10:\n                pivot_row = row\n                break\n        if pivot_row is None:\n            continue\n        B[[0, pivot_row], :] = B[[pivot_row, 0], :]\n        pivot_val = B[0, col]\n        B[0, :] /= pivot_val\n        for row in range(1, num_rows):\n            factor = B[row, col]\n            B[row, :] -= factor * B[0, :]\n        pivot_cols.append(col)\n        B = B[1:, :]\n        if B.size == 0:\n            break\n    A = np.array(A, dtype=float)\n    basis = A[:, pivot_cols]\n    return np.round(basis, 8).tolist()"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    y_mean = np.mean(y_true)\n    tss = np.sum((y_true - y_mean) ** 2)\n    rss = np.sum((y_true - y_pred) ** 2)\n    r2 = 1 - rss / tss\n    return round(r2, 3)"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    if not img or not img[0]:\n        return -1\n    rows = len(img)\n    cols = len(img[0])\n    for row in img:\n        if len(row) != cols:\n            return -1\n    total_pixels = rows * cols\n    total_brightness = 0\n    for row in img:\n        for pixel in row:\n            if not 0 <= pixel <= 255:\n                return -1\n            total_brightness += pixel\n    average_brightness = round(total_brightness / total_pixels, 2)\n    return average_brightness"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    \"\"\"\n    Calculate the Root Mean Square Error (RMSE) between y_true and y_pred.\n    \n    Parameters:\n    y_true (array-like): Ground truth (correct) target values.\n    y_pred (array-like): Estimated target values.\n    \n    Returns:\n    float: RMSE value rounded to three decimal places.\n    \n    Raises:\n    ValueError: If inputs are not of the same length or are empty.\n    TypeError: If inputs are not array-like or contain invalid types.\n    \"\"\"\n    try:\n        y_true = np.asarray(y_true)\n        y_pred = np.asarray(y_pred)\n        if not (np.issubdtype(y_true.dtype, np.number) and np.issubdtype(y_pred.dtype, np.number)):\n            raise TypeError('Input arrays must contain numeric values.')\n        if y_true.size == 0 or y_pred.size == 0:\n            raise ValueError('Input arrays cannot be empty.')\n        if y_true.shape != y_pred.shape:\n            raise ValueError('Input arrays must have the same shape.')\n        squared_errors = (y_true - y_pred) ** 2\n        mean_squared_error = np.mean(squared_errors)\n        root_mean_squared_error = np.sqrt(mean_squared_error)\n        return round(root_mean_squared_error, 3)\n    except Exception as e:\n        raise e"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    \"\"\"\n    Calculate the Jaccard Index between two binary arrays.\n    \n    Parameters:\n    y_true (array-like): True binary labels.\n    y_pred (array-like): Predicted binary labels.\n    \n    Returns:\n    float: Jaccard Index rounded to three decimal places.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    intersection = np.sum(np.logical_and(y_true, y_pred))\n    union = np.sum(np.logical_or(y_true, y_pred))\n    if union == 0:\n        return 1.0\n    jaccard = intersection / union\n    return round(jaccard, 3)"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    \"\"\"\n    Calculate the Dice Score (S\u00f8rensen-Dice coefficient) between two binary arrays.\n    \n    Parameters:\n    y_true (array-like): Ground truth (correct) labels.\n    y_pred (array-like): Predicted labels.\n    \n    Returns:\n    float: Dice Score rounded to 3 decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    if not np.all(np.isin(y_true, [0, 1])) or not np.all(np.isin(y_pred, [0, 1])):\n        raise ValueError('Input arrays must contain only binary values (0 or 1).')\n    intersection = np.sum(np.logical_and(y_true, y_pred))\n    sum_true_pred = np.sum(y_true) + np.sum(y_pred)\n    if sum_true_pred == 0:\n        return 1.0\n    dice = 2.0 * intersection / sum_true_pred\n    return round(dice, 3)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef create_row_hv(row, dim, random_seeds):\n    \"\"\"\n    Generate a composite hypervector for a given dataset row using Hyperdimensional Computing (HDC).\n    \n    Each feature is represented by binding the hypervector for the feature name with the hypervector\n    for its value. All feature hypervectors are then bundled to create the composite hypervector.\n    \n    Parameters:\n    - row (dict): A dictionary representing a dataset row.\n    - dim (int): The dimensionality of the hypervectors.\n    - random_seeds (dict): A dictionary mapping feature names to random seeds for reproducibility.\n    \n    Returns:\n    - list: The composite hypervector as a list.\n    \"\"\"\n    composite_hv = np.zeros(dim)\n    for (feature_name, feature_value) in row.items():\n        seed = random_seeds.get(feature_name, 0)\n        np.random.seed(seed)\n        feature_hv = np.random.choice([-1, 1], size=dim)\n        value_hv = np.random.choice([-1, 1], size=dim)\n        bound_hv = feature_hv * value_hv\n        composite_hv += bound_hv\n    composite_hv = np.sign(composite_hv)\n    return composite_hv.tolist()"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    \"\"\"\n    Generate a 2x2 confusion matrix for binary classification.\n    \n    Parameters:\n        data (list of lists): Each inner list is [y_true, y_pred]\n    \n    Returns:\n        list of lists: A 2x2 confusion matrix in the format:\n                       [[TN, FP],\n                        [FN, TP]]\n    \"\"\"\n    matrix = [[0, 0], [0, 0]]\n    for (y_true, y_pred) in data:\n        if y_true == 0 and y_pred == 0:\n            matrix[0][0] += 1\n        elif y_true == 0 and y_pred == 1:\n            matrix[0][1] += 1\n        elif y_true == 1 and y_pred == 0:\n            matrix[1][0] += 1\n        elif y_true == 1 and y_pred == 1:\n            matrix[1][1] += 1\n    return matrix"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    if v1.shape != v2.shape:\n        raise ValueError('Input vectors must have the same shape.')\n    if v1.size == 0 or v2.size == 0:\n        raise ValueError('Input vectors cannot be empty.')\n    dot_product = np.dot(v1, v2)\n    magnitude_v1 = np.linalg.norm(v1)\n    magnitude_v2 = np.linalg.norm(v2)\n    if magnitude_v1 == 0 or magnitude_v2 == 0:\n        raise ValueError('Input vectors cannot have zero magnitude.')\n    similarity = dot_product / (magnitude_v1 * magnitude_v2)\n    return round(similarity, 3)"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    if len(actual) != len(predicted):\n        raise ValueError(\"The lengths of 'actual' and 'predicted' lists must be the same.\")\n    for label in actual + predicted:\n        if label not in {0, 1}:\n            raise ValueError(\"All elements in 'actual' and 'predicted' must be either 0 or 1.\")\n    tp = sum((1 for (a, p) in zip(actual, predicted) if a == 1 and p == 1))\n    fp = sum((1 for (a, p) in zip(actual, predicted) if a == 0 and p == 1))\n    tn = sum((1 for (a, p) in zip(actual, predicted) if a == 0 and p == 0))\n    fn = sum((1 for (a, p) in zip(actual, predicted) if a == 1 and p == 0))\n    confusion_matrix = [[tn, fp], [fn, tp]]\n    total = len(actual)\n    accuracy = (tp + tn) / total if total > 0 else 0.0\n    precision = tp / (tp + fp) if tp + fp > 0 else 0.0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0.0\n    f1_score = 2 * (precision * recall) / (precision + recall) if precision + recall > 0 else 0.0\n    specificity = tn / (tn + fp) if tn + fp > 0 else 0.0\n    npv = tn / (tn + fn) if tn + fn > 0 else 0.0\n    accuracy = round(accuracy, 3)\n    f1_score = round(f1_score, 3)\n    specificity = round(specificity, 3)\n    npv = round(npv, 3)\n    return (confusion_matrix, accuracy, f1_score, specificity, npv)"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\nfrom scipy import stats\ndef descriptive_statistics(data):\n    \"\"\"\n    Calculate various descriptive statistics for a given dataset.\n\n    Parameters:\n    data (list or np.ndarray): A list or NumPy array of numerical values.\n\n    Returns:\n    dict: A dictionary containing the following statistics:\n        - 'mean'\n        - 'median'\n        - 'mode'\n        - 'variance'\n        - 'standard_deviation'\n        - '25th_percentile'\n        - '50th_percentile'\n        - '75th_percentile'\n        - 'interquartile_range'\n    \"\"\"\n    data = np.array(data)\n    mean = np.mean(data)\n    median = np.median(data)\n    mode = stats.mode(data, keepdims=True).mode[0]\n    variance = np.var(data, ddof=1)\n    std_dev = np.std(data, ddof=1)\n    q25 = np.percentile(data, 25)\n    q50 = np.percentile(data, 50)\n    q75 = np.percentile(data, 75)\n    iqr = q75 - q25\n    stats_dict = {'mean': round(mean, 4), 'median': round(median, 4), 'mode': mode, 'variance': round(variance, 4), 'standard_deviation': round(std_dev, 4), '25th_percentile': q25, '50th_percentile': q50, '75th_percentile': q75, 'interquartile_range': iqr}\n    return stats_dict"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials\n    \"\"\"\n    combination = math.comb(n, k)\n    probability = combination * p ** k * (1 - p) ** (n - k)\n    return round(probability, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    :return: The PDF value at x, rounded to 5 decimal places.\n    \"\"\"\n    coefficient = 1 / (std_dev * math.sqrt(2 * math.pi))\n    exponent = -(x - mean) ** 2 / (2 * std_dev ** 2)\n    pdf_value = coefficient * math.exp(exponent)\n    return round(pdf_value, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    \"\"\"\n    probability = math.exp(-lam) * lam ** k / math.factorial(k)\n    return round(probability, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        int: The contrast value, defined as the difference between the maximum and minimum pixel values.\n    \"\"\"\n    if img.ndim != 2:\n        raise ValueError('Input image must be a 2D array (grayscale).')\n    if img.dtype != np.uint8:\n        raise ValueError('Input image must have pixel values of type uint8 (0-255).')\n    max_pixel = np.max(img)\n    min_pixel = np.min(img)\n    contrast = max_pixel - min_pixel\n    return contrast"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    \n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    \n    Returns:\n        float: The dot product of the two vectors.\n    \"\"\"\n    return np.dot(vec1, vec2)"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n\n    Returns:\n        list[list[float]]: A list of lists where each inner list contains the polynomial features of the corresponding data point.\n    \"\"\"\n    if degree < 0:\n        return []\n    transformed_data = []\n    for x in data:\n        features = [x ** i for i in range(1, degree + 1)]\n        transformed_data.append([round(f, 8) for f in features])\n    return transformed_data"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    if position == 0 or d_model <= 0:\n        return -1\n    pe = np.zeros((position, d_model), dtype=np.float16)\n    for pos in range(position):\n        for i in range(0, d_model, 2):\n            if i + 1 <= d_model:\n                div_term = np.power(10000, 2 * (i // 2) / d_model).astype(np.float16)\n                pe[pos, i] = np.sin(pos / div_term).astype(np.float16)\n                pe[pos, i + 1] = np.cos(pos / div_term).astype(np.float16)\n    return pe.tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    elif training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    else:\n        return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    parameter = parameter - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    updated_parameter = np.round(parameter, 5).tolist()\n    updated_m = np.round(m, 5).tolist()\n    updated_v = np.round(v, 5).tolist()\n    return (updated_parameter, updated_m, updated_v)"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    token_ids = encoder.encode(prompt)\n    sequence = np.array(token_ids)\n    for _ in range(n_tokens_to_generate):\n        seq_len = sequence.shape[0]\n        token_embeddings = params['wte'][sequence]\n        positional_embeddings = params['wpe'][:seq_len]\n        x = token_embeddings + positional_embeddings\n        x = x * params['ln_f']['g'] + params['ln_f']['b']\n        logits = x[-1]\n        probs = np.exp(logits) / np.sum(np.exp(logits))\n        next_token_id = np.random.choice(len(probs), p=probs)\n        sequence = np.append(sequence, next_token_id)\n    generated_text = encoder.decode(sequence.tolist())\n    return generated_text"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        exp_values = np.exp(values - np.max(values))\n        return exp_values / exp_values.sum(axis=1, keepdims=True)\n    crystal_values = np.array(crystal_values).reshape(n, 1)\n    W_q = np.random.randn(dimension, 1)\n    W_k = np.random.randn(dimension, 1)\n    W_v = np.random.randn(dimension, 1)\n    queries = np.dot(crystal_values, W_q.T)\n    keys = np.dot(crystal_values, W_k.T)\n    values = np.dot(crystal_values, W_v.T)\n    attention_scores = np.dot(queries, keys.T) / np.sqrt(dimension)\n    attention_weights = softmax(attention_scores)\n    weighted_pattern = np.dot(attention_weights, values)\n    return [round(float(x), 4) for x in weighted_pattern.flatten()]"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    tp = sum((1 for (t, p) in zip(y_true, y_pred) if t == 1 and p == 1))\n    fp = sum((1 for (t, p) in zip(y_true, y_pred) if t == 0 and p == 1))\n    fn = sum((1 for (t, p) in zip(y_true, y_pred) if t == 1 and p == 0))\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0\n    f1 = 2 * (precision * recall) / (precision + recall) if precision + recall > 0 else 0\n    return round(f1, 3)\ny_true = [1, 0, 1, 1, 0, 1]\ny_pred = [1, 0, 1, 0, 0, 1]"}
{"task_id": 92, "completion_id": 0, "solution": "import math\nPI = 3.14159\ndef power_grid_forecast(consumption_data):\n    detrended_data = []\n    for i in range(1, 11):\n        fluctuation = 10 * math.sin(2 * PI * i / 10)\n        detrended = consumption_data[i - 1] - fluctuation\n        detrended_data.append((i, detrended))\n    n = len(detrended_data)\n    sum_x = sum((day for (day, _) in detrended_data))\n    sum_y = sum((val for (_, val) in detrended_data))\n    sum_xy = sum((day * val for (day, val) in detrended_data))\n    sum_x2 = sum((day ** 2 for (day, _) in detrended_data))\n    m = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x ** 2)\n    b = (sum_y - m * sum_x) / n\n    day_15_base = m * 15 + b\n    fluctuation_day_15 = 10 * math.sin(2 * PI * 15 / 10)\n    total_forecast = day_15_base + fluctuation_day_15\n    safety_margin = math.ceil(total_forecast * 1.05)\n    return safety_margin"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    absolute_errors = np.abs(y_true - y_pred)\n    mean_error = np.mean(absolute_errors)\n    return round(mean_error, 3)"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray) -> tuple:\n    \"\"\"\n    Compute Query, Key, and Value matrices.\n    \"\"\"\n    Q = X @ W_q\n    K = X @ W_k\n    V = X @ W_v\n    return (Q, K, V)\ndef self_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute scaled dot-product self-attention.\n    \"\"\"\n    d_k = K.shape[-1]\n    scores = Q @ K.T / np.sqrt(d_k)\n    attention_weights = np.softmax(scores, axis=-1)\n    output = attention_weights @ V\n    return output\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Compute multi-head attention.\n    \"\"\"\n    (batch_size, seq_len, d_model) = X.shape\n    head_dim = d_model // n_heads\n    W_q_heads = np.split(W_q, n_heads, axis=1)\n    W_k_heads = np.split(W_k, n_heads, axis=1)\n    W_v_heads = np.split(W_v, n_heads, axis=1)\n    outputs = []\n    for i in range(n_heads):\n        (Q, K, V) = compute_qkv(X, W_q_heads[i], W_k_heads[i], W_v_heads[i])\n        head_output = self_attention(Q, K, V)\n        outputs.append(head_output)\n    final_output = np.concatenate(outputs, axis=1)\n    return np.round(final_output, 4).tolist()"}
{"task_id": 95, "completion_id": 0, "solution": "def phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError('Input lists must be of the same length.')\n    n11 = sum((1 for (a, b) in zip(x, y) if a == 1 and b == 1))\n    n10 = sum((1 for (a, b) in zip(x, y) if a == 1 and b == 0))\n    n01 = sum((1 for (a, b) in zip(x, y) if a == 0 and b == 1))\n    n00 = sum((1 for (a, b) in zip(x, y) if a == 0 and b == 0))\n    n = len(x)\n    numerator = n11 * n00 - n10 * n01\n    denominator = ((n11 + n10) * (n11 + n01) * (n00 + n10) * (n00 + n01)) ** 0.5\n    if denominator == 0:\n        return 0.0\n    phi = numerator / denominator\n    return round(phi, 4)\nx = [1, 0, 1, 1, 0, 0, 1]\ny = [1, 1, 0, 1, 0, 1, 0]"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    if x <= -2.5:\n        return 0.0\n    elif -2.5 < x < 2.5:\n        return x / 5.0 + 0.5\n    else:\n        return 1.0"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value\n    \"\"\"\n    if x > 0:\n        return round(x, 4)\n    else:\n        return round(alpha * (math.exp(x) - 1), 4)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    if x > 0:\n        return x\n    else:\n        return alpha * x"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x)\n    \"\"\"\n    if x > 20:\n        return round(x, 4)\n    elif x < -20:\n        return round(math.exp(x), 4)\n    else:\n        return round(math.log(1 + math.exp(x)), 4)"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input, rounded to the 4th decimal place\n    \"\"\"\n    return round(x / (1 + abs(x)), 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    rhos = np.array(rhos)\n    A = np.array(A)\n    pi_theta_old = np.array(pi_theta_old)\n    pi_theta_ref = np.array(pi_theta_ref)\n    rhos_clipped = np.clip(rhos, 1 - epsilon, 1 + epsilon)\n    kl_divergence = np.sum(pi_theta_old * np.log(pi_theta_old / pi_theta_ref))\n    surr1 = rhos * A\n    surr2 = rhos_clipped * A\n    surr_min = np.minimum(surr1, surr2)\n    objective = np.mean(surr_min) - beta * kl_divergence\n    return round(objective, 6)\nrhos = [1.1, 0.95, 1.05]\nA = [2.0, -1.0, 3.0]\npi_theta_old = [0.3, 0.4, 0.3]\npi_theta_ref = [0.25, 0.45, 0.3]"}
{"task_id": 102, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value, rounded to 4 decimal places\n    \"\"\"\n    return round(x / (1 + math.exp(-x)), 4)"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value rounded to 4 decimal places\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x > 0:\n        result = scale * x\n    else:\n        result = scale * alpha * (np.exp(x) - 1)\n    return round(result, 4)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00d7 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    z = np.dot(X, weights) + bias\n    probabilities = 1 / (1 + np.exp(-z))\n    predictions = (probabilities >= 0.5).astype(int)\n    return predictions.tolist()"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    (N, M) = X.shape\n    C = len(np.unique(y))\n    y_one_hot = np.zeros((N, C))\n    y_one_hot[np.arange(N), y.astype(int)] = 1\n    B = np.random.randn(M, C) * 0.01\n    b = np.zeros((1, C))\n    losses = []\n    for _ in range(iterations):\n        scores = X @ B + b\n        exp_scores = np.exp(scores)\n        probs = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)\n        loss = -np.mean(np.sum(y_one_hot * np.log(probs + 1e-15), axis=1))\n        losses.append(round(loss, 4))\n        grad_B = X.T @ (probs - y_one_hot) / N\n        grad_b = np.sum(probs - y_one_hot, axis=0) / N\n        B -= learning_rate * grad_B\n        b -= learning_rate * grad_b\n    B_flat = B.flatten()\n    B_rounded = [round(w, 4) for w in B_flat]\n    losses_rounded = [round(loss, 4) for loss in losses]\n    return (B_rounded, losses_rounded)"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \n    Parameters:\n    - X: Input features (numpy.ndarray of shape (n_samples, n_features))\n    - y: Target labels (numpy.ndarray of shape (n_samples,))\n    - learning_rate: Step size for gradient descent\n    - iterations: Number of iterations to run gradient descent\n    \n    Returns:\n    - A tuple containing:\n        - A list of optimized coefficients (weights and bias)\n        - A list of loss values over iterations (rounded to 4 decimal places)\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    weights = np.zeros(n_features)\n    bias = 0.0\n    losses = []\n    for _ in range(iterations):\n        linear_model = np.dot(X, weights) + bias\n        y_pred = 1 / (1 + np.exp(-linear_model))\n        epsilon = 1e-15\n        y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n        loss = -(1 / n_samples) * np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n        losses.append(round(loss, 4))\n        dw = 1 / n_samples * np.dot(X.T, y_pred - y)\n        db = 1 / n_samples * np.sum(y_pred - y)\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n    coefficients = np.round(np.concatenate([weights, [bias]]), 4).tolist()\n    losses = np.round(losses, 4).tolist()\n    return (coefficients, losses)"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    d_k = K.shape[1]\n    scores = np.dot(Q, K.T) / np.sqrt(d_k)\n    scores = np.where(mask == 0, -1000000000.0, scores)\n    attention_weights = np.exp(scores - np.max(scores, axis=-1, keepdims=True))\n    attention_weights /= np.sum(attention_weights, axis=-1, keepdims=True)\n    output = np.dot(attention_weights, V)\n    return output.tolist()"}
{"task_id": 108, "completion_id": 0, "solution": "from collections import Counter\nimport math\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    \"\"\"\n    if not apples:\n        return 0.0\n    total = len(apples)\n    color_counts = Counter(apples)\n    entropy = 0.0\n    for count in color_counts.values():\n        prob = count / total\n        entropy -= prob * math.log2(prob)\n    return round(entropy, 4)"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Perform Layer Normalization on a 3D input tensor.\n\n    Parameters:\n    - X: Input tensor of shape (batch_size, sequence_length, features)\n    - gamma: Scaling parameters of shape (features,)\n    - beta: Shifting parameters of shape (features,)\n    - epsilon: Small value to avoid division by zero\n\n    Returns:\n    - Normalized tensor of shape (batch_size, sequence_length, features)\n    \"\"\"\n    mean = np.mean(X, axis=-1, keepdims=True)\n    variance = np.var(X, axis=-1, keepdims=True)\n    X_normalized = (X - mean) / np.sqrt(variance + epsilon)\n    X_scaled_shifted = gamma * X_normalized + beta\n    return np.round(X_scaled_shifted, 5).tolist()"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    reference = reference.lower().split()\n    candidate = candidate.lower().split()\n    matches = set(reference) & set(candidate)\n    if not matches:\n        return 0.0\n    precision = len(matches) / len(candidate)\n    recall = len(matches) / len(reference)\n    f_mean = precision * recall / (alpha * precision + (1 - alpha) * recall)\n    length_ratio = len(candidate) / len(reference)\n    if length_ratio > 1:\n        length_penalty = 1\n    else:\n        length_penalty = 1 - gamma * (1 - length_ratio)\n    ref_positions = {word: [i for (i, w) in enumerate(reference) if w == word] for word in matches}\n    candidate_positions = [0] * len(candidate)\n    for (i, word) in enumerate(candidate):\n        if word in ref_positions and ref_positions[word]:\n            candidate_positions[i] = ref_positions[word].pop(0)\n    adjacent_matches = 0\n    for i in range(1, len(candidate_positions)):\n        if abs(candidate_positions[i] - candidate_positions[i - 1]) == 1:\n            adjacent_matches += 1\n    if len(matches) > 1:\n        fragmentation = 1 - adjacent_matches / (len(matches) - 1)\n    else:\n        fragmentation = 0\n    score = f_mean * length_penalty * (1 - fragmentation)\n    return round(score, 3)"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    p_xy = joint_counts / total_samples\n    p_x = total_counts_x / total_samples\n    p_y = total_counts_y / total_samples\n    pmi = np.log(p_xy / (p_x * p_y))\n    return round(pmi, 3)"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    if not x:\n        return []\n    min_val = min(x)\n    max_val = max(x)\n    if min_val == max_val:\n        return [0.0 for _ in x]\n    normalized = [(val - min_val) / (max_val - min_val) for val in x]\n    return [round(val, 4) for val in normalized]"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    z1 = np.dot(x, w1)\n    a1 = np.maximum(0, z1)\n    z2 = np.dot(a1, w2)\n    out = z2 + x\n    final_output = np.maximum(0, out)\n    return np.round(final_output, 4).tolist()"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray):\n    \"\"\"\n    Perform Global Average Pooling on a 3D NumPy array.\n\n    Parameters:\n    x (np.ndarray): Input array of shape (height, width, channels)\n\n    Returns:\n    np.ndarray: Output array of shape (channels,)\n    \"\"\"\n    if x.ndim != 3:\n        raise ValueError('Input must be a 3D array (height, width, channels).')\n    return np.mean(x, axis=(0, 1))"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Perform Batch Normalization on a 4D input array in BCHW format.\n\n    Parameters:\n    - X: Input array of shape (batch, channels, height, width)\n    - gamma: Scale parameter of shape (channels,)\n    - beta: Shift parameter of shape (channels,)\n    - epsilon: Small value for numerical stability\n\n    Returns:\n    - Output array after batch normalization, rounded to 4 decimal places and converted to a list.\n    \"\"\"\n    (batch, channels, height, width) = X.shape\n    X_reshaped = X.transpose(1, 0, 2, 3).reshape(channels, -1)\n    mean = np.mean(X_reshaped, axis=1)\n    var = np.var(X_reshaped, axis=1)\n    X_normalized = (X_reshaped - mean[:, np.newaxis]) / np.sqrt(var[:, np.newaxis] + epsilon)\n    X_normalized = X_normalized.reshape(channels, batch, height, width).transpose(1, 0, 2, 3)\n    output = gamma[np.newaxis, :, np.newaxis, np.newaxis] * X_normalized + beta[np.newaxis, :, np.newaxis, np.newaxis]\n    return np.round(output, 4).tolist()"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    \"\"\"\n    Computes the derivative of the polynomial term c * x^n at a given x.\n    \n    Parameters:\n    c (float): The coefficient of the term.\n    x (float): The point at which to evaluate the derivative.\n    n (float): The exponent of x.\n    \n    Returns:\n    float: The value of the derivative at x, rounded to 4 decimal places.\n    \"\"\"\n    derivative = c * n * x ** (n - 1)\n    return round(derivative, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10):\n    vectors = np.array(vectors, dtype=float)\n    (n, d) = vectors.shape\n    basis = []\n    for v in vectors:\n        for u in basis:\n            v = v - np.dot(v, u) * u\n        norm = np.linalg.norm(v)\n        if norm > tol:\n            u = v / norm\n            basis.append(u)\n    return [np.round(vec, 4).tolist() for vec in basis]"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    \"\"\"\n    Compute the cross product of two 3D vectors.\n    \n    Parameters:\n    a (list or np.ndarray): First 3D vector.\n    b (list or np.ndarray): Second 3D vector.\n    \n    Returns:\n    list: Cross product vector rounded to 4 decimal places.\n    \"\"\"\n    a = np.array(a, dtype=float)\n    b = np.array(b, dtype=float)\n    result = np.cross(a, b)\n    return np.round(result, 4).tolist()"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    \"\"\"\n    Solves a system of linear equations Ax = b using Cramer's Rule.\n    \n    Parameters:\n    A (list of lists or numpy array): Square coefficient matrix.\n    b (list or numpy array): Constant vector.\n    \n    Returns:\n    list: Solution vector x rounded to 4 decimal places, or -1 if no unique solution.\n    \"\"\"\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    n = A.shape[0]\n    if A.shape[1] != n or b.shape[0] != n:\n        return -1\n    det_A = np.linalg.det(A)\n    if np.isclose(det_A, 0):\n        return -1\n    x = []\n    for i in range(n):\n        A_i = A.copy()\n        A_i[:, i] = b\n        det_Ai = np.linalg.det(A_i)\n        x_i = det_Ai / det_A\n        x.append(round(x_i, 4))\n    return x"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    if not p or not q or len(p) != len(q):\n        return 0.0\n    p = np.array(p)\n    q = np.array(q)\n    bc = np.sum(np.sqrt(p * q))\n    distance = -np.log(bc)\n    return round(distance, 4)"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float]:\n    if len(a) != len(b):\n        return -1\n    return [x + y for (x, y) in zip(a, b)]"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 123, "completion_id": 0, "solution": "def compute_efficiency(n_experts, k_active, d_in, d_out):\n    flops_dense = 2 * d_in * d_out\n    flops_moe = k_active / n_experts * 2 * d_in * d_out\n    savings_flops = flops_dense - flops_moe\n    savings_percentage = savings_flops / flops_dense * 100\n    flops_dense = round(flops_dense, 1)\n    flops_moe = round(flops_moe, 1)\n    savings_flops = round(savings_flops, 1)\n    savings_percentage = round(savings_percentage, 1)\n    return {'flops_dense': flops_dense, 'flops_moe': flops_moe, 'savings_flops': savings_flops, 'savings_percentage': savings_percentage}"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    \"\"\"\n    Implements the Noisy Top-K Gating Function for Mixture-of-Experts (MoE) models.\n\n    Parameters:\n    - X: Input matrix of shape (batch_size, input_dim)\n    - W_g: Gating weight matrix of shape (input_dim, num_experts)\n    - W_noise: Noise weight matrix of shape (input_dim, num_Experts)\n    - N: Pre-sampled noise matrix of shape (batch_size, num_Experts)\n    - k: Sparsity constraint (number of experts to activate per input)\n\n    Returns:\n    - gate_output: Final gating probabilities matrix of shape (batch_size, num_Experts)\n    \"\"\"\n    (batch_size, input_dim) = X.shape\n    (_, num_experts) = W_g.shape\n    logits = X @ W_g\n    noise_logits = X @ W_noise\n    noisy_logits = logits + N * noise_logits\n    temperatures = np.sqrt(1.0 / num_experts)\n    noisy_logits /= temperatures\n    gate_probs = np.softmax(noisy_logits, axis=1)\n    (topk_values, topk_indices) = ([], [])\n    for i in range(batch_size):\n        topk_idx = np.argsort(gate_probs[i])[-k:]\n        topk_val = gate_probs[i, topk_idx]\n        topk_values.append(topk_val)\n        topk_indices.append(topk_idx)\n    topk_values = np.array(topk_values)\n    topk_indices = np.array(topk_indices)\n    topk_values /= topk_values.sum(axis=1, keepdims=True)\n    gate_output = np.zeros_like(gate_probs)\n    for i in range(batch_size):\n        gate_output[i, topk_indices[i]] = topk_values[i]\n    gate_output = np.round(gate_output, 4)\n    return gate_output.tolist()"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    \"\"\"\n    Implements a Mixture-of-Experts (MoE) layer with softmax gating and top-k routing.\n\n    Parameters:\n    - x: Input tensor of shape (n_tokens, input_dim)\n    - We: Expert weight matrices of shape (n_experts, output_dim, input_dim)\n    - Wg: Gating weight matrix of shape (n_experts, input_dim)\n    - n_experts: Number of experts\n    - top_k: Number of top experts to select per token\n\n    Returns:\n    - Output tensor of shape (n_tokens, output_dim), rounded to 4 decimal places\n    \"\"\"\n    (n_tokens, input_dim) = x.shape\n    output_dim = We.shape[1]\n    gate_scores = x @ Wg.T\n    gate_probs = np.exp(gate_scores - np.max(gate_scores, axis=1, keepdims=True))\n    gate_probs /= np.sum(gate_probs, axis=1, keepdims=True)\n    top_k_indices = np.argsort(gate_probs, axis=1)[:, -top_k:]\n    output = np.zeros((n_tokens, output_dim))\n    for i in range(n_tokens):\n        token = x[i]\n        indices = top_k_indices[i]\n        probs = gate_probs[i, indices]\n        probs /= probs.sum()\n        for j in range(top_k):\n            expert_idx = indices[j]\n            expert_weight = We[expert_idx]\n            expert_output = token @ expert_weight.T\n            output[i] += probs[j] * expert_output\n    return np.round(output, 4).tolist()"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    \"\"\"\n    Perform Group Normalization on a 4D input tensor.\n\n    Parameters:\n    - X: Input tensor of shape (B, C, H, W)\n    - gamma: Scale parameter of shape (C,)\n    - beta: Shift parameter of shape (C,)\n    - num_groups: Number of groups to divide the channels into\n    - epsilon: Small value to avoid division by zero\n\n    Returns:\n    - Normalized output as a Python list (rounded to 4 decimal places)\n    \"\"\"\n    (B, C, H, W) = X.shape\n    assert C % num_groups == 0, 'Number of channels must be divisible by num_groups'\n    X_grouped = X.reshape(B, num_groups, C // num_groups, H, W)\n    mean = np.mean(X_grouped, axis=(2, 3, 4), keepdims=True)\n    var = np.var(X_grouped, axis=(2, 3, 4), keepdims=True)\n    X_normalized = (X_grouped - mean) / np.sqrt(var + epsilon)\n    X_normalized = X_normalized.reshape(B, C, H, W)\n    X_output = gamma * X_normalized + beta\n    return np.round(X_output, 4).tolist()"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n\n    def f(x):\n        return x ** 4 - 3 * x ** 3 + 2\n\n    def df(x):\n        return 4 * x ** 3 - 9 * x ** 2\n    x = start_x\n    for _ in range(max_iters):\n        gradient = df(x)\n        x_new = x - learning_rate * gradient\n        if abs(x_new - x) < tolerance:\n            break\n        x = x_new\n    return round(x, 4)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    \"\"\"\n    Dynamic Tanh (DyT) function: Normalization-free transformation inspired by Tanh.\n    \n    Parameters:\n    - x (np.ndarray): Input array.\n    - alpha (float): Scaling factor for the input.\n    - gamma (float): Scaling factor for the output.\n    - beta (float): Shift factor for the output.\n    \n    Returns:\n    - list[float]: Output after applying DyT, rounded to 4 decimal places.\n    \"\"\"\n    dyt_output = gamma * np.tanh(alpha * x) + beta\n    dyt_output_rounded = np.round(dyt_output, 4)\n    return dyt_output_rounded.reshape(-1).tolist()"}
