{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    if len(a[0]) != len(b):\n        return -1\n    result = []\n    for row in a:\n        dot_product = sum((x * y for (x, y) in zip(row, b)))\n        result.append(dot_product)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    return [list(row) for row in zip(*a)]"}
{"task_id": 3, "completion_id": 0, "solution": "def reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    flat = [item for sublist in a for item in sublist]\n    if len(flat) != new_shape[0] * new_shape[1]:\n        return []\n    reshaped_array = np.array(flat).reshape(new_shape)\n    return reshaped_array.tolist()"}
{"task_id": 4, "completion_id": 0, "solution": "def calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    if mode == 'row':\n        return [sum(row) / len(row) for row in matrix]\n    elif mode == 'column':\n        num_rows = len(matrix)\n        num_cols = len(matrix[0]) if num_rows > 0 else 0\n        return [sum((matrix[row][col] for row in range(num_rows))) / num_rows for col in range(num_cols)]\n    else:\n        raise ValueError(\"Mode must be 'row' or 'column'.\")"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    \"\"\"\n    Multiplies a matrix by a scalar and returns the resulting matrix.\n    \n    Parameters:\n    matrix (list of list of int/float): The input matrix.\n    scalar (int/float): The scalar to multiply the matrix by.\n    \n    Returns:\n    list of list of int/float: The matrix after scalar multiplication.\n    \"\"\"\n    result = [[element * scalar for element in row] for row in matrix]\n    return result"}
{"task_id": 6, "completion_id": 0, "solution": "def calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    import math\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    trace = a + d\n    determinant = a * d - b * c\n    discriminant = trace ** 2 - 4 * determinant\n    eigenvalue1 = (trace + math.sqrt(discriminant)) / 2\n    eigenvalue2 = (trace - math.sqrt(discriminant)) / 2\n    return sorted([eigenvalue1, eigenvalue2], reverse=True)\nmatrix = [[2, 1], [1, 2]]"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    try:\n        A_np = np.array(A, dtype=float)\n        T_np = np.array(T, dtype=float)\n        S_np = np.array(S, dtype=float)\n        if T_np.shape[0] != T_np.shape[1] or S_np.shape[0] != S_np.shape[1]:\n            return -1\n        if np.isclose(np.linalg.det(T_np), 0) or np.isclose(np.linalg.det(S_np), 0):\n            return -1\n        result = np.linalg.inv(T_np) @ A_np @ S_np\n        result_rounded = np.round(result, 4)\n        return result_rounded.tolist()\n    except np.linalg.LinAlgError:\n        return -1"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    if len(matrix) != 2 or len(matrix[0]) != 2 or len(matrix[1]) != 2:\n        return None\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    determinant = a * d - b * c\n    if determinant == 0:\n        return None\n    inv = [[d / determinant, -b / determinant], [-c / determinant, a / determinant]]\n    return inv"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    rows_a = len(a)\n    cols_a = len(a[0]) if rows_a > 0 else 0\n    rows_b = len(b)\n    cols_b = len(b[0]) if rows_b > 0 else 0\n    if cols_a != rows_b:\n        return -1\n    result = [[0 for _ in range(cols_b)] for _ in range(rows_a)]\n    for i in range(rows_a):\n        for j in range(cols_b):\n            for k in range(cols_a):\n                result[i][j] += a[i][k] * b[k][j]\n    return result\na = [[1, 2], [3, 4]]\nb = [[2, 0], [1, 2]]"}
{"task_id": 10, "completion_id": 0, "solution": "def calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    \"\"\"\n    Calculate the covariance matrix for a list of feature vectors.\n    \n    Parameters:\n    vectors (list of list of float): A list of feature vectors, where each feature is a list of observations.\n    \n    Returns:\n    list of list of float: The covariance matrix.\n    \"\"\"\n    n = len(vectors[0])\n    m = len(vectors)\n    means = [sum(feature) / n for feature in vectors]\n    covariance_matrix = [[0.0 for _ in range(m)] for _ in range(m)]\n    for i in range(m):\n        for j in range(m):\n            covariance = 0.0\n            for k in range(n):\n                covariance += (vectors[i][k] - means[i]) * (vectors[j][k] - means[j])\n            covariance /= n - 1\n            covariance_matrix[i][j] = covariance\n    return covariance_matrix"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    \"\"\"\n    Solves Ax = b using the Jacobi method for n iterations.\n    Each intermediate solution is rounded to 4 decimal places.\n    \n    Parameters:\n    - A: Coefficient matrix (np.ndarray)\n    - b: Right-hand side vector (np.ndarray)\n    - n: Number of iterations\n    \n    Returns:\n    - x: Approximate solution vector as a list\n    \"\"\"\n    if A.shape[0] != A.shape[1] or A.shape[0] != b.shape[0]:\n        raise ValueError('Matrix A and vector b must be compatible (A must be square and same size as b).')\n    N = A.shape[0]\n    x = np.zeros(N)\n    x_new = np.zeros(N)\n    for _ in range(n):\n        for i in range(N):\n            s = sum((A[i][j] * x[j] for j in range(N) if j != i))\n            x_new[i] = (b[i] - s) / A[i][i]\n        x = np.round(x_new, 4)\n    return np.reshape(x, (-1,)).tolist()"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    \"\"\"\n    Compute the singular values of a 2x2 matrix using the Jacobi method.\n    \n    Parameters:\n        A (np.ndarray): A 2x2 numpy array.\n        \n    Returns:\n        tuple: A tuple of two singular values, rounded to 4 decimal places.\n    \"\"\"\n    AtA = np.dot(A.T, A)\n\n    def jacobi_2x2(matrix, tol=1e-10, max_iter=1000):\n        \"\"\"\n        Jacobi method for diagonalizing a 2x2 symmetric matrix.\n        Returns the eigenvalues.\n        \"\"\"\n        M = np.copy(matrix)\n        for _ in range(max_iter):\n            if abs(M[1, 0]) < tol:\n                break\n            theta = 0.5 * np.arctan2(2 * M[1, 0], M[0, 0] - M[1, 1])\n            c = np.cos(theta)\n            s = np.sin(theta)\n            R = np.array([[c, s], [-s, c]])\n            M = np.dot(np.dot(R.T, M), R)\n        return M.diagonal()\n    eigenvalues = jacobi_2x2(AtA)\n    singular_values = np.sqrt(eigenvalues)\n    singular_values.sort()\n    singular_values = singular_values[::-1]\n    return tuple(np.round(singular_values, 4))"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n\n    def determinant_3x3(mat: list[list[int | float]]) -> float:\n        return mat[0][0] * mat[1][1] * mat[2][2] + mat[0][1] * mat[1][2] * mat[2][0] + mat[0][2] * mat[1][0] * mat[2][1] - mat[2][0] * mat[1][1] * mat[0][2] - mat[2][1] * mat[1][2] * mat[0][0] - mat[2][2] * mat[1][0] * mat[0][1]\n    det = 0.0\n    for col in range(4):\n        minor = [row[:col] + row[col + 1:] for row in matrix[1:]]\n        sign = (-1) ** col\n        det += sign * matrix[0][col] * determinant_3x3(minor)\n    return det"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    X = np.array(X)\n    y = np.array(y)\n    X_b = np.c_[np.ones((X.shape[0], 1)), X]\n    theta = np.linalg.inv(X_b.T @ X_b) @ X_b.T @ y\n    theta_rounded = np.round(theta, 4)\n    return theta_rounded.tolist()\nX = [[1.0, 2.0], [2.0, 3.0], [3.0, 4.0], [4.0, 5.0]]\ny = [7.0, 9.0, 11.0, 13.0]"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> np.ndarray:\n    theta = np.zeros(X.shape[1])\n    m = len(y)\n    for _ in range(iterations):\n        y_pred = np.dot(X, theta)\n        error = y_pred - y\n        gradient = 1 / m * np.dot(X.T, error)\n        theta -= alpha * gradient\n    return np.round(theta, 4).tolist()"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    standardized_data = (data - data.mean(axis=0)) / data.std(axis=0)\n    standardized_data = np.round(standardized_data, 4)\n    min_vals = data.min(axis=0)\n    max_vals = data.max(axis=0)\n    minmax_normalized_data = (data - min_vals) / (max_vals - min_vals)\n    minmax_normalized_data = np.round(minmax_normalized_data, 4)\n    standardized_list = standardized_data.tolist()\n    minmax_list = minmax_normalized_data.tolist()\n    return (standardized_list, minmax_list)"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Tuple\ndef k_means_clustering(points: List[Tuple[float, float]], k: int, initial_centroids: List[Tuple[float, float]], max_iterations: int) -> List[Tuple[float, float]]:\n    points = np.array(points)\n    centroids = np.array(initial_centroids)\n    for _ in range(max_iterations):\n        distances = np.sqrt(((points[:, np.newaxis, :] - centroids[np.newaxis, :, :]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([points[labels == i].mean(axis=0) for i in range(k)])\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    rounded_centroids = [tuple(np.round(centroid, 4)) for centroid in centroids]\n    return rounded_centroids\npoints = [(1.0, 2.0), (1.5, 1.8), (5.0, 8.0), (8.0, 8.0), (1.1, 1.0), (9.0, 11.0)]\nk = 2\ninitial_centroids = [(1.0, 2.0), (8.0, 8.0)]\nmax_iterations = 100"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    \"\"\"\n    Generate indices to split data into k folds for cross-validation.\n\n    Parameters:\n    - X (np.ndarray): Features array of shape (n_samples, n_features)\n    - y (np.ndarray): Target array of shape (n_samples,)\n    - k (int): Number of folds\n    - shuffle (bool): Whether to shuffle the data before splitting\n    - random_seed (int): Seed for random number generator\n\n    Returns:\n    - List of tuples: Each tuple contains (train_indices, test_indices)\n    \"\"\"\n    n_samples = X.shape[0]\n    indices = np.arange(n_samples)\n    if shuffle:\n        if random_seed is not None:\n            np.random.seed(random_seed)\n        np.random.shuffle(indices)\n    fold_size = n_samples // k\n    folds = []\n    for i in range(k):\n        test_start = i * fold_size\n        test_end = (i + 1) * fold_size if i < k - 1 else n_samples\n        test_indices = indices[test_start:test_end]\n        train_indices = np.concatenate((indices[:test_start], indices[test_end:]))\n        folds.append((train_indices, test_indices))\n    return folds"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    mean = np.mean(data, axis=0)\n    standardized_data = data - mean\n    covariance_matrix = np.cov(standardized_data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eig(covariance_matrix)\n    idx = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvectors = eigenvectors[:, idx]\n    principal_components = sorted_eigenvectors[:, :k]\n    return [list(np.round(pc, 4)) for pc in principal_components]"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom typing import List, Dict, Any\ndef entropy(class_counts: Dict[Any, int]) -> float:\n    \"\"\"Calculate entropy for a set of class counts.\"\"\"\n    total = sum(class_counts.values())\n    if total == 0:\n        return 0.0\n    return -sum((count / total * math.log2(count / total) for count in class_counts.values()))\ndef information_gain(parent_entropy: float, left_counts: Dict[Any, int], right_counts: Dict[Any, int]) -> float:\n    \"\"\"Calculate information gain after splitting.\"\"\"\n    total = sum(left_counts.values()) + sum(right_counts.values())\n    if total == 0:\n        return 0.0\n    left_weight = sum(left_counts.values()) / total\n    right_weight = sum(right_counts.values()) / total\n    return parent_entropy - (left_weight * entropy(left_counts) + right_weight * entropy(right_counts))\ndef best_split(examples: List[Dict[str, Any]], attributes: List[str], target_attr: str) -> tuple:\n    \"\"\"Find the best attribute and value to split on based on information gain.\"\"\"\n    best_gain = -1\n    best_attr = None\n    best_value = None\n    best_left = []\n    best_right = []\n    parent_class_counts = Counter((example[target_attr] for example in examples))\n    parent_entropy = entropy(parent_class_counts)\n    for attr in attributes:\n        values = set((example[attr] for example in examples))\n        for value in values:\n            left = [ex for ex in examples if ex[attr] == value]\n            right = [ex for ex in examples if ex[attr] != value]\n            if not left or not right:\n                continue\n            left_counts = Counter((ex[target_attr] for ex in left))\n            right_counts = Counter((ex[target_attr] for ex in right))\n            gain = information_gain(parent_entropy, left_counts, right_counts)\n            if gain > best_gain:\n                best_gain = gain\n                best_attr = attr\n                best_value = value\n                best_left = left\n                best_right = right\n    return (best_attr, best_value, best_left, best_right)\ndef learn_decision_tree(examples: List[Dict[str, Any]], attributes: List[str], target_attr: str) -> Dict[str, Any]:\n    \"\"\"Build a decision tree using entropy and information gain.\"\"\"\n    if not examples:\n        return {}\n    class_values = [ex[target_attr] for ex in examples]\n    if len(set(class_values)) == 1:\n        return {'class': class_values[0]}\n    if not attributes:\n        return {'class': Counter(class_values).most_common(1)[0][0]}\n    (best_attr, best_value, left, right) = best_split(examples, attributes, target_attr)\n    if best_attr is None:\n        return {'class': Counter(class_values).most_common(1)[0][0]}\n    remaining_attributes = [a for a in attributes if a != best_attr]\n    left_tree = learn_decision_tree(left, remaining_attributes, target_attr)\n    right_tree = learn_decision_tree(right, remaining_attributes, target_attr)\n    return {'attribute': best_attr, 'value': best_value, 'left': left_tree, 'right': right_tree}"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    \"\"\"\n    Deterministic Pegasos algorithm for kernel SVM.\n\n    Parameters:\n    - data: 2D numpy array of shape (n_samples, n_features)\n    - labels: 1D numpy array of shape (n_samples,)\n    - kernel: 'linear' or 'rbf' for kernel type\n    - lambda_val: regularization parameter\n    - iterations: number of training iterations\n    - sigma: bandwidth for RBF kernel\n\n    Returns:\n    - alphas: 1D list of alpha coefficients\n    - bias: float bias term\n    \"\"\"\n    n_samples = data.shape[0]\n    alphas = np.zeros(n_samples)\n    bias = 0.0\n    for t in range(1, iterations + 1):\n        eta = 1.0 / (lambda_val * t)\n        if kernel == 'linear':\n            K = np.dot(data, data.T)\n        elif kernel == 'rbf':\n            K = np.zeros((n_samples, n_samples))\n            for i in range(n_samples):\n                for j in range(n_samples):\n                    K[i, j] = np.exp(-np.linalg.norm(data[i] - data[j]) ** 2 / (2 * sigma ** 2))\n        else:\n            raise ValueError(\"Unsupported kernel type. Use 'linear' or 'rbf'.\")\n        y_pred = np.zeros(n_samples)\n        for i in range(n_samples):\n            y_pred[i] = np.dot(alphas * labels, K[:, i]) + bias\n        hinge_grad = np.where(labels * y_pred < 1, -labels, 0)\n        alphas = (1 - eta * lambda_val) * alphas + eta * hinge_grad\n        alphas = np.clip(alphas, 0, 1 / lambda_val)\n        bias_update = np.where(labels * y_pred < 1, labels, 0)\n        bias += eta * np.mean(bias_update)\n    alphas = np.round(alphas, 4).tolist()\n    bias = round(bias, 4)\n    return (alphas, bias)\ndata = np.array([[1, 2], [2, 3], [3, 3], [6, 7], [7, 8], [8, 9]])\nlabels = np.array([1, 1, 1, -1, -1, -1])"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    \"\"\"\n    Compute the sigmoid activation function for a given input z.\n    \n    Parameters:\n    z (float): Input value\n    \n    Returns:\n    float: Sigmoid output rounded to 4 decimal places\n    \"\"\"\n    result = 1 / (1 + math.exp(-z))\n    return round(result, 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    exp_scores = [math.exp(score) for score in scores]\n    sum_exp = sum(exp_scores)\n    softmax_values = [round(exp / sum_exp, 4) for exp in exp_scores]\n    return softmax_values"}
{"task_id": 24, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    features_array = np.array(features)\n    weights_array = np.array(weights)\n    weighted_sum = np.dot(features_array, weights_array) + bias\n    probabilities = 1 / (1 + np.exp(-weighted_sum))\n    probabilities_rounded = np.round(probabilities, 4)\n    labels_array = np.array(labels)\n    mse = np.mean((probabilities - labels_array) ** 2)\n    mse_rounded = round(mse, 4)\n    probabilities_list = probabilities_rounded.tolist()\n    return (probabilities_list, mse_rounded)"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    weights = initial_weights.copy()\n    bias = initial_bias\n    mse_values = []\n    for _ in range(epochs):\n        linear_output = np.dot(features, weights) + bias\n        predictions = 1 / (1 + np.exp(-linear_output))\n        mse = np.mean((predictions - labels) ** 2)\n        mse_values.append(round(mse, 4))\n        error = predictions - labels\n        d_weights = np.dot(features.T, error * predictions * (1 - predictions)) / len(labels)\n        d_bias = np.mean(error * predictions * (1 - predictions))\n        weights -= learning_rate * d_weights\n        bias -= learning_rate * d_bias\n    weights = np.round(weights, 4)\n    bias = round(bias, 4)\n    mse_values = [round(mse, 4) for mse in mse_values]\n    return (weights.tolist(), bias, mse_values)"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data + other.data, _children=(self, other), _op='add')\n\n        def _backward():\n            self.grad += out.grad * 1\n            other.grad += out.grad * 1\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data * other.data, _children=(self, other), _op='mul')\n\n        def _backward():\n            self.grad += out.grad * other.data\n            other.grad += out.grad * self.data\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(self.data if self.data > 0 else 0, _children=(self,), _op='relu')\n\n        def _backward():\n            self.grad += out.grad * (1 if self.data > 0 else 0)\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1\n        for node in reversed(topo):\n            node._backward()\n\n    def __repr__(self):\n        return f'Value(data={self.data}, grad={self.grad})'"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    \"\"\"\n    Computes the transformation matrix P from basis B to basis C in R^3.\n    \n    Parameters:\n    B (list of list of int): Basis vectors of B as columns.\n    C (list of list of int): Basis vectors of C as columns.\n    \n    Returns:\n    list of list of float: Transformation matrix P from B to C, rounded to 4 decimal places.\n    \"\"\"\n    B_matrix = np.array(B, dtype=float)\n    C_matrix = np.array(C, dtype=float)\n    B_inv = np.linalg.inv(B_matrix)\n    P = np.dot(C_matrix, B_inv)\n    return np.round(P, 4).tolist()"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    A_T_A = np.dot(A.T, A)\n    (eigenvalues, eigenvectors) = np.linalg.eig(A_T_A)\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    singular_values = np.sqrt(eigenvalues)\n    S = np.diag(singular_values)\n    V = eigenvectors\n    U = np.zeros_like(A, dtype=np.float64)\n    for i in range(2):\n        if singular_values[i] > 1e-10:\n            U[:, i] = np.dot(A, V[:, i]) / singular_values[i]\n        else:\n            U[:, i] = np.zeros(2)\n    U = np.round(U, 4)\n    S = np.round(S, 4)\n    V = np.round(V, 4)\n    return (U.tolist(), S.tolist(), V.tolist())"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    \"\"\"\n    Shuffles the numpy arrays X and y in the same random order to maintain their correspondence.\n    \n    Parameters:\n    X (np.ndarray): Input feature array.\n    y (np.ndarray): Target array.\n    seed (int, optional): Seed for random number generator for reproducibility. Defaults to None.\n    \n    Returns:\n    list: A list containing two shuffled lists [X_shuffled, y_shuffled].\n    \"\"\"\n    X = np.asarray(X)\n    y = np.asarray(y)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError('X and y must have the same number of samples.')\n    if seed is not None:\n        np.random.seed(seed)\n    indices = np.random.permutation(X.shape[0])\n    X_shuffled = X[indices]\n    y_shuffled = y[indices]\n    return [X_shuffled.tolist(), y_shuffled.tolist()]"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    \"\"\"\n    Yields batches of data from numpy arrays X and optionally y.\n\n    Parameters:\n    - X: numpy array of shape (n_samples, ...)\n    - y: optional numpy array of shape (n_samples, ...)\n    - batch_size: number of samples per batch\n\n    Yields:\n    - If y is provided: (X_batch, y_batch)\n    - If y is not provided: (X_batch,)\n    \"\"\"\n    n_samples = X.shape[0]\n    for start in range(0, n_samples, batch_size):\n        end = min(start + batch_size, n_samples)\n        X_batch = X[start:end].tolist()\n        if y is not None:\n            y_batch = y[start:end].tolist()\n            yield (X_batch, y_batch)\n        else:\n            yield (X_batch,)"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    \"\"\"\n    Divide a dataset based on whether the value of a specified feature is \n    greater than or equal to a given threshold.\n\n    Parameters:\n    - X (np.ndarray): The input dataset (2D array).\n    - feature_i (int): Index of the feature to use for splitting.\n    - threshold (float): Threshold value for the split.\n\n    Returns:\n    - left (list): Subset of samples where feature_i >= threshold.\n    - right (list): Subset of samples where feature_i < threshold.\n    \"\"\"\n    feature_values = X[:, feature_i]\n    left_mask = feature_values >= threshold\n    right_mask = feature_values < threshold\n    left = X[left_mask].tolist()\n    right = X[right_mask].tolist()\n    return (left, right)"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    (n_samples, n_features) = X.shape\n    indices = list(combinations_with_replacement(range(n_features), degree))\n    n_output_features = len(indices)\n    X_poly = np.empty((n_samples, n_output_features))\n    for (i, idx) in enumerate(indices):\n        X_poly[:, i] = np.prod(X[:, idx], axis=1)\n    return X_poly.tolist()"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    \"\"\"\n    Generate n_subsets of random subsets from the dataset (X, y).\n    \n    Parameters:\n    - X: 2D numpy array of features.\n    - y: 1D numpy array of labels.\n    - n_subsets: Number of subsets to generate.\n    - replacements: Boolean indicating whether sampling is with replacement.\n    - seed: Random seed for reproducibility.\n    \n    Returns:\n    - List of tuples, each tuple is (X_subset, y_subset), with numpy arrays converted to lists.\n    \"\"\"\n    np.random.seed(seed)\n    n_samples = X.shape[0]\n    subsets = []\n    for _ in range(n_subsets):\n        if replacements:\n            indices = np.random.choice(n_samples, size=n_samples, replace=True)\n        else:\n            indices = np.random.permutation(n_samples)\n        X_subset = X[indices]\n        y_subset = y[indices]\n        subsets.append((X_subset.tolist(), y_subset.tolist()))\n    return subsets"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    \"\"\"\n    Perform one-hot encoding on a 1D numpy array of integer values.\n\n    Parameters:\n    x (np.ndarray): 1D numpy array of integer values.\n    n_col (int, optional): Number of columns for the one-hot encoded array.\n                           If not provided, it will be determined from the max value in x.\n\n    Returns:\n    list: One-hot encoded matrix as a Python list.\n    \"\"\"\n    x = np.asarray(x, dtype=np.int64)\n    if n_col is None:\n        n_col = np.max(x) + 1\n    result = np.zeros((x.shape[0], n_col), dtype=np.float32)\n    result[np.arange(x.shape[0]), x] = 1\n    return result.tolist()"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    diagonal_matrix = np.diag(x)\n    return diagonal_matrix.tolist()"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    \"\"\"\n    Calculate the accuracy score between true and predicted labels.\n    \n    Parameters:\n    y_true (np.ndarray): 1D array of true labels.\n    y_pred (np.ndarray): 1D array of predicted labels.\n    \n    Returns:\n    float: Accuracy score rounded to 4 decimal places.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        raise ValueError('Length of y_true and y_pred must be the same.')\n    correct = np.sum(y_true == y_pred)\n    total = len(y_true)\n    accuracy = correct / total\n    return round(accuracy, 4)"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    \"\"\"\n    Calculate the correlation matrix for the given dataset(s).\n    \n    Parameters:\n    - X: 2D numpy array, the first dataset.\n    - Y: 2D numpy array, optional, the second dataset. If not provided, \n         the correlation is calculated for X with itself.\n    \n    Returns:\n    - A 2D numpy array representing the correlation matrix, rounded to 4 decimal places.\n    \"\"\"\n    if Y is None:\n        Y = X\n    X_centered = X - np.mean(X, axis=0)\n    Y_centered = Y - np.mean(Y, axis=0)\n    std_X = np.std(X, axis=0, ddof=0)\n    std_Y = np.std(Y, axis=0, ddof=0)\n    std_X[std_X == 0] = 1\n    std_Y[std_Y == 0] = 1\n    numerator = np.dot(X_centered.T, Y_centered)\n    denominator = np.outer(std_X, std_Y)\n    correlation_matrix = numerator / denominator\n    return np.round(correlation_matrix, 4).tolist()"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_fit(X, y, n_clf):\n    (n_samples, n_features) = X.shape\n    sample_weights = np.ones(n_samples) / n_samples\n    classifiers = []\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_clf = None\n        for feature in range(n_features):\n            unique_vals = np.unique(X[:, feature])\n            thresholds = (unique_vals[:-1] + unique_vals[1:]) / 2\n            for threshold in thresholds:\n                for direction in [1, -1]:\n                    predictions = np.where(X[:, feature] >= threshold, 1 * direction, -1 * direction)\n                    error = np.sum(sample_weights[y != predictions])\n                    if error > 0.5:\n                        error = 1 - error\n                        predictions = -predictions\n                    if error < best_error:\n                        best_error = error\n                        best_clf = {'feature': feature, 'threshold': threshold, 'direction': direction, 'error': error}\n        epsilon = best_error\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n        best_clf['alpha'] = alpha\n        predictions = np.where(X[:, best_clf['feature']] >= best_clf['threshold'], 1 * best_clf['direction'], -1 * best_clf['direction'])\n        predictions = np.where(predictions == y, 1, -1)\n        sample_weights *= np.exp(-best_clf['alpha'] * y * predictions)\n        sample_weights /= np.sum(sample_weights)\n        classifiers.append({'feature': best_clf['feature'], 'threshold': round(best_clf['threshold'], 4), 'direction': best_clf['direction'], 'alpha': round(best_clf['alpha'], 4)})\n    return classifiers\nX = np.array([[1.0, 2.0], [2.0, 3.0], [3.0, 1.0], [4.0, 2.0]])\ny = np.array([1, 1, -1, -1])\nn_clf = 2"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list):\n    \"\"\"\n    Compute the log-softmax of a 1D array of scores.\n    \n    Parameters:\n        scores (list): A 1D list of numerical scores.\n        \n    Returns:\n        list: A 1D list of log-softmax values, rounded to 4 decimal places.\n    \"\"\"\n    scores = np.array(scores, dtype=np.float64)\n    scores -= np.max(scores)\n    log_sum_exp = np.log(np.sum(np.exp(scores)))\n    log_softmax_values = scores - log_sum_exp\n    return np.round(log_softmax_values, 4).tolist()"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport copy\nimport math\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.optimizer_W = None\n        self.optimizer_w0 = None\n\n    def initialize(self, optimizer):\n        limit = 1 / math.sqrt(self.input_shape[0])\n        self.W = np.random.uniform(-limit, limit, size=(self.input_shape[0], self.n_units))\n        self.w0 = np.zeros((1, self.n_units))\n        self.optimizer_W = copy.copy(optimizer)\n        self.optimizer_w0 = copy.copy(optimizer)\n\n    def parameters(self):\n        return self.W.size + self.w0.size\n\n    def forward_pass(self, X, training):\n        self.layer_input = X\n        output = np.dot(X, self.W) + self.w0\n        return output\n\n    def backward_pass(self, accum_grad):\n        W_grad = np.dot(self.layer_input.T, accum_grad)\n        input_grad = np.dot(accum_grad, self.W.T)\n        if self.trainable:\n            m_grad = W_grad\n            self.W = self.optimizer_W.update(self.W, m_grad)\n            b_grad = np.sum(accum_grad, axis=0, keepdims=True)\n            self.w0 = self.optimizer_w0.update(self.w0, b_grad)\n        return input_grad\n\n    def output_shape(self):\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    \"\"\"\n    Perform a 2D convolution on the input matrix using the given kernel, padding, and stride.\n    \n    Parameters:\n    - input_matrix (np.ndarray): 2D input matrix.\n    - kernel (np.ndarray): 2D convolution kernel.\n    - padding (int): Number of zero-padding layers to add on all sides.\n    - stride (int): Stride of the convolution.\n    \n    Returns:\n    - list: 2D output matrix as a Python list.\n    \"\"\"\n    input_padded = np.pad(input_matrix, pad_width=padding, mode='constant', constant_values=0)\n    (input_h, input_w) = input_padded.shape\n    (kernel_h, kernel_w) = kernel.shape\n    output_h = (input_h - kernel_h) // stride + 1\n    output_w = (input_w - kernel_w) // stride + 1\n    output = np.zeros((output_h, output_w))\n    for i in range(0, output_h):\n        for j in range(0, output_w):\n            region = input_padded[i * stride:i * stride + kernel_h, j * stride:j * stride + kernel_w]\n            output[i, j] = np.sum(region * kernel)\n    output = np.round(output, 4)\n    return output.tolist()"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    return max(0, z)"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    \"\"\"\n    Compute the Ridge Regression loss.\n\n    Parameters:\n    - X: 2D numpy array of shape (n_samples, n_features), the feature matrix.\n    - w: 1D numpy array of shape (n_features,), the coefficients.\n    - y_true: 1D numpy array of shape (n_samples,), the true labels.\n    - alpha: float, the regularization parameter.\n\n    Returns:\n    - float: the Ridge loss rounded to 4 decimal places.\n    \"\"\"\n    y_pred = X @ w\n    mse = np.mean((y_true - y_pred) ** 2)\n    regularization_term = alpha * np.sum(w ** 2)\n    total_loss = mse + regularization_term\n    return round(total_loss, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float:\n    \"\"\"\n    Applies the Leaky ReLU activation function.\n\n    Parameters:\n    z (float): Input value.\n    alpha (float): Slope for negative inputs. Default is 0.01.\n\n    Returns:\n    float: Output after applying Leaky ReLU.\n    \"\"\"\n    return z if z > 0 else alpha * z"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    \"\"\"\n    Computes the linear kernel (dot product) between two vectors x1 and x2.\n\n    Parameters:\n    x1 (array-like): First input vector.\n    x2 (array-like): Second input vector.\n\n    Returns:\n    float: The dot product of x1 and x2.\n    \"\"\"\n    return np.dot(x1, x2)"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    \"\"\"\n    Calculate the precision metric for binary classification.\n    \n    Parameters:\n    y_true (np.ndarray): True binary labels (0 or 1).\n    y_pred (np.ndarray): Predicted binary labels (0 or 1).\n    \n    Returns:\n    float: Precision score.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    true_positives = np.sum((y_true == 1) & (y_pred == 1))\n    false_positives = np.sum((y_true == 0) & (y_pred == 1))\n    if true_positives + false_positives == 0:\n        return 0.0\n    return true_positives / (true_positives + false_positives)"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    \"\"\"\n    Perform gradient descent optimization using the specified method.\n    \n    Parameters:\n    - X: np.ndarray, input features (shape: [n_samples, n_features])\n    - y: np.ndarray, target values (shape: [n_samples, 1])\n    - weights: np.ndarray, initial weights (shape: [n_features, 1])\n    - learning_rate: float, learning rate for gradient descent\n    - n_iterations: int, number of iterations to run\n    - batch_size: int, size of the batch for mini-batch GD (default: 1)\n    - method: str, one of 'batch', 'stochastic', or 'mini-batch' (default: 'batch')\n    \n    Returns:\n    - weights: np.ndarray, optimized weights (shape: [n_features, 1])\n    - losses: list, list of MSE losses at each iteration (rounded to 4 decimals)\n    \"\"\"\n    n_samples = X.shape[0]\n    losses = []\n    for _ in range(n_iterations):\n        if method == 'batch':\n            indices = np.arange(n_samples)\n        elif method == 'stochastic':\n            indices = np.random.choice(n_samples, size=1, replace=False)\n        elif method == 'mini-batch':\n            indices = np.random.choice(n_samples, size=batch_size, replace=False)\n        else:\n            raise ValueError(\"Invalid method. Choose from 'batch', 'stochastic', or 'mini-batch'.\")\n        X_batch = X[indices]\n        y_batch = y[indices]\n        y_pred = X_batch @ weights\n        error = y_pred - y_batch\n        gradient = X_batch.T @ error / batch_size\n        weights -= learning_rate * gradient\n        y_full_pred = X @ weights\n        loss = np.mean((y_full_pred - y) ** 2)\n        losses.append(round(loss, 4))\n    return (weights.tolist(), losses)\nX = np.array([[1, 2], [1, 3], [1, 4], [1, 5], [1, 6]])\ny = np.array([[3], [5], [7], [9], [11]])\nweights = np.array([[0.0], [0.0]])\nlearning_rate = 0.01\nn_iterations = 100\nbatch_size = 2"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    \"\"\"\n    Converts a given matrix into its Reduced Row Echelon Form (RREF).\n    \n    Parameters:\n    matrix (list of lists or numpy.ndarray): The input matrix.\n    \n    Returns:\n    list: The RREF of the input matrix as a Python list.\n    \"\"\"\n    mat = np.array(matrix, dtype=float)\n    (rows, cols) = mat.shape\n    lead = 0\n    for r in range(rows):\n        if lead >= cols:\n            break\n        pivot_row = r\n        while mat[pivot_row, lead] == 0:\n            pivot_row += 1\n            if pivot_row == rows:\n                pivot_row = r\n                lead += 1\n                if lead == cols:\n                    break\n        mat[[r, pivot_row]] = mat[[pivot_row, r]]\n        pivot = mat[r, lead]\n        mat[r] = mat[r] / pivot\n        for other_row in range(rows):\n            if other_row != r and mat[other_row, lead] != 0:\n                mat[other_row] = mat[other_row] - mat[other_row, lead] * mat[r]\n        lead += 1\n    return mat.tolist()"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=10):\n    \"\"\"\n    Optimizes the parameters of a function using the Adam optimization algorithm.\n    \n    Parameters:\n    - f: Objective function to be minimized\n    - grad: Function that computes the gradient of f\n    - x0: Initial parameter values (numpy array or list)\n    - learning_rate: Step size (default: 0.001)\n    - beta1: Exponential decay rate for the first moment estimates (default: 0.9)\n    - beta2: Exponential decay rate for the second moment estimates (default: 0.999)\n    - epsilon: Small constant for numerical stability (default: 1e-8)\n    - num_iterations: Number of iterations to run the optimizer (default: 10)\n    \n    Returns:\n    - x: Optimized parameters (as a Python list)\n    \"\"\"\n    x = np.array(x0, dtype=np.float64)\n    m = np.zeros_like(x)\n    v = np.zeros_like(x)\n    t = 0\n    for _ in range(num_iterations):\n        t += 1\n        grad_x = grad(x)\n        m = beta1 * m + (1 - beta1) * grad_x\n        v = beta2 * v + (1 - beta2) * grad_x ** 2\n        m_hat = m / (1 - beta1 ** t)\n        v_hat = v / (1 - beta2 ** t)\n        x -= learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    return np.round(x, 4).tolist()"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    \"\"\"\n    Perform Lasso Regression using Gradient Descent with L1 Regularization.\n\n    Parameters:\n    - X (np.array): Input feature matrix of shape (n_samples, n_features)\n    - y (np.array): Target values of shape (n_samples,)\n    - alpha (float): Regularization strength (lambda)\n    - learning_rate (float): Step size for gradient descent\n    - max_iter (int): Maximum number of iterations\n    - tol (float): Tolerance for stopping condition\n\n    Returns:\n    - w (list): Final weights rounded to 4 decimals\n    - b (float): Final bias rounded to 4 decimals\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    w = np.zeros(n_features)\n    b = 0.0\n    for _ in range(max_iter):\n        y_pred = np.dot(X, w) + b\n        dw = -1 / n_samples * np.dot(X.T, y - y_pred) + alpha / n_samples * np.sign(w)\n        db = -1 / n_samples * np.sum(y - y_pred)\n        prev_w = w.copy()\n        prev_b = b\n        w -= learning_rate * dw\n        b -= learning_rate * db\n        if np.linalg.norm(w - prev_w) < tol and abs(b - prev_b) < tol:\n            break\n    return (np.round(w, 4).tolist(), round(b, 4))"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    m = len(source)\n    n = len(target)\n    dp = np.zeros((m + 1, n + 1), dtype=int)\n    for i in range(1, m + 1):\n        dp[i][0] = i\n    for j in range(1, n + 1):\n        dp[0][j] = j\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if source[i - 1] == target[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1])\n                if i > 1 and j > 1 and (source[i - 1] == target[j - 2]) and (source[i - 2] == target[j - 1]):\n                    dp[i][j] = min(dp[i][j], dp[i - 2][j - 2] + 1)\n    return dp[m][n]"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    TP = np.sum((y_true == 1) & (y_pred == 1))\n    FN = np.sum((y_true == 1) & (y_pred == 0))\n    denominator = TP + FN\n    if denominator == 0:\n        return 0.0\n    return round(TP / denominator, 3)"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    \"\"\"\n    Compute the self-attention output for a given input matrix X.\n    \n    Parameters:\n    - X: Input matrix of shape (seq_len, input_dim)\n    - W_q, W_k, W_v: Weight matrices for Query, Key, and Value transformations\n    \n    Returns:\n    - Output as a Python list after rounding to 4 decimal places and reshaping\n    \"\"\"\n    (seq_len, input_dim) = X.shape\n    Q = X @ W_q\n    K = X @ W_k\n    V = X @ W_v\n    scores = Q @ K.T\n    d_k = K.shape[1]\n    scores = scores / np.sqrt(d_k)\n    attention_weights = np.exp(scores) / np.sum(np.exp(scores), axis=1, keepdims=True)\n    output = attention_weights @ V\n    return np.round(output, 4).tolist()"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    \"\"\"\n    Implements a simple RNN forward pass to compute the final hidden state.\n    \n    Parameters:\n    - input_sequence: List of input vectors (each vector is a list of floats).\n    - initial_hidden_state: Initial hidden state vector (list of floats).\n    - Wx: Weight matrix for input-to-hidden connections.\n    - Wh: Weight matrix for hidden-to-hidden connections.\n    - b: Bias vector.\n    \n    Returns:\n    - Final hidden state after processing the entire sequence (list of floats).\n    \"\"\"\n    h_prev = np.array(initial_hidden_state)\n    for x_t in input_sequence:\n        x_t = np.array(x_t)\n        h_prev = np.tanh(np.dot(Wx, x_t) + np.dot(Wh, h_prev) + np.array(b))\n    return np.round(h_prev, 4).tolist()"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    \"\"\"\n    Applies a 2D translation to a list of [x, y] points.\n    \n    Parameters:\n        points (list of lists): A list of [x, y] coordinates.\n        tx (float): Translation in x direction.\n        ty (float): Translation in y direction.\n        \n    Returns:\n        list of lists: Translated points as a list of [x, y] coordinates.\n    \"\"\"\n    points_array = np.array(points)\n    translated_array = points_array + [tx, ty]\n    return translated_array.tolist()"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    Compute the KL divergence between two univariate normal distributions.\n    \n    Parameters:\n    mu_p (float): Mean of distribution P\n    sigma_p (float): Standard deviation of distribution P\n    mu_q (float): Mean of distribution Q\n    sigma_q (float): Standard deviation of distribution Q\n    \n    Returns:\n    float: KL divergence D_KL(P || Q)\n    \"\"\"\n    return np.log(sigma_q / sigma_p) + (sigma_p ** 2 + (mu_p - mu_q) ** 2) / (2 * sigma_q ** 2) - 0.5"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    if x_ini is None:\n        x = np.zeros_like(b)\n    else:\n        x = np.array(x_ini, dtype=float)\n    for _ in range(n):\n        for i in range(A.shape[0]):\n            x[i] = (b[i] - np.dot(A[i, :i], x[:i]) - np.dot(A[i, i + 1:], x[i + 1:])) / A[i, i]\n    return np.round(x, 4).tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    \"\"\"\n    Solves the linear system Ax = b using Gaussian Elimination with partial pivoting.\n    \n    Parameters:\n    A (list of lists or np.ndarray): Coefficient matrix\n    b (list or np.ndarray): Right-hand side vector\n    \n    Returns:\n    list: Solution vector x, rounded to 4 decimal places\n    \"\"\"\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    n = len(b)\n    Ab = np.hstack([A, b.reshape(-1, 1)])\n    for i in range(n):\n        max_row = np.argmax(np.abs(Ab[i:, i])) + i\n        if Ab[max_row, i] == 0:\n            raise ValueError('Matrix is singular or nearly singular.')\n        Ab[[i, max_row]] = Ab[[max_row, i]]\n        for j in range(i + 1, n):\n            factor = Ab[j, i] / Ab[i, i]\n            Ab[j, i:] -= factor * Ab[i, i:]\n    x = np.zeros(n)\n    for i in reversed(range(n)):\n        x[i] = (Ab[i, -1] - np.dot(Ab[i, i + 1:n], x[i + 1:n])) / Ab[i, i]\n    return np.round(x, 4).tolist()"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \"\"\"\n        h = initial_hidden_state\n        c = initial_cell_state\n        hidden_states = []\n        for t in range(x.shape[1]):\n            x_t = x[:, t].reshape(-1, 1)\n            z = np.concatenate((x_t, h), axis=0)\n            f = self.sigmoid(np.dot(self.Wf, z) + self.bf)\n            i = self.sigmoid(np.dot(self.Wi, z) + self.bi)\n            g = np.tanh(np.dot(self.Wc, z) + self.bc)\n            c = f * c + i * g\n            o = self.sigmoid(np.dot(self.Wo, z) + self.bo)\n            h = o * np.tanh(c)\n            hidden_states.append(h)\n        hidden_states = np.array(hidden_states).squeeze()\n        hidden_states = np.round(hidden_states, 4)\n        final_hidden_state = np.round(h, 4)\n        final_cell_state = np.round(c, 4)\n        return (hidden_states.tolist(), final_hidden_state.tolist(), final_cell_state.tolist())\n\n    def sigmoid(self, x):\n        return 1 / (1 + np.exp(-x))\ninput_size = 3\nhidden_size = 4\nx = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ninitial_hidden_state = np.zeros((hidden_size, 1))\ninitial_cell_state = np.zeros((hidden_size, 1))"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\ndef compute_tf_idf(corpus, query):\n    if not corpus:\n        return []\n    all_terms = set()\n    for doc in corpus:\n        for word in doc:\n            all_terms.add(word)\n    vocabulary = {word: idx for (idx, word) in enumerate(sorted(all_terms))}\n    num_docs = len(corpus)\n    num_terms = len(vocabulary)\n    tf = np.zeros((num_docs, num_terms))\n    df = np.zeros(num_terms)\n    for (doc_idx, doc) in enumerate(corpus):\n        term_count = {}\n        total_terms = len(doc)\n        for word in doc:\n            term_count[word] = term_count.get(word, 0) + 1\n        for (word, count) in term_count.items():\n            tf[doc_idx, vocabulary[word]] = count / total_terms if total_terms > 0 else 0\n    for doc in corpus:\n        unique_terms = set(doc)\n        for word in unique_terms:\n            df[vocabulary[word]] += 1\n    idf = np.log((num_docs + 1) / (df + 1)) + 1\n    tf_idf = tf * idf\n    return np.round(tf_idf, 4).tolist()"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    true_positives = np.sum(np.logical_and(y_true == 1, y_pred == 1))\n    false_positives = np.sum(np.logical_and(y_true == 0, y_pred == 1))\n    false_negatives = np.sum(np.logical_and(y_true == 1, y_pred == 0))\n    precision = true_positives / (true_positives + false_positives) if true_positives + false_positives > 0 else 0\n    recall = true_positives / (true_positives + false_negatives) if true_positives + false_negatives > 0 else 0\n    f_score = (1 + beta ** 2) * precision * recall / (beta ** 2 * precision + recall) if beta ** 2 * precision + recall > 0 else 0\n    return round(f_score, 3)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\ndef tanh_derivative(x):\n    return 1.0 - np.tanh(x) ** 2\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, input_sequence):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n        Args:\n            input_sequence: A list of input vectors.\n        Returns:\n            outputs: A list of output vectors at each time step.\n            hiddens: A list of hidden states at each time step.\n            inputs: A list of input vectors.\n        \"\"\"\n        hiddens = []\n        inputs = []\n        outputs = []\n        h_prev = np.zeros((self.hidden_size, 1))\n        for x in input_sequence:\n            x = np.reshape(x, (len(x), 1))\n            inputs.append(x)\n            h = np.tanh(self.W_xh @ x + self.W_hh @ h_prev + self.b_h)\n            y = self.W_hy @ h + self.b_y\n            hiddens.append(h)\n            outputs.append(y)\n            h_prev = h\n        return (outputs, hiddens, inputs)\n\n    def backward(self, input_sequence, expected_output, outputs, hiddens, inputs, learning_rate):\n        \"\"\"\n        Backward pass using BPTT.\n        Args:\n            input_sequence: A list of input vectors.\n            expected_output: A list of expected output vectors.\n            outputs: A list of output vectors from forward pass.\n            hiddens: A list of hidden states from forward pass.\n            inputs: A list of input vectors from forward pass.\n            learning_rate: Learning rate for gradient descent.\n        \"\"\"\n        dW_xh = np.zeros_like(self.W_xh)\n        dW_hh = np.zeros_like(self.W_hh)\n        dW_hy = np.zeros_like(self.W_hy)\n        db_h = np.zeros_like(self.b_h)\n        db_y = np.zeros_like(self.b_y)\n        dh_next = np.zeros_like(hiddens[0])\n        for t in reversed(range(len(input_sequence))):\n            dy = outputs[t] - expected_output[t]\n            dW_hy += dy @ hiddens[t].T\n            db_y += dy\n            dh = self.W_hy.T @ dy + dh_next\n            dh_raw = dh * tanh_derivative(self.W_xh @ inputs[t] + self.W_hh @ hiddens[t - 1] if t > 0 else self.W_xh @ inputs[t] + self.W_hh @ np.zeros_like(hiddens[0]) + self.b_h)\n            db_h += dh_raw\n            dW_xh += dh_raw @ inputs[t].T\n            dW_hh += dh_raw @ hiddens[t - 1].T if t > 0 else 0\n            dh_next = self.W_hh.T @ dh_raw\n        for dparam in [dW_xh, dW_hh, dW_hy, db_h, db_y]:\n            np.clip(dparam, -1, 1, out=dparam)\n        self.W_xh -= learning_rate * dW_xh\n        self.W_hh -= learning_rate * dW_hh\n        self.W_hy -= learning_rate * dW_hy\n        self.b_h -= learning_rate * db_h\n        self.b_y -= learning_rate * db_y\n\n    def train(self, input_sequence, expected_output, learning_rate=0.01):\n        \"\"\"\n        Trains the RNN on a single input-output sequence.\n        \"\"\"\n        (outputs, hiddens, inputs) = self.forward(input_sequence)\n        self.backward(input_sequence, expected_output, outputs, hiddens, inputs, learning_rate)\n        return outputs"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x (rounded to 8 decimal places and as a list)\n    \"\"\"\n    if x0 is None:\n        x = np.zeros_like(b)\n    else:\n        x = x0.copy()\n    r = b - A @ x\n    p = r.copy()\n    r_norm_squared = np.dot(r, r)\n    for i in range(n):\n        Ap = A @ p\n        alpha = r_norm_squared / np.dot(p, Ap)\n        x += alpha * p\n        r -= alpha * Ap\n        new_r_norm_squared = np.dot(r, r)\n        if np.sqrt(new_r_norm_squared) < tol:\n            break\n        beta = new_r_norm_squared / r_norm_squared\n        p = r + beta * p\n        r_norm_squared = new_r_norm_squared\n    return np.round(x, 8).tolist()\nA = np.array([[4, 1], [1, 3]])\nb = np.array([1, 2])\nx = conjugate_gradient(A, b, n=100, tol=1e-06)"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef gini_impurity(y: List[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    if not y:\n        return 0.0\n    total_samples = len(y)\n    class_counts = np.bincount(y)\n    class_probabilities = class_counts / total_samples\n    gini = 1 - np.sum(class_probabilities ** 2)\n    return round(gini, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    if not dense_matrix or not dense_matrix[0]:\n        return ([], [], [0])\n    values = []\n    col_indices = []\n    row_ptr = [0]\n    for row in dense_matrix:\n        count = 0\n        for (col, val) in enumerate(row):\n            if val != 0:\n                values.append(val)\n                col_indices.append(col)\n                count += 1\n        row_ptr.append(row_ptr[-1] + count)\n    return (values, col_indices, row_ptr)"}
{"task_id": 66, "completion_id": 0, "solution": "def orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    dot_v_L = sum((vi * Li for (vi, Li) in zip(v, L)))\n    dot_L_L = sum((Li * Li for Li in L))\n    if dot_L_L == 0:\n        raise ValueError('The line vector L cannot be a zero vector.')\n    scalar_proj = dot_v_L / dot_L_L\n    proj_vector = [scalar_proj * Li for Li in L]\n    proj_vector_rounded = [round(component, 3) for component in proj_vector]\n    return proj_vector_rounded"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    if not dense_matrix or not dense_matrix[0]:\n        return ([], [], [0])\n    num_rows = len(dense_matrix)\n    num_cols = len(dense_matrix[0])\n    values = []\n    row_indices = []\n    column_pointer = [0]\n    for col in range(num_cols):\n        for row in range(num_rows):\n            val = dense_matrix[row][col]\n            if val != 0:\n                values.append(val)\n                row_indices.append(row)\n        column_pointer.append(len(values))\n    return (values, row_indices, column_pointer)"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    \"\"\"\n    Compute the basis for the column space (image) of matrix A.\n    \n    Parameters:\n    A (np.ndarray): Input matrix.\n    \n    Returns:\n    list: List of basis vectors for the column space, rounded to 8 decimal places.\n    \"\"\"\n    A = np.array(A, dtype=float)\n    (m, n) = A.shape\n    B = A.copy()\n    pivot_cols = []\n    r = 0\n    for c in range(n):\n        if np.allclose(B[r:, c], 0):\n            continue\n        pivot_row = np.argmax(np.abs(B[r:, c])) + r\n        B[[r, pivot_row], :] = B[[pivot_row, r], :]\n        pivot = B[r, c]\n        B[r, :] /= pivot\n        for i in range(m):\n            if i != r and (not np.isclose(B[i, c], 0)):\n                factor = B[i, c]\n                B[i, :] -= factor * B[r, :]\n        pivot_cols.append(c)\n        r += 1\n        if r >= m:\n            break\n    image_basis = A[:, pivot_cols]\n    return np.round(image_basis, 8).tolist()"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    mean_y_true = np.mean(y_true)\n    sst = np.sum((y_true - mean_y_true) ** 2)\n    ssr = np.sum((y_true - y_pred) ** 2)\n    r2 = 1 - ssr / sst\n    return round(r2, 3)"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    if not img or not img[0]:\n        return -1\n    expected_length = len(img[0])\n    total_brightness = 0\n    total_pixels = 0\n    for row in img:\n        if len(row) != expected_length:\n            return -1\n        for pixel in row:\n            if not isinstance(pixel, int) or not 0 <= pixel <= 255:\n                return -1\n            total_brightness += pixel\n            total_pixels += 1\n    if total_pixels == 0:\n        return -1\n    average = total_brightness / total_pixels\n    return round(average, 2)"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    \"\"\"\n    Calculate the Root Mean Square Error (RMSE) between y_true and y_pred.\n\n    Parameters:\n    y_true (array-like): Ground truth (correct) target values.\n    y_pred (array-like): Estimated target values.\n\n    Returns:\n    float: RMSE value rounded to three decimal places.\n\n    Raises:\n    ValueError: If the input arrays are not of the same length or are empty.\n    TypeError: If inputs are not array-like or convertible to numpy arrays.\n    \"\"\"\n    try:\n        y_true = np.asarray(y_true)\n        y_pred = np.asarray(y_pred)\n        if y_true.ndim != 1 or y_pred.ndim != 1:\n            raise ValueError('Input arrays must be 1-dimensional.')\n        if len(y_true) == 0 or len(y_pred) == 0:\n            raise ValueError('Input arrays cannot be empty.')\n        if len(y_true) != len(y_pred):\n            raise ValueError('Input arrays must have the same length.')\n        squared_errors = (y_true - y_pred) ** 2\n        mean_squared_error = np.mean(squared_errors)\n        root_mean_squared_error = np.sqrt(mean_squared_error)\n        return round(root_mean_squared_error, 3)\n    except (ValueError, TypeError) as e:\n        raise e"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    \"\"\"\n    Calculate the Jaccard Index between two binary arrays.\n\n    Parameters:\n    y_true (array-like): Ground truth (correct) binary labels.\n    y_pred (array-like): Predicted binary labels.\n\n    Returns:\n    float: Jaccard Index rounded to three decimal places.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    intersection = np.sum(np.logical_and(y_true, y_pred))\n    union = np.sum(np.logical_or(y_true, y_pred))\n    if union == 0:\n        return 1.0\n    jaccard = intersection / union\n    return round(jaccard, 3)"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    \"\"\"\n    Calculate the Dice Score between two binary arrays.\n\n    Parameters:\n    y_true (array-like): Ground truth (correct) labels.\n    y_pred (array-like): Predicted labels.\n\n    Returns:\n    float: Dice Score rounded to 3 decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    if not np.all(np.isin(y_true, [0, 1])) or not np.all(np.isin(y_pred, [0, 1])):\n        raise ValueError('Input arrays must contain only binary values (0 or 1).')\n    intersection = np.sum(y_true * y_pred)\n    sum_true = np.sum(y_true)\n    sum_pred = np.sum(y_pred)\n    if sum_true + sum_pred == 0:\n        return 1.0\n    dice = 2.0 * intersection / (sum_true + sum_pred)\n    return round(dice, 3)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef create_row_hv(row, dim, random_seeds):\n    \"\"\"\n    Generate a composite hypervector for a given dataset row using HDC.\n\n    Parameters:\n    - row (dict): A dictionary representing a dataset row.\n    - dim (int): The dimensionality of the hypervectors.\n    - random_seeds (dict): A dictionary of seeds for reproducibility.\n\n    Returns:\n    - list: A composite hypervector representing the entire row.\n    \"\"\"\n    composite_hv = np.zeros(dim)\n    for (feature_name, feature_value) in row.items():\n        feature_seed = random_seeds.get(feature_name, 0)\n        np.random.seed(feature_seed)\n        feature_name_hv = np.random.choice([-1, 1], size=dim)\n        feature_value_hv = np.random.choice([-1, 1], size=dim)\n        bound_hv = feature_name_hv * feature_value_hv\n        composite_hv += bound_hv\n    composite_hv = np.tanh(composite_hv)\n    return composite_hv.tolist()"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    \"\"\"\n    Generate a 2x2 confusion matrix for binary classification.\n    \n    Parameters:\n        data (list of lists): Each inner list is [y_true, y_pred]\n    \n    Returns:\n        list of lists: A 2x2 confusion matrix as:\n            [\n                [True Negative, False Positive],\n                [False Negative, True Positive]\n            ]\n    \"\"\"\n    matrix = [[0, 0], [0, 0]]\n    for (y_true, y_pred) in data:\n        if y_true == 0:\n            if y_pred == 0:\n                matrix[0][0] += 1\n            else:\n                matrix[0][1] += 1\n        elif y_pred == 0:\n            matrix[1][0] += 1\n        else:\n            matrix[1][1] += 1\n    return matrix"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    v1 = np.asarray(v1)\n    v2 = np.asarray(v2)\n    if v1.shape != v2.shape:\n        raise ValueError('Input vectors must have the same shape.')\n    if np.linalg.norm(v1) == 0 or np.linalg.norm(v2) == 0:\n        raise ValueError('Input vectors cannot have zero magnitude.')\n    dot_product = np.dot(v1, v2)\n    norm_v1 = np.linalg.norm(v1)\n    norm_v2 = np.linalg.norm(v2)\n    similarity = dot_product / (norm_v1 * norm_v2)\n    return round(similarity, 3)"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    if len(actual) != len(predicted):\n        raise ValueError(\"The lengths of 'actual' and 'predicted' lists must be the same.\")\n    for label in actual + predicted:\n        if label not in {0, 1}:\n            raise ValueError(\"All elements in 'actual' and 'predicted' must be either 0 or 1.\")\n    tp = sum((1 for (a, p) in zip(actual, predicted) if a == 1 and p == 1))\n    fp = sum((1 for (a, p) in zip(actual, predicted) if a == 0 and p == 1))\n    tn = sum((1 for (a, p) in zip(actual, predicted) if a == 0 and p == 0))\n    fn = sum((1 for (a, p) in zip(actual, predicted) if a == 1 and p == 0))\n    confusion_matrix = [[tn, fp], [fn, tp]]\n    accuracy = (tp + tn) / (tp + tn + fp + fn) if tp + tn + fp + fn > 0 else 0.0\n    accuracy = round(accuracy, 3)\n    precision = tp / (tp + fp) if tp + fp > 0 else 0.0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0.0\n    f1_score = 2 * precision * recall / (precision + recall) if precision + recall > 0 else 0.0\n    f1_score = round(f1_score, 3)\n    specificity = tn / (tn + fp) if tn + fp > 0 else 0.0\n    specificity = round(specificity, 3)\n    negative_predictive_value = tn / (tn + fn) if tn + fn > 0 else 0.0\n    negative_predictive_value = round(negative_predictive_value, 3)\n    return (confusion_matrix, accuracy, f1_score, specificity, negative_predictive_value)"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\nfrom scipy import stats\ndef descriptive_statistics(data):\n    data = np.array(data)\n    mean = np.mean(data)\n    median = np.median(data)\n    mode = stats.mode(data, keepdims=True).mode[0] if np.ndim(data) == 1 else stats.mode(data, axis=None).mode[0]\n    variance = np.var(data, ddof=0)\n    standard_deviation = np.std(data, ddof=0)\n    percentiles = np.percentile(data, [25, 50, 75])\n    iqr = percentiles[2] - percentiles[0]\n    result = {'mean': round(mean, 4), 'median': round(median, 4), 'mode': mode, 'variance': round(variance, 4), 'standard_deviation': round(standard_deviation, 4), '25th_percentile': round(percentiles[0], 4), '50th_percentile': round(percentiles[1], 4), '75th_percentile': round(percentiles[2], 4), 'interquartile_range': round(iqr, 4)}\n    return result"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials\n    \"\"\"\n    combination = math.comb(n, k)\n    probability = combination * p ** k * (1 - p) ** (n - k)\n    return round(probability, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    :return: The PDF value at x, rounded to 5 decimal places.\n    \"\"\"\n    coefficient = 1 / (std_dev * math.sqrt(2 * math.pi))\n    exponent = -(x - mean) ** 2 / (2 * std_dev ** 2)\n    pdf_value = coefficient * math.exp(exponent)\n    return round(pdf_value, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    \"\"\"\n    probability = math.exp(-lam) * lam ** k / math.factorial(k)\n    return round(probability, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        int: The contrast value, calculated as the difference between max and min pixel values.\n    \"\"\"\n    if img.ndim != 2:\n        raise ValueError('Input image must be a 2D array.')\n    if img.dtype != np.uint8:\n        raise ValueError('Input image must have pixel values of type uint8 (0-255).')\n    max_pixel = np.max(img)\n    min_pixel = np.min(img)\n    contrast = max_pixel - min_pixel\n    return contrast"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    \n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    \n    Returns:\n        float: The dot product of the two vectors.\n    \"\"\"\n    return np.dot(vec1, vec2)"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n\n    Returns:\n        list[list[float]]: A list of lists where each inner list contains the polynomial features of the corresponding data point.\n    \"\"\"\n    if degree < 0:\n        return []\n    result = []\n    for x in data:\n        features = [x ** d for d in range(1, degree + 1)]\n        result.append([round(val, 8) for val in features])\n    return result"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    if position <= 0 or d_model <= 0:\n        return -1\n    encoding = np.zeros((position, d_model), dtype=np.float16)\n    for pos in range(position):\n        for i in range(0, d_model, 2):\n            encoding[pos, i] = np.sin(pos / 10000 ** (2 * i / d_model)).astype(np.float16)\n            if i + 1 < d_model:\n                encoding[pos, i + 1] = np.cos(pos / 10000 ** (2 * i / d_model)).astype(np.float16)\n    return encoding.tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    elif training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    else:\n        return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    parameter = parameter - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    parameter = np.round(parameter, 5).tolist()\n    m = np.round(m, 5).tolist()\n    v = np.round(v, 5).tolist()\n    return (parameter, m, v)"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    token_ids = encoder.encode(prompt)\n    context_size = len(token_ids)\n\n    def softmax(x):\n        e_x = np.exp(x - np.max(x, axis=-1, keepdims=True))\n        return e_x / e_x.sum(axis=-1, keepdims=True)\n\n    def layer_norm(x, g, b, eps=1e-05):\n        mean = np.mean(x, axis=-1, keepdims=True)\n        var = np.var(x, axis=-1, keepdims=True)\n        return g * (x - mean) / np.sqrt(var + eps) + b\n\n    def gelu(x):\n        return 0.5 * x * (1 + np.tanh(np.sqrt(2 / np.pi) * (x + 0.044715 * x ** 3)))\n    for _ in range(n_tokens_to_generate):\n        token_embeddings = params['wte'][token_ids]\n        positional_embeddings = params['wpe'][:context_size]\n        x = token_embeddings + positional_embeddings\n        x = layer_norm(x, params['ln_f']['g'], params['ln_f']['b'])\n        logits = x[-1]\n        probs = softmax(logits)\n        next_token = np.argmax(probs)\n        token_ids.append(next_token)\n        context_size += 1\n    return encoder.decode(token_ids)"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        exp_values = np.exp(values - np.max(values))\n        return exp_values / exp_values.sum(axis=1, keepdims=True)\n    crystal_values = np.array(crystal_values)\n    if n * dimension != len(crystal_values):\n        raise ValueError('The total number of values must be equal to n * dimension')\n    crystal_values = crystal_values.reshape(n, dimension)\n    Q = crystal_values\n    K = crystal_values\n    attention_scores = Q @ K.T\n    attention_weights = softmax(attention_scores)\n    V = crystal_values\n    final_pattern = attention_weights @ V\n    final_pattern = final_pattern.flatten()\n    final_pattern = [round(fp, 4) for fp in final_pattern]\n    return final_pattern"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        raise ValueError('The lengths of y_true and y_pred must be equal.')\n    tp = 0\n    fp = 0\n    fn = 0\n    for (true, pred) in zip(y_true, y_pred):\n        if true == 1 and pred == 1:\n            tp += 1\n        elif true == 0 and pred == 1:\n            fp += 1\n        elif true == 1 and pred == 0:\n            fn += 1\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0\n    f1 = 2 * (precision * recall) / (precision + recall) if precision + recall > 0 else 0\n    return round(f1, 3)"}
{"task_id": 92, "completion_id": 0, "solution": "import math\nPI = 3.14159\ndef power_grid_forecast(consumption_data):\n    detrended_data = []\n    for i in range(1, 11):\n        fluctuation = 10 * math.sin(2 * PI * i / 10)\n        detrended = consumption_data[i - 1] - fluctuation\n        detrended_data.append((i, detrended))\n    n = len(detrended_data)\n    x = [day for (day, _) in detrended_data]\n    y = [value for (_, value) in detrended_data]\n    sum_x = sum(x)\n    sum_y = sum(y)\n    sum_xy = sum([xi * yi for (xi, yi) in zip(x, y)])\n    sum_x2 = sum([xi ** 2 for xi in x])\n    m = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x ** 2)\n    b = (sum_y - m * sum_x) / n\n    base_day_15 = m * 15 + b\n    fluctuation_day_15 = 10 * math.sin(2 * PI * 15 / 10)\n    total_day_15 = base_day_15 + fluctuation_day_15\n    safety_margin = total_day_15 * 1.05\n    final_forecast = math.ceil(safety_margin)\n    return final_forecast\nconsumption_data = [120, 135, 140, 150, 160, 170, 180, 190, 200, 210]"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    absolute_errors = np.abs(y_true - y_pred)\n    mean_error = np.mean(absolute_errors)\n    return round(mean_error, 3)"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute scaled dot-product self-attention.\n    \"\"\"\n    d_k = K.shape[-1]\n    scores = Q @ K.T / np.sqrt(d_k)\n    attention_weights = np.softmax(scores, axis=-1)\n    output = attention_weights @ V\n    return output\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Multi-head attention implementation.\n    \"\"\"\n    (batch_size, seq_len, d_model) = X.shape\n    d_k = d_model // n_heads\n    W_q_heads = W_q.reshape(n_heads, d_model, d_k)\n    W_k_heads = W_k.reshape(n_heads, d_model, d_k)\n    W_v_heads = W_v.reshape(n_heads, d_model, d_k)\n    outputs = []\n    for i in range(n_heads):\n        Q_head = X @ W_q_heads[i]\n        K_head = X @ W_k_heads[i]\n        V_head = X @ W_v_heads[i]\n        head_output = self_attention(Q_head, K_head, V_head)\n        outputs.append(head_output)\n    attention_output = np.concatenate(outputs, axis=-1)\n    return np.round(attention_output, 4).tolist()"}
{"task_id": 95, "completion_id": 0, "solution": "def phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError('Input lists must be of the same length.')\n    n11 = sum((1 for (a, b) in zip(x, y) if a == 1 and b == 1))\n    n10 = sum((1 for (a, b) in zip(x, y) if a == 1 and b == 0))\n    n01 = sum((1 for (a, b) in zip(x, y) if a == 0 and b == 1))\n    n00 = sum((1 for (a, b) in zip(x, y) if a == 0 and b == 0))\n    n = len(x)\n    numerator = n11 * n00 - n10 * n01\n    denominator = ((n11 + n10) * (n11 + n01) * (n00 + n10) * (n00 + n01)) ** 0.5\n    if denominator == 0:\n        return 0.0\n    phi = numerator / denominator\n    return round(phi, 4)\nx = [1, 0, 1, 1, 0, 0, 1]\ny = [0, 0, 1, 1, 0, 1, 1]"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    if x <= -2.5:\n        return 0.0\n    elif x >= 2.5:\n        return 1.0\n    else:\n        return 0.2 * x + 0.5"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value\n    \"\"\"\n    if x > 0:\n        return round(x, 4)\n    else:\n        return round(alpha * (math.exp(x) - 1), 4)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    if x > 0:\n        return x\n    else:\n        return alpha * x"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x)\n    \"\"\"\n    if x < -30:\n        return round(0.0, 4)\n    elif x > 30:\n        return round(x, 4)\n    else:\n        return round(math.log(1.0 + math.exp(x)), 4)"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input, rounded to 4 decimal places\n    \"\"\"\n    return round(x / (1 + abs(x)), 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    rhos = np.array(rhos)\n    A = np.array(A)\n    pi_theta_old = np.array(pi_theta_old)\n    pi_theta_ref = np.array(pi_theta_ref)\n    rhos_clipped = np.clip(rhos, 1 - epsilon, 1 + epsilon)\n    kl_divergence = np.sum(pi_theta_old * np.log(pi_theta_old / pi_theta_ref))\n    surrogate_unclipped = rhos * A\n    surrogate_clipped = rhos_clipped * A\n    policy_objective = np.minimum(surrogate_unclipped, surrogate_clipped)\n    objective = np.mean(policy_objective) - beta * kl_divergence\n    return round(objective, 6)\nrhos = [1.1, 0.95, 1.05]\nA = [2.0, -1.0, 3.0]\npi_theta_old = [0.3, 0.4, 0.3]\npi_theta_ref = [0.25, 0.45, 0.3]"}
{"task_id": 102, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value, rounded to 4 decimal places\n    \"\"\"\n    return round(x / (1 + math.exp(-x)), 4)"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value, rounded to 4 decimal places\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x > 0:\n        return scale * x\n    else:\n        return scale * alpha * (np.exp(x) - 1)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00d7 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    z = np.dot(X, weights) + bias\n    probabilities = 1 / (1 + np.exp(-z))\n    predictions = (probabilities >= 0.5).astype(int)\n    return predictions.tolist()"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    C = len(np.unique(y))\n    M = X.shape[1]\n    y_one_hot = np.zeros((y.size, C))\n    y_one_hot[np.arange(y.size), y] = 1\n    B = np.random.randn(M, C) * 0.01\n    losses = []\n    for _ in range(iterations):\n        scores = X @ B\n        exp_scores = np.exp(scores)\n        probs = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)\n        loss = -np.mean(np.log(probs[np.arange(y.shape[0]), y]))\n        losses.append(round(loss, 4))\n        grad = X.T @ (probs - y_one_hot)\n        B -= learning_rate * grad\n    B_rounded = np.round(B, 4).tolist()\n    losses_rounded = [round(loss, 4) for loss in losses]\n    return (B_rounded, losses_rounded)\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([0, 1, 2])\nlearning_rate = 0.01\niterations = 100"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \n    Parameters:\n    - X: np.ndarray, input features (n_samples, n_features)\n    - y: np.ndarray, target labels (n_samples,)\n    - learning_rate: float, learning rate for gradient descent\n    - iterations: int, number of iterations to run gradient descent\n    \n    Returns:\n    - A tuple containing:\n        1. A list of the optimized coefficients (weights and bias, combined)\n        2. A list of the loss values over each iteration (rounded to 4 decimal places)\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    weights = np.zeros(n_features)\n    bias = 0.0\n    loss_history = []\n    for _ in range(iterations):\n        linear_model = np.dot(X, weights) + bias\n        y_pred = 1 / (1 + np.exp(-linear_model))\n        epsilon = 1e-15\n        y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n        loss = -np.mean(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n        loss_history.append(round(loss, 4))\n        dw = 1 / n_samples * np.dot(X.T, y_pred - y)\n        db = 1 / n_samples * np.sum(y_pred - y)\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n    coefficients = np.concatenate((weights, np.array([bias])))\n    coefficients_list = np.round(coefficients, 4).tolist()\n    loss_history = np.round(loss_history, 4).tolist()\n    return (coefficients_list, loss_history)"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \n    Parameters:\n        Q (np.ndarray): Query matrix of shape (n, h)\n        K (np.ndarray): Key matrix of shape (n, h)\n        V (np.ndarray): Value matrix of shape (n, h)\n        mask (np.ndarray): Attention mask of shape (n, n), with 0s for positions to be masked\n    \n    Returns:\n        np.ndarray: Output of masked self-attention of shape (n, h)\n    \"\"\"\n    d_k = K.shape[1]\n    scores = np.dot(Q, K.T) / np.sqrt(d_k)\n    scores = np.where(mask == 0, -1000000000.0, scores)\n    exp_scores = np.exp(scores)\n    exp_scores = np.where(mask == 0, 0, exp_scores)\n    attention_weights = exp_scores / (exp_scores.sum(axis=1, keepdims=True) + 1e-08)\n    output = np.dot(attention_weights, V)\n    return output.tolist()"}
{"task_id": 108, "completion_id": 0, "solution": "from collections import Counter\nimport math\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    \"\"\"\n    total = len(apples)\n    if total == 0:\n        return 0.0\n    counts = Counter(apples)\n    entropy = 0.0\n    for count in counts.values():\n        probability = count / total\n        entropy -= probability * math.log2(probability)\n    return round(entropy, 4)"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Applies Layer Normalization to a 3D input tensor.\n\n    Parameters:\n    - X: np.ndarray of shape (batch_size, sequence_length, features)\n    - gamma: np.ndarray of shape (features,) (scale parameter)\n    - beta: np.ndarray of shape (features,) (shift parameter)\n    - epsilon: float, small value to avoid division by zero\n\n    Returns:\n    - np.ndarray of normalized X, rounded to 5 decimal places and converted to a list\n    \"\"\"\n    mean = np.mean(X, axis=2, keepdims=True)\n    var = np.var(X, axis=2, keepdims=True)\n    X_normalized = (X - mean) / np.sqrt(var + epsilon)\n    X_scaled_shifted = gamma * X_normalized + beta\n    gamma = gamma.reshape(1, 1, -1)\n    beta = beta.reshape(1, 1, -1)\n    return np.round(X_scaled_shifted, 5).tolist()"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    reference = reference.lower().split()\n    candidate = candidate.lower().split()\n    matches = sum((Counter(reference) & Counter(candidate)).values())\n    precision = matches / len(candidate) if len(candidate) > 0 else 0\n    recall = matches / len(reference) if len(reference) > 0 else 0\n    f_mean = precision * recall / (alpha * precision + (1 - alpha) * recall) if precision + recall > 0 else 0\n\n    def lcs(X, Y):\n        (m, n) = (len(X), len(Y))\n        dp = np.zeros((m + 1, n + 1), dtype=int)\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if X[i - 1] == Y[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[m][n]\n    lcs_length = lcs(reference, candidate)\n    if len(candidate) == 0:\n        frag_penalty = 0\n    else:\n        frag_penalty = 1 - lcs_length / len(candidate)\n    score = (1 - gamma * frag_penalty) * f_mean ** beta\n    return round(score, 3)"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    \"\"\"\n    Compute the Pointwise Mutual Information (PMI) between two events.\n\n    Parameters:\n    - joint_counts: int, the number of times both events occur together\n    - total_counts_x: int, the total occurrences of event x\n    - total_counts_y: int, the total occurrences of event y\n    - total_samples: int, the total number of samples\n\n    Returns:\n    - pmi: float, PMI value rounded to 3 decimal places\n    \"\"\"\n    epsilon = 1e-10\n    p_xy = (joint_counts + epsilon) / total_samples\n    p_x = (total_counts_x + epsilon) / total_samples\n    p_y = (total_counts_y + epsilon) / total_samples\n    pmi = np.log2(p_xy / (p_x * p_y))\n    return round(pmi, 3)"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    if not x:\n        return []\n    min_val = min(x)\n    max_val = max(x)\n    if min_val == max_val:\n        return [0.0 for _ in x]\n    return [round((val - min_val) / (max_val - min_val), 4) for val in x]"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    \"\"\"\n    A simple residual block with a shortcut connection.\n    \n    Parameters:\n    - x: Input 1D array (shape: [input_dim,])\n    - w1: First weight matrix (shape: [hidden_dim, input_dim])\n    - w2: Second weight matrix (shape: [input_dim, hidden_dim])\n    \n    Returns:\n    - Output after residual block and final ReLU, rounded to 4 decimal places.\n    \"\"\"\n    out = np.dot(w1, x)\n    out = np.maximum(0, out)\n    out = np.dot(w2, out)\n    out += x\n    out = np.maximum(0, out)\n    return np.round(out, 4).tolist()"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray):\n    \"\"\"\n    Perform Global Average Pooling on a 3D input array.\n\n    Parameters:\n    x (np.ndarray): Input array of shape (height, width, channels).\n\n    Returns:\n    np.ndarray: 1D array of shape (channels,) where each element is the average\n                of the corresponding feature map.\n    \"\"\"\n    if x.ndim != 3:\n        raise ValueError('Input must be a 3D NumPy array (height, width, channels).')\n    result = np.mean(x, axis=(0, 1))\n    return result"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Perform Batch Normalization on a 4D input tensor in BCHW format.\n\n    Parameters:\n    - X: Input tensor of shape (batch, channels, height, width)\n    - gamma: Scale parameters of shape (channels,)\n    - beta: Shift parameters of shape (channels,)\n    - epsilon: Small value for numerical stability\n\n    Returns:\n    - Output tensor after applying batch normalization and rounding to 4 decimal places\n    \"\"\"\n    (batch, channels, height, width) = X.shape\n    X_reshaped = X.transpose(1, 0, 2, 3).reshape(channels, -1).T\n    mean = np.mean(X_reshaped, axis=0)\n    var = np.var(X_reshaped, axis=0)\n    X_normalized = (X_reshaped - mean) / np.sqrt(var + epsilon)\n    X_scaled_shifted = gamma * X_normalized.T + beta\n    X_scaled_shifted = X_scaled_shifted.T.reshape(channels, batch, height, width).transpose(1, 0, 2, 3)\n    return np.round(X_scaled_shifted, 4).tolist()"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    derivative = c * n * x ** (n - 1)\n    return round(derivative, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10):\n    vectors = np.array(vectors)\n    (n, d) = vectors.shape\n    if d != 2:\n        raise ValueError('All vectors must be 2-dimensional.')\n    basis = []\n    for vector in vectors:\n        v = np.array(vector, dtype=float)\n        for u in basis:\n            v -= np.dot(v, u) * u\n        norm = np.linalg.norm(v)\n        if norm > tol:\n            u = v / norm\n            basis.append(u)\n    return [np.round(vec, 4).tolist() for vec in basis]\nvectors = [[1, 1], [1, 2], [2, 3]]\nbasis = orthonormal_basis(vectors)"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    result = np.cross(a, b)\n    return np.round(result, 4).tolist()"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    \"\"\"\n    Solve a system of linear equations Ax = b using Cramer's Rule.\n    \n    Parameters:\n        A (list of lists or np.ndarray): Square coefficient matrix.\n        b (list or np.ndarray): Constant vector.\n        \n    Returns:\n        list: Solution vector x rounded to 4 decimal places, or -1 if no unique solution.\n    \"\"\"\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    n = A.shape[0]\n    if A.shape[0] != A.shape[1] or len(b) != n:\n        return -1\n    det_A = np.linalg.det(A)\n    if np.isclose(det_A, 0):\n        return -1\n    x = []\n    for i in range(n):\n        A_i = A.copy()\n        A_i[:, i] = b\n        det_Ai = np.linalg.det(A_i)\n        x_i = det_Ai / det_A\n        x.append(round(x_i, 4))\n    return x"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    if not p or not q or len(p) != len(q):\n        return 0.0\n    p = np.array(p)\n    q = np.array(q)\n    if np.any(p < 0) or np.any(q < 0):\n        return 0.0\n    bc = np.sum(np.sqrt(p * q))\n    distance = -np.log(bc)\n    return round(distance, 4)\np = [0.1, 0.4, 0.5]\nq = [0.2, 0.3, 0.5]"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float]:\n    if len(a) != len(b):\n        return -1\n    return [x + y for (x, y) in zip(a, b)]"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Tuple\ndef compute_policy_gradient(theta: np.ndarray, episodes: List[List[Tuple[int, int, float]]]) -> List[float]:\n    (num_states, num_actions) = theta.shape\n    gradient = np.zeros_like(theta)\n    for episode in episodes:\n        returns = []\n        G = 0\n        for (_, _, reward) in reversed(episode):\n            G = reward + G\n            returns.append(G)\n        returns.reverse()\n        for ((state, action, _), return_val) in zip(episode, returns):\n            logits = theta[state, :]\n            exp_logits = np.exp(logits)\n            probs = exp_logits / np.sum(exp_logits)\n            d_log_pi = np.zeros(num_actions)\n            d_log_pi[action] = 1 - probs[action]\n            for a in range(num_actions):\n                if a != action:\n                    d_log_pi[a] = -probs[a]\n            gradient[state, :] += d_log_pi * return_val\n    avg_gradient = gradient / len(episodes)\n    return np.round(avg_gradient, 4).flatten().tolist()"}
{"task_id": 123, "completion_id": 0, "solution": "def compute_efficiency(n_experts, k_active, d_in, d_out):\n    flops_dense = 2 * d_in * d_out\n    flops_moe = 2 * k_active * (d_in * d_out) / n_experts\n    flops_savings = flops_dense - flops_moe\n    savings_percentage = flops_savings / flops_dense * 100\n    flops_dense = round(flops_dense, 1)\n    flops_moe = round(flops_moe, 1)\n    flops_savings = round(flops_savings, 1)\n    savings_percentage = round(savings_percentage, 1)\n    return {'dense_flops': flops_dense, 'moe_flops': flops_moe, 'flops_savings': flops_savings, 'savings_percentage': savings_percentage}"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    \"\"\"\n    Noisy Top-K Gating Function for Mixture-of-Experts (MoE).\n    \n    Parameters:\n    - X: Input matrix of shape (batch_size, input_dim)\n    - W_g: Gating weight matrix of shape (input_dim, num_experts)\n    - W_noise: Noise weight matrix of shape (input_dim, num_Experts)\n    - N: Pre-sampled noise matrix of shape (batch_size, num_Experts)\n    - k: Sparsity constraint (number of experts to activate per input)\n    \n    Returns:\n    - gates: Final top-k gating probabilities matrix of shape (batch_size, num_Experts)\n    \"\"\"\n    (batch_size, input_dim) = X.shape\n    (_, num_experts) = W_g.shape\n    logits = X @ W_g\n    noise_logits = X @ W_noise\n    noisy_logits = logits + noise_logits * N\n    noisy_gates = np.softmax(noisy_logits, axis=1)\n    (topk_values, topk_indices) = ([], [])\n    for i in range(batch_size):\n        values = noisy_gates[i]\n        topk_vals = np.partition(-values, k - 1)[:, np.newaxis]\n        topk_vals = -topk_vals[:k]\n        topk_indices.append(np.argsort(-values)[:, np.newaxis][:k])\n        topk_values.append(topk_vals)\n    topk_values = np.array(topk_values)\n    topk_indices = np.array(topk_indices)\n    threshold = np.repeat(topk_values[:, -1, np.newaxis], num_experts, axis=1)\n    gates = np.where(noisy_gates >= threshold, noisy_gates, 0)\n    gates /= np.sum(gates, axis=1, keepdims=True)\n    gates = np.round(gates, 4)\n    return gates.tolist()\nX = np.array([[1.0, 2.0], [3.0, 4.0]])\nW_g = np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]])\nW_noise = np.array([[0.01, 0.02, 0.03], [0.04, 0.05, 0.06]])\nN = np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]])\nk = 2"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    \"\"\"\n    Compute the output of a Mixture-of-Experts (MoE) layer using softmax gating and top-k routing.\n\n    Parameters:\n    - x (np.ndarray): Input tensor of shape (n_tokens, input_dim)\n    - We (np.ndarray): Expert weights of shape (n_experts, input_dim, output_dim)\n    - Wg (np.ndarray): Gating weights of shape (input_dim, n_experts)\n    - n_experts (int): Number of experts\n    - top_k (int): Number of top experts to select per token\n\n    Returns:\n    - List of final MoE outputs after aggregation and rounding to 4 decimal places.\n    \"\"\"\n    (n_tokens, input_dim) = x.shape\n    output_dim = We.shape[2]\n    gate_scores = x @ Wg\n    gate_probs = np.exp(gate_scores) / np.sum(np.exp(gate_scores), axis=1, keepdims=True)\n    top_k_indices = np.argsort(gate_probs, axis=1)[:, -top_k:]\n    output = np.zeros((n_tokens, output_dim))\n    for i in range(n_tokens):\n        token = x[i]\n        indices = top_k_indices[i]\n        probs = gate_probs[i, indices]\n        probs /= probs.sum()\n        expert_outputs = np.array([token @ We[j] for j in indices])\n        output[i] = (expert_outputs * probs[:, np.newaxis]).sum(axis=0)\n    return np.round(output, 4).tolist()"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    \"\"\"\n    Perform Group Normalization on a 4D input tensor.\n\n    Parameters:\n    - X: Input tensor of shape (B, C, H, W)\n    - gamma: Scale parameter of shape (C,)\n    - beta: Shift parameter of shape (C,)\n    - num_groups: Number of groups to divide the channels into\n    - epsilon: Small value to avoid division by zero\n\n    Returns:\n    - Normalized output as a Python list (rounded to 4 decimals)\n    \"\"\"\n    (B, C, H, W) = X.shape\n    assert C % num_groups == 0, 'Number of channels must be divisible by the number of groups.'\n    X_grouped = X.reshape(B, num_groups, C // num_groups, H, W)\n    mean = np.mean(X_grouped, axis=(2, 3, 4), keepdims=True)\n    var = np.var(X_grouped, axis=(2, 3, 4), keepdims=True)\n    X_normalized = (X_grouped - mean) / np.sqrt(var + epsilon)\n    X_normalized = X_normalized.reshape(B, C, H, W)\n    gamma = gamma.reshape(1, C, 1, 1)\n    beta = beta.reshape(1, C, 1, 1)\n    output = gamma * X_normalized + beta\n    return np.round(output, 4).tolist()"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n\n    def f(x):\n        return x ** 4 - 3 * x ** 3 + 2\n\n    def df(x):\n        return 4 * x ** 3 - 9 * x ** 2\n    x = start_x\n    for _ in range(max_iters):\n        gradient = df(x)\n        if abs(gradient) < tolerance:\n            break\n        x -= learning_rate * gradient\n    return round(x, 4)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    \"\"\"\n    Applies the Dynamic Tanh (DyT) transformation to the input array.\n    \n    Parameters:\n    - x: Input array (np.ndarray)\n    - alpha: Scaling factor\n    - gamma: Scaling parameter\n    - beta: Shifting parameter\n    \n    Returns:\n    - Output as a list of floats, rounded to 4 decimal places.\n    \"\"\"\n    mean = np.mean(x)\n    std = np.std(x, ddof=0)\n    normalized_x = (x - mean) / (std + 1e-08)\n    dyt_output = alpha * np.tanh(gamma * normalized_x + beta)\n    dyt_output_rounded = np.around(dyt_output, decimals=4)\n    return dyt_output_rounded.tolist()"}
