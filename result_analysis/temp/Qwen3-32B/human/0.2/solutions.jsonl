{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    if len(a[0]) != len(b):\n        return -1\n    result = []\n    for row in a:\n        dot_product = sum((x * y for (x, y) in zip(row, b)))\n        result.append(dot_product)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    return [list(row) for row in zip(*a)]"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    flat = [item for sublist in a for item in sublist]\n    if len(flat) != new_shape[0] * new_shape[1]:\n        return []\n    reshaped = np.array(flat).reshape(new_shape)\n    return reshaped.tolist()"}
{"task_id": 4, "completion_id": 0, "solution": "def calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    if mode == 'row':\n        return [sum(row) / len(row) for row in matrix]\n    elif mode == 'column':\n        transposed = list(zip(*matrix))\n        return [sum(col) / len(col) for col in transposed]\n    else:\n        raise ValueError(\"Mode must be 'row' or 'column'\")"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    \"\"\"\n    Multiplies a matrix by a scalar and returns the resulting matrix.\n    \n    Parameters:\n    matrix (list of list of int/float): The input matrix.\n    scalar (int/float): The scalar to multiply with the matrix.\n    \n    Returns:\n    list of list of int/float: The resulting matrix after scalar multiplication.\n    \"\"\"\n    return [[element * scalar for element in row] for row in matrix]"}
{"task_id": 6, "completion_id": 0, "solution": "def calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    \"\"\"\n    Calculate the eigenvalues of a 2x2 matrix and return them sorted from highest to lowest.\n    \n    Parameters:\n    matrix (list[list[float | int]]): A 2x2 matrix represented as a list of lists.\n    \n    Returns:\n    list[float]: A list of eigenvalues sorted in descending order.\n    \"\"\"\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    trace = a + d\n    determinant = a * d - b * c\n    discriminant = trace ** 2 - 4 * determinant\n    eigenvalue1 = (trace + discriminant ** 0.5) / 2\n    eigenvalue2 = (trace - discriminant ** 0.5) / 2\n    return sorted([eigenvalue1, eigenvalue2], reverse=True)"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    try:\n        A_np = np.array(A, dtype=float)\n        T_np = np.array(T, dtype=float)\n        S_np = np.array(S, dtype=float)\n        if T_np.shape[0] != T_np.shape[1] or S_np.shape[0] != S_np.shape[1]:\n            return -1\n        if np.isclose(np.linalg.det(T_np), 0) or np.isclose(np.linalg.det(S_np), 0):\n            return -1\n        result = np.linalg.inv(T_np) @ A_np @ S_np\n        return np.round(result, 4).tolist()\n    except np.linalg.LinAlgError:\n        return -1"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    determinant = a * d - b * c\n    if determinant == 0:\n        return None\n    inv = [[d / determinant, -b / determinant], [-c / determinant, a / determinant]]\n    return inv"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    if len(a[0]) != len(b):\n        return -1\n    result = [[0 for _ in range(len(b[0]))] for _ in range(len(a))]\n    for i in range(len(a)):\n        for j in range(len(b[0])):\n            for k in range(len(b)):\n                result[i][j] += a[i][k] * b[k][j]\n    return result\na = [[1, 2], [3, 4]]\nb = [[2, 0], [1, 2]]"}
{"task_id": 10, "completion_id": 0, "solution": "def calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    \"\"\"\n    Calculate the covariance matrix for a given list of feature vectors.\n    \n    Parameters:\n    vectors (list of list of float): A list where each inner list represents a feature with its observations.\n    \n    Returns:\n    list of list of float: The covariance matrix.\n    \"\"\"\n    n = len(vectors[0])\n    m = len(vectors)\n    means = [sum(feature) / n for feature in vectors]\n    covariance_matrix = [[0.0 for _ in range(m)] for _ in range(m)]\n    for i in range(m):\n        for j in range(m):\n            covariance = 0.0\n            for k in range(n):\n                covariance += (vectors[i][k] - means[i]) * (vectors[j][k] - means[j])\n            covariance /= n - 1\n            covariance_matrix[i][j] = covariance\n    return covariance_matrix"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    \"\"\"\n    Solves the system of linear equations Ax = b using the Jacobi method.\n    \n    Parameters:\n    - A: Coefficient matrix (n x n)\n    - b: Right-hand side vector (n x 1)\n    - n: Number of iterations\n    \n    Returns:\n    - x: Approximate solution vector as a list, rounded to 4 decimal places\n    \"\"\"\n    if A.shape[0] != A.shape[1]:\n        raise ValueError('Matrix A must be square.')\n    if A.shape[0] != b.shape[0]:\n        raise ValueError('Matrix A and vector b must have the same number of rows.')\n    x = np.zeros_like(b, dtype=np.float64)\n    D = np.diag(np.diag(A))\n    R = A - D\n    for _ in range(n):\n        x = np.round(np.linalg.inv(D) @ (b - R @ x), 4)\n    return x.tolist()"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    \"\"\"\n    Computes the singular values of a 2x2 matrix using the Jacobian method.\n    \n    Parameters:\n        A (np.ndarray): A 2x2 real matrix.\n    \n    Returns:\n        tuple: A tuple of two singular values, rounded to 4 decimal places.\n    \"\"\"\n    A_T_A = A.T @ A\n    (a, b) = (A_T_A[0, 0], A_T_A[0, 1])\n    (c, d) = (A_T_A[1, 0], A_T_A[1, 1])\n    max_iterations = 1000\n    tolerance = 1e-10\n    for _ in range(max_iterations):\n        if abs(b) < tolerance:\n            break\n        theta = 0.5 * np.arctan2(2 * b, a - d)\n        c_theta = np.cos(theta)\n        s_theta = np.sin(theta)\n        a_new = a * c_theta ** 2 - 2 * b * c_theta * s_theta + d * s_theta ** 2\n        d_new = a * s_theta ** 2 + 2 * b * c_theta * s_theta + d * c_theta ** 2\n        b_new = (a - d) * c_theta * s_theta + b * (c_theta ** 2 - s_theta ** 2)\n        (a, d, b) = (a_new, d_new, b_new)\n    sigma1 = np.sqrt(max(a, d))\n    sigma2 = np.sqrt(min(a, d))\n    return (round(sigma1, 4), round(sigma2, 4))"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n\n    def determinant_3x3(mat: list[list[int | float]]) -> float:\n        return mat[0][0] * (mat[1][1] * mat[2][2] - mat[1][2] * mat[2][1]) - mat[0][1] * (mat[1][0] * mat[2][2] - mat[1][2] * mat[2][0]) + mat[0][2] * (mat[1][0] * mat[2][1] - mat[1][1] * mat[2][0])\n    det = 0\n    for col in range(4):\n        minor = [row[:col] + row[col + 1:] for row in matrix[1:]]\n        sign = (-1) ** col\n        det += sign * matrix[0][col] * determinant_3x3(minor)\n    return det"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    X_np = np.array(X)\n    y_np = np.array(y)\n    X_T = X_np.T\n    theta = np.linalg.inv(X_T @ X_np) @ X_T @ y_np\n    theta_rounded = [round(val, 4) for val in theta]\n    return theta_rounded"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> np.ndarray:\n    m = len(y)\n    theta = np.zeros(X.shape[1])\n    for _ in range(iterations):\n        predictions = X @ theta\n        errors = predictions - y\n        gradient = 1 / m * X.T @ errors\n        theta -= alpha * gradient\n    theta_rounded = np.round(theta, 4)\n    return theta_rounded.tolist()"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    standardized = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    min_vals = np.min(data, axis=0)\n    max_vals = np.max(data, axis=0)\n    min_max_scaled = (data - min_vals) / (max_vals - min_vals)\n    standardized_list = np.round(standardized, 4).tolist()\n    min_max_scaled_list = np.round(min_max_scaled, 4).tolist()\n    return (standardized_list, min_max_scaled_list)"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Tuple\ndef k_means_clustering(points: List[Tuple[float, float]], k: int, initial_centroids: List[Tuple[float, float]], max_iterations: int) -> List[Tuple[float, float]]:\n    points = np.array(points)\n    centroids = np.array(initial_centroids)\n    for _ in range(max_iterations):\n        distances = np.sqrt(((points[:, np.newaxis, :] - centroids[np.newaxis, :, :]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([points[labels == i].mean(axis=0) for i in range(k)])\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    final_centroids = [tuple(np.round(centroid, 4)) for centroid in centroids]\n    return final_centroids\npoints = [(1.0, 2.0), (1.5, 1.8), (5.0, 8.0), (8.0, 8.0), (1.1, 1.0), (9.0, 11.0)]\nk = 2\ninitial_centroids = [(1.0, 2.0), (8.0, 8.0)]\nmax_iterations = 100"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    \"\"\"\n    Generate indices to split data into k folds for cross-validation.\n\n    Parameters:\n    - X (np.ndarray): Feature matrix of shape (n_samples, n_features)\n    - y (np.ndarray): Target vector of shape (n_samples,)\n    - k (int): Number of folds\n    - shuffle (bool): Whether to shuffle the data before splitting\n    - random_seed (int): Seed for random number generator\n\n    Returns:\n    - List of tuples: Each tuple contains (train_indices, test_indices)\n    \"\"\"\n    n_samples = X.shape[0]\n    indices = np.arange(n_samples)\n    if shuffle:\n        if random_seed is not None:\n            np.random.seed(random_seed)\n        np.random.shuffle(indices)\n    folds = []\n    fold_size = n_samples // k\n    remainder = n_samples % k\n    start = 0\n    for i in range(k):\n        fold_end = start + fold_size + (1 if i < remainder else 0)\n        test_indices = indices[start:fold_end]\n        train_indices = np.concatenate((indices[:start], indices[fold_end:]))\n        folds.append((train_indices, test_indices))\n        start = fold_end\n    return folds"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    mean = np.mean(data, axis=0)\n    standardized_data = data - mean\n    covariance_matrix = np.cov(standardized_data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eig(covariance_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    principal_components = sorted_eigenvectors[:, :k]\n    principal_components_rounded = np.round(principal_components, 4)\n    return principal_components_rounded.tolist()"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom typing import Dict, List, Any\nimport pprint\ndef entropy(class_counts: Dict[Any, int]) -> float:\n    \"\"\"Calculate the entropy of a set of class counts.\"\"\"\n    total = sum(class_counts.values())\n    if total == 0:\n        return 0.0\n    return -sum((count / total * math.log2(count / total) for count in class_counts.values()))\ndef information_gain(parent_entropy: float, subsets: List[tuple[float, Dict[Any, int]]]) -> float:\n    \"\"\"\n    Calculate the information gain from splitting into subsets.\n    Each subset is a tuple (weight, class_counts), where weight is the proportion of examples in the subset.\n    \"\"\"\n    return parent_entropy - sum((weight * entropy(class_counts) for (weight, class_counts) in subsets))\ndef most_common_class(examples: List[Dict[str, Any]], target_attr: str) -> Any:\n    \"\"\"Return the most common class in the examples.\"\"\"\n    return Counter((example[target_attr] for example in examples)).most_common(1)[0][0]\ndef split_examples(examples: List[Dict[str, Any]], attribute: str, value: Any) -> List[Dict[str, Any]]:\n    \"\"\"Return a list of examples where the attribute has the given value.\"\"\"\n    return [example for example in examples if example[attribute] == value]\ndef learn_decision_tree(examples: List[Dict[str, Any]], attributes: List[str], target_attr: str) -> Dict[str, Any]:\n    \"\"\"\n    Learn a decision tree from examples using entropy and information gain.\n    Returns a nested dictionary representing the decision tree.\n    \"\"\"\n    if not examples:\n        return most_common_class(examples, target_attr)\n    class_values = [example[target_attr] for example in examples]\n    if len(set(class_values)) == 1:\n        return {'class': class_values[0]}\n    if not attributes:\n        return {'class': most_common_class(examples, target_attr)}\n    best_attr = None\n    max_gain = -1.0\n    parent_entropy = entropy(Counter(class_values))\n    for attr in attributes:\n        if attr == target_attr:\n            continue\n        values = set((example[attr] for example in examples))\n        subsets = []\n        for value in values:\n            subset = split_examples(examples, attr, value)\n            class_counts = Counter((example[target_attr] for example in subset))\n            weight = len(subset) / len(examples)\n            subsets.append((weight, class_counts))\n        gain = information_gain(parent_entropy, subsets)\n        if gain > max_gain:\n            max_gain = gain\n            best_attr = attr\n    remaining_attributes = [attr for attr in attributes if attr != best_attr]\n    tree = {best_attr: {}}\n    for value in set((example[best_attr] for example in examples)):\n        subset = split_examples(examples, best_attr, value)\n        subtree = learn_decision_tree(subset, remaining_attributes, target_attr)\n        tree[best_attr][value] = subtree\n    return tree\nexamples = [{'Outlook': 'Sunny', 'Temperature': 'Hot', 'Humidity': 'High', 'Play': 'No'}, {'Outlook': 'Sunny', 'Temperature': 'Hot', 'Humidity': 'High', 'Play': 'No'}, {'Outlook': 'Overcast', 'Temperature': 'Hot', 'Humidity': 'High', 'Play': 'Yes'}, {'Outlook': 'Rain', 'Temperature': 'Mild', 'Humidity': 'High', 'Play': 'Yes'}, {'Outlook': 'Rain', 'Temperature': 'Cool', 'Humidity': 'Normal', 'Play': 'Yes'}, {'Outlook': 'Rain', 'Temperature': 'Cool', 'Humidity': 'Normal', 'Play': 'No'}, {'Outlook': 'Overcast', 'Temperature': 'Cool', 'Humidity': 'Normal', 'Play': 'Yes'}, {'Outlook': 'Sunny', 'Temperature': 'Mild', 'Humidity': 'High', 'Play': 'No'}, {'Outlook': 'Sunny', 'Temperature': 'Cool', 'Humidity': 'Normal', 'Play': 'Yes'}, {'Outlook': 'Rain', 'Temperature': 'Mild', 'Humidity': 'Normal', 'Play': 'Yes'}, {'Outlook': 'Sunny', 'Temperature': 'Mild', 'Humidity': 'Normal', 'Play': 'Yes'}, {'Outlook': 'Overcast', 'Temperature': 'Mild', 'Humidity': 'High', 'Play': 'Yes'}, {'Outlook': 'Overcast', 'Temperature': 'Hot', 'Humidity': 'Normal', 'Play': 'Yes'}, {'Outlook': 'Rain', 'Temperature': 'Mild', 'Humidity': 'High', 'Play': 'No'}]\nattributes = ['Outlook', 'Temperature', 'Humidity', 'Play']\ntarget_attr = 'Play'\ntree = learn_decision_tree(examples, attributes, target_attr)"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    \"\"\"\n    Deterministic Pegasos Kernel SVM implementation.\n    \n    Parameters:\n    - data: 2D NumPy array of shape (n_samples, n_features)\n    - labels: 1D NumPy array of shape (n_samples,)\n    - kernel: 'linear' or 'rbf'\n    - lambda_val: Regularization parameter\n    - iterations: Number of training iterations\n    - sigma: Kernel width for RBF kernel\n    \n    Returns:\n    - alphas: List of alpha coefficients (rounded to 4 decimals)\n    - bias: Bias term (rounded to 4 decimals)\n    \"\"\"\n    n_samples = data.shape[0]\n    alphas = np.zeros(n_samples)\n    bias = 0.0\n    for t in range(1, iterations + 1):\n        eta = 1.0 / (lambda_val * t)\n        K = np.zeros((n_samples, n_samples))\n        for i in range(n_samples):\n            for j in range(n_samples):\n                if kernel == 'linear':\n                    K[i, j] = np.dot(data[i], data[j])\n                elif kernel == 'rbf':\n                    K[i, j] = np.exp(-np.linalg.norm(data[i] - data[j]) ** 2 / (2 * sigma ** 2))\n        y_pred = np.dot(alphas * labels, K) + bias\n        grad = np.zeros(n_samples)\n        for i in range(n_samples):\n            if labels[i] * y_pred[i] < 1:\n                grad[i] = -labels[i] * K[:, i]\n            else:\n                grad[i] = 0\n        alphas = alphas - eta * (lambda_val * alphas + grad)\n        bias = bias - eta * (-labels * (labels * y_pred < 1)).sum()\n    alphas = np.clip(alphas, a_min=0, a_max=None)\n    return {'alphas': np.round(alphas, 4).tolist(), 'bias': round(bias, 4)}"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    \"\"\"\n    Computes the sigmoid activation function for a given input z.\n    \n    Parameters:\n    z (float): Input value\n    \n    Returns:\n    float: Sigmoid output rounded to four decimal places\n    \"\"\"\n    return round(1 / (1 + math.exp(-z)), 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    exp_scores = [math.exp(score) for score in scores]\n    sum_exp = sum(exp_scores)\n    softmax_values = [round(exp / sum_exp, 4) for exp in exp_scores]\n    return softmax_values"}
{"task_id": 24, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    \"\"\"\n    Simulates a single neuron with a sigmoid activation function for binary classification.\n    \n    Parameters:\n    - features: List of feature vectors (each vector is a list of floats)\n    - labels: List of true binary labels (0 or 1)\n    - weights: List of weights (one for each feature)\n    - bias: Bias term\n    \n    Returns:\n    - predicted_probabilities: List of predicted probabilities (after sigmoid activation)\n    - mean_squared_error: Mean squared error between predicted probabilities and true labels\n    \"\"\"\n    predicted_probabilities = []\n    features_array = np.array(features)\n    weights_array = np.array(weights)\n    linear_combination = np.dot(features_array, weights_array) + bias\n    for z in linear_combination:\n        probability = 1 / (1 + math.exp(-z))\n        predicted_probabilities.append(round(probability, 4))\n    predicted_probabilities_array = np.array(predicted_probabilities)\n    labels_array = np.array(labels)\n    mean_squared_error = np.mean((predicted_probabilities_array - labels_array) ** 2)\n    mean_squared_error = round(float(mean_squared_error), 4)\n    return (predicted_probabilities, mean_squared_error)"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    weights = initial_weights.copy()\n    bias = initial_bias\n    mse_history = []\n\n    def sigmoid(x):\n        return 1 / (1 + np.exp(-x))\n\n    def sigmoid_derivative(x):\n        return x * (1 - x)\n    for epoch in range(epochs):\n        linear_output = np.dot(features, weights) + bias\n        predictions = sigmoid(linear_output)\n        mse = np.mean((predictions - labels) ** 2)\n        mse_history.append(round(mse, 4))\n        error = predictions - labels\n        d_loss = error\n        d_pred = d_loss * sigmoid_derivative(predictions)\n        d_weights = np.dot(features.T, d_pred) / features.shape[0]\n        d_bias = np.mean(d_pred)\n        weights -= learning_rate * d_weights\n        bias -= learning_rate * d_bias\n    weights_rounded = np.round(weights, 4)\n    bias_rounded = round(bias, 4)\n    mse_history = [round(mse, 4) for mse in mse_history]\n    return (weights_rounded, bias_rounded, mse_history)"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data + other.data, _children=(self, other), _op='add')\n\n        def _backward():\n            self.grad += out.grad * 1\n            other.grad += out.grad * 1\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data * other.data, _children=(self, other), _op='mul')\n\n        def _backward():\n            self.grad += out.grad * other.data\n            other.grad += out.grad * self.data\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(self.data if self.data > 0 else 0, _children=(self,), _op='relu')\n\n        def _backward():\n            self.grad += out.grad * (1 if self.data > 0 else 0)\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1\n        for node in reversed(topo):\n            node._backward()\n\n    def __neg__(self):\n        return self * -1\n\n    def __radd__(self, other):\n        return self + other\n\n    def __sub__(self, other):\n        return self + -other\n\n    def __rsub__(self, other):\n        return other + -self\n\n    def __rmul__(self, other):\n        return self * other\n\n    def __truediv__(self, other):\n        return self * other ** (-1)\n\n    def __rtruediv__(self, other):\n        return other * self ** (-1)\n\n    def __pow__(self, other):\n        assert isinstance(other, (int, float)), 'Only int/float exponents are supported'\n        out = Value(self.data ** other, _children=(self,), _op=f'**{other}')\n\n        def _backward():\n            self.grad += out.grad * other * self.data ** (other - 1)\n        out._backward = _backward\n        return out\n\n    def __repr__(self):\n        return f'Value(data={self.data}, grad={self.grad})'"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    \"\"\"\n    Computes the transformation matrix P from basis B to basis C.\n    \n    Parameters:\n    B (list[list[int]]): A list of 3 basis vectors in basis B.\n    C (list[list[int]]): A list of 3 basis vectors in basis C.\n    \n    Returns:\n    list[list[float]]: The transformation matrix P from B to C, rounded to 4 decimal places.\n    \"\"\"\n    B_matrix = np.array(B, dtype=float)\n    C_matrix = np.array(C, dtype=float)\n    C_inv = np.linalg.inv(C_matrix)\n    P = np.dot(C_inv, B_matrix)\n    P_rounded = np.round(P, 4)\n    return P_rounded.tolist()"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    A_T_A = A.T @ A\n    (eigenvalues, eigenvectors) = np.linalg.eig(A_T_A)\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    singular_values = np.sqrt(eigenvalues)\n    V = eigenvectors\n    S = np.diag(singular_values)\n    U = np.zeros((2, 2))\n    for i in range(2):\n        if singular_values[i] > 1e-10:\n            U[:, i] = A @ V[:, i] / singular_values[i]\n        else:\n            U[:, i] = np.zeros(2)\n    U = np.round(U, 4)\n    S = np.round(S, 4)\n    V = np.round(V, 4)\n    return (U.tolist(), S.tolist(), V.tolist())"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    \"\"\"\n    Shuffles the samples in X and y while maintaining their correspondence.\n    \n    Parameters:\n    - X (np.ndarray): Features array.\n    - y (np.ndarray): Labels array.\n    - seed (int, optional): Seed for random number generator for reproducibility.\n    \n    Returns:\n    - X_shuffled (list): Shuffled features as a Python list.\n    - y_shuffled (list): Shuffled labels as a Python list.\n    \"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    if X.shape[0] != y.shape[0]:\n        raise ValueError('X and y must have the same number of samples.')\n    if seed is not None:\n        np.random.seed(seed)\n    indices = np.random.permutation(X.shape[0])\n    X_shuffled = X[indices]\n    y_shuffled = y[indices]\n    return (X_shuffled.tolist(), y_shuffled.tolist())"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    \"\"\"\n    Yields batches of data from the input arrays X and optionally y.\n    \n    Parameters:\n        X (np.ndarray): Input data array.\n        y (np.ndarray, optional): Target data array. Defaults to None.\n        batch_size (int): Number of samples per batch. Defaults to 64.\n    \n    Yields:\n        tuple or np.ndarray: Batches of (X_batch, y_batch) if y is provided, else X_batch.\n    \"\"\"\n    n_samples = X.shape[0]\n    for i in range(0, n_samples, batch_size):\n        batch_end = min(i + batch_size, n_samples)\n        X_batch = X[i:batch_end]\n        if y is not None:\n            y_batch = y[i:batch_end]\n            yield (X_batch.tolist(), y_batch.tolist())\n        else:\n            yield X_batch.tolist()"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    \"\"\"\n    Divides a dataset based on whether the value of a specified feature is greater than or equal to a given threshold.\n\n    Parameters:\n    - X: numpy.ndarray, the dataset (2D array).\n    - feature_i: int, the index of the feature to split on.\n    - threshold: float, the threshold value for splitting.\n\n    Returns:\n    - left: list, subset of samples where feature_i >= threshold.\n    - right: list, subset of samples where feature_i < threshold.\n    \"\"\"\n    feature_values = X[:, feature_i]\n    mask = feature_values >= threshold\n    left = X[mask].tolist()\n    right = X[~mask].tolist()\n    return (left, right)"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    (n_samples, n_features) = X.shape\n    features = []\n    for deg in range(1, degree + 1):\n        for combo in combinations_with_replacement(range(n_features), deg):\n            feature = np.prod(X[:, combo], axis=1)\n            features.append(feature)\n    return np.column_stack(features).tolist()\nX = np.array([[2, 3], [4, 5]])\ndegree = 2"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    \"\"\"\n    Generate random subsets of a dataset.\n\n    Parameters:\n    - X: 2D numpy array of shape (n_samples, n_features)\n    - y: 1D numpy array of shape (n_samples,)\n    - n_subsets: Number of subsets to generate\n    - replacements: If True, samples are selected with replacement; otherwise without replacement\n    - seed: Random seed for reproducibility\n\n    Returns:\n    - List of tuples, each tuple is (X_subset, y_subset)\n    \"\"\"\n    np.random.seed(seed)\n    n_samples = X.shape[0]\n    subsets = []\n    for _ in range(n_subsets):\n        if replacements:\n            indices = np.random.choice(n_samples, size=n_samples, replace=True)\n        else:\n            indices = np.random.permutation(n_samples)\n        X_subset = X[indices]\n        y_subset = y[indices]\n        subsets.append((X_subset, y_subset))\n    return [(X_sub.tolist(), y_sub.tolist()) for (X_sub, y_sub) in subsets]"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    \"\"\"\n    Perform one-hot encoding of a 1D numpy array of integer values.\n\n    Parameters:\n    x (np.ndarray): 1D array of integer values.\n    n_col (int, optional): Number of columns for the one-hot encoded array. \n                           If not provided, it is determined from the max value in x.\n\n    Returns:\n    list: One-hot encoded array as a Python list.\n    \"\"\"\n    x = np.array(x)\n    if n_col is None:\n        n_col = x.max() + 1\n    n_row = x.shape[0]\n    one_hot = np.zeros((n_row, n_col))\n    one_hot[np.arange(n_row), x] = 1\n    return one_hot.tolist()"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    \"\"\"\n    Converts a 1D numpy array into a diagonal matrix and returns it as a list.\n    \n    Parameters:\n    x (np.ndarray): A 1D numpy array.\n    \n    Returns:\n    list: A 2D list representing the diagonal matrix.\n    \"\"\"\n    diagonal_matrix = np.diag(x)\n    return diagonal_matrix.tolist()"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    \"\"\"\n    Calculate the accuracy score between true and predicted labels.\n    \n    Parameters:\n    y_true (np.ndarray): 1D array of true labels.\n    y_pred (np.ndarray): 1D array of predicted labels.\n    \n    Returns:\n    float: Accuracy score rounded to 4 decimal places.\n    \"\"\"\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Input arrays must have the same shape.')\n    correct = np.sum(y_true == y_pred)\n    total = len(y_true)\n    accuracy = correct / total\n    return round(accuracy, 4)"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    \"\"\"\n    Calculate the correlation matrix between X and Y (or X with itself if Y is None).\n    \n    Parameters:\n    X (np.ndarray): A 2D numpy array of shape (n_samples, n_features).\n    Y (np.ndarray, optional): A 2D numpy array of shape (n_samples, m_features). Defaults to None.\n    \n    Returns:\n    list: Correlation matrix as a 2D list, rounded to 4 decimal places.\n    \"\"\"\n    if Y is None:\n        Y = X\n    X_centered = X - np.mean(X, axis=0)\n    Y_centered = Y - np.mean(Y, axis=0)\n    std_X = np.std(X, axis=0, ddof=0)\n    std_Y = np.std(Y, axis=0, ddof=0)\n    std_X[std_X == 0] = 1.0\n    std_Y[std_Y == 0] = 1.0\n    X_normalized = X_centered / std_X\n    Y_normalized = Y_centered / std_Y\n    correlation_matrix = np.dot(X_normalized.T, Y_normalized) / X.shape[0]\n    return np.round(correlation_matrix, 4).tolist()"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_fit(X, y, n_clf):\n    (n_samples, n_features) = X.shape\n    D = np.ones(n_samples) / n_samples\n    classifiers = []\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_alpha = 0\n        best_rule = None\n        for feature_index in range(n_features):\n            feature_values = X[:, feature_index]\n            unique_values = np.unique(feature_values)\n            thresholds = (unique_values[:-1] + unique_values[1:]) / 2\n            for threshold in thresholds:\n                for direction in [1, -1]:\n                    predictions = np.where(X[:, feature_index] * direction >= threshold * direction, 1, -1)\n                    error = np.sum(D[y != predictions])\n                    if error > 0.5:\n                        error = 1 - error\n                        predictions = -predictions\n                    if error < best_error:\n                        best_error = error\n                        best_alpha = 0.5 * np.log((1 - error) / error)\n                        best_rule = (feature_index, threshold, direction)\n        classifiers.append({'feature_index': best_rule[0], 'threshold': best_rule[1], 'direction': best_rule[2], 'alpha': round(best_alpha, 4)})\n        predictions = np.where(X[:, best_rule[0]] * best_rule[2] >= best_rule[1] * best_rule[2], 1, -1)\n        D *= np.exp(-best_alpha * y * predictions)\n        D /= np.sum(D)\n    return classifiers"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list):\n    scores = np.array(scores, dtype=np.float64)\n    shifted_scores = scores - np.max(scores)\n    exp_scores = np.exp(shifted_scores)\n    log_sum_exp = np.log(np.sum(exp_scores))\n    log_softmax_values = shifted_scores - log_sum_exp\n    return np.round(log_softmax_values, 4).tolist()"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport copy\nimport math\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.optimizer = None\n        self.optimizer_w0 = None\n\n    def initialize(self, optimizer):\n        input_dim = self.input_shape[0]\n        limit = 1 / math.sqrt(input_dim)\n        self.W = np.random.uniform(-limit, limit, size=(input_dim, self.n_units))\n        self.w0 = np.zeros((1, self.n_units))\n        self.optimizer = copy.copy(optimizer)\n        self.optimizer_w0 = copy.copy(optimizer)\n\n    def parameters(self):\n        return self.W.size + self.w0.size\n\n    def forward_pass(self, X, training):\n        self.layer_input = X\n        output = np.dot(X, self.W) + self.w0\n        return output\n\n    def backward_pass(self, accum_grad):\n        X = self.layer_input\n        grad_W = np.dot(X.T, accum_grad)\n        grad_w0 = np.sum(accum_grad, axis=0, keepdims=True)\n        grad_input = np.dot(accum_grad, self.W.T)\n        if self.trainable:\n            self.W = self.optimizer.update(self.W, grad_W)\n            self.w0 = self.optimizer_w0.update(self.w0, grad_w0)\n        return grad_input\n\n    def output_shape(self):\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    \"\"\"\n    Perform a 2D convolution on the input matrix using the given kernel, padding, and stride.\n\n    Parameters:\n    - input_matrix (np.ndarray): Input 2D matrix (image).\n    - kernel (np.ndarray): Convolution kernel (filter).\n    - padding (int): Number of zero-padding layers to add around the input.\n    - stride (int): Step size for moving the kernel over the input.\n\n    Returns:\n    - output (list): Resulting 2D matrix after convolution, rounded to 4 decimal places.\n    \"\"\"\n    (in_height, in_width) = input_matrix.shape\n    (k_height, k_width) = kernel.shape\n    padded_input = np.pad(input_matrix, ((padding, padding), (padding, padding)), mode='constant')\n    out_height = (in_height + 2 * padding - k_height) // stride + 1\n    out_width = (in_width + 2 * padding - k_width) // stride + 1\n    output = np.zeros((out_height, out_width))\n    for i in range(out_height):\n        for j in range(out_width):\n            start_i = i * stride\n            start_j = j * stride\n            region = padded_input[start_i:start_i + k_height, start_j:start_j + k_width]\n            output[i, j] = np.sum(region * kernel)\n    output = np.round(output, 4)\n    return output.tolist()"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    return max(0, z)"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    \"\"\"\n    Compute the Ridge Regression loss function.\n\n    Parameters:\n    - X: 2D numpy array of shape (n_samples, n_features) representing the feature matrix.\n    - w: 1D numpy array of shape (n_features,) representing the coefficients.\n    - y_true: 1D numpy array of shape (n_samples,) representing the true labels.\n    - alpha: float, the regularization parameter.\n\n    Returns:\n    - float: The Ridge loss rounded to 4 decimal places.\n    \"\"\"\n    y_pred = X @ w\n    mse = np.mean((y_true - y_pred) ** 2)\n    regularization = alpha * np.sum(w ** 2)\n    loss = mse + regularization\n    return round(loss, 4)\nX = np.array([[1, 2], [3, 4], [5, 6]])\nw = np.array([0.5, -0.5])\ny_true = np.array([1, 2, 3])\nalpha = 0.1\nloss = ridge_loss(X, w, y_true, alpha)"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float:\n    \"\"\"\n    Applies the Leaky ReLU activation function.\n\n    Parameters:\n    z (float): Input value.\n    alpha (float): Slope for negative inputs. Default is 0.01.\n\n    Returns:\n    float: Output after applying Leaky ReLU.\n    \"\"\"\n    return z if z > 0 else alpha * z"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    \"\"\"\n    Compute the linear kernel (dot product) between two vectors x1 and x2.\n    \n    Parameters:\n    x1 (array-like): First input vector.\n    x2 (array-like): Second input vector.\n    \n    Returns:\n    float: The dot product of x1 and x2.\n    \"\"\"\n    return np.dot(x1, x2)"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    \"\"\"\n    Calculate the precision metric for binary classification.\n    \n    Parameters:\n    y_true (np.ndarray): True binary labels (0 or 1).\n    y_pred (np.ndarray): Predicted binary labels (0 or 1).\n    \n    Returns:\n    float: Precision score.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    true_positives = np.sum((y_true == 1) & (y_pred == 1))\n    false_positives = np.sum((y_true == 0) & (y_pred == 1))\n    if true_positives + false_positives == 0:\n        return 0.0\n    return true_positives / (true_positives + false_positives)"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    \"\"\"\n    Perform gradient descent optimization using the specified method.\n    \n    Parameters:\n    - X: numpy array of shape (n_samples, n_features)\n    - y: numpy array of shape (n_samples,)\n    - weights: numpy array of shape (n_features,)\n    - learning_rate: float\n    - n_iterations: int\n    - batch_size: int (default=1)\n    - method: str, one of 'batch', 'stochastic', 'mini-batch' (default='batch')\n    \n    Returns:\n    - weights: numpy array of optimized weights\n    - loss_history: list of MSE loss values at each iteration\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    loss_history = []\n    for _ in range(n_iterations):\n        if method == 'batch':\n            indices = np.arange(n_samples)\n        elif method == 'stochastic':\n            indices = np.random.choice(n_samples, size=1, replace=False)\n        elif method == 'mini-batch':\n            indices = np.random.choice(n_samples, size=batch_size, replace=False)\n        else:\n            raise ValueError(\"Method must be 'batch', 'stochastic', or 'mini-batch'\")\n        X_batch = X[indices]\n        y_batch = y[indices]\n        y_pred = X_batch @ weights\n        error = y_pred - y_batch\n        gradient = 2 / len(indices) * X_batch.T @ error\n        weights -= learning_rate * gradient\n        y_pred_full = X @ weights\n        loss = np.mean((y_pred_full - y) ** 2)\n        loss_history.append(round(loss, 4))\n    weights = np.round(weights, 4).tolist()\n    loss_history = [round(loss, 4) for loss in loss_history]\n    return (weights, loss_history)"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    \"\"\"\n    Convert a matrix to its Reduced Row Echelon Form (RREF).\n    \n    Parameters:\n    matrix (list of lists or np.ndarray): The input matrix.\n    \n    Returns:\n    list: The RREF of the matrix as a Python list.\n    \"\"\"\n    matrix = np.array(matrix, dtype=float)\n    (rows, cols) = matrix.shape\n    lead = 0\n    for r in range(rows):\n        if lead >= cols:\n            return matrix.tolist()\n        i = r\n        while matrix[i, lead] == 0:\n            i += 1\n            if i == rows:\n                i = r\n                lead += 1\n                if lead == cols:\n                    return matrix.tolist()\n        matrix[[i, r]] = matrix[[r, i]]\n        matrix[r] = matrix[r] / matrix[r, lead]\n        for i in range(rows):\n            if i != r and matrix[i, lead] != 0:\n                matrix[i] = matrix[i] - matrix[i, lead] * matrix[r]\n        lead += 1\n    return matrix.tolist()"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=10):\n    \"\"\"\n    Implements the Adam optimization algorithm to minimize a given function.\n    \n    Parameters:\n    - f: Objective function to be optimized\n    - grad: Function that computes the gradient of f\n    - x0: Initial parameter values (numpy array)\n    - learning_rate: Step size (default: 0.001)\n    - beta1: Exponential decay rate for the first moment estimates (default: 0.9)\n    - beta2: Exponential decay rate for the second moment estimates (default: 0.999)\n    - epsilon: Small constant for numerical stability (default: 1e-8)\n    - num_iterations: Number of iterations to run the optimizer (default: 10)\n    \n    Returns:\n    - Optimized parameters as a list (rounded to 4 decimal places)\n    \"\"\"\n    x = np.array(x0, dtype=np.float64)\n    m = np.zeros_like(x)\n    v = np.zeros_like(x)\n    t = 0\n    for _ in range(num_iterations):\n        t += 1\n        grad_x = grad(x)\n        m = beta1 * m + (1 - beta1) * grad_x\n        v = beta2 * v + (1 - beta2) * grad_x ** 2\n        m_hat = m / (1 - beta1 ** t)\n        v_hat = v / (1 - beta2 ** t)\n        x = x - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    return np.round(x, 4).tolist()"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    \"\"\"\n    Perform Lasso Regression using Gradient Descent with L1 regularization.\n\n    Parameters:\n    - X: np.array, shape (n_samples, n_features)\n    - y: np.array, shape (n_samples,)\n    - alpha: float, regularization parameter\n    - learning_rate: float, step size for gradient descent\n    - max_iter: int, maximum number of iterations\n    - tol: float, tolerance for stopping condition\n\n    Returns:\n    - w: np.array, shape (n_features,), optimized weights\n    - b: float, optimized bias\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    w = np.zeros(n_features)\n    b = 0.0\n    for _ in range(max_iter):\n        y_pred = np.dot(X, w) + b\n        dw = -1 / n_samples * np.dot(X.T, y - y_pred) + alpha / n_samples * np.sign(w)\n        db = -1 / n_samples * np.sum(y - y_pred)\n        w_new = w - learning_rate * dw\n        b_new = b - learning_rate * db\n        if np.linalg.norm(w_new - w) < tol and abs(b_new - b) < tol:\n            break\n        w = w_new\n        b = b_new\n    w = np.round(w, 4)\n    b = round(b, 4)\n    return (w.tolist(), b)\nX = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\ny = np.array([2, 3, 4, 5])"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    m = len(source)\n    n = len(target)\n    dp = np.zeros((m + 1, n + 1), dtype=int)\n    for i in range(m + 1):\n        dp[i][0] = i\n    for j in range(n + 1):\n        dp[0][j] = j\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if source[i - 1] == target[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1])\n                if i > 1 and j > 1 and (source[i - 2] == target[j - 1]) and (source[i - 1] == target[j - 2]):\n                    dp[i][j] = min(dp[i][j], dp[i - 2][j - 2] + 1)\n    return dp[m][n]"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    \"\"\"\n    Calculate the recall metric for binary classification.\n    \n    Parameters:\n    - y_true: List of true binary labels (0 or 1)\n    - y_pred: List of predicted binary labels (0 or 1)\n    \n    Returns:\n    - Recall value rounded to three decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    true_positives = np.sum((y_true == 1) & (y_pred == 1))\n    false_negatives = np.sum((y_true == 1) & (y_pred == 0))\n    denominator = true_positives + false_negatives\n    if denominator == 0:\n        return 0.0\n    else:\n        return round(true_positives / denominator, 3)"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    \"\"\"\n    Computes the self-attention mechanism.\n    \n    Parameters:\n    - X: Input matrix of shape (seq_len, d_model)\n    - W_q: Query weight matrix of shape (d_model, d_k)\n    - W_k: Key weight matrix of shape (d_model, d_k)\n    - W_v: Value weight matrix of shape (d_model, d_v)\n    \n    Returns:\n    - Attention output as a Python list (after rounding and reshaping)\n    \"\"\"\n    Q = X @ W_q\n    K = X @ W_k\n    V = X @ W_v\n    scores = Q @ K.T\n    exp_scores = np.exp(scores)\n    attention_weights = exp_scores / exp_scores.sum(axis=1, keepdims=True)\n    output = attention_weights @ V\n    output_rounded = np.round(output, 4)\n    return output_rounded.tolist()"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    \"\"\"\n    Implements a simple RNN forward pass over a sequence of input vectors.\n    \n    Parameters:\n    - input_sequence: List of input vectors (each is a list of floats)\n    - initial_hidden_state: Initial hidden state (list of floats)\n    - Wx: Weight matrix for input-to-hidden connections\n    - Wh: Weight matrix for hidden-to-hidden connections\n    - b: Bias vector\n    \n    Returns:\n    - final_hidden_state: Final hidden state after processing the entire sequence (rounded to 4 decimals)\n    \"\"\"\n    h_prev = np.array(initial_hidden_state)\n    for x in input_sequence:\n        x_t = np.array(x)\n        h_prev = np.tanh(np.dot(Wx, x_t) + np.dot(Wh, h_prev) + np.array(b))\n    return np.round(h_prev, 4).tolist()"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    \"\"\"\n    Applies a 2D translation to a list of [x, y] points.\n    \n    Parameters:\n        points (list of lists): List of [x, y] coordinates.\n        tx (float): Translation in x-direction.\n        ty (float): Translation in y-direction.\n        \n    Returns:\n        list of lists: Translated points as a Python list.\n    \"\"\"\n    points_array = np.array(points, dtype=np.float64)\n    translation = np.array([tx, ty], dtype=np.float64)\n    translated_array = points_array + translation\n    return translated_array.tolist()"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    Compute the KL divergence between two univariate normal distributions.\n    \n    Parameters:\n    mu_p (float): Mean of distribution P\n    sigma_p (float): Standard deviation of distribution P\n    mu_q (float): Mean of distribution Q\n    sigma_q (float): Standard deviation of distribution Q\n    \n    Returns:\n    float: KL divergence D_KL(P || Q)\n    \"\"\"\n    return np.log(sigma_q / sigma_p) + (sigma_p ** 2 + (mu_p - mu_q) ** 2) / (2 * sigma_q ** 2) - 0.5"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    \"\"\"\n    Solves the linear system Ax = b using the Gauss-Seidel iterative method.\n    \n    Parameters:\n    - A: Square matrix of coefficients (numpy array)\n    - b: Right-hand side vector (numpy array)\n    - n: Number of iterations\n    - x_ini: Optional initial guess for x (default is zero vector)\n    \n    Returns:\n    - x: Approximated solution vector after n iterations (rounded to 4 decimals)\n    \"\"\"\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    m = len(b)\n    if x_ini is None:\n        x = np.zeros(m)\n    else:\n        x = np.array(x_ini, dtype=float)\n    for _ in range(n):\n        for i in range(m):\n            s1 = np.dot(A[i, :i], x[:i])\n            s2 = np.dot(A[i, i + 1:], x[i + 1:])\n            x[i] = (b[i] - s1 - s2) / A[i, i]\n    return np.round(x, 4).tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    \"\"\"\n    Solves the system of linear equations Ax = b using Gaussian Elimination with partial pivoting.\n    \n    Parameters:\n    A (list of lists or np.ndarray): Coefficient matrix.\n    b (list or np.ndarray): Right-hand side vector.\n    \n    Returns:\n    list: Solution vector x, rounded to 4 decimal places.\n    \"\"\"\n    n = len(b)\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    for i in range(n):\n        max_row = i + np.argmax(np.abs(A[i:, i]))\n        if A[max_row, i] == 0:\n            raise ValueError('Matrix is singular or nearly singular.')\n        A[[i, max_row]] = A[[max_row, i]]\n        b[[i, max_row]] = b[[max_row, i]]\n        for j in range(i + 1, n):\n            factor = A[j, i] / A[i, i]\n            A[j, i:] = A[j, i:] - factor * A[i, i:]\n            b[j] = b[j] - factor * b[i]\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        x[i] = (b[i] - np.dot(A[i, i + 1:], x[i + 1:])) / A[i, i]\n    return np.round(x, 4).tolist()"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \"\"\"\n        h = [initial_hidden_state]\n        c = [initial_cell_state]\n        for t in range(x.shape[1]):\n            xt = x[:, t].reshape(-1, 1)\n            concat = np.concatenate((xt, h[-1]), axis=0)\n            ft = self.sigmoid(np.dot(self.Wf, concat) + self.bf)\n            it = self.sigmoid(np.dot(self.Wi, concat) + self.bi)\n            cct = np.tanh(np.dot(self.Wc, concat) + self.bc)\n            ot = self.sigmoid(np.dot(self.Wo, concat) + self.bo)\n            ct = ft * c[-1] + it * cct\n            ht = ot * np.tanh(ct)\n            c.append(ct)\n            h.append(ht)\n        h = [np.round(ht, 4).tolist() for ht in h]\n        final_hidden_state = np.round(h[-1], 4).tolist()\n        final_cell_state = np.round(c[-1], 4).tolist()\n        return (h, final_hidden_state, final_cell_state)\n\n    def sigmoid(self, x):\n        \"\"\"Sigmoid activation function\"\"\"\n        return 1 / (1 + np.exp(-x))"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\ndef compute_tf_idf(corpus, query):\n    if not corpus:\n        raise ValueError('The corpus is empty. Cannot compute TF-IDF.')\n    vocabulary = set((word for doc in corpus for word in doc))\n    query_words = set(query)\n    valid_query_words = [word for word in query if word in vocabulary]\n    if not valid_query_words:\n        return [[0.0 for _ in query]] * len(corpus)\n    tf = np.zeros((len(corpus), len(valid_query_words)))\n    idf = np.zeros(len(valid_query_words))\n    df = np.zeros(len(valid_query_words))\n    for (i, word) in enumerate(valid_query_words):\n        count = 0\n        for doc in corpus:\n            if word in doc:\n                count += 1\n        df[i] = count\n    num_docs = len(corpus)\n    for i in range(len(valid_query_words)):\n        idf[i] = np.log((num_docs + 1) / (df[i] + 1) + 1e-08)\n    for (doc_idx, doc) in enumerate(corpus):\n        for (word_idx, word) in enumerate(valid_query_words):\n            tf_count = doc.count(word)\n            tf_total = len(doc) if len(doc) > 0 else 1\n            tf[doc_idx, word_idx] = tf_count / tf_total\n    tf_idf = tf * idf\n    tf_idf_rounded = np.round(tf_idf, 4)\n    return tf_idf_rounded.tolist()"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    tp = np.sum(np.logical_and(y_true == 1, y_pred == 1))\n    fp = np.sum(np.logical_and(y_true == 0, y_pred == 1))\n    fn = np.sum(np.logical_and(y_true == 1, y_pred == 0))\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0\n    f_score = (1 + beta ** 2) * precision * recall / (beta ** 2 * precision + recall) if beta ** 2 * precision + recall > 0 else 0\n    return round(f_score, 3)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, x):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n        \n        Args:\n            x: Input sequence of shape (input_size, sequence_length)\n            \n        Returns:\n            outputs: Outputs at each time step of shape (output_size, sequence_length)\n            hiddens: Hidden states at each time step of shape (hidden_size, sequence_length)\n            inputs: Input sequence of shape (input_size, sequence_length)\n        \"\"\"\n        sequence_length = x.shape[1]\n        h = np.zeros((self.hidden_size, 1))\n        outputs = np.zeros((self.W_hy.shape[0], sequence_length))\n        hiddens = np.zeros((self.hidden_size, sequence_length))\n        for t in range(sequence_length):\n            h = np.tanh(self.W_xh @ x[:, t].reshape(-1, 1) + self.W_hh @ h + self.b_h)\n            y = self.W_hy @ h + self.b_y\n            outputs[:, t] = y.flatten()\n            hiddens[:, t] = h.flatten()\n        return (outputs, hiddens, x)\n\n    def backward(self, x, y, outputs, hiddens, learning_rate):\n        \"\"\"\n        Backward pass through the RNN using BPTT.\n        \n        Args:\n            x: Input sequence of shape (input_size, sequence_length)\n            y: Expected output sequence of shape (output_size, sequence_length)\n            outputs: Outputs from the forward pass of shape (output_size, sequence_length)\n            hiddens: Hidden states from the forward pass of shape (hidden_size, sequence_length)\n            learning_rate: Learning rate for gradient descent\n            \n        Returns:\n            loss: Total loss across all time steps\n        \"\"\"\n        sequence_length = x.shape[1]\n        output_size = y.shape[0]\n        dW_xh = np.zeros_like(self.W_xh)\n        dW_hh = np.zeros_like(self.W_hh)\n        dW_hy = np.zeros_like(self.W_hy)\n        db_h = np.zeros_like(self.b_h)\n        db_y = np.zeros_like(self.b_y)\n        dh_next = np.zeros_like(hiddens[:, 0])\n        loss = 0\n        for t in reversed(range(sequence_length)):\n            dy = outputs[:, t] - y[:, t]\n            loss += 0.5 * np.sum(dy ** 2)\n            dW_hy += dy.reshape(-1, 1) @ hiddens[:, t].reshape(1, -1)\n            db_y += dy.reshape(-1, 1)\n            dh = self.W_hy.T @ dy.reshape(-1, 1) + dh_next\n            dh_raw = (1 - hiddens[:, t].reshape(-1, 1) ** 2) * dh\n            db_h += dh_raw\n            dW_xh += dh_raw @ x[:, t].reshape(1, -1)\n            dW_hh += dh_raw @ hiddens[:, t].reshape(1, -1)\n            dh_next = self.W_hh.T @ dh_raw\n        self.W_xh -= learning_rate * dW_xh\n        self.W_hh -= learning_rate * dW_hh\n        self.W_hy -= learning_rate * dW_hy\n        self.b_h -= learning_rate * db_h\n        self.b_y -= learning_rate * db_y\n        return loss\n\n    def train(self, input_sequence, expected_output, learning_rate=0.01):\n        \"\"\"\n        Train the RNN on a sequence.\n        \n        Args:\n            input_sequence: Input sequence of shape (input_size, sequence_length)\n            expected_output: Expected output sequence of shape (output_size, sequence_length)\n            learning_rate: Learning rate for gradient descent\n            \n        Returns:\n            loss: Total loss for this training step\n        \"\"\"\n        (outputs, hiddens, inputs) = self.forward(input_sequence)\n        loss = self.backward(input_sequence, expected_output, outputs, hiddens, learning_rate)\n        return loss"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x (rounded to 8 decimal places and converted to list)\n    \"\"\"\n    A = np.array(A)\n    b = np.array(b)\n    if x0 is None:\n        x = np.zeros_like(b)\n    else:\n        x = np.array(x0)\n    r = b - A @ x\n    p = r.copy()\n    rs_old = r @ r\n    for i in range(n):\n        Ap = A @ p\n        alpha = rs_old / (p @ Ap)\n        x = x + alpha * p\n        r = r - alpha * Ap\n        rs_new = r @ r\n        if np.sqrt(rs_new) < tol:\n            break\n        beta = rs_new / rs_old\n        p = r + beta * p\n        rs_old = rs_new\n    return np.round(x, 8).tolist()\nA = np.array([[4, 1], [1, 3]])\nb = np.array([1, 2])\nx = conjugate_gradient(A, b, n=100)"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    if not y:\n        return 0.0\n    total_samples = len(y)\n    class_counts = Counter(y)\n    probabilities = [count / total_samples for count in class_counts.values()]\n    gini = 1.0 - sum((p ** 2 for p in probabilities))\n    return round(gini, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    values = []\n    column_indices = []\n    row_pointer = [0]\n    for row in dense_matrix:\n        count = 0\n        for (col_index, value) in enumerate(row):\n            if value != 0:\n                values.append(value)\n                column_indices.append(col_index)\n                count += 1\n        row_pointer.append(row_pointer[-1] + count)\n    return (values, column_indices, row_pointer)"}
{"task_id": 66, "completion_id": 0, "solution": "def orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    import numpy as np\n    v_array = np.array(v)\n    L_array = np.array(L)\n    dot_vL = np.dot(v_array, L_array)\n    dot_LL = np.dot(L_array, L_array)\n    if dot_LL == 0:\n        raise ValueError('The line vector L cannot be the zero vector.')\n    scalar_proj = dot_vL / dot_LL\n    proj_vector = scalar_proj * L_array\n    return [round(x, 3) for x in proj_vector.tolist()]"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    if not dense_matrix or not dense_matrix[0]:\n        return ([], [], [0])\n    num_rows = len(dense_matrix)\n    num_cols = len(dense_matrix[0])\n    values = []\n    row_indices = []\n    col_ptr = [0]\n    for col in range(num_cols):\n        for row in range(num_rows):\n            val = dense_matrix[row][col]\n            if val != 0:\n                values.append(val)\n                row_indices.append(row)\n        col_ptr.append(len(values))\n    return (values, row_indices, col_ptr)"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    \"\"\"\n    Compute the column space (image) of a matrix A.\n    \n    Parameters:\n    A (np.ndarray): A 2D NumPy array representing the matrix.\n    \n    Returns:\n    list: A list of column vectors (as lists) that form a basis for the column space of A.\n    \"\"\"\n    A = np.array(A, dtype=float)\n    (rref, pivots) = np.linalg.qr(A, mode='reduced')\n    independent_columns = A[:, pivots != 0]\n    return np.round(independent_columns, 8).tolist()"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    mean_y_true = np.mean(y_true)\n    sst = np.sum((y_true - mean_y_true) ** 2)\n    ssr = np.sum((y_pred - y_true) ** 2)\n    r2 = 1 - ssr / sst\n    return round(r2, 3)"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    if not img or not img[0]:\n        return -1\n    rows = len(img)\n    cols = len(img[0])\n    for row in img:\n        if len(row) != cols:\n            return -1\n    total_brightness = 0\n    total_pixels = 0\n    for row in img:\n        for pixel in row:\n            if not 0 <= pixel <= 255:\n                return -1\n            total_brightness += pixel\n            total_pixels += 1\n    average_brightness = total_brightness / total_pixels\n    return round(average_brightness, 2)"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    \"\"\"\n    Calculate the Root Mean Square Error (RMSE) between y_true and y_pred.\n    \n    Parameters:\n    y_true (array-like): Ground truth (correct) target values.\n    y_pred (array-like): Estimated target values.\n    \n    Returns:\n    float: RMSE value rounded to three decimal places.\n    \n    Raises:\n    ValueError: If input arrays are not of the same length or are empty.\n    TypeError: If inputs are not array-like or cannot be converted to NumPy arrays.\n    \"\"\"\n    try:\n        y_true = np.asarray(y_true)\n        y_pred = np.asarray(y_pred)\n    except Exception as e:\n        raise TypeError('Input values must be array-like and convertible to NumPy arrays.') from e\n    if y_true.size == 0 or y_pred.size == 0:\n        raise ValueError('Input arrays cannot be empty.')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Input arrays must have the same shape.')\n    squared_errors = (y_true - y_pred) ** 2\n    mean_squared_error = np.mean(squared_errors)\n    root_mean_squared_error = np.sqrt(mean_squared_error)\n    return round(root_mean_squared_error, 3)"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    \"\"\"\n    Calculate the Jaccard Index between two binary arrays.\n    \n    Parameters:\n    y_true (array-like): Ground truth (correct) binary labels.\n    y_pred (array-like): Predicted binary labels.\n    \n    Returns:\n    float: Jaccard Index rounded to three decimal places.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    intersection = np.sum(np.logical_and(y_true, y_pred))\n    union = np.sum(np.logical_or(y_true, y_pred))\n    if union == 0:\n        return 0.0\n    jaccard = intersection / union\n    return round(jaccard, 3)"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    \"\"\"\n    Calculate the Dice Score (S\u00f8rensen-Dice coefficient) between two binary arrays.\n    \n    Parameters:\n    y_true (array-like): Ground truth (correct) labels.\n    y_pred (array-like): Predicted labels.\n    \n    Returns:\n    float: Dice Score rounded to 3 decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    intersection = np.sum(np.logical_and(y_true, y_pred))\n    sum_true_pred = np.sum(y_true) + np.sum(y_pred)\n    if sum_true_pred == 0:\n        return 1.0\n    dice = 2.0 * intersection / sum_true_pred\n    return round(dice, 3)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef create_row_hv(row, dim, random_seeds):\n    \"\"\"\n    Generate a composite hypervector for a dataset row using Hyperdimensional Computing (HDC).\n    \n    Parameters:\n    - row (dict): A dictionary representing a dataset row.\n    - dim (int): The dimensionality of the hypervectors.\n    - random_seeds (dict): A dictionary of seeds for reproducibility.\n    \n    Returns:\n    - list: Composite hypervector representing the entire row.\n    \"\"\"\n    composite_hv = np.zeros(dim)\n    for (feature_name, feature_value) in row.items():\n        seed = random_seeds.get(feature_name, 0)\n        np.random.seed(seed)\n        value_hv = np.random.choice([-1, 1], size=dim)\n        np.random.seed(hash(feature_name) % 2 ** 32)\n        name_hv = np.random.choice([-1, 1], size=dim)\n        bound_hv = name_hv * value_hv\n        composite_hv += bound_hv\n    composite_hv = np.sign(composite_hv)\n    return composite_hv.tolist()"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    \"\"\"\n    Generate a 2x2 confusion matrix for binary classification.\n    \n    Parameters:\n        data (list of lists): Each inner list is [y_true, y_pred]\n        \n    Returns:\n        list of lists: A 2x2 confusion matrix in the format:\n                       [[TN, FP],\n                        [FN, TP]]\n    \"\"\"\n    matrix = [[0, 0], [0, 0]]\n    for (y_true, y_pred) in data:\n        if y_true == 0 and y_pred == 0:\n            matrix[0][0] += 1\n        elif y_true == 0 and y_pred == 1:\n            matrix[0][1] += 1\n        elif y_true == 1 and y_pred == 0:\n            matrix[1][0] += 1\n        elif y_true == 1 and y_pred == 1:\n            matrix[1][1] += 1\n    return matrix"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    if v1.shape != v2.shape:\n        raise ValueError('Input vectors must have the same shape.')\n    if v1.size == 0 or v2.size == 0:\n        raise ValueError('Input vectors cannot be empty.')\n    dot_product = np.dot(v1, v2)\n    magnitude_v1 = np.linalg.norm(v1)\n    magnitude_v2 = np.linalg.norm(v2)\n    if magnitude_v1 == 0 or magnitude_v2 == 0:\n        raise ValueError('Input vectors cannot have zero magnitude.')\n    similarity = dot_product / (magnitude_v1 * magnitude_v2)\n    return round(similarity, 3)"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    if len(actual) != len(predicted):\n        raise ValueError(\"The lengths of 'actual' and 'predicted' must be the same.\")\n    for label in actual + predicted:\n        if label not in {0, 1}:\n            raise ValueError(\"All elements in 'actual' and 'predicted' must be either 0 or 1.\")\n    tp = sum((1 for (a, p) in zip(actual, predicted) if a == 1 and p == 1))\n    tn = sum((1 for (a, p) in zip(actual, predicted) if a == 0 and p == 0))\n    fp = sum((1 for (a, p) in zip(actual, predicted) if a == 0 and p == 1))\n    fn = sum((1 for (a, p) in zip(actual, predicted) if a == 1 and p == 0))\n    confusion_matrix = [[tn, fp], [fn, tp]]\n    total = len(actual)\n    accuracy = (tp + tn) / total if total > 0 else 0.0\n    precision = tp / (tp + fp) if tp + fp > 0 else 0.0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0.0\n    f1_score = 2 * (precision * recall) / (precision + recall) if precision + recall > 0 else 0.0\n    specificity = tn / (tn + fp) if tn + fp > 0 else 0.0\n    negative_predictive_value = tn / (tn + fn) if tn + fn > 0 else 0.0\n    accuracy = round(accuracy, 3)\n    f1_score = round(f1_score, 3)\n    specificity = round(specificity, 3)\n    negative_predictive_value = round(negative_predictive_value, 3)\n    return (confusion_matrix, accuracy, f1_score, specificity, negative_predictive_value)"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\nfrom scipy import stats\ndef descriptive_statistics(data):\n    \"\"\"\n    Calculate various descriptive statistics for a given dataset.\n\n    Parameters:\n    data (list or np.ndarray): A list or NumPy array of numerical values.\n\n    Returns:\n    dict: A dictionary containing the following statistics:\n        - mean\n        - median\n        - mode\n        - variance\n        - standard_deviation\n        - 25th_percentile\n        - 50th_percentile\n        - 75th_percentile\n        - interquartile_range\n    \"\"\"\n    data = np.array(data)\n    mean = np.mean(data)\n    median = np.median(data)\n    mode = stats.mode(data, keepdims=True).mode[0]\n    variance = np.var(data, ddof=1)\n    std_dev = np.std(data, ddof=1)\n    q25 = np.percentile(data, 25)\n    q50 = np.percentile(data, 50)\n    q75 = np.percentile(data, 75)\n    iqr = q75 - q25\n    stats_dict = {'mean': round(mean, 4), 'median': round(median, 4), 'mode': mode, 'variance': round(variance, 4), 'standard_deviation': round(std_dev, 4), '25th_percentile': q25, '50th_percentile': q50, '75th_percentile': q75, 'interquartile_range': iqr}\n    return stats_dict"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials\n    \"\"\"\n    combination = math.comb(n, k)\n    probability = combination * p ** k * (1 - p) ** (n - k)\n    return round(probability, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    :return: The PDF value at x, rounded to 5 decimal places.\n    \"\"\"\n    coefficient = 1 / (std_dev * math.sqrt(2 * math.pi))\n    exponent = -(x - mean) ** 2 / (2 * std_dev ** 2)\n    pdf_value = coefficient * math.exp(exponent)\n    return round(pdf_value, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    \"\"\"\n    probability = math.exp(-lam) * lam ** k / math.factorial(k)\n    return round(probability, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        int: The contrast value, defined as the difference between the maximum and minimum pixel values.\n    \"\"\"\n    if img.ndim != 2:\n        raise ValueError('Input image must be a 2D array (grayscale).')\n    if img.dtype != np.uint8:\n        raise ValueError('Input image must have pixel values of type uint8 (0-255).')\n    max_pixel = np.max(img)\n    min_pixel = np.min(img)\n    contrast = max_pixel - min_pixel\n    return contrast"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    \n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    \n    Returns:\n        float: The dot product of the two vectors.\n    \"\"\"\n    return np.dot(vec1, vec2)"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n\n    Returns:\n        list[list[float]]: A nested list where each inner list contains the polynomial features of the corresponding data point.\n    \"\"\"\n    if degree < 0:\n        return []\n    transformed_data = []\n    for x in data:\n        features = [x ** d for d in range(1, degree + 1)]\n        transformed_data.append([round(f, 8) for f in features])\n    return transformed_data"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    if position == 0 or d_model <= 0:\n        return -1\n    pe = np.zeros((position, d_model), dtype=np.float16)\n    for pos in range(position):\n        for i in range(0, d_model, 2):\n            if i + 1 <= d_model:\n                div_term = np.power(10000, 2 * (i // 2) / d_model).astype(np.float16)\n                pe[pos, i] = np.sin(pos / div_term).astype(np.float16)\n                if i + 1 < d_model:\n                    pe[pos, i + 1] = np.cos(pos / div_term).astype(np.float16)\n    return pe.tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    elif training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    else:\n        return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    parameter = parameter - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    updated_parameter = np.round(parameter, 5).tolist()\n    updated_m = np.round(m, 5).tolist()\n    updated_v = np.round(v, 5).tolist()\n    return (updated_parameter, updated_m, updated_v)"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    token_ids = encoder.encode(prompt)\n    seq_len = len(token_ids)\n    for _ in range(n_tokens_to_generate):\n        token_embeddings = params['wte'][token_ids]\n        positional_embeddings = params['wpe'][:seq_len]\n        x = token_embeddings + positional_embeddings\n        x = layer_norm(x, params['ln_f']['g'], params['ln_f']['b'])\n        last_token_embedding = x[-1]\n        similarities = np.dot(last_token_embedding, params['wte'].T)\n        next_token_id = np.argmax(similarities)\n        token_ids.append(next_token_id)\n        seq_len += 1\n    return encoder.decode(token_ids)\ndef layer_norm(x, gamma, beta, eps=1e-05):\n    \"\"\"Layer normalization.\"\"\"\n    mean = np.mean(x, axis=-1, keepdims=True)\n    variance = np.var(x, axis=-1, keepdims=True)\n    std = np.sqrt(variance + eps)\n    x_norm = (x - mean) / std\n    return gamma * x_norm + beta"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        exp_values = np.exp(values - np.max(values))\n        return exp_values / exp_values.sum(axis=-1, keepdims=True)\n    crystal_values = np.array(crystal_values)\n    W_q = np.random.randn(dimension, n)\n    W_k = np.random.randn(dimension, n)\n    W_v = np.random.randn(dimension, n)\n    Q = np.dot(W_q, crystal_values)\n    K = np.dot(W_k, crystal_values)\n    V = np.dot(W_v, crystal_values)\n    attention_scores = np.dot(Q, K.T)\n    attention_weights = softmax(attention_scores)\n    output = np.dot(attention_weights, V)\n    return [round(float(val), 4) for val in output]"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\nfrom math import log\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    query_terms = Counter(query.lower().split())\n    N = len(corpus)\n    doc_freq = {}\n    doc_lengths = []\n    doc_term_freqs = []\n    for doc in corpus:\n        doc_lower = doc.lower()\n        doc_terms = doc_lower.split()\n        doc_term_freq = Counter(doc_terms)\n        doc_term_freqs.append(doc_term_freq)\n        doc_lengths.append(len(doc_terms))\n        for term in doc_term_freq:\n            if term in query_terms:\n                doc_freq[term] = doc_freq.get(term, 0) + 1\n    avgdl = np.mean(doc_lengths)\n    scores = []\n    for (i, doc_term_freq) in enumerate(doc_term_freqs):\n        score = 0.0\n        dl = doc_lengths[i]\n        for (term, q_freq) in query_terms.items():\n            if term not in doc_term_freq:\n                continue\n            ni = doc_freq[term]\n            tf = doc_term_freq[term]\n            idf = log((N - ni + 0.5) / (ni + 0.5) + 1)\n            ctf = tf * (k1 + 1) / (tf + k1 * (1 - b + b * (dl / avgdl)))\n            score += idf * ctf\n        scores.append(round(score, 3))\n    return scores\ncorpus = ['The quick brown fox jumps over the lazy dog', 'Never jump over the lazy dog quickly', 'The lazy dog is not quick', 'Foxes are quick and brown']"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    tp = sum((t == 1 and p == 1 for (t, p) in zip(y_true, y_pred)))\n    fp = sum((t == 0 and p == 1 for (t, p) in zip(y_true, y_pred)))\n    fn = sum((t == 1 and p == 0 for (t, p) in zip(y_true, y_pred)))\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0\n    if precision + recall == 0:\n        f1 = 0.0\n    else:\n        f1 = 2 * (precision * recall) / (precision + recall)\n    return round(f1, 3)\ny_true = [1, 0, 1, 1, 0, 1]\ny_pred = [1, 0, 1, 0, 0, 1]"}
{"task_id": 92, "completion_id": 0, "solution": "import math\nPI = 3.14159\ndef power_grid_forecast(consumption_data):\n    detrended_data = []\n    for i in range(1, 11):\n        fluctuation = 10 * math.sin(2 * PI * i / 10)\n        detrended = consumption_data[i - 1] - fluctuation\n        detrended_data.append((i, detrended))\n    n = len(detrended_data)\n    sum_x = sum((day for (day, _) in detrended_data))\n    sum_y = sum((val for (_, val) in detrended_data))\n    sum_xy = sum((day * val for (day, val) in detrended_data))\n    sum_x2 = sum((day ** 2 for (day, _) in detrended_data))\n    m = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x ** 2)\n    b = (sum_y - m * sum_x) / n\n    day_15_base = m * 15 + b\n    fluctuation_day_15 = 10 * math.sin(2 * PI * 15 / 10)\n    total_forecast = day_15_base + fluctuation_day_15\n    safety_margin = total_forecast * 0.05\n    final_forecast = total_forecast + safety_margin\n    final_forecast = round(final_forecast)\n    return final_forecast\nconsumption_data = [120, 130, 140, 150, 160, 170, 180, 190, 200, 210]"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    absolute_errors = np.abs(y_true - y_pred)\n    mean_error = np.mean(absolute_errors)\n    return round(mean_error, 3)"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray) -> tuple:\n    \"\"\"\n    Compute Query, Key, and Value matrices.\n    \"\"\"\n    Q = X @ W_q\n    K = X @ W_k\n    V = X @ W_v\n    return (Q, K, V)\ndef self_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute scaled dot-product attention.\n    \"\"\"\n    d_k = K.shape[-1]\n    scores = Q @ K.T / np.sqrt(d_k)\n    attention_weights = np.softmax(scores, axis=-1)\n    output = attention_weights @ V\n    return output\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Compute multi-head attention.\n    \"\"\"\n    (batch_size, seq_len, d_model) = X.shape\n    head_dim = d_model // n_heads\n    W_q_heads = np.split(W_q, n_heads, axis=1)\n    W_k_heads = np.split(W_k, n_heads, axis=1)\n    W_v_heads = np.split(W_v, n_heads, axis=1)\n    outputs = []\n    for i in range(n_heads):\n        (Q, K, V) = compute_qkv(X, W_q_heads[i], W_k_heads[i], W_v_heads[i])\n        head_output = self_attention(Q, K, V)\n        outputs.append(head_output)\n    final_output = np.concatenate(outputs, axis=1)\n    final_output = np.round(final_output, 4)\n    return final_output.tolist()"}
{"task_id": 95, "completion_id": 0, "solution": "def phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError('Input lists must be of the same length.')\n    n11 = sum((1 for (a, b) in zip(x, y) if a == 1 and b == 1))\n    n10 = sum((1 for (a, b) in zip(x, y) if a == 1 and b == 0))\n    n01 = sum((1 for (a, b) in zip(x, y) if a == 0 and b == 1))\n    n00 = sum((1 for (a, b) in zip(x, y) if a == 0 and b == 0))\n    numerator = n11 * n00 - n10 * n01\n    denominator = ((n11 + n10) * (n11 + n01) * (n00 + n10) * (n00 + n01)) ** 0.5\n    if denominator == 0:\n        return 0.0\n    phi = numerator / denominator\n    return round(phi, 4)\nx = [1, 0, 1, 1, 0, 0, 1]\ny = [0, 0, 1, 1, 0, 1, 1]"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    if x <= -2.5:\n        return 0.0\n    elif x >= 2.5:\n        return 1.0\n    else:\n        return 0.2 * x + 0.5"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value\n    \"\"\"\n    if x > 0:\n        return round(x, 4)\n    else:\n        return round(alpha * (math.exp(x) - 1), 4)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    if x > 0:\n        return x\n    else:\n        return alpha * x"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x)\n    \"\"\"\n    if x > 100:\n        return round(x, 4)\n    elif x < -100:\n        return round(0.0, 4)\n    else:\n        return round(math.log(1 + math.exp(x)), 4)"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input, rounded to the 4th decimal place\n    \"\"\"\n    return round(x / (1 + abs(x)), 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    clipped_rhos = [min(rho, 1 + epsilon) for rho in rhos]\n    kl_divergence = sum((pi_old * np.log(pi_old / pi_ref) for (pi_old, pi_ref) in zip(pi_theta_old, pi_theta_ref)))\n    objective = sum((min(rho * A[i], clipped_rho * A[i]) for (i, (rho, clipped_rho)) in enumerate(zip(rhos, clipped_rhos)))) - beta * kl_divergence\n    return round(objective, 6)"}
{"task_id": 102, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value\n    \"\"\"\n    return x / (1 + math.exp(-x))"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value rounded to 4 decimal places\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x > 0:\n        result = scale * x\n    else:\n        result = scale * alpha * (np.exp(x) - 1)\n    return round(result, 4)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00d7 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    z = np.dot(X, weights) + bias\n    probabilities = 1 / (1 + np.exp(-z))\n    predictions = (probabilities >= 0.5).astype(int)\n    return predictions.tolist()"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    (N, M) = X.shape\n    C = len(np.unique(y))\n    y_one_hot = np.zeros((N, C))\n    y_one_hot[np.arange(N), y.astype(int)] = 1\n    B = np.random.randn(M, C) * 0.01\n    b = np.zeros((1, C))\n    losses = []\n    for _ in range(iterations):\n        Z = X @ B + b\n        exp_Z = np.exp(Z - np.max(Z, axis=1, keepdims=True))\n        A = exp_Z / exp_Z.sum(axis=1, keepdims=True)\n        loss = -np.mean(np.log(A[np.arange(N), y.astype(int)] + 1e-15))\n        losses.append(round(loss, 4))\n        dZ = A - y_one_hot\n        dB = X.T @ dZ / N\n        db = np.mean(dZ, axis=0)\n        B -= learning_rate * dB\n        b -= learning_rate * db\n    B_rounded = np.round(B, 4).tolist()\n    losses_rounded = [round(loss, 4) for loss in losses]\n    return (B_rounded, losses_rounded)"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \n    Parameters:\n    - X: Input feature matrix (shape: [n_samples, n_features])\n    - y: Target vector (shape: [n_samples])\n    - learning_rate: Step size for gradient descent\n    - iterations: Number of iterations to run the optimization\n    \n    Returns:\n    - coefficients: List of optimized model coefficients (including intercept)\n    - losses: List of loss values over iterations (rounded to 4 decimal places)\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    weights = np.zeros(n_features)\n    bias = 0.0\n    losses = []\n    for _ in range(iterations):\n        linear_model = np.dot(X, weights) + bias\n        y_pred = 1 / (1 + np.exp(-linear_model))\n        epsilon = 1e-15\n        y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n        loss = -np.mean(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n        losses.append(round(loss, 4))\n        dw = 1 / n_samples * np.dot(X.T, y_pred - y)\n        db = 1 / n_samples * np.sum(y_pred - y)\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n    coefficients = np.concatenate((weights.reshape(-1), [bias])).tolist()\n    losses = [round(loss, 4) for loss in losses]\n    return (coefficients, losses)"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    d_k = K.shape[-1]\n    scores = np.dot(Q, K.T) / np.sqrt(d_k)\n    scores = np.where(mask == 0, -1000000000.0, scores)\n    attention_weights = np.exp(scores - np.max(scores, axis=-1, keepdims=True))\n    attention_weights /= np.sum(attention_weights, axis=-1, keepdims=True)\n    output = np.dot(attention_weights, V)\n    return output.tolist()"}
{"task_id": 108, "completion_id": 0, "solution": "from collections import Counter\nimport math\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    \"\"\"\n    if not apples:\n        return 0.0\n    counts = Counter(apples)\n    total = len(apples)\n    entropy = 0.0\n    for count in counts.values():\n        prob = count / total\n        entropy -= prob * math.log2(prob)\n    return round(entropy, 4)"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Perform Layer Normalization on a 3D input tensor.\n\n    Parameters:\n    - X (np.ndarray): Input tensor of shape (batch_size, sequence_length, features)\n    - gamma (np.ndarray): Scale parameter of shape (features,)\n    - beta (np.ndarray): Shift parameter of shape (features,)\n    - epsilon (float): Small value to prevent division by zero\n\n    Returns:\n    - np.ndarray: Normalized tensor of the same shape as X, rounded to 5 decimal places\n    \"\"\"\n    mean = np.mean(X, axis=2, keepdims=True)\n    var = np.var(X, axis=2, keepdims=True)\n    X_normalized = (X - mean) / np.sqrt(var + epsilon)\n    X_scaled = X_normalized * gamma + beta\n    gamma = gamma[np.newaxis, np.newaxis, :]\n    beta = beta[np.newaxis, np.newaxis, :]\n    return X_scaled.round(5).tolist()"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\nimport math\nfrom itertools import combinations\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    ref_tokens = reference.lower().split()\n    can_tokens = candidate.lower().split()\n    matches = set()\n    for (i, can_word) in enumerate(can_tokens):\n        for (j, ref_word) in enumerate(ref_tokens):\n            if can_word == ref_word:\n                matches.add((i, j))\n                break\n    precision = len(matches) / len(can_tokens) if can_tokens else 0\n    recall = len(matches) / len(ref_tokens) if ref_tokens else 0\n    f_mean = precision * recall / (alpha * precision + (1 - alpha) * recall) if precision + recall > 0 else 0\n    len_ratio = len(can_tokens) / len(ref_tokens)\n    if len_ratio > 1:\n        len_ratio = 1 / len_ratio\n    penalty = 1 - math.exp(-gamma * len_ratio)\n    chunks = 0\n    prev_match = -2\n    for (i, j) in sorted(matches):\n        if i == prev_match + 1:\n            chunks += 1\n        else:\n            chunks += 1\n        prev_match = i\n    if len(matches) > 0:\n        frag = 1 - chunks / len(matches)\n    else:\n        frag = 0\n    score = (1 - penalty) * f_mean * (1 + frag)\n    return round(score, 3)"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    p_xy = joint_counts / total_samples\n    p_x = total_counts_x / total_samples\n    p_y = total_counts_y / total_samples\n    pmi = np.log(p_xy / (p_x * p_y))\n    return round(pmi, 3)"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    if not x:\n        return []\n    min_val = min(x)\n    max_val = max(x)\n    if min_val == max_val:\n        return [0.0 for _ in x]\n    normalized = [(val - min_val) / (max_val - min_val) for val in x]\n    return [round(val, 4) for val in normalized]"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    \"\"\"\n    A simple residual block with two weight layers and shortcut connection.\n    \n    Parameters:\n    - x: Input 1D array (np.ndarray)\n    - w1: First weight matrix (np.ndarray)\n    - w2: Second weight matrix (np.ndarray)\n    \n    Returns:\n    - Output of the residual block as a list, rounded to 4 decimal places.\n    \"\"\"\n    z1 = np.dot(x, w1)\n    a1 = np.maximum(0, z1)\n    z2 = np.dot(a1, w2)\n    out = z2 + x\n    final_out = np.maximum(0, out)\n    return np.round(final_out, 4).tolist()"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray):\n    \"\"\"\n    Perform Global Average Pooling on a 3D NumPy array.\n\n    Parameters:\n    x (np.ndarray): Input array of shape (height, width, channels)\n\n    Returns:\n    np.ndarray: Output array of shape (channels,)\n    \"\"\"\n    if x.ndim != 3:\n        raise ValueError('Input must be a 3D array (height, width, channels).')\n    return np.mean(x, axis=(0, 1))"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Perform Batch Normalization on a 4D input array in BCHW format.\n\n    Parameters:\n    - X: Input array of shape (batch, channels, height, width)\n    - gamma: Scale parameters of shape (channels,)\n    - beta: Shift parameters of shape (channels,)\n    - epsilon: Small value for numerical stability\n\n    Returns:\n    - Output array after batch normalization, rounded to 4 decimal places and converted to a list.\n    \"\"\"\n    (batch, channels, height, width) = X.shape\n    X_reshaped = X.transpose(1, 0, 2, 3).reshape(channels, -1)\n    mean = np.mean(X_reshaped, axis=1)\n    var = np.var(X_reshaped, axis=1)\n    X_normalized = (X_reshaped - mean[:, np.newaxis]) / np.sqrt(var[:, np.newaxis] + epsilon)\n    X_normalized = X_normalized.reshape(channels, batch, height, width).transpose(1, 0, 2, 3)\n    X_output = gamma[np.newaxis, :, np.newaxis, np.newaxis] * X_normalized + beta[np.newaxis, :, np.newaxis, np.newaxis]\n    return np.round(X_output, 4).tolist()"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    \"\"\"\n    Computes the derivative of the polynomial term c * x^n at a given point x.\n    \n    Parameters:\n    c (float): The coefficient of the term.\n    x (float): The point at which to evaluate the derivative.\n    n (float): The exponent of the term.\n    \n    Returns:\n    float: The value of the derivative at x, rounded to 4 decimal places.\n    \"\"\"\n    derivative = c * n * x ** (n - 1)\n    return round(derivative, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10):\n    vectors = np.array(vectors, dtype=float)\n    n_vectors = vectors.shape[0]\n    basis = []\n    for v in vectors:\n        v = v.copy()\n        for u in basis:\n            proj = np.dot(v, u) / np.dot(u, u) * u\n            v = v - proj\n        if np.linalg.norm(v) > tol:\n            u = v / np.linalg.norm(v)\n            basis.append(np.round(u, 4).tolist())\n    return basis"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    \"\"\"\n    Compute the cross product of two 3D vectors.\n    \n    Parameters:\n    a (list or np.ndarray): First 3D vector.\n    b (list or np.ndarray): Second 3D vector.\n    \n    Returns:\n    list: Cross product of the two vectors, rounded to 4 decimal places.\n    \"\"\"\n    a = np.array(a)\n    b = np.array(b)\n    result = np.cross(a, b)\n    return np.round(result, 4).tolist()"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    \"\"\"\n    Solves a system of linear equations Ax = b using Cramer's Rule.\n    \n    Parameters:\n    A (list of lists or numpy array): Square coefficient matrix.\n    b (list or numpy array): Constant vector.\n    \n    Returns:\n    list: Solution vector x rounded to 4 decimal places, or -1 if no unique solution.\n    \"\"\"\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    n = A.shape[0]\n    if A.shape[1] != n:\n        raise ValueError('Matrix A must be square.')\n    if b.shape[0] != n:\n        raise ValueError('Vector b must have the same number of elements as rows in A.')\n    det_A = np.linalg.det(A)\n    if abs(det_A) < 1e-10:\n        return -1\n    x = []\n    for i in range(n):\n        A_i = A.copy()\n        A_i[:, i] = b\n        det_Ai = np.linalg.det(A_i)\n        x_i = det_Ai / det_A\n        x.append(round(x_i, 4))\n    return x"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    if not p or not q or len(p) != len(q):\n        return 0.0\n    p = np.array(p)\n    q = np.array(q)\n    if np.any(p < 0) or np.any(q < 0) or (not np.isclose(np.sum(p), 1.0)) or (not np.isclose(np.sum(q), 1.0)):\n        return 0.0\n    bc = np.sum(np.sqrt(p * q))\n    epsilon = 1e-10\n    bc = max(bc, epsilon)\n    distance = -np.log(bc)\n    return round(distance, 4)"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float]:\n    if len(a) != len(b):\n        return -1\n    result = [a[i] + b[i] for i in range(len(a))]\n    return result"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    (num_states, num_actions) = theta.shape\n    gradient = np.zeros_like(theta)\n    for episode in episodes:\n        returns = []\n        rewards = [r for (s, a, r) in episode]\n        G = 0\n        for r in reversed(rewards):\n            G = r + G\n            returns.insert(0, G)\n        for (t, (state, action, _)) in enumerate(episode):\n            G_t = returns[t]\n            exp_theta = np.exp(theta[state, :])\n            pi = exp_theta / exp_theta.sum()\n            grad_log_pi = np.zeros(num_actions)\n            grad_log_pi[action] = 1 - pi[action]\n            grad_log_pi -= pi\n            gradient[state, :] += G_t * grad_log_pi\n    gradient /= len(episodes)\n    return np.round(gradient, 4).tolist()"}
{"task_id": 123, "completion_id": 0, "solution": "def compute_efficiency(n_experts, k_active, d_in, d_out):\n    flops_dense = d_in * d_out\n    flops_moe = k_active / n_experts * d_in * d_out\n    savings_flops = flops_dense - flops_moe\n    savings_percentage = savings_flops / flops_dense * 100\n    flops_dense = round(flops_dense, 1)\n    flops_moe = round(flops_moe, 1)\n    savings_flops = round(savings_flops, 1)\n    savings_percentage = round(savings_percentage, 1)\n    return {'flops_dense': flops_dense, 'flops_moe': flops_moe, 'savings_flops': savings_flops, 'savings_percentage': savings_percentage}"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    \"\"\"\n    Implements the Noisy Top-K Gating mechanism used in Mixture-of-Experts (MoE) models.\n    \n    Parameters:\n    - X: Input matrix of shape (batch_size, input_dim)\n    - W_g: Gating weight matrix of shape (input_dim, num_experts)\n    - W_noise: Noise weight matrix of shape (input_dim, num_experts)\n    - N: Pre-sampled noise matrix of shape (batch_size, num_experts)\n    - k: Sparsity constraint (number of top experts to select per input)\n    \n    Returns:\n    - gate_output: Final gating probabilities matrix of shape (batch_size, num_experts)\n    \"\"\"\n    (batch_size, input_dim) = X.shape\n    (_, num_experts) = W_g.shape\n    logits = X @ W_g\n    noise_logits = X @ W_noise\n    noisy_logits = logits + N * noise_logits\n    temperatures = 1.0 / np.sqrt(W_g.shape[0])\n    soft_logits = noisy_logits * temperatures\n    soft_probs = np.softmax(soft_logits, axis=1)\n    (topk_values, topk_indices) = ([], [])\n    for i in range(batch_size):\n        (values, indices) = zip(*sorted(zip(soft_logits[i], np.arange(num_experts)), reverse=True)[:k])\n        topk_values.append(values)\n        topk_indices.append(indices)\n    topk_values = np.array(topk_values)\n    topk_indices = np.array(topk_indices)\n    gate_output = np.zeros((batch_size, num_experts))\n    for i in range(batch_size):\n        gate_output[i, topk_indices[i]] = topk_values[i]\n    gate_output /= np.sum(gate_output, axis=1, keepdims=True)\n    gate_output = np.round(gate_output, 4)\n    return gate_output.tolist()"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    \"\"\"\n    Implements a Mixture-of-Experts (MoE) layer with top-k routing.\n\n    Parameters:\n    - x: Input tensor of shape (batch_size, input_dim)\n    - We: Expert weight matrices of shape (n_experts, input_dim, output_dim)\n    - Wg: Gating weight matrix of shape (input_dim, n_experts)\n    - n_experts: Number of experts\n    - top_k: Number of top experts to select per token\n\n    Returns:\n    - Output tensor of shape (batch_size, output_dim)\n    \"\"\"\n    (batch_size, input_dim) = x.shape\n    (_, _, output_dim) = We.shape\n    gate_scores = x @ Wg\n    top_k_indices = np.argsort(gate_scores, axis=1)[:, -top_k:]\n    top_k_scores = np.take_along_axis(gate_scores, top_k_indices, axis=1)\n    top_k_softmax = np.exp(top_k_scores - np.max(top_k_scores, axis=1, keepdims=True))\n    top_k_softmax /= np.sum(top_k_softmax, axis=1, keepdims=True)\n    expert_outputs = np.zeros((batch_size, output_dim))\n    for i in range(batch_size):\n        for j in range(top_k):\n            expert_idx = top_k_indices[i, j]\n            expert_output = x[i] @ We[expert_idx]\n            expert_outputs[i] += top_k_softmax[i, j] * expert_output\n    expert_outputs = np.round(expert_outputs, 4)\n    return expert_outputs.tolist()"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    \"\"\"\n    Perform Group Normalization on a 4D input tensor.\n\n    Parameters:\n    - X: Input tensor of shape (B, C, H, W)\n    - gamma: Learnable scale parameter of shape (C,)\n    - beta: Learnable shift parameter of shape (C,)\n    - num_groups: Number of groups to divide the channels into\n    - epsilon: Small value for numerical stability\n\n    Returns:\n    - Normalized output as a Python list (rounded to 4 decimal places)\n    \"\"\"\n    (B, C, H, W) = X.shape\n    assert C % num_groups == 0, 'Number of channels must be divisible by num_groups'\n    X_grouped = X.reshape(B, num_groups, C // num_groups, H, W)\n    mean = np.mean(X_grouped, axis=(2, 3, 4), keepdims=True)\n    var = np.var(X_grouped, axis=(2, 3, 4), keepdims=True)\n    X_normalized = (X_grouped - mean) / np.sqrt(var + epsilon)\n    X_normalized = X_normalized.reshape(B, C, H, W)\n    X_output = gamma * X_normalized + beta\n    return np.round(X_output, 4).tolist()"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n\n    def f(x):\n        return x ** 4 - 3 * x ** 3 + 2\n\n    def df(x):\n        return 4 * x ** 3 - 9 * x ** 2\n    x = start_x\n    for _ in range(max_iters):\n        gradient = df(x)\n        new_x = x - learning_rate * gradient\n        if abs(new_x - x) < tolerance:\n            break\n        x = new_x\n    return round(x, 4)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    \"\"\"\n    Dynamic Tanh (DyT) function: Normalization-free transformation inspired by Tanh.\n    \n    Parameters:\n    - x: Input array (np.ndarray)\n    - alpha: Scaling factor for the input\n    - gamma: Scaling factor for the output\n    - beta: Shift factor for the output\n    \n    Returns:\n    - Python list of transformed values, rounded to 4 decimal places.\n    \"\"\"\n    x_scaled = x * alpha\n    tanh_output = np.tanh(x_scaled)\n    output = gamma * tanh_output + beta\n    output_rounded = np.round(output, 4)\n    return output_rounded.tolist()"}
