{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    if len(a) == 0 or len(b) == 0:\n        return -1\n    if len(a[0]) != len(b):\n        return -1\n    result = []\n    for row in a:\n        dot_product = sum((x * y for (x, y) in zip(row, b)))\n        result.append(dot_product)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    rows = len(a)\n    cols = len(a[0]) if rows > 0 else 0\n    transposed = [[0 for _ in range(rows)] for _ in range(cols)]\n    for i in range(rows):\n        for j in range(cols):\n            transposed[j][i] = a[i][j]\n    return transposed"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    flat_list = [item for sublist in a for item in sublist]\n    if len(flat_list) != new_shape[0] * new_shape[1]:\n        return []\n    reshaped_array = np.array(flat_list).reshape(new_shape)\n    return reshaped_array.tolist()"}
{"task_id": 4, "completion_id": 0, "solution": "def calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    if mode == 'row':\n        return [sum(row) / len(row) for row in matrix]\n    elif mode == 'column':\n        num_rows = len(matrix)\n        num_cols = len(matrix[0]) if num_rows > 0 else 0\n        if not all((len(row) == num_cols for row in matrix)):\n            raise ValueError('All rows must have the same number of columns.')\n        return [sum((matrix[row][col] for row in range(num_rows))) / num_rows for col in range(num_cols)]\n    else:\n        raise ValueError(\"Mode must be either 'row' or 'column'.\")"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    \"\"\"\n    Multiplies a matrix by a scalar and returns the resulting matrix.\n    \n    Parameters:\n    matrix (list[list[int | float]]): The input matrix.\n    scalar (int | float): The scalar to multiply with the matrix.\n    \n    Returns:\n    list[list[int | float]]: The resulting matrix after scalar multiplication.\n    \"\"\"\n    return [[element * scalar for element in row] for row in matrix]"}
{"task_id": 6, "completion_id": 0, "solution": "def calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    \"\"\"\n    Calculate the eigenvalues of a 2x2 matrix and return them sorted from highest to lowest.\n\n    Parameters:\n        matrix (list[list[float | int]]): A 2x2 matrix as a list of lists.\n\n    Returns:\n        list[float]: A list of eigenvalues sorted in descending order.\n    \"\"\"\n    import math\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    trace = a + d\n    determinant = a * d - b * c\n    discriminant = trace ** 2 - 4 * determinant\n    sqrt_discriminant = math.sqrt(discriminant)\n    eigenvalue1 = (trace + sqrt_discriminant) / 2\n    eigenvalue2 = (trace - sqrt_discriminant) / 2\n    return [eigenvalue1, eigenvalue2] if eigenvalue1 > eigenvalue2 else [eigenvalue2, eigenvalue1]"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    try:\n        A = np.array(A, dtype=float)\n        T = np.array(T, dtype=float)\n        S = np.array(S, dtype=float)\n        if T.shape[0] != T.shape[1] or S.shape[0] != S.shape[1]:\n            return -1\n        if np.isclose(np.linalg.det(T), 0) or np.isclose(np.linalg.det(S), 0):\n            return -1\n        T_inv = np.linalg.inv(T)\n        result = T_inv @ A @ S\n        result = np.round(result, 4)\n        return result.tolist()\n    except Exception as e:\n        return -1"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    determinant = a * d - b * c\n    if determinant == 0:\n        return None\n    inv_determinant = 1 / determinant\n    inverse = [[d * inv_determinant, -b * inv_determinant], [-c * inv_determinant, a * inv_determinant]]\n    return inverse"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    if len(a[0]) != len(b):\n        return -1\n    result = [[0 for _ in range(len(b[0]))] for _ in range(len(a))]\n    for i in range(len(a)):\n        for j in range(len(b[0])):\n            for k in range(len(b)):\n                result[i][j] += a[i][k] * b[k][j]\n    return result"}
{"task_id": 10, "completion_id": 0, "solution": "from typing import List\nimport numpy as np\ndef calculate_covariance_matrix(vectors: List[List[float]]) -> List[List[float]]:\n    \"\"\"\n    Calculate the covariance matrix for a given list of vectors.\n    \n    Parameters:\n        vectors (List[List[float]]): A list of vectors where each inner list\n                                     represents a feature with its observations.\n    \n    Returns:\n        List[List[float]]: The covariance matrix as a list of lists.\n    \"\"\"\n    n = len(vectors[0])\n    if not all((len(vec) == n for vec in vectors)):\n        raise ValueError('All vectors must have the same length.')\n    m = len(vectors)\n    centered_vectors = []\n    for vec in vectors:\n        mean = sum(vec) / n\n        centered = [x - mean for x in vec]\n        centered_vectors.append(centered)\n    covariance_matrix = [[0.0 for _ in range(m)] for _ in range(m)]\n    for i in range(m):\n        for j in range(m):\n            covariance = sum((centered_vectors[i][k] * centered_vectors[j][k] for k in range(n))) / (n - 1)\n            covariance_matrix[i][j] = covariance\n    return covariance_matrix"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    \"\"\"\n    Solves the system of linear equations Ax = b using the Jacobi method.\n    \n    Parameters:\n    A (np.ndarray): Coefficient matrix.\n    b (np.ndarray): Right-hand side vector.\n    n (int): Number of iterations.\n    \n    Returns:\n    list: Approximate solution vector x as a Python list, rounded to 4 decimal places.\n    \"\"\"\n    if A.shape[0] != A.shape[1]:\n        raise ValueError('Matrix A must be square.')\n    if A.shape[0] != b.shape[0]:\n        raise ValueError('Dimensions of A and b must match.')\n    N = A.shape[0]\n    x = np.zeros(N)\n    for _ in range(n):\n        x_new = np.zeros(N)\n        for i in range(N):\n            s = sum((A[i, j] * x[j] for j in range(N) if j != i))\n            x_new[i] = (b[i] - s) / A[i, i]\n        x = np.round(x_new, 4)\n    return np.round(x, 4).tolist()"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    \"\"\"\n    Compute the singular values of a 2x2 matrix using the Jacobian method.\n    Returns a tuple of singular values rounded to 4 decimal places.\n    \"\"\"\n    if A.shape != (2, 2):\n        raise ValueError('Input matrix must be 2x2.')\n    A_T_A = A.T @ A\n\n    def jacobi_rotation(theta):\n        c = np.cos(theta)\n        s = np.sin(theta)\n        return np.array([[c, -s], [s, c]])\n    (a, b) = (A_T_A[0, 0], A_T_A[1, 1])\n    off = A_T_A[0, 1]\n    tolerance = 1e-10\n    max_iterations = 1000\n    for _ in range(max_iterations):\n        if abs(off) < tolerance:\n            break\n        theta = 0.5 * np.arctan2(2 * off, a - b)\n        R = jacobi_rotation(theta)\n        A_T_A = R.T @ A_T_A @ R\n        off = A_T_A[0, 1]\n    sigma1 = np.sqrt(max(A_T_A[0, 0], A_T_A[1, 1]))\n    sigma2 = np.sqrt(min(A_T_A[0, 0], A_T_A[1, 1]))\n    return (round(sigma1, 4), round(sigma2, 4))\nA = [[3, 4], [1, 2]]"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n\n    def determinant_3x3(mat: list[list[int | float]]) -> float:\n        return mat[0][0] * (mat[1][1] * mat[2][2] - mat[1][2] * mat[2][1]) - mat[0][1] * (mat[1][0] * mat[2][2] - mat[1][2] * mat[2][0]) + mat[0][2] * (mat[1][0] * mat[2][1] - mat[1][1] * mat[2][0])\n\n    def get_minor(mat: list[list[int | float]], row: int, col: int) -> list[list[int | float]]:\n        return [[mat[i][j] for j in range(len(mat)) if j != col] for i in range(len(mat)) if i != row]\n    det = 0\n    for col in range(4):\n        minor = get_minor(matrix, 0, col)\n        det += (-1) ** col * matrix[0][col] * determinant_3x3(minor)\n    return det\nmatrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    X_np = np.array(X)\n    y_np = np.array(y).reshape(-1, 1)\n    theta = np.linalg.inv(X_np.T @ X_np) @ X_np.T @ y_np\n    theta_rounded = [round(float(val), 4) for val in theta.flatten()]\n    return theta_rounded\nX = [[1, 2], [1, 3], [1, 4], [1, 5]]"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> np.ndarray:\n    (m, n) = X.shape\n    theta = np.zeros(n)\n    for _ in range(iterations):\n        predictions = X @ theta\n        errors = predictions - y\n        gradient = 1 / m * X.T @ errors\n        theta -= alpha * gradient\n    return np.round(theta, 4).tolist()"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    standardized_data = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    min_vals = np.min(data, axis=0)\n    max_vals = np.max(data, axis=0)\n    min_max_data = (data - min_vals) / (max_vals - min_vals)\n    standardized_data = np.round(standardized_data, 4).tolist()\n    min_max_data = np.round(min_max_data, 4).tolist()\n    return (standardized_data, min_max_data)"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Tuple\ndef k_means_clustering(points: List[Tuple[float, float]], k: int, initial_centroids: List[Tuple[float, float]], max_iterations: int) -> List[Tuple[float, float]]:\n    points = np.array(points)\n    centroids = np.array(initial_centroids)\n    for _ in range(max_iterations):\n        distances = np.sqrt(((points[:, np.newaxis, :] - centroids[np.newaxis, :, :]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=1)\n        new_centroids = np.array([points[labels == i].mean(axis=0) for i in range(k)])\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    rounded_centroids = [tuple(np.round(centroid, 4)) for centroid in centroids]\n    return rounded_centroids\npoints = [(1.0, 2.0), (1.5, 1.8), (5.0, 8.0), (8.0, 8.0), (1.1, 1.0), (9.0, 11.0)]\nk = 2\ninitial_centroids = [(1.0, 1.0), (8.0, 9.0)]\nmax_iterations = 100"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    \"\"\"\n    Generate train and test splits for K-Fold Cross-Validation.\n\n    Parameters:\n    - X: np.ndarray, input features\n    - y: np.ndarray, target labels\n    - k: int, number of folds\n    - shuffle: bool, whether to shuffle the data before splitting\n    - random_seed: int or None, seed for random shuffling\n\n    Returns:\n    - List of tuples, each tuple contains (train_indices, test_indices)\n    \"\"\"\n    n_samples = X.shape[0]\n    indices = np.arange(n_samples)\n    if shuffle:\n        np.random.seed(random_seed)\n        np.random.shuffle(indices)\n    folds = []\n    fold_size = n_samples // k\n    remainder = n_samples % k\n    start = 0\n    for i in range(k):\n        end = start + fold_size + (1 if i < remainder else 0)\n        test_indices = indices[start:end]\n        train_indices = np.concatenate((indices[:start], indices[end:]), axis=0)\n        folds.append((train_indices, test_indices))\n        start = end\n    return folds"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    mean = np.mean(data, axis=0)\n    standardized_data = data - mean\n    covariance_matrix = np.cov(standardized_data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eig(covariance_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n    principal_components = sorted_eigenvectors[:, :k]\n    return [list(np.round(component, 4)) for component in principal_components.T]"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom typing import Dict, List, Any, Tuple, Optional\ndef entropy(class_counts: Dict[Any, int]) -> float:\n    \"\"\"Calculate the entropy of a set of class counts.\"\"\"\n    total = sum(class_counts.values())\n    if total == 0:\n        return 0.0\n    return -sum((count / total * math.log2(count / total) for count in class_counts.values()))\ndef information_gain(parent_entropy: float, subsets: List[Tuple[float, Dict[Any, int]]]) -> float:\n    \"\"\"Calculate the information gain from splitting into subsets.\"\"\"\n    total = sum((weight for (weight, _) in subsets))\n    weighted_entropy = sum((weight / total * entropy(class_counts) for (weight, class_counts) in subsets))\n    return parent_entropy - weighted_entropy\ndef split_examples(examples: List[Dict[str, Any]], attribute: str) -> Dict[Any, List[Dict[str, Any]]]:\n    \"\"\"Split examples by the values of a given attribute.\"\"\"\n    grouped = {}\n    for example in examples:\n        value = example[attribute]\n        if value not in grouped:\n            grouped[value] = []\n        grouped[value].append(example)\n    return grouped\ndef most_common_class(examples: List[Dict[str, Any]], target_attr: str) -> Any:\n    \"\"\"Return the most common class in the examples.\"\"\"\n    class_counts = Counter((example[target_attr] for example in examples))\n    return class_counts.most_common(1)[0][0]\ndef learn_decision_tree(examples: List[Dict[str, Any]], attributes: List[str], target_attr: str) -> Dict[str, Any]:\n    \"\"\"Learn a decision tree using entropy and information gain.\"\"\"\n    if not examples:\n        return {}\n    class_values = [example[target_attr] for example in examples]\n    if len(set(class_values)) == 1:\n        return {'class': class_values[0]}\n    if not attributes:\n        return {'class': most_common_class(examples, target_attr)}\n    best_attribute = None\n    best_gain = -1\n    parent_entropy = entropy(Counter((example[target_attr] for example in examples)))\n    for attr in attributes:\n        if attr == target_attr:\n            continue\n        grouped = split_examples(examples, attr)\n        subsets = [(len(subset), Counter((example[target_attr] for example in subset))) for subset in grouped.values()]\n        gain = information_gain(parent_entropy, subsets)\n        if gain > best_gain:\n            best_gain = gain\n            best_attribute = attr\n    if best_attribute is None:\n        return {'class': most_common_class(examples, target_attr)}\n    tree = {best_attribute: {}}\n    remaining_attributes = [attr for attr in attributes if attr != best_attribute]\n    grouped = split_examples(examples, best_attribute)\n    for (value, subset) in grouped.items():\n        subtree = learn_decision_tree(subset, remaining_attributes, target_attr)\n        tree[best_attribute][value] = subtree\n    return tree\nexamples = [{'Outlook': 'Sunny', 'Temperature': 'Hot', 'Humidity': 'High', 'Windy': 'False', 'PlayTennis': 'No'}, {'Outlook': 'Sunny', 'Temperature': 'Hot', 'Humidity': 'High', 'Windy': 'True', 'PlayTennis': 'No'}, {'Outlook': 'Overcast', 'Temperature': 'Hot', 'Humidity': 'High', 'Windy': 'False', 'PlayTennis': 'Yes'}, {'Outlook': 'Rain', 'Temperature': 'Mild', 'Humidity': 'High', 'Windy': 'False', 'PlayTennis': 'Yes'}, {'Outlook': 'Rain', 'Temperature': 'Cool', 'Humidity': 'Normal', 'Windy': 'False', 'PlayTennis': 'Yes'}, {'Outlook': 'Rain', 'Temperature': 'Cool', 'Humidity': 'Normal', 'Windy': 'True', 'PlayTennis': 'No'}, {'Outlook': 'Overcast', 'Temperature': 'Cool', 'Humidity': 'Normal', 'Windy': 'True', 'PlayTennis': 'Yes'}, {'Outlook': 'Sunny', 'Temperature': 'Mild', 'Humidity': 'High', 'Windy': 'False', 'PlayTennis': 'No'}, {'Outlook': 'Sunny', 'Temperature': 'Cool', 'Humidity': 'Normal', 'Windy': 'False', 'PlayTennis': 'Yes'}, {'Outlook': 'Rain', 'Temperature': 'Mild', 'Humidity': 'Normal', 'Windy': 'False', 'PlayTennis': 'Yes'}, {'Outlook': 'Sunny', 'Temperature': 'Mild', 'Humidity': 'Normal', 'Windy': 'True', 'PlayTennis': 'Yes'}, {'Outlook': 'Overcast', 'Temperature': 'Mild', 'Humidity': 'High', 'Windy': 'True', 'PlayTennis': 'Yes'}, {'Outlook': 'Overcast', 'Temperature': 'Hot', 'Humidity': 'Normal', 'Windy': 'False', 'PlayTennis': 'Yes'}, {'Outlook': 'Rain', 'Temperature': 'Mild', 'Humidity': 'High', 'Windy': 'True', 'PlayTennis': 'No'}]\nattributes = ['Outlook', 'Temperature', 'Humidity', 'Windy', 'PlayTennis']\ntarget_attr = 'PlayTennis'\ntree = learn_decision_tree(examples, attributes, target_attr)"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    \"\"\"\n    Implements a deterministic Pegasos algorithm for kernel SVM.\n    \n    Parameters:\n    - data: 2D NumPy array of shape (n_samples, n_features)\n    - labels: 1D NumPy array of shape (n_samples,)\n    - kernel: 'linear' or 'rbf'\n    - lambda_val: regularization parameter\n    - iterations: number of training iterations\n    - sigma: bandwidth parameter for RBF kernel\n    \n    Returns:\n    - alphas: list of alpha coefficients rounded to 4 decimal places\n    - bias: float, bias term rounded to 4 decimal places\n    \"\"\"\n    n_samples = data.shape[0]\n    alphas = np.zeros(n_samples)\n    bias = 0.0\n    for t in range(1, iterations + 1):\n        eta_t = 1.0 / (lambda_val * t)\n        K = np.zeros((n_samples, n_samples))\n        for i in range(n_samples):\n            for j in range(n_samples):\n                if kernel == 'linear':\n                    K[i, j] = np.dot(data[i], data[j])\n                elif kernel == 'rbf':\n                    dist = np.linalg.norm(data[i] - data[j])\n                    K[i, j] = np.exp(-dist ** 2 / (2 * sigma ** 2))\n                else:\n                    raise ValueError(\"Unsupported kernel type. Choose 'linear' or 'rbf'.\")\n        y_pred = np.zeros(n_samples)\n        for i in range(n_samples):\n            y_pred[i] = np.dot(alphas * labels, K[:, i]) + bias\n        for i in range(n_samples):\n            if labels[i] * y_pred[i] < 1:\n                alphas[i] += eta_t * labels[i]\n            else:\n                alphas[i] = max(0, alphas[i] - eta_t * lambda_val * alphas[i])\n        for i in range(n_samples):\n            if labels[i] * y_pred[i] < 1:\n                bias += eta_t * labels[i]\n    alphas = alphas / (lambda_val * iterations)\n    alphas = np.round(alphas, 4)\n    bias = round(bias, 4)\n    return (alphas.tolist(), bias)\ndata = np.array([[1, 2], [2, 3], [3, 3], [6, 7], [7, 8], [8, 8]])\nlabels = np.array([1, 1, 1, -1, -1, -1])"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    \"\"\"\n    Computes the sigmoid activation function for a given input z.\n    \n    Parameters:\n        z (float): Input value.\n        \n    Returns:\n        float: Sigmoid of z, rounded to four decimal places.\n    \"\"\"\n    result = 1 / (1 + math.exp(-z))\n    return round(result, 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    exp_scores = [math.exp(score) for score in scores]\n    sum_exp_scores = sum(exp_scores)\n    softmax_values = [round(score / sum_exp_scores, 4) for score in exp_scores]\n    return softmax_values"}
{"task_id": 24, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    \"\"\"\n    Simulates a single neuron with a sigmoid activation function for binary classification.\n    \n    Parameters:\n    - features: List of feature vectors (each vector is a list of floats).\n    - labels: List of true binary labels (0 or 1).\n    - weights: List of weights for each feature.\n    - bias: Bias term for the neuron.\n    \n    Returns:\n    - Predicted probabilities after sigmoid activation (rounded to 4 decimals).\n    - Mean squared error between predicted probabilities and true labels (rounded to 4 decimals).\n    \"\"\"\n\n    def sigmoid(z):\n        return 1 / (1 + math.exp(-z))\n    predictions = []\n    for x in features:\n        z = sum((w * f for (w, f) in zip(weights, x))) + bias\n        prob = sigmoid(z)\n        predictions.append(prob)\n    predictions = np.array(predictions).round(4)\n    mse = np.mean([(p - y) ** 2 for (p, y) in zip(predictions, labels)])\n    mse = round(mse, 4)\n    return (predictions.tolist(), mse)"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    weights = initial_weights.copy()\n    bias = initial_bias\n    mse_values = []\n    for _ in range(epochs):\n        z = np.dot(features, weights) + bias\n        predictions = 1 / (1 + np.exp(-z))\n        mse = np.mean((predictions - labels) ** 2)\n        mse_values.append(round(mse, 4))\n        error = predictions - labels\n        d_weights = np.dot(features.T, error) / len(labels)\n        d_bias = np.mean(error)\n        weights -= learning_rate * d_weights\n        bias -= learning_rate * d_bias\n    weights = np.round(weights, 4)\n    bias = round(bias, 4)\n    mse_values = [round(mse, 4) for mse in mse_values]\n    return (weights, bias, mse_values)"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data + other.data, _children=(self, other), _op='+')\n\n        def _backward():\n            self.grad += out.grad * 1\n            other.grad += out.grad * 1\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data * other.data, _children=(self, other), _op='*')\n\n        def _backward():\n            self.grad += out.grad * other.data\n            other.grad += out.grad * self.data\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(self.data if self.data > 0 else 0, _children=(self,), _op='ReLU')\n\n        def _backward():\n            self.grad += (out.data > 0) * out.grad\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1\n        for node in reversed(topo):\n            node._backward()\n\n    def __neg__(self):\n        return self * -1\n\n    def __radd__(self, other):\n        return self + other\n\n    def __sub__(self, other):\n        return self + -other\n\n    def __rsub__(self, other):\n        return other + -self\n\n    def __rmul__(self, other):\n        return self * other\n\n    def __truediv__(self, other):\n        return self * other ** (-1)\n\n    def __rtruediv__(self, other):\n        return other * self ** (-1)\n\n    def __pow__(self, other):\n        assert isinstance(other, (int, float)), 'Only int/float exponents are supported'\n        out = Value(self.data ** other, _children=(self,), _op=f'**{other}')\n\n        def _backward():\n            self.grad += out.grad * other * self.data ** (other - 1)\n        out._backward = _backward\n        return out\n\n    def __repr__(self):\n        return f'Value(data={self.data}, grad={self.grad})'"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    \"\"\"\n    Computes the transformation matrix P from basis B to basis C in R^3.\n    \n    Parameters:\n    B (list[list[int]]): Basis vectors of B as columns (3x3 matrix).\n    C (list[list[int]]): Basis vectors of C as columns (3x3 matrix).\n    \n    Returns:\n    list[list[float]]: Transformation matrix P from B to C, rounded to 4 decimal places.\n    \"\"\"\n    B_matrix = np.array(B, dtype=float)\n    C_matrix = np.array(C, dtype=float)\n    P = np.linalg.inv(C_matrix) @ B_matrix\n    P_rounded = np.round(P, 4)\n    return P_rounded.tolist()"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    A_T_A = np.dot(A.T, A)\n    (eigenvalues, eigenvectors) = np.linalg.eig(A_T_A)\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    singular_values = np.sqrt(eigenvalues)\n    S = np.diag(singular_values)\n    V = eigenvectors\n    U = np.zeros_like(A)\n    for i in range(2):\n        if singular_values[i] > 1e-10:\n            U[:, i] = np.dot(A, V[:, i]) / singular_values[i]\n        else:\n            U[:, i] = np.zeros(2)\n    U = np.round(U, 4)\n    S = np.round(S, 4)\n    V = np.round(V, 4)\n    return (U.tolist(), S.tolist(), V.tolist())"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    \"\"\"\n    Randomly shuffles two numpy arrays X and y in the same order.\n    \n    Parameters:\n    - X (np.ndarray): Features array.\n    - y (np.ndarray): Labels array.\n    - seed (int, optional): Seed for random number generator for reproducibility.\n    \n    Returns:\n    - X_shuffled (list): Shuffled features as a Python list.\n    - y_shuffled (list): Shuffled labels as a Python list.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    combined = np.column_stack((X, y))\n    np.random.shuffle(combined)\n    X_shuffled = combined[:, :-1]\n    y_shuffled = combined[:, -1]\n    return (X_shuffled.tolist(), y_shuffled.tolist())"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    \"\"\"\n    Yields batches of data from the input arrays X and optionally y.\n    \n    Parameters:\n    - X (np.ndarray): Input data array.\n    - y (np.ndarray, optional): Labels array. Defaults to None.\n    - batch_size (int): Number of samples per batch. Defaults to 64.\n    \n    Yields:\n    - If y is provided: (X_batch.tolist(), y_batch.tolist())\n    - If y is not provided: X_batch.tolist()\n    \"\"\"\n    n_samples = X.shape[0]\n    for i in range(0, n_samples, batch_size):\n        batch_end = min(i + batch_size, n_samples)\n        X_batch = X[i:batch_end]\n        if y is not None:\n            y_batch = y[i:batch_end]\n            yield (X_batch.tolist(), y_batch.tolist())\n        else:\n            yield X_batch.tolist()"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    \"\"\"\n    Divides the dataset into two subsets based on the specified feature and threshold.\n    \n    Parameters:\n    - X: numpy array of shape (n_samples, n_features)\n    - feature_i: int, the index of the feature to use for splitting\n    - threshold: float, the threshold value for splitting\n    \n    Returns:\n    - left: list of samples where feature_i >= threshold\n    - right: list of samples where feature_i < threshold\n    \"\"\"\n    feature_values = X[:, feature_i]\n    left_mask = feature_values >= threshold\n    right_mask = feature_values < threshold\n    left = X[left_mask].tolist()\n    right = X[right_mask].tolist()\n    return (left, right)"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    (n_samples, n_features) = X.shape\n    features = [np.ones(n_samples)]\n    for deg in range(1, degree + 1):\n        for comb in combinations_with_replacement(range(n_features), deg):\n            feature = np.prod(X[:, comb], axis=1)\n            features.append(feature)\n    return np.column_stack(features).tolist()"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    \"\"\"\n    Generate random subsets of a given dataset.\n\n    Parameters:\n    - X: 2D numpy array of shape (n_samples, n_features)\n    - y: 1D numpy array of shape (n_samples,)\n    - n_subsets: Number of random subsets to generate\n    - replacements: Boolean indicating whether to sample with replacement\n    - seed: Random seed for reproducibility\n\n    Returns:\n    - List of tuples, each containing a subset (X_subset, y_subset)\n    \"\"\"\n    np.random.seed(seed)\n    n_samples = X.shape[0]\n    subsets = []\n    for _ in range(n_subsets):\n        if replacements:\n            indices = np.random.choice(n_samples, size=n_samples, replace=True)\n        else:\n            indices = np.random.permutation(n_samples)\n        X_subset = X[indices]\n        y_subset = y[indices]\n        subsets.append((X_subset, y_subset))\n    return [(x.tolist(), y.tolist()) for (x, y) in subsets]"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    \"\"\"\n    Perform one-hot encoding on a 1D numpy array of integer values.\n    \n    Parameters:\n    x (np.ndarray): 1D array of integer values (nominal).\n    n_col (int, optional): Number of columns for the one-hot encoded array.\n                           If None, it is inferred from the maximum value in x + 1.\n    \n    Returns:\n    list: One-hot encoded array as a Python list.\n    \"\"\"\n    x = np.array(x)\n    if n_col is None:\n        n_col = np.max(x) + 1\n    n_row = x.shape[0]\n    one_hot = np.zeros((n_row, n_col))\n    one_hot[np.arange(n_row), x] = 1\n    return one_hot.tolist()"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    \"\"\"\n    Convert a 1D numpy array into a diagonal matrix.\n\n    Parameters:\n    x (np.ndarray): A 1D numpy array.\n\n    Returns:\n    list: A 2D list representing the diagonal matrix.\n    \"\"\"\n    diagonal_matrix = np.diag(x)\n    return diagonal_matrix.tolist()"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    \"\"\"\n    Calculate the accuracy score between true and predicted labels.\n    \n    Parameters:\n    y_true (np.ndarray): 1D array of true labels.\n    y_pred (np.ndarray): 1D array of predicted labels.\n    \n    Returns:\n    float: Accuracy score rounded to 4 decimal places.\n    \"\"\"\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Input arrays must have the same shape.')\n    correct = np.sum(y_true == y_pred)\n    total = y_true.shape[0]\n    accuracy = correct / total\n    return round(accuracy, 4)"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    \"\"\"\n    Calculate the correlation matrix for a given dataset.\n    \n    Parameters:\n    - X: 2D numpy array (n_samples, n_features)\n    - Y: Optional 2D numpy array (n_samples, m_features)\n    \n    Returns:\n    - Correlation matrix as a 2D numpy array, rounded to 4 decimal places.\n    \"\"\"\n    if Y is None:\n        Y = X\n    X_centered = X - np.mean(X, axis=0)\n    Y_centered = Y - np.mean(Y, axis=0)\n    std_X = np.std(X, axis=0, ddof=0)\n    std_Y = np.std(Y, axis=0, ddof=0)\n    std_X[std_X == 0] = 1\n    std_Y[std_Y == 0] = 1\n    covariance = np.dot(X_centered.T, Y_centered) / X.shape[0]\n    correlation = covariance / np.outer(std_X, std_Y)\n    return np.round(correlation, 4).tolist()"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_fit(X, y, n_clf):\n    (n_samples, n_features) = X.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    classifiers = []\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_clf = None\n        for feature_idx in range(n_features):\n            feature_values = X[:, feature_idx]\n            unique_values = np.unique(feature_values)\n            thresholds = (unique_values[:-1] + unique_values[1:]) / 2\n            for threshold in thresholds:\n                for direction in [1, -1]:\n                    predictions = np.where(feature_values <= threshold, 1 if direction == 1 else -1, -1 if direction == 1 else 1)\n                    error = np.sum(weights[y != predictions])\n                    if error > 0.5:\n                        error = 1 - error\n                        predictions = -predictions\n                    if error < best_error:\n                        best_error = error\n                        best_clf = {'feature_idx': feature_idx, 'threshold': threshold, 'direction': direction, 'error': error, 'alpha': 0}\n        epsilon = best_error\n        alpha = 0.5 * np.log((1 - epsilon) / epsilon)\n        predictions = np.where(X[:, best_clf['feature_idx']] <= best_clf['threshold'], 1 if best_clf['direction'] == 1 else -1, -1 if best_clf['direction'] == 1 else 1)\n        weights *= np.exp(-alpha * y * predictions)\n        weights /= np.sum(weights)\n        best_clf['alpha'] = alpha\n        best_clf = {k: round(v, 4) if isinstance(v, (int, float)) else v for (k, v) in best_clf.items()}\n        classifiers.append(best_clf)\n    return classifiers\nX = np.array([[1, 2], [2, 3], [3, 1], [4, 2]])\ny = np.array([1, 1, -1, -1])\nn_clf = 2"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list):\n    scores = np.array(scores, dtype=np.float64)\n    shifted_scores = scores - np.max(scores)\n    log_sum_exp = np.log(np.sum(np.exp(shifted_scores)))\n    log_softmax_values = shifted_scores - log_sum_exp\n    return np.round(log_softmax_values, 4).tolist()"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport copy\nimport math\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.optimizer = None\n\n    def initialize(self, optimizer):\n        if self.input_shape is None:\n            raise ValueError('Input shape must be provided for weight initialization.')\n        limit = 1 / math.sqrt(self.input_shape[0])\n        self.W = np.random.uniform(-limit, limit, size=(self.input_shape[0], self.n_units))\n        self.w0 = np.zeros((1, self.n_units))\n        self.optimizer = copy.copy(optimizer)\n\n    def parameters(self):\n        return self.W.size + self.w0.size\n\n    def forward_pass(self, X, training=True):\n        self.layer_input = X\n        output = np.dot(X, self.W) + self.w0\n        return output\n\n    def backward_pass(self, accum_grad):\n        grad_input = np.dot(accum_grad, self.W.T)\n        if self.trainable:\n            grad_W = np.dot(self.layer_input.T, accum_grad)\n            grad_w0 = np.sum(accum_grad, axis=0, keepdims=True)\n            self.W = self.optimizer.update(self.W, grad_W)\n            self.w0 = self.optimizer.update(self.w0, grad_w0)\n        return grad_input\n\n    def output_shape(self):\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    \"\"\"\n    Perform a 2D convolution on the input matrix using the given kernel, padding, and stride.\n    \n    Parameters:\n    - input_matrix (np.ndarray): 2D input matrix (image).\n    - kernel (np.ndarray): 2D convolutional kernel.\n    - padding (int): Number of zero-padding layers to add around the input.\n    - stride (int): Stride of the convolution.\n    \n    Returns:\n    - output (list): 2D output matrix as a Python list.\n    \"\"\"\n    (in_h, in_w) = input_matrix.shape\n    (k_h, k_w) = kernel.shape\n    padded_input = np.pad(input_matrix, pad_width=padding, mode='constant', constant_values=0)\n    out_h = (in_h + 2 * padding - k_h) // stride + 1\n    out_w = (in_w + 2 * padding - k_w) // stride + 1\n    output = np.zeros((out_h, out_w))\n    for i in range(out_h):\n        for j in range(out_w):\n            start_i = i * stride\n            start_j = j * stride\n            region = padded_input[start_i:start_i + k_h, start_j:start_j + k_w]\n            output[i, j] = np.sum(region * kernel)\n    output = np.round(output, 4)\n    return output.tolist()"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    return max(0.0, z)"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    \"\"\"\n    Compute the Ridge Regression loss function.\n    \n    Parameters:\n    - X (np.ndarray): Feature matrix of shape (n_samples, n_features)\n    - w (np.ndarray): Coefficient vector of shape (n_features,)\n    - y_true (np.ndarray): True labels of shape (n_samples,)\n    - alpha (float): Regularization parameter\n    \n    Returns:\n    - float: The Ridge loss rounded to 4 decimal places\n    \"\"\"\n    y_pred = X @ w\n    mse = np.mean((y_true - y_pred) ** 2)\n    l2_penalty = alpha * np.sum(w ** 2)\n    total_loss = mse + l2_penalty\n    return round(total_loss, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float:\n    \"\"\"\n    Applies the Leaky ReLU activation function to the input z.\n    \n    Parameters:\n    z (float): Input value.\n    alpha (float): Slope for negative inputs. Default is 0.01.\n    \n    Returns:\n    float: The result of applying Leaky ReLU to z.\n    \"\"\"\n    return z if z > 0 else alpha * z"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    \"\"\"\n    Compute the linear kernel between two input vectors x1 and x2.\n    \n    Parameters:\n    x1 (array-like): First input vector.\n    x2 (array-like): Second input vector.\n    \n    Returns:\n    float: The linear kernel value (dot product of x1 and x2).\n    \"\"\"\n    x1 = np.array(x1)\n    x2 = np.array(x2)\n    return np.dot(x1, x2)"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    \"\"\"\n    Calculate the precision metric for binary classification.\n    \n    Parameters:\n    y_true (np.ndarray): True binary labels (0 or 1).\n    y_pred (np.ndarray): Predicted binary labels (0 or 1).\n    \n    Returns:\n    float: Precision score.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    true_positives = np.sum((y_true == 1) & (y_pred == 1))\n    false_positives = np.sum((y_true == 0) & (y_pred == 1))\n    if true_positives + false_positives == 0:\n        return 0.0\n    return true_positives / (true_positives + false_positives)"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    \"\"\"\n    Perform gradient descent optimization using specified method.\n    \n    Parameters:\n    - X: np.ndarray, shape (n_samples, n_features)\n    - y: np.ndarray, shape (n_samples,)\n    - weights: np.ndarray, shape (n_features,)\n    - learning_rate: float\n    - n_iterations: int\n    - batch_size: int, size of mini-batch for mini-batch GD\n    - method: str, one of ['batch', 'stochastic', 'mini-batch']\n    \n    Returns:\n    - weights: optimized weights as a list\n    - losses: list of MSE losses at each iteration (rounded to 4 decimals)\n    \"\"\"\n    n_samples = X.shape[0]\n    weights = np.array(weights, dtype=np.float64)\n    losses = []\n    for _ in range(n_iterations):\n        if method == 'batch':\n            batch_indices = np.arange(n_samples)\n        elif method == 'stochastic':\n            batch_indices = np.random.choice(n_samples, size=1, replace=False)\n        elif method == 'mini-batch':\n            batch_indices = np.random.choice(n_samples, size=batch_size, replace=False)\n        else:\n            raise ValueError(\"Invalid method. Choose from 'batch', 'stochastic', or 'mini-batch'.\")\n        X_batch = X[batch_indices]\n        y_batch = y[batch_indices]\n        predictions = X_batch @ weights\n        error = predictions - y_batch\n        gradient = X_batch.T @ error / len(batch_indices)\n        weights -= learning_rate * gradient\n        y_pred = X @ weights\n        loss = np.mean((y_pred - y) ** 2)\n        losses.append(round(loss, 4))\n    weights = np.round(weights, 4).tolist()\n    return (weights, losses)\nX = np.array([[1, 2], [1, 3], [1, 4], [1, 5]])\ny = np.array([2, 3, 4, 5])\nweights = [0.0, 0.0]\nlearning_rate = 0.01\nn_iterations = 100\nbatch_size = 2"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    \"\"\"\n    Converts a given matrix into its Reduced Row Echelon Form (RREF).\n    \n    Parameters:\n        matrix (list of lists or numpy.ndarray): Input matrix.\n        \n    Returns:\n        list: RREF of the input matrix as a Python list.\n    \"\"\"\n    matrix = np.array(matrix, dtype=float)\n    (rows, cols) = matrix.shape\n    r = 0\n    for c in range(cols):\n        pivot = np.argmax(np.abs(matrix[r:, c])) + r\n        if matrix[pivot, c] == 0:\n            continue\n        matrix[[r, pivot]] = matrix[[pivot, r]]\n        matrix[r] = matrix[r] / matrix[r, c]\n        for i in range(rows):\n            if i != r and matrix[i, c] != 0:\n                matrix[i] = matrix[i] - matrix[i, c] * matrix[r]\n        r += 1\n    non_zero_rows = matrix[np.any(matrix != 0, axis=1)]\n    zero_rows = matrix[~np.any(matrix != 0, axis=1)]\n    matrix = np.vstack((non_zero_rows, zero_rows))\n    return matrix.tolist()"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=10):\n    \"\"\"\n    Implements the Adam optimization algorithm to minimize a given objective function.\n    \n    Parameters:\n        f (function): Objective function to be minimized.\n        grad (function): Function that computes the gradient of f.\n        x0 (array-like): Initial parameter values.\n        learning_rate (float): Step size for the optimizer (default: 0.001).\n        beta1 (float): Exponential decay rate for the first moment estimates (default: 0.9).\n        beta2 (float): Exponential decay rate for the second moment estimates (default: 0.999).\n        epsilon (float): A small constant for numerical stability (default: 1e-8).\n        num_iterations (int): Number of iterations to run the optimizer (default: 10).\n    \n    Returns:\n        list: Optimized parameters as a Python list rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x0, dtype=np.float64)\n    m = np.zeros_like(x)\n    v = np.zeros_like(x)\n    t = 0\n    for _ in range(num_iterations):\n        t += 1\n        grad_x = grad(x)\n        m = beta1 * m + (1 - beta1) * grad_x\n        v = beta2 * v + (1 - beta2) * grad_x ** 2\n        m_hat = m / (1 - beta1 ** t)\n        v_hat = v / (1 - beta2 ** t)\n        x = x - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    return np.round(x, 4).tolist()"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    (n_samples, n_features) = X.shape\n    w = np.zeros(n_features)\n    b = 0.0\n    for _ in range(max_iter):\n        y_pred = X @ w + b\n        dw = -1 / n_samples * X.T @ (y - y_pred) + alpha * np.sign(w)\n        db = -1 / n_samples * np.sum(y - y_pred)\n        w_new = w - learning_rate * dw\n        b_new = b - learning_rate * db\n        if np.linalg.norm(w_new - w) < tol and abs(b_new - b) < tol:\n            break\n        (w, b) = (w_new, b_new)\n    w_rounded = np.round(w, 4)\n    b_rounded = round(b, 4)\n    return (w_rounded.tolist(), b_rounded)"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    m = len(source)\n    n = len(target)\n    dp = np.zeros((m + 1, n + 1), dtype=int)\n    for i in range(m + 1):\n        dp[i][0] = i\n    for j in range(n + 1):\n        dp[0][j] = j\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            cost = 0 if source[i - 1] == target[j - 1] else 1\n            dp[i][j] = dp[i - 1][j - 1] + cost\n            if i > 1 and j > 1 and (source[i - 1] == target[j - 2]) and (source[i - 2] == target[j - 1]):\n                dp[i][j] = min(dp[i][j], dp[i - 2][j - 2] + 1)\n            dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1)\n            dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1)\n    return dp[m][n]"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    TP = np.sum((y_true == 1) & (y_pred == 1))\n    FN = np.sum((y_true == 1) & (y_pred == 0))\n    denominator = TP + FN\n    if denominator == 0:\n        return 0.0\n    recall_value = TP / denominator\n    return round(recall_value, 3)"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    \"\"\"\n    Compute the self-attention mechanism output.\n    \n    Parameters:\n    - X: Input sequence of shape (seq_len, input_dim)\n    - W_q: Query weight matrix of shape (input_dim, d_k)\n    - W_k: Key weight matrix of shape (input_dim, d_k)\n    - W_v: Value weight matrix of shape (input_dim, d_v)\n    \n    Returns:\n    - Output of self-attention as a list (after reshaping using tolist())\n    \"\"\"\n    Q = X @ W_q\n    K = X @ W_k\n    V = X @ W_v\n    scores = Q @ K.T\n    d_k = K.shape[1]\n    scores = scores / np.sqrt(d_k)\n    exp_scores = np.exp(scores - np.max(scores, axis=1, keepdims=True))\n    attention_weights = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)\n    output = attention_weights @ V\n    output = np.round(output, 4).tolist()\n    return output"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    h_prev = np.array(initial_hidden_state)\n    Wx = np.array(Wx)\n    Wh = np.array(Wh)\n    b = np.array(b)\n    for x in input_sequence:\n        x = np.array(x)\n        h_prev = np.tanh(np.dot(Wx, x) + np.dot(Wh, h_prev) + b)\n    return np.round(h_prev, 4).tolist()"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    \"\"\"\n    Applies a 2D translation to a list of [x, y] points.\n\n    Parameters:\n    - points: List of [x, y] coordinates.\n    - tx: Translation distance in x-direction.\n    - ty: Translation distance in y-direction.\n\n    Returns:\n    - List of translated [x, y] points.\n    \"\"\"\n    points_array = np.array(points)\n    translation = np.array([tx, ty])\n    translated_array = points_array + translation\n    return translated_array.tolist()"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    Compute the Kullback-Leibler (KL) divergence between two normal distributions.\n    \n    Parameters:\n    - mu_p (float): Mean of distribution P\n    - sigma_p (float): Standard deviation of distribution P\n    - mu_q (float): Mean of distribution Q\n    - sigma_q (float): Standard deviation of distribution Q\n    \n    Returns:\n    - float: KL divergence D_KL(P || Q)\n    \"\"\"\n    return 0.5 * (sigma_p ** 2 / sigma_q ** 2 + (mu_q - mu_p) ** 2 / sigma_q ** 2 - 1 - np.log(sigma_p ** 2 / sigma_q ** 2))"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    if x_ini is None:\n        x = np.zeros_like(b)\n    else:\n        x = np.array(x_ini, dtype=float)\n    for _ in range(n):\n        for i in range(A.shape[0]):\n            x[i] = (b[i] - np.dot(A[i, :i], x[:i]) - np.dot(A[i, i + 1:], x[i + 1:])) / A[i, i]\n    return np.round(x, 4).tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    \"\"\"\n    Solves the linear system Ax = b using Gaussian Elimination with partial pivoting.\n    \n    Parameters:\n    A (list of lists or numpy array): Coefficient matrix\n    b (list or numpy array): Right-hand side vector\n    \n    Returns:\n    x (list): Solution vector rounded to 4 decimal places\n    \"\"\"\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    n = len(b)\n    Ab = np.hstack([A, b.reshape(-1, 1)])\n    for i in range(n):\n        max_row = np.argmax(np.abs(Ab[i:, i])) + i\n        if Ab[max_row, i] == 0:\n            raise ValueError('Matrix is singular (no unique solution).')\n        Ab[[i, max_row]] = Ab[[max_row, i]]\n        for j in range(i + 1, n):\n            factor = Ab[j, i] / Ab[i, i]\n            Ab[j, i:] -= factor * Ab[i, i:]\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        x[i] = (Ab[i, -1] - np.dot(Ab[i, i + 1:n], x[i + 1:n])) / Ab[i, i]\n    return np.round(x, 4).tolist()\nA = [[2, 1, -1], [-3, -1, 2], [-2, 1, 2]]\nb = [8, -11, -3]"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \"\"\"\n        h = initial_hidden_state\n        c = initial_cell_state\n        hidden_states = []\n        for t in range(x.shape[1]):\n            x_h = np.hstack((x[:, t:t + 1], h))\n            f = self.sigmoid(np.dot(self.Wf, x_h) + self.bf)\n            i = self.sigmoid(np.dot(self.Wi, x_h) + self.bi)\n            c_tilde = np.tanh(np.dot(self.Wc, x_h) + self.bc)\n            c = f * c + i * c_tilde\n            o = self.sigmoid(np.dot(self.Wo, x_h) + self.bo)\n            h = o * np.tanh(c)\n            hidden_states.append(h.copy())\n        hidden_states = np.hstack(hidden_states)\n        return {'hidden_states': np.round(hidden_states, 4).tolist(), 'final_hidden_state': np.round(h, 4).tolist(), 'final_cell_state': np.round(c, 4).tolist()}\n\n    def sigmoid(self, x):\n        \"\"\"Sigmoid activation function\"\"\"\n        return 1 / (1 + np.exp(-x))"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\ndef compute_tf_idf(corpus, query):\n    if not corpus:\n        raise ValueError('Corpus is empty. Cannot compute TF-IDF.')\n    vocabulary = set((word for doc in corpus for word in doc))\n    word_to_index = {word: i for (i, word) in enumerate(vocabulary)}\n    num_docs = len(corpus)\n    vocab_size = len(vocabulary)\n    tf = np.zeros((num_docs, vocab_size))\n    df = np.zeros(vocab_size)\n    for (doc_idx, doc) in enumerate(corpus):\n        word_counts = {}\n        for word in doc:\n            word_counts[word] = word_counts.get(word, 0) + 1\n        total_words = len(doc)\n        for (word, count) in word_counts.items():\n            tf[doc_idx, word_to_index[word]] = count / total_words\n    for doc in corpus:\n        unique_words = set(doc)\n        for word in unique_words:\n            df[word_to_index[word]] += 1\n    idf = np.log((num_docs + 1) / (df + 1)) + 1\n    tf_idf = tf * idf\n    query_indices = []\n    for word in query:\n        if word in word_to_index:\n            query_indices.append(word_to_index[word])\n    result = tf_idf[:, query_indices]\n    result = np.round(result, 4).tolist()\n    return result"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    tp = np.sum((y_true == 1) & (y_pred == 1))\n    fp = np.sum((y_true == 0) & (y_pred == 1))\n    fn = np.sum((y_true == 1) & (y_pred == 0))\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0\n    f_score = (1 + beta ** 2) * (precision * recall) / (beta ** 2 * precision + recall) if precision + recall > 0 else 0\n    return round(f_score, 3)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, x):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n        \n        Args:\n            x: Input sequence of shape (input_size, sequence_length)\n            \n        Returns:\n            outputs: Output of the RNN at each time step of shape (output_size, sequence_length)\n            hiddens: Hidden states at each time step of shape (hidden_size, sequence_length)\n            inputs: Input sequence of shape (input_size, sequence_length)\n        \"\"\"\n        sequence_length = x.shape[1]\n        h = np.zeros((self.hidden_size, 1))\n        hiddens = np.zeros((self.hidden_size, sequence_length))\n        outputs = np.zeros((self.W_hy.shape[0], sequence_length))\n        inputs = x.copy()\n        for t in range(sequence_length):\n            x_t = x[:, t].reshape(-1, 1)\n            h = np.tanh(self.W_xh @ x_t + self.W_hh @ h + self.b_h)\n            y_t = self.W_hy @ h + self.b_y\n            hiddens[:, t] = h[:, 0]\n            outputs[:, t] = y_t[:, 0]\n        return (outputs, hiddens, inputs)\n\n    def backward(self, x, y, outputs, hiddens, learning_rate):\n        \"\"\"\n        Backward pass through the RNN using BPTT.\n        \n        Args:\n            x: Input sequence of shape (input_size, sequence_length)\n            y: Target sequence of shape (output_size, sequence_length)\n            outputs: Output of the RNN at each time step of shape (output_size, sequence_length)\n            hiddens: Hidden states at each time step of shape (hidden_size, sequence_length)\n            learning_rate: Learning rate for gradient descent\n            \n        Returns:\n            dW_xh: Gradient of W_xh\n            dW_hh: Gradient of W_hh\n            dW_hy: Gradient of W_hy\n            db_h: Gradient of b_h\n            db_y: Gradient of b_y\n        \"\"\"\n        sequence_length = x.shape[1]\n        input_size = x.shape[0]\n        output_size = y.shape[0]\n        dW_xh = np.zeros_like(self.W_xh)\n        dW_hh = np.zeros_like(self.W_hh)\n        dW_hy = np.zeros_like(self.W_hy)\n        db_h = np.zeros_like(self.b_h)\n        db_y = np.zeros_like(self.b_y)\n        dh_next = np.zeros_like(hiddens[:, 0])\n        for t in reversed(range(sequence_length)):\n            x_t = x[:, t].reshape(-1, 1)\n            h_t = hiddens[:, t].reshape(-1, 1)\n            y_t = outputs[:, t].reshape(-1, 1)\n            y_true = y[:, t].reshape(-1, 1)\n            dy = y_t - y_true\n            dW_hy += dy @ h_t.T\n            db_y += dy\n            dy_h = self.W_hy.T @ dy\n            dh = dy_h + dh_next\n            dh_raw = (1 - h_t ** 2) * dh\n            dW_xh += dh_raw @ x_t.T\n            dW_hh += dh_raw @ hiddens[:, t - 1].reshape(-1, 1).T if t > 0 else dh_raw @ np.zeros((input_size, 1)).T\n            db_h += dh_raw\n            dh_next = self.W_hh.T @ dh_raw\n        for grad in [dW_xh, dW_hh, dW_hy, db_h, db_y]:\n            np.clip(grad, -1, 1, out=grad)\n        self.W_xh -= learning_rate * dW_xh\n        self.W_hh -= learning_rate * dW_hh\n        self.W_hy -= learning_rate * dW_hy\n        self.b_h -= learning_rate * db_h\n        self.b_y -= learning_rate * db_y\n        return (dW_xh, dW_hh, dW_hy, db_h, db_y)\n\n    def train(self, x, y, learning_rate=0.01, epochs=100):\n        \"\"\"\n        Train the RNN on a sequence prediction task.\n        \n        Args:\n            x: Input sequence of shape (input_size, sequence_length)\n            y: Target sequence of shape (output_size, sequence_length)\n            learning_rate: Learning rate for gradient descent\n            epochs: Number of training epochs\n        \"\"\"\n        for epoch in range(epochs):\n            (outputs, hiddens, inputs) = self.forward(x)\n            loss = 0.5 * np.sum((outputs - y) ** 2)\n            if epoch % 10 == 0:\n                print(f'Epoch {epoch}, Loss: {loss:.4f}')\n            self.backward(x, y, outputs, hiddens, learning_rate)"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    if A.shape[0] != A.shape[1]:\n        raise ValueError('Matrix A must be square.')\n    if b.shape[0] != A.shape[0]:\n        raise ValueError('Vector b must be compatible with matrix A.')\n    if x0 is None:\n        x = np.zeros_like(b)\n    else:\n        x = x0.copy()\n    r = b - A @ x\n    p = r.copy()\n    rsold = r @ r\n    for i in range(n):\n        Ap = A @ p\n        alpha = rsold / (p @ Ap)\n        x = x + alpha * p\n        r = r - alpha * Ap\n        rsnew = r @ r\n        if np.sqrt(rsnew) < tol:\n            break\n        beta = rsnew / rsold\n        p = r + beta * p\n        rsold = rsnew\n    return x.round(8).tolist()\nA = np.array([[4, 1], [1, 3]])\nb = np.array([1, 2])\nx = conjugate_gradient(A, b, n=100)"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef gini_impurity(y: List[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    if not y:\n        return 0.0\n    counts = np.bincount(y)\n    total = len(y)\n    probabilities = counts / total\n    squared_probabilities = probabilities ** 2\n    sum_squared_probabilities = np.sum(squared_probabilities)\n    gini = 1 - sum_squared_probabilities\n    return round(gini, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    values = []\n    column_indices = []\n    row_pointer = [0]\n    for row in dense_matrix:\n        count = 0\n        for (col_index, value) in enumerate(row):\n            if value != 0:\n                values.append(value)\n                column_indices.append(col_index)\n                count += 1\n        row_pointer.append(row_pointer[-1] + count)\n    return (values, column_indices, row_pointer)"}
{"task_id": 66, "completion_id": 0, "solution": "def orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    import numpy as np\n    v = np.array(v)\n    L = np.array(L)\n    dot_vL = np.dot(v, L)\n    dot_LL = np.dot(L, L)\n    if dot_LL == 0:\n        raise ValueError('Cannot project onto the zero vector.')\n    scalar_proj = dot_vL / dot_LL\n    proj_vector = scalar_proj * L\n    return [round(x, 3) for x in proj_vector.tolist()]"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    if not dense_matrix or not dense_matrix[0]:\n        return ([], [], [0])\n    num_rows = len(dense_matrix)\n    num_cols = len(dense_matrix[0])\n    values = []\n    row_indices = []\n    col_ptr = [0]\n    for col in range(num_cols):\n        count = 0\n        for row in range(num_rows):\n            val = dense_matrix[row][col]\n            if val != 0:\n                values.append(val)\n                row_indices.append(row)\n                count += 1\n        col_ptr.append(col_ptr[-1] + count)\n    return (values, row_indices, col_ptr)\ndense_matrix = [[0, 0, 3], [4, 0, 0], [0, 5, 6]]"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    \"\"\"\n    Returns a list of basis vectors for the column space (image) of matrix A.\n    \n    Parameters:\n    A (list of lists or numpy.ndarray): A 2D matrix represented as a list of lists or a numpy array.\n    \n    Returns:\n    list: A list of column vectors (as lists) that form a basis for the column space of A.\n    \"\"\"\n    A = np.array(A, dtype=float)\n    A_rank = np.linalg.matrix_rank(A)\n    import sympy\n    A_sympy = sympy.Matrix(A)\n    (rref, pivots) = A_sympy.rref()\n    basis_columns = [A[:, i].tolist() for i in pivots]\n    rounded_basis = [np.round(column, 8).tolist() for column in basis_columns]\n    return rounded_basis"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    y_mean = np.mean(y_true)\n    tss = np.sum((y_true - y_mean) ** 2)\n    rss = np.sum((y_true - y_pred) ** 2)\n    r2 = 1 - rss / tss\n    return round(r2, 3)"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    if not img or not img[0]:\n        return -1\n    row_length = len(img[0])\n    total_brightness = 0\n    total_pixels = 0\n    for row in img:\n        if len(row) != row_length:\n            return -1\n        for pixel in row:\n            if not isinstance(pixel, int) or not 0 <= pixel <= 255:\n                return -1\n            total_brightness += pixel\n            total_pixels += 1\n    average_brightness = total_brightness / total_pixels\n    return round(average_brightness, 2)"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    \"\"\"\n    Calculate the Root Mean Square Error (RMSE) between two arrays.\n    \n    Parameters:\n    y_true (array-like): Ground truth (correct) target values.\n    y_pred (array-like): Estimated target values.\n    \n    Returns:\n    float: RMSE value rounded to three decimal places.\n    \n    Raises:\n    ValueError: If inputs are not of the same length or are empty.\n    TypeError: If inputs are not array-like.\n    \"\"\"\n    try:\n        y_true = np.asarray(y_true)\n        y_pred = np.asarray(y_pred)\n    except Exception as e:\n        raise TypeError('Both inputs must be array-like.') from e\n    if y_true.size == 0 or y_pred.size == 0:\n        raise ValueError('Input arrays must not be empty.')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Input arrays must have the same shape.')\n    squared_errors = (y_true - y_pred) ** 2\n    mean_squared_error = np.mean(squared_errors)\n    root_mean_squared_error = np.sqrt(mean_squared_error)\n    return round(root_mean_squared_error, 3)"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    \"\"\"\n    Calculate the Jaccard Index between two binary arrays.\n\n    Parameters:\n    y_true (array-like): True binary labels.\n    y_pred (array-like): Predicted binary labels.\n\n    Returns:\n    float: Jaccard Index rounded to three decimal places.\n    \"\"\"\n    y_true = np.asarray(y_true)\n    y_pred = np.asarray(y_pred)\n    intersection = np.sum(np.logical_and(y_true, y_pred))\n    union = np.sum(np.logical_or(y_true, y_pred))\n    if union == 0:\n        return 0.0\n    return round(intersection / union, 3)"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    \"\"\"\n    Calculate the Dice Score (S\u00f8rensen-Dice coefficient) between two binary arrays.\n\n    Parameters:\n    y_true (array-like): Ground truth (correct) labels.\n    y_pred (array-like): Predicted labels.\n\n    Returns:\n    float: Dice score rounded to 3 decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    intersection = np.sum(np.logical_and(y_true, y_pred))\n    sum_true = np.sum(y_true)\n    sum_pred = np.sum(y_pred)\n    if sum_true + sum_pred == 0:\n        return 1.0\n    dice = 2.0 * intersection / (sum_true + sum_pred)\n    return round(dice, 3)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef create_row_hv(row, dim, random_seeds):\n    composite_hv = np.zeros(dim)\n    for (feature_name, feature_value) in row.items():\n        seed = random_seeds.get(feature_name, 0)\n        np.random.seed(seed)\n        value_hv = np.random.choice([-1, 1], size=dim)\n        np.random.seed(hash(feature_name) % 2 ** 32)\n        name_hv = np.random.choice([-1, 1], size=dim)\n        bound_hv = name_hv * value_hv\n        composite_hv += bound_hv\n    composite_hv = np.tanh(composite_hv)\n    return composite_hv.tolist()"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    cm = [[0, 0], [0, 0]]\n    for (y_true, y_pred) in data:\n        cm[y_true][y_pred] += 1\n    return cm"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    if v1.shape != v2.shape:\n        raise ValueError('Input vectors must have the same shape.')\n    if np.linalg.norm(v1) == 0 or np.linalg.norm(v2) == 0:\n        raise ValueError('Input vectors cannot have zero magnitude.')\n    dot_product = np.dot(v1, v2)\n    magnitude_v1 = np.linalg.norm(v1)\n    magnitude_v2 = np.linalg.norm(v2)\n    similarity = dot_product / (magnitude_v1 * magnitude_v2)\n    return round(similarity, 3)"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    if len(actual) != len(predicted):\n        raise ValueError(\"The lengths of 'actual' and 'predicted' lists must be the same.\")\n    for label in actual + predicted:\n        if label not in {0, 1}:\n            raise ValueError(\"All elements in 'actual' and 'predicted' must be either 0 or 1.\")\n    tp = sum((a == 1 and p == 1 for (a, p) in zip(actual, predicted)))\n    fp = sum((a == 0 and p == 1 for (a, p) in zip(actual, predicted)))\n    tn = sum((a == 0 and p == 0 for (a, p) in zip(actual, predicted)))\n    fn = sum((a == 1 and p == 0 for (a, p) in zip(actual, predicted)))\n    confusion_matrix = [[tn, fp], [fn, tp]]\n    accuracy = (tp + tn) / (tp + fp + tn + fn) if tp + fp + tn + fn > 0 else 0\n    accuracy = round(accuracy, 3)\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0\n    f1_score = 2 * (precision * recall) / (precision + recall) if precision + recall > 0 else 0\n    f1_score = round(f1_score, 3)\n    specificity = tn / (tn + fp) if tn + fp > 0 else 0\n    specificity = round(specificity, 3)\n    negative_predictive_value = tn / (tn + fn) if tn + fn > 0 else 0\n    negative_predictive_value = round(negative_predictive_value, 3)\n    return (confusion_matrix, accuracy, f1_score, specificity, negative_predictive_value)"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\nfrom scipy import stats\ndef descriptive_statistics(data):\n    \"\"\"\n    Calculate descriptive statistics for a given dataset.\n\n    Parameters:\n    data (list or numpy.ndarray): A list or NumPy array of numerical values.\n\n    Returns:\n    dict: A dictionary containing various descriptive statistics.\n    \"\"\"\n    data = np.array(data)\n    stats_dict = {}\n    stats_dict['mean'] = round(np.mean(data), 4)\n    stats_dict['median'] = round(np.median(data), 4)\n    mode_result = stats.mode(data, keepdims=True)\n    stats_dict['mode'] = mode_result.mode[0]\n    stats_dict['variance'] = round(np.var(data, ddof=0), 4)\n    stats_dict['standard_deviation'] = round(np.std(data, ddof=0), 4)\n    stats_dict['25th_percentile'] = np.percentile(data, 25)\n    stats_dict['50th_percentile'] = np.percentile(data, 50)\n    stats_dict['75th_percentile'] = np.percentile(data, 75)\n    stats_dict['interquartile_range'] = stats_dict['75th_percentile'] - stats_dict['25th_percentile']\n    return stats_dict"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials\n    \"\"\"\n    combination = math.comb(n, k)\n    probability = combination * p ** k * (1 - p) ** (n - k)\n    return round(probability, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    :return: The PDF value rounded to 5 decimal places.\n    \"\"\"\n    coefficient = 1 / (std_dev * math.sqrt(2 * math.pi))\n    exponent = -(x - mean) ** 2 / (2 * std_dev ** 2)\n    pdf_value = coefficient * math.exp(exponent)\n    return round(pdf_value, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    \n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    :return: Probability of observing exactly k events, rounded to 5 decimal places\n    \"\"\"\n    probability = math.exp(-lam) * lam ** k / math.factorial(k)\n    return round(probability, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        int: The contrast of the image, defined as the difference between the maximum and minimum pixel values.\n    \"\"\"\n    if img.ndim != 2:\n        raise ValueError('Input image must be a 2D grayscale image.')\n    if img.dtype != np.uint8:\n        raise ValueError('Input image must have pixel values of type uint8 (0-255).')\n    max_pixel = np.max(img)\n    min_pixel = np.min(img)\n    contrast = max_pixel - min_pixel\n    return contrast"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    \n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    \n    Returns:\n        float: The dot product of the two vectors.\n    \"\"\"\n    return np.dot(vec1, vec2)"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n\n    Returns:\n        list[list[float]]: A nested list where each inner list contains the polynomial features of the corresponding data point.\n    \"\"\"\n    if degree < 0:\n        return []\n    result = []\n    for x in data:\n        features = [x ** i for i in range(1, degree + 1)]\n        result.append([round(f, 8) for f in features])\n    return result"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    if position <= 0 or d_model <= 0:\n        return -1\n    pos = np.arange(position)\n    dim = np.arange(d_model)\n    angle_rates = 1 / np.power(10000, 2 * (dim // 2) / np.float32(d_model))\n    angle_rads = np.outer(pos, angle_rates)\n    angle_rads[:, 0::2] = np.sin(angle_rads[:, 0::2])\n    angle_rads[:, 1::2] = np.cos(angle_rads[:, 1::2])\n    return angle_rads.astype(np.float16).tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    elif training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    else:\n        return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    parameter = parameter - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    return (np.round(parameter, 5).tolist(), np.round(m, 5).tolist(), np.round(v, 5).tolist())"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    \"\"\"\n    Generate text using a simplified GPT-2-like architecture.\n    \n    Args:\n        prompt: Initial text to guide the generation process.\n        n_tokens_to_generate: Number of tokens to generate.\n        \n    Returns:\n        Generated text as a string.\n    \"\"\"\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    token_ids = encoder.encode(prompt)\n    for _ in range(n_tokens_to_generate):\n        seq_len = len(token_ids)\n        tok_emb = params['wte'][token_ids]\n        pos_emb = params['wpe'][:seq_len]\n        x = tok_emb + pos_emb\n        x = layer_norm(x, np.ones(x.shape[1]), np.zeros(x.shape[1]))\n        next_token_id = predict_next_token(x[-1], params['wte'])\n        token_ids.append(next_token_id)\n    return encoder.decode(token_ids)\ndef layer_norm(x: np.ndarray, gamma: np.ndarray, beta: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Apply layer normalization to the input.\n    \n    Args:\n        x: Input tensor of shape (seq_len, dim).\n        gamma: Scale parameter of shape (dim,).\n        beta: Offset parameter of shape (dim,).\n        \n    Returns:\n        Normalized tensor of the same shape as x.\n    \"\"\"\n    mean = np.mean(x, axis=0)\n    variance = np.var(x, axis=0)\n    std = np.sqrt(variance + 1e-08)\n    return gamma * (x - mean) / std + beta\ndef predict_next_token(last_emb: np.ndarray, wte: np.ndarray) -> int:\n    \"\"\"\n    Predict the next token based on the last embedding.\n    \n    Args:\n        last_emb: Last embedding in the sequence.\n        wte: Token embeddings matrix.\n        \n    Returns:\n        Predicted token ID.\n    \"\"\"\n    similarities = np.dot(wte, last_emb) / (np.linalg.norm(wte, axis=1) * np.linalg.norm(last_emb))\n    return np.argmax(similarities)"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        exp_values = np.exp(values - np.max(values))\n        return exp_values / exp_values.sum()\n    Q = np.array(crystal_values).reshape(n, dimension)\n    K = Q\n    V = Q\n    attention_scores = np.dot(Q, K.T) / np.sqrt(dimension)\n    attention_weights = np.apply_along_axis(softmax, 1, attention_scores)\n    weighted_pattern = np.dot(attention_weights, V)\n    result = [round(float(val), 4) for val in weighted_pattern.flatten()]\n    return result"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    corpus_tokens = [doc.lower().split() for doc in corpus]\n    query_tokens = query.lower().split()\n    N = len(corpus_tokens)\n    avgdl = np.mean([len(doc) for doc in corpus_tokens])\n    df = Counter()\n    for term in query_tokens:\n        for doc in corpus_tokens:\n            if term in doc:\n                df[term] += 1\n    scores = []\n    for (i, doc) in enumerate(corpus_tokens):\n        score = 0.0\n        doc_len = len(doc)\n        for term in query_tokens:\n            if term in df:\n                tf = doc.count(term)\n                numerator = tf * (k1 + 1)\n                denominator = tf + k1 * (1 - b + b * (doc_len / avgdl))\n                idf = np.log((N - df[term] + 0.5) / (df[term] + 0.5) + 1)\n                score += idf * (numerator / denominator)\n        scores.append(round(score, 3))\n    return scores"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    true_positives = 0\n    false_positives = 0\n    false_negatives = 0\n    for (true, pred) in zip(y_true, y_pred):\n        if true == 1 and pred == 1:\n            true_positives += 1\n        elif true == 0 and pred == 1:\n            false_positives += 1\n        elif true == 1 and pred == 0:\n            false_negatives += 1\n    if true_positives + false_positives == 0:\n        precision = 0.0\n    else:\n        precision = true_positives / (true_positives + false_positives)\n    if true_positives + false_negatives == 0:\n        recall = 0.0\n    else:\n        recall = true_positives / (true_positives + false_negatives)\n    if precision + recall == 0:\n        f1 = 0.0\n    else:\n        f1 = 2 * (precision * recall) / (precision + recall)\n    return round(f1, 3)\ny_true = [1, 0, 1, 1, 0, 1]\ny_pred = [1, 0, 0, 1, 0, 0]"}
{"task_id": 92, "completion_id": 0, "solution": "import math\nPI = 3.14159\ndef power_grid_forecast(consumption_data):\n    detrended_data = []\n    for i in range(1, len(consumption_data) + 1):\n        fluctuation = 10 * math.sin(2 * PI * i / 10)\n        detrended = consumption_data[i - 1] - fluctuation\n        detrended_data.append(detrended)\n    n = len(detrended_data)\n    x = list(range(1, n + 1))\n    y = detrended_data\n    sum_x = sum(x)\n    sum_y = sum(y)\n    sum_xy = sum([xi * yi for (xi, yi) in zip(x, y)])\n    sum_x2 = sum([xi ** 2 for xi in x])\n    m = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x ** 2)\n    b = (sum_y - m * sum_x) / n\n    predicted_base = m * 15 + b\n    fluctuation_day_15 = 10 * math.sin(2 * PI * 15 / 10)\n    predicted_total = predicted_base + fluctuation_day_15\n    safety_margin = 1.05\n    final_prediction = math.ceil(predicted_total * safety_margin)\n    return final_prediction"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Input arrays must have the same shape.')\n    absolute_errors = np.abs(y_true - y_pred)\n    mean_absolute_error = np.mean(absolute_errors)\n    return round(mean_absolute_error, 3)"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray) -> tuple:\n    \"\"\"\n    Compute Query, Key, and Value matrices.\n    \n    Args:\n        X: Input matrix of shape (seq_len, input_dim).\n        W_q: Query weight matrix of shape (input_dim, hidden_dim).\n        W_k: Key weight matrix of shape (input_dim, hidden_dim).\n        W_v: Value weight matrix of shape (input_dim, hidden_dim).\n    \n    Returns:\n        Q, K, V: Query, Key, and Value matrices of shape (seq_len, hidden_dim).\n    \"\"\"\n    Q = X @ W_q\n    K = X @ W_k\n    V = X @ W_v\n    return (Q, K, V)\ndef self_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute the self-attention output.\n    \n    Args:\n        Q: Query matrix of shape (seq_len, hidden_dim).\n        K: Key matrix of shape (seq_len, hidden_dim).\n        V: Value matrix of shape (seq_len, hidden_dim).\n    \n    Returns:\n        Output of self-attention of shape (seq_len, hidden_dim).\n    \"\"\"\n    d_k = K.shape[1]\n    scores = Q @ K.T / np.sqrt(d_k)\n    attention_weights = np.softmax(scores, axis=1)\n    output = attention_weights @ V\n    return output\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    \"\"\"\n    Multi-head attention mechanism.\n    \n    Args:\n        X: Input matrix of shape (seq_len, input_dim).\n        W_q: Query weight matrix of shape (input_dim, hidden_dim).\n        W_k: Key weight matrix of shape (input_dim, hidden_dim).\n        W_v: Value weight matrix of shape (input_dim, hidden_dim).\n        n_heads: Number of attention heads.\n    \n    Returns:\n        Output of multi-head attention as a Python list (after reshaping and rounding).\n    \"\"\"\n    (seq_len, input_dim) = X.shape\n    hidden_dim = W_q.shape[1]\n    head_dim = hidden_dim // n_heads\n    W_q_heads = np.split(W_q, n_heads, axis=1)\n    W_k_heads = np.split(W_k, n_heads, axis=1)\n    W_v_heads = np.split(W_v, n_heads, axis=1)\n    outputs = []\n    for i in range(n_heads):\n        W_q_head = W_q_heads[i]\n        W_k_head = W_k_heads[i]\n        W_v_head = W_v_heads[i]\n        (Q, K, V) = compute_qkv(X, W_q_head, W_k_head, W_v_head)\n        head_output = self_attention(Q, K, V)\n        outputs.append(head_output)\n    output = np.concatenate(outputs, axis=1)\n    output = np.round(output, 4)\n    return output.tolist()"}
{"task_id": 95, "completion_id": 0, "solution": "def phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError('Input lists must be of the same length.')\n    n11 = sum((1 for (a, b) in zip(x, y) if a == 1 and b == 1))\n    n10 = sum((1 for (a, b) in zip(x, y) if a == 1 and b == 0))\n    n01 = sum((1 for (a, b) in zip(x, y) if a == 0 and b == 1))\n    n00 = sum((1 for (a, b) in zip(x, y) if a == 0 and b == 0))\n    n = len(x)\n    phi = (n11 * n00 - n10 * n01) / ((n11 + n10) * (n11 + n01) * (n00 + n10) * (n00 + n01)) ** 0.5\n    return round(phi, 4)\nx = [1, 0, 1, 1, 0, 0, 1]\ny = [0, 0, 1, 1, 0, 1, 1]"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    return max(0.0, min(1.0, 0.2 * x + 0.5))"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value\n    \"\"\"\n    if x > 0:\n        return round(x, 4)\n    else:\n        return round(alpha * (math.exp(x) - 1), 4)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    if x > 0:\n        return x\n    else:\n        return alpha * x"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x)\n    \"\"\"\n    if x > 20:\n        return round(x, 4)\n    elif x < -20:\n        return round(math.exp(x), 4)\n    else:\n        return round(math.log(1 + math.exp(x)), 4)"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input, rounded to the 4th decimal place\n    \"\"\"\n    return round(x / (1 + abs(x)), 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    rhos = np.array(rhos)\n    A = np.array(A)\n    pi_theta_old = np.array(pi_theta_old)\n    pi_theta_ref = np.array(pi_theta_ref)\n    rhos_clipped = np.clip(rhos, 1 - epsilon, 1 + epsilon)\n    rhos_ref = np.array(rhos) / pi_theta_ref\n    rhos_ref_clipped = np.clip(rhos_ref, 1 - epsilon, 1 + epsilon)\n    surrogate_objective = np.minimum(rhos * A, rhos_clipped * A)\n    kl_divergence = np.sum(pi_theta_old * np.log(pi_theta_old / pi_theta_ref))\n    objective = np.mean(surrogate_objective) - beta * kl_divergence\n    return round(objective, 6)\nrhos = [1.1, 0.95, 1.05, 0.9]\nA = [0.5, -0.3, 0.8, -0.1]\npi_theta_old = [0.25, 0.25, 0.25, 0.25]\npi_theta_ref = [0.2, 0.2, 0.3, 0.3]"}
{"task_id": 102, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value, rounded to the nearest 4th decimal\n    \"\"\"\n    return round(x / (1 + math.exp(-x)), 4)"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x > 0:\n        result = scale * x\n    else:\n        result = scale * alpha * (np.exp(x) - 1)\n    return round(result, 4)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N \u00d7 D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    z = np.dot(X, weights) + bias\n    probabilities = 1 / (1 + np.exp(-z))\n    predictions = (probabilities >= 0.5).astype(int)\n    return predictions.tolist()"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    (N, M) = X.shape\n    C = len(np.unique(y))\n    y_one_hot = np.zeros((N, C))\n    y_one_hot[np.arange(N), y.astype(int)] = 1\n    B = np.random.randn(M, C) * 0.01\n    b = np.zeros((1, C))\n    losses = []\n    for _ in range(iterations):\n        Z = X @ B + b\n        exp_Z = np.exp(Z - np.max(Z, axis=1, keepdims=True))\n        A = exp_Z / exp_Z.sum(axis=1, keepdims=True)\n        loss = -np.sum(y_one_hot * np.log(A + 1e-15)) / N\n        losses.append(round(loss, 4))\n        dZ = (A - y_one_hot) / N\n        dB = X.T @ dZ\n        db = np.sum(dZ, axis=0, keepdims=True)\n        B -= learning_rate * dB\n        b -= learning_rate * db\n    B_rounded = np.round(B, 4).tolist()\n    losses_rounded = np.round(losses, 4).tolist()\n    return (B_rounded, losses_rounded)"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \n    Parameters:\n    - X: Input features (numpy array of shape (n_samples, n_features))\n    - y: Target labels (numpy array of shape (n_samples,))\n    - learning_rate: Step size for gradient descent\n    - iterations: Number of iterations to run gradient descent\n    \n    Returns:\n    - coefficients: Optimized model parameters (as a list)\n    - losses: Binary Cross Entropy loss at each iteration (as a list)\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    weights = np.zeros(n_features)\n    bias = 0.0\n    losses = []\n    for _ in range(iterations):\n        linear_model = np.dot(X, weights) + bias\n        y_pred = 1 / (1 + np.exp(-linear_model))\n        epsilon = 1e-15\n        y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n        loss = -np.mean(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n        losses.append(round(loss, 4))\n        dw = 1 / n_samples * np.dot(X.T, y_pred - y)\n        db = 1 / n_samples * np.sum(y_pred - y)\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n    coefficients = np.round(np.concatenate([weights.reshape(-1), [bias]]), 4).tolist()\n    losses = np.round(losses, 4).tolist()\n    return (coefficients, losses)"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    d_k = K.shape[-1]\n    scores = np.dot(Q, K.T) / np.sqrt(d_k)\n    scores = np.where(mask == 0, -np.inf, scores)\n    attention_weights = np.exp(scores - np.max(scores, axis=-1, keepdims=True))\n    attention_weights = attention_weights / np.sum(attention_weights, axis=-1, keepdims=True)\n    output = np.dot(attention_weights, V)\n    return output"}
{"task_id": 108, "completion_id": 0, "solution": "from collections import Counter\nimport math\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    \"\"\"\n    if not apples:\n        return 0.0\n    counts = Counter(apples)\n    total = len(apples)\n    entropy = 0.0\n    for count in counts.values():\n        prob = count / total\n        entropy -= prob * math.log2(prob)\n    return round(entropy, 4)"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Perform Layer Normalization on a 3D input tensor.\n\n    Parameters:\n    - X: np.ndarray of shape (batch_size, sequence_length, features)\n    - gamma: np.ndarray of shape (features,) for scaling\n    - beta: np.ndarray of shape (features,) for shifting\n    - epsilon: small value to avoid division by zero\n\n    Returns:\n    - normalized_X: np.ndarray of shape (batch_size, sequence_length, features)\n    \"\"\"\n    mean = np.mean(X, axis=2, keepdims=True)\n    var = np.var(X, axis=2, keepdims=True)\n    X_normalized = (X - mean) / np.sqrt(var + epsilon)\n    X_normalized = X_normalized * gamma + beta\n    return np.round(X_normalized, 5).tolist()"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\nfrom itertools import groupby\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    ref_tokens = reference.split()\n    can_tokens = candidate.split()\n    ref_counter = Counter(ref_tokens)\n    can_counter = Counter(can_tokens)\n    common = sum((ref_counter & can_counter).values())\n    precision = common / len(can_tokens) if can_tokens else 0\n    recall = common / len(ref_tokens) if ref_tokens else 0\n    if precision + recall == 0:\n        f_mean = 0\n    else:\n        f_mean = precision * recall / (alpha * precision + (1 - alpha) * recall)\n\n    def count_chunks(tokens, matches):\n        matched_indices = [i for (i, tok) in enumerate(tokens) if tok in matches]\n        if not matched_indices:\n            return 0\n        chunks = 0\n        in_chunk = False\n        for (k, g) in groupby(enumerate(matched_indices), lambda x: x[0] - x[1]):\n            chunks += 1\n        return chunks\n    matched_ref = [tok for tok in ref_tokens if can_counter[tok] > 0]\n    matched_can = [tok for tok in can_tokens if ref_counter[tok] > 0]\n    ref_chunks = count_chunks(ref_tokens, matched_ref)\n    can_chunks = count_chunks(can_tokens, matched_can)\n    total_chunks = ref_chunks + can_chunks\n    if total_chunks == 0:\n        penalty = 0\n    else:\n        penalty = 1 - np.exp(-gamma * (total_chunks / max(len(ref_tokens), len(can_tokens))))\n    score = f_mean * (1 - penalty)\n    return round(score, 3)"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    expected = total_counts_x * total_counts_y / total_samples\n    epsilon = 1e-10\n    pmi = np.log((joint_counts + epsilon) / (expected + epsilon))\n    return round(pmi, 3)"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    if not x:\n        return []\n    min_val = min(x)\n    max_val = max(x)\n    if min_val == max_val:\n        return [0.0 for _ in x]\n    normalized = [(val - min_val) / (max_val - min_val) for val in x]\n    return [round(val, 4) for val in normalized]"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    \"\"\"\n    A simple residual block with two weight layers and shortcut connection.\n\n    Parameters:\n    x (np.ndarray): Input array of shape (n_features,)\n    w1 (np.ndarray): First weight matrix of shape (n_features, n_hidden)\n    w2 (np.ndarray): Second weight matrix of shape (n_hidden, n_features)\n\n    Returns:\n    list: Output of the residual block after final ReLU and rounding to 4 decimal places.\n    \"\"\"\n    z1 = np.dot(x, w1)\n    a1 = np.maximum(0, z1)\n    z2 = np.dot(a1, w2)\n    out = z2 + x\n    out = np.maximum(0, out)\n    return np.round(out, 4).tolist()"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray):\n    \"\"\"\n    Perform Global Average Pooling on a 3D input array.\n\n    Parameters:\n    x (np.ndarray): Input array of shape (height, width, channels).\n\n    Returns:\n    np.ndarray: 1D array of shape (channels,), where each element is the average\n                of all values in the corresponding feature map.\n    \"\"\"\n    if x.ndim != 3:\n        raise ValueError('Input must be a 3D array (height, width, channels).')\n    (height, width, channels) = x.shape\n    result = np.mean(x, axis=(0, 1))\n    return result"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Perform Batch Normalization on a 4D NumPy array in BCHW format.\n\n    Parameters:\n    - X: Input tensor of shape (batch, channels, height, width)\n    - gamma: Scale parameters of shape (channels,)\n    - beta: Shift parameters of shape (channels,)\n    - epsilon: Small value for numerical stability\n\n    Returns:\n    - Output tensor after batch normalization, rounded to 4 decimal places and converted to a list\n    \"\"\"\n    (batch, channels, height, width) = X.shape\n    X_reshaped = X.transpose(1, 0, 2, 3).reshape(channels, -1)\n    mean = np.mean(X_reshaped, axis=1)\n    var = np.var(X_reshaped, axis=1)\n    X_normalized = (X_reshaped - mean[:, np.newaxis]) / np.sqrt(var[:, np.newaxis] + epsilon)\n    X_normalized = X_normalized.reshape(channels, batch, height, width).transpose(1, 0, 2, 3)\n    X_output = gamma[np.newaxis, :, np.newaxis, np.newaxis] * X_normalized + beta[np.newaxis, :, np.newaxis, np.newaxis]\n    return np.round(X_output, 4).tolist()"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    \"\"\"\n    Computes the derivative of the polynomial term c * x^n at a given x.\n    \n    Args:\n        c (float): The coefficient of the polynomial term.\n        x (float): The point at which to evaluate the derivative.\n        n (float): The exponent of the polynomial term.\n        \n    Returns:\n        float: The value of the derivative at x, rounded to 4 decimal places.\n    \"\"\"\n    derivative = c * n * x ** (n - 1)\n    return round(derivative, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10):\n    vectors = np.array(vectors, dtype=float)\n    n_vectors = vectors.shape[0]\n    basis = []\n    for v in vectors:\n        for u in basis:\n            v = v - np.dot(v, u) * u\n        norm = np.linalg.norm(v)\n        if norm > tol:\n            u = v / norm\n            basis.append(u)\n    return [np.round(vec, 4).tolist() for vec in basis]\nvectors = [[1, 1], [1, 2], [2, 1]]"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    \"\"\"\n    Computes the cross product of two 3D vectors.\n    \n    Parameters:\n    a (list or np.ndarray): First 3D vector.\n    b (list or np.ndarray): Second 3D vector.\n    \n    Returns:\n    list: Cross product of the two vectors, rounded to 4 decimal places.\n    \"\"\"\n    a = np.array(a, dtype=float)\n    b = np.array(b, dtype=float)\n    result = np.cross(a, b)\n    return np.round(result, 4).tolist()"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    \"\"\"\n    Solves a system of linear equations Ax = b using Cramer's Rule.\n    \n    Parameters:\n    A (list of lists or np.ndarray): Square coefficient matrix.\n    b (list or np.ndarray): Constant vector.\n    \n    Returns:\n    list: Solution vector x rounded to 4 decimal places.\n    int: -1 if the system has no unique solution (determinant of A is zero).\n    \"\"\"\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    n = A.shape[0]\n    if A.shape[0] != A.shape[1]:\n        raise ValueError('Matrix A must be square.')\n    if b.shape[0] != n:\n        raise ValueError('Vector b must have the same number of rows as matrix A.')\n    det_A = np.linalg.det(A)\n    if np.isclose(det_A, 0):\n        return -1\n    x = []\n    for i in range(n):\n        A_i = A.copy()\n        A_i[:, i] = b\n        det_Ai = np.linalg.det(A_i)\n        x_i = det_Ai / det_A\n        x.append(round(x_i, 4))\n    return x"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    if not p or not q or len(p) != len(q):\n        return 0.0\n    p = np.array(p)\n    q = np.array(q)\n    if np.any(p < 0) or np.any(q < 0) or (not np.isclose(np.sum(p), 1.0)) or (not np.isclose(np.sum(q), 1.0)):\n        return 0.0\n    bc = np.sum(np.sqrt(p * q))\n    if bc <= 0:\n        return 0.0\n    distance = -np.log(bc)\n    return round(distance, 4)"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float]:\n    if len(a) != len(b):\n        return -1\n    return [a[i] + b[i] for i in range(len(a))]"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    (num_states, num_actions) = theta.shape\n    gradient = np.zeros_like(theta)\n    for episode in episodes:\n        returns = []\n        states = []\n        actions = []\n        for (state, action, _) in episode:\n            states.append(state)\n            actions.append(action)\n        rewards = [reward for (_, _, reward) in episode]\n        G = 0\n        for t in reversed(range(len(rewards))):\n            G += rewards[t]\n            returns.insert(0, G)\n        for t in range(len(episode)):\n            s = states[t]\n            a = actions[t]\n            G_t = returns[t]\n            exp_theta_s = np.exp(theta[s, :])\n            pi_s_a = exp_theta_s / exp_theta_s.sum()\n            d_log_pi = np.zeros(num_actions)\n            d_log_pi[a] = 1 - pi_s_a[a]\n            for i in range(num_actions):\n                if i != a:\n                    d_log_pi[i] = -pi_s_a[i]\n            gradient[s, :] += G_t * d_log_pi\n    gradient /= len(episodes)\n    return np.round(gradient, 4).tolist()"}
{"task_id": 123, "completion_id": 0, "solution": "def compute_efficiency(n_experts, k_active, d_in, d_out):\n    flops_dense = d_in * d_out\n    flops_moe = k_active / n_experts * d_in * d_out\n    flops_savings = flops_dense - flops_moe\n    savings_percentage = flops_savings / flops_dense * 100\n    flops_dense = round(flops_dense, 1)\n    flops_moe = round(flops_moe, 1)\n    flops_savings = round(flops_savings, 1)\n    savings_percentage = round(savings_percentage, 1)\n    return {'flops_dense': flops_dense, 'flops_moe': flops_moe, 'flops_savings': flops_savings, 'savings_percentage': savings_percentage}"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    \"\"\"\n    Compute the Noisy Top-K Gating probabilities.\n\n    Parameters:\n    - X: Input matrix of shape (batch_size, input_dim)\n    - W_g: Gating weight matrix of shape (input_dim, num_experts)\n    - W_noise: Noise weight matrix of shape (input_dim, num_experts)\n    - N: Pre-sampled noise matrix of shape (batch_size, num_experts)\n    - k: Sparsity constraint (top-k experts to activate)\n\n    Returns:\n    - gates: Final top-k gating probabilities matrix of shape (batch_size, num_experts)\n    \"\"\"\n    (batch_size, input_dim) = X.shape\n    num_experts = W_g.shape[1]\n    gates = X @ W_g\n    noise = X @ W_noise\n    noisy_gates = gates + noise\n    (topk_values, topk_indices) = ([], [])\n    for i in range(batch_size):\n        sorted_indices = np.argsort(noisy_gates[i])[::-1]\n        topk_idx = sorted_indices[:k]\n        topk_vals = gates[i, topk_idx]\n        mask = np.zeros(num_experts)\n        mask[topk_idx] = 1\n        exp_vals = np.exp(topk_vals - np.max(topk_vals))\n        softmax_vals = exp_vals / np.sum(exp_vals)\n        masked_softmax = np.zeros(num_experts)\n        masked_softmax[topk_idx] = softmax_vals\n        topk_values.append(masked_softmax)\n        topk_indices.append(topk_idx)\n    gates = np.stack(topk_values)\n    gates = np.round(gates, 4)\n    return gates.tolist()"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    \"\"\"\n    Implements a Mixture-of-Experts (MoE) layer with top-k routing.\n    \n    Parameters:\n    - x (np.ndarray): Input tensor of shape (n_tokens, input_dim)\n    - We (np.ndarray): Expert weights of shape (n_experts, input_dim, output_dim)\n    - Wg (np.ndarray): Gate weights of shape (input_dim, n_experts)\n    - n_experts (int): Number of experts\n    - top_k (int): Number of top experts to select per token\n    \n    Returns:\n    - list: Final output after applying top-k MoE, rounded to 4 decimal places and converted to Python list\n    \"\"\"\n    (n_tokens, input_dim) = x.shape\n    output_dim = We.shape[2]\n    gate_logits = x @ Wg\n    gate_probs = np.softmax(gate_logits, axis=1)\n    top_k_indices = np.argsort(gate_probs, axis=1)[:, -top_k:]\n    top_k_indices = np.flip(top_k_indices, axis=1)\n    top_k_probs = np.take_along_axis(gate_probs, top_k_indices, axis=1)\n    top_k_probs /= top_k_probs.sum(axis=1, keepdims=True)\n    outputs = np.zeros((n_tokens, output_dim))\n    for i in range(n_tokens):\n        token_input = x[i]\n        token_indices = top_k_indices[i]\n        token_probs = top_k_probs[i]\n        for j in range(top_k):\n            expert_idx = token_indices[j]\n            expert_weights = We[expert_idx]\n            expert_output = token_input @ expert_weights\n            outputs[i] += token_probs[j] * expert_output\n    outputs = np.round(outputs, 4)\n    return outputs.tolist()"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    \"\"\"\n    Perform Group Normalization on a 4D input tensor.\n\n    Parameters:\n    - X: Input tensor of shape (B, C, H, W)\n    - gamma: Scale parameter of shape (C,)\n    - beta: Shift parameter of shape (C,)\n    - num_groups: Number of groups to divide channels into\n    - epsilon: Small value to avoid division by zero\n\n    Returns:\n    - Normalized output as a Python list (rounded to 4 decimal places)\n    \"\"\"\n    (B, C, H, W) = X.shape\n    assert C % num_groups == 0, 'Number of channels must be divisible by num_groups'\n    X_grouped = X.reshape(B, num_groups, C // num_groups, H, W)\n    mean = np.mean(X_grouped, axis=(2, 3, 4), keepdims=True)\n    var = np.var(X_grouped, axis=(2, 3, 4), keepdims=True)\n    X_normalized = (X_grouped - mean) / np.sqrt(var + epsilon)\n    X_normalized = X_normalized.reshape(B, C, H, W)\n    gamma = gamma.reshape(1, C, 1, 1)\n    beta = beta.reshape(1, C, 1, 1)\n    output = gamma * X_normalized + beta\n    return np.round(output, 4).tolist()"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n\n    def f(x):\n        return x ** 4 - 3 * x ** 3 + 2\n\n    def df(x):\n        return 4 * x ** 3 - 9 * x ** 2\n    x = start_x\n    for _ in range(max_iters):\n        grad = df(x)\n        x_new = x - learning_rate * grad\n        if abs(x_new - x) < tolerance:\n            break\n        x = x_new\n    return round(x, 4)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    \"\"\"\n    Dynamic Tanh (DyT) function: a normalization-free activation function for Transformers.\n    \n    Parameters:\n    - x: Input numpy array.\n    - alpha: Scaling factor for the input.\n    - gamma: Scaling parameter for the output.\n    - beta: Shifting parameter for the output.\n    \n    Returns:\n    - A list of floats after applying DyT and rounding to 4 decimal places.\n    \"\"\"\n    dyt = gamma * np.tanh(alpha * x) + beta\n    dyt_rounded = np.round(dyt, 4)\n    return dyt_rounded.tolist()"}
