{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    if all((len(row) == len(b) for row in a)):\n        return [sum((a_i * b_i for (a_i, b_i) in zip(row_a, b))) for row_a in a]\n    else:\n        return -1"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    transposed_matrix = []\n    for i in range(len(a[0])):\n        new_row = []\n        for j in range(len(a)):\n            new_row.append(a[j][i])\n        transposed_matrix.append(new_row)\n    return transposed_matrix"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    np_array = np.array(a)\n    try:\n        reshaped_array = np_array.reshape(new_shape)\n    except ValueError:\n        return []\n    return reshaped_array.tolist()"}
{"task_id": 4, "completion_id": 0, "solution": "from typing import List, Union\ndef calculate_matrix_mean(matrix: List[List[Union[int, float]]], mode: str) -> List[float]:\n    if mode == 'row':\n        return [sum(row) / len(row) for row in matrix]\n    elif mode == 'column':\n        return [sum(col) / len(matrix) for col in zip(*matrix)]\n    else:\n        raise ValueError(\"Mode must be 'row' or 'column'\")\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    result = [[element * scalar for element in row] for row in matrix]\n    return result\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nscalar = 2\nresult = scalar_multiply(matrix, scalar)"}
{"task_id": 6, "completion_id": 0, "solution": "import numpy as np\ndef calculate_eigenvalues(matrix):\n    (eigenvalues, _) = np.linalg.eig(matrix)\n    eigenvalues.sort()\n    eigenvalues = eigenvalues[::-1]\n    return eigenvalues.tolist()\nmatrix = [[1, 2], [3, 4]]"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    A = np.array(A)\n    T = np.array(T)\n    S = np.array(S)\n    if np.linalg.det(T) == 0 or np.linalg.det(S) == 0:\n        return -1\n    AT = np.matmul(np.linalg.inv(T), A)\n    ATS = np.matmul(AT, S)\n    ATS = np.round(ATS, 4)\n    return ATS.tolist()"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    if len(matrix) != 2 or len(matrix[0]) != 2 or len(matrix[1]) != 2:\n        return None\n    det = matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]\n    if det == 0:\n        return None\n    adj = [[0, 0], [0, 0]]\n    adj[0][0] = matrix[1][1]\n    adj[0][1] = -matrix[0][1]\n    adj[1][0] = -matrix[1][0]\n    adj[1][1] = matrix[0][0]\n    inv = [[0, 0], [0, 0]]\n    inv[0][0] = adj[0][0] / det\n    inv[0][1] = adj[0][1] / det\n    inv[1][0] = adj[1][0] / det\n    inv[1][1] = adj[1][1] / det\n    return inv"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    a_rows = len(a)\n    a_cols = len(a[0])\n    b_rows = len(b)\n    b_cols = len(b[0])\n    if a_cols != b_rows:\n        return -1\n    result = [[0 for _ in range(b_cols)] for _ in range(a_rows)]\n    for i in range(a_rows):\n        for j in range(b_cols):\n            for k in range(a_cols):\n                result[i][j] += a[i][k] * b[k][j]\n    return result\na = [[1, 2, 3], [4, 5, 6]]\nb = [[7, 8], [9, 10], [11, 12]]"}
{"task_id": 10, "completion_id": 0, "solution": "import numpy as np\ndef calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    \"\"\"\n    Calculate the covariance matrix of a list of lists using numpy's cov function\n    \n    Parameters:\n    vectors (list[list[float]]): The list of lists for which to calculate the covariance matrix.\n    \n    Returns:\n    list[list[float]]: The covariance matrix as a list of lists.\n    \"\"\"\n    vectors_np = np.array(vectors)\n    covariance_matrix = np.cov(vectors_np)\n    covariance_matrix_lst = covariance_matrix.tolist()\n    return covariance_matrix_lst"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    assert A.shape[0] == A.shape[1], 'Matrix A should be a square matrix.'\n    assert A.shape[0] == b.shape[0], 'No. of rows in Matrix A should be equal to length of vector b.'\n    b = b.reshape((-1, 1))\n    x = np.zeros_like(b)\n    D = np.diag(np.diag(A))\n    R = A - D\n    for _ in range(n):\n        x = (b - np.dot(R, x)) / D\n    x = np.round(x, 4).tolist()\n    return x"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef Jacobi_method(A, num_of_sweeps=10):\n    n = len(A)\n    V = np.eye(n)\n    for _ in range(num_of_sweeps):\n        for p in range(n - 1):\n            for q in range(p + 1, n):\n                if abs(A[p, q]) > 1e-10:\n                    tan = 2 * A[p, q] / (A[q, q] - A[p, p])\n                    tau = np.sign(tan) / (abs(tan) + np.sqrt(tan ** 2 + 1))\n                    c = 1 / np.sqrt(1 + tau ** 2)\n                    s = tau * c\n                    temp = A[p, q]\n                    A[p, q] = A[q, p] = 0\n                    A[p, p] -= tau * temp\n                    A[q, q] += tau * temp\n                    for r in range(p + 1, q):\n                        temp = A[p, r]\n                        A[p, r] = A[r, p] = c * temp - s * A[p, q]\n                        A[q, r] = A[r, q] = s * temp + c * A[p, q]\n                    for r in range(q + 1, n):\n                        temp = A[p, r]\n                        A[p, r] = c * temp - s * A[q, r]\n                        A[q, r] = s * temp + c * A[q, r]\n                    for r in range(n):\n                        temp = V[r, p]\n                        V[r, p] = V[r, q] = c * temp - s * V[r, q]\n                        V[r, q] = s * temp + c * V[r, q]\n    return (A, V)\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    ATA = A.T.dot(A)\n    AAT = A.dot(A.T)\n    (eigvals_A, eigvecs_A) = Jacobi_method(ATA)\n    eigvals_A_diag = np.diag(np.sort(np.diag(eigvals_A)))\n    (eigvals_AT, eigvecs_AT) = Jacobi_method(AAT)\n    eigvals_AT_diag = np.diag(np.sort(np.diag(eigvals_AT)))\n    U = eigvecs_A\n    V = eigvecs_AT\n    S = np.sqrt(eigvals_A_diag)\n    S = np.around(S, decimals=4)\n    return (U, S, V)"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n\n    def determinant_3x3(mat):\n        return mat[0][0] * (mat[1][1] * mat[2][2] - mat[2][1] * mat[1][2]) - mat[0][1] * (mat[1][0] * mat[2][2] - mat[2][0] * mat[1][2]) + mat[0][2] * (mat[1][0] * mat[2][1] - mat[2][0] * mat[1][1])\n    det = 0\n    for c in range(4):\n        M = matrix[1:]\n        for i in range(len(M)):\n            M[i] = M[i][0:c] + M[i][c + 1:]\n        sign = -1 if c % 2 else 1\n        sub_det = determinant_3x3(M)\n        det += sign * matrix[0][c] * sub_det\n    return det\nmatrix = [[1, 2, 3, 1], [5, 3, 2, 1], [9, 11, 12, 10], [13, 14, 15, 16]]"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    X = np.array(X)\n    y = np.array(y)\n    X = np.c_[np.ones(X.shape[0]), X]\n    X_inv = np.linalg.pinv(X)\n    coefs = np.dot(X_inv, y)\n    return [round(coef, 4) for coef in coefs]\nX = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ny = [10, 11, 12]"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> list:\n    theta = np.zeros(X.shape[1])\n    m = len(y)\n    for _ in range(iterations):\n        residual_error = X.dot(theta) - y\n        theta = theta - alpha / m * X.T.dot(residual_error)\n    return np.round(theta, 4).tolist()"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0)\n    standardized_data = (data - mean) / std\n    standardized_data = np.around(standardized_data, decimals=4)\n    min_val = np.min(data, axis=0)\n    max_val = np.max(data, axis=0)\n    normalized_data = (data - min_val) / (max_val - min_val)\n    normalized_data = np.around(normalized_data, decimals=4)\n    return (standardized_data.tolist(), normalized_data.tolist())"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\ndef k_means_clustering(points: list[tuple], k: int, initial_centroids: list[tuple], max_iterations: int) -> list[tuple]:\n    points = np.array(points)\n    centroids = np.array(initial_centroids)\n    for _ in range(max_iterations):\n        distances = np.sqrt(((points - centroids[:, np.newaxis]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=0)\n        new_centroids = np.array([points[labels == i].mean(axis=0) for i in range(k)])\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n    final_centroids = [tuple(np.round(centroid, 4)) for centroid in centroids]\n    return final_centroids"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\nfrom sklearn.model_selection import KFold\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    if not isinstance(X, np.ndarray) or not isinstance(y, np.ndarray):\n        raise ValueError('X and y must be NumPy arrays.')\n    if not isinstance(k, int) or k < 2:\n        raise ValueError('k must be an integer greater than 1.')\n    if len(X.shape) != 2:\n        raise ValueError('X must be a 2D NumPy array.')\n    if len(y.shape) != 1:\n        raise ValueError('y must be a 1D NumPy array.')\n    if X.shape[0] != y.shape[0]:\n        raise ValueError('The number of samples in X and y must be the same.')\n    kf = KFold(n_splits=k, shuffle=shuffle, random_state=random_seed)\n    folds = []\n    for (train_index, test_index) in kf.split(X, y):\n        folds.append((train_index, test_index))\n    return folds"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    data = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    covariance_matrix = np.cov(data.T)\n    (eigenvalues, eigenvectors) = np.linalg.eig(covariance_matrix)\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    principal_components = eigenvectors[:, :k]\n    principal_components = np.round(principal_components, 4)\n    return principal_components.tolist()"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef entropy(data):\n    total = len(data)\n    counter = Counter((item[target_attr] for item in data))\n    return -sum((counter[k] / total * math.log2(counter[k] / total + (1e-09 if counter[k] / total == 0 else 0)) for k in counter.keys()))\ndef information_gain(data, attribute):\n    total = len(data)\n    counter = Counter((item[attribute] for item in data))\n    remainder = sum((counter[k] / total * entropy([item for item in data if item[attribute] == k]) for k in counter.keys()))\n    return entropy(data) - remainder\ndef choose_attribute(data, attributes):\n    gains = [(attr, information_gain(data, attr)) for attr in attributes]\n    return max(gains, key=lambda x: x[1])[0]\ndef build_tree(data, attributes, default, tree=None):\n    if len(attributes) == 0 or len(Counter([record[target_attr] for record in data])) <= 1:\n        return default\n    else:\n        best = choose_attribute(data, attributes)\n        tree = {best: {}}\n        attributes_left = [attr for attr in attributes if attr != best]\n        default = Counter([record[target_attr] for record in data])\n        default = max(default, key=default.get)\n        for value in set([record[best] for record in data]):\n            subdata = [record for record in data if record[best] == value]\n            subtree = build_tree(subdata, attributes_left, default)\n            tree[best][value] = subtree\n        return tree\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n    tree = build_tree(examples, attributes, Counter([record[target_attr] for record in examples]))\n    return tree"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef pegasos_kernel_svm(data, labels, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    labels = np.where(labels == 0, -1, 1)\n    (n_samples, n_features) = data.shape\n    alpha = np.zeros(n_samples)\n    bias = 0.0\n    if kernel == 'linear':\n        kernel_matrix = np.dot(data, data.T)\n    elif kernel == 'RBF':\n        sq_norms = np.sum(data ** 2, axis=1).reshape(-1, 1)\n        pairwise_distances = sq_norms + sq_norms.T - 2 * np.dot(data, data.T)\n        kernel_matrix = np.exp(-pairwise_distances / (2 * sigma ** 2))\n    else:\n        raise ValueError('Unknown kernel type: {}'.format(kernel))\n    for _ in range(iterations):\n        for i in range(n_samples):\n            output = labels[i] * (np.dot(kernel_matrix[i], alpha) + bias)\n            if output < 1:\n                alpha[i] += labels[i] / (lambda_val * n_samples)\n                bias += labels[i] / (lambda_val * n_samples)\n    return (alpha.tolist(), np.round(bias, 4))"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    \"\"\"\n    Computes the output of the sigmoid activation function given an input value z.\n\n    Parameters:\n        z (float): input value\n\n    Returns:\n        float: the output of the sigmoid function\n    \"\"\"\n    return round(1 / (1 + math.exp(-z)), 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    denom = sum((math.exp(score) for score in scores))\n    result = [round(math.exp(score) / denom, 4) for score in scores]\n    return result\nscores = [1.0, 2.0, 3.0]"}
{"task_id": 24, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef sigmoid(x):\n    return 1 / (1 + math.exp(-x))\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    predicted_probabilities = []\n    for feature_vector in features:\n        linear_combination = np.dot(feature_vector, weights) + bias\n        predicted_probability = round(sigmoid(linear_combination), 4)\n        predicted_probabilities.append(predicted_probability)\n    mean_squared_error = round(np.mean((np.array(predicted_probabilities) - np.array(labels)) ** 2), 4)\n    return (np.array(predicted_probabilities).tolist(), mean_squared_error)\nfeatures = [[0.7, 0.3], [0.2, 0.1]]\nlabels = [1, 0]\nweights = [0.1, 0.2]\nbias = 0.3"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\ndef derivative_sigmoid(x):\n    return x * (1 - x)\ndef mean_squared_error(predictions, labels):\n    return np.mean((predictions - labels) ** 2)\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    weights = initial_weights\n    bias = initial_bias\n    mse_values = []\n    for _ in range(epochs):\n        weighted_sum = np.dot(features, weights) + bias\n        predictions = sigmoid(weighted_sum)\n        mse = mean_squared_error(predictions, labels)\n        mse_values.append(round(mse, 4))\n        error = predictions - labels\n        dcost_dpred = error\n        dpred_dz = derivative_sigmoid(predictions)\n        derivative_z = dcost_dpred * dpred_dz\n        inputs = features.T\n        weights -= learning_rate * np.dot(inputs, derivative_z)\n        for i in derivative_z:\n            bias -= learning_rate * i\n    return (weights.tolist(), round(bias, 4), mse_values)"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data + other.data, (self, other), '+')\n\n        def _backward():\n            self.grad += out.grad\n            other.grad += out.grad\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data * other.data, (self, other), '*')\n\n        def _backward():\n            self.grad += other.data * out.grad\n            other.grad += self.data * out.grad\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')\n\n        def _backward():\n            self.grad += (out.data > 0) * out.grad\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1\n        for node in reversed(topo):\n            node._backward()"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    B_array = np.array(B)\n    C_array = np.array(C)\n    P = np.linalg.inv(B_array) @ C_array\n    P = P.round(4)\n    return P.tolist()\nB = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\nC = [[1, 0, 0], [0, 0, 1], [0, 1, 0]]"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    (_, (sigma, _), V) = np.linalg.svd(A)\n    U = []\n    for i in range(2):\n        u = A @ V[:, i] / sigma[i]\n        U.append(u.tolist())\n    S = np.diag(sigma).tolist()\n    V = V.tolist()\n    return (U, S, V)\nA = np.array([[1, 2], [3, 4]])"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    if seed is not None:\n        np.random.seed(seed)\n    combined = np.hstack((X.reshape(-1, 1), y.reshape(-1, 1)))\n    np.random.shuffle(combined)\n    new_X = combined[:, 0]\n    new_y = combined[:, 1]\n    new_X = new_X.tolist()\n    new_y = new_y.tolist()\n    return (new_X, new_y)"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    num_samples = X.shape[0]\n    num_batches = num_samples // batch_size\n    if num_samples % batch_size != 0:\n        num_batches += 1\n    for i in range(num_batches):\n        start_index = i * batch_size\n        end_index = min((i + 1) * batch_size, num_samples)\n        if y is not None:\n            yield (X[start_index:end_index].tolist(), y[start_index:end_index].tolist())\n        else:\n            yield X[start_index:end_index].tolist()"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    above_threshold = X[X[:, feature_i] >= threshold]\n    below_threshold = X[X[:, feature_i] < threshold]\n    return (above_threshold.tolist(), below_threshold.tolist())\nX = np.random.rand(10, 5)\nfeature_i = 2\nthreshold = 0.5"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    (n_samples, n_features) = np.shape(X)\n\n    def index_combinations():\n        combs = [combinations_with_replacement(range(n_features), i) for i in range(0, degree + 1)]\n        flat_combs = [item for sublist in combs for item in sublist]\n        return flat_combs\n    new_X = np.empty((n_samples, len(index_combinations())))\n    for (i, index_combs) in enumerate(index_combinations()):\n        new_X[:, i] = np.prod(X[:, index_combs], axis=1)\n    return new_X.tolist()"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    np.random.seed(seed)\n    subset_list = []\n    for _ in range(n_subsets):\n        if replacements:\n            indices = np.random.randint(0, X.shape[0], X.shape[0])\n        else:\n            indices = np.random.choice(X.shape[0], X.shape[0], replace=False)\n        X_subset = X[indices, :]\n        y_subset = y[indices]\n        subset_list.append((X_subset.tolist(), y_subset.tolist()))\n    return subset_list"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    if n_col is None:\n        n_col = np.amax(x) + 1\n    one_hot_encoded = []\n    for i in x:\n        one_hot_encoded_row = [0] * n_col\n        one_hot_encoded_row[i] = 1\n        one_hot_encoded.append(one_hot_encoded_row)\n    return one_hot_encoded"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    \"\"\"Converts a 1D numpy array into a diagonal matrix\"\"\"\n    return np.diag(x).tolist()"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    correct = np.sum(y_true == y_pred)\n    total = len(y_true)\n    accuracy = correct / total\n    return round(accuracy, 4)\ny_true = np.array([0, 1, 0, 1, 1, 0, 1, 0, 1, 0])\ny_pred = np.array([0, 1, 1, 1, 0, 0, 1, 0, 1, 0])"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    if Y is None:\n        Y = X\n    X_means = np.mean(X, axis=0)\n    Y_means = np.mean(Y, axis=0)\n    X_std = np.std(X, axis=0)\n    Y_std = np.std(Y, axis=0)\n    cov_matrix = np.dot((X - X_means).T, Y - Y_means) / (X.shape[0] - 1)\n    corr_matrix = cov_matrix / (X_std.reshape(-1, 1) * Y_std.reshape(-1, 1))\n    corr_matrix = np.around(corr_matrix, decimals=4)\n    return corr_matrix.tolist()"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef build_stump(X, y, D):\n    \"\"\" \n    A decision stump: a simple classifier that will split the data with \n    the best thresholds for each feature.\n    \"\"\"\n    (n, d) = X.shape\n    num_steps = 10.0\n    best_stump = {}\n    best_class_est = np.mat(np.zeros((n, 1)))\n    min_error = np.inf\n    for i in range(d):\n        range_min = X[:, i].min()\n        range_max = X[:, i].max()\n        step_size = (range_max - range_min) / num_steps\n        for j in range(-1, int(num_steps) + 1):\n            for inequal in ['lt', 'gt']:\n                thresh_val = range_min + float(j) * step_size\n                predicted_vals = stump_predict(X, i, thresh_val, inequal)\n                err_arr = np.mat(np.ones((n, 1)))\n                err_arr[predicted_vals == y] = 0\n                weighted_error = D.T * err_arr\n                if weighted_error < min_error:\n                    min_error = weighted_error\n                    best_class_est = predicted_vals.copy()\n                    best_stump['dim'] = i\n                    best_stump['thresh'] = thresh_val\n                    best_stump['ineq'] = inequal\n    return (best_stump, min_error, best_class_est)\ndef stump_predict(X, dim, thresh_val, thresh_ineq):\n    \"\"\" \n    After the threshold for this feature is found, \n    it then predicts the results of the test dataset.\n    \"\"\"\n    ret_array = np.ones((np.shape(X)[0], 1))\n    if thresh_ineq == 'lt':\n        ret_array[X[:, dim] <= thresh_val] = -1.0\n    else:\n        ret_array[X[:, dim] > thresh_val] = -1.0\n    return ret_array\ndef update_weights(w, alpha, class_est, y):\n    \"\"\"\n    Update the weights of examples which were classified incorrectly.\n    \"\"\"\n    w = np.multiply(w, np.exp(alpha * np.multiply(class_est != y, -1)))\n    w = w / w.sum()\n    return w\ndef adaboost_fit(X, y, n_clf):\n    \"\"\" \n    AdaBoost-SAMME: Discrete AdaBoost. For each round, the algorithm tends to \n    focus on the samples that are incorrectly classified and \n    less on those already classified correctly\n    \"\"\"\n    (n, d) = X.shape\n    w = np.mat(np.ones((n, 1)) / n)\n    classifiers = []\n    for i in range(n_clf):\n        (stump, error, class_est) = build_stump(X, y, w)\n        alpha = np.float(0.5 * np.log((1.0 - error) / max(error, 1e-16)))\n        stump['alpha'] = alpha\n        classifiers.append(stump)\n        w = update_weights(w, alpha, class_est, y)\n    return classifiers"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list):\n    scores = np.array(scores)\n    scores -= max(scores)\n    exps = np.exp(scores)\n    softmax_scores = exps / np.sum(exps)\n    log_softmax_scores = np.log(softmax_scores)\n    return np.round(log_softmax_scores, 4).tolist()"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport copy\nimport math\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.initialize()\n\n    def initialize(self):\n        limit = 1 / math.sqrt(self.input_shape[0])\n        self.W = np.random.uniform(-limit, limit, (self.input_shape[0], self.n_units))\n        self.w0 = np.zeros((1, self.n_units))\n\n    def parameters(self):\n        return np.size(self.W) + np.size(self.w0)\n\n    def forward_pass(self, X, training=True):\n        self.layer_input = X\n        return np.dot(X, self.W) + self.w0\n\n    def backward_pass(self, accum_grad):\n        W = self.W\n        if self.trainable:\n            grad_w = np.dot(self.layer_input.T, accum_grad)\n            grad_w0 = np.sum(accum_grad, axis=0, keepdims=True)\n            self.W = self.W + grad_w\n            self.w0 = self.w0 + grad_w0\n        accum_grad = np.dot(accum_grad, W.T)\n        return accum_grad\n\n    def output_shape(self):\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    input_matrix = np.pad(input_matrix, padding, mode='constant')\n    (input_x, input_y) = input_matrix.shape\n    (kernel_x, kernel_y) = kernel.shape\n    output_x = (input_x - kernel_x + 2 * padding) // stride + 1\n    output_y = (input_y - kernel_y + 2 * padding) // stride + 1\n    output_matrix = np.zeros((output_x, output_y))\n    for y in range(0, output_y):\n        for x in range(0, output_x):\n            input_subset = input_matrix[x * stride:x * stride + kernel_x, y * stride:y * stride + kernel_y]\n            output_matrix[x, y] = np.sum(input_subset * kernel)\n    output_matrix = np.around(output_matrix, 4)\n    return output_matrix.tolist()"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    \"\"\"\n    Implement the Rectified Linear Unit (ReLU) activation function.\n    \n    Args:\n    z (float): The input value.\n    \n    Returns:\n    result (float): The result after applying ReLU.\n    \"\"\"\n    return max(0, z)"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    predictions = X @ w\n    errors = y_true - predictions\n    mse = np.mean(errors ** 2)\n    ridge_reg = alpha * np.sum(w ** 2)\n    return np.round(mse + ridge_reg, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float:\n    return max(alpha * z, z)"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    return np.dot(x1, x2)"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    TP = np.sum((y_true == 1) & (y_pred == 1))\n    FP = np.sum((y_true == 0) & (y_pred == 1))\n    precision = TP / (TP + FP + 1e-10)\n    return precision\ny_true = np.array([1, 0, 1, 0, 1, 0, 0, 1, 1, 1])\ny_pred = np.array([1, 1, 1, 0, 0, 0, 1, 0, 1, 1])"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    X = np.c_[np.ones(X.shape[0]), X]\n    y = np.array(y)\n    weights = np.array(weights)\n    gradient_func = {'batch': batch_gradient, 'mini_batch': mini_batch_gradient, 'stochastic': stochastic_gradient}\n    for _ in range(n_iterations):\n        weights = weights - learning_rate * gradient_func[method](X, y, weights, batch_size)\n    return weights.round(4).tolist()\ndef predict(X, weights):\n    return np.dot(X, weights)\ndef batch_gradient(X, y, weights, batch_size=1):\n    m = len(y)\n    y_hat = predict(X, weights)\n    gradient = 1 / m * np.dot(X.T, y_hat - y)\n    return gradient\ndef mini_batch_gradient(X, y, weights, batch_size):\n    m = len(y)\n    for i in range(0, m, batch_size):\n        x_i = X[i:i + batch_size]\n        y_i = y[i:i + batch_size]\n        y_hat = predict(x_i, weights)\n        gradient = 2 / len(y_i) * np.dot(x_i.T, y_hat - y_i)\n        weights = weights - learning_rate * gradient\n    return weights\ndef stochastic_gradient(X, y, weights, batch_size=1):\n    m = len(y)\n    idx = np.random.permutation(m)\n    X_shuffle = X[idx]\n    y_shuffle = y[idx]\n    for i in range(0, m):\n        random_index = np.random.randint(m)\n        x_i = X_shuffle[random_index:random_index + 1]\n        y_i = y_shuffle[random_index:random_index + 1]\n        y_hat = predict(x_i, weights)\n        gradient = 2 / len(y_i) * np.dot(x_i.T, y_hat - y_i)\n        weights = weights - learning_rate * gradient\n    return weights"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    matrix = np.array(matrix, dtype=float)\n    (r, c) = matrix.shape\n    j = 0\n    i = 0\n    while i < r and j < c:\n        k = np.argmax(np.abs(matrix[i:, j])) + i\n        pivot = matrix[k, j]\n        if np.abs(pivot) < 1e-05:\n            matrix[i:, j] = np.zeros(r - i)\n            j += 1\n        else:\n            matrix[[i, k], j:] = matrix[[k, i], j:]\n            matrix[i, j:] = matrix[i, j:] / pivot\n            for k in range(r):\n                if k != i:\n                    matrix[k, j:] = matrix[k, j:] - matrix[i, j:] * matrix[k, j] / matrix[i, j]\n            i += 1\n            j += 1\n    return matrix.tolist()"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=1000):\n    m = np.zeros_like(x0)\n    v = np.zeros_like(x0)\n    for t in range(1, num_iterations + 1):\n        g = grad(x0)\n        m = beta1 * m + (1 - beta1) * g\n        v = beta2 * v + (1 - beta2) * np.square(g)\n        m_hat = m / (1 - np.power(beta1, t))\n        v_hat = v / (1 - np.power(beta2, t))\n        x0 = x0 - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    return np.around(x0, 4).tolist()"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    n = len(source)\n    m = len(target)\n    dp = np.zeros((n + 1, m + 1))\n    for i in range(n + 1):\n        dp[i][0] = i\n    for j in range(m + 1):\n        dp[0][j] = j\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if source[i - 1] == target[j - 1]:\n                cost = 0\n            else:\n                cost = 1\n            dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + cost)\n            if i > 1 and j > 1 and (source[i - 1] == target[j - 2]) and (source[i - 2] == target[j - 1]):\n                dp[i][j] = min(dp[i][j], dp[i - 2][j - 2] + cost)\n    return dp[n][m]"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    true_positives = np.sum((y_true == 1) & (y_pred == 1))\n    false_negatives = np.sum((y_true == 1) & (y_pred == 0))\n    denominator = true_positives + false_negatives\n    recall_value = true_positives / denominator if denominator != 0 else 0.0\n    return round(recall_value, 3)\ny_true = [1, 1, 1, 1, 1, 1, 0, 0, 0, 0]\ny_pred = [1, 0, 1, 1, 0, 0, 1, 0, 1, 1]"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    Q = np.dot(W_q, X)\n    K = np.dot(W_k, X)\n    V = np.dot(W_v, X)\n    score = np.dot(Q.T, K)\n    softmax_score = np.exp(score) / np.sum(np.exp(score), axis=1, keepdims=True)\n    attention_output = np.dot(softmax_score, V)\n    attention_output = np.around(attention_output, 4)\n    return attention_output.tolist()"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    input_sequence = np.array(input_sequence)\n    initial_hidden_state = np.array(initial_hidden_state)\n    Wx = np.array(Wx)\n    Wh = np.array(Wh)\n    b = np.array(b)\n    hidden_state = initial_hidden_state\n    for x in input_sequence:\n        hidden_state = np.tanh(np.dot(Wx, x) + np.dot(Wh, hidden_state) + b)\n    hidden_state = [round(y, 4) for y in hidden_state.tolist()]\n    return hidden_state"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    translation_matrix = np.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])\n    points_homogeneous = np.hstack((np.array(points), np.ones((len(points), 1))))\n    translated_points_homogeneous = np.dot(points_homogeneous, translation_matrix.T)\n    translated_points = translated_points_homogeneous[:, :2]\n    return translated_points.tolist()"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    kl_divergence = 0.5 * (np.log(sigma_q / sigma_p) ** 2 + (sigma_p ** 2 + (mu_p - mu_q) ** 2) / (2 * sigma_q ** 2) - 0.5)\n    return kl_divergence"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    assert A.shape[0] == A.shape[1], 'Matrix A must be square'\n    assert A.shape[0] == b.shape[0], 'Matrix A and vector b must have the same row size'\n    if x_ini is None:\n        x_ini = np.zeros_like(b)\n    else:\n        x_ini = np.array(x_ini, dtype=float)\n        assert x_ini.shape == b.shape, 'Initial guess x_ini must have the same dimension as b'\n    x_new = np.zeros_like(x_ini)\n    for _ in range(n):\n        for i in range(A.shape[0]):\n            x_new[i] = (b[i] - np.dot(A[i, :i], x_new[:i]) - np.dot(A[i, i + 1:], x_ini[i + 1:])) / A[i, i]\n        x_ini = np.copy(x_new)\n    x_ini = np.round(x_ini, 4)\n    return x_ini.tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    n = len(A)\n    aug_A = np.concatenate((A, np.array([b]).T), axis=1)\n    for i in range(n):\n        max_row = abs(aug_A[i:, i]).argmax() + i\n        if i != max_row:\n            aug_A[[max_row, i]] = aug_A[[i, max_row]]\n        for r in range(i + 1, n):\n            f = aug_A[r, i] / aug_A[i, i]\n            for c in range(i, n + 1):\n                aug_A[r, c] = aug_A[r, c] - aug_A[i, c] * f\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        x[i] = (aug_A[i, -1] - np.dot(aug_A[i, :-1], x)) / aug_A[i, i]\n    return np.round(x.tolist(), 4)\nA = np.array([[2.0, 1.0, -1.0], [-3.0, -1.0, 2.0], [-2.0, 1.0, 2.0]])"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.standard_normal((hidden_size, input_size + hidden_size))\n        self.Wi = np.random.standard_normal((hidden_size, input_size + hidden_size))\n        self.Wc = np.random.standard_normal((hidden_size, input_size + hidden_size))\n        self.Wo = np.random.standard_normal((hidden_size, input_size + hidden_size))\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        seq_length = x.shape[0]\n        hidden_states = np.zeros((seq_length, self.hidden_size))\n        cell_states = np.zeros((seq_length, self.hidden_size))\n        hidden_state = initial_hidden_state\n        cell_state = initial_cell_state\n        for i in range(seq_length):\n            input_vector = np.vstack((hidden_state, x[i]))\n            forget_gate = sigmoid(np.dot(self.Wf, input_vector) + self.bf)\n            input_gate = sigmoid(np.dot(self.Wi, input_vector) + self.bi)\n            candidate_cell_state = np.tanh(np.dot(self.Wc, input_vector) + self.bc)\n            output_gate = sigmoid(np.dot(self.Wo, input_vector) + self.bo)\n            cell_state = forget_gate * cell_state + input_gate * candidate_cell_state\n            hidden_state = output_gate * np.tanh(cell_state)\n            hidden_states[i] = hidden_state.flatten()\n            cell_states[i] = cell_state.flatten()\n        return (hidden_states.tolist(), cell_states.tolist(), hidden_state.flatten().tolist(), cell_state.flatten().tolist())\ninput_size = 5\nhidden_size = 3\ninitial_hidden_state = np.zeros((hidden_size, 1))\ninitial_cell_state = np.zeros((hidden_size, 1))"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict\ndef compute_tf_idf(corpus, query):\n    if not corpus:\n        return []\n    tf_idf_scores = []\n    term_freqs = [defaultdict(int) for _ in corpus]\n    for i in range(len(corpus)):\n        for word in corpus[i]:\n            term_freqs[i][word] += 1\n    doc_freqs = defaultdict(int)\n    for word in set((word for doc in corpus for word in doc)):\n        for doc in corpus:\n            if word in doc:\n                doc_freqs[word] += 1\n    max_freqs = [max(term_freqs[i].values()) for i in range(len(corpus))]\n    for i in range(len(corpus)):\n        for word in corpus[i]:\n            term_freqs[i][word] /= max_freqs[i]\n    idf = {word: np.log((1 + len(corpus)) / (1 + df)) + 1 for (word, df) in doc_freqs.items()}\n    for doc in term_freqs:\n        tf_idf = []\n        for word in query:\n            if word in doc:\n                tf_idf.append(round(doc[word] * idf[word], 4))\n            else:\n                tf_idf.append(0)\n        tf_idf_scores.append(tf_idf)\n    return np.array(tf_idf_scores).tolist()"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    tp = np.sum(np.logical_and(y_pred == 1, y_true == 1))\n    fp = np.sum(np.logical_and(y_pred == 1, y_true == 0))\n    fn = np.sum(np.logical_and(y_pred == 0, y_true == 1))\n    precision = tp / (tp + fp)\n    recall = tp / (tp + fn)\n    f_score = (1 + beta ** 2) * (precision * recall) / (beta ** 2 * precision + recall)\n    return round(f_score, 3)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, inputs):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n        \"\"\"\n        h = np.zeros((self.hidden_size, 1))\n        outputs = []\n        for i in range(len(inputs)):\n            new_input = np.dot(self.W_xh, inputs[i]) + np.dot(self.W_hh, h) + self.b_h\n            h = np.tanh(new_input)\n            y = np.dot(self.W_hy, h) + self.b_y\n            outputs.append(y)\n        return (outputs, h)\n\n    def backward(self, inputs, expected_outputs, outputs, hiddens, learning_rate=0.01):\n        \"\"\"\n        Backward pass through the RNN for a given sequence of inputs.\n        \"\"\"\n        grad_W_xh = np.zeros_like(self.W_xh)\n        grad_W_hh = np.zeros_like(self.W_hh)\n        grad_W_hy = np.zeros_like(self.W_hy)\n        grad_b_h = np.zeros_like(self.b_h)\n        grad_b_y = np.zeros_like(self.b_y)\n        for t in reversed(range(len(inputs))):\n            y = outputs[t]\n            h = hiddens[t]\n            x = inputs[t]\n            delta_y = y - expected_outputs[t]\n            grad_W_hy += np.dot(delta_y, h.T)\n            grad_b_y += delta_y\n            delta_h = np.dot(self.W_hy.T, delta_y) * (1 - h ** 2)\n            grad_W_xh += np.dot(delta_h, x.T)\n            grad_W_hh += np.dot(delta_h, h.T)\n            grad_b_h += delta_h\n        self.W_xh -= learning_rate * grad_W_xh\n        self.W_hh -= learning_rate * grad_W_hh\n        self.W_hy -= learning_rate * grad_W_hy\n        self.b_h -= learning_rate * grad_b_h\n        self.b_y -= learning_rate * grad_b_y"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    x = np.zeros_like(b, dtype=np.float64) if x0 is None else x0\n    r = b - np.dot(A, x)\n    p = r\n    for _ in range(n):\n        Ap = np.dot(A, p)\n        r_dot = np.dot(r.T, r)\n        alpha = r_dot / np.dot(p.T, Ap)\n        x += alpha * p\n        r -= alpha * Ap\n        residual_norm = np.linalg.norm(r)\n        if residual_norm < tol:\n            break\n        beta = np.dot(r.T, r) / r_dot\n        p = r + beta * p\n    return np.round(x, 8).tolist()"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    classes = np.unique(y)\n    gini = 1.0\n    for cls in classes:\n        p = len(y[y == cls]) / len(y)\n        gini -= p ** 2\n    return round(gini, 3)\ny = [0, 0, 1, 1, 1, 0, 0, 1]"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    values = []\n    column_indices = []\n    row_pointer = [0]\n    for row in dense_matrix:\n        for (col_idx, element) in enumerate(row):\n            if element != 0:\n                values.append(element)\n                column_indices.append(col_idx)\n        row_pointer.append(len(values))\n    return (values, column_indices, row_pointer)"}
{"task_id": 66, "completion_id": 0, "solution": "def orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    L_norm = [element / sum([x ** 2 for x in L]) ** 0.5 for element in L]\n    dot_product = sum([x * y for (x, y) in zip(L_norm, v)])\n    projection = [element * dot_product for element in L_norm]\n    return [round(element, 3) for element in projection]"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    values = []\n    row_indices = []\n    column_pointer = [0]\n    for column in zip(*dense_matrix):\n        for (row_index, value) in enumerate(column):\n            if value != 0:\n                values.append(value)\n                row_indices.append(row_index)\n        column_pointer.append(len(values))\n    column_pointer.pop(0)\n    return (values, row_indices, column_pointer)\ndense_matrix = [[0, 0, 3, 0, 4], [0, 0, 5, 7, 0], [0, 0, 0, 0, 0], [0, 2, 6, 0, 0]]"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    row_echelon_form = np.around(np.linalg.qr(A.T)[0].T, 8)\n    independent_columns = np.count_nonzero(row_echelon_form, axis=1) != 0\n    return row_echelon_form[:, independent_columns].T.tolist()"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    ssr = np.sum((y_true - y_pred) ** 2)\n    sst = np.sum((y_true - np.mean(y_true)) ** 2)\n    r_squared = 1 - ssr / sst\n    return round(r_squared, 3)"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    try:\n        if not img:\n            return -1\n    except TypeError:\n        return -1\n    row_len = len(img[0])\n    for row in img:\n        if len(row) != row_len:\n            return -1\n    total_brightness = 0\n    pixel_count = 0\n    for row in img:\n        for pixel in row:\n            if 0 <= pixel <= 255:\n                total_brightness += pixel\n                pixel_count += 1\n            else:\n                return -1\n    average_brightness = total_brightness / pixel_count\n    return round(average_brightness, 2)"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    if not isinstance(y_true, (list, np.ndarray)) or not isinstance(y_pred, (list, np.ndarray)):\n        raise ValueError('Input values must be either a list or a numpy array.')\n    if isinstance(y_true, list):\n        y_true = np.array(y_true)\n    if isinstance(y_pred, list):\n        y_pred = np.array(y_pred)\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Input arrays must have the same shape.')\n    if y_true.size == 0:\n        raise ValueError('Input arrays cannot be empty.')\n    rmse_value = np.sqrt(np.mean((y_true - y_pred) ** 2))\n    return round(rmse_value, 3)\ny_true = np.array([3, -0.5, 2, 7])\ny_pred = np.array([2.5, 0.0, 2, 8])"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    y_true_bool = np.array(y_true, dtype=bool)\n    y_pred_bool = np.array(y_pred, dtype=bool)\n    intersection = np.sum(np.logical_and(y_true_bool, y_pred_bool))\n    union = np.sum(np.logical_or(y_true_bool, y_pred_bool))\n    if union == 0:\n        return 1 if intersection == 0 else 0\n    jaccard = intersection / union\n    return round(jaccard, 3)"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    if y_true.ndim > 1:\n        y_true = y_true.flatten()\n    if y_pred.ndim > 1:\n        y_pred = y_pred.flatten()\n    intersect = np.sum(y_true * y_pred)\n    sum_y_true = np.sum(y_true)\n    sum_y_pred = np.sum(y_pred)\n    if sum_y_true == 0 and sum_y_pred == 0:\n        return 1.0\n    else:\n        dice_score = 2 * intersect / (sum_y_true + sum_y_pred)\n    return round(dice_score, 3)\ny_true = [0, 1, 0, 1, 1, 0, 0, 1]\ny_pred = [0, 1, 0, 0, 1, 1, 0, 1]"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\nimport nphd\ndef create_row_hv(row, dim, random_seeds):\n    row_hvs = []\n    for (feature_name, value) in row.items():\n        if feature_name in random_seeds:\n            value_hv = nphd.HypVector(generator=np.random.default_rng(random_seeds[feature_name]), dimensions=dim)\n        else:\n            value_hv = nphd.HypVector.random(dim)\n        hv = nphd.HDC.bind(feature_name, value_hv)\n        row_hvs.append(hv)\n    final_row_hv = nphd.HDC.compose(row_hvs)\n    return final_row_hv.tolist()"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    matrix = [[0, 0], [0, 0]]\n    for pair in data:\n        if pair[0] == pair[1] == 1:\n            matrix[0][0] += 1\n        elif pair[0] == 0 and pair[1] == 1:\n            matrix[1][0] += 1\n        elif pair[0] == 1 and pair[1] == 0:\n            matrix[0][1] += 1\n        elif pair[0] == pair[1] == 0:\n            matrix[1][1] += 1\n    return matrix\ndata = [[1, 1], [0, 1], [1, 0], [0, 0]]"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    if isinstance(v1, np.ndarray) and isinstance(v2, np.ndarray):\n        v1 = v1.flatten()\n        v2 = v2.flatten()\n        if v1.size != 0 and v2.size != 0 and (np.linalg.norm(v1) != 0) and (np.linalg.norm(v2) != 0):\n            if v1.shape == v2.shape:\n                similarity = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n                return round(similarity, 3)\n            else:\n                raise ValueError('The input vectors must have the same shape!')\n        else:\n            raise ValueError('Input vectors cannot be empty or have zero magnitude!')\n    else:\n        raise TypeError('Inputs must be Numpy arrays!')"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\nfrom sklearn import metrics\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    assert len(actual) == len(predicted), 'Actual and Predicted lists must be of same length'\n    assert all((x in [0, 1] for x in actual)), 'All elements in actual list must be either 0 or 1'\n    assert all((x in [0, 1] for x in predicted)), 'All elements in predicted list must be either 0 or 1'\n    confusion_matrix = metrics.confusion_matrix(actual, predicted)\n    accuracy = round(metrics.accuracy_score(actual, predicted), 3)\n    f1_score = round(metrics.f1_score(actual, predicted), 3)\n    specificity = round(confusion_matrix[0, 0] / (confusion_matrix[0, 0] + confusion_matrix[0, 1]), 3)\n    negative_predictive_value = round(confusion_matrix[0, 0] / (confusion_matrix[0, 0] + confusion_matrix[1, 0]), 3)\n    return (confusion_matrix, accuracy, f1_score, specificity, negative_predictive_value)"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\nfrom scipy import stats\ndef descriptive_statistics(data):\n    data = np.array(data)\n    stats_dict = {}\n    stats_dict['mean'] = round(np.mean(data), 4)\n    stats_dict['median'] = round(np.median(data), 4)\n    mode = stats.mode(data)\n    stats_dict['mode'] = mode[0][0]\n    stats_dict['mode_frequency'] = mode[1][0]\n    stats_dict['variance'] = round(np.var(data), 4)\n    stats_dict['standard_deviation'] = round(np.std(data), 4)\n    percentiles = np.percentile(data, [25, 50, 75])\n    stats_dict['25th_percentile'] = round(percentiles[0], 4)\n    stats_dict['50th_percentile'] = round(percentiles[1], 4)\n    stats_dict['75th_percentile'] = round(percentiles[2], 4)\n    iqr = percentiles[2] - percentiles[0]\n    stats_dict['interquartile_range'] = round(iqr, 4)\n    return stats_dict\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials\n    \"\"\"\n    k_combinations = math.comb(n, k)\n    p_power_k = math.pow(p, k)\n    q_power_n_k = math.pow(1 - p, n - k)\n    probability = k_combinations * p_power_k * q_power_n_k\n    return round(probability, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    \"\"\"\n    coefficient = 1.0 / (std_dev * math.sqrt(2 * math.pi))\n    exponent = -(x - mean) ** 2 / (2 * std_dev ** 2)\n    pdf = coefficient * math.exp(exponent)\n    return round(pdf, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    \n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    \"\"\"\n    probability = pow(lam, k) * math.exp(-lam) / math.factorial(k)\n    return round(probability, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    \n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    \"\"\"\n    if (img < 0).any() or (img > 255).any():\n        raise ValueError('Image pixel values should be between 0 and 255')\n    max_val = np.amax(img)\n    min_val = np.amin(img)\n    return max_val - min_val\nimg = np.array([[0, 128, 255], [255, 128, 0], [64, 192, 32]])"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    \"\"\"\n    return np.dot(vec1, vec2)\nvec1 = np.array([1, 2, 3])\nvec2 = np.array([4, 5, 6])"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n\n    Returns:\n        A list of lists, where each inner list contains the polynomial features of the corresponding data point.\n    \"\"\"\n    if degree < 0:\n        return []\n    data_array = np.array(data)\n    num_features = len(data)\n    num_transformed_features = int((degree + 1) * (degree + 2) / 2)\n    transformed_data = []\n    for i in range(num_features):\n        feature = data_array[i]\n        new_features = [1]\n        for d in range(1, degree + 1):\n            for power in range(1, d + 1):\n                new_features.append(feature ** power)\n        transformed_data.append(new_features)\n    return np.round(transformed_data, 8).tolist()"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    if position == 0 or d_model <= 0:\n        return -1\n    (position, d_model) = (int(position), int(d_model))\n    pos_arr = np.arange(position, dtype=np.float16)[:, np.newaxis]\n    d_model_arr = np.arange(d_model, dtype=np.float16)[np.newaxis, :]\n    angle_rates = pos_arr / np.power(10000, d_model_arr / d_model)\n    angle_rates[:, 0::2] = np.sin(angle_rates[:, 0::2])\n    angle_rates[:, 1::2] = np.cos(angle_rates[:, 1::2])\n    return angle_rates.tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    elif training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    else:\n        return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    mt = m / (1 - beta1 ** t)\n    v = beta2 * v + (1 - beta2) * grad ** 2\n    vt = v / (1 - beta2 ** t)\n    parameter = parameter - learning_rate * mt / (np.sqrt(vt) + epsilon)\n    return (np.round(parameter, 5).tolist(), np.round(m, 5).tolist(), np.round(v, 5).tolist())"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\nimport torch\nfrom torch import nn\nfrom torch.nn import functional as F\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    prompt_tokens = encoder.encode(prompt)\n\n    class MultiHeadAttention(nn.Module):\n\n        def __init__(self, hparams, W):\n            super().__init__()\n            self.n_head = hparams['n_head']\n            self.W = W\n\n        def forward(self, x):\n            return x\n\n    class FeedForward(nn.Module):\n\n        def __init__(self, d_model, d_ff=2048, dropout=0.1):\n            super().__init__()\n            self.w_1 = nn.Linear(d_model, d_ff)\n            self.w_2 = nn.Linear(d_ff, d_model)\n            self.dropout = nn.Dropout(dropout)\n\n        def forward(self, x):\n            return self.w_2(self.dropout(F.relu(self.w_1(x))))\n\n    class TransformerBlock(nn.Module):\n\n        def __init__(self, hparams, W_Q, W_K, W_V, W_O):\n            super().__init__()\n            self.attention = MultiHeadAttention(hparams, W_Q)\n            self.feed_forward = FeedForward(size_of_model)\n            self.layer_norm1 = nn.LayerNorm(size_of_model)\n            self.layer_norm2 = nn.LayerNorm(size_of_model)\n\n        def forward(self, x):\n            h = self.layer_norm1(x + self.attention(x))\n            out = self.layer_norm2(h + self.feed_forward(h))\n            return out\n    size_of_model = params['wte'].shape[1]\n    n_layers = 12\n    vocab_size = len(encoder.encoder_dict)\n    model = nn.Sequential(*[TransformerBlock(hparams, params['wte'], params['wte'], params['wte'], params['wte']) for _ in range(n_layers)])\n    model.eval()\n    with torch.no_grad():\n        context = [0] * hparams['n_ctx']\n        context_tokens = prompt_tokens"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.special import softmax\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def calculate_attention_scores(crystal_values, dimension):\n        attention_scores = softmax(crystal_values / dimension)\n        return attention_scores\n\n    def compute_weighted_pattern(attention_scores, crystal_values):\n        weighted_pattern = np.sum(attention_scores * crystal_values)\n        return weighted_pattern\n    attention_scores = calculate_attention_scores(crystal_values, dimension)\n    weighted_pattern = compute_weighted_pattern(attention_scores, crystal_values)\n    return round(weighted_pattern, 4)\ncrystal_values = np.array([1, 2, 3, 4, 5])\ndimension = 2"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef get_document_statistics(corpus):\n    return [len(c) for c in corpus]\ndef get_avg_document_length(document_lengths):\n    return sum(document_lengths) / len(document_lengths)\ndef get_term_freqs(corpus):\n    term_freqs = []\n    for document in corpus:\n        frequencies = {}\n        for term in document:\n            if term not in frequencies:\n                frequencies[term] = 0\n            frequencies[term] += 1\n        term_freqs.append(frequencies)\n    return term_freqs\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    document_lengths = get_document_statistics(corpus)\n    avg_document_length = get_avg_document_length(document_lengths)\n    term_freqs = get_term_freqs(corpus)\n    scores = []\n    for query_term in query:\n        query_term_freqs = [term_freqs[i].get(query_term, 0) for i in range(len(corpus))]\n        for i in range(len(corpus)):\n            freq = term_freqs[i].get(query_term, 0)\n            numerator = freq * (k1 + 1)\n            denominator = freq + k1 * (1 - b + b * (document_lengths[i] / avg_document_length))\n            if i >= len(scores):\n                scores.append(numerator / denominator)\n            else:\n                scores[i] += numerator / denominator\n    scores = [round(score, 3) for score in scores]\n    return scores"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    true_positives = sum([1 for i in range(len(y_true)) if y_true[i] == y_pred[i] == 1])\n    false_positives = sum([1 for i in range(len(y_true)) if y_pred[i] == 1 and y_true[i] == 0])\n    false_negatives = sum([1 for i in range(len(y_true)) if y_pred[i] == 0 and y_true[i] == 1])\n    precision = true_positives / (true_positives + false_positives) if true_positives + false_positives > 0 else 0\n    recall = true_positives / (true_positives + false_negatives) if true_positives + false_negatives > 0 else 0\n    f1_score = 2 * (precision * recall) / (precision + recall) if precision + recall > 0 else 0\n    f1_score = round(f1_score, 3)\n    return f1_score"}
{"task_id": 92, "completion_id": 0, "solution": "import math\nimport numpy as np\nfrom scipy.optimize import curve_fit\ntrend_func = lambda x, a, b: a * x + b\nfluctuation_func = lambda x: 10 * math.sin(2 * math.pi * x / 10)\ndef power_grid_forecast(consumption_data):\n    detrended_data = [d - fluctuation_func(i) for (i, d) in enumerate(consumption_data, start=1)]\n    (popt, _) = curve_fit(trend_func, np.arange(1, len(detrended_data) + 1), detrended_data)\n    day15_base = trend_func(15, *popt)\n    day15_prediction = day15_base + fluctuation_func(15)\n    final_prediction = math.ceil(day15_prediction * 1.05)\n    return final_prediction"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    if not isinstance(y_true, np.ndarray) or not isinstance(y_pred, np.ndarray):\n        raise ValueError('Both input arguments should be of numpy.ndarray type.')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Both input arrays should have the same shape.')\n    abs_error = np.abs(y_true - y_pred)\n    return round(np.mean(abs_error), 3)\ny_true = np.array([1, 2, 3, 4, 5])\ny_pred = np.array([1.1, 1.9, 3.2, 3.8, 4.9])"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef compute_qkv(X, W_q, W_k, W_v):\n    q = X.dot(W_q)\n    k = X.dot(W_k)\n    v = X.dot(W_v)\n    return (q, k, v)\ndef scaled_dot_product_attention(Q, K, V, mask=None):\n    K_softmax = np.exp(K) / np.sum(np.exp(K), axis=-1, keepdims=True)\n    attention_scores = np.dot(K_softmax, V)\n    return attention_scores\ndef self_attention(Q, K, V, n_heads):\n    Q_split = np.array_split(Q, n_heads, axis=-1)\n    K_split = np.array_split(K, n_heads, axis=-1)\n    V_split = np.array_split(V, n_heads, axis=-1)\n    attention_outputs = []\n    for (Q_i, K_i, V_i) in zip(Q_split, K_split, V_split):\n        attention_outputs.append(scaled_dot_product_attention(Q_i, K_i, V_i))\n    multi_head_attention = np.concatenate(attention_outputs, axis=-1)\n    return multi_head_attention\ndef multi_head_attention(X, W_q, W_k, W_v, n_heads):\n    (q, k, v) = compute_qkv(X, W_q, W_k, W_v)\n    multi_head_attention_output = self_attention(q, k, v, n_heads)\n    multi_head_attention_output = np.round(multi_head_attention_output, 4).tolist()\n    return multi_head_attention_output"}
{"task_id": 95, "completion_id": 0, "solution": "import math\ndef phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    pairs = list(zip(x, y))\n    N00 = pairs.count((0, 0))\n    N01 = pairs.count((0, 1))\n    N10 = pairs.count((1, 0))\n    N11 = pairs.count((1, 1))\n    phi = (N00 * N11 - N01 * N10) / math.sqrt((N00 + N01) * (N00 + N10) * (N10 + N11) * (N01 + N11))\n    return round(phi, 4)\nx = [0, 1, 0, 1, 0, 1]\ny = [0, 0, 1, 1, 0, 1]"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    if x < -2.5:\n        return 0.0\n    elif x > 2.5:\n        return 1.0\n    else:\n        return 0.2 * x + 0.5"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value\n    \"\"\"\n    if x >= 0:\n        return round(x, 4)\n    else:\n        return round(alpha * (math.exp(x) - 1), 4)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    if x >= 0:\n        return x\n    else:\n        return alpha * x"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x)\n    \"\"\"\n    try:\n        if x > 100:\n            return x\n        elif x < -100:\n            return math.exp(x)\n        else:\n            return round(math.log(1 + math.exp(x)), 4)\n    except Exception as e:\n        print(f'An error occurred: {e}')"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input\n    \"\"\"\n    return round(x / (1 + abs(x)), 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    (rhos, A, pi_theta_old, pi_theta_ref) = (np.array(rhos), np.array(A), np.array(pi_theta_old), np.array(pi_theta_ref))\n    clip_rhos = np.clip(rhos, 1 - epsilon, 1 + epsilon)\n    surrogate_loss = np.minimum(clip_rhos * A, rhos * A)\n    kl_div = np.sum(pi_theta_old * (np.log(pi_theta_old) - np.log(pi_theta_ref)))\n    grpo_obj = np.mean(surrogate_loss) - beta * kl_div\n    return round(grpo_obj, 6)"}
{"task_id": 102, "completion_id": 0, "solution": "import numpy as np\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n    Args:\n        x: Input value\n    Returns:\n        The Swish activation value\n    \"\"\"\n    swish_value = x * (1 / (1 + np.exp(-x)))\n    return round(swish_value, 4)"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x >= 0:\n        return round(scale * x, 4)\n    else:\n        return round(scale * (alpha * (math.exp(x) - 1)), 4)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the sigmoid of z.\"\"\"\n    return 1 / (1 + np.exp(-z))\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N x D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    weighted_sum = np.dot(X, weights) + bias\n    predictions = sigmoid(weighted_sum)\n    binary_predictions = [1 if p >= 0.5 else 0 for p in predictions]\n    return binary_predictions"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef softmax(z):\n    z -= np.max(z)\n    sm = (np.exp(z).T / np.sum(np.exp(z), axis=1)).T\n    return sm\ndef cross_entropy(y_pred, y_true):\n    loss = -np.sum(y_true * np.log(y_pred))\n    return loss\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    (num_classes, num_features) = (X.shape[0], X.shape[1])\n    weights = np.random.randn(num_features, num_classes) * 0.01\n    bias = np.zeros((num_classes, 1))\n    losses = []\n    for i in range(iterations):\n        z = np.dot(X, weights) + bias\n        y_pred = softmax(z)\n        loss = cross_entropy(y_pred, y)\n        losses.append(loss)\n        dscores = y_pred - y\n        dW = np.dot(X.T, dscores)\n        weights -= learning_rate * dW\n    return (weights.round(4).flatten().tolist(), np.array(losses).round(4).tolist())"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\ndef binary_cross_entropy_loss(y_true, y_pred):\n    return -(y_true * np.log(y_pred) + (1 - y_true) * np.log(1 - y_pred)).mean()\ndef gradient_descent(X, y, learning_rate, iterations):\n    weights = np.zeros(X.shape[1])\n    bias = 0\n    losses = []\n    for i in range(iterations):\n        linear_model = np.dot(X, weights) + bias\n        y_predicted = sigmoid(linear_model)\n        dw = 1 / X.shape[0] * np.dot(X.T, y_predicted - y)\n        db = 1 / X.shape[0] * np.sum(y_predicted - y)\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n        loss = binary_cross_entropy_loss(y, y_predicted)\n        losses.append(loss)\n    return (weights, bias, losses)\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \"\"\"\n    (weights, bias, losses) = gradient_descent(X, y, learning_rate, iterations)\n    weights = np.round(weights, 4).tolist()\n    bias = np.round(bias, 4)\n    losses = np.round(losses, 4).tolist()\n    return (weights, bias, losses)"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    score = np.dot(Q, K.transpose())\n    score = np.where(mask, score, -1000000000.0)\n    weights = np.exp(score) / np.sum(np.exp(score), axis=-1, keepdims=True)\n    output = np.dot(weights, V)\n    return output.tolist()\nmask = np.random.randint(2, size=(5, 5))\noutput = masked_attention(Q, K, V, mask)"}
{"task_id": 108, "completion_id": 0, "solution": "import pandas as pd\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    \"\"\"\n    df = pd.Series(apples)\n    unique_colors = df.nunique()\n    total_apples = len(apples)\n    if total_apples == 0:\n        return 0\n    else:\n        disorder = round(unique_colors / total_apples, 4)\n        return disorder"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    mean = np.mean(X, axis=-1, keepdims=True)\n    variance = np.var(X, axis=-1, keepdims=True)\n    normalized = (X - mean) / np.sqrt(variance + epsilon)\n    scaled_shifted = gamma * normalized + beta\n    return np.round(scaled_shifted, 5).tolist()\nX = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], dtype=np.float32)\ngamma = np.array([1, 2, 3], dtype=np.float32)\nbeta = np.array([0, 0, 0], dtype=np.float32)"}
{"task_id": 110, "completion_id": 0, "solution": "import nltk\nimport numpy as np\nfrom collections import Counter\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n\n    def precision(reference, candidate):\n        reference_ngrams = Counter(nltk.ngrams(reference, 1))\n        candidate_ngrams = Counter(nltk.ngrams(candidate, 1))\n        ngram_matches = sum((reference_ngrams & candidate_ngrams).values())\n        return ngram_matches / max(1, sum(candidate_ngrams.values()))\n\n    def penalty(reference, candidate):\n        ref_len = len(reference)\n        cand_len = len(candidate)\n        if ref_len > cand_len:\n            return gamma * (ref_len - cand_len)\n        return 0\n    prec = precision(reference, candidate)\n    rec = precision(candidate, reference)\n    p = penalty(reference, candidate)\n    fmean = prec * rec / max(prec + rec, 0.001) ** beta\n    score = fmean * (1 - p)\n    return np.round(score, 3)"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    p_x = total_counts_x / total_samples\n    p_y = total_counts_y / total_samples\n    p_xy = joint_counts / total_samples\n    pmi = np.log2(p_xy / (p_x * p_y))\n    return round(pmi, 3)\njoint_counts = 500\ntotal_counts_x = 1000\ntotal_counts_y = 2000\ntotal_samples = 10000\npmi = compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples)"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    min_x = min(x)\n    max_x = max(x)\n    if min_x == max_x:\n        return [round(0, 4) for _ in x]\n    return [round((i - min_x) / (max_x - min_x), 4) for i in x]"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    relu1 = np.maximum(np.matmul(w1.T, x), 0)\n    relu2 = np.maximum(np.matmul(w2.T, relu1), 0)\n    residual_connection = relu2 + x\n    final_output = np.maximum(residual_connection, 0)\n    return np.round(final_output, 4).tolist()"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray):\n    if len(x.shape) != 3:\n        raise ValueError('The input array must be 3D, but got an array with shape {}'.format(x.shape))\n    average_pool = np.mean(x, axis=(0, 1))\n    return average_pool"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    if X.ndim != 4:\n        raise ValueError('Input must be a 4D array (BCHW format)')\n    if gamma.shape[0] != X.shape[1] or beta.shape[0] != X.shape[1]:\n        raise ValueError('Scale (gamma) and shift (beta) parameters must have same shape as channels')\n    mean = np.mean(X, axis=(0, 2, 3), keepdims=True)\n    var = np.var(X, axis=(0, 2, 3), keepdims=True)\n    X_hat = (X - mean) / np.sqrt(var + epsilon)\n    y = gamma * X_hat + beta\n    return y.round(4).tolist()"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    derivative = n * c * x ** (n - 1)\n    return round(derivative, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10):\n    basis = []\n    for vector in vectors:\n        v_orth = np.array(vector, dtype=float)\n        for prev_vector in basis:\n            v_orth -= np.dot(v_orth, prev_vector) * prev_vector\n        if np.linalg.norm(v_orth) < tol:\n            continue\n        v_orth /= np.linalg.norm(v_orth)\n        basis.append(v_orth.round(4).tolist())\n    return basis"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    a = np.array(a)\n    b = np.array(b)\n    result = np.cross(a, b)\n    return result.round(4).tolist()\na = [1, 2, 3]\nb = [4, 5, 6]"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    if A.shape[0] != A.shape[1]:\n        raise ValueError('A must be a square matrix')\n    if len(b.shape) != 1 or b.shape[0] != A.shape[0]:\n        raise ValueError('b must be a column vector of the same size as the number of rows in A')\n    det_A = np.linalg.det(A)\n    if det_A == 0:\n        return -1\n    x = []\n    for i in range(A.shape[1]):\n        A_i = A.copy()\n        A_i[:, i] = b\n        det_A_i = np.linalg.det(A_i)\n        x_i = det_A_i / det_A\n        x.append(x_i)\n    return [round(xi, 4) for xi in x]"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    if len(p) != len(q) or len(p) == 0 or len(q) == 0:\n        return 0.0\n    p = np.array(p)\n    q = np.array(q)\n    bc_coeff = np.sum(np.sqrt(p * q))\n    dist = -np.log(bc_coeff)\n    return round(dist, 4)"}
{"task_id": 121, "completion_id": 0, "solution": "from typing import List, Union\ndef vector_sum(a: List[Union[int, float]], b: List[Union[int, float]]) -> Union[List[Union[int, float]], int]:\n    if len(a) != len(b):\n        return -1\n    return [x + y for (x, y) in zip(a, b)]"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n\n    def compute_policy(s, theta):\n        exp = np.exp(theta[s, :])\n        return exp / np.sum(exp)\n\n    def compute_episode_gradient(episode, theta):\n        s_array = np.array([s for (s, _, _) in episode])\n        a_array = np.array([a for (_, a, _) in episode])\n        r_array = np.array([r for (_, _, r) in episode])\n        returns = np.cumsum(r_array[::-1])[::-1]\n        policy_array = np.array([compute_policy(s, theta) for s in s_array])\n        log_policy_array = np.log(policy_array[np.arange(policy_array.shape[0]), a_array])\n        gradients = returns[:, None] * (log_policy_array[:, None] - policy_array)\n        return gradients.mean(0)\n    gradients = np.array([compute_episode_gradient(episode, theta) for episode in episodes])\n    gradient = gradients.mean(0)\n    return np.around(gradient, 4).tolist()"}
{"task_id": 123, "completion_id": 0, "solution": "def compute_efficiency(n_experts, k_active, d_in, d_out):\n    dense_params = n_experts * d_in * d_out\n    moe_params_sparse = n_experts * k_active * (d_in + d_out)\n    moe_params_dense = n_experts * (d_in + d_out)\n    savings = (dense_params - moe_params_sparse) / dense_params * 100\n    return round(savings, 1)"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    gate_scores = (X @ W_g + W_noise @ N).round(4)\n    top_k_indices = (-gate_scores).argsort()[:k]\n    gating_probs = np.zeros_like(gate_scores)\n    gating_probs[top_k_indices] = 1\n    return gating_probs.round(4).tolist()"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int) -> list:\n    g = np.exp(np.dot(x, Wg.T))\n    g = g / np.sum(g, axis=1, keepdims=True)\n    top_experts = np.argsort(-g)[:, :top_k]\n    expert_outputs = np.dot(x[:, np.newaxis, :], We[top_experts])\n    weighted_expert_outputs = expert_outputs * np.expand_dims(g[np.arange(x.shape[0])[:, np.newaxis], top_experts], -1)\n    aggregate_outputs = np.sum(weighted_expert_outputs, axis=1)\n    return np.round(aggregate_outputs, 4).tolist()"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    (B, C, H, W) = X.shape\n    assert C % num_groups == 0\n    X_reshaped = X.reshape(B, num_groups, -1)\n    mean = np.mean(X_reshaped, axis=(2,), keepdims=True)\n    var = np.var(X_reshaped, axis=(2,), keepdims=True)\n    X_normalized = (X_reshaped - mean) / np.sqrt(var + epsilon)\n    X_normalized_scaled_shifted = gamma * X_normalized + beta\n    X_normalized_scaled_shifted_original_shape = X_normalized_scaled_shifted.reshape(B, C, H, W)\n    return np.round(X_normalized_scaled_shifted_original_shape, 4).tolist()"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n    \"\"\"\n    Find the value of x where f(x) reaches its minimum\n    :param start_x: Initial value of x\n    :param learning_rate: Learning rate for gradient descent (default: 0.1)\n    :param tolerance: Stopping criterion for the norm of the gradient (default: 1e-6)\n    :param max_iters: Maximum number of iterations (default: 10000)\n    :return: Value of x where f(x) reaches its minimum\n    \"\"\"\n\n    def f(x):\n        return x ** 4 - 3 * x ** 3 + 2\n\n    def grad_f(x):\n        return 4 * x ** 3 - 9 * x ** 2\n    x = start_x\n    for _ in range(max_iters):\n        grad = grad_f(x)\n        if np.linalg.norm(grad) < tolerance:\n            break\n        x -= learning_rate * grad\n    return round(x, 4)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    x_mean = np.mean(x, axis=1, keepdims=True)\n    x_var = np.var(x, axis=1, keepdims=True)\n    x_normalized = (x - x_mean) / np.sqrt(x_var + beta)\n    x_transformed = alpha * np.tanh(gamma * x_normalized)\n    return np.round(x_transformed, 4).tolist()"}
