{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    if len(a[0]) != len(b):\n        return -1\n    result = []\n    for row in a:\n        dot_product = sum((x * y for (x, y) in zip(row, b)))\n        result.append(dot_product)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    return [[a[j][i] for j in range(len(a))] for i in range(len(a[0]))]"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    a_np = np.array(a)\n    try:\n        a_reshaped = a_np.reshape(new_shape)\n    except ValueError:\n        return []\n    return a_reshaped.tolist()"}
{"task_id": 4, "completion_id": 0, "solution": "def calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    if mode == 'row':\n        return [sum(row) / len(row) for row in matrix]\n    elif mode == 'column':\n        return [sum(col) / len(matrix) for col in zip(*matrix)]\n    else:\n        raise ValueError(\"Invalid mode. Please choose 'row' or 'column'.\")\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    result = []\n    for row in matrix:\n        new_row = []\n        for element in row:\n            new_element = element * scalar\n            new_row.append(new_element)\n        result.append(new_row)\n    return result"}
{"task_id": 6, "completion_id": 0, "solution": "import numpy as np\ndef calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    \"\"\"\n    Calculates the eigenvalues of a 2x2 matrix.\n    \n    Parameters:\n    matrix (list[list[float|int]]): 2x2 matrix\n    \n    Returns:\n    list[float]: List of eigenvalues sorted from highest to lowest\n    \"\"\"\n    np_matrix = np.array(matrix)\n    (eigenvalues, _) = np.linalg.eig(np_matrix)\n    eigenvalues.sort()\n    return eigenvalues[::-1].tolist()"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    A = np.array(A)\n    T = np.array(T)\n    S = np.array(S)\n    if np.linalg.det(T) == 0 or np.linalg.det(S) == 0:\n        return -1\n    result = np.linalg.inv(T) @ A @ S\n    result = np.round(result, 4)\n    result = result.tolist()\n    return result"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    det = matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]\n    if det == 0:\n        return None\n    else:\n        inv_det = 1 / det\n        inverted_matrix = [[inv_det * matrix[1][1], -inv_det * matrix[0][1]], [-inv_det * matrix[1][0], inv_det * matrix[0][0]]]\n        return inverted_matrix"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]] | int:\n    if len(a[0]) != len(b):\n        return -1\n    else:\n        result = [[0 for _ in range(len(b[0]))] for _ in range(len(a))]\n        for i in range(len(a)):\n            for j in range(len(b[0])):\n                for k in range(len(b)):\n                    result[i][j] += a[i][k] * b[k][j]\n        return result"}
{"task_id": 10, "completion_id": 0, "solution": "def calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    means = [sum(feature) / len(feature) for feature in vectors]\n    mean_corrected = [[obs - means[i] for obs in vectors[i]] for i in range(len(vectors))]\n    covariance_matrix = [[sum([mean_corrected[i][k] * mean_corrected[j][k] for k in range(len(vectors[0]))]) / (len(vectors[0]) - 1) for j in range(len(vectors))] for i in range(len(vectors))]\n    return covariance_matrix\nvectors = [[1, 2, 3, 4, 5], [2, 3, 4, 5, 6]]\ncovariance_matrix = calculate_covariance_matrix(vectors)"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    n = len(A)\n    x = np.zeros(n)\n    for _ in range(n):\n        x_new = np.zeros(n)\n        for i in range(n):\n            s = sum((-A[i][j] * x[j] for j in range(n) if i != j))\n            x_new[i] = (b[i] + s) / A[i][i]\n        x_new = np.round(x_new, 4)\n        if np.allclose(x, x_new, atol=0.0001):\n            break\n        x = x_new\n    return x.tolist()\nA = np.array([[10.0, -1.0, 2.0, 0.0], [-1.0, 11.0, -1.0, 3.0], [2.0, -1.0, 10.0, -1.0], [0.0, 3.0, -1.0, 8.0]])\nb = np.array([6.0, 25.0, -11.0, 15.0])\nn = 20"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    max_iter = 1000\n    eps = 1e-10\n    converged = False\n    Ak = A.copy()\n    n = 2\n    U = np.eye(n)\n    V = np.eye(n)\n    for _ in range(max_iter):\n        (k, l) = (0, 1)\n        max_val = np.abs(Ak[k, l])\n        for i in range(n):\n            for j in range(i + 1, n):\n                if np.abs(Ak[i, j]) > max_val:\n                    max_val = np.abs(Ak[i, j])\n                    (k, l) = (i, j)\n        if max_val < eps:\n            converged = True\n            break\n        if np.abs(Ak[l, l] - Ak[k, k]) < eps * (np.abs(Ak[k, k]) + np.abs(Ak[l, l])):\n            t = Ak[k, k] / Ak[k, l]\n            c = 1 / np.sqrt(1 + t ** 2)\n            s = c * t\n        else:\n            phi = np.arctan(2 * Ak[k, l] / (Ak[l, l] - Ak[k, k])) / 2\n            c = np.cos(phi)\n            s = np.sin(phi)\n        Ak[k, k] = c ** 2 * Ak[k, k] - 2 * c * s * Ak[k, l] + s ** 2 * Ak[l, l]\n        Ak[l, l] = s ** 2 * Ak[k, k] + 2 * c * s * Ak[k, l] + c ** 2 * Ak[l, l]\n        Ak[k, l] = 0\n        Ak[l, k] = 0\n        tempU = U[:, k].copy()\n        U[:, k] = c * tempU + s * U[:, l]\n        U[:, l] = -s * tempU + c * U[:, l]\n        tempV = V[:, k].copy()\n        V[:, k] = c * tempV + s * V[:, l]\n        V[:, l] = -s * tempV + c * V[:, l]\n    singular_values = np.sqrt(np.abs(np.diag(Ak)))\n    idx = np.argsort(singular_values)[::-1]\n    singular_values = singular_values[idx]\n    U = U[:, idx]\n    V = V[:, idx]\n    return (round(singular_values[0], 4), round(singular_values[1], 4), U, V)"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n    if len(matrix) != 4 or len(matrix[0]) != 4:\n        raise ValueError('Input matrix should be a 4x4 matrix')\n\n    def determinant_3x3(m):\n        return m[0][0] * (m[1][1] * m[2][2] - m[2][1] * m[1][2]) - m[0][1] * (m[1][0] * m[2][2] - m[2][0] * m[1][2]) + m[0][2] * (m[1][0] * m[2][1] - m[2][0] * m[1][1])\n    det = 0\n    for c in range(4):\n        sub_matrix = [row[:c] + row[c + 1:] for row in matrix[1:]]\n        sign = -1 if c % 2 else 1\n        det += sign * matrix[0][c] * determinant_3x3(sub_matrix)\n    return det"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    X = np.array(X)\n    y = np.array(y)\n    X = np.append(np.ones((X.shape[0], 1)), X, axis=1)\n    coefficients = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(y)\n    coefficients = np.round(coefficients, 4)\n    return coefficients.tolist()\nX = [[1, 2], [3, 4], [5, 6]]\ny = [1, 2, 3]\ncoefficients = linear_regression_normal_equation(X, y)"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> np.ndarray:\n    theta = np.zeros(X.shape[1])\n    for _ in range(iterations):\n        gradient = 2 / X.shape[0] * X.T @ (X @ theta - y)\n        theta = theta - alpha * gradient\n    theta = np.round(theta, 4)\n    return theta.tolist()"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    mean = np.mean(data, axis=0)\n    std_dev = np.std(data, axis=0)\n    standardized_data = (data - mean) / std_dev\n    min_val = np.min(data, axis=0)\n    max_val = np.max(data, axis=0)\n    normalized_data = (data - min_val) / (max_val - min_val)\n    standardized_data = np.round(standardized_data, 4).tolist()\n    normalized_data = np.round(normalized_data, 4).tolist()\n    return (standardized_data, normalized_data)\ndata = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n    points = np.array(points)\n    centroids = np.array(initial_centroids)\n    clusters = [[] for _ in range(k)]\n    for _ in range(max_iterations):\n        clusters = [[] for _ in range(k)]\n        for point in points:\n            distances = np.linalg.norm(centroids - point, axis=1)\n            closest_centroid_index = np.argmin(distances)\n            clusters[closest_centroid_index].append(point)\n        new_centroids = np.array([np.mean(cluster, axis=0) for cluster in clusters])\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n    final_centroids = [tuple(np.round(centroid, 4)) for centroid in centroids]\n    return final_centroids"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    n = len(X)\n    if shuffle:\n        if random_seed is not None:\n            np.random.seed(random_seed)\n        indices = np.random.permutation(n)\n    else:\n        indices = np.arange(n)\n    fold_size = n // k\n    resids = n % k\n    fold_sizes = [fold_size + 1] * resids + [fold_size] * (k - resids)\n    fold_starts = np.cumsum([0] + fold_sizes[:-1])\n    folds = []\n    for (i, size, start) in zip(range(k), fold_sizes, fold_starts):\n        test_index = indices[start:start + size]\n        train_index = np.concatenate([indices[0:start], indices[start + size:]])\n        folds.append((train_index, test_index))\n    return folds"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    data_std = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    covariance_matrix = np.cov(data_std.T)\n    (eigenvalues, eigenvectors) = np.linalg.eig(covariance_matrix)\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    principal_components = eigenvectors[:, :k]\n    principal_components = np.round(principal_components, 4)\n    return principal_components.tolist()"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n    target_values = [example[target_attr] for example in examples]\n    target_entropy = entropy(target_values)\n    if len(attributes) == 0:\n        return most_common(target_values)\n    if target_entropy == 0:\n        return examples[0][target_attr]\n    best_attr = max(attributes, key=lambda attr: information_gain(examples, attr, target_attr))\n    tree = {best_attr: {}}\n    remaining_attributes = [attr for attr in attributes if attr != best_attr]\n    for (value, subset) in split_examples(examples, best_attr):\n        subtree = learn_decision_tree(subset, remaining_attributes, target_attr)\n        tree[best_attr][value] = subtree\n    return tree\ndef entropy(values: list) -> float:\n    counter = Counter(values)\n    total = len(values)\n    return sum((-count / total * math.log2(count / total) for count in counter.values()))\ndef information_gain(examples: list[dict], attr: str, target_attr: str) -> float:\n    total_entropy = entropy([example[target_attr] for example in examples])\n    for (value, subset) in split_examples(examples, attr):\n        subset_entropy = entropy([example[target_attr] for example in subset])\n        total_entropy -= len(subset) / len(examples) * subset_entropy\n    return total_entropy\ndef split_examples(examples: list[dict], attr: str) -> tuple[str, list[dict]]:\n    return [(value, [example for example in examples if example[attr] == value]) for value in set([example[attr] for example in examples])]\ndef most_common(values: list) -> str:\n    return Counter(values).most_common(1)[0][0]"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(x, y):\n    return np.dot(x, y)\ndef rbf_kernel(x, y, sigma):\n    return np.exp(-np.linalg.norm(x - y) ** 2 / (2 * sigma ** 2))\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    (n_samples, n_features) = data.shape\n    alpha = np.zeros(n_samples)\n    bias = 0\n    if kernel == 'linear':\n        kernel_func = linear_kernel\n    elif kernel == 'rbf':\n        kernel_func = lambda x, y: rbf_kernel(x, y, sigma)\n    for _ in range(iterations):\n        for i in range(n_samples):\n            value = 0\n            for j in range(n_samples):\n                value += alpha[j] * labels[j] * kernel_func(data[j], data[i])\n            value += bias\n            if labels[i] * value < 1:\n                alpha[i] += 1\n                bias += lambda_val * labels[i]\n    sv_alpha_sum = 0\n    for i in range(n_samples):\n        sv_alpha_sum += alpha[i] * labels[i] * kernel_func(data[i], data[0])\n    bias -= sv_alpha_sum\n    return (alpha.tolist(), round(bias, 4))"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    return round(1 / (1 + math.exp(-z)), 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    sum_exp_scores = sum((math.exp(score) for score in scores))\n    softmax_scores = [round(math.exp(score) / sum_exp_scores, 4) for score in scores]\n    return softmax_scores\nscores = [1.0, 2.0, 3.0]"}
{"task_id": 24, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    assert len(features[0]) == len(weights), 'Number of features does not match number of weights.'\n    assert len(features) == len(labels), 'Number of feature vectors does not match number of labels.'\n    predicted_probs = []\n    for features_vector in features:\n        z = np.dot(features_vector, weights) + bias\n        predicted_probs.append(1.0 / (1.0 + math.exp(-z)))\n    mse = np.mean((np.array(predicted_probs) - np.array(labels)) ** 2)\n    predicted_probs = [round(prob, 4) for prob in predicted_probs]\n    mse = round(mse, 4)\n    return (predicted_probs, mse)"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1.0 / (1 + np.exp(-x))\ndef sigmoid_derivative(x):\n    return x * (1.0 - x)\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    weights = initial_weights\n    bias = initial_bias\n    mse_values = []\n    for _ in range(epochs):\n        weighted_sum = np.dot(features, weights) + bias\n        predictions = sigmoid(weighted_sum)\n        loss = labels - predictions\n        mse = np.mean(np.square(loss))\n        mse_values.append(round(mse, 4))\n        dloss_dpredictions = 2 * loss\n        dpredictions_dweightedsum = sigmoid_derivative(predictions)\n        weights_gradient = np.dot(features.T, dloss_dpredictions * dpredictions_dweightedsum)\n        bias_gradient = np.sum(dloss_dpredictions * dpredictions_dweightedsum)\n        weights -= learning_rate * weights_gradient\n        bias -= learning_rate * bias_gradient\n    return (weights.tolist(), round(bias, 4), mse_values)"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        out = Value(self.data + other.data, (self, other), '+')\n\n        def _backward():\n            self.grad += out.grad\n            other.grad += out.grad\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        out = Value(self.data * other.data, (self, other), '*')\n\n        def _backward():\n            self.grad += other.data * out.grad\n            other.grad += self.data * out.grad\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(max(0, self.data), (self,), 'ReLU')\n\n        def _backward():\n            self.grad += (out.data > 0) * out.grad\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1\n        for node in reversed(topo):\n            node._backward()"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    B_matrix = np.array(B).transpose()\n    C_matrix = np.array(C).transpose()\n    P = np.dot(C_matrix, np.linalg.inv(B_matrix))\n    P_rounded = np.round(P, 4)\n    return P_rounded.tolist()"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    ATA = np.matmul(A.T, A)\n    (eig_values, V) = np.linalg.eig(ATA)\n    S = np.zeros_like(A, dtype=np.float64)\n    for i in range(min(A.shape)):\n        S[i, i] = np.sqrt(abs(eig_values[i]))\n    U = np.zeros_like(A, dtype=np.float64)\n    for i in range(min(A.shape)):\n        if S[i, i] != 0:\n            U[:, i] = np.matmul(A, V[:, i]) / S[i, i]\n    U = np.round(U, 4)\n    S = np.round(S, 4)\n    V = np.round(V, 4)\n    return (U.tolist(), S.tolist(), V.tolist())"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    if seed is not None:\n        np.random.seed(seed)\n    permutation = np.random.permutation(len(X))\n    X_shuffled = X[permutation]\n    y_shuffled = y[permutation]\n    return (X_shuffled.tolist(), y_shuffled.tolist())"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    num_samples = X.shape[0]\n    num_batches = num_samples // batch_size\n    batch_indices = np.array_split(np.arange(num_samples), num_batches)\n    for batch in batch_indices:\n        if y is None:\n            X_batch = X[batch].tolist()\n            yield X_batch\n        else:\n            X_batch = X[batch].tolist()\n            y_batch = y[batch].tolist()\n            yield (X_batch, y_batch)"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    X = np.array(X)\n    feature = X[:, feature_i]\n    subset1 = X[feature >= threshold]\n    subset2 = X[feature < threshold]\n    return (subset1.tolist(), subset2.tolist())"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    (n_samples, n_features) = np.shape(X)\n\n    def index_combinations():\n        combs = [combinations_with_replacement(range(n_features), i) for i in range(0, degree + 1)]\n        flat_combs = [combi for sublist in combs for combi in sublist]\n        return flat_combs\n    new_features = [np.prod(X[:, combs], axis=1) for combs in index_combinations()]\n    return np.transpose(np.array(new_features)).tolist()"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    np.random.seed(seed)\n    subsets = []\n    n_samples = X.shape[0]\n    for _ in range(n_subsets):\n        if replacements:\n            indices = np.random.choice(range(n_samples), size=n_samples, replace=True)\n        else:\n            indices = np.random.choice(range(n_samples), size=n_samples, replace=False)\n        X_subset = X[indices]\n        y_subset = y[indices]\n        subsets.append((X_subset, y_subset))\n    return subsets"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    if not n_col:\n        n_col = np.max(x) + 1\n    one_hot = np.zeros((x.shape[0], n_col))\n    one_hot[np.arange(x.shape[0]), x] = 1\n    return one_hot.tolist()"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    matrix = np.zeros((len(x), len(x)))\n    np.fill_diagonal(matrix, x)\n    return matrix.tolist()\nx = np.array([1, 2, 3])"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    if len(y_true) != len(y_pred):\n        raise ValueError('Lengths of y_true and y_pred must be equal')\n    accuracy = np.sum(y_true == y_pred) / len(y_true)\n    accuracy = round(accuracy, 4)\n    return accuracy"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    if Y is None:\n        Y = X\n    X_mean = np.mean(X, axis=0)\n    Y_mean = np.mean(Y, axis=0)\n    X_dev = X - X_mean\n    Y_dev = Y - Y_mean\n    covariance_matrix = np.matmul(X_dev.T, Y_dev) / (X.shape[0] - 1)\n    X_std = np.std(X, axis=0)\n    Y_std = np.std(Y, axis=0)\n    correlation_matrix = covariance_matrix / np.outer(X_std, Y_std)\n    correlation_matrix = np.round(correlation_matrix, 4)\n    return correlation_matrix.tolist()"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\nclass DecisionStump:\n\n    def __init__(self):\n        self.polarity = 1\n        self.feature_index = None\n        self.threshold = None\n        self.alpha = None\n\n    def predict(self, X):\n        n_samples = np.shape(X)[0]\n        X_column = X[:, self.feature_index]\n        predictions = np.ones(n_samples)\n        if self.polarity == 1:\n            predictions[X_column < self.threshold] = -1\n        else:\n            predictions[X_column < self.threshold] = 1\n        return predictions\ndef adaboost_fit(X, y, n_clf):\n    (n_samples, n_features) = np.shape(X)\n    w = np.full(n_samples, 1 / n_samples)\n    clfs = []\n    for _ in range(n_clf):\n        clf = DecisionStump()\n        min_error = float('inf')\n        for feature_i in range(n_features):\n            feature_values = np.expand_dims(X[:, feature_i], axis=1)\n            unique_values = np.unique(feature_values)\n            for threshold in unique_values:\n                polarity = 1\n                predictions = np.ones(np.shape(y))\n                predictions[X[:, feature_i] < threshold] = -1\n                error = np.sum(w[y != predictions])\n                if error > 0.5:\n                    error = 1 - error\n                    polarity = -1\n                if error < min_error:\n                    clf.polarity = polarity\n                    clf.threshold = threshold\n                    clf.feature_index = feature_i\n                    min_error = error\n        EPS = 1e-10\n        clf.alpha = 0.5 * np.log((1.0 - min_error + EPS) / (min_error + EPS))\n        predictions = clf.predict(X)\n        w *= np.exp(-clf.alpha * y * predictions)\n        w /= np.sum(w)\n        clfs.append(clf)\n    return clfs"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores):\n    scores = np.array(scores)\n    log_softmax = scores - np.log(np.sum(np.exp(scores)))\n    log_softmax = np.round(log_softmax, 4)\n    return log_softmax.tolist()"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport copy\nimport math\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.initialize()\n\n    def initialize(self):\n        limit = 1 / math.sqrt(self.input_shape[0])\n        self.W = np.random.uniform(-limit, limit, (self.input_shape[0], self.n_units))\n        self.w0 = np.zeros((1, self.n_units))\n\n    def parameters(self):\n        return np.prod(self.W.shape) + np.prod(self.w0.shape)\n\n    def forward_pass(self, X, training=True):\n        self.layer_input = X\n        return X.dot(self.W) + self.w0\n\n    def backward_pass(self, accum_grad):\n        W = self.W\n        if self.trainable:\n            grad_w = self.layer_input.T.dot(accum_grad)\n            grad_w0 = np.sum(accum_grad, axis=0, keepdims=True)\n            self.W = self.W - 0.01 * grad_w\n            self.w0 = self.w0 - 0.01 * grad_w0\n        accum_grad = accum_grad.dot(W.T)\n        return accum_grad\n\n    def output_shape(self):\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    (input_height, input_width) = input_matrix.shape\n    (kernel_height, kernel_width) = kernel.shape\n    output_height = (input_height - kernel_height + 2 * padding) // stride + 1\n    output_width = (input_width - kernel_width + 2 * padding) // stride + 1\n    padded_matrix = np.pad(input_matrix, padding, mode='constant')\n    output_matrix = np.zeros((output_height, output_width))\n    for i in range(output_height):\n        for j in range(output_width):\n            vert_start = i * stride\n            vert_end = vert_start + kernel_height\n            horiz_start = j * stride\n            horiz_end = horiz_start + kernel_width\n            input_slice = padded_matrix[vert_start:vert_end, horiz_start:horiz_end]\n            output_matrix[i, j] = np.sum(np.multiply(input_slice, kernel))\n    output_matrix = np.round(output_matrix, 4)\n    output_list = output_matrix.tolist()\n    return output_list"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    return max(0.0, z)"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    mse = np.mean((np.dot(X, w) - y_true) ** 2)\n    ridge_loss = mse + alpha * np.dot(w, w)\n    return round(ridge_loss, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float:\n    return max(alpha * z, z)"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    if isinstance(x1, list) and isinstance(x2, list):\n        x1 = np.array(x1)\n        x2 = np.array(x2)\n    elif not isinstance(x1, np.ndarray) or not isinstance(x2, np.ndarray):\n        raise ValueError('Inputs must be either lists or numpy arrays')\n    return np.dot(x1, x2)"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    \"\"\"\n    Calculate the precision score\n    :param y_true: numpy array of true labels\n    :param y_pred: numpy array of predicted labels\n    :return: precision score\n    \"\"\"\n    tp = np.sum(np.logical_and(y_true == 1, y_pred == 1))\n    fp = np.sum(np.logical_and(y_true == 0, y_pred == 1))\n    precision = tp / (tp + fp)\n    return precision"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    X = np.array(X)\n    y = np.array(y).reshape((-1, 1))\n    weights = np.array(weights).reshape((-1, 1))\n\n    def compute_gradient(X, y, weights):\n        m = X.shape[0]\n        h = np.dot(X, weights)\n        gradient = 1 / m * np.dot(X.T, h - y)\n        return gradient\n\n    def compute_cost(X, y, weights):\n        m = X.shape[0]\n        h = np.dot(X, weights)\n        cost = 1 / (2 * m) * np.sum((h - y) ** 2)\n        return cost\n    for i in range(n_iterations):\n        if method == 'batch':\n            gradient = compute_gradient(X, y, weights)\n        elif method == 'sgd':\n            random_index = np.random.randint(len(X))\n            x_sample = X[random_index].reshape((1, -1))\n            y_sample = y[random_index].reshape((1, -1))\n            gradient = compute_gradient(x_sample, y_sample, weights)\n        elif method == 'mini-batch':\n            if batch_size > X.shape[0]:\n                batch_size = X.shape[0]\n            sample_indices = np.random.choice(X.shape[0], batch_size, replace=False)\n            X_sample = X[sample_indices]\n            y_sample = y[sample_indices]\n            gradient = compute_gradient(X_sample, y_sample, weights)\n        else:\n            raise ValueError(\"Invalid method parameter. Available variants: 'batch', 'sgd', 'mini-batch'\")\n        weights = weights - learning_rate * gradient\n    cost = compute_cost(X, y, weights)\n    return (weights.tolist(), round(cost, 4))"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    matrix = np.array(matrix, dtype=float)\n    (r, c) = matrix.shape\n    for i in range(min(r, c)):\n        if matrix[i, i] == 0:\n            for j in range(i + 1, r):\n                if matrix[j, i] != 0:\n                    matrix[[i, j]] = matrix[[j, i]]\n                    break\n        if matrix[i, i] != 1:\n            matrix[i] = matrix[i] / matrix[i, i]\n        for j in range(r):\n            if j != i:\n                matrix[j] = matrix[j] - matrix[i] * matrix[j, i]\n    return matrix.tolist()"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=1000):\n    m = np.zeros_like(x0)\n    v = np.zeros_like(x0)\n    for t in range(1, num_iterations + 1):\n        g = grad(x0)\n        m = beta1 * m + (1 - beta1) * g\n        v = beta2 * v + (1 - beta2) * np.square(g)\n        m_hat = m / (1 - beta1 ** t)\n        v_hat = v / (1 - beta2 ** t)\n        x0 = x0 - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    return np.round(x0.tolist(), 4)"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    weights = np.zeros(X.shape[1])\n    bias = 0\n    n_samples = X.shape[0]\n    for i in range(max_iter):\n        y_pred = np.dot(X, weights) + bias\n        dw = np.dot(X.T, y_pred - y) / n_samples\n        db = np.sum(y_pred - y) / n_samples\n        weights = weights - learning_rate * (dw + alpha * np.sign(weights))\n        bias = bias - learning_rate * db\n        loss = 0.5 * np.mean((y - y_pred) ** 2) + alpha * np.sum(np.abs(weights))\n        if i > 0 and np.abs(loss_history[-1] - loss) < tol:\n            break\n        loss_history.append(loss)\n    return (np.round(weights, 4).tolist(), np.round(bias, 4))"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    (m, n) = (len(source), len(target))\n    dp = np.zeros((m + 1, n + 1))\n    for i in range(m + 1):\n        dp[i][0] = i\n    for j in range(n + 1):\n        dp[0][j] = j\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if source[i - 1] == target[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + 1)\n            if i > 1 and j > 1 and (source[i - 1] == target[j - 2]) and (source[i - 2] == target[j - 1]):\n                dp[i][j] = min(dp[i][j], dp[i - 2][j - 2] + 1)\n    return dp[m][n]"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    TP = np.sum((y_true == 1) & (y_pred == 1))\n    FN = np.sum((y_true == 1) & (y_pred == 0))\n    recall = TP / (TP + FN) if TP + FN != 0 else 0.0\n    return round(recall, 3)"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    scores = np.dot(Q, K.T)\n    d_k = W_k.shape[0]\n    scores /= np.sqrt(d_k)\n    scores = np.exp(scores - np.max(scores, axis=-1, keepdims=True))\n    scores /= np.sum(scores, axis=-1, keepdims=True)\n    output = np.dot(scores, V)\n    return output.round(4).tolist()"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    input_sequence = np.array(input_sequence)\n    initial_hidden_state = np.array(initial_hidden_state)\n    Wx = np.array(Wx)\n    Wh = np.array(Wh)\n    b = np.array(b)\n    hidden_state = initial_hidden_state\n    for x in input_sequence:\n        input_part = np.dot(Wx, x)\n        recurrent_part = np.dot(Wh, hidden_state)\n        hidden_state = np.tanh(input_part + recurrent_part + b)\n    return np.round(hidden_state, 4).tolist()"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    points_array = np.array(points)\n    translation_matrix = np.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])\n    augmented_points = np.insert(points_array, 2, 1, axis=1)\n    translated_points = np.dot(augmented_points, translation_matrix.T)\n    return translated_points[:, :2].tolist()"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    This function calculates the KL divergence between two normal distributions.\n    \n    Parameters:\n    mu_p: mean of the first distribution\n    sigma_p: standard deviation of the first distribution\n    mu_q: mean of the second distribution\n    sigma_q: standard deviation of the second distribution\n    \n    Returns:\n    KL divergence as a floating-point number\n    \"\"\"\n    kl_divergence = np.log(sigma_q / sigma_p) + (sigma_p ** 2 + (mu_p - mu_q) ** 2) / (2 * sigma_q ** 2) - 0.5\n    return kl_divergence"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    L = np.tril(A)\n    U = np.triu(A, 1)\n    if x_ini is None:\n        x = np.zeros_like(b)\n    else:\n        x = x_ini\n    for _ in range(n):\n        x = np.dot(np.linalg.inv(L), b - np.dot(U, x))\n    return np.round(x.tolist(), 4)"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    Ab = np.concatenate((A, b.reshape(-1, 1)), axis=1)\n    n = len(Ab)\n    for i in range(n):\n        max_row = np.argmax(np.abs(Ab[i:, i])) + i\n        Ab[[i, max_row]] = Ab[[max_row, i]]\n        for j in range(i + 1, n):\n            factor = Ab[j, i] / Ab[i, i]\n            Ab[j] -= factor * Ab[i]\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        x[i] = (Ab[i, -1] - np.dot(Ab[i, :-1], x)) / Ab[i, i]\n    return x.round(4).tolist()\nA = np.array([[2, 1, -1], [-3, -1, 2], [-2, 1, 2]])\nb = np.array([8, -11, -3])\nx = gaussian_elimination(A, b)"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\ndef tanh(x):\n    return np.tanh(x)\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \"\"\"\n        sequence_length = x.shape[0]\n        hidden_states = np.zeros((sequence_length, self.hidden_size))\n        hidden_state = initial_hidden_state\n        cell_state = initial_cell_state\n        for t in range(sequence_length):\n            input_data = np.concatenate((x[t], hidden_state), axis=0)\n            input_data = np.reshape(input_data, (-1, 1))\n            forget_gate = sigmoid(np.dot(self.Wf, input_data) + self.bf)\n            input_gate = sigmoid(np.dot(self.Wi, input_data) + self.bi)\n            candidate_cell_state = tanh(np.dot(self.Wc, input_data) + self.bc)\n            output_gate = sigmoid(np.dot(self.Wo, input_data) + self.bo)\n            cell_state = np.multiply(forget_gate, cell_state) + np.multiply(input_gate, candidate_cell_state)\n            hidden_state = np.multiply(output_gate, tanh(cell_state))\n            hidden_states[t] = hidden_state.reshape(1, -1)\n        return (hidden_states.tolist(), hidden_state.tolist(), cell_state.tolist())"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\ndef compute_tf_idf(corpus, query):\n    if len(corpus) == 0:\n        raise ValueError('Corpus is empty')\n    flattened_corpus = [' '.join(doc) for doc in corpus]\n    vectorizer = TfidfVectorizer(smooth_idf=True)\n    tfidf_matrix = vectorizer.fit_transform(flattened_corpus)\n    idf_values = {term: vectorizer.idf_[i] for (term, i) in vectorizer.vocabulary_.items() if term in query}\n    tf_idf_scores = []\n    for doc in corpus:\n        doc_tf_idf = []\n        for term in query:\n            if term in doc:\n                tf = doc.count(term) / len(doc)\n                idf = idf_values[term]\n                tf_idf = tf * idf\n            else:\n                tf_idf = 0\n            doc_tf_idf.append(tf_idf)\n        tf_idf_scores.append(doc_tf_idf)\n    return np.round(tf_idf_scores, 4).tolist()"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    TP = np.sum(np.logical_and(y_pred == 1, y_true == 1))\n    FP = np.sum(np.logical_and(y_pred == 1, y_true == 0))\n    FN = np.sum(np.logical_and(y_pred == 0, y_true == 1))\n    if TP + FP != 0:\n        precision = TP / (TP + FP)\n    else:\n        precision = 0\n    if TP + FN != 0:\n        recall = TP / (TP + FN)\n    else:\n        recall = 0\n    if precision + recall != 0:\n        f_score = (1 + beta ** 2) * (precision * recall) / (beta ** 2 * precision + recall)\n    else:\n        f_score = 0\n    return round(f_score, 3)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, x):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n        \"\"\"\n        h = np.zeros((self.hidden_size, 1))\n        outputs = []\n        last_inputs = []\n        last_hiddens = []\n        for i in range(len(x)):\n            h = np.tanh(np.dot(self.W_xh, x[i]) + np.dot(self.W_hh, h) + self.b_h)\n            output = np.dot(self.W_hy, h) + self.b_y\n            outputs.append(output)\n            last_inputs.append(x[i])\n            last_hiddens.append(h)\n        return (outputs, last_inputs, last_hiddens)\n\n    def backprop(self, expected_output, outputs, last_inputs, last_hiddens, learning_rate):\n        \"\"\"\n        Performs backpropagation through time (BPTT) to adjust the weights based on the loss.\n        \"\"\"\n        d_W_xh = np.zeros_like(self.W_xh)\n        d_W_hh = np.zeros_like(self.W_hh)\n        d_W_hy = np.zeros_like(self.W_hy)\n        d_b_h = np.zeros_like(self.b_h)\n        d_b_y = np.zeros_like(self.b_y)\n        for t in reversed(range(len(outputs))):\n            output = outputs[t]\n            x = last_inputs[t]\n            h = last_hiddens[t]\n            d_output = 2 * (output - expected_output[t]) / len(outputs)\n            d_h = np.dot(self.W_hy.T, d_output) * (1 - h ** 2)\n            d_W_hy += np.dot(d_output, h.T)\n            d_b_y += d_output\n            d_W_xh += np.dot(d_h, x.T)\n            d_W_hh += np.dot(d_h, h.T)\n            d_b_h += d_h\n        for (param, dparam) in zip([self.W_xh, self.W_hh, self.W_hy, self.b_h, self.b_y], [d_W_xh, d_W_hh, d_W_hy, d_b_h, d_b_y]):\n            param -= learning_rate * dparam"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    if x0 is None:\n        x = np.zeros_like(b)\n    else:\n        x = x0\n    r = b - np.dot(A, x)\n    p = r\n    rsold = np.dot(r, r)\n    for _ in range(n):\n        Ap = np.dot(A, p)\n        alpha = rsold / np.dot(p, Ap)\n        x = x + alpha * p\n        r = r - alpha * Ap\n        rsnew = np.dot(r, r)\n        if np.sqrt(rsnew) < tol:\n            break\n        p = r + rsnew / rsold * p\n        rsold = rsnew\n    return x.round(8).tolist()"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    (_, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    impurity = 1 - np.sum(np.square(probabilities))\n    return round(impurity, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "import numpy as np\ndef compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    dense_matrix = np.array(dense_matrix)\n    values = []\n    column_indices = []\n    row_pointer = [0]\n    for row in dense_matrix:\n        non_zero_indices = np.where(row != 0)[0]\n        values.extend(row[non_zero_indices])\n        column_indices.extend(non_zero_indices)\n        row_pointer.append(len(values))\n    return (values, column_indices, row_pointer)"}
{"task_id": 66, "completion_id": 0, "solution": "import math\ndef magnitude(vector):\n    \"\"\"\n    Calculate the magnitude of a vector\n    \"\"\"\n    return math.sqrt(sum((pow(element, 2) for element in vector)))\ndef dot_product(v1, v2):\n    \"\"\"\n    Calculate the dot product of two vectors\n    \"\"\"\n    return sum((x * y for (x, y) in zip(v1, v2)))\ndef orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    numerator = dot_product(v, L)\n    denominator = magnitude(L) ** 2\n    mag_proj = numerator / denominator\n    proj_vector = [x * mag_proj for x in L]\n    proj_vector = [round(x, 3) for x in proj_vector]\n    return proj_vector"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    column_pointer = [0]\n    values = []\n    row_indices = []\n    for col in zip(*dense_matrix):\n        for (row_index, element) in enumerate(col):\n            if element != 0:\n                values.append(element)\n                row_indices.append(row_index)\n        column_pointer.append(len(values))\n    return (values, row_indices, column_pointer)"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    (rref_A, inds) = (np.linalg.matrix_rank(A), np.linalg.matrix_rank(np.c_[A, np.eye(len(A))]))\n    if rref_A != inds:\n        return []\n    basis = A[:, inds]\n    return basis.round(8).tolist()"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    y_true_mean = np.mean(y_true)\n    total_sum_sq = np.sum((y_true - y_true_mean) ** 2)\n    residual_sum_sq = np.sum((y_true - y_pred) ** 2)\n    r_squared = 1 - residual_sum_sq / total_sum_sq\n    return round(r_squared, 3)\ny_true = np.array([3, -0.5, 2, 7])\ny_pred = np.array([2.5, 0.0, 2, 8])"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    if not img:\n        return -1\n    total_brightness = 0\n    num_pixels = 0\n    num_rows = len(img)\n    num_cols = len(img[0])\n    for row in img:\n        if len(row) != num_cols:\n            return -1\n        for pixel in row:\n            if pixel < 0 or pixel > 255:\n                return -1\n            total_brightness += pixel\n            num_pixels += 1\n    average_brightness = total_brightness / num_pixels\n    return round(average_brightness, 2)"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    if not isinstance(y_true, np.ndarray) or not isinstance(y_pred, np.ndarray):\n        raise TypeError('Inputs must be numpy arrays.')\n    if y_true.size == 0 or y_pred.size == 0:\n        raise ValueError('Inputs cannot be empty.')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Input arrays must have the same shape.')\n    rmse = np.sqrt(np.mean((y_true - y_pred) ** 2))\n    return round(rmse, 3)"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    intersection = np.sum(y_true * y_pred)\n    union = np.sum(y_true) + np.sum(y_pred) - intersection\n    if union == 0:\n        return 0.0\n    return round(intersection / union, 3)"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    intersection = np.logical_and(y_true, y_pred)\n    intersection = np.sum(intersection)\n    sum_true_pred = np.sum(y_true) + np.sum(y_pred)\n    if sum_true_pred == 0:\n        return 1.0\n    else:\n        return round(2.0 * intersection / sum_true_pred, 3)\ny_true = [1, 1, 0, 1, 0, 1, 0, 0, 0]\ny_pred = [0, 1, 0, 1, 0, 0, 1, 0, 1]"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef create_row_hv(row, dim, random_seeds):\n    row_hv = np.zeros(dim)\n    for (feature, value) in row.items():\n        random.seed(random_seeds.get(feature, 0))\n        feature_hv = np.random.normal(0, 1, dim)\n        value_hv = np.random.normal(0, 1, dim)\n        combined_hv = feature_hv + value_hv\n        row_hv += combined_hv\n    return row_hv.tolist()"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    conf_matrix = [[0, 0], [0, 0]]\n    for pair in data:\n        (y_true, y_pred) = pair\n        conf_matrix[int(y_true)][int(y_pred)] += 1\n    return conf_matrix\ndata = [[0, 0], [0, 1], [1, 0], [1, 1], [1, 1], [0, 1], [1, 0], [1, 1]]"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    if v1.shape != v2.shape:\n        raise ValueError('Both vectors must have the same shape')\n    if v1.size == 0 or v2.size == 0:\n        raise ValueError('Vectors cannot be empty')\n    if np.linalg.norm(v1) == 0 or np.linalg.norm(v2) == 0:\n        raise ValueError('Vectors cannot have zero magnitude')\n    similarity = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n    return round(similarity, 3)"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\nfrom sklearn.metrics import confusion_matrix\nimport numpy as np\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    assert len(actual) == len(predicted), 'Both lists must have the same length.'\n    assert all((x in [0, 1] for x in actual)), 'All elements in actual must be 0 or 1.'\n    assert all((x in [0, 1] for x in predicted)), 'All elements in predicted must be 0 or 1.'\n    conf_matrix = confusion_matrix(actual, predicted)\n    (tn, fp, fn, tp) = conf_matrix.ravel()\n    accuracy = round((tp + tn) / (tp + tn + fp + fn), 3)\n    precision = round(tp / (tp + fp), 3) if tp + fp != 0 else 0\n    recall = round(tp / (tp + fn), 3) if tp + fn != 0 else 0\n    f1_score = round(2 * (precision * recall) / (precision + recall), 3) if precision + recall != 0 else 0\n    specificity = round(tn / (tn + fp), 3) if tn + fp != 0 else 0\n    negative_predictive_value = round(tn / (tn + fn), 3) if tn + fn != 0 else 0\n    return (conf_matrix, accuracy, f1_score, specificity, negative_predictive_value)"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\nfrom scipy import stats\ndef descriptive_statistics(data):\n    mean = np.mean(data)\n    median = np.median(data)\n    mode = stats.mode(data)[0][0]\n    variance = np.var(data)\n    std_dev = np.std(data)\n    (p25, p50, p75) = np.percentile(data, [25, 50, 75])\n    iqr = p75 - p25\n    stats_dict = {'mean': round(mean, 4), 'median': round(median, 4), 'mode': round(mode, 4), 'variance': round(variance, 4), 'standard_deviation': round(std_dev, 4), '25th_percentile': round(p25, 4), '50th_percentile': round(p50, 4), '75th_percentile': round(p75, 4), 'interquartile_range': round(iqr, 4)}\n    return stats_dict\ndata = [1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 6, 7, 8, 9, 10]"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials\n    \"\"\"\n    binomial_coef = math.comb(n, k)\n    prob = binomial_coef * p ** k * (1 - p) ** (n - k)\n    return round(prob, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    \"\"\"\n    coefficient = 1.0 / (std_dev * math.sqrt(2 * math.pi))\n    exponential = math.exp(-(math.pow(x - mean, 2) / (2 * math.pow(std_dev, 2))))\n    return round(coefficient * exponential, 5)\nmean = 0.0\nstd_dev = 1.0\nx = 1.0"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    \"\"\"\n    probability = lam ** k * math.exp(-lam) / math.factorial(k)\n    return round(probability, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        float: contrast value\n    \"\"\"\n    max_pixel = np.max(img)\n    min_pixel = np.min(img)\n    contrast = max_pixel - min_pixel\n    return contrast"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    \"\"\"\n    return np.dot(vec1, vec2)\nvec1 = np.array([1, 2, 3])\nvec2 = np.array([4, 5, 6])"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n        \n    Returns:\n        list: A list of lists, where each inner list contains the polynomial features of the corresponding data point.\n    \"\"\"\n    result = []\n    if degree < 0:\n        return result\n    for num in data:\n        features = [round(num ** i, 8) for i in range(1, degree + 1)]\n        result.append(features)\n    return result"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    if position == 0 or d_model <= 0:\n        return -1\n    pos_enc = np.zeros((position, d_model))\n    pos = np.arange(position)[:, np.newaxis]\n    dim = np.arange(d_model)[np.newaxis, :]\n    angle_rates = 1 / np.power(10000, 2 * (dim // 2) / np.float32(d_model))\n    pos_enc[:, 0::2] = np.sin(angle_rates * pos)\n    pos_enc[:, 1::2] = np.cos(angle_rates * pos)\n    return pos_enc.astype(np.float16).tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    elif training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    else:\n        return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * grad ** 2\n    m_corrected = m / (1 - beta1 ** t)\n    v_corrected = v / (1 - beta2 ** t)\n    parameter = parameter - learning_rate * m_corrected / (np.sqrt(v_corrected) + epsilon)\n    return (np.around(parameter, decimals=5).tolist(), np.around(m, decimals=5).tolist(), np.around(v, decimals=5).tolist())"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    tokens = encoder.encode(prompt)\n    if len(tokens) < hparams['n_ctx']:\n        tokens += [0] * (hparams['n_ctx'] - len(tokens))\n    for _ in range(n_tokens_to_generate):\n        token_embeddings = params['wte'][tokens, :]\n        positional_embeddings = params['wpe'][:len(tokens), :]\n        embeddings = token_embeddings + positional_embeddings\n        attention_outputs = embeddings\n        ff_outputs = attention_outputs\n        ln_outputs = ff_outputs\n        tokens.append(np.argmax(ln_outputs))\n    generated_text = encoder.decode(tokens)\n    return generated_text\nprompt = 'Hello world'\nn_tokens_to_generate = 10"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef softmax(values):\n    e_values = np.exp(values - np.max(values))\n    return e_values / e_values.sum(axis=0)\ndef pattern_weaver(n, crystal_values, dimension):\n    attention_scores = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            attention_scores[i][j] = np.dot(crystal_values[i], crystal_values[j])\n    attention_scores = softmax(attention_scores)\n    final_patterns = np.zeros((n, dimension))\n    for i in range(n):\n        for j in range(n):\n            final_patterns[i] += attention_scores[i][j] * crystal_values[j]\n    final_patterns = np.round(final_patterns, 4)\n    return final_patterns.tolist()"}
{"task_id": 90, "completion_id": 0, "solution": "import math\nimport numpy as np\nfrom collections import Counter\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    avgdl = sum([len(doc) for doc in corpus]) / len(corpus)\n    inverted_index = {}\n    for (i, doc) in enumerate(corpus):\n        for word in doc:\n            if word not in inverted_index:\n                inverted_index[word] = [i]\n            elif inverted_index[word][-1] != i:\n                inverted_index[word].append(i)\n    doc_word_counts = [Counter(doc) for doc in corpus]\n    idf = {}\n    for (word, doc_list) in inverted_index.items():\n        idf[word] = math.log((len(corpus) - len(doc_list) + 0.5) / (len(doc_list) + 0.5))\n    scores = []\n    for (doc, word_counts) in zip(corpus, doc_word_counts):\n        score = 0\n        for word in query:\n            if word in doc:\n                tf = (k1 + 1) * word_counts[word] / (k1 * (1 - b + b * (len(doc) / avgdl)) + word_counts[word])\n                score += idf[word] * tf\n        scores.append(round(score, 3))\n    return scores"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    true_positives = sum([1 for (y_true_i, y_pred_i) in zip(y_true, y_pred) if y_true_i == y_pred_i == 1])\n    false_positives = sum([1 for (y_true_i, y_pred_i) in zip(y_true, y_pred) if y_true_i == 0 and y_pred_i == 1])\n    false_negatives = sum([1 for (y_true_i, y_pred_i) in zip(y_true, y_pred) if y_true_i == 1 and y_pred_i == 0])\n    precision = true_positives / (true_positives + false_positives) if true_positives + false_positives != 0 else 0\n    recall = true_positives / (true_positives + false_negatives) if true_positives + false_negatives != 0 else 0\n    f1_score = 2 * (precision * recall) / (precision + recall) if precision + recall != 0 else 0\n    return round(f1_score, 3)"}
{"task_id": 92, "completion_id": 0, "solution": "import math\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\ndef power_grid_forecast(consumption_data):\n    days = np.arange(1, 11)\n    fluctuation = 10 * np.sin(2 * math.pi * days / 10)\n    detrended_data = consumption_data - fluctuation\n    model = LinearRegression().fit(days.reshape((-1, 1)), detrended_data)\n    day15_prediction = model.predict([[15]])\n    day15_fluctuation = 10 * math.sin(2 * math.pi * 15 / 10)\n    final_prediction = day15_prediction + day15_fluctuation\n    safety_margin = final_prediction * 0.05\n    final_prediction += safety_margin\n    final_prediction = int(math.ceil(final_prediction))\n    return final_prediction"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    return round(np.mean(np.abs(y_true - y_pred)), 3)\ny_true = np.array([1, 2, 3, 4, 5])\ny_pred = np.array([1.1, 1.9, 3.2, 3.8, 4.9])"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef compute_qkv(X, W_q, W_k, W_v):\n    q = np.dot(X, W_q)\n    k = np.dot(X, W_k)\n    v = np.dot(X, W_v)\n    return (q, k, v)\ndef self_attention(q, k, v):\n    d_k = q.shape[-1]\n    scores = np.dot(q, k.T) / np.sqrt(d_k)\n    attention = np.dot(np.exp(scores), v)\n    return attention\ndef multi_head_attention(X, W_q, W_k, W_v, n_heads):\n    d_model = X.shape[-1]\n    d_k = d_model // n_heads\n    (q_list, k_list, v_list) = ([], [], [])\n    for i in range(n_heads):\n        (q, k, v) = compute_qkv(X, W_q[i * d_k:(i + 1) * d_k, :], W_k[i * d_k:(i + 1) * d_k, :], W_v[i * d_k:(i + 1) * d_k, :])\n        q_list.append(q)\n        k_list.append(k)\n        v_list.append(v)\n    multi_head_output = []\n    for i in range(n_heads):\n        attention = self_attention(q_list[i], k_list[i], v_list[i])\n        multi_head_output.append(attention)\n    output = np.concatenate(multi_head_output, axis=-1)\n    output = np.round(output, 4)\n    return output.tolist()"}
{"task_id": 95, "completion_id": 0, "solution": "from typing import List\nimport math\ndef phi_corr(x: List[int], y: List[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (List[int]): A list of binary values (0 or 1).\n    y (List[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    n11 = sum((i == 1 and j == 1 for (i, j) in zip(x, y)))\n    n01 = sum((i == 0 and j == 1 for (i, j) in zip(x, y)))\n    n10 = sum((i == 1 and j == 0 for (i, j) in zip(x, y)))\n    n00 = sum((i == 0 and j == 0 for (i, j) in zip(x, y)))\n    phi = (n11 * n00 - n10 * n01) / math.sqrt((n11 + n10) * (n01 + n00) * (n11 + n01) * (n10 + n00))\n    return round(phi, 4)\nx = [1, 0, 1, 0, 1, 0, 1, 0]\ny = [1, 1, 0, 0, 1, 1, 0, 0]"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    if x < -2.5:\n        return 0.0\n    elif x > 2.5:\n        return 1.0\n    else:\n        return 0.2 * x + 0.5"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value\n    \"\"\"\n    if x >= 0:\n        return round(x, 4)\n    else:\n        return round(alpha * (math.exp(x) - 1), 4)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    return max(0.0, x) + alpha * min(0.0, x)"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x)\n    \"\"\"\n    try:\n        result = math.log1p(math.exp(x))\n        return round(result, 4)\n    except OverflowError:\n        return float('inf')\n    except ValueError:\n        return float('-inf')"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input\n    \"\"\"\n    return round(x / (1 + abs(x)), 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    rhos = np.array(rhos)\n    A = np.array(A)\n    pi_theta_old = np.array(pi_theta_old)\n    pi_theta_ref = np.array(pi_theta_ref)\n    surrogate_obj = np.minimum(rhos * A, np.clip(rhos, 1 - epsilon, 1 + epsilon) * A)\n    kl_div = np.sum(pi_theta_old * (np.log(pi_theta_old) - np.log(pi_theta_ref)))\n    grpo_obj = np.sum(surrogate_obj) - beta * kl_div\n    grpo_obj = np.round(grpo_obj, 6)\n    return grpo_obj"}
{"task_id": 102, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value\n    \"\"\"\n    return round(x / (1 + math.exp(-x)), 4)"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x >= 0:\n        return round(scale * x, 4)\n    else:\n        return round(scale * alpha * (math.exp(x) - 1), 4)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"\n    Compute sigmoid of an array.\n\n    Args:\n        z: Input array\n\n    Returns:\n        Sigmoid of input array\n    \"\"\"\n    return 1 / (1 + np.exp(-z))\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N x D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    z = np.dot(X, weights) + bias\n    probabilities = sigmoid(z)\n    predictions = [1 if p >= 0.5 else 0 for p in probabilities]\n    return predictions"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef softmax(z):\n    z -= np.max(z)\n    sm = (np.exp(z).T / np.sum(np.exp(z), axis=1)).T\n    return sm\ndef cross_entropy(Y, P_hat):\n    Y = np.float_(Y)\n    P_hat = np.float_(P_hat)\n    return -np.sum(Y * np.log(P_hat) + (1 - Y) * np.log(1 - P_hat))\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    classes = len(np.unique(y))\n    features = X.shape[1]\n    weights = np.random.normal(0, 0.1, size=(classes, features))\n    bias = np.random.normal(0, 0.1, size=classes)\n    losses = []\n    for i in range(iterations):\n        logits = np.dot(X, weights.T) + bias\n        prob = softmax(logits)\n        loss = cross_entropy(y, prob)\n        losses.append(loss)\n        gradient_weight = np.dot((prob - y).T, X)\n        gradient_bias = np.sum((prob - y).T, axis=1)\n        weights -= learning_rate * gradient_weight\n        bias -= learning_rate * gradient_bias\n    return [np.round(weights, 4).tolist(), np.round(bias, 4).tolist(), np.round(losses, 4).tolist()]"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, \n    optimizing parameters with Binary Cross Entropy loss.\n    \"\"\"\n    weights = np.zeros(X.shape[1])\n    bias = 0\n    losses = []\n    for i in range(iterations):\n        linear_output = np.dot(X, weights) + bias\n        y_pred = sigmoid(linear_output)\n        dw = 1 / X.shape[0] * np.dot(X.T, y_pred - y)\n        db = 1 / X.shape[0] * np.sum(y_pred - y)\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n        loss = binary_cross_entropy(y_pred, y).mean()\n        losses.append(round(loss, 4))\n    return (weights.tolist(), round(bias, 4), losses)"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    scores = np.dot(Q, K.T)\n    scores = np.where(mask, scores, -np.inf)\n    weights = np.exp(scores - np.max(scores, axis=-1, keepdims=True))\n    weights = weights / np.sum(weights, axis=-1, keepdims=True)\n    output = np.dot(weights, V)\n    return output.tolist()"}
{"task_id": 108, "completion_id": 0, "solution": "def disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    \"\"\"\n    unique_colors = set(apples)\n    disorder = len(unique_colors) / len(apples)\n    disorder = round(disorder, 4)\n    return disorder"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    mean = np.mean(X, axis=-1, keepdims=True)\n    variance = np.var(X, axis=-1, keepdims=True)\n    X_hat = (X - mean) / np.sqrt(variance + epsilon)\n    normalized_X = gamma * X_hat + beta\n    return np.round(normalized_X, 5).tolist()"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n\n    def ngrams(sentence, n):\n        sentence = sentence.lower().split()\n        return list(zip(*[sentence[i:] for i in range(n)]))\n\n    def precision(reference, candidate):\n        common_ngrams = sum((Counter(candidate) & Counter(reference)).values())\n        if len(candidate) == 0:\n            return 0\n        return common_ngrams / len(candidate)\n\n    def recall(reference, candidate):\n        common_ngrams = sum((Counter(candidate) & Counter(reference)).values())\n        if len(reference) == 0:\n            return 0\n        return common_ngrams / len(reference)\n\n    def harmonic_mean(precision, recall):\n        if precision == recall == 0:\n            return 0\n        return 2 * precision * recall / (precision + recall)\n\n    def penalty_fragmentation(reference, candidate):\n        reference_length = len(reference)\n        candidate_length = len(candidate)\n        return np.exp(beta * (abs(candidate_length - reference_length) / reference_length))\n    unigram_matches = Counter(ngrams(reference, 1)) & Counter(ngrams(candidate, 1))\n    bigram_matches = Counter(ngrams(reference, 2)) & Counter(ngrams(candidate, 2))\n    trigram_matches = Counter(ngrams(reference, 3)) & Counter(ngrams(candidate, 3))\n    precision_unigram = sum(unigram_matches.values()) / len(candidate)\n    precision_bigram = sum(bigram_matches.values()) / len(candidate)\n    precision_trigram = sum(trigram_matches.values()) / len(candidate)\n    recall_unigram = sum(unigram_matches.values()) / len(reference)\n    recall_bigram = sum(bigram_matches.values()) / len(reference)\n    recall_trigram = sum(trigram_matches.values()) / len(reference)\n    fmean_unigram = harmonic_mean(precision_unigram, recall_unigram)\n    fmean_bigram = harmonic_mean(precision_bigram, recall_bigram)\n    fmean_trigram = harmonic_mean(precision_trigram, recall_trigram)\n    penalty = penalty_fragmentation(reference, candidate)\n    score = (fmean_unigram * precision_unigram * recall_unigram / 3 + fmean_bigram * precision_bigram * recall_bigram / 3 + fmean_trigram * precision_trigram * recall_trigram / 3) ** alpha * penalty\n    return round(score, 3)"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    p_x = total_counts_x / total_samples\n    p_y = total_counts_y / total_samples\n    p_xy = joint_counts / total_samples\n    pmi = np.log2(p_xy / (p_x * p_y))\n    return round(pmi, 3)\njoint_counts = 500\ntotal_counts_x = 1000\ntotal_counts_y = 1500\ntotal_samples = 3000\npmi = compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples)"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    min_x = min(x)\n    max_x = max(x)\n    return [round((i - min_x) / (max_x - min_x), 4) for i in x]"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    x = np.matmul(x, w1)\n    x = np.maximum(0, x)\n    x_shortcut = x\n    x = np.matmul(x, w2)\n    x += x_shortcut\n    x = np.maximum(0, x)\n    return np.round(x, 4).tolist()"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray):\n    assert len(x.shape) == 3, 'Input should be a 3D NumPy array'\n    avg_pool = np.mean(x, axis=(0, 1))\n    return avg_pool"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    \"\"\"\n    Function that performs batch normalization on a 4D numpy array\n    Parameters:\n        X (np.ndarray): 4D numpy array in BCHW format\n        gamma (np.ndarray): Scale parameters for each channel\n        beta (np.ndarray): Shift parameters for each channel\n        epsilon (float): Small number to prevent division by zero\n    Returns:\n        np.ndarray: Batch normalized 4D numpy array\n    \"\"\"\n    mean = np.mean(X, axis=(0, 2, 3), keepdims=True)\n    var = np.var(X, axis=(0, 2, 3), keepdims=True)\n    X_normalized = (X - mean) / np.sqrt(var + epsilon)\n    output = gamma * X_normalized + beta\n    return output.round(4).tolist()"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    derivative = c * n * x ** (n - 1)\n    derivative = round(derivative, 4)\n    return derivative"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10):\n    basis = []\n    for v in vectors:\n        if not basis:\n            basis.append(v)\n            continue\n        projections = [np.dot(v, b) / np.dot(b, b) * np.array(b) for b in basis]\n        orthogonal_component = [v - sum(projections)]\n        norm = np.linalg.norm(orthogonal_component)\n        if norm > tol:\n            basis.append(orthogonal_component[0] / norm)\n    basis = [b.round(4).tolist() for b in basis]\n    return basis"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    a = np.array(a)\n    b = np.array(b)\n    cross_prod = np.cross(a, b)\n    cross_prod = np.round(cross_prod, 4)\n    return cross_prod.tolist()"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    if A.shape[0] != A.shape[1]:\n        return -1\n    if np.linalg.det(A) == 0:\n        return -1\n    A_unknowns = [A.copy() for _ in b]\n    for (i, A_unknown) in enumerate(A_unknowns):\n        A_unknown[:, i] = b\n    det_A = np.linalg.det(A)\n    x = [np.linalg.det(A_unknown) / det_A for A_unknown in A_unknowns]\n    return np.around(x, decimals=4).tolist()"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    p = np.array(p)\n    q = np.array(q)\n    if len(p) != len(q):\n        return 0.0\n    bc_distance = np.sum(np.sqrt(p * q))\n    return round(bc_distance, 4)"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float]:\n    if len(a) != len(b):\n        return -1\n    else:\n        return [x + y for (x, y) in zip(a, b)]"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef softmax(x):\n    \"\"\"Compute softmax values for each sets of scores in x.\"\"\"\n    e_x = np.exp(x - np.max(x))\n    return e_x / e_x.sum()\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    (state_seqs, action_seqs, reward_seqs) = ([], [], [])\n    for episode in episodes:\n        (state_seq, action_seq, reward_seq) = zip(*episode)\n        state_seqs.append(state_seq)\n        action_seqs.append(action_seq)\n        reward_seqs.append(reward_seq)\n    gradients = []\n    for (state_seq, action_seq, reward_seq) in zip(state_seqs, action_seqs, reward_seqs):\n        G = 0\n        weight = 1\n        grad = np.zeros_like(theta)\n        for t in reversed(range(len(state_seq))):\n            G = G * 0.95 + reward_seq[t]\n            theta_s = theta[state_seq[t], :]\n            probs = softmax(theta_s)\n            for a in range(len(probs)):\n                if a == action_seq[t]:\n                    grad[state_seq[t], a] += weight * (G - probs[a] * G)\n                else:\n                    grad[state_seq[t], a] -= weight * (G * probs[a])\n        gradients.append(grad)\n    avg_gradient = np.mean(gradients, axis=0)\n    return avg_gradient.tolist()"}
{"task_id": 123, "completion_id": 0, "solution": "import math\ndef compute_efficiency(n_experts, k_active, d_in, d_out):\n    flops_moe = n_experts * 2 + d_in * d_out * k_active + n_experts * k_active + n_experts * k_active\n    flops_dense = d_in * d_out\n    savings = (flops_dense - flops_moe) / flops_dense\n    savings_percentage = round(savings * 100, 1)\n    return savings_percentage"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    \"\"\"\n    Implement the Noisy Top-K gating mechanism used in Mixture-of-Experts (MoE) models.\n\n    :param X: Input matrix\n    :param W_g: Weight matrices\n    :param W_noise: Pre-sampled noise\n    :param N: Number of experts\n    :param k: Sparsity constraint\n    :return: The final gating probabilities matrix\n    \"\"\"\n    G = np.dot(X, W_g.T)\n    G += W_noise\n    top_k_values = np.sort(np.fabs(G).flatten())[-k]\n    mask = np.fabs(G) >= top_k_values\n    G_masked = np.where(mask, G, 0)\n    P = np.exp(G_masked) / np.sum(np.exp(G_masked))\n    P_rounded = np.round(P, 4)\n    return P_rounded.tolist()"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    \"\"\"\n    Implements a Mixture-of-Experts (MoE) layer using softmax gating and top-k routing.\n\n    Parameters:\n        x (np.ndarray): Input tensor.\n        We (np.ndarray): Set of expert weight matrices.\n        Wg (np.ndarray): Gating weight matrix.\n        n_experts (int): Number of experts.\n        top_k (int): Value of k for top-k routing.\n\n    Returns:\n        np.ndarray: Final MoE output.\n    \"\"\"\n    g = np.einsum('ij,jk->ik', x, Wg)\n    g = np.exp(g) / np.sum(np.exp(g), axis=1, keepdims=True)\n    top_expert_indices = np.argpartition(g, -top_k, axis=1)[:, -top_k:]\n    outputs = []\n    for i in range(x.shape[0]):\n        expert_outputs = []\n        for j in range(top_k):\n            expert_index = top_expert_indices[i, j]\n            expert_output = np.dot(x[i], We[expert_index])\n            expert_outputs.append(expert_output)\n        output = np.sum(np.array(expert_outputs) * g[i, top_expert_indices[i]])\n        outputs.append(output)\n    outputs = np.round(outputs, 4).tolist()\n    return outputs"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    (B, C, H, W) = X.shape\n    X_reshaped = X.reshape(B, num_groups, C // num_groups, H, W)\n    mean = np.mean(X_reshaped, axis=(2, 3, 4), keepdims=True)\n    var = np.var(X_reshaped, axis=(2, 3, 4), keepdims=True)\n    X_norm = (X_reshaped - mean) / np.sqrt(var + epsilon)\n    Y = gamma * X_norm + beta\n    return Y.reshape(B, C, H, W).round(4).tolist()\nX = np.random.rand(B, C, H, W)\ngamma = np.ones(C)\nbeta = np.zeros(C)\nnum_groups = 3\nY = group_normalization(X, gamma, beta, num_groups)"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n    f = lambda x: x ** 4 - 3 * x ** 3 + 2\n    df = lambda x: 4 * x ** 3 - 9 * x ** 2\n    current_x = start_x\n    for _ in range(max_iters):\n        gradient = df(current_x)\n        new_x = current_x - learning_rate * gradient\n        if np.abs(new_x - current_x) < tolerance:\n            break\n        current_x = new_x\n    return round(current_x, 4)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    x = np.array(x)\n    result = alpha * np.tanh(beta * x) + gamma * x\n    rounded_result = np.round(result, 4)\n    return rounded_result.tolist()"}
