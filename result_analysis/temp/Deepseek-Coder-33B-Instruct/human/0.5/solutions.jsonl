{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    if len(a[0]) != len(b):\n        return -1\n    result = []\n    for row in a:\n        dot_product = sum((x * y for (x, y) in zip(row, b)))\n        result.append(dot_product)\n    return result\na = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nb = [1, 2]"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    return [[a[j][i] for j in range(len(a))] for i in range(len(a[0]))]"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    try:\n        np_array = np.array(a)\n        reshaped_array = np_array.reshape(new_shape)\n        reshaped_list = reshaped_array.tolist()\n        return reshaped_list\n    except ValueError:\n        return []\nnew_shape = (3, 3)"}
{"task_id": 4, "completion_id": 0, "solution": "def calculate_matrix_mean(matrix: list[list[float]], mode: str) -> list[float]:\n    if mode == 'row':\n        return [sum(row) / len(row) for row in matrix]\n    elif mode == 'column':\n        return [sum(col) / len(matrix) for col in zip(*matrix)]\n    else:\n        raise ValueError(\"Invalid mode. Choose 'row' or 'column'.\")\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    result = []\n    for row in matrix:\n        new_row = [element * scalar for element in row]\n        result.append(new_row)\n    return result"}
{"task_id": 6, "completion_id": 0, "solution": "import numpy as np\ndef calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    np_matrix = np.array(matrix)\n    (eigenvalues, _) = np.linalg.eig(np_matrix)\n    eigenvalues.sort()\n    eigenvalues = eigenvalues[::-1]\n    return eigenvalues.tolist()"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    A = np.array(A)\n    T = np.array(T)\n    S = np.array(S)\n    if np.linalg.det(T) == 0 or np.linalg.det(S) == 0:\n        return -1\n    transformed_matrix = np.linalg.inv(T) @ A @ S\n    transformed_matrix = np.round(transformed_matrix, 4)\n    return transformed_matrix.tolist()"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    if len(matrix) != 2 or len(matrix[0]) != 2 or len(matrix[1]) != 2:\n        return None\n    det = matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]\n    if det == 0:\n        return None\n    inverse = [[0, 0], [0, 0]]\n    inverse[0][0] = matrix[1][1] / det\n    inverse[0][1] = -matrix[0][1] / det\n    inverse[1][0] = -matrix[1][0] / det\n    inverse[1][1] = matrix[0][0] / det\n    return inverse"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    if len(a[0]) != len(b):\n        return -1\n    result = [[0 for j in range(len(b[0]))] for i in range(len(a))]\n    for i in range(len(a)):\n        for j in range(len(b[0])):\n            for k in range(len(b)):\n                result[i][j] += a[i][k] * b[k][j]\n    return result"}
{"task_id": 10, "completion_id": 0, "solution": "import numpy as np\ndef calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    vectors = np.array(vectors)\n    covariance_matrix = np.cov(vectors)\n    covariance_matrix = covariance_matrix.tolist()\n    return covariance_matrix\nvectors = [[1, 2], [3, 4], [5, 6]]"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    if A.shape[0] != A.shape[1] or A.shape[0] != b.shape[0]:\n        raise ValueError('A must be square and A and b must have the same number of rows')\n    x = np.zeros_like(b)\n    for _ in range(n):\n        x_new = np.zeros_like(x)\n        for i in range(A.shape[0]):\n            s1 = np.dot(A[i, :i], x[:i])\n            s2 = np.dot(A[i, i + 1:], x[i + 1:])\n            x_new[i] = (b[i] - s1 - s2) / A[i, i]\n        x = x_new\n    return np.round(x, 4).tolist()"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    (eigenvalues1, _) = np.linalg.eig(np.dot(A, A.T))\n    (eigenvalues2, _) = np.linalg.eig(np.dot(A.T, A))\n    singular_values1 = np.sqrt(np.abs(eigenvalues1))\n    singular_values2 = np.sqrt(np.abs(eigenvalues2))\n    singular_values1 = np.sort(singular_values1)[::-1]\n    singular_values2 = np.sort(singular_values2)[::-1]\n    singular_values1 = np.round(singular_values1, 4)\n    singular_values2 = np.round(singular_values2, 4)\n    return (singular_values1, singular_values2)"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n    if len(matrix) != 4 or len(matrix[0]) != 4:\n        raise ValueError('Matrix must be 4x4')\n    if len(matrix) == 2:\n        return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]\n    determinant = 0\n    for c in range(len(matrix)):\n        sub_matrix = [row[:c] + row[c + 1:] for row in matrix[1:]]\n        sign = -1 if c % 2 else 1\n        sub_det = determinant_4x4(sub_matrix)\n        determinant += sign * matrix[0][c] * sub_det\n    return determinant"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    X = np.array(X)\n    y = np.array(y)\n    X = np.c_[np.ones(X.shape[0]), X]\n    theta = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(y)\n    theta = [round(t, 4) for t in theta]\n    return theta"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> np.ndarray:\n    theta = np.zeros(X.shape[1])\n    for _ in range(iterations):\n        gradient = 2 / X.shape[0] * X.T @ (X @ theta - y)\n        theta = theta - alpha * gradient\n    theta = np.round(theta, 4)\n    return theta.tolist()"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    standardized_data = []\n    normalized_data = []\n    for column in data.T:\n        mean = np.mean(column)\n        std_dev = np.std(column)\n        min_val = np.min(column)\n        max_val = np.max(column)\n        standardized_column = [round((x - mean) / std_dev, 4) for x in column]\n        normalized_column = [round((x - min_val) / (max_val - min_val), 4) for x in column]\n        standardized_data.append(standardized_column)\n        normalized_data.append(normalized_column)\n    return (np.array(standardized_data).T.tolist(), np.array(normalized_data).T.tolist())"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n    centroids = np.array(initial_centroids)\n    points = np.array(points)\n    for _ in range(max_iterations):\n        distances = np.sqrt(((points - centroids[:, np.newaxis]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=0)\n        new_centroids = np.array([points[labels == i].mean(axis=0) for i in range(k)])\n        if np.all(centroids == new_centroids):\n            break\n        centroids = new_centroids\n    return [tuple((round(x, 4) for x in centroid)) for centroid in centroids]"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    if shuffle:\n        if random_seed:\n            np.random.seed(random_seed)\n        indices = np.random.permutation(len(X))\n    else:\n        indices = np.arange(len(X))\n    fold_size = len(X) // k\n    folds = []\n    for i in range(k):\n        start = i * fold_size\n        end = start + fold_size\n        if i < k - 1:\n            test_indices = indices[start:end]\n        else:\n            test_indices = indices[start:]\n        train_indices = np.concatenate([indices[:start], indices[end:]])\n        folds.append((train_indices, test_indices))\n    return folds"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    data = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    covariance_matrix = np.cov(data.T)\n    (eigenvalues, eigenvectors) = np.linalg.eig(covariance_matrix)\n    eigenpairs = [(np.abs(eigenvalues[i]), eigenvectors[:, i]) for i in range(len(eigenvalues))]\n    eigenpairs.sort(key=lambda k: k[0], reverse=True)\n    principal_components = np.array([pair[1] for pair in eigenpairs[:k]])\n    return np.round(principal_components, 4).tolist()"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n    target_values = [example[target_attr] for example in examples]\n    if not examples or len(attributes) <= 1 or len(Counter(target_values)) <= 1:\n        return Counter(target_values).most_common(1)[0][0]\n    else:\n        best_attr = select_attribute(examples, attributes)\n        tree = {best_attr: {}}\n        remaining_attr = [attr for attr in attributes if attr != best_attr]\n        for val in get_values(examples, best_attr):\n            subtree = learn_decision_tree(get_examples(examples, best_attr, val), remaining_attr, target_attr)\n            tree[best_attr][val] = subtree\n    return tree\ndef select_attribute(examples: list[dict], attributes: list[str]) -> str:\n    best_attr = attributes[0]\n    min_entropy = float('inf')\n    for attr in attributes:\n        attr_entropy = calculate_entropy(examples, attr)\n        if attr_entropy < min_entropy:\n            min_entropy = attr_entropy\n            best_attr = attr\n    return best_attr\ndef calculate_entropy(examples: list[dict], attr: str) -> float:\n    total_examples = len(examples)\n    attr_values = [example[attr] for example in examples]\n    attr_counts = Counter(attr_values)\n    entropy = 0.0\n    for val in attr_counts:\n        p = attr_counts[val] / total_examples\n        entropy += -p * math.log2(p)\n    return entropy\ndef get_values(examples: list[dict], attr: str) -> list:\n    return list(set([example[attr] for example in examples]))\ndef get_examples(examples: list[dict], attr: str, val: str) -> list[dict]:\n    return [example for example in examples if example[attr] == val]"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(x, y, **kwargs):\n    return np.dot(x, y)\ndef rbf_kernel(x, y, sigma=1.0):\n    return np.exp(-np.linalg.norm(x - y) ** 2 / (2 * sigma ** 2))\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    (n_samples, n_features) = data.shape\n    kernel_fun = linear_kernel if kernel == 'linear' else rbf_kernel\n    K = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            if kernel == 'linear':\n                K[i, j] = kernel_fun(data[i], data[j])\n            else:\n                K[i, j] = kernel_fun(data[i], data[j], sigma)\n    alpha = np.zeros(n_samples)\n    for _ in range(iterations):\n        for i in range(n_samples):\n            error = 0\n            for j in range(n_samples):\n                error += alpha[j] * labels[j] * K[j, i]\n            error = 1 - labels[i] * error\n            alpha[i] += lambda_val * labels[i] * error\n    bias = 0\n    for i in range(n_samples):\n        temp = 0\n        for j in range(n_samples):\n            temp += alpha[j] * labels[j] * K[i, j]\n        bias += labels[i] - temp\n    bias /= np.sum(alpha)\n    return (alpha.tolist(), round(bias, 4))"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    return round(1 / (1 + math.exp(-z)), 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    max_score = max(scores)\n    sum_exp_scores = sum([math.exp(score - max_score) for score in scores])\n    softmax_values = [round(math.exp(score - max_score) / sum_exp_scores, 4) for score in scores]\n    return softmax_values"}
{"task_id": 24, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    z = [sum([x * y for (x, y) in zip(feature, weights)]) + bias for feature in features]\n    a = [1 / (1 + math.exp(-x)) for x in z]\n    mse = np.mean([(a_i - y_i) ** 2 for (a_i, y_i) in zip(a, labels)])\n    a = [round(x, 4) for x in a]\n    mse = round(mse, 4)\n    return (a, mse)"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\ndef sigmoid_derivative(x):\n    return x * (1.0 - x)\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    weights = initial_weights\n    bias = initial_bias\n    mse_values = []\n    for _ in range(epochs):\n        linear_model = np.dot(features, weights) + bias\n        predictions = sigmoid(linear_model)\n        mse = np.mean((predictions - labels) ** 2)\n        mse_values.append(round(mse, 4))\n        derivative_weights = np.dot(features.T, (predictions - labels) * sigmoid_derivative(predictions)) / len(features)\n        derivative_bias = np.mean((predictions - labels) * sigmoid_derivative(predictions))\n        weights -= learning_rate * derivative_weights\n        bias -= learning_rate * derivative_bias\n    return (weights.tolist(), round(bias, 4), mse_values)"}
{"task_id": 26, "completion_id": 0, "solution": "import numpy as np\nclass Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        out = Value(self.data + other.data, (self, other), '+')\n\n        def _backward():\n            self.grad += 1.0 * out.grad\n            other.grad += 1.0 * out.grad\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        out = Value(self.data * other.data, (self, other), '*')\n\n        def _backward():\n            self.grad += other.data * out.grad\n            other.grad += self.data * out.grad\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')\n\n        def _backward():\n            self.grad += (out.data > 0) * out.grad\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1\n        for node in reversed(topo):\n            node._backward()"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    B = np.array(B)\n    C = np.array(C)\n    B_inv = np.linalg.inv(B)\n    P = np.dot(C, B_inv)\n    P = np.round(P, 4)\n    P = P.tolist()\n    return P"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    ATA = np.matmul(A.T, A)\n    (eigenvalues, eigenvectors) = np.linalg.eig(ATA)\n    singular_values = np.sqrt(eigenvalues)\n    S = np.diag(singular_values)\n    V = eigenvectors\n    U = []\n    for i in range(len(singular_values)):\n        if singular_values[i] != 0:\n            U.append(np.matmul(A, V[:, i]) / singular_values[i])\n        else:\n            U.append(np.zeros_like(V[:, i]))\n    U = np.array(U).T\n    return (U.round(4).tolist(), S.round(4).tolist(), V.round(4).tolist())"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    X = np.array(X)\n    y = np.array(y)\n    np.random.seed(seed)\n    indices = np.random.permutation(len(X))\n    X_shuffled = X[indices]\n    y_shuffled = y[indices]\n    return (X_shuffled.tolist(), y_shuffled.tolist())"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    num_samples = X.shape[0]\n    for i in np.arange(0, num_samples, batch_size):\n        (begin, end) = (i, min(i + batch_size, num_samples))\n        if y is not None:\n            yield (X[begin:end].tolist(), y[begin:end].tolist())\n        else:\n            yield X[begin:end].tolist()\ny = np.random.rand(100, 1)"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    X = np.array(X)\n    feature_values = X[:, feature_i]\n    X_greater_equal_threshold = X[feature_values >= threshold]\n    X_less_than_threshold = X[feature_values < threshold]\n    X_greater_equal_threshold = X_greater_equal_threshold.tolist()\n    X_less_than_threshold = X_less_than_threshold.tolist()\n    return (X_greater_equal_threshold, X_less_than_threshold)"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    (n_samples, n_features) = np.shape(X)\n\n    def index_combinations():\n        combs = [combinations_with_replacement(range(n_features), i) for i in range(0, degree + 1)]\n        flat_combs = [item for sublist in combs for item in sublist]\n        return flat_combs\n    new_features = []\n    for items in index_combinations():\n        new_features.append(np.prod(X[:, items], axis=1))\n    return np.array(new_features).T.tolist()"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    np.random.seed(seed)\n    subsets = []\n    for _ in range(n_subsets):\n        if replacements:\n            indices = np.random.choice(range(len(X)), size=len(X), replace=True)\n        else:\n            indices = np.random.choice(range(len(X)), size=len(X), replace=False)\n        X_subset = X[indices]\n        y_subset = y[indices]\n        subsets.append((X_subset.tolist(), y_subset.tolist()))\n    return subsets"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    if not n_col:\n        n_col = np.max(x) + 1\n    one_hot = np.zeros((x.shape[0], n_col))\n    one_hot[np.arange(x.shape[0]), x] = 1\n    return one_hot.tolist()"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    diagonal_matrix = np.zeros((len(x), len(x)))\n    np.fill_diagonal(diagonal_matrix, x)\n    return diagonal_matrix.tolist()"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    if len(y_true.shape) != 1 or len(y_pred.shape) != 1:\n        raise ValueError('Both input arrays must be 1D.')\n    if y_true.shape[0] != y_pred.shape[0]:\n        raise ValueError('Both input arrays must have the same length.')\n    accuracy = np.sum(y_true == y_pred) / y_true.shape[0]\n    accuracy = round(accuracy, 4)\n    return accuracy"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    if Y is None:\n        Y = X\n    X = X - np.mean(X, axis=0)\n    Y = Y - np.mean(Y, axis=0)\n    cov_matrix = np.matmul(X.T, Y)\n    std_dev_X = np.std(X, axis=0)\n    std_dev_Y = np.std(Y, axis=0)\n    correlation_matrix = cov_matrix / np.outer(std_dev_X, std_dev_Y)\n    correlation_matrix = np.around(correlation_matrix, decimals=4)\n    return correlation_matrix.tolist()"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores):\n    scores = np.array(scores)\n    scores = np.exp(scores - np.max(scores))\n    scores = scores / scores.sum()\n    scores = np.log(scores)\n    return scores.round(4).tolist()"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.vW = None\n        self.vw0 = None\n\n    def initialize(self, optimizer):\n        limit = 1 / np.sqrt(self.input_shape[0])\n        self.W = np.random.uniform(-limit, limit, (self.input_shape[0], self.n_units))\n        self.w0 = np.zeros((1, self.n_units))\n        self.W_opt = copy.copy(optimizer)\n        self.w0_opt = copy.copy(optimizer)\n\n    def parameters(self):\n        return np.prod(self.W.shape) + np.prod(self.w0.shape)\n\n    def forward_pass(self, X, training=True):\n        self.layer_input = X\n        return X.dot(self.W) + self.w0\n\n    def backward_pass(self, accum_grad):\n        W = self.W\n        grad_w = self.layer_input.T.dot(accum_grad)\n        grad_w0 = np.sum(accum_grad, axis=0, keepdims=True)\n        if self.trainable:\n            self.W = self.W_opt.update(self.W, grad_w)\n            self.w0 = self.w0_opt.update(self.w0, grad_w0)\n        accum_grad = accum_grad.dot(W.T)\n        return accum_grad\n\n    def output_shape(self):\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    input_matrix = np.pad(input_matrix, padding, mode='constant')\n    (input_height, input_width) = input_matrix.shape\n    (kernel_height, kernel_width) = kernel.shape\n    output_height = (input_height - kernel_height) // stride + 1\n    output_width = (input_width - kernel_width) // stride + 1\n    output_matrix = np.zeros((output_height, output_width))\n    for i in range(0, input_height - kernel_height + 1, stride):\n        for j in range(0, input_width - kernel_width + 1, stride):\n            patch = input_matrix[i:i + kernel_height, j:j + kernel_width]\n            output_matrix[i // stride, j // stride] = np.sum(patch * kernel)\n    output_matrix = np.round(output_matrix, 4)\n    return output_matrix.tolist()"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    \"\"\"\n    Implements the Rectified Linear Unit (ReLU) activation function.\n\n    Args:\n        z (float): Input to the ReLU function.\n\n    Returns:\n        float: The value after applying the ReLU function.\n    \"\"\"\n    return max(0, z)"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    mse = np.mean((np.dot(X, w) - y_true) ** 2)\n    regularization = alpha * np.sum(w ** 2)\n    ridge_loss = mse + regularization\n    ridge_loss = round(ridge_loss, 4)\n    return ridge_loss"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float | int:\n    return max(alpha * z, z)"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    x1 = np.array(x1)\n    x2 = np.array(x2)\n    kernel = np.dot(x1, x2)\n    return kernel\nx1 = [1, 2, 3]\nx2 = [4, 5, 6]"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    tp = np.sum(np.logical_and(y_true == 1, y_pred == 1))\n    fp = np.sum(np.logical_and(y_true == 0, y_pred == 1))\n    precision = tp / (tp + fp)\n    return precision"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    weights = np.random.rand(X.shape[1])\n    for i in range(n_iterations):\n        if method == 'batch':\n            gradient = np.dot(X.T, np.dot(X, weights) - y) / len(y)\n        elif method == 'stochastic':\n            random_index = np.random.randint(0, len(X))\n            x_i = X[random_index:random_index + 1]\n            y_i = y[random_index:random_index + 1]\n            gradient = 2 * np.dot(x_i.T, np.dot(x_i, weights) - y_i)\n        elif method == 'mini-batch':\n            indices = np.random.randint(0, len(X), batch_size)\n            x_i = X[indices]\n            y_i = y[indices]\n            gradient = 2 * np.dot(x_i.T, np.dot(x_i, weights) - y_i) / batch_size\n        else:\n            raise ValueError(\"Invalid method. Choose from 'batch', 'stochastic', or 'mini-batch'.\")\n        weights = weights - learning_rate * gradient\n    return weights.round(4).tolist()"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    matrix = np.array(matrix, dtype=float)\n    (r, c) = matrix.shape\n    pivot = 0\n    for j in range(c):\n        for i in range(pivot, r):\n            if matrix[i, j] != 0:\n                matrix[[pivot, i]] = matrix[[i, pivot]]\n                matrix[pivot] = matrix[pivot] / matrix[pivot, j]\n                for k in range(r):\n                    if k != pivot:\n                        matrix[k] = matrix[k] - matrix[k, j] * matrix[pivot]\n                pivot += 1\n                break\n    return matrix.tolist()"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=1000):\n    m = np.zeros_like(x0)\n    v = np.zeros_like(x0)\n    for t in range(1, num_iterations + 1):\n        g = grad(x0)\n        m = beta1 * m + (1 - beta1) * g\n        v = beta2 * v + (1 - beta2) * g ** 2\n        m_hat = m / (1 - beta1 ** t)\n        v_hat = v / (1 - beta2 ** t)\n        x0 = x0 - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    return np.round(x0.tolist(), 4)"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    weights = np.zeros(X.shape[1])\n    bias = 0.0\n    for _ in range(max_iter):\n        y_pred = np.dot(X, weights) + bias\n        dw = np.dot(X.T, y_pred - y) / X.shape[0]\n        db = np.sum(y_pred - y) / X.shape[0]\n        dw += alpha * np.sign(weights)\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n        if np.sum(np.abs(dw)) < tol:\n            break\n    weights = np.round(weights, 4).tolist()\n    bias = np.round(bias, 4)\n    return (weights, bias)"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    (m, n) = (len(source), len(target))\n    dp = np.zeros((m + 1, n + 1))\n    for i in range(m + 1):\n        dp[i][0] = i\n    for j in range(n + 1):\n        dp[0][j] = j\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if source[i - 1] == target[j - 1]:\n                cost = 0\n            else:\n                cost = 1\n            dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + cost)\n            if i > 1 and j > 1 and (source[i - 1] == target[j - 2]) and (source[i - 2] == target[j - 1]):\n                dp[i][j] = min(dp[i][j], dp[i - 2][j - 2] + 1)\n    return int(dp[m][n])"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    TP = np.sum((y_true == 1) & (y_pred == 1))\n    FN = np.sum((y_true == 1) & (y_pred == 0))\n    if TP + FN == 0:\n        recall = 0.0\n    else:\n        recall = TP / (TP + FN)\n    return round(recall, 3)"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef self_attention(X, W_q, W_k, W_v):\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    scores = np.dot(Q, K.T)\n    d_k = W_k.shape[0]\n    scores = scores / math.sqrt(d_k)\n    scores = np.exp(scores)\n    scores = scores / np.sum(scores, axis=1, keepdims=True)\n    output = np.dot(scores, V)\n    return np.round(output, 4).tolist()"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    input_sequence = np.array(input_sequence)\n    initial_hidden_state = np.array(initial_hidden_state)\n    Wx = np.array(Wx)\n    Wh = np.array(Wh)\n    b = np.array(b)\n    hidden_state = initial_hidden_state\n    for x in input_sequence:\n        hidden_state = np.tanh(np.dot(Wx, x) + np.dot(Wh, hidden_state) + b)\n    hidden_state = np.round(hidden_state, 4)\n    hidden_state = hidden_state.tolist()\n    return hidden_state"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    translation_matrix = np.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])\n    translated_points = []\n    for point in points:\n        homogenous_point = np.append(point, 1)\n        translated_homogenous_point = np.dot(translation_matrix, homogenous_point)\n        translated_point = translated_homogenous_point[:2]\n        translated_points.append(translated_point.tolist())\n    return translated_points"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    trace = sigma_q ** (-2) * sigma_p ** 2\n    quad_term = (mu_q - mu_p) ** 2 / sigma_q ** 2\n    k = 1\n    det_ratio = sigma_q / sigma_p\n    kl_divergence = 0.5 * (trace + quad_term - k - np.log(det_ratio))\n    return kl_divergence"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    n_size = len(A)\n    if x_ini is None:\n        x_ini = np.zeros(n_size)\n    for _ in range(n):\n        for i in range(n_size):\n            sigma = 0\n            for j in range(n_size):\n                if j != i:\n                    sigma += A[i][j] * x_ini[j]\n            x_ini[i] = (b[i] - sigma) / A[i][i]\n    x_ini = np.round(x_ini, 4)\n    return x_ini.tolist()\nA = [[16, 3], [7, -11]]\nb = [11, 13]\nn = 10\nx_ini = [1, 1]"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    Ab = np.concatenate((A, b.reshape(-1, 1)), axis=1)\n    n = len(Ab)\n    for i in range(n):\n        max_row = i\n        for j in range(i + 1, n):\n            if abs(Ab[j, i]) > abs(Ab[max_row, i]):\n                max_row = j\n        Ab[[i, max_row]] = Ab[[max_row, i]]\n        for j in range(i + 1, n):\n            factor = Ab[j, i] / Ab[i, i]\n            Ab[j] -= factor * Ab[i]\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        x[i] = (Ab[i, -1] - np.dot(Ab[i, :-1], x)) / Ab[i, i]\n    return x.round(4).tolist()"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, and final cell state.\n        \"\"\"\n        sequence_length = x.shape[0]\n        hidden_states = np.zeros((sequence_length, self.hidden_size))\n        cell_states = np.zeros((sequence_length, self.hidden_size))\n        hidden_state = initial_hidden_state\n        cell_state = initial_cell_state\n        for t in range(sequence_length):\n            input_vector = np.concatenate((x[t], hidden_state), axis=0)\n            input_vector = np.expand_dims(input_vector, axis=1)\n            forget_gate = self.sigmoid(np.dot(self.Wf, input_vector) + self.bf)\n            input_gate = self.sigmoid(np.dot(self.Wi, input_vector) + self.bi)\n            candidate_cell_state = np.tanh(np.dot(self.Wc, input_vector) + self.bc)\n            cell_state = forget_gate * cell_state + input_gate * candidate_cell_state\n            output_gate = self.sigmoid(np.dot(self.Wo, input_vector) + self.bo)\n            hidden_state = output_gate * np.tanh(cell_state)\n            hidden_states[t] = hidden_state.flatten()\n            cell_states[t] = cell_state.flatten()\n        return (hidden_states.tolist(), cell_states.tolist(), hidden_state.flatten().tolist(), cell_state.flatten().tolist())\n\n    def sigmoid(self, x):\n        return 1 / (1 + np.exp(-x))"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\ndef compute_tf_idf(corpus, query):\n    if len(corpus) == 0:\n        return []\n    tf_idf_scores = []\n    idf = {}\n    total_documents = len(corpus)\n    for word in query:\n        df = sum([1 for document in corpus if word in document])\n        idf[word] = np.log((total_documents + 1) / (df + 1))\n    for document in corpus:\n        tf = {}\n        for word in document:\n            tf[word] = document.count(word) / len(document)\n        document_scores = []\n        for word in query:\n            tf_value = tf.get(word, 0)\n            document_scores.append(round(tf_value * idf[word], 5))\n        tf_idf_scores.append(document_scores)\n    return np.array(tf_idf_scores).tolist()"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    TP = np.sum(np.logical_and(y_pred == 1, y_true == 1))\n    FP = np.sum(np.logical_and(y_pred == 1, y_true == 0))\n    FN = np.sum(np.logical_and(y_pred == 0, y_true == 1))\n    precision = TP / (TP + FP) if TP + FP != 0 else 0\n    recall = TP / (TP + FN) if TP + FN != 0 else 0\n    f_score = (1 + beta ** 2) * (precision * recall) / (beta ** 2 * precision + recall) if beta ** 2 * precision + recall != 0 else 0\n    return round(f_score, 3)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def rnn_forward(self, input_sequence):\n        outputs = []\n        hiddens = []\n        last_inputs = []\n        h = np.zeros((self.hidden_size, 1))\n        for x in input_sequence:\n            h = np.tanh(np.dot(self.W_hh, h) + np.dot(self.W_xh, x) + self.b_h)\n            y = np.dot(self.W_hy, h) + self.b_y\n            outputs.append(y)\n            hiddens.append(h)\n            last_inputs.append(x)\n        return (outputs, last_inputs, hiddens)\n\n    def rnn_backward(self, input_sequence, expected_output, outputs, last_inputs, last_hiddens, learning_rate):\n        n = len(input_sequence)\n        dW_xh = np.zeros_like(self.W_xh)\n        dW_hh = np.zeros_like(self.W_hh)\n        dW_hy = np.zeros_like(self.W_hy)\n        db_h = np.zeros_like(self.b_h)\n        db_y = np.zeros_like(self.b_y)\n        dh_next = np.zeros_like(last_hiddens[0])\n        for t in reversed(range(n)):\n            dy = outputs[t] - expected_output[t]\n            dh = np.dot(self.W_hy.T, dy) + dh_next\n            d_tanh = (1 - last_hiddens[t] ** 2) * dh\n            db_h += d_tanh\n            dW_hh += np.dot(d_tanh, last_hiddens[t].T)\n            dW_xh += np.dot(d_tanh, last_inputs[t].T)\n            dW_hy += np.dot(dy, last_hiddens[t].T)\n            db_y += dy\n            dh_next = np.dot(self.W_hh.T, d_tanh)\n        for dparam in [dW_xh, dW_hh, dW_hy, db_h, db_y]:\n            np.clip(dparam, -5, 5, out=dparam)\n        self.W_xh -= learning_rate * dW_xh\n        self.W_hh -= learning_rate * dW_hh\n        self.W_hy -= learning_rate * dW_hy\n        self.b_h -= learning_rate * db_h\n        self.b_y -= learning_rate * db_y"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    x = np.zeros_like(b, dtype=np.float64) if x0 is None else x0\n    r = b - np.dot(A, x)\n    p = r\n    r_k_norm = np.dot(r, r)\n    for i in range(n):\n        Ap = np.dot(A, p)\n        alpha = r_k_norm / np.dot(p, Ap)\n        x += alpha * p\n        r -= alpha * Ap\n        r_kplus1_norm = np.dot(r, r)\n        if np.sqrt(r_kplus1_norm) < tol:\n            break\n        p = r + r_kplus1_norm / r_k_norm * p\n        r_k_norm = r_kplus1_norm\n    return x.round(8).tolist()"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    (_, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    impurity = 1 - np.sum(np.square(probabilities))\n    return round(impurity, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    values = []\n    column_indices = []\n    row_pointer = [0]\n    for (i, row) in enumerate(dense_matrix):\n        for (j, element) in enumerate(row):\n            if element != 0:\n                values.append(element)\n                column_indices.append(j)\n        row_pointer.append(len(values))\n    return (values, column_indices, row_pointer)"}
{"task_id": 66, "completion_id": 0, "solution": "def orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    dot_product = sum((x * y for (x, y) in zip(v, L)))\n    L_magnitude_squared = sum((x * x for x in L))\n    projection = [dot_product / L_magnitude_squared * x for x in L]\n    projection = [round(x, 3) for x in projection]\n    return projection\nv = [1, 2, 3]\nL = [4, 5, 6]"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    values = []\n    row_indices = []\n    column_pointer = [0]\n    for column in zip(*dense_matrix):\n        for (row_index, value) in enumerate(column):\n            if value != 0:\n                values.append(value)\n                row_indices.append(row_index)\n        column_pointer.append(len(values))\n    return (values, row_indices, column_pointer)"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    A = np.array(A)\n    rref_A = np.around(A, decimals=8).tolist()\n    rref_A = [list(x) for x in zip(*rref_A)]\n    basis_vectors = []\n    for i in range(len(rref_A[0])):\n        if rref_A[i] != [0] * len(rref_A[i]):\n            basis_vectors.append(rref_A[i])\n    return basis_vectors"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    y_true_mean = np.mean(y_true)\n    total_sum_of_squares = np.sum((y_true - y_true_mean) ** 2)\n    residual_sum_of_squares = np.sum((y_true - y_pred) ** 2)\n    r_squared = 1 - residual_sum_of_squares / total_sum_of_squares\n    return round(r_squared, 3)"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    if not img:\n        return -1\n    row_length = len(img[0])\n    for row in img:\n        if len(row) != row_length:\n            return -1\n    for row in img:\n        for pixel in row:\n            if pixel < 0 or pixel > 255:\n                return -1\n    total_brightness = sum((sum(row) for row in img))\n    total_pixels = len(img) * len(img[0])\n    average_brightness = total_brightness / total_pixels\n    return round(average_brightness, 2)"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    if not isinstance(y_true, np.ndarray) or not isinstance(y_pred, np.ndarray):\n        raise TypeError('Both inputs should be numpy arrays.')\n    if len(y_true) == 0 or len(y_pred) == 0:\n        raise ValueError('Input arrays should not be empty.')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Input arrays should have the same shape.')\n    rmse = np.sqrt(np.mean((y_true - y_pred) ** 2))\n    return round(rmse, 3)"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    intersection = np.sum(y_true * y_pred)\n    union = np.sum(y_true) + np.sum(y_pred) - intersection\n    if union == 0:\n        return 0.0\n    jaccard_index = intersection / union\n    return round(jaccard_index, 3)"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    intersection = np.sum(y_true * y_pred)\n    total = np.sum(y_true) + np.sum(y_pred)\n    if total == 0:\n        return 1.0\n    dice = 2.0 * intersection / total\n    return round(dice, 3)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef create_row_hv(row, dim, random_seeds):\n    composite_hv = np.zeros(dim)\n    for (feature, value) in row.items():\n        seed = random_seeds[feature]\n        np.random.seed(seed)\n        feature_hv = np.random.randn(dim)\n        value_hv = np.random.randn(dim)\n        bound_hv = feature_hv * value_hv\n        composite_hv += bound_hv\n    return composite_hv.tolist()"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    matrix = [[0, 0], [0, 0]]\n    for pair in data:\n        (y_true, y_pred) = pair\n        matrix[y_true][y_pred] += 1\n    return matrix\ndata = [[0, 0], [0, 1], [1, 0], [1, 1], [1, 1], [1, 0]]"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    if v1.shape != v2.shape:\n        raise ValueError('Both vectors must have the same shape')\n    if v1.size == 0 or v2.size == 0 or np.linalg.norm(v1) == 0 or (np.linalg.norm(v2) == 0):\n        raise ValueError('Vectors cannot be empty or have zero magnitude')\n    similarity = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n    return round(similarity, 3)"}
{"task_id": 77, "completion_id": 0, "solution": "import numpy as np\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import accuracy_score\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    conf_matrix = confusion_matrix(actual, predicted)\n    accuracy = accuracy_score(actual, predicted)\n    f1 = f1_score(actual, predicted)\n    specificity = conf_matrix[0, 0] / (conf_matrix[0, 0] + conf_matrix[0, 1])\n    npv = conf_matrix[0, 0] / (conf_matrix[0, 0] + conf_matrix[1, 0])\n    return (conf_matrix, np.round(accuracy, 3), np.round(f1, 3), np.round(specificity, 3), np.round(npv, 3))\nactual = [1, 1, 0, 1, 0, 1, 1, 0, 1, 0]\npredicted = [1, 0, 0, 1, 0, 1, 0, 1, 1, 0]"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\nfrom scipy import stats\ndef descriptive_statistics(data):\n    mean = np.mean(data)\n    median = np.median(data)\n    mode = stats.mode(data)[0][0]\n    variance = np.var(data)\n    standard_deviation = np.std(data)\n    percentile_25 = np.percentile(data, 25)\n    percentile_50 = np.percentile(data, 50)\n    percentile_75 = np.percentile(data, 75)\n    interquartile_range = percentile_75 - percentile_25\n    results = {'mean': round(mean, 4), 'median': round(median, 4), 'mode': round(mode, 4), 'variance': round(variance, 4), 'standard_deviation': round(standard_deviation, 4), '25th_percentile': round(percentile_25, 4), '50th_percentile': round(percentile_50, 4), '75th_percentile': round(percentile_75, 4), 'interquartile_range': round(interquartile_range, 4)}\n    return results"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials\n    \"\"\"\n    binomial_coefficient = math.comb(n, k)\n    success_probability = p ** k\n    failure_probability = (1 - p) ** (n - k)\n    probability = binomial_coefficient * success_probability * failure_probability\n    probability = round(probability, 5)\n    return probability"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    \"\"\"\n    coefficient = 1.0 / (std_dev * math.sqrt(2 * math.pi))\n    exponential = math.exp(-(math.pow(x - mean, 2) / (2 * math.pow(std_dev, 2))))\n    return round(coefficient * exponential, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    \"\"\"\n    probability = lam ** k * math.exp(-lam) / math.factorial(k)\n    return round(probability, 5)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n\n    Returns:\n        float: The contrast of the image.\n    \"\"\"\n    if len(img.shape) != 2:\n        raise ValueError('Image should be grayscale')\n    if np.min(img) < 0 or np.max(img) > 255:\n        raise ValueError('Pixel values should be between 0 and 255')\n    contrast = np.max(img) - np.min(img)\n    return contrast\nimg = np.array([[0, 128, 255], [255, 128, 0], [0, 128, 255]])\ncontrast = calculate_contrast(img)"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    \"\"\"\n    return np.dot(vec1, vec2)"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef phi_transform(data: list[float], degree: int) -> list[list[float]]:\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n\n    Returns:\n        list[list[float]]: A list of lists, where each inner list contains the polynomial features of the corresponding data point.\n    \"\"\"\n    if degree < 0:\n        return []\n    transformed_data = []\n    for point in data:\n        transformed_point = [round(point ** i, 8) for i in range(1, degree + 1)]\n        transformed_data.append(transformed_point)\n    return transformed_data"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    if position == 0 or d_model <= 0:\n        return -1\n    encoding = np.zeros((position, d_model), dtype=np.float16)\n    for pos in range(position):\n        for i in range(d_model):\n            if i % 2 == 0:\n                encoding[pos, i] = np.sin(pos / 10000 ** (i / d_model))\n            else:\n                encoding[pos, i] = np.cos(pos / 10000 ** ((i - 1) / d_model))\n    return encoding.tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    elif training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    else:\n        return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * grad ** 2\n    m_corrected = m / (1 - beta1 ** t)\n    v_corrected = v / (1 - beta2 ** t)\n    parameter = parameter - learning_rate * m_corrected / (np.sqrt(v_corrected) + epsilon)\n    return (parameter.round(5).tolist(), m.round(5).tolist(), v.round(5).tolist())"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    input_ids = encoder.encode(prompt)\n    position_ids = np.arange(len(input_ids))\n    position_embeds = params['wpe'][position_ids]\n    token_embeds = params['wte'][input_ids]\n    input_embeds = token_embeds + position_embeds\n    attention_mask = np.ones((len(input_ids), len(input_ids)))\n    outputs = np.dot(attention_mask, input_embeds)\n    outputs = outputs * params['ln_f']['g'] + params['ln_f']['b']\n    new_token_ids = [input_ids[0]] * n_tokens_to_generate\n    generated_text = encoder.decode(new_token_ids)\n    return generated_text\nprompt = 'hello world'\nn_tokens_to_generate = 40\ngenerated_text = gen_text(prompt, n_tokens_to_generate)"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        e_x = np.exp(values - np.max(values))\n        return e_x / e_x.sum(axis=0)\n    crystal_values = np.array(crystal_values)\n    weights = np.random.rand(dimension, n)\n    attention_scores = softmax(np.dot(weights, crystal_values))\n    weighted_patterns = np.dot(weights.T, attention_scores)\n    return [round(pattern, 4) for pattern in weighted_patterns]"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\nimport math\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    doc_len = [len(doc) for doc in corpus]\n    avg_doc_len = sum(doc_len) / len(doc_len)\n    idf = {}\n    for doc in corpus:\n        for word in set(doc):\n            if word not in idf:\n                idf[word] = math.log((len(corpus) - sum([1 for d in corpus if word in d]) + 0.5) / (sum([1 for d in corpus if word in d]) + 0.5))\n    scores = []\n    for doc in corpus:\n        score = 0\n        doc_counts = Counter(doc)\n        for word in query:\n            if word in doc_counts:\n                tf = doc_counts[word] * (k1 + 1) / (doc_counts[word] + k1 * (1 - b + b * (len(doc) / avg_doc_len)))\n                score += idf[word] * tf\n        scores.append(round(score, 3))\n    return scores\ncorpus = [['cat', 'dog', 'mouse'], ['dog', 'mouse', 'mouse'], ['cat', 'mouse', 'mouse', 'mouse']]\nquery = ['cat', 'mouse']"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    (tp, fp, fn) = (0, 0, 0)\n    for (true, pred) in zip(y_true, y_pred):\n        if true == 1 and pred == 1:\n            tp += 1\n        elif true == 0 and pred == 1:\n            fp += 1\n        elif true == 1 and pred == 0:\n            fn += 1\n    precision = tp / (tp + fp) if tp + fp != 0 else 0\n    recall = tp / (tp + fn) if tp + fn != 0 else 0\n    f1_score = 2 * (precision * recall) / (precision + recall) if precision + recall != 0 else 0\n    return round(f1_score, 3)"}
{"task_id": 92, "completion_id": 0, "solution": "import math\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nPI = 3.14159\ndef power_grid_forecast(consumption_data):\n    detrended_data = [consumption_data[i] - 10 * math.sin(2 * PI * (i + 1) / 10) for i in range(10)]\n    X = np.array(range(1, 11)).reshape((-1, 1))\n    Y = np.array(detrended_data)\n    model = LinearRegression().fit(X, Y)\n    day15_base_consumption = model.predict([[15]])[0]\n    day15_base_consumption += 10 * math.sin(2 * PI * 15 / 10)\n    final_consumption = round(day15_base_consumption * 1.05)\n    return int(final_consumption)"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        raise ValueError('Arrays must have the same length.')\n    abs_diff = np.abs(y_true - y_pred)\n    mae = np.mean(abs_diff)\n    return round(mae, 3)"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n\n    def compute_qkv(X, W_q, W_k, W_v):\n        Q = np.dot(X, W_q)\n        K = np.dot(X, W_k)\n        V = np.dot(X, W_v)\n        return (Q, K, V)\n\n    def self_attention(Q, K, V):\n        d_k = Q.shape[-1]\n        scores = np.dot(Q, K.T) / math.sqrt(d_k)\n        attention = np.dot(np.exp(scores), V)\n        return attention\n\n    def split_heads(x, n_heads):\n        x_shape = x.shape\n        return x.reshape(x_shape[0], n_heads, x_shape[1] // n_heads).transpose(1, 2, 0)\n\n    def combine_heads(x):\n        return x.transpose(2, 0, 1).reshape(x.shape[2], -1)\n    (Q, K, V) = compute_qkv(X, W_q, W_k, W_v)\n    Q_heads = split_heads(Q, n_heads)\n    K_heads = split_heads(K, n_heads)\n    V_heads = split_heads(V, n_heads)\n    attention_heads = [self_attention(Q_heads[i], K_heads[i], V_heads[i]) for i in range(n_heads)]\n    output = combine_heads(np.array(attention_heads))\n    return output.round(4).tolist()"}
{"task_id": 95, "completion_id": 0, "solution": "def phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    if len(x) != len(y):\n        raise ValueError('Both lists must have the same length.')\n    count_00 = count_01 = count_10 = count_11 = 0\n    for i in range(len(x)):\n        if x[i] == 0 and y[i] == 0:\n            count_00 += 1\n        elif x[i] == 0 and y[i] == 1:\n            count_01 += 1\n        elif x[i] == 1 and y[i] == 0:\n            count_10 += 1\n        elif x[i] == 1 and y[i] == 1:\n            count_11 += 1\n    total = len(x)\n    expected_00 = (count_00 + count_01) * (count_00 + count_10) / total\n    expected_01 = (count_00 + count_01) * (count_01 + count_11) / total\n    expected_10 = (count_10 + count_11) * (count_00 + count_10) / total\n    expected_11 = (count_10 + count_11) * (count_01 + count_11) / total\n    phi = (count_00 * count_11 - count_01 * count_10) / (expected_00 * expected_11 - expected_01 * expected_10) ** 0.5\n    return round(phi, 4)\nx = [0, 1, 1, 0, 0]\ny = [1, 0, 1, 0, 1]"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    if x < -2.5:\n        return 0.0\n    elif x > 2.5:\n        return 1.0\n    else:\n        return 0.2 * x + 0.5"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value\n    \"\"\"\n    if x >= 0:\n        return round(x, 4)\n    else:\n        return round(alpha * (math.exp(x) - 1), 4)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    return x if x > 0 else alpha * x"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x)\n    \"\"\"\n    try:\n        result = math.log(1 + math.exp(x))\n        result = round(result, 4)\n        return result\n    except OverflowError:\n        return float('inf')\n    except FloatingPointError:\n        return float(0)"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input\n    \"\"\"\n    return round(x / (1 + abs(x)), 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    rhos = np.array(rhos)\n    A = np.array(A)\n    pi_theta_old = np.array(pi_theta_old)\n    pi_theta_ref = np.array(pi_theta_ref)\n    clipped_rhos = np.clip(rhos, 1 - epsilon, 1 + epsilon)\n    surrogate = np.minimum(clipped_rhos * A, clipped_rhos * (1 - beta) * A + beta * (clipped_rhos - 1))\n    kl_div = np.sum(pi_theta_old * (np.log(pi_theta_old) - np.log(pi_theta_ref)))\n    grpo_obj = np.sum(surrogate) - kl_div\n    return round(grpo_obj, 6)"}
{"task_id": 102, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value\n    \"\"\"\n    return round(x * (1 / (1 + math.exp(-x))), 4)"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x >= 0:\n        return scale * x\n    else:\n        return scale * alpha * (math.exp(x) - 1)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    \"\"\"\n    Compute sigmoid of x\n\n    Args:\n        x: Input value\n\n    Returns:\n        Sigmoid of x\n    \"\"\"\n    return 1 / (1 + np.exp(-x))\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N x D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    linear_model = np.dot(X, weights) + bias\n    y_pred_prob = sigmoid(linear_model)\n    y_pred = [1 if p >= 0.5 else 0 for p in y_pred_prob]\n    return y_pred"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef softmax(z):\n    return np.exp(z) / np.sum(np.exp(z), axis=1, keepdims=True)\ndef cross_entropy(y_pred, y_true):\n    return -np.sum(np.log(np.sum(y_pred * y_true, axis=1)))\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    W = np.random.randn(X.shape[1], y.shape[1])\n    b = np.zeros((1, y.shape[1]))\n    losses = []\n    for i in range(iterations):\n        z = np.dot(X, W) + b\n        y_pred = softmax(z)\n        loss = cross_entropy(y_pred, y)\n        losses.append(loss)\n        dscores = y_pred - y\n        dW = np.dot(X.T, dscores)\n        db = np.sum(dscores, axis=0, keepdims=True)\n        W -= learning_rate * dW\n        b -= learning_rate * db\n    return (W.round(4).tolist(), np.array(losses).round(4).tolist())"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"\n    Compute sigmoid of z\n    \"\"\"\n    return 1 / (1 + np.exp(-z))\ndef binary_cross_entropy_loss(y_true, y_pred):\n    \"\"\"\n    Compute binary cross entropy loss\n    \"\"\"\n    return -(y_true * np.log(y_pred) + (1 - y_true) * np.log(1 - y_pred)).mean()\ndef gradient_descent(X, y, learning_rate, iterations):\n    \"\"\"\n    Gradient descent algorithm for logistic regression\n    \"\"\"\n    weights = np.zeros(X.shape[1])\n    loss = np.zeros(iterations)\n    for i in range(iterations):\n        predictions = sigmoid(np.dot(X, weights))\n        gradient = np.dot(X.T, predictions - y) / y.size\n        weights -= learning_rate * gradient\n        loss[i] = binary_cross_entropy_loss(y, predictions)\n    return (weights, loss)\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \"\"\"\n    X = np.concatenate((np.ones((X.shape[0], 1)), X), axis=1)\n    (weights, loss) = gradient_descent(X, y, learning_rate, iterations)\n    weights = np.round(weights, 4).tolist()\n    loss = np.round(loss, 4).tolist()\n    return (weights, loss)"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    dot_product = np.dot(Q, K.T) / np.sqrt(K.shape[1])\n    dot_product = np.where(mask == 0, -np.inf, dot_product)\n    attention_weights = np.exp(dot_product - np.max(dot_product, axis=-1, keepdims=True))\n    attention_weights = attention_weights / np.sum(attention_weights, axis=-1, keepdims=True)\n    output = np.dot(attention_weights, V)\n    return output"}
{"task_id": 108, "completion_id": 0, "solution": "def disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    \"\"\"\n    unique_colors = len(set(apples))\n    total_apples = len(apples)\n    disorder = round(unique_colors / total_apples, 4)\n    return disorder"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    mean = np.mean(X, axis=-1, keepdims=True)\n    variance = np.var(X, axis=-1, keepdims=True)\n    X_hat = (X - mean) / np.sqrt(variance + epsilon)\n    output = gamma * X_hat + beta\n    return np.round(output, 5).tolist()"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    ref_unigrams = reference.split()\n    can_unigrams = candidate.split()\n    matches = sum((Counter(ref_unigrams) & Counter(can_unigrams)).values())\n    precision = matches / len(can_unigrams) if can_unigrams else 0\n    recall = matches / len(ref_unigrams) if ref_unigrams else 0\n    f_mean = (1 + beta ** 2) * precision * recall / (beta ** 2 * precision + recall) if precision + recall > 0 else 0\n    penalty = (1 - gamma) * sum(([min(len(ref_unigrams[i:]), len(can_unigrams[i:]))] for i in range(len(ref_unigrams)))) / len(ref_unigrams)\n    meteor = f_mean * (1 - penalty)\n    return round(meteor, 3)"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    p_x = total_counts_x / total_samples\n    p_y = total_counts_y / total_samples\n    p_xy = joint_counts / total_samples\n    pmi = np.log2(p_xy / (p_x * p_y))\n    return round(pmi, 3)"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    min_val = min(x)\n    max_val = max(x)\n    normalized = [round((i - min_val) / (max_val - min_val), 4) for i in x]\n    return normalized"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    x = np.matmul(x, w1)\n    x = np.maximum(x, 0)\n    x = np.matmul(x, w2)\n    x = x + np.matmul(x, np.eye(x.shape[1]))\n    x = np.maximum(x, 0)\n    x = np.round(x, 4).tolist()\n    return x"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray):\n    return np.mean(x, axis=(0, 1))\nx = np.random.rand(height, width, channels)"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    mean = np.mean(X, axis=(0, 2, 3), keepdims=True)\n    var = np.var(X, axis=(0, 2, 3), keepdims=True)\n    X_hat = (X - mean) / np.sqrt(var + epsilon)\n    output = gamma * X_hat + beta\n    output = output.round(4).tolist()\n    return output"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    derivative = c * n * x ** (n - 1)\n    return round(derivative, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10):\n    basis = []\n    for v in vectors:\n        w = np.array(v)\n        for b in basis:\n            w = w - np.dot(w, b) * b\n        if np.linalg.norm(w) > tol:\n            basis.append(w / np.linalg.norm(w))\n    return [b.round(4).tolist() for b in basis]"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    a = np.array(a)\n    b = np.array(b)\n    cross_prod = np.cross(a, b)\n    cross_prod = np.round(cross_prod, 4)\n    cross_prod = cross_prod.tolist()\n    return cross_prod\na = [1, 2, 3]\nb = [4, 5, 6]"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    if np.linalg.det(A) == 0:\n        return -1\n    solutions = []\n    for i in range(A.shape[1]):\n        A_i = A.copy()\n        A_i[:, i] = b\n        det_A_i = np.linalg.det(A_i)\n        x_i = det_A_i / np.linalg.det(A)\n        solutions.append(x_i)\n    return np.round(solutions, 4).tolist()"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    if len(p) != len(q):\n        return 0.0\n    if len(p) == 0 or len(q) == 0:\n        return 0.0\n    bc_distance = -np.log(np.sum([np.sqrt(p_i * q_i) for (p_i, q_i) in zip(p, q)]))\n    return round(bc_distance, 4)"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float]:\n    if len(a) != len(b):\n        return -1\n    else:\n        return [a[i] + b[i] for i in range(len(a))]"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    policy_gradients = []\n    for episode in episodes:\n        log_policy_returns = []\n        T = len(episode)\n        G = 0\n        for t in reversed(range(T)):\n            G = episode[t][2] + G\n            state = episode[t][0]\n            policy = np.exp(theta[state, :]) / np.sum(np.exp(theta[state, :]))\n            action = episode[t][1]\n            log_policy = np.log(policy[action])\n            log_policy_returns.append(log_policy * G)\n        avg_log_policy_return = np.mean(log_policy_returns)\n        policy_gradients.append(avg_log_policy_return)\n    return np.round(policy_gradients, 4).tolist()"}
{"task_id": 123, "completion_id": 0, "solution": "import math\ndef compute_efficiency(n_experts, k_active, d_in, d_out):\n    flops_moe = n_experts * d_in * d_out + k_active * d_in * d_out\n    flops_dense = 2 * d_in * d_out\n    savings = (flops_dense - flops_moe) / flops_dense * 100\n    flops_moe = round(flops_moe, 1)\n    flops_dense = round(flops_dense, 1)\n    savings = round(savings, 1)\n    return (flops_moe, flops_dense, savings)\nn_experts = 100\nk_active = 10\nd_in = 1024\nd_out = 1024"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int):\n    scores = np.dot(X, W_g) + np.dot(N, W_noise)\n    topk_indices = np.argpartition(scores, -k)[-k:]\n    topk_scores = scores[topk_indices]\n    total_score = np.sum(topk_scores)\n    gating_probs = topk_scores / total_score\n    gating_probs = np.round(gating_probs, 4)\n    return gating_probs.tolist()"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    gating_prob = np.exp(np.dot(x, Wg.T))\n    gating_prob /= np.sum(gating_prob, axis=1, keepdims=True)\n    top_k_indices = np.argpartition(gating_prob, -top_k, axis=1)[:, -top_k:]\n    expert_outputs = np.dot(x[:, np.newaxis, :], We[top_k_indices].transpose(0, 2, 1))\n    final_output = np.zeros_like(x)\n    for i in range(x.shape[0]):\n        for j in range(top_k):\n            final_output[i] += expert_outputs[i, j] * gating_prob[i, top_k_indices[i, j]]\n    final_output = np.round(final_output, 4)\n    return final_output.tolist()"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    if X.shape[1] % num_groups != 0:\n        raise ValueError('Number of groups is not a divisor of the number of channels')\n    X_reshaped = X.reshape(X.shape[0], num_groups, -1)\n    mean = np.mean(X_reshaped, axis=(2, 3), keepdims=True)\n    std = np.std(X_reshaped, axis=(2, 3), keepdims=True)\n    X_normalized = (X_reshaped - mean) / np.sqrt(std ** 2 + epsilon)\n    gamma = gamma.reshape(1, num_groups, -1)\n    beta = beta.reshape(1, num_groups, -1)\n    output = gamma * X_normalized + beta\n    output = output.reshape(X.shape)\n    output = np.round(output, 4)\n    return output.tolist()"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n    x = start_x\n    for i in range(max_iters):\n        gradient = 4 * x ** 3 - 9 * x ** 2\n        x = x - learning_rate * gradient\n        if np.abs(gradient) < tolerance:\n            break\n    return np.round(x, 4)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    \"\"\"\n    Implement the Dynamic Tanh (DyT) function, a normalization-free transformation inspired by the Tanh function.\n    DyT replaces layer normalization in Transformer architectures while preserving squashing behavior and enabling stable training.\n\n    :param x: Input array of numbers\n    :param alpha: Scaling factor\n    :param gamma: Parameter controlling the slope of the function\n    :param beta: Parameter controlling the center of the function\n    :return: List of numbers after applying dynamic tanh function\n    \"\"\"\n    dyt = [alpha * np.tanh(gamma * xi + beta) for xi in x]\n    dyt_rounded = [round(xi, 4) for xi in dyt]\n    return dyt_rounded"}
