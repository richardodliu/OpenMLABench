{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    if all((len(row) == len(b) for row in a)):\n        return [sum([a[i][j] * b[j] for j in range(len(b))]) for i in range(len(a))]\n    else:\n        return -1"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    transposed = [[a[j][i] for j in range(len(a))] for i in range(len(a[0]))]\n    return transposed"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    arr = np.array(a)\n    try:\n        reshaped_arr = arr.reshape(new_shape)\n        return reshaped_arr.tolist()\n    except ValueError:\n        return []"}
{"task_id": 4, "completion_id": 0, "solution": "def calculate_matrix_mean(matrix, mode):\n    \"\"\"\n    This function calculates the mean of a matrix either by row or by column.\n\n    Parameters:\n    matrix : list of lists\n        The matrix to be analyzed.\n    mode : str\n        The mode of calculation. Can be 'row' or 'column'.\n\n    Returns:\n    means : list of floats\n        A list of means according to the specified mode.\n    \"\"\"\n    if mode not in ['row', 'column']:\n        raise ValueError(\"Mode must be 'row' or 'column'\")\n    if mode == 'row':\n        means = [sum(row) / len(row) for row in matrix]\n    else:\n        column_sums = [sum(column) for column in zip(*matrix)]\n        means = [column_sum / len(matrix) for column_sum in column_sums]\n    return means\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    return [[element * scalar for element in row] for row in matrix]\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nscalar = 3"}
{"task_id": 6, "completion_id": 0, "solution": "import numpy as np\ndef calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    np_matrix = np.array(matrix)\n    eigenvalues = np.linalg.eigvals(np_matrix)\n    sorted_eigenvalues = sorted(eigenvalues, reverse=True)\n    return [float(ev) for ev in sorted_eigenvalues]\nmatrix = [[2.0, -1.0], [-1.0, 2.0]]"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    try:\n        A = np.array(A)\n        T = np.array(T)\n        S = np.array(S)\n        if np.linalg.det(T) == 0 or np.linalg.det(S) == 0:\n            return -1\n        result = np.matmul(np.matmul(np.linalg.inv(T), A), S)\n        return np.around(result, decimals=4).tolist()\n    except np.linalg.LinAlgError:\n        return -1"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]] | None:\n    if len(matrix) != 2 or len(matrix[0]) != 2 or len(matrix[1]) != 2:\n        return None\n    det = matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]\n    if det == 0:\n        return None\n    adj = [[matrix[1][1], -matrix[0][1]], [-matrix[1][0], matrix[0][0]]]\n    inv = [[adj[i][j] / det for j in range(2)] for i in range(2)]\n    return inv"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]]:\n    rows_A = len(a)\n    cols_A = len(a[0])\n    rows_B = len(b)\n    cols_B = len(b[0])\n    if cols_A != rows_B:\n        return -1\n    result = [[0 for row in range(cols_B)] for col in range(rows_A)]\n    for i in range(rows_A):\n        for j in range(cols_B):\n            for k in range(cols_A):\n                result[i][j] += a[i][k] * b[k][j]\n    return result"}
{"task_id": 10, "completion_id": 0, "solution": "import numpy as np\ndef calculate_covariance_matrix(vectors: list[list[float]]) -> list[list[float]]:\n    means = [sum(feature) / len(feature) for feature in vectors]\n    centered_vectors = [[val - means[i] for val in vectors[i]] for i in range(len(vectors))]\n    covariance_matrix = [[sum([centered_vectors[k][i] * centered_vectors[k][j] for k in range(len(vectors[0]))]) / (len(vectors[0]) - 1) for j in range(len(vectors))] for i in range(len(vectors))]\n    return covariance_matrix\nvectors = np.random.rand(1000, 100)"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    assert A.shape[0] == A.shape[1] and all(np.diag(A)), 'Input matrix A is not a square or has zeros on the diagonal'\n    x = np.zeros_like(b)\n    D = np.diag(np.diag(A))\n    LU = A - D\n    for _ in range(n):\n        x = np.dot(np.linalg.inv(D), b - np.dot(LU, x))\n        x = np.round(x, 4)\n    return x.tolist()\nA = np.array([[10.0, -1.0, 2.0, 0.0], [-1.0, 11.0, -1.0, 3.0], [2.0, -1.0, 10.0, -1.0], [0.0, 3.0, -1.0, 8.0]])\nb = np.array([6.0, 25.0, -11.0, 15.0])\nx = solve_jacobi(A, b, 20)"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A):\n\n    def jacobi_rotation(A):\n        if A[0][1] == 0:\n            return A\n        else:\n            tetha = np.arctan(2 * A[0][1] / (A[0][0] - A[1][1])) / 2\n            c = np.cos(tetha)\n            s = np.sin(tetha)\n            R = np.array([[c, -s], [s, c]])\n            return np.dot(np.dot(R.T, A), R)\n\n    def svd_eigen_values(B):\n        eig1 = B[0][0] ** 2 + B[0][1] ** 2 + B[1][0] ** 2 + B[1][1] ** 2\n        eig2 = B[0][0] * B[1][1] - B[0][1] * B[1][0]\n        lambda1 = np.sqrt(eig1 / 2 + np.sqrt((eig1 / 2) ** 2 - eig2))\n        lambda2 = np.sqrt(eig1 / 2 - np.sqrt((eig1 / 2) ** 2 - eig2))\n        return (lambda1, lambda2)\n    A1 = A.copy()\n    while True:\n        A2 = jacobi_rotation(A1)\n        if np.abs(A2 - A1).sum().sum() < 1e-05:\n            break\n        else:\n            A1 = A2\n    return tuple(sorted(svd_eigen_values(A2), reverse=True))\nA = np.array([[1, 2], [3, 4]])"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_4x4(matrix: list[list[int | float]]) -> float:\n    if len(matrix) != 4 or len(matrix[0]) != 4:\n        raise ValueError('Matrix must be 4x4 for determinant calculation')\n\n    def determinant_3x3(mat):\n        return mat[0][0] * (mat[1][1] * mat[2][2] - mat[2][1] * mat[1][2]) - mat[0][1] * (mat[1][0] * mat[2][2] - mat[2][0] * mat[1][2]) + mat[0][2] * (mat[1][0] * mat[2][1] - mat[2][0] * mat[1][1])\n    det = 0\n    for c in range(4):\n        sub_matrix = [[matrix[i][j] for j in range(4) if j != c] for i in range(1, 4)]\n        det += (-1) ** c * matrix[0][c] * determinant_3x3(sub_matrix)\n    return det"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    X = np.array(X)\n    y = np.array(y)\n    X = np.concatenate((np.ones((X.shape[0], 1)), X), axis=1)\n    theta = np.linalg.inv(X.T @ X) @ X.T @ y\n    return theta"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> np.ndarray:\n    (m, n) = X.shape\n    theta = np.zeros(n)\n    for _ in range(iterations):\n        h = np.dot(X, theta)\n        loss = h - y\n        gradient = np.dot(X.T, loss) / m\n        theta = theta - alpha * gradient\n    return np.round(theta.tolist(), 4)"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    std_data = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    std_data = np.round(std_data, 4).tolist()\n    min_val = np.min(data, axis=0)\n    max_val = np.max(data, axis=0)\n    mm_data = (data - min_val) / (max_val - min_val)\n    mm_data = np.round(mm_data, 4).tolist()\n    return (std_data, mm_data)\ndata = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\ndef k_means_clustering(points, k, initial_centroids, max_iterations):\n    centroids = np.array(initial_centroids)\n    points = np.array(points)\n    for _ in range(max_iterations):\n        distances = np.sqrt(((points - centroids[:, np.newaxis]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=0)\n        new_centroids = np.array([points[labels == i].mean(axis=0) for i in range(k)])\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    centroids = [tuple(np.round(centroid, 4)) for centroid in centroids.tolist()]\n    return centroids\npoints = [(1.1, 1.2), (1.3, 1.4), (1.7, 1.8), (2.1, 2.2), (2.3, 2.4), (2.7, 2.8)]\nk = 2\ninitial_centroids = [(1.2, 1.2), (2.3, 2.3)]\nmax_iterations = 10"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    if shuffle:\n        if random_seed:\n            np.random.seed(random_seed)\n        indices = np.random.permutation(len(X))\n    else:\n        indices = np.arange(len(X))\n    fold_size = len(X) // k\n    train_test_indices = []\n    for fold in range(k):\n        test_start = fold * fold_size\n        if fold < k - 1:\n            test_end = test_start + fold_size\n        else:\n            test_end = len(X)\n        test_indices = indices[test_start:test_end]\n        train_indices = np.concatenate([indices[:test_start], indices[test_end:]])\n        train_test_indices.append((train_indices, test_indices))\n    return train_test_indices"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    data = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    cov_mat = np.cov(data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eig(cov_mat)\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx][:k]\n    eigenvectors = eigenvectors[:, idx][:, :k]\n    eigenvalues = [round(eigenvalue, 4) for eigenvalue in eigenvalues]\n    eigenvectors = [[round(eigenvector, 4) for eigenvector in vector] for vector in eigenvectors]\n    return eigenvectors.tolist()\ndata = np.array([[1, 2], [3, 4], [5, 6]])\nk = 2"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef entropy(data):\n    total = len(data)\n    count = Counter(data)\n    entropy = 0.0\n    for c in count.values():\n        p = c / total\n        entropy += -p * math.log2(p)\n    return entropy\ndef info_gain(data, attr, target_attr):\n    total = len(data)\n    attr_values = set(data[attr])\n    info_gain = entropy(data[target_attr])\n    for val in attr_values:\n        subset = data[data[attr] == val]\n        info_gain -= len(subset) / total * entropy(subset[target_attr])\n    return info_gain\ndef major_class(data, target_attr):\n    count = Counter(data[target_attr])\n    return count.most_common(1)[0][0]\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n    data = pd.DataFrame(examples)\n    optimal_attr = max(attributes, key=lambda a: info_gain(data, a, target_attr))\n    tree = {optimal_attr: {}}\n    remaining_attr = [a for a in attributes if a != optimal_attr]\n    for val in set(data[optimal_attr]):\n        sub_data = data[data[optimal_attr] == val]\n        if entropy(sub_data[target_attr]) == 0:\n            tree[optimal_attr][val] = sub_data[target_attr].iloc[0]\n        elif not remaining_attr:\n            tree[optimal_attr][val] = major_class(sub_data, target_attr)\n        else:\n            sub_tree = learn_decision_tree(sub_data.to_dict('records'), remaining_attr, target_attr)\n            tree[optimal_attr][val] = sub_tree\n    return tree\nexamples = [{'color': 'green', 'diameter': 3, 'label': 'apple'}, {'color': 'yellow', 'diameter': 3, 'label': 'apple'}, {'color': 'green', 'diameter': 1, 'label': 'grape'}, {'color': 'red', 'diameter': 1, 'label': 'grape'}, {'color': 'red', 'diameter': 1, 'label': 'grape'}, {'color': 'yellow', 'diameter': 3, 'label': 'lemon'}]\nattributes = ['color', 'diameter']\ntarget_attr = 'label'\ntree = learn_decision_tree(examples, attributes, target_attr)"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    \"\"\"\n    Pegasos Kernel SVM Implementation.\n\n    Parameters\n    ----------\n    data : 2D numpy array, where each row is a sample and each column is a feature.\n    labels : 1D numpy array, where each entry corresponds to the label of the sample.\n    kernel : string, 'linear' or 'RBF', default='linear'.\n        Specifies the kernel type to be used in classification.\n    lambda_val : float, default=0.01.\n        Regularization parameter.\n    iterations : int, default=100.\n        Number of iterations.\n    sigma : float, default=1.0.\n        Spread for 'RBF' kernel.\n\n    Returns\n    -------\n    alpha : 1D numpy array.\n        Alpha coefficients of the model.\n    bias : float.\n        Bias of the model.\n    \"\"\"\n    (num_samples, num_features) = data.shape\n    alpha = np.zeros(num_samples)\n    bias = 0\n    if kernel == 'linear':\n\n        def kernel_func(x_i, x_j):\n            return np.dot(x_i, x_j)\n    elif kernel == 'RBF':\n\n        def kernel_func(x_i, x_j):\n            diff = x_i - x_j\n            return np.exp(-np.dot(diff, diff) / (2 * sigma ** 2))\n    else:\n        raise ValueError('Invalid kernel type. Use \"linear\" or \"RBF\".')\n    for _ in range(iterations):\n        for i in range(num_samples):\n            sum_val = 0\n            for j in range(num_samples):\n                sum_val += alpha[j] * labels[j] * kernel_func(data[i], data[j])\n            sum_val += bias\n            if labels[i] * sum_val < 1:\n                alpha[i] += 1 / (lambda_val * num_samples)\n                bias += labels[i] / (lambda_val * num_samples)\n            else:\n                alpha[i] -= 1 / (lambda_val * num_samples)\n                bias -= labels[i] / (lambda_val * num_samples)\n    alpha = alpha.round(4)\n    bias = np.round(bias, 4)\n    return (alpha.tolist(), bias)"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    return round(1 / (1 + math.exp(-z)), 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    max_score = max(scores)\n    scores = [score - max_score for score in scores]\n    total = sum((math.exp(score) for score in scores))\n    softmax_values = [round(math.exp(score) / total, 4) for score in scores]\n    return softmax_values\nscores = [1.0, 2.0, 3.0]"}
{"task_id": 24, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    predicted_probs = []\n    for i in range(len(features)):\n        z = np.dot(weights, features[i]) + bias\n        prob = 1 / (1 + math.exp(-z))\n        predicted_probs.append(prob)\n    MSE = np.mean(np.square(np.subtract(labels, predicted_probs)))\n    predicted_probs = [round(prob, 4) for prob in predicted_probs]\n    MSE = round(MSE, 4)\n    return (predicted_probs, MSE)"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\ndef derivative_sigmoid(x):\n    return x * (1.0 - x)\ndef train_neuron(features, labels, initial_weights, initial_bias, learning_rate, epochs):\n    weights = np.array(initial_weights)\n    bias = initial_bias\n    mse_values = []\n    for _ in range(epochs):\n        outputs = sigmoid(np.dot(features, weights) + bias)\n        error = labels - outputs\n        gradient_weights = learning_rate * (2 / len(features)) * np.dot(features.T, error * derivative_sigmoid(outputs))\n        gradient_bias = learning_rate * (2 / len(features)) * np.sum(error * derivative_sigmoid(outputs))\n        weights += gradient_weights\n        bias += gradient_bias\n        mse = np.mean(np.square(error))\n        mse_values.append(round(mse, 4))\n    return (weights.tolist(), round(bias, 4), mse_values)"}
{"task_id": 26, "completion_id": 0, "solution": "import numpy as np\nclass Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data + other.data, (self, other), '+')\n\n        def _backward():\n            self.grad += out.grad\n            other.grad += out.grad\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data * other.data, (self, other), '*')\n\n        def _backward():\n            self.grad += other.data * out.grad\n            other.grad += self.data * out.grad\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')\n\n        def _backward():\n            self.grad += (out.data > 0) * out.grad\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1\n        for node in reversed(topo):\n            node._backward()"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    B = np.array(B)\n    C = np.array(C)\n    P = np.linalg.solve(B, C)\n    P = np.round(P, 4)\n    return P.tolist()"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    A_transpose_A = np.dot(A.T, A)\n    (eigenvalues, eigenvectors) = np.linalg.eig(A_transpose_A)\n    singular_values = np.sqrt(eigenvalues)\n    sort_indices = np.argsort(-singular_values)\n    singular_values = singular_values[sort_indices]\n    V = eigenvectors[:, sort_indices]\n    U = []\n    for i in range(V.shape[1]):\n        if singular_values[i] != 0:\n            U.append(1 / singular_values[i] * np.dot(A, V[:, i]))\n        else:\n            U.append(np.zeros_like(V[:, i]))\n    U = np.array(U).T\n    S = np.diag(singular_values)\n    U = np.round(U, 4)\n    S = np.round(S, 4)\n    V = np.round(V, 4)\n    return (U.tolist(), S.tolist(), V.tolist())"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    \"\"\"\n    This function shuffles the numpy arrays, X and y, maintaining the corresponding order between them.\n    \n    Parameters:\n        X (numpy.ndarray): The first array of data\n        y (numpy.ndarray): The second array of data\n        seed (int or None): The seed for the random number generator (for reproducibility). \n                              If None, the numpy's seed will be used.\n\n    Returns:\n        shuffled_X (list): The shuffled version of X\n        shuffled_y (list): The shuffled version of y\n    \"\"\"\n    assert len(X) == len(y), 'The inputs X and y should have the same length'\n    rng = np.random.RandomState(seed)\n    indices = rng.permutation(len(X))\n    shuffled_X = X[indices].tolist()\n    shuffled_y = y[indices].tolist()\n    return (shuffled_X, shuffled_y)"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    \"\"\"\n    Batch iterator for dataset.\n\n    Parameters:\n    X (numpy array): input dataset\n    y (numpy array): output dataset (default is None)\n    batch_size (int): size of each batch (default is 64)\n\n    Yields:\n    Batch of X or (X, y) pairs.\n    \"\"\"\n    num_samples = X.shape[0]\n    num_batches = num_samples // batch_size\n    if num_samples % batch_size != 0:\n        num_batches += 1\n    for i in range(num_batches):\n        start = i * batch_size\n        end = min((i + 1) * batch_size, num_samples)\n        if y is not None:\n            yield (X[start:end].tolist(), y[start:end].tolist())\n        else:\n            yield X[start:end].tolist()"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    \"\"\"\n    Function that divide a dataset based on a feature threshold.\n\n    Parameters:\n    X (numpy.ndarray): Dataset.\n    feature_i (int): Index of the feature to use.\n    threshold (float): Threshold value.\n\n    Returns:\n    Two subsets with samples that meet and do not meet the condition.\n    \"\"\"\n    if feature_i < 0 or feature_i >= X.shape[1]:\n        raise ValueError('feature_i is out of bounds')\n    below_threshold = X[np.where(X[:, feature_i] < threshold), :].reshape(-1, X.shape[1])\n    above_threshold = X[np.where(X[:, feature_i] >= threshold), :].reshape(-1, X.shape[1])\n    return (below_threshold.tolist(), above_threshold.tolist())"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    (n_samples, n_features) = np.shape(X)\n\n    def index_combinations():\n        combs = [combinations_with_replacement(range(n_features), i) for i in range(0, degree + 1)]\n        flat_combs = [combi for sublist in combs for combi in sublist]\n        return flat_combs\n    new_features = np.array([np.prod(X[:, comb], axis=1) for comb in index_combinations()])\n    return new_features.T.tolist()"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    np.random.seed(seed)\n    subsets = []\n    for _ in range(n_subsets):\n        if replacements:\n            indices = np.random.choice(len(X), len(X), replace=True)\n        else:\n            indices = np.random.choice(len(X), len(X), replace=False)\n        X_subset = X[indices]\n        y_subset = y[indices]\n        subsets.append((X_subset.tolist(), y_subset.tolist()))\n    return subsets"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    if not n_col:\n        n_col = np.max(x) + 1\n    result = np.zeros((x.shape[0], n_col))\n    result[np.arange(x.shape[0]), x] = 1\n    return result.tolist()\nx = np.array([0, 1, 2, 1, 0])"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    return np.diag(x).tolist()"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    y_true = np.argmax(y_true, axis=1)\n    y_pred = np.argmax(y_pred, axis=1)\n    accuracy = np.sum(y_true == y_pred) / len(y_true)\n    accuracy = round(accuracy, 4)\n    return accuracy\ny_true = np.array([[0, 1, 0], [0, 0, 1], [1, 0, 0], [1, 0, 0], [0, 0, 1]])\ny_pred = np.array([[0.1, 0.9, 0.8], [0.8, 0.1, 0.1], [0.9, 0.1, 0.0], [0.9, 0.1, 0.0], [0.2, 0.1, 0.7]])"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    if Y is None:\n        result = np.corrcoef(X)\n    else:\n        result = np.corrcoef(X, Y)\n        result = result[:X.shape[1], X.shape[1]:]\n    result = np.around(result, decimals=4)\n    return result.tolist()\nX = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nY = np.array([[10, 11, 12], [13, 14, 15], [16, 17, 18]])"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef adaboost_fit(X, y, n_clf):\n    (n_samples, n_features) = X.shape\n    w = np.full(n_samples, 1 / n_samples)\n    classifiers = []\n    for _ in range(n_clf):\n        (best_feature, best_thresh, min_error, prediction) = (float('inf'), float('inf'), float('inf'), None)\n        for feature_i in range(n_features):\n            feature_values = X[:, feature_i]\n            unique_values = np.unique(feature_values)\n            for threshold in unique_values:\n                pred = np.ones(np.shape(y))\n                pred[feature_values < threshold] = -1\n                error = sum(w[pred != y])\n                if error > 0.5:\n                    error = 1 - error\n                    inverted_pred = -1 * pred\n                    prediction = inverted_pred\n                else:\n                    prediction = pred\n                if error < min_error:\n                    min_error = error\n                    best_feature = feature_i\n                    best_thresh = threshold\n        EPS = 1e-10\n        best_error = min_error if min_error > 0 else EPS\n        alpha = 0.5 * math.log((1.0 - best_error) / (best_error + EPS))\n        w = w * np.exp(-alpha * y * prediction)\n        w = w / np.sum(w)\n        classifiers.append((alpha, best_feature, best_thresh))\n    return classifiers"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores):\n    scores = np.array(scores)\n    log_softmax_values = scores - np.log(np.sum(np.exp(scores)))\n    log_softmax_values = np.round(log_softmax_values, 4)\n    return log_softmax_values.tolist()"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.initialize()\n\n    def initialize(self):\n        limit = 1 / np.sqrt(self.input_shape[0])\n        self.W = np.random.uniform(-limit, limit, (self.input_shape[0], self.n_units))\n        self.w0 = np.zeros((1, self.n_units))\n\n    def parameters(self):\n        return np.prod(self.W.shape) + np.prod(self.w0.shape)\n\n    def forward_pass(self, X, training=True):\n        self.layer_input = X\n        return X.dot(self.W) + self.w0\n\n    def backward_pass(self, accum_grad):\n        W = self.W\n        if self.trainable:\n            grad_w = self.layer_input.T.dot(accum_grad)\n            grad_w0 = np.sum(accum_grad, axis=0, keepdims=True)\n            self.W -= grad_w\n            self.w0 -= grad_w0\n        accum_grad = accum_grad.dot(W.T)\n        return accum_grad\n\n    def output_shape(self):\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    input_matrix = np.pad(input_matrix, padding, mode='constant')\n    (input_height, input_width) = input_matrix.shape\n    kernel_size = kernel.shape[0]\n    output_height = (input_height - kernel_size) // stride + 1\n    output_width = (input_width - kernel_size) // stride + 1\n    output_matrix = np.zeros((output_height, output_width))\n    for i in range(0, input_height - kernel_size + 1, stride):\n        for j in range(0, input_width - kernel_size + 1, stride):\n            window = input_matrix[i:i + kernel_size, j:j + kernel_size]\n            output_matrix[i // stride, j // stride] = np.sum(window * kernel)\n    output_matrix = np.round(output_matrix, 4)\n    return output_matrix.tolist()\ninput_matrix = np.array([[1, 1, 1, 0, 0], [0, 1, 1, 1, 0], [0, 0, 1, 1, 1], [0, 0, 1, 1, 0], [0, 1, 1, 0, 0]])\nkernel = np.array([[1, 0, 1], [0, 1, 0], [1, 0, 1]])\npadding = 1\nstride = 1"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    return max(0, z)"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    \"\"\"\n    Compute the Ridge Regression loss.\n\n    Parameters:\n    X (np.ndarray): 2D feature matrix.\n    w (np.ndarray): 1D coefficient array.\n    y_true (np.ndarray): 1D true label vector.\n    alpha (float): Regularization parameter.\n\n    Returns:\n    float: The Ridge loss.\n    \"\"\"\n    y_pred = X @ w\n    mse = np.mean((y_true - y_pred) ** 2)\n    ridge = mse + alpha * np.dot(w, w)\n    return round(ridge, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float | int:\n    return z if z > 0 else alpha * z"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    result = np.dot(x1, x2)\n    return result\nx1 = np.array([1, 2, 3])\nx2 = np.array([4, 5, 6])"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    true_positives = np.sum((y_true == 1) & (y_pred == 1))\n    false_positives = np.sum((y_true == 0) & (y_pred == 1))\n    precision = true_positives / (true_positives + false_positives)\n    return precision"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    \"\"\"\n    A function to perform gradient descent on data.\n    \n    Inputs:\n    X: 2D numpy array, features\n    y: 1D numpy array, labels\n    weights: 1D numpy array, initial weights\n    learning_rate: float, learning rate for gradient descent\n    n_iterations: int, number of iterations to run gradient descent\n    batch_size: int, optional for mini-batch gradient descent, default is 1\n    method: str, 'batch', 'stochastic', or 'mini-batch', default is 'batch'\n\n    Returns:\n    1D numpy array, final weights\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    X = np.concatenate((np.ones((n_samples, 1)), X), axis=1)\n    for _ in range(n_iterations):\n        if method == 'batch':\n            gradient = 2 / n_samples * X.T.dot(X.dot(weights) - y)\n        elif method == 'stochastic':\n            rand_index = np.random.randint(0, n_samples)\n            x_sample = X[rand_index, :].reshape(1, -1)\n            y_sample = y[rand_index]\n            gradient = 2 / n_samples * x_sample.T.dot(x_sample.dot(weights) - y_sample)\n        elif method == 'mini-batch':\n            rand_indices = np.random.randint(0, n_samples, batch_size)\n            x_sample = X[rand_indices, :]\n            y_sample = y[rand_indices]\n            gradient = 2 / batch_size * x_sample.T.dot(x_sample.dot(weights) - y_sample)\n        else:\n            raise ValueError(\"method must be 'batch', 'stochastic' or 'mini-batch'\")\n        weights = weights - learning_rate * gradient\n    return np.round(weights, 4).tolist()"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    A = np.array(matrix, dtype=np.float64)\n    (r, c) = A.shape\n    (i, j) = (0, 0)\n    while i < r and j < c:\n        k = np.argmax(A[i:, j]) + i\n        p = np.where(A[k, j:] != 0)[0]\n        if A[k, j + p[0]] != 0:\n            if k != i:\n                (A[i, :], A[k, :]) = (A[k, :], np.copy(A[i, :]))\n            A[i, :] = A[i, :] / A[i, j]\n            for r in set(range(0, r)) - {i}:\n                A[r, :] = A[r, :] - A[r, j] * A[i, :]\n            i += 1\n        j += 1\n    return A.round(10).tolist()"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=1000):\n    x = np.array(x0)\n    m = np.zeros_like(x)\n    v = np.zeros_like(x)\n    for t in range(1, num_iterations + 1):\n        g = np.array(grad(x))\n        m = beta1 * m + (1 - beta1) * g\n        v = beta2 * v + (1 - beta2) * g ** 2\n        m_hat = m / (1 - beta1 ** t)\n        v_hat = v / (1 - beta2 ** t)\n        x = x - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    return x.round(4).tolist()"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    weights = np.zeros(X.shape[1])\n    bias = 0.0\n    for _ in range(max_iter):\n        y_pred = np.dot(X, weights) + bias\n        dw = (-2 * np.dot(X.T, y - y_pred) + alpha * np.sign(weights)) / X.shape[0]\n        db = -2 * np.sum(y - y_pred) / X.shape[0]\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n        if np.sum(np.abs(dw)) < tol:\n            break\n    return (np.round(weights, 4).tolist(), np.round(bias, 4))"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    source = ' ' + source\n    target = ' ' + target\n    distances = np.zeros((len(source), len(target)))\n    for i in range(len(source)):\n        distances[i, 0] = i\n    for j in range(len(target)):\n        distances[0, j] = j\n    for j in range(1, len(target)):\n        for i in range(1, len(source)):\n            if source[i] == target[j]:\n                substitution_cost = 0\n            else:\n                substitution_cost = 1\n            deletion_cost = distances[i - 1, j] + 1\n            insertion_cost = distances[i, j - 1] + 1\n            substitution_cost = distances[i - 1, j - 1] + substitution_cost\n            if i > 1 and j > 1 and (source[i] == target[j - 1]) and (source[i - 1] == target[j]):\n                transposition_cost = distances[i - 2, j - 2] + 1\n            else:\n                transposition_cost = substitution_cost\n            distances[i, j] = min(deletion_cost, insertion_cost, substitution_cost, transposition_cost)\n    return distances[-1, -1]"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    TP = np.sum(np.logical_and(y_pred == 1, y_true == 1))\n    FN = np.sum(np.logical_and(y_pred == 0, y_true == 1))\n    FP = np.sum(np.logical_and(y_pred == 1, y_true == 0))\n    if TP + FN == 0:\n        recall = 0.0\n    else:\n        recall = TP / (TP + FN)\n    return round(recall, 3)"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    scores = np.dot(Q, K.T)\n    weights = np.round(scores / np.sum(scores, axis=1, keepdims=True), 4)\n    self_attention_output = np.round(np.dot(weights, V), 4)\n    return self_attention_output.tolist()"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    h = np.array(initial_hidden_state)\n    Wx = np.array(Wx)\n    Wh = np.array(Wh)\n    b = np.array(b)\n    for x in input_sequence:\n        x = np.array(x)\n        h = np.tanh(np.dot(Wx, x) + np.dot(Wh, h) + b)\n    return np.round(h, 4).tolist()"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    T = np.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])\n    points_h = np.hstack([np.array(points), np.ones((len(points), 1))])\n    translated_points_h = np.dot(points_h, T.T)\n    translated_points = translated_points_h[:, :2].tolist()\n    return translated_points\npoints = [[1, 2], [3, 4], [5, 6]]\ntx = 1\nty = -1"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    k = len(mu_p)\n    det_sigma_p = np.linalg.det(sigma_p)\n    det_sigma_q = np.linalg.det(sigma_q)\n    inv_sigma_q = np.linalg.inv(sigma_q)\n    trace_term = np.trace(np.dot(inv_sigma_q, sigma_p))\n    diff_mu = mu_q - mu_p\n    quad_term = np.dot(np.dot(diff_mu.T, inv_sigma_q), diff_mu)\n    log_det_ratio = np.log(det_sigma_q / det_sigma_p)\n    kl_divergence = 0.5 * (trace_term + quad_term - k - log_det_ratio)\n    return kl_divergence"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n    if x_ini is None:\n        x = np.zeros_like(b, dtype=float)\n    else:\n        x = np.array(x_ini, dtype=float)\n    for _ in range(n):\n        for i in range(len(b)):\n            x[i] = (b[i] - np.dot(A[i, :i], x[:i]) - np.dot(A[i, i + 1:], x[i + 1:])) / A[i, i]\n    return x.round(4).tolist()\nA = [[10, -1, 2], [1, 10, -1], [-1, 2, 10]]\nb = [6, 5, 11]\nx_ini = [0, 0, 0]"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    n = len(A)\n    M = np.concatenate((A, b.reshape(-1, 1)), axis=1).astype(float)\n    for i in range(n):\n        max_row = np.argmax(np.abs(M[i:, i])) + i\n        M[[i, max_row]] = M[[max_row, i]]\n        for j in range(i + 1, n):\n            factor = M[j, i] / M[i, i]\n            M[j] -= factor * M[i]\n    x = np.zeros(n)\n    for i in reversed(range(n)):\n        x[i] = (M[i, -1] - np.dot(M[i, :-1], x)) / M[i, i]\n    return x.round(4).tolist()\nA = np.array([[2, 1, -1], [-3, -1, 2], [-2, 1, 2]])"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\ndef tanh(x):\n    return np.tanh(x)\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        sequence_length = x.shape[0]\n        hidden_state = np.zeros((sequence_length, self.hidden_size))\n        cell_state = np.zeros((sequence_length, self.hidden_size))\n        prev_hidden_state = initial_hidden_state\n        prev_cell_state = initial_cell_state\n        for t in range(sequence_length):\n            concat_input = np.vstack((prev_hidden_state, x[t]))\n            ft = sigmoid(self.Wf @ concat_input + self.bf)\n            it = sigmoid(self.Wi @ concat_input + self.bi)\n            ct_cand = tanh(self.Wc @ concat_input + self.bc)\n            ot = sigmoid(self.Wo @ concat_input + self.bo)\n            cell_state[t] = ft * prev_cell_state + it * ct_cand\n            hidden_state[t] = ot * tanh(cell_state[t])\n            prev_hidden_state = hidden_state[t]\n            prev_cell_state = cell_state[t]\n        return (hidden_state, hidden_state[-1], cell_state[-1])"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef compute_tf_idf(corpus, query):\n    if len(corpus) == 0:\n        return []\n    doc_freq = defaultdict(int)\n    for doc in corpus:\n        for term in set(doc):\n            doc_freq[term] += 1\n    tf_idf_scores = []\n    for doc in corpus:\n        doc_scores = []\n        for term in query:\n            tf = doc.count(term) / len(doc) if len(doc) > 0 else 0\n            idf = math.log(len(corpus) / (doc_freq[term] + 1)) + 1 if doc_freq[term] > 0 else 0\n            score = round(tf * idf, 5)\n            doc_scores.append(score)\n        tf_idf_scores.append(doc_scores)\n    return np.array(tf_idf_scores).tolist()"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    TP = np.sum(np.logical_and(y_pred == 1, y_true == 1))\n    FP = np.sum(np.logical_and(y_pred == 1, y_true == 0))\n    FN = np.sum(np.logical_and(y_pred == 0, y_true == 1))\n    precision = TP / (TP + FP) if TP + FP != 0 else 0\n    recall = TP / (TP + FN) if TP + FN != 0 else 0\n    f_score = (1 + beta ** 2) * precision * recall / (beta ** 2 * precision + recall) if beta ** 2 * precision + recall != 0 else 0\n    return round(f_score, 3)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, inputs):\n        h = np.zeros((self.hidden_size, 1))\n        outputs = []\n        for x in inputs:\n            h = np.tanh(np.dot(self.W_xh, x) + np.dot(self.W_hh, h) + self.b_h)\n            y = np.dot(self.W_hy, h) + self.b_y\n            outputs.append(y)\n        return (outputs, h)\n\n    def backward(self, inputs, outputs, hiddens, expected_outputs, learning_rate=0.1):\n        dW_xh = np.zeros_like(self.W_xh)\n        dW_hh = np.zeros_like(self.W_hh)\n        dW_hy = np.zeros_like(self.W_hy)\n        db_h = np.zeros_like(self.b_h)\n        db_y = np.zeros_like(self.b_y)\n        dh_next = np.zeros_like(hiddens[0])\n        for t in reversed(range(len(inputs))):\n            dy = outputs[t] - expected_outputs[t]\n            dh = np.dot(self.W_hy.T, dy) + dh_next\n            dW_hy += np.dot(dy, hiddens[t].T)\n            db_y += dy\n            dh_raw = (1 - hiddens[t] ** 2) * dh\n            db_h += dh_raw\n            dW_xh += np.dot(dh_raw, inputs[t].T)\n            dW_hh += np.dot(dh_raw, hiddens[t - 1].T)\n            dh_next = np.dot(self.W_hh.T, dh_raw)\n        for dparam in [dW_xh, dW_hh, dW_hy, db_h, db_y]:\n            np.clip(dparam, -5, 5, out=dparam)\n        self.W_xh -= learning_rate * dW_xh\n        self.W_hh -= learning_rate * dW_hh\n        self.W_hy -= learning_rate * dW_hy\n        self.b_h -= learning_rate * db_h\n        self.b_y -= learning_rate * db_y"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    if x0 is None:\n        x = np.zeros(len(b))\n    else:\n        x = x0\n    r = b - np.dot(A, x)\n    p = r\n    r_squared = np.dot(r.T, r)\n    for i in range(n):\n        Ap = np.dot(A, p)\n        alpha = r_squared / np.dot(p.T, Ap)\n        x = x + alpha * p\n        r = r - alpha * Ap\n        r_squared_new = np.dot(r.T, r)\n        if np.sqrt(r_squared_new) < tol:\n            break\n        p = r + r_squared_new / r_squared * p\n        r_squared = r_squared_new\n    return x.round(8).tolist()\nA = np.array([[4, 1], [1, 3]])\nb = np.array([1, 2])"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    (_, counts) = np.unique(y, return_counts=True)\n    p = counts / len(y)\n    gini = 1 - np.sum(p ** 2)\n    return round(gini, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    values = []\n    column_indices = []\n    row_pointer = [0]\n    for i in range(len(dense_matrix)):\n        for j in range(len(dense_matrix[i])):\n            if dense_matrix[i][j] != 0:\n                values.append(dense_matrix[i][j])\n                column_indices.append(j)\n        row_pointer.append(len(values))\n    return (values, column_indices, row_pointer)\ndense_matrix = [[0, 0, 3, 0, 4], [0, 0, 5, 7, 0], [0, 0, 0, 0, 0], [0, 2, 6, 0, 0]]"}
{"task_id": 66, "completion_id": 0, "solution": "def orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    dot_product = sum((x * y for (x, y) in zip(v, L)))\n    magnitude_L = sum((x ** 2 for x in L)) ** 0.5\n    proj_v = [dot_product / magnitude_L ** 2 * x for x in L]\n    return [round(x, 3) for x in proj_v]"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    values = []\n    row_indices = []\n    column_pointer = [0]\n    for col in range(len(dense_matrix[0])):\n        for row in range(len(dense_matrix)):\n            if dense_matrix[row][col] != 0:\n                values.append(dense_matrix[row][col])\n                row_indices.append(row)\n        column_pointer.append(len(values))\n    return (values, row_indices, column_pointer)\ndense_matrix = [[1, 0, 3, 0, 0], [0, 7, 0, 9, 0], [0, 0, 0, 0, 0], [0, 0, 1, 0, 2]]"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    A = np.round(A.tolist(), 8)\n    (n, m) = A.shape\n    for i in range(min(n, m)):\n        pivot_found = False\n        for j in range(i, n):\n            if pivot_found:\n                A[j] -= A[i - 1] * A[j, i - 1] / A[i - 1, i - 1]\n            elif A[j, i] != 0:\n                if i > 0:\n                    A[[i - 1, j]] = A[[j, i - 1]]\n                A[i] /= A[i, i]\n                pivot_found = True\n    if not pivot_found:\n        raise ValueError('Matrix is not invertible')\n    basis = [A[i, :m] for i in range(min(n, m))]\n    return basis"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    residuals = y_true - y_pred\n    tss = np.sum((y_true - np.mean(y_true)) ** 2)\n    rss = np.sum(residuals ** 2)\n    r_squared = 1 - rss / tss\n    return round(r_squared, 3)\ny_true = np.array([3, -0.5, 2, 7])\ny_pred = np.array([2.5, 0.0, 2, 8])"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    if not img:\n        return -1\n    total_sum = 0\n    total_pixels = 0\n    row_length = len(img[0])\n    for row in img:\n        if len(row) != row_length:\n            return -1\n        for pixel in row:\n            if pixel < 0 or pixel > 255:\n                return -1\n            total_sum += pixel\n            total_pixels += 1\n    return round(total_sum / total_pixels, 2)\nimg = []"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    if not isinstance(y_true, (np.ndarray, list)) or not isinstance(y_pred, (np.ndarray, list)) or len(y_true) != len(y_pred):\n        return 'Error: Mismatched or invalid input types'\n    if isinstance(y_true, list):\n        y_true = np.array(y_true)\n    if isinstance(y_pred, list):\n        y_pred = np.array(y_pred)\n    if len(y_true) == 0 or len(y_pred) == 0:\n        return 'Error: At least one of the input arrays is empty'\n    return round(np.sqrt(np.mean((y_true - y_pred) ** 2)), 3)"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    (y_true, y_pred) = (np.array(y_true), np.array(y_pred))\n    intersection = np.sum(y_true * y_pred)\n    union = np.sum(y_true) + np.sum(y_pred) - intersection\n    if union == 0:\n        return 1.0\n    jaccard_similarity = intersection / union\n    return round(jaccard_similarity, 3)\ny_true = [1, 0, 1, 1, 0, 1]\ny_pred = [0, 0, 1, 1, 0, 1]"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    (y_true, y_pred) = map(np.asarray, (y_true, y_pred))\n    intersection = np.logical_and(y_true, y_pred)\n    num_true_positives = np.count_nonzero(intersection)\n    num_false_positives = np.count_nonzero(y_pred > y_true)\n    num_false_negatives = np.count_nonzero(y_true > y_pred)\n    dice_score = 2 * num_true_positives / (2 * num_true_positives + num_false_positives + num_false_negatives)\n    if num_true_positives + num_false_positives + num_false_negatives == 0:\n        return 0.0\n    return round(dice_score, 3)"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\nfrom hypervector import Hypervector\ndef create_hv(feature, seed, dim):\n    np.random.seed(seed)\n    hv = Hypervector(dimensions=dim)\n    hv[feature] = 1\n    return hv\ndef create_row_hv(row, dim, random_seeds):\n    composite_hv = Hypervector(dimensions=dim)\n    for (feature, value) in row.items():\n        if feature not in random_seeds:\n            continue\n        hv_feature = create_hv(feature, random_seeds[feature], dim)\n        hv_value = create_hv(str(value), random_seeds[feature], dim)\n        composite_hv = composite_hv ^ hv_feature ^ hv_value\n    return composite_hv.tolist()"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    freq = Counter([(p, a) for (a, p) in data])\n    confusion_matrix = [[0, 0], [0, 0]]\n    for ((y_pred, y_true), count) in freq.items():\n        confusion_matrix[y_pred][y_true] = count\n    return confusion_matrix\ndata = [[1, 0], [1, 1], [0, 0], [0, 0], [1, 1]]"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    assert len(v1) != 0 and len(v2) != 0, 'Input vectors cannot be empty'\n    assert np.linalg.norm(v1) != 0 and np.linalg.norm(v2) != 0, 'Input vectors cannot have zero magnitude'\n    assert v1.shape == v2.shape, 'Both input vectors must have the same shape'\n    v1_norm = v1 / np.linalg.norm(v1)\n    v2_norm = v2 / np.linalg.norm(v2)\n    dot_product = np.dot(v1_norm, v2_norm)\n    return round(dot_product, 3)"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\nfrom sklearn.metrics import confusion_matrix\nimport numpy as np\ndef performance_metrics(actual: list[int], predicted: list[int]) -> tuple:\n    if len(actual) != len(predicted):\n        raise ValueError('Both lists must have the same length')\n    if not all((i in (0, 1) for i in actual)):\n        raise ValueError('All elements in the actual list must be either 0 or 1')\n    if not all((i in (0, 1) for i in predicted)):\n        raise ValueError('All elements in the predicted list must be either 0 or 1')\n    (tn, fp, fn, tp) = confusion_matrix(actual, predicted).ravel()\n    confusion_matrix_res = np.array([[tp, fp], [fn, tn]])\n    accuracy = round((tp + tn) / (tp + tn + fp + fn), 3)\n    f1_score = round(2 * tp / (2 * tp + fp + fn), 3)\n    specificity = round(tn / (tn + fp), 3)\n    negative_predictive_value = round(tn / (tn + fn), 3)\n    return (confusion_matrix_res, accuracy, f1_score, specificity, negative_predictive_value)\nactual = [1, 1, 0, 1, 0, 1, 1, 0, 1, 0]\npredicted = [1, 0, 0, 1, 0, 1, 0, 0, 1, 1]"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\nfrom scipy import stats\ndef descriptive_statistics(data):\n    mean = np.mean(data)\n    median = np.median(data)\n    mode = stats.mode(data)[0][0]\n    variance = np.var(data)\n    standard_deviation = np.std(data)\n    percentile_25 = np.percentile(data, 25)\n    percentile_50 = np.percentile(data, 50)\n    percentile_75 = np.percentile(data, 75)\n    iqr = percentile_75 - percentile_25\n    result = {'mean': round(mean, 4), 'median': round(median, 4), 'mode': round(mode, 4), 'variance': round(variance, 4), 'standard_deviation': round(standard_deviation, 4), '25th_percentile': round(percentile_25, 4), '50th_percentile': round(percentile_50, 4), '75th_percentile': round(percentile_75, 4), 'interquartile_range': round(iqr, 4)}\n    return result"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials\n    \"\"\"\n    binom_coeff = math.comb(n, k)\n    prob = binom_coeff * p ** k * (1 - p) ** (n - k)\n    return round(prob, 5)"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    \"\"\"\n    coefficient = 1.0 / (std_dev * math.sqrt(2 * math.pi))\n    exponential = math.exp(-(x - mean) ** 2 / (2 * std_dev ** 2))\n    return round(coefficient * exponential, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    \"\"\"\n    prob = lam ** k * math.exp(-lam) / math.factorial(k)\n    prob = round(prob, 5)\n    return prob"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    \"\"\"\n    if not isinstance(img, np.ndarray) or img.ndim != 2 or (not np.issubdtype(img.dtype, np.integer)) or (img.min() < 0) or (img.max() > 255):\n        raise ValueError('Input img must be a 2D numpy array with pixel values between 0 and 255.')\n    max_value = img.max()\n    min_value = img.min()\n    contrast = (max_value - min_value) / (max_value + min_value)\n    return contrast"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    \"\"\"\n    return np.dot(vec1, vec2)\nvec1 = np.array([1, 2, 3])\nvec2 = np.array([4, 5, 6])"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef phi_transform(data: list[float], degree: int) -> list[list[float]]:\n    if degree < 0:\n        return []\n    else:\n        transformed_data = []\n        for d in data:\n            row = [round(d ** i, 8) for i in range(1, degree + 1)]\n            transformed_data.append(row)\n        return transformed_data\ndata = [1, 2, 3]\ndegree = 3"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    if position == 0 or d_model <= 0:\n        return -1\n    pos_encoding_arr = np.zeros((position, d_model), dtype=np.float16)\n    for pos in range(position):\n        for i in range(d_model):\n            if i % 2 == 0:\n                pos_encoding_arr[pos, i] = np.sin(pos / 10000 ** (i / d_model))\n            else:\n                pos_encoding_arr[pos, i] = np.cos(pos / 10000 ** ((i - 1) / d_model))\n    return pos_encoding_arr.tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    elif training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    else:\n        return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    m_corrected = m / (1 - beta1 ** t)\n    v = beta2 * v + (1 - beta2) * grad ** 2\n    v_corrected = v / (1 - beta2 ** t)\n    parameter = parameter - learning_rate * m_corrected / (np.sqrt(v_corrected) + epsilon)\n    return (parameter.round(5).tolist(), m.round(5).tolist(), v.round(5).tolist())"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    token_ids = encoder.encode(prompt)\n    for i in range(n_tokens_to_generate):\n        id = token_ids[-1] if token_ids else 0\n        x = params['wte'][id] + params['wpe'][i]\n        x = np.mean(x)\n        x = x * params['ln_f']['g'] + params['ln_f']['b']\n        prob = np.exp(x) / np.sum(np.exp(x))\n        id = np.argmax(np.random.multinomial(1, prob, 1))\n        token_ids.append(id)\n    return encoder.decode(token_ids)"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        e_x = np.exp(values - np.max(values))\n        return e_x / e_x.sum(axis=0)\n    crystal_values = np.array(crystal_values).reshape(n, dimension)\n    weights = np.dot(crystal_values, crystal_values.T)\n    attn_scores = softmax(weights)\n    final_pattern = np.dot(crystal_values.T, attn_scores)\n    return [round(val, 4) for val in final_pattern]"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    avg_dl = np.mean([len(doc) for doc in corpus])\n    N = len(corpus)\n    idf = {}\n    for term in query:\n        n_q = sum([1 for doc in corpus if term in doc])\n        idf[term] = np.log((N - n_q + 0.5) / (n_q + 0.5))\n    scores = []\n    for doc in corpus:\n        score = 0.0\n        for term in query:\n            freq = doc.count(term)\n            numerator = freq * (k1 + 1)\n            denominator = freq + k1 * (1 - b + b * len(doc) / avg_dl)\n            score += idf.get(term, 0) * (numerator / denominator)\n        scores.append(round(score, 3))\n    return scores"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    if len(y_true) != len(y_pred):\n        raise ValueError('Both lists must have the same length.')\n    (tp, fp, fn) = (0, 0, 0)\n    for i in range(len(y_true)):\n        if y_true[i] == y_pred[i] == 1:\n            tp += 1\n        elif y_true[i] == 0 and y_pred[i] == 1:\n            fp += 1\n        elif y_true[i] == 1 and y_pred[i] == 0:\n            fn += 1\n    precision = tp / (tp + fp) if tp + fp != 0 else 0\n    recall = tp / (tp + fn) if tp + fn != 0 else 0\n    f1_score = 2 * precision * recall / (precision + recall) if precision + recall != 0 else 0\n    return round(f1_score, 3)"}
{"task_id": 92, "completion_id": 0, "solution": "import numpy as np\nimport math\nPI = 3.14159\ndef power_grid_forecast(consumption_data):\n    detrend_data = consumption_data - 10 * np.sin(2 * PI * np.arange(1, 11) / 10)\n    (slope, intercept) = np.polyfit(range(1, 11), detrend_data, 1)\n    day15_consumption = slope * 15 + intercept\n    day15_consumption_fluctuation = 10 * math.sin(2 * PI * 15 / 10)\n    final_consumption = day15_consumption + day15_consumption_fluctuation\n    final_consumption *= 1.05\n    final_consumption = round(final_consumption)\n    return final_consumption"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Input arrays must have the same shape')\n    errors = np.abs(y_true - y_pred)\n    return round(np.mean(errors), 3)"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray) -> tuple:\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    return (Q, K, V)\ndef self_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray) -> np.ndarray:\n    dk = Q.shape[-1]\n    scores = np.dot(Q, K.T) / np.sqrt(dk)\n    attention = np.dot(scores, V)\n    return attention\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    (Q, K, V) = compute_qkv(X, W_q, W_k, W_v)\n    Q_heads = np.split(Q, n_heads, axis=-1)\n    K_heads = np.split(K, n_heads, axis=-1)\n    V_heads = np.split(V, n_heads, axis=-1)\n    output = []\n    for (Q_head, K_head, V_head) in zip(Q_heads, K_heads, V_heads):\n        output.append(self_attention(Q_head, K_head, V_head))\n    output = np.concatenate(output, axis=-1)\n    return np.round(output, 4).tolist()\nX = np.random.randn(5, 10)\nW_q = np.random.randn(10, 10)\nW_k = np.random.randn(10, 10)\nW_v = np.random.randn(10, 10)\nn_heads = 3"}
{"task_id": 95, "completion_id": 0, "solution": "import numpy as np\ndef phi_corr(x: list[int], y: list[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n    Args:\n    x (list[int]): A list of binary values (0 or 1).\n    y (list[int]): A list of binary values (0 or 1).\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    table = np.array([[np.sum((x == 0) & (y == 0)), np.sum((x == 0) & (y == 1))], [np.sum((x == 1) & (y == 0)), np.sum((x == 1) & (y == 1))]])\n    phi = (table[0, 0] * table[1, 1] - table[0, 1] * table[1, 0]) / np.sqrt(np.sum(table[0, :] * table[1, :])) / np.sqrt(np.sum(table[:, 0] * table[:, 1]))\n    return round(phi, 4)"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    if x < -2.5:\n        return 0.0\n    elif x > 2.5:\n        return 1.0\n    else:\n        return 0.2 * x + 0.5"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value\n    \"\"\"\n    if x >= 0:\n        return x\n    else:\n        return alpha * (math.exp(x) - 1)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    return x if x > 0 else alpha * x\nx = -2"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x)\n    \"\"\"\n    if x < -36.04365338911793:\n        return math.exp(x)\n    elif x > 19.31659638920267:\n        return x\n    else:\n        return round(math.log(1 + math.exp(x)), 4)"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input\n    \"\"\"\n    result = x / (1 + abs(x))\n    return round(result, 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01):\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities.\n        pi_theta_ref: List representing the reference policy probabilities.\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    L = np.sum(np.minimum(rhos * A, np.clip(rhos, 1 - epsilon, 1 + epsilon) * A))\n    L_clip = np.sum(np.minimum(rhos * A, np.clip(rhos, 1 - epsilon, 1 + epsilon) * A))\n    D_KL = np.sum(pi_theta_old * (np.log(pi_theta_old) - np.log(pi_theta_ref)))\n    J_GRPO = L_clip - beta * D_KL\n    return round(J_GRPO, 6)"}
{"task_id": 102, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value\n    \"\"\"\n    swish_value = x / (1 + math.exp(-x))\n    return round(swish_value, 4)"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x >= 0:\n        return scale * x\n    else:\n        return scale * alpha * (math.exp(x) - 1)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"\n    Compute the sigmoid of z\n\n    Args:\n        z: A scalar or numpy array\n\n    Returns:\n        The sigmoid of z\n    \"\"\"\n    return 1 / (1 + np.exp(-z))\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N x D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    z = np.dot(X, weights) + bias\n    probabilities = sigmoid(z)\n    predictions = (probabilities >= 0.5).astype(int)\n    return predictions.tolist()"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef softmax(Z):\n    \"\"\"Compute softmax values for each sets of scores in Z.\"\"\"\n    e_Z = np.exp(Z - np.max(Z, axis=1, keepdims=True))\n    return e_Z / e_Z.sum(axis=1, keepdims=True)\ndef cross_entropy(Y_pred, Y_true):\n    \"\"\"Compute cross entropy given true and predicted probabilities.\"\"\"\n    return -np.sum(Y_true * np.log(Y_pred)) / Y_pred.shape[0]\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list, ...]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n    Returns:\n        B : list[float], CxK updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    (num_examples, num_features) = X.shape\n    num_labels = np.max(y) + 1\n    W = np.random.randn(num_features, num_labels)\n    b = np.random.randn(num_labels)\n    losses = []\n    for i in range(iterations):\n        Z = np.dot(X, W) + b\n        Y_pred = softmax(Z)\n        Y_true = np.eye(num_labels)[y]\n        dW = 1 / num_examples * np.dot(X.T, Y_pred - Y_true)\n        db = 1 / num_examples * np.sum(Y_pred - Y_true, axis=0)\n        W -= learning_rate * dW\n        b -= learning_rate * db\n        loss = cross_entropy(Y_pred, Y_true)\n        losses.append(loss)\n    return (W.round(4).tolist(), b.round(4).tolist(), [round(loss, 4) for loss in losses])"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\ndef binary_cross_entropy_loss(y_pred, y_true):\n    loss = -(y_true * np.log(y_pred + 1e-15) + (1 - y_true) * np.log(1 - y_pred + 1e-15)).mean()\n    return loss\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], ...]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \"\"\"\n    X = np.hstack((np.ones((X.shape[0], 1)), X))\n    W = np.zeros(X.shape[1])\n    loss_values = []\n    for i in range(iterations):\n        y_pred = sigmoid(np.dot(X, W))\n        loss = binary_cross_entropy_loss(y_pred, y)\n        loss_values.append(round(loss, 4))\n        gradient = np.dot(X.T, y_pred - y) / y.size\n        W -= learning_rate * gradient\n    return (loss_values, W.tolist())"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    d_k = Q.shape[-1]\n    scores = np.dot(Q, K.T) / np.sqrt(d_k)\n    if mask is not None:\n        scores = scores + mask * -1000000000.0\n    attention = np.softmax(scores, axis=-1)\n    output = np.dot(attention, V)\n    return output.tolist()\nmax_seq_len = 10\nmask = np.random.randint(0, 2, (max_seq_len, max_seq_len))\noutput = masked_attention(Q, K, V, mask)"}
{"task_id": 108, "completion_id": 0, "solution": "from collections import Counter\nfrom math import comb\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    \"\"\"\n    count = Counter(apples)\n    total_apples = len(apples)\n    disorder = 0\n    for color in count:\n        color_count = count[color]\n        disorder += comb(color_count, 2)\n    total_comb = comb(total_apples, 2)\n    disorder_measure = disorder / total_comb\n    return round(disorder_measure, 4)"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    mean = np.mean(X, axis=-1, keepdims=True)\n    variance = np.var(X, axis=-1, keepdims=True)\n    X_hat = (X - mean) / np.sqrt(variance + epsilon)\n    Y = gamma * X_hat + beta\n    return Y.round(5).tolist()"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef normalize(word):\n    return word.lower()\ndef get_stats(ref_list, can_list):\n    ref_counter = Counter(ref_list)\n    can_counter = Counter(can_list)\n    match_counter = ref_counter & can_counter\n    match_count = sum(match_counter.values())\n    ref_count = sum(ref_counter.values())\n    can_count = sum(can_counter.values())\n    return (match_count, ref_count, can_count)\ndef precision(match_count, can_count):\n    if can_count == 0:\n        return 0.0\n    else:\n        return match_count / can_count\ndef recall(match_count, ref_count):\n    if ref_count == 0:\n        return 0.0\n    else:\n        return match_count / ref_count\ndef F_mean(precision, recall, alpha):\n    if precision == 0 and recall == 0:\n        return 0.0\n    else:\n        return (1 + alpha ** 2) * (precision * recall) / (alpha ** 2 * precision + recall)\ndef penalty(chunks, length):\n    if length <= 1:\n        return 0.0\n    elif length <= 5:\n        return 5\n    else:\n        return 1 / length\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    ref_list = [normalize(word) for word in reference.split()]\n    can_list = [normalize(word) for word in candidate.split()]\n    (match_count, ref_count, can_count) = get_stats(ref_list, can_list)\n    P = precision(match_count, can_count)\n    R = recall(match_count, ref_count)\n    F = F_mean(P, R, alpha)\n    Pen = penalty(min(len(ref_list), len(can_list)), beta)\n    meteor = P * R / ((1 - gamma) * P + gamma * R) * (1 - Pen)\n    return round(meteor, 3)"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    p_xy = joint_counts / total_samples\n    p_x = total_counts_x / total_samples\n    p_y = total_counts_y / total_samples\n    pmi = np.log2(p_xy / (p_x * p_y))\n    pmi = np.nan_to_num(pmi)\n    return round(pmi, 3)"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    min_x = float(min(x))\n    max_x = float(max(x))\n    normalized_x = [round((i - min_x) / (max_x - min_x), 4) for i in x]\n    return normalized_x"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray):\n    x1 = np.maximum(0, np.dot(x, w1))\n    x2 = np.dot(x1, w2)\n    x2 += x\n    output = np.maximum(0, x2)\n    output = np.around(output, 4).tolist()\n    return output"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray) -> np.ndarray:\n    return np.mean(x, axis=(0, 1))\nx = np.random.rand(10, 10, 3)"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05):\n    mean = np.mean(X, axis=(0, 2, 3), keepdims=True)\n    var = np.var(X, axis=(0, 2, 3), keepdims=True)\n    X_hat = (X - mean) / np.sqrt(var + epsilon)\n    Y = gamma * X_hat + beta\n    Y = np.round(Y, 4).tolist()\n    return Y\nX = np.random.randn(4, 3, 64, 64)\ngamma = np.ones(3)\nbeta = np.zeros(3)\nY = batch_normalization(X, gamma, beta)"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    derivative = c * n * x ** (n - 1)\n    return round(derivative, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10):\n    basis = []\n    for vector in vectors:\n        sum_proj = np.zeros(len(vector))\n        for b in basis:\n            sum_proj += np.dot(vector, b) * np.array(b)\n        vector_ort = [v - sum_proj[i] for (i, v) in enumerate(vector)]\n        norm = np.linalg.norm(vector_ort)\n        if norm > tol:\n            basis.append((vector_ort / norm).round(4).tolist())\n    return basis"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    a = np.array(a)\n    b = np.array(b)\n    result = np.cross(a, b)\n    result = np.around(result, decimals=4)\n    return result.tolist()"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    if np.linalg.det(A) == 0:\n        return -1\n    n = A.shape[0]\n    cofactors = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            sub_matrix = np.delete(np.delete(A, i, 0), j, 1)\n            cofactors[i, j] = (-1) ** (i + j) * np.linalg.det(sub_matrix)\n    adj = cofactors.T\n    x = np.matmul(np.linalg.inv(A), b)\n    solution = np.zeros(n)\n    for i in range(n):\n        solution[i] = np.matmul(adj[i], b) / np.linalg.det(A)\n    return np.around(solution, 4).tolist()"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    if len(p) != len(q) or not (p and q):\n        return 0.0\n    bc_value = np.sum(np.sqrt(p * q))\n    distance = -np.log(bc_value)\n    return round(distance, 4)"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float]:\n    if len(a) != len(b):\n        return -1\n    return [x + y for (x, y) in zip(a, b)]"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.special import softmax\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    (num_states, num_actions) = theta.shape\n    policy_gradient_estimator = np.zeros_like(theta)\n    for episode in episodes:\n        (states, actions, rewards) = zip(*episode)\n        states = np.array(states)\n        actions = np.array(actions)\n        rewards = np.array(rewards)\n        G = np.sum(rewards)\n        policy = softmax(theta[states, :], axis=1)\n        gradient = np.zeros_like(theta)\n        gradient[states, actions] = 1\n        gradient -= np.einsum('ij,i->ij', policy, np.sum(policy, axis=1))\n        policy_gradient_estimator += np.einsum('ij,i->ij', gradient, rewards)\n    policy_gradient_estimator /= len(episodes)\n    return policy_gradient_estimator.round(4).tolist()"}
{"task_id": 123, "completion_id": 0, "solution": "import math\ndef compute_efficiency(n_experts, k_active, d_in, d_out):\n    dense_flops = d_in * d_out * n_experts\n    moe_flops = d_in * d_out * k_active\n    savings = (dense_flops - moe_flops) / dense_flops * 100\n    dense_flops = round(dense_flops, 1)\n    moe_flops = round(moe_flops, 1)\n    savings = round(savings, 1)\n    return (dense_flops, moe_flops, savings)"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int) -> list:\n    \"\"\"\n    Implements the Noisy Top-K gating mechanism used in Mixture-of-Experts (MoE) models.\n\n    :param X: Input matrix\n    :param W_g: Weight matrices\n    :param W_noise: Pre-sampled noise\n    :param N: Gating latent matrix\n    :param k: Sparsity constraint\n    :return: Final gating probabilities matrix\n    \"\"\"\n    S = np.matmul(np.matmul(X, W_g), np.transpose(W_noise)) + N\n    S_sorted = np.sort(S, axis=1)[:, ::-1]\n    cumsum_S = np.cumsum(S_sorted, axis=1)\n    threshold_S = S_sorted[:, k - 1].reshape((-1, 1)) * k\n    B = (cumsum_S < threshold_S).astype(int)\n    P = B / np.sum(B, axis=1).reshape((-1, 1))\n    P = np.round(P, 4)\n    return P.tolist()"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    experts_input = np.array_split(x, n_experts, axis=1)\n    gating_logits = np.matmul(x, Wg.T)\n    gating_probabilities = np.exp(gating_logits) / np.sum(np.exp(gating_logits), axis=1, keepdims=True)\n    top_k_indices = np.argpartition(gating_probabilities, -top_k, axis=1)[:, -top_k:]\n    top_k_probabilities = np.array([prob[indices] for (prob, indices) in zip(gating_probabilities, top_k_indices)])\n    top_k_experts = np.array([experts[indices] for (experts, indices) in zip(experts_input, top_k_indices)])\n    expert_outputs = np.array([np.matmul(x, We[i].T) for (i, x) in enumerate(top_k_experts)])\n    moe_output = np.sum(np.expand_dims(top_k_probabilities, axis=2) * expert_outputs, axis=1)\n    return np.round(moe_output, 4).tolist()\nn = 2\nd = 3\nx = np.random.rand(n, d)"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    (B, C, H, W) = X.shape\n    X_reshaped = X.reshape(B, num_groups, C // num_groups, H, W)\n    mean = np.mean(X_reshaped, axis=(2, 3, 4), keepdims=True)\n    var = np.var(X_reshaped, axis=(2, 3, 4), keepdims=True)\n    X_normalized = (X_reshaped - mean) / np.sqrt(var + epsilon)\n    output = gamma * X_normalized + beta\n    return output.round(4).tolist()"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n\n    def f(x):\n        return x ** 4 - 3 * x ** 3 + 2\n\n    def df(x):\n        return 4 * x ** 3 - 9 * x ** 2\n    x = start_x\n    for _ in range(max_iters):\n        grad = df(x)\n        if np.abs(grad) < tolerance:\n            break\n        x = x - learning_rate * grad\n    return round(x, 4)"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    result = alpha * np.tanh(gamma * x + beta)\n    result = np.round(result, 4)\n    return result.tolist()"}
