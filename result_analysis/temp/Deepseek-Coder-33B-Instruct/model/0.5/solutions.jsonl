{"task_id": 0, "completion_id": 0, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Implement Ridge (L2-regularised) Linear Regression using its closed-form solution.\n    \n    Given an ndarray where the last column is the target y and all preceding columns are the features X, \n    add a bias (intercept) term, then compute the weight vector.\n    \n    The weight vector is computed as:\n    w = (X^T * X + alpha * I)^-1 * X^T * y\n    \n    where alpha >= 0 is the regularisation strength and I is the identity matrix with a size equal to the \n    number of columns in X (after adding the bias).\n    \n    If the matrix (X^T * X + alpha * I) is not invertible (numerical determinant equal to 0), return -1.\n    \n    Return the weight vector rounded to 4 decimal places as a Python list.\n    \"\"\"\n    X = data[:, :-1]\n    y = data[:, -1]\n    X = np.c_[np.ones(X.shape[0]), X]\n    gram = X.T @ X\n    reg = alpha * np.eye(gram.shape[0])\n    if np.linalg.det(gram + reg) == 0:\n        return -1\n    w = np.linalg.inv(gram + reg) @ X.T @ y\n    return np.round(w, 4).tolist()"}
{"task_id": 1, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    K = np.dot(X_train, X_train.T)\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    updates = 0\n    while updates < n_iter:\n        updated = False\n        for i in range(n_samples):\n            activation = np.dot(K[i], y_train * alpha)\n            if y_train[i] * (activation + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n                updates += 1\n                if updates >= n_iter:\n                    break\n        if not updated:\n            break\n    w = np.dot(alpha * y_train, X_train)\n    return ([round(x, 4) for x in w.tolist()], round(b, 4))"}
{"task_id": 2, "completion_id": 0, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1 / (1 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return 1 / (mu * (1 - mu))\n    return {'identity': {'link': identity_link, 'inv_link': identity_inv_link, 'derivative': identity_derivative}, 'log': {'link': log_link, 'inv_link': log_inv_link, 'derivative': log_derivative}, 'logit': {'link': logit_link, 'inv_link': logit_inv_link, 'derivative': logit_derivative}}"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\nclass Node:\n\n    def __init__(self, indices, depth):\n        self.indices = indices\n        self.depth = depth\n        self.left = None\n        self.right = None\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    np.random.seed(0)\n    root = Node(np.arange(len(data)), 0)\n    leaves = [root]\n    while len(leaves) < len(data):\n        node = leaves.pop(0)\n        if len(node.indices) >= 3:\n            f = np.random.choice(len(data[0]))\n            down = np.min(data[node.indices, f])\n            up = np.max(data[node.indices, f])\n            v = np.random.uniform(down, up)\n            left_indices = node.indices[data[node.indices, f] <= v]\n            right_indices = node.indices[data[node.indices, f] > v]\n            node.left = Node(left_indices, node.depth + 1)\n            node.right = Node(right_indices, node.depth + 1)\n            leaves.append(node.left)\n            leaves.append(node.right)\n    depths = [0] * len(data)\n    for leaf in leaves:\n        for i in leaf.indices:\n            depths[i] = leaf.depth\n    return depths"}
{"task_id": 7, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    item_counts = Counter()\n    itemsets = dict()\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] += 1\n    min_count = math.ceil(minsup * len(transactions))\n    frequent_items = set((item for (item, count) in item_counts.items() if count >= min_count))\n    transactions = [[item for item in transaction if item in frequent_items] for transaction in transactions]\n    for transaction in transactions:\n        for length in range(1, len(frequent_items) + 1):\n            for itemset in combinations(transaction, length):\n                itemsets[itemset] = itemsets.get(itemset, 0) + 1\n    min_count = math.ceil(minsup * len(transactions))\n    frequent_itemsets = {itemset: count for (itemset, count) in itemsets.items() if count >= min_count}\n    return frequent_itemsets"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\"\"\"\n    centroids = data[:k].tolist()\n    for _ in range(max_iter):\n        labels = [np.argmin([np.linalg.norm(x - c) for c in centroids]) for x in data]\n        new_centroids = [np.mean(data[np.where(labels == i)], axis=0).tolist() for i in range(k)]\n        new_centroids = [[round(x, 4) for x in c] for c in new_centroids]\n        if all((np.linalg.norm(np.array(c) - np.array(nc)) < epsilon for (c, nc) in zip(centroids, new_centroids))):\n            break\n        centroids = new_centroids\n    return (centroids, labels)"}
{"task_id": 13, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    (n_users, n_items) = data.shape\n    S = np.zeros((n_items, n_items))\n    for i in range(n_items):\n        for j in range(i + 1, n_items):\n            users_i = np.where(data[:, i] > 0)[0]\n            users_j = np.where(data[:, j] > 0)[0]\n            common_users = np.intersect1d(users_i, users_j)\n            if len(common_users) == 0:\n                continue\n            v1 = data[common_users, i]\n            v2 = data[common_users, j]\n            if criterion == 'cosine':\n                (std1, std2) = (np.std(v1), np.std(v2))\n                if std1 > 0.001:\n                    v1 -= np.mean(v1)\n                if std2 > 0.001:\n                    v2 -= np.mean(v2)\n            if criterion == 'cosine':\n                S[i, j] = S[j, i] = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n            elif criterion == 'pearson':\n                S[i, j] = S[j, i] = np.corrcoef(v1, v2)[0, 1]\n    r = data[user_ind]\n    rated_items = np.where(r > 0)[0]\n    scores = defaultdict(int)\n    for t in range(n_items):\n        if t in rated_items:\n            continue\n        for i in rated_items:\n            if np.abs(S[t, i]) > 0:\n                scores[t] += r[i] * S[t, i] / np.sum(np.abs(S[t]))\n    top_items = sorted(scores.keys(), key=lambda x: (-scores[x], x))[:k]\n    return top_items"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_gain = -np.inf\n    best_feature = None\n    best_threshold = None\n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        for threshold in unique_values:\n            left_indices = X[:, feature_index] <= threshold\n            right_indices = ~left_indices\n            if np.sum(left_indices) < 2 or np.sum(right_indices) < 2:\n                continue\n            left_g = np.sum(g[left_indices])\n            left_h = np.sum(h[left_indices])\n            left_loss = -0.5 * left_g ** 2 / (left_h + lam) + gamma\n            right_g = np.sum(g[right_indices])\n            right_h = np.sum(h[right_indices])\n            right_loss = -0.5 * right_g ** 2 / (right_h + lam) + gamma\n            parent_g = np.sum(g)\n            parent_h = np.sum(h)\n            parent_loss = -0.5 * parent_g ** 2 / (parent_h + lam) + gamma\n            gain = parent_loss - left_loss - right_loss\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature_index\n                best_threshold = threshold\n    if best_gain > 0:\n        return (best_feature, best_threshold)\n    else:\n        return None"}
{"task_id": 20, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    if isinstance(x, list):\n        x = np.array(x)\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    sigmoid_x = np.round(sigmoid_x, 4)\n    gradient_x = np.round(gradient_x, 4)\n    if isinstance(x, np.ndarray):\n        sigmoid_x = sigmoid_x.tolist()\n        gradient_x = gradient_x.tolist()\n    return (sigmoid_x, gradient_x)"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    x_train_sorted = sorted(x_train)\n    weights = np.ones(len(x_train)) / len(x_train)\n    stumps = []\n    stump_errors = []\n    for i in range(len(x_train) - 1):\n        stump = (0, (x_train_sorted[i] + x_train_sorted[i + 1]) / 2)\n        stumps.append(stump)\n        error = 0\n        for j in range(len(x_train)):\n            if stump[0] == 0:\n                prediction = 1 if x_train[j] <= stump[1] else -1\n            else:\n                prediction = 1 if x_train[j] > stump[1] else -1\n            if prediction != y_train[j]:\n                error += weights[j]\n        stump_errors.append(error)\n    ensemble = []\n    while max(stump_errors) > epsilon:\n        best_stump = stumps[stump_errors.index(min(stump_errors))]\n        ensemble.append(best_stump)\n        err = min(stump_errors)\n        alpha = 0.5 * math.log((1 - err) / err)\n        for i in range(len(x_train)):\n            if best_stump[0] == 0:\n                prediction = 1 if x_train[i] <= best_stump[1] else -1\n            else:\n                prediction = 1 if x_train[i] > best_stump[1] else -1\n            if prediction == y_train[i]:\n                weights[i] *= math.exp(-alpha)\n            else:\n                weights[i] *= math.exp(alpha)\n        weights /= np.sum(weights)\n        for i in range(len(stump_errors)):\n            if stumps[i][0] == best_stump[0] and stumps[i][1] == best_stump[1]:\n                stump_errors[i] = float('inf')\n            else:\n                if stumps[i][0] == 0:\n                    prediction = 1 if x_train[i] <= stumps[i][1] else -1\n                else:\n                    prediction = 1 if x_train[i] > stumps[i][1] else -1\n                if prediction != y_train[i]:\n                    stump_errors[i] += weights[i]\n    predictions = []\n    for x in x_test:\n        prediction = 0\n        for stump in ensemble:\n            if stump[0] == 0:\n                prediction += 1 if x <= stump[1] else -1\n            else:\n                prediction += 1 if x > stump[1] else -1\n        predictions.append(1 if prediction > 0 else -1)\n    return predictions"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    distances = np.sum(X_train ** 2, axis=1).reshape(-1, 1) + np.sum(X_test ** 2, axis=1) - 2 * np.dot(X_train, X_test.T)\n    K = np.exp(-gamma * distances)\n    g = np.dot(y_train * alpha, K) + b\n    y_pred = [1 if g_i >= 0 else -1 for g_i in g]\n    return y_pred"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X = np.array(X)\n    if k < 1 or k > min(X.shape):\n        return -1\n    (U, S, Vt) = np.linalg.svd(X, full_matrices=False)\n    S_k = np.diag(S[:k])\n    X_hat = U[:, :k] @ S_k @ Vt[:k, :]\n    mse = ((X - X_hat) ** 2).mean()\n    X_hat = X_hat.round(4).tolist()\n    mse = round(mse, 4)\n    return (X_hat, mse)"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    (x_train, y_train) = (np.array(x_train), np.array(y_train))\n    split_points = [(x_train[i] + x_train[i + 1]) / 2 for i in range(len(x_train) - 1)]\n    residuals = y_train.copy()\n    stumps = []\n    while np.sum(residuals ** 2) > epsilon:\n        best_stump = None\n        min_rss = float('inf')\n        for s in split_points:\n            left_mask = x_train <= s\n            right_mask = ~left_mask\n            c1 = np.mean(residuals[left_mask])\n            c2 = np.mean(residuals[right_mask])\n            pred = c1 * left_mask + c2 * right_mask\n            rss = np.sum((y_train - pred) ** 2)\n            if rss < min_rss:\n                min_rss = rss\n                best_stump = (s, c1, c2)\n        stumps.append(best_stump)\n        residuals = y_train - (best_stump[1] * (x_train <= best_stump[0]) + best_stump[2] * (x_train > best_stump[0]))\n    query_pred = sum((c1 if x_query <= s else c2 for (s, c1, c2) in stumps))\n    return round(query_pred, 4)"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Generate a NumPy tensor filled with 0.0s and 1.0s.\n\n    Parameters:\n    shape (tuple[int, ...]): The desired shape of the tensor.\n    sparsity (float): The probability of generating a 1.0.\n    seed (int | None): The seed to use for random number generation.\n\n    Returns:\n    numpy.ndarray: A NumPy array of the specified shape filled with 0.0s and 1.0s.\n        If sparsity is outside the legal range, returns -1.\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    tensor = np.random.rand(*shape)\n    tensor = np.where(tensor < sparsity, 0.0, 1.0)\n    return tensor.astype(np.float64)"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    median_index = np.argpartition(data[:, d], len(data) // 2)[len(data) // 2]\n    column_d_values = data[:, d]\n    pivot_value = column_d_values[median_index]\n    left_indices = np.where(column_d_values < pivot_value)[0].tolist()\n    right_indices = np.where(column_d_values > pivot_value)[0].tolist()\n    return (median_index, left_indices, right_indices)"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input array must be one-dimensional'\n    assert stride >= 1, 'Stride must be a positive integer'\n    assert len(x) >= frame_width, 'Frame width must be less than or equal to the length of the input array'\n    n_frames = (len(x) - frame_width) // stride + 1\n    new_shape = (n_frames, frame_width)\n    new_strides = (x.strides[0] * stride, x.strides[0])\n    result = as_strided(x, shape=new_shape, strides=new_strides)\n    result.flags.writeable = writeable\n    return result"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    if isinstance(X, list):\n        X = np.array(X)\n    if X.ndim != 2:\n        return False\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    row_sums = np.sum(X, axis=1)\n    if not np.allclose(row_sums, np.ones_like(row_sums), rtol=0, atol=1e-08):\n        return False\n    return True"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    for _ in range(max_iter):\n        for i in range(0, n, batch_size):\n            X_batch = X[i:i + batch_size]\n            y_batch = y[i:i + batch_size]\n            grad = 1 / len(y_batch) * X_batch.T @ (X_batch @ w - y_batch)\n            s = rho * s + (1 - rho) * grad ** 2\n            w = w - eta * grad / np.sqrt(s + eps_station)\n        if np.linalg.norm(grad) < epsilon:\n            break\n    return [round(coef, 4) for coef in w]"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Implement the SoftPlus activation function and its derivative.\"\"\"\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    if deriv:\n        sigmoid = 1 / (1 + np.exp(-x))\n        return np.round(sigmoid, 4).tolist()\n    else:\n        softplus = np.log1p(np.exp(x))\n        return np.round(softplus, 4).tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    ngrams = [tuple(corpus[i:i + N]) for i in range(len(corpus) - N + 1)]\n    n_minus_grams = [tuple(corpus[i:i + N - 1]) for i in range(len(corpus) - N + 2)]\n    ngram_counts = Counter(ngrams)\n    n_minus_gram_counts = Counter(n_minus_grams)\n    sequence_ngrams = [tuple(sequence[i:i + N]) for i in range(len(sequence) - N + 1)]\n    log_prob = 0.0\n    for ngram in sequence_ngrams:\n        ngram_count = ngram_counts[ngram]\n        n_minus_gram_count = n_minus_gram_counts[ngram[:-1]]\n        if ngram_count == 0 or n_minus_gram_count == 0:\n            return float('-inf')\n        prob = ngram_count / n_minus_gram_count\n        log_prob += np.log2(prob)\n    return round(log_prob, 4)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    X = np.array(X)\n    y = np.array(y)\n    X_design = np.zeros((X.shape[0], degree + 1))\n    for i in range(degree + 1):\n        X_design[:, i] = X ** i\n    weights = np.zeros(degree + 1)\n    for _ in range(n_iterations):\n        old_weights = weights.copy()\n        weights[0] = np.mean(y - np.dot(X_design[:, 1:], weights[1:]))\n        for j in range(1, degree + 1):\n            rho = np.dot(X_design[:, j], y - np.dot(X_design, weights) + weights[j] * X_design[:, j])\n            weights[j] = np.sign(rho) * np.maximum(np.abs(rho) - reg_factor, 0) / np.dot(X_design[:, j], X_design[:, j])\n        if np.max(np.abs(weights - old_weights)) < tol:\n            break\n    return [round(w, 4) for w in weights]"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    This function computes the backward probability vector beta_t for a given time index t.\n\n    Args:\n    A: transition-probability matrix of shape (N, N).\n    B: emission-probability matrix of shape (N, M).\n    obs: list of observation indices (length T).\n    t: integer time index (0 \u2264 t < T).\n\n    Returns:\n    A Python list containing the N backward probabilities.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    N = A.shape[0]\n    beta = np.ones(N)\n    for i in range(t, -1, -1):\n        beta = np.dot(A, beta * B[:, obs[i]])\n    return [round(val, 4) for val in beta]"}
{"task_id": 65, "completion_id": 0, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    T = len(obs)\n    N = len(A)\n    beta = np.zeros((T, N))\n    beta[T - 1] = np.ones(N)\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t + 1]] * beta[t + 1, :])\n    prob = np.sum(pi * B[:, obs[0]] * beta[0, :])\n    return round(prob, 6)"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    (n, m) = B.shape\n    if S.shape != (n,) or A.shape != (n, n) or (not all((0 <= i < m for i in observations))):\n        return -1\n    alpha = S * B[:, observations[0]]\n    for i in observations[1:]:\n        alpha = alpha @ A * B[:, i]\n    return round(alpha.sum(), 4)"}
{"task_id": 70, "completion_id": 0, "solution": "from collections import Counter, defaultdict\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n\n    def update_tree(items, tree, root, header_table):\n        if items[0] in tree.children:\n            tree.children[items[0]].increment(1)\n        else:\n            if items[0] in header_table:\n                update_header_table(header_table[items[0]][0], root)\n            else:\n                header_table[items[0]] = (root.update_path(), 1)\n            tree.add_child(items[0])\n            tree = tree.children[items[0]]\n        if len(items) > 1:\n            update_tree(items[1:], tree, root, header_table)\n\n    def update_header_table(node_to_test, target_node):\n        while node_to_test.node_link is not None:\n            node_to_test = node_to_test.node_link\n        node_to_test.node_link = target_node\n\n    def ascend_tree(leaf_node, prefix_path):\n        if leaf_node.parent is not None:\n            prefix_path.append(leaf_node.item)\n            ascend_tree(leaf_node.parent, prefix_path)\n\n    def find_prefix_path(base_pat, tree_node):\n        cond_pats = {}\n        while tree_node is not None:\n            prefix_path = []\n            ascend_tree(tree_node, prefix_path)\n            if len(prefix_path) > 1:\n                cond_pats[frozenset(prefix_path[1:])] = tree_node.count\n            tree_node = tree_node.node_link\n        return cond_pats\n\n    def mine_tree(header_table, min_support, pre_fix, freq_item_list):\n        sorted_items = [v[0] for v in sorted(header_table.items(), key=lambda kv: kv[1][0])]\n        for base_pat in sorted_items:\n            new_freq_set = pre_fix.copy()\n            new_freq_set.add(base_pat)\n            freq_item_list.append(frozenset(new_freq_set))\n            cond_patt_bases = find_prefix_path(base_pat, header_table[base_pat][1])\n            (my_cond_tree, my_head) = create_tree(cond_patt_bases, min_support)\n            if my_head is not None:\n                mine_tree(my_head, min_support, new_freq_set, freq_item_list)\n\n    def create_tree(data_set, min_support):\n        header_table = defaultdict(int)\n        for trans in data_set:\n            for item in trans:\n                header_table[item] += 1\n        header_table = {k: v for (k, v) in header_table.items() if v >= min_support}\n        for k in header_table:\n            header_table[k] = [header_table[k], None]\n        ret_tree = TreeNode('Null Set', 1, None)\n        for (tran_set, count) in data_set.items():\n            local_d = {k: v for (k, v) in sorted(tran_set.items(), key=lambda p: p[1], reverse=True) if k in header_table}\n            if len(local_d) > 0:\n                ordered_items = [k for k in local_d]\n                update_tree(ordered_items, ret_tree, ret_tree, header_table)\n        return (ret_tree, header_table)\n    item_count = Counter()\n    for transaction in transactions:\n        for item in transaction:\n            item_count[item] += 1\n    item_count = {k: v for (k, v) in item_count.items() if v >= min_support}\n    frequent_itemsets = []\n    if len(item_count) > 0:\n        (my_tree, my_header_table) = create_tree(item_count, min_support)\n        mine_tree(my_header_table, min_support, set(), frequent_itemsets)\n    return [sorted(list(itemset)) for itemset in frequent_itemsets]"}
{"task_id": 75, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.spatial import distance\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if not 1 <= k <= len(X_train):\n        return -1\n    predictions = []\n    for test_sample in X_test:\n        distances = distance.cdist([test_sample], X_train, 'euclidean')[0]\n        k_nearest_indices = np.argpartition(distances, k)[:k]\n        k_nearest_classes = [y_train[i] for i in k_nearest_indices]\n        counter = Counter(k_nearest_classes)\n        highest_vote = max(list(counter.values()))\n        classes_with_highest_vote = [k for (k, v) in counter.items() if v == highest_vote]\n        prediction = min(classes_with_highest_vote)\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = 1e-15\n    y_pred = np.clip(y_pred, epsilon, 1.0 - epsilon)\n    loss = -np.sum(y * np.log(y_pred))\n    return round(loss, 4)"}
{"task_id": 77, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(Z):\n    \"\"\"\n    Implements the sigmoid activation in numpy\n    \"\"\"\n    A = 1 / (1 + np.exp(-Z))\n    cache = Z\n    return (A, cache)\ndef relu(Z):\n    \"\"\"\n    Implement the RELU function in numpy\n    \"\"\"\n    A = np.maximum(0, Z)\n    assert A.shape == Z.shape\n    cache = Z\n    return (A, cache)\ndef linear_forward(A, W, b):\n    \"\"\"\n    Implement the linear part of a layer's forward propagation.\n    \"\"\"\n    Z = W.dot(A) + b\n    assert Z.shape == (W.shape[0], A.shape[1])\n    cache = (A, W, b)\n    return (Z, cache)\ndef linear_activation_forward(A_prev, W, b, activation):\n    \"\"\"\n    Implement the forward propagation for the LINEAR->ACTIVATION layer\n    \"\"\"\n    if activation == 'sigmoid':\n        (Z, linear_cache) = linear_forward(A_prev, W, b)\n        (A, activation_cache) = sigmoid(Z)\n    elif activation == 'relu':\n        (Z, linear_cache) = linear_forward(A_prev, W, b)\n        (A, activation_cache) = relu(Z)\n    cache = (linear_cache, activation_cache)\n    return (A, cache)\ndef L_model_forward(X, parameters):\n    \"\"\"\n    Implement forward propagation for the [LINEAR->RELU]*(L-1)->LINEAR->SIGMOID computation\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        A_prev = A\n        (A, cache) = linear_activation_forward(A_prev, parameters['W' + str(l)], parameters['b' + str(l)], activation='relu')\n        caches.append(cache)\n    (AL, cache) = linear_activation_forward(A, parameters['W' + str(L)], parameters['b' + str(L)], activation='sigmoid')\n    caches.append(cache)\n    return (AL.round(4).tolist(), caches)"}
{"task_id": 81, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    A2 = np.clip(A2, epsilon, 1.0 - epsilon)\n    m = Y.shape[0]\n    cost = -1 / m * np.sum(Y * np.log(A2) + (1 - Y) * np.log(1 - A2))\n    return round(cost, 6)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(Q, list):\n        Q = np.array(Q)\n    greedy_index = np.argmax(Q)\n    base = epsilon / len(Q)\n    probabilities = np.full(len(Q), base)\n    probabilities[greedy_index] = 1 - epsilon + base\n    probabilities = np.round(probabilities, 4)\n    return list(probabilities)"}
{"task_id": 86, "completion_id": 0, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    aggregated_predictions = []\n    for sample in range(len(predictions[0])):\n        votes = Counter([tree[sample] for tree in predictions])\n        max_vote_count = max(votes.values())\n        max_votes = [label for (label, count) in votes.items() if count == max_vote_count]\n        aggregated_predictions.append(min(max_votes))\n    return aggregated_predictions"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    if not isinstance(z, np.ndarray):\n        z = np.array(z)\n    result = np.logaddexp(0.0, z)\n    result = np.round(result, 4)\n    return result.tolist()"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    sorted_estimates = [policy.ev_estimates[i] for i in sorted(policy.ev_estimates.keys())]\n    sorted_evs = [bandit.arm_evs[i] for i in sorted(policy.ev_estimates.keys())]\n    mse = round(sum(((estimate - ev) ** 2 for (estimate, ev) in zip(sorted_estimates, sorted_evs))) / len(sorted_estimates), 4)\n    return mse"}
{"task_id": 96, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    vocab = set()\n    for sentence in corpus:\n        words = sentence.split()\n        for word in words:\n            vocab.add(word)\n    vocab.add('<UNK>')\n    ngram_dicts = [defaultdict(int) for _ in range(N)]\n    for sentence in corpus:\n        words = sentence.split() + ['<UNK>'] * (N - 1)\n        for (i, word) in enumerate(words):\n            if word not in vocab:\n                word = '<UNK>'\n            for n in range(1, N + 1):\n                if i + n <= len(words):\n                    ngram = tuple(words[i:i + n])\n                    ngram_dicts[n - 1][ngram] += 1\n    words = sequence.split() + ['<UNK>'] * (N - 1)\n    sentence_prob = 0.0\n    for (i, word) in enumerate(words):\n        if i + N > len(words):\n            break\n        for n in range(1, N + 1):\n            ngram = tuple(words[i:i + n])\n            context = ngram[:-1]\n            context_count = sum((v for (k, v) in ngram_dicts[n - 2].items() if k[:-1] == context))\n            ngram_count = ngram_dicts[n - 1][ngram]\n            prob = (ngram_count + K) / (context_count + K * len(vocab))\n            sentence_prob += math.log(prob)\n    return round(sentence_prob, 4)"}
{"task_id": 108, "completion_id": 0, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    (N, M) = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    for _ in range(max_iter):\n        H_new = np.linalg.solve(np.dot(W.T, W) + alpha * np.eye(K), np.dot(W.T, X))\n        W_new = np.linalg.solve(np.dot(H_new, H_new.T) + alpha * np.eye(K), np.dot(X, H_new.T).T).T\n        if np.linalg.norm(W_new - W) < tol and np.linalg.norm(H_new - H) < tol:\n            break\n        (W, H) = (W_new, H_new)\n    X_hat = np.dot(W, H)\n    return X_hat.round(4).tolist()"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    (m, n) = X.shape\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n    centroids = [X[np.random.randint(0, m), :]]\n    for _ in range(1, K):\n        D2 = np.array([min([np.inner(c - x, c - x) for c in centroids]) for x in X])\n        probs = D2 / D2.sum()\n        cumprobs = probs.cumsum()\n        r = random.random()\n        for (j, p) in enumerate(cumprobs):\n            if r < p:\n                i = j\n                break\n        centroids.append(X[i])\n    for _ in range(max_iter):\n        clusters = [[] for _ in range(K)]\n        for x in X:\n            distances = [np.linalg.norm(x - c) for c in centroids]\n            clusters[np.argmin(distances)].append(x)\n        new_centroids = []\n        for cluster in clusters:\n            if len(cluster) > 0:\n                new_centroids.append(np.mean(cluster, axis=0))\n            else:\n                new_centroids.append(centroids[clusters.index(cluster)])\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    centroids = [list(map(lambda x: round(x, 4), c)) for c in centroids]\n    centroids.sort()\n    return centroids"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"TODO: implement\"\"\"\n    encoded_text = [vocabulary.get(char, 0) for char in text]\n    if len(encoded_text) < time_steps:\n        encoded_text += [0] * (time_steps - len(encoded_text))\n    else:\n        encoded_text = encoded_text[:time_steps]\n    return encoded_text\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"TODO: implement\"\"\"\n    return ''.join([inverse_vocab[i] for i in indices if i != 0])\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"TODO: implement\"\"\"\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    prediction = model.predict(np.array([encoded_text]))\n    decoded_prediction = int_to_string(np.argmax(prediction, axis=-1)[0], inv_output_vocabulary)\n    return decoded_prediction"}
{"task_id": 113, "completion_id": 0, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str], optional\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        from . import EXAMPLES\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        prediction = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        prediction_str = ''.join(prediction)\n        print(f'input: {example}\\noutput: {prediction_str}')\n        predictions.append(prediction_str)\n    return predictions"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    z = np.dot(X, w)\n    p = 1 / (1 + np.exp(-z))\n    eps = 1e-20\n    p = np.clip(p, eps, 1 - eps)\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    gradient = np.dot(X.T, p - y) / X.shape[0]\n    return (round(loss, 4), np.round(gradient, 4).tolist())\nX = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ny = np.array([0, 1, 1])\nw = np.array([0.1, 0.2, 0.3])"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    n_clf = max(n_clf, 1)\n    m = X_train.shape[0]\n    weights = np.ones(m) / m\n    stumps = []\n    stump_weights = []\n    for _ in range(n_clf):\n        best_stump = {}\n        best_stump_error = float('inf')\n        for feature_i in range(X_train.shape[1]):\n            feature_values = np.expand_dims(X_train[:, feature_i], axis=1)\n            unique_values = np.unique(feature_values)\n            for threshold in unique_values:\n                polarity = 1\n                predictions = np.ones(np.shape(y_train))\n                predictions[X_train[:, feature_i] < threshold] = -1\n                error = sum(weights[predictions != y_train])\n                if error > 0.5:\n                    error = 1 - error\n                    polarity = -1\n                if error < best_stump_error:\n                    best_stump['feature'] = feature_i\n                    best_stump['threshold'] = threshold\n                    best_stump['polarity'] = polarity\n                    best_stump['error'] = error\n                    best_stump_error = error\n        best_stump_weight = 0.5 * np.log((1.0 - best_stump_error) / best_stump_error)\n        predictions = np.ones(np.shape(y_train))\n        negative_idx = best_stump['polarity'] * X_train[:, best_stump['feature']] < best_stump['polarity'] * best_stump['threshold']\n        predictions[negative_idx] = -1\n        weights *= np.exp(-best_stump_weight * y_train * predictions)\n        weights /= np.sum(weights)\n        stumps.append(best_stump)\n        stump_weights.append(best_stump_weight)\n    predictions = np.zeros((X_test.shape[0],))\n    for (i, stump) in enumerate(stumps):\n        predictions += stump_weights[i] * np.ones(X_test.shape[0]) * stump['polarity'] * ((X_test[:, stump['feature']] < stump['threshold']) * 2 - 1)\n    predictions = [1 if p > 0 else -1 for p in predictions]\n    return predictions"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.linalg import eigh\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    class_labels = np.unique(y)\n    if n_components <= 0:\n        return []\n    within_class_scatter = np.zeros((X.shape[1], X.shape[1]))\n    for c in class_labels:\n        X_c = X[y == c]\n        within_class_scatter += np.cov(X_c, rowvar=False) * (X_c.shape[0] - 1)\n    overall_mean = np.mean(X, axis=0)\n    between_class_scatter = np.zeros((X.shape[1], X.shape[1]))\n    for c in class_labels:\n        X_c = X[y == c]\n        n_c = X_c.shape[0]\n        mean_c = np.mean(X_c, axis=0)\n        between_class_scatter += n_c * np.outer(mean_c - overall_mean, mean_c - overall_mean)\n    A = np.dot(np.linalg.pinv(within_class_scatter), between_class_scatter)\n    (eigen_values, eigen_vectors) = eigh(A)\n    sorted_indices = np.argsort(eigen_values)[::-1]\n    eigen_vectors = eigen_vectors[:, sorted_indices]\n    for i in range(eigen_vectors.shape[1]):\n        if eigen_vectors[0, i] < 0:\n            eigen_vectors[:, i] *= -1\n    projection = np.dot(X, eigen_vectors[:, :n_components])\n    projection = np.round(projection, 4)\n    return projection.tolist()"}
{"task_id": 140, "completion_id": 0, "solution": "from collections import deque\nimport math\ndef escape_fire_maze(grid: list[str]) -> int:\n    n = len(grid)\n    fire_queue = deque()\n    agent_queue = deque()\n    fire_grid = [[0 for _ in range(n)] for _ in range(n)]\n    agent_grid = [[0 for _ in range(n)] for _ in range(n)]\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j))\n                fire_grid[i][j] = 1\n            elif grid[i][j] == '.' and (i == 0 or i == n - 1 or j == 0 or (j == n - 1)):\n                agent_queue.append((i, j))\n                agent_grid[i][j] = 1\n    while fire_queue:\n        (x, y) = fire_queue.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] != '#') and (fire_grid[nx][ny] == 0):\n                fire_grid[nx][ny] = fire_grid[x][y] + 1\n                fire_queue.append((nx, ny))\n    while agent_queue:\n        (x, y) = agent_queue.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] != '#') and (agent_grid[nx][ny] == 0) and (fire_grid[nx][ny] == 0 or fire_grid[nx][ny] > agent_grid[x][y] + 1):\n                agent_grid[nx][ny] = agent_grid[x][y] + 1\n                agent_queue.append((nx, ny))\n    if agent_grid[n - 1][n - 1] == 0:\n        return -1\n    else:\n        return agent_grid[n - 1][n - 1]\ngrid = ['...F', '.#..', '....', '....']"}
{"task_id": 141, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\nfrom typing import Tuple\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    metric_map = {'euclidean': 'euclidean', 'manhattan': 'cityblock', 'cosine': 'cosine'}\n    if metric not in metric_map:\n        metric = 'euclidean'\n    dists = cdist(X_test, X_train, metric=metric_map[metric])\n    k_nearest = np.argsort(dists)[:, :k]\n    y_pred = np.empty(X_test.shape[0])\n    for i in range(X_test.shape[0]):\n        labels = y_train[k_nearest[i]]\n        (values, counts) = np.unique(labels, return_counts=True)\n        max_count_indices = np.where(counts == np.max(counts))[0]\n        if len(max_count_indices) > 1:\n            y_pred[i] = np.min(values[max_count_indices])\n        else:\n            y_pred[i] = values[max_count_indices[0]]\n    return y_pred"}
{"task_id": 146, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    if metric == 'euclidean':\n        distances = np.sqrt(np.sum((X[None, :, :] - X_test[:, None, :]) ** 2, axis=-1))\n    elif metric == 'manhattan':\n        distances = np.sum(np.abs(X[None, :, :] - X_test[:, None, :]), axis=-1)\n    elif metric == 'cosine':\n        eps = 1e-12\n        X_norm = np.linalg.norm(X, axis=-1)\n        X_test_norm = np.linalg.norm(X_test, axis=-1)\n        dot_product = X @ X_test.T\n        distances = 1 - dot_product / (X_norm[:, None] * X_test_norm[None, :] + eps)\n    else:\n        raise ValueError(f'Unknown metric: {metric}')\n    k = min(k, len(X))\n    nearest_neighbours = np.argpartition(distances, k)[:, :k]\n    predicted_labels = []\n    for i in range(len(X_test)):\n        labels = y[nearest_neighbours[i]]\n        (unique_labels, counts) = np.unique(labels, return_counts=True)\n        max_count_label = unique_labels[np.argmax(counts)]\n        predicted_labels.append(max_count_label)\n    return predicted_labels"}
{"task_id": 155, "completion_id": 0, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    z1 = np.dot(state, weights['W1']) + weights['b1']\n    a1 = np.maximum(z1, 0)\n    z2 = np.dot(a1, weights['W2']) + weights['b2']\n    a2 = np.maximum(z2, 0)\n    z3 = np.dot(a2, weights['W3']) + weights['b3']\n    action = np.tanh(z3)\n    action = [round(x, 4) for x in action]\n    return action"}
{"task_id": 160, "completion_id": 0, "solution": "import numpy as np\ndef soft_threshold(a, tau):\n    return np.sign(a) * max(abs(a) - tau, 0)\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.c_[np.ones(m), X]\n        n += 1\n    w = np.zeros(n)\n    b = 0.0\n    for _ in range(max_iters):\n        for j in range(n):\n            if fit_intercept and j == 0:\n                continue\n            tmp_w = w[j]\n            w[j] = 0\n            r = y - np.dot(X, w)\n            w[j] = soft_threshold(np.dot(X[:, j], r), lambda_param * m) / np.dot(X[:, j], X[:, j])\n            if fit_intercept and j == 0:\n                b = np.mean(y - np.dot(X[:, 1:], w[1:]))\n    return ([round(i, 4) for i in w], round(b, 4))"}
{"task_id": 165, "completion_id": 0, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    if isinstance(x, list) and isinstance(y, list):\n        (x, y) = (np.array(x), np.array(y))\n    elif not isinstance(x, np.ndarray) or not isinstance(y, np.ndarray):\n        raise TypeError('Inputs must be either Python lists or NumPy ndarrays.')\n    if len(x) != len(y):\n        return -1\n    distance = np.sum(x != y) / len(x)\n    distance = round(distance, 4)\n    return distance"}
{"task_id": 169, "completion_id": 0, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float]=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer')\n    if window == 'hamming':\n        return [round(0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == 'hann':\n        return [round(0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == 'blackman_harris':\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        return [round(a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('Coefficients must be supplied for generalized cosine window')\n        return [round(sum([coefficients[k] * np.cos(2 * np.pi * k * n / (N - 1)) for k in range(len(coefficients))]), 4) for n in range(N)]\n    else:\n        raise ValueError('Unknown window type')"}
{"task_id": 171, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    X_train = np.hstack((np.ones((X_train.shape[0], 1)), X_train))\n    X_test = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n    unique_labels = np.unique(y_train)\n    y_train = np.where(y_train == unique_labels[0], 0, 1)\n    if len(np.unique(y_train)) == 1:\n        return [unique_labels[0]] * X_test.shape[0]\n    weights = np.zeros(X_train.shape[1])\n    for _ in range(epochs):\n        permutation = np.random.permutation(X_train.shape[0])\n        X_train_shuffled = X_train[permutation]\n        y_train_shuffled = y_train[permutation]\n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train_shuffled[i:i + batch_size]\n            y_batch = y_train_shuffled[i:i + batch_size]\n            z = np.dot(X_batch, weights)\n            predictions = 1 / (1 + np.exp(-z))\n            gradient = np.dot(X_batch.T, predictions - y_batch) / y_batch.size\n            weights -= learning_rate * gradient\n    z = np.dot(X_test, weights)\n    probabilities = 1 / (1 + np.exp(-z))\n    predictions = np.where(probabilities > 0.5, unique_labels[1], unique_labels[0])\n    return predictions.tolist()"}
{"task_id": 176, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=10):\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    weights = np.ones(len(y_train)) / len(y_train)\n    stumps = []\n    for _ in range(n_estimators):\n        (best_stump, error, y_pred) = (None, float('inf'), None)\n        for feature_index in range(X_train.shape[1]):\n            thresholds = np.unique(X_train[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = np.ones(len(y_train))\n                    predictions[polarity * X_train[:, feature_index] < polarity * threshold] = -1\n                    error_t = np.sum(weights[y_train != predictions])\n                    if error_t < error:\n                        best_stump = (feature_index, threshold, polarity)\n                        error = error_t\n                        y_pred = predictions.copy()\n        alpha = 0.5 * np.log((1 - error) / (error + 1e-10))\n        weights *= np.exp(-alpha * y_train * y_pred)\n        weights /= np.sum(weights)\n        stumps.append((best_stump, alpha))\n        if error == 0:\n            break\n    y_pred = np.zeros(len(X_test))\n    for ((feature_index, threshold, polarity), alpha) in stumps:\n        y_pred += alpha * polarity * (X_test[:, feature_index] < threshold)\n    y_pred = [1 if y > 0 else 0 for y in y_pred]\n    return y_pred"}
{"task_id": 178, "completion_id": 0, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    swarm = rng.uniform(-1, 1, (num_particles, n_dims))\n    velocities = rng.uniform(-1, 1, (num_particles, n_dims))\n    p_best = swarm.copy()\n    g_best = swarm[np.argmin(np.sum(swarm ** 2, axis=1))]\n    (w, c1, c2) = (0.5, 1.5, 1.5)\n    for _ in range(num_iterations):\n        velocities = w * velocities + c1 * rng.uniform(size=(num_particles, n_dims)) * (p_best - swarm) + c2 * rng.uniform(size=(num_particles, n_dims)) * (g_best - swarm)\n        swarm += velocities.clip(-1, 1)\n        swarm_fitness = np.sum(swarm ** 2, axis=1)\n        p_best_fitness = np.sum(p_best ** 2, axis=1)\n        improved = swarm_fitness < p_best_fitness\n        p_best[improved] = swarm[improved]\n        g_best = p_best[np.argmin(p_best_fitness)]\n    return np.round(np.sum(g_best ** 2), 4)"}
{"task_id": 180, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    if k == 0 or k > len(X_train):\n        k = len(X_train)\n    predictions = []\n    for test_vector in X_test:\n        distances = []\n        for train_vector in X_train:\n            distance = np.linalg.norm(np.array(test_vector) - np.array(train_vector))\n            distances.append(distance)\n        nearest_indices = np.argsort(distances)[:k]\n        nearest_labels = [y_train[i] for i in nearest_indices]\n        if task == 'classification':\n            prediction = Counter(nearest_labels).most_common(1)[0][0]\n        elif task == 'regression':\n            prediction = round(sum(nearest_labels) / len(nearest_labels), 4)\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 184, "completion_id": 0, "solution": "import numpy as np\ndef gini_impurity(y):\n    (_, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / counts.sum()\n    impurity = 1 - np.sum(np.square(probabilities))\n    return impurity\ndef split_data(X, y, feature, threshold):\n    left_idx = X[:, feature] < threshold\n    right_idx = X[:, feature] >= threshold\n    return ((X[left_idx], y[left_idx]), (X[right_idx], y[right_idx]))\ndef find_best_split(X, y):\n    best_gain = -np.inf\n    best_feature = None\n    best_threshold = None\n    parent_impurity = gini_impurity(y)\n    for feature in range(X.shape[1]):\n        thresholds = np.unique(X[:, feature])\n        for threshold in thresholds:\n            ((_, y_left), (_, y_right)) = split_data(X, y, feature, threshold)\n            if len(y_left) == 0 or len(y_right) == 0:\n                continue\n            children_impurity = (len(y_left) * gini_impurity(y_left) + len(y_right) * gini_impurity(y_right)) / len(y)\n            gain = parent_impurity - children_impurity\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature\n                best_threshold = threshold\n    return (best_feature, best_threshold)\nclass DecisionTree:\n\n    def __init__(self, max_depth=None):\n        self.max_depth = max_depth\n\n    def fit(self, X, y, depth=0):\n        if gini_impurity(y) == 0 or (self.max_depth is not None and depth >= self.max_depth):\n            self.label = np.argmax(np.bincount(y))\n            return\n        (best_feature, best_threshold) = find_best_split(X, y)\n        if best_feature is None:\n            self.label = np.argmax(np.bincount(y))\n            return\n        self.feature = best_feature\n        self.threshold = best_threshold\n        ((X_left, y_left), (X_right, y_right)) = split_data(X, y, best_feature, best_threshold)\n        self.left = DecisionTree(self.max_depth)\n        self.left.fit(X_left, y_left, depth + 1)\n        self.right = DecisionTree(self.max_depth)\n        self.right.fit(X_right, y_right, depth + 1)\n\n    def predict(self, X):\n        if hasattr(self, 'label'):\n            return self.label\n        if X[self.feature] < self.threshold:\n            return self.left.predict(X)\n        else:\n            return self.right.predict(X)\ndef decision_tree_predict(X_train, y_train, X_test, max_depth=None):\n    tree = DecisionTree(max_depth)\n    tree.fit(X_train, y_train)\n    return [tree.predict(x) for x in X_test]"}
{"task_id": 190, "completion_id": 0, "solution": "import numpy as np\ndef gini_impurity(y):\n    \"\"\"Calculate the Gini impurity of a single class label vector.\"\"\"\n    (_, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    impurity = 1 - np.sum(np.square(probabilities))\n    return impurity\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    best_feature_index = -1\n    best_threshold_value = None\n    best_gini = np.inf\n    G_whole_dataset = gini_impurity(y)\n    for feature_index in range(X.shape[1]):\n        for threshold_value in np.unique(X[:, feature_index]):\n            left_indices = X[:, feature_index] <= threshold_value\n            right_indices = X[:, feature_index] > threshold_value\n            if np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n                continue\n            left = y[left_indices]\n            right = y[right_indices]\n            G_left = gini_impurity(left)\n            G_right = gini_impurity(right)\n            G_split = len(left) / len(y) * G_left + len(right) / len(y) * G_right\n            if G_split < best_gini or (np.isclose(G_split, best_gini) and (feature_index < best_feature_index or (np.isclose(feature_index, best_feature_index) and threshold_value < best_threshold_value))):\n                best_feature_index = feature_index\n                best_threshold_value = threshold_value\n                best_gini = G_split\n    if best_feature_index == -1:\n        return (-1, None, round(G_whole_dataset, 4))\n    else:\n        return (best_feature_index, best_threshold_value, round(best_gini, 4))"}
{"task_id": 191, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Iterable\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n\n    def euclidean(x, y):\n        return round(np.sqrt(np.sum((np.array(x) - np.array(y)) ** 2)), 4)\n\n    def manhattan(x, y):\n        return round(np.sum(np.abs(np.array(x) - np.array(y))), 4)\n\n    def chebyshev(x, y):\n        return round(np.max(np.abs(np.array(x) - np.array(y))), 4)\n\n    def cosine(x, y):\n        (x, y) = (np.array(x), np.array(y))\n        (norm_x, norm_y) = (np.linalg.norm(x), np.linalg.norm(y))\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        return round(1 - np.dot(x, y) / (norm_x * norm_y), 4)\n    metrics = {'euclidean': euclidean, 'manhattan': manhattan, 'chebyshev': chebyshev, 'cosine': cosine}\n\n    def d(x, y):\n        try:\n            (x, y) = (np.array(x, dtype=float), np.array(y, dtype=float))\n            if x.ndim != 1 or y.ndim != 1 or x.size != y.size:\n                return -1\n        except ValueError:\n            return -1\n        return metrics.get(name, lambda x, y: -1)(x, y)\n    return d"}
{"task_id": 197, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n    if md_action:\n        action_dim = len(env.action_space.spaces)\n        for sub_space in env.action_space.spaces:\n            if hasattr(sub_space, 'n'):\n                n_actions_per_dim.append(sub_space.n)\n            else:\n                n_actions_per_dim.append(np.inf)\n                cont_action = True\n        if not cont_action:\n            action_ids = list(product(*[range(n) for n in n_actions_per_dim]))\n    elif hasattr(env.action_space, 'n'):\n        action_dim = 1\n        n_actions_per_dim.append(env.action_space.n)\n        action_ids = list(range(env.action_space.n))\n    else:\n        action_dim = env.action_space.shape[0]\n        n_actions_per_dim = [np.inf] * action_dim\n        cont_action = True\n    return (n_actions_per_dim, None if cont_action else action_ids, action_dim)"}
{"task_id": 198, "completion_id": 0, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = len(phi[0][0])\n    beta = [[0.0] * T for _ in range(V)]\n    for (d, doc) in enumerate(corpus):\n        for (n, word) in enumerate(doc):\n            for t in range(T):\n                beta[word][t] += phi[d][n][t]\n    for v in range(V):\n        row_sum = sum(beta[v])\n        if row_sum != 0:\n            beta[v] = [round(b / row_sum, 4) for b in beta[v]]\n    return beta"}
{"task_id": 202, "completion_id": 0, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    medoids = X[:k]\n    labels = np.zeros(len(X))\n    total_cost = np.inf\n    while True:\n        for i in range(len(X)):\n            distances = np.linalg.norm(X[i] - medoids, axis=1)\n            labels[i] = np.argmin(distances)\n        new_total_cost = np.sum([np.min(np.linalg.norm(X[labels == i] - medoids[i], axis=1)) for i in range(k)])\n        if new_total_cost >= total_cost:\n            break\n        total_cost = new_total_cost\n        for i in range(k):\n            for j in range(k, len(X)):\n                (medoids[i], X[j]) = (X[j], medoids[i])\n                new_total_cost = np.sum([np.min(np.linalg.norm(X[labels == i] - medoids[i], axis=1)) for i in range(k)])\n                if new_total_cost < total_cost:\n                    total_cost = new_total_cost\n                else:\n                    (medoids[i], X[j]) = (X[j], medoids[i])\n    for i in range(len(X)):\n        distances = np.linalg.norm(X[i] - medoids, axis=1)\n        labels[i] = np.argmin(distances)\n    return labels.tolist()"}
{"task_id": 216, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n    x_train_poly = np.hstack([x_train ** (n + 1) for n in range(degree)])\n    x_test_poly = np.hstack([x_test ** (n + 1) for n in range(degree)])\n    x_train_poly[:, 1:] = (x_train_poly[:, 1:] - np.mean(x_train_poly[:, 1:], axis=0)) / np.std(x_train_poly[:, 1:], axis=0)\n    x_test_poly[:, 1:] = (x_test_poly[:, 1:] - np.mean(x_test_poly[:, 1:], axis=0)) / np.std(x_test_poly[:, 1:], axis=0)\n    weights = np.zeros(x_train_poly.shape[1])\n    for _ in range(n_iterations):\n        y_pred = np.dot(x_train_poly, weights)\n        residuals = y_pred - y_train\n        gradient = (np.dot(x_train_poly.T, residuals) + reg_factor * (2 * l1_ratio * weights + (1 - l1_ratio) * np.sign(weights))) / x_train_poly.shape[0]\n        weights -= learning_rate * gradient\n    y_test_pred = np.dot(x_test_poly, weights)\n    return np.round(y_test_pred, 4).tolist()"}
{"task_id": 217, "completion_id": 0, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    sigmoid = 1 / (1 + np.exp(-predicted))\n    gradient = actual * sigmoid - (1 - sigmoid)\n    hessian = sigmoid * (1 - sigmoid)\n    gradient = np.round(gradient, 6)\n    hessian = np.round(hessian, 6)\n    sigmoid = np.round(sigmoid, 6)\n    gradient = gradient.tolist()\n    hessian = hessian.tolist()\n    sigmoid = sigmoid.tolist()\n    return (gradient, hessian, sigmoid)"}
{"task_id": 218, "completion_id": 0, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def get_hand_value(hand):\n        total = sum(hand)\n        if total + 10 <= 21 and 1 in hand:\n            total += 10\n        return total if total <= 21 else -1\n    player_value = get_hand_value(player)\n    dealer_value = get_hand_value(dealer)\n    if player_value == -1:\n        return -1\n    elif dealer_value == -1:\n        return 1\n    elif player_value > dealer_value:\n        return 1 if len(player) == 2 and player_value == 21 else 1\n    elif player_value < dealer_value:\n        return -1\n    else:\n        return 0"}
{"task_id": 221, "completion_id": 0, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"TODO: implement helper that returns element-wise squared log errors.\"\"\"\n    return (np.log(1 + actual) - np.log(1 + predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    (actual, predicted) = (np.array(actual), np.array(predicted))\n    if actual.shape != predicted.shape:\n        return -1\n    if (actual < 0).any() or (predicted < 0).any():\n        return -1\n    squared_errors = squared_log_error(actual, predicted)\n    return round(squared_errors.mean(), 4)"}
{"task_id": 222, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    z = np.array(z)\n    mask = z >= 0\n    neg_mask = z < 0\n    zp = np.zeros_like(z)\n    zp[mask] = np.exp(-z[mask])\n    zp[neg_mask] = np.exp(z[neg_mask])\n    sig = 1 / (1 + zp)\n    return sig.round(4).tolist() if isinstance(z, (list, np.ndarray)) else float(sig)"}
{"task_id": 224, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, (list, np.ndarray)):\n        return [leaky_relu(zi, a) for zi in z]\n    else:\n        return max(z, a * z)"}
{"task_id": 226, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    weights = np.ones(n_samples) / n_samples\n    stumps = []\n    for _ in range(n_clf):\n        best_stump = None\n        min_error = float('inf')\n        for feature_i in range(n_features):\n            feature_values = X_train[:, feature_i]\n            thresholds = np.unique(feature_values)\n            for threshold in thresholds:\n                polarity = 1\n                predictions = np.ones(n_samples)\n                predictions[X_train[:, feature_i] < threshold] = -1\n                error = np.sum(weights[predictions != y_train])\n                if error > 0.5:\n                    error = 1 - error\n                    polarity = -1\n                if error < min_error:\n                    min_error = error\n                    best_stump = (feature_i, threshold, polarity)\n        alpha = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n        predictions = np.ones(n_samples)\n        (feature_i, threshold, polarity) = best_stump\n        predictions[X_train[:, feature_i] < threshold] = -polarity\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n        stumps.append((best_stump, alpha))\n    y_pred = np.zeros(X_test.shape[0])\n    for (stump, alpha) in stumps:\n        (feature_i, threshold, polarity) = stump\n        predictions = np.ones(X_test.shape[0])\n        predictions[X_test[:, feature_i] < threshold] = -polarity\n        y_pred += alpha * predictions\n    return [1 if prediction > 0 else -1 for prediction in y_pred]"}
{"task_id": 241, "completion_id": 0, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    A = np.random.normal(size=(shape[0], np.prod(shape[1:])))\n    (U, _, Vt) = np.linalg.svd(A, full_matrices=False)\n    Q = U if U.shape == A.shape else Vt\n    result = (Q.reshape(shape) * scale).tolist()\n    flat = np.array(result).reshape(shape[0], -1)\n    if shape[0] <= flat.shape[1]:\n        assert np.allclose(flat @ flat.T, scale ** 2 * np.eye(shape[0]), atol=1e-06)\n    else:\n        assert np.allclose(flat.T @ flat, scale ** 2 * np.eye(np.prod(shape[1:])), atol=1e-06)\n    return result\nshape = (2, 2)\nscale = 0.5\nresult = orthogonal(shape, scale)"}
{"task_id": 243, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    W1 = W2 = W3 = np.ones((4, 4))\n    Wa = Wc = np.ones((4, 3))\n    b1 = b2 = b3 = b_a = b_c = np.zeros(4)\n    Wa = np.ones((4, 1))\n    bc = np.zeros(1)\n    z1 = np.maximum(0, np.dot(state, W1) + b1)\n    z2 = np.maximum(0, np.dot(z1, W2) + b2)\n    z3 = np.maximum(0, np.dot(z2, W3) + b3)\n    logits = np.dot(z3, Wa) + b_a\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n    action_probs = np.round(action_probs.flatten(), 4)\n    state_value = np.dot(z3, Wc) + bc\n    state_value = np.round(state_value.item(), 4)\n    return (action_probs.tolist(), state_value)"}
{"task_id": 249, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.array(state)\n    (W1, b1, W2, b2, W3, b3, Wa, ba, Wc, bc) = [np.array(params[key]) for key in ['W1', 'b1', 'W2', 'b2', 'W3', 'b3', 'Wa', 'ba', 'Wc', 'bc']]\n    hidden = np.maximum(0, np.dot(state, W1) + b1)\n    hidden = np.maximum(0, np.dot(hidden, W2) + b2)\n    hidden = np.maximum(0, np.dot(hidden, W3) + b3)\n    actor_head = np.dot(hidden, Wa) + ba\n    probabilities = np.exp(actor_head) / np.sum(np.exp(actor_head))\n    probabilities = [round(p, 4) for p in probabilities.tolist()]\n    critic_head = np.dot(hidden, Wc) + bc\n    value = round(float(critic_head), 4)\n    return (probabilities, value)"}
{"task_id": 253, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l2_norm = np.linalg.norm(w, ord=2)\n    penalty_value = alpha * (l1_ratio * l2_norm + 0.5 * (1 - l1_ratio) * np.dot(w, w))\n    gradient_value = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n    if gradient:\n        return gradient_value.round(4).tolist()\n    else:\n        return round(penalty_value, 4)"}
{"task_id": 256, "completion_id": 0, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    if param_name in ['Ba', 'Bx']:\n        param_name = param_name.lower()\n    model.flush_gradients()\n    param = model.parameters[param_name]\n    grads = np.zeros_like(param, dtype=np.float64)\n    for idx in np.ndindex(param.shape):\n        param[idx] += epsilon\n        preds = [model.forward(X[:, :, t]) for t in range(n_t)]\n        loss_plus = loss_func(preds)\n        param[idx] -= 2 * epsilon\n        preds = [model.forward(X[:, :, t]) for t in range(n_t)]\n        loss_minus = loss_func(preds)\n        grads[idx] = (loss_plus - loss_minus) / (2 * epsilon)\n        param[idx] += epsilon\n    return grads.T"}
{"task_id": 257, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    (m, n) = X_train.shape\n    w = np.full(m, 1 / m)\n    clfs = []\n    for _ in range(n_clf):\n        (best_feature, best_threshold, min_error) = (None, None, float('inf'))\n        for feature in range(n):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                predictions = np.ones(m)\n                predictions[X_train[:, feature] < threshold] = -1\n                error = np.sum(w[predictions != y_train])\n                if error > 0.5:\n                    error = 1 - error\n                    predictions = -predictions\n                if error < min_error:\n                    min_error = error\n                    best_feature = feature\n                    best_threshold = threshold\n        alpha = 0.5 * np.log((1 - min_error) / min_error)\n        predictions = np.ones(m)\n        predictions[X_train[:, best_feature] < best_threshold] = -1\n        w *= np.exp(-alpha * y_train * predictions)\n        w /= np.sum(w)\n        clfs.append((best_feature, best_threshold, alpha))\n    y_pred = np.zeros(X_test.shape[0])\n    for (feature, threshold, alpha) in clfs:\n        predictions = np.ones(X_test.shape[0])\n        predictions[X_test[:, feature] < threshold] = -1\n        y_pred += alpha * predictions\n    y_pred = [1 if p > 0 else -1 for p in y_pred]\n    return y_pred"}
{"task_id": 261, "completion_id": 0, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions')\n    fan_in = shape[0]\n    fan_out = shape[1]\n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n    stddev = np.sqrt(2 / (fan_in + fan_out))\n    np.random.seed(0)\n    return np.random.normal(0.0, stddev, shape)"}
{"task_id": 266, "completion_id": 0, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    adj_list = [[] for _ in V]\n    for (u, v) in E:\n        if u in V and v in V:\n            (u_index, v_index) = (V.index(u), V.index(v))\n            if v not in adj_list[u_index]:\n                adj_list[u_index].append(v)\n            if u not in adj_list[v_index]:\n                adj_list[v_index].append(u)\n    return adj_list"}
{"task_id": 267, "completion_id": 0, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    best_stump = {'feature_index': -1, 'threshold': -1, 'polarity': -1, 'weighted_error': np.inf}\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        for threshold in np.unique(feature_values):\n            for polarity in [-1, 1]:\n                predictions = polarity * ((feature_values < threshold) * 2 - 1)\n                weighted_error = np.sum(sample_weights * (predictions != y))\n                if weighted_error < best_stump['weighted_error']:\n                    best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': polarity, 'weighted_error': weighted_error}\n    best_stump['threshold'] = round(best_stump['threshold'], 4)\n    best_stump['weighted_error'] = round(best_stump['weighted_error'], 4)\n    return best_stump"}
{"task_id": 273, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef entropy(labels):\n    \"\"\"Calculate the entropy of a set of labels.\"\"\"\n    n = len(labels)\n    counts = Counter(labels)\n    return -sum((count / n * np.log2(count / n + 1e-15) for count in counts.values()))\ndef information_gain(parent, left, right):\n    \"\"\"Calculate the information gain of a split.\"\"\"\n    n = len(parent)\n    return entropy(parent) - (len(left) / n * entropy(left) + len(right) / n * entropy(right))\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\"\"\"\n    (feature, target) = (np.array(feature), np.array(target))\n    sorted_indices = np.argsort(feature)\n    sorted_feature = feature[sorted_indices]\n    sorted_target = target[sorted_indices]\n    (best_threshold, best_info_gain) = (None, 0.0)\n    for i in range(1, len(sorted_feature)):\n        if sorted_feature[i] != sorted_feature[i - 1]:\n            (left, right) = (sorted_target[:i], sorted_target[i:])\n            info_gain = information_gain(sorted_target, left, right)\n            if info_gain > best_info_gain:\n                (best_threshold, best_info_gain) = (sorted_feature[i], info_gain)\n    best_threshold = round(best_threshold, 4) if best_threshold is not None else None\n    best_info_gain = round(best_info_gain, 4)\n    return (best_threshold, best_info_gain)"}
{"task_id": 286, "completion_id": 0, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    if name in globals() and callable(globals()[name]):\n        return globals()[name]\n    else:\n        raise ValueError('Invalid initialization function.')"}
{"task_id": 287, "completion_id": 0, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    H_out = int((H - p_h) / s_h + 1)\n    W_out = int((W - p_w) / s_w + 1)\n    pooled_output = np.zeros((N, C, H_out, W_out))\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for h in range(H_out):\n                for w in range(W_out):\n                    window = X[n, c, h * s_h:h * s_h + p_h, w * s_w:w * s_w + p_w]\n                    pooled_output[n, c, h, w] = np.mean(window)\n                    grad_input[n, c, h * s_h:h * s_h + p_h, w * s_w:w * s_w + p_w] += accum_grad[n, c, h, w] / (p_h * p_w)\n    return (pooled_output.round(4).tolist(), grad_input.round(4).tolist())"}
{"task_id": 290, "completion_id": 0, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature:\n            return False\n        if not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    else:\n        return False"}
{"task_id": 292, "completion_id": 0, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    parent1 = np.array(parent1)\n    parent2 = np.array(parent2)\n    if parent1.shape != parent2.shape:\n        return -1\n    child1 = np.hstack((parent1[:, :cutoff], parent2[:, cutoff:])).tolist()\n    child2 = np.hstack((parent2[:, :cutoff], parent1[:, cutoff:])).tolist()\n    return (child1, child2)"}
{"task_id": 294, "completion_id": 0, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {label: [] for label in G['_V2I']}\n    for edge in G['_G']:\n        (source_label, target_label, weight) = edge\n        adj[source_label].append((target_label, weight))\n        if not G['is_directed']:\n            adj[target_label].append((source_label, weight))\n    for neighbours in adj.values():\n        neighbours.sort()\n    return adj"}
{"task_id": 296, "completion_id": 0, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.array(x)\n    return np.array_equal(x, x.astype(bool))"}
{"task_id": 298, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    ngram_counter = defaultdict(int)\n    prefix_counter = defaultdict(int)\n    query = '<bol> ' * (N - 1) + query + ' <eol>'\n    tokens = query.split()\n    for sentence in corpus:\n        sentence = '<bol> ' * (N - 1) + sentence + ' <eol>'\n        sentence_tokens = sentence.split()\n        for i in range(len(sentence_tokens) - N + 1):\n            ngram = tuple(sentence_tokens[i:i + N])\n            prefix = tuple(sentence_tokens[i:i + N - 1])\n            ngram_counter[ngram] += 1\n            prefix_counter[prefix] += 1\n    log_prob = 0.0\n    for i in range(len(tokens) - N + 1):\n        ngram = tuple(tokens[i:i + N])\n        prefix = tuple(tokens[i:i + N - 1])\n        if prefix_counter[prefix] == 0:\n            return float('-inf')\n        prob = ngram_counter[ngram] / prefix_counter[prefix]\n        log_prob += math.log(prob)\n    return round(log_prob, 4)"}
{"task_id": 302, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n, d) = X.shape\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            W[i, j] = 1 / (1 + np.linalg.norm(X[i] - X[j]))\n    np.fill_diagonal(W, 0)\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (_, E) = np.linalg.eigh(L)\n    E = E[:, :k]\n    centroids = E[:k].copy()\n    labels = np.zeros(n, dtype=int)\n    for _ in range(100):\n        for i in range(n):\n            labels[i] = np.argmin(np.linalg.norm(E[i] - centroids, axis=1))\n        new_centroids = np.zeros((k, k))\n        counts = np.zeros(k)\n        for i in range(n):\n            new_centroids[labels[i]] += E[i]\n            counts[labels[i]] += 1\n        for i in range(k):\n            if counts[i] == 0:\n                new_centroids[i] = E[np.random.randint(n)]\n            else:\n                new_centroids[i] /= counts[i]\n        if np.all(labels == np.argmin(np.linalg.norm(E - new_centroids[:, np.newaxis], axis=1), axis=0)):\n            break\n        centroids = new_centroids\n    return labels.tolist()"}
{"task_id": 303, "completion_id": 0, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    (prev_label, prev_mine) = params[max(ix - 1, 0)]\n    (curr_label, curr_mine) = params[ix]\n    return f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\n\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\nMine [{curr_label}]:\\n{curr_mine}\\n\\nTheirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n----------------------- END DEBUG -----------------------'"}
{"task_id": 304, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.insert(X, 0, 1, axis=1)\n    (N, M) = X.shape\n    if V is None:\n        V = np.eye(M)\n    elif np.isscalar(V):\n        V = V * np.eye(M)\n    elif isinstance(V, (list, tuple)):\n        V = np.diag(V)\n    elif isinstance(V, np.ndarray):\n        if V.ndim == 1:\n            V = np.diag(V)\n        elif V.ndim == 2:\n            V = V\n    if np.isscalar(mu):\n        mu = mu * np.ones(M)\n    V_inv = np.linalg.inv(V)\n    XTX_inv = np.linalg.inv(X.T @ X)\n    Sigma_b = XTX_inv + V_inv\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    return [round(coef, 4) for coef in mu_b]"}
{"task_id": 308, "completion_id": 0, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs // 2\n    min_mel = 2595 * np.log10(1 + min_freq / 700)\n    max_mel = 2595 * np.log10(1 + max_freq / 700)\n    mels = np.linspace(min_mel, max_mel, n_filters + 2)\n    freqs = 700 * (10 ** (mels / 2595) - 1)\n    f = np.arange(0, N // 2 + 1) * fs / N\n    filter_bank = np.zeros((n_filters, N // 2 + 1))\n    for i in range(n_filters):\n        for k in range(N // 2 + 1):\n            left_slope = (f[k] - freqs[i]) / (freqs[i + 1] - freqs[i])\n            right_slope = (freqs[i + 2] - f[k]) / (freqs[i + 2] - freqs[i + 1])\n            filter_bank[i, k] = max(0, min(left_slope, right_slope))\n    if normalize:\n        filter_bank *= 2 / np.diff(f)[:, np.newaxis]\n    return filter_bank.tolist()"}
{"task_id": 312, "completion_id": 0, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n    N = window_len - 1 if symmetric else window_len\n    n = np.arange(window_len)\n    window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    return [round(val, 4) for val in window]"}
{"task_id": 313, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef digamma(x, iterations=1000):\n    \"\"\"Compute the digamma function using an iterative algorithm.\"\"\"\n    result = 0\n    for i in range(iterations):\n        result -= 1 / (i + x)\n    result += math.log(x) - 1 / (2 * x) - 1 / (12 * x ** 2) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\n    return result\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\"\"\"\n    gamma = np.array(gamma)\n    gamma_sum = gamma[d, :].sum()\n    gamma_t = gamma[d, t]\n    expectation = digamma(gamma_t) - digamma(gamma_sum)\n    return round(expectation, 4)"}
{"task_id": 317, "completion_id": 0, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_prediction, prev_label) = params[prev_ix]\n    prev_gold = golds[prev_label]\n    (curr_prediction, curr_label) = params[ix]\n    curr_gold = golds[curr_label]\n    report = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\nMine [{curr_label}]:\\n{curr_prediction}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------'\n    return report"}
{"task_id": 318, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    f = []\n    theta = []\n    p = []\n    alpha = []\n    for _ in range(n_estimators):\n        e_min = float('inf')\n        for j in range(n_features):\n            for theta_j in np.unique(X_train[:, j]):\n                for p_j in [-1, 1]:\n                    predictions = p_j * np.sign(X_train[:, j] - theta_j)\n                    e = 1 - np.sum(weights[predictions == y_train])\n                    if e < e_min:\n                        e_min = e\n                        f_j = j\n                        theta_j_best = theta_j\n                        p_j_best = p_j\n        f.append(f_j)\n        theta.append(theta_j_best)\n        p.append(p_j_best)\n        alpha_m = 0.5 * math.log((1 - e_min) / e_min)\n        alpha.append(alpha_m)\n        weights = weights * np.exp(-alpha_m * y_train * [p_j_best * np.sign(x - theta_j_best) for x in X_train[:, f_j]])\n        weights = weights / np.sum(weights)\n    final_predictions = np.sign(np.sum([alpha[i] * [p[i] * np.sign(x - theta[i]) for x in X_test[:, f[i]]] for i in range(n_estimators)], axis=0))\n    return final_predictions.tolist()"}
{"task_id": 329, "completion_id": 0, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    if positive_only:\n        k = np.arange(0, N // 2 + 1)\n    else:\n        k = np.arange(-N // 2, N // 2 + 1)\n    f = k * (fs / N)\n    return np.round(f, 4).tolist()"}
{"task_id": 331, "completion_id": 0, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    oob_indices = np.any(oob_mask, axis=1)\n    if not np.any(oob_indices):\n        return -1\n    avg_predictions = np.mean(predictions[oob_indices], axis=1)\n    squared_errors = np.square(avg_predictions - y_true[oob_indices])\n    oob_mse = np.mean(squared_errors)\n    return round(oob_mse, 4)"}
{"task_id": 332, "completion_id": 0, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n\n    def update_tree(tree, items):\n        if items[0] in tree['children']:\n            tree['children'][items[0]]['support'] += 1\n        else:\n            tree['children'][items[0]] = {'support': 1, 'children': {}}\n        if len(items) > 1:\n            update_tree(tree['children'][items[0]], items[1:])\n    item_counts = Counter()\n    for transaction in transactions:\n        for item in set(transaction):\n            item_counts[item] += 1\n    frequent_items = {item: count for (item, count) in item_counts.items() if count >= min_support}\n    sorted_items = sorted(frequent_items.items(), key=lambda x: (-x[1], x[0]))\n    sorted_transactions = []\n    for transaction in transactions:\n        sorted_transaction = sorted(transaction, key=lambda x: (sorted_items.index(x) if x in sorted_items else -1, x))\n        sorted_transactions.append(sorted_transaction)\n    fp_tree = {'support': 0, 'children': {}}\n    for transaction in sorted_transactions:\n        update_tree(fp_tree, [item for item in transaction if item in frequent_items])\n    return fp_tree"}
{"task_id": 336, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    dot_product = np.dot(X, Y.T)\n    kernel_matrix = dot_product + c0\n    kernel_matrix = np.round(kernel_matrix, 4)\n    kernel_matrix = kernel_matrix.tolist()\n    return kernel_matrix"}
{"task_id": 340, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * np.square(grad)\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    param = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    return (param.tolist(), m.tolist(), v.tolist())"}
{"task_id": 343, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    sorted_indices = np.argsort(rewards)[::-1]\n    num_retain = int(retain_prcnt * len(sorted_indices))\n    retained_samples = theta_samples[sorted_indices[:num_retain]]\n    mean = np.mean(retained_samples, axis=0)\n    variance = np.var(retained_samples, axis=0)\n    mean = [round(x, 4) for x in mean]\n    variance = [round(x, 4) for x in variance]\n    return (mean, variance)"}
{"task_id": 353, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    label_counts = Counter(labels)\n    total_labels = len(labels)\n    entropy = 0.0\n    for count in label_counts.values():\n        p = count / total_labels\n        entropy -= p * math.log2(p)\n    return round(entropy, 5)"}
{"task_id": 354, "completion_id": 0, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    if isinstance(pad, int):\n        pad_width = ((0, 0), (pad, pad), (pad, pad), (0, 0))\n    elif isinstance(pad, tuple):\n        if len(pad) == 2:\n            pad_width = ((0, 0), (pad[0], pad[0]), (pad[1], pad[1]), (0, 0))\n        elif len(pad) == 4:\n            pad_width = ((0, 0), (pad[0], pad[1]), (pad[2], pad[3]), (0, 0))\n    elif pad == 'same':\n        pad_rows = (W.shape[0] - 1) * dilation + 1 - X.shape[1]\n        pad_cols = (W.shape[1] - 1) * dilation + 1 - X.shape[2]\n        (pad_top, pad_bottom) = (pad_rows // 2, pad_rows - pad_rows // 2)\n        (pad_left, pad_right) = (pad_cols // 2, pad_cols - pad_cols // 2)\n        pad_width = ((0, 0), (pad_top, pad_bottom), (pad_left, pad_right), (0, 0))\n    X = np.pad(X, pad_width=pad_width, mode='constant')\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, _, out_ch) = W.shape\n    out_rows = (in_rows - (kernel_rows - 1) * dilation - 1) // stride + 1\n    out_cols = (in_cols - (kernel_cols - 1) * dilation - 1) // stride + 1\n    out = np.empty((n_ex, out_rows, out_cols, out_ch))\n    for r in range(out_rows):\n        for c in range(out_cols):\n            X_slice = X[:, r * stride:r * stride + kernel_rows * dilation:dilation, c * stride:c * stride + kernel_cols * dilation:dilation, :]\n            out[:, r, c, :] = np.tensordot(X_slice, W, axes=([1, 2, 3], [0, 1, 2]))\n    return out.tolist()"}
{"task_id": 355, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    data = data - np.mean(data, axis=0)\n    if solver == 'svd':\n        (_, _, Vt) = np.linalg.svd(data)\n        eigenvectors = Vt.T\n    elif solver == 'eigen':\n        cov_matrix = np.cov(data, rowvar=False, ddof=1)\n        (_, eigenvectors) = np.linalg.eigh(cov_matrix)\n        eigenvectors = eigenvectors[:, ::-1]\n    explained_variance = np.var(data.dot(eigenvectors.T), axis=0)\n    explained_variance_ratio = explained_variance / np.sum(explained_variance)\n    explained_variance_ratio_sorted_indices = np.argsort(explained_variance_ratio)[::-1]\n    eigenvectors = eigenvectors[:, explained_variance_ratio_sorted_indices[:n_components]]\n    for i in range(eigenvectors.shape[1]):\n        if eigenvectors[0, i] < 0:\n            eigenvectors[:, i] *= -1\n    scores = data.dot(eigenvectors)\n    return (scores.round(4).tolist(), np.round(explained_variance_ratio[:n_components], 4).tolist())"}
{"task_id": 356, "completion_id": 0, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return leaf.value.index(max(leaf.value))\n    else:\n        return leaf.value"}
{"task_id": 357, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = data[:K]\n    for _ in range(max_iters):\n        clusters = np.argmin(np.linalg.norm(data[:, np.newaxis] - centroids, axis=-1), axis=-1)\n        new_centroids = np.array([data[clusters == k].mean(axis=0) for k in range(K)])\n        if np.allclose(centroids, new_centroids, atol=1e-06):\n            break\n        centroids = new_centroids\n    centroids = sorted(centroids.tolist())\n    centroids = [[round(x, 4) for x in centroid] for centroid in centroids]\n    return centroids"}
{"task_id": 362, "completion_id": 0, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"\n    Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    data = np.array(data, dtype=float)\n    row_sums = data.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    data = data / row_sums[:, np.newaxis]\n    return np.round(data, 4).tolist()"}
{"task_id": 363, "completion_id": 0, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def check_continuity(space):\n        if isinstance(space, Box):\n            return True\n        elif isinstance(space, Tuple) or isinstance(space, Dict):\n            return all((check_continuity(sub_space) for sub_space in space.spaces.values())) if isinstance(space, Dict) else all((check_continuity(sub_space) for sub_space in space.spaces))\n        else:\n            return False\n    cont_action = check_continuity(env.action_space) if tuple_action else isinstance(env.action_space, Box)\n    cont_obs = check_continuity(env.observation_space) if tuple_obs else isinstance(env.observation_space, Box)\n    return (cont_action, cont_obs)"}
{"task_id": 369, "completion_id": 0, "solution": "import numpy as np\ndef softmax(x):\n    \"\"\"Compute softmax values for each sets of scores in x.\"\"\"\n    e_x = np.exp(x - np.max(x))\n    return e_x / e_x.sum(axis=0)\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for u in updates:\n        running_pred -= learning_rate * u\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        class_probs = softmax(running_pred)\n        return np.argmax(class_probs, axis=1)"}
{"task_id": 371, "completion_id": 0, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    if type(pad) == str:\n        p_left = int(np.ceil((X.shape[1] * (dilation + 1) - dilation - W.shape[0]) / 2))\n        p_right = int(np.floor((X.shape[1] * (dilation + 1) - dilation - W.shape[0]) / 2))\n    elif type(pad) == int:\n        p_left = p_right = pad\n    else:\n        (p_left, p_right) = pad\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)))\n    output_length = int(np.floor((X.shape[1] + 2 * p_left - dilation * (W.shape[0] - 1) - 1) / stride + 1))\n    output = np.zeros((X.shape[0], output_length, W.shape[2]))\n    for example in range(X.shape[0]):\n        for out_channel in range(W.shape[2]):\n            for out_position in range(output_length):\n                for in_channel in range(W.shape[1]):\n                    for kernel_position in range(W.shape[0]):\n                        x_position = out_position * stride + kernel_position * dilation\n                        output[example, out_position, out_channel] += X_padded[example, x_position, in_channel] * W[kernel_position, in_channel, out_channel]\n    return output.tolist()"}
{"task_id": 373, "completion_id": 0, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    (unique, counts) = np.unique(y, return_counts=True)\n    probs = counts / len(y)\n    gini = 1 - np.sum(np.square(probs))\n    return round(gini, 4)"}
{"task_id": 374, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    m = X.shape[0]\n    n = X.shape[1]\n    weights = np.zeros(n)\n    bias = 0.0\n    for _ in range(n_iterations):\n        y_pred = np.dot(X, weights) + bias\n        dw = 2 / m * np.dot(X.T, y_pred - y)\n        db = 2 / m * np.sum(y_pred - y)\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n    return ([round(weight, 4) for weight in weights], round(bias, 4))"}
{"task_id": 376, "completion_id": 0, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X = np.array(X)\n    if X.shape[0] != X.shape[1]:\n        return False\n    return np.allclose(X, X.T, atol=1e-08)"}
{"task_id": 377, "completion_id": 0, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    This function calculates the negative gradient of the logistic loss for binary classification.\n\n    Args:\n        y: A list of binary class labels (0 or 1).\n        f: A list of current prediction scores (floats).\n\n    Returns:\n        A list of negative gradients g rounded to four decimal places.\n        If the label array contains values other than 0 or 1, it returns -1.\n    \"\"\"\n    if not all((i in [0, 1] for i in y)):\n        return -1\n    y_prime = [2 * i - 1 for i in y]\n    g = [y_prime[i] / (1 + np.exp(y_prime[i] * f[i])) for i in range(len(y))]\n    g = [round(i, 4) for i in g]\n    return g"}
{"task_id": 380, "completion_id": 0, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x = np.array(x)\n    if order == 0:\n        elu = np.where(x > 0, x, alpha * (np.exp(x) - 1))\n        selu = scale * elu\n    elif order == 1:\n        elu_prime = np.where(x > 0, 1, alpha * np.exp(x))\n        selu_prime = scale * elu_prime\n    elif order == 2:\n        elu_double_prime = np.where(x > 0, 0, alpha * np.exp(x))\n        selu_double_prime = scale * elu_double_prime\n    else:\n        raise ValueError('Order must be 0, 1, or 2')\n    return np.round(selu if order == 0 else selu_prime if order == 1 else selu_double_prime, 4).tolist()"}
{"task_id": 387, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, np.mean(y), dtype=float)\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        sorted_indices = np.argsort(x)\n        x_sorted = x[sorted_indices]\n        residuals_sorted = residuals[sorted_indices]\n        split_candidates = (x_sorted[1:] + x_sorted[:-1]) / 2\n        split_errors = []\n        for t in split_candidates:\n            left_mask = x <= t\n            right_mask = x > t\n            left_residuals = residuals_sorted[left_mask]\n            right_residuals = residuals_sorted[right_mask]\n            error = np.sum(left_residuals ** 2) + np.sum(right_residuals ** 2)\n            split_errors.append(error)\n        if split_errors:\n            best_split_index = np.argmin(split_errors)\n            best_split = split_candidates[best_split_index]\n            left_mask = x <= best_split\n            right_mask = x > best_split\n            y_pred[left_mask] += learning_rate * np.mean(residuals[left_mask])\n            y_pred[right_mask] += learning_rate * np.mean(residuals[right_mask])\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 394, "completion_id": 0, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * np.square(grad)\n    w_next = w - learning_rate * grad / np.sqrt(Eg + 1e-08)\n    return (np.round(w_next, 4).tolist(), np.round(Eg, 4).tolist())"}
{"task_id": 398, "completion_id": 0, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if derivative:\n        return np.round(np.where(x >= 0, 1, elu(x, alpha) + alpha).tolist(), 4)\n    else:\n        return np.round(np.where(x >= 0, x, alpha * (np.exp(x) - 1)).tolist(), 4)"}
{"task_id": 411, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Union\ndef env_stats(actions: List[Union[float, int, List[Union[float, int]]]], observations: List[Union[float, int, List[Union[float, int]]]]) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def get_stats(data):\n        tuple_data = any((isinstance(x, (list, tuple, np.ndarray)) for x in data))\n        multidim_data = any((isinstance(x, (list, tuple, np.ndarray)) and len(x) > 1 for x in data))\n        continuous_data = any((isinstance(x, (list, tuple, np.ndarray)) and any((isinstance(i, float) and (not i.is_integer()) for i in x)) for x in data))\n        n_data_per_dim = [len(set(x)) if isinstance(x, (list, tuple, np.ndarray)) else 1 for x in data]\n        data_dim = len(data[0]) if isinstance(data[0], (list, tuple, np.ndarray)) else 1\n        data_ids = [list(sorted(set(x))) if isinstance(x, (list, tuple, np.ndarray)) else [x] for x in data]\n        return (tuple_data, multidim_data, continuous_data, n_data_per_dim, data_dim, data_ids)\n    (tuple_actions, multidim_actions, continuous_actions, n_actions_per_dim, action_dim, action_ids) = get_stats(actions)\n    (tuple_observations, multidim_observations, continuous_observations, n_obs_per_dim, obs_dim, obs_ids) = get_stats(observations)\n    return {'tuple_actions': tuple_actions, 'tuple_observations': tuple_observations, 'multidim_actions': multidim_actions, 'multidim_observations': multidim_observations, 'continuous_actions': continuous_actions, 'continuous_observations': continuous_observations, 'n_actions_per_dim': n_actions_per_dim, 'action_dim': action_dim, 'n_obs_per_dim': n_obs_per_dim, 'obs_dim': obs_dim, 'action_ids': action_ids, 'obs_ids': obs_ids}"}
{"task_id": 413, "completion_id": 0, "solution": "import numpy as np\nclass Node:\n\n    def __init__(self, feature=None, threshold=None, left=None, right=None, value=None):\n        self.feature = feature\n        self.threshold = threshold\n        self.left = left\n        self.right = right\n        self.value = value\nclass GBDT:\n\n    def __init__(self, max_depth=3):\n        self.max_depth = max_depth\n        self.tree = None\n\n    def _split(self, X, y):\n        (best_feature, best_threshold, min_mse) = (None, None, float('inf'))\n        for feature in range(X.shape[1]):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                left_idx = X[:, feature] < threshold\n                right_idx = X[:, feature] >= threshold\n                left_mse = np.square(y[left_idx] - np.mean(y[left_idx])).mean()\n                right_mse = np.square(y[right_idx] - np.mean(y[right_idx])).mean()\n                mse = left_mse + right_mse\n                if mse < min_mse:\n                    min_mse = mse\n                    best_feature = feature\n                    best_threshold = threshold\n        return (best_feature, best_threshold)\n\n    def _build_tree(self, X, y, depth=0):\n        if depth == self.max_depth or len(np.unique(y)) == 1:\n            return Node(value=y.mean())\n        (feature, threshold) = self._split(X, y)\n        left_idx = X[:, feature] < threshold\n        right_idx = X[:, feature] >= threshold\n        left = self._build_tree(X[left_idx], y[left_idx], depth + 1)\n        right = self._build_tree(X[right_idx], y[right_idx], depth + 1)\n        return Node(feature, threshold, left, right)\n\n    def fit(self, X, y):\n        self.tree = self._build_tree(X, y)\n\n    def _predict(self, x, node):\n        if node.value is not None:\n            return node.value\n        if x[node.feature] < node.threshold:\n            return self._predict(x, node.left)\n        else:\n            return self._predict(x, node.right)\n\n    def predict(self, X):\n        return np.array([self._predict(x, self.tree) for x in X])\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    model = GBDT(max_depth=max_depth)\n    prediction = np.full(y_train.shape, np.mean(y_train))\n    for _ in range(n_estimators):\n        residuals = y_train - prediction\n        model.fit(X_train, residuals)\n        prediction += learning_rate * model.predict(X_train)\n    return list(np.round(model.predict(X_test), 4))"}
{"task_id": 416, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    This function calculates the probability density function (PDF) of a multivariate Gaussian (Normal) distribution.\n\n    Parameters:\n    X (numpy array): A 2D array of shape (n_samples, n_features) containing the data points for which the PDF values must be evaluated.\n    mean (numpy array): The mean vector of the distribution (length n_features).\n    cov (numpy array): The covariance matrix of shape (n_features, n_features) which must be positive-definite (invertible).\n\n    Returns:\n    list: A list whose i-th element is the PDF value for X[i] rounded to four decimal places.\n    \"\"\"\n    if len(X.shape) == 1:\n        X = X.reshape(-1, 1)\n    (n_samples, n_features) = X.shape\n    mean = np.array(mean)\n    cov = np.array(cov)\n    det = np.linalg.det(cov)\n    inv = np.linalg.inv(cov)\n    norm_factor = (2 * math.pi) ** (-n_features / 2) * det ** (-0.5)\n    pdf_values = []\n    for x in X:\n        x_minus_mean = x - mean\n        exp_arg = -0.5 * np.dot(np.dot(x_minus_mean, inv), x_minus_mean.T)\n        pdf = norm_factor * math.exp(exp_arg)\n        pdf_values.append(round(pdf, 4))\n    return pdf_values"}
{"task_id": 419, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.c_[np.ones(X.shape[0]), X]\n        X_new = np.c_[np.ones(X_new.shape[0]), X_new]\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif np.isscalar(V):\n        V *= np.eye(X.shape[1])\n    elif V.ndim == 1:\n        V = np.diag(V)\n    if np.isscalar(mu):\n        mu = np.full(X.shape[1], mu)\n    V_inv = np.linalg.inv(V)\n    Sigma_posterior = np.linalg.inv(V_inv + X.T @ X)\n    mu_posterior = Sigma_posterior @ (V_inv @ mu + X.T @ y)\n    y_new = X_new @ mu_posterior\n    return np.round(y_new, 4).tolist()"}
{"task_id": 423, "completion_id": 0, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Stub for the RMSLE metric.  Complete the body of the function.\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if any((i < 0 for i in actual)) or any((i < 0 for i in predicted)):\n        return -1\n    rmsle = np.sqrt(np.mean(np.square(np.log(np.array(predicted) + 1) - np.log(np.array(actual) + 1))))\n    return round(rmsle, 4)"}
{"task_id": 428, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    else:\n        if symmetric:\n            window = [0.5 - 0.5 * math.cos(2 * math.pi * n / (window_len - 1)) for n in range(window_len)]\n        else:\n            window = [0.5 - 0.5 * math.cos(2 * math.pi * n / window_len) for n in range(window_len)]\n        return [round(x, 4) for x in window]"}
{"task_id": 433, "completion_id": 0, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        receptive_field_size = shape[2] * shape[3]\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n    else:\n        (fan_in, fan_out) = (shape[0], shape[1])\n    return (float(fan_in), float(fan_out))"}
{"task_id": 435, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(y.mean(), 4)] * len(y)\n    y_hat = np.full_like(y, y.mean())\n    for t in range(n_estimators):\n        residuals = y - y_hat\n        coef = np.linalg.lstsq(np.c_[np.ones_like(y), X], residuals, rcond=None)[0]\n        h_t = np.dot(np.c_[np.ones_like(y), X], coef)\n        y_hat += learning_rate * h_t\n    return [round(y, 4) for y in y_hat.tolist()]"}
{"task_id": 437, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    sigmoid = 1 / (1 + np.exp(-x))\n    derivative1 = sigmoid * (1 - sigmoid)\n    derivative2 = derivative1 * (1 - 2 * sigmoid)\n    if order == 0:\n        result = sigmoid\n    elif order == 1:\n        result = derivative1\n    elif order == 2:\n        result = derivative2\n    else:\n        return -1\n    result = np.round(result, 4)\n    if np.isscalar(x):\n        return result.item()\n    else:\n        return result.tolist()"}
{"task_id": 438, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    elif num_classes < np.max(y) + 1:\n        return -1\n    one_hot = np.zeros((y.shape[0], num_classes))\n    one_hot[np.arange(y.shape[0]), y] = 1\n    return one_hot.tolist()"}
{"task_id": 439, "completion_id": 0, "solution": "import itertools\nfrom collections import Counter"}
{"task_id": 440, "completion_id": 0, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_array = np.array(predictions)\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n    averaged_probabilities = np.round(averaged_probabilities, 4)\n    predicted_classes = np.argmax(averaged_probabilities, axis=1)\n    averaged_probabilities = averaged_probabilities.tolist()\n    predicted_classes = predicted_classes.tolist()\n    return (averaged_probabilities, predicted_classes)"}
{"task_id": 444, "completion_id": 0, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    (N, C) = X.shape\n    M = len(Y)\n    if isinstance(sigma, float):\n        if sigma <= 0:\n            return -1\n        sigma = np.full(C, sigma)\n    elif isinstance(sigma, list):\n        sigma = np.array(sigma)\n        if len(sigma) != C or any((s <= 0 for s in sigma)):\n            return -1\n    else:\n        sigma = np.full(C, np.sqrt(C / 2))\n    kernel_matrix = np.zeros((N, M))\n    for i in range(N):\n        for j in range(M):\n            kernel_matrix[i, j] = np.exp(-0.5 * np.sum(((X[i] - Y[j]) / sigma) ** 2))\n    return np.round(kernel_matrix, 4).tolist()"}
{"task_id": 446, "completion_id": 0, "solution": "import numpy as np\ndef decision_stump(X, y):\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    (_, counts) = np.unique(y, return_counts=True)\n    parent_entropy = -np.sum([c / n_samples * np.log2(c / n_samples) for c in counts])\n    best_feature_index = -1\n    best_threshold = None\n    best_gain = -1\n    left_majority_label = np.argmax(np.bincount(y))\n    right_majority_label = np.argmax(np.bincount(y))\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        sorted_indices = np.argsort(feature_values)\n        sorted_labels = y[sorted_indices]\n        thresholds = (feature_values[sorted_indices[1:]] + feature_values[sorted_indices[:-1]]) / 2\n        for threshold in thresholds:\n            left_indices = feature_values <= threshold\n            right_indices = feature_values > threshold\n            left_entropy = entropy(sorted_labels[left_indices])\n            right_entropy = entropy(sorted_labels[right_indices])\n            gain = parent_entropy - np.sum(left_indices) / n_samples * left_entropy - np.sum(right_indices) / n_samples * right_entropy\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = feature_index\n                best_threshold = round(threshold, 4)\n                left_majority_label = np.argmax(np.bincount(sorted_labels[left_indices]))\n                right_majority_label = np.argmax(np.bincount(sorted_labels[right_indices]))\n    if best_feature_index == -1:\n        majority_label = np.argmax(np.bincount(y))\n        return (-1, None, majority_label, majority_label)\n    else:\n        return (best_feature_index, best_threshold, left_majority_label, right_majority_label)\ndef entropy(labels):\n    (_, counts) = np.unique(labels, return_counts=True)\n    probs = counts / np.sum(counts)\n    return -np.sum([p * np.log2(p) for p in probs])"}
{"task_id": 452, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    X = np.array(X)\n    subset1 = X[X[:, feature_i] >= threshold] if isinstance(threshold, (int, float)) else X[X[:, feature_i] == threshold]\n    subset2 = X[X[:, feature_i] < threshold] if isinstance(threshold, (int, float)) else X[X[:, feature_i] != threshold]\n    return [subset1.tolist(), subset2.tolist()]"}
{"task_id": 453, "completion_id": 0, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    if not len(Q) == len(Q_next) == len(actions) == len(rewards) == len(dones):\n        return -1\n    if not 0 <= gamma <= 1:\n        return -1\n    Q = np.array(Q)\n    Q_next = np.array(Q_next)\n    actions = np.array(actions)\n    rewards = np.array(rewards)\n    dones = np.array(dones)\n    targets = np.where(dones, rewards, rewards + gamma * np.max(Q_next, axis=1))\n    Q[np.arange(len(Q)), actions] = targets\n    Q = Q.round(4).tolist()\n    return Q"}
{"task_id": 458, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    if any((label < 0 for label in labels)) or any((label >= num_classes for label in labels)):\n        return -1\n    one_hot_labels = [[0] * num_classes for _ in range(len(labels))]\n    for (i, label) in enumerate(labels):\n        one_hot_labels[i][label] = 1\n    return one_hot_labels"}
{"task_id": 461, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_hat = np.mean(y)\n    residuals = y - y_hat\n    if n_estimators <= 0:\n        return np.round(y_hat, 4).tolist()\n    for _ in range(n_estimators):\n        if np.all(residuals == 0):\n            break\n        split_values = np.unique(x)[:-1]\n        min_sse = np.inf\n        best_split = None\n        (best_v_l, best_v_r) = (None, None)\n        for split in split_values:\n            left_mask = x <= split\n            right_mask = x > split\n            if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:\n                continue\n            v_l = np.mean(residuals[left_mask])\n            v_r = np.mean(residuals[right_mask])\n            sse = np.sum((residuals[left_mask] - v_l) ** 2) + np.sum((residuals[right_mask] - v_r) ** 2)\n            if sse < min_sse:\n                min_sse = sse\n                best_split = split\n                (best_v_l, best_v_r) = (v_l, v_r)\n        if best_split is None:\n            best_split = np.mean(x)\n            best_v_l = np.mean(residuals)\n            best_v_r = np.mean(residuals)\n        stump_preds = np.where(x <= best_split, best_v_l, best_v_r)\n        y_hat += learning_rate * stump_preds\n        residuals = y - y_hat\n    return np.round(y_hat, 4).tolist()"}
{"task_id": 471, "completion_id": 0, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    if next_state is None:\n        target = reward\n    else:\n        max_action = np.argmax(q_table[next_state])\n        num_actions = len(q_table[next_state])\n        expectation = sum(((1 - epsilon + epsilon / num_actions if a == max_action else epsilon / num_actions) * q for (a, q) in enumerate(q_table[next_state])))\n        target = reward + gamma * expectation\n    q_table[state][action] += lr * (target - q_table[state][action])\n    q_table = [[round(val, 4) for val in row] for row in q_table]\n    return q_table"}
{"task_id": 474, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    (X_train, X_val, Y_train, Y_val) = ([], [], [], [])\n    for i in range(m):\n        x_train = np.round([(random.uniform(i // 2 + 0.1, i // 2 + 0.9), random.uniform(i % 2 * interval + 0.1, i % 2 * interval + 0.9)) for _ in range(n_train)], 4)\n        X_train.append(x_train)\n        Y_train.append(np.full(n_train, (i - 0.5) * 2))\n        x_val = np.round([(random.uniform(i // 2 + 0.1, i // 2 + 0.9), random.uniform(i % 2 * interval + 0.1, i % 2 * interval + 0.9)) for _ in range(n_val)], 4)\n        X_val.append(x_val)\n        Y_val.append(np.full(n_val, (i - 0.5) * 2))\n    return (np.vstack(X_train), np.vstack(X_val), np.hstack(Y_train), np.hstack(Y_val))"}
{"task_id": 475, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * np.square(grad)\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 479, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    n_arms = len(rewards[0])\n    arm_estimates = [ev_prior for _ in range(n_arms)]\n    arm_pulls = [0 for _ in range(n_arms)]\n    for t in range(len(rewards)):\n        if np.random.random() < epsilon:\n            arm = np.random.randint(0, n_arms)\n        else:\n            max_estimate = max(arm_estimates)\n            max_arms = [i for (i, estimate) in enumerate(arm_estimates) if estimate == max_estimate]\n            arm = min(max_arms)\n        reward = rewards[t][arm]\n        arm_pulls[arm] += 1\n        arm_estimates[arm] += (reward - arm_estimates[arm]) / arm_pulls[arm]\n    return [round(estimate, 4) for estimate in arm_estimates]"}
{"task_id": 481, "completion_id": 0, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2))\n\n    def get_neighbors(point_idx):\n        neighbors = []\n        for i in range(len(data)):\n            if euclidean_distance(data[point_idx], data[i]) < eps:\n                neighbors.append(i)\n        return neighbors\n    labels = [0] * len(data)\n    cluster_id = 0\n    for i in range(len(data)):\n        if labels[i] != 0:\n            continue\n        neighbors = get_neighbors(i)\n        if len(neighbors) < min_samples:\n            labels[i] = -1\n            continue\n        cluster_id += 1\n        labels[i] = cluster_id\n        j = 0\n        while j < len(neighbors):\n            if labels[neighbors[j]] == -1:\n                labels[neighbors[j]] = cluster_id\n            elif labels[neighbors[j]] == 0:\n                labels[neighbors[j]] = cluster_id\n                neighbor_neighbors = get_neighbors(neighbors[j])\n                if len(neighbor_neighbors) >= min_samples:\n                    neighbors.extend(neighbor_neighbors)\n            j += 1\n    return labels"}
{"task_id": 482, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y, dtype='int')\n    input_shape = y.shape\n    if input_shape and input_shape[-1] > 1:\n        raise ValueError('y_true should be a 1D array, got an array of shape {} instead.'.format(input_shape))\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    elif num_classes < np.max(y) + 1 or num_classes < 0:\n        raise ValueError('Number of classes should be non-negative and greater than max(y), but {} was provided.'.format(num_classes))\n    n = y.shape[0]\n    categorical = np.zeros((n, num_classes), dtype=np.int)\n    categorical[np.arange(n), y] = 1\n    return categorical"}
{"task_id": 485, "completion_id": 0, "solution": "import numpy as np\nclass Node:\n\n    def __init__(self, split_point=None, left=None, right=None, label=None):\n        self.split_point = split_point\n        self.left = left\n        self.right = right\n        self.label = label\ndef build_tree(X, y, depth=0, max_depth=3):\n    if depth == max_depth or len(X) < 2:\n        return Node(label=np.mean(y))\n    split_point = find_split_point(X, y)\n    left_indices = X <= split_point\n    right_indices = X > split_point\n    left = build_tree(X[left_indices], y[left_indices], depth + 1, max_depth)\n    right = build_tree(X[right_indices], y[right_indices], depth + 1, max_depth)\n    return Node(split_point, left, right)\ndef find_split_point(X, y):\n    split_points = np.unique(X)\n    min_sse = float('inf')\n    best_split_point = None\n    for split_point in split_points:\n        left_indices = X <= split_point\n        right_indices = X > split_point\n        sse = sum((y[left_indices] - np.mean(y[left_indices])) ** 2) + sum((y[right_indices] - np.mean(y[right_indices])) ** 2)\n        if sse < min_sse:\n            min_sse = sse\n            best_split_point = split_point\n    return best_split_point\ndef predict(tree, X):\n    if tree.label is not None:\n        return tree.label\n    elif X <= tree.split_point:\n        return predict(tree.left, X)\n    else:\n        return predict(tree.right, X)\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    if len(X_train) == 0:\n        return []\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    tree = build_tree(X_train, y_train, max_depth=max_depth)\n    return [predict(tree, x) for x in X_test]"}
{"task_id": 490, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not x:\n        return []\n    x = np.array(x)\n    diag_matrix = np.diag(x)\n    return diag_matrix.tolist()"}
{"task_id": 491, "completion_id": 0, "solution": "from collections import Counter, defaultdict\nimport itertools\nclass TreeNode:\n\n    def __init__(self, item, count, parent):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.next = None\n\n    def increment(self, count):\n        self.count += count\ndef construct_tree(transactions, min_sup):\n    header_table = defaultdict(int)\n    for transaction in transactions:\n        for item in transaction:\n            header_table[item] += 1\n    header_table = {k: v for (k, v) in header_table.items() if v >= min_sup}\n    sorted_items = [v[0] for v in sorted(header_table.items(), key=lambda kv: (-kv[1], kv[0]))]\n    if len(sorted_items) == 0:\n        return (None, None)\n    tree = TreeNode(sorted_items[0], header_table[sorted_items[0]], None)\n    for transaction in transactions:\n        sorted_transaction = [item for item in transaction if item in header_table]\n        sorted_transaction.sort(key=lambda item: (header_table[item], item), reverse=True)\n        current_tree_node = tree\n        for item in sorted_transaction:\n            if item in current_tree_node.children:\n                current_tree_node = current_tree_node.children[item]\n                current_tree_node.increment(1)\n            else:\n                new_tree_node = TreeNode(item, 1, current_tree_node)\n                current_tree_node.children[item] = new_tree_node\n                if header_table[item][1] is None:\n                    header_table[item][1] = new_tree_node\n                else:\n                    current = header_table[item][1]\n                    while current.next is not None:\n                        current = current.next\n                    current.next = new_tree_node\n                current_tree_node = new_tree_node\n    return (tree, header_table)\ndef fp_growth(transactions, min_sup):\n    (tree, header_table) = construct_tree(transactions, min_sup)\n    if tree is None:\n        return []\n    frequent_itemsets = []\n    mine_frequent_patterns(header_table, set(), frequent_itemsets)\n    return frequent_itemsets"}
{"task_id": 492, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    if degree < 0:\n        return -1\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    X = np.column_stack([np.ones(n_samples), X])\n    for deg in range(1, degree + 1):\n        for item in combinations_with_replacement(range(1, n_features + 1), deg):\n            X = np.column_stack([X, np.prod(X[:, item], axis=1)])\n    return X.tolist()"}
{"task_id": 493, "completion_id": 0, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"\n    Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    y = np.array(y)\n    if len(y) == 0:\n        return -1\n    y_mean = np.mean(y)\n    squared_diffs = np.square(y - y_mean)\n    return round(np.mean(squared_diffs), 4)"}
{"task_id": 496, "completion_id": 0, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(x, (list, np.ndarray)):\n        x = [x]\n    y = [round(slope * i + intercept, 4) for i in x]\n    grad = [round(slope, 4) for _ in x]\n    grad2 = [round(0, 4) for _ in x]\n    return (y, grad, grad2)"}
{"task_id": 499, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    data_standardized = (data - np.mean(data, axis=0)) / np.std(data, axis=0, ddof=1)\n    data_standardized[np.isnan(data_standardized)] = 0\n    cov_matrix = np.cov(data_standardized, rowvar=False, ddof=1)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(cov_matrix)\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    max_abs_cols = np.argmax(np.abs(eigenvectors), axis=0)\n    signs = np.sign(eigenvectors[max_abs_cols, range(eigenvectors.shape[1])])\n    eigenvectors *= signs\n    if 1 <= k <= data.shape[1]:\n        projected_data = np.dot(data_standardized, eigenvectors[:, :k])\n        return np.round(projected_data, 4).tolist()\n    else:\n        return -1"}
{"task_id": 500, "completion_id": 0, "solution": "import numpy as np\nfrom sklearn.tree import DecisionTreeRegressor\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    ensemble = []\n    y_pred = np.full_like(y_train, np.mean(y_train), dtype=np.float64)\n    for _ in range(n_estimators):\n        residuals = y_train - y_pred\n        stump = DecisionTreeRegressor(max_depth=1)\n        stump.fit(X_train, residuals)\n        ensemble.append(stump)\n        y_pred += learning_rate * stump.predict(X_train)\n    y_pred_test = np.full_like(y_train, np.mean(y_train), dtype=np.float64)\n    for stump in ensemble:\n        y_pred_test += learning_rate * stump.predict(X_test)\n    y_pred_test = np.where(y_pred_test > 0.5, 1, 0)\n    return y_pred_test.tolist()"}
{"task_id": 505, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.size == 0:\n        return []\n    (m, n_v) = X.shape\n    n_h = W.shape[1]\n    h0_prob = sigmoid(np.dot(X, W) + hbias)\n    h_prob = h0_prob\n    for _ in range(k):\n        v_prob = sigmoid(np.dot(h_prob, W.T) + vbias)\n        h_prob = sigmoid(np.dot(v_prob, W) + hbias)\n    pos_grad = np.dot(X.T, h0_prob)\n    neg_grad = np.dot(v_prob.T, h_prob)\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n    W_new = W_new.round(4).tolist()\n    return W_new"}
{"task_id": 509, "completion_id": 0, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    if len(x) != len(y):\n        return -1\n    return round(np.max(np.abs(x - y)), 4)"}
{"task_id": 510, "completion_id": 0, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    epsilon = np.finfo(float).eps\n    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n    reconstruction_loss = -np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - np.power(t_mean, 2) - np.exp(t_log_var))\n    loss = (reconstruction_loss + kl_divergence) / y.shape[0]\n    return round(loss, 6)"}
{"task_id": 513, "completion_id": 0, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    linear_terms = X.dot(w)\n    interaction_terms = 0.5 * np.sum(np.power(X.dot(V), 2) - np.power(X.dot(np.power(V, 2)), 1 / 2), axis=1)\n    predictions = w0 + linear_terms + interaction_terms\n    return [round(pred, 4) for pred in predictions]"}
{"task_id": 517, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    z = np.array(z)\n    sigmoid = 1 / (1 + np.exp(-z))\n    sigmoid = np.round(sigmoid, 4)\n    if isinstance(z, np.ndarray):\n        return sigmoid.tolist()\n    else:\n        return sigmoid.item()"}
{"task_id": 518, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 520, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, list):\n        return [sigmoid_grad(sublist) for sublist in z]\n    else:\n        return np.round(z * (1 - z), 4)"}
{"task_id": 528, "completion_id": 0, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    (x1_min, x1_max) = (X[:, 0].min(), X[:, 0].max())\n    (x2_min, x2_max) = (X[:, 1].min(), X[:, 1].max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (x1_grid, x2_grid) = np.meshgrid(x1_plot, x2_plot)\n    Z = W[0] * x1_grid + W[1] * x2_grid + b\n    Z = np.where(Z >= 0, 1, -1)\n    return Z.tolist()"}
{"task_id": 537, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    X_train_0 = X_train[y_train == 0]\n    X_train_1 = X_train[y_train == 1]\n    means = [np.mean(X_train_0, axis=0), np.mean(X_train_1, axis=0)]\n    stds = [np.std(X_train_0, axis=0), np.std(X_train_1, axis=0)]\n    eps = 1e-09\n    stds[0] += eps\n    stds[1] += eps\n    priors = [len(X_train_0) / len(X_train), len(X_train_1) / len(X_train)]\n    y_pred = []\n    for x in X_test:\n        log_likelihoods = [np.sum(np.log(1 / np.sqrt(2 * np.pi * stds[0]) * np.exp(-(x - means[0]) ** 2 / (2 * stds[0] ** 2))), axis=0), np.sum(np.log(1 / np.sqrt(2 * np.pi * stds[1]) * np.exp(-(x - means[1]) ** 2 / (2 * stds[1] ** 2))), axis=0)]\n        log_posteriors = [log_likelihoods[0] + np.log(priors[0]), log_likelihoods[1] + np.log(priors[1])]\n        y_pred.append(np.argmax(log_posteriors))\n    return y_pred"}
{"task_id": 539, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost.\n    \n    Parameters:\n    AL (np.ndarray): A vector of shape (1,m) or (m,) holding the model probabilities.\n    Y (np.ndarray): A vector of shape (1,m) or (m,) holding the true labels.\n    \n    Returns:\n    float: The binary cross-entropy cost.\n    \"\"\"\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    cost = -1 / Y.shape[0] * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    return round(cost, 4)"}
{"task_id": 552, "completion_id": 0, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    if t < 0 or t >= len(observations):\n        return []\n    (pi, A, B) = (hmm['pi'], hmm['A'], hmm['B'])\n    (M, N) = (len(A), len(B[0]))\n    alpha = np.zeros((M, len(observations)))\n    alpha[:, 0] = pi * B[:, observations[0]]\n    for i in range(1, len(observations)):\n        alpha[:, i] = np.dot(alpha[:, i - 1], A) * B[:, observations[i]]\n    beta = np.zeros((M, len(observations)))\n    beta[:, -1] = 1\n    for i in range(len(observations) - 2, -1, -1):\n        beta[:, i] = np.dot(A, B[:, observations[i + 1]] * beta[:, i + 1])\n    gamma = alpha[:, t] * beta[:, t]\n    gamma /= gamma.sum()\n    return [round(g, 4) for g in gamma]"}
{"task_id": 555, "completion_id": 0, "solution": "import numpy as np\nfrom collections import deque\nfrom scipy.spatial.distance import pdist, squareform\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    dists = squareform(pdist(data))\n    neighborhoods = [np.where(dists[i] < eps)[0] for i in range(len(data))]\n    core_points = [i for i in range(len(neighborhoods)) if len(neighborhoods[i]) >= min_samples]\n    labels = np.full(len(data), fill_value=-1)\n    cluster_id = 0\n    for core_point in core_points:\n        if labels[core_point] == -1:\n            cluster_id += 1\n            labels[core_point] = cluster_id\n            queue = deque([core_point])\n            while queue:\n                current_point = queue.popleft()\n                for neighbor in neighborhoods[current_point]:\n                    if labels[neighbor] == -1:\n                        labels[neighbor] = cluster_id\n                        queue.append(neighbor)\n    return labels.tolist()"}
{"task_id": 561, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.stats import multivariate_normal\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    (N, D) = data.shape\n    pi = np.full(shape=k, fill_value=1 / k)\n    mu = np.random.rand(k, D)\n    sigma = np.array([np.eye(D)] * k)\n    r = np.zeros((N, k))\n    for _ in range(max_iter):\n        for i in range(N):\n            r[i] = pi * multivariate_normal.pdf(data[i], mean=mu, cov=sigma)\n            r[i] /= np.sum(r[i])\n        N_k = np.sum(r, axis=0)\n        pi = N_k / N\n        mu = r.T @ data / N_k.reshape(-1, 1)\n        sigma = np.zeros((k, D, D))\n        for i in range(N):\n            for j in range(k):\n                diff = data[i] - mu[j]\n                sigma[j] += r[i, j] * np.outer(diff, diff)\n        sigma /= N_k.reshape(-1, 1, 1)\n        if np.all(np.abs(r - r_old) < epsilon):\n            break\n        r_old = r.copy()\n    labels = np.argmax(r, axis=1)\n    order = np.argsort(mu[:, 0])\n    remap = np.zeros(k, dtype=int)\n    for i in range(k):\n        remap[order[i]] = i\n    labels = remap[labels]\n    return labels.tolist()"}
{"task_id": 562, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n    dist = np.sum(data ** 2, axis=1).reshape(-1, 1) + np.sum(data ** 2, axis=1) - 2 * np.dot(data, data.T)\n    similarity = np.exp(-gamma * dist)\n    degree = np.diag(np.sum(similarity, axis=1))\n    if method == 'normalized':\n        sqrt_inv_degree = np.diag(1 / np.sqrt(np.diag(degree)))\n        laplacian = sqrt_inv_degree @ (degree - similarity) @ sqrt_inv_degree\n    else:\n        laplacian = degree - similarity\n    (vals, vecs) = np.linalg.eigh(laplacian)\n    indices = np.argsort(vals)[:n_cluster]\n    vecs = vecs[:, indices]\n    if method == 'normalized':\n        vecs /= np.linalg.norm(vecs, axis=1).reshape(-1, 1)\n    centroids = vecs[:n_cluster]\n    labels = np.argmin(np.linalg.norm(vecs[:, np.newaxis] - centroids, axis=2), axis=1)\n    sorted_indices = np.argsort(np.sum(vecs[labels] * labels[:, np.newaxis], axis=0))\n    labels = sorted_indices[labels]\n    return labels.tolist()"}
{"task_id": 563, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.dot(alpha * y_data, G[i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    w = np.dot(alpha * y_data, X_data)\n    return (np.round(w, 4).tolist(), np.round(b, 4))"}
{"task_id": 564, "completion_id": 0, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    elif task_type == 'classification':\n        for child in root.child:\n            if child.x == features[root.label]:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        if features[root.label] <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)"}
{"task_id": 565, "completion_id": 0, "solution": "import numpy as np\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n\n    def entropy(labels):\n        (_, counts) = np.unique(labels, return_counts=True)\n        p = counts / len(labels)\n        return -np.sum(p * np.log2(p))\n\n    def conditional_entropy(feature, labels):\n        (values, counts) = np.unique(feature, return_counts=True)\n        p = counts / len(feature)\n        h = 0\n        for (value, count) in zip(values, counts):\n            indices = np.where(feature == value)[0]\n            subset_labels = labels[indices]\n            h += p[value] * entropy(subset_labels)\n        return h\n    initial_entropy = entropy(y)\n    gains = []\n    for i in range(X.shape[1]):\n        feature = X[:, i]\n        conditional_ent = conditional_entropy(feature, y)\n        gain = initial_entropy - conditional_ent\n        gains.append(gain)\n    max_gain_index = np.argmax(gains)\n    max_gain = gains[max_gain_index]\n    return (max_gain_index, round(max_gain, 6))"}
{"task_id": 566, "completion_id": 0, "solution": "import numpy as np\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n\n    def c(n):\n        return 2.0 * (np.log(n - 1) + 0.5772156649) - 2.0 * (n - 1.0) / n if n > 1 else 0\n    (n_samples, n_features) = data.shape\n    height_limit = np.log2(sample_size)\n    scores = np.zeros(n_samples)\n    for _ in range(n_trees):\n        sample_indices = np.random.choice(n_samples, size=sample_size, replace=False)\n        sample_data = data[sample_indices]\n        feature_indices = np.random.choice(n_features, size=int(np.ceil(np.log2(sample_size))), replace=False)\n        tree = {}\n        for feature in feature_indices:\n            split = np.random.uniform(low=np.min(sample_data[:, feature]), high=np.max(sample_data[:, feature]))\n            left_indices = np.where(sample_data[:, feature] < split)[0]\n            right_indices = np.where(sample_data[:, feature] >= split)[0]\n            tree[feature] = (split, left_indices, right_indices)\n        path_lengths = np.zeros(n_samples)\n        stack = [(0, tree)]\n        while stack:\n            (depth, node) = stack.pop()\n            if depth == height_limit or len(node) == 0:\n                continue\n            for (feature, (split, left_indices, right_indices)) in node.items():\n                split_indices = np.where(data[:, feature] < split)[0]\n                stack.append((depth + 1, {f: t for (f, t) in node.items() if f != feature and all((t[0] < split for t in node[f]))}))\n                stack.append((depth + 1, {f: t for (f, t) in node.items() if f != feature and all((t[0] >= split for t in node[f]))}))\n                path_lengths[split_indices] += c(len(split_indices)) - c(len(left_indices))\n        scores += path_lengths\n    scores /= n_trees\n    phi = 2 * np.log(n_samples - 1) - 2 * (n_samples - 1) / n_samples\n    scores = np.power(2, -scores / phi)\n    if epsilon == 0:\n        return []\n    threshold = np.percentile(scores, 100 * (1 - epsilon))\n    outliers = np.where(scores > threshold)[0]\n    return sorted(outliers.tolist())"}
{"task_id": 568, "completion_id": 0, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    empirical_distribution = defaultdict(int)\n    for (x, y) in zip(X_train, y_train):\n        empirical_distribution[tuple(x), y] += 1\n    weights = np.zeros(X_train.shape[1])\n    for _ in range(n_iter):\n        update = np.zeros_like(weights)\n        for ((x, y), count) in empirical_distribution.items():\n            feature_vector = np.array([int(xi == xi_train) for (xi, xi_train) in zip(x, X_train)])\n            update += count * feature_vector * math.exp(np.dot(weights, feature_vector))\n        update /= sum(empirical_distribution.values())\n        weights += update\n        if np.max(np.abs(update)) < epsilon:\n            break\n    y_pred = []\n    for x in X_test:\n        conditional_probabilities = defaultdict(float)\n        for y in np.unique(y_train):\n            feature_vector = np.array([int(xi == xi_train) for (xi, xi_train) in zip(x, X_train)])\n            conditional_probabilities[y] = math.exp(np.dot(weights, feature_vector))\n        total = sum(conditional_probabilities.values())\n        for y in conditional_probabilities:\n            conditional_probabilities[y] /= total\n        y_pred.append(max(conditional_probabilities, key=conditional_probabilities.get))\n    return y_pred"}
{"task_id": 569, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    word_count = Counter()\n    for document in data:\n        word_count.update(set(document[1]))\n    total_documents = len(data)\n    word_ratio = {word: round(count / total_documents, 4) for (word, count) in word_count.items()}\n    sorted_words = sorted(word_ratio.items(), key=lambda x: x[1], reverse=True)\n    if cut_off is None:\n        common_words = set(word_count.keys())\n    elif cut_off <= 0:\n        common_words = set()\n    else:\n        common_words = set((word for (word, _) in sorted_words[:cut_off]))\n    return (sorted_words, common_words)"}
{"task_id": 571, "completion_id": 0, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           -1).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.dot(X.T, alpha * y)\n    b = np.mean(y - np.dot(X, w))\n    w_list = [round(wi, 4) for wi in w]\n    b = round(b, 4)\n    return (w_list, b)"}
{"task_id": 572, "completion_id": 0, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    n = len(data)\n    distances = np.zeros((n, n))\n    reach_distances = np.zeros((n, n))\n    lrds = np.zeros(n)\n    lofs = np.zeros(n)\n    for i in range(n):\n        for j in range(i, n):\n            distances[i, j] = distances[j, i] = np.linalg.norm(data[i] - data[j])\n    for i in range(n):\n        distances[i, i] = np.inf\n        k_distances = np.partition(distances[i], k)[k]\n        neighbours = np.argwhere(distances[i] <= k_distances).flatten()\n        for j in neighbours:\n            reach_distances[i, j] = max(k_distances, distances[i, j])\n            reach_distances[j, i] = reach_distances[i, j]\n        lrds[i] = k / np.sum(reach_distances[i, neighbours])\n        lofs[i] = np.sum(lrds[neighbours] / k) / lrds[i]\n    lofs = np.round(lofs, 4)\n    outlier_indices = np.argwhere(lofs > epsilon).flatten()\n    return (lofs.tolist(), outlier_indices.tolist())"}
{"task_id": 574, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = np.zeros((m * n_train, 2))\n    y_train = np.zeros(m * n_train)\n    X_val = np.zeros((m * n_val, 2))\n    y_val = np.zeros(m * n_val)\n    for c in range(m):\n        base = 10 * np.floor(c / 2)\n        X_train[c * n_train:(c + 1) * n_train, :] = np.round(np.random.uniform(low=base + 1, high=base + 9, size=(n_train, 2)), 4)\n        y_train[c * n_train:(c + 1) * n_train] = c\n        X_val[c * n_val:(c + 1) * n_val, :] = np.round(np.random.uniform(low=base + 1, high=base + 9, size=(n_val, 2)), 4)\n        y_val[c * n_val:(c + 1) * n_val] = c\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 579, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    centers = X[:k].tolist()\n    labels = [0] * len(X)\n    for _ in range(max_iters):\n        new_labels = []\n        for point in X:\n            distances = [np.linalg.norm(np.array(point) - np.array(center)) for center in centers]\n            new_labels.append(np.argmin(distances))\n        if labels == new_labels:\n            break\n        labels = new_labels\n        for i in range(k):\n            points_in_cluster = np.array([x for (x, label) in zip(X, labels) if label == i])\n            if len(points_in_cluster) > 0:\n                centers[i] = np.mean(points_in_cluster, axis=0).tolist()\n    centers = [[round(coord, 4) for coord in center] for center in centers]\n    return (labels, centers)"}
{"task_id": 581, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    (m, n) = X.shape\n    w = np.zeros(n)\n    b = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return (list(np.round(w, 4)), np.round(b, 4))\n    for _ in range(iterations):\n        y_hat = np.dot(X, w) + b\n        r = y - y_hat\n        dw = (-2 * np.dot(X.T, r) + l1_penalty * np.sign(w) + 2 * l2_penalty * w) / m\n        db = -2 * np.sum(r) / m\n        w -= learning_rate * dw\n        b -= learning_rate * db\n    return (list(np.round(w, 4)), np.round(b, 4))"}
{"task_id": 591, "completion_id": 0, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    x = np.array(x)\n    for layer_weights in weights[:-1]:\n        x = np.append(1, x)\n        x = np.dot(layer_weights, x)\n        x = np.maximum(x, 0)\n    x = np.append(1, x)\n    x = np.dot(weights[-1], x)\n    return np.round(x, 4)\nweights = [[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]], [[0.7, 0.8, 0.9], [1.0, 1.1, 1.2]]]\nx = [0.1, 0.2]"}
{"task_id": 595, "completion_id": 0, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    (n_samples, n_features) = X.shape\n    centroids = X[:k]\n    labels = np.zeros(n_samples, dtype=int)\n    for _ in range(max_iters):\n        for (i, sample) in enumerate(X):\n            distances = np.linalg.norm(centroids - sample, axis=1)\n            labels[i] = np.argmin(distances)\n        new_centroids = np.empty((k, n_features))\n        for i in range(k):\n            if np.sum(labels == i) == 0:\n                new_centroids[i] = centroids[i]\n            else:\n                new_centroids[i] = np.mean(X[labels == i], axis=0)\n        if np.allclose(centroids, new_centroids, atol=0.0001):\n            break\n        centroids = new_centroids\n    centroids = sorted(centroids.tolist())\n    centroids = [[round(val, 4) for val in centroid] for centroid in centroids]\n    return centroids"}
