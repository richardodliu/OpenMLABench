{"task_id": 0, "completion_id": 0, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    data = np.concatenate((np.ones((data.shape[0], 1)), data), axis=1)\n    X = data[:, :-1]\n    y = data[:, -1]\n    try:\n        I = np.identity(X.shape[1])\n        w = np.linalg.inv(X.T @ X + alpha * I) @ X.T @ y\n        return list(np.round(w, 4))\n    except np.linalg.LinAlgError:\n        return -1"}
{"task_id": 1, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    a = np.zeros(n_samples)\n    b = 0.0\n    K = np.dot(X_train, X_train.T)\n    for _ in range(n_iter):\n        update_count = 0\n        for i in range(n_samples):\n            activation = np.dot(a * y_train, K[i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                a[i] += eta\n                b += eta * y_train[i]\n                update_count += 1\n                break\n        if update_count == 0:\n            break\n    w = np.dot(a * y_train, X_train)\n    return ([round(x, 4) for x in w.tolist()], round(b, 4))"}
{"task_id": 2, "completion_id": 0, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    links = {}\n    identity = lambda mu: mu\n    inv_identity = lambda eta: eta\n    d_identity = lambda mu: np.ones_like(mu)\n    links['identity'] = {'link': np.vectorize(identity), 'inv_link': np.vectorize(inv_identity), 'derivative': np.vectorize(d_identity)}\n    log = lambda mu: np.log(mu)\n    inv_log = lambda eta: np.exp(eta)\n    d_log = lambda mu: 1 / mu\n    links['log'] = {'link': np.vectorize(log), 'inv_link': np.vectorize(inv_log), 'derivative': np.vectorize(d_log)}\n    logit = lambda mu: np.log(mu / (1 - mu))\n    inv_logit = lambda eta: 1 / (1 + np.exp(-eta))\n    d_logit = lambda mu: 1 / (mu * (1 - mu))\n    links['logit'] = {'link': np.vectorize(logit), 'inv_link': np.vectorize(inv_logit), 'derivative': np.vectorize(d_logit)}\n    return links\nmu = np.array([0.2, 0.8])\nlinks = glm_links()\neta = links['logit']['link'](mu)"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    \"\"\"Compute the depth of the leaf reached by every sample in a random isolation tree.\n\n    The tree is built following the rules described in the task statement and the\n    random seed must be set to 0 so that results are reproducible.\n\n    Args:\n        data: A 2-D NumPy array of shape (n_samples, n_features).\n\n    Returns:\n        A list of length *n_samples* where the *i-th* element is the number of\n        edges from the root to the leaf that contains the *i-th* sample.\n    \"\"\"\n    np.random.seed(0)\n    result = np.zeros(len(data), dtype=int)\n\n    def traverse(indices, depth):\n        if len(indices) < 3:\n            result[indices] = depth\n        else:\n            f = np.random.choice(data.shape[1])\n            (down, up) = (np.min(data[indices, f]), np.max(data[indices, f]))\n            v = np.random.uniform(down, up)\n            left_indices = indices[data[indices, f] <= v]\n            right_indices = indices[data[indices, f] > v]\n            traverse(left_indices, depth + 1)\n            traverse(right_indices, depth + 1)\n    traverse(np.arange(len(data)), 0)\n    return result.tolist()\ndata = np.arange(5).reshape(-1, 1)"}
{"task_id": 7, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom itertools import chain, combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count. If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    N = len(transactions)\n    min_count = math.ceil(minsup * N)\n    items = set(chain.from_iterable(transactions))\n    transactions = list(map(set, transactions))\n    itemsets = [set([item]) for item in items]\n    frequent_itemsets = {}\n    while itemsets:\n        counts = Counter(itemsets)\n        for itemset in itemsets:\n            count = sum((itemset <= transaction for transaction in transactions))\n            if count >= min_count:\n                frequent_itemsets[tuple(sorted(itemset))] = count\n        new_itemsets = []\n        for itemset in itemsets:\n            for item in items - itemset:\n                new_itemset = itemset | set([item])\n                if new_itemset not in new_itemsets:\n                    new_itemsets.append(new_itemset)\n        itemsets = new_itemsets\n    return frequent_itemsets"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    if k > data.shape[0]:\n        raise ValueError('k must be less than or equal to the number of data points')\n    centers = data[:k].tolist()\n    for _ in range(max_iter):\n        labels = np.zeros(data.shape[0], dtype=int)\n        for (i, sample) in enumerate(data):\n            distances = np.sqrt(np.sum((centers - sample) ** 2, axis=1))\n            labels[i] = np.argmin(distances)\n        new_centers = np.copy(centers)\n        for i in range(k):\n            if np.sum(labels == i) == 0:\n                new_centers[i] = data[np.random.randint(data.shape[0])]\n            else:\n                new_centers[i] = np.mean(data[labels == i], axis=0)\n        new_centers = np.round(new_centers, 4).tolist()\n        if np.max(np.sqrt(np.sum((np.array(centers) - np.array(new_centers)) ** 2, axis=1))) < epsilon:\n            break\n        centers = new_centers\n    return (centers, labels.tolist())"}
{"task_id": 13, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    S = np.zeros((data.shape[1], data.shape[1]))\n    for i in range(data.shape[1]):\n        for j in range(i + 1, data.shape[1]):\n            common_raters = np.nonzero(np.logical_and(data[:, i] > 0, data[:, j] > 0))[0]\n            if common_raters.size > 0:\n                (v1, v2) = (data[common_raters, i], data[common_raters, j])\n                if criterion == 'cosine':\n                    (m1, s1) = (v1.mean(), v1.std())\n                    (m2, s2) = (v2.mean(), v2.std())\n                    if s1 > 0.001 and s2 > 0.001:\n                        (v1, v2) = (v1 - m1, v2 - m2)\n                if criterion == 'cosine':\n                    S[i, j] = S[j, i] = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n                else:\n                    S[i, j] = S[j, i] = np.corrcoef(v1, v2)[0, 1]\n    rated_items = np.nonzero(data[user_ind, :] > 0)[0]\n    score_dict = defaultdict(int)\n    for t in np.where(data[user_ind, :] == 0)[0]:\n        for i in rated_items:\n            score_dict[t] += data[user_ind, i] * S[t, i]\n        score_dict[t] /= np.abs(S[t, rated_items]).sum()\n    sorted_items = sorted(score_dict, key=score_dict.get, reverse=True)\n    return sorted_items[:k]\ndata = np.array([[4, 0, 3, 0], [0, 5, 0, 2], [1, 0, 2, 4]])"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    (n_samples, n_features) = X.shape\n    (total_gain, best_feature, best_threshold) = (-np.inf, None, None)\n    sorted_data = [sorted(zip(X[:, f], g, h)) for f in range(n_features)]\n    for (feature_idx, data) in enumerate(sorted_data):\n        (left_g, left_h, left_n) = (0, 0, 0)\n        (right_g, right_h, right_n) = (np.sum(g), np.sum(h), n_samples)\n        for i in range(1, n_samples):\n            (value, g_i, h_i) = data[i - 1]\n            if value != data[i][0]:\n                left_g += g_i\n                left_h += h_i\n                left_n += 1\n                right_g -= g_i\n                right_h -= h_i\n                right_n -= 1\n                if left_n >= 2 and right_n >= 2:\n                    gain = -(left_g ** 2 / (left_h + lam) + right_g ** 2 / (right_h + lam)) + 0.5 * (left_h + right_h) / (left_h + right_h + lam) + gamma\n                    if gain > total_gain:\n                        (total_gain, best_feature, best_threshold) = (gain, feature_idx, (value + data[i][0]) / 2)\n    return (best_feature, best_threshold) if best_feature is not None else None"}
{"task_id": 20, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    x = np.array(x)\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    sigmoid_x = np.around(sigmoid_x, 4)\n    gradient_x = np.around(gradient_x, 4)\n    if isinstance(x, np.ndarray):\n        sigmoid_x = sigmoid_x.tolist()\n        gradient_x = gradient_x.tolist()\n    return (sigmoid_x, gradient_x)"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n\n    def train_stump(weights, x, y):\n        n = len(x)\n        xyw = sorted([(x[i], y[i], weights[i]) for i in range(n)], key=lambda x: x[0])\n        sorted_weights = [xyw[i][2] for i in range(n)]\n        pos_weights = [0.0]\n        neg_weights = [0.0]\n        for i in range(n):\n            pos_weights.append(pos_weights[-1] + xyw[i][2])\n            neg_weights.append(neg_weights[-1] + (1 - xyw[i][2]))\n        (pos_err, neg_err) = (float('inf'), float('inf'))\n        for i in range(n):\n            if i > 0 and xyw[i - 1][0] == xyw[i][0]:\n                continue\n            err = 0.5 * (neg_weights[i] + pos_weights[-1] - pos_weights[i])\n            if err < pos_err:\n                (pos_err, d, theta) = (err, 0, (xyw[i - 1][0] + xyw[i][0]) / 2)\n            err = 0.5 * (pos_weights[i] + neg_weights[-1] - neg_weights[i])\n            if err < neg_err:\n                (neg_err, d, theta) = (err, 1, (xyw[i - 1][0] + xyw[i][0]) / 2)\n        return (d, theta, min(pos_err, neg_err))\n\n    def update_weights(stumps, weights, x, y):\n        n = len(y)\n        for i in range(n):\n            weights[i] *= math.exp(-stumps[i][2] * y[i] * predictor(stumps[i], x[i]))\n        Z = sum(weights)\n        weights[:] = [w / Z for w in weights]\n\n    def predictor(stump, x):\n        (d, theta) = stump\n        if d == 0:\n            return 1 if x <= theta else -1\n        return 1 if x > theta else -1\n    n = len(y_train)\n    weights = [1 / n] * n\n    stumps = []\n    err = 1.0\n    while err > epsilon:\n        (d, theta, err) = train_stump(weights, x_train, y_train)\n        if err < float('inf'):\n            stumps.append((d, theta))\n            update_weights(stumps, weights, x_train, y_train)\n    return [predictor(stumps[-1], x) for x in x_test]"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    predictions = []\n    for z in X_test:\n        g_z = np.sum(alpha * y_train * np.exp(-gamma * np.sum(np.abs(X_train - z) ** 2, axis=-1))) + b\n        predictions.append(1 if g_z >= 0 else -1)\n    return predictions"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    if not 1 <= k <= min(np.shape(X)):\n        return -1\n    X = np.array(X)\n    (u, s, vh) = np.linalg.svd(X, full_matrices=False)\n    u = u[:, :k]\n    s = np.diag(s[:k])\n    vh = vh[:k, :]\n    X_hat = u @ s @ vh\n    mse = np.mean((X - X_hat) ** 2)\n    X_hat = X_hat.tolist()\n    X_hat = [[round(y, 4) for y in x] for x in X_hat]\n    mse = round(mse, 4)\n    return (X_hat, mse)"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\nclass DecisionStump:\n\n    def __init__(self):\n        self.feature_idx = 0\n        self.threshold = 0\n        self.values = None\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    stumps = []\n    residuals = y_train.copy()\n    rss = np.sum(residuals ** 2)\n    while rss >= epsilon:\n        stump = DecisionStump()\n        min_rss = np.inf\n        for split in np.sort(x_train):\n            left_idx = x_train <= split\n            right_idx = ~left_idx\n            left_values = np.mean(residuals[left_idx])\n            right_values = np.mean(residuals[right_idx])\n            residuals_left = residuals[left_idx] - left_values\n            residuals_right = residuals[right_idx] - right_values\n            total_rss = np.sum(residuals_left ** 2) + np.sum(residuals_right ** 2)\n            if total_rss < min_rss:\n                min_rss = total_rss\n                stump.threshold = split\n                stump.values = (left_values, right_values)\n        stump.feature_idx = 0\n        stumps.append(stump)\n        residuals = y_train - predict_boosting_tree_residuals(x_train, stumps)\n        rss = np.sum(residuals ** 2)\n    return round(predict_boosting_tree_residuals([x_query], stumps)[0], 4)\ndef predict_boosting_tree_residuals(x_values, stumps):\n    x_values = np.array(x_values)\n    return sum((stump.values[x_values <= stump.threshold] for stump in stumps))"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Generates a random tensor where entries are 1.0 with a given probability.\n\n    Parameters:\n    shape (tuple of int): The desired shape of the tensor.\n    sparsity (float): The probability of each entry being 0.0 (in (0,1)).\n    seed (int, optional): A seed number for reproducible results. Defaults to None.\n\n    Returns:\n    ndarray: A tensor filled with 0.0s and 1.0s based on the sparsity probability.\n      If sparsity is out of range, returns -1.\n    \"\"\"\n    if sparsity <= 0 or sparsity >= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    return (np.random.rand(*shape) < sparsity).astype(float)"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n = data.shape[0]\n    median_index = np.argpartition(data[:, d], n // 2)[n // 2]\n    pivot = data[median_index, d]\n    left = [i for i in range(n) if data[i, d] < pivot]\n    right = [i for i in range(n) if data[i, d] > pivot]\n    return (median_index, left, right)"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input array must be one-dimensional'\n    assert stride > 0, 'Stride must be a positive integer'\n    assert len(x) >= frame_width, 'Input array length must be >= frame_width'\n    n_frames = (len(x) - frame_width) // stride + 1\n    shape = (n_frames, frame_width)\n    strides = (stride * x.itemsize, x.itemsize)\n    result = as_strided(x, shape=shape, strides=strides)\n    if not writeable:\n        result.flags.writeable = False\n    return result"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    if X.ndim != 2:\n        return False\n    if np.any(X < 0) or np.any(X > 1):\n        return False\n    row_sums = np.sum(X, axis=1)\n    if not np.allclose(row_sums, np.ones_like(row_sums), rtol=1e-08):\n        return False\n    return True"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    w = np.zeros(X.shape[1])\n    s = np.zeros(X.shape[1])\n    for _ in range(max_iter):\n        if batch_size >= X.shape[0]:\n            batch_indices = np.arange(X.shape[0])\n        else:\n            batch_indices = np.random.choice(X.shape[0], size=batch_size)\n        g = X[batch_indices].T @ (X[batch_indices] @ w - y[batch_indices]) / X.shape[0]\n        s = rho * s + (1 - rho) * g ** 2\n        w -= eta * g / np.sqrt(s + eps_station)\n        if np.linalg.norm(g) < epsilon:\n            break\n    return list(np.round(w, 4))"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"\n    SoftPlus function and its gradient.\n    \"\"\"\n    x = np.array(x)\n    if deriv:\n        result = 1 / (1 + np.exp(-np.log1p(np.exp(x))))\n    else:\n        result = np.log1p(np.exp(x))\n    result = np.round(result, 4)\n    if result.size == 1:\n        return result.item()\n    return result.tolist()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\nfrom collections import Counter\nimport numpy as np\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    if len(sequence) < N:\n        return float('-inf')\n    ngrams = [tuple(corpus[i:i + N]) for i in range(len(corpus) - N + 1)]\n    n_1grams = [tuple(corpus[i:i + N - 1]) for i in range(len(corpus) - N + 2)]\n    ngrams_counter = Counter(ngrams)\n    n_1grams_counter = Counter(n_1grams)\n    sequence_ngrams = [tuple(sequence[i:i + N]) for i in range(len(sequence) - N + 1)]\n    log_prob = 0\n    for ngram in sequence_ngrams:\n        n_1gram = ngram[:-1]\n        ngram_count = ngrams_counter[ngram]\n        n_1gram_count = n_1grams_counter[n_1gram]\n        if n_1gram_count == 0 or ngram_count == 0:\n            return float('-inf')\n        prob = ngram_count / n_1gram_count\n        log_prob += np.log2(prob)\n    return round(log_prob, 4)\ncorpus = ['the', 'dog', 'barked', 'at', 'the', 'cat']\nsequence = ['the', 'cat', 'barked']"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\ndef soft_threshold(rho, lambda_):\n    if rho < -lambda_:\n        return rho + lambda_\n    elif rho > lambda_:\n        return rho - lambda_\n    else:\n        return 0\ndef lasso_regression(X, y, degree, reg_factor, n_iterations=1000, tol=1e-06):\n    X = np.array(X)\n    y = np.array(y)\n    n_samples = len(X)\n    X_poly = np.zeros((n_samples, degree + 1))\n    for j in range(degree + 1):\n        X_poly[:, j] = X ** j\n    weights = np.zeros(degree + 1)\n    errors = y - X_poly.dot(weights)\n    old_weights = weights.copy()\n    for _ in range(n_iterations):\n        weights[0] = np.mean(errors)\n        for j in range(1, degree + 1):\n            rho = X_poly[:, j].dot(errors)\n            weights[j] = soft_threshold(rho, reg_factor) / X_poly[:, j].dot(X_poly[:, j])\n        errors = y - X_poly.dot(weights)\n        if np.max(np.abs(old_weights - weights)) < tol:\n            break\n        old_weights = weights.copy()\n    return [round(weight, 4) for weight in weights]"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    This function calculates the backward probability vector for a given time index.\n    \n    :param A: transition-probability matrix of shape (N, N)\n    :param B: emission-probability matrix of shape (N, M)\n    :param obs: list of observation indices (length T)\n    :param t: integer time index (0 \u2264 t < T)\n    :return: backward probabilities vector of shape (N,) rounded to 4 decimal places\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    N = A.shape[0]\n    beta = np.ones(N)\n    for i in range(t, -1, -1):\n        beta = np.dot(A, beta * B[:, obs[i]])\n    return [round(val, 4) for val in beta]"}
{"task_id": 65, "completion_id": 0, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    T = len(obs)\n    N = len(A)\n    if T == 0 or N == 0:\n        return 0.0\n    beta = np.zeros((T, N))\n    beta[-1, :] = 1.0\n    for t in reversed(range(T - 1)):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t + 1]] * beta[t + 1, :])\n    P = np.sum(pi * B[:, obs[0]] * beta[0, :])\n    return round(P, 6)"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    if S.shape[0] != A.shape[0] != A.shape[1] or S.shape[0] != B.shape[0]:\n        return -1\n    if not observations:\n        return -1\n    for ob in observations:\n        if ob < 0 or ob >= B.shape[1]:\n            return -1\n    alpha = np.zeros((S.shape[0], len(observations)))\n    alpha[:, 0] = S * B[:, observations[0]]\n    for t in range(1, len(observations)):\n        for j in range(S.shape[0]):\n            alpha[j, t] = np.sum(alpha[:, t - 1] * A[:, j] * B[j, observations[t]])\n    return round(np.sum(alpha[:, -1]), 4)"}
{"task_id": 70, "completion_id": 0, "solution": "from collections import Counter, defaultdict, namedtuple\nfrom itertools import chain, groupby\nclass Tree(namedtuple('Node', 'item count left right')):\n\n    def __repr__(self):\n        return 'Tree(item=%r, count=%r)' % (self.item, self.count)\nHeaderTable = defaultdict(lambda : [0, None])\nFrequent = set()\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    (ItemCounts, TransformedPrefixPaths) = init(transactions, min_support)\n    if not ItemCounts:\n        return []\n    FPTree = construct_tree(TransformedPrefixPaths, ItemCounts)\n    if not FPTree:\n        return []\n    ConditionalTrees = construct_conditional_trees(FPTree)\n    if not ConditionalTrees:\n        return []\n    recurse(FPTree, ConditionalTrees, ItemCounts, list(FPTree.item), [])\n    return list(map(list, Frequent))\ndef init(transactions, min_support):\n    ItemCounts = get_item_counts(transactions)\n    ItemCounts = {k: v for (k, v) in ItemCounts.items() if v >= min_support}\n    TransformedPrefixPaths = []\n    for transaction in transactions:\n        prefix_path = sorted(((itm, ItemCounts[itm]) for itm in transaction if itm in ItemCounts))\n        TransformedPrefixPaths.append(prefix_path)\n    TransformedPrefixPaths.sort(key=lambda x: (len(x), x))\n    return (ItemCounts, TransformedPrefixPaths)\ndef get_item_counts(transactions):\n    ItemCounts = Counter()\n    for transaction in transactions:\n        for item in transaction:\n            ItemCounts[item] += 1\n    return ItemCounts\ndef construct_tree(TransformedPrefixPaths, ItemCounts):\n    if not TransformedPrefixPaths:\n        return None\n    Item = TransformedPrefixPaths[0][0][0]\n    ItemCounts[Item] += 1\n    prefix_paths = []\n    for prefix_path in TransformedPrefixPaths:\n        if prefix_path:\n            prefix_path = list(prefix_path)\n            prefix_path.remove(prefix_path[0])\n        prefix_paths.append(prefix_path)\n    Tree = Tree(Item, ItemCounts[Item], None, construct_tree(prefix_paths, ItemCounts))\n    return Tree\ndef construct_conditional_trees(tree):\n    if not tree:\n        return None\n    Item = tree.item\n    if Item not in HeaderTable:\n        HeaderTable[Item][0] = tree.count\n        HeaderTable[Item][1] = None\n    else:\n        start = HeaderTable[Item][1]\n        while start and start.left:\n            start = start.left\n        start.left = Tree(Item, tree.count, None, start.left)\n    return (tree.item, construct_conditional_trees(tree.right))\ndef recurse(conditional_tree, conditional_trees, item_counts, suffix, prefix):\n    if not conditional_tree:\n        return\n    Item = conditional_tree.item\n    new_suffix = suffix.copy()\n    new_suffix.remove(Item)\n    new_prefix = prefix.copy()\n    new_prefix.append(Item)\n    if item_counts[Item] >= min_support:\n        Frequent.add(tuple(sorted(new_prefix)))\n    recurse(conditional_tree.right, conditional_trees[1], item_counts, new_suffix, new_prefix)\n    recurse(conditional_trees[0][1], conditional_trees[0][2], item_counts, new_suffix, [])"}
{"task_id": 75, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.spatial import distance\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    if type(k) != int or k < 1 or k > len(X_train):\n        return -1\n    y_pred = []\n    for test in X_test:\n        distances = []\n        for train in X_train:\n            dist = distance.euclidean(test, train)\n            distances.append(dist)\n        indices = np.argpartition(distances, k)[:k]\n        labels = [y_train[i] for i in indices]\n        y_pred.append(min(labels, key=labels.count))\n    return y_pred"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = 1e-15\n    L = -np.sum(y * np.log(y_pred + epsilon))\n    return round(L, 4)"}
{"task_id": 77, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(Z: np.ndarray) -> np.ndarray:\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\ndef relu(Z: np.ndarray) -> np.ndarray:\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(0, Z)\ndef linear_forward(A: np.ndarray, W: np.ndarray, b: np.ndarray) -> tuple[np.ndarray, tuple[np.ndarray, ...]]:\n    \"\"\"Implement the linear part of a layer's forward propagation.\"\"\"\n    Z = np.dot(W, A) + b\n    return (Z, (A, W, b))\ndef linear_activation_forward(A_prev: np.ndarray, W: np.ndarray, b: np.ndarray, activation: str) -> tuple[np.ndarray, tuple[np.ndarray, ...]]:\n    \"\"\"Implement the forward propagation for the LINEAR->ACTIVATION layer.\"\"\"\n    if activation == 'sigmoid':\n        (Z, linear_cache) = linear_forward(A_prev, W, b)\n        A = sigmoid(Z)\n    else:\n        (Z, linear_cache) = linear_forward(A_prev, W, b)\n        A = relu(Z)\n    return (A, (linear_cache, Z))\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray], hidden_layers: int) -> tuple[np.ndarray, list[tuple[tuple, ...]]]:\n    \"\"\"Implement forward propagation for the [LINEAR->RELU]*(L-1)->LINEAR->SIGMOID computation.\"\"\"\n    caches = []\n    A = X\n    for l in range(1, L):\n        A_prev = A\n        (A, cache) = linear_activation_forward(A_prev, parameters[f'W{l}'], parameters[f'b{l}'], 'relu')\n        caches.append(cache)\n    (AL, cache) = linear_activation_forward(A, parameters[f'W{L}'], parameters[f'b{L}'], 'sigmoid')\n    caches.append(cache)\n    return (AL.round(4).tolist(), caches)"}
{"task_id": 81, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    epsilon = 1e-15\n    A2 = np.clip(A2, epsilon, 1.0 - epsilon)\n    m = Y.shape[0]\n    cost = -1 / m * (np.dot(Y, np.log(A2).T) + np.dot(1 - Y, np.log(1 - A2).T))\n    return round(float(np.squeeze(cost)), 6)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    assert 0 <= epsilon <= 1, 'epsilon must be in range [0, 1]'\n    Q = np.array(Q)\n    n = len(Q)\n    a_star = np.argmax(Q)\n    p = np.full(n, epsilon / n)\n    p[a_star] = 1 - epsilon + epsilon / n\n    assert np.isclose(np.sum(p), 1), 'probabilities do not sum to 1'\n    return p.round(4).tolist()"}
{"task_id": 86, "completion_id": 0, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    result = []\n    for i in range(len(predictions[0])):\n        column = [pred[i] for pred in predictions]\n        counts = Counter(column)\n        max_count = max(counts.values())\n        max_voted = [k for (k, v) in counts.items() if v == max_count]\n        result.append(min(max_voted))\n    return result"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    result = np.logaddexp(0, z)\n    result = np.round(result, 4)\n    if isinstance(z, (list, np.ndarray)):\n        return result.tolist()\n    else:\n        return float(result)"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Dict, List, Union\ndef mse(bandit: Union[Dict, object], policy: Union[Dict, object]) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Union[Dict, object]\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Union[Dict, object]\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    try:\n        arm_evs = bandit['arm_evs']\n        ev_estimates = policy['ev_estimates']\n    except (TypeError, KeyError):\n        return np.nan\n    if not ev_estimates:\n        return np.nan\n    try:\n        assert len(arm_evs) == len(ev_estimates)\n    except AssertionError:\n        return np.nan\n    mse_values = [(arm_evs[i] - ev_estimates[i]) ** 2 for i in sorted(ev_estimates.keys())]\n    mean_mse = np.mean(mse_values)\n    rounded_mse = round(mean_mse, 4)\n    return rounded_mse"}
{"task_id": 96, "completion_id": 0, "solution": "import math\nfrom collections import defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    vocab = set()\n    for sentence in corpus:\n        for word in sentence.split():\n            vocab.add(word)\n    vocab.add('<UNK>')\n    ngram_counts = [defaultdict(int) for _ in range(N)]\n    for sentence in corpus:\n        words = sentence.split() + ['<STOP>']\n        for n in range(1, N + 1):\n            for ngram in zip(*[words[i:] for i in range(n)]):\n                ngram_counts[n - 1][' '.join(ngram)] += 1\n    words = sequence.split() + ['<STOP>']\n    if len(words) < N:\n        return 0.0\n    log_prob = 0.0\n    for n in range(1, N + 1):\n        for ngram in zip(*[words[i:] for i in range(n)]):\n            ngram = ' '.join(ngram)\n            (context, word) = ngram.rsplit(' ', 1)\n            if context not in ngram_counts[n - 2]:\n                context = '<UNK>'\n            log_prob += math.log((ngram_counts[n - 2][context] + K) / (sum((ngram_counts[n - 2][k] for k in ngram_counts[n - 2] if k.startswith(context))) + K * len(vocab)))\n    return round(log_prob, 4)"}
{"task_id": 108, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> List[List[float]]:\n    \"\"\"\n    Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    (N, M) = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    loss = 0\n    for _ in range(max_iter):\n        H_new = np.linalg.solve(np.dot(W.T, W) + alpha * np.eye(K), np.dot(W.T, X))\n        W_new = np.linalg.solve(np.dot(H_new, H_new.T) + alpha * np.eye(N), np.dot(X, H_new.T).T)\n        new_loss = np.linalg.norm(X - np.dot(W_new, H_new), 'fro') + alpha * (np.linalg.norm(W_new, 'fro') + np.linalg.norm(H_new, 'fro'))\n        if np.abs(new_loss - loss) < tol:\n            break\n        loss = new_loss\n        (W, H) = (W_new, H_new)\n    X_hat = np.dot(W, H).round(4).tolist()\n    return X_hat"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n    centroids = [X[random.randint(0, len(X) - 1)]]\n    while len(centroids) < K:\n        dist_sq = np.array([min([np.inner(c - x, c - x) for c in centroids]) for x in X])\n        probs = dist_sq / dist_sq.sum()\n        cumulative_probs = probs.cumsum()\n        r = random.random()\n        for (j, p) in enumerate(cumulative_probs):\n            if r < p:\n                i = j\n                break\n        centroids.append(X[i])\n    prev_labels = None\n    for _ in range(max_iter):\n        distances = np.sqrt(((X - centroids[:, np.newaxis]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=0)\n        if np.all(labels == prev_labels):\n            break\n        for i in range(K):\n            if np.any(labels == i):\n                centroids[i] = X[labels == i].mean(axis=0)\n        prev_labels = labels\n    return sorted((c.round(4).tolist() for c in centroids), key=lambda x: (x[0], x[1:]))"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    encoded_text = [vocabulary.get(char, 0) for char in text]\n    if len(encoded_text) < time_steps:\n        encoded_text += [0] * (time_steps - len(encoded_text))\n    else:\n        encoded_text = encoded_text[:time_steps]\n    return encoded_text\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    return ''.join([inverse_vocab.get(i, '') for i in indices if i != 0])\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    prediction = model.predict([encoded_text])\n    max_indices = np.argmax(prediction, axis=2)\n    decoded_prediction = int_to_string(max_indices[0], inv_output_vocabulary)\n    return decoded_prediction"}
{"task_id": 113, "completion_id": 0, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str], optional\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        prediction = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        prediction_str = ''.join(prediction)\n        print(f'input:  {example}\\noutput: {prediction_str}')\n        predictions.append(prediction_str)\n    return predictions"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X, y, w):\n    z = np.dot(X, w)\n    p = 1.0 / (1.0 + np.exp(-z))\n    eps = 1e-20\n    p = np.clip(p, eps, 1 - eps)\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    grad = np.dot(X.T, p - y) / X.shape[0]\n    loss = round(loss, 4)\n    grad = [[round(g, 4)] for g in grad]\n    return (loss, grad)\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([0, 1, 0])\nw = np.array([0.1, 0.2])"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list:\n    (m, n) = X_train.shape\n    w = np.full(m, 1 / m)\n    clfs = []\n    n_clf = max(1, n_clf)\n    for _ in range(n_clf):\n        min_err = float('inf')\n        for j in range(n):\n            for theta in X_train[:, j]:\n                y_pred = np.where(X_train[:, j] < theta, -1, 1)\n                err = np.sum(w[y_pred != y_train])\n                if err < min_err:\n                    min_err = err\n                    best_j = j\n                    best_theta = theta\n                    best_pred = y_pred\n        eps = min_err / np.sum(w)\n        alpha = 0.5 * np.log((1 - eps) / eps)\n        clfs.append((best_j, best_theta, alpha))\n        w = w * np.exp(-alpha * y_train * best_pred)\n        w = w / np.sum(w)\n    y_pred = np.zeros(len(X_test))\n    for (j, theta, alpha) in clfs:\n        y_pred += alpha * np.where(X_test[:, j] < theta, -1, 1)\n    return [1 if i > 0 else -1 for i in y_pred]"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    class_labels = np.unique(y)\n    if n_components < 1 or n_components > X.shape[1]:\n        return []\n    overal_mean = np.mean(X, axis=0)\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    for c in class_labels:\n        X_c = X[y == c]\n        mean_c = np.mean(X_c, axis=0)\n        S_W += np.dot((X_c - mean_c).T, X_c - mean_c)\n        n_c = X_c.shape[0]\n        mean_diff = (mean_c - overal_mean).reshape(X.shape[1], 1)\n        S_B += n_c * np.dot(mean_diff, mean_diff.T)\n    A = np.dot(np.linalg.pinv(S_W), S_B)\n    (eig_vals, eig_vecs) = np.linalg.eig(A)\n    idx = np.argsort(eig_vals)[::-1]\n    eig_vecs = eig_vecs[:, idx]\n    eig_vecs[:, 0] = eig_vecs[:, 0] * (-1 if eig_vecs[0, 0] < 0 else 1)\n    W = eig_vecs[:, :n_components]\n    X_lda = np.dot(X, W)\n    return np.round(X_lda, 4).tolist()"}
{"task_id": 140, "completion_id": 0, "solution": "from collections import deque\ndef escape_fire_maze(grid: list[str]) -> int:\n    n = len(grid)\n    dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    fire = [[0 for _ in range(n)] for _ in range(n)]\n    agent = [[0 for _ in range(n)] for _ in range(n)]\n    fire_queue = deque()\n    agent_queue = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j, 0))\n            elif grid[i][j] == '.':\n                agent_queue.append((i, j, 0))\n    while fire_queue:\n        (x, y, t) = fire_queue.popleft()\n        fire[x][y] = t\n        for (dx, dy) in dirs:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] == '.') and (not fire[nx][ny]) and (not agent[nx][ny]):\n                fire_queue.append((nx, ny, t + 1))\n    while agent_queue:\n        (x, y, t) = agent_queue.popleft()\n        if (x, y) == (n - 1, n - 1):\n            return t\n        agent[x][y] = t\n        for (dx, dy) in dirs:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] == '.') and (not fire[nx][ny]) and (not agent[nx][ny]) and (t + 1 < fire[nx][ny]):\n                agent_queue.append((nx, ny, t + 1))\n    return -1"}
{"task_id": 141, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.spatial import distance\nfrom typing import Union\nfrom collections import Counter\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    if metric == 'euclidean':\n        dist_matrix = distance.cdist(X_test, X_train, 'euclidean')\n    elif metric == 'manhattan':\n        dist_matrix = distance.cdist(X_test, X_train, 'cityblock')\n    elif metric == 'cosine':\n        dist_matrix = 1 - distance.cdist(X_test, X_train, 'cosine')\n    else:\n        dist_matrix = distance.cdist(X_test, X_train, 'euclidean')\n    knn_indices = np.argsort(dist_matrix)[:, :k]\n    pred_labels = []\n    for row in knn_indices:\n        k_nearest_labels = y_train[row]\n        counter = Counter(k_nearest_labels)\n        max_count = max(list(counter.values()))\n        modes = [k for (k, v) in counter.items() if v == max_count]\n        pred_label = min(modes)\n        pred_labels.append(pred_label)\n    return np.array(pred_labels)"}
{"task_id": 146, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\"\"\"\n\n    def euclidean_distance(a: np.ndarray, b: np.ndarray) -> np.ndarray:\n        return np.sqrt(np.sum((a - b) ** 2, axis=1))\n\n    def manhattan_distance(a: np.ndarray, b: np.ndarray) -> np.ndarray:\n        return np.sum(np.abs(a - b), axis=1)\n\n    def cosine_distance(a: np.ndarray, b: np.ndarray) -> np.ndarray:\n        return 1 - np.divide(np.sum(a * b, axis=1), np.sqrt(np.sum(a ** 2, axis=1)) * np.sqrt(np.sum(b ** 2, axis=1)))\n    metrics = {'euclidean': euclidean_distance, 'manhattan': manhattan_distance, 'cosine': cosine_distance}\n    if metric not in metrics:\n        raise ValueError(f'Unknown metric: {metric}. Please use one of {list(metrics.keys())}')\n    distance_func = metrics[metric]\n    y_pred = []\n    for test_sample in X_test:\n        distances = distance_func(X, test_sample)\n        k_nearest = np.argpartition(distances, k)[:k]\n        (labels, counts) = np.unique(y[k_nearest], return_counts=True)\n        max_count_indices = np.argwhere(counts == np.amax(counts)).flatten()\n        label = np.amin(labels[max_count_indices])\n        y_pred.append(label)\n    return y_pred"}
{"task_id": 155, "completion_id": 0, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is: Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    z1 = weights['W1'].dot(state) + weights['b1']\n    a1 = np.maximum(0, z1)\n    z2 = weights['W2'].dot(a1) + weights['b2']\n    a2 = np.maximum(0, z2)\n    z3 = weights['W3'].dot(a2) + weights['b3']\n    action = np.tanh(z3)\n    action = [round(a, 4) for a in action]\n    return action"}
{"task_id": 160, "completion_id": 0, "solution": "import numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\\u2006\u00b7\\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    (m, n) = X.shape\n    if fit_intercept:\n        X = np.c_[np.ones(m), X]\n    weights = np.zeros(X.shape[1])\n    for _ in range(max_iters):\n        for j in range(n):\n            y_pred = np.dot(X, weights)\n            residuals = y - y_pred + weights[j] * X[:, j]\n            threshold = lambda_param * m\n            non_zero_residuals = np.dot(X[:, j], residuals)\n            weights[j] = np.sign(non_zero_residuals) * max(abs(non_zero_residuals) - threshold, 0) / np.sum(X[:, j] ** 2)\n    intercept = np.mean(y - np.dot(X, weights)) if fit_intercept else 0.0\n    weights = [round(weight, 4) for weight in weights]\n    intercept = round(intercept, 4)\n    return (weights, intercept)"}
{"task_id": 165, "completion_id": 0, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    if len(x) != len(y):\n        return -1\n    distance = np.mean(x != y).astype(float)\n    return round(distance, 4)"}
{"task_id": 169, "completion_id": 0, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N < 1:\n        raise ValueError('N must be a positive integer')\n    if window == 'hamming':\n        return [round(0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == 'hann':\n        return [round(0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == 'blackman_harris':\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        return [round(a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('coefficients must be provided when window is generalized_cosine')\n        else:\n            return [round(sum([coefficients[k] * np.cos(2 * np.pi * k * n / (N - 1)) for k in range(len(coefficients))]), 4) for n in range(N)]\n    else:\n        raise ValueError('Unknown window type')"}
{"task_id": 171, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    unique_labels = np.unique(y_train)\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train = np.array([label_map[y] for y in y_train])\n    X_train = np.concatenate((np.ones((X_train.shape[0], 1)), X_train), axis=1)\n    X_test = np.concatenate((np.ones((X_test.shape[0], 1)), X_test), axis=1)\n    if np.unique(y_train).size == 1:\n        return [unique_labels[0]] * X_test.shape[0]\n    weights = np.zeros(X_train.shape[1])\n    for _ in range(epochs):\n        permutation = np.random.permutation(X_train.shape[0])\n        X_train_shuffled = X_train[permutation]\n        y_train_shuffled = y_train[permutation]\n        for i in range(0, X_train.shape[0], batch_size):\n            xi = X_train_shuffled[i:i + batch_size]\n            yi = y_train_shuffled[i:i + batch_size]\n            sigmoid = 1 / (1 + np.exp(-xi.dot(weights)))\n            gradient = xi.T.dot(sigmoid - yi) / yi.size\n            weights -= learning_rate * gradient\n    predictions = X_test.dot(weights)\n    predictions[predictions > 0] = 1\n    predictions[predictions <= 0] = 0\n    predictions_original_label = [unique_labels[0] if p == 0 else unique_labels[1] for p in predictions]\n    return predictions_original_label"}
{"task_id": 176, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: list[list[int | float]], y_train: list[int], X_test: list[list[int | float]], n_estimators: int=10) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train) - 1\n    X_test = np.array(X_test)\n    (n_samples, n_features) = X_train.shape\n    w = np.full(n_samples, 1 / n_samples)\n    pred_test = np.zeros(len(X_test))\n    for _ in range(n_estimators):\n        lowest_error = np.inf\n        for feature in range(n_features):\n            tr_features = np.unique(X_train[:, feature])\n            for threshold in tr_features:\n                for polarity in [1, -1]:\n                    pred = np.ones(n_samples)\n                    pred[X_train[:, feature] * polarity < threshold * polarity] = -1\n                    error = np.sum(w[pred != y_train])\n                    if error > 0.5:\n                        error = 1 - error\n                        polarity *= -1\n                    if error < lowest_error:\n                        lowest_error = error\n                        best_feature = feature\n                        best_threshold = threshold\n                        best_polarity = polarity\n        alpha = 0.5 * np.log((1.0 - lowest_error) / (lowest_error + 1e-10))\n        pred_train = np.ones(n_samples)\n        neg_idx = X_train[:, best_feature] * best_polarity < best_threshold * best_polarity\n        pred_train[neg_idx] = -1\n        pred_test += alpha * np.where(X_test[:, best_feature] * best_polarity < best_threshold * best_polarity, 1, -1)\n        w *= np.exp(-alpha * y_train * pred_train)\n        w /= np.sum(w)\n    return [1 if p > 0 else 0 for p in pred_test]"}
{"task_id": 178, "completion_id": 0, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if not (n_dims > 0 and num_particles > 0 and (num_iterations > 0)):\n        return -1\n    rng = np.random.default_rng(seed)\n    positions = rng.uniform(-1, 1, (num_particles, n_dims))\n    velocities = np.zeros((num_particles, n_dims))\n    p_bests = np.copy(positions)\n    g_best = positions[np.argmin(np.sum(positions ** 2, axis=1))]\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    for _ in range(num_iterations):\n        p_best_values = np.sum(p_bests ** 2, axis=1)\n        g_best_value = np.sum(g_best ** 2)\n        for i in range(num_particles):\n            velocities[i] = w * velocities[i] + c1 * rng.random() * (p_bests[i] - positions[i]) + c2 * rng.random() * (g_best - positions[i])\n        for i in range(num_particles):\n            positions[i] = np.clip(positions[i] + velocities[i], -1, 1)\n        for i in range(num_particles):\n            p_value = np.sum(positions[i] ** 2)\n            if p_value < p_best_values[i]:\n                p_bests[i] = positions[i]\n            if p_value < g_best_value:\n                g_best = positions[i]\n                g_best_value = p_value\n    return round(g_best_value, 4)"}
{"task_id": 180, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\nfrom scipy.spatial import distance\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    y_pred = []\n    for test_vector in X_test:\n        distances = [distance.euclidean(test_vector, x) for x in X_train]\n        nearest_indices = np.argsort(distances)[:k]\n        nearest_labels = y_train[nearest_indices]\n        if task == 'classification':\n            (labels, counts) = np.unique(nearest_labels, return_counts=True)\n            label = labels[np.argmax(counts)]\n        elif task == 'regression':\n            label = round(np.mean(nearest_labels), 4)\n        else:\n            raise ValueError(f\"Unknown task type '{task}'\")\n        y_pred.append(label)\n    return y_pred"}
{"task_id": 184, "completion_id": 0, "solution": "import numpy as np\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n\n    def gini(y):\n        (_, counts) = np.unique(y, return_counts=True)\n        return 1 - np.sum((counts / y.shape[0]) ** 2)\n\n    def gain(y, splits):\n        gini_parent = gini(y)\n        n_left = np.sum([len(split) for split in splits])\n        gini_children = np.sum([len(split) / n_left * gini(split) for split in splits])\n        return gini_parent - gini_children\n\n    def split_data(x, threshold):\n        left = x <= threshold\n        right = x > threshold\n        return (left, right)\n\n    def split_dataset(X, y, feature, threshold):\n        left_indices = X[:, feature] <= threshold\n        right_indices = X[:, feature] > threshold\n        return (X[left_indices], X[right_indices], y[left_indices], y[right_indices])\n\n    def recursive_split(X, y, depth=0):\n        if max_depth is not None and depth >= max_depth:\n            return np.argmax(np.bincount(y))\n        if len(set(y)) == 1:\n            return y[0]\n        best_gain = 0\n        best_threshold = None\n        best_feature = None\n        best_splits = None\n        for feature in range(X.shape[1]):\n            unique_values = np.unique(X[:, feature])\n            thresholds = (unique_values[1:] + unique_values[:-1]) / 2\n            for threshold in thresholds:\n                splits = [y[X[:, feature] <= threshold], y[X[:, feature] > threshold]]\n                if any((len(split) == 0 for split in splits)):\n                    continue\n                gain_value = gain(y, splits)\n                if gain_value > best_gain:\n                    best_gain = gain_value\n                    best_threshold = threshold\n                    best_feature = feature\n                    best_splits = splits\n        if best_gain > 0:\n            (X_left, X_right, y_left, y_right) = split_dataset(X, y, best_feature, best_threshold)\n            return {best_feature: {'threshold': best_threshold, 'left': recursive_split(X_left, y_left, depth + 1), 'right': recursive_split(X_right, y_right, depth + 1)}}\n        else:\n            return np.argmax(np.bincount(y))\n\n    def recursive_predict(x, tree):\n        if isinstance(tree, dict):\n            (feature, threshold, left, right) = list(tree.items())[0]\n            if x[feature] <= threshold:\n                return recursive_predict(x, left)\n            else:\n                return recursive_predict(x, right)\n        else:\n            return tree\n    tree = recursive_split(X_train, y_train)\n    y_pred = [recursive_predict(x, tree) for x in X_test]\n    return y_pred"}
{"task_id": 190, "completion_id": 0, "solution": "import numpy as np\ndef gini_impurity(y_arr):\n    \"\"\"Calculate Gini impurity for labels vector y_arr.\"\"\"\n    (_, counts) = np.unique(y_arr, return_counts=True)\n    probabilities = counts / counts.sum()\n    gini = 1 - np.sum(np.square(probabilities))\n    return gini\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    G_whole_dataset = gini_impurity(y)\n    best_gini = G_whole_dataset\n    best_feature_index = -1\n    best_threshold_value = None\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n        if len(unique_values) == 1:\n            continue\n        for threshold in unique_values:\n            left_indices = X[:, feature_index] <= threshold\n            right_indices = ~left_indices\n            left = y[left_indices]\n            right = y[right_indices]\n            if len(left) == 0 or len(right) == 0:\n                continue\n            (n_left, n_right) = (len(left), len(right))\n            n_total = n_left + n_right\n            G_left = gini_impurity(left)\n            G_right = gini_impurity(right)\n            G_split = n_left / n_total * G_left + n_right / n_total * G_right\n            if G_split < best_gini - 1e-12 or (np.abs(G_split - best_gini) < 1e-12 and feature_index < best_feature_index) or (np.abs(G_split - best_gini) < 1e-12 and feature_index == best_feature_index and (threshold < best_threshold_value)):\n                best_gini = G_split\n                best_feature_index = feature_index\n                best_threshold_value = threshold\n    if best_gini < G_whole_dataset:\n        return (best_feature_index, best_threshold_value, round(best_gini, 4))\n    else:\n        return (-1, None, round(G_whole_dataset, 4))"}
{"task_id": 191, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\"\"\"\n\n    def euclidean(x, y):\n        (x, y) = (np.array(x), np.array(y))\n        return round(np.linalg.norm(x - y), 4)\n\n    def manhattan(x, y):\n        (x, y) = (np.array(x), np.array(y))\n        return round(np.sum(np.abs(x - y)), 4)\n\n    def chebyshev(x, y):\n        (x, y) = (np.array(x), np.array(y))\n        return round(np.max(np.abs(x - y)), 4)\n\n    def cosine(x, y):\n        (x, y) = (np.array(x), np.array(y))\n        norms = np.linalg.norm(x) * np.linalg.norm(y)\n        return round(1 - np.dot(x, y) / norms, 4) if norms != 0 else -1\n    metrics = {'euclidean': euclidean, 'manhattan': manhattan, 'chebyshev': chebyshev, 'cosine': cosine}\n\n    def d(*args):\n        (x, y) = args\n        if len(x) != len(y) or len(x) == 0:\n            return -1\n        try:\n            (x, y) = (np.array(x, dtype=float), np.array(y, dtype=float))\n        except Exception:\n            return -1\n        return metrics[name](x, y)\n    return d if name in metrics else lambda *args: -1"}
{"task_id": 197, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    action_dim = 1 if not md_action else len(env.action_space.spaces)\n    n_actions_per_dim = []\n    action_ids = None\n    if md_action:\n        for space in env.action_space.spaces:\n            if hasattr(space, 'n'):\n                n_actions_per_dim.append(space.n)\n            elif hasattr(space, 'shape'):\n                n_actions_per_dim.append(np.inf)\n                if cont_action:\n                    action_ids = None\n                    return (n_actions_per_dim, action_ids, action_dim)\n    elif hasattr(env.action_space, 'n'):\n        n_actions_per_dim.append(env.action_space.n)\n    elif hasattr(env.action_space, 'shape'):\n        n_actions_per_dim.append(np.inf)\n        if cont_action:\n            action_ids = None\n            return (n_actions_per_dim, action_ids, action_dim)\n    if action_ids is None and (not cont_action):\n        action_ids = list(product(*[range(n) for n in n_actions_per_dim]))\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 198, "completion_id": 0, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    beta = np.zeros((V, len(phi[0][0])))\n    for d in range(len(phi)):\n        for n in range(len(phi[d])):\n            for t in range(len(phi[d][n])):\n                beta[corpus[d][n]][t] += phi[d][n][t]\n    beta = beta / np.sum(beta, axis=0)\n    beta = np.round(beta, 4)\n    return beta.tolist()"}
{"task_id": 202, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.spatial.distance import pdist, squareform\nfrom sklearn.metrics.pairwise import euclidean_distances\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n    \n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n    \n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n    \n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    medoids = X[:k]\n    clusters = cluster_data(X, medoids)\n    while True:\n        best_cost_reduction = 0\n        for medoid_index in range(k):\n            for sample_index in range(k, X.shape[0]):\n                new_medoids = medoids.copy()\n                new_medoids[medoid_index] = X[sample_index]\n                new_clusters = cluster_data(X, new_medoids)\n                new_cost = total_cost(X, new_clusters, new_medoids)\n                cost_reduction = total_cost(X, clusters, medoids) - new_cost\n                if cost_reduction > best_cost_reduction:\n                    best_cost_reduction = cost_reduction\n                    medoids = new_medoids\n                    clusters = new_clusters\n        if best_cost_reduction <= 0:\n            break\n    labels = assign_labels(X, medoids)\n    return labels\ndef cluster_data(X: np.ndarray, medoids: np.ndarray) -> list[list[int]]:\n    \"\"\"Cluster the data based on the medoids.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        medoids: A list of the current medoids.\n\n    Returns:\n        A list of lists, where each sublist contains the indices of the samples\n        in the cluster associated with the corresponding medoid.\n    \"\"\"\n    distances = euclidean_distances(X, medoids)\n    clusters = []\n    for i in range(len(medoids)):\n        cluster = np.where(distances[:, i] == np.min(distances[:, i]))[0]\n        clusters.append(cluster.tolist())\n    return clusters\ndef total_cost(X: np.ndarray, clusters: list[list[int]], medoids: np.ndarray) -> float:\n    \"\"\"Calculate the total cost of the clusters.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        clusters: A list of lists, where each sublist contains the indices of\n                  the samples in the cluster associated with the corresponding\n                  medoid.\n        medoids: A list of the current medoids.\n\n    Returns:\n        The total cost of the clusters.\n    \"\"\"\n    cost = 0\n    for (cluster, medoid) in zip(clusters, medoids):\n        cost += np.sum(euclidean_distances(X[cluster], medoid.reshape(1, -1)))\n    return cost\ndef assign_labels(X: np.ndarray, medoids: np.ndarray) -> list[int]:\n    \"\"\"Assign each sample to the closest medoid.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        medoids: A list of the current medoids.\n\n    Returns:\n        A list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    distances = euclidean_distances(X, medoids)\n    labels = np.argmin(distances, axis=1)\n    return labels.tolist()"}
{"task_id": 216, "completion_id": 0, "solution": "import numpy as np\nfrom sklearn.preprocessing import PolynomialFeatures, StandardScaler\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    if len(x_train[0]) != len(x_test[0]) or n_iterations < 1:\n        return -1\n    poly = PolynomialFeatures(degree)\n    x_train_poly = poly.fit_transform(x_train)\n    x_test_poly = poly.transform(x_test)\n    scaler = StandardScaler()\n    x_train_poly = scaler.fit_transform(x_train_poly)\n    x_test_poly = scaler.transform(x_test_poly)\n    x_train_poly = np.c_[np.ones((len(x_train), 1)), x_train_poly]\n    x_test_poly = np.c_[np.ones((len(x_test), 1)), x_test_poly]\n    n_features = x_train_poly.shape[1]\n    weights = np.random.randn(n_features)\n    m = len(x_train)\n    for _ in range(n_iterations):\n        predictions = x_train_poly.dot(weights)\n        error = predictions - y_train\n        gradients = 2 / m * x_train_poly.T.dot(error) + reg_factor * (l1_ratio * np.sign(weights) + 0.5 * (1 - l1_ratio) * weights)\n        weights -= learning_rate * gradients\n    predictions = x_test_poly.dot(weights)\n    return np.round(predictions, 4).tolist()"}
{"task_id": 217, "completion_id": 0, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"\n    Computes gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or -1) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or numpy array) of integers.\n        predicted: 1-D container (list, tuple, or numpy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n    grad = actual * sigmoid(-actual * predicted)\n    hess = sigmoid(predicted) * (1 - sigmoid(predicted))\n    prob = sigmoid(predicted)\n    grad = np.round(grad, 6)\n    hess = np.round(hess, 6)\n    prob = np.round(prob, 6)\n    grad = grad.tolist()\n    hess = hess.tolist()\n    prob = prob.tolist()\n    return (grad, hess, prob)"}
{"task_id": 218, "completion_id": 0, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n\n    def hand_value(hand: list[int]) -> int:\n        \"\"\"Calculate the value of a hand.\n\n        Args:\n            hand: List of integers (1\u201310) representing a hand. 1 is Ace.\n\n        Returns:\n            The value of the hand. If an Ace can be used as 11 without going bust, it is.\n        \"\"\"\n        base_value = sum(hand)\n        if 1 in hand and base_value + 10 <= 21:\n            return base_value + 10\n        return base_value\n    player_value = hand_value(player)\n    dealer_value = hand_value(dealer)\n    if player_value > 21:\n        return -1\n    elif dealer_value > 21:\n        return 1\n    elif player_value > dealer_value:\n        return 1\n    elif player_value < dealer_value:\n        return -1\n    else:\n        return 0\n    if len(player) == 2 and player_value == 21:\n        return 1.5\n    if len(dealer) == 2 and dealer_value == 21:\n        return -1"}
{"task_id": 221, "completion_id": 0, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper that returns element-wise squared log errors.\"\"\"\n    return (np.log(1 + actual) - np.log(1 + predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    if any((x < 0 for x in actual)) or any((x < 0 for x in predicted)):\n        return -1\n    (actual, predicted) = (np.array(actual), np.array(predicted))\n    return round(np.mean(squared_log_error(actual, predicted)), 4)"}
{"task_id": 222, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"\n    Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    z = np.array(z)\n    positive = np.where(z >= 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n    result = np.round(positive, 4)\n    if result.shape == ():\n        result = float(result)\n    return result.tolist()"}
{"task_id": 224, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, (list, np.ndarray)):\n        return [leaky_relu(zi, a) for zi in z]\n    elif z < 0:\n        return a * z\n    else:\n        return z"}
{"task_id": 226, "completion_id": 0, "solution": "import numpy as np\nimport math\nclass DecisionStump:\n\n    def __init__(self):\n        self.polarity = 1\n        self.feature_idx = None\n        self.threshold = None\n        self.alpha = None\n\n    def predict(self, X):\n        n_samples = X.shape[0]\n        X_column = X[:, self.feature_idx]\n        predictions = np.ones(n_samples)\n        if self.polarity == 1:\n            predictions[X_column < self.threshold] = -1\n        else:\n            predictions[X_column < self.threshold] = 1\n        return predictions\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    (n_samples, n_features) = X_train.shape\n    w = np.full(n_samples, 1 / n_samples)\n    clfs = []\n    for _ in range(n_clf):\n        clf = DecisionStump()\n        min_error = float('inf')\n        for feature_i in range(n_features):\n            X_column = X_train[:, feature_i]\n            thresholds = np.unique(X_column)\n            for threshold in thresholds:\n                polarity = 1\n                predictions = np.ones(n_samples)\n                predictions[X_column < threshold] = -1\n                missclassified = w[y_train != predictions]\n                error = sum(missclassified)\n                if error > 0.5:\n                    error = 1 - error\n                    polarity = -1\n                if error < min_error:\n                    clf.polarity = polarity\n                    clf.threshold = threshold\n                    clf.feature_idx = feature_i\n                    min_error = error\n        clf.alpha = 0.5 * math.log((1.0 - min_error) / (min_error + 1e-10))\n        predictions = clf.predict(X_train)\n        w *= np.exp(-clf.alpha * y_train * predictions)\n        w /= np.sum(w)\n        clfs.append(clf)\n    (n_samples, _) = X_test.shape\n    predictions = np.zeros(n_samples)\n    for clf in clfs:\n        predictions += clf.alpha * clf.predict(X_test)\n    y_pred = np.sign(predictions)\n    return y_pred.tolist()"}
{"task_id": 241, "completion_id": 0, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    A = np.random.normal(size=(shape[0], np.prod(shape[1:])))\n    (U, _, VT) = np.linalg.svd(A, full_matrices=False)\n    Q = U if U.shape == A.shape else VT\n    Q = Q.reshape(shape) * scale\n    return Q.tolist()"}
{"task_id": 243, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    W = np.ones((3, 3))\n    b = np.zeros(3)\n    W_a = np.ones(3)\n    b_a = np.zeros(1)\n    W_c = np.ones(3)\n    b_c = np.zeros(1)\n    z1 = np.maximum(0, np.dot(state, W) + b)\n    z2 = np.maximum(0, np.dot(z1, W) + b)\n    z3 = np.maximum(0, np.dot(z2, W) + b)\n    logits = np.dot(z3, W_a) + b_a[0]\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n    state_value = (np.dot(z3, W_c) + b_c)[0]\n    action_probs = [round(p, 4) for p in action_probs.tolist()]\n    state_value = round(state_value, 4)\n    return (action_probs, state_value)"}
{"task_id": 249, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.array(state)\n    (w1, b1, w2, b2, w3, b3, wa, ba, wc, bc) = [np.array(params[x]) for x in ['W1', 'b1', 'W2', 'b2', 'W3', 'b3', 'Wa', 'ba', 'Wc', 'bc']]\n    dense = np.matmul(state, w1) + b1\n    relu = np.clip(dense, 0, None)\n    dense = np.matmul(relu, w2) + b2\n    relu = np.clip(dense, 0, None)\n    dense = np.matmul(relu, w3) + b3\n    relu = np.clip(dense, 0, None)\n    actor_head = np.matmul(relu, wa) + ba\n    softmax = np.exp(actor_head) / np.sum(np.exp(actor_head))\n    probabilities = np.round(softmax, 4).tolist()\n    critic_head = np.matmul(relu, wc) + bc\n    value = np.round(float(critic_head), 4)\n    return (probabilities, value)"}
{"task_id": 253, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l1 = l1_ratio * np.linalg.norm(w, 1)\n    l2 = (1 - l1_ratio) * 0.5 * np.linalg.norm(w) ** 2\n    R = alpha * (l1 + l2)\n    if gradient:\n        gradient = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n        return [round(g, 4) for g in gradient.tolist()]\n    else:\n        return round(R, 4)"}
{"task_id": 256, "completion_id": 0, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in ['X', 'y']:\n        return None\n    elif param_name in ['Ba', 'Bx']:\n        param_name = param_name.lower()\n    model_copy = deepcopy(model)\n    param = model.parameters[param_name]\n    grads = np.zeros_like(param)\n    for idx in np.ndindex(param.shape):\n        param[idx] += epsilon\n        preds = [model.forward(x_t) for x_t in np.swapaxes(X, 1, 2)]\n        loss_plus = loss_func(preds)\n        param[idx] -= 2 * epsilon\n        preds = [model.forward(x_t) for x_t in np.swapaxes(X, 1, 2)]\n        loss_minus = loss_func(preds)\n        param[idx] += epsilon\n        grads[idx] = (loss_plus - loss_minus) / (2 * epsilon)\n    model.parameters[param_name] = model_copy.parameters[param_name]\n    return grads.T"}
{"task_id": 257, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    (m, n) = X_train.shape\n    w = np.full(m, 1 / m)\n    clfs = []\n    alphas = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_feature = None\n        best_threshold = None\n        best_polarity = None\n        for feature in range(n):\n            unique_vals = np.unique(X_train[:, feature])\n            for threshold in unique_vals:\n                for polarity in [1, -1]:\n                    predictions = polarity * np.where(X_train[:, feature] > threshold, 1, -1)\n                    error = np.sum(w[predictions != y_train])\n                    if error < min_error:\n                        min_error = error\n                        best_feature = feature\n                        best_threshold = threshold\n                        best_polarity = polarity\n        alpha = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n        alphas.append(alpha)\n        predictions = best_polarity * np.where(X_train[:, best_feature] > best_threshold, 1, -1)\n        w *= np.exp(-alpha * y_train * predictions)\n        w /= np.sum(w)\n        clfs.append((best_feature, best_threshold, best_polarity))\n    y_preds = np.zeros(X_test.shape[0])\n    for (clf, alpha) in zip(clfs, alphas):\n        (feature, threshold, polarity) = clf\n        y_preds += alpha * np.where(X_test[:, feature] > threshold, polarity, -polarity)\n    y_preds = np.where(y_preds > 0, 1, -1)\n    return y_preds.tolist()"}
{"task_id": 261, "completion_id": 0, "solution": "import numpy as np\nimport functools\nimport operator\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.  \n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least \n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance \n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('The shape must have at least two dimensions')\n    fan_in = shape[0]\n    fan_out = shape[1]\n    if len(shape) > 2:\n        receptive_field_size = functools.reduce(operator.mul, shape[2:], 1)\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n    stddev = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=stddev, size=shape)"}
{"task_id": 266, "completion_id": 0, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    adj_dict = {v: set() for v in V}\n    for (u, v) in E:\n        adj_dict[u].add(v)\n        adj_dict[v].add(u)\n    adj_list = [sorted(list(neighbors), key=lambda x: V.index(x)) for neighbors in adj_dict.values()]\n    return adj_list\nV = [0, 1, 2, 3]\nE = [(0, 1), (1, 2), (2, 3), (3, 0), (1, 0)]"}
{"task_id": 267, "completion_id": 0, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    (n_samples, n_features) = X.shape\n    inf = float('inf')\n    (best_feature_index, best_threshold, best_polarity, best_error) = (0, 0, 1, inf)\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n        for threshold in unique_values:\n            for polarity in [1, -1]:\n                predictions = polarity * np.ones((n_samples,))\n                predictions[X[:, feature_index] * polarity < threshold * polarity] = -1\n                errors = np.where(predictions != y, sample_weights, 0)\n                error = np.sum(errors)\n                if error < best_error:\n                    best_feature_index = feature_index\n                    best_threshold = threshold\n                    best_polarity = polarity\n                    best_error = error\n    return {'feature_index': best_feature_index, 'threshold': np.round(best_threshold, 4), 'polarity': best_polarity, 'weighted_error': np.round(best_error, 4)}\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([1, -1, 1])"}
{"task_id": 273, "completion_id": 0, "solution": "import math\nimport numpy as np\nfrom collections import Counter\ndef entropy(labels):\n    \"\"\"Calculate Shannon entropy of a list of labels.\"\"\"\n    n_samples = len(labels)\n    freq_dist = Counter(labels)\n    probs = [count / n_samples for count in freq_dist.values()]\n    return -sum((p * math.log2(p) for p in probs))\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\"\"\"\n    feature = np.array(feature)\n    target = np.array(target)\n    if np.all(feature == feature[0]):\n        return (None, 0.0)\n    data = sorted(zip(feature, target))\n    best_threshold = None\n    best_information_gain = 0.0\n    parent_entropy = entropy(target)\n    left_labels = []\n    right_labels = (data[0][1],)\n    right_size = len(right_labels)\n    for i in range(1, len(data)):\n        if data[i][0] != data[i - 1][0]:\n            left_labels.append(data[i - 1][1])\n            left_size = len(left_labels)\n            right_labels = target[i:]\n            right_size = len(right_labels)\n            left_entropy = entropy(left_labels)\n            right_entropy = entropy(right_labels)\n            information_gain = parent_entropy - left_size / len(target) * left_entropy - right_size / len(target) * right_entropy\n            if information_gain > best_information_gain:\n                best_threshold = data[i][0]\n                best_information_gain = information_gain\n            left_labels.append(data[i][1])\n            right_labels = target[i + 1:]\n    best_threshold = round(best_threshold, 4) if best_threshold is not None else None\n    best_information_gain = round(best_information_gain, 4)\n    return (best_threshold, best_information_gain)"}
{"task_id": 286, "completion_id": 0, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    try:\n        init_fn = globals()[name]\n        if callable(init_fn):\n            return init_fn\n        else:\n            raise ValueError('Invalid initialization function.')\n    except KeyError:\n        raise ValueError('Invalid initialization function.')\nname = 'ones_init'\ninit_fn = get_initializer(name)"}
{"task_id": 287, "completion_id": 0, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    out_H = int((H - p_h) / s_h + 1)\n    out_W = int((W - p_w) / s_w + 1)\n    output = np.zeros((N, C, out_H, out_W))\n    for n in range(N):\n        for c in range(C):\n            for h in range(out_H):\n                for w in range(out_W):\n                    output[n, c, h, w] = np.average(X[n, c, h * s_h:h * s_h + p_h, w * s_w:w * s_w + p_w])\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for h in range(out_H):\n                for w in range(out_W):\n                    average_val = np.average(X[n, c, h * s_h:h * s_h + p_h, w * s_w:w * s_w + p_w])\n                    grad_input[n, c, h * s_h:h * s_h + p_h, w * s_w:w * s_w + p_w] += accum_grad[n, c, h, w] / average_val / (p_h * p_w)\n    return (output.round(4).tolist(), grad_input.round(4).tolist())"}
{"task_id": 290, "completion_id": 0, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value)\n    if isinstance(tree_a, Leaf) != isinstance(tree_b, Leaf):\n        return False\n    if tree_a.feature != tree_b.feature:\n        return False\n    if np.abs(tree_a.threshold - tree_b.threshold) > 1e-08:\n        return False\n    if not compare_trees(tree_a.left, tree_b.left):\n        return False\n    if not compare_trees(tree_a.right, tree_b.right):\n        return False\n    return True"}
{"task_id": 292, "completion_id": 0, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    parent1_arr = np.array(parent1)\n    parent2_arr = np.array(parent2)\n    if parent1_arr.shape != parent2_arr.shape:\n        return -1\n    child1_arr = np.concatenate((parent1_arr[:, :cutoff], parent2_arr[:, cutoff:]), axis=1)\n    child2_arr = np.concatenate((parent2_arr[:, :cutoff], parent1_arr[:, cutoff:]), axis=1)\n    child1 = child1_arr.tolist()\n    child2 = child2_arr.tolist()\n    return (child1, child2)"}
{"task_id": 294, "completion_id": 0, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    adj = {vertex: [] for vertex in G['_V2I']}\n    for edge in G['_G']:\n        (source, target, weight) = edge\n        (source, target) = (source[0], target[0])\n        adj[source].append((target, weight))\n        if not G['is_directed']:\n            adj[target].append((source, weight))\n    for vertex in adj:\n        adj[vertex] = sorted(adj[vertex])\n    return adj"}
{"task_id": 296, "completion_id": 0, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    bin_x = x.astype(int)\n    is_binary = np.all((bin_x == 0) | (bin_x == 1))\n    return is_binary"}
{"task_id": 298, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    corpus_tokens = [sentence.split() for sentence in corpus]\n    query_tokens = query.split()\n    if N > 1:\n        corpus_tokens = [['<bol>'] * (N - 1) + sentence + ['<eol>'] for sentence in corpus_tokens]\n        query_tokens = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n    ngram_counter = Counter()\n    prefix_counter = Counter()\n    for sentence in corpus_tokens:\n        for i in range(len(sentence) - N + 1):\n            ngram = tuple(sentence[i:i + N])\n            prefix = tuple(sentence[i:i + N - 1])\n            ngram_counter[ngram] += 1\n            prefix_counter[prefix] += 1\n    log_prob = 0.0\n    for i in range(len(query_tokens) - N + 1):\n        ngram = tuple(query_tokens[i:i + N])\n        prefix = tuple(query_tokens[i:i + N - 1])\n        count_ngram = ngram_counter[ngram]\n        count_prefix = prefix_counter[prefix]\n        if count_prefix == 0 or count_ngram == 0:\n            return float('-inf')\n        prob_ngram = count_ngram / count_prefix\n        log_prob += math.log(prob_ngram)\n    return round(log_prob, 4)"}
{"task_id": 302, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.spatial import distance\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n = X.shape[0]\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i + 1, n):\n            W[i, j] = 1 / (1 + distance.euclidean(X[i], X[j]))\n            W[j, i] = W[i, j]\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    (_, V) = np.linalg.eig(L)\n    idx = np.argsort(np.abs(V))[:, :k]\n    E = V[:, idx]\n    centroids = E[:k]\n    labels = np.zeros(n, dtype=int)\n    for _ in range(100):\n        for i in range(n):\n            labels[i] = np.argmin(distance.cdist(np.atleast_2d(E[i]), centroids))\n        new_centroids = np.zeros((k, k))\n        for j in range(k):\n            if np.any(labels == j):\n                new_centroids[j] = np.mean(E[labels == j], axis=0)\n            else:\n                new_centroids[j] = E[np.random.randint(n)]\n        if np.all(new_centroids == centroids):\n            break\n        centroids = new_centroids\n    return labels.tolist()"}
{"task_id": 303, "completion_id": 0, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    (prev_label, prev_mine) = params[max(ix - 1, 0)]\n    (curr_label, curr_mine) = params[ix]\n    return f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\n\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\nMine [{curr_label}]:\\n{curr_mine}\\n\\nTheirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n----------------------- END DEBUG -----------------------'"}
{"task_id": 304, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.c_[np.ones(X.shape[0]), X]\n    if type(mu) in [int, float]:\n        mu = np.full(X.shape[1], mu)\n    mu = np.array(mu)\n    if V is None:\n        V = np.eye(X.shape[1])\n    if type(V) in [int, float]:\n        V *= np.eye(X.shape[1])\n    V = np.diag(V) if type(V) in [list, tuple] else V\n    V_inv = np.linalg.inv(V)\n    Sigma_b = np.linalg.inv(V_inv + X.T @ X)\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    mu_b = np.round(mu_b, 4)\n    return list(mu_b)"}
{"task_id": 308, "completion_id": 0, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs // 2\n    mel_min = 2595.0 * np.log10(1 + min_freq / 700.0)\n    mel_max = 2595.0 * np.log10(1 + max_freq / 700.0)\n    mel_points = np.linspace(mel_min, mel_max, n_filters + 2)\n    freq_points = 700 * (10 ** (mel_points / 2595.0) - 1)\n    bins = np.floor((N + 1) * freq_points / fs)\n    filterbank = np.zeros([n_filters, N // 2 + 1])\n    for i in range(n_filters):\n        start = int(bins[i])\n        mid = int(bins[i + 1])\n        end = int(bins[i + 2])\n        for k in range(start, mid):\n            filterbank[i, k] = (k - start) / (mid - start)\n        for k in range(mid, end):\n            filterbank[i, k] = (end - k) / (end - mid)\n    if normalize:\n        filterbank = np.divide(filterbank, np.sum(filterbank, axis=1)[:, np.newaxis])\n    return np.around(filterbank, decimals=4).tolist()"}
{"task_id": 312, "completion_id": 0, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n    N = window_len - 1 if symmetric else window_len\n    n = np.arange(window_len)\n    window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    return np.round(window, 4).tolist()"}
{"task_id": 313, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef digamma(x):\n    x -= 1.0\n    result = 0.0\n    while x <= 5:\n        result -= 1 / x\n        x += 1.0\n    y = 1 / (x * x)\n    result += math.log(x) - 0.5 * y\n    y *= y\n    result += y / 12 - y * y / 2880\n    y *= y\n    result -= y / 20160\n    return result\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = digamma(gamma[d,t]) - digamma(sum(gamma[d,:])),\n    where digamma is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of digamma(gamma[d,t]) - digamma(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    gamma_sum = sum(gamma[d])\n    log_expected_value = digamma(gamma[d][t]) - digamma(gamma_sum)\n    return round(log_expected_value, 4)\ngamma = [[1.1, 1.2, 1.3], [1.4, 1.5, 1.6], [1.7, 1.8, 1.9]]\nd = 1\nt = 2"}
{"task_id": 317, "completion_id": 0, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_prediction, prev_label) = params[prev_ix]\n    prev_gold = golds[prev_label]\n    (curr_prediction, curr_label) = params[ix]\n    curr_gold = golds[curr_label]\n    return f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\nMine [{curr_label}]:\\n{curr_prediction}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------\\n'\nparams = [('pred1', 'label1'), ('pred2', 'label2'), ('pred3', 'label3')]\ngolds = {'label1': 'gold1', 'label2': 'gold2', 'label3': 'gold3'}\nix = 2\nwarn_str = ' (WARNING: mismatch)'"}
{"task_id": 318, "completion_id": 0, "solution": "import numpy as np\nclass DecisionStump:\n\n    def __init__(self):\n        self.column = None\n        self.polarity = 1\n        self.threshold = None\n        self.alpha = None\n\n    def fit(self, X, y, sample_weights):\n        min_error = np.inf\n        for column in range(X.shape[1]):\n            thresholds = np.unique(X[:, column])\n            for threshold in thresholds:\n                p = 1\n                predictions = np.ones(np.shape(y))\n                predictions[X[:, column] < threshold] = -1\n                error = np.sum(sample_weights[predictions != y])\n                if error > 0.5:\n                    error = 1 - error\n                    p = -1\n                if error < min_error:\n                    min_error = error\n                    self.column = column\n                    self.threshold = threshold\n                    self.polarity = p\n        self.alpha = 0.5 * np.log((1.0 - min_error) / (min_error + 1e-10))\n        predictions = self.predict(X)\n        sample_weights *= np.exp(-self.alpha * y * predictions)\n        sample_weights /= np.sum(sample_weights)\n\n    def predict(self, X):\n        n_samples = np.shape(X)[0]\n        predictions = np.ones(np.shape(X)[0])\n        column_predictions = np.ones(np.shape(X)[0])\n        if self.polarity == 1:\n            column_predictions[X[:, self.column] < self.threshold] = -1\n        else:\n            column_predictions[X[:, self.column] < self.threshold] = 1\n        predictions = np.multiply(self.polarity, column_predictions)\n        return predictions\nclass Adaboost:\n\n    def __init__(self, n_estimators=50):\n        self.n_estimators = n_estimators\n        self.estimators = []\n\n    def fit(self, X, y):\n        (n_samples, n_features) = np.shape(X)\n        sample_weights = np.full((n_samples,), 1 / n_samples)\n        for _ in range(self.n_estimators):\n            stump = DecisionStump()\n            stump.fit(X, y, sample_weights)\n            self.estimators.append(stump)\n            self.update_weights(X, y, stump)\n\n    def predict(self, X):\n        y_predict = np.zeros(X.shape[0])\n        for estimator in self.estimators:\n            y_predict += estimator.alpha * estimator.predict(X)\n        y_predict = np.sign(y_predict)\n        return y_predict.tolist()\n\n    def update_weights(self, X, y, estimator):\n        predictions = estimator.predict(X)\n        incorrect = y != predictions\n        estimator_error = np.mean(np.average(incorrect))\n        if estimator_error == 0:\n            estimator_weight = 1000000000.0\n        elif estimator_error == 1:\n            estimator_weight = 0\n        else:\n            estimator_weight = 0.5 * np.log((1.0 - estimator_error) / estimator_error)\n        return estimator_weight\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    model = Adaboost(n_estimators=n_estimators)\n    model.fit(X_train, y_train)\n    return model.predict(X_test)"}
{"task_id": 329, "completion_id": 0, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    if positive_only:\n        k = np.arange(N // 2 + 1)\n    elif N % 2 == 0:\n        k = np.concatenate((np.arange(N // 2), np.arange(-N // 2, 0)))\n    else:\n        k = np.concatenate((np.arange((N - 1) // 2 + 1), np.arange(-(N - 1) // 2, 0)))\n    f_k = k * fs / N\n    return np.round(f_k, 4).tolist()"}
{"task_id": 331, "completion_id": 0, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask, dtype=bool)\n    oob_errors = []\n    for i in range(len(y_true)):\n        oob_predictions = predictions[i, oob_mask[i]]\n        if len(oob_predictions) > 0:\n            oob_average = np.mean(oob_predictions)\n            oob_error = (oob_average - y_true[i]) ** 2\n            oob_errors.append(oob_error)\n    if len(oob_errors) == 0:\n        return -1\n    else:\n        return round(np.mean(oob_errors), 4)"}
{"task_id": 332, "completion_id": 0, "solution": "from collections import Counter, defaultdict\ndef build_fp_tree(transactions, min_support):\n    root = {'support': 0, 'children': {}}\n    frequencies = Counter()\n    for transaction in transactions:\n        for item in transaction:\n            frequencies[item] += 1\n    items = [item for (item, support) in frequencies.items() if support >= min_support]\n    items.sort(key=lambda x: (-frequencies[x], x))\n    for transaction in transactions:\n        transaction = [item for item in transaction if item in items]\n        transaction.sort(key=lambda x: items.index(x))\n        node = root\n        for item in transaction:\n            if item not in node['children']:\n                node['children'][item] = {'support': 0, 'children': {}}\n            child = node['children'][item]\n            child['support'] += 1\n            node = child\n    return root\ntransactions = [['a', 'b', 'c'], ['a', 'b', 'c'], ['b', 'c'], ['a', 'c']]"}
{"task_id": 336, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    if isinstance(X, list):\n        X = np.array(X, dtype=float)\n    if isinstance(Y, list):\n        Y = np.array(Y, dtype=float)\n    if Y is not None and X.shape[1] != Y.shape[1]:\n        return -1\n    if Y is None:\n        Y = X\n    kernel_matrix = np.dot(X, Y.T) + c0\n    return np.round(kernel_matrix, 4).tolist()"}
{"task_id": 340, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * np.square(grad)\n    m_hat_t = m_t / (1 - np.power(beta1, t))\n    v_hat_t = v_t / (1 - np.power(beta2, t))\n    new_param = param - lr * m_hat_t / (np.sqrt(v_hat_t) + eps)\n    return (np.round(new_param, 8).tolist(), np.round(m_t, 8).tolist(), np.round(v_t, 8).tolist())"}
{"task_id": 343, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    (N, D) = theta_samples.shape\n    ret_N = int(retain_prcnt * N)\n    indices = np.argsort(rewards)[-ret_N:]\n    retained_samples = theta_samples[indices]\n    mean = np.mean(retained_samples, axis=0).tolist()\n    mean = [round(m, 4) for m in mean]\n    variance = np.var(retained_samples, axis=0).tolist()\n    variance = [round(v, 4) for v in variance]\n    return (mean, variance)"}
{"task_id": 353, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    label_counts = Counter(labels)\n    total_count = len(labels)\n    entropy = 0.0\n    for count in label_counts.values():\n        p = count / total_count\n        entropy -= p * math.log2(p)\n    return round(entropy, 5)"}
{"task_id": 354, "completion_id": 0, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, _, out_ch) = W.shape\n    if type(pad) == int:\n        pad_top = pad_bottom = pad_left = pad_right = pad\n    elif type(pad) == tuple:\n        if len(pad) == 2:\n            pad_top = pad_bottom = pad[0]\n            pad_left = pad_right = pad[1]\n        else:\n            (pad_top, pad_bottom, pad_left, pad_right) = pad\n    elif pad == 'same':\n        pad_top = pad_bottom = (kernel_rows - 1) * dilation // 2\n        pad_left = pad_right = (kernel_cols - 1) * dilation // 2\n    X_padded = np.pad(X, ((0, 0), (pad_top, pad_bottom), (pad_left, pad_right), (0, 0)))\n    out_rows = (in_rows + pad_top + pad_bottom - ((kernel_rows - 1) * dilation + 1)) // stride + 1\n    out_cols = (in_cols + pad_left + pad_right - ((kernel_cols - 1) * dilation + 1)) // stride + 1\n    result = np.empty((n_ex, out_rows, out_cols, out_ch))\n    for i in range(out_rows):\n        for j in range(out_cols):\n            h_start = i * stride\n            h_end = h_start + kernel_rows * dilation\n            w_start = j * stride\n            w_end = w_start + kernel_cols * dilation\n            X_slice = X_padded[:, h_start:h_end:dilation, w_start:w_end:dilation, :]\n            X_col = X_slice.transpose(3, 1, 2, 0).reshape((in_ch * kernel_rows * kernel_cols, -1))\n            W_col = W.transpose(3, 0, 1, 2).reshape((out_ch, -1))\n            out = W_col @ X_col\n            result[:, i, j, :] = out.reshape(out_ch, n_ex).T\n    return result.tolist()"}
{"task_id": 355, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    data_centered = data - np.mean(data, axis=0)\n    if solver == 'svd':\n        (_, _, eigen_vectors) = np.linalg.svd(data_centered)\n    elif solver == 'eigen':\n        covariance_matrix = np.cov(data_centered, rowvar=False, ddof=1)\n        (_, eigen_vectors) = np.linalg.eigh(covariance_matrix)\n    else:\n        raise ValueError(\"Invalid solver. Please choose 'svd' or 'eigen'.\")\n    explained_variance = np.var(data_centered, axis=0)\n    idx = np.argsort(explained_variance)[::-1]\n    explained_variance = explained_variance[idx]\n    eigen_vectors = eigen_vectors[:, idx]\n    eigen_vectors = np.where(np.argmax(eigen_vectors < 0, axis=1) == 0, eigen_vectors, -eigen_vectors)\n    scores = np.dot(data_centered, eigen_vectors)\n    scores = scores[:, :n_components]\n    scores = np.round(scores, 4).tolist()\n    explained_variance_ratio = np.round(explained_variance[:n_components] / np.sum(explained_variance), 4).tolist()\n    return (scores, explained_variance_ratio)"}
{"task_id": 356, "completion_id": 0, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return max(range(len(leaf.value)), key=leaf.value.__getitem__)\n    else:\n        return leaf.value"}
{"task_id": 357, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = data[:K].copy()\n    for _ in range(max_iters):\n        distances = np.sqrt(((data - centroids[:, np.newaxis]) ** 2).sum(axis=-1))\n        closest_centroid = np.argmin(distances, axis=0)\n        new_centroids = np.array([data[closest_centroid == k].mean(axis=0) if np.any(closest_centroid == k) else centroids[k] for k in range(K)])\n        if np.linalg.norm(new_centroids - centroids) < 1e-06:\n            break\n        centroids = new_centroids\n    return np.round(np.sort(centroids, axis=0), 4).tolist()"}
{"task_id": 362, "completion_id": 0, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    data = np.array(data, dtype=float)\n    row_sums = np.sum(data, axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    normalized_data = data / row_sums[:, np.newaxis]\n    normalized_data = np.round(normalized_data, 4)\n    return normalized_data.tolist()"}
{"task_id": 363, "completion_id": 0, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def is_continuous_helper(space: Space, is_composite: bool):\n        if isinstance(space, Box):\n            return True"}
{"task_id": 369, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for update in updates:\n        running_pred -= learning_rate * update\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        class_probs = np.exp(running_pred) / np.sum(np.exp(running_pred), axis=1, keepdims=True)\n        return np.argmax(class_probs, axis=1)"}
{"task_id": 371, "completion_id": 0, "solution": "import numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    if type(pad) == int:\n        X = np.pad(X, ((0, 0), (pad, pad), (0, 0)))\n    elif type(pad) == tuple:\n        X = np.pad(X, ((0, 0), (pad[0], pad[1]), (0, 0)))\n    elif pad.lower() == 'same':\n        output_length = np.ceil(X.shape[1] / stride).astype(int)\n        total_pad = max(0, (output_length - 1) * stride + W.shape[0] - X.shape[1])\n        pad_left = total_pad // 2\n        pad_right = total_pad - pad_left\n        X = np.pad(X, ((0, 0), (pad_left, pad_right), (0, 0)))\n    dilated_W = W\n    if dilation > 0:\n        zero_array = np.zeros((dilation * (W.shape[0] - 1) + 1, W.shape[1], W.shape[2]))\n        zero_array[::dilation + 1, :, :] = W\n        dilated_W = zero_array\n    output_length = (X.shape[1] - dilated_W.shape[0]) // stride + 1\n    output = np.zeros((X.shape[0], output_length, dilated_W.shape[2]))\n    for i in range(output_length):\n        output[:, i, :] = np.sum(X[:, i * stride:i * stride + dilated_W.shape[0], :] * dilated_W, axis=(1, 2))\n    return output.tolist()"}
{"task_id": 373, "completion_id": 0, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    y = np.array(y)\n    if y.size == 0:\n        return 0.0\n    counts = np.bincount(y)\n    p = counts / y.size\n    gini = 1 - np.sum(p ** 2)\n    return round(gini, 4)"}
{"task_id": 374, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    (m, n) = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n    for _ in range(n_iterations):\n        y_pred = np.dot(X, weights) + bias\n        dw = 2 / m * np.dot(X.T, y_pred - y)\n        db = 2 / m * np.sum(y_pred - y)\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n    weights = [round(w, 4) for w in weights.tolist()]\n    bias = round(bias, 4)\n    return (weights, bias)"}
{"task_id": 376, "completion_id": 0, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X = np.array(X)\n    if X.shape[0] != X.shape[1]:\n        return False\n    return np.allclose(X, X.T, atol=1e-08)"}
{"task_id": 377, "completion_id": 0, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    This function calculates the negative gradients for the logistic loss function.\n    :param y: list - binary class labels (0 or 1)\n    :param f: list - current prediction scores (floats)\n    :return: list - the list of negative gradients g rounded to four decimal places\n    \"\"\"\n    if any((i not in [0, 1] for i in y)):\n        return -1\n    y_prime = [2 * i - 1 for i in y]\n    g = [round(y_prime[i] / (1 + np.exp(y_prime[i] * f[i])), 4) for i in range(len(y))]\n    return g"}
{"task_id": 380, "completion_id": 0, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    ALPHA = 1.6732632423543772\n    SCALE = 1.0507009873554805\n    x = np.array(x)\n    if order == 0:\n        result = np.where(x > 0, x, np.exp(x) - 1) * ALPHA * SCALE\n    elif order == 1:\n        result = np.where(x > 0, SCALE, x * SCALE * ALPHA + SCALE * ALPHA)\n    elif order == 2:\n        result = np.where(x > 0, SCALE * ALPHA, SCALE * ALPHA)\n    else:\n        raise ValueError('Order has to be 0, 1 or 2.')\n    return np.round(result, 4).tolist()"}
{"task_id": 387, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    N = len(y)\n    y_hat = np.full(N, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_hat\n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        sorted_residuals = residuals[sorted_indices]\n        (best_split, best_score, best_mean_left, best_mean_right) = (0, float('inf'), 0, 0)\n        for i in range(1, N):\n            if sorted_x[i] == sorted_x[i - 1]:\n                continue\n            split = (sorted_x[i - 1] + sorted_x[i]) / 2\n            mean_left = np.mean(sorted_residuals[:i])\n            mean_right = np.mean(sorted_residuals[i:])\n            score = np.sum((sorted_residuals[:i] - mean_left) ** 2) + np.sum((sorted_residuals[i:] - mean_right) ** 2)\n            if score < best_score:\n                (best_split, best_score, best_mean_left, best_mean_right) = (split, score, mean_left, mean_right)\n        best_mean = np.mean(sorted_residuals)\n        stump_pred = np.where(x <= best_split, best_mean_left, best_mean_right)\n        if best_split == 0:\n            stump_pred = np.full(N, best_mean)\n        y_hat += learning_rate * stump_pred\n    return np.round(y_hat, 4).tolist()"}
{"task_id": 394, "completion_id": 0, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * np.square(grad)\n    w = w - learning_rate * grad / np.sqrt(Eg + 1e-08)\n    return (np.round(w, 4).tolist(), np.round(Eg, 4).tolist())"}
{"task_id": 398, "completion_id": 0, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if derivative:\n        result = np.where(x >= 0, 1, elu(x, alpha) + alpha)\n    else:\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    return [round(val, 4) for val in result]"}
{"task_id": 411, "completion_id": 0, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n\n    def check_tuple(lst):\n        return any((isinstance(i, (list, tuple, np.ndarray)) for i in lst))\n\n    def check_continuous(lst):\n        flat_lst = [item for sublist in lst for item in sublist]\n        return any((isinstance(i, float) and (not i.is_integer()) for i in flat_lst))\n\n    def get_unique(lst):\n        unique_lst = []\n        for i in range(len(lst[0])):\n            unique_lst.append(list(set(np.array(lst)[:, i])))\n        return unique_lst\n    stats = {}\n    stats['tuple_actions'] = check_tuple(actions)\n    stats['tuple_observations'] = check_tuple(observations)\n    stats['multidim_actions'] = stats['tuple_actions']\n    stats['multidim_observations'] = stats['tuple_observations']\n    stats['continuous_actions'] = check_continuous(actions)\n    stats['continuous_observations'] = check_continuous(observations)\n    stats['n_actions_per_dim'] = [len(set(np.array(actions)[:, i])) for i in range(len(actions[0]))]\n    stats['action_dim'] = len(actions[0])\n    stats['n_obs_per_dim'] = [len(set(np.array(observations)[:, i])) if stats['tuple_observations'] else 0 for i in range(len(observations))]\n    stats['obs_dim'] = len(observations) if stats['tuple_observations'] else 1\n    stats['action_ids'] = get_unique(actions)\n    stats['obs_ids'] = get_unique(observations) if stats['tuple_observations'] else [[i] for i in observations]\n    return stats"}
{"task_id": 413, "completion_id": 0, "solution": "import numpy as np\ndef mean_squared_error(y_true, y_pred):\n    \"\"\"Calculate the mean squared error between the true and predicted values.\"\"\"\n    return np.mean((y_true - y_pred) ** 2)\ndef divide_data_by_condition(X, y, condition):\n    \"\"\"Divide the data based on the given condition.\"\"\"\n    return (X[condition], y[condition], X[~condition], y[~condition])\ndef find_best_split(X, y):\n    \"\"\"Find the best split point and feature for the given data.\"\"\"\n    (best_feature, best_split, best_mse) = (None, None, np.inf)\n    for feature in range(X.shape[1]):\n        values = np.sort(np.unique(X[:, feature]))\n        split_points = (values[1:] + values[:-1]) / 2\n        for split in split_points:\n            condition = X[:, feature] < split\n            (y_left, y_right) = (y[condition], y[~condition])\n            mse = mean_squared_error(y_left, np.mean(y_left))\n            mse += mean_squared_error(y_right, np.mean(y_right))\n            if mse < best_mse:\n                (best_feature, best_split, best_mse) = (feature, split, mse)\n    return (best_feature, best_split, best_mse)\ndef split_tree(X, y, depth, max_depth):\n    \"\"\"Recursively split the tree based on the best split until the maximum depth is reached.\"\"\"\n    if depth >= max_depth or len(np.unique(y)) == 1:\n        return np.mean(y)\n    (feature, split, _) = find_best_split(X, y)\n    if feature is None:\n        return np.mean(y)\n    (X_left, y_left, X_right, y_right) = divide_data_by_condition(X, y, X[:, feature] < split)\n    return lambda x: split_tree(X_left, y_left, depth + 1, max_depth) if x[feature] < split else split_tree(X_right, y_right, depth + 1, max_depth)\ndef gbdt_regression(X_train, y_train, X_test, n_estimators=10, learning_rate=0.1, max_depth=3):\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\"\"\"\n    trees = []\n    prediction = np.mean(y_train)\n    for _ in range(n_estimators):\n        residuals = y_train - prediction\n        tree = split_tree(X_train, residuals, 0, max_depth)\n        trees.append(tree)\n        prediction += learning_rate * np.array([tree(x) for x in X_train])\n    final_predictions = np.array([sum((learning_rate * tree(x) for tree in trees)) + prediction for x in X_test])\n    return [round(pred, 4) for pred in final_predictions.tolist()]"}
{"task_id": 416, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    This function computes the multivariate Gaussian probability density function (PDF) for a given set of data \n    points X, mean vector, and covariance matrix.\n\n    Args:\n        X: A NumPy array of shape (n_samples, n_features) containing the data points.\n        mean: The mean vector of the distribution, of length n_features.\n        cov: The covariance matrix of shape (n_features, n_features) which must be positive-definite (invertible).\n\n    Returns:\n        A Python list of length n_samples, whose ith element is the PDF value for X[i], rounded to four decimal places.\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    mean = np.array(mean)\n    cov = np.array(cov)\n    det = np.linalg.det(cov)\n    inv = np.linalg.inv(cov)\n    denominator = math.sqrt((2 * np.pi) ** n_features * det)\n    pdf_values = []\n    for i in range(n_samples):\n        x_minus_mu = X[i] - mean\n        exp_term = np.dot(np.dot(x_minus_mu.T, inv), x_minus_mu)\n        pdf_value = 1.0 / denominator * np.exp(-0.5 * exp_term)\n        pdf_values.append(round(pdf_value, 4))\n    return pdf_values"}
{"task_id": 419, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.concatenate([X, np.ones((X.shape[0], 1))], axis=1)\n        X_new = np.concatenate([X_new, np.ones((X_new.shape[0], 1))], axis=1)\n    if isinstance(mu, float):\n        mu = np.repeat(mu, X.shape[1])\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, float):\n        V = V * np.eye(X.shape[1])\n    elif isinstance(V, np.ndarray) and len(V.shape) == 1:\n        V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    X_t_X = np.dot(X.T, X)\n    X_t_y = np.dot(X.T, y)\n    Sigma_p = np.linalg.inv(V_inv + X_t_X)\n    Mu_p = np.dot(Sigma_p, np.dot(V_inv, mu) + X_t_y)\n    y_new = np.dot(X_new, Mu_p)\n    return list(map(lambda x: round(x, 4), y_new.tolist()))"}
{"task_id": 423, "completion_id": 0, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Computes the Root Mean Squared Logarithmic Error (RMSLE).\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    for value in actual + predicted:\n        if value < 0:\n            return -1\n    log_diffs_squared = [(np.log(1 + predicted_val) - np.log(1 + actual_val)) ** 2 for (predicted_val, actual_val) in zip(predicted, actual)]\n    rmsle = np.sqrt(sum(log_diffs_squared) / len(actual))\n    return round(rmsle, 4)"}
{"task_id": 428, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    else:\n        n = np.arange(0, window_len)\n        if symmetric:\n            hann_window = 0.5 - 0.5 * np.cos(2 * np.pi * n / (window_len - 1))\n        else:\n            hann_window = 0.5 - 0.5 * np.cos(2 * np.pi * n / (window_len + 1))\n        return np.round(hann_window, 4).tolist()"}
{"task_id": 433, "completion_id": 0, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        receptive_field_size = shape[2] * shape[3]\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n    else:\n        (fan_in, fan_out) = (shape[0], shape[1])\n    return (float(fan_in), float(fan_out))"}
{"task_id": 435, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    y_est = np.full(y.shape, np.mean(y))\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(val, 4) for val in y_est]\n    for t in range(n_estimators):\n        residuals = y - y_est\n        X_with_ones = np.c_[np.ones(X.shape[0]), X]\n        coef = np.linalg.inv(X_with_ones.T @ X_with_ones) @ X_with_ones.T @ residuals\n        h_t = X_with_ones @ coef\n        y_est = y_est + learning_rate * h_t\n    return [round(val, 4) for val in y_est]"}
{"task_id": 437, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    x = np.array(x)\n    s = 1.0 / (1.0 + np.exp(-x))\n    ds = s * (1 - s)\n    d2s = ds * (1 - 2 * s)\n    if order == 0:\n        result = s\n    elif order == 1:\n        result = ds\n    else:\n        result = d2s\n    if np.isscalar(x):\n        return np.round(result.item(), 4)\n    else:\n        return np.round(result.tolist(), 4)"}
{"task_id": 438, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]] | int:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]] | int\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = max(y) + 1\n    elif num_classes < max(y) + 1:\n        return -1\n    else:\n        one_hot = np.zeros((len(y), num_classes))\n        one_hot[np.arange(len(y)), y] = 1\n        return one_hot.tolist()"}
{"task_id": 439, "completion_id": 0, "solution": "import itertools\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    candidate_itemsets = create_candidate_1_itemsets(transactions)\n    frequent_itemsets = [itemset for itemset in candidate_itemsets if is_frequent(itemset, transactions, min_sup)]\n    all_frequent_itemsets = frequent_itemsets\n    k = 2\n    while len(frequent_itemsets) > 0:\n        candidate_itemsets = apriori_gen(frequent_itemsets, k)\n        frequent_itemsets = [itemset for itemset in candidate_itemsets if is_frequent(itemset, transactions, min_sup)]\n        all_frequent_itemsets += frequent_itemsets\n        k += 1\n    all_frequent_itemsets.sort(key=lambda itemset: (len(itemset), itemset))\n    return all_frequent_itemsets\ndef create_candidate_1_itemsets(transactions: list[list[int]]) -> list[tuple]:\n    \"\"\"Create a list of all 1-itemsets found in transactions.\"\"\"\n    result = set()\n    for transaction in transactions:\n        for item in transaction:\n            result.add((item,))\n    return list(result)\ndef is_frequent(itemset: tuple, transactions: list[list[int]], min_sup: float) -> bool:\n    \"\"\"Determine whether an itemset is frequent.\"\"\"\n    count = 0\n    for transaction in transactions:\n        if contains_itemset(transaction, itemset):\n            count += 1\n    return count / len(transactions) >= min_sup\ndef contains_itemset(transaction: list[int], itemset: tuple) -> bool:\n    \"\"\"Check whether a transaction contains a specific itemset.\"\"\"\n    return all((item in transaction for item in itemset))\ndef apriori_gen(frequent_itemsets: list[tuple], k: int) -> list[tuple]:\n    \"\"\"Generate candidate itemsets of length k by joining frequent itemsets of length k-1.\"\"\"\n    result = set()\n    for i in range(len(frequent_itemsets)):\n        for j in range(i + 1, len(frequent_itemsets)):\n            itemsets = list(frequent_itemsets[i])[:k - 2]\n            if itemsets == list(frequent_itemsets[j])[:k - 2]:\n                candidate = tuple(sorted(set(frequent_itemsets[i] + frequent_itemsets[j])))\n                if all((tuple(combination) in frequent_itemsets for combination in itertools.combinations(candidate, k - 1))):\n                    result.add(candidate)\n    return list(result)"}
{"task_id": 440, "completion_id": 0, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_np = np.array(predictions)\n    averaged_predictions_np = np.mean(predictions_np, axis=0)\n    averaged_predictions_np = np.around(averaged_predictions_np, decimals=4)\n    averaged_predictions = averaged_predictions_np.tolist()\n    predicted_classes = np.argmax(averaged_predictions_np, axis=1).tolist()\n    return (averaged_predictions, predicted_classes)"}
{"task_id": 444, "completion_id": 0, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]] | int:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\"\"\"\n    X = np.array(X)\n    Y = np.array(X) if Y is None else np.array(Y)\n    if isinstance(sigma, list) and len(sigma) != X.shape[1] or (isinstance(sigma, float) and sigma <= 0):\n        return -1\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    if sigma is None:\n        sigma = [np.sqrt(X.shape[1] / 2)] * X.shape[1]\n    if isinstance(sigma, float):\n        sigma = [sigma] * X.shape[1]\n    X_norm = -0.5 * np.sum(np.square(X[:, np.newaxis, :] - Y[np.newaxis, :, :]) / np.square(sigma), axis=-1)\n    K = np.exp(X_norm)\n    return K.round(4).tolist()"}
{"task_id": 446, "completion_id": 0, "solution": "import numpy as np\ndef decision_stump(X, y):\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    entropy_parent = entropy(y)\n    best_gain = -np.inf\n    best_feature_index = -1\n    best_threshold = None\n    left_majority_label = None\n    right_majority_label = None\n    majority_label = np.argmax(np.bincount(y))\n    for feature_index in range(n_features):\n        column = X[:, feature_index]\n        sorted_index = np.argsort(column)\n        sorted_column = column[sorted_index]\n        sorted_labels = y[sorted_index]\n        for i in range(1, n_samples):\n            if sorted_column[i - 1] == sorted_column[i]:\n                continue\n            threshold = (sorted_column[i - 1] + sorted_column[i]) / 2\n            left_index = sorted_column <= threshold\n            right_index = sorted_column > threshold\n            left_labels = sorted_labels[left_index]\n            right_labels = sorted_labels[right_index]\n            gain = entropy_parent - entropy(left_labels) * left_labels.size / n_samples - entropy(right_labels) * right_labels.size / n_samples\n            if gain > best_gain or (gain == best_gain and feature_index < best_feature_index):\n                best_gain = gain\n                best_feature_index = feature_index\n                best_threshold = round(threshold, 4)\n                left_labels_counts = np.bincount(left_labels)\n                right_labels_counts = np.bincount(right_labels)\n                if left_labels_counts.size == 0:\n                    left_majority_label = majority_label\n                else:\n                    left_majority_label = np.argmax(left_labels_counts)\n                if right_labels_counts.size == 0:\n                    right_majority_label = majority_label\n                else:\n                    right_majority_label = np.argmax(right_labels_counts)\n    if best_threshold is None:\n        return (-1, None, majority_label, majority_label)\n    return (best_feature_index, best_threshold, left_majority_label, right_majority_label)\ndef entropy(labels):\n    proportions = np.bincount(labels) / len(labels)\n    entropy = -np.sum([p * np.log2(p) for p in proportions if p > 0])\n    return entropy"}
{"task_id": 452, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    if not isinstance(X, np.ndarray):\n        X = np.array(X)\n    if type(threshold) in (int, float):\n        mask1 = X[:, feature_i] >= threshold\n    else:\n        mask1 = X[:, feature_i] == threshold\n    subset1 = X[mask1].tolist()\n    subset2 = X[~mask1].tolist()\n    return [subset1, subset2]"}
{"task_id": 453, "completion_id": 0, "solution": "import numpy as np\ndef update_q_values(Q, Q_next, actions, rewards, dones, gamma):\n    if len(actions) != len(rewards) or len(actions) != len(dones) or Q.shape != Q_next.shape or (gamma < 0) or (gamma > 1):\n        return -1\n    y = np.round(Q.copy(), 4)\n    for i in range(len(actions)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        y[i][actions[i]] = np.round(target, 4)\n    return y.tolist()"}
{"task_id": 458, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    if not all((0 <= label < num_classes for label in labels)) or any((label < 0 for label in labels)):\n        return -1\n    one_hot_labels = [[0] * num_classes for _ in labels]\n    for (i, label) in enumerate(labels):\n        one_hot_labels[i][label] = 1\n    return one_hot_labels"}
{"task_id": 461, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    predictions = np.full_like(y, np.mean(y))\n    if n_estimators <= 0:\n        return np.round(predictions, 4).tolist()\n    for _ in range(n_estimators):\n        residuals = y - predictions\n        unique_x = np.unique(x)\n        (best_split_value, best_split_score, best_split_side_means) = (None, np.inf, None)\n        for split_value in unique_x[:-1]:\n            for side in [0, 1]:\n                split_mask = x <= split_value if side else x > split_value\n                if not np.any(split_mask):\n                    continue\n                split_residuals = residuals[split_mask]\n                split_side_mean = np.mean(split_residuals)\n                split_score = np.sum(split_residuals - split_side_mean) ** 2\n                if split_score < best_split_score:\n                    best_split_value = split_value\n                    best_split_score = split_score\n                    best_split_side_means = split_side_mean\n        if best_split_value is None:\n            ensemble_prediction = np.mean(residuals)\n        else:\n            ensemble_prediction = np.where(x <= best_split_value, best_split_side_means[0], best_split_side_means[1])\n        predictions += learning_rate * ensemble_prediction\n    return np.round(predictions, 4).tolist()"}
{"task_id": 471, "completion_id": 0, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    if next_state is None:\n        target = reward\n    else:\n        num_actions = len(q_table[0])\n        actions = np.argmax(q_table[next_state])\n        expectation = sum([1 - epsilon + epsilon / num_actions if a == actions else epsilon / num_actions for a in range(num_actions)])\n        target = reward + gamma * expectation\n    q_table[state][action] += lr * (target - q_table[state][action])\n    q_table = [[round(q, 4) for q in row] for row in q_table]\n    return q_table"}
{"task_id": 474, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n    for i in range(m):\n        x_train = np.random.uniform((i // 2 + 0.1) * 10, (i // 2 + 0.9) * 10, (n_train, 2))\n        y_train = np.full((n_train,), i % 2 * interval)\n        y_train = y_train + (i % 2 * 2 - 1)\n        x_val = np.random.uniform((i // 2 + 0.1) * 10, (i // 2 + 0.9) * 10, (n_val, 2))\n        y_val = np.full((n_val,), i % 2 * interval)\n        y_val = y_val + (i % 2 * 2 - 1)\n        X_train.append(np.round(x_train, 4))\n        Y_train.append(np.round(y_train, 4))\n        X_val.append(np.round(x_val, 4))\n        Y_val.append(np.round(y_val, 4))\n    X_train = np.concatenate(X_train)\n    Y_train = np.concatenate(Y_train)\n    X_val = np.concatenate(X_val)\n    Y_val = np.concatenate(Y_val)\n    return (X_train, X_val, Y_train, Y_val)"}
{"task_id": 475, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to w.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size \u03b1.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as w)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * np.square(grad)\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 479, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    n_arms = len(rewards[0])\n    estimated_values = np.full(n_arms, ev_prior)\n    pull_counters = np.zeros(n_arms)\n    for rewards_at_t in rewards:\n        if np.random.uniform() < epsilon:\n            chosen_arm = np.random.randint(0, n_arms)\n        else:\n            max_value = np.max(estimated_values)\n            max_value_arms = np.where(estimated_values == max_value)[0]\n            chosen_arm = np.min(max_value_arms)\n        reward = rewards_at_t[chosen_arm]\n        pull_counters[chosen_arm] += 1\n        estimated_values[chosen_arm] += (reward - estimated_values[chosen_arm]) / pull_counters[chosen_arm]\n    return [round(val, 4) for val in estimated_values]"}
{"task_id": 481, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.spatial import distance_matrix\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if len(data) == 0:\n        return []\n    dist_mat = distance_matrix(data, data)\n    core_points = {i: list(np.where(dist_mat[i] <= eps)[0]) for i in range(len(data)) if len(np.where(dist_mat[i] <= eps)[0]) >= min_samples}\n    cluster_labels = np.full(len(data), -1)\n    cluster_id = 0\n    for i in range(len(data)):\n        if i in core_points:\n            if cluster_labels[i] == -1:\n                build_cluster(i, core_points, cluster_labels, cluster_id, eps, min_samples)\n                cluster_id += 1\n    return cluster_labels.tolist()"}
{"task_id": 482, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"\n    Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y, dtype='int')\n    input_shape = y.shape\n    if input_shape and input_shape[-1] > 1:\n        raise ValueError('y_true should be a vector of labels')\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    elif num_classes <= np.max(y):\n        raise ValueError('num_classes should be greater than maximum label')\n    else:\n        y[y >= num_classes] = 0\n    n = y.shape[0]\n    categorical = np.zeros((n, num_classes), dtype=np.int)\n    categorical[np.arange(n), y] = 1\n    return categorical"}
{"task_id": 485, "completion_id": 0, "solution": "import numpy as np\nclass Node:\n\n    def __init__(self, left=None, right=None, split_val=None, mean_val=None):\n        self.left = left\n        self.right = right\n        self.split_val = split_val\n        self.mean_val = mean_val\ndef split_SSE(X, y, split):\n    left = [i for i in range(len(X)) if X[i] <= split]\n    right = [i for i in range(len(X)) if X[i] > split]\n    sse_left = np.sum([(y[i] - np.mean(y[left])) ** 2 for i in left]) if left else 0\n    sse_right = np.sum([(y[i] - np.mean(y[right])) ** 2 for i in right]) if right else 0\n    return sse_left + sse_right\ndef find_split(X, y):\n    unique_vals = np.unique(X)\n    (min_sse, split_val) = (float('inf'), unique_vals[0])\n    for val in unique_vals:\n        sse = split_SSE(X, y, val)\n        if sse < min_sse:\n            (min_sse, split_val) = (sse, val)\n    return split_val\ndef build_tree(X, y, depth=0, max_depth=3):\n    if depth == max_depth or len(X) < 2:\n        return Node(mean_val=np.mean(y))\n    split_val = find_split(X, y)\n    left_indices = np.where(X <= split_val)\n    right_indices = np.where(X > split_val)\n    left = build_tree(X[left_indices], y[left_indices], depth=depth + 1, max_depth=max_depth)\n    right = build_tree(X[right_indices], y[right_indices], depth=depth + 1, max_depth=max_depth)\n    return Node(left, right, split_val)\ndef predict(tree, x):\n    if tree.mean_val is not None:\n        return tree.mean_val\n    elif x <= tree.split_val:\n        return predict(tree.left, x)\n    else:\n        return predict(tree.right, x)\ndef regression_tree_predict(X_train, y_train, X_test, max_depth=3):\n    if not X_train or not y_train:\n        return []\n    tree = build_tree(np.array(X_train), np.array(y_train), max_depth=max_depth)\n    predictions = []\n    for x in X_test:\n        predictions.append(predict(tree, x))\n    return predictions"}
{"task_id": 490, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    x = np.array(x).reshape(-1)\n    n = x.size\n    result = np.zeros((n, n))\n    np.fill_diagonal(result, x)\n    return result.tolist()"}
{"task_id": 491, "completion_id": 0, "solution": "from collections import Counter, defaultdict, namedtuple\nfrom itertools import chain, combinations\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    ItemHeaderTable = namedtuple('ItemHeaderTable', ['head', 'tail'])\n\n    def count_frequent_items(transactions):\n        counter = Counter()\n        for transaction in transactions:\n            items = frozenset(transaction)\n            counter.update(items)\n        return counter\n\n    def construct_fp_tree(transactions, frequent_items):\n        root = ItemHeaderTable(None, None)\n        tables = {}\n        for items in transactions:\n            items = [(item, frequent_items[item]) for item in items if item in frequent_items]\n            items = sorted(items, key=lambda x: x[1], reverse=True)\n            if items:\n                current_node = root\n                for item in items:\n                    for next_node in current_node.tail if current_node.tail is not None else []:\n                        if next_node.head[0] == item[0]:\n                            next_node.head = (next_node.head[0], next_node.head[1] + item[1])\n                            current_node = next_node\n                            break\n                    else:\n                        new_node = ItemHeaderTable(item, [])\n                        current_node.tail.append(new_node)\n                        tables[new_node] = current_node\n                        current_node = new_node\n        return (root, tables)\n\n    def mine_frequent_itemsets(root, tables, prefix):\n        if root.head is not None:\n            yield (prefix + (root.head[0],),)\n        for node in root.tail if root.tail is not None else []:\n            yield from mine_frequent_itemsets(node, tables, prefix + (node.head[0],))\n\n    def conditional_patterns(item, header_table):\n        conditional_p = defaultdict(int)\n        for node in reversed(header_table[item]):\n            prefix = []\n            current_node = node.head[0]\n            while current_node is not None:\n                prefix.append(current_node)\n                current_node = header_table[current_node][0] if current_node in header_table else None\n            for i in range(1, len(prefix)):\n                suffix = tuple(sorted(prefix[i:]))\n                conditional_p[suffix] += node.head[1]\n        return conditional_p\n\n    def find_with_suffix(tree, suffix):\n        if tree is None:\n            return None\n        for node in tree:\n            if node.head[0] == suffix:\n                return node\n        return None\n    frequent_items = count_frequent_items(transactions)\n    frequent_items = {k: v for (k, v) in frequent_items.items() if v >= min_sup}\n    if not frequent_items:\n        return []\n    (root, header_table) = construct_fp_tree(([item for item in transaction if item in frequent_items] for transaction in transactions), frequent_items)\n    frequent_patterns = list(chain(*[mine_frequent_itemsets(node, header_table, ()) for node in root.tail]))\n    for i in range(len(frequent_items), 1, -1):\n        conditional_frequent_patterns = defaultdict(int)\n        for item in frequent_items.keys():\n            conditional_p = conditional_patterns(item, header_table)\n            conditional_tree = [(item, conditional_p[suffix]) for suffix in sorted(conditional_p.keys(), key=lambda x: (len(x), x))]\n            for (suffix, count) in conditional_tree:\n                suffix_node = find_with_suffix(header_table[item].tail, suffix)\n                if suffix_node is not None:\n                    subsets = chain(*[combinations(suffix, r) for r in range(1, len(suffix) + 1)])\n                    for subset in subsets:\n                        conditional_frequent_patterns[tuple(sorted(subset)) + (item,)] += count\n        frequent_patterns += [pattern for (pattern, count) in conditional_frequent_patterns.items() if count >= min_sup]\n    frequent_patterns.sort(key=lambda x: (len(x), x))\n    return frequent_patterns"}
{"task_id": 492, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    if degree < 0:\n        return -1\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    index_combinations = [c for d in range(degree + 1) for c in combinations_with_replacement(range(n_features), d)]\n    X_new = np.empty((n_samples, len(index_combinations)))\n    X_new[:, 0] = 1\n    for (i, index_combination) in enumerate(index_combinations[1:], 1):\n        X_new[:, i] = np.prod(X[:, index_combination], axis=1)\n    return X_new.tolist()"}
{"task_id": 493, "completion_id": 0, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1\n    else:\n        y = np.array(y)\n        mse = np.mean((y - np.mean(y)) ** 2)\n        return round(mse, 4)"}
{"task_id": 496, "completion_id": 0, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    y = slope * x + intercept\n    grad = np.full_like(x, slope)\n    grad2 = np.zeros_like(x)\n    return (y.round(4).tolist(), grad.round(4).tolist(), grad2.round(4).tolist())\nx = [1, 2, 3]"}
{"task_id": 499, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    if k < 1 or k > data.shape[1]:\n        return -1\n    data = (data - np.mean(data, axis=0)) / np.std(data, axis=0, ddof=1)\n    cov_matrix = np.cov(data, rowvar=False, ddof=1)\n    (eigenvalues, eigenvectors) = np.linalg.eig(cov_matrix)\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    eigenvectors = np.array([e if abs(e[0]) == max(abs(e)) else -e for e in eigenvectors.T]).T\n    projection = np.dot(data, eigenvectors[:, :k])\n    return np.round(projection, 4).tolist()"}
{"task_id": 500, "completion_id": 0, "solution": "import numpy as np\nfrom sklearn.ensemble import GradientBoostingClassifier\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    model = GradientBoostingClassifier(n_estimators=n_estimators, learning_rate=learning_rate, max_depth=1)\n    model.fit(X_train, y_train)\n    y_pred_prob = model.predict_proba(X_test)\n    y_pred = [1 if prob[1] >= 0.5 else 0 for prob in y_pred_prob]\n    return y_pred"}
{"task_id": 505, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1.0 / (1.0 + np.exp(-x))\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    if X.shape[0] == 0:\n        return []\n    (m, n_v) = X.shape\n    n_h = hbias.shape[0]\n    v_k = X.copy()\n    h_k = np.zeros((m, n_h))\n    for _ in range(k):\n        h_k = sigmoid(np.dot(v_k, W) + hbias)\n        h_k = np.random.binomial(1, h_k)\n        v_k = sigmoid(np.dot(h_k, W.T) + vbias)\n    h0 = sigmoid(np.dot(X, W) + hbias)\n    v_k_prob = sigmoid(np.dot(h_k, W.T) + vbias)\n    h_k_prob = sigmoid(np.dot(v_k_prob, W) + hbias)\n    pos_grad = np.dot(X.T, h0)\n    neg_grad = np.dot(v_k_prob.T, h_k_prob)\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n    W_new = np.round(W_new, 4).tolist()\n    return W_new"}
{"task_id": 509, "completion_id": 0, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    if x.shape != y.shape:\n        return -1\n    return round(np.max(np.abs(x - y)), 4)"}
{"task_id": 510, "completion_id": 0, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred = np.clip(y_pred, eps, 1 - eps)\n    reconstruction_loss = -1 * np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - t_mean ** 2 - np.exp(t_log_var))\n    total_loss = reconstruction_loss + kl_divergence\n    average_loss = total_loss / y.shape[0]\n    rounded_loss = round(average_loss, 6)\n    return rounded_loss"}
{"task_id": 513, "completion_id": 0, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    linear_terms = np.dot(X, w)\n    sum_squared = np.sum(np.dot(X, V) ** 2 - np.dot(X ** 2, V ** 2), axis=1)\n    predictions = w0 + 0.5 * sum_squared + linear_terms\n    return np.round(predictions, 4).tolist()"}
{"task_id": 517, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    z = np.array(z)\n    sig = 1 / (1 + np.exp(-z))\n    sig = np.round(sig, 4)\n    if sig.shape == ():\n        return sig.item()\n    else:\n        return sig.tolist()"}
{"task_id": 518, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper"}
{"task_id": 520, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"\n    Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, list):\n        if isinstance(z[0], list):\n            return [sigmoid_grad(sublist) for sublist in z]\n        else:\n            return [np.round(x * (1 - x), 4) for x in z]\n    else:\n        return np.round(z * (1 - z), 4)"}
{"task_id": 528, "completion_id": 0, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with -1 otherwise. The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and -1, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    W = np.array(W)\n    (x1_min, x1_max) = (X[:, 0].min(), X[:, 0].max())\n    (x2_min, x2_max) = (X[:, 1].min(), X[:, 1].max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (X1, X2) = np.meshgrid(x1_plot, x2_plot)\n    grid = np.stack([X1.ravel(), X2.ravel()], axis=1)\n    labels = np.sign(np.dot(grid, W) + b).reshape((grid_n, grid_n))\n    labels = labels.tolist()\n    return labels"}
{"task_id": 537, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    class0 = len(y_train[y_train == 0])\n    class1 = len(y_train[y_train == 1])\n    total_samples = len(y_train)\n    prior0 = class0 / total_samples\n    prior1 = class1 / total_samples\n    mean0 = np.mean(X_train[y_train == 0], axis=0)\n    std0 = np.std(X_train[y_train == 0], axis=0)\n    mean1 = np.mean(X_train[y_train == 1], axis=0)\n    std1 = np.std(X_train[y_train == 1], axis=0)\n    std0 += 1e-09\n    std1 += 1e-09\n\n    def likelihood(x, mean, std):\n        exponent = np.exp(-((x - mean) ** 2 / (2 * std ** 2)))\n        return np.prod(exponent / np.sqrt(2.0 * np.pi * std ** 2))\n    pred = []\n    for x in X_test:\n        post0 = prior0 * likelihood(x, mean0, std0)\n        post1 = prior1 * likelihood(x, mean1, std1)\n        pred.append(0 if post0 > post1 else 1)\n    return pred"}
{"task_id": 539, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Computes the binary cross-entropy cost.\n    AL: Array of probabilities.\n    Y: Array of true labels.\n    \"\"\"\n    AL_clipped = np.clip(AL, 1e-15, 1 - 1e-15)\n    cost = -1 / Y.shape[1] * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    return round(cost, 4)"}
{"task_id": 552, "completion_id": 0, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    if t < 0 or t >= len(observations):\n        return []\n    pi = hmm['pi']\n    A = hmm['A']\n    B = hmm['B']\n    alpha = np.zeros((len(observations), len(pi)))\n    beta = np.zeros((len(observations), len(pi)))\n    alpha[0] = pi * B[:, observations[0]]\n    for i in range(1, len(observations)):\n        alpha[i] = alpha[i - 1].dot(A) * B[:, observations[i]]\n    beta[-1] = 1\n    for i in range(len(observations) - 2, -1, -1):\n        beta[i] = A.dot(beta[i + 1] * B[:, observations[i + 1]])\n    gamma = alpha[t] * beta[t]\n    gamma /= np.sum(gamma)\n    return np.round(gamma, 4).tolist()"}
{"task_id": 555, "completion_id": 0, "solution": "import numpy as np\nfrom collections import deque\nfrom scipy.spatial import distance_matrix\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    dists = distance_matrix(data, data)\n    neighbors = [np.where(dists[i] <= eps)[0] for i in range(data.shape[0])]\n    cores = [i for i in range(data.shape[0]) if len(neighbors[i]) >= min_samples]\n    labels = [-1 for _ in range(data.shape[0])]\n    cluster_id = 0\n    for core in cores:\n        if labels[core] != -1:\n            continue\n        cluster_id += 1\n        labels[core] = cluster_id\n        queue = deque([core])\n        while queue:\n            curr_point = queue.popleft()\n            for neighbor in neighbors[curr_point]:\n                if labels[neighbor] == -1:\n                    labels[neighbor] = cluster_id\n                    if neighbor in cores:\n                        queue.append(neighbor)\n    return labels"}
{"task_id": 561, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.stats import multivariate_normal\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    (n, d) = data.shape\n    np.random.seed(0)\n    means = np.random.rand(k, d)\n    covariances = np.array([np.eye(d)] * k)\n    weights = np.array([1.0 / k] * k)\n    responsibility = np.zeros((n, k))\n    for _ in range(max_iter):\n        for i in range(k):\n            responsibility[:, i] = weights[i] * multivariate_normal.pdf(data, means[i], covariances[i])\n        responsibility /= responsibility.sum(axis=1, keepdims=True)\n        new_weights = responsibility.mean(axis=0)\n        new_means = responsibility.T @ data / responsibility.sum(axis=0)[:, None]\n        new_covariances = np.zeros((k, d, d))\n        for i in range(k):\n            diff = data - means[i]\n            new_covariances[i] = responsibility[:, i] * diff.T @ diff / responsibility.sum(axis=0)[i]\n        if np.linalg.norm(new_weights - weights) < epsilon:\n            break\n        weights = new_weights\n        means = new_means\n        covariances = new_covariances\n    labels = np.argmax(responsibility, axis=1)\n    order = np.argsort(means, axis=0)[:, 0]\n    inverse_order = np.argsort(order)\n    return list(inverse_order[labels])"}
{"task_id": 562, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return np.zeros(data.shape[0]).tolist()\n    dist = np.sum(data ** 2, axis=1).reshape(-1, 1) + np.sum(data ** 2, axis=1) - 2 * np.dot(data, data.T)\n    affinity = np.exp(-gamma * dist)\n    D = np.diag(np.sum(affinity, axis=1))\n    L = D - affinity\n    if method == 'normalized':\n        D_norm = np.diag(np.reciprocal(np.sqrt(np.sum(affinity, axis=1))))\n        L = np.eye(data.shape[0]) - D_norm @ affinity @ D_norm\n    (_, V) = np.linalg.eigh(L)\n    V = V[:, :n_cluster]\n    if method == 'normalized':\n        V /= np.linalg.norm(V, axis=1).reshape(-1, 1)\n    centroids = V[np.argsort(np.argmin(V, axis=0))[:n_cluster]]\n    dist = np.sum(V ** 2, axis=1).reshape(-1, 1) + np.sum(centroids ** 2, axis=1) - 2 * V @ centroids.T\n    labels = np.argmin(dist, axis=1)\n    idx = np.argsort(np.argsort(np.argmin(V, axis=0))[:n_cluster])\n    labels = idx[labels]\n    return labels.tolist()"}
{"task_id": 563, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        num_updates = 0\n        for i in range(N):\n            g = np.dot(alpha * y_data, G[i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                num_updates += 1\n        if num_updates == 0:\n            break\n    w = np.dot(alpha * y_data, X_data)\n    w = np.round(w, 4).tolist()\n    b = np.round(b, 4)\n    return (w, b)"}
{"task_id": 564, "completion_id": 0, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if task_type == 'classification':\n        if root.y is not None:\n            return root.y\n        for child in root.child:\n            if child.x == features[root.label]:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        if root.y is not None:\n            return root.y\n        if features[root.label] <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)"}
{"task_id": 565, "completion_id": 0, "solution": "import numpy as np\ndef entropy(labels):\n    (_, counts) = np.unique(labels, return_counts=True)\n    p = counts / len(labels)\n    return -np.sum(p * np.log2(p))\ndef conditional_entropy(feature, labels):\n    feature_values = np.unique(feature)\n    total_entropy = 0.0\n    for value in feature_values:\n        subset_labels = labels[feature == value]\n        total_entropy += entropy(subset_labels) * len(subset_labels) / len(labels)\n    return total_entropy\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    best_feature_index = 0\n    max_information_gain = -np.inf\n    for i in range(X.shape[1]):\n        feature = X[:, i]\n        information_gain = entropy(y) - conditional_entropy(feature, y)\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = i\n    return (best_feature_index, round(max_information_gain, 6))"}
{"task_id": 566, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.stats import mode\nclass Tree:\n\n    def __init__(self, data):\n        self.left = None\n        self.right = None\n        self.feature = None\n        self.threshold = None\n        self.c = None\n        if len(data) > 1:\n            self.feature = np.random.choice(np.arange(data.shape[1]))\n            (min_f, max_f) = (np.min(data[:, self.feature]), np.max(data[:, self.feature]))\n            self.threshold = np.random.uniform(min_f, max_f)\n            left_data = data[data[:, self.feature] < self.threshold]\n            right_data = data[data[:, self.feature] >= self.threshold]\n            self.left = Tree(left_data)\n            self.right = Tree(right_data)\n            self.c = Tree.c(len(data))\n\n    @staticmethod\n    def c(n):\n        if n > 2:\n            return 2 * (np.log(n - 1) + 0.5772156649) - 2 * (n - 1) / n\n        elif n == 2:\n            return 1\n        else:\n            return 0\n\n    def path_len(self, sample):\n        if self.left is None and self.right is None:\n            return self.c\n        elif sample[self.feature] < self.threshold:\n            return 1 + self.left.path_len(sample)\n        else:\n            return 1 + self.right.path_len(sample)\ndef path_lengths(tree, data):\n    return np.array([tree.path_len(sample) for sample in data])\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    forest = [Tree(data[np.random.choice(data.shape[0], size=sample_size, replace=False)]) for _ in range(n_trees)]\n    path_lengths_forest = np.array([path_lengths(tree, data) for tree in forest])\n    avg_path_lengths = np.mean(path_lengths_forest, axis=0)\n    phi = 2 * np.log(sample_size) - 2 * (sample_size - 1) / sample_size\n    scores = np.power(2, -avg_path_lengths / phi)\n    outlier_thresh = np.percentile(scores, 100 * (1 - epsilon))\n    outlier_indices = np.where(scores > outlier_thresh)[0]\n    return sorted(outlier_indices.tolist())"}
{"task_id": 568, "completion_id": 0, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n\n    def calc_empirical_distribution(feature_values, feature_index, class_values):\n        empirical_distribution = defaultdict(lambda : defaultdict(float))\n        for (value, y, count) in zip(feature_values, y_train, class_values):\n            empirical_distribution[value][y] += count\n        return empirical_distribution\n\n    def calc_feature_expectations(empirical_distribution):\n        feature_expectations = np.zeros(n_features)\n        for value in empirical_distribution:\n            feature_expectations[value] = sum((emp_dist[y] * class_value for (y, emp_dist) in empirical_distribution.items()))\n        return feature_expectations\n\n    def calc_weights(feature_expectations):\n        weights = np.zeros(n_features)\n        total_count = np.sum(class_counts)\n        for feature_index in range(n_features):\n            weights[feature_index] = np.log(feature_expectations[feature_index] / total_count)\n        return weights\n\n    def calc_Z(X, weights):\n        return [calc_partition_function(x, weights) for x in X]\n\n    def calc_partition_function(x, weights):\n        return np.sum(weights[x])\n\n    def calc_cond_prob(x, y, weights, Z):\n        return np.exp(np.sum(weights[x][y])) / Z\n    (num_samples, n_features) = X_train.shape\n    (unique_labels, class_counts) = np.unique(y_train, return_counts=True)\n    empirical_distributions = [calc_empirical_distribution(X_train[:, feature_index], feature_index, class_counts) for feature_index in range(n_features)]\n    weights = calc_weights(class_counts)\n    for _ in range(n_iter):\n        feature_expectations = [calc_feature_expectations(empirical_distribution) for empirical_distribution in empirical_distributions]\n        new_weights = calc_weights(feature_expectations)\n        max_delta_weight = np.max(np.abs(new_weights - weights))\n        if max_delta_weight < epsilon:\n            break\n        weights = new_weights\n    Z = calc_Z(X_test, weights)\n    predictions = []\n    for x in X_test:\n        prediction = {label: calc_cond_prob(x, label, weights, Z) for label in unique_labels}\n        predictions.append(max(prediction, key=prediction.get))\n    return predictions"}
{"task_id": 569, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    word_counts = Counter((word for (_, words) in data for word in words))\n    total_docs = len(data)\n    ratios = {word: round(count / total_docs, 4) for (word, count) in word_counts.items()}\n    sorted_ratios = sorted(ratios.items(), key=lambda x: x[1], reverse=True)\n    cut_off = min(cut_off or len(word_counts), len(word_counts))\n    common_words = set((word for (word, _) in sorted_ratios[:cut_off]))\n    return (sorted_ratios, common_words)"}
{"task_id": 571, "completion_id": 0, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           -1).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.dot(np.transpose(X), np.multiply(alpha, y))\n    w_list = w.tolist()\n    b = np.mean(y - np.dot(X, w))\n    w_list = [round(elem, 4) for elem in w_list]\n    b = round(b, 4)\n    return (w_list, b)"}
{"task_id": 572, "completion_id": 0, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    n = len(data)\n    distances = np.sqrt(np.sum((data[np.newaxis, :] - data[:, np.newaxis]) ** 2, axis=-1))\n    knn_distances = np.sort(distances)[:, 1:k + 1]\n    knn_indices = np.argsort(distances)[:, 1:k + 1]\n    reach_distances = np.maximum(knn_distances, distances[:, :, np.newaxis])\n    lrd = 1.0 / (np.sum(reach_distances, axis=2) / k)\n    lof = np.sum(lrd[knn_indices] / lrd[:, np.newaxis], axis=1) / (k * np.sum(reach_distances, axis=2) / lrd[:, np.newaxis] ** 2)\n    scores = np.round(lof, 4)\n    outlier_indices = np.where(scores > epsilon)[0].tolist()\n    outlier_indices.sort()\n    return (scores.tolist(), outlier_indices)"}
{"task_id": 574, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n    for c in range(m):\n        base = 10 * (c // 2) + 5\n        X_train.append(np.random.uniform(base + 1, base + 9, (n_train, 2)))\n        y_train.append(np.full((n_train,), c))\n        X_val.append(np.random.uniform(base + 1, base + 9, (n_val, 2)))\n        y_val.append(np.full((n_val,), c))\n    X_train = np.round(np.concatenate(X_train), 4)\n    y_train = np.concatenate(y_train)\n    X_val = np.round(np.concatenate(X_val), 4)\n    y_val = np.concatenate(y_val)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 579, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    (m, d) = X.shape\n    centres = X[:k].tolist()\n    labels = [0] * m\n    for _ in range(max_iters):\n        new_labels = np.array([np.argmin([np.linalg.norm(x - c) for c in centres]) for x in X])\n        centres = [np.mean(X[new_labels == i], axis=0).round(4).tolist() for i in range(k)]\n        if np.all(new_labels == labels):\n            break\n        labels = new_labels\n    return (labels.tolist(), centres)"}
{"task_id": 581, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    if learning_rate == 0 or iterations == 0:\n        return ([0.0 for _ in range(X.shape[1])], 0.0)\n    weights = np.zeros(X.shape[1])\n    bias = 0.0\n    m = X.shape[0]\n    for _ in range(iterations):\n        predictions = np.dot(X, weights) + bias\n        residuals = y - predictions\n        gradients_weights = -2 * np.dot(X.T, residuals) / m + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights\n        gradient_bias = -2 * np.sum(residuals) / m\n        weights = weights - learning_rate * gradients_weights\n        bias = bias - learning_rate * gradient_bias\n    weights = weights.tolist()\n    weights = [round(weight, 4) for weight in weights]\n    bias = round(bias, 4)\n    return (weights, bias)"}
{"task_id": 591, "completion_id": 0, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    x = np.append(x, 1)\n    for layer_weights in weights[:-1]:\n        x = np.maximum(0, np.dot(layer_weights, x))\n    output = np.dot(weights[-1], x)\n    output = np.round(output, 4)\n    if len(output) == 1:\n        return float(output)\n    return list(output)"}
{"task_id": 595, "completion_id": 0, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    centroids = X[:k]\n    for _ in range(max_iters):\n        distances = np.sqrt(((X - centroids[:, np.newaxis]) ** 2).sum(axis=-1))\n        assigned_centroids = np.argmin(distances, axis=0)\n        new_centroids = np.array([X[assigned_centroids == k].mean(axis=0) for k in range(k)])\n        centroids_movement = np.abs(new_centroids - centroids)\n        if (centroids_movement < 0.0001).all():\n            break\n        centroids = new_centroids\n    sorted_centroids = centroids[np.lexsort((centroids[:, 1], centroids[:, 0]))]\n    sorted_centroids = [list(map(lambda x: round(x, 4), centroid)) for centroid in sorted_centroids]\n    return sorted_centroids"}
