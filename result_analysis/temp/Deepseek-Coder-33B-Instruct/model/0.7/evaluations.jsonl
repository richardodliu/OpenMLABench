{"task_id": 0, "completion_id": 0, "passed": false, "result": "failed: name '_np' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Implements Ridge (L2-regularised) Linear Regression using its closed-form solution.\n\n    Given an ndarray where the last column is the target y and all preceding columns are the features X, add a bias (intercept) term, then compute the weight vector\n\n    Parameters:\n    data (np.ndarray): Input data\n    alpha (float): Regularisation strength\n\n    Returns:\n    list: Weight vector rounded to 4 decimal places\n    \"\"\"\n    X = np.insert(data[:, :-1], 0, 1, axis=1)\n    y = data[:, -1]\n    I = np.identity(X.shape[1])\n    try:\n        w = np.linalg.inv(X.T @ X + alpha * I) @ X.T @ y\n    except np.linalg.LinAlgError:\n        return -1\n    return np.round(w, 4).tolist()\nassert ridge_regression(_np.array([[1, 2], [2, 3], [3, 5]]), 0) == [1.5, 0.3333], \"Failed on OLS example 1\"\nassert ridge_regression(_np.array([[0, 1], [1, 3], [2, 5]]), 0) == [2.0, 1.0], \"Failed on OLS example 2\"\nassert ridge_regression(_np.array([[1, 2], [2, 4], [3, 6]]), 0) == [2.0, 0.0], \"Failed on perfect line\"\nassert ridge_regression(_np.array([[1, 3], [2, 5], [3, 7]]), 0) == [2.0, 1.0], \"Failed on y = 2x + 1\"\nassert ridge_regression(_np.array([[1, 2], [2, 3], [3, 5]]), 1) == [1.3333, 0.5], \"Failed on ridge alpha=1\"\nassert ridge_regression(_np.array([[0, 1], [1, 3], [2, 5]]), 2) == [1.4615, 0.9231], \"Failed on ridge alpha=2\"\nassert ridge_regression(_np.array([[1, 2], [2, 4]]), 10) == [0.5965, 0.3509], \"Failed on high-alpha small set\"\nassert ridge_regression(_np.array([[2, 4], [4, 8], [6, 12], [8, 16]]), 0) == [2.0, 0.0], \"Failed on multiple perfect line\"\nassert ridge_regression(_np.array([[1, 1], [2, 2], [3, 5], [4, 4]]), 0) == [1.2, 0.0], \"Failed on mixed dataset\"\nassert ridge_regression(_np.array([[-1, -1], [0, 1], [1, 3]]), 0) == [2.0, 1.0], \"Failed on negative x values\""}
{"task_id": 1, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    K = np.dot(X_train, X_train.T)\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    y_train = y_train.astype(float)\n    for _ in range(n_iter):\n        updated = False\n        for i in range(n_samples):\n            activation = np.dot(K[i], alpha * y_train)\n            if y_train[i] * (activation + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n        if not updated:\n            break\n    w = np.dot(alpha * y_train, X_train)\n    return (np.round(w, 4).tolist(), round(b, 4))\nassert (np.sign(np.dot(np.array([[2,2],[4,4],[4,0],[0,0]]), np.array(perceptron_dual(np.array([[2,2],[4,4],[4,0],[0,0]]), np.array([1,1,-1,-1]))[0])) + perceptron_dual(np.array([[2,2],[4,4],[4,0],[0,0]]), np.array([1,1,-1,-1]))[1]) == np.array([1,1,-1,-1])).all(), \"test case failed: perceptron_dual(simple 2D separable)\"\nassert (np.sign(np.dot(np.array([[0],[1]]), np.array(perceptron_dual(np.array([[0],[1]]), np.array([-1,1]))[0])) + perceptron_dual(np.array([[0],[1]]), np.array([-1,1]))[1]) == np.array([-1,1])).all(), \"test case failed: perceptron_dual(simple 1D separable)\"\nassert (np.sign(np.dot(np.array([[1,1],[2,2],[-1,-1],[-2,-2]]), np.array(perceptron_dual(np.array([[1,1],[2,2],[-1,-1],[-2,-2]]), np.array([1,1,-1,-1]))[0])) + perceptron_dual(np.array([[1,1],[2,2],[-1,-1],[-2,-2]]), np.array([1,1,-1,-1]))[1]) == np.array([1,1,-1,-1])).all(), \"test case failed: perceptron_dual(diagonal separable)\"\nassert (np.sign(np.dot(np.array([[1,0],[0,1],[0,-1],[-1,0]]), np.array(perceptron_dual(np.array([[1,0],[0,1],[0,-1],[-1,0]]), np.array([1,1,-1,-1]))[0])) + perceptron_dual(np.array([[1,0],[0,1],[0,-1],[-1,0]]), np.array([1,1,-1,-1]))[1]) == np.array([1,1,-1,-1])).all(), \"test case failed: perceptron_dual(axis-aligned)\"\nassert (np.sign(np.dot(np.array([[2,1],[2,2],[3,2],[-1,-1],[-2,-1],[-3,-2]]), np.array(perceptron_dual(np.array([[2,1],[2,2],[3,2],[-1,-1],[-2,-1],[-3,-2]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[2,1],[2,2],[3,2],[-1,-1],[-2,-1],[-3,-2]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(mixed cluster)\"\nassert (np.sign(np.dot(np.array([[-2],[-1],[1],[2]]), np.array(perceptron_dual(np.array([[-2],[-1],[1],[2]]), np.array([-1,-1,1,1]))[0])) + perceptron_dual(np.array([[-2],[-1],[1],[2]]), np.array([-1,-1,1,1]))[1]) == np.array([-1,-1,1,1])).all(), \"test case failed: perceptron_dual(1D symmetric)\"\nassert (np.sign(np.dot(np.array([[1,5],[2,8],[3,12],[12,1],[10,2],[7,0]]), np.array(perceptron_dual(np.array([[1,5],[2,8],[3,12],[12,1],[10,2],[7,0]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[1,5],[2,8],[3,12],[12,1],[10,2],[7,0]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(slanted line)\"\nassert (np.sign(np.dot(np.array([[1,0,0],[0,1,0],[0,0,1],[-1,0,0],[0,-1,0],[0,0,-1]]), np.array(perceptron_dual(np.array([[1,0,0],[0,1,0],[0,0,1],[-1,0,0],[0,-1,0],[0,0,-1]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[1,0,0],[0,1,0],[0,0,1],[-1,0,0],[0,-1,0],[0,0,-1]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(3D axes)\"\nassert (np.sign(np.dot(np.array([[3,3],[4,4],[5,5],[-3,-3],[-4,-4],[-5,-5]]), np.array(perceptron_dual(np.array([[3,3],[4,4],[5,5],[-3,-3],[-4,-4],[-5,-5]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[3,3],[4,4],[5,5],[-3,-3],[-4,-4],[-5,-5]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(scaled diagonal)\"\nassert (np.sign(np.dot(np.array([[0,2],[1,3],[2,5],[-2,0],[-3,1],[-4,2]]), np.array(perceptron_dual(np.array([[0,2],[1,3],[2,5],[-2,0],[-3,1],[-4,2]]), np.array([1,1,1,-1,-1,-1]))[0])) + perceptron_dual(np.array([[0,2],[1,3],[2,5],[-2,0],[-3,1],[-4,2]]), np.array([1,1,1,-1,-1,-1]))[1]) == np.array([1,1,1,-1,-1,-1])).all(), \"test case failed: perceptron_dual(tilted)\""}
{"task_id": 2, "completion_id": 0, "passed": false, "result": "failed: 'link_prime'", "solution": "import numpy as np\nimport numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    links = {'identity': {'link': np.vectorize(lambda mu: mu), 'inv_link': np.vectorize(lambda eta: eta), 'derivative': np.vectorize(lambda mu: 1)}, 'log': {'link': np.vectorize(lambda mu: np.log(mu)), 'inv_link': np.vectorize(lambda eta: np.exp(eta)), 'derivative': np.vectorize(lambda mu: 1 / mu)}, 'logit': {'link': np.vectorize(lambda mu: np.log(mu / (1 - mu))), 'inv_link': np.vectorize(lambda eta: np.exp(eta) / (1 + np.exp(eta))), 'derivative': np.vectorize(lambda mu: 1 / (mu * (1 - mu)))}}\n    return links\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links['logit']['link'](mu)\nassert np.allclose(glm_links()[\"identity\"][\"link\"](np.array([3.0,-1.0])), np.array([3.0,-1.0])), \"test case failed: identity link\"\nassert np.allclose(glm_links()[\"identity\"][\"inv_link\"](np.array([-0.5,2.6])), np.array([-0.5,2.6])), \"test case failed: identity inverse link\"\nassert np.allclose(glm_links()[\"log\"][\"link\"](np.array([1.0,2.0])), np.log(np.array([1.0,2.0]))), \"test case failed: log link\"\nassert np.allclose(glm_links()[\"log\"][\"inv_link\"](np.array([0.0,1.0])), np.exp(np.array([0.0,1.0]))), \"test case failed: log inverse link\"\nassert np.allclose(glm_links()[\"log\"][\"link_prime\"](np.array([2.0,4.0])), np.array([0.5,0.25])), \"test case failed: log link derivative\"\nassert np.allclose(glm_links()[\"logit\"][\"link\"](np.array([0.2,0.8])), np.array([-1.38629436,1.38629436])), \"test case failed: logit link\"\nassert np.allclose(glm_links()[\"logit\"][\"inv_link\"](np.array([-1.38629436,1.38629436])), np.array([0.2,0.8])), \"test case failed: logit inverse link\"\nassert np.allclose(glm_links()[\"logit\"][\"link_prime\"](np.array([0.2,0.8])), 1.0/(np.array([0.2,0.8])*(1.0-np.array([0.2,0.8])))), \"test case failed: logit link derivative\"\nimport numpy as _np; _rng=_np.random.default_rng(1); _mu=_rng.uniform(0.05,0.95,50); _eta=glm_links()[\"logit\"][\"link\"](_mu); assert _np.allclose(glm_links()[\"logit\"][\"inv_link\"](_eta), _mu), \"test case failed: random roundtrip\"\nmu_test = np.array([0.3,0.6]).reshape(1,2); eta_test = glm_links()[\"logit\"][\"link\"](mu_test); assert eta_test.shape == (1,2) and glm_links()[\"logit\"][\"inv_link\"](eta_test).shape == (1,2), \"test case failed: shape preservation\""}
{"task_id": 3, "completion_id": 0, "passed": false, "result": "failed: name 'calculate_path_lengths' is not defined", "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nimport random\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    np.random.seed(0)\n    indices = list(range(data.shape[0]))\n    tree = build_tree(data, indices, 0)\n    path_lengths = [0] * data.shape[0]\n    calculate_path_lengths(tree, path_lengths)\n    return path_lengths\ndef build_tree(data, indices, depth):\n    if len(indices) < 3:\n        return {'indices': indices, 'depth': depth}\n    else:\n        feature = random.choice(list(range(data.shape[1])))\n        min_val = np.min(data[indices, feature])\n        max_val = np.max(data[indices, feature])\n        split_val = np.random.uniform(min_val, max_val)\n        left_indices = [i for i in indices if data[i, feature] <= split_val]\n        right_indices = [i for i in indices if data[i, feature] > split_val]\n        left_tree = build_tree(data, left_indices, depth + 1)\n        right_tree = build_tree(data, right_indices, depth + 1)\n        return {'feature': feature, 'split_val': split_val, 'left': left_tree, 'right': right_tree, 'depth': depth}\ndata = np.arange(5).reshape(-1, 1)\nassert isolation_tree_path_length(np.arange(1).reshape(-1, 1)) == [0], \"test case failed: n=1\"\nassert isolation_tree_path_length(np.arange(2).reshape(-1, 1)) == [0, 0], \"test case failed: n=2\"\nassert isolation_tree_path_length(np.arange(3).reshape(-1, 1)) == [1, 1, 1], \"test case failed: n=3\"\nassert isolation_tree_path_length(np.arange(4).reshape(-1, 1)) == [1, 1, 1, 1], \"test case failed: n=4\"\nassert isolation_tree_path_length(np.arange(5).reshape(-1, 1)) == [2, 2, 2, 1, 1], \"test case failed: n=5\"\nassert isolation_tree_path_length(np.arange(6).reshape(-1, 1)) == [2, 2, 2, 2, 2, 2], \"test case failed: n=6\"\nassert isolation_tree_path_length(np.arange(7).reshape(-1, 1)) == [3, 3, 3, 2, 2, 2, 2], \"test case failed: n=7\"\nassert isolation_tree_path_length(np.arange(8).reshape(-1, 1)) == [3, 3, 3, 2, 2, 2, 2, 2], \"test case failed: n=8\"\nassert isolation_tree_path_length(np.arange(9).reshape(-1, 1)) == [3, 3, 3, 2, 2, 2, 2, 2, 2], \"test case failed: n=9\"\nassert isolation_tree_path_length(np.arange(10).reshape(-1, 1)) == [3, 3, 3, 2, 2, 3, 3, 3, 2, 2], \"test case failed: n=10\""}
{"task_id": 7, "completion_id": 0, "passed": false, "result": "failed: test case failed: bread/milk data set", "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nimport math\nfrom collections import Counter\nfrom itertools import chain, combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    item_counts = Counter((item for transaction in transactions for item in set(transaction)))\n\n    def support_count(itemset):\n        return sum((set(itemset).issubset(transaction) for transaction in transactions))\n\n    def get_frequent_itemsets(itemset_length):\n        return {itemset: support_count(itemset) for itemset in combinations(item_counts.keys(), itemset_length) if support_count(itemset) >= math.ceil(minsup * len(transactions))}\n    return {itemset: support_count for itemset_length in range(1, len(item_counts) + 1) for (itemset, support_count) in get_frequent_itemsets(itemset_length).items()}\ntransactions = [['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']]\nminsup = 0.6\nassert find_frequent_itemsets([['bread', 'milk'], ['bread', 'diaper', 'beer', 'egg'], ['milk', 'diaper', 'beer', 'coke'], ['bread', 'milk', 'diaper', 'beer'], ['bread', 'milk', 'diaper', 'coke']], 0.6) == {('bread',): 4, ('milk',): 4, ('diaper',): 4, ('beer',): 3, ('bread', 'milk'): 3, ('bread', 'diaper'): 3, ('diaper', 'milk'): 3, ('beer', 'diaper'): 3}, \"test case failed: bread/milk data set\"\nassert find_frequent_itemsets([[1, 2, 3], [1, 2], [1, 3], [2, 3], [1, 2, 3]], 0.6) == {(1,): 4, (2,): 4, (3,): 4, (1, 2): 3, (1, 3): 3, (2, 3): 3}, \"test case failed: numeric data set\"\nassert find_frequent_itemsets([['a', 'b'], ['b', 'c'], ['a', 'c']], 1.0) == {}, \"test case failed: no frequent itemset data set\"\nassert find_frequent_itemsets([[1], [1], [1], [2], [3]], 0.6) == {(1,): 3}, \"test case failed: single frequent item data set\"\nassert find_frequent_itemsets([], 0.4) == {}, \"test case failed: empty data set\"\nassert find_frequent_itemsets([['a', 'b', 'c'], ['a', 'b'], ['a', 'c'], ['b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c', 'd']], 0.5) == {('a',): 5, ('b',): 5, ('c',): 5, ('a', 'b'): 4, ('a', 'c'): 4, ('b', 'c'): 4, ('a', 'b', 'c'): 3}, \"test case failed: mixed letters data set\"\nassert find_frequent_itemsets([[1, 2], [2, 3], [3, 4], [1, 4]], 0.5) == {(1,): 2, (2,): 2, (3,): 2, (4,): 2}, \"test case failed: four-numbers data set\"\nassert find_frequent_itemsets([['x'] for _ in range(100)], 0.95) == {('x',): 100}, \"test case failed: 100 identical transactions data set\"\nassert find_frequent_itemsets([['p', 'q', 'r'], ['p', 'q'], ['p', 'r'], ['q', 'r'], ['p', 'q', 'r', 's']], 0.4) == {('p',): 4, ('q',): 4, ('r',): 4, ('p', 'q'): 3, ('p', 'r'): 3, ('q', 'r'): 3, ('p', 'q', 'r'): 2}, \"test case failed: p/q/r data set\"\nassert find_frequent_itemsets([['a'], ['b']], 1.0) == {}, \"test case failed: high minsup no frequent items\""}
{"task_id": 11, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    (num_samples, num_features) = data.shape\n    centers = data[:k]\n    for _ in range(max_iter):\n        labels = np.argmin(np.linalg.norm(data[:, None] - centers, axis=-1), axis=1)\n        new_centers = np.array([data[labels == k].mean(axis=0) for k in range(k)])\n        for i in range(k):\n            if np.isnan(new_centers[i]).any():\n                new_centers[i] = data[np.random.randint(num_samples)]\n        if np.linalg.norm(new_centers - centers) < epsilon:\n            break\n        centers = new_centers\n    centers = [list(map(lambda x: round(x, 4), center)) for center in centers]\n    return (centers, labels.tolist())\nassert kmeans(np.array([[1, 2], [1, 4], [1, 0], [10, 2], [10, 4], [10, 0]]), 2) == ([[5.5, 1.0], [5.5, 4.0]], [0, 1, 0, 0, 1, 0]), \"test case failed: basic two-cluster example\"\nassert kmeans(np.array([[0, 0], [0, 2], [10, 0], [10, 2]]), 2) == ([[5.0, 0.0], [5.0, 2.0]], [0, 1, 0, 1]), \"test case failed: symmetric rectangle\"\nassert kmeans(np.array([[1, 2], [3, 4], [5, 6]]), 1) == ([[3.0, 4.0]], [0, 0, 0]), \"test case failed: single cluster mean\"\nassert kmeans(np.array([[0, 0], [1, 1], [2, 2]]), 3) == ([[0.0, 0.0], [1.0, 1.0], [2.0, 2.0]], [0, 1, 2]), \"test case failed: k equals number of samples\"\nassert kmeans(np.array([[0], [10]]), 2) == ([[0.0], [10.0]], [0, 1]), \"test case failed: one-dimensional data\"\nassert kmeans(np.zeros((3, 2)), 1) == ([[0.0, 0.0]], [0, 0, 0]), \"test case failed: all identical samples\"\nassert kmeans(np.array([[0, 0], [10, 10], [20, 20]]), 3) == ([[0.0, 0.0], [10.0, 10.0], [20.0, 20.0]], [0, 1, 2]), \"test case failed: three isolated samples\"\nassert kmeans(np.array([[0, 0], [1, 0], [0, 1], [1, 1]]), 1) == ([[0.5, 0.5]], [0, 0, 0, 0]), \"test case failed: square to single centre\"\nassert kmeans(np.array([[2, 2], [2, 2], [2, 2]]), 1) == ([[2.0, 2.0]], [0, 0, 0]), \"test case failed: duplicate points single centre\"\nassert kmeans(np.array([[0, 0], [1, 1], [0, 0], [1, 1]]), 2) == ([[0.0, 0.0], [1.0, 1.0]], [0, 1, 0, 1]), \"test case failed: duplicates two centres\""}
{"task_id": 13, "completion_id": 0, "passed": false, "result": "failed: name 'D1' is not defined", "solution": "import numpy as np\nfrom collections import defaultdict\nimport numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    S = np.zeros((data.shape[1], data.shape[1]))\n    rated_items_by_user = np.where(data[user_ind] > 0)[0]\n    for i in range(data.shape[1]):\n        for j in range(i, data.shape[1]):\n            if i == j:\n                S[i, j] = 1\n            else:\n                common_users = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n                if len(common_users) > 0:\n                    v1 = data[common_users, i]\n                    v2 = data[common_users, j]\n                    if criterion == 'cosine':\n                        if np.std(v1) > 0.001:\n                            v1 = v1 - np.mean(v1)\n                        if np.std(v2) > 0.001:\n                            v2 = v2 - np.mean(v2)\n                        S[i, j] = S[j, i] = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n                    else:\n                        S[i, j] = S[j, i] = np.corrcoef(v1, v2)[0, 1]\n    scores = defaultdict(float)\n    for t in range(data.shape[1]):\n        if data[user_ind, t] == 0:\n            for i in rated_items_by_user:\n                scores[t] += data[user_ind, i] * S[t, i]\n            if np.sum(np.abs(S[t])) > 0:\n                scores[t] /= np.sum(np.abs(S[t]))\n    recommended_items = sorted(scores.keys(), key=lambda x: -scores[x])\n    if len(recommended_items) > k:\n        recommended_items = recommended_items[:k]\n    return recommended_items\nassert knn_recommend(D1, 0, 1) == [1], \"failed: knn_recommend(D1,0,1)\"\nassert knn_recommend(D1, 2, 1) == [0], \"failed: knn_recommend(D1,2,1)\"\nassert knn_recommend(D1, 0, 1, 'pearson') == [1], \"failed: pearson D1 user0\"\nassert knn_recommend(D1, 1, 1) == [1], \"failed: knn_recommend(D1,1,1)\"\nassert knn_recommend(D1, 3, 1) == [0], \"failed: knn_recommend(D1,3,1)\"\nassert knn_recommend(D1, 0, 2) == [1], \"failed: k larger than unrated items\"\nassert knn_recommend(D2, 0, 1) == [0], \"failed: knn_recommend(D2,0,1)\"\nassert knn_recommend(D2, 1, 1) == [1], \"failed: knn_recommend(D2,1,1)\"\nassert knn_recommend(D2, 2, 1) == [2], \"failed: knn_recommend(D2,2,1)\"\nassert knn_recommend(D3, 0, 1) == [0], \"failed: knn_recommend(D3,0,1)\""}
{"task_id": 19, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n\n    def loss_func(g, h, gamma, lam):\n        return -0.5 * (g ** 2 / (h + lam)) + gamma\n    overall_loss = loss_func(np.sum(g), np.sum(h), gamma, lam)\n    best_gain = -np.inf\n    best_split = None\n    for f in range(X.shape[1]):\n        for threshold in np.unique(X[:, f]):\n            left_indices = np.where(X[:, f] <= threshold)[0]\n            right_indices = np.where(X[:, f] > threshold)[0]\n            if len(left_indices) < 2 or len(right_indices) < 2:\n                continue\n            left_loss = loss_func(np.sum(g[left_indices]), np.sum(h[left_indices]), gamma, lam)\n            right_loss = loss_func(np.sum(g[right_indices]), np.sum(h[right_indices]), gamma, lam)\n            gain = overall_loss - left_loss - right_loss\n            if gain > best_gain:\n                best_gain = gain\n                best_split = (f, threshold)\n    if best_gain > 0:\n        return best_split\n    else:\n        return None\nassert best_split(np.array([[2],[4],[6],[8]]), np.array([ 1, 1,-1,-1]), np.array([1,1,1,1]), 0.1, 1.0)==(0,4), \"test-case 1 failed\"\nassert best_split(np.array([[1],[2],[3],[4],[5]]), np.array([5,4,3,2,1]), np.ones(5), 0.2, 1.0)==(0,3), \"test-case 2 failed\"\nassert best_split(np.array([[1],[2],[3],[4],[5]]), np.array([-5,-4,-3,-2,-1]), np.ones(5), 0.2, 0.5)==(0,3), \"test-case 3 failed\"\nassert best_split(np.array([[1],[2],[3],[4]]), np.array([1,-1,1,-1]), np.ones(4), 0.8, 1.0) is None, \"test-case 4 failed\"\nassert best_split(np.array([[0,0],[1,1],[2,2],[3,3],[4,4]]), np.array([1,1,1,-1,-1]), np.ones(5), 0.1, 1.0)==(0,2), \"test-case 5 failed\"\nassert best_split(np.array([[1],[2],[3],[4],[5],[6]]), np.array([0,0,0,0,0,0]), np.ones(6), 0.1, 1.0) is None, \"test-case 7 failed\"\nassert best_split(np.array([[10],[20],[30],[40]]), np.array([10,-5,-5,0]), np.ones(4), 0.05, 1.0)==(0,20), \"test-case 8 failed\"\nassert best_split(np.array([[2],[2],[2],[2]]), np.array([1,1,1,1]), np.ones(4), 0.1, 1.0) is None, \"test-case 10 failed\""}
{"task_id": 20, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    if isinstance(x, list):\n        x = np.array(x)\n    if isinstance(x, np.ndarray):\n        sigmoid_x = 1 / (1 + np.exp(-x))\n        gradient_x = sigmoid_x * (1 - sigmoid_x)\n        sigmoid_x = sigmoid_x.round(4)\n        gradient_x = gradient_x.round(4)\n        if isinstance(sigmoid_x, np.ndarray):\n            sigmoid_x = sigmoid_x.tolist()\n        if isinstance(gradient_x, np.ndarray):\n            gradient_x = gradient_x.tolist()\n    else:\n        sigmoid_x = 1 / (1 + np.exp(-x))\n        gradient_x = sigmoid_x * (1 - sigmoid_x)\n        sigmoid_x = round(sigmoid_x, 4)\n        gradient_x = round(gradient_x, 4)\n    return (sigmoid_x, gradient_x)\nassert sigmoid_activation(0) == (0.5, 0.25), \"failed on scalar 0\"\nassert sigmoid_activation([-1, 0, 1]) == ([0.2689, 0.5, 0.7311], [0.1966, 0.25, 0.1966]), \"failed on list [-1,0,1]\"\nassert sigmoid_activation(np.array([-3, 3])) == ([0.0474, 0.9526], [0.0452, 0.0452]), \"failed on np.array([-3,3])\"\nassert sigmoid_activation([10]) == ([1.0], [0.0]), \"failed on list [10]\"\nassert sigmoid_activation(10) == (1.0, 0.0), \"failed on scalar 10\"\nassert sigmoid_activation(-1000) == (0.0, 0.0), \"failed on large negative scalar\"\nassert sigmoid_activation([0]) == ([0.5], [0.25]), \"failed on list [0]\""}
{"task_id": 21, "completion_id": 0, "passed": false, "result": "timed out", "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\nimport numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    weights = np.ones(len(x_train)) / len(x_train)\n    ensemble = []\n    while True:\n        errors = defaultdict(lambda : float('inf'))\n        for i in range(1, len(x_train)):\n            for d in [0, 1]:\n                for theta in [(x_train[i - 1] + x_train[i]) / 2]:\n                    prediction = np.where(x_train <= theta, 1, -1)\n                    if d == 1:\n                        prediction = np.where(x_train > theta, 1, -1)\n                    error = np.sum(weights[prediction != y_train])\n                    if error < errors[d, theta]:\n                        errors[d, theta] = error\n                        best_stump = (d, theta)\n                        best_prediction = prediction\n        if errors[best_stump] < epsilon:\n            break\n        alpha = 0.5 * math.log((1 - errors[best_stump]) / errors[best_stump])\n        ensemble.append((best_stump, alpha))\n        weights = weights * np.exp(-alpha * y_train * best_prediction)\n        weights = weights / np.sum(weights)\n    y_test_pred = np.zeros(len(x_test))\n    for ((d, theta), alpha) in ensemble:\n        prediction = np.where(x_test <= theta, 1, -1)\n        if d == 1:\n            prediction = np.where(x_test > theta, 1, -1)\n        y_test_pred += alpha * prediction\n    y_test_pred = np.sign(y_test_pred)\n    return y_test_pred.tolist()\nassert adaboost_1d_predict([1,2,3,4],[1,1,-1,-1],[1.5,3.5])==[1,-1],\"failed on basic separable set\"\nassert adaboost_1d_predict([1,2,3,4,5],[1,1,1,-1,-1],[1,5])==[1,-1],\"failed on unbalanced set\"\nassert adaboost_1d_predict([0,1,2,3],[1,1,-1,-1],[0.5,2.5])==[1,-1],\"failed on shift threshold\"\nassert adaboost_1d_predict([-3,-2,-1,0],[-1,-1,1,1],[-2.5,-0.5])==[-1,1],\"failed on negative values\"\nassert adaboost_1d_predict([10,20,30,40],[1,1,-1,-1],[15,35])==[1,-1],\"failed on large values\"\nassert adaboost_1d_predict([1,3,5,7],[1,1,-1,-1],[2,6])==[1,-1],\"failed on odd spacing\"\nassert adaboost_1d_predict([2,4,6,8],[1,1,-1,-1],[3,7],epsilon=0)==[1,-1],\"failed with explicit epsilon\"\nassert adaboost_1d_predict([0.1,0.2,0.8,0.9],[1,1,-1,-1],[0.15,0.85])==[1,-1],\"failed on float inputs\"\nassert adaboost_1d_predict([5,6,7,8,9,10],[1,1,1,-1,-1,-1],[5.5,9.5])==[1,-1],\"failed on bigger set\"\nassert adaboost_1d_predict([-5,-4,-3,-2,-1,0],[1,1,1,-1,-1,-1],[-4.5,-0.5])==[1,-1],\"failed on negative range\""}
{"task_id": 25, "completion_id": 0, "passed": false, "result": "failed: 'numpy.ndarray' object has no attribute 'append'", "solution": "import numpy as np\nimport math\nimport numpy as np\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    predictions = np.full(X_test.shape[0], b)\n    for z in X_test:\n        diff = X_train - z\n        norms = np.sqrt(np.sum(diff ** 2, axis=1))\n        kernel = np.exp(-gamma * norms ** 2)\n        g_z = np.sum(alpha * y_train * kernel) + b\n        predictions.append(1 if g_z >= 0 else -1)\n    return predictions.tolist()\nassert gaussian_svm_predict(np.array([[1,2],[2,3]]),np.array([1,-1]),np.array([0.6,0.4]),0.1,0.5,np.array([[1.5,2.5]]))==[1],\"Failed on single test sample.\"\nassert gaussian_svm_predict(np.array([[1,0],[0,1]]),np.array([1,-1]),np.array([0.9,0.9]),0.0,2.0,np.array([[0.9,0.1],[0.1,0.9]]))==[1,-1],\"Failed orthogonal samples.\"\nassert gaussian_svm_predict(np.array([[1,2],[3,4]]),np.array([1,1]),np.array([0.5,0.5]),-0.6,0.3,np.array([[2,3]]))==[-1],\"Bias impact failed.\"\nassert gaussian_svm_predict(np.array([[0,0],[0,1],[1,0],[1,1]]),np.array([1,-1,-1,1]),np.array([0.3,0.3,0.3,0.3]),0.0,1.0,np.array([[0.5,0.5],[1.5,1.5]]))==[1,1],\"Failed on XOR-like points.\"\nassert gaussian_svm_predict(np.array([[2]]),np.array([-1]),np.array([0.9]),0.0,1.0,np.array([[1],[3]]))==[-1,-1],\"Failed 1-D input.\"\nassert gaussian_svm_predict(np.array([[1,2,3],[4,5,6]]),np.array([1,-1]),np.array([0.4,0.6]),0.0,0.2,np.array([[1,2,3],[4,5,6]]))==[1,-1],\"Failed predictions identical to training points.\"\nassert gaussian_svm_predict(np.array([[1,2]]),np.array([1]),np.array([1.0]),-1.5,0.1,np.array([[10,20]]))==[-1],\"Far away point should follow bias.\""}
{"task_id": 28, "completion_id": 0, "passed": false, "result": "failed: name 'a' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X = np.array(X)\n    (m, n) = X.shape\n    if not 1 <= k <= min(m, n):\n        return -1\n    (U, s, Vt) = np.linalg.svd(X, full_matrices=False)\n    S = np.zeros((m, n))\n    S[:k, :k] = np.diag(s[:k])\n    X_hat = np.dot(U, np.dot(S, Vt))\n    mse = ((X - X_hat) ** 2).mean()\n    X_hat = np.round(X_hat, 4).tolist()\n    mse = round(mse, 4)\n    return (X_hat, mse)\nassert a([[1, 0], [0, 1]], 1) == ([[1.0, 0.0], [0.0, 0.0]], 0.25), \"test case failed: a([[1,0],[0,1]],1)\"\nassert a([[2, 2], [2, 2]], 1) == ([[2.0, 2.0], [2.0, 2.0]], 0.0), \"test case failed: a([[2,2],[2,2]],1)\"\nassert a([[3, 1], [1, 3]], 1) == ([[2.0, 2.0], [2.0, 2.0]], 1.0), \"test case failed: a([[3,1],[1,3]],1)\"\nassert a([[4, 0], [0, 2]], 1) == ([[4.0, 0.0], [0.0, 0.0]], 1.0), \"test case failed: a([[4,0],[0,2]],1)\"\nassert a([[1, 0, 0], [0, 1, 0], [0, 0, 1]], 2) == ([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 0.0]], 0.1111), \"test case failed: a(I3,2)\"\nassert a([[1, 2], [3, 4]], 2) == ([[1.0, 2.0], [3.0, 4.0]], 0.0), \"test case failed: a([[1,2],[3,4]],2)\"\nassert a([[1, 0], [0, 1]], 0) == -1, \"test case failed: a(k=0)\"\nassert a([[1, 0], [0, 1]], 3) == -1, \"test case failed: a(k>min(m,n))\"\nassert a([[1, 2, 3], [2, 4, 6]], 1) == ([[1.0, 2.0, 3.0], [2.0, 4.0, 6.0]], 0.0), \"test case failed: a(rank-1 2x3,1)\"\nassert a([[5], [10], [15], [20]], 1) == ([[5.0], [10.0], [15.0], [20.0]], 0.0), \"test case failed: a(single column,1)\""}
{"task_id": 29, "completion_id": 0, "passed": false, "result": "timed out", "solution": "import numpy as np\nimport numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    (x_train, y_train) = (np.array(x_train), np.array(y_train))\n    sorted_indices = np.argsort(x_train)\n    (x_train, y_train) = (x_train[sorted_indices], y_train[sorted_indices])\n    current_prediction = np.mean(y_train)\n    residuals = y_train - current_prediction\n    stumps = []\n    while np.sum(residuals ** 2) > epsilon:\n        candidate_splits = (x_train[:-1] + x_train[1:]) / 2\n        (best_split, best_rss) = (None, np.inf)\n        for split in candidate_splits:\n            left_indices = x_train <= split\n            right_indices = ~left_indices\n            c1 = np.mean(residuals[left_indices])\n            c2 = np.mean(residuals[right_indices])\n            predicted_residuals = np.where(x_train <= split, c1, c2)\n            total_rss = np.sum(predicted_residuals ** 2)\n            if total_rss < best_rss:\n                (best_split, best_rss) = (split, total_rss)\n        stumps.append((best_split, c1, c2))\n        residuals = y_train - (current_prediction + np.where(x_train <= best_split, c1, c2))\n        current_prediction += np.where(x_query <= best_split, c1, c2)\n    return round(current_prediction, 4)\nassert predict_boosting_tree([1,2,3,4],[1.5,1.5,3.5,3.5],3)==3.5, \"failed: piece-wise constant right side\"\nassert predict_boosting_tree([1,2,3,4],[1.5,1.5,3.5,3.5],2)==1.5, \"failed: piece-wise constant left side\"\nassert predict_boosting_tree([1,2,4,6],[2,2,4,4],5)==4.0, \"failed: split at 3.0, right prediction\"\nassert predict_boosting_tree([1,2,4,6],[2,2,4,4],2)==2.0, \"failed: split at 3.0, left prediction\"\nassert predict_boosting_tree([1,3,5,7],[10,10,20,20],6)==20.0, \"failed: right side prediction 20\"\nassert predict_boosting_tree([1,3,5,7],[10,10,20,20],2)==10.0, \"failed: left side prediction 10\"\nassert predict_boosting_tree([1,2,3,4],[0,0,0,0],3)==0.0, \"failed: all zeros\"\nassert predict_boosting_tree([1,1.5,2],[2,2,2],1.2)==2.0, \"failed: identical targets\"\nassert predict_boosting_tree([1,2,3,4,5,6],[1,1,1,2,2,2],4)==2.0, \"failed: two-segment data, right\"\nassert predict_boosting_tree([1,2,3,4,5,6],[1,1,1,2,2,2],2)==1.0, \"failed: two-segment data, left\""}
{"task_id": 34, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Generate a tensor filled with 0.0s and 1.0s.\n\n    Parameters:\n    shape (tuple): Desired shape of the tensor\n    sparsity (float): Probability of generating a 1.0\n    seed (int, optional): Seed for reproducible results\n\n    Returns:\n    numpy.ndarray: An array whose dtype is a floating type (0.0 and 1.0 values only)\n    \"\"\"\n    if sparsity < 0 or sparsity > 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    tensor = np.random.rand(*shape)\n    tensor = (tensor > 1 - sparsity).astype(float)\n    return tensor\nassert (random_binary_tensor((2,3),0.3,42)==np.array([[0.,1.,1.],[0.,0.,0.]])).all(), \"test failed: shape (2,3), sparsity 0.3, seed 42\"\nassert (random_binary_tensor((3,),0.8,1)==np.array([1.,1.,0.])).all(), \"test failed: shape (3,), sparsity 0.8, seed 1\"\nassert (random_binary_tensor((2,2),0)==np.zeros((2,2))).all(), \"test failed: all zeros when sparsity 0\"\nassert (random_binary_tensor((2,2),1)==np.ones((2,2))).all(), \"test failed: all ones when sparsity 1\"\nassert random_binary_tensor((1,),-0.1)==-1, \"test failed: invalid sparsity -0.1\"\nassert random_binary_tensor((1,),1.1)==-1, \"test failed: invalid sparsity 1.1\"\narr=random_binary_tensor((1000,),0.4,123); assert abs(arr.mean()-0.4)<0.05, \"test failed: empirical sparsity deviates >5% for seed 123\"\nassert random_binary_tensor((5,4),0.5).shape==(5,4), \"test failed: incorrect shape (5,4)\"\ntensor=random_binary_tensor((2,3,4),0.6,7); assert tensor.dtype.kind=='f' and set(np.unique(tensor)).issubset({0.0,1.0}), \"test failed: dtype or values incorrect for 3-D shape\"\nassert random_binary_tensor((10,),0.25,55).sum()==(random_binary_tensor((10,),0.25,55)).sum(), \"test failed: function must be deterministic with same seed\""}
{"task_id": 39, "completion_id": 0, "passed": false, "result": "failed: index 0 is out of bounds for axis 0 with size 0", "solution": "import numpy as np\nimport numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    median = np.median(data[:, d])\n    median_indices = np.where(data[:, d] == median)[0]\n    pivot = median_indices[0]\n    left = np.where(data[:, d] < median)[0].tolist()\n    right = np.where(data[:, d] > median)[0].tolist()\n    return (pivot, left, right)\nassert get_split(np.array([[2,3],[1,5],[4,1],[0,2],[3,4]]),0) == (0,[1,3],[2,4]), \"failed on example 1\"\nassert get_split(np.array([[10],[20],[30],[40]]),0) == (2,[0,1],[3]), \"failed on even n, single column\"\nassert get_split(np.array([[1,9],[2,8],[3,7],[4,6],[5,5]]),1) == (2,[3,4],[0,1]), \"failed on different column\"\nassert get_split(np.arange(1,11).reshape(-1,1),0) == (5,[0,1,2,3,4],[6,7,8,9]), \"failed on 10 sequential numbers\"\nassert get_split(np.array([[8],[3],[6],[2],[7],[4]]),0) == (2,[1,3,5],[0,4]), \"failed on shuffled unique values\"\nassert get_split(np.array([[5,1],[4,2],[3,3],[2,4],[1,5]]),1) == (2,[0,1],[3,4]), \"failed on descending column 1\"\nassert get_split(np.array([[10],[20],[30],[40],[50],[60],[70]]),0) == (3,[0,1,2],[4,5,6]), \"failed on 7 items\"\nassert get_split(np.array([[100],[200]]),0) == (1,[0],[]), \"failed on two elements\"\nassert get_split(np.array([[42]]),0) == (0,[],[]), \"failed on single element\"\nassert get_split(np.array([[1,5,9],[2,6,8],[3,7,7],[4,4,6],[5,3,5]]),2) == (2,[3,4],[0,1]), \"failed on 3rd column split\""}
{"task_id": 40, "completion_id": 0, "passed": false, "result": "failed: cannot set WRITEABLE flag to True of this array", "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, 'Input array must be one-dimensional'\n    assert stride >= 1, 'Stride must be positive'\n    assert len(x) >= frame_width, 'Frame width cannot be larger than signal length'\n    n_frames = (len(x) - frame_width) // stride + 1\n    shape = (n_frames, frame_width)\n    strides = (x.strides[0] * stride, x.strides[0])\n    frames = as_strided(x, shape=shape, strides=strides)\n    frames.flags.writeable = writeable\n    return frames\n# 1\nx = np.arange(6)\nassert np.array_equal(to_frames(x, 5, 1), np.array([[0,1,2,3,4],[1,2,3,4,5]])), 'test case failed: to_frames(np.arange(6),5,1)'\n# 2\nassert np.array_equal(to_frames(np.arange(10),3,2), np.array([[0,1,2],[2,3,4],[4,5,6],[6,7,8]])), 'test case failed: to_frames(np.arange(10),3,2)'\n# 3\nassert np.array_equal(to_frames(np.arange(10),4,4), np.array([[0,1,2,3],[4,5,6,7]])), 'test case failed: to_frames(np.arange(10),4,4)'\n# 4\nassert to_frames(np.arange(8),4,2).flags.writeable is False, 'test case failed: writeable flag when default False'\n# 5\nx = np.arange(8)\nframes = to_frames(x,4,2,writeable=True)\nframes[0,0]=123\nassert x[0]==123, 'test case failed: writeable True reflection'\n# 6\nrand = np.random.randn(17)\nframes = to_frames(rand,5,3)\nassert frames.shape == ((17-5)//3+1,5), 'test case failed: random shape'\n# 7\nassert np.array_equal(to_frames(np.arange(10),10,1), np.arange(10).reshape(1,-1)), 'test case failed: single frame'\n# 8\nassert np.array_equal(to_frames(np.arange(9),4,3), np.array([[0,1,2,3],[3,4,5,6]])), 'test case failed: tail trimming'\n# 9\nx = np.arange(4)\nassert np.array_equal(to_frames(x,1,1), x.reshape(-1,1)), 'test case failed: frame width 1'\n# 10\nx = np.arange(25)\nframes = to_frames(x,5,6)\nassert frames.shape == ((25-5)//6+1,5), 'test case failed: stride > width'"}
{"task_id": 48, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.GenericAlias' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    if isinstance(X, list):\n        X = np.array(X)\n    if X.ndim != 2:\n        return False\n    if not np.all((0 <= X) & (X <= 1)):\n        return False\n    row_sums = np.sum(X, axis=1)\n    if not np.allclose(row_sums, np.ones(len(row_sums)), rtol=0, atol=1e-08):\n        return False\n    return True\nassert is_stochastic([[1.0]]) is True, \"Failed on 1\u00d71 identity\"\nassert is_stochastic([[0.5, 0.5], [0.1, 0.9]]) is True, \"Failed on simple 2\u00d72 matrix\"\nassert is_stochastic([[0.2, 0.5], [0.3, 0.3]]) is False, \"Rows do not sum to 1\"\nassert is_stochastic([[0.2, -0.2], [0.4, 0.6]]) is False, \"Negative entry allowed\"\nassert is_stochastic([[1.2, -0.2], [0.4, 0.6]]) is False, \"Entry greater than 1 allowed\"\nassert is_stochastic([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) is True, \"Failed on 3\u00d73 identity\"\nassert is_stochastic([[0.3333, 0.3333, 0.3334]]) is True, \"Tolerance handling failed\"\nassert is_stochastic([[0.2, 0.3, 0.5], [0.1, 0.1, 0.8]]) is True, \"Failed on 2\u00d73 valid matrix\"\nassert is_stochastic([[0.2, 0.3, 0.6], [0.1, 0.1, 0.8]]) is False, \"First row sums to 1.1\"\nassert is_stochastic(np.array([[0.7, 0.2, 0.1]])) is True, \"Failed on NumPy input\""}
{"task_id": 55, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    w = np.zeros(X.shape[1])\n    s = np.zeros(X.shape[1])\n    for t in range(max_iter):\n        indices = np.random.choice(X.shape[0], size=min(batch_size, X.shape[0]), replace=False)\n        X_batch = X[indices]\n        y_batch = y[indices]\n        g = 1 / X_batch.shape[0] * X_batch.T @ (X_batch @ w - y_batch)\n        s = rho * s + (1 - rho) * g ** 2\n        w = w - eta * g / (np.sqrt(s) + eps_station)\n        if np.linalg.norm(g) < epsilon:\n            break\n    return [round(weight, 4) for weight in w]\nimport numpy as np\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(np.array([[1,0],[1,1],[1,2],[1,3]],float),np.array([1,3,5,7],float)),[1,2])), \"Failed on y = 1+2x\"\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(np.array([[1,0],[1,1],[1,2],[1,3],[1,4]],float),np.array([3,7,11,15,19],float)),[3,4])), \"Failed on y = 3+4x\"\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(np.array([[1,0],[1,1],[1,2]],float),np.array([5,5,5],float)),[5,0])), \"Failed on constant function\"\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(np.array([[1,0],[1,1],[1,2],[1,3]],float),np.array([10,8,6,4],float)),[10,-2])), \"Failed on y = 10-2x\"\nX8=np.array([[1,-1],[1,0],[1,1],[1,2]],float);y8=np.array([4,5,6,7],float)\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(X8,y8),[5,1])), \"Failed on negative to positive x\"\nX9=np.array([[1,2],[1,4],[1,6],[1,8]],float);y9=np.array([5,9,13,17],float)\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(X9,y9),[1,2])), \"Failed on even x\"\nX10=np.array([[1,3],[1,6],[1,9]],float);y10=np.array([2,4,6],float)\nassert all(abs(a-b)<1e-2 for a,b in zip(rms_prop(X10,y10),[0,0.6667])), \"Failed on small sample 10\""}
{"task_id": 56, "completion_id": 0, "passed": false, "result": "failed: failed: softplus([-1,0,1])", "solution": "import numpy as np\nimport numpy as np\ndef softplus(x, deriv: bool=False):\n    x = np.array(x)\n    if deriv:\n        sigmoid = 1 / (1 + np.exp(-x))\n        return np.round(sigmoid, 4).tolist()\n    else:\n        softplus = np.log1p(np.exp(-np.abs(x))) + x\n        return np.round(softplus, 4).tolist()\nassert softplus(np.array([-1, 0, 1])) == [0.3133, 0.6931, 1.3133], \"failed: softplus([-1,0,1])\"\nassert softplus(np.array([-1, 0, 1]), True) == [0.2689, 0.5, 0.7311], \"failed: softplus([-1,0,1], deriv=True)\"\nassert softplus([-20]) == [0.0], \"failed: softplus([-20])\"\nassert softplus([20]) == [20.0], \"failed: softplus([20])\"\nassert softplus([-20], True) == [0.0], \"failed: softplus([-20], deriv=True)\"\nassert softplus([20], True) == [1.0], \"failed: softplus([20], deriv=True)\"\nassert softplus([-2, 2], True) == [0.1192, 0.8808], \"failed: softplus([-2,2], deriv=True)\"\nassert softplus(0) == 0.6931, \"failed: softplus(0)\"\nassert softplus(0, True) == 0.5, \"failed: softplus(0, deriv=True)\""}
{"task_id": 58, "completion_id": 0, "passed": false, "result": "failed: failed test 1", "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    corpus_counter = Counter(corpus)\n    sequence_counter = Counter(sequence)\n    total_log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        if N == 1:\n            count_sequence = sequence_counter[tuple(sequence[i:i + N])]\n            count_corpus = corpus_counter[sequence[i]]\n        else:\n            count_sequence = sequence_counter[tuple(sequence[i:i + N])]\n            count_corpus = corpus_counter[tuple(sequence[i:i + N - 1])]\n        if count_corpus == 0:\n            return float('-inf')\n        prob = count_sequence / count_corpus\n        if prob == 0:\n            return float('-inf')\n        total_log_prob += np.log2(prob)\n    return round(total_log_prob, 4)\nassert unsmoothed_ngram_log_prob([\"the\",\"quick\",\"brown\",\"fox\",\"jumps\",\"over\",\"the\",\"lazy\",\"dog\"],[\"the\",\"lazy\",\"dog\"],2)==-0.6931, \"failed test 1\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"a\",\"b\"],2)==-0.4055, \"failed test 2\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"b\",\"a\",\"b\"],2)==-0.4055, \"failed test 3\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"b\",\"c\"],2)==float('-inf'), \"failed test 4\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"a\",\"b\"],1)==-1.4271, \"failed test 5\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"c\"],1)==float('-inf'), \"failed test 6\"\nassert unsmoothed_ngram_log_prob(\"i love machine learning i love deep learning\".split(),[\"i\",\"love\",\"deep\"],3)==-0.6931, \"failed test 7\"\nassert unsmoothed_ngram_log_prob(\"i love machine learning i love deep learning\".split(),[\"love\",\"deep\",\"machine\"],3)==float('-inf'), \"failed test 8\"\nassert unsmoothed_ngram_log_prob(\"a b a b a\".split(),[\"a\"],2)==float('-inf'), \"failed test 9\"\nassert unsmoothed_ngram_log_prob(\"i love machine learning i love deep learning\".split(),[\"machine\",\"learning\",\"i\"],3)==0.0, \"failed test 10\""}
{"task_id": 62, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.GenericAlias' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef lasso_regression(X: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray', degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    X = np.array(X)\n    y = np.array(y)\n    X_poly = np.zeros((X.shape[0], degree + 1))\n    X_poly[:, 0] = 1\n    for i in range(1, degree + 1):\n        X_poly[:, i] = X ** i\n    weights = np.zeros(degree + 1)\n    for _ in range(n_iterations):\n        weights_prev = weights.copy()\n        weights[0] = np.mean(y - np.dot(X_poly[:, 1:], weights[1:]))\n        for j in range(1, degree + 1):\n            xj = X_poly[:, j]\n            rho = np.dot(xj, y - np.dot(X_poly, weights) + weights[j] * xj)\n            weights[j] = soft_threshold(rho, reg_factor) / np.dot(xj, xj)\n        if np.max(np.abs(weights - weights_prev)) < tol:\n            break\n    return [round(w, 4) for w in weights]\ndef soft_threshold(rho: float, lambda_: float) -> float:\n    \"\"\"Soft threshold function used in Lasso regression.\"\"\"\n    return np.sign(rho) * np.maximum(np.abs(rho) - lambda_, 0)\nassert lasso_regression([0,1,2,3],[1,3,5,7],1,0)==[1.0,2.0],\"failed: linear data degree 1\"\nassert lasso_regression([1,2,3],[4,6,8],1,0)==[2.0,2.0],\"failed: linear data intercept 2 slope 2\"\nassert lasso_regression([0,1,2],[0,1,4],2,0)==[0.0,0.0,1.0],\"failed: quadratic x^2\"\nassert lasso_regression([0,1,2],[1,2,5],2,0)==[1.0,0.0,1.0],\"failed: quadratic x^2+1\"\nassert lasso_regression([0,1,2],[2,6,12],2,0)==[2.0,3.0,1.0],\"failed: quadratic 2+3x+x^2\"\nassert lasso_regression([-1,0,1],[2,1,0],1,0)==[1.0,-1.0],\"failed: negative slope\"\nassert lasso_regression([0,5],[7,17],1,0)==[7.0,2.0],\"failed: two-point line\""}
{"task_id": 63, "completion_id": 0, "passed": false, "result": "failed: name 'A1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Compute the backward probability vector beta_t for a given time index t.\n    \n    Parameters:\n    A (list[list[float]]): transition-probability matrix of shape (N, N)\n    B (list[list[float]]): emission-probability matrix of shape (N, M)\n    obs (list[int]): list of observation indices (length T)\n    t (int): integer time index (0 \u2264 t < T)\n    \n    Returns:\n    list[float]: list of backward probabilities rounded to 4 decimal places\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    (N, M) = B.shape\n    T = len(obs)\n    beta = np.zeros(N)\n    if t == T - 1:\n        beta[:] = 1.0\n    else:\n        for j in range(N):\n            beta[j] = np.sum(A[:, j] * B[j, obs[t + 1]] * backward_beta(A, B, obs, t + 1))\n    return np.round(beta, 4).tolist()\nassert backward_beta(A1, B1, obs1, 0) == [0.2032, 0.2164], \"failed: example t=0\"\nassert backward_beta(A1, B1, obs1, 1) == [0.38, 0.26], \"failed: example t=1\"\nassert backward_beta(A1, B1, obs1, 2) == [1.0, 1.0], \"failed: example t=2 (last index)\"\nassert backward_beta(A2, B2, obs2, 3) == [1.0, 1.0, 1.0], \"failed: 3-state t=3\"\nassert backward_beta(A2, B2, obs2, 2) == [0.49, 0.5, 0.47], \"failed: 3-state t=2\"\nassert backward_beta(A2, B2, obs2, 1) == [0.2488, 0.2434, 0.2552], \"failed: 3-state t=1\"\nassert backward_beta(A2, B2, obs2, 0) == [0.1267, 0.1245, 0.133], \"failed: 3-state t=0\"\nassert backward_beta(A3, B3, obs3, 0) == [1.0, 1.0], \"failed: single observation\"\nassert backward_beta(A4, B4, obs4, 0) == [0.45, 0.54], \"failed: custom 2-state t=0\"\nassert backward_beta(A4, B4, obs4, 1) == [1.0, 1.0], \"failed: custom 2-state t=1\""}
{"task_id": 65, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or (not pi) or (not obs):\n        return 0.0\n    T = len(obs)\n    N = len(A)\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1.0\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t, i] = sum((A[i][j] * B[j][obs[t + 1]] * beta[t + 1, j] for j in range(N)))\n    seq_prob = sum((pi[i] * B[i][obs[0]] * beta[0, i] for i in range(N)))\n    return round(seq_prob, 6)\nassert backward_prob([[0.7,0.3],[0.4,0.6]], [[0.1,0.4,0.5],[0.6,0.3,0.1]], [0.6,0.4], [0,1,2]) == 0.033612, \"test case failed: example sequence\"\nassert backward_prob([[0.7,0.3],[0.4,0.6]], [[0.1,0.4,0.5],[0.6,0.3,0.1]], [0.6,0.4], [2,1]) == 0.1246, \"test case failed: sequence [2,1]\"\nassert backward_prob([[1.0]], [[0.2,0.8]], [1.0], [0,1,1,0]) == 0.0256, \"test case failed: single-state model 1\"\nassert backward_prob([[1.0]], [[0.5,0.5]], [1.0], [1,1,1]) == 0.125, \"test case failed: single-state model 2\"\nassert backward_prob([[0.7,0.3],[0.4,0.6]], [[0.1,0.4,0.5],[0.6,0.3,0.1]], [0.6,0.4], [1]) == 0.36, \"test case failed: length-1 sequence\"\nassert backward_prob([[0.5,0.5,0.0],[0.2,0.3,0.5],[0.0,0.0,1.0]], [[0.1,0.9],[0.7,0.3],[0.4,0.6]], [1.0,0.0,0.0], [0,1]) == 0.06, \"test case failed: 3-state model\"\nassert backward_prob([[1,0],[0,1]], [[0.6,0.4],[0.2,0.8]], [0.5,0.5], [0,1]) == 0.2, \"test case failed: deterministic transitions\"\nassert backward_prob([[0.5,0.5],[0.5,0.5]], [[1,0],[0,1]], [0.5,0.5], [0,0]) == 0.25, \"test case failed: symmetric transitions\"\nassert backward_prob([[0.5,0.5],[0.5,0.5]], [[1,0],[0,1]], [0.5,0.5], [1]) == 0.5, \"test case failed: length-1 identity emissions\"\nassert backward_prob([[1.0]], [[0.3,0.7]], [1.0], [1,1,0]) == 0.147, \"test case failed: single-state model 3\""}
{"task_id": 69, "completion_id": 0, "passed": false, "result": "failed: not enough values to unpack (expected 2, got 1)", "solution": "import numpy as np\nimport numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    (n, m) = B.shape\n    if S.shape != (n,) or A.shape != (n, n) or any((i < 0 or i > 1 for i in S)) or any((j < 0 or j > 1 for j in A.flatten())):\n        return -1\n    if not all((0 <= k < m for k in observations)) or not observations:\n        return -1\n    alpha = np.zeros((n, len(observations)))\n    alpha[:, 0] = S * B[:, observations[0]]\n    for t in range(1, len(observations)):\n        for j in range(n):\n            alpha[j, t] = alpha[:, t - 1].dot(A[:, j]) * B[j, observations[t]]\n    return round(alpha[:, -1].sum(), 4)\nassert forward_algorithm([0.6,0.4], [[0.7,0.3],[0.4,0.6]], [[0.5,0.4,0.1],[0.1,0.3,0.6]], [0,1,2]) == 0.0363, \"failed: basic 2-state example\"\nassert forward_algorithm([0.6,0.4], [[0.7,0.3],[0.4,0.6]], [[0.5,0.4,0.1],[0.1,0.3,0.6]], [1]) == 0.36, \"failed: single observation\"\nassert forward_algorithm([1.0,0.0], [[0.5,0.5],[0.2,0.8]], [[0.6,0.4],[0.3,0.7]], [0,1,1]) == 0.2004, \"failed: asymmetric model\"\nassert forward_algorithm([0.5,0.5], [[0.7,0.3],[0.4,0.6]], [[0.5,0.4,0.1],[0.1,0.3,0.6]], [2,0]) == 0.097, \"failed: different start distribution\"\nassert forward_algorithm([1.0], [[1.0]], [[0.2,0.3]], [1,1,0]) == 0.018, \"failed: single-state model\"\nassert forward_algorithm([0.5,0.5], [[0.7,0.3],[0.4,0.6]], [[0.5,0.5]], [0]) == -1, \"failed: B wrong dimensions\"\nassert forward_algorithm([0.5,0.5], [[0.7,0.3],[0.4,0.6]], [[0.5,0.4],[0.5,0.6]], [-1,0]) == -1, \"failed: negative observation index\"\nassert forward_algorithm([0.5,0.5], [[0.7,0.3],[0.4,0.6]], [[0.5,0.4],[0.5,0.6]], [0,2]) == -1, \"failed: observation index out of range\"\nassert forward_algorithm([], [], [], [0]) == -1, \"failed: empty S\"\nassert forward_algorithm([0.5,0.5], [[0.7,0.3]], [[0.5,0.5],[0.5,0.5]], [0]) == -1, \"failed: A not square\""}
{"task_id": 70, "completion_id": 0, "passed": false, "result": "failed: name 'mineTree' is not defined", "solution": "from collections import Counter, defaultdict\nfrom collections import Counter, defaultdict\nfrom typing import Tuple\ndef create_tree(transactions, min_support):\n    headerTable = defaultdict(int)\n    for trans in transactions:\n        for item in trans:\n            headerTable[item] += 1\n    for k in list(headerTable.keys()):\n        if headerTable[k] < min_support:\n            del headerTable[k]\n    freqItemSet = set(headerTable.keys())\n    if len(freqItemSet) == 0:\n        return (None, None)\n    for k in headerTable:\n        headerTable[k] = [headerTable[k], None]\n    retTree = TreeNode('Null Set', 1, None)\n    for (tranSet, count) in transactions.items():\n        localD = {}\n        for item in tranSet:\n            if item in freqItemSet:\n                localD[item] = headerTable[item][0]\n        if len(localD) > 0:\n            orderedItems = [v[0] for v in sorted(localD.items(), key=lambda p: p[1], reverse=True)]\n            updateTree(orderedItems, retTree, headerTable, count)\n    return (retTree, headerTable)\nclass TreeNode:\n\n    def __init__(self, nameValue, numOccur, parentNode):\n        self.name = nameValue\n        self.count = numOccur\n        self.nodeLink = None\n        self.parent = parentNode\n        self.children = {}\n\n    def inc(self, numOccur):\n        self.count += numOccur\n\n    def disp(self, ind=1):\n        print('  ' * ind, self.name, ' ', self.count)\n        for child in self.children.values():\n            child.disp(ind + 1)\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    initSet = createInitSet(transactions)\n    (tree, headerTable) = create_tree(initSet, min_support)\n    freqItems = []\n    mineTree(headerTable, min_support, set([]), freqItems)\n    return sorted(freqItems, key=lambda x: (len(x), x))\ndef createInitSet(dataSet):\n    retDict = {}\n    for trans in dataSet:\n        key = frozenset(trans)\n        if key in retDict:\n            retDict[key] += 1\n        else:\n            retDict[key] = 1\n    return retDict\nassert fp_growth([], 1) == [], \"test case failed: empty dataset\"\nassert fp_growth([[\"x\", \"y\"]], 2) == [], \"test case failed: single transaction, high support\"\nassert fp_growth([[\"x\", \"y\"]], 1) == [[\"x\"], [\"y\"], [\"x\", \"y\"]], \"test case failed: single transaction, min_support=1\"\nassert fp_growth([[\"a\", \"b\", \"c\"], [\"a\", \"c\"], [\"b\", \"c\"]], 4) == [], \"test case failed: support greater than number of transactions\"\nassert fp_growth([[\"a\", \"b\", \"c\"], [\"a\", \"c\"], [\"b\", \"c\"]], 2) == [[\"a\"], [\"b\"], [\"c\"], [\"a\", \"c\"], [\"b\", \"c\"]], \"test case failed: small data set min_support=2\"\nassert fp_growth([[\"a\", \"b\", \"c\"]]*3, 2) == [[\"a\"], [\"b\"], [\"c\"], [\"a\", \"b\"], [\"a\", \"c\"], [\"b\", \"c\"], [\"a\", \"b\", \"c\"]], \"test case failed: identical transactions\"\nassert fp_growth([[\"bread\", \"milk\"], [\"bread\", \"diaper\", \"beer\", \"egg\"], [\"milk\", \"diaper\", \"beer\", \"coke\"], [\"bread\", \"milk\", \"diaper\", \"beer\"], [\"bread\", \"milk\", \"diaper\", \"coke\"]], 2) == [[\"beer\"], [\"bread\"], [\"coke\"], [\"diaper\"], [\"milk\"], [\"beer\", \"bread\"], [\"beer\", \"diaper\"], [\"beer\", \"milk\"], [\"bread\", \"diaper\"], [\"bread\", \"milk\"], [\"coke\", \"diaper\"], [\"coke\", \"milk\"], [\"diaper\", \"milk\"], [\"beer\", \"bread\", \"diaper\"], [\"beer\", \"diaper\", \"milk\"], [\"bread\", \"diaper\", \"milk\"], [\"coke\", \"diaper\", \"milk\"]], \"test case failed: example data min_support=2\"\nassert fp_growth([[\"a\", \"b\"], [\"b\", \"c\"], [\"a\", \"c\"], [\"a\", \"b\", \"c\"]], 2) == [[\"a\"], [\"b\"], [\"c\"], [\"a\", \"b\"], [\"a\", \"c\"], [\"b\", \"c\"]], \"test case failed: mixed transactions\"\nassert fp_growth([[\"d\"]], 1) == [[\"d\"]], \"test case failed: single item single transaction\""}
{"task_id": 75, "completion_id": 0, "passed": false, "result": "failed: kth(=3) out of bounds (3)", "solution": "import numpy as np\nimport numpy as np\nfrom scipy.spatial import distance\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    if k < 1 or k > len(X_train):\n        return -1\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    predictions = []\n    for test_sample in X_test:\n        distances = distance.cdist([test_sample], X_train, 'euclidean')[0]\n        k_nearest_indices = np.argpartition(distances, k)[:k]\n        k_nearest_labels = y_train[k_nearest_indices]\n        (unique_labels, counts) = np.unique(k_nearest_labels, return_counts=True)\n        max_count_indices = np.where(counts == np.max(counts))\n        max_count_labels = unique_labels[max_count_indices]\n        prediction = np.min(max_count_labels)\n        predictions.append(prediction)\n    return predictions\nassert knn_predict([[1,2],[2,3],[3,4]],[0,1,1],[[2,2]],2)==[0],\"failed on single sample, tie case\"\nassert knn_predict([[0,0],[1,1],[2,2],[3,3]],[1,1,0,0],[[1.1,1.1],[2.9,3.1]],3)==[1,0],\"failed on multi predict\"\nassert knn_predict([[1,0],[0,1],[1,1]],[0,0,1],[[0,0]],1)==[0],\"failed on k=1\"\nassert knn_predict([[1,0],[0,1],[1,1]],[0,0,1],[[0,0]],3)==[0],\"failed on k==n_train\"\nassert knn_predict([[1,0],[0,1],[1,1]],[0,2,2],[[0.9,0.9]],2)==[2],\"failed on majority >1\"\nassert knn_predict([[1,1]], [3], [[2,2],[0,0]], 1)==[3,3],\"failed on single-point training set\"\nassert knn_predict([[1,2],[3,4]],[0,1],[[2,3]],2)==[0],\"failed on tie chooses smaller label\"\nassert knn_predict([[1,2],[3,4]],[0,1],[[2,3]],0)==-1,\"failed on invalid k=0\"\nassert knn_predict([[1,2],[3,4]],[0,1],[[2,3]],3)==-1,\"failed on k>n_train\"\nassert knn_predict([[1,2],[2,1],[0,0],[2,2]],[1,1,0,0],[[1,1]],2)==[1],\"failed on mixed labels\""}
{"task_id": 76, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'type' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    epsilon = 1e-15\n    y_pred = np.clip(y_pred, epsilon, 1.0 - epsilon)\n    loss = -np.sum(y * np.log(y_pred))\n    return round(loss, 4)\nassert cross_entropy_loss([[1, 0, 0], [0, 1, 0]], [[0.8, 0.1, 0.1], [0.2, 0.5, 0.3]]) == 0.9163, \"failed: basic 3-class example\"\nassert cross_entropy_loss([[1, 0], [0, 1]], [[0.6, 0.4], [0.3, 0.7]]) == 0.8675, \"failed: 2-class example\"\nassert cross_entropy_loss([[1, 0, 0, 0]], [[0.25, 0.25, 0.25, 0.25]]) == 1.3863, \"failed: uniform prediction\"\nassert cross_entropy_loss([[1, 0], [0, 1], [0, 1]], [[0.9, 0.1], [0.4, 0.6], [0.2, 0.8]]) == 0.8393, \"failed: three samples\"\nassert cross_entropy_loss([[1, 0]], [[1.0, 0.0]]) == 0.0, \"failed: perfect prediction\"\nassert cross_entropy_loss([[1, 0, 0], [0, 1, 0], [0, 0, 1]], [[0.7, 0.2, 0.1], [0.3, 0.5, 0.2], [0.1, 0.3, 0.6]]) == 1.5606, \"failed: three-class batch\"\nassert cross_entropy_loss([[0, 1, 0]], [[0.1, 0.7, 0.2]]) == 0.3567, \"failed: single sample\"\nassert cross_entropy_loss([[0, 0, 1], [1, 0, 0]], [[0.05, 0.15, 0.8], [0.9, 0.05, 0.05]]) == 0.3285, \"failed: swapped classes\"\nassert cross_entropy_loss([[0, 1], [1, 0]], [[0.5, 0.5], [0.2, 0.8]]) == 2.3026, \"failed: high loss case\"\nassert cross_entropy_loss([[1], [1]], [[0.99], [0.98]]) == 0.0303, \"failed: single-class edge case\""}
{"task_id": 77, "completion_id": 0, "passed": false, "result": "failed: name 'X1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid(Z):\n    \"\"\"Apply sigmoid function to input Z.\"\"\"\n    return 1 / (1 + np.exp(-Z))\ndef relu(Z):\n    \"\"\"Apply ReLU function to input Z.\"\"\"\n    return np.maximum(0, Z)\ndef linear_activation_forward(A_prev, W, b, activation):\n    \"\"\"\n    Implement the forward propagation for the LINEAR->ACTIVATION layer\n\n    Arguments:\n    A_prev -- activations from previous layer (or input data): (size of previous layer, number of examples)\n    W -- weights matrix: numpy array of shape (size of current layer, size of previous layer)\n    b -- bias vector, numpy array of shape (size of the current layer, 1)\n    activation -- the activation to be used in this layer, stored as a text string: \"sigmoid\" or \"relu\"\n\n    Returns:\n    A -- the output of the activation function, also called the post-activation value \n    cache -- a python dictionary containing \"linear_cache\" and \"activation_cache\";\n             stored for computing the backward pass efficiently\n    \"\"\"\n    Z = np.dot(W, A_prev) + b\n    linear_cache = (A_prev, W, b)\n    if activation == 'sigmoid':\n        A = sigmoid(Z)\n    elif activation == 'relu':\n        A = relu(Z)\n    activation_cache = Z\n    cache = (linear_cache, activation_cache)\n    return (A, cache)\ndef L_model_forward(X, parameters):\n    \"\"\"\n    Implement forward propagation for the [LINEAR->RELU]*(L-1)->LINEAR->SIGMOID computation\n    \n    Arguments:\n    X -- data, numpy array of shape (input size, number of examples)\n    parameters -- output of initialize_parameters_deep()\n    \n    Returns:\n    AL -- last post-activation value\n    caches -- list of caches containing:\n                every cache of linear_activation_forward() (there are L-1 of them, indexed from 0 to L-1)\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        A_prev = A\n        (A, cache) = linear_activation_forward(A_prev, parameters['W' + str(l)], parameters['b' + str(l)], 'relu')\n        caches.append(cache)\n    (AL, cache) = linear_activation_forward(A, parameters['W' + str(L)], parameters['b' + str(L)], 'sigmoid')\n    caches.append(cache)\n    return (AL.round(4).tolist(), caches)\nassert L_model_forward(X1, params1) == [[0.5374, 0.5671]], \"test case failed: example input\"\nassert L_model_forward(X2, params2) == [[0.5]], \"test case failed: zero weights and bias\"\nassert L_model_forward(X2, params3) == [[0.7311]], \"test case failed: bias = 1\"\nassert L_model_forward(X4, params4) == [[0.5]], \"test case failed: two-layer, Z=0\"\nassert L_model_forward(X5, params5) == [[0.5]], \"test case failed: ReLU zeros\"\nassert L_model_forward(X6, params6) == [[0.8808, 0.5]], \"test case failed: batch of 2 examples\"\nassert L_model_forward(X7, params7) == [[0.3775]], \"test case failed: mixed weights\"\nassert L_model_forward(X8, params8) == [[0.2689]], \"test case failed: negative bias\"\nassert L_model_forward(X9, params9) == [[0.6457]], \"test case failed: realistic 2-layer\"\nassert L_model_forward(X10, params10) == [[0.4502]], \"test case failed: small negative Z\""}
{"task_id": 81, "completion_id": 0, "passed": false, "result": "failed: Failed on example 1", "solution": "import numpy as np\nimport numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    eps = 1e-15\n    A2 = np.clip(A2, eps, 1 - eps)\n    m = Y.shape[0]\n    cost = -1 / m * (np.dot(Y, np.log(A2).T) + np.dot(1 - Y, np.log(1 - A2).T))\n    cost = np.round(cost, 6)\n    return cost\nassert compute_cost(np.array([[0.8, 0.9, 0.4, 0.2]]), np.array([[1, 1, 0, 0]])) == 0.265618, \"Failed on example 1\"\nassert compute_cost(np.array([[0.999, 0.001]]), np.array([[1, 0]])) == 0.001001, \"Failed on example 2\"\nassert compute_cost(np.array([[0.5, 0.5, 0.5]]), np.array([[1, 0, 1]])) == 0.693147, \"Failed on example 3\"\nassert compute_cost(np.array([[0.2, 0.8, 0.6, 0.4]]), np.array([[0, 1, 1, 0]])) == 0.366985, \"Failed on example 4\"\nassert compute_cost(np.array([[0.999, 0.001, 0.999, 0.001]]), np.array([[1, 0, 1, 0]])) == 0.001001, \"Failed on example 5\"\nassert compute_cost(np.array([[0.1, 0.2, 0.3, 0.9, 0.8]]), np.array([[1, 1, 1, 0, 0]])) == 1.805604, \"Failed on example 6\"\nassert compute_cost(np.array([[0.7]]), np.array([[1]])) == 0.356675, \"Failed on example 7\"\nassert compute_cost(np.array([[0.05]]), np.array([[0]])) == 0.051293, \"Failed on example 8\"\nassert compute_cost(np.array([[0.5, 0.5]]), np.array([[0, 1]])) == 0.693147, \"Failed on example 9\"\nassert compute_cost(np.array([[0.0, 1.0]]), np.array([[0, 1]])) == 0.0, \"Failed on example 10\""}
{"task_id": 82, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.GenericAlias' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    Q = np.array(Q)\n    greedy_index = np.argmax(Q)\n    base = epsilon / len(Q)\n    probabilities = np.full(len(Q), base)\n    probabilities[greedy_index] = 1 - epsilon + base\n    probabilities = np.round(probabilities, 4)\n    probabilities[-1] = round(1 - np.sum(probabilities[:-1]), 4)\n    return probabilities.tolist()\nassert epsilon_soft([1.2, 0.3, 1.2, -0.1], 0.1) == [0.925, 0.025, 0.025, 0.025], \"Test-1 failed: tie situation with \u03b5 = 0.1\"\nassert epsilon_soft([5, 6, 7], 0) == [0.0, 0.0, 1.0], \"Test-2 failed: \u03b5 = 0 (pure greedy)\"\nassert epsilon_soft([2, 2, 2], 0.3) == [0.8, 0.1, 0.1], \"Test-3 failed: all equal Q-values\"\nassert epsilon_soft([-1, -5], 1) == [0.5, 0.5], \"Test-4 failed: \u03b5 = 1 (fully uniform)\"\nassert epsilon_soft([0], 0.5) == [1.0], \"Test-5 failed: single action case\"\nassert epsilon_soft([10, 0, -1, 8], 0.2) == [0.85, 0.05, 0.05, 0.05], \"Test-6 failed: general case\"\nassert len(epsilon_soft([1, 2, 3, 4, 5], 0.4)) == 5, \"Test-10 failed: wrong output length\""}
{"task_id": 86, "completion_id": 0, "passed": true, "result": "passed", "solution": "from collections import Counter\nfrom collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    transposed_predictions = list(map(list, zip(*predictions)))\n    aggregated_predictions = []\n    for sample_predictions in transposed_predictions:\n        votes = Counter(sample_predictions)\n        max_votes = max(votes.values())\n        highest_voted_labels = [label for (label, count) in votes.items() if count == max_votes]\n        aggregated_predictions.append(min(highest_voted_labels))\n    return aggregated_predictions\nassert aggregate_random_forest_votes([[1,0,1,1],[0,0,1,1],[1,1,1,0]]) == [1,0,1,1], \"test case failed: basic majority voting\"\nassert aggregate_random_forest_votes([[1,2],[2,1]]) == [1,1], \"test case failed: numeric tie breaking\"\nassert aggregate_random_forest_votes([[\"cat\",\"dog\",\"cat\"],[\"dog\",\"dog\",\"cat\"]]) == [\"cat\",\"dog\",\"cat\"], \"test case failed: string votes\"\nassert aggregate_random_forest_votes([[42,42,42]]) == [42,42,42], \"test case failed: single tree\"\nassert aggregate_random_forest_votes([[1],[0],[1],[0]]) == [0], \"test case failed: single sample tie\"\nassert aggregate_random_forest_votes([[3,3,2,2],[2,2,3,3],[3,2,3,2]]) == [3,2,3,2], \"test case failed: alternating ties\"\nassert aggregate_random_forest_votes([]) == [], \"test case failed: empty input\"\nassert aggregate_random_forest_votes([[1,1,1],[1,1,1]]) == [1,1,1], \"test case failed: identical votes\"\nassert aggregate_random_forest_votes([[5,4,3,2,1],[1,2,3,4,5],[5,4,3,2,1]]) == [5,4,3,2,1], \"test case failed: diverse votes\"\nassert aggregate_random_forest_votes([[\"a\",\"b\",\"a\",\"c\"],[\"b\",\"b\",\"a\",\"c\"],[\"a\",\"c\",\"a\",\"c\"]]) == [\"a\",\"b\",\"a\",\"c\"], \"test case failed: mixed string votes\""}
{"task_id": 88, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return round(np.logaddexp(0.0, z), 4)\n    else:\n        return np.round(np.logaddexp(0.0, np.array(z)), 4).tolist()\nassert softplus(-1000) == 0.0, \"failed: softplus(-1000)\"\nassert softplus(0) == 0.6931, \"failed: softplus(0)\"\nassert softplus(1) == 1.3133, \"failed: softplus(1)\"\nassert softplus(20) == 20.0, \"failed: softplus(20)\"\nassert softplus([-1, 0, 1]) == [0.3133, 0.6931, 1.3133], \"failed: softplus([-1,0,1])\"\nimport numpy as np\nassert softplus(np.array([-2, 5])) == [0.1269, 5.0067], \"failed: softplus(np.array([-2,5]))\"\nassert softplus(np.array([[0]])) == [[0.6931]], \"failed: softplus(np.array([[0]]))\"\nassert softplus(-0.5) == 0.4741, \"failed: softplus(-0.5)\"\nassert softplus([1000, -1000]) == [1000.0, 0.0], \"failed: softplus([1000,-1000])\""}
{"task_id": 90, "completion_id": 0, "passed": false, "result": "failed: test 1 failed", "solution": "import numpy as np\nimport numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    sorted_evs = sorted([(k, v) for (k, v) in policy.ev_estimates.items()], key=lambda x: x[0])\n    sorted_bandit_evs = sorted([(i, ev) for (i, ev) in enumerate(bandit.arm_evs)], key=lambda x: x[0])\n    sq_error = [(ev - est) ** 2 for ((_, ev), (_, est)) in zip(sorted_bandit_evs, sorted_evs)]\n    mse = np.mean(sq_error)\n    return round(mse, 4)\nassert mse({\"arm_evs\": [0.5, 0.2, 0.9]}, {\"ev_estimates\": {0: 0.4, 1: 0.25, 2: 0.8}}) == 0.0075, \"test 1 failed\"\nassert mse({\"arm_evs\": [1.0, 0.0]}, {\"ev_estimates\": {1: 0.2, 0: 0.8}}) == 0.04, \"test 2 failed\"\nassert mse({\"arm_evs\": [0.3, 0.6, 0.9, 0.1]}, {\"ev_estimates\": {0: 0.3, 1: 0.6, 2: 0.9, 3: 0.1}}) == 0.0, \"test 3 failed\"\nassert mse({\"arm_evs\": [0.0, -1.0, 1.0]}, {\"ev_estimates\": {0: 0.5, 1: 0.0, 2: 1.5}}) == 0.5, \"test 4 failed\"\nassert np.isnan(mse({\"arm_evs\": [0.1, 0.2]}, {\"ev_estimates\": {}})), \"test 5 failed\"\nassert mse({\"arm_evs\": [2.0]}, {\"ev_estimates\": {0: 3.5}}) == 2.25, \"test 6 failed\"\nassert mse({\"arm_evs\": [0.0, 1.0]}, {\"ev_estimates\": {0: 0.35, 1: 0.35}}) == 0.2725, \"test 9 failed\"\nassert mse({\"arm_evs\": [5.0, 5.0, 5.0]}, {\"ev_estimates\": {0: 4.0, 1: 6.0, 2: 5.0}}) == 0.6667, \"test 10 failed\""}
{"task_id": 96, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nfrom collections import Counter, defaultdict\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List, Tuple\ndef additive_ngram_log_prob(corpus: List[str], sequence: str, N: int, K: float=1.0) -> float:\n    vocabulary = set()\n    for sentence in corpus:\n        vocabulary.update(sentence.split())\n    vocabulary.add('<UNK>')\n    V = len(vocabulary)\n    ngram_freq = defaultdict(lambda : defaultdict(int))\n    for sentence in corpus:\n        words = sentence.split()\n        for i in range(len(words) - N + 1):\n            ngram = tuple(words[i:i + N])\n            ngram_freq[ngram[:-1]][ngram[-1]] += 1\n    words = sequence.split()\n    if len(words) < N:\n        return 0.0\n    sum_log_prob = 0.0\n    for i in range(len(words) - N + 1):\n        ngram = tuple(words[i:i + N])\n        numerator = ngram_freq[ngram[:-1]][ngram[-1]] + K\n        denominator = sum(ngram_freq[ngram[:-1]].values()) + K * V\n        prob = numerator / denominator\n        sum_log_prob += math.log(prob)\n    return round(sum_log_prob, 4)\nassert additive_ngram_log_prob([\"hello world\"], \"hello world hello\", 1, 1) == -2.7489, \"failed on unigram repetition\"\nassert additive_ngram_log_prob([\"a b c d\"], \"a b c d\", 3, 1) == -2.1972, \"failed on exact trigram\"\nassert additive_ngram_log_prob([\"the cat\"], \"the mouse\", 2, 1) == -1.3863, \"failed on unseen word in bigram\"\nassert additive_ngram_log_prob([\"cat sat\"], \"mouse cat\", 2, 1) == -1.0986, \"failed on unseen context\"\nassert additive_ngram_log_prob([\"a a b b\"], \"a b\", 1, 0.5) == -1.5769, \"failed on K=0.5 smoothing\"\nassert additive_ngram_log_prob([\"I love NLP\", \"I love AI\"], \"I love ML\", 3, 1) == -1.9459, \"failed on trigram with unknown\"\nassert additive_ngram_log_prob([\"a b c\", \"a b d\"], \"a b d\", 2, 2) == -2.4849, \"failed on K=2 bigram\"\nassert additive_ngram_log_prob([\"hello world\"], \"foo\", 1, 1) == -1.6094, \"failed on completely unknown word\""}
{"task_id": 108, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    (N, M) = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    for _ in range(max_iter):\n        H_old = H\n        W = np.linalg.solve(np.dot(H, H.T) + alpha * np.eye(K), np.dot(H, X.T)).T\n        H = np.linalg.solve(np.dot(W.T, W) + alpha * np.eye(K), np.dot(W.T, X))\n        loss = np.linalg.norm(X - np.dot(W, H)) ** 2 + alpha * (np.linalg.norm(W) ** 2 + np.linalg.norm(H) ** 2)\n        if np.linalg.norm(H - H_old) / np.linalg.norm(H_old) < tol:\n            break\n    X_hat = np.dot(W, H)\n    return X_hat.round(4).tolist()\nassert np.allclose(als_factorization(np.array([[1.,2.],[3.,4.]]),2,alpha=0.0,max_iter=1000,tol=1e-8),[[1.0,2.0],[3.0,4.0]],atol=1e-3),\"failed on 2\u00d72 full-rank matrix\"\nassert np.allclose(als_factorization(np.array([[1.,2.,3.],[4.,5.,6.]]),2,alpha=0.0),[[1.0,2.0,3.0],[4.0,5.0,6.0]],atol=1e-3),\"failed on 2\u00d73 full-rank matrix\"\nassert np.allclose(als_factorization(np.array([[7.,8.],[2.,1.],[3.,4.]]),2,alpha=0.0),[[7.0,8.0],[2.0,1.0],[3.0,4.0]],atol=1e-3),\"failed on 3\u00d72 matrix\"\nassert np.allclose(als_factorization(np.array([[1.5,2.5],[3.5,4.5]]),2,alpha=0.0),[[1.5,2.5],[3.5,4.5]],atol=1e-3),\"failed on decimal matrix\"\nassert np.allclose(als_factorization(np.array([[10.]]),1,alpha=0.0),[[10.0]],atol=1e-3),\"failed on 1\u00d71 matrix\"\nassert np.allclose(als_factorization(np.array([[2.,2.],[2.,2.]]),1,alpha=0.0),[[2.0,2.0],[2.0,2.0]],atol=1e-3),\"failed on constant matrix\"\nassert np.allclose(als_factorization(np.array([[1.,2.],[2.,4.]]),1,alpha=0.0),[[1.0,2.0],[2.0,4.0]],atol=1e-3),\"failed on rank-1 2\u00d72 matrix\""}
{"task_id": 109, "completion_id": 0, "passed": false, "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "solution": "import numpy as np\nimport random\nimport numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n\n    def initialize_centroids(X, K):\n        centroids = [random.choice(X)]\n        for _ in range(1, K):\n            dist_sq = np.array([min([np.inner(c - x, c - x) for c in centroids]) for x in X])\n            probs = dist_sq / dist_sq.sum()\n            cumulative_probs = probs.cumsum()\n            r = random.random()\n            for (j, p) in enumerate(cumulative_probs):\n                if r < p:\n                    i = j\n                    break\n            centroids.append(X[i])\n        return centroids\n\n    def closest_centroid(x, centroids):\n        (best_index, best_value) = (None, None)\n        for (i, c) in enumerate(centroids):\n            value = np.inner(c - x, c - x)\n            if best_value is None or value < best_value:\n                (best_value, best_index) = (value, i)\n        return best_index\n    random.seed(random_state)\n    np.random.seed(random_state)\n    centroids = initialize_centroids(X, K)\n    for _ in range(max_iter):\n        clusters = [[] for _ in range(K)]\n        for x in X:\n            centroid_index = closest_centroid(x, centroids)\n            clusters[centroid_index].append(x)\n        prev_centroids = centroids\n        centroids = [np.mean(cluster, axis=0) if cluster else prev_centroids[i] for (i, cluster) in enumerate(clusters)]\n        if np.array_equal(prev_centroids, centroids):\n            break\n    centroids.sort(key=lambda x: (x[0], x))\n    return [list(map(lambda x: round(x, 4), centroid)) for centroid in centroids]\nassert kmeans(np.array([[1,2],[1,4],[1,0],[10,2],[10,4],[10,0]]),2,random_state=42)==[[1.0,2.0],[10.0,2.0]],\"failed: basic 2-cluster example\"\nassert kmeans(np.array([[-5,0],[-6,-1],[-4,1],[0,5],[1,6],[-1,4],[5,0],[6,1],[4,-1]]),3,random_state=0)==[[-5.0,0.0],[0.0,5.0],[5.0,0.0]],\"failed: three clearly separated clusters\"\nassert kmeans(np.array([[0,0],[0,1],[10,0],[10,1]]),2,random_state=7)==[[0.0,0.5],[10.0,0.5]],\"failed: two vertical stripes\"\nassert kmeans(np.array([[1],[2],[8],[9]]),2,random_state=3)==[[1.5],[8.5]],\"failed: one-dimensional data\"\nassert kmeans(np.array([[1],[2],[3],[4],[5]]),1,random_state=11)==[[3.0]],\"failed: single cluster\"\nassert kmeans(np.array([[0,0,0],[0,1,0],[0,0,1],[10,0,0],[10,1,0],[10,0,1]]),2,random_state=13)==[[0.0,0.3333,0.3333],[10.0,0.3333,0.3333]],\"failed: 3-D example\"\nassert kmeans(np.array([[1,1],[2,2],[3,3]]),3,random_state=19)==[[1.0,1.0],[2.0,2.0],[3.0,3.0]],\"failed: K equals number of points\"\nassert kmeans(np.array([[-1,0],[-2,0],[1,0],[2,0]]),2,random_state=23)==[[-1.5,0.0],[1.5,0.0]],\"failed: symmetric clusters on x-axis\"\nassert kmeans(np.array([[0,0],[0,1],[1,0],[1,1]]),4,random_state=29)==[[0.0,0.0],[0.0,1.0],[1.0,0.0],[1.0,1.0]],\"failed: each point its own cluster\"\nassert kmeans(np.array([[2,2],[2,4],[8,2],[8,4]]),2,random_state=5)==[[2.0,3.0],[8.0,3.0]],\"failed: square split into two rectangles\""}
{"task_id": 111, "completion_id": 0, "passed": false, "result": "failed: name '_identity_predict' is not defined", "solution": "import numpy as np\nimport numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    encoded = [vocabulary.get(char, 0) for char in text]\n    if len(encoded) > time_steps:\n        encoded = encoded[:time_steps]\n    elif len(encoded) < time_steps:\n        encoded += [0] * (time_steps - len(encoded))\n    return encoded\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    decoded = [inverse_vocab.get(idx, '') for idx in indices if idx != 0]\n    return ''.join(decoded)\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded_text = np.array([encoded_text])\n    prediction = model.predict(encoded_text)\n    predicted_ids = np.argmax(prediction, axis=-1)\n    predicted_text = int_to_string(predicted_ids[0], inv_output_vocabulary)\n    return predicted_text\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'hello') == 'hello', 'failed on \"hello\"'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'HELLO') == 'hello', 'failed on upper-case input'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, '') == '', 'failed on empty string'\na20 = 'a' * 25\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, a20) == 'a' * 20, 'failed on long input truncation'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'hi!') == 'hi', 'failed on unknown character removal'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'data science') == 'data science', 'failed on string with space'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, '       ') == '       ', 'failed on only spaces'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'abc xyz') == 'abc xyz', 'failed on mixed letters and space'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'abc_def') == 'abcdef', 'failed on underscore removal'\nassert run_example(_identity_predict, INPUT_VOCAB, INV_VOCAB, 'padding test') == 'padding test', 'failed on general case'"}
{"task_id": 113, "completion_id": 0, "passed": false, "result": "failed: 'NoneType' object is not subscriptable", "solution": "\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        global EXAMPLES\n        examples = EXAMPLES\n    predictions = []\n    for example in examples:\n        prediction_indices = model(example)\n        prediction = ''.join([inv_output_vocabulary[index] for index in prediction_indices])\n        predictions.append(prediction)\n        print(f'input: {example}\\noutput: {prediction}')\n    return predictions\nassert run_examples(lambda s: s[::-1], None, None, [\"abc\"]) == [\"cba\"], \"test case failed: single example reversal\"\nassert run_examples(lambda s: s.upper(), None, None, [\"hello\", \"world\"]) == [\"HELLO\", \"WORLD\"], \"test case failed: uppercase mapping\"\nassert run_examples(lambda s: s, None, None, []) == [], \"test case failed: empty example list\"\nassert run_examples(lambda s: s[::-1], None, None, [\"\", \"a\"]) == [\"\", \"a\"], \"test case failed: empty and single char strings\"\nassert run_examples(lambda s: s*2, None, None, [\"cat\"]) == [\"catcat\"], \"test case failed: duplication model\"\nassert run_examples(lambda s: ''.join(sorted(s)), None, None, [\"cba\", \"fed\"] ) == [\"abc\", \"def\"], \"test case failed: sort characters\"\nassert run_examples(lambda s: ''.join(chr(ord(c)+1) for c in s), None, None, [\"abc\"]) == [\"bcd\"], \"test case failed: shift characters\"\nassert run_examples(lambda s: s[::-1].upper(), None, None, [\"Python\", \"AI\"]) == [\"NOHTYP\", \"IA\"], \"test case failed: reverse and uppercase\"\nassert run_examples(lambda s: ''.join('*' for _ in s), None, None, [\"mask\"]) == [\"****\"], \"test case failed: masking model\"\nassert run_examples(lambda s: s.strip(), None, None, [\"  spaced  \"]) == [\"spaced\"], \"test case failed: strip whitespaces\""}
{"task_id": 115, "completion_id": 0, "passed": false, "result": "failed: name '_expected' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    z = np.dot(X, w)\n    p = 1 / (1 + np.exp(-z))\n    eps = 1e-20\n    p = np.where(p < eps, eps, p)\n    p = np.where(p > 1 - eps, 1 - eps, p)\n    m = X.shape[0]\n    loss = -1 / m * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    gradient = 1 / m * np.dot(X.T, p - y)\n    return (round(loss, 4), np.round(gradient, 4).tolist())\nassert logistic_loss_and_gradient(np.array([[0, 0], [0, 1], [1, 0], [1, 1]]), np.array([0, 0, 0, 1]), np.array([[0.5], [0.5]])) == _expected(np.array([[0, 0], [0, 1], [1, 0], [1, 1]]), np.array([0, 0, 0, 1]), np.array([[0.5], [0.5]])), \"test case failed: #1\"\nassert logistic_loss_and_gradient(np.array([[1, 2], [3, 4]]), np.array([1, 0]), np.array([[0.0], [0.0]])) == _expected(np.array([[1, 2], [3, 4]]), np.array([1, 0]), np.array([[0.0], [0.0]])), \"test case failed: #2\"\nassert logistic_loss_and_gradient(np.array([[1, 1], [2, 2], [3, 3]]), np.array([0, 1, 1]), np.array([[0.1], [-0.2]])) == _expected(np.array([[1, 1], [2, 2], [3, 3]]), np.array([0, 1, 1]), np.array([[0.1], [-0.2]])), \"test case failed: #3\"\nassert logistic_loss_and_gradient(np.array([[2, 3, 4], [1, 0, 1], [0, 1, 1]]), np.array([1, 0, 1]), np.array([[0.2], [0.3], [-0.1]])) == _expected(np.array([[2, 3, 4], [1, 0, 1], [0, 1, 1]]), np.array([1, 0, 1]), np.array([[0.2], [0.3], [-0.1]])), \"test case failed: #4\"\nassert logistic_loss_and_gradient(np.array([[1], [2], [3]]), np.array([0, 0, 1]), np.array([[0.0]])) == _expected(np.array([[1], [2], [3]]), np.array([0, 0, 1]), np.array([[0.0]])), \"test case failed: #5\"\nassert logistic_loss_and_gradient(np.array([[0.5, 1.5], [1.5, 0.5]]), np.array([1, 0]), np.array([[0.2], [0.2]])) == _expected(np.array([[0.5, 1.5], [1.5, 0.5]]), np.array([1, 0]), np.array([[0.2], [0.2]])), \"test case failed: #6\"\nassert logistic_loss_and_gradient(np.array([[10, 10], [-10, -10]]), np.array([1, 0]), np.array([[0.01], [0.01]])) == _expected(np.array([[10, 10], [-10, -10]]), np.array([1, 0]), np.array([[0.01], [0.01]])), \"test case failed: #7\"\nassert logistic_loss_and_gradient(np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]), np.array([0, 1, 0]), np.array([[0.1], [0.2], [0.3]])) == _expected(np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]), np.array([0, 1, 0]), np.array([[0.1], [0.2], [0.3]])), \"test case failed: #8\"\nassert logistic_loss_and_gradient(np.array([[5, 1], [2, 3], [3, 5], [1, 1]]), np.array([1, 0, 1, 0]), np.array([[0.2], [-0.3]])) == _expected(np.array([[5, 1], [2, 3], [3, 5], [1, 1]]), np.array([1, 0, 1, 0]), np.array([[0.2], [-0.3]])), \"test case failed: #9\"\nassert logistic_loss_and_gradient(np.array([[0, 0], [0, 0]]), np.array([0, 0]), np.array([[0], [0]])) == _expected(np.array([[0, 0], [0, 0]]), np.array([0, 0]), np.array([[0], [0]])), \"test case failed: #10\""}
{"task_id": 118, "completion_id": 0, "passed": false, "result": "failed: failed: simple threshold", "solution": "import numpy as np\nimport numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    (m, n) = X_train.shape\n    w = np.ones(m) / m\n    clfs = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_clf = None\n        best_threshold = None\n        best_feature = None\n        best_direction = None\n        for feature in range(n):\n            for threshold in np.unique(X_train[:, feature]):\n                for direction in [1, -1]:\n                    preds = direction * ((X_train[:, feature] > threshold) * 2 - 1)\n                    error = np.sum(w[preds != y_train])\n                    if error > 0.5:\n                        error = 1 - error\n                        direction *= -1\n                    if error < min_error:\n                        min_error = error\n                        best_clf = preds\n                        best_threshold = threshold\n                        best_feature = feature\n                        best_direction = direction\n        eps = min_error\n        if eps == 0:\n            break\n        clf_weight = 0.5 * np.log((1.0 - eps) / eps)\n        clfs.append((best_feature, best_threshold, best_direction, clf_weight))\n        w *= np.exp(-clf_weight * y_train * best_clf)\n        w /= np.sum(w)\n    preds_test = np.zeros(X_test.shape[0])\n    for (feature, threshold, direction, clf_weight) in clfs:\n        preds_test += clf_weight * ((X_test[:, feature] > threshold) * 2 - 1) * direction\n    return [1 if p > 0 else -1 for p in preds_test]\nassert adaboost_predict(np.array([[1],[2],[3],[4]]), np.array([-1,-1,1,1]), np.array([[1.5],[3.5]]), 3) == [-1, 1], \"failed: simple threshold\"\nassert adaboost_predict(np.array([[2],[4],[6],[8]]), np.array([-1,-1,1,1]), np.array([[5],[7]]), 5) == [-1, 1], \"failed: larger n_clf\"\nassert adaboost_predict(np.array([[1,2],[2,1],[3,1],[1,3]]), np.array([1,-1,-1,1]), np.array([[2,2]]), 5)[0] in (-1,1), \"failed: prediction in allowed set\"\nassert len(adaboost_predict(np.array([[0],[1]]), np.array([-1,1]), np.array([[0],[1],[0.5]]), 2)) == 3, \"failed: output length\"\nassert adaboost_predict(np.array([[0],[1],[2]]), np.array([-1,1,-1]), np.array([[1.5]]), 3)[0] in (-1,1), \"failed: odd labels\"\nassert set(adaboost_predict(np.array([[0],[1]]), np.array([-1,1]), np.array([[0],[1]]), 2)).issubset({-1,1}), \"failed: output values range\""}
{"task_id": 128, "completion_id": 0, "passed": false, "result": "failed: 0-dimensional array given. Array must be at least two-dimensional", "solution": "import numpy as np\nimport numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    class_means = [np.mean(X[y == i], axis=0) for i in np.unique(y)]\n    sw = np.sum([np.cov(X[y == i].T) * (X[y == i].shape[0] - 1) for i in np.unique(y)])\n    overall_mean = np.mean(X, axis=0)\n    sb = sum([(class_means[i] - overall_mean).reshape(-1, 1) @ (class_means[i] - overall_mean).reshape(1, -1) * X[y == i].shape[0] for i in range(len(class_means))])\n    (eig_vals, eig_vecs) = np.linalg.eigh(np.linalg.pinv(sw).dot(sb))\n    idx = np.argsort(eig_vals)[::-1]\n    eig_vecs = eig_vecs[:, idx]\n    eig_vals = eig_vals[idx]\n    sign = np.where((eig_vecs[0] < 0).all(), -1, 1)\n    eig_vecs *= sign\n    transformed = np.dot(X, eig_vecs[:, :n_components])\n    transformed = np.round(transformed, 4)\n    return transformed.tolist()\nassert multi_class_lda(np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]]), np.array([0,0,0,0,1,1,1,1]), 1) == [[1.4142],[2.1213],[2.1213],[2.8284],[11.3137],[12.0208],[12.0208],[12.7279]], \"test case failed: multi_class_lda(example 1, 1 component)\"\nassert multi_class_lda(np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]]), np.array([0,0,0,0,1,1,1,1]), 2) == [[1.4142,0.0],[2.1213,-0.7071],[2.1213,0.7071],[2.8284,0.0],[11.3137,0.0],[12.0208,0.7071],[12.0208,-0.7071],[12.7279,0.0]], \"test case failed: multi_class_lda(example 1, 2 components)\"\nassert multi_class_lda(np.array([[2,0],[4,0],[0,2],[0,4]]), np.array([0,0,1,1]), 1) == [[1.4142],[2.8284],[-1.4142],[-2.8284]], \"test case failed: axis-separated data\"\nassert multi_class_lda(np.array([[1],[2],[8],[9]]), np.array([0,0,1,1]), 1) == [[1.0],[2.0],[8.0],[9.0]], \"test case failed: one-dimensional data #1\"\nassert multi_class_lda(np.array([[1,0],[2,0],[8,0],[9,0]]), np.array([0,0,1,1]), 1) == [[1.0],[2.0],[8.0],[9.0]], \"test case failed: axis data #2\"\nassert multi_class_lda(np.array([[2],[4],[6],[8],[10],[12]]), np.array([0,0,1,1,2,2]), 1) == [[2.0],[4.0],[6.0],[8.0],[10.0],[12.0]], \"test case failed: one-dimensional data #2\"\nassert multi_class_lda(np.array([[0,1],[0,2],[0,8],[0,9]]), np.array([0,0,1,1]), 1) == [[1.0],[2.0],[8.0],[9.0]], \"test case failed: axis y-data\"\nassert multi_class_lda(np.array([[-2,0],[-4,0],[0,-2],[0,-4]]), np.array([0,0,1,1]), 1) == [[-1.4142],[-2.8284],[1.4142],[2.8284]], \"test case failed: negative axis data\"\nassert multi_class_lda(np.array([[0,-1],[0,-2],[0,3],[0,4]]), np.array([0,0,1,1]), 1) == [[-1.0],[-2.0],[3.0],[4.0]], \"test case failed: axis y negative-positive data\""}
{"task_id": 140, "completion_id": 0, "passed": false, "result": "failed: test case failed: grid=['.']", "solution": "from collections import deque\nimport math\nfrom collections import deque\ndef escape_fire_maze(grid: list[str]) -> int:\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    fire_queue = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire_queue.append((i, j))\n    agent_queue = deque([(0, 0)])\n    fire_visited = [[0] * n for _ in range(n)]\n    agent_visited = [[0] * n for _ in range(n)]\n    agent_visited[0][0] = 1\n    while fire_queue or agent_queue:\n        for _ in range(len(fire_queue)):\n            (x, y) = fire_queue.popleft()\n            for (dx, dy) in directions:\n                (nx, ny) = (x + dx, y + dy)\n                if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] != '#') and (not fire_visited[nx][ny]):\n                    fire_visited[nx][ny] = 1\n                    fire_queue.append((nx, ny))\n        for _ in range(len(agent_queue)):\n            (x, y) = agent_queue.popleft()\n            for (dx, dy) in directions:\n                (nx, ny) = (x + dx, y + dy)\n                if nx == n - 1 and ny == n - 1:\n                    return agent_visited[x][y]\n                if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] != '#') and (not fire_visited[nx][ny]) and (not agent_visited[nx][ny]):\n                    agent_visited[nx][ny] = agent_visited[x][y] + 1\n                    agent_queue.append((nx, ny))\n    return -1\nassert escape_fire_maze([\".\"]) == 0, \"test case failed: grid=['.']\"\nassert escape_fire_maze([\"F\"]) == -1, \"test case failed: grid=['F']\"\nassert escape_fire_maze([\"..\", \"..\"]) == 2, \"test case failed: grid=['..','..']\"\nassert escape_fire_maze([\"F.\", \"..\"]) == -1, \"test case failed: grid=['F.','..']\"\nassert escape_fire_maze([\"..F\", \"...\", \"...\"]) == -1, \"test case failed: grid=['..F','...','...']\"\nassert escape_fire_maze([\"...\", \".F.\", \"...\"]) == -1, \"test case failed: grid=['...','.F.','...']\"\nassert escape_fire_maze([\"..\", \".F\"]) == -1, \"test case failed: grid=['..','.F']\"\nassert escape_fire_maze([\"...\", \"...\", \"...\"]) == 4, \"test case failed: grid=['...','...','...']\"\nassert escape_fire_maze([\"....\", \"....\", \"....\", \"....\"]) == 6, \"test case failed: grid=['....','....','....','....']\"\nassert escape_fire_maze([\"F..\", \".F.\", \"..F\"]) == -1, \"test case failed: grid=['F..','.F.','..F']\""}
{"task_id": 141, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nfrom scipy.spatial import distance\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n\n    def euclidean_distance(a, b):\n        return distance.cdist(a, b, 'euclidean')\n\n    def manhattan_distance(a, b):\n        return distance.cdist(a, b, 'cityblock')\n\n    def cosine_distance(a, b):\n        return distance.cdist(a, b, 'cosine')\n    metrics = {'euclidean': euclidean_distance, 'manhattan': manhattan_distance, 'cosine': cosine_distance}\n    if metric not in metrics:\n        metric = 'euclidean'\n    dist = metrics[metric](X_test, X_train)\n    nearest_neighbors = np.argsort(dist)[:, :k]\n    predictions = np.empty(X_test.shape[0], dtype=y_train.dtype)\n    for (i, neighbors) in enumerate(nearest_neighbors):\n        y_neighbors = y_train[neighbors]\n        (values, counts) = np.unique(y_neighbors, return_counts=True)\n        predictions[i] = values[np.argmax(counts)]\n    return predictions\nassert knn_predict(np.array([[0, 0], [1, 1], [0, 1], [1, 0]]), np.array([0, 0, 1, 1]), np.array([[0.9, 0.9]]), 3, 'euclidean').tolist() == [1], 'Test 1 failed.'\nassert knn_predict(np.array([[0, 0], [1, 2], [3, 4]]), np.array([0, 1, 1]), np.array([[0, 1]]), 1, 'manhattan').tolist() == [0], 'Test 2 failed.'\nassert knn_predict(np.array([[1, 0], [0, 1]]), np.array([0, 1]), np.array([[1, 0.1]]), 1, 'cosine').tolist() == [0], 'Test 3 failed.'\nassert knn_predict(np.array([[0, 0], [0, 2]]), np.array([0, 1]), np.array([[0, 1]]), 2, 'euclidean').tolist() == [0], 'Test 4 failed.'\nassert knn_predict(np.array([[1, 1], [2, 2], [3, 3], [8, 8], [9, 9]]), np.array([0, 0, 0, 1, 1]), np.array([[1.5, 1.5], [9, 8.9]]), 3, 'euclidean').tolist() == [0, 1], 'Test 5 failed.'\nassert knn_predict(np.array([[1, 1], [2, 2], [3, 3]]), np.array([0, 0, 0]), np.array([[2.1, 2]]), 1).tolist() == [0], 'Test 6 failed.'\nassert knn_predict(np.array([[0, 0], [0, 1], [1, 1]]), np.array([0, 0, 1]), np.array([[0.1, 0.1]]), 2, 'minkowski').tolist() == [0], 'Test 7 failed.'\nassert knn_predict(np.array([[0], [1], [2]]), np.array([0, 1, 1]), np.array([[1.1]]), 3, 'manhattan').tolist() == [1], 'Test 8 failed.'\nassert knn_predict(np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]), np.array([0, 1, 2]), np.array([[0.9, 0.05, 0.05]]), 1, 'cosine').tolist() == [0], 'Test 9 failed.'\nassert knn_predict(np.array([[-1, -1], [-2, -2], [1, 1], [2, 2]]), np.array([0, 0, 1, 1]), np.array([[-1.5, -1.5]]), 2, 'euclidean').tolist() == [0], 'Test 10 failed.'"}
{"task_id": 146, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n\n    def euclidean_distance(x, y):\n        return np.sqrt(np.sum((x - y) ** 2))\n\n    def manhattan_distance(x, y):\n        return np.sum(np.abs(x - y))\n\n    def cosine_distance(x, y):\n        eps = 10 ** (-12)\n        return 1 - np.dot(x, y) / (np.linalg.norm(x) * np.linalg.norm(y) + eps)\n    distances = {'euclidean': euclidean_distance, 'manhattan': manhattan_distance, 'cosine': cosine_distance}\n    dist_func = distances[metric]\n    y_pred = []\n    for test_sample in X_test:\n        distances = []\n        for (i, train_sample) in enumerate(X):\n            dist = dist_func(test_sample, train_sample)\n            distances.append((dist, i))\n        distances.sort()\n        knn = distances[:min(k, len(distances))]\n        knn_labels = [y[i] for (_, i) in knn]\n        y_pred.append(max(set(knn_labels), key=knn_labels.count, default=min(y)))\n    return y_pred\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.9,0.9]]), 3, 'euclidean') == [0], \"Test 1 failed\"\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.9,0.9]]), 1, 'euclidean') == [1], \"Test 2 failed\"\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.9,0.9]]), 3, 'manhattan') == [0], \"Test 3 failed\"\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.9,0.9]]), 3, 'cosine') == [0], \"Test 4 failed\"\nassert knn_predict(np.array([[1],[2],[3],[10]]), np.array([0,0,0,1]), np.array([[2.5]]), 3, 'euclidean') == [0], \"Test 5 failed\"\nassert knn_predict(np.array([[1],[2],[3],[10]]), np.array([0,0,0,1]), np.array([[2.5]]), 1, 'manhattan') == [0], \"Test 6 failed\"\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.2,0.2]]), 10, 'euclidean') == [0], \"Test 7 failed\"\nassert knn_predict(np.array([[0],[1],[2],[3]]), np.array([0,0,1,1]), np.array([[1.5]]), 4, 'euclidean') == [0], \"Test 8 failed\"\nassert knn_predict(np.array([[1,0],[0,1],[1,1]]), np.array([0,1,1]), np.array([[1,1]]), 1, 'cosine') == [1], \"Test 9 failed\"\nassert knn_predict(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,0,1]), np.array([[0.1,0.1],[0.9,0.9]]), 1, 'euclidean') == [0,1], \"Test 10 failed\""}
{"task_id": 155, "completion_id": 0, "passed": false, "result": "failed: name 'weights_simple' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    z1 = np.dot(state, weights['W1']) + weights['b1']\n    a1 = np.maximum(0, z1)\n    z2 = np.dot(a1, weights['W2']) + weights['b2']\n    a2 = np.maximum(0, z2)\n    z3 = np.dot(a2, weights['W3']) + weights['b3']\n    action = np.tanh(z3)\n    action = [round(a, 4) for a in action]\n    return action\nassert actor_forward([0.5, -0.5], weights_simple) == [0.4621], \"test case failed: actor_forward([0.5,-0.5],weights_simple)\"\nassert actor_forward([2.0, 3.0], weights_simple) == [0.9999], \"test case failed: actor_forward([2,3],weights_simple)\"\nassert actor_forward([-2.0, 3.0], weights_simple) == [0.9951], \"test case failed: actor_forward([-2,3],weights_simple)\"\nassert actor_forward([1.0, 1.0], weights_simple) == [0.964], \"test case failed: actor_forward([1,1],weights_simple)\"\nassert actor_forward([0.0, 0.0], weights_simple) == [0.0], \"test case failed: actor_forward([0,0],weights_simple)\"\nassert actor_forward([-1.0, -1.0], weights_simple) == [0.0], \"test case failed: actor_forward([-1,-1],weights_simple)\"\nassert actor_forward([100.0, -100.0], weights_simple) == [1.0], \"test case failed: actor_forward([100,-100],weights_simple)\"\nassert actor_forward([-0.1, 0.1], weights_simple) == [0.0997], \"test case failed: actor_forward([-0.1,0.1],weights_simple)\"\nassert actor_forward([0.3, 0.3], weights_simple) == [0.537], \"test case failed: actor_forward([0.3,0.3],weights_simple)\"\nassert actor_forward([-0.3, 0.7], weights_simple) == [0.6044], \"test case failed: actor_forward([-0.3,0.7],weights_simple)\""}
{"task_id": 160, "completion_id": 0, "passed": false, "result": "failed: failed on line with intercept", "solution": "import numpy as np\nimport numpy as np\ndef soft_threshold(a, tau):\n    return np.sign(a) * max(abs(a) - tau, 0)\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    if fit_intercept:\n        X = np.hstack((np.ones((X.shape[0], 1)), X))\n    else:\n        X = np.hstack((np.zeros((X.shape[0], 1)), X))\n    (m, n) = X.shape\n    w = np.zeros(n)\n    for _ in range(max_iters):\n        for j in range(n):\n            if j == 0 and fit_intercept:\n                w[j] = np.mean(y - X @ w)\n            else:\n                tmp_w = np.copy(w)\n                tmp_w[j] = 0\n                r_j = y - X @ tmp_w\n                w[j] = soft_threshold(np.dot(X[:, j], r_j), lambda_param * m) / np.dot(X[:, j], X[:, j])\n    return ([round(coef, 4) for coef in w[1:]], round(w[0], 4)) if fit_intercept else ([round(coef, 4) for coef in w], 0.0)\nassert fit_lasso(np.array([[1], [2], [3]]), np.array([2, 4, 6]), 0.0, 60) == ([2.0], 0.0), \"failed on simple perfect line\"\nassert fit_lasso(np.array([[0], [1], [2]]), np.array([1, 3, 5]), 0.0, 60) == ([2.0], 1.0), \"failed on line with intercept\"\nassert fit_lasso(np.array([[3], [3], [3]]), np.array([2, 2, 2]), 0.0, 30, False) == ([0.6667], 0.0), \"no intercept forces through origin\"\nassert fit_lasso(np.eye(3), np.array([1, 2, 3]), 0.0, 50) == ([1.0, 2.0, 3.0], 0.0), \"identity design matrix\"\nassert fit_lasso(np.eye(3), np.array([1, 2, 3]), 5.0, 50) == ([0.0, 0.0, 0.0], 2.0), \"\u03bb eliminates weights\"\nassert fit_lasso(np.array([[1, -1], [-1, 1]]), np.array([0, 0]), 0.0, 40) == ([0.0, 0.0], 0.0), \"all zeros target\""}
{"task_id": 165, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.GenericAlias' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n    x = np.array(x)\n    y = np.array(y)\n    distance = np.sum(x != y) / len(x)\n    return round(distance, 4)\nassert hamming_distance([0, 1, 0, 1], [0, 1, 0, 1]) == 0.0, \"Failed identical vectors case\"\nassert hamming_distance([0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1]) == 1.0, \"Failed all differ case\"\nassert hamming_distance([1, 0, 1, 1], [1, 1, 0, 1]) == 0.5, \"Failed example case\"\nassert hamming_distance([1, 2, 3], [1, 2]) == -1, \"Failed unequal length case\"\nassert hamming_distance([3, 5, 7, 9, 11], [3, 4, 7, 8, 11]) == 0.4, \"Failed mixed ints case\"\nimport numpy as np\narr1 = np.array([2, 2, 2, 2])\narr2 = np.array([2, 3, 2, 3])\nassert hamming_distance(arr1, arr2) == 0.5, \"Failed NumPy array input case\"\nassert hamming_distance([7], [8]) == 1.0, \"Failed single element different case\"\nassert hamming_distance([-1, -2, -3], [-1, -2, -4]) == 0.3333, \"Failed negative ints case\"\nassert hamming_distance([1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 0, 1]) == 0.5, \"Failed additional binary case\""}
{"task_id": 169, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer')\n    if N == 1:\n        return [1.0]\n    n = np.arange(N)\n    if window == 'hamming':\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'hann':\n        w = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == 'blackman_harris':\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        w = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('Coefficients must be provided for generalized cosine window')\n        w = np.zeros(N)\n        for (k, a) in enumerate(coefficients):\n            w += a * np.cos(2 * np.pi * k * n / (N - 1))\n    else:\n        raise ValueError(f'Unknown window type: {window}')\n    return [round(x, 4) for x in w.tolist()]\nassert generate_window(\"hamming\", 5) == [0.08, 0.54, 1.0, 0.54, 0.08], \"test case failed: hamming, N=5\"\nassert generate_window(\"hann\", 5) == [0.0, 0.5, 1.0, 0.5, 0.0], \"test case failed: hann, N=5\"\nassert generate_window(\"blackman_harris\", 5) == [0.0001, 0.2175, 1.0, 0.2175, 0.0001], \"test case failed: blackman_harris, N=5\"\nassert generate_window(\"generalized_cosine\", 5, coefficients=[0.5, -0.5]) == [0.0, 0.5, 1.0, 0.5, 0.0], \"test case failed: generalized_cosine, N=5, coeff=[0.5,-0.5]\"\nassert generate_window(\"hamming\", 1) == [1.0], \"test case failed: hamming, N=1\"\nassert generate_window(\"hann\", 1) == [1.0], \"test case failed: hann, N=1\"\nassert generate_window(\"blackman_harris\", 1) == [1.0], \"test case failed: blackman_harris, N=1\"\nassert generate_window(\"hamming\", 6) == [0.08, 0.3979, 0.9121, 0.9121, 0.3979, 0.08], \"test case failed: hamming, N=6\"\nassert generate_window(\"blackman_harris\", 3) == [0.0001, 1.0, 0.0001], \"test case failed: blackman_harris, N=3\"\nassert generate_window(\"generalized_cosine\", 4, coefficients=[1.0]) == [1.0, 1.0, 1.0, 1.0], \"test case failed: generalized_cosine, N=4, coeff=[1.0]\""}
{"task_id": 171, "completion_id": 0, "passed": false, "result": "failed: Exactly two distinct labels are required.", "solution": "import numpy as np\nimport numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    X_train = np.hstack((np.ones((X_train.shape[0], 1)), X_train))\n    X_test = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n    unique_labels = np.unique(y_train)\n    assert len(unique_labels) == 2, 'Exactly two distinct labels are required.'\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train = np.array([label_map[i] for i in y_train])\n    if np.all(y_train == 0) or np.all(y_train == 1):\n        prediction = np.zeros(len(X_test)) if np.all(y_train == 0) else np.ones(len(X_test))\n        return [unique_labels[0] if i == 0 else unique_labels[1] for i in prediction]\n    weights = np.zeros(X_train.shape[1])\n    for _ in range(epochs):\n        permutation = np.random.permutation(X_train.shape[0])\n        X_train = X_train[permutation]\n        y_train = y_train[permutation]\n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train[i:i + batch_size]\n            y_batch = y_train[i:i + batch_size]\n            predictions = 1 / (1 + np.exp(-X_batch.dot(weights)))\n            gradient = X_batch.T.dot(predictions - y_batch)\n            weights -= learning_rate * gradient / batch_size\n    test_predictions = 1 / (1 + np.exp(-X_test.dot(weights)))\n    test_predictions = [unique_labels[0] if i <= 0.5 else unique_labels[1] for i in test_predictions]\n    return test_predictions\nassert logistic_regression_train_predict([[-3],[-2],[2],[3]],[0,0,1,1],[[-2.5],[2.5]]) == [0,1], \"failed on shifted 1D separation\"\nassert logistic_regression_train_predict([[1],[2],[3]],[0,0,0],[[10],[-10]]) == [0,0], \"failed on constant-zero label case\"\nassert logistic_regression_train_predict([[1],[2],[3]],[1,1,1],[[0],[4]]) == [1,1], \"failed on constant-one label case\"\nassert logistic_regression_train_predict([[1,1],[1,2],[2,3],[3,3]],[0,0,1,1],[[1,1.5],[3,4]]) == [0,1], \"failed on simple 2D separation\"\nassert logistic_regression_train_predict([[0,0,1],[1,1,1],[2,2,3],[3,3,3]],[0,0,1,1],[[0,0,0.5],[3,3,4]]) == [0,1], \"failed on 3D separation\"\nassert logistic_regression_train_predict([[1],[2],[3],[4]],[1,1,0,0],[[1.5],[3.5]]) == [1,0], \"failed on negative slope separation\"\nassert logistic_regression_train_predict([[0],[1],[10],[11]],[0,0,1,1],[[0.5],[10.5]]) == [0,1], \"failed on large gap separation\"\nassert logistic_regression_train_predict([[1,0],[0,1],[1,1],[2,2]],[0,0,1,1],[[0.2,0.2],[1.5,1.5]]) == [0,1], \"failed on mixed 2D separation\""}
{"task_id": 176, "completion_id": 0, "passed": false, "result": "failed: can't multiply sequence by non-int of type 'numpy.float64'", "solution": "import numpy as np\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=10):\n    N = len(y_train)\n    w = np.ones(N) / N\n    stumps = []\n    stump_weights = []\n    for _ in range(n_estimators):\n        min_error = np.inf\n        best_stump = None\n        best_threshold = None\n        best_polarity = None\n        best_feature_index = None\n        for feature_index in range(len(X_train[0])):\n            column = [X_train[i][feature_index] for i in range(N)]\n            thresholds = np.unique(column)\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = [polarity if X_train[i][feature_index] < threshold else -polarity for i in range(N)]\n                    error = np.sum(w[y_train != predictions])\n                    if error < min_error:\n                        min_error = error\n                        best_stump = predictions\n                        best_threshold = threshold\n                        best_polarity = polarity\n                        best_feature_index = feature_index\n        if min_error < 1e-08:\n            break\n        alpha = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n        w *= np.exp(-alpha * y_train * best_stump)\n        w /= np.sum(w)\n        stumps.append((best_feature_index, best_threshold, best_polarity))\n        stump_weights.append(alpha)\n    y_pred = np.zeros(len(X_test))\n    for ((feature_index, threshold, polarity), alpha) in zip(stumps, stump_weights):\n        predictions = [polarity if X_test[i][feature_index] < threshold else -polarity for i in range(len(X_test))]\n        y_pred += alpha * np.array(predictions)\n    y_pred = [1 if y > 0 else 0 for y in y_pred]\n    return y_pred\nassert adaboost_predict([[0,0],[1,0],[0,1],[1,1]],[0,1,1,1],[[0,0],[1,1]],3)==[0,1],\"failed OR data\"\nassert adaboost_predict([[1,2],[2,3],[3,4],[4,5]],[0,0,1,1],[[1.5,2.5],[3.5,4.5]],4)==[0,1],\"failed linear split\"\nassert adaboost_predict([[1],[2],[3],[4]],[0,0,1,1],[[2],[4]],3)==[0,1],\"failed 1-D split\"\nassert adaboost_predict([[1],[2],[3]],[0,1,1],[[1],[3]],3)==[0,1],\"failed small 1-D\"\nassert adaboost_predict([[0,0],[0,1],[1,0],[1,1]],[0,0,0,1],[[0,1],[1,1]],4)==[0,1],\"failed AND-like data\"\nassert adaboost_predict([[0],[2],[4],[6]],[0,0,1,1],[[1],[5]],5)==[0,1],\"failed even/odd split\"\nassert adaboost_predict([[1,1],[1,2],[2,1],[2,2]],[0,0,1,1],[[1,1],[2,2]],3)==[0,1],\"failed grid split\"\nassert adaboost_predict([[2],[3],[10],[12]],[0,0,1,1],[[2.5],[11]],4)==[0,1],\"failed distant clusters\"\nassert adaboost_predict([[0,5],[1,6],[2,7],[3,8]],[0,0,1,1],[[0.5,5.5],[2.5,7.5]],4)==[0,1],\"failed correlated features\""}
{"task_id": 178, "completion_id": 0, "passed": false, "result": "failed: test failed: particle_swarm_optimisation(10,60,300,7)", "solution": "import numpy as np\nimport numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    particles = rng.uniform(-1, 1, (num_particles, n_dims))\n    velocities = rng.uniform(-1, 1, (num_particles, n_dims))\n    personal_best = particles.copy()\n    personal_best_fitness = np.sum(personal_best ** 2, axis=1)\n    global_best = particles[np.argmin(personal_best_fitness)]\n    global_best_fitness = np.min(personal_best_fitness)\n    (w, c1, c2) = (0.5, 1.5, 1.5)\n    for _ in range(num_iterations):\n        for i in range(num_particles):\n            (r1, r2) = rng.uniform(0, 1, 2)\n            velocities[i] = w * velocities[i] + c1 * r1 * (personal_best[i] - particles[i]) + c2 * r2 * (global_best - particles[i])\n            particles[i] = np.clip(particles[i] + velocities[i], -1, 1)\n            fitness = np.sum(particles[i] ** 2)\n            if fitness < personal_best_fitness[i]:\n                personal_best[i] = particles[i]\n                personal_best_fitness[i] = fitness\n        global_best = particles[np.argmin(personal_best_fitness)]\n        global_best_fitness = np.min(personal_best_fitness)\n    return round(global_best_fitness, 4)\nassert particle_swarm_optimisation(2, 30, 100, seed=42) == 0.0, \"test failed: particle_swarm_optimisation(2,30,100,42)\"\nassert particle_swarm_optimisation(5, 50, 200, seed=3) == 0.0, \"test failed: particle_swarm_optimisation(5,50,200,3)\"\nassert particle_swarm_optimisation(10, 60, 300, seed=7) == 0.0, \"test failed: particle_swarm_optimisation(10,60,300,7)\"\nassert particle_swarm_optimisation(3, 10, 150, seed=11) == 0.0, \"test failed: particle_swarm_optimisation(3,10,150,11)\"\nassert particle_swarm_optimisation(4, 80, 250, seed=19) == 0.0, \"test failed: particle_swarm_optimisation(4,80,250,19)\"\nassert particle_swarm_optimisation(6, 40, 120, seed=23) == 0.0, \"test failed: particle_swarm_optimisation(6,40,120,23)\"\nassert particle_swarm_optimisation(1, 20, 90, seed=29) == 0.0, \"test failed: particle_swarm_optimisation(1,20,90,29)\"\nassert particle_swarm_optimisation(8, 70, 300, seed=31) == 0.0, \"test failed: particle_swarm_optimisation(8,70,300,31)\"\nassert particle_swarm_optimisation(2, 1, 1, seed=2) == 0.0, \"test failed: particle_swarm_optimisation(2,1,1,2)\"\nassert particle_swarm_optimisation(-1, 30, 100) == -1, \"test failed: invalid input not handled\""}
{"task_id": 180, "completion_id": 0, "passed": false, "result": "failed: division by zero", "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n\n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((np.array(x1) - np.array(x2)) ** 2))\n\n    def get_neighbors(train_data, train_labels, test_row, num_neighbors):\n        distances = []\n        for (index, train_row) in enumerate(train_data):\n            dist = euclidean_distance(test_row, train_row)\n            distances.append((train_labels[index], dist))\n        distances.sort(key=lambda tup: tup[1])\n        neighbors = []\n        for i in range(num_neighbors):\n            neighbors.append(distances[i][0])\n        return neighbors\n    output = []\n    for test_row in X_test:\n        neighbors = get_neighbors(X_train, y_train, test_row, min(k, len(X_train)))\n        if task == 'classification':\n            output.append(Counter(neighbors).most_common(1)[0][0])\n        elif task == 'regression':\n            output.append(round(sum(neighbors) / len(neighbors), 4))\n    return output\nassert knn_predict([[0,0],[1,1],[2,2]], [0,0,1], [[1,1]], 2, \"classification\") == [0], \"failed: basic classification\"\nassert knn_predict([[0],[1],[2]], [1.0,1.5,3.0], [[1]], 2, \"regression\") == [1.25], \"failed: basic regression\"\nassert knn_predict([[0,0],[3,3]], [\"A\",\"B\"], [[1,1]], 5, \"classification\") == [\"A\"], \"failed: k larger than samples\"\nassert knn_predict([[0,0],[2,0],[0,2],[2,2]], [1,2,2,3], [[1,1]], 0, \"regression\") == [2.0], \"failed: k == 0 (use all)\"\nassert knn_predict([[0],[1],[2],[3]], [1,2,2,3], [[1.5]], 3, \"classification\") == [2], \"failed: tie vote numeric\"\nassert knn_predict([[0],[10]], [5.5555, 5.5555], [[5]], 1, \"regression\") == [5.5555], \"failed: rounding unchanged\"\nassert knn_predict([[1,2],[2,3],[3,4]], [10,20,30], [[2,3]], 2, \"regression\") == [15.0], \"failed: regression average\"\nassert knn_predict([[0,0],[1,1],[1,-1]], [\"yes\",\"no\",\"no\"], [[1,0]], 2, \"classification\") == [\"no\"], \"failed: majority vote\"\nassert knn_predict([[0,0],[0,0],[1,1]], [1,1,2], [[0,0]], 2, \"classification\") == [1], \"failed: duplicate points\""}
{"task_id": 184, "completion_id": 0, "passed": false, "result": "failed: failed: simple 1-D split", "solution": "import numpy as np\nimport numpy as np\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n\n    def gini(y):\n        (_, counts) = np.unique(y, return_counts=True)\n        probs = counts / y.size\n        return 1 - np.sum(np.square(probs))\n\n    def split(X, y, feature, threshold):\n        (left, right) = (X[:, feature] <= threshold, X[:, feature] > threshold)\n        return ((X[left], y[left]), (X[right], y[right]))\n\n    def best_split(X, y):\n        (best_gain, best_feature, best_threshold) = (0, None, None)\n        parent_gini = gini(y)\n        for feature in range(X.shape[1]):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                ((_, left_y), (_, right_y)) = split(X, y, feature, threshold)\n                if left_y.size == 0 or right_y.size == 0:\n                    continue\n                child_gini = (left_y.size * gini(left_y) + right_y.size * gini(right_y)) / y.size\n                gain = parent_gini - child_gini\n                if gain > best_gain:\n                    (best_gain, best_feature, best_threshold) = (gain, feature, threshold)\n        return (best_feature, best_threshold)\n\n    def build_tree(X, y, depth=0):\n        if np.all(y == y[0]) or (max_depth is not None and depth == max_depth):\n            return lambda _: np.argmax(np.bincount(y))\n        (feature, threshold) = best_split(X, y)\n        if feature is None:\n            return lambda _: np.argmax(np.bincount(y))\n        ((X_left, y_left), (X_right, y_right)) = split(X, y, feature, threshold)\n        return lambda x: build_tree(X_left, y_left, depth + 1)(x) if x[feature] <= threshold else build_tree(X_right, y_right, depth + 1)(x)\n    tree = build_tree(X_train, y_train)\n    return [tree(x) for x in X_test]\nX_train = np.array([[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]])\ny_train = np.array([0, 1, 0])\nX_test = np.array([[1.5, 2.5], [3.5, 4.5]])\nassert decision_tree_predict(np.array([[1],[2],[3],[4],[5],[6]]), np.array([0,0,0,1,1,1]), np.array([[1.5],[3.5],[5.5]])) == [0,0,1], \"failed: simple 1-D split\"\nassert decision_tree_predict(np.array([[0,0],[1,1],[2,2],[9,9],[10,10],[11,11]]), np.array([0,0,0,1,1,1]), np.array([[1,1],[10,10]])) == [0,1], \"failed: two-dimensional clearly separated\"\nassert decision_tree_predict(np.array([[1],[2],[3],[10],[11],[12],[20],[21],[22]]), np.array([0,0,0,1,1,1,2,2,2]), np.array([[2.5],[11.5],[21]])) == [0,1,2], \"failed: three-class 1-D split\"\nassert decision_tree_predict(np.array([[1],[2],[3]]), np.array([1,1,1]), np.array([[0],[5]])) == [1,1], \"failed: all labels identical\"\nassert decision_tree_predict(np.array([[0.1],[0.2],[0.3],[0.4],[0.5],[0.6]]), np.array([0,0,0,1,1,1]), np.array([[0.25],[0.55]])) == [0,1], \"failed: threshold around 0.35\"\nassert decision_tree_predict(np.array([[5.1,3.5,1.4],[4.9,3.0,1.4],[6.2,3.4,5.4],[5.9,3.0,5.1]]), np.array([0,0,1,1]), np.array([[5.0,3.4,1.5],[6.0,3.1,5.0]])) == [0,1], \"failed: example in task description\"\nassert decision_tree_predict(np.array([[0,2],[1,2],[2,2],[0,10],[1,10],[2,10]]), np.array([0,0,0,1,1,1]), np.array([[0,3],[0,9]])) == [0,1], \"failed: split on second feature\"\nassert decision_tree_predict(np.array([[1],[2],[3],[4],[5]]), np.array([0,0,0,1,1]), np.array([[1.5],[4.5]])) == [0,1], \"failed: odd number of samples\"\nassert decision_tree_predict(np.array([[1],[1],[2],[2],[3],[3],[10],[10],[11],[11]]), np.array([0,0,0,0,0,0,1,1,1,1]), np.array([[1],[10],[3]])) == [0,1,0], \"failed: duplicates in features\"\nassert decision_tree_predict(np.array([[0],[5],[10],[15]]), np.array([0,1,2,3]), np.array([[12],[1]])) == [2,0], \"failed: multi-class, arbitrary values\""}
{"task_id": 190, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef best_gini_split(X, y):\n\n    def gini(y):\n        (_, counts) = np.unique(y, return_counts=True)\n        p = counts / len(y)\n        return 1 - np.sum(np.square(p))\n    X = np.array(X)\n    y = np.array(y)\n    G_whole_dataset = gini(y)\n    best_feature_index = -1\n    best_threshold_value = None\n    best_gini = round(G_whole_dataset, 4)\n    for j in range(X.shape[1]):\n        unique_values = np.unique(X[:, j])\n        for v in unique_values:\n            left_indices = X[:, j] <= v\n            right_indices = X[:, j] > v\n            if left_indices.sum() == 0 or right_indices.sum() == 0:\n                continue\n            left = y[left_indices]\n            right = y[right_indices]\n            G_split = left.shape[0] / y.shape[0] * gini(left) + right.shape[0] / y.shape[0] * gini(right)\n            if G_split < best_gini or (np.isclose(G_split, best_gini) and (j < best_feature_index or (j == best_feature_index and v < best_threshold_value))):\n                best_feature_index = j\n                best_threshold_value = v\n                best_gini = G_split\n    return (best_feature_index, best_threshold_value, round(best_gini, 4))\nassert best_gini_split([[2], [3], [10], [19]], [0, 0, 1, 1]) == (0, 3, 0.0), \"test 1 failed\"\nassert best_gini_split([[2,3],[1,5],[3,2],[4,4]], [0,0,1,1]) == (0, 2, 0.0), \"test 2 failed\"\nassert best_gini_split([[1],[2],[3],[4]], [0,1,0,1]) == (0, 1, 0.3333), \"test 4 failed\"\nassert best_gini_split([[1,10], [2,1], [3,1], [4,10]], [0,0,1,1]) == (0, 2, 0.0), \"test 5 failed\"\nassert best_gini_split([[1,1], [2,2], [3,3], [4,4], [5,5], [6,6]], [0,0,0,1,1,1]) == (0, 3, 0.0), \"test 6 failed\"\nassert best_gini_split([[1],[2],[3]], [0,1,2]) == (0, 1, 0.3333), \"test 7 failed\"\nassert best_gini_split([[1,10],[2,10],[1,1],[2,1]], [0,0,1,1]) == (1, 1, 0.0), \"test 8 failed\"\nassert best_gini_split([[1],[1],[1]], [0,1,0]) == (-1, None, 0.4444), \"test 9 failed\"\nassert best_gini_split([[1,5,9],[2,6,8],[3,7,7],[4,8,6]], [0,0,1,1]) == (0, 2, 0.0), \"test 10 failed\""}
{"task_id": 191, "completion_id": 0, "passed": false, "result": "failed: operands could not be broadcast together with shapes (3,) (2,) ", "solution": "import numpy as np\nimport numpy as np\ndef metric(name: str):\n\n    def euclidean(x, y):\n        x = np.array(x, dtype=float)\n        y = np.array(y, dtype=float)\n        return round(np.sqrt(np.sum((x - y) ** 2)), 4)\n\n    def manhattan(x, y):\n        x = np.array(x, dtype=float)\n        y = np.array(y, dtype=float)\n        return round(np.sum(np.abs(x - y)), 4)\n\n    def chebyshev(x, y):\n        x = np.array(x, dtype=float)\n        y = np.array(y, dtype=float)\n        return round(np.max(np.abs(x - y)), 4)\n\n    def cosine(x, y):\n        (x, y) = (np.array(x, dtype=float), np.array(y, dtype=float))\n        (norm_x, norm_y) = (np.linalg.norm(x), np.linalg.norm(y))\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        return round(1 - np.dot(x, y) / (norm_x * norm_y), 4)\n    if name == 'euclidean':\n        return euclidean\n    elif name == 'manhattan':\n        return manhattan\n    elif name == 'chebyshev':\n        return chebyshev\n    elif name == 'cosine':\n        return cosine\n    else:\n        return lambda x, y: -1\nassert metric('euclidean')([1,2,3],[4,5,6]) == 5.1962, \"test failed: metric('euclidean')([1,2,3],[4,5,6])\"\nassert metric('manhattan')([1,2,3],[4,5,6]) == 9.0, \"test failed: metric('manhattan')([1,2,3],[4,5,6])\"\nassert metric('chebyshev')([1,2,3],[4,5,6]) == 3.0, \"test failed: metric('chebyshev')([1,2,3],[4,5,6])\"\nassert metric('cosine')([1,0],[0,1]) == 1.0, \"test failed: metric('cosine')([1,0],[0,1])\"\nassert metric('cosine')([1,2],[1,2]) == 0.0, \"test failed: metric('cosine')([1,2],[1,2])\"\nassert metric('euclidean')([0,0],[0,0]) == 0.0, \"test failed: metric('euclidean')([0,0],[0,0])\"\nassert metric('manhattan')([3,4,5],[3,4,5]) == 0.0, \"test failed: metric('manhattan') identical vectors\"\nassert metric('unknown')([1,2],[3,4]) == -1, \"test failed: metric('unknown') should be -1\"\nassert metric('euclidean')([1,2,3],[1,2]) == -1, \"test failed: metric('euclidean') mismatched length\"\nassert metric('cosine')([0,0,0],[1,0,0]) == -1, \"test failed: metric('cosine') zero-norm vector\""}
{"task_id": 197, "completion_id": 0, "passed": false, "result": "failed: name 'SimpleNamespace' is not defined", "solution": "import numpy as np\nfrom itertools import product\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n    if not md_action and (not cont_action):\n        n_actions_per_dim = [env.action_space.n]\n        action_ids = [(i,) for i in range(env.action_space.n)]\n        action_dim = 1\n    elif md_action and (not cont_action):\n        action_dim = len(env.action_space.spaces)\n        action_ids = [x for x in product(*[range(space.n) for space in env.action_space.spaces])]\n        n_actions_per_dim = [space.n for space in env.action_space.spaces]\n    elif not md_action and cont_action:\n        n_actions_per_dim = [np.inf]\n        action_dim = env.action_space.shape[0]\n    elif md_action and cont_action:\n        n_actions_per_dim = [np.inf for _ in range(env.action_space.shape[0])]\n        action_dim = env.action_space.shape[0]\n    return (n_actions_per_dim, action_ids, action_dim)\nassert action_stats(SimpleNamespace(action_space=D(4)), False, False) == ([4], [0, 1, 2, 3], 1), \"failed test 1\"\nexpected_ids = [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)]\nassert action_stats(SimpleNamespace(action_space=SimpleNamespace(spaces=[D(2), D(3)])), True, False) == ([2, 3], expected_ids, 2), \"failed test 2\"\nmix_env = SimpleNamespace(action_space=SimpleNamespace(spaces=[D(2), C(3)]))\nassert action_stats(mix_env, True, False) == ([2, np.inf], None, 2), \"failed test 3\"\nassert action_stats(SimpleNamespace(action_space=C(5)), False, True) == ([np.inf], None, 1), \"failed test 4\"\ncont_env = SimpleNamespace(action_space=SimpleNamespace(shape=(4,)))\nassert action_stats(cont_env, True, True) == ([np.inf, np.inf, np.inf, np.inf], None, 4), \"failed test 5\"\nassert action_stats(SimpleNamespace(action_space=D(1)), False, False) == ([1], [0], 1), \"failed test 6\"\nids_3d = list(product(range(2), repeat=3))\ntri_env = SimpleNamespace(action_space=SimpleNamespace(spaces=[D(2), D(2), D(2)]))\nassert action_stats(tri_env, True, False) == ([2, 2, 2], ids_3d, 3), \"failed test 7\"\nids_31 = list(product(range(3), range(1)))\nassert action_stats(SimpleNamespace(action_space=SimpleNamespace(spaces=[D(3), D(1)])), True, False) == ([3, 1], ids_31, 2), \"failed test 8\"\nmix2_env = SimpleNamespace(action_space=SimpleNamespace(spaces=[C(2), D(3)]))\nassert action_stats(mix2_env, True, False) == ([np.inf, 3], None, 2), \"failed test 9\"\nassert action_stats(SimpleNamespace(action_space=D(10)), False, False) == ([10], list(range(10)), 1), \"failed test 10\""}
{"task_id": 198, "completion_id": 0, "passed": false, "result": "failed: name 'phi1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    beta = np.zeros((V, len(phi[0][0])), dtype=float)\n    for doc_idx in range(len(corpus)):\n        for token in corpus[doc_idx]:\n            beta[token, :] += phi[doc_idx][token, :]\n    beta = beta / np.sum(beta, axis=0)\n    beta = [list(np.round(beta[:, i], 4)) for i in range(len(phi[0][0]))]\n    return beta\nassert update_beta(phi1, corpus1, 3) == [[0.3684, 0.0968], [0.4737, 0.6774], [0.1579, 0.2258]], \"failed: test case 1\"\nassert update_beta(phi2, corpus2, 2) == [[0.6667], [0.3333]], \"failed: test case 2\"\nassert update_beta(phi3, corpus3, 3) == [[0.1429, 0.5], [0.3571, 0.3125], [0.5, 0.1875]], \"failed: test case 3\"\nassert update_beta(phi4, corpus4, 2) == [[1.0, 0.0], [0.0, 1.0]], \"failed: test case 4\"\nassert update_beta(phi5, corpus5, 2) == [[0.3333, 0.3333], [0.6667, 0.6667]], \"failed: test case 5\"\nassert update_beta(phi6, corpus6, 3) == [[0.9474, 0.0952, 0.0952], [0.0263, 0.8571, 0.0476], [0.0263, 0.0476, 0.8571]], \"failed: test case 6\"\nassert update_beta(phi7, corpus7, 1) == [[1.0, 1.0]], \"failed: test case 7\"\nassert update_beta(phi8, corpus8, 4) == [[0.0, 0.0], [0.3333, 0.6364], [0.6667, 0.3636], [0.0, 0.0]], \"failed: test case 8\"\nassert update_beta(phi9, corpus9, 2) == [[0.5, 0.5], [0.5, 0.5]], \"failed: test case 9\"\nassert update_beta(phi10, corpus10, 2) == [[0.5, 0.5, 0.5], [0.5, 0.5, 0.5]], \"failed: test case 10\""}
{"task_id": 202, "completion_id": 0, "passed": false, "result": "failed: operands could not be broadcast together with shapes (2,2) (6,2) ", "solution": "import numpy as np\nimport numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n\n    def calculate_cost(medoids):\n        return sum((np.min(np.sum((X[medoids] - X) ** 2, axis=1)) for _ in range(k)))\n\n    def assign_labels(medoids):\n        return np.argmin(np.sum((X[medoids] - X[:, None]) ** 2, axis=2), axis=0)\n    n = X.shape[0]\n    medoids = list(range(k))\n    labels = assign_labels(medoids)\n    cost = calculate_cost(medoids)\n    while True:\n        best_swap = None\n        best_cost = cost\n        for medoid in medoids:\n            for non_medoid in range(k, n):\n                new_medoids = medoids.copy()\n                new_medoids[medoids.index(medoid)] = non_medoid\n                new_cost = calculate_cost(new_medoids)\n                if new_cost < best_cost:\n                    best_cost = new_cost\n                    best_swap = (medoid, non_medoid)\n        if best_swap is None:\n            break\n        medoids[medoids.index(best_swap[0])] = best_swap[1]\n        cost = best_cost\n    labels = assign_labels(medoids)\n    return labels.tolist()\nassert pam_clustering(np.array([[0,0]]),1)==[0],\"failed: single sample, k=1\"\nassert pam_clustering(np.array([[0,0],[1,0],[0,1],[5,5],[6,5],[5,6]]),2)==[0,0,0,1,1,1],\"failed: two well-separated clusters\"\nassert pam_clustering(np.array([[0],[10]]),2)==[0,1],\"failed: two samples, k=2\"\nassert pam_clustering(np.array([[1],[2],[3]]),3)==[0,1,2],\"failed: k equals number of samples\"\nassert pam_clustering(np.array([[-1,-1],[0,0],[1,1]]),1)==[0,0,0],\"failed: k=1, centre should move\"\nassert pam_clustering(np.array([[0],[1],[2],[3],[4]]),1)==[0,0,0,0,0],\"failed: all points one cluster\"\nassert pam_clustering(np.array([[1],[4],[7],[10]]),4)==[0,1,2,3],\"failed: each point its own cluster\""}
{"task_id": 216, "completion_id": 0, "passed": false, "result": "failed: 'NoneType' object is not callable", "solution": "import numpy as np\nimport numpy as np\nfrom sklearn.preprocessing import PolynomialFeatures, StandardScaler\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    if len(x_train[0]) != len(x_test[0]):\n        return -1\n    if n_iterations < 1:\n        return -1\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    poly = PolynomialFeatures(degree)\n    x_train = poly.fit_transform(x_train)\n    x_test = poly.transform(x_test)\n    scaler = StandardScaler(with_mean=True, with_std=True)\n    x_train[:, 1:] = scaler.fit_transform(x_train[:, 1:])\n    x_test[:, 1:] = scaler.transform(x_test[:, 1:])\n    weights = np.zeros(x_train.shape[1])\n    for _ in range(n_iterations):\n        predictions = np.dot(x_train, weights)\n        gradients = np.dot(x_train.T, predictions - y_train) / y_train.size\n        gradients += reg_factor * weights\n        gradients += reg_factor * l1_ratio * np.sign(weights)\n        weights[1:] -= learning_rate * gradients[1:]\n    predictions = np.dot(x_test, weights)\n    return np.round(predictions, 4).tolist()\nassert elastic_net_regression([[1],[2],[3],[4]],[2,4,6,8],[[5],[6]],1,0.0,0.5,5000,0.1)==[10.0,12.0],\"failed: simple linear case\"\nassert elastic_net_regression([[0],[1],[2],[3]],[1,3,5,7],[[4]],1,0.0,0.5,6000,0.05)==[9.0],\"failed: another linear case\"\nassert elastic_net_regression([[1,1],[2,1],[3,1]],[3,5,7],[[4,1]],1,0.0,0.0,6000,0.1)==[9.0],\"failed: multi-feature ridge (ratio 0)\"\nassert elastic_net_regression([[1],[2],[3]],[2,4,6],[[4]],1,0.0,0.5,0,0.1)==-1,\"failed: n_iterations validation\"\nassert elastic_net_regression([[1,2]], [3], [[1]], 1,0.0,0.5,10,0.1)==-1,\"failed: dimension mismatch\"\nassert len(elastic_net_regression([[1],[2],[3],[4]],[1,2,3,4],[[5],[6]],1,0.0,0.5,5000,0.1))==2,\"failed: output length\"\nassert all(isinstance(v,float) for v in elastic_net_regression([[1],[2]], [2,4], [[3]], 1, 0.0,0.5,4000,0.1)),\"failed: output contains non-float values\""}
{"task_id": 217, "completion_id": 0, "passed": false, "result": "failed: failed on ([1, -1], [0.5, -0.5])", "solution": "import numpy as np\nimport numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    sigmoid = 1 / (1 + np.exp(-predicted))\n    gradient = actual * sigmoid - actual * predicted * sigmoid\n    hessian = sigmoid * (1 - sigmoid)\n    gradient = np.round(gradient, 6).tolist()\n    hessian = np.round(hessian, 6).tolist()\n    sigmoid = np.round(sigmoid, 6).tolist()\n    return (gradient, hessian, sigmoid)\nactual = [1, -1, 1, -1]\npredicted = [0.5, -0.5, 1.5, -1.5]\nassert logistic_components([1, -1], [0.5, -0.5]) == ([0.377541, -0.377541], [0.235004, 0.235004], [0.622459, 0.377541]), \"failed on ([1, -1], [0.5, -0.5])\"\nassert logistic_components([1, -1], [10, -10]) == ([0.000045, -0.000045], [0.000045, 0.000045], [0.999955, 0.000045]), \"failed on large magnitude scores\"\nassert logistic_components([1, 1, 1], [0, 0, 0]) == ([0.5, 0.5, 0.5], [0.25, 0.25, 0.25], [0.5, 0.5, 0.5]), \"failed on zeros with positive labels\"\nassert logistic_components([-1, -1, -1], [0, 0, 0]) == ([-0.5, -0.5, -0.5], [0.25, 0.25, 0.25], [0.5, 0.5, 0.5]), \"failed on zeros with negative labels\"\nassert logistic_components([1], [-2]) == ([0.880797], [0.104994], [0.119203]), \"failed on single sample (1, -2)\"\nassert logistic_components([-1], [2]) == ([-0.880797], [0.104994], [0.880797]), \"failed on single sample (-1, 2)\"\nassert logistic_components([1, -1, 1, -1], [1, 1, -1, -1]) == ([0.268941, -0.731059, 0.731059, -0.268941], [0.196612, 0.196612, 0.196612, 0.196612], [0.731059, 0.731059, 0.268941, 0.268941]), \"failed on mixed signs\"\nassert logistic_components([1], [0]) == ([0.5], [0.25], [0.5]), \"failed on ([1], [0])\"\nassert logistic_components([1, -1], [5, -5]) == ([0.006693, -0.006693], [0.006648, 0.006648], [0.993307, 0.006693]), \"failed on moderate magnitude scores\"\nassert logistic_components([-1], [3]) == ([-0.952574], [0.045177], [0.952574]), \"failed on (-1, 3)\""}
{"task_id": 218, "completion_id": 0, "passed": true, "result": "passed", "solution": "\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\"\"\"\n\n    def get_score(hand):\n        \"\"\"Calculate the score of a hand.\"\"\"\n        total = sum(hand)\n        if total + 10 <= 21 and 1 in hand:\n            return total + 10\n        return total\n    player_score = get_score(player)\n    dealer_score = get_score(dealer)\n    if player_score > 21:\n        return -1\n    if dealer_score > 21:\n        return 1\n    if player_score > dealer_score:\n        if player_score == 21 and len(player) == 2:\n            return 1.5\n        return 1\n    elif player_score < dealer_score:\n        return -1\n    else:\n        return 0\nassert blackjack_outcome([1,10],[10,7]) == 1.5, \"Failed on natural blackjack win [1,10] vs [10,7]\"\nassert blackjack_outcome([1,10],[1,10]) == 0.0, \"Failed on natural blackjack draw [1,10] vs [1,10]\"\nassert blackjack_outcome([10,6],[9,7]) == 0.0, \"Failed on simple draw 16 vs 16\"\nassert blackjack_outcome([10,6],[9,8]) == -1.0, \"Failed on player loses 16 vs 17\"\nassert blackjack_outcome([10,5,9],[10,6]) == -1.0, \"Failed on player bust 24 vs 16\"\nassert blackjack_outcome([10,7],[10,6,9]) == 1.0, \"Failed on dealer bust 17 vs 25\"\nassert blackjack_outcome([1,7,3],[10,10]) == 1.0, \"Failed on soft 21 win\"\nassert blackjack_outcome([1,5,5,10],[10,9,2]) == 0.0, \"Failed on 21 draw\"\nassert blackjack_outcome([10,2],[10,10,5]) == 1.0, \"Failed on dealer bust scenario\"\nassert blackjack_outcome([9,9,9],[1,9]) == -1.0, \"Failed on large bust 27 vs 20\""}
{"task_id": 221, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper that returns element-wise squared log errors.\"\"\"\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    (actual, predicted) = (np.array(actual), np.array(predicted))\n    if actual.shape != predicted.shape or (actual < 0).any() or (predicted < 0).any():\n        return -1\n    squared_log_errors = squared_log_error(actual, predicted)\n    msle = np.mean(squared_log_errors)\n    return round(msle, 4)\nassert mean_squared_log_error([3,5],[2.5,5.5])==0.0121, \"failed: example ([3,5],[2.5,5.5])\"\nassert mean_squared_log_error([0,1,2],[0,1,2])==0.0, \"failed: perfect prediction\"\nassert mean_squared_log_error([0],[0])==0.0, \"failed: single zero\"\nassert mean_squared_log_error([9,10],[8,8])==0.0257, \"failed: higher values\"\nassert mean_squared_log_error([1,2],[-1,2])==-1, \"failed: negative prediction\"\nassert mean_squared_log_error([1,2,3],[1,2])==-1, \"failed: length mismatch\"\nassert mean_squared_log_error([1000],[1000])==0.0, \"failed: large identical values\"\nassert mean_squared_log_error([5,15,25],[7,14,29])==0.0358, \"failed: mixed values\""}
{"task_id": 222, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        if z >= 0:\n            return round(1 / (1 + np.exp(-z)), 4)\n        else:\n            exp_z = np.exp(z)\n            return round(exp_z / (1 + exp_z), 4)\n    elif isinstance(z, list):\n        return [sigmoid(z_i) for z_i in z]\n    elif isinstance(z, np.ndarray):\n        return np.where(z >= 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z))).round(4).tolist()\n    else:\n        raise TypeError(f'Unsupported input type: {type(z)}')\nassert sigmoid(0) == 0.5, \"failed on sigmoid(0)\"\nassert sigmoid(1) == 0.7311, \"failed on sigmoid(1)\"\nassert sigmoid(-1) == 0.2689, \"failed on sigmoid(-1)\"\nassert sigmoid(5) == 0.9933, \"failed on sigmoid(5)\"\nassert sigmoid(-5) == 0.0067, \"failed on sigmoid(-5)\"\nassert sigmoid(1000) == 1.0, \"failed on large positive input\"\nassert sigmoid(-1000) == 0.0, \"failed on large negative input\"\nassert sigmoid([0, 1, -1]) == [0.5, 0.7311, 0.2689], \"failed on list input\"\nassert sigmoid([[0, -2], [2, 0]]) == [[0.5, 0.1192], [0.8808, 0.5]], \"failed on 2D input\""}
{"task_id": 224, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, (list, np.ndarray)):\n        return [leaky_relu(zi, a) for zi in z]\n    else:\n        return max(z, a * z)\nassert leaky_relu([-2, -1, 0, 1, 2]) == [-0.02, -0.01, 0.0, 1.0, 2.0], \"failed on default slope, 1-D list\"\nassert leaky_relu(np.array([-5.0, 5.0]), 0.2) == [-1.0, 5.0], \"failed on numpy input, custom slope\"\nassert leaky_relu(np.array([[[-1]]]), 0.5) == [[[-0.5]]], \"failed on 3-D array\"\nassert leaky_relu(0) == 0.0, \"failed on scalar zero\"\nassert leaky_relu(-4, 0.25) == -1.0, \"failed on scalar negative\"\nassert leaky_relu(3.3) == 3.3, \"failed on scalar positive\"\nassert leaky_relu([[0]]) == [[0.0]], \"failed on zero inside nested list\""}
{"task_id": 226, "completion_id": 0, "passed": false, "result": "failed: Test-3 failed", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    N = X_train.shape[0]\n    weights = np.ones(N) / N\n    clfs = []\n    for _ in range(n_clf):\n        (best_clf, best_error, best_pred) = (None, float('inf'), None)\n        for feature_i in range(X_train.shape[1]):\n            for threshold in np.unique(X_train[:, feature_i]):\n                polarity = 1\n                predictions = np.ones(N)\n                predictions[X_train[:, feature_i] < threshold] = -1\n                error = np.sum(weights[predictions != y_train])\n                if error > 0.5:\n                    error = 1 - error\n                    polarity = -1\n                    predictions *= -1\n                if error < best_error:\n                    best_clf = (feature_i, threshold, polarity)\n                    best_error = error\n                    best_pred = predictions\n        alpha = 0.5 * np.log((1 - best_error) / (best_error + 1e-10))\n        clfs.append((best_clf, alpha))\n        weights *= np.exp(-alpha * y_train * best_pred)\n        weights /= np.sum(weights)\n    y_pred = np.zeros(X_test.shape[0])\n    for (clf, alpha) in clfs:\n        (feature_i, threshold, polarity) = clf\n        pred = np.ones(X_test.shape[0])\n        pred[X_test[:, feature_i] < threshold] = -1\n        y_pred += alpha * pred\n    return [1 if p > 0 else -1 for p in y_pred]\nassert adaboost_predict(np.array([[0, 1], [1, 1], [1, 0], [0, 0]]), np.array([1, 1, -1, -1]), np.array([[1, 0], [0, 1]]), 3) == [-1, 1], \"Test-1 failed\"\nassert adaboost_predict(np.array([[1], [2], [3], [4], [5]]), np.array([-1, -1, 1, 1, 1]), np.array([[2], [4]]), 5) == [-1, 1], \"Test-2 failed\"\nassert adaboost_predict(np.array([[2, 9], [3, 8], [1, 10], [5, 2], [6, 3], [4, 1]]), np.array([1, 1, 1, -1, -1, -1]), np.array([[2, 9], [6, 2]]), 4) == [1, -1], \"Test-3 failed\"\nassert adaboost_predict(np.array([[1], [2], [3], [4]]), np.array([1, 1, -1, -1]), np.array([[1], [4]]), 3) == [1, -1], \"Test-4 failed\"\nassert adaboost_predict(np.array([[0], [1], [2], [3], [4], [5]]), np.array([-1, -1, -1, 1, 1, 1]), np.array([[0], [5]]), 6) == [-1, 1], \"Test-5 failed\"\nassert adaboost_predict(np.array([[1, 2], [1, 3], [1, 4], [10, 1], [10, 2], [10, 3]]), np.array([-1, -1, -1, 1, 1, 1]), np.array([[1, 3], [10, 1]]), 5) == [-1, 1], \"Test-6 failed\"\nassert adaboost_predict(np.array([[0.1], [0.4], [0.5], [0.6], [0.9]]), np.array([-1, -1, 1, 1, 1]), np.array([[0.2], [0.8]]), 4) == [-1, 1], \"Test-7 failed\"\nassert adaboost_predict(np.array([[2], [4], [6], [8], [10], [12]]), np.array([-1, -1, -1, 1, 1, 1]), np.array([[3], [11]]), 6) == [-1, 1], \"Test-8 failed\"\nassert adaboost_predict(np.array([[1, 5], [2, 5], [3, 5], [4, 1], [5, 1], [6, 1]]), np.array([1, 1, 1, -1, -1, -1]), np.array([[2, 5], [5, 1]]), 5) == [1, -1], \"Test-9 failed\"\nassert adaboost_predict(np.array([[0], [1]]), np.array([-1, 1]), np.array([[0], [1]]), 1) == [-1, 1], \"Test-10 failed\""}
{"task_id": 241, "completion_id": 0, "passed": false, "result": "failed: 'tuple' object has no attribute 'num_elements'", "solution": "import numpy as np\nimport numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    A = np.random.standard_normal(shape[0] * shape[1:].num_elements())\n    A = A.reshape(shape[0], -1)\n    (U, _, VT) = np.linalg.svd(A, full_matrices=False)\n    if U.shape == A.shape:\n        Q = U\n    else:\n        Q = VT.T\n    Q = Q.reshape(shape) * scale\n    return Q.tolist()\nnp.random.seed(0); assert (m := orthogonal((2, 2), 1.0)); flat = np.array(m); assert np.allclose(flat @ flat.T, np.eye(2), atol=1e-6), \"orthogonal((2,2),1.0) rows not orthonormal\"\nnp.random.seed(1); assert (m := orthogonal((3, 4), 0.1)); flat = np.array(m).reshape(3, -1); assert np.allclose(flat @ flat.T, 0.01 * np.eye(3), atol=1e-6), \"orthogonal((3,4),0.1) row-orthogonality failed\"\nnp.random.seed(2); assert (m := orthogonal((4, 3), 0.7)); flat = np.array(m).reshape(4, -1); assert np.allclose(flat.T @ flat, 0.49 * np.eye(3), atol=1e-6), \"orthogonal((4,3),0.7) column-orthogonality failed\"\nnp.random.seed(3); assert (m := orthogonal((5, 5), 0.3)); flat = np.array(m); assert np.allclose(flat @ flat.T, 0.09 * np.eye(5), atol=1e-6), \"orthogonal((5,5),0.3) failed\"\nnp.random.seed(4); assert (m := orthogonal((2, 8), 0.2)); flat = np.array(m).reshape(2, -1); assert np.allclose(flat @ flat.T, 0.04 * np.eye(2), atol=1e-6), \"orthogonal((2,8),0.2) failed\"\nnp.random.seed(5); assert (m := orthogonal((8, 2), 0.2)); flat = np.array(m).reshape(8, -1); assert np.allclose(flat.T @ flat, 0.04 * np.eye(2), atol=1e-6), \"orthogonal((8,2),0.2) failed\"\nnp.random.seed(6); assert isinstance(orthogonal((3, 3), 1.0), list), \"Return type is not list\"\nnp.random.seed(7); assert orthogonal((1,), 0.5) == -1, \"Shape length < 2 should return -1\"\nnp.random.seed(9); shape = (4, 6); scale = 0.75; m = orthogonal(shape, scale); flat = np.array(m).reshape(shape[0], -1); expected = scale**2 * np.eye(shape[0]); assert np.allclose(flat @ flat.T, expected, atol=1e-6), \"orthogonality condition failed for (4,6)\""}
{"task_id": 243, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    z1 = np.maximum(0, np.sum(state))\n    z2 = 4 * z1\n    z3 = 16 * z1\n    logits = 64 * z1\n    action_probs = [np.exp(logits) / (np.exp(logits) + np.exp(logits) + np.exp(logits)) for _ in range(3)]\n    state_value = 4 * z3\n    action_probs = [round(prob, 4) for prob in action_probs]\n    state_value = round(state_value, 4)\n    return (action_probs, state_value)\nassert actor_critic_forward([1.0, -1.0, 0.5]) == ([0.3333, 0.3333, 0.3333], 32.0), \"failed on state [1.0, -1.0, 0.5]\"\nassert actor_critic_forward([2.0, 3.0, 1.0]) == ([0.3333, 0.3333, 0.3333], 384.0), \"failed on state [2.0, 3.0, 1.0]\"\nassert actor_critic_forward([-2.0, 0.0, 1.0]) == ([0.3333, 0.3333, 0.3333], 0.0), \"failed on state [-2.0, 0.0, 1.0]\"\nassert actor_critic_forward([0.0, 0.0, 0.0]) == ([0.3333, 0.3333, 0.3333], 0.0), \"failed on state [0.0, 0.0, 0.0]\"\nassert actor_critic_forward([1.0, 1.0, 1.0]) == ([0.3333, 0.3333, 0.3333], 192.0), \"failed on state [1.0, 1.0, 1.0]\"\nassert actor_critic_forward([-1.0, -1.0, -1.0]) == ([0.3333, 0.3333, 0.3333], 0.0), \"failed on state [-1.0, -1.0, -1.0]\"\nassert actor_critic_forward([4.0, -2.0, 1.0]) == ([0.3333, 0.3333, 0.3333], 192.0), \"failed on state [4.0, -2.0, 1.0]\"\nassert actor_critic_forward([10.0, -10.0, 5.0]) == ([0.3333, 0.3333, 0.3333], 320.0), \"failed on state [10.0, -10.0, 5.0]\"\nassert actor_critic_forward([0.25, 0.25, 0.25]) == ([0.3333, 0.3333, 0.3333], 48.0), \"failed on state [0.25, 0.25, 0.25]\"\nassert actor_critic_forward([0.1, -0.2, 0.3]) == ([0.3333, 0.3333, 0.3333], 12.8), \"failed on state [0.1, -0.2, 0.3]\""}
{"task_id": 249, "completion_id": 0, "passed": false, "result": "failed: name 'params_1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef softmax(x):\n    \"\"\"Compute softmax values for each scores in x.\"\"\"\n    e_x = np.exp(x - np.max(x))\n    return e_x / e_x.sum()\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    state = np.array(state)\n    (W1, b1, W2, b2, W3, b3) = [np.array(params[i]) for i in ['W1', 'b1', 'W2', 'b2', 'W3', 'b3']]\n    h1 = np.maximum(0, np.dot(state, W1) + b1)\n    h2 = np.maximum(0, np.dot(h1, W2) + b2)\n    h3 = np.maximum(0, np.dot(h2, W3) + b3)\n    (Wa, ba) = [np.array(params[i]) for i in ['Wa', 'ba']]\n    actor_scores = np.dot(h3, Wa) + ba\n    probabilities = softmax(actor_scores)\n    (Wc, bc) = [np.array(params[i]) for i in ['Wc', 'bc']]\n    value = np.dot(h3, Wc) + bc\n    probabilities = [round(i, 4) for i in probabilities]\n    value = round(float(value), 4)\n    return (probabilities, value)\nassert actor_critic_forward([1, 0], params_1) == ([0.7311, 0.2689], 1.0), \"test case failed: state=[1,0]\"\nassert actor_critic_forward([0, 1], params_1) == ([0.2689, 0.7311], 1.0), \"test case failed: state=[0,1]\"\nassert actor_critic_forward([-1, 2], params_1) == ([0.1192, 0.8808], 2.0), \"test case failed: state=[-1,2]\"\nassert actor_critic_forward([3, 3], params_1)  == ([0.5, 0.5], 6.0),       \"test case failed: state=[3,3]\"\nassert actor_critic_forward([-2, -3], params_1)== ([0.5, 0.5], 0.0),       \"test case failed: state=[-2,-3]\"\nassert actor_critic_forward([0, 0], params_2)  == ([0.8808, 0.1192], 2.0), \"test case failed: state=[0,0]\"\nassert actor_critic_forward([1, -1], params_2) == ([0.982, 0.018],  3.0), \"test case failed: state=[1,-1]\"\nassert actor_critic_forward([-1, 1], params_2) == ([0.5, 0.5],     1.0), \"test case failed: state=[-1,1]\"\nassert actor_critic_forward([-5, -5], params_2)== ([0.5, 0.5],     1.0), \"test case failed: state=[-5,-5]\"\nassert actor_critic_forward([10, 0], params_2) == ([1.0, 0.0],    12.0), \"test case failed: state=[10,0]\""}
{"task_id": 253, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    if gradient:\n        grad = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n        return np.round(grad, 4).tolist()\n    else:\n        penalty = alpha * (l1_ratio * np.linalg.norm(w, 2) + 0.5 * (1 - l1_ratio) * np.dot(w, w))\n        return np.round(penalty, 4)\nw = [1.0, 2.0, 3.0]\nalpha = 0.1\nl1_ratio = 0.5\nassert elastic_net_regularization([1, -2, 3], 0.1, 0.5) == 0.5371, \"failed on value, case 1\"\nassert elastic_net_regularization([1, -2, 3], 0.1, 0.5, True) == [0.1, -0.15, 0.2], \"failed on grad, case 2\"\nassert elastic_net_regularization([0, 0, 0], 0.3, 0.7) == 0.0, \"failed on value, zero vector\"\nassert elastic_net_regularization([0, 0, 0], 0.3, 0.7, True) == [0.0, 0.0, 0.0], \"failed on grad, zero vector\"\nassert elastic_net_regularization([5], 1.0, 1.0) == 5.0, \"failed on value, pure L1\"\nassert elastic_net_regularization([5], 1.0, 1.0, True) == [1.0], \"failed on grad, pure L1\"\nassert elastic_net_regularization([3, 4], 0.2, 0.0) == 2.5, \"failed on value, pure L2\"\nassert elastic_net_regularization([3, 4], 0.2, 0.0, True) == [0.6, 0.8], \"failed on grad, pure L2\"\nassert elastic_net_regularization([-1, -1, -1, -1], 0.05, 0.3) == 0.1, \"failed on value, neg weights\"\nassert elastic_net_regularization([-1, -1, -1, -1], 0.05, 0.3, True) == [-0.05, -0.05, -0.05, -0.05], \"failed on grad, neg weights\""}
{"task_id": 256, "completion_id": 0, "passed": false, "result": "failed: name 'ToyLinearRNN' is not defined", "solution": "import numpy as np\nfrom copy import deepcopy\nimport numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    if param_name in ['X', 'y']:\n        return None\n    if param_name in ['Ba', 'Bx']:\n        param_name = param_name.lower()\n    original_param = model.parameters[param_name].copy()\n    param_shape = model.parameters[param_name].shape\n    grads = np.zeros_like(original_param, dtype=np.float64).flatten()\n    for i in range(grads.shape[0]):\n        original_param.flat[i] += epsilon\n        model.parameters[param_name] = original_param.reshape(param_shape)\n        model.flush_gradients()\n        predictions = []\n        for t in range(n_t):\n            prediction = model.forward(X[:, :, t])\n            predictions.append(prediction)\n        loss_plus = loss_func(predictions)\n        original_param.flat[i] -= 2 * epsilon\n        model.parameters[param_name] = original_param.reshape(param_shape)\n        model.flush_gradients()\n        predictions = []\n        for t in range(n_t):\n            prediction = model.forward(X[:, :, t])\n            predictions.append(prediction)\n        loss_minus = loss_func(predictions)\n        grads[i] = (loss_plus - loss_minus) / (2 * epsilon)\n        model.parameters[param_name] = original_param.reshape(param_shape)\n    return grads.reshape(param_shape).T\nimport numpy as np, math, random; from copy import deepcopy; rng = np.random.default_rng(0); model = ToyLinearRNN(2, 2, rng); X = rng.normal(size=(3, 2, 3)); n_t = 3; expected = analytic_grad_P(model, n_t, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', n_t, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for P 2x2'\nimport numpy as np; rng = np.random.default_rng(1); model = ToyLinearRNN(3, 1, rng); X = rng.normal(size=(4, 3, 2)); expected = analytic_grad_P(model, 2, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', 2, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for P 3x1'\nimport numpy as np; rng = np.random.default_rng(2); model = ToyLinearRNN(1, 3, rng); X = rng.normal(size=(5, 1, 1)); expected = analytic_grad_P(model, 1, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', 1, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: n_t = 1'\nimport numpy as np; rng = np.random.default_rng(3); model = ToyLinearRNN(2, 4, rng); X = rng.normal(size=(2, 2, 3)); expected = analytic_grad_ba(model, 3, X); numeric = grad_check_RNN(model, squared_loss, 'Ba', 3, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for Ba'\nimport numpy as np; rng = np.random.default_rng(4); model = ToyLinearRNN(4, 2, rng); X = rng.normal(size=(3, 4, 4)); expected = analytic_grad_P(model, 4, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', 4, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for P 4x2'\nimport numpy as np; rng = np.random.default_rng(5); model = ToyLinearRNN(2, 2, rng); X = rng.normal(size=(2, 2, 2)); expected = analytic_grad_P(model, 2, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', 2, X, epsilon=1e-8); assert np.allclose(numeric, expected, atol=1e-4), 'test case failed: small epsilon'\nimport numpy as np; rng = np.random.default_rng(6); model = ToyLinearRNN(1, 3, rng); X = rng.normal(size=(3, 1, 5)); expected = analytic_grad_P(model, 5, X).T; numeric = grad_check_RNN(model, squared_loss, 'P', 5, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for P 1x3'\nimport numpy as np; rng = np.random.default_rng(7); model = ToyLinearRNN(3, 2, rng); X = rng.normal(size=(2, 3, 2)); expected = analytic_grad_ba(model, 2, X); numeric = grad_check_RNN(model, squared_loss, 'ba', 2, X); assert np.allclose(numeric, expected, atol=1e-5), 'test case failed: Gradient for ba'\nimport numpy as np; rng = np.random.default_rng(8); model = ToyLinearRNN(2, 2, rng); X = rng.normal(size=(2, 2, 2)); assert grad_check_RNN(model, squared_loss, 'X', 2, X) is None, 'test case failed: param X should return None'\nimport numpy as np; rng = np.random.default_rng(9); model = ToyLinearRNN(2, 2, rng); X = rng.normal(size=(2, 2, 2)); assert grad_check_RNN(model, squared_loss, 'y', 2, X) is None, 'test case failed: param y should return None'"}
{"task_id": 257, "completion_id": 0, "passed": false, "result": "failed: 'NoneType' object is not callable", "solution": "import numpy as np\nimport numpy as np\nfrom sklearn.tree import DecisionTreeClassifier\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    (m, n) = X_train.shape\n    weights = np.ones(m) / m\n    classifiers = []\n    alphas = []\n    for _ in range(n_clf):\n        stump = DecisionTreeClassifier(max_depth=1, random_state=0)\n        stump.fit(X_train, y_train, sample_weight=weights)\n        pred = stump.predict(X_train)\n        err = np.sum(weights[pred != y_train])\n        if err > 0.5 or err == 0:\n            break\n        alpha = 0.5 * np.log((1 - err) / err)\n        weights = weights * np.exp(-alpha * y_train * pred)\n        weights = weights / np.sum(weights)\n        classifiers.append(stump)\n        alphas.append(alpha)\n    final_preds = np.zeros(X_test.shape[0])\n    for (clf, alpha) in zip(classifiers, alphas):\n        final_preds += alpha * clf.predict(X_test)\n    return [1 if p > 0 else -1 for p in final_preds]\nassert adaboost_predict(np.array([[1],[2],[3],[4]]), np.array([-1,-1,1,1]), np.array([[1.5],[3.5]]), 3) == [-1, 1], \"failed: simple threshold\"\nassert adaboost_predict(np.array([[2],[4],[6],[8]]), np.array([-1,-1,1,1]), np.array([[5],[7]]), 5) == [-1, 1], \"failed: larger n_clf\"\nassert adaboost_predict(np.array([[1,2],[2,1],[3,1],[1,3]]), np.array([1,-1,-1,1]), np.array([[2,2]]), 5)[0] in (-1,1), \"failed: prediction in allowed set\"\nassert len(adaboost_predict(np.array([[0],[1]]), np.array([-1,1]), np.array([[0],[1],[0.5]]), 2)) == 3, \"failed: output length\"\nassert adaboost_predict(np.array([[0],[1],[2]]), np.array([-1,1,-1]), np.array([[1.5]]), 3)[0] in (-1,1), \"failed: odd labels\"\nassert set(adaboost_predict(np.array([[0],[1]]), np.array([-1,1]), np.array([[0],[1]]), 2)).issubset({-1,1}), \"failed: output values range\""}
{"task_id": 261, "completion_id": 0, "passed": false, "result": "failed: mean far from 0 for shape (5,5)", "solution": "import numpy as np\nimport numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    np.random.seed(0)\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions')\n    fan_in = shape[0]\n    fan_out = shape[1]\n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n    std_dev = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=std_dev, size=shape)\nnp.random.seed(1)\nshape=(64,32)\nW=glorot_normal(shape)\nassert W.shape==shape,\"failed shape (64,32)\"\nnp.random.seed(2)\nshape=(16,3,3,3)\nW=glorot_normal(shape)\nassert W.shape==shape,\"failed shape (16,3,3,3)\"\nnp.random.seed(3)\nshape=(5,5)\nW=glorot_normal(shape)\nassert abs(W.mean())<0.2,\"mean far from 0 for shape (5,5)\"\nnp.random.seed(4)\nshape=(8,8,1,1)\nW=glorot_normal(shape)\nfan_in=8*1*1\nfan_out=8*1*1\nexp_std=np.sqrt(2/(fan_in+fan_out))\nassert abs(W.std()-exp_std)<0.1,\"std incorrect for shape (8,8,1,1)\"\nnp.random.seed(5)\nshape=(1,1,3,3)\nW=glorot_normal(shape)\nassert W.shape==shape,\"failed shape (1,1,3,3)\"\nnp.random.seed(6)\nshape=(10,)\nW=glorot_normal(shape)\nassert W.shape==shape,\"failed shape (10,)\"\nnp.random.seed(7)\nshape=(12,6,2,2)\nW=glorot_normal(shape)\nassert abs(W.mean())<0.1,\"mean far from 0 for shape (12,6,2,2)\"\nnp.random.seed(8)\nshape=(4,4,4)\nW=glorot_normal(shape)\nassert W.shape==shape,\"failed shape (4,4,4)\"\nnp.random.seed(9)\nshape=(128,256)\nW=glorot_normal(shape)\nassert abs(W.std()-np.sqrt(2/(128+256)))<0.05,\"std incorrect for shape (128,256)\""}
{"task_id": 266, "completion_id": 0, "passed": false, "result": "failed: failed: self loop ignored", "solution": "\nfrom typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    adj_list = [[] for _ in V]\n    for (u, v) in E:\n        adj_list[V.index(u)].append(v)\n        adj_list[V.index(v)].append(u)\n    adj_list = [sorted(set(neighbors), key=V.index) for neighbors in adj_list]\n    return adj_list\nassert build_adj_list([], []) == [], \"failed: empty graph\"\nassert build_adj_list([0], []) == [[]], \"failed: single isolated vertex\"\nassert build_adj_list([0,1], [(0,1)]) == [[1],[0]], \"failed: simple two-vertex edge\"\nassert build_adj_list([0,1,2], [(0,1),(1,2)]) == [[1],[0,2],[1]], \"failed: 3-line path\"\nassert build_adj_list([\"A\",\"B\",\"C\",\"D\"], [(\"A\",\"B\"),(\"B\",\"C\"),(\"C\",\"A\"),(\"B\",\"A\")]) == [[\"B\",\"C\"],[\"A\",\"C\"],[\"A\",\"B\"],[]], \"failed: example with duplicate/reversed edges\"\nassert build_adj_list([\"x\",\"y\",\"z\"], [(\"x\",\"x\"),(\"x\",\"y\")]) == [[\"y\"],[\"x\"],[]], \"failed: self loop ignored\"\nassert build_adj_list([0,1,2], [(0,3),(3,4)]) == [[ ], [ ], [ ]], \"failed: edges with unknown vertices ignored\"\nassert build_adj_list([\"A\",\"B\",\"C\"], []) == [[],[],[]], \"failed: all isolated vertices\""}
{"task_id": 267, "completion_id": 0, "passed": false, "result": "failed: type NoneType doesn't define __round__ method", "solution": "import numpy as np\nimport numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    (n_samples, n_features) = X.shape\n    inf = float('inf')\n    best_stump = {'feature_index': None, 'threshold': None, 'polarity': None, 'weighted_error': inf}\n    for feature_i in range(n_features):\n        feature_values = X[:, feature_i]\n        unique_values = np.unique(feature_values)\n        thresholds = (unique_values[1:] + unique_values[:-1]) / 2.0\n        for threshold in thresholds:\n            for polarity in [-1, 1]:\n                predictions = polarity * ((X[:, feature_i] < threshold) * 2 - 1)\n                misclassified = predictions != y\n                weighted_error = np.sum(sample_weights * misclassified)\n                if weighted_error < best_stump['weighted_error']:\n                    best_stump['feature_index'] = feature_i\n                    best_stump['threshold'] = threshold\n                    best_stump['polarity'] = polarity\n                    best_stump['weighted_error'] = weighted_error\n    best_stump['threshold'] = round(best_stump['threshold'], 4)\n    best_stump['weighted_error'] = round(best_stump['weighted_error'], 4)\n    return best_stump\nassert train_decision_stump(np.array([[1],[1],[1]]), np.array([1,-1,1]), np.array([0.1,0.2,0.7]))[\"weighted_error\"] == 0.2, \"test case 5 failed\"\nassert train_decision_stump(np.array([[0],[1]]), np.array([-1,1]), np.array([0.8,0.2]))[\"threshold\"] in (0.0,1.0), \"test case 6 failed\"\nassert train_decision_stump(np.array([[2,0],[0,2],[2,2],[0,0]]), np.array([1,-1,1,-1]), np.ones(4))[\"weighted_error\"] == 0.0, \"test case 7 failed\"\nassert train_decision_stump(np.array([[5],[6],[7]]), np.array([1,1,1]), np.array([0.3,0.3,0.4]))[\"weighted_error\"] == 0.0, \"test case 8 failed\"\nassert train_decision_stump(np.array([[0],[1],[2],[3]]), np.array([1,-1,1,-1]), np.array([0.25,0.25,0.25,0.25]))[\"polarity\"] in (1,-1), \"test case 9 failed\"\nassert train_decision_stump(np.array([[2,3],[2,2],[2,1]]), np.array([-1,1,1]), np.ones(3))[\"feature_index\"] == 1, \"test case 10 failed\""}
{"task_id": 273, "completion_id": 0, "passed": false, "result": "failed: math domain error", "solution": "import math\nfrom collections import Counter\nimport math\nfrom collections import Counter\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    class_counts = Counter(target)\n    parent_entropy = sum((-count / len(target) * math.log2(count / len(target)) for count in class_counts.values()))\n    data = sorted(zip(feature, target))\n    best_threshold = None\n    max_info_gain = 0.0\n    left_counts = Counter()\n    right_counts = class_counts\n    for i in range(1, len(data)):\n        if data[i - 1][0] == data[i][0]:\n            continue\n        left_counts[data[i - 1][1]] += 1\n        right_counts[data[i - 1][1]] -= 1\n        left_entropy = sum((-count / i * math.log2(count / i) for count in left_counts.values()))\n        right_entropy = sum((-count / (len(data) - i) * math.log2(count / (len(data) - i)) for count in right_counts.values()))\n        info_gain = parent_entropy - i / len(data) * left_entropy - (len(data) - i) / len(data) * right_entropy\n        if info_gain > max_info_gain:\n            max_info_gain = info_gain\n            best_threshold = (data[i - 1][0] + data[i][0]) / 2\n    return (round(best_threshold, 4), round(max_info_gain, 4)) if best_threshold is not None else (None, 0.0)\nassert best_split([2, 3, 10, 19], [0, 0, 1, 1]) == (6.5, 1.0), \"failed on perfect 2-class separation\"\nassert best_split([1, 2, 3, 4], [0, 0, 0, 1]) == (3.5, 0.8113), \"failed on unbalanced classes\"\nassert best_split([1, 2, 3, 4], [0, 0, 0, 0]) == (None, 0.0), \"failed on pure node\"\nassert best_split([1, 2, 3, 4], [0, 1, 0, 1]) == (1.5, 0.3113), \"failed on symmetric classes\"\nassert best_split([1, 2, 5, 6], [0, 0, 1, 1]) == (3.5, 1.0), \"failed on separated clusters\"\nassert best_split([10, 20, 30], [0, 1, 1]) == (15.0, 0.9183), \"failed on small dataset\"\nassert best_split([1, 2], [0, 1]) == (1.5, 1.0), \"failed on two-point perfect split\"\nassert best_split([1, 2], [0, 0]) == (None, 0.0), \"failed on two identical labels\"\nassert best_split([1, 2, 3, 4, 5], [0, 0, 1, 1, 1]) == (2.5, 0.971), \"failed on 5-point uneven split\"\nassert best_split([3, 3, 3, 3], [0, 1, 0, 1]) == (None, 0.0), \"failed on identical feature values\""}
{"task_id": 286, "completion_id": 0, "passed": false, "result": "failed: Invalid initialization function.", "solution": "import random\nimport random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    if name in globals() and callable(globals()[name]):\n        return globals()[name]\n    else:\n        raise ValueError('Invalid initialization function.')\nname = 'ones_init'\nassert get_initializer('zeros_init')((2, 2)) == [[0.0, 0.0], [0.0, 0.0]], \"test case failed: zeros_init((2,2))\"\nassert get_initializer('ones_init')((1, 3)) == [[1.0, 1.0, 1.0]], \"test case failed: ones_init((1,3))\"\nassert get_initializer('zeros_init')((3, 1)) == [[0.0], [0.0], [0.0]], \"test case failed: zeros_init((3,1))\"\nassert get_initializer('ones_init')((2, 4)) == [[1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0]], \"test case failed: ones_init((2,4))\"\n_matrix = get_initializer('random_uniform_init')((2, 3)); assert len(_matrix) == 2 and all(len(r) == 3 for r in _matrix), \"test case failed: random_uniform_init shape (2,3)\"\n_matrix = get_initializer('random_uniform_init')((2, 3)); assert all(0.0 <= v <= 1.0 for r in _matrix for v in r), \"test case failed: random_uniform_init value range\"\n_matrix2 = get_initializer('random_uniform_init')((3, 1)); assert len(_matrix2) == 3 and len(_matrix2[0]) == 1, \"test case failed: random_uniform_init shape (3,1)\"\nassert get_initializer('zeros_init') is zeros_init, \"test case failed: object identity for zeros_init\"\nassert get_initializer('ones_init') is ones_init, \"test case failed: object identity for ones_init\"\nassert get_initializer('random_uniform_init') is random_uniform_init, \"test case failed: object identity for random_uniform_init\""}
{"task_id": 287, "completion_id": 0, "passed": false, "result": "failed: Cannot cast ufunc 'add' output from dtype('float64') to dtype('int64') with casting rule 'same_kind'", "solution": "import numpy as np\nimport numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    out_h = int((H - p_h) / s_h + 1)\n    out_w = int((W - p_w) / s_w + 1)\n    pooled_output = np.zeros((N, C, out_h, out_w))\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    window = X[n, c, i * s_h:i * s_h + p_h, j * s_w:j * s_w + p_w]\n                    pooled_output[n, c, i, j] = np.mean(window)\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    window_size = p_h * p_w\n                    grad_input[n, c, i * s_h:i * s_h + p_h, j * s_w:j * s_w + p_w] += accum_grad[n, c, i, j] / window_size\n    pooled_output = pooled_output.round(4).tolist()\n    grad_input = grad_input.round(4).tolist()\n    return (pooled_output, grad_input)\nassert average_pool2d(np.array([[[[1, 2], [3, 4]]]]), (2, 2), (1, 1), np.array([[[[1]]]])) == ([[[[2.5]]]], [[[[0.25, 0.25], [0.25, 0.25]]]]), \"test case 1 failed: overlapping 2x2 window with unit gradient\"\nassert average_pool2d(np.array([[[[1, 2, 3], [4, 5, 6], [7, 8, 9]]]]), (2, 2), (1, 1), np.ones((1, 1, 2, 2))) == ([[[[3.0, 4.0], [6.0, 7.0]]]], [[[[0.25, 0.5, 0.25], [0.5, 1.0, 0.5], [0.25, 0.5, 0.25]]]]), \"test case 2 failed: 3x3 input with overlapping windows\"\nassert average_pool2d(np.array([[[[1, 2], [3, 4]], [[5, 6], [7, 8]]]]), (2, 2), (2, 2), np.ones((1, 2, 1, 1))) == ([[[[2.5]], [[6.5]]]], [[[[0.25, 0.25], [0.25, 0.25]], [[0.25, 0.25], [0.25, 0.25]]]]), \"test case 3 failed: 2 channels, non-overlapping windows\"\nassert average_pool2d(np.arange(32, dtype=float).reshape(2, 1, 4, 4), (2, 2), (2, 2), np.ones((2, 1, 2, 2))) == ([ [[[2.5, 4.5], [10.5, 12.5]]], [[[18.5, 20.5], [26.5, 28.5]]] ], [ [[[0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25]]], [[[0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.25, 0.25]]]]), \"test case 4 failed: batch size 2 with non-overlapping windows\"\nassert average_pool2d(np.array([[[[10, 20], [30, 40]]]]), (1, 1), (1, 1), np.ones((1, 1, 2, 2))) == ([[[[10.0, 20.0], [30.0, 40.0]]]], [[[[1.0, 1.0], [1.0, 1.0]]]]), \"test case 5 failed: pooling window 1x1 should be identity\"\nassert average_pool2d(np.array([[[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]]]), (2, 2), (2, 2), np.ones((1, 3, 1, 1))) == ([[[[2.5]], [[6.5]], [[10.5]]]], [[[[0.25, 0.25], [0.25, 0.25]], [[0.25, 0.25], [0.25, 0.25]], [[0.25, 0.25], [0.25, 0.25]]]]), \"test case 6 failed: three-channel input\"\nassert average_pool2d(np.array([[[[1, 2, 3], [4, 5, 6]]]]), (1, 3), (1, 3), np.ones((1, 1, 2, 1))) == ([[[[2.0], [5.0]]]], [[[[0.3333, 0.3333, 0.3333], [0.3333, 0.3333, 0.3333]]]]), \"test case 7 failed: pooling window covers full width\"\nassert average_pool2d(np.array([[[[1], [2], [3]]]]), (3, 1), (1, 1), np.ones((1, 1, 1, 1))) == ([[[[2.0]]]], [[[[0.3333], [0.3333], [0.3333]]]]), \"test case 8 failed: pooling window covers full height\"\nassert average_pool2d(np.array([[[[1, 2], [3, 4]]]]), (2, 2), (1, 1), np.array([[[[2]]]])) == ([[[[2.5]]]], [[[[0.5, 0.5], [0.5, 0.5]]]]), \"test case 9 failed: scaled gradient for single window\"\nassert average_pool2d(np.array([[[[1, 2, 3], [4, 5, 6], [7, 8, 9]]]]), (2, 2), (1, 1), np.array([[[[1, 2], [3, 4]]]])) == ([[[[3.0, 4.0], [6.0, 7.0]]]], [[[[0.25, 0.75, 0.5], [1.0, 2.5, 1.5], [0.75, 1.75, 1.0]]]]), \"test case 10 failed: non-uniform incoming gradient\""}
{"task_id": 290, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nfrom dataclasses import dataclass\nimport numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    TOL = 1e-08\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=TOL)\n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature:\n            return False\n        if not np.isclose(tree_a.threshold, tree_b.threshold, atol=TOL):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    return False\nassert compare_trees(Node(0, 5.0, Leaf(0), Leaf(1)), Node(0, 5.0, Leaf(0), Leaf(1))) is True, \"failed on identical shallow tree\"\nassert compare_trees(Node(0, 5.0, Leaf(0), Leaf(1)), Node(1, 5.0, Leaf(0), Leaf(1))) is False, \"failed on feature mismatch\"\nassert compare_trees(Node(0, 5.0, Leaf(0), Leaf(1)), Node(0, 5.0 + 1e-9, Leaf(0), Leaf(1))) is True, \"failed on near-equal thresholds\"\nassert compare_trees(Node(0, 5.0, Leaf(0), Leaf(1)), Node(0, 5.0 + 1e-4, Leaf(0), Leaf(1))) is False, \"failed on threshold mismatch\"\nassert compare_trees(Node(0, 1.0, Leaf(0), Leaf(1)), Node(0, 1.0, Node(1, 2.0, Leaf(0), Leaf(1)), Leaf(1))) is False, \"failed on structure mismatch\"\nassert compare_trees(Leaf(42), Leaf(42)) is True, \"failed on identical scalar leaves\"\nassert compare_trees(Leaf(42), Leaf(43)) is False, \"failed on unequal scalar leaves\"\nassert compare_trees(Leaf(np.array([1.0, 0.0])), Leaf(np.array([1.0, 0.0]))) is True, \"failed on identical array leaves\"\nassert compare_trees(Leaf(np.array([1.0, 0.0])), Leaf(np.array([0.0, 1.0]))) is False, \"failed on unequal array leaves\"\nassert compare_trees(Node(0, 0.0, Node(1, 2.2, Leaf(0), Leaf(1)), Node(2, -1.3, Leaf(1), Leaf(0))), Node(0, 0.0, Node(1, 2.2, Leaf(0), Leaf(1)), Node(2, -1.3, Leaf(1), Leaf(0)))) is True, \"failed on identical deep tree\""}
{"task_id": 292, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    parent1 = np.array(parent1)\n    parent2 = np.array(parent2)\n    if parent1.shape != parent2.shape:\n        return -1\n    child1 = np.hstack((parent1[:, :cutoff], parent2[:, cutoff:]))\n    child2 = np.hstack((parent2[:, :cutoff], parent1[:, cutoff:]))\n    child1 = child1.tolist()\n    child2 = child2.tolist()\n    return (child1, child2)\n# basic 3-column example\nassert single_point_crossover([[1,2,3],[4,5,6]], [[7,8,9],[10,11,12]], 2) == ( [[1,2,9],[4,5,12]], [[7,8,3],[10,11,6]] ), \"failed: cutoff 2 on 3-col parents\"\n# cutoff at 0 \u2013 swap all columns\nassert single_point_crossover([[1,2],[3,4]], [[5,6],[7,8]], 0) == ( [[5,6],[7,8]], [[1,2],[3,4]] ), \"failed: cutoff 0\"\n# cutoff equal to number of columns \u2013 no swap\nassert single_point_crossover([[1,2,3]], [[4,5,6]], 3) == ( [[1,2,3]], [[4,5,6]] ), \"failed: cutoff == n_cols\"\n# non-square, more columns than rows\nassert single_point_crossover([[1,2,3,4]], [[5,6,7,8]], 1) == ( [[1,6,7,8]], [[5,2,3,4]] ), \"failed: 1\u00d74 matrices, cutoff 1\"\n# two-row, two-column matrices, cutoff 1\nassert single_point_crossover([[1,2],[3,4]], [[5,6],[7,8]], 1) == ( [[1,6],[3,8]], [[5,2],[7,4]] ), \"failed: 2\u00d72, cutoff 1\"\n# unequal shapes \u21d2 \u20111\nassert single_point_crossover([[1,2,3]], [[4,5]], 1) == -1, \"failed: unequal shapes must return -1\"\n# negative cutoff \u21d2 treat as 0 (swap all)\nassert single_point_crossover([[1,2,3]], [[4,5,6]], -3) == ( [[4,5,6]], [[1,2,3]] ), \"failed: negative cutoff\"\n# cutoff beyond columns \u21d2 treat as n_cols (no swap)\nassert single_point_crossover([[1],[2]], [[3],[4]], 10) == ( [[1],[2]], [[3],[4]] ), \"failed: large cutoff\"\n# float matrices\nc1, c2 = single_point_crossover([[0.1,0.2,0.3],[0.4,0.5,0.6]], [[0.7,0.8,0.9],[1.0,1.1,1.2]], 1)\nassert c1 == [[0.1,0.8,0.9],[0.4,1.1,1.2]] and c2 == [[0.7,0.2,0.3],[1.0,0.5,0.6]], \"failed: float matrices\"\n# large matrix quick sanity\nm1 = [list(range(i, i+10)) for i in range(0,100,10)]\nm2 = [list(range(i+100, i+110)) for i in range(0,100,10)]\nchild1, child2 = single_point_crossover(m1, m2, 5)\nassert child1[0][:5] == m1[0][:5] and child1[0][5:] == m2[0][5:], \"failed: larger matrix crossover integrity\""}
{"task_id": 294, "completion_id": 0, "passed": false, "result": "failed: name '_build_graph' is not defined", "solution": "from typing import Any, Dict, List, Tuple\nfrom typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {vertex: [] for vertex in G['_V2I']}\n    for edges in G['_G']:\n        for edge in edges:\n            (source, target, weight) = edge\n            adj[source].append((target, weight))\n            if not G['is_directed']:\n                adj[target].append((source, weight))\n    for vertex in adj:\n        adj[vertex] = sorted(adj[vertex])\n    return adj\nassert to_networkx(_build_graph(False, [('A','B',3),('A','C',2),('B','C',4)])) == {'A':[('B',3),('C',2)],'B':[('A',3),('C',4)],'C':[('A',2),('B',4)]}, \"test case failed: simple undirected graph\"\nassert to_networkx(_build_graph(True, [('A','B',1),('B','C',2),('C','A',3)])) == {'A':[('B',1)],'B':[('C',2)],'C':[('A',3)]}, \"test case failed: directed cycle\"\nassert to_networkx(_build_graph(False, [('A','B',1),('B','A',1),('B','C',2),('C','B',2)])) == {'A':[('B',1)],'B':[('A',1),('C',2)],'C':[('B',2)]}, \"test case failed: duplicate undirected edges\"\nassert to_networkx(_build_graph(True, [('A','B',1),('A','B',1),('A','B',1)])) == {'A':[('B',1)],'B':[]}, \"test case failed: repeated directed edges\"\nassert to_networkx(_build_graph(False, [('A','A',5)])) == {'A':[('A',5)]}, \"test case failed: self-loop in undirected graph\"\nassert to_networkx(_build_graph(True, [('X','Y',-3)])) == {'X':[('Y',-3)],'Y':[]}, \"test case failed: negative weight\"\nassert to_networkx(_build_graph(False, [('A','B',1),('B','C',2),('C','D',3),('D','A',4)])) == {'A':[('B',1),('D',4)],'B':[('A',1),('C',2)],'C':[('B',2),('D',3)],'D':[('A',4),('C',3)]}, \"test case failed: larger undirected graph\"\nassert to_networkx(_build_graph(False, [('A','B',1.5),('B','C',2.25)])) == {'A':[('B',1.5)],'B':[('A',1.5),('C',2.25)],'C':[('B',2.25)]}, \"test case failed: float weights\"\nassert to_networkx({'is_directed':False,'_V2I':{},'_G':[]}) == {}, \"test case failed: empty graph\""}
{"task_id": 296, "completion_id": 0, "passed": false, "result": "failed: Failed on integer vector", "solution": "import numpy as np\nimport numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x)\n    return np.all(np.logical_or(x == 0, x == 1))\nassert is_binary(np.array([0, 1, 1, 0])) is True, \"Failed on integer vector\"\nassert is_binary(np.array([[0, 1], [1, 0]], dtype=bool)) is True, \"Failed on boolean matrix\"\nassert is_binary(np.array([0.0, 1.0])) is True, \"Failed on float vector\"\nassert is_binary(np.array([0, 2])) is False, \"Failed on non-binary value 2\"\nassert is_binary(np.array([-1, 0, 1])) is False, \"Failed on negative non-binary value\"\nassert is_binary(np.array([0, 1, 3])) is False, \"Failed on non-binary value 3\"\nassert is_binary(np.array([[0], [1], [0]])) is True, \"Failed on column vector\"\nassert is_binary(np.zeros((3, 4))) is True, \"Failed on all-zeros matrix\"\nassert is_binary(np.ones((2, 2))) is True, \"Failed on all-ones matrix\"\nassert is_binary(np.array([True, False, True])) is True, \"Failed on boolean vector\""}
{"task_id": 298, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nfrom collections import Counter, defaultdict\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    tokens = []\n    for sentence in corpus:\n        tokens.extend(sentence.split())\n    padded_tokens = []\n    if N > 1:\n        for sentence in corpus:\n            padded_tokens.extend(['<bol>'] * (N - 1) + sentence.split() + ['<eol>'])\n    else:\n        padded_tokens = tokens\n    ngram_counts = Counter(zip(*[padded_tokens[i:] for i in range(N)]))\n    prefix_counts = Counter(zip(*[padded_tokens[i:] for i in range(N - 1)]))\n    query_tokens = ['<bol>'] * (N - 1) + query.split() + ['<eol>'] if N > 1 else query.split()\n    log_prob = 0\n    for i in range(len(query_tokens) - N + 1):\n        ngram = tuple(query_tokens[i:i + N])\n        if ngram in ngram_counts:\n            prefix = tuple(query_tokens[i:i + N - 1])\n            prefix_count = prefix_counts[prefix] if N > 1 else len(tokens)\n            prob = ngram_counts[ngram] / prefix_count\n            if prob == 0:\n                return float('-inf')\n            log_prob += math.log(prob)\n        else:\n            return float('-inf')\n    return round(log_prob, 4)\nassert ngram_log_prob([\"a b a\", \"b a b\"], \"a b\", 1) == -1.3863, \"test case failed: unigram example\"\nassert ngram_log_prob([\"I love NLP\", \"I love AI\"], \"I love AI\", 2) == -0.6931, \"test case failed: bigram simple\"\nassert ngram_log_prob([\"hello world\"], \"hello world\", 2) == 0.0, \"test case failed: probability 1 for every bigram\"\nassert ngram_log_prob([\"a b c\", \"a b d\"], \"a b c\", 3) == -0.6931, \"test case failed: trigram with mixed counts\"\nassert ngram_log_prob([\"a b c\", \"a b d\"], \"a b e\", 3) == float('-inf'), \"test case failed: unseen trigram should be -inf\"\nassert ngram_log_prob([\"hello world\"], \"unknown\", 1) == float('-inf'), \"test case failed: unseen unigram should be -inf\"\nassert ngram_log_prob([\"red blue blue red\"], \"red\", 1) == -0.6931, \"test case failed: unigram single token\"\nassert ngram_log_prob([\"a a b\", \"a a a\"], \"a a\", 2) == -2.1203, \"test case failed: complex bigram counts\"\nassert ngram_log_prob([\"I love NLP\", \"I love AI\"], \"I love ML\", 2) == float('-inf'), \"test case failed: unknown bigram\"\nassert ngram_log_prob([\"cat sat\"], \"cat sat\", 2) == 0.0, \"test case failed: perfect bigram match\""}
{"task_id": 302, "completion_id": 0, "passed": false, "result": "failed: name 'X1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    dists = np.sqrt(((X[:, np.newaxis, :] - X) ** 2).sum(axis=-1))\n    W = 1 / (1 + dists)\n    np.fill_diagonal(W, 0)\n    D = np.diag(W.sum(axis=1))\n    L = D - W\n    (eigvals, eigvecs) = np.linalg.eigh(L)\n    E = eigvecs[:, :k]\n    E = E / np.linalg.norm(E, axis=0)\n    centroids = E[:k]\n    labels = np.zeros(X.shape[0], dtype=int)\n    for _ in range(100):\n        for i in range(X.shape[0]):\n            labels[i] = np.argmin(np.linalg.norm(centroids - E[i], axis=1))\n        new_centroids = np.empty((k, X.shape[1]))\n        for j in range(k):\n            new_centroids[j] = E[labels == j].mean(axis=0)\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    for j in range(k):\n        if np.all(labels != j):\n            labels[np.random.randint(X.shape[0])] = j\n    return labels.tolist()\nassert spectral_clustering(X1, 2) == [0, 0, 1, 1], \"test case failed: spectral_clustering(X1, 2)\"\nassert spectral_clustering(X2, 3) == [0, 1, 2, 0, 1, 2], \"test case failed: spectral_clustering(X2, 3)\"\nassert spectral_clustering(X3, 1) == [0] * 10, \"test case failed: spectral_clustering(X3, 1)\"\nassert spectral_clustering(X4, 1) == [0, 0, 0], \"test case failed: spectral_clustering(X4, 1)\"\nassert set(res5) == {0, 1} and res5.count(0) != 0 and res5.count(1) != 0, \"test case failed: spectral_clustering(X5, 2)\"\nassert set(labels6) == {0, 1, 2}, \"test case failed: spectral_clustering(X6, 3)\"\nassert set(labels7) == {0, 1}, \"test case failed: spectral_clustering(X7, 2)\"\nassert labels8 == list(range(5)), \"test case failed: spectral_clustering(X8, 5)\"\nassert spectral_clustering(X9, 2) == [0, 1], \"test case failed: spectral_clustering(X9, 2)\"\nassert set(labels10) <= {0, 1}, \"test case failed: spectral_clustering(X10, 2)\""}
{"task_id": 303, "completion_id": 0, "passed": false, "result": "failed: 'output1'", "solution": "\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    (prev_label, prev_mine) = params[max(ix - 1, 0)]\n    (curr_label, curr_mine) = params[ix]\n    return f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\n\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\nMine [{curr_label}]:\\n{curr_mine}\\n\\nTheirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n----------------------- END DEBUG -----------------------'\nassert err_fmt([('output1','case1'),('output2','case2'),('output3','case3')], {'case1':'expected1','case2':'expected2','case3':'expected3'}, 1, '\\nWarning: mismatch detected.') == '------------------------- DEBUG -------------------------\\nMine (prev) [case1]:\\noutput1\\n\\nTheirs (prev) [case1]:\\nexpected1\\n\\nMine [case2]:\\noutput2\\n\\nTheirs [case2]:\\nexpected2\\nWarning: mismatch detected.\\n----------------------- END DEBUG -----------------------', \"test case failed: basic example\"\nassert err_fmt([('val','test')], {'test':'expected'}, 0) == '------------------------- DEBUG -------------------------\\nMine (prev) [test]:\\nval\\n\\nTheirs (prev) [test]:\\nexpected\\n\\nMine [test]:\\nval\\n\\nTheirs [test]:\\nexpected\\n----------------------- END DEBUG -----------------------', \"test case failed: single element\"\nassert err_fmt([('mine1','A'),('mine2','B')], {'A':'goldA','B':'goldB'}, 0, 'WARNING') == '------------------------- DEBUG -------------------------\\nMine (prev) [A]:\\nmine1\\n\\nTheirs (prev) [A]:\\ngoldA\\n\\nMine [A]:\\nmine1\\n\\nTheirs [A]:\\ngoldAWARNING\\n----------------------- END DEBUG -----------------------', \"test case failed: ix=0 with warn_str w/o newline\"\nassert err_fmt([('m1','id1'),('m2','id2'),('m3','id3'),('m4','id4')], {'id1':'g1','id2':'g2','id3':'g3','id4':'g4'}, 2) == '------------------------- DEBUG -------------------------\\nMine (prev) [id2]:\\nm2\\n\\nTheirs (prev) [id2]:\\ng2\\n\\nMine [id3]:\\nm3\\n\\nTheirs [id3]:\\ng3\\n----------------------- END DEBUG -----------------------', \"test case failed: middle element of longer list\"\nassert err_fmt([('foo','L1'),('bar','L2')], {'L1':'ref1','L2':'ref2'}, 1, '\\nNote: difference') == '------------------------- DEBUG -------------------------\\nMine (prev) [L1]:\\nfoo\\n\\nTheirs (prev) [L1]:\\nref1\\n\\nMine [L2]:\\nbar\\n\\nTheirs [L2]:\\nref2\\nNote: difference\\n----------------------- END DEBUG -----------------------', \"test case failed: warn_str starting with newline\"\nassert err_fmt([('x','key')], {'key':'y'}, 0, ' check') == '------------------------- DEBUG -------------------------\\nMine (prev) [key]:\\nx\\n\\nTheirs (prev) [key]:\\ny\\n\\nMine [key]:\\nx\\n\\nTheirs [key]:\\ny check\\n----------------------- END DEBUG -----------------------', \"test case failed: warn_str starting with space\"\nassert err_fmt([('one','first'),('two','second')], {'first':'uno','second':'dos'}, 1) == '------------------------- DEBUG -------------------------\\nMine (prev) [first]:\\none\\n\\nTheirs (prev) [first]:\\nuno\\n\\nMine [second]:\\ntwo\\n\\nTheirs [second]:\\ndos\\n----------------------- END DEBUG -----------------------', \"test case failed: two element ix=1\"\nassert err_fmt([('line1\\nline2','A'),('out2','B')], {'A':'exp\\nOk','B':'good'}, 1) == '------------------------- DEBUG -------------------------\\nMine (prev) [A]:\\nline1\\nline2\\n\\nTheirs (prev) [A]:\\nexp\\nOk\\n\\nMine [B]:\\nout2\\n\\nTheirs [B]:\\ngood\\n----------------------- END DEBUG -----------------------', \"test case failed: multiline mine/gold\"\nassert err_fmt([('a','1'),('b','2'),('c','3'),('d','4')], {'1':'A','2':'B','3':'C','4':'D'}, 3, '\\n--error--') == '------------------------- DEBUG -------------------------\\nMine (prev) [3]:\\nc\\n\\nTheirs (prev) [3]:\\nC\\n\\nMine [4]:\\nd\\n\\nTheirs [4]:\\nD\\n--error--\\n----------------------- END DEBUG -----------------------', \"test case failed: last element with warn\"\nassert err_fmt([('123','abc')], {'abc':'xyz'}, 0, '\\n!') == '------------------------- DEBUG -------------------------\\nMine (prev) [abc]:\\n123\\n\\nTheirs (prev) [abc]:\\nxyz\\n\\nMine [abc]:\\n123\\n\\nTheirs [abc]:\\nxyz\\n!\\n----------------------- END DEBUG -----------------------', \"test case failed: newline warn on single element\""}
{"task_id": 304, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nfrom typing import Union\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu: Union[float, np.ndarray]=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    if fit_intercept:\n        X = np.insert(X, 0, 1, axis=1)\n    (N, M) = X.shape\n    if V is None:\n        V = np.eye(M)\n    elif np.isscalar(V):\n        V *= np.eye(M)\n    elif isinstance(V, (list, tuple)):\n        V = np.diag(V)\n    if np.isscalar(mu):\n        mu = np.full(M, mu)\n    V_inv = np.linalg.inv(V)\n    Sigma_b = np.linalg.inv(V_inv + X.T @ X)\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    return [round(coef, 4) for coef in mu_b]\nassert bayesian_posterior_mean(np.array([[1.0],[2.0],[3.0]]), np.array([2.0,4.0,6.0])) == [0.5, 1.6667], \"test case 1 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[2.0]]), np.array([3.0,5.0])) == [1.0, 1.6667], \"test case 2 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[1.0]]), np.array([2.0,2.0])) == [0.8, 0.8], \"test case 3 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[2.0],[3.0]]), np.array([2.0,4.0,6.0]), fit_intercept=False) == [1.8667], \"test case 4 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[2.0]]), np.array([3.0,3.0]), V=[2,2]) == [1.2632, 0.9474], \"test case 5 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[1.0]]), np.array([2.0,2.0]), mu=1.0) == [1.0, 1.0], \"test case 6 failed\"\nassert bayesian_posterior_mean(np.array([[2.0],[4.0],[6.0]]), np.array([1.0,2.0,3.0]), V=2, fit_intercept=False) == [0.4956], \"test case 7 failed\"\nassert bayesian_posterior_mean(np.array([[0.0],[1.0]]), np.array([1.0,2.0]), fit_intercept=False) == [1.0], \"test case 8 failed\"\nassert bayesian_posterior_mean(np.array([[0.0]]), np.array([0.0]), mu=10.0, fit_intercept=False) == [10.0], \"test case 9 failed\"\nassert bayesian_posterior_mean(np.array([[1.0],[2.0],[3.0],[4.0]]), np.array([1.0,2.0,3.0,4.0]), V=[1,1000]) == [0.0002, 0.9999], \"test case 10 failed\""}
{"task_id": 308, "completion_id": 0, "passed": false, "result": "failed: filters must be distinct in mel_filterbank(128,20,44100)", "solution": "import numpy as np\nimport numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs // 2\n    mel_min = 2595 * np.log10(1 + min_freq / 700)\n    mel_max = 2595 * np.log10(1 + max_freq / 700)\n    mels = np.linspace(mel_min, mel_max, n_filters + 2)\n    freqs = 700 * (10 ** (mels / 2595) - 1)\n    bin_freqs = np.floor((N + 1) * freqs / fs).astype(int)\n    F = np.zeros((n_filters, N // 2 + 1))\n    for i in range(n_filters):\n        left_slope = (bin_freqs[i + 1] - bin_freqs[i]) / (freqs[i + 1] - freqs[i])\n        right_slope = (bin_freqs[i + 2] - bin_freqs[i + 1]) / (freqs[i + 2] - freqs[i + 1])\n        for k in range(bin_freqs[i], bin_freqs[i + 1]):\n            F[i, k] = (k - bin_freqs[i]) * left_slope\n        for k in range(bin_freqs[i + 1], bin_freqs[i + 2]):\n            F[i, k] = (bin_freqs[i + 2] - k) * right_slope\n        if normalize:\n            F[i, :] = 2 / (freqs[i + 2] - freqs[i]) * F[i, :]\n    return F.tolist()\nimport numpy as np\n\nfb = mel_filterbank(16, 6, 16000)\nassert (len(fb), len(fb[0])) == (6, 16//2 + 1), \"shape mismatch for mel_filterbank(16,6,16000)\"\nimport numpy as np\n\nfb = mel_filterbank(1024, 40, 22050)\nassert all(0.0 <= w <= 1.0 for row in fb for w in row), \"weights out of range in mel_filterbank(1024,40,22050)\"\nimport numpy as np\n\nfb = mel_filterbank(32, 10, 16000, min_freq=300, max_freq=6000)\nassert fb[0][0] == 0.0 and fb[-1][-1] == 0.0, \"edge bins should be zero for out-of-band frequencies\"\nimport numpy as np\n\nfb1 = mel_filterbank(512, 26, 16000)\nfb2 = mel_filterbank(512, 26, 16000)\nassert fb1 == fb2, \"function must be deterministic for identical parameters\"\nimport numpy as np\n\nfb = mel_filterbank(64, 5, 8000)\n# every filter must have non-zero values somewhere\nassert all(any(v > 0.0 for v in row) for row in fb), \"empty filter detected in mel_filterbank(64,5,8000)\"\nimport numpy as np\n\nfb = mel_filterbank(8, 3, 8000)\n# with normalization the maximum value must be below 1\nassert max(max(r) for r in fb) < 1.0, \"filters are not normalized when normalize=True\"\nimport numpy as np\n\nfb = mel_filterbank(128, 20, 44100)\nassert len({tuple(row) for row in fb}) == 20, \"filters must be distinct in mel_filterbank(128,20,44100)\""}
{"task_id": 312, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n    N = window_len - 1 if symmetric else window_len\n    n = np.arange(window_len)\n    window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    return np.round(window, 4).tolist()\nassert blackman_harris(5, True) == [0.0001, 0.2175, 1.0, 0.2175, 0.0001], \"failed: blackman_harris(5, True)\"\nassert blackman_harris(1, True) == [1.0], \"failed: blackman_harris(1, True)\"\nassert blackman_harris(0, True) == [], \"failed: blackman_harris(0, True)\"\nassert len(blackman_harris(128)) == 128, \"failed length: blackman_harris(128)\"\nassert blackman_harris(2, True)[0] == blackman_harris(2, True)[1], \"failed symmetry: blackman_harris(2, True)\"\nassert blackman_harris(10, True)[0] == blackman_harris(10, True)[-1], \"failed symmetry ends: blackman_harris(10, True)\""}
{"task_id": 313, "completion_id": 0, "passed": true, "result": "passed", "solution": "import math\nimport numpy as np\nimport math\nimport numpy as np\ndef digamma(x):\n    \"\"\"Compute the digamma (psi) function for a given value.\n\n    If x is smaller than 6, use the recursion formula. For larger x, use the\n    asymptotic expansion formula.\n\n    Parameters\n    ----------\n    x : float\n        The input value for the digamma function.\n\n    Returns\n    -------\n    float\n        The value of the digamma function at x.\n    \"\"\"\n    result = 0\n    while x < 6:\n        result -= 1 / x\n        x += 1\n    result += math.log(x) - 1 / (2 * x) - 1 / (12 * x ** 2) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\n    return result\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    gamma = np.array(gamma)\n    expectation = digamma(gamma[d, t]) - digamma(np.sum(gamma[d, :]))\n    expectation = round(expectation, 4)\n    return expectation\nassert expected_log_dirichlet([[1,1]],0,0) == -1.0, \"failed: gamma=[[1,1]], d=0, t=0\"\nassert expected_log_dirichlet([[2,3]],0,1) == -0.5833, \"failed: gamma=[[2,3]], d=0, t=1\"\nassert expected_log_dirichlet([[4,5,6],[1,1,1]],0,2) == -0.9682, \"failed: gamma=[[4,5,6],[1,1,1]], d=0, t=2\"\nassert expected_log_dirichlet([[4,1,1]],0,0) == -0.45, \"failed: gamma=[[4,1,1]], d=0, t=0\"\nassert expected_log_dirichlet([[3,7]],0,1) == -0.379, \"failed: gamma=[[3,7]], d=0, t=1\"\nassert expected_log_dirichlet([[10,10,10]],0,2) == -1.1327, \"failed: gamma=[[10,10,10]], d=0, t=2\"\nassert expected_log_dirichlet([[8,1,1]],0,0) == -0.2361, \"failed: gamma=[[8,1,1]], d=0, t=0\"\nassert expected_log_dirichlet([[1,1,1,1]],0,3) == -1.8333, \"failed: gamma=[[1,1,1,1]], d=0, t=3\"\nassert expected_log_dirichlet([[1,2,1]],0,1) == -0.8333, \"failed: gamma=[[1,2,1]], d=0, t=1\"\nassert expected_log_dirichlet([[2,2,2,2,2]],0,2) == -1.829, \"failed: gamma=[[2,2,2,2,2]], d=0, t=2\""}
{"task_id": 317, "completion_id": 0, "passed": false, "result": "failed: test case failed: basic two-element list, ix=1", "solution": "from typing import List, Tuple, Dict\nfrom typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_prediction, prev_label) = params[prev_ix]\n    prev_gold = golds[prev_label]\n    (curr_prediction, curr_label) = params[ix]\n    curr_gold = golds[curr_label]\n    return f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\nMine [{curr_label}]:\\n{curr_prediction}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------\\n'\nassert err_fmt([(\"cat\",\"A\"),(\"dog\",\"B\")],{\"A\":\"feline\",\"B\":\"canine\"},1) == \"------------------------- DEBUG -------------------------\\nMine (prev) [A]:\\ncat\\n\\nTheirs (prev) [A]:\\nfeline\\n\\nMine [B]:\\ndog\\n\\nTheirs [B]:\\ncanine\\n----------------------- END DEBUG -----------------------\", \"test case failed: basic two-element list, ix=1\"\nassert err_fmt([(\"hi\",\"g\")],{\"g\":\"hello\"},0) == \"------------------------- DEBUG -------------------------\\nMine (prev) [g]:\\nhi\\n\\nTheirs (prev) [g]:\\nhello\\n\\nMine [g]:\\nhi\\n\\nTheirs [g]:\\nhello\\n----------------------- END DEBUG -----------------------\", \"test case failed: single element\"\nassert err_fmt([(\"v1\",\"L1\"),(\"v2\",\"L2\"),(\"v3\",\"L3\")],{\"L1\":\"t1\",\"L2\":\"t2\",\"L3\":\"t3\"},2,\" -- mismatch\") == \"------------------------- DEBUG -------------------------\\nMine (prev) [L2]:\\nv2\\n\\nTheirs (prev) [L2]:\\nt2\\n\\nMine [L3]:\\nv3\\n\\nTheirs [L3]:\\nt3 -- mismatch\\n----------------------- END DEBUG -----------------------\", \"test case failed: three elements, last index\"\nassert err_fmt([(\"v1\",\"L1\"),(\"v2\",\"L2\"),(\"v3\",\"L3\")],{\"L1\":\"t1\",\"L2\":\"t2\",\"L3\":\"t3\"},1) == \"------------------------- DEBUG -------------------------\\nMine (prev) [L1]:\\nv1\\n\\nTheirs (prev) [L1]:\\nt1\\n\\nMine [L2]:\\nv2\\n\\nTheirs [L2]:\\nt2\\n----------------------- END DEBUG -----------------------\", \"test case failed: middle index\"\nassert err_fmt([(\"x\",\"X\"),(\"y\",\"Y\")],{\"X\":\"alpha\",\"Y\":\"beta\"},0) == \"------------------------- DEBUG -------------------------\\nMine (prev) [X]:\\nx\\n\\nTheirs (prev) [X]:\\nalpha\\n\\nMine [X]:\\nx\\n\\nTheirs [X]:\\nalpha\\n----------------------- END DEBUG -----------------------\", \"test case failed: duplicate first idx\"\nassert err_fmt([(\"p\",\"a\"),(\"q\",\"b\")],{\"a\":\"A\",\"b\":\"B\"},1,\" !!!\") == \"------------------------- DEBUG -------------------------\\nMine (prev) [a]:\\np\\n\\nTheirs (prev) [a]:\\nA\\n\\nMine [b]:\\nq\\n\\nTheirs [b]:\\nB !!!\\n----------------------- END DEBUG -----------------------\", \"test case failed: warn_str appended\"\nassert err_fmt([(\"first\",\"1\"),(\"second\",\"2\"),(\"third\",\"3\")],{\"1\":\"I\",\"2\":\"II\",\"3\":\"III\"},0) == \"------------------------- DEBUG -------------------------\\nMine (prev) [1]:\\nfirst\\n\\nTheirs (prev) [1]:\\nI\\n\\nMine [1]:\\nfirst\\n\\nTheirs [1]:\\nI\\n----------------------- END DEBUG -----------------------\", \"test case failed: multi-element, ix=0\"\nassert err_fmt([(\"A\",\"A\"),(\"B\",\"B\"),(\"C\",\"C\"),(\"D\",\"D\")],{\"A\":\"a\",\"B\":\"b\",\"C\":\"c\",\"D\":\"d\"},3) == \"------------------------- DEBUG -------------------------\\nMine (prev) [C]:\\nC\\n\\nTheirs (prev) [C]:\\nc\\n\\nMine [D]:\\nD\\n\\nTheirs [D]:\\nd\\n----------------------- END DEBUG -----------------------\", \"test case failed: four elements, last index\"\nassert err_fmt([(\"only\",\"one\")],{\"one\":\"1\"},0,\" <end>\") == \"------------------------- DEBUG -------------------------\\nMine (prev) [one]:\\nonly\\n\\nTheirs (prev) [one]:\\n1\\n\\nMine [one]:\\nonly\\n\\nTheirs [one]:\\n1 <end>\\n----------------------- END DEBUG -----------------------\", \"test case failed: single element with warn_str\""}
{"task_id": 318, "completion_id": 0, "passed": false, "result": "failed: failed on simple 1-D split", "solution": "import math\nimport numpy as np\nimport math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    w = np.full(n_samples, 1 / n_samples)\n    alphas = []\n    classifiers = []\n    for _ in range(n_estimators):\n        e_m = n_samples\n        (best_i, best_j, best_p, best_t) = (None, None, None, None)\n        for i in range(n_features):\n            for j in range(n_samples):\n                for p in [-1, 1]:\n                    t = X_train[j, i]\n                    prediction = p * np.sign(X_train[:, i] - t)\n                    misclassified = w[prediction != y_train].sum()\n                    if misclassified < e_m:\n                        e_m = misclassified\n                        (best_i, best_j, best_p, best_t) = (i, j, p, t)\n        alpha = 0.5 * math.log((1 - e_m) / e_m)\n        predictions = best_p * np.sign(X_train[:, best_i] - best_t)\n        w *= np.exp(-alpha * y_train * predictions)\n        w /= w.sum()\n        alphas.append(alpha)\n        classifiers.append((best_i, best_p, best_t))\n    final_predictions = np.zeros(X_test.shape[0])\n    for ((i, p, t), alpha) in zip(classifiers, alphas):\n        final_predictions += alpha * p * np.sign(X_test[:, i] - t)\n    return [int(np.sign(p)) for p in final_predictions]\nassert adaboost_predict(np.array([[-2],[-1],[-0.5],[0.5],[1],[2]]), np.array([-1,-1,-1,1,1,1]), np.array([[-1.5],[-0.3],[1.5]]), 5) == [-1,-1,1], \"failed on simple 1-D split\"\nassert adaboost_predict(np.array([[1,1],[1,2],[1,3],[-1,1],[-1,2],[-1,3]]), np.array([1,1,1,-1,-1,-1]), np.array([[1,2],[-1,2],[0,1]]), 5) == [1,-1,-1], \"failed on horizontal vs vertical split\"\nassert adaboost_predict(np.array([[0,5],[0,6],[0,-5],[0,-6]]), np.array([-1,-1,1,1]), np.array([[0,10],[0,-10]]), 5) == [-1,1], \"failed on feature-2 split\"\nassert adaboost_predict(np.array([[-3],[ -2],[-1],[ 1],[ 2],[ 3]]), np.array([-1,-1,-1,1,1,1]), np.array([[-4],[-0.2],[0.2],[4]]), 3) == [-1,-1,1,1], \"failed on wider range\"\nassert adaboost_predict(np.array([[2,2],[3,3],[-2,-2],[-3,-3]]), np.array([1,1,-1,-1]), np.array([[1.5,1.5],[-1.5,-1.5]]), 10) == [1,-1], \"failed on diagonal clusters\"\nassert adaboost_predict(np.array([[1,0],[2,0],[3,0],[-1,0],[-2,0],[-3,0]]), np.array([1,1,1,-1,-1,-1]), np.array([[0.5,0],[-0.5,0]]), 4) == [1,-1], \"failed on feature-0 split\"\nassert adaboost_predict(np.array([[0,1],[0,2],[0,3],[0,-1],[0,-2],[0,-3]]), np.array([1,1,1,-1,-1,-1]), np.array([[0,0.5],[0,-0.5]]), 4) == [1,-1], \"failed on feature-1 split\"\nassert adaboost_predict(np.array([[1],[2],[3],[4],[-1],[-2],[-3],[-4]]), np.array([1,1,1,1,-1,-1,-1,-1]), np.array([[5],[-5]]), 6) == [1,-1], \"failed on extended 1-D\"\nassert adaboost_predict(np.array([[1,2],[2,3],[3,4],[-1,-2],[-2,-3],[-3,-4]]), np.array([1,1,1,-1,-1,-1]), np.array([[0,0],[4,5],[-4,-5]]), 6) == [-1,1,-1], \"failed on 2-D linear split\"\nassert adaboost_predict(np.array([[0.1],[0.2],[0.3],[-0.1],[-0.2],[-0.3]]), np.array([1,1,1,-1,-1,-1]), np.array([[0.15],[-0.15]]), 5) == [1,-1], \"failed on small decimal values\""}
{"task_id": 329, "completion_id": 0, "passed": false, "result": "failed: test case failed: dft_bins(8, 8000, False)", "solution": "import numpy as np\nimport numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    if positive_only:\n        k = np.arange(N // 2 + 1)\n    else:\n        k = np.arange(-N // 2, N // 2 + 1)\n    f = k * fs / N\n    return np.round(f, 4).tolist()\nassert dft_bins(8, 8000, True) == [0.0, 1000.0, 2000.0, 3000.0, 4000.0], \"test case failed: dft_bins(8, 8000, True)\"\nassert dft_bins(8, 8000, False) == [0.0, 1000.0, 2000.0, 3000.0, -4000.0, -3000.0, -2000.0, -1000.0], \"test case failed: dft_bins(8, 8000, False)\"\nassert dft_bins(5, 10000, True) == [0.0, 2000.0, 4000.0], \"test case failed: dft_bins(5, 10000, True)\"\nassert dft_bins(5, 10000, False) == [0.0, 2000.0, 4000.0, -4000.0, -2000.0], \"test case failed: dft_bins(5, 10000, False)\"\nassert dft_bins(1, 48000, True) == [0.0], \"test case failed: dft_bins(1, 48000, True)\"\nassert dft_bins(2, 48000, False) == [0.0, -24000.0], \"test case failed: dft_bins(2, 48000, False)\"\nassert dft_bins(16, 16000, True) == [0.0, 1000.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0], \"test case failed: dft_bins(16, 16000, True)\"\nassert dft_bins(16, 16000, False) == [0.0, 1000.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, -8000.0, -7000.0, -6000.0, -5000.0, -4000.0, -3000.0, -2000.0, -1000.0], \"test case failed: dft_bins(16, 16000, False)\"\nassert dft_bins(9, 9000, True) == [0.0, 1000.0, 2000.0, 3000.0, 4000.0], \"test case failed: dft_bins(9, 9000, True)\"\nassert dft_bins(3, 3000, False) == [0.0, 1000.0, -1000.0], \"test case failed: dft_bins(3, 3000, False)\""}
{"task_id": 331, "completion_id": 0, "passed": false, "result": "failed: test case 9 failed", "solution": "import numpy as np\nimport numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask, dtype=bool)\n    avg_preds = np.sum(predictions * oob_mask, axis=1) / np.sum(oob_mask, axis=1)\n    squared_errors = np.square(avg_preds - y_true)\n    oob_mse = np.mean(squared_errors[np.sum(oob_mask, axis=1) > 0])\n    return round(oob_mse, 4)\nassert oob_mse([3, 5, 2, 7], [[2.5, 3.2], [4.8, 5.1], [2.1, 2.5], [6.5, 7.2]], [[True, False], [False, True], [True, True], [False, False]]) == 0.1167, \"test case 1 failed\"\nassert oob_mse([1, 2, 3], [[1.1, 0.9, 1.05], [2.5, 2.0, 2.0], [3.1, 3.2, 2.9]], [[True, False, True], [False, False, True], [True, True, True]]) == 0.0034, \"test case 2 failed\"\nassert oob_mse([4, 5], [[4.1, 3.9], [5.2, 4.8]], [[True, True], [True, True]]) == 0.0, \"test case 3 failed\"\nassert oob_mse([10, 20, 30], [[9, 11], [18, 19], [31, 29]], [[False, True], [False, False], [False, False]]) == 1.0, \"test case 4 failed\"\nassert oob_mse([0, 1, 2, 3, 4], [[0.2, -0.1, 0.1], [0.8, 1.2, 1.0], [1.9, 2.2, 2.1], [2.5, 3.5, 3.1], [3.9, 4.2, 4.0]], [[True, True, True], [False, True, False], [True, False, False], [False, False, False], [False, True, True]]) == 0.0161, \"test case 5 failed\"\nassert oob_mse([-1, -2], [[-0.8, -1.2], [-2.1, -1.9]], [[1, 0], [0, 1]]) == 0.025, \"test case 6 failed\"\nassert oob_mse([5], [[4.9, 5.1, 5.0]], [[0, 0, 1]]) == 0.0, \"test case 7 failed\"\nassert oob_mse([10, 20, 30, 40], [[10.1, 9.8, 10.3, 10.0], [19.5, 20.2, 21.0, 19.9], [31.5, 29.0, 30.2, 30.0], [39.8, 40.3, 40.2, 39.9]], [[1, 1, 1, 1], [0, 1, 1, 0], [1, 0, 1, 0], [0, 0, 0, 0]]) == 0.3617, \"test case 8 failed\"\nassert oob_mse([1, 2], [[1.1, 0.9], [2.1, 1.8]], [[0, 0], [0, 0]]) == -1.0, \"test case 9 failed\"\nassert oob_mse([0, 0, 0], [[0, 0], [0, 0], [0, 0]], [[1, 1], [1, 1], [1, 1]]) == 0.0, \"test case 10 failed\""}
{"task_id": 332, "completion_id": 0, "passed": true, "result": "passed", "solution": "from collections import Counter\nfrom collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    item_support = Counter()\n    for transaction in transactions:\n        items = set(transaction)\n        item_support.update(items)\n    frequent_items = {item for (item, support) in item_support.items() if support >= min_support}\n    frequent_items = sorted(frequent_items, key=lambda item: (-item_support[item], item))\n    root = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        transaction = [item for item in frequent_items if item in transaction]\n        node = root\n        for item in transaction:\n            if item in node['children']:\n                node = node['children'][item]\n                node['support'] += 1\n            else:\n                node['children'][item] = {'support': 1, 'children': {}}\n                node = node['children'][item]\n    return root\nassert build_fp_tree([['a','b','c'], ['a','b'], ['a','c']], 2) == {'support': 0, 'children': {'a': {'support': 3, 'children': {'b': {'support': 2, 'children': {'c': {'support': 1, 'children': {}}}}, 'c': {'support': 1, 'children': {}}}}}}, \"TC1 failed\"\nassert build_fp_tree([['a','b'], ['b','c']], 3) == {'support': 0, 'children': {}}, \"TC2 failed\"\nassert build_fp_tree([['x','y','z']], 1) == {'support': 0, 'children': {'x': {'support': 1, 'children': {'y': {'support': 1, 'children': {'z': {'support': 1, 'children': {}}}}}}}}, \"TC3 failed\"\nassert build_fp_tree([['1','2'], ['2','3'], ['2','4']], 2) == {'support': 0, 'children': {'2': {'support': 3, 'children': {}}}}, \"TC4 failed\"\nassert build_fp_tree([['a'], ['b']], 1) == {'support': 0, 'children': {'a': {'support': 1, 'children': {}}, 'b': {'support': 1, 'children': {}}}}, \"TC5 failed\"\nassert build_fp_tree([['d','c','b','a'], ['a','b','c','d']], 1) == {'support': 0, 'children': {'a': {'support': 2, 'children': {'b': {'support': 2, 'children': {'c': {'support': 2, 'children': {'d': {'support': 2, 'children': {}}}}}}}}}}, \"TC6 failed\"\nassert build_fp_tree([['a','a','b'], ['a','b','b','a'], ['b','b','c']], 2) == {'support': 0, 'children': {'b': {'support': 3, 'children': {'a': {'support': 2, 'children': {}}}}}}, \"TC7 failed\"\nassert build_fp_tree([['x','y']] * 4, 2) == {'support': 0, 'children': {'x': {'support': 4, 'children': {'y': {'support': 4, 'children': {}}}}}}, \"TC8 failed\"\nassert build_fp_tree([[], ['a']], 1) == {'support': 0, 'children': {'a': {'support': 1, 'children': {}}}}, \"TC9 failed\"\nassert build_fp_tree([['c'], ['b'], ['a']], 1) == {'support': 0, 'children': {'a': {'support': 1, 'children': {}}, 'b': {'support': 1, 'children': {}}, 'c': {'support': 1, 'children': {}}}}, \"TC10 failed\""}
{"task_id": 336, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.GenericAlias' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    if Y is None:\n        Y = X\n    X = np.array(X)\n    Y = np.array(Y)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    K = np.dot(X, Y.T) + c0\n    return [list(map(lambda x: round(x.item(), 4), row)) for row in K.tolist()]\nassert linear_kernel([[1, 2, 3], [4, 5, 6]], [[7, 8, 9]], 0) == [[50.0], [122.0]], \"failed on basic example\"\nassert linear_kernel([[1, 2, 3]], None, 1) == [[15.0]], \"failed when Y is None\"\nassert linear_kernel([[0, 0], [0, 0]], [[1, 2], [3, 4]], 0) == [[0.0, 0.0], [0.0, 0.0]], \"failed on zero vectors\"\nassert linear_kernel([[1, 2]], [[3, 4, 5]], 0) == -1, \"failed on mismatched dimensions\"\nassert linear_kernel([[1, 0], [0, 1]], None, 0) == [[1.0, 0.0], [0.0, 1.0]], \"failed on identity check\"\nassert linear_kernel([[-1, -2], [3, 4]], [[5, 6], [-7, -8]], 2) == [[-15.0, 25.0], [41.0, -51.0]], \"failed on negative and positive mix\"\nimport numpy as np\narrX = np.array([[1.5, 2.5]])\narrY = np.array([[3.5, 4.5]])\nassert linear_kernel(arrX, arrY, 0.5) == [[17.0]], \"failed on numpy array input\"\nassert linear_kernel([], [], 0) == [], \"failed on empty input\"\nassert linear_kernel([[1,2],[3,4],[5,6]], None, 0)[0][1] == 11.0, \"failed on symmetric property\"\nassert linear_kernel([[1,2,3]], [[4,5]], 0) == -1, \"failed on second mismatched dimension check\""}
{"task_id": 340, "completion_id": 0, "passed": false, "result": "failed: 'float' object has no attribute 'tolist'", "solution": "import numpy as np\nimport numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * np.square(grad)\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    updated_param = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    return (updated_param.tolist(), m.tolist(), v.tolist())\nparam = np.array([1, 2, 3])\ngrad = np.array([0.1, 0.2, 0.3])\nt = 1\nm = np.array([0.0, 0.0, 0.0])\nv = np.array([0.0, 0.0, 0.0])\nassert np.allclose(adam_update(np.array([0.1, -0.2]), np.array([0.01, -0.01]), 1, np.array([0., 0.]), np.array([0., 0.]))[0], [0.099, -0.199]), \"test case failed: basic 2-D example\"\nassert np.allclose(adam_update(np.array([0.099, -0.199]), np.array([0.02, -0.02]), 2, np.array([0.001, -0.001]), np.array([1e-07, 1e-07]))[0], [0.09803483, -0.19803483]), \"test case failed: second step parameters\"\nassert np.allclose(adam_update(1.0, 0.1, 1, 0.0, 0.0)[0], [0.999]), \"test case failed: scalar positive grad\"\nassert np.allclose(adam_update(np.array([0.5, -1.2, 0.0]), np.array([-0.05, 0.03, 0.0]), 1, np.zeros(3), np.zeros(3))[0], [0.501, -1.201, 0.0]), \"test case failed: mixed sign 3-D\"\nassert np.allclose(adam_update(1.5, -0.3, 1, 0.0, 0.0)[0], [1.501]), \"test case failed: scalar negative grad\"\nassert np.allclose(adam_update(np.array([[0.1, 0.2], [0.3, 0.4]]), np.zeros((2, 2)), 1, np.zeros((2, 2)), np.zeros((2, 2)))[0], [[0.1, 0.2], [0.3, 0.4]]), \"test case failed: zero grad param change\"\nassert np.allclose(adam_update(0.999, 0.1, 2, np.array([0.01]), np.array([1e-05]))[0], [0.998]), \"test case failed: scalar step 2\"\nassert np.allclose(adam_update(0.2, 0.05, 100, 0.0, 0.0)[0], [0.1990242]), \"test case failed: large t\"\nassert np.allclose(adam_update(np.array([0.2, 0.4]), np.array([0.05, -0.05]), 1, np.zeros(2), np.zeros(2))[0], [0.199, 0.401]), \"test case failed: opposite grads 2-D\"\nassert np.allclose(adam_update(np.array([[1.0, -1.0], [-1.0, 1.0]]), np.full((2, 2), 0.1), 1, np.zeros((2, 2)), np.zeros((2, 2)))[0], [[0.999, -1.001], [-1.001, 0.999]]), \"test case failed: matrix param\""}
{"task_id": 343, "completion_id": 0, "passed": false, "result": "failed: failed when retaining single best sample", "solution": "import numpy as np\nimport numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    rewards = np.array(rewards)\n    N = theta_samples.shape[0]\n    num_retain = int(retain_prcnt * N)\n    best_indices = np.argsort(rewards)[-num_retain:]\n    best_samples = theta_samples[best_indices]\n    mean = np.mean(best_samples, axis=0)\n    variance = np.var(best_samples, axis=0)\n    mean = np.round(mean, 4).tolist()\n    variance = np.round(variance, 4).tolist()\n    return (mean, variance)\nassert cross_entropy_update(np.array([[1,2],[3,4],[5,6],[7,8],[9,10]]),[10,20,30,40,50],0.4) == ([8.0,9.0],[1.0,1.0]), \"failed on basic 2D example\"\nassert cross_entropy_update(np.array([[0,0],[1,1],[2,2],[3,3]]),[0.1,0.2,0.9,0.5],0.5) == ([2.5,2.5],[0.25,0.25]), \"failed on half retain\"\nassert cross_entropy_update(np.array([[1,1,1],[2,2,2],[3,3,3]]),[3,1,2],0.33) == ([1.0,1.0,1.0],[0.0,0.0,0.0]), \"failed when retaining single best sample\"\nassert cross_entropy_update(np.array([[4,5],[6,7]]),[7,2],1.0) == ([5.0,6.0],[1.0,1.0]), \"failed when retaining all samples\"\nassert cross_entropy_update(np.array([[1,2],[2,3],[3,4],[4,5],[5,6]]),[5,4,3,2,1],0.2)==([1.0,2.0],[0.0,0.0]), \"failed retain 20%\"\nassert cross_entropy_update(np.array([[2],[4],[6],[8]]),[1,2,3,4],0.5)==([7.0],[1.0]), \"failed single dimension example\"\nassert cross_entropy_update(np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]),[12,11,10,9],0.5)==([2.5,3.5,4.5],[2.25,2.25,2.25]), \"failed 3D half retain\"\nassert cross_entropy_update(np.array([[5,5],[5,5],[5,5]]),[1,2,3],0.34)==([5.0,5.0],[0.0,0.0]), \"failed identical theta values\""}
{"task_id": 353, "completion_id": 0, "passed": false, "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "solution": "import math\nfrom collections import Counter\nimport numpy as np\nimport math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    freq_dist = np.array(list(Counter(labels).values())) / len(labels)\n    return round(-np.sum(freq_dist * np.log2(freq_dist)), 5)\nassert entropy([0, 0, 1, 1, 1]) == 0.97095, \"failed: entropy([0, 0, 1, 1, 1])\"\nassert entropy([1, 1, 1, 1]) == 0.0, \"failed: entropy identical labels\"\nassert entropy([]) == 0.0, \"failed: entropy empty input\"\nassert entropy([0, 1]) == 1.0, \"failed: entropy([0,1])\"\nassert entropy(np.array([2, 2, 2, 3])) == 0.81128, \"failed: entropy numpy array\"\nassert entropy(['a', 'b', 'c', 'd']) == 2.0, \"failed: entropy([a,b,c,d])\"\nassert entropy([5]) == 0.0, \"failed: single element\"\nassert entropy([0,0,0,1,1,2,2,2,2]) == 1.53049, \"failed: multi-class\"\nassert entropy(range(8)) == 3.0, \"failed: entropy range(8)\""}
{"task_id": 354, "completion_id": 0, "passed": false, "result": "failed: slice step cannot be zero", "solution": "import numpy as np\nimport numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, _, out_ch) = W.shape\n    if pad == 'same':\n        out_rows = int(np.ceil(in_rows / stride))\n        out_cols = int(np.ceil(in_cols / stride))\n        pad_rows = max((out_rows - 1) * stride + dilation * (kernel_rows - 1) + 1 - in_rows, 0)\n        pad_cols = max((out_cols - 1) * stride + dilation * (kernel_cols - 1) + 1 - in_cols, 0)\n        pad_top = pad_bottom = pad_rows // 2\n        pad_left = pad_right = pad_cols // 2\n    elif isinstance(pad, int):\n        out_rows = int(np.ceil((in_rows + 2 * pad - dilation * (kernel_rows - 1) - 1) / stride)) + 1\n        out_cols = int(np.ceil((in_cols + 2 * pad - dilation * (kernel_cols - 1) - 1) / stride)) + 1\n        pad_top = pad_bottom = pad_left = pad_right = pad\n    else:\n        out_rows = int(np.ceil((in_rows + pad[0] + pad[1] - dilation * (kernel_rows - 1) - 1) / stride)) + 1\n        out_cols = int(np.ceil((in_cols + pad[2] + pad[3] - dilation * (kernel_cols - 1) - 1) / stride)) + 1\n        (pad_top, pad_bottom, pad_left, pad_right) = pad\n    X_pad = np.pad(X, ((0, 0), (pad_top, pad_bottom), (pad_left, pad_right), (0, 0)))\n    out = np.zeros((n_ex, out_rows, out_cols, out_ch))\n    for i in range(out_rows):\n        for j in range(out_cols):\n            h_start = i * stride\n            h_end = h_start + kernel_rows * dilation\n            w_start = j * stride\n            w_end = w_start + kernel_cols * dilation\n            X_slice = X_pad[:, h_start:h_end:dilation, w_start:w_end:dilation, :]\n            out[:, i, j, :] = np.tensordot(X_slice, W.reshape(-1, out_ch), axes=([1, 2, 3], [0]))\n    return out.tolist()\nassert conv2D(np.arange(1, 10, dtype=float).reshape(1,3,3,1), np.array([[[[1.]],[[0.]]],[[[0.]],[[-1.]]]]), 1, 0) == [[[[-4.0], [-4.0]], [[-4.0], [-4.0]]]], \"basic 3\u00d73 no-pad\"\nassert conv2D(np.array([[[[1.],[2.]],[[3.],[4.]]]]), np.ones((1,1,1,1)), 1, \"same\") == [[[ [1.0], [2.0] ], [ [3.0], [4.0] ]]], \"same pad identity\"\nassert conv2D(np.arange(1,17,dtype=float).reshape(1,4,4,1), np.ones((2,2,1,1)), 2, 0) == [[[ [14.0], [22.0] ], [ [46.0], [54.0] ]]], \"stride 2\"\nassert conv2D(np.array([[[[1.],[2.]],[[3.],[4.]]]]), np.concatenate([np.ones((1,1,1,1)), -np.ones((1,1,1,1))], axis=3), 1, 0) == [[[[1.0,-1.0],[2.0,-2.0]],[[3.0,-3.0],[4.0,-4.0]]]], \"multi-out ch\"\nassert conv2D(np.array([[[[1.,10.],[2.,20.]],[[3.,30.],[4.,40.]]]]), np.array([[[[1.],[1.]]]]), 1, 0) == [[[ [11.0], [22.0] ], [ [33.0], [44.0] ]]], \"multi-in ch\"\nassert conv2D(np.array([[[[7.]]]]), np.ones((1,1,1,1)), 1, (1,1)) == [[[[0.0],[0.0],[0.0]],[[0.0],[7.0],[0.0]],[[0.0],[0.0],[0.0]]]], \"2-tuple pad\"\nassert conv2D(np.array([[[[1.],[2.]],[[3.],[4.]]]]), np.ones((1,1,1,1)), 1, (0,1,0,1)) == [[[[1.0],[2.0],[0.0]],[[3.0],[4.0],[0.0]],[[0.0],[0.0],[0.0]]]], \"4-tuple pad\"\nassert conv2D(np.array([[[[1.],[2.]],[[3.],[4.]]],[[[5.],[6.]],[[7.],[8.]]]]), np.full((1,1,1,1),2.), 1, 0) == [[[[2.0],[4.0]],[[6.0],[8.0]]],[[[10.0],[12.0]],[[14.0],[16.0]]]], \"batching\"\nassert conv2D(np.full((1,2,2,1),5.), np.zeros((1,1,1,1)), 1, 0) == [[[ [0.0], [0.0] ], [ [0.0], [0.0] ]]], \"zero kernel\""}
{"task_id": 355, "completion_id": 0, "passed": false, "result": "failed: local variable 'v' referenced before assignment", "solution": "import numpy as np\nimport numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    data = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    if solver == 'svd':\n        (_, _, vh) = np.linalg.svd(data, full_matrices=False)\n    elif solver == 'eigen':\n        cov = np.cov(data, rowvar=False, ddof=1)\n        (_, v) = np.linalg.eigh(cov)\n        v = v[:, ::-1]\n    else:\n        raise ValueError(f'Unknown solver: {solver}')\n    if solver == 'svd':\n        vh = vh[:n_components] if n_components < len(vh) else vh\n    else:\n        v = v[:, :n_components] if n_components < v.shape[1] else v\n    for (i, vec) in enumerate(v):\n        if vec[np.nonzero(vec)[0][0]] < 0:\n            v[i] *= -1\n    scores = np.dot(data, v)\n    explained_variance_ratio = [round(np.var(scores[:, i]) / np.sum(np.var(scores, axis=0)), 4) for i in range(scores.shape[1])]\n    return (scores.round(4).tolist(), explained_variance_ratio)\nassert pca_transform(np.array([[1, 2], [3, 4], [5, 6]]), 1) == ([[-2.8284], [0.0], [2.8284]], [1.0]), \"failed: centred diagonal data \u2013 svd\"\nassert pca_transform(np.array([[1, 0], [2, 0], [3, 0]]), 1) == ([[-1.0], [0.0], [1.0]], [1.0]), \"failed: single varying axis \u2013 svd\"\nassert pca_transform(np.array([[2, 2], [4, 4], [6, 6]]), 1) == ([[-2.8284], [0.0], [2.8284]], [1.0]), \"failed: scaled diagonal \u2013 svd\"\nassert pca_transform(np.array([[1, 0], [1, 1], [1, 2]]), 1) == ([[-1.0], [0.0], [1.0]], [1.0]), \"failed: variation along second axis \u2013 svd\"\nassert pca_transform(np.array([[1], [2], [3], [4]]), 1) == ([[-1.5], [-0.5], [0.5], [1.5]], [1.0]), \"failed: one-dimensional data \u2013 svd\"\nassert pca_transform(np.array([[1, 0], [2, 0], [3, 0]]), 1, solver=\"eigen\") == ([[-1.0], [0.0], [1.0]], [1.0]), \"failed: single varying axis \u2013 eigen\"\nassert pca_transform(np.array([[1, 2], [1, 4]]), 1, solver=\"eigen\") == ([[-1.0], [1.0]], [1.0]), \"failed: two samples \u2013 eigen\"\nassert pca_transform(np.array([[0, 0, 1], [0, 0, 2], [0, 0, 3]]), 1) == ([[-1.0], [0.0], [1.0]], [1.0]), \"failed: third axis variation \u2013 svd\"\nassert pca_transform(np.array([[1, 2], [2, 4], [3, 6], [4, 8]]), 1) == ([[-3.3541], [-1.118 ], [1.118 ], [3.3541]], [1.0]), \"failed: perfectly collinear \u2013 svd\""}
{"task_id": 356, "completion_id": 0, "passed": false, "result": "failed: name 'Leaf' is not defined", "solution": "\ndef leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return leaf.value.index(max(leaf.value))\n    else:\n        return leaf.value\nassert leaf_predict(Leaf([0.25, 0.55, 0.20]), True) == 1, \"failed on basic classification example\"\nassert leaf_predict(Leaf([0.4, 0.4, 0.2]), True) == 0, \"failed on tie-breaking (should pick smaller index)\"\nassert leaf_predict(Leaf([1.0]), True) == 0, \"failed when only one class present\"\nassert abs(leaf_predict(Leaf(3.7), False) - 3.7) < 1e-9, \"failed on basic regression example\"\nassert leaf_predict(Leaf(-2), False) == -2, \"failed on negative regression value\"\nassert leaf_predict(Leaf([0, 0, 1]), True) == 2, \"failed when max is last element\"\nassert leaf_predict(Leaf([0.33, 0.33, 0.34]), True) == 2, \"failed on close probabilities\"\nassert leaf_predict(Leaf(0), False) == 0, \"failed on zero regression value\"\nassert leaf_predict(Leaf([0.9, 0.1]), True) == 0, \"failed on two-class classification\"\nassert leaf_predict(Leaf([0.1, 0.2, 0.2, 0.5]), True) == 3, \"failed on multi-class classification\""}
{"task_id": 357, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = data[:K].copy()\n    for _ in range(max_iters):\n        distances = np.sqrt(((data - centroids[:, np.newaxis]) ** 2).sum(axis=-1))\n        clusters = np.argmin(distances, axis=0)\n        new_centroids = np.array([data[clusters == k].mean(axis=0) if data[clusters == k].any() else centroids[k] for k in range(K)])\n        if np.allclose(centroids, new_centroids, atol=1e-06):\n            break\n        centroids = new_centroids\n    centroids = sorted([list(map(lambda x: round(x, 4), c)) for c in centroids])\n    return centroids\nassert kmeans(np.array([[1,1],[1,2],[2,1],[8,8],[9,8],[8,9]]),2)==[[1.3333,1.3333],[8.3333,8.3333]],\"failed on separated two-cluster example\"\nassert kmeans(np.array([[1,1],[2,2],[3,3]]),1)==[[2.0,2.0]],\"failed on single-cluster mean\"\nassert kmeans(np.array([[0,0],[1,0],[0,1],[1,1]]),2)==[[0.0,0.5],[1.0,0.5]],\"failed on square dataset\"\nassert kmeans(np.array([[1,0],[0,1],[-1,0],[0,-1]]),2)==[[-0.5,0.5],[0.5,-0.5]],\"failed on cross dataset\"\nassert kmeans(np.array([[2,2],[2,4],[4,2],[4,4],[10,10]]),2)==[[3.0,3.0],[10.0,10.0]],\"failed on distant outlier dataset\"\nassert kmeans(np.array([[0,0],[1,1]]),2)==[[0.0,0.0],[1.0,1.0]],\"failed on two-point two-cluster dataset\"\nassert kmeans(np.array([[0,0],[0,1],[1,0]]),3)==[[0.0,0.0],[0.0,1.0],[1.0,0.0]],\"failed on three-point three-cluster dataset\"\nassert kmeans(np.array([[1],[2],[3]]),2)==[[1.0],[2.5]],\"failed on one-dimensional dataset\"\nassert kmeans(np.array([[3,3],[4,3],[3,4],[4,4]]),2)==[[3.0,3.5],[4.0,3.5]],\"failed on 2x2 square dataset\"\nassert kmeans(np.array([[0,0,0],[0,0,1],[0,1,0],[1,0,0],[9,9,9],[9,9,8],[9,8,9],[8,9,9]]),2)==[[0.25,0.25,0.25],[8.75,8.75,8.75]],\"failed on 3-D dataset\""}
{"task_id": 362, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.GenericAlias' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    arr = np.array(data, dtype=float)\n    row_sums = arr.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    arr = arr / row_sums[:, np.newaxis]\n    arr = np.round(arr, 4)\n    return arr.tolist()\nassert row_stochastic_matrix([[1, 2, 3], [4, 5, 6]]) == [[0.1667, 0.3333, 0.5], [0.2667, 0.3333, 0.4]], \"failed: basic 3x3 matrix\"\nassert row_stochastic_matrix([[0, 0], [1, 1]]) == -1, \"failed: row with zero sum should return -1\"\nassert row_stochastic_matrix([[2, 2], [3, 1]]) == [[0.5, 0.5], [0.75, 0.25]], \"failed: 2x2 normalisation\"\nassert row_stochastic_matrix([[0.1, 0.2, 0.7]]) == [[0.1, 0.2, 0.7]], \"failed: single row unchanged\"\nassert row_stochastic_matrix([[10, 20, 30, 40], [5, 5, 5, 5]]) == [[0.1, 0.2, 0.3, 0.4], [0.25, 0.25, 0.25, 0.25]], \"failed: 4-column case\"\nassert row_stochastic_matrix([[9]]) == [[1.0]], \"failed: 1x1 matrix\"\nassert row_stochastic_matrix([[3, 5, 7], [0, 0, 0]]) == -1, \"failed: second row zero sum\"\nassert row_stochastic_matrix(np.array([[1, 1, 2], [2, 3, 5]])) == [[0.25, 0.25, 0.5], [0.2, 0.3, 0.5]], \"failed: numpy array input\"\nassert row_stochastic_matrix([[4, 0], [0, 8]]) == [[1.0, 0.0], [0.0, 1.0]], \"failed: rows with zeros\"\nassert row_stochastic_matrix([[1e-4, 1e-4], [2e-4, 3e-4]]) == [[0.5, 0.5], [0.4, 0.6]], \"failed: small numbers normalisation\""}
{"task_id": 363, "completion_id": 0, "passed": false, "result": "failed: name 'Discrete' is not defined", "solution": "\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    (cont_action, cont_obs) = (False, False)\n    if tuple_action and isinstance(env.action_space, (Tuple, Dict)):\n        cont_action = all((isinstance(space, Box) for space in env.action_space.spaces))\n    else:\n        cont_action = isinstance(env.action_space, Box)\n    if tuple_obs and isinstance(env.observation_space, (Tuple, Dict)):\n        cont_obs = all((isinstance(space, Box) for space in env.observation_space.spaces))\n    else:\n        cont_obs = isinstance(env.observation_space, Box)\n    return (cont_action, cont_obs)\nassert is_continuous(Env(Box(-1.0, 1.0, (3,)), Box(-1.0, 1.0, (3,))), False, False) == (True, True), \"TC1 failed\"\nassert is_continuous(Env(Discrete(4), Discrete(4)), False, False) == (False, False), \"TC2 failed\"\nassert is_continuous(Env(Box(-1.0, 1.0, (3,)), Discrete(4)), False, False) == (True, False), \"TC3 failed\"\nassert is_continuous(Env(Tuple([Box(-1.0,1.0,(3,)), Box(-1.0,1.0,(3,))]), Box(-1.0,1.0,(3,))), True, False) == (True, True), \"TC4 failed\"\nassert is_continuous(Env(Tuple([Box(-1.0,1.0,(3,)), Discrete(5)]), Box(-1.0,1.0,(3,))), True, False) == (False, True), \"TC5 failed\"\nassert is_continuous(Env(Box(-1.0,1.0,(3,)), Dict({\"a\": Box(-1.0,1.0,(3,)), \"b\": Box(-1.0,1.0,(3,))})), False, True) == (True, True), \"TC6 failed\"\nassert is_continuous(Env(Box(-1.0,1.0,(3,)), Dict({\"a\": Box(-1.0,1.0,(3,)), \"b\": Discrete(2)})), False, True) == (True, False), \"TC7 failed\"\nassert is_continuous(Env(Tuple([]), Box(-1.0,1.0,(3,))), True, False) == (True, True), \"TC8 failed\"\nassert is_continuous(Env(Tuple([Box(-1.0,1.0,(3,)) for _ in range(10)]), Discrete(5)), True, False) == (True, False), \"TC9 failed\"\nassert is_continuous(Env(Discrete(2), Box(-1.0,1.0,(3,))), False, False) == (False, True), \"TC10 failed\""}
{"task_id": 369, "completion_id": 0, "passed": false, "result": "failed: Cannot cast ufunc 'subtract' output from dtype('float64') to dtype('int64') with casting rule 'same_kind'", "solution": "import numpy as np\nimport numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for u in updates:\n        running_pred -= learning_rate * u\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        probs = np.exp(running_pred) / np.sum(np.exp(running_pred), axis=1, keepdims=True)\n        return np.argmax(probs, axis=1)\nassert gradient_boosting_predict([np.array([1.0, -2.0, 0.5])], 0.1, True).tolist() == [-0.1, 0.2, -0.05], \"test case failed: single-tree regression\"\nassert gradient_boosting_predict([np.array([1, 2, 3]), np.array([0.5, -0.5, 1])], 0.1, True).tolist() == [-0.15, -0.15, -0.4], \"test case failed: two-tree regression\"\nassert gradient_boosting_predict([], 0.2, True).size == 0, \"test case failed: empty updates\"\nassert gradient_boosting_predict([np.array([[0.2, -0.1, 0.1], [-0.3, 0.4, -0.1]]), np.array([[0.1, 0.2, -0.3], [0.2, -0.2, 0.0]])], 0.5, False).tolist() == [2, 0], \"test case failed: two-tree classification\"\nassert gradient_boosting_predict([np.array([[1.0,-1.0],[0.5,-0.5]])], 1.0, False).tolist() == [1, 1], \"test case failed: single-tree classification\"\nassert gradient_boosting_predict([np.array([[0.0,0.0],[1.0,-1.0]])], 2.0, False).tolist() == [0, 1], \"test case failed: equal-logit classification\"\nassert gradient_boosting_predict([np.array([[0.2,0.1],[-0.1,0.3]]), np.array([[0.1,-0.1],[0.05,-0.05]])], 0.3, False).tolist() == [1, 0], \"test case failed: two-tree small-lr classification\"\nassert gradient_boosting_predict([np.array([0.0,1.0]), np.array([1.0,1.0])], 0.5, True).tolist() == [-0.5, -1.0], \"test case failed: regression zeros first update\"\nassert gradient_boosting_predict([np.array([-1.0,-2.0])], 0.3, True).tolist() == [0.3, 0.6], \"test case failed: regression negative updates\"\nassert gradient_boosting_predict([np.array([[1.0,2.0,3.0]])], 1.0, False).tolist() == [0], \"test case failed: 3-class single-sample classification\""}
{"task_id": 371, "completion_id": 0, "passed": false, "result": "failed: failed on same-pad basic example", "solution": "import numpy as np\nimport numpy as np\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int=0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    (n_examples, signal_length, in_channels) = X.shape\n    (kernel_width, _, out_channels) = W.shape\n    if isinstance(pad, int):\n        pad_left = pad_right = pad\n    elif isinstance(pad, tuple):\n        (pad_left, pad_right) = pad\n    elif pad == 'same':\n        total_pad = np.ceil((signal_length - 1) / stride) * stride + dilation * (kernel_width - 1) + 1 - signal_length\n        pad_left = int(total_pad // 2)\n        pad_right = int(total_pad - pad_left)\n    else:\n        raise ValueError(\"Invalid padding value. It should be an integer, a 2-tuple or 'same'.\")\n    X_padded = np.pad(X, ((0, 0), (pad_left, pad_right), (0, 0)))\n    output_length = (X.shape[1] + 2 * pad_left - dilation * (kernel_width - 1) - 1) // stride + 1\n    Y = np.zeros((n_examples, output_length, out_channels))\n    for example in range(n_examples):\n        for out_channel in range(out_channels):\n            for output in range(output_length):\n                start = output * stride\n                end = start + dilation * (kernel_width - 1) + 1\n                Y[example, output, out_channel] = np.sum(X_padded[example, start:end:dilation + 1, :] * W[:, :, out_channel])\n    return Y.tolist()\nassert conv1D(np.array([[[1],[2],[3],[4],[5]]]), np.array([[[1]],[[0]],[[-1]]]), 1, \"same\", 0) == [[[-2.0],[-2.0],[-2.0],[-2.0],[4.0]]], \"failed on same-pad basic example\"\nassert conv1D(np.array([[[1],[2],[3],[4],[5]]]), np.array([[[1]],[[0]],[[-1]]]), 1, 0) == [[[-2.0],[-2.0],[-2.0]]], \"failed on zero-pad example\"\nassert conv1D(np.array([[[1],[2],[1],[2],[1],[2]]]), np.array([[[1]],[[1]]]), 2, 0) == [[[3.0],[3.0],[3.0]]], \"failed on stride 2\"\nassert conv1D(np.array([[[1],[2],[3],[4],[5]]]), np.array([[[1]],[[1]]]), 1, 0, 1) == [[[4.0],[6.0],[8.0]]], \"failed on dilation 1\"\nassert conv1D(np.array([[[1,2],[3,4],[5,6],[7,8]]]),\n              np.array([[[1,0,1],[1,0,0]],[[1,0,0],[1,0,1]]]), 1, 0) == [[[10,0,5],[18,0,9],[26,0,13]]], \"failed on multi-channel\"\nassert conv1D(np.array([[[1],[2],[3],[4]]]), np.array([[[1]],[[1]],[[1]]]), 2, \"same\") == [[[6.0],[7.0]]], \"failed on same-pad + stride 2\"\nassert conv1D(np.array([[[1],[2]]]), np.array([[[1]],[[1]]]), 1, 1) == [[[1.0],[3.0],[2.0]]], \"failed on symmetric integer pad\"\nassert conv1D(np.array([[[1],[2],[3],[4],[5],[6],[7]]]), np.array([[[1]],[[1]],[[1]]]), 1, 0, 2) == [[[12.0]]], \"failed on dilation 2\"\nassert conv1D(np.array([[[1],[2],[3]],[[4],[5],[6]]]), np.array([[[1]],[[1]]]), 1, 0) == [[[3.0],[5.0]],[[9.0],[11.0]]], \"failed on batch processing\"\nassert conv1D(np.array([[[1],[2],[3]]]), np.array([[[2]]]), 1, (2,1)) == [[[0.0],[0.0],[2.0],[4.0],[6.0],[0.0]]], \"failed on asymmetric tuple pad\""}
{"task_id": 373, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.GenericAlias' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    (_, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    gini = 1 - np.sum(np.square(probabilities))\n    return round(gini, 4)\nassert gini([0, 1, 1, 0, 2]) == 0.64, \"failed: gini([0, 1, 1, 0, 2])\"\nassert gini([0, 0, 0, 0]) == 0.0, \"failed: gini([0, 0, 0, 0])\"\nassert gini([0, 1]) == 0.5, \"failed: gini([0, 1])\"\nassert gini([1, 2, 3, 4]) == 0.75, \"failed: gini([1, 2, 3, 4])\"\nassert gini([]) == 0.0, \"failed: gini([])\"\nassert gini([5, 5, 5, 5, 5]) == 0.0, \"failed: gini([5, 5, 5, 5, 5])\"\nassert gini([0, 1, 2, 3, 4, 5]) == 0.8333, \"failed: gini([0, 1, 2, 3, 4, 5])\"\nassert gini([2]) == 0.0, \"failed: gini([2])\"\nassert gini([1, 1, 1, 2, 2, 3]) == 0.6111, \"failed: gini([1, 1, 1, 2, 2, 3])\"\nassert gini(list(range(100))) == 0.99, \"failed: gini(range(100))\""}
{"task_id": 374, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    weights = np.zeros(X.shape[1])\n    bias = 0.0\n    for _ in range(n_iterations):\n        y_pred = np.dot(X, weights) + bias\n        dw = 2 / X.shape[0] * np.dot(X.T, y_pred - y)\n        db = 2 / X.shape[0] * np.sum(y_pred - y)\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n    weights = [round(weight, 4) for weight in weights]\n    bias = round(bias, 4)\n    return (weights, bias)\nassert linear_regression_gd(np.array([[1, 2], [2, 0], [3, 1]]), np.array([5, 6, 7]), 0.01, 10000) == ([1.0, 0.0], 4.0), \"failed: basic 2-feature example\"\nassert linear_regression_gd(np.array([[1], [2], [3], [4]]), np.array([5, 7, 9, 11])) == ([2.0], 3.0), \"failed: y = 2x + 3\"\nassert linear_regression_gd(np.array([[0], [2], [4]]), np.array([4, 1, -2]), 0.01, 12000) == ([-1.5], 4.0), \"failed: negative slope\"\nassert linear_regression_gd(np.array([[1], [2], [3], [4]]), np.array([5, 5, 5, 5])) == ([0.0], 5.0), \"failed: constant target\"\nassert linear_regression_gd(np.array([[0, 0], [1, 5], [2, -1]]), np.array([4, 7, 10]), 0.01, 12000) == ([3.0, 0.0], 4.0), \"failed: irrelevant second feature\"\nassert linear_regression_gd(np.array([[0, 0]]), np.array([7]), 0.01, 5000) == ([0.0, 0.0], 7.0), \"failed: single sample two features\""}
{"task_id": 376, "completion_id": 0, "passed": false, "result": "failed: list index out of range", "solution": "import numpy as np\nimport numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"\n    Check whether the given 2-D array *X* is symmetric.\n    \n    A matrix is symmetric if it is square and equal to its own transpose.\n    \n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n    \n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    if len(X) != len(X[0]):\n        return False\n    X = np.array(X)\n    return np.allclose(X, X.T, atol=1e-08)\nassert is_symmetric([[1]]) is True, \"failed on 1\u00d71 matrix\"\nassert is_symmetric([[1, 2], [2, 1]]) is True, \"failed on 2\u00d72 symmetric\"\nassert is_symmetric([[1, 0], [3, 1]]) is False, \"failed on 2\u00d72 non-symmetric\"\nassert is_symmetric([[1, 2, 3], [2, 5, 6], [3, 6, 9]]) is True, \"failed on 3\u00d73 symmetric\"\nassert is_symmetric([[1, 2], [2, 1], [3, 4]]) is False, \"failed on non-square\"\nassert is_symmetric([]) is True, \"failed on empty matrix\"\nassert is_symmetric([[0.0, 1e-09], [1e-09, 0.0]]) is True, \"failed on float tolerance\"\nassert is_symmetric([[3, -2, 5], [-2, 0, 4], [5, 4, 1]]) is True, \"failed on 3\u00d73 with negatives\"\nassert is_symmetric([[1, 2, 3], [2, 1, 4], [4, 5, 1]]) is False, \"failed on asymmetric 3\u00d73\"\nassert is_symmetric([[2, 3, 4, 5], [3, 2, 6, 7], [4, 6, 2, 8], [5, 7, 8, 2]]) is True, \"failed on 4\u00d74 symmetric\""}
{"task_id": 377, "completion_id": 0, "passed": false, "result": "failed: list index out of range", "solution": "import numpy as np\nimport numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Function that calculates the negative gradient for logistic loss\n    \n    Parameters:\n    y (list): binary class labels (0 or 1)\n    f (list): current prediction scores (floats)\n    \n    Returns:\n    list: list of negative gradients g rounded to four decimal places\n    \"\"\"\n    if not all((i in [0, 1] for i in y)):\n        return -1\n    y_prime = [2 * i - 1 for i in y]\n    g = [y_prime[i] / (1 + np.exp(y_prime[i] * f[i])) for i in range(len(y))]\n    g = [round(i, 4) for i in g]\n    return g\nassert logistic_negative_gradient([0,1,0],[0.0,0.5,-0.5])==[-0.5,0.3775,-0.3775],\"failed: basic example\"\nassert logistic_negative_gradient([1,1,1],[0,0,0])==[0.5,0.5,0.5],\"failed: all ones zero score\"\nassert logistic_negative_gradient([0,0,0],[0,0,0])==[-0.5,-0.5,-0.5],\"failed: all zeros zero score\"\nassert logistic_negative_gradient([1,0],[2,-2])==[0.1192,-0.1192],\"failed: symmetric scores\"\nassert logistic_negative_gradient([1],[10])==[0.0],\"failed: large positive score\"\nassert logistic_negative_gradient([0],[-10])==[-0.0],\"failed: large negative score\"\nassert logistic_negative_gradient([],[])==[],\"failed: empty input\"\nassert logistic_negative_gradient([0,2],[0,0])==-1,\"failed: invalid label\"\nassert logistic_negative_gradient([0,1,0],[0.1])==-1,\"failed: mismatched lengths\""}
{"task_id": 380, "completion_id": 0, "passed": false, "result": "failed: name 'SCALE' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    x = np.asarray(x)\n    if order == 0:\n        return np.round(SCALE * elu(x, ALPHA), 4).tolist()\n    elif order == 1:\n        return np.round(SCALE * np.where(x > 0, 1, alpha * np.exp(x)), 4).tolist()\n    elif order == 2:\n        return np.round(SCALE * np.where(x > 0, 0, alpha * np.exp(x)), 4).tolist()\n    else:\n        raise ValueError('Order must be 0, 1, or 2')\nassert selu([-1, 0, 1], 0) == [-1.1113, 0.0, 1.0507], \"test failed: selu([-1,0,1],0)\"\nassert selu([2], 0) == [2.1014], \"test failed: selu([2],0)\"\nassert selu(0, 0) == 0.0, \"test failed: selu(0,0)\"\nassert selu([[1, 0], [-1, 2]], 0) == [[1.0507, 0.0], [-1.1113, 2.1014]], \"test failed: selu([[1,0],[-1,2]],0)\"\nassert selu([-1, 0, 1], 1) == [0.6468, 1.0507, 1.0507], \"test failed: selu([-1,0,1],1)\"\nassert selu([2.5], 1) == [1.0507], \"test failed: selu([2.5],1)\"\nassert selu(0, 1) == 1.0507, \"test failed: selu(0,1)\"\nassert selu([-1, 1], 2) == [0.6468, 0.0], \"test failed: selu([-1,1],2)\"\nassert selu([0], 2) == [1.7581], \"test failed: selu([0],2)\"\nassert selu(2, 2) == 0.0, \"test failed: selu(2,2)\""}
{"task_id": 387, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(y)\n    y_hat = np.full(n_samples, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - y_hat\n        sorted_indices = np.argsort(x)\n        x_sorted = x[sorted_indices]\n        residuals_sorted = residuals[sorted_indices]\n        unique_x = np.unique(x_sorted)\n        if len(unique_x) == 1:\n            residual_left = np.mean(residuals_sorted)\n            residual_right = residual_left\n        else:\n            split_points = (unique_x[:-1] + unique_x[1:]) / 2\n            split_scores = []\n            for t in split_points:\n                left_mask = x_sorted <= t\n                residual_left = np.mean(residuals_sorted[left_mask])\n                residual_right = np.mean(residuals_sorted[~left_mask])\n                split_score = np.sum((residual_left - residuals_sorted[left_mask]) ** 2) + np.sum((residual_right - residuals_sorted[~left_mask]) ** 2)\n                split_scores.append(split_score)\n            best_split_index = np.argmin(split_scores)\n            best_split = split_points[best_split_index]\n            left_mask = x_sorted <= best_split\n            residual_left = np.mean(residuals_sorted[left_mask])\n            residual_right = np.mean(residuals_sorted[~left_mask])\n            y_hat += learning_rate * np.where(x_sorted <= best_split, residual_left, residual_right)\n    return np.round(y_hat, 4).tolist()\nassert gradient_boosting_1d([1, 2], [2, 4], 1, 0.5) == [2.5, 3.5], \"failed on simple two-point example\"\nassert gradient_boosting_1d([1, 2, 3, 4], [5, 5, 5, 5], 3, 0.1) == [5.0, 5.0, 5.0, 5.0], \"failed on constant target\"\nassert gradient_boosting_1d([1, 2, 3], [1, 2, 3], 2, 0.5) == [1.3125, 2.0625, 2.625], \"failed on small increasing sequence\"\nassert gradient_boosting_1d([1, 2, 3], [3, 3, 3], 5, 0.2) == [3.0, 3.0, 3.0], \"failed on constant target, many rounds\"\nassert gradient_boosting_1d([1, 2, 3, 4], [2, 4, 6, 8], 2, 0.5) == [3.0, 4.3333, 6.3333, 6.3333], \"failed on linear 4-point set\"\nassert gradient_boosting_1d([1, 2, 3], [2, 2, 6], 1, 1.0) == [2.0, 2.0, 6.0], \"failed on perfect one-round fit\"\nassert gradient_boosting_1d([1, 1, 1], [1, 2, 3], 3, 0.3) == [2.0, 2.0, 2.0], \"failed when all features identical\"\nassert gradient_boosting_1d([5, 6], [10, 10], 4, 0.1) == [10.0, 10.0], \"failed on two identical targets\"\nassert gradient_boosting_1d([1, 2, 3], [10, 0, 10], 1, 0.5) == [8.3333, 5.8333, 5.8333], \"failed on uneven targets\"\nassert gradient_boosting_1d([1, 2], [0, 0], 2, 0.4) == [0.0, 0.0], \"failed on zero targets\""}
{"task_id": 394, "completion_id": 0, "passed": false, "result": "failed: can't multiply sequence by non-int of type 'float'", "solution": "import numpy as np\nimport numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    epsilon = 1e-08\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * np.square(grad)\n    w = w - learning_rate * grad / np.sqrt(Eg + epsilon)\n    return (np.round(w, 4).tolist(), np.round(Eg, 4).tolist())\nassert rmsprop_update(np.array([1.0]), np.array([0.1]), None) == ([0.9684], [0.001]), \"test case 1 failed\"\nassert rmsprop_update(np.array([1.0]), np.array([0.0]), None) == ([1.0], [0.0]), \"test case 2 failed\"\nassert rmsprop_update(np.array([0.0]), np.array([1.0]), None) == ([-0.0316], [0.1]), \"test case 3 failed\"\nw4, Eg4 = rmsprop_update(np.array([0.5, -0.5]), np.array([0.2, 0.2]), None)\nassert w4 == [0.4684, -0.5316] and Eg4 == [0.004, 0.004], \"test case 4 failed\"\nassert rmsprop_update(np.array([0.4684, -0.5316]), np.array([0.0, 0.0]), [0.004, 0.004]) == ([0.4684, -0.5316], [0.0036, 0.0036]), \"test case 5 failed\"\nassert rmsprop_update(np.array([10.0]), np.array([10.0]), None) == ([9.9684], [10.0]), \"test case 6 failed\"\nassert rmsprop_update(np.array([1, 2, 3]), np.array([0.1, 0.2, 0.3]), None) == ([0.9684, 1.9684, 2.9684], [0.001, 0.004, 0.009]), \"test case 7 failed\"\nassert rmsprop_update(np.array([-1.0]), np.array([-0.1]), None) == ([-0.9684], [0.001]), \"test case 8 failed\"\nassert rmsprop_update(np.array([1.0, 2.0]), np.array([0.0, 0.0]), [0.001, 0.004]) == ([1.0, 2.0], [0.0009, 0.0036]), \"test case 9 failed\"\nassert rmsprop_update(np.array([5.0]), np.array([0.5]), np.array([1.0])) == ([4.9948], [0.925]), \"test case 10 failed\""}
{"task_id": 398, "completion_id": 0, "passed": false, "result": "failed: can only concatenate list (not \"float\") to list", "solution": "import numpy as np\nimport numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if derivative:\n        result = np.where(x >= 0, 1, elu(x, alpha) + alpha)\n    else:\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    return [round(val, 4) for val in result]\nassert elu(np.array([-2, -1, 0, 1, 2]), 0.1, False) == [-0.0865, -0.0632, 0.0, 1.0, 2.0], \"failed on basic activation\"\nassert elu(np.array([-2, -1, 0, 1, 2]), 0.1, True) == [0.0135, 0.0368, 1.0, 1.0, 1.0], \"failed on basic gradient\"\nassert elu([-1], 1.0, False) == [-0.6321], \"failed on alpha=1 activation\"\nassert elu([-1], 1.0, True) == [0.3679], \"failed on alpha=1 gradient\"\nassert elu([3, 4.5, 0.0], 0.5, False) == [3.0, 4.5, 0.0], \"failed on all positive activation\"\nassert elu([3, 4.5, 0.0], 0.5, True) == [1.0, 1.0, 1.0], \"failed on all positive gradient\"\nassert elu([-1, 2], 0.0, False) == [0.0, 2.0], \"failed on alpha=0 activation\"\nassert elu([-1, 2], 0.0, True) == [0.0, 1.0], \"failed on alpha=0 gradient\"\nassert elu([], 0.1, False) == [], \"failed on empty activation\"\nassert elu([-0.5, 0.5], 0.2, False) == [-0.0787, 0.5], \"failed on mixed list activation\""}
{"task_id": 411, "completion_id": 0, "passed": false, "result": "failed: 'int' object is not iterable", "solution": "import numpy as np\nimport numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def process_data(data):\n        tuple_data = any([isinstance(d, (list, tuple, np.ndarray)) for d in data])\n        multidim_data = any([len(d) if isinstance(d, (list, tuple, np.ndarray)) else 1 for d in data]) > 1\n        continuous_data = any([np.isscalar(d) and (not isinstance(d, int)) for d in np.hstack(data)])\n        n_data_per_dim = [len(set(d)) if isinstance(d, (list, tuple, np.ndarray)) else 1 for d in np.hstack(data)]\n        data_dim = len(np.hstack(data)) if isinstance(np.hstack(data)[0], (list, tuple, np.ndarray)) else 1\n        data_ids = [list(set(d)) if isinstance(d, (list, tuple, np.ndarray)) else list(set(np.hstack(data))) for d in zip(*data)]\n        return (tuple_data, multidim_data, continuous_data, n_data_per_dim, data_dim, data_ids)\n    (tuple_actions, multidim_actions, continuous_actions, n_actions_per_dim, action_dim, action_ids) = process_data(actions)\n    (tuple_observations, multidim_observations, continuous_observations, n_obs_per_dim, obs_dim, obs_ids) = process_data(observations)\n    return {'tuple_actions': tuple_actions, 'tuple_observations': tuple_observations, 'multidim_actions': multidim_actions, 'multidim_observations': multidim_observations, 'continuous_actions': continuous_actions, 'continuous_observations': continuous_observations, 'n_actions_per_dim': n_actions_per_dim, 'action_dim': action_dim, 'n_obs_per_dim': n_obs_per_dim, 'obs_dim': obs_dim, 'action_ids': action_ids, 'obs_ids': obs_ids}\nacts = [0, 1, 2, 0]\nobs  = [10, 11, 10]\nassert env_stats(acts, obs)['n_actions_per_dim'] == [3], \"test case failed: scalar integers\"\nacts = [0.0, 1.5, 2.0]\nobs  = [1, 2, 3]\nassert env_stats(acts, obs)['continuous_actions'] is True, \"test case failed: continuous actions\"\nacts = [(0, 0), (1, 1), (0, 1)]\nobs  = [5, 6, 7]\nassert env_stats(acts, obs)['multidim_actions'] is True, \"test case failed: 2-D integer actions\"\nacts = [(0, 0, 0)]\nobs  = [(1.1, 2.2)]\nassert env_stats(acts, obs)['obs_dim'] == 2, \"test case failed: single sample multi-dim\"\nacts = [[1], [2], [3], [1]]\nobs  = [[10], [10], [12]]\nassert env_stats(acts, obs)['tuple_actions'] is True, \"test case failed: tuple single-dim\"\nacts = [(1, 2), (2, 3), (1, 3)]\nobs  = [0.1, 0.2, 0.3]\nassert env_stats(acts, obs)['continuous_observations'] is True, \"test 6 failed\"\nacts = [1, 2, 3]\nobs  = [(0, 0), (1, 1)]\nassert env_stats(acts, obs)['multidim_observations'] is True, \"test 7 failed\"\nacts = [2.0, 3.0]\nobs  = [1, 1]\nassert env_stats(acts, obs)['continuous_actions'] is False, \"test 8 failed\"\nacts = [True, False, True]\nobs  = [0, 1, 0]\nassert env_stats(acts, obs)['continuous_actions'] is False, \"test 9 failed\"\nacts = list(range(100))\nobs  = list(range(0, 200, 2))\nassert env_stats(acts, obs)['n_obs_per_dim'] == [100], \"test 10 failed\""}
{"task_id": 413, "completion_id": 0, "passed": false, "result": "failed: test-1 failed: two-point identity mapping", "solution": "import numpy as np\nimport numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n\n    def mean_squared_error(y_true, y_pred):\n        return np.mean((y_true - y_pred) ** 2)\n\n    def split_data(X, y, feature, split):\n        left_mask = X[:, feature] < split\n        return ((X[left_mask], y[left_mask]), (X[~left_mask], y[~left_mask]))\n\n    def find_best_split(X, y, feature):\n        X_values = np.sort(np.unique(X[:, feature]))\n        split_values = (X_values[:-1] + X_values[1:]) / 2\n        best_split_mse = np.inf\n        for split in split_values:\n            ((X_left, y_left), (X_right, y_right)) = split_data(X, y, feature, split)\n            left_mse = mean_squared_error(y_left, np.full(y_left.shape, np.mean(y_left)))\n            right_mse = mean_squared_error(y_right, np.full(y_right.shape, np.mean(y_right)))\n            total_mse = left_mse + right_mse\n            if total_mse < best_split_mse:\n                best_split_mse = total_mse\n                best_split = split\n        return best_split\n\n    def fit_tree(X, y, depth=0):\n        if depth == max_depth or len(np.unique(y)) == 1:\n            return np.mean(y)\n        best_mse = np.inf\n        for feature in range(X.shape[1]):\n            split = find_best_split(X, y, feature)\n            ((X_left, y_left), (X_right, y_right)) = split_data(X, y, feature, split)\n            left_pred = fit_tree(X_left, y_left, depth + 1)\n            right_pred = fit_tree(X_right, y_right, depth + 1)\n            y_pred = np.where(X[:, feature] < split, left_pred, right_pred)\n            mse = mean_squared_error(y, y_pred)\n            if mse < best_mse:\n                best_mse = mse\n                best_split = split\n                best_feature = feature\n                best_left_pred = left_pred\n                best_right_pred = right_pred\n        return (best_feature, best_split, best_left_pred, best_right_pred)\n\n    def predict(X, tree):\n        if isinstance(tree, tuple):\n            (feature, split, left_tree, right_tree) = tree\n            return np.where(X[:, feature] < split, predict(X, left_tree), predict(X, right_tree))\n        else:\n            return np.full(X.shape[0], tree)\n    tree = fit_tree(X_train, y_train)\n    predictions = np.full(X_test.shape[0], np.mean(y_train))\n    for i in range(n_estimators):\n        residuals = y_train - predict(X_train, tree)\n        tree = fit_tree(X_train, residuals)\n        predictions += learning_rate * predict(X_test, tree)\n    return [round(p, 4) for p in predictions.tolist()]\nassert gbdt_regression(np.array([[0],[1]]), np.array([0,1]), np.array([[0],[1]]), 1, 1.0, 1) == [0.0, 1.0], \"test-1 failed: two-point identity mapping\"\nassert gbdt_regression(np.array([[0],[1],[2]]), np.array([5,5,5]), np.array([[1]]), 3, 0.5, 1) == [5.0], \"test-2 failed: constant target 5\"\nassert gbdt_regression(np.array([[0,1],[1,2],[2,3]]), np.array([7,7,7]), np.array([[0.5,1.5]]), 5, 0.3, 2) == [7.0], \"test-3 failed: 2-D constant target 7\"\nassert gbdt_regression(np.array([[-1],[0],[1]]), np.array([-2,-2,-2]), np.array([[0]]), 4, 0.8, 1) == [-2.0], \"test-4 failed: negative constant target\"\nassert gbdt_regression(np.array([[10]]), np.array([42]), np.array([[15]]), 6, 0.2, 1) == [42.0], \"test-5 failed: single-sample dataset\"\nassert gbdt_regression(np.array([[2],[4]]), np.array([4,8]), np.array([[2],[4]]), 1, 1.0, 1) == [4.0, 8.0], \"test-6 failed: two-point linear x2 mapping\"\nassert gbdt_regression(np.array([[0,1],[1,2]]), np.array([1,3]), np.array([[0,1],[1,2]]), 1, 1.0, 1) == [1.0, 3.0], \"test-7 failed: two-point 2-D features\"\nassert gbdt_regression(np.array([[5]]), np.array([10]), np.array([[7]]), 3, 0.9, 1) == [10.0], \"test-8 failed: single-sample constant 10\"\nassert gbdt_regression(np.array([[0],[1],[2]]), np.array([0,0,0]), np.array([[0],[2]]), 2, 0.7, 1) == [0.0, 0.0], \"test-9 failed: zero target\"\nassert gbdt_regression(np.array([[0],[1]]), np.array([-5,10]), np.array([[0],[1]]), 1, 1.0, 1) == [-5.0, 10.0], \"test-10 failed: mixed sign targets\""}
{"task_id": 416, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Function to compute the probability density function (PDF) of a multivariate Gaussian (Normal) distribution.\n    \n    Args:\n    X: A NumPy array of shape (n_samples, n_features) containing the data points for which the PDF values must be evaluated.\n    mean: The mean vector of the distribution (length n_features).\n    cov: The covariance matrix of shape (n_features, n_features) which must be positive-definite (invertible).\n    \n    Returns:\n    A Python list whose i-th element is the PDF value for X[i] rounded to four decimal places.\n    \"\"\"\n    n_features = X.shape[1]\n    mean = np.array(mean)\n    cov = np.array(cov)\n    cov_det = np.linalg.det(cov)\n    cov_inv = np.linalg.inv(cov)\n    denominator = math.sqrt((2 * math.pi) ** n_features * cov_det)\n    pdf_values = []\n    for x in X:\n        x_minus_mean = x - mean\n        exponent = -0.5 * np.dot(np.dot(x_minus_mean.T, cov_inv), x_minus_mean)\n        pdf_value = np.exp(exponent) / denominator\n        pdf_values.append(round(pdf_value, 4))\n    return pdf_values\nassert multivariate_gaussian_pdf(np.array([[0]]), [0], [[1]]) == [0.3989], \"test case failed: N(0,1) at 0\"\nassert multivariate_gaussian_pdf(np.array([[1]]), [0], [[1]]) == [0.2420], \"test case failed: N(0,1) at 1\"\nassert multivariate_gaussian_pdf(np.array([[0,0]]), [0,0], [[1,0],[0,1]]) == [0.1592], \"test case failed: 2D standard normal at (0,0)\"\nassert multivariate_gaussian_pdf(np.array([[1,1]]), [0,0], [[1,0],[0,1]]) == [0.0585], \"test case failed: 2D standard normal at (1,1)\"\nassert multivariate_gaussian_pdf(np.array([[0,0,0]]), [0,0,0], np.identity(3)) == [0.0635], \"test case failed: 3D standard normal at origin\"\nassert multivariate_gaussian_pdf(np.array([[0,0]]), [0,0], [[2,0],[0,2]]) == [0.0796], \"test case failed: 2D diag(2,2) at origin\"\nassert multivariate_gaussian_pdf(np.array([[1,0]]), [0,0], [[1,0],[0,2]]) == [0.0683], \"test case failed: diag(1,2) at (1,0)\"\nassert multivariate_gaussian_pdf(np.array([[1,0],[0,1]]), [0,0], [[1,0],[0,2]]) == [0.0683,0.0876], \"test case failed: two points with diag(1,2)\"\nassert multivariate_gaussian_pdf(np.array([[0,0],[2,0]]), [0,0], [[1,0],[0,1]]) == [0.1592,0.0215], \"test case failed: (0,0) and (2,0) in 2D standard normal\"\nassert multivariate_gaussian_pdf(np.array([[-1],[0],[1]]), [0], [[1]]) == [0.2420,0.3989,0.2420], \"test case failed: vectorised 1D standard normal\""}
{"task_id": 419, "completion_id": 0, "passed": false, "result": "failed: 1-dimensional array given. Array must be at least two-dimensional", "solution": "import numpy as np\nimport numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.concatenate((np.ones((X.shape[0], 1)), X), axis=1)\n        X_new = np.concatenate((np.ones((X_new.shape[0], 1)), X_new), axis=1)\n    if isinstance(mu, float) or isinstance(mu, int):\n        mu = np.full(X.shape[1], mu)\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, float) or isinstance(V, int):\n        V = V * np.eye(X.shape[1])\n    elif isinstance(V, np.ndarray) and len(V.shape) == 1:\n        V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    Sigma_p = np.linalg.inv(V_inv + np.dot(X.T, X))\n    Mu_p = np.dot(Sigma_p, np.dot(V_inv, mu) + np.dot(X.T, y))\n    y_new = np.dot(X_new, Mu_p)\n    return np.round(y_new, 4).tolist()\nassert bayesian_linear_regression_pred(np.array([[1],[2]]), np.array([1,3]), np.array([[3]])) == [3.3333], \"failed on simple 1-D, intercept\"\nassert bayesian_linear_regression_pred(np.array([[0],[1],[2]]), np.array([1,2,3]), np.array([[1.5]])) == [2.2], \"failed on 3-pt line, intercept\"\nassert bayesian_linear_regression_pred(np.array([[1],[2]]), np.array([2,4]), np.array([[3]]), mu=1) == [5.0], \"failed with non-zero prior mean\"\nassert bayesian_linear_regression_pred(np.array([[1],[2],[3]]), np.array([2,2.5,3.5]), np.array([[4]]), V=[2,2]) == [4.339], \"failed with diagonal prior covariance\"\nassert bayesian_linear_regression_pred(np.array([[1]]), np.array([2]), np.array([[1]]), fit_intercept=False) == [1.0], \"failed single observation, no intercept\"\nassert bayesian_linear_regression_pred(np.array([[1],[2],[3]]), np.array([3,6,9]), np.array([[4]]), V=0.5, fit_intercept=False) == [10.5], \"failed with scalar prior variance 0.5\"\nassert bayesian_linear_regression_pred(np.array([[1],[2],[3]]), np.array([2,4,6]), np.array([[4]]), mu=2, fit_intercept=False) == [8.0], \"failed with informative prior mean\"\nassert bayesian_linear_regression_pred(np.array([[0],[1]]), np.array([0,1]), np.array([[2]])) == [1.0], \"failed on small line through origin\"\nassert bayesian_linear_regression_pred(np.array([[0],[0]]), np.array([2,2]), np.array([[0]])) == [1.3333], \"failed pure-intercept model\""}
{"task_id": 423, "completion_id": 0, "passed": false, "result": "failed: division by zero", "solution": "import numpy as np\nimport numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Stub for the RMSLE metric.  Complete the body of the function.\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    for i in range(len(actual)):\n        if actual[i] < 0 or predicted[i] < 0:\n            return -1\n    n = len(actual)\n    sum_log_diff = 0\n    for (actual_i, predicted_i) in zip(actual, predicted):\n        sum_log_diff += (np.log(1 + predicted_i) - np.log(1 + actual_i)) ** 2\n    rmsle = np.sqrt(sum_log_diff / n)\n    return round(rmsle, 4)\nassert root_mean_squared_log_error([1, 2, 3], [1, 2, 3]) == 0.0, \"failed on identical values\"\nassert root_mean_squared_log_error([1, 2, 3], [1, 2, 4]) == 0.1288, \"failed on simple differing list\"\nassert root_mean_squared_log_error([0], [0]) == 0.0, \"failed on single zero value\"\nassert root_mean_squared_log_error([], []) == -1, \"failed on empty lists\"\nassert root_mean_squared_log_error([1, 2], [1]) == -1, \"failed on unequal length\"\nassert root_mean_squared_log_error([1, -2, 3], [1, 2, 3]) == -1, \"failed on negative actual value\"\nassert root_mean_squared_log_error([1, 2, 3], [1, 2, -3]) == -1, \"failed on negative predicted value\""}
{"task_id": 428, "completion_id": 0, "passed": false, "result": "failed: test case failed: hann(4, True)", "solution": "import math\nimport numpy as np\nimport math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    else:\n        if symmetric:\n            window_len += 1\n        window = [0.5 - 0.5 * math.cos(2 * math.pi * n / (window_len - 1)) for n in range(window_len)]\n        window = [round(x, 4) for x in window]\n        if symmetric:\n            return window[:-1]\n        else:\n            return window\nassert hann(4, True) == [0.0, 0.75, 0.75, 0.0], \"test case failed: hann(4, True)\"\nassert hann(4, False) == [0.0, 0.5, 1.0, 0.5], \"test case failed: hann(4, False)\"\nassert hann(1, True) == [1.0], \"test case failed: hann(1, True)\"\nassert hann(0, True) == [], \"test case failed: hann(0, True)\"\nassert hann(5, True) == [0.0, 0.5, 1.0, 0.5, 0.0], \"test case failed: hann(5, True)\"\nassert hann(5, False) == [0.0, 0.3455, 0.9045, 0.9045, 0.3455], \"test case failed: hann(5, False)\"\nassert hann(6, True)[0] == 0.0 and hann(6, True)[-1] == 0.0, \"test case failed: end points not zero for symmetric window\"\nassert abs(sum(hann(10, True))) < 7.0, \"test case failed: unrealistic sum for symmetric window\"\nassert hann(2, False) == [0.0, 1.0], \"test case failed: hann(2, False)\""}
{"task_id": 433, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        receptive_field_size = shape[2] * shape[3]\n        fan_in = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n    else:\n        (fan_in, fan_out) = (shape[0], shape[1])\n    return (float(fan_in), float(fan_out))\nassert glorot_fan((64, 3, 7, 7)) == (147.0, 3136.0), \"failed: glorot_fan((64, 3, 7, 7))\"\nassert glorot_fan((128, 256)) == (128.0, 256.0), \"failed: glorot_fan((128, 256))\"\nassert glorot_fan((256, 128)) == (256.0, 128.0), \"failed: glorot_fan((256, 128))\"\nassert glorot_fan((10, 20, 30)) == (10.0, 20.0), \"failed: glorot_fan((10, 20, 30))\"\nassert glorot_fan((32, 3, 3, 3)) == (27.0, 288.0), \"failed: glorot_fan((32, 3, 3, 3))\"\nassert glorot_fan((1, 1, 1, 1)) == (1.0, 1.0), \"failed: glorot_fan((1, 1, 1, 1))\"\nassert glorot_fan((4, 2, 5, 5)) == (50.0, 100.0), \"failed: glorot_fan((4, 2, 5, 5))\"\nassert glorot_fan((2, 4)) == (2.0, 4.0), \"failed: glorot_fan((2, 4))\"\nassert glorot_fan([5, 6, 7, 8, 9]) == (5.0, 6.0), \"failed: glorot_fan([5, 6, 7, 8, 9])\"\nassert glorot_fan((3, 5, 1, 1)) == (5.0, 3.0), \"failed: glorot_fan((3, 5, 1, 1))\""}
{"task_id": 435, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n    \n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4)] * len(y)\n    alpha = np.mean(y)\n    for _ in range(n_estimators):\n        residuals = y - alpha\n        model = np.linalg.lstsq(np.c_[np.ones(X.shape[0]), X], residuals, rcond=None)[0]\n        ht = X @ model[1:] + model[0]\n        alpha += learning_rate * ht\n    return [round(val, 4) for val in alpha]\nassert gradient_boosting_regressor([[1],[2],[3],[4]],[2,3,4,5],2,0.5) == [2.375,3.125,3.875,4.625], \"failed on test 1\"\nassert gradient_boosting_regressor([[0],[1],[2],[3]],[1,3,5,7],1,1.0) == [1.0,3.0,5.0,7.0], \"failed on test 2\"\nassert gradient_boosting_regressor([[0],[1],[2],[3]],[1,3,5,7],1,0.5) == [2.5,3.5,4.5,5.5], \"failed on test 3\"\nassert gradient_boosting_regressor([[1,0],[0,1],[1,1]],[1,2,3],1,1.0) == [1.0,2.0,3.0], \"failed on test 4\"\nassert gradient_boosting_regressor([[1,2],[3,4]],[5,5],3,0.3) == [5.0,5.0], \"failed on test 5\"\nassert gradient_boosting_regressor([[1],[2]],[1,2],5,0.0) == [1.5,1.5], \"failed on test 6\"\nassert gradient_boosting_regressor([[10],[20],[30]],[3,6,9],0,0.2) == [6.0,6.0,6.0], \"failed on test 7\"\nassert gradient_boosting_regressor([[1],[2],[3]],[2,4,6],-4,0.3) == [4.0,4.0,4.0], \"failed on test 8\"\nassert gradient_boosting_regressor([[0],[1],[2]],[1,3,7],1,1.0) == [0.6667,3.6667,6.6667], \"failed on test 9\"\nassert gradient_boosting_regressor([[0],[0],[0]],[2,4,6],2,0.7) == [4.0,4.0,4.0], \"failed on test 10\""}
{"task_id": 437, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if order not in [0, 1, 2]:\n        return -1\n    x = np.array(x)\n    sigma = 1 / (1 + np.exp(-x))\n    if order == 0:\n        result = sigma\n    elif order == 1:\n        result = sigma * (1 - sigma)\n    else:\n        result = sigma * (1 - sigma) * (1 - 2 * sigma)\n    if np.isscalar(x):\n        return round(float(result), 4)\n    else:\n        return result.round(4).tolist()\nassert sigmoid([-1, 0, 1]) == [0.2689, 0.5, 0.7311], \"test failed: sigmoid([-1,0,1])\"\nassert sigmoid(0) == 0.5, \"test failed: sigmoid(0)\"\nassert sigmoid([0], order=1) == [0.25], \"test failed: sigmoid([0], order=1)\"\nassert sigmoid(0, order=1) == 0.25, \"test failed: sigmoid(0, order=1)\"\nassert sigmoid([0], order=2) == [0.0], \"test failed: sigmoid([0], order=2)\"\nassert sigmoid([-1, 2], order=1) == [0.1966, 0.105], \"test failed: sigmoid([-1,2], order=1)\"\nassert sigmoid([-2, 2], order=2) == [0.08, -0.08], \"test failed: sigmoid([-2,2], order=2)\"\nassert sigmoid(0, order=3) == -1, \"test failed: sigmoid(0, order=3)\"\nassert sigmoid([[0, 1], [-1, -2]]) == [[0.5, 0.7311], [0.2689, 0.1192]], \"test failed: sigmoid(2D array)\"\nassert sigmoid(-1000) == 0.0, \"test failed: sigmoid(-1000)\""}
{"task_id": 438, "completion_id": 0, "passed": false, "result": "failed: zero-size array to reduction operation maximum which has no identity", "solution": "import numpy as np\nimport numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if num_classes < np.max(y) + 1:\n        return -1\n    result = np.zeros((y.size, num_classes), dtype=int)\n    result[np.arange(y.size), y] = 1\n    return result.tolist()\nassert to_categorical([0, 1, 2]) == [[1,0,0], [0,1,0], [0,0,1]], \"failed on basic sequential labels\"\nassert to_categorical([2, 0, 1], 3) == [[0,0,1], [1,0,0], [0,1,0]], \"failed when num_classes given\"\nassert to_categorical([1, 1, 1]) == [[0,1], [0,1], [0,1]], \"failed on identical labels\"\nassert to_categorical([0, 2], 4) == [[1,0,0,0], [0,0,1,0]], \"failed on explicit num_classes > max_label\"\nassert to_categorical([0]) == [[1]], \"failed on single label\"\nassert to_categorical([0, 1, 2], 2) == -1, \"failed on too small num_classes\"\nassert to_categorical([1, 3]) == [[0,1,0,0], [0,0,0,1]], \"failed on non-consecutive labels\"\nimport numpy as np\nassert to_categorical(np.array([3,0,2])) == [[0,0,0,1],[1,0,0,0],[0,0,1,0]], \"failed on numpy input\"\nassert to_categorical([5,4],6) == [[0,0,0,0,0,1],[0,0,0,0,1,0]], \"failed on high labels\"\nassert to_categorical([],0) == [], \"failed on empty input\""}
{"task_id": 439, "completion_id": 0, "passed": false, "result": "failed: failed: basic example", "solution": "import itertools\nimport itertools\ndef apriori_frequent_itemsets(transactions: list[list], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    candidate_itemsets = []\n    for transaction in transactions:\n        for item in transaction:\n            if [item] not in candidate_itemsets:\n                candidate_itemsets.append([item])\n    frequent_itemsets = []\n    for itemset in candidate_itemsets:\n        count = 0\n        for transaction in transactions:\n            if itemset[0] in transaction:\n                count += 1\n        if count / len(transactions) >= min_sup:\n            frequent_itemsets.append(tuple(itemset))\n    k = 2\n    while len(frequent_itemsets) >= k - 1:\n        candidate_itemsets = []\n        for i in range(len(frequent_itemsets)):\n            for j in range(i + 1, len(frequent_itemsets)):\n                if frequent_itemsets[i][:k - 2] == frequent_itemsets[j][:k - 2]:\n                    candidate_itemsets.append(frequent_itemsets[i] + (frequent_itemsets[j][-1],))\n        frequent_itemsets = []\n        for itemset in candidate_itemsets:\n            count = 0\n            for transaction in transactions:\n                if all((item in transaction for item in itemset)):\n                    count += 1\n            if count / len(transactions) >= min_sup:\n                frequent_itemsets.append(itemset)\n        k += 1\n    frequent_itemsets.sort(key=lambda itemset: (len(itemset), itemset))\n    return frequent_itemsets\nassert apriori_frequent_itemsets([[1,2,3],[1,2],[2,3],[1,3]],0.5)==[(1,),(2,),(3,),(1,2),(1,3),(2,3)],\"failed: basic example\"\nassert apriori_frequent_itemsets([],0.5)==[],\"failed: empty dataset\"\nassert apriori_frequent_itemsets([[\"a\",\"b\",\"c\"],[\"a\",\"b\"],[\"a\",\"c\"],[\"b\",\"c\"]],0.75)==[(\"a\",),(\"b\",),(\"c\",)],\"failed: high threshold\"\nassert apriori_frequent_itemsets([[1,2],[1,3],[2,3],[1,2,3]],0.25)==[(1,),(2,),(3,),(1,2),(1,3),(2,3),(1,2,3)],\"failed: very low threshold\"\nassert apriori_frequent_itemsets([[1,2],[3,4],[5,6]],0.34)==[],\"failed: no frequent itemsets across disjoint transactions\"\nassert apriori_frequent_itemsets([[\"x\",\"y\"],[\"x\",\"y\"],[\"x\",\"y\"]],0.2)==[(\"x\",),(\"y\",),(\"x\",\"y\",)],\"failed: every item always occurs\""}
{"task_id": 440, "completion_id": 0, "passed": false, "result": "failed: name 'pred1' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions_np = np.array(predictions)\n    averaged_probabilities = np.mean(predictions_np, axis=0)\n    averaged_probabilities_rounded = np.round(averaged_probabilities, 4)\n    predicted_classes = np.argmax(averaged_probabilities_rounded, axis=1)\n    averaged_probabilities_rounded = averaged_probabilities_rounded.tolist()\n    predicted_classes = predicted_classes.tolist()\n    return (averaged_probabilities_rounded, predicted_classes)\nassert aggregate_predictions(pred1) == ([[0.8, 0.2], [0.3, 0.7]], [0, 1]), \"test case failed: basic example\"\nassert aggregate_predictions(pred2) == ([[0.25, 0.45, 0.3], [0.1, 0.25, 0.65], [0.75, 0.15, 0.1]], [1, 2, 0]), \"test case failed: 3-class aggregation\"\nassert aggregate_predictions(pred3) == ([[0.6, 0.4], [0.3, 0.7]], [0, 1]), \"test case failed: single estimator\"\nassert aggregate_predictions(pred4) == ([[0.125, 0.7, 0.175]], [1]), \"test case failed: four estimators one sample\"\nassert aggregate_predictions(pred5) == ([[0.55, 0.45], [0.45, 0.55]], [0, 1]), \"test case failed: symmetric probabilities\"\nassert aggregate_predictions(pred6) == ([[0.75, 0.25], [0.25, 0.75], [0.55, 0.45], [0.15, 0.85]], [0, 1, 0, 1]), \"test case failed: larger sample size\"\nassert aggregate_predictions(pred7) == ([[0.3333, 0.3333, 0.3333]], [0]), \"test case failed: uniform distribution tie\"\nassert aggregate_predictions(pred8) == ([[0.5, 0.5]], [0]), \"test case failed: exact tie\"\nassert aggregate_predictions(pred9) == ([[0.2, 0.8]], [1]), \"test case failed: five estimators\"\nassert aggregate_predictions(pred10) == ([[0.85, 0.15], [0.45, 0.55], [0.35, 0.65]], [0, 1, 1]), \"test case failed: mixed input\""}
{"task_id": 444, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X = np.array(X)\n    if Y is not None:\n        Y = np.array(Y)\n    if sigma is None:\n        sigma = np.sqrt(X.shape[1] / 2)\n    if isinstance(sigma, float) and sigma <= 0:\n        return -1\n    if isinstance(sigma, list):\n        sigma = np.array(sigma)\n        if sigma.shape[0] != X.shape[1] or np.any(sigma <= 0):\n            return -1\n    if Y is None:\n        Y = X\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    X = np.expand_dims(X, axis=1)\n    Y = np.expand_dims(Y, axis=0)\n    diff = (X - Y) / sigma\n    K = np.exp(-0.5 * np.sum(diff ** 2, axis=2))\n    K = np.round(K, 4)\n    K = K.tolist()\n    return K\nassert rbf_kernel([[1,0],[0,1]], [[1,0],[0,1]], 1.0) == [[1.0, 0.3679], [0.3679, 1.0]], \"Test 1 failed: isotropic \u03c3=1.0\"\nassert rbf_kernel([[1,1],[2,2],[3,3]], None, None) == [[1.0, 0.3679, 0.0183], [0.3679, 1.0, 0.3679], [0.0183, 0.3679, 1.0]], \"Test 3 failed: default \u03c3\"\nassert rbf_kernel([[0,0],[1,1]], [[1,0]], 1.0) == [[0.6065], [0.6065]], \"Test 4 failed: X\u2260Y shapes\"\nassert rbf_kernel([[1,0],[0,1]], None, [2,2]) == [[1.0, 0.7788], [0.7788, 1.0]], \"Test 5 failed: larger anisotropic \u03c3\"\nassert rbf_kernel([[0],[1],[2]], None, 1.0) == [[1.0, 0.6065, 0.1353], [0.6065, 1.0, 0.6065], [0.1353, 0.6065, 1.0]], \"Test 6 failed: 1-D data\"\nassert rbf_kernel([[0,0,0]], None, None) == [[1.0]], \"Test 7 failed: single vector\"\nassert rbf_kernel([[1,2,3]], None, [1,2]) == -1, \"Test 8 failed: wrong \u03c3 length\"\nassert rbf_kernel([[1,2]], None, -1.0) == -1, \"Test 9 failed: negative \u03c3\"\nassert rbf_kernel([[1,2]], None, [1,0]) == -1, \"Test 10 failed: zero in \u03c3 list\""}
{"task_id": 446, "completion_id": 0, "passed": false, "result": "failed: name 'decision_stump' is not defined", "solution": "import numpy as np\nimport numpy as np\nassert decision_stump([[1],[2],[3],[4]],[0,0,1,1])==(0,2.5,0,1),\"failed on simple 1-D split\"\nassert decision_stump([[1,1],[2,1],[3,2],[4,2]],[0,0,1,1])==(0,2.5,0,1),\"failed when two features tie\"\nassert decision_stump([[1],[2]],[1,1])==(-1,None,1,1),\"failed when no split improves gain\"\nassert decision_stump([[0],[1],[2],[3],[4],[5]],[1,1,1,0,0,0])==(0,2.5,1,0),\"failed on mixed labels\"\nassert decision_stump([[10,0],[20,0],[30,1],[40,1]],[0,0,1,1])==(0,25.0,0,1),\"failed on threshold rounding\"\nassert decision_stump([[5,2],[6,2],[7,3],[8,3]],[1,1,0,0])==(0,6.5,1,0),\"failed different labels/values\"\nassert decision_stump([[1,10],[2,20],[3,30],[4,40]],[0,0,1,1])==(0,2.5,0,1),\"failed preference of feature 0 over 1\"\nassert decision_stump([[1,1,1],[2,2,2],[3,3,3],[4,4,4]],[0,0,1,1])==(0,2.5,0,1),\"failed more than two features\"\nassert decision_stump([[1],[1.5],[2],[2.5],[3]], [0,0,0,1,1])==(0,2.25,0,1),\"failed uneven split\"\nassert decision_stump([[1,2],[1,3],[1,4]],[2,2,2])==(-1,None,2,2),\"failed when all labels identical\""}
{"task_id": 452, "completion_id": 0, "passed": false, "result": "failed: test case failed: categorical split", "solution": "import numpy as np\nimport numpy as np\nfrom typing import List, Union\ndef divide_on_feature(X: Union[np.ndarray, List[list]], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    X = np.array(X)\n    mask = X[:, feature_i] >= threshold\n    if isinstance(threshold, str):\n        mask = X[:, feature_i] == threshold\n    subset1 = X[mask].tolist()\n    subset2 = X[~mask].tolist()\n    return [subset1, subset2]\nassert divide_on_feature([[1,5],[3,2],[4,6],[2,1]],0,3) == [[[3,2],[4,6]],[[1,5],[2,1]]], \"test case failed: numeric split >= 3\"\nassert divide_on_feature([[1.0,1],[2.5,3],[2.4,0],[3.1,2]],0,2.5) == [[[2.5,3],[3.1,2]],[[1.0,1],[2.4,0]]], \"test case failed: float threshold\"\nassert divide_on_feature([[1,'A'],[2,'B'],[3,'A'],[4,'C']],1,'A') == [[[1,'A'],[3,'A']],[[2,'B'],[4,'C']]], \"test case failed: categorical split\"\nassert divide_on_feature([[5],[6],[7]],0,10) == [[],[[5],[6],[7]]], \"test case failed: threshold greater than all\"\nassert divide_on_feature([[5],[6],[7]],0,0) == [[[5],[6],[7]],[]], \"test case failed: threshold smaller than all\"\nassert divide_on_feature([[1,2,3]],2,3) == [[[1,2,3]],[]], \"test case failed: single sample equal\"\nassert divide_on_feature([[1,2,3]],2,4) == [[],[[1,2,3]]], \"test case failed: single sample not equal\"\nassert divide_on_feature([[1,'yes'],[2,'no'],[3,'yes']],1,'no') == [[[2,'no']],[[1,'yes'],[3,'yes']]], \"test case failed: exactly one match\"\nassert divide_on_feature([[1.2],[3.4],[5.6],[7.8]],0,5.6) == [[[5.6],[7.8]],[[1.2],[3.4]]], \"test case failed: equality on floats\"\nassert divide_on_feature(np.array([[1,'cat'],[2,'dog'],[3,'cat']],dtype=object),1,'cat') == [[[1,'cat'],[3,'cat']],[[2,'dog']]], \"test case failed: ndarray object dtype\""}
{"task_id": 453, "completion_id": 0, "passed": false, "result": "failed: test 4 failed", "solution": "import numpy as np\nimport numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if not len(Q) == len(Q_next) == len(actions) == len(rewards) == len(dones):\n        return -1\n    if not 0 <= gamma <= 1:\n        return -1\n    y = Q.copy()\n    for i in range(len(Q)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * max(Q_next[i])\n        y[i][actions[i]] = target\n    y = np.round(y, 4).tolist()\n    return y\nimport numpy as np\nassert update_q_values(np.array([[1.0,2.0],[0.5,0.2]]), np.array([[1.5,1.0],[0.4,0.9]]), [1,0], [1.0,0.0], [False,True], 0.99) == [[1.0, 2.485], [0.0, 0.2]], \"test 1 failed\"\nassert update_q_values(np.array([[0.0,0.0]]), np.array([[1.0,2.0]]), [0], [0.5], [False], 1.0) == [[2.5, 0.0]], \"test 2 failed\"\nassert update_q_values(np.array([[1,2,3]]), np.array([[3,2,1]]), [2], [1.0], [False], 0.9) == [[1.0, 2.0, 3.7]], \"test 4 failed\"\nassert update_q_values(np.array([[0.2,0.3],[0.4,0.5]]), np.array([[0.0,0.0],[0.0,0.0]]), [0,1], [0.0,0.0], [True,True], 0.99) == [[0.0, 0.3], [0.4, 0.0]], \"test 5 failed\"\nassert update_q_values(np.array([[0.0,0.0]]), np.array([[0.0,0.0]]), [0], [0.0], [True], 0.0) == [[0.0, 0.0]], \"test 6 failed\"\nassert update_q_values(np.array([[1.0,2.0]]), np.array([[1.0,2.0]]), [1], [1.0], [False], 0.0) == [[1.0, 1.0]], \"test 7 failed\"\nassert update_q_values(np.array([[1.0,2.0]]), np.array([[1.0,2.0]]), [1], [1.0], [False], 1.0) == [[1.0, 3.0]], \"test 8 failed\"\nassert update_q_values(np.array([[1.0,1.0]]), np.array([[1.0,1.0,1.0]]), [0], [0.0], [True], 0.9) == -1, \"test 10 failed\""}
{"task_id": 458, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.UnionType' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    if num_classes < max(labels) + 1 or any((label < 0 for label in labels)):\n        return -1\n    categorical = np.zeros((len(labels), num_classes), dtype=int)\n    for (i, label) in enumerate(labels):\n        categorical[i, label] = 1\n    return categorical.tolist()\nassert to_categorical([0, 2, 1, 3], 4) == [[1,0,0,0],[0,0,1,0],[0,1,0,0],[0,0,0,1]], \"test case failed: to_categorical([0, 2, 1, 3], 4)\"\nassert to_categorical(np.array([1,1,1]), None) == [[0,1],[0,1],[0,1]], \"test case failed: to_categorical(np.array([1,1,1]), None)\"\nassert to_categorical([2,0,1], 3) == [[0,0,1],[1,0,0],[0,1,0]], \"test case failed: to_categorical([2,0,1], 3)\"\nassert to_categorical([3,2,4], 5) == [[0,0,0,1,0],[0,0,1,0,0],[0,0,0,0,1]], \"test case failed: to_categorical([3,2,4], 5)\"\nassert to_categorical([], 0) == [], \"test case failed: to_categorical([], 0)\"\nassert to_categorical([0], None) == [[1]], \"test case failed: to_categorical([0], None)\"\nassert to_categorical([9,8,7,6,5], None) == [[0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,1,0,0,0,0]], \"test case failed: labels 9..5\"\nassert to_categorical([1,0,1,0], 2) == [[0,1],[1,0],[0,1],[1,0]], \"test case failed: alternating labels\"\nassert to_categorical([0,0,0], 1) == [[1],[1],[1]], \"test case failed: single class\"\nassert to_categorical([2,1], 2) == -1, \"test case failed: num_classes too small\""}
{"task_id": 461, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    (x, y) = (np.array(x), np.array(y))\n    y_pred = np.full(y.shape, np.mean(y))\n    if n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        split_values = np.unique(x)\n        best_split = None\n        best_sse = np.inf\n        for t in split_values:\n            indices_left = np.where(x <= t)[0]\n            indices_right = np.where(x > t)[0]\n            if len(indices_left) == 0 or len(indices_right) == 0:\n                continue\n            v_L = np.mean(residuals[indices_left])\n            v_R = np.mean(residuals[indices_right])\n            sse = np.sum(np.square(residuals[indices_left] - v_L)) + np.sum(np.square(residuals[indices_right] - v_R))\n            if sse < best_sse:\n                best_sse = sse\n                best_split = (t, v_L, v_R)\n        if best_split is None:\n            best_split = (None, np.mean(residuals))\n        (t, v_L, v_R) = best_split\n        y_pred += learning_rate * np.where(x <= t, v_L, v_R)\n    return np.round(y_pred, 4).tolist()\nassert gradient_boosting_regressor([1, 2], [1, 2], 1, 1.0) == [1.0, 2.0], \"failed case: ([1,2],[1,2],1,1.0)\"\nassert gradient_boosting_regressor([1, 2], [1, 3], 1, 1.0) == [1.0, 3.0], \"failed case: ([1,2],[1,3],1,1.0)\"\nassert gradient_boosting_regressor([1, 2, 3], [2, 2, 2], 1, 1.0) == [2.0, 2.0, 2.0], \"failed case: ([1,2,3],[2,2,2],1,1.0)\"\nassert gradient_boosting_regressor([1, 2, 3, 4], [4, 3, 2, 1], 1, 1.0) == [3.5, 3.5, 1.5, 1.5], \"failed case: descending targets\"\nassert gradient_boosting_regressor([1, 2], [2, 4], 2, 0.5) == [2.25, 3.75], \"failed case: two iterations, shrinkage 0.5\"\nassert gradient_boosting_regressor([1, 2], [1, 2], 0, 0.5) == [1.5, 1.5], \"failed case: n_estimators == 0\"\nassert gradient_boosting_regressor([1, 1, 2, 2], [1, 1, 3, 3], 1, 1.0) == [1.0, 1.0, 3.0, 3.0], \"failed case: repeated feature values\"\nassert gradient_boosting_regressor([1, 2, 3, 4], [2, 2, 2, 10], 2, 1.0) == [2.0, 2.0, 2.0, 10.0], \"failed case: perfect fit in first round\"\nassert gradient_boosting_regressor([1, 2, 3], [1, 2, 4], 1, 0.5) == [1.9167, 1.9167, 3.1667], \"failed case: fractional shrinkage\"\nassert gradient_boosting_regressor([1, 2, 3, 4, 5], [3, 3, 3, 3, 3], 3, 0.3) == [3.0, 3.0, 3.0, 3.0, 3.0], \"failed case: constant targets\""}
{"task_id": 471, "completion_id": 0, "passed": false, "result": "failed: test2 failed", "solution": "import numpy as np\nimport numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    if next_state is None:\n        target = reward\n    else:\n        greedy_actions = [i for (i, val) in enumerate(q_table[next_state]) if val == max(q_table[next_state])]\n        expectation = sum([1 - epsilon + epsilon / len(q_table[next_state]) if i in greedy_actions else epsilon / len(q_table[next_state]) * q_table[next_state][i] for i in range(len(q_table[next_state]))])\n        target = reward + gamma * expectation\n    q_table[state][action] += lr * (target - q_table[state][action])\n    q_table = [[round(val, 4) for val in row] for row in q_table]\n    return q_table\nassert expected_sarsa_update([[0,0],[0,0]],0,0,1,None,0.2,0.5,1.0)==[[0.5,0.0],[0.0,0.0]],\"test1 failed\"\nassert expected_sarsa_update([[0.5,0.2,0.1],[0.3,0.4,0.1]],0,1,1.0,1,0.1,0.4,0.99)==[[0.5,0.6731,0.1],[0.3,0.4,0.1]],\"test2 failed\"\nassert expected_sarsa_update([[1,2,3,4],[0.1,0.2,0.3,0.4]],1,2,2,0,0.0,1.0,0.5)==[[1,2,3,4],[0.1,0.2,4.0,0.4]],\"test3 failed\"\nassert expected_sarsa_update([[0.1,0.1],[0.5,0.5]],0,1,0,1,0.3,0.5,1.0)==[[0.1,0.3],[0.5,0.5]],\"test4 failed\"\nassert expected_sarsa_update([[0,1],[2,3]],1,0,-1,0,0.5,0.25,0.9)==[[0,1],[1.4188,3]],\"test5 failed\"\nassert expected_sarsa_update([[0.8,0.3]],0,0,0.5,None,0.2,0.3,0.9)==[[0.71,0.3]],\"test6 failed\"\nassert expected_sarsa_update([[0,0,0]],0,2,5,0,0.9,1.0,0.0)==[[0,0,5.0]],\"test7 failed\"\nassert expected_sarsa_update([[1,1]],0,0,0,0,0.0,0.5,1.0)==[[1,1]],\"test8 failed\"\nassert expected_sarsa_update([[1,2,3]],0,1,1,0,1.0,0.5,1.0)==[[1,2.5,3]],\"test9 failed\"\nassert expected_sarsa_update([[0.4,0.2,0.6,0.0],[1,1,1,1]],0,3,0,1,0.3,0.2,0.95)==[[0.4,0.2,0.6,0.19],[1,1,1,1]],\"test10 failed\""}
{"task_id": 474, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport random\nimport numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = np.empty((m * n_train, 2))\n    Y_train = np.empty(m * n_train)\n    X_val = np.empty((m * n_val, 2))\n    Y_val = np.empty(m * n_val)\n    for i in range(m):\n        x_min = np.floor(i / 2) + 0.1\n        x_max = np.floor(i / 2) + 0.9\n        y_min = i % 2 * interval + 0.1\n        y_max = i % 2 * interval + 0.9\n        for j in range(n_train):\n            X_train[i * n_train + j, 0] = round(random.uniform(x_min, x_max) * 10, 4)\n            X_train[i * n_train + j, 1] = round(random.uniform(y_min, y_max) * 10, 4)\n            Y_train[i * n_train + j] = round((i - 0.5) * 2, 4)\n        for j in range(n_val):\n            X_val[i * n_val + j, 0] = round(random.uniform(x_min, x_max) * 10, 4)\n            X_val[i * n_val + j, 1] = round(random.uniform(y_min, y_max) * 10, 4)\n            Y_val[i * n_val + j] = round((i - 0.5) * 2, 4)\n    return (X_train, X_val, Y_train, Y_val)\nassert generate_data(2, 2, 1, 1, seed=0)[0].tolist() == [[7.7554, 7.0636], [4.3646, 3.0713], [7.2704, 13.4265], [4.8128, 15.6671]], \"test case failed: generate_data(2,2,1,1,seed=0) \u2013 X_train\"\nassert generate_data(2, 1, 1, 1, seed=1)[2].tolist() == [-1, 1], \"test case failed: generate_data(2,1,1,1,seed=1) \u2013 Y_train\"\nassert generate_data(2, 3, 0, 1, seed=0)[0].shape == (6, 2), \"test case failed: generate_data(2,3,0,1,seed=0) \u2013 shapes\"\nassert generate_data(3, 2, 1, 0.5, seed=3)[2].shape == (6,), \"test case failed: generate_data(3,2,1,0.5,seed=3) \u2013 label shape\"\nassert generate_data(4, 1, 0, 1, seed=4)[1].size == 0, \"test case failed: generate_data(4,1,0,1,seed=4) \u2013 empty validation\"\nassert len(set(generate_data(5, 2, 2, 1, seed=6)[2].tolist())) == 5, \"test case failed: unique labels\"\nassert not np.array_equal(generate_data(2, 2, 0, 1, seed=7)[0], generate_data(2, 2, 0, 1, seed=8)[0]), \"test case failed: different seeds\"\nassert generate_data(2, 5, 0, 3, seed=9)[0][generate_data(2, 5, 0, 3, seed=9)[2]==1][:,1].min() - generate_data(2, 5, 0, 3, seed=9)[0][generate_data(2, 5, 0, 3, seed=9)[2]==-1][:,1].max() >= 20, \"test case failed: interval separation\"\nassert isinstance(generate_data(2, 1, 1, 1, seed=10)[0], np.ndarray), \"test case failed: return type\"\nassert generate_data(2, 1, 1, 1, seed=0)[0].dtype == float, \"test case failed: dtype check\""}
{"task_id": 475, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * np.square(grad)\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)\nimport numpy as np\nassert np.allclose(adam_update(1.0, 0.1, 0.0, 0.0, 1)[0], 0.999000001, atol=1e-8), \"failed: scalar, t=1, positive grad\"\nassert np.allclose(adam_update(1.0, -0.1, 0.0, 0.0, 1)[0], 1.000999999, atol=1e-8), \"failed: scalar, t=1, negative grad\"\nw_vec, m_vec, v_vec = adam_update(np.array([1.0, -1.0]), np.array([0.2, -0.2]), np.zeros(2), np.zeros(2), 1)\nassert np.allclose(w_vec, np.array([0.999, -0.999]), atol=1e-8), \"failed: vector, t=1\"\nassert np.allclose(adam_update(1.0, 0.1, 0.0, 0.0, 1, learning_rate=0.01)[0], 0.990000001, atol=1e-8), \"failed: different learning rate\"\nassert np.allclose(adam_update(1.0, 0.0, 0.0, 0.0, 1)[0], 1.0, atol=1e-12), \"failed: zero gradient gives no update\"\nw6, m6, v6 = adam_update(2.5, -0.5, 0.0, 0.0, 1)\nassert np.allclose([w6, m6, v6], [2.501, -0.05, 0.00025], atol=1e-8), \"failed: scalar, large grad\"\nw7, m7, v7 = adam_update(0.999000001, 0.1, 0.01, 1e-5, 2)\nassert np.allclose([w7, m7, v7[...]], [0.998000002, 0.019, 1.999e-5], atol=1e-8), \"failed: scalar, t=2\"\nvec_prev_m = np.array([0.02, -0.02])\nvec_prev_v = np.array([4e-5, 4e-5])\nwv, mv, vv = adam_update(np.array([0.999, -0.999]), np.array([0.2, -0.2]), vec_prev_m, vec_prev_v, 2)\nassert np.allclose(wv, np.array([0.998, -0.998]), atol=1e-8), \"failed: vector, t=2\"\nassert np.allclose(adam_update(5.0, 0.0, None, None, 3)[1:], (0.0, 0.0), atol=1e-12), \"failed: None moments treated as zeros\""}
{"task_id": 479, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    arm_values = [ev_prior] * len(rewards[0])\n    pull_counters = [0] * len(rewards[0])\n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            arm = np.random.choice(len(rewards[0]))\n        else:\n            arm = np.argmax(arm_values)\n        reward = rewards[t][arm]\n        arm_values[arm] += (reward - arm_values[arm]) / (pull_counters[arm] + 1)\n        pull_counters[arm] += 1\n    return [round(value, 4) for value in arm_values]\nassert epsilon_greedy_bandit([[1,0,0],[0,1,0],[1,0,0],[0,1,0],[1,0,0]],0,0.5,42) == [0.6,0.5,0.5], \"test case 1 failed\"\nassert epsilon_greedy_bandit([[0,1],[0,1],[0,1]],0,0) == [0.0,0.0], \"test case 2 failed\"\nassert epsilon_greedy_bandit([[1,0],[1,0],[1,0]],0,0.5) == [1.0,0.5], \"test case 3 failed\"\nassert epsilon_greedy_bandit([[0,0,1],[0,1,0],[1,0,0]],0,0) == [0.3333,0.0,0.0], \"test case 4 failed\"\nassert epsilon_greedy_bandit([[0,0],[0,1],[0,1],[0,1]],0,0.1) == [0.0,1.0], \"test case 5 failed\"\nassert epsilon_greedy_bandit([[1],[0],[1],[1],[1]],0,0.5) == [0.8], \"test case 6 failed\"\nassert epsilon_greedy_bandit([[0,0,0],[0,0,1],[0,1,0],[0,0,1]],0,0.0) == [0.0,0.0,0.0], \"test case 7 failed\"\nassert epsilon_greedy_bandit([[0.5,1.0,0.2,0.2]],0,0.5) == [0.5,0.5,0.5,0.5], \"test case 8 failed\"\nassert epsilon_greedy_bandit([[0,0],[0,0]],0,0.7) == [0.0,0.0], \"test case 9 failed\"\nassert epsilon_greedy_bandit([[1,1]],0,0.5) == [1.0,0.5], \"test case 10 failed\""}
{"task_id": 481, "completion_id": 0, "passed": false, "result": "failed: name 'expand_cluster' is not defined", "solution": "import numpy as np\nimport numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    labels = np.full(data.shape[0], fill_value=-1)\n    cluster_id = 0\n    for point_id in range(data.shape[0]):\n        if labels[point_id] != -1:\n            continue\n        neighbors = get_neighbors(data, point_id, eps)\n        if len(neighbors) < min_samples:\n            continue\n        labels[point_id] = cluster_id\n        expand_cluster(data, labels, cluster_id, neighbors, eps, min_samples)\n        cluster_id += 1\n    return labels.tolist()\ndef get_neighbors(data: np.ndarray, point_id: int, eps: float) -> list[int]:\n    \"\"\"Get neighbors of *point* within *eps* radius.\"\"\"\n    distances = np.linalg.norm(data - data[point_id], axis=1)\n    return np.where(distances <= eps)[0].tolist()\nassert dbscan(np.array([[1,1],[1.1,1.1],[0.9,1],[5,5],[5.2,5.1],[4.9,5],[8,0]]),0.3,2)==[0,0,0,1,1,1,-1],\"test case failed: example dataset\"\nassert dbscan(np.array([[0,0],[0.1,0],[0.05,0.05],[0.2,0.2]]),0.25,1)==[0,0,0,0],\"test case failed: single cluster with min_samples=1\"\nassert dbscan(np.array([[0,0],[5,5],[10,10]]),0.5,2)==[-1,-1,-1],\"test case failed: all noise\"\nassert dbscan(np.empty((0,2)),0.5,2)==[],\"test case failed: empty dataset\"\nassert dbscan(np.array([[0,0],[0,0],[0,0]]),0.01,2)==[0,0,0],\"test case failed: duplicate points cluster\"\nassert dbscan(np.array([[0,0],[0,1],[0,2],[0,3]]),1.1,2)==[0,0,0,0],\"test case failed: linear chain cluster\"\nassert dbscan(np.array([[0,0],[3,3],[0.1,0.1],[3.1,3.1],[6,6]]),0.25,2)==[0,1,0,1,-1],\"test case failed: two small clusters plus noise\"\nassert dbscan(np.array([[0,0],[0.05,0.05],[2,2],[2.05,2.05]]),0.1,2)==[0,0,1,1],\"test case failed: two tight clusters\""}
{"task_id": 482, "completion_id": 0, "passed": false, "result": "failed: arrays used as indices must be of integer (or boolean) type", "solution": "import numpy as np\nimport numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError('Invalid label(s) found. Labels must be non-negative and smaller than num_classes.')\n    one_hot = np.zeros((len(y), num_classes), dtype=int)\n    one_hot[np.arange(len(y)), y] = 1\n    return one_hot\nassert (to_categorical([0, 1, 2]) == np.array([[1,0,0],[0,1,0],[0,0,1]])).all(), \"failed: basic consecutive labels\"\nassert (to_categorical(np.array([2,0,1,2])) == np.array([[0,0,1],[1,0,0],[0,1,0],[0,0,1]])).all(), \"failed: shuffled labels\"\nassert (to_categorical([0,1,2], num_classes=5) == np.array([[1,0,0,0,0],[0,1,0,0,0],[0,0,1,0,0]])).all(), \"failed: extra unused columns\"\nassert (to_categorical([4], num_classes=5) == np.array([[0,0,0,0,1]])).all(), \"failed: single element\"\nassert (to_categorical((3,3,3)) == np.array([[0,0,0,1],[0,0,0,1],[0,0,0,1]])).all(), \"failed: tuple input\"\nassert (to_categorical(np.arange(6)) == np.eye(6, dtype=int)).all(), \"failed: arange sequence\"\nassert (to_categorical([1,1,1,1]) == np.array([[0,1],[0,1],[0,1],[0,1]])).all(), \"failed: duplicate labels\"\nassert to_categorical([], num_classes=0).shape == (0,0), \"failed: empty input with explicit classes\"\ntry:\n    to_categorical([0,2], num_classes=2)\n    assert False, \"failed: did not raise on out-of-range label\"\nexcept ValueError:\n    pass\ntry:\n    to_categorical([-1,0,1])\n    assert False, \"failed: did not raise on negative label\"\nexcept ValueError:\n    pass"}
{"task_id": 485, "completion_id": 0, "passed": false, "result": "failed: '<' not supported between instances of 'list' and 'float'", "solution": "import numpy as np\nimport numpy as np\nclass Node:\n\n    def __init__(self, X, y, depth):\n        self.X = X\n        self.y = y\n        self.depth = depth\n        self.left = None\n        self.right = None\n        self.split_value = None\n        self.prediction = None\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    if not X_train:\n        return []\n    root = Node(X_train, y_train, 0)\n    stack = [root]\n    while stack:\n        node = stack.pop()\n        if node.depth < max_depth and len(node.X) >= 2:\n            node.split_value = find_split(node.X, node.y)\n            (left_X, right_X, left_y, right_y) = split_data(node.X, node.y, node.split_value)\n            node.left = Node(left_X, left_y, node.depth + 1)\n            node.right = Node(right_X, right_y, node.depth + 1)\n            stack.append(node.right)\n            stack.append(node.left)\n        else:\n            node.prediction = np.mean(node.y)\n    predictions = []\n    for x in X_test:\n        node = root\n        while node.left and node.right:\n            if x < node.split_value:\n                node = node.left\n            else:\n                node = node.right\n        predictions.append(node.prediction)\n    return predictions\ndef find_split(X, y):\n    split_values = [(X[i] + X[i + 1]) / 2 for i in range(len(X) - 1)]\n    min_sse = float('inf')\n    min_split = None\n    for split in split_values:\n        (left_X, right_X, left_y, right_y) = split_data(X, y, split)\n        sse = sum((np.mean(left_y) - left_y) ** 2) + sum((np.mean(right_y) - right_y) ** 2)\n        if sse < min_sse:\n            min_sse = sse\n            min_split = split\n    return min_split\ndef split_data(X, y, split):\n    left_mask = X < split\n    right_mask = X >= split\n    left_X = X[left_mask]\n    right_X = X[right_mask]\n    left_y = y[left_mask]\n    right_y = y[right_mask]\n    return (left_X, right_X, left_y, right_y)\nassert regression_tree_predict([1,2,3,4,5,6,7], [2,2,2,8,8,8,8], [2,3,5,7], 1) == [2.0,2.0,8.0,8.0], \"Failed test 1 \u2013 description example\"\nassert regression_tree_predict([1,2,3,4], [1,1,3,3], [1,3,4], 1) == [1.0,3.0,3.0], \"Failed test 2 \u2013 perfect binary split\"\nassert regression_tree_predict([1,2,3,4], [1,2,3,4], [1,3,4], 3) == [1.0,3.0,4.0], \"Failed test 3 \u2013 deeper splits\"\nassert regression_tree_predict([0,1,2,3], [5,5,5,5], [0,2,3], 2) == [5.0,5.0,5.0], \"Failed test 4 \u2013 constant target\"\nassert regression_tree_predict([], [], [1,2,3], 1) == [], \"Failed test 5 \u2013 empty training data\"\nassert regression_tree_predict([1,1,2,2,3,3], [1,1,2,2,3,3], [1.1,2.1,3.1], 2) == [1.0,2.0,3.0], \"Failed test 6 \u2013 duplicate X values\"\nassert regression_tree_predict([1,2,3,10,11,12], [1,1,1,2,2,2], [2,11], 4) == [1.0,2.0], \"Failed test 7 \u2013 two clusters\"\nassert regression_tree_predict([5,6], [7,9], [5,6], 5) == [7.0,9.0], \"Failed test 8 \u2013 tiny dataset\"\nassert regression_tree_predict([1,2,3], [3,4,5], [1,2,3], 0) == [4.0,4.0,4.0], \"Failed test 9 \u2013 depth 0\"\nassert regression_tree_predict([4,1,3,2], [4,1,3,2], [1,2,3,4], 2) == [1.0,2.0,3.0,4.0], \"Failed test 10 \u2013 unsorted inputs\""}
{"task_id": 490, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.UnionType' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if len(x) == 0:\n        return []\n    else:\n        return np.diag(x).tolist()\nassert make_diagonal([1, 2, 3]) == [[1, 0, 0], [0, 2, 0], [0, 0, 3]], \"test case failed: make_diagonal([1, 2, 3])\"\nassert make_diagonal([5]) == [[5]], \"test case failed: make_diagonal([5])\"\nassert make_diagonal([]) == [], \"test case failed: make_diagonal([])\"\nassert make_diagonal((0, 0, 0, 0)) == [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], \"test case failed: make_diagonal((0, 0, 0, 0))\"\nassert make_diagonal(np.array([3.5, -2.1])) == [[3.5, 0.0], [0.0, -2.1]], \"test case failed: make_diagonal(np.array([3.5, -2.1]))\"\nassert make_diagonal([1, -1, 1, -1]) == [[1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, -1]], \"test case failed: make_diagonal([1, -1, 1, -1])\"\nassert make_diagonal(np.arange(4)) == [[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]], \"test case failed: make_diagonal(np.arange(4))\"\nassert make_diagonal([1.1, 2.2, 3.3]) == [[1.1, 0.0, 0.0], [0.0, 2.2, 0.0], [0.0, 0.0, 3.3]], \"test case failed: make_diagonal([1.1, 2.2, 3.3])\"\nassert make_diagonal(tuple(range(6))) == [[0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0], [0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 4, 0], [0, 0, 0, 0, 0, 5]], \"test case failed: make_diagonal(tuple(range(6)))\"\nassert make_diagonal(np.array([])) == [], \"test case failed: make_diagonal(np.array([]))\""}
{"task_id": 491, "completion_id": 0, "passed": false, "result": "failed: name 'get_frequent_itemsets' is not defined", "solution": "from collections import Counter, defaultdict\nimport itertools\nfrom collections import Counter, defaultdict\nimport itertools\nclass FPNode(object):\n    \"\"\"A node in an FP tree.\"\"\"\n\n    def __init__(self, value, count, parent):\n        self.value = value\n        self.count = count\n        self.parent = parent\n        self.link = None\n        self.children = []\n\n    def has_child(self, value):\n        for child in self.children:\n            if child.value == value:\n                return child\n        return None\n\n    def add_child(self, value):\n        child = FPNode(value, 1, self)\n        self.children.append(child)\n        return child\ndef build_FP_tree(transactions, min_sup):\n    items = get_frequent_items(transactions, min_sup)\n    FP_tree = FPNode(None, 1, None)\n    for transaction in transactions:\n        sorted_transaction = [item for item in transaction if item in items]\n        sorted_transaction.sort(key=lambda item: items[item], reverse=True)\n        parent = FP_tree\n        for item in sorted_transaction:\n            child = parent.has_child(item)\n            if child is not None:\n                child.count += 1\n            else:\n                child = parent.add_child(item)\n            parent = child\n    return (FP_tree, items)\ndef get_frequent_items(transactions, min_sup):\n    items = {}\n    for transaction in transactions:\n        for item in transaction:\n            if item in items:\n                items[item] += 1\n            else:\n                items[item] = 1\n    for key in list(items.keys()):\n        if items[key] < min_sup:\n            items.pop(key)\n    return items\ndef fp_growth(transactions, min_sup):\n    (FP_tree, items) = build_FP_tree(transactions, min_sup)\n    frequent_itemsets = []\n    get_frequent_itemsets(FP_tree, items, min_sup, set(), frequent_itemsets)\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return [tuple(sorted(itemset)) for itemset in frequent_itemsets]\ntransactions = [['A', 'B', 'D', 'E'], ['B', 'C', 'E'], ['A', 'B', 'D', 'E'], ['A', 'B', 'C', 'E'], ['A', 'B', 'C', 'D', 'E'], ['B', 'C', 'D']]\nmin_sup = 3\nassert fp_growth([['A','B','D','E'],['B','C','E'],['A','B','D','E'],['A','B','C','E'],['A','B','C','D','E'],['B','C','D']],3)==[('A',),('B',),('C',),('D',),('E',),('A','B'),('A','D'),('A','E'),('B','C'),('B','D'),('B','E'),('C','E'),('D','E'),('A','B','D'),('A','B','E'),('A','D','E'),('B','C','E'),('B','D','E'),('A','B','D','E')],\"failed on classic example\"\nassert fp_growth([['milk','bread'],['bread','butter'],['milk','bread','butter'],['bread'],['milk','bread']],3)==[('bread',),('milk',),('bread','milk')],\"failed on bread/milk example\"\nassert fp_growth([[1],[2],[3]],2)==[],\"failed on no frequent items\"\nassert fp_growth([[1,2],[1,2],[1,2]],1)==[(1,),(2,),(1,2)],\"failed on min_sup 1\"\nassert fp_growth([[1,2,3,4]],1)==[(1,),(2,),(3,),(4,),(1,2),(1,3),(1,4),(2,3),(2,4),(3,4),(1,2,3),(1,2,4),(1,3,4),(2,3,4),(1,2,3,4)],\"failed on single transaction\"\nassert fp_growth([[1,2,3],[1,2,3],[1,2,3]],3)==[(1,),(2,),(3,),(1,2),(1,3),(2,3),(1,2,3)],\"failed on identical transactions\"\nassert fp_growth([[1,2],[2,3],[1,3],[1,2,3]],2)==[(1,),(2,),(3,),(1,2),(1,3),(2,3)],\"failed on triangle dataset\"\nassert fp_growth([[\"x\",\"y\"],[\"x\",\"z\"],[\"y\",\"z\"],[\"x\",\"y\",\"z\"]],2)==[(\"x\",),(\"y\",),(\"z\",),(\"x\",\"y\"),(\"x\",\"z\"),(\"y\",\"z\")],\"failed on string xyz\"\nassert fp_growth([],2)==[],\"failed on empty transaction list\""}
{"task_id": 492, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\nimport numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    out = np.ones((n_samples, 1))\n    for d in range(1, degree + 1):\n        start_idx = len(out[0])\n        for feat_idx in combinations_with_replacement(range(n_features), d):\n            out = np.c_[out, np.prod(X[:, feat_idx], axis=1)]\n    return out.tolist()\nX = [[1, 2], [3, 4], [5, 6]]\ndegree = 2\nassert polynomial_features([[2, 3]], 2) == [[1, 2.0, 3.0, 4.0, 6.0, 9.0]], \"test case failed: ([[2,3]],2)\"\nassert polynomial_features([[1, 2], [3, 4]], 1) == [[1, 1.0, 2.0], [1, 3.0, 4.0]], \"test case failed: ([[1,2],[3,4]],1)\"\nassert polynomial_features([[1], [2], [3]], 3) == [[1, 1.0, 1.0, 1.0], [1, 2.0, 4.0, 8.0], [1, 3.0, 9.0, 27.0]], \"test case failed: ([[1],[2],[3]],3)\"\nassert polynomial_features([[5, 0], [0, 5]], 0) == [[1], [1]], \"test case failed: ([[5,0],[0,5]],0)\"\nassert polynomial_features([[0, 0]], 3) == [[1] + [0.0]*9], \"test case failed: ([[0,0]],3)\"\nassert polynomial_features([[1, 2, 3]], 2) == [[1, 1.0, 2.0, 3.0, 1.0, 2.0, 3.0, 4.0, 6.0, 9.0]], \"test case failed: ([[1,2,3]],2)\"\nassert polynomial_features([[1, 2]], -1) == -1, \"test case failed: negative degree\"\nassert polynomial_features([[0.5, 1.5]], 2) == [[1, 0.5, 1.5, 0.25, 0.75, 2.25]], \"test case failed: ([[0.5,1.5]],2)\"\nassert polynomial_features([[1, 2], [3, 4], [5, 6]], 2) == [[1, 1.0, 2.0, 1.0, 2.0, 4.0], [1, 3.0, 4.0, 9.0, 12.0, 16.0], [1, 5.0, 6.0, 25.0, 30.0, 36.0]], \"test case failed: ([[1,2],[3,4],[5,6]],2)\"\nassert polynomial_features([[2, 1]], 3) == [[1, 2.0, 1.0, 4.0, 2.0, 1.0, 8.0, 4.0, 2.0, 1.0]], \"test case failed: ([[2,1]],3)\""}
{"task_id": 493, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if isinstance(y, list):\n        y = np.array(y)\n    if y.size == 0:\n        return -1\n    avg = np.mean(y)\n    mse = np.mean((y - avg) ** 2)\n    return round(mse, 4)\nassert mse([1, 2, 3]) == 0.6667, \"failed on mse([1, 2, 3])\"\nassert mse(np.array([0, 0, 0])) == 0.0, \"failed on mse([0,0,0])\"\nassert mse([-1, 1]) == 1.0, \"failed on mse([-1,1])\"\nassert mse([5]) == 0.0, \"failed on mse([5])\"\nassert mse([1, 3, 5, 7]) == 5.0, \"failed on mse([1,3,5,7])\"\nassert mse([2.5, 2.5, 2.5, 2.5]) == 0.0, \"failed on identical values\"\nassert mse(np.arange(10)) == 8.25, \"failed on np.arange(10)\"\nassert mse([]) == -1, \"failed on empty list\"\nassert mse(np.array([])) == -1, \"failed on empty np.array\"\nassert mse([100, -100, 0]) == 6666.6667, \"failed on mse([100,-100,0])\""}
{"task_id": 496, "completion_id": 0, "passed": false, "result": "failed: failed on ([-1,0,1],0.5,-1)", "solution": "import numpy as np\nimport numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x)\n    y = slope * x + intercept\n    y = np.round(y, 4)\n    grad = np.full_like(x, slope)\n    grad2 = np.zeros_like(x)\n    return (y.tolist(), grad.tolist(), grad2.tolist())\nx = [1, 2, 3, 4, 5]\nslope = 2.0\nintercept = 1.0\nassert apply_affine([0, 1, 2], 2, 1) == ([1.0, 3.0, 5.0], [2.0, 2.0, 2.0], [0.0, 0.0, 0.0]), \"failed on ([0,1,2],2,1)\"\nassert apply_affine([-1, 0, 1], 0.5, -1) == ([-1.5, -1.0, -0.5], [0.5, 0.5, 0.5], [0.0, 0.0, 0.0]), \"failed on ([-1,0,1],0.5,-1)\"\nassert apply_affine([4]) == ([4.0], [1.0], [0.0]), \"failed on default params ([4])\"\nassert apply_affine([2, 4], -1, 0) == ([-2.0, -4.0], [-1.0, -1.0], [0.0, 0.0]), \"failed on negative slope\"\nassert apply_affine([0.1, 0.2], 3.3333, 0) == ([0.3333, 0.6667], [3.3333, 3.3333], [0.0, 0.0]), \"failed on fractional slope\"\nassert apply_affine([10, 20, 30], 0, 5) == ([5.0, 5.0, 5.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]), \"failed on zero slope\"\nassert apply_affine([1000, -1000], 0.1, 10) == ([110.0, -90.0], [0.1, 0.1], [0.0, 0.0]), \"failed on large magnitude inputs\"\nassert apply_affine([-7], -0.25, 2) == ([3.75], [-0.25], [0.0]), \"failed on single element negative slope\"\nassert apply_affine([0, 0, 0], 3, -2) == ([-2.0, -2.0, -2.0], [3.0, 3.0, 3.0], [0.0, 0.0, 0.0]), \"failed on zeros input\""}
{"task_id": 499, "completion_id": 0, "passed": false, "result": "failed: test case failed: basic 2D, k=1", "solution": "import numpy as np\nimport numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    (n_samples, n_features) = data.shape\n    if k < 1 or k > n_features:\n        return -1\n    data = (data - np.mean(data, axis=0)) / np.std(data, axis=0, ddof=1)\n    data[np.isnan(data)] = 0\n    cov_matrix = np.cov(data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eig(cov_matrix)\n    idx = eigenvalues.argsort()[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    eigenvectors = np.sign(np.diag(eigenvectors)) * eigenvectors\n    projection = np.dot(data, eigenvectors[:, :k])\n    return np.round(projection, 4).tolist()\nassert pca_transform(np.array([[1, 2], [3, 4], [5, 6]]), 1) == [[-1.7321], [0.0], [1.7321]], \"test case failed: basic 2D, k=1\"\nassert pca_transform(np.array([[1, 2], [3, 4], [5, 6]]), 2) == [[-1.7321, 0.0], [0.0, 0.0], [1.7321, 0.0]], \"test case failed: basic 2D, k=2\"\nassert pca_transform(np.array([[1, 0], [0, 1]]), 1) == [[1.4142], [-1.4142]], \"test case failed: identity subset, k=1\"\nassert pca_transform(np.array([[2, 2], [2, 2]]), 1) == [[0.0], [0.0]], \"test case failed: zero variance, k=1\"\nassert pca_transform(np.array([[1, 0], [0, 1]]), 3) == -1, \"test case failed: k greater than features\"\nassert pca_transform(np.array([[1, 0], [0, 1]]), 0) == -1, \"test case failed: k equals zero\"\nassert pca_transform(np.array([[0, 0], [1, 1]]), 1) == [[-1.4142], [1.4142]], \"test case failed: diagonal line, k=1\"\nassert pca_transform(np.array([[1, 1, 1], [2, 2, 2], [3, 3, 3]]), 1) == [[-2.1213], [0.0], [2.1213]], \"test case failed: collinear 3D, k=1\"\nassert pca_transform(np.array([[1, 2], [1, 2], [1, 2]]), 1) == [[0.0], [0.0], [0.0]], \"test case failed: identical rows\"\nassert pca_transform(np.array([[0, 0], [1, 1]]), 2) == [[-1.4142, 0.0], [1.4142, 0.0]], \"test case failed: diagonal line, k=2\""}
{"task_id": 500, "completion_id": 0, "passed": false, "result": "failed: 'NoneType' object is not callable", "solution": "import numpy as np\nimport numpy as np\nfrom sklearn.tree import DecisionTreeRegressor\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    y_pred = np.full(y_train.shape, np.mean(y_train))\n    predictions = np.zeros(X_test.shape[0])\n    for _ in range(n_estimators):\n        residuals = y_train - y_pred\n        estimator = DecisionTreeRegressor(max_depth=1)\n        estimator.fit(X_train, residuals)\n        update = estimator.predict(X_train)\n        y_pred += learning_rate * update\n    for i in range(n_estimators):\n        residuals = y_pred - y_pred.mean()\n        estimator = DecisionTreeRegressor(max_depth=1)\n        estimator.fit(X_train, residuals)\n        update = estimator.predict(X_test)\n        predictions += learning_rate * update\n    predictions = np.where(predictions > 0.5, 1, 0)\n    return predictions.tolist()\nassert gradient_boosting_classifier([[0],[1],[2],[3]],[0,0,1,1],[[0],[3]],20,0.1)==[0,1],\"failed: basic one-dimensional separation\"\nassert gradient_boosting_classifier([[1],[2],[3],[10]],[0,0,1,1],[[2],[9]],15,0.2)==[0,1],\"failed: unequal gap separation\"\nassert gradient_boosting_classifier([[0],[1],[2],[3],[4]],[0,0,0,1,1],[[0.3],[3.7]],25,0.1)==[0,1],\"failed: threshold after three negatives\"\nassert gradient_boosting_classifier([[-3],[-2],[-1],[1],[2],[3]],[0,0,0,1,1,1],[[-2.5],[2.5]],20,0.1)==[0,1],\"failed: negatives versus positives\"\nassert gradient_boosting_classifier([[0,0],[1,1],[2,2],[3,3]],[0,0,1,1],[[0.1,0.1],[2.5,2.5]],20,0.1)==[0,1],\"failed: two-feature data\"\nassert gradient_boosting_classifier([[i] for i in range(10)],[0]*5+[1]*5,[[0.5],[7.2]],30,0.05)==[0,1],\"failed: larger dataset\"\nassert gradient_boosting_classifier([[1],[1.1],[1.2],[4],[4.1],[4.2]],[0,0,0,1,1,1],[[1.3],[4.05]],25,0.1)==[0,1],\"failed: close clusters\"\nassert gradient_boosting_classifier([[0,5],[0,6],[1,5],[1,6],[10,5],[10,6],[11,5],[11,6]],[0,0,0,0,1,1,1,1],[[0.5,5.5],[10.5,5.5]],20,0.1)==[0,1],\"failed: two-feature well separated\"\nassert gradient_boosting_classifier([[-2],[-1],[0],[1],[2]],[0,0,0,1,1],[[-1.5],[1.5]],20,0.1)==[0,1],\"failed: centred split\"\nassert gradient_boosting_classifier([[0],[1],[2],[3]], [0,0,1,1], [[1.4],[1.6]], 20, 0.1)==[0,1],\"failed: borderline predictions\""}
{"task_id": 505, "completion_id": 0, "passed": false, "result": "failed: test case failed: mixed mini-batch update", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    if X.shape[0] == 0:\n        return []\n    h_0_prob = sigmoid(np.dot(X, W) + hbias)\n    v_k_prob = X\n    h_k_prob = None\n    for _ in range(k):\n        h_k_prob = sigmoid(np.dot(v_k_prob, W) + hbias)\n        v_k_prob = sigmoid(np.dot(h_k_prob, W.T) + vbias)\n    pos_grad = np.dot(X.T, h_0_prob)\n    neg_grad = np.dot(v_k_prob.T, h_k_prob)\n    W_new = W + learning_rate * (pos_grad - neg_grad) / X.shape[0]\n    return np.round(W_new, 4).tolist()\nassert contrastive_divergence(np.array([[1, 0, 1], [0, 1, 0]]), np.array([[0.1, -0.2], [0.0, 0.05], [-0.1, 0.2]]), np.zeros(2), np.zeros(3), 0.1, 1) == [[0.1007, -0.1997], [-0.0003, 0.0499], [-0.1006, 0.199]], \"test case failed: mixed mini-batch update\"\nassert contrastive_divergence(np.array([[1, 0, 1], [0, 1, 0]]), np.array([[0.1, -0.2], [0.0, 0.05], [-0.1, 0.2]]), np.zeros(2), np.zeros(3), 0.0, 1) == [[0.1, -0.2], [0.0, 0.05], [-0.1, 0.2]], \"test case failed: learning_rate = 0 should keep weights unchanged\"\nassert contrastive_divergence(np.array([[0.0, 0.0]]), np.array([[0.0, 0.0], [0.0, 0.0]]), np.zeros(2), np.zeros(2), 1.0, 1) == [[-0.25, -0.25], [-0.25, -0.25]], \"test case failed: zero input should drive weights negative\"\nassert contrastive_divergence(np.array([[0.0, 0.0]]), np.array([[0.0, 0.0], [0.0, 0.0]]), np.zeros(2), np.zeros(2), 0.0, 1) == [[0.0, 0.0], [0.0, 0.0]], \"test case failed: no-update expected with lr=0\"\nassert contrastive_divergence(np.array([[1.0, 1.0]]), np.array([[0.0], [0.0]]), np.zeros(1), np.zeros(2), 0.1, 1) == [[0.025], [0.025]], \"test case failed: ones input update\"\nassert contrastive_divergence(np.array([[1.0, 0.0, 0.0]]), np.zeros((3, 1)), np.zeros(1), np.zeros(3), 1.0, 1) == [[0.25], [-0.25], [-0.25]], \"test case failed: directional update\"\nassert contrastive_divergence(np.array([[0.0, 1.0]]), np.zeros((2, 1)), np.zeros(1), np.zeros(2), 0.5, 1) == [[-0.125], [0.125]], \"test case failed: lr=0.5 update\"\nassert contrastive_divergence(np.array([[0.0]]), np.array([[0.1]]), np.zeros(1), np.zeros(1), 0.1, 1) == [[0.0737]], \"test case failed: decay on inactive visible node\"\nassert contrastive_divergence(np.array([[0.0]]), np.array([[0.1]]), np.zeros(1), np.zeros(1), 0.0, 1) == [[0.1]], \"test case failed: learning_rate 0 with 1\u00d71 matrix\"\nassert contrastive_divergence(np.array([[1.0]]), np.array([[0.0]]), np.zeros(1), np.zeros(1), 0.2, 1) == [[0.05]], \"test case failed: 1\u00d71 positive update with lr=0.2\""}
{"task_id": 509, "completion_id": 0, "passed": false, "result": "failed: unsupported operand type(s) for |: 'types.GenericAlias' and 'str'", "solution": "import numpy as np\nimport numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    if len(x) != len(y):\n        return -1\n    diffs = np.abs(x - y)\n    max_diff = np.max(diffs)\n    return round(max_diff, 4)\nassert chebyshev([1, 2, 3], [2, 4, 6]) == 3.0, \"failed for ([1,2,3],[2,4,6])\"\nassert chebyshev([0, 0, 0], [0, 0, 0]) == 0.0, \"failed for zero vectors\"\nassert chebyshev([-1, -2, -3], [1, 2, 3]) == 6.0, \"failed for negatives\"\nassert chebyshev([1.5, 2.5], [1.4, 2.7]) == 0.2, \"failed for floats\"\nassert chebyshev(np.array([1, 2, 3]), np.array([1, 3, 5])) == 2.0, \"failed for numpy arrays\"\nassert chebyshev([1], [10]) == 9.0, \"failed for single-element vectors\"\nassert chebyshev([0.12345], [0.12344]) == 0.0, \"failed for rounding requirement\"\nassert chebyshev([1, 2, 3], [1, 2]) == -1, \"failed for length mismatch\""}
{"task_id": 510, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred = np.clip(y_pred, eps, 1 - eps)\n    reconstruction_loss = -np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - t_mean ** 2 - np.exp(t_log_var))\n    loss = (reconstruction_loss + kl_divergence) / y.shape[0]\n    return round(loss, 6)\nassert vae_loss(np.array([[1,0],[0,1]]),\n                 np.array([[0.9,0.2],[0.1,0.8]]),\n                 np.zeros((2,2)),\n                 np.zeros((2,2))) == 0.328504, \"test case failed: basic reconstruction only\"\nassert vae_loss(np.array([[1,1],[0,0]]),\n                 np.array([[0.8,0.7],[0.3,0.2]]),\n                 np.array([[0.2,-0.1],[-0.3,0.5]]),\n                 np.array([[-0.2,0.1],[0.1,-0.3]])) == 0.694791, \"test case failed: reconstruction + KL\"\nassert vae_loss(np.array([[1]]),\n                 np.array([[0.5]]),\n                 np.zeros((1,1)),\n                 np.zeros((1,1))) == 0.693147, \"test case failed: single element, zero KL\"\nassert vae_loss(np.array([[1,0,1]]),\n                 np.array([[0.9,0.1,0.4]]),\n                 np.zeros((1,3)),\n                 np.zeros((1,3))) == 1.127012, \"test case failed: three features, no KL\"\nassert vae_loss(np.array([[1,0],[1,0]]),\n                 np.array([[0.7,0.3],[0.6,0.4]]),\n                 np.zeros((2,2)),\n                 np.zeros((2,2))) == 0.867501, \"test case failed: batch size 2, no KL\"\nassert vae_loss(np.array([[1]]),\n                 np.array([[0.8]]),\n                 np.array([[0.5]]),\n                 np.array([[-0.1]])) == 0.350562, \"test case failed: single element with KL\"\nassert vae_loss(np.array([[0]]),\n                 np.array([[0.2]]),\n                 np.array([[0.0]]),\n                 np.array([[0.2]])) == 0.233845, \"test case failed: y=0 with KL\"\nassert vae_loss(np.array([[0,1,0,1]]),\n                 np.array([[0.2,0.9,0.4,0.8]]),\n                 np.zeros((1,1)),\n                 np.zeros((1,1))) == 1.062473, \"test case failed: four features, no KL\"\nassert vae_loss(np.array([[1,1,1]]),\n                 np.array([[0.5,0.5,0.5]]),\n                 np.zeros((1,3)),\n                 np.zeros((1,3))) == 2.079442, \"test case failed: three identical probabilities\"\nassert vae_loss(np.array([[1,0],[0,1]]),\n                 np.array([[0.55,0.45],[0.45,0.55]]),\n                 np.array([[0.1,-0.1],[0.2,0.3]]),\n                 np.zeros((2,2))) == 1.233174, \"test case failed: mixed KL values\""}
{"task_id": 513, "completion_id": 0, "passed": false, "result": "failed: test case failed: basic example", "solution": "import numpy as np\nimport numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    linear_term = X.dot(w)\n    interaction_term = 0.5 * np.sum(np.power(X.dot(V), 2) - np.power(X.dot(np.power(V, 2)), 1 / 2), axis=1)\n    predictions = w0 + linear_term + interaction_term\n    return [round(pred, 4) for pred in predictions]\nassert fm_predict([[1, 0], [0, 1], [1, 1]], 0.5, [1, 2], [[0.1, 0.2], [0.3, 0.4]]) == [1.5, 2.5, 3.61], \"test case failed: basic example\"\nassert fm_predict([[1, 2]], 0.0, [0, 0], [[1], [1]]) == [2.0], \"test case failed: interaction only\"\nassert fm_predict([[3, 4]], 1.0, [-1, -1], [[0, 0], [0, 0]]) == [-6.0], \"test case failed: no interactions\"\nassert fm_predict([[1, 1], [2, 2]], 0.0, [1, 1], [[0.5], [0.5]]) == [2.25, 5.0], \"test case failed: repeated sample\"\nassert fm_predict([[0, 0]], 0.0, [1, 2], [[0, 0], [0, 0]]) == [0.0], \"test case failed: all zeros\"\nassert fm_predict([[1, 3]], 2.0, [0, 1], [[-0.5], [0.5]]) == [4.25], \"test case failed: negative factors\"\nassert fm_predict([[1, 2, 3], [0, 1, 0]], 0.1, [1, -1, 0.5], [[0.2, 0.3], [0.4, 0.1], [0.5, 0.7]]) == [3.37, -0.9], \"test case failed: 3 features, 2 factors\"\nassert fm_predict([[2]], -1.0, [1], [[0.5]]) == [1.0], \"test case failed: single feature\"\nassert fm_predict([[1, 0], [0, 0], [0, 1]], 0.0, [1, 1], [[0, 0], [0, 0]]) == [1.0, 0.0, 1.0], \"test case failed: mixed zeros\"\nassert fm_predict([[1, 2]], 0.0, [0, 0], [[0.5], [1.5]]) == [1.5], \"test case failed: fractional interaction\""}
{"task_id": 517, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    z = np.array(z)\n    sig = 1 / (1 + np.exp(-z))\n    sig = np.round(sig, 4)\n    if sig.shape == ():\n        return float(sig)\n    else:\n        return sig.tolist()\nassert sigmoid(0) == 0.5, \"test case failed: sigmoid(0)\"\nassert sigmoid(5) == 0.9933, \"test case failed: sigmoid(5)\"\nassert sigmoid(-5) == 0.0067, \"test case failed: sigmoid(-5)\"\nassert sigmoid(100) == 1.0, \"test case failed: sigmoid(100)\"\nassert sigmoid(-100) == 0.0, \"test case failed: sigmoid(-100)\"\nassert sigmoid([-1, 0, 1]) == [0.2689, 0.5, 0.7311], \"test case failed: sigmoid([-1,0,1])\"\nassert sigmoid(np.array([2, -2, 0.5, -0.5])) == [0.8808, 0.1192, 0.6225, 0.3775], \"test case failed: sigmoid([2,-2,0.5,-0.5])\"\nassert sigmoid([[0, 10], [-10, 1]]) == [[0.5, 1.0], [0.0, 0.7311]], \"test case failed: sigmoid([[0,10],[-10,1]])\"\nassert sigmoid([700, -700]) == [1.0, 0.0], \"test case failed: sigmoid([700,-700])\"\nassert sigmoid(np.array([[3]])) == [[0.9526]], \"test case failed: sigmoid([[3]])\""}
{"task_id": 518, "completion_id": 0, "passed": false, "result": "failed: name '_accuracy' is not defined", "solution": "import numpy as np\nfrom typing import Callable\nimport numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])\nassert abs(_accuracy(np.array([[0,1,0],[1,0,0],[0,0,1]]), np.array([[0,1,0],[0,1,0],[0,0,1]])) - 0.6667) < 1e-4, \"test case failed: accuracy with both inputs one-hot\"\nassert abs(_accuracy(np.array([[1,0],[0,1]]), np.array([[1,0],[0,1]])) - 1.0) < 1e-9, \"test case failed: perfect match one-hot\"\nassert abs(_accuracy(np.array([0,1,1,0]), np.array([[1,0],[0,1],[0,1],[1,0]])) - 1.0) < 1e-9, \"test case failed: actual labels, predicted one-hot\"\nassert abs(_accuracy(np.array([[0,0,1],[1,0,0],[0,1,0]]), np.array([2,0,1])) - 1.0) < 1e-9, \"test case failed: actual one-hot, predicted labels\"\nassert abs(_accuracy(np.array([[1,0],[0,1],[1,0],[0,1]]), np.array([[1,0],[1,0],[1,0],[0,1]])) - 0.75) < 1e-9, \"test case failed: two-class partial mismatch\"\nassert _collect(np.array([[2],[0],[1]]), np.array([[2],[0],[1]])) == ([[2],[0],[1]], [[2],[0],[1]]), \"test case failed: shape (n,1) should remain unchanged\"\nassert _collect(np.array([1,0,2]), np.array([[0,1,0],[1,0,0],[0,0,1]])) == ([1,0,2], [1,0,2]), \"test case failed: mixed dimensionalities\"\nassert _collect(np.eye(5, dtype=int), np.eye(5, dtype=int))[0] == [0,1,2,3,4], \"test case failed: five-class eye matrix\"\nassert _collect(np.array([[0,1,0],[1,0,0],[0,0,1]]), np.array([[0,1,0],[1,0,0],[0,0,1]])) == ([1,0,2],[1,0,2]), \"test case failed: explicit conversion check\"\nassert _collect(np.array([3,1,4,1,5]), np.array([3,1,4,1,5])) == ([3,1,4,1,5],[3,1,4,1,5]), \"test case failed: 1-D labels untouched\""}
{"task_id": 520, "completion_id": 0, "passed": false, "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "solution": "import numpy as np\nimport numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return round(z * (1 - z), 4)\n    elif isinstance(z, list):\n        return [sigmoid_grad(x) for x in z]\n    elif isinstance(z, np.ndarray):\n        return np.round(z * (1 - z), 4)\n    else:\n        raise TypeError('Input must be a float, list, or NumPy ndarray')\nassert sigmoid_grad(0.5) == 0.25, \"failed on scalar 0.5\"\nassert sigmoid_grad(0.8) == 0.16, \"failed on scalar 0.8\"\nassert sigmoid_grad([0.5, 0.8]) == [0.25, 0.16], \"failed on list [0.5,0.8]\"\nassert sigmoid_grad([[0.5, 0.4], [0.7, 0.3]]) == [[0.25, 0.24], [0.21, 0.21]], \"failed on 2D list\"\nassert sigmoid_grad(0.0) == 0.0, \"failed on boundary 0.0\"\nassert sigmoid_grad(1.0) == 0.0, \"failed on boundary 1.0\"\nassert sigmoid_grad([0.2, 0.4, 0.6, 0.8]) == [0.16, 0.24, 0.24, 0.16], \"failed on list [0.2,0.4,0.6,0.8]\"\nassert sigmoid_grad([0.7310586]) == [0.1966], \"failed on list [0.7310586]\"\nassert sigmoid_grad([]) == [], \"failed on empty list\"\nassert sigmoid_grad(np.array([[0.25, 0.75]])) == [[0.1875, 0.1875]], \"failed on numpy input\""}
{"task_id": 528, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    (x1_min, x1_max) = (np.min(X[:, 0]), np.max(X[:, 0]))\n    (x2_min, x2_max) = (np.min(X[:, 1]), np.max(X[:, 1]))\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (x1_grid, x2_grid) = np.meshgrid(x1_plot, x2_plot)\n    Z = W[0] * x1_grid + W[1] * x2_grid + b\n    Z = np.where(Z >= 0, 1, -1)\n    return Z.tolist()\nassert decision_boundary_grid([[0, 0], [2, 2]], [1, -1], 0, 3) == [[1, 1, 1], [-1, 1, 1], [-1, -1, 1]], \"test case failed: decision_boundary_grid([[0, 0], [2, 2]], [1, -1], 0, 3)\"\nassert decision_boundary_grid([[0, 0], [2, 2]], [0, 1], -1, 3) == [[-1, -1, -1], [1, 1, 1], [1, 1, 1]], \"test case failed: decision_boundary_grid([[0, 0], [2, 2]], [0, 1], -1, 3)\"\nassert decision_boundary_grid([[0, 0], [2, 2]], [1, 0], -1, 3) == [[-1, 1, 1], [-1, 1, 1], [-1, 1, 1]], \"test case failed: decision_boundary_grid([[0, 0], [2, 2]], [1, 0], -1, 3)\"\nassert decision_boundary_grid([[0, 0], [1, 1]], [-1, -1], 1, 2) == [[1, 1], [1, -1]], \"test case failed: decision_boundary_grid([[0, 0], [1, 1]], [-1, -1], 1, 2)\"\nres = decision_boundary_grid([[0, 0], [3, 3]], [1, 1], -6, 4)\nassert len(res) == 4 and all(len(r) == 4 for r in res), \"test case failed: decision_boundary_grid shape with grid_n=4\"\nassert decision_boundary_grid([[-2, -2], [2, 2]], [1, 1], 0, 2) == [[-1, 1], [1, 1]], \"test case failed: decision_boundary_grid([[-2, -2], [2, 2]], [1, 1], 0, 2)\"\nall_pos = decision_boundary_grid([[0, 0], [1, 1]], [0, 0], 5, 2)\nassert all(v == 1 for row in all_pos for v in row), \"test case failed: decision_boundary_grid bias all positive\"\nall_neg = decision_boundary_grid([[0, 0], [1, 1]], [0, 0], -5, 2)\nassert all(v == -1 for row in all_neg for v in row), \"test case failed: decision_boundary_grid bias all negative\"\nassert decision_boundary_grid([[0, 0], [4, 1]], [1, -1], 0, 3)[0] == [1, 1, 1], \"test case failed: decision_boundary_grid non square range\"\nret = decision_boundary_grid([[0, 0], [1, 1]], [1, 1], 0, 2)\nassert isinstance(ret, list) and all(isinstance(r, list) for r in ret), \"test case failed: decision_boundary_grid return type\""}
{"task_id": 537, "completion_id": 0, "passed": false, "result": "failed: test case 3 failed", "solution": "import numpy as np\nimport numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    eps = 1e-09\n    classes = np.unique(y_train)\n    means = {i: {} for i in classes}\n    stds = {i: {} for i in classes}\n    priors = {i: 0 for i in classes}\n    for c in classes:\n        X_class = X_train[y_train == c]\n        n_class = X_class.shape[0]\n        priors[c] = n_class / len(y_train)\n        for i in range(X_class.shape[1]):\n            means[c][i] = np.mean(X_class[:, i])\n            stds[c][i] = np.std(X_class[:, i]) + eps\n    y_pred = []\n    for x in X_test:\n        posteriors = []\n        for c in classes:\n            likelihood = 1\n            for (i, feature) in enumerate(x):\n                mean = means[c][i]\n                std = stds[c][i]\n                likelihood *= 1 / np.sqrt(2 * np.pi * std ** 2) * np.exp(-(feature - mean) ** 2 / (2 * std ** 2))\n            posterior = likelihood * priors[c]\n            posteriors.append(posterior)\n        y_pred.append(classes[np.argmax(posteriors)])\n    return y_pred\nassert gaussian_naive_bayes(np.array([[1.0,20.0],[2.0,21.0],[3.0,22.0],[10.0,5.0],[11.0,6.0],[12.0,7.0]]), np.array([0,0,0,1,1,1]), np.array([[2.5,20.5],[11.5,6.5]])) == [0,1], \"test case 1 failed\"\nassert gaussian_naive_bayes(np.array([[1],[2],[3],[8],[9],[10]]), np.array([0,0,0,1,1,1]), np.array([[1.5],[8.5]])) == [0,1], \"test case 2 failed\"\nassert gaussian_naive_bayes(np.array([[0,0],[0,1],[1,0],[1,1]]), np.array([0,0,1,1]), np.array([[0,0.2],[0.9,0.9]])) == [0,1], \"test case 3 failed\"\nassert gaussian_naive_bayes(np.array([[5],[6],[7],[2],[3],[4]]), np.array([1,1,1,0,0,0]), np.array([[6.5],[2.5]])) == [1,0], \"test case 4 failed\"\nassert gaussian_naive_bayes(np.array([[1,1],[1,2],[2,1],[8,8],[9,9],[9,8]]), np.array([0,0,0,1,1,1]), np.array([[1.8,1.5],[8.5,8.3]])) == [0,1], \"test case 5 failed\"\nassert gaussian_naive_bayes(np.array([[2,3],[2,2],[3,3],[7,7],[8,7],[8,6]]), np.array([0,0,0,1,1,1]), np.array([[2.1,2.9],[7.9,6.9]])) == [0,1], \"test case 6 failed\"\nassert gaussian_naive_bayes(np.array([[10],[11],[12],[1],[2],[3]]), np.array([1,1,1,0,0,0]), np.array([[11],[2]])) == [1,0], \"test case 7 failed\"\nassert gaussian_naive_bayes(np.array([[1,2,3],[1,2,2],[2,2,3],[8,9,9],[9,8,9],[9,9,8]]), np.array([0,0,0,1,1,1]), np.array([[1.5,2,2.8],[9,8.8,8.9]])) == [0,1], \"test case 8 failed\"\nassert gaussian_naive_bayes(np.array([[0],[0],[0],[10],[10],[10]]), np.array([0,0,0,1,1,1]), np.array([[0.1],[9.9]])) == [0,1], \"test case 9 failed\"\nassert gaussian_naive_bayes(np.array([[4,5],[4,4],[5,4],[15,15],[16,14],[15,14]]), np.array([0,0,0,1,1,1]), np.array([[4.2,4.6],[15.2,14.8]])) == [0,1], \"test case 10 failed\""}
{"task_id": 539, "completion_id": 0, "passed": false, "result": "failed: test case failed: simple example", "solution": "import numpy as np\nimport numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost.\n\n    Parameters:\n    AL (np.ndarray): A vector of probabilities.\n    Y (np.ndarray): A vector of true labels.\n\n    Returns:\n    float: The binary cross-entropy cost.\n    \"\"\"\n    AL_clipped = np.maximum(1e-15, np.minimum(1 - 1e-15, AL))\n    cost = -1 / Y.shape[1] * np.sum(Y * np.log(AL_clipped) + (1 - Y) * np.log(1 - AL_clipped))\n    return round(cost, 4)\nassert abs(compute_cost(np.array([[0.8,0.9,0.4]]),np.array([[1,1,0]]))-( -(1/3)*np.sum(np.array([[1,1,0]])*np.log(np.array([[0.8,0.9,0.4]]))+(1-np.array([[1,1,0]]))*np.log(1-np.array([[0.8,0.9,0.4]])) ) ))<1e-12, \"test case failed: simple example\"\nassert abs(compute_cost(np.array([0.35]),np.array([0]))-(-np.sum(np.array([0])*np.log(np.array([0.35]))+(1-np.array([0]))*np.log(1-np.array([0.35])))))<1e-12, \"test case failed: single sample\"\nassert abs(compute_cost(np.array([1e-20,1-1e-20]),np.array([0,1])) - (-(1/2)*np.sum(np.array([0,1])*np.log(np.clip(np.array([1e-20,1-1e-20]),1e-15,1-1e-15)) + (1-np.array([0,1]))*np.log(1-np.clip(np.array([1e-20,1-1e-20]),1e-15,1-1e-15)))))<1e-12, \"test case failed: clipping\"\nassert abs(compute_cost(np.array([[0.2,0.4,0.6,0.8,0.5]]),np.array([[0,0,1,1,0]]))-( -(1/5)*np.sum(np.array([[0,0,1,1,0]])*np.log(np.array([[0.2,0.4,0.6,0.8,0.5]]))+(1-np.array([[0,0,1,1,0]]))*np.log(1-np.array([[0.2,0.4,0.6,0.8,0.5]])) ) ))<1e-12, \"test case failed: batch size 5\"\nassert abs(compute_cost(np.array([0.7,0.3,0.2]),np.array([1,0,0]))-( -(1/3)*np.sum(np.array([1,0,0])*np.log(np.array([0.7,0.3,0.2]))+(1-np.array([1,0,0]))*np.log(1-np.array([0.7,0.3,0.2])) ) ))<1e-12, \"test case failed: flat vector\"\nassert abs(compute_cost(np.array([0.1,0.2,0.3,0.4]),np.zeros(4))-( -(1/4)*np.sum((1-np.zeros(4))*np.log(1-np.array([0.1,0.2,0.3,0.4])) ) ))<1e-12, \"test case failed: all zeros\"\nassert abs(compute_cost(np.array([0.6,0.7,0.8]),np.ones(3))-( -(1/3)*np.sum(np.ones(3)*np.log(np.array([0.6,0.7,0.8])) ) ))<1e-12, \"test case failed: all ones\"\nnp.random.seed(0); AL=np.random.rand(1,10); Y=(AL>0.5).astype(float); assert abs(compute_cost(AL,Y)-(-(1/10)*np.sum(Y*np.log(AL)+(1-Y)*np.log(1-AL))))<1e-12, \"test case failed: random example 1\"\nnp.random.seed(42); AL=np.random.rand(10); Y=(np.random.rand(10)>0.3).astype(float); assert abs(compute_cost(AL,Y)-(-(1/10)*np.sum(Y*np.log(AL)+(1-Y)*np.log(1-AL))))<1e-12, \"test case failed: random example 2\"\nnp.random.seed(7); AL=np.random.rand(1,100); Y=(np.random.rand(1,100)>0.5).astype(float); assert abs(compute_cost(AL,Y)-(-(1/100)*np.sum(Y*np.log(AL)+(1-Y)*np.log(1-AL))))<1e-12, \"test case failed: large batch\""}
{"task_id": 552, "completion_id": 0, "passed": false, "result": "failed: list indices must be integers or slices, not tuple", "solution": "import numpy as np\nimport numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    if t < 0 or t >= len(observations):\n        return []\n    pi = hmm['pi']\n    A = hmm['A']\n    B = hmm['B']\n    n_states = len(pi)\n    alpha = pi * B[:, observations[0]]\n    for obs in observations[1:t + 1]:\n        alpha = np.dot(alpha, A) * B[:, obs]\n    beta = np.ones(n_states)\n    for obs in observations[t + 1:][::-1]:\n        beta = np.dot(A, beta * B[:, obs])\n    gamma = alpha * beta\n    gamma /= np.sum(gamma)\n    gamma = np.round(gamma, 4)\n    return gamma.tolist()\nassert gamma_probabilities({\"pi\": [0.6, 0.4], \"A\": [[0.7, 0.3], [0.4, 0.6]], \"B\": [[0.5, 0.4, 0.1], [0.1, 0.3, 0.6]]}, [0,1,2], 1) == [0.6229, 0.3771], \"test case failed: example sequence t=1\"\nassert gamma_probabilities({\"pi\": [0.5,0.5], \"A\": [[0.5,0.5],[0.5,0.5]], \"B\": [[0.5,0.5],[0.5,0.5]]}, [0,1,0,1], 2) == [0.5,0.5], \"test case failed: uniform 2-state\"\nassert gamma_probabilities({\"pi\": [0.5,0.5], \"A\": [[0.5,0.5],[0.5,0.5]], \"B\": [[0.5,0.5],[0.5,0.5]]}, [1], 0) == [0.5,0.5], \"test case failed: uniform 2-state single step\"\nassert gamma_probabilities({\"pi\": [1/3,1/3,1/3], \"A\": [[1/3]*3]*3, \"B\": [[0.25,0.25],[0.25,0.25],[0.25,0.25]]}, [0,1], 1) == [0.3333,0.3333,0.3333], \"test case failed: uniform 3-state\"\nassert gamma_probabilities({\"pi\": [0.5,0.5], \"A\": [[0.5,0.5],[0.5,0.5]], \"B\": [[1,0],[0,1]]}, [0,0,0], 2) == [1.0,0.0], \"test case failed: deterministic emission state 0\"\nassert gamma_probabilities({\"pi\": [0.5,0.5], \"A\": [[0.5,0.5],[0.5,0.5]], \"B\": [[1,0],[0,1]]}, [1], 0) == [0.0,1.0], \"test case failed: deterministic emission state 1\"\nassert gamma_probabilities({\"pi\": [0.8,0.2], \"A\": [[0.6,0.4],[0.4,0.6]], \"B\": [[0.6,0.4],[0.3,0.7]]}, [0], 0) == [0.8889,0.1111], \"test case failed: single observation\"\nassert gamma_probabilities({\"pi\": [0.25,0.25,0.25,0.25], \"A\": [[0.25]*4]*4, \"B\": [[0.25]*4]*4}, [0,1,2,3], 3) == [0.25,0.25,0.25,0.25], \"test case failed: uniform 4-state\""}
{"task_id": 555, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nfrom collections import deque\nimport numpy as np\nfrom collections import deque\nfrom scipy.spatial.distance import pdist, squareform\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    dists = squareform(pdist(data, 'euclidean'))\n    core_points = np.sum(dists <= eps, axis=0) >= min_samples\n    labels = np.zeros(data.shape[0], dtype=int)\n    cluster_id = 0\n    for i in range(data.shape[0]):\n        queue = deque()\n        if labels[i] == 0 and core_points[i]:\n            cluster_id += 1\n            labels[i] = cluster_id\n            queue.append(i)\n            while queue:\n                current = queue.popleft()\n                neighbors = np.where(dists[current] <= eps)[0]\n                for neighbor in neighbors:\n                    if labels[neighbor] != 0:\n                        continue\n                    labels[neighbor] = cluster_id\n                    if core_points[neighbor]:\n                        queue.append(neighbor)\n    labels[labels == 0] = -1\n    return labels.tolist()\nassert dbscan(np.array([[0,0],[0,1],[1,0],[1,1],[5,5]]),1.5,3)==[1,1,1,1,-1],\"case 1 failed\"\nassert dbscan(np.array([[0,0],[0,1],[1,0],[10,10],[10,11],[11,10]]),1.5,3)==[1,1,1,2,2,2],\"case 2 failed\"\nassert dbscan(np.array([[0,0],[0,1],[1,0],[10,10],[10,11],[11,10]]),1.5,4)==[-1,-1,-1,-1,-1,-1],\"case 3 failed\"\nassert dbscan(np.array([[0,0],[0,0],[0,0.1],[0.1,0]]),0.2,2)==[1,1,1,1],\"case 4 failed\"\nassert dbscan(np.array([[0],[0.5],[1.0],[5.0],[5.1],[5.2]]),0.3,2)==[-1,-1,-1,1,1,1],\"case 5 failed\"\nassert dbscan(np.array([[0,0],[0,1],[1,0],[10,10],[10,11],[11,10]]),15,2)==[1,1,1,1,1,1],\"case 6 failed\"\nassert dbscan(np.array([[0,0],[0,1],[0,2],[0,3]]),1.1,2)==[1,1,1,1],\"case 7 failed\"\nassert dbscan(np.array([[0,0],[0,0.5],[10,10],[20,20]]),1,2)==[1,1,-1,-1],\"case 8 failed\"\nassert dbscan(np.array([[0,0]]),0.5,1)==[1],\"case 9 failed\"\nassert dbscan(np.array([[-5,-5],[-5,-4],[-4,-5],[5,5]]),1.5,3)==[1,1,1,-1],\"case 10 failed\""}
{"task_id": 561, "completion_id": 0, "passed": false, "result": "failed: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 2 is different from 6)", "solution": "import numpy as np\nimport math\nimport numpy as np\nfrom scipy.stats import multivariate_normal\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    (N, D) = data.shape\n    pi = np.full(k, 1 / k)\n    mu = np.random.rand(k, D)\n    sigma = np.array([np.eye(D) for _ in range(k)])\n    t = 0\n    prev_ll = -np.inf\n    while t < max_iter:\n        gamma_z = np.zeros((N, k))\n        for j in range(k):\n            gamma_z[:, j] = pi[j] * multivariate_normal.pdf(data, mu[j], sigma[j])\n        gamma_z /= np.sum(gamma_z, axis=1, keepdims=True)\n        N_k = np.sum(gamma_z, axis=0)\n        pi = N_k / N\n        mu = gamma_z.T @ data / N_k[:, None]\n        sigma = [gamma_z[:, j] @ (data - mu[j]).T @ (data - mu[j]) / N_k[j] for j in range(k)]\n        sigma = np.array(sigma)\n        ll = np.sum(np.log([np.sum(pi[j] * multivariate_normal.pdf(data, mu[j], sigma[j])) for j in range(k)]))\n        if ll - prev_ll < epsilon:\n            break\n        prev_ll = ll\n        t += 1\n    labels = np.argmax(gamma_z, axis=1)\n    order = np.argsort(mu, axis=0)[:, 0]\n    labels = order[labels]\n    return list(labels)\nimport numpy as np\nassert gmm_em(np.array([[1,2],[1,3],[2,2],[8,8],[9,8],[9,9]]),2) == [0,0,0,1,1,1], \"test case failed: basic two clusters\"\nassert gmm_em(np.array([[1],[1.2],[1.1],[8],[9],[8.5]]),2) == [0,0,0,1,1,1], \"test case failed: one-dimensional data\"\nassert gmm_em(np.array([[3,4],[5,6]]),1) == [0,0], \"test case failed: single component\"\nassert gmm_em(np.array([[2,2],[2,2],[2,2],[8,8],[8,8],[8,8]]),2) == [0,0,0,1,1,1], \"test case failed: duplicate points\"\nassert gmm_em(np.array([[0,0],[0,0.1],[0,0.2],[5,0],[5,0.1],[5,0.2]]),2) == [0,0,0,1,1,1], \"test case failed: vertical separation\"\nassert gmm_em(np.array([[-5,-5],[-4.9,-5],[-5.2,-4.8],[5,5],[4.8,5.1],[5.2,4.9]]),2) == [0,0,0,1,1,1], \"test case failed: symmetric clusters\"\nassert gmm_em(np.array([[0,0,0],[0.1,0,0],[0,0.2,0.1],[5,5,5],[5.1,5.1,5.1],[4.9,5,5.2]]),2) == [0,0,0,1,1,1], \"test case failed: three-dimensional data\"\nassert gmm_em(np.array([[1,1],[1,1.1],[1.2,1],[1,0.9],[9,9],[9.1,9],[9,9.2],[9.2,9.1]]),2) == [0,0,0,0,1,1,1,1], \"test case failed: larger cluster size\"\nassert gmm_em(np.array([[-10,-10],[ -9.8,-9.7],[-10.2,-10.1],[10,10],[9.8,9.9],[10.1,10.2]]),2) == [0,0,0,1,1,1], \"test case failed: distant clusters\""}
{"task_id": 562, "completion_id": 0, "passed": false, "result": "failed: test case failed: a1, 2", "solution": "import numpy as np\nimport numpy as np\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    pairwise_sq_dists = np.sum(data ** 2, axis=1).reshape(-1, 1) + np.sum(data ** 2, axis=1) - 2 * np.dot(data, data.T)\n    similarity = np.exp(-gamma * pairwise_sq_dists)\n    if method == 'unnormalized':\n        degree = np.sum(similarity, axis=0)\n        laplacian = np.diag(degree) - similarity\n    elif method == 'normalized':\n        sqrt_degree = np.diag(1.0 / np.sqrt(np.sum(similarity, axis=0)))\n        laplacian = np.eye(similarity.shape[0]) - np.dot(np.dot(sqrt_degree, similarity), sqrt_degree)\n    else:\n        raise ValueError('Invalid method parameter.')\n    (eigenvalues, eigenvectors) = np.linalg.eigh(laplacian)\n    eigenvectors = eigenvectors[:, np.argsort(eigenvalues)]\n    if method == 'normalized':\n        row_sums = np.linalg.norm(eigenvectors, axis=1, ord=2)\n        eigenvectors = eigenvectors / row_sums[:, np.newaxis]\n    centroids = eigenvectors[:n_cluster]\n    labels = np.argmin(np.linalg.norm(eigenvectors[:, np.newaxis, :] - centroids, axis=-1), axis=1)\n    return labels.tolist()\nassert spectral_clustering(np.array([[0, 0], [5, 5], [0.2, -0.2], [-0.1, 0.3], [5.1, 4.9]]), 2) == [0, 1, 0, 0, 1], \"test case failed: a1, 2\"\nassert spectral_clustering(np.array([[-5, -5], [5, 5], [-4.8, -5.2], [5.2, 5.1]]), 2, method='normalized') == [0, 1, 0, 1], \"test case failed: a2, 2 normalized\"\nassert spectral_clustering(np.array([[0, 0], [10, 10], [20, 20], [0.2, -0.1], [9.8, 10.2], [19.9, 20.2]]), 3) == [0, 1, 2, 0, 1, 2], \"test case failed: a3, 3\"\nassert spectral_clustering(np.random.randn(8, 2), 1) == [0]*8, \"test case failed: single cluster\"\nassert spectral_clustering(np.array([[1, 1], [1, 1], [10, 10], [10, 10]]), 2) == [0, 0, 1, 1], \"test case failed: repeated points\"\nassert spectral_clustering(np.array([[0, 0], [5, 0], [0.1, 0.2], [4.9, -0.1]]), 2, gamma=0.5) == [0, 1, 0, 1], \"test case failed: gamma=0.5\"\nassert spectral_clustering(np.array([[0, 0, 0], [0.1, 0.0, -0.1], [5, 5, 5], [5.1, 4.9, 5.2]]), 2) == [0, 0, 1, 1], \"test case failed: 3-D data\"\nassert spectral_clustering(np.array([[0, 0], [0, 5], [0.1, 0.2], [0.05, -0.1], [-0.02, 5.1]]), 2) == [0, 1, 0, 0, 1], \"test case failed: vertical split\"\nassert spectral_clustering(np.array([[0, 0], [10, 0], [0.1, 0.05], [9.9, -0.05]]), 2) == [0, 1, 0, 1], \"test case failed: horizontal split\"\nassert spectral_clustering(np.array([[0, 0], [5, 5], [10, 10], [0.1, -0.1], [5.1, 4.9], [9.9, 10.2]]), 3, method='normalized') == [0, 1, 2, 0, 1, 2], \"test case failed: 3 clusters normalized\""}
{"task_id": 563, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.dot(alpha * y_data, G[i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    w = np.dot(alpha * y_data, X_data)\n    w = [round(i, 4) for i in w]\n    b = round(b, 4)\n    return (w, b)\nassert perceptron_dual_train(np.array([[2, 1], [1, 2], [-2, -1], [-1, -2]]), np.array([1, 1, -1, -1])) == ([2.0, 1.0], 1.0), \"failed test 1\"\nassert perceptron_dual_train(np.array([[1, 0], [2, 0], [-1, 0], [-2, 0]]), np.array([1, 1, -1, -1])) == ([2.0, 0.0], 0.0), \"failed test 2\"\nassert perceptron_dual_train(np.array([[2, 2], [1, 1], [-1, -1], [-2, -2]]), np.array([1, 1, -1, -1])) == ([2.0, 2.0], 1.0), \"failed test 3\"\nassert perceptron_dual_train(np.array([[1, 1, 1], [2, 2, 2], [-1, -1, -1], [-2, -2, -2]]), np.array([1, 1, -1, -1])) == ([1.0, 1.0, 1.0], 1.0), \"failed test 4\"\nassert perceptron_dual_train(np.array([[1, 1], [-1, -1]]), np.array([1, -1])) == ([1.0, 1.0], 1.0), \"failed test 5\"\nassert perceptron_dual_train(np.array([[0, 1], [0, 2], [0, -1], [0, -2]]), np.array([1, 1, -1, -1])) == ([0.0, 2.0], 0.0), \"failed test 6\"\nassert perceptron_dual_train(np.array([[1], [2], [-1], [-2]]), np.array([1, 1, -1, -1])) == ([2.0], 0.0), \"failed test 7\"\nassert perceptron_dual_train(np.array([[3, 3], [-3, -3]]), np.array([1, -1])) == ([3.0, 3.0], 1.0), \"failed test 8\"\nassert perceptron_dual_train(np.array([[1, 0], [0, 1], [-1, 0], [0, -1]]), np.array([1, 1, -1, -1])) == ([2.0, 2.0], 0.0), \"failed test 9\"\nassert perceptron_dual_train(np.array([[1, 1], [2, 2], [-2, -2]]), np.array([1, 1, -1])) == ([1.0, 1.0], 1.0), \"failed test 10\""}
{"task_id": 564, "completion_id": 0, "passed": false, "result": "failed: name 'root1' is not defined", "solution": "\ndef predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    if root.y is not None:\n        return root.y\n    if task_type == 'classification':\n        for child in root.child:\n            if child.x == features[root.label]:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    if task_type == 'regression':\n        if features[root.label] <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)\nassert predict_sample(root1, [\"red\"], \"classification\") == \"apple\", \"TC1 failed\"\nassert predict_sample(root1, [\"blue\"], \"classification\") == \"pear\", \"TC2 failed\"\nassert predict_sample(root2, [\"A\", \"Y\"], \"classification\") == 1, \"TC3 failed\"\nassert predict_sample(root3, [7], \"regression\") == 5.0, \"TC4 failed\"\nassert predict_sample(root3, [10], \"regression\") == 5.0, \"TC5 failed\"\nassert predict_sample(root3, [12], \"regression\") == 15.0, \"TC6 failed\"\nassert predict_sample(root4, [6, -1], \"regression\") == 1.5, \"TC7 failed\"\nassert predict_sample(leaf_only, [], \"classification\") == 42, \"TC8 failed\"\nassert predict_sample(root5, [1], \"classification\") == \"One\", \"TC9 failed\"\nassert predict_sample(root6, [\"z\", \"d\"], \"classification\") == \"Bird\", \"TC10 failed\""}
{"task_id": 565, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n\n    def entropy(labels):\n        (_, counts) = np.unique(labels, return_counts=True)\n        probabilities = counts / counts.sum()\n        return -(probabilities * np.log2(probabilities)).sum()\n\n    def conditional_entropy(feature, labels):\n        unique_values = np.unique(feature)\n        total_entropy = 0\n        for value in unique_values:\n            subset_labels = labels[feature == value]\n            subset_entropy = entropy(subset_labels)\n            total_entropy += subset_entropy * len(subset_labels) / len(labels)\n        return total_entropy\n\n    def information_gain(feature, labels):\n        return entropy(labels) - conditional_entropy(feature, labels)\n    best_feature_index = None\n    max_information_gain = -math.inf\n    for feature_index in range(X.shape[1]):\n        feature = X[:, feature_index]\n        ig = information_gain(feature, y)\n        if ig > max_information_gain:\n            max_information_gain = ig\n            best_feature_index = feature_index\n    return (best_feature_index, round(max_information_gain, 6))\nassert choose_best_feature(np.array([[0, 1], [1, 0], [0, 1], [1, 1]]), np.array([0, 1, 0, 1])) == (0, 1.0), \"test case failed: example 1\"\nassert choose_best_feature(np.array([[0,0],[0,0],[1,1]]), np.array([0,0,1])) == (0, 0.918296), \"test case failed: identical features\"\nassert choose_best_feature(np.array([[0,1],[1,0],[0,1]]), np.array([1,1,1])) == (0, 0.0), \"test case failed: zero entropy labels\"\nassert choose_best_feature(np.array([[0, 1, 0], [1, 1, 1], [1, 0, 0], [0, 1, 1]]), np.array([0, 1, 1, 0])) == (0, 1.0), \"test case failed: mixed dataset\"\nassert choose_best_feature(np.array([[0],[1],[2]]), np.array([0,1,2])) == (0, 1.584963), \"test case failed: three classes\"\nassert choose_best_feature(np.array([[0, 0], [0, 1], [0, 1], [1, 0], [1, 1]]), np.array([0, 0, 1, 1, 1])) == (0, 0.419973), \"test case failed: uneven distribution\"\nassert choose_best_feature(np.array([[0, 0], [1, 1]]), np.array([0, 1])) == (0, 1.0), \"test case failed: tie breaking\"\nassert choose_best_feature(np.array([[0],[0],[0]]), np.array([1, 1, 1])) == (0, 0.0), \"test case failed: single feature all same\"\nassert choose_best_feature(np.array([[0, 1, 0], [0, 1, 1], [1, 0, 1], [1, 1, 0], [1, 1, 1], [0, 0, 0]]), np.array([0, 0, 1, 1, 1, 0])) == (0, 1.0), \"test case failed: larger synthetic set\"\nassert choose_best_feature(np.array([[0, 0], [0, 1], [1, 2], [2, 2]]), np.array([0, 0, 1, 1])) == (0, 1.0), \"test case failed: multi-valued tie\""}
{"task_id": 566, "completion_id": 0, "passed": false, "result": "failed: maximum recursion depth exceeded while calling a Python object", "solution": "import numpy as np\nimport math\nimport numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    np.random.seed(42)\n    (n_samples, n_features) = data.shape\n    if n_samples < sample_size:\n        sample_size = n_samples\n\n    def build_tree(data, height_limit=0):\n        if height_limit == 0:\n            height_limit = math.ceil(math.log2(sample_size))\n        if len(data) <= 1 or height_limit == 0:\n            return {'size': len(data)}\n        feature_idx = np.random.choice(n_features)\n        threshold = np.random.uniform(low=np.min(data[:, feature_idx]), high=np.max(data[:, feature_idx]))\n        left_tree = build_tree(data[data[:, feature_idx] < threshold], height_limit - 1)\n        right_tree = build_tree(data[data[:, feature_idx] >= threshold], height_limit - 1)\n        return {'feature': feature_idx, 'threshold': threshold, 'left': left_tree, 'right': right_tree}\n\n    def path_length(tree, x, path=0):\n        if 'size' in tree:\n            if tree['size'] == 1:\n                return path\n            else:\n                return path + c(tree['size'])\n        if x[tree['feature']] < tree['threshold']:\n            return path_length(tree['left'], x, path + 1)\n        else:\n            return path_length(tree['right'], x, path + 1)\n\n    def c(n):\n        if n == 1:\n            return 0\n        else:\n            return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n\n    def score(x, trees):\n        return sum((path_length(tree, x) for tree in trees)) / n_trees\n    trees = [build_tree(data[np.random.choice(n_samples, sample_size, replace=False)]) for _ in range(n_trees)]\n    scores = [score(x, trees) for x in data]\n    phi = 2 * math.log(n_samples - 1) - 2 * (n_samples - 1) / n_samples\n    s_scores = [2 ** (-score / phi) for score in scores]\n    outliers = np.argsort(s_scores)[::-1][:math.ceil(epsilon * n_samples)]\n    return sorted(outliers)\nassert detect_outliers(np.array([[1.0,1.1],[0.9,1.0],[1.2,0.8],[8.0,8.0]]),50,4,0.25)==[3], \"case 1 failed\"\nassert detect_outliers(np.array([[0.0],[0.1],[-0.1],[5.0]]),60,4,0.25)==[3], \"case 2 failed\"\nassert detect_outliers(np.vstack([np.zeros((10,2)),np.array([[5,5],[6,6]])]),80,8,0.15)==[10,11], \"case 3 failed\"\nassert detect_outliers(np.vstack([np.zeros((15,1)),np.array([[3.0],[4.0]])]),70,8,0.1)==[15,16], \"case 4 failed\"\nassert detect_outliers(np.array([[1.0],[1.0],[1.0],[1.0]]),40,4,0.1)==[], \"case 5 failed\"\nassert detect_outliers(np.array([[1.0],[1.1],[0.9],[1.05],[8.0]]),50,5,0.2)==[4], \"case 6 failed\"\nassert detect_outliers(np.array([[0,0],[0,0.1],[0.1,0],[0.05,-0.05],[0.02,0.01],[7,7]]),60,6,0.17)==[5], \"case 7 failed\"\nassert detect_outliers(np.array([[1],[1]]),30,2,0.5)==[], \"case 8 failed\"\nassert detect_outliers(np.array([[0.0,0.0],[0.05,0.0],[-0.05,0.0],[0.0,0.05],[0.0,-0.05],[10.0,10.0]]),90,6,0.2)==[5], \"case 9 failed\""}
{"task_id": 568, "completion_id": 0, "passed": false, "result": "failed: math range error", "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\nimport math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    empirical_distributions = defaultdict(lambda : defaultdict(int))\n    for (x, y) in zip(X_train, y_train):\n        empirical_distributions[y][tuple(x)] += 1\n    weights = np.zeros(len(empirical_distributions[y_train[0]]))\n    for _ in range(n_iter):\n        weight_updates = np.zeros_like(weights)\n        for (y, x_counts) in empirical_distributions.items():\n            for (x, count) in x_counts.items():\n                exponent = np.dot(weights, x)\n                for i in range(len(weights)):\n                    weight_updates[i] += count * x[i] * math.exp(exponent)\n        weights += weight_updates / len(X_train)\n        if np.max(np.abs(weight_updates)) < epsilon:\n            break\n    y_pred = []\n    for x in X_test:\n        log_probabilities = defaultdict(float)\n        for (y, x_counts) in empirical_distributions.items():\n            for (x_train, count) in x_counts.items():\n                log_probabilities[y] += count * np.dot(weights, x_train)\n        y_pred.append(max(log_probabilities, key=log_probabilities.get))\n    return y_pred\nassert maxent_predict(np.array([[0],[1]]), np.array([0,1]), np.array([[1],[0]])) == [1,0], \"Test-1 failed: basic two-sample training\"\nassert maxent_predict(np.array([[0],[0],[1],[1]]), np.array([0,0,1,1]), np.array([[1],[0]])) == [1,0], \"Test-2 failed: duplicated training rows\"\nassert maxent_predict(np.array([[0,0],[1,0]]), np.array([0,1]), np.array([[0,0],[1,0],[0,0]])) == [0,1,0], \"Test-3 failed: two features, two labels\"\nassert maxent_predict(np.array([[0],[1],[2]]), np.array([0,1,2]), np.array([[2],[0]])) == [2,0], \"Test-4 failed: three labels\"\nassert maxent_predict(np.array([[0,0],[0,1],[1,0]]), np.array([0,1,2]), np.array([[0,1],[1,0]])) == [1,2], \"Test-5 failed: 3-class, 2-feature\"\nassert maxent_predict(np.array([[0,1,0],[1,0,1]]), np.array([0,1]), np.array([[1,0,1]])) == [1], \"Test-6 failed: 3 features\"\nassert maxent_predict(np.array([[0],[0],[0],[1]]), np.array([1,1,1,0]), np.array([[1],[0]])) == [0,1], \"Test-7 failed: imbalanced classes\"\nassert maxent_predict(np.array([[0,0],[0,1],[0,2],[1,0],[1,1],[1,2]]), np.array([0,0,0,1,1,1]), np.array([[1,1],[0,2]])) == [1,0], \"Test-8 failed: bigger balanced dataset\"\nassert maxent_predict(np.array([[5],[6],[7]]), np.array([2,2,2]), np.array([[5],[7]])) == [2,2], \"Test-9 failed: single-class training\"\nassert maxent_predict(np.array([[0],[1]]), np.array([1,0]), np.array([[0],[1]])) == [1,0], \"Test-10 failed: labels reversed order\""}
{"task_id": 569, "completion_id": 0, "passed": false, "result": "failed: test case failed: duplicates inside a document and cut_off = None", "solution": "from collections import Counter\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    all_words = []\n    for (_, words) in data:\n        all_words.extend(words)\n    total_documents = len(data)\n    word_counter = Counter(all_words)\n    word_ratios = [(word, round(count / total_documents, 4)) for (word, count) in word_counter.items()]\n    word_ratios.sort(key=lambda x: x[1], reverse=True)\n    if cut_off is None or cut_off > len(word_counter):\n        cut_off_words = set(word_counter.keys())\n    else:\n        cut_off_words = set((word[0] for word in word_ratios[:cut_off]))\n    return (word_ratios, cut_off_words)\nassert statistic_key_word([(1, {\"apple\", \"banana\"}), (0, {\"banana\", \"cherry\"}), (1, {\"banana\", \"dragon\"})], 2) == ([('banana', 1.0), ('apple', 0.3333), ('cherry', 0.3333), ('dragon', 0.3333)], {'banana', 'apple'}), \"test case failed: basic example with cut_off = 2\"\nassert statistic_key_word([(1, ['a', 'a', 'b']), (0, ['b', 'c']), (1, ['c'])], None)[0] == [('b', 0.6667), ('c', 0.6667), ('a', 0.3333)], \"test case failed: duplicates inside a document and cut_off = None\"\nassert statistic_key_word([(1, ['x']), (0, ['y'])], 5)[1] == {'x', 'y'}, \"test case failed: cut_off larger than vocabulary\"\nassert statistic_key_word([(1, ['p', 'q', 'r'])], None) == ([('q', 1.0), ('r', 1.0), ('p', 1.0)], {'p', 'q', 'r'}), \"test case failed: single document\"\nassert statistic_key_word([(1, ['m', 'n']), (0, ['m'])], 1)[1] == {'m'}, \"test case failed: cut_off = 1\"\nassert statistic_key_word([(1, ['d']), (0, ['e']), (1, ['f'])], 0)[1] == set(), \"test case failed: cut_off = 0\"\nassert statistic_key_word([(1, ['g', 'h']), (0, ['h', 'i'])], 2)[0][0][0] == 'h', \"test case failed: most frequent word should be first\"\nassert all(ratio <= 1 for _, ratio in statistic_key_word([(1, ['a']), (0, ['a', 'b'])], None)[0]), \"test case failed: ratio larger than 1\"\nassert statistic_key_word([(1, []), (0, [])], None) == ([], set()), \"test case failed: documents without any word\"\nassert statistic_key_word([], None) == ([], set()), \"test case failed: empty data list\""}
{"task_id": 571, "completion_id": 0, "passed": false, "result": "failed: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "solution": "import numpy as np\nimport numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           -1).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.sum(alpha.reshape(-1, 1) * y * X, axis=0).tolist()\n    b = np.mean(y - np.dot(X, w)).round(4)\n    w = np.round(w, 4)\n    return (w, b)\nassert compute_svm_parameters(np.array([[1, 2], [2, 3]]), np.array([1, -1]), np.array([0.5, 0.5])) == ([-0.5, -0.5], 2.0), \"test case failed: basic 2\u00d72\"\nassert compute_svm_parameters(np.array([[0, 0], [1, 1]]), np.array([-1, 1]), np.array([0.1, 0.3])) == ([0.3, 0.3], -0.3), \"test case failed: zeros and ones\"\nassert compute_svm_parameters(np.array([[1], [2], [3]]), np.array([1, 1, -1]), np.array([0.2, 0.2, 0.4])) == ([-0.6], 1.5333), \"test case failed: single feature\"\nassert compute_svm_parameters(np.array([[-1, -1], [1, 1]]), np.array([1, -1]), np.array([0.25, 0.25])) == ([-0.5, -0.5], 0.0), \"test case failed: symmetric points\"\nassert compute_svm_parameters(np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]), np.array([1, 1, -1]), np.array([0.4, 0.4, 0.4])) == ([0.4, 0.4, -0.4], 0.2), \"test case failed: identity matrix\"\nassert compute_svm_parameters(np.array([[2, 2]]), np.array([1]), np.array([0.5])) == ([1.0, 1.0], -3.0), \"test case failed: single sample\"\nassert compute_svm_parameters(np.array([[0, 0], [0, 0]]), np.array([1, -1]), np.array([0.2, 0.2])) == ([0.0, 0.0], 0.0), \"test case failed: zero features\"\nassert compute_svm_parameters(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), np.array([1, -1, 1]), np.array([0.2, 0.3, 0.1])) == ([-0.3, -0.3, -0.3], 4.8333), \"test case failed: 3\u00d73 matrix\"\nassert compute_svm_parameters(np.array([[-1, 0], [0, 1], [1, 0]]), np.array([-1, 1, 1]), np.array([0.3, 0.3, 0.4])) == ([0.7, 0.3], 0.2333), \"test case failed: mixed signs\"\nassert compute_svm_parameters(np.array([[2], [4]]), np.array([-1, -1]), np.array([0.25, 0.25])) == ([-1.5], 3.5), \"test case failed: negative labels only\""}
{"task_id": 572, "completion_id": 0, "passed": false, "result": "failed: list indices must be integers or slices, not tuple", "solution": "import numpy as np\nimport numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    n = len(data)\n    distances = np.sqrt(np.sum((data[np.newaxis, :] - data[:, np.newaxis]) ** 2, axis=-1))\n    k_distances = np.zeros(n)\n    k_neighbours = np.zeros((n, k), dtype=int)\n    for i in range(n):\n        distances_without_i = np.delete(distances[i], i)\n        indices = np.argpartition(distances_without_i, k - 1)[:k]\n        k_neighbours[i] = indices[np.argsort(distances_without_i[indices])]\n        k_distances[i] = distances_without_i[k_neighbours[i][-1]]\n    reach_distances = np.maximum(distances, k_distances[:, np.newaxis])\n    lrd = k / np.sum(reach_distances[np.arange(n)[:, None], k_neighbours], axis=1)\n    lof = np.sum(lrd[k_neighbours] / (k * lrd[np.arange(n)]), axis=1) / k\n    outliers = np.where(lof > epsilon)[0]\n    lof_rounded = np.round(lof, 4)\n    return (lof_rounded.tolist(), outliers.tolist())\nassert local_outlier_factor([[0],[1],[2],[10]],1) == ([1.0, 1.0, 1.0, 8.0], [3]), \"test case failed: local_outlier_factor([[0],[1],[2],[10]],1)\"\nassert local_outlier_factor([[0],[1],[5]],1) == ([1.0, 1.0, 4.0], [2]), \"test case failed: local_outlier_factor([[0],[1],[5]],1)\"\nassert local_outlier_factor([[0],[1],[3],[4]],1) == ([1.0, 1.0, 1.0, 1.0], []), \"test case failed: local_outlier_factor([[0],[1],[3],[4]],1)\"\nassert local_outlier_factor([[1],[2],[3],[50]],1) == ([1.0, 1.0, 1.0, 47.0], [3]), \"test case failed: local_outlier_factor([[1],[2],[3],[50]],1)\"\nassert local_outlier_factor([[0],[1]],1) == ([1.0, 1.0], []), \"test case failed: local_outlier_factor([[0],[1]],1)\"\nassert local_outlier_factor([[0],[1],[2],[6]],1) == ([1.0, 1.0, 1.0, 4.0], [3]), \"test case failed: local_outlier_factor([[0],[1],[2],[6]],1)\"\nassert local_outlier_factor([[0],[2],[4],[6],[8]],1) == ([1.0, 1.0, 1.0, 1.0, 1.0], []), \"test case failed: local_outlier_factor([[0],[2],[4],[6],[8]],1)\"\nassert local_outlier_factor([[0],[1],[2],[3],[50]],2,2) == ([1.0, 1.0, 1.0, 1.0, 31.6667], [4]), \"test case failed: local_outlier_factor([[0],[1],[2],[3],[50]],2,2)\"\n"}
{"task_id": 574, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport random\nimport numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = np.zeros((m * n_train, 2))\n    y_train = np.zeros(m * n_train)\n    X_val = np.zeros((m * n_val, 2))\n    y_val = np.zeros(m * n_val)\n    for c in range(m):\n        base = 10 * (c // 2) + 5\n        X_train[c * n_train:(c + 1) * n_train, :] = np.round(np.random.uniform(base + 1, base + 9, (n_train, 2)), 4)\n        y_train[c * n_train:(c + 1) * n_train] = c\n        X_val[c * n_val:(c + 1) * n_val, :] = np.round(np.random.uniform(base + 1, base + 9, (n_val, 2)), 4)\n        y_val[c * n_val:(c + 1) * n_val] = c\n    return (X_train, X_val, y_train, y_val)\nassert generate_data(2, 2, 1, seed=42)[0].shape == (4, 2), \"test case failed: shape of X_train for seed=42,2,2,1\"\nassert generate_data(2, 2, 1, seed=42)[1].shape == (2, 2), \"test case failed: shape of X_val for seed=42,2,2,1\"\nassert (generate_data(2, 2, 1, seed=42)[2] == np.array([0, 0, 1, 1])).all(), \"test case failed: y_train labels for seed=42\"\nassert (generate_data(2, 2, 1, seed=42)[3] == np.array([0, 1])).all(), \"test case failed: y_val labels for seed=42\"\nassert generate_data(3, 3, 2, seed=0)[0].shape == (9, 2), \"test case failed: shape of X_train for seed=0,3,3,2\"\nassert generate_data(3, 3, 2, seed=0)[1].shape == (6, 2), \"test case failed: shape of X_val for seed=0,3,3,2\"\nassert set(generate_data(3, 3, 2, seed=0)[2]) == {0, 1, 2}, \"test case failed: y_train label set for seed=0\"\nassert set(generate_data(3, 3, 2, seed=0)[3]) == {0, 1, 2}, \"test case failed: y_val label set for seed=0\"\nassert (generate_data(1, 5, 5, seed=99)[2] == np.zeros(5, dtype=int)).all(), \"test case failed: single-class y_train not all zeros\"\nassert (generate_data(1, 5, 5, seed=99)[3] == np.zeros(5, dtype=int)).all(), \"test case failed: single-class y_val not all zeros\""}
{"task_id": 579, "completion_id": 0, "passed": true, "result": "passed", "solution": "import numpy as np\nimport numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    centres = X[:k].tolist()\n    labels = assign_points_to_centres(X, centres)\n    for _ in range(max_iters):\n        new_centres = update_centres(X, labels, centres)\n        if np.allclose(centres, new_centres):\n            break\n        labels = assign_points_to_centres(X, new_centres)\n        centres = new_centres\n    centres = [[round(coord, 4) for coord in centre] for centre in centres]\n    return (labels, centres)\ndef assign_points_to_centres(X, centres):\n    \"\"\"Assign points in X to the nearest centre.\"\"\"\n    labels = []\n    for point in X:\n        (min_dist, label) = min(((np.linalg.norm(point - centre), i) for (i, centre) in enumerate(centres)))\n        labels.append(label)\n    return labels\ndef update_centres(X, labels, old_centres):\n    \"\"\"Update centres to the mean of the points assigned to them.\"\"\"\n    new_centres = np.zeros((len(old_centres), len(X[0])))\n    count = np.zeros(len(old_centres))\n    for (point, label) in zip(X, labels):\n        new_centres[label] += point\n        count[label] += 1\n    for (i, centre) in enumerate(new_centres):\n        if count[i] != 0:\n            new_centres[i] = centre / count[i]\n        else:\n            new_centres[i] = old_centres[i]\n    return new_centres.tolist()\nassert kmeans(np.array([[1,1],[1.5,2],[3,4],[5,7],[3.5,5],[4.5,5],[3.5,4.5]]),2,100) == ([0,0,1,1,1,1,1], [[1.25,1.5],[3.9,5.1]]), \"failed on simple 2-cluster example\"\nassert kmeans(np.array([[0,0],[10,10],[0,10],[10,0]]),2,50) == ([0,1,0,0], [[3.3333,3.3333],[10.0,10.0]]), \"failed on square corners\"\nassert kmeans(np.array([[0],[5],[10]]),3,10) == ([0,1,2], [[0.0],[5.0],[10.0]]), \"each point its own cluster\"\nassert kmeans(np.array([[0],[1],[2],[3],[9],[10],[11],[12]]),2,50) == ([0,0,0,0,1,1,1,1], [[1.5],[10.5]]), \"failed on 1-D two clusters\"\nassert kmeans(np.array([[1,2,3],[1,2,4],[10,10,10],[11,11,11]]),2,50) == ([0,0,1,1], [[1.0,2.0,3.5],[10.5,10.5,10.5]]), \"failed on 3-D clustering\"\nassert kmeans(np.array([[0,0],[0,0.1],[10,10],[10,10.1]]),2,50) == ([0,0,1,1], [[0.0,0.05],[10.0,10.05]]), \"failed on very close points\"\nassert kmeans(np.array([[2,2],[2,2],[2,2]]),1,5) == ([0,0,0], [[2.0,2.0]]), \"single cluster identical points\"\nassert kmeans(np.array([[1,1],[2,2],[3,3],[8,8],[9,9],[10,10]]),2,100) == ([0,0,0,1,1,1], [[2.0,2.0],[9.0,9.0]]), \"failed on two distant blobs\""}
{"task_id": 581, "completion_id": 0, "passed": false, "result": "failed: failed: L1 penalty example", "solution": "import numpy as np\nimport numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    if learning_rate == 0 or iterations == 0:\n        return ([0.0] * X.shape[1], 0.0)\n    weights = np.zeros(X.shape[1])\n    bias = 0.0\n    m = len(y)\n    for _ in range(iterations):\n        predictions = np.dot(X, weights) + bias\n        residuals = y - predictions\n        gradient_weights = (-2 * np.dot(X.T, residuals) + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights) / m\n        gradient_bias = -2 * np.sum(residuals) / m\n        weights -= learning_rate * gradient_weights\n        bias -= learning_rate * gradient_bias\n    return (list(np.round(weights, 4)), round(bias, 4))\nassert elastic_net_regression(np.array([[1, 0], [0, 1]]), np.array([1, 1]), 0.5, 1, 0.0, 0.0) == ([0.5, 0.5], 1.0), \"failed: basic 2-D example\"\nassert elastic_net_regression(np.array([[1], [2]]), np.array([2, 4]), 0.1, 1, 0.0, 0.0) == ([1.0], 0.6), \"failed: single feature, no regularisation\"\nassert elastic_net_regression(np.array([[1], [1]]), np.array([1, 1]), 1.0, 1, 1.0, 0.0) == ([2.5], 2.0), \"failed: L1 penalty example\"\nassert elastic_net_regression(np.array([[1, 1], [1, 1]]), np.array([2, 2]), 0.5, 1, 0.0, 0.0) == ([2.0, 2.0], 2.0), \"failed: identical features\"\nassert elastic_net_regression(np.array([[1], [1]]), np.array([2, 2]), 0.1, 1, 0.0, 5.0) == ([0.4], 0.4), \"failed: L2 penalty (first iteration)\"\nassert elastic_net_regression(np.array([[1, 2], [3, 4]]), np.array([1, 0]), 0.2, 1, 0.0, 0.0) == ([0.2, 0.4], 0.2), \"failed: two samples, two features\"\nassert elastic_net_regression(np.array([[1], [2]]), np.array([3, 4]), 0.0, 3, 0.0, 0.0) == ([0.0], 0.0), \"failed: zero learning rate\"\nassert elastic_net_regression(np.array([[1]]), np.array([1]), 1.0, 0, 0.0, 0.0) == ([0.0], 0.0), \"failed: zero iterations\"\nassert elastic_net_regression(np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]), np.array([1, 2, 3]), 0.1, 1, 0.0, 0.0) == ([0.0667, 0.1333, 0.2], 0.4), \"failed: 3-D identity matrix\"\nassert elastic_net_regression(np.array([[1], [1]]), np.array([-1, -1]), 0.5, 1, 0.0, 0.0) == ([-1.0], -1.0), \"failed: negative targets\""}
{"task_id": 591, "completion_id": 0, "passed": false, "result": "failed: shapes (1,3) and (2,) not aligned: 3 (dim 1) != 2 (dim 0)", "solution": "import numpy as np\nimport numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    x = np.array([1] + x)\n    for layer_weights in weights:\n        x = np.dot(layer_weights, x)\n        x = np.maximum(0, x)\n    x = np.round(x, 4)\n    if len(x) > 1:\n        x = list(x)\n    else:\n        x = x[0]\n    return x\nassert neural_net_predict([[[0.5,0.2,0.8],[1.0,-0.5,0.3]],[[0.7,0.6,-1.2]]],[0.1,0.4])==-0.08,\"test case failed: basic 2-layer network\"\nassert neural_net_predict([[[2,3]]],[4])==14.0,\"test case failed: single-layer network\"\nassert neural_net_predict([[[0.5,0.5]],[[1.0,1.0]],[[0.2,2.0]]],[2])==5.2,\"test case failed: three-layer network\"\nassert neural_net_predict([[[0,-1]],[[0,1]]],[2])==0.0,\"test case failed: ReLU zeroing\"\nassert neural_net_predict([[[1,0.5,0.5],[0,-1,-1]],[[0,1,1]]],[1,1])==2.0,\"test case failed: mixed activations\"\nassert neural_net_predict([[[5,-1]]],[5])==0.0,\"test case failed: negative linear result\"\nassert neural_net_predict([[[0,2],[0,0.5]],[[0,1,1]]],[3])==7.5,\"test case failed: 2-neuron hidden layer\"\nassert neural_net_predict([[[-1,0]],[[0,5]]],[10])==0.0,\"test case failed: negative input to ReLU\"\nassert neural_net_predict([[[0,1],[0,-1]],[[0,2,2]]],[4])==8.0,\"test case failed: hidden neuron suppression\"\nassert neural_net_predict([[[1,1]],[[0,0.5]],[[1,2]]],[1])==3.0,\"test case failed: deeper network\""}
{"task_id": 595, "completion_id": 0, "passed": false, "result": "failed: index 1 is out of bounds for axis 1 with size 1", "solution": "import numpy as np\nimport numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    centroids = X[:k]\n    for _ in range(max_iters):\n        distances = np.sqrt(((X - centroids[:, np.newaxis]) ** 2).sum(axis=-1))\n        assigned_clusters = np.argmin(distances, axis=0)\n        new_centroids = np.array([X[assigned_clusters == i].mean(axis=0) for i in range(k)])\n        if np.all(np.abs(new_centroids - centroids) < 0.0001):\n            break\n        else:\n            centroids = new_centroids\n    centroids = centroids[np.lexsort((centroids[:, 1], centroids[:, 0]))]\n    centroids = [list(map(lambda x: round(x, 4), centroid)) for centroid in centroids]\n    return centroids\nassert kmeans_centroids(np.array([[1, 1], [2, 1], [4, 3], [5, 4]]), 2) == [[1.5, 1.0], [4.5, 3.5]], \"test case failed: basic 2-cluster\"\nassert kmeans_centroids(np.array([[0, 0], [0, 1], [10, 10], [11, 11]]), 2) == [[0.0, 0.5], [10.5, 10.5]], \"test case failed: clearly separated clusters\"\nassert kmeans_centroids(np.array([[1], [2], [10], [12], [19]]), 3) == [[1.0], [2.0], [13.6667]], \"test case failed: 1-D three clusters\"\nassert kmeans_centroids(np.array([[1, 2], [2, 1], [1, 0], [10, 9], [12, 11], [11, 9]]), 2) == [[1.3333, 1.0], [11.0, 9.6667]], \"test case failed: mixed positions\"\nassert kmeans_centroids(np.array([[-5], [-4], [-5], [10], [11], [12]]), 2) == [[-4.6667], [11.0]], \"test case failed: negative and positive values\"\nassert kmeans_centroids(np.array([[0, 0], [0, 10], [10, 0], [10, 10]]), 4) == [[0.0, 0.0], [0.0, 10.0], [10.0, 0.0], [10.0, 10.0]], \"test case failed: one point per cluster\"\nassert kmeans_centroids(np.array([[1, 2], [2, 1], [5, 5], [9, 9], [8, 9]]), 3) == [[1.0, 2.0], [2.0, 1.0], [7.3333, 7.6667]], \"test case failed: three clusters 2-D\"\nassert kmeans_centroids(np.array([[1], [100]]), 2) == [[1.0], [100.0]], \"test case failed: two extreme points\"\nassert kmeans_centroids(np.array([[1, 1], [1, 2], [2, 1], [2, 2]]), 1) == [[1.5, 1.5]], \"test case failed: single centroid\"\nassert kmeans_centroids(np.array([[0, 0], [10, 0], [0, 10], [8, 8]]), 2) == [[0.0, 5.0], [9.0, 4.0]], \"test case failed: asymmetrical clusters\""}
