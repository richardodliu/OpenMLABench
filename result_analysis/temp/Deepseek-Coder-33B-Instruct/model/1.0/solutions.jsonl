{"task_id": 0, "completion_id": 0, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Implements ridge regression using its closed-form solution. \n\n    Parameters:\n        data: ndarray where the last column is the target y and all preceding columns are the features X.\n        alpha: regularisation strength (default is 0.0)\n\n    Returns:\n        The weight vector as a list rounded to the nearest 4th decimal. \n        If the matrix is not invertible (numerical determinant equal to 0), function returns -1.\n    \"\"\"\n    data = np.insert(data, 0, 1, axis=1)\n    X = data[:, :-1]\n    y = data[:, -1]\n    (N, M) = X.shape\n    I = np.eye(M)\n    try:\n        weights = np.linalg.inv(X.T @ X + alpha * I) @ X.T @ y\n    except np.linalg.LinAlgError:\n        return -1\n    return [round(weight, 4) for weight in weights]"}
{"task_id": 1, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or -1) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    (n_samples, n_features) = X_train.shape\n    K = np.dot(X_train, X_train.T)\n    \u03b1 = np.zeros(n_samples)\n    b = 0.0\n    num_updates = 0\n    while num_updates < n_iter:\n        num_changed_\u03b1 = 0\n        for i in range(n_samples):\n            activation = np.dot(\u03b1 * y_train, K[i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                \u03b1[i] += eta\n                b += eta * y_train[i]\n                num_changed_\u03b1 += 1\n        num_updates += 1\n        if num_changed_\u03b1 == 0:\n            break\n    w = np.dot(\u03b1 * y_train, X_train)\n    return (np.around(w, decimals=4).tolist(), round(b, 4))"}
{"task_id": 2, "completion_id": 0, "solution": "import numpy as np\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n\n    def identity_link(mu):\n        return mu\n\n    def identity_inverse_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inverse_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inverse_link(eta):\n        return np.exp(eta) / (1 + np.exp(eta))\n\n    def logit_derivative(mu):\n        return 1 / (mu * (1 - mu))\n    return {'identity': {'link': identity_link, 'inv_link': identity_inverse_link, 'derivative': identity_derivative}, 'log': {'link': log_link, 'inv_link': log_inverse_link, 'derivative': log_derivative}, 'logit': {'link': logit_link, 'inv_link': logit_inverse_link, 'derivative': logit_derivative}}\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links['logit']['link'](mu)"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\nimport numpy as np\nfrom collections import Counter\nclass Node:\n    pass\nclass InternalNode(Node):\n\n    def __init__(self, feature, value, left, right):\n        self.feature = feature\n        self.value = value\n        self.left = left\n        self.right = right\nclass LeafNode(Node):\n\n    def __init__(self, samples):\n        self.samples = samples\nclass IsolationTree:\n\n    def __init__(self, data):\n        self.data = data\n        self.root = self.build_tree(list(range(len(data))))\n\n    def build_tree(self, indices):\n        if len(indices) < 3:\n            return LeafNode(indices)\n        feature = np.random.choice(range(self.data.shape[1]))\n        down = min(self.data[indices, feature])\n        up = max(self.data[indices, feature])\n        v = np.random.uniform(down, up)\n        left_indices = [i for i in indices if self.data[i, feature] <= v]\n        right_indices = [i for i in indices if self.data[i, feature] > v]\n        left = self.build_tree(left_indices)\n        right = self.build_tree(right_indices)\n        return InternalNode(feature, v, left, right)\nclass TreeIsolationForest(IsolationTree):\n\n    def path_length(self, index, node, depth):\n        if isinstance(node, LeafNode):\n            if index in node.samples:\n                return depth\n        elif isinstance(node, InternalNode):\n            if self.data[index, node.feature] <= node.value:\n                return self.path_length(index, node.left, depth + 1)\n            else:\n                return self.path_length(index, node.right, depth + 1)\n\n    def depth(self):\n        return [self.path_length(i, self.root, 0) for i in range(len(self.data))]\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    tree = TreeIsolationForest(data)\n    return tree.depth()"}
{"task_id": 7, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    threshold = math.ceil(minsup * len(transactions))\n    items = set([item for sublist in transactions for item in sublist])\n    itemsets = {itemset: 0 for itemset in map(lambda x: (x,), items)}\n    for transaction in transactions:\n        for size in range(2, len(items) + 1):\n            for combination in combinations(transaction, size):\n                if combination in itemsets:\n                    itemsets[combination] += 1\n    return {itemset: support for (itemset, support) in itemsets.items() if support >= threshold}"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    assert 1 <= k <= len(data), 'Invalid number of clusters'\n    assert epsilon > 0, 'Invalid epsilon value'\n    assert max_iter > 0, 'Invalid max_iter value'\n    centers = data[:k].tolist()\n    for _ in range(max_iter):\n        labels = np.argmin(np.linalg.norm(data[:, np.newaxis] - centers, axis=-1), axis=-1)\n        new_centers = [np.mean(data[labels == i], axis=0).tolist() for i in range(k)]\n        for (i, center) in enumerate(new_centers):\n            if np.isnan(center).any():\n                new_centers[i] = data[np.random.randint(0, len(data))]\n        centers = [list(map(lambda x: round(x, 4), center)) for center in new_centers]\n        if np.linalg.norm(np.array(new_centers) - np.array(centers)) < epsilon:\n            break\n        centers = new_centers\n    centers = [list(map(lambda x: round(x, 4), center)) for center in centers]\n    labels = labels.tolist()\n    return (centers, labels)"}
{"task_id": 13, "completion_id": 0, "solution": "from typing import List\nimport numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> List[int]:\n    n_users = data.shape[0]\n    n_items = data.shape[1]\n    similarity = np.zeros((n_items, n_items))\n    for i in range(n_items):\n        for j in range(i, n_items):\n            common_users = [user for user in range(n_users) if data[user, i] > 0 and data[user, j] > 0]\n            if len(common_users) == 0:\n                similarity[i, j] = 0\n                similarity[j, i] = 0\n            else:\n                v1 = np.array([data[user, i] for user in common_users])\n                v2 = np.array([data[user, j] for user in common_users])\n                v1_mean = np.mean(v1) if np.std(v1) > 0.001 else 0\n                v2_mean = np.mean(v2) if np.std(v2) > 0.001 else 0\n                v1 = v1 - v1_mean\n                v2 = v2 - v2_mean\n                if criterion == 'cosine':\n                    similarity[i, j] = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n                    similarity[j, i] = similarity[i, j]\n                elif criterion == 'pearson':\n                    similarity[i, j] = np.corrcoef(v1, v2)[0, 1]\n                    similarity[j, i] = similarity[i, j]\n    rated_items = [item for item in range(n_items) if data[user_ind, item] > 0]\n    predicted_scores = defaultdict(int)\n    for item in range(n_items):\n        if data[user_ind, item] == 0:\n            total = np.sum([similarity[item, i] for i in rated_items if similarity[item, i] > 0])\n            count = np.sum([abs(similarity[item, i]) for i in rated_items if similarity[item, i] > 0])\n            if count > 0:\n                predicted_scores[item] = total / count\n    return sorted(predicted_scores, key=predicted_scores.get, reverse=True)[:k]"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Tuple\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> Tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n\n    def total_loss(G, H):\n        return -0.5 * (G ** 2 / (H + lam)).sum() + gamma\n\n    def gain(G_total, G_L, G_R, H_L, H_R):\n        return G_total - total_loss(G_L, H_L) - total_loss(G_R, H_R)\n    (G_total, H_total) = (g.sum(), h.sum())\n    G_initial = total_loss(G_total, H_total)\n    (best_gain, best_threshold, best_feature) = (-np.inf, None, None)\n    for feature in range(X.shape[1]):\n        values = np.unique(X[:, feature])\n        for threshold in values:\n            left_mask = X[:, feature] <= threshold\n            right_mask = ~left_mask\n            if left_mask.sum() < 2 or right_mask.sum() < 2:\n                continue\n            (G_left, H_left) = (g[left_mask].sum(), h[left_mask].sum())\n            (G_right, H_right) = (g[right_mask].sum(), h[right_mask].sum())\n            split_gain = gain(G_initial, G_left, G_right, H_left, H_right)\n            if split_gain > best_gain:\n                best_gain = split_gain\n                best_threshold = threshold\n                best_feature = feature\n    return (best_feature, best_threshold) if best_gain > 0 else None"}
{"task_id": 20, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    x = np.array(x)\n    sigmoid = 1 / (1 + np.exp(-x))\n    gradient = sigmoid * (1 - sigmoid)\n    if x.ndim == 0:\n        return (round(sigmoid, 4), round(gradient, 4))\n    else:\n        return (sigmoid.round(4).tolist(), gradient.round(4).tolist())"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    weights = np.ones(len(y_train)) / len(y_train)\n    stumps = []\n    stump_weights = []\n    for d in range(2):\n        for i in range(len(x_train) - 1):\n            threshold = (x_train[i] + x_train[i + 1]) / 2.0\n            stumps.append((d, threshold))\n    while len(stumps) != 0:\n        optimal_stump = None\n        min_error = float('inf')\n        for stump in stumps:\n            preds = np.ones(len(y_train))\n            preds[x_train <= stump[1]] = -1 if stump[0] == 0 else 1\n            error = np.sum(weights[preds != y_train])\n            if error < min_error:\n                min_error = error\n                optimal_stump = stump\n        if min_error < epsilon:\n            break\n        optimal_stump_preds = np.ones(len(y_train))\n        optimal_stump_preds[x_train <= optimal_stump[1]] = -1 if optimal_stump[0] == 0 else 1\n        alpha = 0.5 * np.log((1.0 - min_error) / min_error)\n        weights *= np.exp(-alpha * y_train * optimal_stump_preds)\n        weights /= weights.sum()\n        stump_weights.append(alpha)\n        stumps.remove(optimal_stump)\n    preds = np.zeros(len(x_test))\n    for (stump, alpha) in zip(stumps, stump_weights):\n        preds[x_test <= stump[1]] += alpha if stump[0] == 0 else -alpha\n    return [1 if pred > 0 else -1 for pred in preds]"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef gaussian_svm_predict(X_train, y_train, alpha, b, gamma, X_test):\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    D = np.sum(X_train ** 2, axis=1) + np.sum(X_test ** 2, axis=1)[:, np.newaxis] - 2 * np.dot(X_test, X_train.T)\n    K = np.exp(-gamma * D)\n    g = np.sum(alpha * y_train * K, axis=1) + b\n    y = [1 if gi >= 0 else -1 for gi in g]\n    return y"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    if k < 1 or k > min(len(X), len(X[0])):\n        return -1\n    X = np.array(X)\n    (U, s, Vt) = np.linalg.svd(X, full_matrices=False)\n    U_k = U[:, :k]\n    s_k = s[:k]\n    Vt_k = Vt[:k, :]\n    X_hat = U_k @ np.diag(s_k) @ Vt_k\n    mse = np.mean((X - X_hat) ** 2)\n    X_hat = [[round(elem, 4) for elem in row] for row in X_hat.tolist()]\n    mse = round(mse, 4)\n    return (X_hat, mse)"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    (x_train, y_train, y_query) = (np.array(x_train), np.array(y_train), np.array(x_query))\n    split_points = [(x_train[i] + x_train[i + 1]) / 2 for i in range(len(x_train) - 1)]\n    residuals = y_train\n    rss = float('inf')\n    stumps = []\n    while rss > epsilon:\n        (min_rss, best_stump) = (float('inf'), None)\n        for s in split_points:\n            left_residuals = residuals[x_train <= s]\n            right_residuals = residuals[x_train > s]\n            left_mean = np.mean(left_residuals)\n            right_mean = np.mean(right_residuals)\n            left_pred = np.full(left_residuals.shape, left_mean)\n            right_pred = np.full(right_residuals.shape, right_mean)\n            total_residuals = np.concatenate((left_residuals - left_pred, right_residuals - right_pred))\n            stump_rss = np.sum(total_residuals ** 2)\n            if stump_rss < min_rss:\n                min_rss = stump_rss\n                best_stump = (s, left_mean, right_mean)\n        stumps.append(best_stump)\n        residuals = np.where(x_train <= best_stump[0], best_stump[1], best_stump[2])\n        rss = min_rss\n    y_query = sum((stump[1] if x < stump[0] else stump[2] for stump in stumps))\n    return round(y_query, 4)"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s.\n\n    Parameters:\n    shape (tuple[int, ...]): The desired shape of the tensor.\n    sparsity (float): The probability of generating a 1.0. It must be in the closed interval [0,1].\n    seed (int | None): If provided, the procedure will call ``np.random.seed(seed)`` for reproducible results.\n\n    Returns:\n    If `sparsity` is outside the legal range, return -1. Otherwise, return a `numpy.ndarray` filled with 0.0s and 1.0s,\n    according to the given `sparsity`. The dtype of the returned array is a floating type.\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    threshold = 1 - sparsity\n    rand_arr = np.random.rand(*shape)\n    binary_arr = np.where(rand_arr < threshold, 0.0, 1.0)\n    return binary_arr"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    median_pos = n_samples // 2\n    column = data[:, d]\n    sorted_indices = np.argpartition(column, median_pos)\n    pivot_index = sorted_indices[median_pos]\n    pivot = pivot_index\n    left = sorted_indices[:median_pos].tolist()\n    right = sorted_indices[median_pos + 1:].tolist()\n    return (pivot, left, right)"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n        \n    Raises\n    ------\n    AssertionError\n        If pre-conditions are violated.\n    \"\"\"\n    assert len(x.shape) == 1, 'x must be a 1-D array.'\n    assert frame_width > 0 and stride > 0, 'frame_width and stride must be positive.'\n    assert len(x) >= frame_width, 'x must have length at least frame_width.'\n    n_frames = (len(x) - frame_width) // stride + 1\n    n_discarded_samples = len(x) - n_frames * stride\n    new_shape = (n_frames, frame_width)\n    new_strides = (x.strides[0] * stride, x.strides[0])\n    result = as_strided(x, shape=new_shape, strides=new_strides)\n    result = result[:n_frames]\n    if not writeable:\n        result.flags.writeable = False\n    return result"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.array(X)\n    if X.ndim != 2:\n        return False\n    if np.any((X < 0) | (X > 1)):\n        return False\n    row_sums = np.sum(X, axis=1)\n    if not np.allclose(row_sums, np.ones(len(X)), rtol=0, atol=1e-08):\n        return False\n    return True\nX = [[0.1, 0.9], [0.8, 0.2]]"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    (n, d) = X.shape\n    w = np.zeros((d,))\n    s = np.zeros((d,))\n    g = X.T.dot(X.dot(w) - y) / n\n    iter = 0\n    while np.linalg.norm(g) > epsilon and iter < max_iter:\n        s = rho * s + (1 - rho) * g ** 2\n        w -= eta * g / (np.sqrt(s) + eps_station)\n        g = X.T.dot(X.dot(w) - y) / n\n        iter += 1\n    return [round(coef, 4) for coef in w]"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"\n    This function calculates the softplus function or its derivative for the input values.\n    For numerical stability, the softplus and sigmoid functions are implemented using \n    corresponding numpy functions.\n    If a scalar is provided, a single float is returned.\n    Otherwise, a list of floats is returned.\n\n    Args:\n    x: A scalar, a Python list, or a NumPy array, containing real values.\n    deriv: A Boolean flag indicating whether the derivative (sigmoid) should be returned.\n\n    Returns:\n    The SoftPlus function or its derivative for every element in x (rounded to 4th decimal). \n    If x is a scalar, a single float is returned. Otherwise, a list of floats is returned.\n    \"\"\"\n    x = np.array(x)\n    if deriv:\n        res = 1 / (1 + np.exp(-np.clip(x, -30, 100)))\n    else:\n        res = np.log1p(np.exp(np.clip(x, -100, 30)))\n    res = np.round(res, 4)\n    if isinstance(x, list):\n        res = res.tolist()\n    return res"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\nimport math\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    ngrams = [' '.join(corpus[i:i + N]) for i in range(len(corpus) - N + 1)]\n    n_1_grams = [' '.join(corpus[i:i + N - 1]) for i in range(len(corpus) - N + 2)]\n    ngram_counts = Counter(ngrams)\n    n_1_gram_counts = Counter(n_1_grams)\n    seq_ngrams = [' '.join(sequence[i:i + N]) for i in range(len(sequence) - N + 1)]\n    log_prob = 0\n    for ngram in seq_ngrams:\n        prefix = ' '.join(ngram.split()[:-1])\n        if ngram_counts[ngram] == 0 or n_1_gram_counts[prefix] == 0:\n            return float('-inf')\n        else:\n            prob = ngram_counts[ngram] / n_1_gram_counts[prefix]\n            log_prob += math.log(prob)\n    return round(log_prob, 4)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.special import soft_thresh\ndef generate_polynomial(X, degree):\n    \"\"\"Generate the design matrix given an input vector X and polynomial degree.\"\"\"\n    X_poly = np.ones((len(X), degree + 1))\n    for i in range(1, degree + 1):\n        X_poly[:, i] = X ** i\n    return X_poly\ndef lasso_regression(X: list, y: list, degree: int, reg_factor: float, n_iterations: int=1000, tol: float=1e-06) -> list[float]:\n    (X, y) = (np.array(X), np.array(y))\n    weights = np.zeros(degree + 1)\n    X_poly = generate_polynomial(X, degree)\n    coeff_changed = tol + 1\n    for iteration in range(n_iterations):\n        weights_old = np.copy(weights)\n        y_hat = np.dot(X_poly, weights)\n        weights[0] = np.mean(y - y_hat + weights[0] * X_poly[:, 0])\n        for d in range(1, degree + 1):\n            x_d = X ** d\n            rho = np.dot(x_d, y - y_hat + weights[d] * x_d)\n            weights[d] = soft_thresh(rho, reg_factor) / np.dot(x_d, x_d)\n        coeff_changed = np.max(np.abs(weights_old - weights))\n        if coeff_changed < tol:\n            break\n    return [round(w, 4) for w in weights]"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    This function calculates the backward probability vector beta_t for a given time index t\n    in a Hidden Markov Model.\n\n    It receives 4 parameters:\n    1. A - transition-probability matrix of shape (N, N)\n    2. B - emission-probability matrix of shape (N, M)\n    3. obs - list of observation indices (length T)\n    4. t - integer time index (0 <= t < T)\n\n    The function returns a Python list containing the N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    N = A.shape[0]\n    M = B.shape[1]\n    T = len(obs)\n    assert A.shape == (N, N), 'Transition-probability matrix A should have shape (N, N)'\n    assert B.shape == (N, M), 'Emission-probability matrix B should have shape (N, M)'\n    assert 0 <= t < T, 'Time index t should be in range [0, T)'\n    beta = np.zeros(N)\n    for time_step in range(T - 1, t - 1, -1):\n        if time_step == T - 1:\n            beta = np.ones(N)\n        else:\n            beta = np.sum(A * B[:, obs[time_step + 1]] * beta, axis=1)\n    beta = [round(val, 4) for val in beta.tolist()]\n    return beta"}
{"task_id": 65, "completion_id": 0, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    no_states = len(A)\n    no_obs = len(obs)\n    if no_states == 0 or no_obs == 0 or len(pi) == 0:\n        return 0.0\n    beta = np.ones((no_obs, no_states))\n    for t in reversed(range(no_obs - 1)):\n        beta[t] = np.dot(A, B[:, obs[t + 1]] * beta[t + 1])\n    sequence_prob = np.sum(pi * B[:, obs[0]] * beta[0])\n    return round(sequence_prob, 6)"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    (n, m) = B.shape\n    T = len(observations)\n    if S.shape != (n,) or A.shape != (n, n) or B.shape != (n, m) or (T == 0):\n        return -1\n    if any((k not in range(m) for k in observations)):\n        return -1\n    alpha = np.zeros((T, n))\n    alpha[0, :] = S * B[:, observations[0]]\n    for t in range(1, T):\n        for j in range(n):\n            alpha[t, j] = np.dot(alpha[t - 1, :], A[:, j]) * B[j, observations[t]]\n    P = np.sum(alpha[-1, :])\n    return round(P, 4)\nS = [0.5, 0.5]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.4, 0.5], [0.6, 0.3, 0.1]]\nobservations = [0, 1, 2]"}
{"task_id": 70, "completion_id": 0, "solution": "from collections import namedtuple, defaultdict\nfrom itertools import chain, combinations\nclass Tree:\n\n    def __init__(self, item, count=1):\n        self.item = item\n        self.count = count\n        self.children = {}\n        self.next = None\ndef fp_growth(transactions, min_support):\n    item_counts = get_item_counts(transactions)\n    items = [item for (item, c) in item_counts.items() if c >= min_support]\n    items.sort()\n    tree = construct_tree(items, transactions, {}, 0)\n    return get_frequent_itemsets(tree, set(items), min_support, set())\ndef get_item_counts(transactions):\n    item_counts = defaultdict(int)\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] += 1\n    return item_counts\ndef construct_tree(items, transactions, headers, item_idx):\n    tree = Tree(items[item_idx - 1])\n    for transaction in transactions:\n        item = transaction[item_idx]\n        if item in tree.children:\n            tree.children[item].count += 1\n        else:\n            tree.children[item] = Tree(item)\n            headers[item] += (tree.children[item],)\n    if item_idx < len(items) - 1:\n        for item in tree.children.keys():\n            tree.children[item] = construct_tree(items, [transaction for transaction in transactions if transaction[item_idx] == item], headers, item_idx + 1)\n    return tree\ndef get_frequent_itemsets(tree, items, min_support, frequent_itemsets):\n    counts = {item: tree.children[item].count for item in items if item in tree.children}\n    for (item, count) in counts.items():\n        if count >= min_support:\n            frequent_itemsets.add(frozenset([item]))\n            conditional_tree = conditional_tree_from_paths(tree.children[item], items)\n            conditional_items = get_items_from_tree(conditional_tree)\n            if conditional_items:\n                frequent_itemsets.update(get_frequent_itemsets(conditional_tree, conditional_items, min_support, set()))\n    return [set(sorted(s)) for s in frequent_itemsets]\ndef conditional_tree_from_paths(tree, items):\n    headers = {item: [tree] for item in items if item in tree.children}\n    for item in sorted(headers.keys(), key=lambda x: tree.children[x].count, reverse=True):\n        for next_item in tree.children[item].children.keys():\n            headers[next_item] += (tree.children[item].children[next_item],)\n    return headers[max(headers.keys(), key=lambda x: len(headers[x]))][0]\ndef get_items_from_tree(tree):\n    return sorted((tree.item for tree in tree.children.values()), key=lambda x: tree.children[x].count, reverse=True)"}
{"task_id": 75, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    if not isinstance(k, int) or k < 1 or k > len(X_train):\n        return -1\n    dists = np.sqrt(np.sum((np.array(X_test)[:, None, :] - X_train) ** 2, axis=-1))\n    k_neighbors = np.argsort(dists)[:, :k]\n    y_pred = []\n    for neighbors in k_neighbors:\n        (labels, counts) = np.unique(np.array(y_train)[neighbors], return_counts=True)\n        max_count = max(counts)\n        max_labels = [label for (count, label) in zip(counts, labels) if count == max_count]\n        y_pred.append(min(max_labels))\n    return y_pred"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y) if isinstance(y, list) else y\n    y_pred = np.array(y_pred) if isinstance(y_pred, list) else y_pred\n    y_pred = np.clip(y_pred, a_min=1e-15, a_max=1 - 1e-15)\n    loss = -np.sum(y * np.log(y_pred))\n    return round(loss, 4)"}
{"task_id": 77, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(Z):\n    A = 1 / (1 + np.exp(-Z))\n    cache = Z\n    return (A, cache)\ndef relu(Z):\n    A = np.maximum(0, Z)\n    cache = Z\n    return (A, cache)\ndef linear_forward(A, W, b):\n    Z = np.dot(W, A) + b\n    cache = (A, W, b)\n    return (Z, cache)\ndef linear_activation_forward(A_prev, W, b, activation):\n    (Z, linear_cache) = linear_forward(A_prev, W, b)\n    (A, activation_cache) = (None, None)\n    if activation == 'sigmoid':\n        (A, activation_cache) = sigmoid(Z)\n    elif activation == 'relu':\n        (A, activation_cache) = relu(Z)\n    cache = (linear_cache, activation_cache)\n    return (A, cache)\ndef L_model_forward(X, parameters):\n    caches = []\n    A = X\n    L = len(parameters) // 2\n    for l in range(1, L):\n        A_prev = A\n        (A, cache) = linear_activation_forward(A_prev, parameters['W' + str(l)], parameters['b' + str(l)], 'relu')\n        caches.append(cache)\n    (AL, cache) = linear_activation_forward(A, parameters['W' + str(L)], parameters['b' + str(L)], 'sigmoid')\n    caches.append(cache)\n    AL = AL.round(4).tolist()\n    return (AL, caches)"}
{"task_id": 81, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    eps = 1e-15\n    A2 = np.clip(A2, eps, 1 - eps)\n    m = A2.shape[-1]\n    cost = 1 / m * (-np.dot(Y, np.log(A2).T) - np.dot(1 - Y, np.log(1 - A2).T))\n    return round(cost.squeeze(), 6)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    Q = np.array(Q)\n    len_actions = len(Q)\n    greedy_index = np.where(Q == np.max(Q))[0][0]\n    prob_greedy = 1 - epsilon + epsilon / len_actions\n    prob_others = epsilon / len_actions\n    probabilities = np.full(len_actions, prob_others)\n    probabilities[greedy_index] = prob_greedy\n    probabilities = np.round(probabilities, 4)\n    return probabilities\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1\ngreedy_index = 0"}
{"task_id": 86, "completion_id": 0, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    transposed = list(zip(*predictions))\n    aggregated = []\n    for sample_votes in transposed:\n        counts = Counter(sample_votes)\n        max_count = max(counts.values())\n        possible_labels_with_max_count = [label for (label, count) in counts.items() if count == max_count]\n        aggregated.append(min(possible_labels_with_max_count))\n    return aggregated"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z). This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    if isinstance(z, (list, np.ndarray)):\n        result = np.logaddexp(0, z)\n        result = np.around(result, 4)\n        return result.tolist()\n    else:\n        result = np.logaddexp(0, z)\n        result = np.around(result, 4)\n        return float(result)"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Any\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    if not hasattr(bandit, 'arm_evs') or not hasattr(policy, 'ev_estimates'):\n        return np.nan\n    bandit_evs = bandit.arm_evs\n    policy_evs = policy.ev_estimates\n    if len(bandit_evs) != len(policy_evs) or len(policy_evs) == 0:\n        return np.nan\n    sorted_arms = sorted(list(bandit_evs.keys()) + list(policy_evs.keys()))\n    mse = sum(((policy_evs[arm] - bandit_evs[arm]) ** 2 for arm in sorted_arms)) / len(sorted_arms)\n    return round(mse, 4)"}
{"task_id": 96, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    unigrams = Counter()\n    ngams = defaultdict(Counter)\n    for s in corpus:\n        tokens = s.split()\n        for gram in zip(*(tokens[i:] for i in range(N))):\n            ngams[gram[:-1]][gram[-1]] += 1\n        unigrams.update(tokens)\n    V = len(unigrams) + 1\n    tokens = sequence.split()\n    if len(tokens) < N:\n        return 0.0\n    log_prob = 0.0\n    for gram in zip(*(tokens[i:] for i in range(N))):\n        numer = ngams[gram[:-1]][gram[-1]] + K\n        denom = sum(ngams[gram[:-1]].values()) + K * V\n        log_prob += math.log(numer / denom)\n    return round(log_prob, 4)\ncorpus = ['the cat sat on the mat', 'the cat ate the mouse']\nN = 2\nK = 1.0"}
{"task_id": 108, "completion_id": 0, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    (N, M) = X.shape\n    np.random.seed(0)\n    W = np.random.randn(N, K)\n    H = np.random.randn(K, M)\n    loss = np.inf\n    for _ in range(max_iter):\n        H_new = np.linalg.pinv(W.T @ W + alpha * np.eye(K)) @ W.T @ X\n        W_new = X @ H_new.T @ np.linalg.pinv(H_new @ H_new.T + alpha * np.eye(K))\n        loss_new = np.linalg.norm(X - W_new @ H_new, 'fro') + alpha * (np.linalg.norm(W_new, 'fro') + np.linalg.norm(H_new, 'fro'))\n        if np.abs(loss - loss_new) < tol:\n            break\n        (W, H, loss) = (W_new, H_new, loss_new)\n    X_hat = W @ H\n    return X_hat.round(4).tolist()"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        random.seed(random_state)\n        np.random.seed(random_state)\n    centroids = random.sample(list(X), K)\n    closest = np.argmin(np.linalg.norm(X[:, None] - centroids, axis=-1), axis=-1)\n    for _ in range(max_iter):\n        new_centroids = np.array([X[closest == k].mean(axis=0) for k in range(K)])\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n        closest = np.argmin(np.linalg.norm(X[:, None] - centroids, axis=-1), axis=-1)\n    centroids = [list(map(lambda x: round(x, 4), c)) for c in centroids]\n    centroids.sort(key=lambda x: (x[0], x))\n    return centroids"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    text = text[:time_steps]\n    text = text.ljust(time_steps)\n    tokens = [vocabulary.get(char, 0) for char in text]\n    return tokens\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    tokens = [inverse_vocab[idx] for idx in indices if idx != 0]\n    return ''.join(tokens)\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    prediction = model.predict(np.array([encoded_text]))\n    decoded_pred = int_to_string(prediction.argmax(axis=-1)[0], inv_output_vocabulary)\n    return decoded_pred"}
{"task_id": 113, "completion_id": 0, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str], optional\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        from EXAMPLES import EXAMPLES\n    else:\n        EXAMPLES = examples\n    predictions = []\n    for example in EXAMPLES:\n        prediction = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        prediction_string = ''.join(prediction)\n        print('input:', example)\n        print('output:', prediction_string)\n        predictions.append(prediction_string)\n    return predictions"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    eps = 1e-20\n    z = np.dot(X, w)\n    p = 1 / (1 + np.exp(-z))\n    p[p == 0] = eps\n    p[p == 1] = 1 - eps\n    loss = -1 / X.shape[0] * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    grad = 1 / X.shape[0] * np.dot(X.T, p - y)\n    return (round(float(loss), 4), np.around(grad, 4).tolist())"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    weights = np.ones(len(X_train)) / len(X_train)\n    clfs = []\n    for _ in range(n_clf):\n        (clf, error, incorrect_pred) = Decision_Stump(X_train, y_train, weights)\n        clfs.append((clf, error))\n        if error == 0:\n            break\n        beta = error / (1.0 - error)\n        for i in range(len(incorrect_pred)):\n            if incorrect_pred[i]:\n                weights[i] *= beta\n    weights /= np.sum(weights)\n    final_pred = np.zeros(len(X_test))\n    for (clf, error) in clfs:\n        prediction = clf.predict(X_test)\n        alpha = np.log((1.0 - error) / error) / 2.0\n        final_pred += alpha * prediction\n    final_pred = [1 if i >= 0 else -1 for i in final_pred]\n    return final_pred\ndef Decision_Stump(X_train, y_train, weights):\n    (best_clf, best_error, best_incorrect) = (None, 1.0, None)\n    feature_and_values = [(i, val) for i in range(X_train.shape[1]) for val in np.unique(X_train[:, i])]\n    for (idx, feature, value) in itertools.product(range(X_train.shape[1]), feature_and_values):\n        pola = np.ones(len(y_train))\n        pola[X_train[:, feature] <= value] = -1\n        error = np.sum(weights[y_train != pola])\n        if error > 0.5:\n            error = 1.0 - error\n            pola *= -1\n        if error < best_error:\n            (best_clf, best_error, best_incorrect) = (Stump(feature, value), error, pola != y_train)\n    return (best_clf, best_error, best_incorrect)\ndef Stump(feature: int, value: float):\n    return lambda X_train: np.array([1 if xi[feature] > value else -1 for xi in X_train])"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    class_labels = np.unique(y)\n    c_means = np.array([np.mean(X[y == i], axis=0) for i in class_labels])\n    u_mean = np.mean(X, axis=0)\n    class_sizes = np.array([np.sum(y == i) for i in class_labels])\n    sw = sum([np.cov(X[y == i].T, bias=1) * class_sizes[j] for (j, i) in enumerate(class_labels)])\n    sb = sum([class_sizes[j] * np.outer(cm - u_mean, (cm - u_mean).T) for (j, cm) in enumerate(c_means)])\n    a = np.dot(np.linalg.pinv(sw), sb)\n    (eig_vals, eig_vecs) = np.linalg.eigh(a)\n    idx = np.argsort(eig_vals)[::-1]\n    eig_vecs = eig_vecs[:, idx]\n    for i in np.argwhere(np.isclose(eig_vecs[:, 0], 0)):\n        if np.all(eig_vecs[:, i[0]] >= 0):\n            eig_vecs[:, i[0]] *= -1\n    eig_vecs = eig_vecs[:, :n_components]\n    projected_data = np.dot(X, eig_vecs).round(4)\n    return projected_data.tolist()"}
{"task_id": 140, "completion_id": 0, "solution": "from collections import deque\ndef escape_fire_maze(grid):\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    inf = float('inf')\n    fire_grid = [[inf if cell != 'F' else 0 for cell in row] for row in grid]\n    agent_grid = [[inf if cell != '.' else 0 for cell in row] for row in grid]\n    queue = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                queue.append((i, j))\n    while queue:\n        (x, y) = queue.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (fire_grid[nx][ny] == inf) and (grid[nx][ny] in ['.', 'F']):\n                fire_grid[nx][ny] = fire_grid[x][y] + 1\n                queue.append((nx, ny))\n    if grid[0][0] in ['.', 'F']:\n        queue.append((0, 0))\n    while queue:\n        (x, y) = queue.popleft()\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (agent_grid[nx][ny] == inf) and (grid[nx][ny] != '#') and (fire_grid[nx][ny] == inf or fire_grid[nx][ny] > agent_grid[x][y] + 1):\n                agent_grid[nx][ny] = agent_grid[x][y] + 1\n                if nx == n - 1 and ny == n - 1:\n                    return agent_grid[nx][ny]\n                queue.append((nx, ny))\n    return -1"}
{"task_id": 141, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.spatial import distance\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    \"\"\"\n    Implementation of the k-Nearest Neighbors (k-NN) Classifier\n\n    Args:\n    X_train: numpy array, shape = [n_samples, n_features]\n        Training Data\n    y_train: numpy array, shape = [n_samples]\n        Training Labels\n    X_test: numpy array, shape = [n_samples, n_features]\n        Test Data\n    k: int\n        Number of nearest neighbors to consider for majority voting\n    metric: string, default = 'euclidean'\n        Metric to use for distance computation.\n        'euclidean' uses Euclidean distance,\n        'manhattan' uses Mahattan distance,\n        'cosine' uses Cosine distance\n\n    Returns:\n    y_pred: numpy array, shape = [n_samples]\n        Predicted labels\n    \"\"\"\n    if metric not in ['euclidean', 'manhattan', 'cosine']:\n        metric = 'euclidean'\n\n    def calculate_distance(x1, x2):\n        if metric == 'euclidean':\n            return distance.euclidean(x1, x2)\n        elif metric == 'manhattan':\n            return distance.cityblock(x1, x2)\n        elif metric == 'cosine':\n            return distance.cosine(x1, x2)\n    y_pred = np.empty(X_test.shape[0], dtype=y_train.dtype)\n    for (i, test_sample) in enumerate(X_test):\n        distances = np.empty(X_train.shape[0])\n        for (j, train_sample) in enumerate(X_train):\n            distances[j] = calculate_distance(test_sample, train_sample)\n        knn_indices = np.argpartition(distances, k)[:k]\n        knn_labels = y_train[knn_indices]\n        (labels, counts) = np.unique(knn_labels, return_counts=True)\n        y_pred[i] = labels[np.argmax(counts)]\n    return y_pred"}
{"task_id": 146, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n\n    def euclidean_distance(x, y):\n        return np.sqrt(np.sum((x - y) ** 2))\n\n    def manhattan_distance(x, y):\n        return np.sum(np.abs(x - y))\n\n    def cosine_distance(x, y):\n        eps = 1e-12\n        return 1 - np.dot(x, y) / ((np.linalg.norm(x) + eps) * (np.linalg.norm(y) + eps))\n    distance_metrics = {'euclidean': euclidean_distance, 'manhattan': manhattan_distance, 'cosine': cosine_distance}\n    if metric not in distance_metrics:\n        raise ValueError('Invalid distance metric')\n    pred_labels = []\n    n_train = X.shape[0]\n    n_test = X_test.shape[0]\n    for i in range(n_test):\n        distances = np.zeros(n_train)\n        for j in range(n_train):\n            distances[j] = distance_metrics[metric](X_test[i], X[j])\n        knn_indices = np.argsort(distances)[:min(k, n_train)]\n        count = np.bincount(y[knn_indices])\n        if len(count) > 0 and np.max(count) > 1:\n            labels = np.nonzero(count == np.max(count))[0]\n            pred_labels.append(np.min(labels))\n        elif len(count) > 0:\n            pred_labels.append(np.argmax(count))\n        else:\n            pred_labels.append(y[knn_indices[0]])\n    return pred_labels"}
{"task_id": 155, "completion_id": 0, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    state = np.array(state)\n    Z1 = np.dot(state, weights['W1']) + weights['b1']\n    A1 = np.maximum(Z1, 0)\n    Z2 = np.dot(A1, weights['W2']) + weights['b2']\n    A2 = np.maximum(Z2, 0)\n    Z3 = np.dot(A2, weights['W3']) + weights['b3']\n    A3 = np.tanh(Z3)\n    return [round(x, 4) for x in A3]"}
{"task_id": 160, "completion_id": 0, "solution": "import numpy as np\nimport numpy as np\ndef fit_lasso(X: np.ndarray, y: np.ndarray, lambda_param: float=1.0, max_iters: int=100, fit_intercept: bool=True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.column_stack([np.ones(X.shape[0]), X])\n    else:\n        X = np.column_stack([np.zeros(X.shape[0]), X])\n    weights = np.zeros(X.shape[1])\n    m = X.shape[0]\n    for _ in range(max_iters):\n        for j in range(X.shape[1]):\n            partial_residual = y - np.dot(X - X[:, j].reshape((-1, 1)), weights - weights[j])\n            weights[j] = soft_thresholding(np.dot(X[:, j], partial_residual), lambda_param * m) / np.sum(X[:, j] ** 2)\n    bias = weights[0] if fit_intercept else 0.0\n    weights_list = list(weights[1:] if fit_intercept else weights)\n    weights_list = [round(w, 4) for w in weights_list]\n    bias = round(bias, 4)\n    return (weights_list, bias)\ndef soft_thresholding(a: float, tau: float):\n    \"\"\"The soft-thresholding operator\n    \"\"\"\n    return np.sign(a) * max(abs(a) - tau, 0)"}
{"task_id": 165, "completion_id": 0, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    if len(x) != len(y):\n        return -1\n    (x, y) = (np.array(x), np.array(y))\n    distance = np.sum(x != y) / len(x)\n    return round(distance, 4)"}
{"task_id": 169, "completion_id": 0, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N < 1:\n        raise ValueError('N must be a positive integer')\n    if window == 'hamming':\n        return [round(0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == 'hann':\n        return [round(0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == 'blackman_harris':\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        return [round(a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError(\"The list 'coefficients' must be provided when window == 'generalized_cosine'\")\n        return [round(sum([coefficients[k] * np.cos(2 * np.pi * k * n / (N - 1)) for k in range(len(coefficients))]), 4) for n in range(N)]\n    else:\n        raise ValueError(f\"Unknown window name '{window}'\")"}
{"task_id": 171, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n\n    def sigmoid(z):\n        return 1 / (1 + np.exp(-z))\n\n    def add_intercept(X):\n        intercept = np.ones((X.shape[0], 1))\n        return np.concatenate((intercept, X), axis=1)\n\n    def train(X, y, learning_rate):\n        weights = np.zeros(X.shape[1])\n        for _ in range(epochs):\n            for i in range(0, X.shape[0], batch_size):\n                X_batch = X[i:i + batch_size]\n                y_batch = y[i:i + batch_size]\n                z = np.dot(X_batch, weights)\n                predictions = sigmoid(z)\n                gradient = np.dot(X_batch.T, predictions - y_batch) / y_batch.size\n                weights -= learning_rate * gradient\n        return weights\n\n    def predict(X, weights):\n        z = np.dot(X, weights)\n        probabilities = sigmoid(z)\n        return [unique_labels[0] if p < 0.5 else unique_labels[1] for p in probabilities]\n    unique_labels = list(set(y_train))\n    if len(unique_labels) < 2:\n        return [unique_labels[0] for _ in X_test]\n    map_labels = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train = [map_labels[y] for y in y_train]\n    X_train = np.array(X_train)\n    X_test = np.array(X_test)\n    X_train = add_intercept(X_train)\n    X_test = add_intercept(X_test)\n    weights = train(X_train, y_train, learning_rate)\n    y_pred = predict(X_test, weights)\n    return y_pred"}
{"task_id": 176, "completion_id": 0, "solution": "import numpy as np\ndef fit(X, y, n_estimators):\n    (n_samples, n_features) = X.shape\n    w = np.full(n_samples, 1 / n_samples)\n    weak_learners = []\n    for _ in range(n_estimators):\n        (best_stump, error, y_pred) = (np.inf, np.inf, np.ones(np.shape(y)))\n        for feature_index in range(n_features):\n            X_column = X[:, feature_index]\n            thresholds = np.unique(X_column)\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    current_pred = polarity * np.ones(np.shape(y))\n                    current_pred[X_column * polarity < threshold * polarity] = -1 * polarity\n                    current_error = np.sum(w[y != current_pred])\n                    if current_error < error:\n                        best_stump = {'feature_index': feature_index, 'threshold': threshold, 'polarity': polarity}\n                        error = current_error\n                        y_pred = current_pred.copy()\n        if error == 0:\n            break\n        alpha = 0.5 * np.log((1.0 - error) / (error + 1e-10))\n        w *= np.exp(-alpha * y * y_pred)\n        w /= np.sum(w)\n        weak_learners.append((alpha, best_stump))\n    return weak_learners\ndef predict(X, weak_learners):\n    n_samples = np.shape(X)[0]\n    y_pred = np.zeros((n_samples, 1))\n    for weak_learner in weak_learners:\n        (alpha, stump) = weak_learner\n        predictions = np.ones(np.shape(y_pred))\n        column = X[:, stump['feature_index']]\n        predictions[column * stump['polarity'] < stump['threshold'] * stump['polarity']] = -1 * stump['polarity']\n        y_pred += alpha * predictions\n    y_pred = np.sign(y_pred).flatten().tolist()\n    return y_pred\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=10):\n    weak_learners = fit(np.array(X_train), np.array(y_train), n_estimators)\n    y_predictions = predict(np.array(X_test), weak_learners)\n    return y_predictions"}
{"task_id": 178, "completion_id": 0, "solution": "import numpy as np\ndef sphere_function(position):\n    \"\"\"Calculates and return the Sphere function value for given position.\"\"\"\n    return np.sum(position ** 2)\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"\n    Minimizes the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimization iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    particles_position = rng.uniform(low=-1, high=1, size=(num_particles, n_dims))\n    particles_velocity = rng.uniform(low=-1, high=1, size=(num_particles, n_dims))\n    particles_best_objective_value = np.apply_along_axis(sphere_function, 1, particles_position)\n    global_best_particle_position = particles_position[np.argmin(particles_best_objective_value)]\n    global_best_objective_value = np.min(particles_best_objective_value)\n    for _ in range(num_iterations):\n        for particle_index in range(num_particles):\n            (r1, r2) = rng.random(2)\n            particles_velocity[particle_index] = w * particles_velocity[particle_index] + c1 * r1 * (particles_position[particle_index] - particles_position[particle_index]) + c2 * r2 * (global_best_particle_position - particles_position[particle_index])\n            particles_position[particle_index] = np.clip(particles_position[particle_index] + particles_velocity[particle_index], -1, 1)\n            new_objective_value = sphere_function(particles_position[particle_index])\n            if new_objective_value < particles_best_objective_value[particle_index]:\n                particles_best_objective_value[particle_index] = new_objective_value\n            if new_objective_value < global_best_objective_value:\n                global_best_particle_position = particles_position[particle_index]\n                global_best_objective_value = new_objective_value\n    return round(global_best_objective_value, 4)"}
{"task_id": 180, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train, y_train, X_test, k=5, task='classification'):\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n\n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((np.array(x1) - np.array(x2)) ** 2))\n\n    def get_neighbours(X_train, x_test, k):\n        distances = sorted([(euclidean_distance(x_train, x_test), y_train) for (x_train, y_train) in zip(X_train, y_train)])\n        return distances[:k if k > 0 else len(distances)]\n\n    def majority_vote(neighbours):\n        targets = [target for (distance, target) in neighbours]\n        most_common = Counter(targets).most_common()\n        max_count = most_common[0][1]\n        most_common_targets = [target for (target, count) in most_common if count == max_count]\n        return min(most_common_targets)\n\n    def mean_prediction(neighbours):\n        targets = [target for (distance, target) in neighbours]\n        return round(np.mean(targets), 4)\n    predictions = []\n    for x_test in X_test:\n        neighbours = get_neighbours(X_train, x_test, k)\n        if task == 'classification':\n            prediction = majority_vote(neighbours)\n        else:\n            prediction = mean_prediction(neighbours)\n        predictions.append(prediction)\n    return predictions"}
{"task_id": 184, "completion_id": 0, "solution": "import numpy as np\nclass Node:\n\n    def __init__(self, predicted_class):\n        self.predicted_class = predicted_class\n        self.feature = None\n        self.threshold = None\n        self.left_child = None\n        self.right_child = None\ndef gini_impurity(y):\n    (_, counts) = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    impurity = 1 - sum(probabilities ** 2)\n    return impurity\ndef split_data(X, y, feature, threshold):\n    left_indices = np.where(X[:, feature] <= threshold)[0]\n    right_indices = np.where(X[:, feature] > threshold)[0]\n    return (X[left_indices], y[left_indices], X[right_indices], y[right_indices])\ndef find_best_split(X, y):\n    best_gain = -np.inf\n    best_feature = None\n    best_threshold = None\n    parent_gini = gini_impurity(y)\n    (num_samples, num_features) = X.shape\n    for feature in range(num_features):\n        sorted_indices = np.argsort(X[:, feature])\n        X_sorted = X[sorted_indices]\n        y_sorted = y[sorted_indices]\n        possible_thresholds = (X_sorted[:-1, feature] + X_sorted[1:, feature]) / 2\n        for threshold in possible_thresholds:\n            (left_X, left_y, right_X, right_y) = split_data(X, y, feature, threshold)\n            if len(left_y) == 0 or len(right_y) == 0:\n                continue\n            num_left = len(left_y)\n            num_right = len(right_y)\n            num_total = num_left + num_right\n            children_gini = num_left / num_total * gini_impurity(left_y) + num_right / num_total * gini_impurity(right_y)\n            gain = parent_gini - children_gini\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature\n                best_threshold = threshold\n    return (best_feature, best_threshold)\ndef decision_tree_algorithm(X, y, depth=0, max_depth=None):\n    if len(set(y)) == 1 or (max_depth is not None and depth >= max_depth):\n        return Node(y[0])\n    (feature, threshold) = find_best_split(X, y)\n    if feature is None:\n        return Node(np.argmax(np.bincount(y)))\n    (X_left, y_left, X_right, y_right) = split_data(X, y, feature, threshold)\n    left_child = decision_tree_algorithm(X_left, y_left, depth + 1, max_depth)\n    right_child = decision_tree_algorithm(X_right, y_right, depth + 1, max_depth)\n    return (Node(np.argmax(np.bincount(y))), feature, threshold, left_child, right_child)\ndef make_prediction(x, tree):\n    if tree.predicted_class is not None:\n        return tree.predicted_class\n    if x[tree.feature] <= tree.threshold:\n        return make_prediction(x, tree.left_child)\n    else:\n        return make_prediction(x, tree.right_child)\ndef decision_tree_predict(X_train, y_train, X_test, max_depth=None):\n    tree = decision_tree_algorithm(X_train, y_train, max_depth=max_depth)\n    return [make_prediction(x, tree) for x in X_test]"}
{"task_id": 190, "completion_id": 0, "solution": "import numpy as np\ndef calc_gini(left, right):\n    n_total = len(left) + len(right)\n    (n_left, n_right) = (len(left), len(right))\n    if n_total == 0:\n        return (0, 0)\n    gini_left = gini_right = 1\n    for subset in [left, right]:\n        n_subset = len(subset)\n        if n_subset == 0:\n            return (0, 0)\n        p_k = np.bincount(subset) / n_subset if n_subset > 0 else None\n        if p_k is None:\n            continue\n        gini = 1 - np.sum(np.square(p_k))\n        if subset is left:\n            gini_left = gini\n        else:\n            gini_right = gini\n    gini_split = n_left / n_total * gini_left + n_right / n_total * gini_right\n    return (gini_split, np.bincount(y) / len(y))\ndef best_gini_split(X, y):\n    X = np.array(X)\n    y = np.array(y)\n    (best_gini, gini_whole_dataset) = (float('inf'), calc_gini(y, [])[0])\n    (best_feature_index, best_threshold_value) = (-1, None)\n    gini_whole_dataset = calc_gini(y, [])[0]\n    for j in range(X.shape[1]):\n        for v in np.unique(X[:, j]):\n            left = y[X[:, j] <= v]\n            right = y[X[:, j] > v]\n            (gini_split, p_k) = calc_gini(left, right)\n            if gini_split < best_gini or (gini_split == best_gini and (j < best_feature_index or (j == best_feature_index and v < best_threshold_value))):\n                (best_gini, best_feature_index, best_threshold_value) = (gini_split, j, v)\n    if best_feature_index == -1:\n        return (-1, None, round(gini_whole_dataset, 4))\n    else:\n        return (best_feature_index, best_threshold_value, round(best_gini, 4))"}
{"task_id": 191, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Iterable\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n\n    def is_numeric(x):\n        return np.issubdtype(type(x), np.number)\n\n    def validate(x, y):\n        if not isinstance(x, (list, tuple, np.ndarray)) or not isinstance(y, (list, tuple, np.ndarray)):\n            return False\n        if len(x) == 0 or len(y) == 0 or len(x) != len(y):\n            return False\n        if any((not is_numeric(i) for i in x)) or any((not is_numeric(i) for i in y)):\n            return False\n        if name == 'cosine':\n            if np.linalg.norm(x) * np.linalg.norm(y) == 0:\n                return False\n        return True\n\n    def euclidean(x, y):\n        return round(np.sqrt(np.sum(np.square(np.array(x) - np.array(y)))), 4)\n\n    def manhattan(x, y):\n        return round(np.sum(np.abs(np.array(x) - np.array(y))), 4)\n\n    def chebyshev(x, y):\n        return round(np.max(np.abs(np.array(x) - np.array(y))), 4)\n\n    def cosine(x, y):\n        return round(1.0 - np.dot(x, y) / (np.linalg.norm(x) * np.linalg.norm(y)), 4)\n    metrics_dict = {'euclidean': euclidean, 'manhattan': manhattan, 'chebyshev': chebyshev, 'cosine': cosine}\n\n    def d(x, y):\n        if name not in metrics_dict or not validate(x, y):\n            return -1\n        return metrics_dict[name](x, y)\n    return d"}
{"task_id": 197, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    if not md_action:\n        if cont_action:\n            return ([np.inf], None, 1)\n        else:\n            return ([env.action_space.n], list(range(env.action_space.n)), 1)\n    else:\n        spaces = env.action_space.spaces\n        n_actions_per_dim = []\n        for space in spaces:\n            if hasattr(space, 'n'):\n                n_actions_per_dim.append(space.n)\n            else:\n                n_actions_per_dim.append(np.inf)\n        if np.inf in n_actions_per_dim:\n            return (n_actions_per_dim, None, len(n_actions_per_dim))\n        else:\n            action_ids = list(product(*[range(n) for n in n_actions_per_dim]))\n            return (n_actions_per_dim, action_ids, len(n_actions_per_dim))"}
{"task_id": 198, "completion_id": 0, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    beta = np.zeros((V, len(phi[0][0])))\n    for (d, doc) in enumerate(corpus):\n        for (n, word) in enumerate(doc):\n            beta[word] += phi[d][n]\n    beta = beta / beta.sum(axis=0)\n    beta = np.round(beta, decimals=4)\n    return beta.tolist()"}
{"task_id": 202, "completion_id": 0, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    medoids = X[:k]\n    cost = sum([np.linalg.norm(x - medoids[i % k]) for (i, x) in enumerate(X)])\n    while True:\n        non_medoids = np.delete(X, np.s_[:k], axis=0)\n        potential_swaps = []\n        cost_reductions = []\n        for (i, medoid) in enumerate(medoids):\n            for non_medoid in non_medoids:\n                cost_reduction = np.linalg.norm(non_medoid - medoids[(i + 1) % k]) - np.linalg.norm(non_medoid - medoid)\n                potential_swaps.append((i, non_medoid))\n                cost_reductions.append(cost_reduction)\n        max_index = np.argmax(cost_reductions)\n        if cost_reductions[max_index] > 0:\n            medoids[potential_swaps[max_index][0]] = potential_swaps[max_index][1]\n            cost -= cost_reductions[max_index]\n        else:\n            break\n    labels = [min(range(len(medoids)), key=lambda i: np.linalg.norm(x - medoids[i])) for x in X]\n    return labels"}
{"task_id": 216, "completion_id": 0, "solution": "import numpy as np\nfrom sklearn.preprocessing import PolynomialFeatures, StandardScaler\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    if len(x_train[0]) != len(x_test[0]):\n        return -1\n    if n_iterations <= 0:\n        return -1\n    poly = PolynomialFeatures(degree)\n    x_train_poly = poly.fit_transform(x_train)\n    x_test_poly = poly.transform(x_test)\n    scaler = StandardScaler()\n    x_train_scaled = scaler.fit_transform(x_train_poly[:, 1:])\n    x_test_scaled = scaler.transform(x_test_poly[:, 1:])\n    x_train_final = np.hstack([np.ones((x_train_scaled.shape[0], 1)), x_train_scaled])\n    x_test_final = np.hstack([np.ones((x_test_scaled.shape[0], 1)), x_test_scaled])\n    weights = np.zeros(x_train_final.shape[1])\n    for _ in range(n_iterations):\n        y_preds = np.dot(x_train_final, weights)\n        residuals = y_preds - y_train\n        gradient = np.dot(x_train_final.T, residuals)\n        l1_penalty = reg_factor * l1_ratio * np.sign(weights)\n        l2_penalty = reg_factor * (1 - l1_ratio) * weights\n        weights -= learning_rate * (gradient + l1_penalty + l2_penalty) / x_train_final.shape[0]\n    predictions = np.dot(x_test_final, weights)\n    return np.round(predictions, 4).tolist()"}
{"task_id": 217, "completion_id": 0, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    sigmoid = 1 / (1 + np.exp(-predicted))\n    grad = actual * sigmoid - actual * sigmoid ** 2\n    hess = sigmoid * (1 - sigmoid)\n    sigmoid = np.round(sigmoid, decimals=6)\n    grad = np.round(grad, decimals=6)\n    hess = np.round(hess, decimals=6)\n    sigmoid = sigmoid.tolist()\n    grad = grad.tolist()\n    hess = hess.tolist()\n    return (grad, hess, sigmoid)"}
{"task_id": 218, "completion_id": 0, "solution": "def blackjack_hand_value(hand):\n    \"\"\"Calculate the hand's value considering aces.\"\"\"\n    ace_count = hand.count(1)\n    total = sum(hand)\n    while ace_count > 0 and total + 10 <= 21:\n        total += 10\n        ace_count -= 1\n    return total\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    player_total = blackjack_hand_value(player)\n    dealer_total = blackjack_hand_value(dealer)\n    if player_total > 21:\n        return -1\n    elif dealer_total > 21:\n        return 1\n    elif player_total > dealer_total:\n        if player_total == 21 and len(player) == 2:\n            return 1.5\n        else:\n            return 1\n    elif player_total < dealer_total:\n        return -1\n    else:\n        return 0"}
{"task_id": 221, "completion_id": 0, "solution": "import numpy as np\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculates Mean Squared Logarithmic Error (MSLE).\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    return np.mean(squared_log_error(actual, predicted)).round(4)"}
{"task_id": 222, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    z = np.array(z)\n    mask = z >= 0\n    neg_mask = z < 0\n    zp = np.zeros(z.shape)\n    zp[mask] = np.exp(-z[mask])\n    zp[neg_mask] = np.exp(z[neg_mask])\n    sigmoid_z = 1 / (1 + zp)\n    return sigmoid_z.tolist() if isinstance(z, (list, np.ndarray)) else round(float(sigmoid_z), 4)"}
{"task_id": 224, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    if isinstance(z, (int, float)):\n        return z if z >= 0 else a * z\n    elif isinstance(z, list):\n        return [leaky_relu(z_i, a) for z_i in z]\n    elif isinstance(z, np.ndarray):\n        neg_mask = z < 0\n        z[neg_mask] *= a\n        return z.tolist()\n    else:\n        raise ValueError(f\"Unsupported data type {type(z)} for 'z' parameter\")"}
{"task_id": 226, "completion_id": 0, "solution": "import numpy as np\nimport math\nclass DecisionStump:\n\n    def __init__(self):\n        self.polarity = 1\n        self.feature_idx = None\n        self.threshold = None\n        self.alpha = None\n\n    def predict(self, X):\n        n_samples = X.shape[0]\n        X_col = X[:, self.feature_idx]\n        predictions = np.ones(n_samples)\n        if self.polarity == 1:\n            predictions[X_col < self.threshold] = -1\n        else:\n            predictions[X_col < self.threshold] = 1\n        return predictions\ndef adaboost_predict(X_train, y_train, X_test, n_clf=5):\n    (n_samples, n_features) = X_train.shape\n    w = np.full(n_samples, 1 / n_samples)\n    clfs = []\n    for _ in range(n_clf):\n        clf = DecisionStump()\n        min_error = float('inf')\n        for feature_i in range(n_features):\n            feature_values = np.expand_dims(X_train[:, feature_i], axis=1)\n            unique_values = np.unique(feature_values)\n            for threshold in unique_values:\n                p = 1\n                predictions = np.ones(np.shape(y_train))\n                predictions[X_train[:, feature_i] < threshold] = -1\n                error = np.sum(w[predictions != y_train])\n                if error > 0.5:\n                    error = 1 - error\n                    p = -1\n                if error < min_error:\n                    clf.polarity = p\n                    clf.threshold = threshold\n                    clf.feature_idx = feature_i\n                    min_error = error\n        clf.alpha = 0.5 * np.log((1.0 - min_error) / (min_error + 1e-10))\n        predictions = clf.predict(X_train)\n        w *= np.exp(-clf.alpha * y_train * predictions)\n        w /= np.sum(w)\n        clfs.append(clf)\n    y_pred = np.zeros(np.shape(y_test))\n    for clf in clfs:\n        y_pred += clf.alpha * clf.predict(X_test)\n    y_pred = np.sign(y_pred)\n    return y_pred.tolist()"}
{"task_id": 241, "completion_id": 0, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    shape = list(shape)\n    d1 = np.prod(shape[1:])\n    d0 = shape[0]\n    min_dim = min(d0, d1)\n    A = np.random.normal(0, 1, (d0, d1))\n    (U, _, Vt) = np.linalg.svd(A, full_matrices=False)\n    Q = U if U.shape == A.shape else Vt\n    Q = Q.reshape(shape) * scale\n    return Q.tolist()"}
{"task_id": 243, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    z1 = max(0, np.sum(state))\n    z2 = 4 * z1\n    z3 = 16 * z1\n    logits = 4 * z3\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n    state_value = 4 * z3\n    action_probs = np.round(action_probs, 4).tolist()\n    state_value = np.round(state_value, 4)\n    return (action_probs, state_value)"}
{"task_id": 249, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n\n    def relu(x):\n        return np.maximum(0, x)\n    state = np.array(state)\n    h = relu(np.dot(state, params['W1']) + params['b1'])\n    h = relu(np.dot(h, params['W2']) + params['b2'])\n    h = relu(np.dot(h, params['W3']) + params['b3'])\n    logits = np.dot(h, params['Wa']) + params['ba']\n    probabilities = np.exp(logits) / np.sum(np.exp(logits))\n    value = np.dot(h, params['Wc']) + params['bc']\n    probabilities = [round(p, 4) for p in probabilities.tolist()]\n    value = round(float(value), 4)\n    return (probabilities, value)"}
{"task_id": 253, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    if not isinstance(w, np.ndarray):\n        w = np.array(w)\n    if gradient:\n        penalty = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n        return np.around(penalty, decimals=4).tolist()\n    else:\n        penalty = alpha * (l1_ratio * np.linalg.norm(w) + (1 - l1_ratio) / 2 * np.dot(w, w))\n        return round(penalty, 4)\nw = np.array([1, 2, 3, 4, 5])\nalpha = 0.3\nl1_ratio = 0.5"}
{"task_id": 256, "completion_id": 0, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    if param_name in ('X', 'y'):\n        return None\n    param_name = param_name.lower()\n    params = deepcopy(model.parameters)\n    backup_params = deepcopy(model.parameters)\n    grads = np.zeros_like(params[param_name], dtype=np.float64)\n    for (idx, _) in np.ndenumerate(params[param_name]):\n        params[param_name][idx] += epsilon\n        X_t_plus = X\n        loss_plus = 0.0\n        for t in range(n_t):\n            y_hat_plus = model.forward(X_t_plus)\n            loss_plus += loss_func([y_hat_plus])\n            X_t_plus = y_hat_plus\n        model.flush_gradients()\n        params[param_name][idx] -= 2 * epsilon\n        X_t_minus = X\n        loss_minus = 0.0\n        for t in range(n_t):\n            y_hat_minus = model.forward(X_t_minus)\n            loss_minus += loss_func([y_hat_minus])\n            X_t_minus = y_hat_minus\n        model.flush_gradients()\n        grads[idx] = (loss_plus - loss_minus) / (2 * epsilon)\n        params[param_name][idx] = backup_params[param_name][idx]\n    return grads.T"}
{"task_id": 257, "completion_id": 0, "solution": "import numpy as np\ndef decision_stump(X_train, y_train, sample_weights):\n    (best_feature, best_threshold, min_error, signs) = (None, None, None, None)\n    for feature in range(X_train.shape[1]):\n        (threshold, error, sign) = find_best_threshold(X_train[:, feature], y_train, sample_weights)\n        if min_error is None or error < min_error:\n            min_error = error\n            (best_feature, best_threshold, signs) = (feature, threshold, sign)\n    return (best_feature, best_threshold, min_error, signs)\ndef find_best_threshold(feature_vector, labels, sample_weights):\n    sort_index = np.argsort(feature_vector)\n    sorted_feature = feature_vector[sort_index]\n    sorted_labels = labels[sort_index]\n    sorted_weights = sample_weights[sort_index]\n    (weight_left, weight_right) = (np.sum(sample_weights), 0.0)\n    (best_threshold, min_error, signs) = (None, None, None)\n    for i in range(len(sorted_feature) - 1):\n        threshold = (sorted_feature[i] + sorted_feature[i + 1]) / 2\n        condition = sorted_feature > threshold\n        weight_left -= sorted_weights[condition]\n        weight_right += sorted_weights[condition]\n        error = min(weight_right, weight_left)\n        if min_error is None or error < min_error:\n            min_error = error\n            best_threshold = threshold\n            signs = [-1, 1] if np.sum(sorted_labels[condition]) > 0 else [1, -1]\n    return (best_threshold, min_error, signs)\ndef update_weights(best_feature, best_threshold, labels, weights, signs):\n    predictions = signs[np.where(labels > best_threshold, 1, 0)]\n    incorrect = predictions != labels\n    weights[incorrect] *= np.exp(best_threshold)\n    weights /= np.sum(weights)\n    return weights\ndef predict(X_test, best_feature, best_threshold, sign, weights):\n    return sign * np.where(X_test[:, best_feature] > best_threshold, 1, -1)\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    n_clf = max(n_clf, 1)\n    (m, n) = X_train.shape\n    sample_weights = np.full(m, 1 / m)\n    predictions = np.zeros(m)\n    (classifiers, weights) = ([], [])\n    for _ in range(n_clf):\n        (best_feature, best_threshold, min_error, signs) = decision_stump(X_train, y_train, sample_weights)\n        alpha_t = 0.5 * np.log((1 - min_error) / min_error)\n        classifiers.append((best_feature, best_threshold, signs))\n        weights.append(alpha_t)\n        sample_weights = update_weights(best_feature, best_threshold, y_train, sample_weights, signs)\n        predictions += alpha_t * predict(X_train, best_feature, best_threshold, signs[0], predictions)\n    y_test = np.ones_like(y_train)\n    for (clf, weight) in zip(classifiers, weights):\n        y_test += weight * predict(X_test, *clf)\n    return list(np.where(y_test > 0, 1, -1))"}
{"task_id": 261, "completion_id": 0, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least two dimensions')\n    (fan_in, fan_out) = shape[:2]\n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n    std_dev = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=std_dev, size=shape)"}
{"task_id": 266, "completion_id": 0, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    adj_list = {v: [] for v in V}\n    for (u, v) in E:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    for v in V:\n        adj_list[v] = sorted(set(adj_list[v]), key=V.index)\n    return [adj_list[v] for v in V]\nV = [1, 2, 3, 4, 5]\nE = [(1, 2), (1, 3), (2, 4), (3, 5), (1, 5)]"}
{"task_id": 267, "completion_id": 0, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n\n    def predict_with_polarity(X, feature_i, threshold, polarity):\n        return np.ones(X.shape[0]) - np.sign(polarity * ((np.sign(X[:, feature_i] - threshold) + 1) // 2 * 2 - 1.5))\n\n    def find_optimal_stump(X, y, weights):\n        min_error = np.inf\n        for feature_i in range(X.shape[1]):\n            sorted_indices = np.argsort(X[:, feature_i])\n            X_all = X[sorted_indices]\n            y_all = y[sorted_indices]\n            weights_all = weights[sorted_indices]\n            thetas = [-np.inf] + [(X_all[i, feature_i] + X_all[i + 1, feature_i]) / 2 for i in range(X.shape[0] - 1)] + [np.inf]\n            for theta in thetas:\n                y_hat = np.concatenate([predict_with_polarity(X_all, feature_i, theta, polarity) for polarity in (1, -1)])\n                errors = np.abs(y_all - y_hat)\n                weighted_error = np.dot(weights_all, errors)\n                if weighted_error < min_error:\n                    min_error = weighted_error\n                    opt_feature_i = feature_i\n                    opt_theta = theta\n                    opt_y_hat = y_hat\n                    opt_polarity = 1 if y_hat[0] == 1 else -1\n        return (opt_feature_i, opt_theta, opt_y_hat, opt_polarity, min_error)\n    (opt_feature_i, opt_theta, _, opt_polarity, min_error) = find_optimal_stump(X, y, sample_weights)\n    return {'feature_index': opt_feature_i, 'threshold': np.round(opt_theta, 4), 'polarity': opt_polarity, 'weighted_error': np.round(min_error, 4)}"}
{"task_id": 273, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef entropy(labels):\n    n = len(labels)\n    probabilities = [count / n for count in Counter(labels).values()]\n    entropy_val = sum([-p * math.log2(p) for p in probabilities])\n    return entropy_val\ndef information_gain(parent, left, right):\n    n = len(parent)\n    (left_weight, right_weight) = (len(left) / n, len(right) / n)\n    return entropy(parent) - (left_weight * entropy(left) + right_weight * entropy(right))\ndef best_split(feature, target):\n    if len(set(feature)) == 1:\n        return (None, 0.0)\n    best_threshold = None\n    max_information_gain = -1\n    parent_entropy = entropy(target)\n    sorted_data = sorted(zip(feature, target))\n    (sorted_features, sorted_targets) = zip(*sorted_data)\n    for i in range(1, len(sorted_features)):\n        if sorted_features[i] != sorted_features[i - 1]:\n            left = sorted_targets[:i]\n            right = sorted_targets[i:]\n            gain = information_gain(target, left, right)\n            if gain > max_information_gain:\n                best_threshold = (sorted_features[i - 1] + sorted_features[i]) / 2\n                max_information_gain = gain\n    return (round(best_threshold, 4), round(max_information_gain, 4))"}
{"task_id": 286, "completion_id": 0, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    if name in globals() and callable(globals()[name]):\n        return globals()[name]\n    else:\n        raise ValueError('Invalid initialization function.')\nname = 'ones_init'"}
{"task_id": 287, "completion_id": 0, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    (N, C, H, W) = X.shape\n    pooled_output = np.zeros((N, C, (H - p_h) // s_h + 1, (W - p_w) // s_w + 1))\n    grad_input = np.zeros_like(X)\n    for (k, i, j) in np.ndindex(grad_input.shape):\n        pooled_output[k, i, j] = np.mean(X[k, i:i + p_h, j:j + p_w])\n        grad_input[k, i:i + p_h, j:j + p_w] += accum_grad[k, i, j] / (p_h * p_w)\n    return (pooled_output.round(4).tolist(), grad_input.round(4).tolist())"}
{"task_id": 290, "completion_id": 0, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-08)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature:\n            return False\n        if not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-08):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    else:\n        return False"}
{"task_id": 292, "completion_id": 0, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    parent1_np = np.array(parent1, dtype=float)\n    parent2_np = np.array(parent2, dtype=float)\n    if parent1_np.shape != parent2_np.shape:\n        return -1\n    child1 = parent1_np.copy()\n    child2 = parent2_np.copy()\n    child1[:, cutoff:] = parent2_np[:, cutoff:]\n    child2[:, cutoff:] = parent1_np[:, cutoff:]\n    return (child1.tolist(), child2.tolist())"}
{"task_id": 294, "completion_id": 0, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adjacency_dict = {}\n    for vertex in G['_V2I'].keys():\n        adjacency_dict[vertex] = []\n    for edges in G['_G']:\n        for edge in edges:\n            (source, target, weight) = edge\n            if not G['is_directed']:\n                adjacency_dict[target].append((source, weight))\n            adjacency_dict[source].append((target, weight))\n    for neighbours in adjacency_dict.values():\n        neighbours.sort()\n    return adjacency_dict"}
{"task_id": 296, "completion_id": 0, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.array(x, dtype=int)\n    all_zero_one = np.logical_or(x == 0, x == 1)\n    return np.all(all_zero_one)\nx = np.array([0, 1, 2, 1, 0])"}
{"task_id": 298, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    unigram_counts = defaultdict(int)\n    ngram_counts = defaultdict(int)\n    n_minus_1gram_counts = defaultdict(int)\n    V = 0\n    for sentence in corpus:\n        tokens = sentence.split()\n        if N > 1:\n            tokens = ['<bol>'] * (N - 1) + tokens + ['<eol>']\n        for i in range(len(tokens)):\n            unigram_counts[tokens[i]] += 1\n            V += 1\n        for i in range(1, N):\n            ngram_counts[tuple(tokens[i - 1:i + 1])] += 1\n            n_minus_1gram_counts[tuple(tokens[i - 1:i + 1])] += 1\n        for i in range(N, len(tokens) + 1):\n            ngram_counts[tuple(tokens[i - N:i])] += 1\n            n_minus_1gram_counts[tuple(tokens[i - N + 1:i])] += 1\n    query_tokens = query.split()\n    if N > 1:\n        query_tokens = ['<bol>'] * (N - 1) + query_tokens + ['<eol>']\n    if len(query_tokens) < N:\n        return float('-inf')\n    total_log_probability = 0\n    for i in range(N, len(query_tokens) + 1):\n        ngram = tuple(query_tokens[i - N:i])\n        n_minus_1gram = tuple(query_tokens[i - N + 1:i])\n        if ngram_counts[ngram] == 0 or n_minus_1gram_counts[n_minus_1gram] == 0:\n            return float('-inf')\n        prob = ngram_counts[ngram] / n_minus_1gram_counts[n_minus_1gram]\n        total_log_probability += math.log(prob)\n    return round(total_log_probability, 4)"}
{"task_id": 302, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    pairwise_distances = np.sqrt(((X[:, np.newaxis, :] - X) ** 2).sum(axis=-1))\n    W = 1 / (1 + pairwise_distances)\n    np.fill_diagonal(W, 0)\n    D = np.diag(W.sum(axis=1))\n    L = D - W\n    (eigenvalues, eigenvectors) = np.linalg.eig(L)\n    indices = eigenvalues.argsort()[:k]\n    E = eigenvectors[:, indices]\n    centroids = E[:k]\n    labels = np.zeros(X.shape[0], dtype=int)\n    for _ in range(100):\n        distances = np.linalg.norm(E[:, np.newaxis, :] - centroids, axis=-1)\n        new_labels = np.argmin(distances, axis=1)\n        if np.array_equal(labels, new_labels):\n            break\n        labels = new_labels\n        for i in range(k):\n            if np.any(labels == i):\n                centroids[i] = E[labels == i].mean(axis=0)\n            else:\n                centroids[i] = E[np.random.randint(X.shape[0])]\n    else:\n        print('k-means did not converge after 100 iterations.')\n    return labels.tolist()"}
{"task_id": 303, "completion_id": 0, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    (prev_label, prev_mine) = params[max(ix - 1, 0)]\n    (curr_label, curr_mine) = params[ix]\n    return f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\n\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\nMine [{curr_label}]:\\n{curr_mine}\\n\\nTheirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n----------------------- END DEBUG -----------------------'"}
{"task_id": 304, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> list[float]:\n    if fit_intercept:\n        ones = np.ones((X.shape[0], 1))\n        X = np.concatenate((ones, X), axis=1)\n    n_features = X.shape[1]\n    if V is None:\n        V = np.eye(n_features)\n    elif np.isscalar(V):\n        V = V * np.eye(n_features)\n    elif isinstance(V, (list, tuple)):\n        V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    XTX_plus_V_inv = np.linalg.inv(np.matmul(X.T, X) + V_inv)\n    if np.isscalar(mu):\n        mu = [mu] * n_features\n    covariance_b = np.matmul(XTX_plus_V_inv, V_inv)\n    mean_b = np.matmul(covariance_b, np.matmul(V_inv, mu) + np.matmul(X.T, y))\n    return [round(coef, 4) for coef in mean_b]"}
{"task_id": 308, "completion_id": 0, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n   \n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    min_freq = min_freq if min_freq else 0\n    max_ffreq = max_freq if max_freq else fs // 2\n    min_mel = 2595 * np.log10(1 + min_freq / 700)\n    max_mel = 2595 * np.log10(1 + max_freq / 700)\n    mels = np.linspace(min_mel, max_mel, n_filters + 2)\n    freqs = 700 * (10 ** (mels / 2595) - 1)\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n    for i in range(n_filters):\n        for k in range(N // 2 + 1):\n            freq = k * fs / N\n            if freq > freqs[i] and freq <= freqs[i + 1]:\n                filterbank[i, k] = (freq - freqs[i]) / (freqs[i + 1] - freqs[i])\n            elif freq > freqs[i + 1] and freq <= freqs[i + 2]:\n                filterbank[i, k] = (freqs[i + 2] - freq) / (freqs[i + 2] - freqs[i + 1])\n        if normalize:\n            filterbank[i, :] /= np.sum(filterbank[i, :])\n    return [[round(x, 4) for x in row] for row in filterbank.tolist()]"}
{"task_id": 312, "completion_id": 0, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n    n = np.arange(0, window_len)\n    if symmetric:\n        window = a0 - a1 * np.cos(2 * np.pi * n / (window_len - 1)) + a2 * np.cos(4 * np.pi * n / (window_len - 1)) - a3 * np.cos(6 * np.pi * n / (window_len - 1))\n    else:\n        window = a0 - a1 * np.cos(2 * np.pi * n / (window_len + 1)) + a2 * np.cos(4 * np.pi * n / (window_len + 1)) - a3 * np.cos(6 * np.pi * n / (window_len + 1))\n    return [round(x, 4) for x in window]"}
{"task_id": 313, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef digamma(x):\n    \"\"\"Compute the digamma function of a real number x.\n\n    Parameters\n    ----------\n    x : float\n        The number to compute the digamma function of.\n\n    Returns\n    -------\n    float\n        The value of the digamma function at x.\n    \"\"\"\n    x = x + 6\n    p = 1 / (x * x)\n    p = (((0.00416666666667 * p - 0.00396825396825) * p + 0.00833333333333) * p - 0.0833333333333) * p\n    p = (((0.00416666666667 * p - 0.00396825396825) * p + 0.00833333333333) * p - 0.0833333333333) * p\n    return math.log(x) - 0.5 / x - p\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    gamma = gamma[d, t]\n    row_sum = np.sum(gamma)\n    return round(digamma(gamma) - digamma(row_sum), 4)"}
{"task_id": 317, "completion_id": 0, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    debug_str = '------------------------- DEBUG -------------------------' + '\\n'\n    (prev_prediction, prev_label) = params[max(ix - 1, 0)]\n    prev_gold = golds[prev_label]\n    (curr_prediction, curr_label) = params[ix]\n    curr_gold = golds[curr_label]\n    debug_str += 'Mine (prev) [{}]:\\n{}\\n\\nTheirs (prev) [{}]:\\n{}\\n\\n'.format(prev_label, prev_prediction, prev_label, prev_gold)\n    debug_str += 'Mine [{}]:\\n{}\\n\\nTheirs [{}]:\\n{}{}\\n'.format(curr_label, curr_prediction, curr_label, curr_gold, warn_str)\n    debug_str += '----------------------- END DEBUG -----------------------'\n    return debug_str"}
{"task_id": 318, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    weights = np.ones(len(X_train)) / len(X_train)\n    weak_classifiers = []\n    for _ in range(n_estimators):\n        stump = fit_stump(X_train, y_train, weights)\n        weak_classifiers.append(stump)\n        error = compute_error(stump, X_train, y_train, weights)\n        alpha = compute_alpha(error)\n        update_weights(stump, alpha, weights, X_train, y_train)\n    predictions = predict(weak_classifiers, X_test)\n    return predictions\ndef compute_error(stump, X, y, weights):\n    predicted_y = predict(stump, X)\n    incorrect = predicted_y != y\n    return np.sum(np.dot(incorrect, weights))\ndef compute_alpha(error):\n    return 0.5 * math.log((1.0 - error) / error)\ndef predict(models, X):\n    predictions = np.zeros(len(X))\n    for (feature, threshold, polarity) in models:\n        predictions += polarity * np.where(X[:, feature] < threshold, -1, 1)\n    return np.where(predictions < 0, -1, 1)\ndef fit_stump(X, y, weights):\n    total_error = float('inf')\n    (best_feature, best_threshold, best_polarity) = (None, None, None)\n    for feature in range(X.shape[1]):\n        column = X[:, feature]\n        thresholds = np.unique(column)\n        thresholds = np.sort(thresholds)\n        thresholds = (thresholds[1:] + thresholds[:-1]) / 2.0\n        for threshold in thresholds:\n            for polarity in [1, -1]:\n                predictions = np.where(column < threshold, polarity, -polarity)\n                weighted_error = np.sum(weights[predictions != y])\n                if weighted_error < total_error:\n                    total_error = weighted_error\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_polarity = polarity\n    return (best_feature, best_threshold, best_polarity)"}
{"task_id": 329, "completion_id": 0, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the center frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    if positive_only:\n        k = np.arange(N // 2 + 1)\n    else:\n        k = np.arange(-N // 2, N // 2 + 1)\n    f = (k * fs / N).round(4).tolist()\n    return f"}
{"task_id": 331, "completion_id": 0, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask, dtype=bool)\n    oob_predictions = np.where(oob_mask, predictions, np.nan)\n    avg_oob_predictions = np.nanmean(oob_predictions, axis=1)\n    squared_errors = (y_true - avg_oob_predictions) ** 2\n    oob_errors = np.where(~np.isnan(oob_predictions).any(axis=1), squared_errors, np.nan)\n    oob_mse = np.nanmean(oob_errors)\n    if np.isnan(oob_mse):\n        return -1\n    else:\n        return round(oob_mse, 4)"}
{"task_id": 332, "completion_id": 0, "solution": "from collections import Counter\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n\n    def update_tree(itemset, tree, support):\n        if itemset:\n            (head, *tail) = itemset\n            children = tree.get('children', {})\n            if head not in children:\n                children[head] = {'support': 0, 'children': {}}\n            update_tree(tail, children[head], support)\n            children[head]['support'] += support\n            tree['children'] = {k: v for (k, v) in sorted(children.items(), key=lambda item: (-item[1]['support'], item[0]))}\n    item_counts = Counter((item for trans in transactions for item in set(trans) for _ in range(len(trans))))\n    transactions = [[item for item in trans if item_counts[item] >= min_support] for trans in transactions]\n    transactions.sort(key=len, reverse=True)\n    tree = {'support': 0, 'children': {}}\n    for trans in transactions:\n        update_tree(trans, tree, 1)\n    return tree"}
{"task_id": 336, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X.copy()\n    else:\n        Y = np.array(Y, dtype=float)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    K = np.dot(X, Y.T) + c0\n    return np.round(K, 4).tolist()"}
{"task_id": 340, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * np.square(grad)\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    param_new = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n    return (np.around(param_new, decimals=8).tolist(), np.around(m, decimals=8).tolist(), np.around(v, decimals=8).tolist())"}
{"task_id": 343, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    rewards = np.array(rewards)\n    N = len(rewards)\n    top_k = int(N * retain_prcnt)\n    indices = np.argsort(rewards)[::-1][:top_k]\n    top_theta_samples = theta_samples[indices]\n    mean = np.mean(top_theta_samples, axis=0)\n    variance = np.var(top_theta_samples, axis=0)\n    mean = [round(m, 4) for m in mean]\n    variance = [round(v, 4) for v in variance]\n    return (mean, variance)\ntheta_samples = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\nrewards = np.array([25, 3, 5, 10])\nretain_prcnt = 0.5"}
{"task_id": 353, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    if not labels:\n        return 0.0\n    label_counter = Counter(labels)\n    total_labels = len(labels)\n    entropy = 0.0\n    for count in label_counter.values():\n        prob = count / total_labels\n        entropy -= prob * math.log2(prob)\n    return round(entropy, 5)"}
{"task_id": 354, "completion_id": 0, "solution": "import numpy as np\ndef conv2D(X: 'np.ndarray', W: 'np.ndarray', stride: int, pad, dilation: int=0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    if type(pad) is str and pad == 'same':\n        pad = ((W.shape[0] - 1) // 2, (W.shape[1] - 1) // 2)\n    elif type(pad) is int:\n        pad = (pad, pad)\n    X_pad = np.pad(X, ((0, 0), pad, pad, (0, 0)))\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, _, out_ch) = W.shape\n    out_rows = (in_rows + np.sum(pad) - dilation * (kernel_rows - 1) - 1) // stride + 1\n    out_cols = (in_cols + np.sum(pad) - dilation * (kernel_cols - 1) - 1) // stride + 1\n    Z = np.zeros((n_ex, out_rows, out_cols, out_ch))\n    for channel in range(out_ch):\n        for h in range(out_rows):\n            for w in range(out_cols):\n                vert_start = h * stride\n                vert_end = vert_start + kernel_rows\n                horiz_start = w * stride\n                horiz_end = horiz_start + kernel_cols\n                Z[:, h, w, channel] = np.sum(X_pad[:, vert_start:vert_end:dilation + 1, horiz_start:horiz_end:dilation + 1, :] * W[::-1, ::-1, :, channel], axis=(1, 2, 3))\n    return Z.tolist()"}
{"task_id": 355, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n    \n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n    \n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    data = data.astype(float)\n    means = np.mean(data, axis=0)\n    data_centered = data - means\n    if solver == 'svd':\n        (_, S, Vt) = np.linalg.svd(data_centered)\n        eigenvectors = Vt.T\n    elif solver == 'eigen':\n        cov_mat = np.cov(data_centered, rowvar=False, ddof=1)\n        (_, eigenvectors) = np.linalg.eigh(cov_mat)\n        eigenvectors = eigenvectors.T[::-1]\n    index_order = np.argsort(np.sum(eigenvectors ** 2, axis=0))[::-1]\n    explained_variance_ratio = np.cumsum(np.sum(eigenvectors ** 2, axis=0)[index_order])\n    for idx in range(index_order.shape[0]):\n        if np.sum(eigenvectors[:, index_order[idx]]) < 0:\n            eigenvectors[:, index_order[idx]] *= -1\n    explained_variance_ratio /= np.sum(explained_variance_ratio)\n    if n_components < eigenvectors.shape[1]:\n        eigenvectors = eigenvectors[:, index_order[:n_components]]\n    else:\n        eigenvectors = eigenvectors[:, index_order]\n    scores = np.dot(data_centered, eigenvectors)\n    return (np.round(scores, 4).tolist(), np.round(explained_variance_ratio, 4).tolist())"}
{"task_id": 356, "completion_id": 0, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return max(range(len(leaf.value)), key=leaf.value.__getitem__)\n    else:\n        return leaf.value"}
{"task_id": 357, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data, K, max_iters=100):\n    centroids = data[:K].copy()\n    for _ in range(max_iters):\n        old_centroids = centroids.copy()\n        distances = np.sqrt(((data - centroids[:, np.newaxis]) ** 2).sum(axis=-1))\n        labels = np.argmin(distances, axis=0)\n        for i in range(K):\n            centroids[i] = data[labels == i].mean(axis=0) if data[labels == i].size != 0 else old_centroids[i]\n        if np.allclose(centroids, old_centroids):\n            break\n    centroids = sorted(centroids.tolist())\n    centroids = [[round(y, 4) for y in x] for x in centroids]\n    return centroids\nK = 2"}
{"task_id": 362, "completion_id": 0, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    data = np.array(data, dtype=float)\n    row_sums = np.sum(data, axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    stochastic_data = data / row_sums[:, np.newaxis]\n    stochastic_data = np.round(stochastic_data, 4)\n    return stochastic_data.tolist()"}
{"task_id": 363, "completion_id": 0, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def check_space(space, is_tuple):\n        if is_tuple:\n            if isinstance(space, Dict):\n                return all((isinstance(sub_space, Box) for sub_space in space.spaces.values()))\n            elif isinstance(space, Tuple):\n                return all((isinstance(sub_space, Box) for sub_space in space.spaces))\n        else:\n            return isinstance(space, Box)\n    return (check_space(env.action_space, tuple_action), check_space(env.observation_space, tuple_obs))"}
{"task_id": 369, "completion_id": 0, "solution": "import numpy as np\ndef _softmax(x):\n    e_x = np.exp(x - np.max(x))\n    return e_x / e_x.sum(axis=0)\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    running_pred = np.zeros(updates[0].shape)\n    for update in updates:\n        running_pred -= learning_rate * update\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        class_probs = _softmax(running_pred)\n        return np.argmax(class_probs, axis=1)"}
{"task_id": 371, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Union, Tuple\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad: Union[int, Tuple[int, int], str], dilation: int=0) -> list:\n    (n_ex, sig_len, in_ch) = X.shape\n    (ker_wid, _, out_ch) = W.shape\n    ker_wid = (ker_wid - 1) * dilation + 1\n    if type(pad) is int:\n        pad_left = pad_right = pad\n    elif pad == 'same':\n        out_len = (sig_len + stride - 1) // stride\n        total_pad = max(0, (out_len - 1) * stride + ker_wid - sig_len)\n        pad_left = total_pad // 2\n        pad_right = total_pad - pad_left\n    else:\n        (pad_left, pad_right) = pad\n    sig_len_pad = sig_len + pad_left + pad_right\n    X_pad = np.zeros((n_ex, sig_len_pad, in_ch))\n    X_pad[:, pad_left:sig_len + pad_left, :] = X\n    ker_wid_dil = ker_wid + (ker_wid - 1) * dilation\n    W_dil = np.zeros((ker_wid_dil, in_ch, out_ch))\n    for k in range(ker_wid):\n        W_dil[k * dilation, :, :] = W[k, :, :]\n    out_len = (sig_len_pad - ker_wid_dil) // stride + 1\n    Y = np.zeros((n_ex, out_len, out_ch))\n    for n in range(n_ex):\n        for o in range(out_ch):\n            for i in range(out_len):\n                start = i * stride\n                end = start + ker_wid_dil\n                Y[n, i, o] = np.sum(X_pad[n, start:end, :] * W_dil[:, :, o])\n    return Y.tolist()"}
{"task_id": 373, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    freq_dict = Counter(y)\n    total_samples = len(y)\n    gini_impurity = 1 - sum(((counter / total_samples) ** 2 for counter in freq_dict.values()))\n    return round(gini_impurity, 4)"}
{"task_id": 374, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    (m, n) = X.shape\n    if m != len(y):\n        return -1\n    theta = np.zeros(n)\n    b = 0\n    for _ in range(n_iterations):\n        y_predicted = np.dot(X, theta) + b\n        dw = 2 / m * np.dot(X.T, y_predicted - y)\n        db = 2 / m * np.sum(y_predicted - y)\n        theta = theta - learning_rate * dw\n        b = b - learning_rate * db\n    return ([round(t, 4) for t in theta], round(b, 4))"}
{"task_id": 376, "completion_id": 0, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X = np.array(X)\n    if X.shape[0] != X.shape[1]:\n        return False\n    return np.allclose(X, X.T, atol=1e-08)"}
{"task_id": 377, "completion_id": 0, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Calculate the negative gradients for logistic loss for binary classification,\n    where y\u1d62 and f\u1d62 are the true labels and current prediction scores respectively.\n\n    Parameters:\n    y (list): Binary class labels (0 or 1)\n    f (list): Current prediction scores (floats)\n    \n    Returns:\n    list: List of negative gradients rounded to four decimal places.\n    \"\"\"\n    if np.any((np.array(y) != 0) & (np.array(y) != 1)):\n        return -1\n    y = np.array([2 * y_i - 1 for y_i in y])\n    f = np.array(f)\n    g = y / (1 + np.exp(y * f))\n    return np.round(g, 4).tolist()\ny = [0, 1, 1, 0]\nf = [0.1, 0.2, 0.3, 0.4]"}
{"task_id": 380, "completion_id": 0, "solution": "import numpy as np\ndef selu(x, order: int=0):\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    x = np.array(x)\n    if order == 0:\n        return np.round(np.where(x > 0, x, alpha * (np.exp(x) - 1)) * scale, 4).tolist()\n    elif order == 1:\n        return np.round(np.where(x > 0, scale, alpha * scale * np.exp(x)), 4).tolist()\n    elif order == 2:\n        return np.round(np.where(x > 0, scale, alpha * scale * np.exp(x)), 4).tolist()\n    else:\n        raise ValueError('order must be 0, 1, or 2')"}
{"task_id": 387, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_hat = np.full_like(y, fill_value=np.mean(y), dtype=np.float64)\n    for _ in range(n_estimators):\n        residuals = y - y_hat\n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        cumsum_residuals = np.cumsum(residuals[sorted_indices])\n        sorted_residuals = residuals[sorted_indices]\n        split_points = 0.5 * (sorted_x[1:] + sorted_x[:-1])\n        squared_errors = np.square(cumsum_residuals[:-1]) + np.square(cumsum_residuals[-1] - cumsum_residuals[:-1])\n        best_split_index = np.argmin(squared_errors)\n        split_point = split_points[best_split_index]\n        y_hat += learning_rate * np.where(x <= split_point, np.mean(sorted_residuals[:best_split_index + 1]), np.mean(sorted_residuals[best_split_index + 1:]))\n    return list(np.round(y_hat, 4))"}
{"task_id": 394, "completion_id": 0, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * np.square(grad)\n    w_next = w - learning_rate * grad / np.sqrt(Eg + 1e-08)\n    return (np.round(w_next, 4).tolist(), np.round(Eg, 4).tolist())"}
{"task_id": 398, "completion_id": 0, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x, dtype=float)\n    if derivative:\n        mask = x < 0\n        mask_func = alpha * np.exp(x)\n        result = np.where(mask, mask_func, 1)\n    else:\n        mask = x < 0\n        mask_func = alpha * (np.exp(x) - 1)\n        result = np.where(mask, mask_func, x)\n    return np.around(result, decimals=4).tolist()"}
{"task_id": 411, "completion_id": 0, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n\n    def is_multidim(lst):\n        return any((isinstance(el, (list, tuple, np.ndarray)) for el in lst))\n\n    def is_continuous(lst):\n        flatted = [item for sublist in lst for item in sublist]\n        return any((isinstance(el, float) and el != int(el) for el in flatted))\n\n    def get_uniques_and_dim(lst):\n        n_dim = len(lst[0]) if is_multidim(lst) else 1\n        ids = []\n        for dim in range(n_dim):\n            ids.append(sorted(set((item if not isinstance(item, (list, tuple, np.ndarray)) else item[dim] for item in lst))))\n        return (ids, n_dim)\n    (a_ids, action_dim) = get_uniques_and_dim(actions)\n    (o_ids, obs_dim) = get_uniques_and_dim(observations)\n    return {'tuple_actions': is_multidim(actions), 'tuple_observations': is_multidim(observations), 'multidim_actions': action_dim > 1, 'multidim_observations': obs_dim > 1, 'continuous_actions': is_continuous(a_ids), 'continuous_observations': is_continuous(o_ids), 'n_actions_per_dim': [len(ids) for ids in a_ids], 'action_dim': action_dim, 'n_obs_per_dim': [len(ids) for ids in o_ids], 'obs_dim': obs_dim, 'action_ids': a_ids, 'obs_ids': o_ids}"}
{"task_id": 413, "completion_id": 0, "solution": "import numpy as np\ndef mse(y):\n    return np.sum((y - np.mean(y)) ** 2)\ndef split_data(x, y):\n\n    def split_mse(index, value):\n        left = y[x <= value]\n        right = y[x > value]\n        return mse(left) + mse(right)\n    unique = np.unique(x)\n    if len(unique) == 1:\n        return (None, None, None, None)\n    scores = np.array([split_mse(x, v) for v in unique])\n    index = np.argmin(scores)\n    return (unique[index], y[x <= unique[index]], y[x > unique[index]])\ndef build_tree(x, y, depth=0):\n    if depth == 0:\n        global pred\n        pred = np.mean(y_train) * np.ones(len(x_train))\n    node = {'index': None, 'value': None, 'left': None, 'right': None, 'value': np.mean(y)}\n    if mse(y) != 0 and depth != max_depth:\n        best_mse = np.inf\n        for j in range(len(x[0])):\n            xj = x[:, j]\n            (value, left, right) = split_data(xj, y)\n            if mse(left) + mse(right) < best_mse:\n                node['index'] = j\n                node['value'] = value\n                node['left'] = build_tree(x[xj <= value], left, depth + 1)\n                node['right'] = build_tree(x[xj > value], right, depth + 1)\n                best_mse = mse(left) + mse(right)\n    return node\ndef predict(sample, tree):\n    while tree['index'] != None:\n        if sample[tree['index']] <= tree['value']:\n            tree = tree['left']\n        else:\n            tree = tree['right']\n    return tree['value']\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n    global y_train, x_train, max_depth\n    y_train = y_train\n    x_train = X_train\n    max_depth = max_depth\n    residuals = -(y_train - pred)\n    tree = build_tree(x_train, residuals)\n    for _ in range(n_estimators):\n        residuals = -(y_train - pred)\n        tree = build_tree(x_train, residuals)\n        pred += np.array([predict(sample, tree) for sample in x_train]) * learning_rate\n    return [round(predict(sample, tree), 4) for sample in X_test]"}
{"task_id": 416, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.linalg import inv, det\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\" Returns a list of pdf values for each sample in X, computed using a multivariate Gaussian distribution \"\"\"\n    n_features = X.shape[1]\n    determinant = det(cov)\n    cov_inv = inv(cov)\n    pdf_values = []\n    for x in X:\n        x_minus_mean = x - mean\n        exp_val = -0.5 * np.dot(np.dot(x_minus_mean.T, cov_inv), x_minus_mean)\n        const = 1 / np.sqrt(np.power(2 * np.pi, n_features) * determinant)\n        pdf_val = const * np.exp(exp_val)\n        pdf_values.append(round(pdf_val, 4))\n    return pdf_values"}
{"task_id": 419, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.insert(X, 0, 1, axis=1)\n        X_new = np.insert(X_new, 0, 1, axis=1)\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, (int, float)):\n        V = np.eye(X.shape[1]) * V\n    elif isinstance(V, np.ndarray) and len(V.shape) == 1:\n        V = np.diag(V)\n    if isinstance(mu, (int, float)):\n        mu = np.full(X.shape[1], mu)\n    inv_prior = np.linalg.inv(V)\n    V_posterior = np.linalg.inv(inv_prior + sigma ** 2 * X.T @ X)\n    mu_posterior = V_posterior @ (inv_prior @ mu + sigma ** 2 * X.T @ y)\n    predictions = X_new @ mu_posterior\n    return [round(pred, 4) for pred in predictions]"}
{"task_id": 423, "completion_id": 0, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    if len(actual) != len(predicted):\n        return -1\n    if any((x < 0 for x in actual)) or any((x < 0 for x in predicted)):\n        return -1\n    n = len(actual)\n    sum_value = sum(((np.log(1 + predicted[i]) - np.log(1 + actual[i])) ** 2 for i in range(n)))\n    rmsle = np.sqrt(1 / n * sum_value)\n    return round(rmsle, 4)"}
{"task_id": 428, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    window = np.zeros(window_len)"}
{"task_id": 433, "completion_id": 0, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Your task is to implement this function following the rules described in\n    the problem statement.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        (in_channels, out_channels, kernel_height, kernel_width) = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:\n        (fan_in, fan_out) = (shape[0], shape[1])\n    return (float(fan_in), float(fan_out))"}
{"task_id": 435, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(X: list[list[float]], y: list[float], n_estimators: int=10, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(y.mean(), 4)] * len(y)\n    y_hat = np.full_like(y, y.mean())\n    for _ in range(n_estimators):\n        residuals = y - y_hat\n        h_t = np.linalg.lstsq(np.c_[np.ones(X.shape[0]), X], residuals, rcond=None)[0]\n        y_hat += learning_rate * (h_t[0] + np.dot(X, h_t[1:]))\n    return [round(y, 4) for y in y_hat]"}
{"task_id": 437, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    x = np.array(x)\n    sigm = 1.0 / (1.0 + np.exp(-x))\n    if order == 0:\n        result = sigm\n    elif order == 1:\n        result = np.multiply(sigm, 1 - sigm)\n    elif order == 2:\n        result = np.multiply(sigm, (1 - sigm) * (1 - 2 * sigm))\n    else:\n        return -1\n    return np.round(result, 4).tolist()"}
{"task_id": 438, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if isinstance(y, list):\n        y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    elif num_classes < np.max(y) + 1:\n        return -1\n    one_hot_encoded = np.zeros((len(y), num_classes), dtype=int)\n    one_hot_encoded[np.arange(len(y)), y] = 1\n    return one_hot_encoded.tolist()\ny = [0, 3, 2, 1]\nnum_classes = None"}
{"task_id": 439, "completion_id": 0, "solution": "import itertools\nfrom collections import defaultdict\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    item_counts = defaultdict(int)\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] += 1\n    frequent_itemsets = []\n    for (item, count) in item_counts.items():\n        if count / len(transactions) >= min_sup:\n            frequent_itemsets.append((item,))\n    k = 2\n    while frequent_itemsets:\n        item_counts = defaultdict(int)\n        for transaction in transactions:\n            for itemset in itertools.combinations(transaction, k):\n                itemset_sorted = tuple(sorted(itemset))\n                if all((tuple(sorted(set(subitemset))) in frequent_itemsets for subitemset in itertools.combinations(itemset_sorted, k - 1))):\n                    item_counts[itemset_sorted] += 1\n        frequent_itemsets = []\n        for (itemset, count) in item_counts.items():\n            if count / len(transactions) >= min_sup:\n                frequent_itemsets.append(itemset)\n        k += 1\n    return sorted(frequent_itemsets, key=lambda x: (len(x), x))"}
{"task_id": 440, "completion_id": 0, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    averaged_predictions = np.mean(np.array(predictions), axis=0)\n    averaged_predictions = np.around(averaged_predictions, 4)\n    predicted_classes = np.argmax(averaged_predictions, axis=1)\n    return (averaged_predictions.tolist(), predicted_classes.tolist())"}
{"task_id": 444, "completion_id": 0, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]] | int:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    X = np.array(X)\n    if Y is not None:\n        Y = np.array(Y)\n    if sigma is None:\n        sigma = np.sqrt(X.shape[1] / 2)\n    elif isinstance(sigma, list):\n        if len(sigma) != X.shape[1]:\n            return -1\n        for s in sigma:\n            if s <= 0:\n                return -1\n    elif sigma <= 0:\n        return -1\n    if Y is None:\n        Y = X\n    elif X.shape[1] != Y.shape[1]:\n        return -1\n    K = np.zeros((X.shape[0], Y.shape[0]))\n    for i in range(X.shape[0]):\n        for j in range(Y.shape[0]):\n            K[i, j] = np.exp(-0.5 * np.sum(((X[i, :] - Y[j, :]) / sigma) ** 2))\n    return np.round(K, 4).tolist()"}
{"task_id": 446, "completion_id": 0, "solution": "from typing import Tuple\nfrom collections import Counter\nimport numpy as np\ndef decision_stump(X: list[list[float]], y: list[int]) -> Tuple:\n    \"\"\"Find a decision stump that maximises information gain.\"\"\"\n    X = np.array(X)\n    y = np.array(y)\n\n    def compute_entropy(labels):\n        counts = np.bincount(labels)\n        probs = counts[np.nonzero(counts)] / len(labels)\n        entropy = -np.sum(probs * np.log2(probs))\n        return entropy\n    parent_entropy = compute_entropy(y)\n    if parent_entropy == 0:\n        return (-1, None, y[0], y[0])\n    best_info_gain = 0\n    best_feature_idx = None\n    best_threshold = 0\n    majority_label = Counter(y).most_common(1)[0][0]\n    for feature_idx in range(X.shape[1]):\n        sorted_indices = np.argsort(X[:, feature_idx])\n        sorted_values = X[sorted_indices, feature_idx]\n        sorted_labels = y[sorted_indices]\n        previous_value = sorted_values[0]\n        left_labels = []\n        right_labels = sorted_labels.tolist()\n        for (i, value) in enumerate(sorted_values):\n            if value != previous_value:\n                threshold = (previous_value + value) / 2\n                left_labels_array = np.array(left_labels)\n                right_labels_array = np.array(right_labels)\n                n_left = len(left_labels)\n                n_right = len(right_labels)\n                n_total = n_left + n_right\n                left_entropy = compute_entropy(left_labels_array)\n                right_entropy = compute_entropy(right_labels_array)\n                info_gain = parent_entropy - n_left / n_total * left_entropy - n_right / n_total * right_entropy\n                if info_gain > best_info_gain or (info_gain == best_info_gain and (best_feature_idx is None or feature_idx < best_feature_idx)):\n                    best_info_gain = info_gain\n                    best_feature_idx = feature_idx\n                    best_threshold = round(threshold, 4)\n                    left_majority_label = Counter(left_labels_array).most_common(1)[0][0]\n                    right_majority_label = Counter(right_labels_array).most_common(1)[0][0]\n            left_labels.append(sorted_labels[i])\n            right_labels.pop(0)\n            previous_value = value\n    return (best_feature_idx, best_threshold, left_majority_label, right_majority_label)"}
{"task_id": 452, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold):\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\"\"\"\n    X = np.array(X)\n    if isinstance(threshold, (int, float)):\n        return [X[X[:, feature_i] >= threshold].tolist(), X[X[:, feature_i] < threshold].tolist()]\n    else:\n        return [X[X[:, feature_i] == threshold].tolist(), X[X[:, feature_i] != threshold].tolist()]"}
{"task_id": 453, "completion_id": 0, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    if not Q.shape[0] == len(actions) == len(rewards) == len(dones):\n        return -1\n    if not 0 <= gamma <= 1:\n        return -1\n    y = Q.tolist()\n    for i in range(Q.shape[0]):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * max(Q_next[i])\n        y[i][actions[i]] = round(target, 4)\n    return y"}
{"task_id": 458, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    if num_classes < max(labels) + 1:\n        return -1\n    if any((label < 0 for label in labels)):\n        return -1\n    one_hot_labels = [[0] * num_classes for _ in labels]\n    for (i, label) in enumerate(labels):\n        one_hot_labels[i][label] = 1\n    return one_hot_labels"}
{"task_id": 461, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, fill_value=np.mean(y), dtype=np.float64)\n    if n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        values = np.sort(np.unique(x))[:-1]\n        min_sse = np.inf\n        best_split = None\n        best_side = None\n        for t in values:\n            left_mask = x <= t\n            right_mask = ~left_mask\n            if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:\n                continue\n            (v_l, v_r) = (np.mean(residuals[left_mask]), np.mean(residuals[right_mask]))\n            sse = np.sum((residuals[left_mask] - v_l) ** 2) + np.sum((residuals[right_mask] - v_r) ** 2)\n            if sse < min_sse:\n                min_sse = sse\n                best_split = t\n                best_side = (v_l, v_r)\n        if best_split is None:\n            stump_pred = np.mean(residuals)\n        else:\n            stump_pred = np.full_like(residuals, fill_value=best_side[0], dtype=np.float64)\n            stump_pred[x > best_split] = best_side[1]\n        y_pred += learning_rate * stump_pred\n    return np.round(y_pred, 4).tolist()"}
{"task_id": 471, "completion_id": 0, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    q_table = np.array(q_table)\n    num_actions = q_table.shape[1]\n    if next_state is None:\n        target = reward\n    else:\n        greedy_action = np.argmax(q_table[next_state])\n        expectation = 0.0\n        for a in range(num_actions):\n            if a == greedy_action:\n                expectation += (1 - epsilon + epsilon / num_actions) * q_table[next_state][a]\n            else:\n                expectation += epsilon / num_actions * q_table[next_state][a]\n        target = reward + gamma * expectation\n    q_table[state][action] += lr * (target - q_table[state][action])\n    q_table = q_table.round(4)\n    q_table = q_table.tolist()\n    return q_table"}
{"task_id": 474, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    if seed is not None:\n        random.seed(seed)\n    (X_train, Y_train, X_val, Y_val) = ([], [], [], [])\n    for i in range(m):\n        x1 = np.random.uniform(i // 2 + 0.1, i // 2 + 0.9, n_train)\n        y1 = np.random.uniform(i % 2 * interval + 0.1, i % 2 * interval + 0.9, n_train)\n        labels1 = np.full(n_train, (i - 0.5) * 2)\n        X_train.append(np.column_stack((x1, y1)))\n        Y_train.append(labels1)\n        x2 = np.random.uniform(i // 2 + 0.1, i // 2 + 0.9, n_val)\n        y2 = np.random.uniform(i % 2 * interval + 0.1, i % 2 * interval + 0.9, n_val)\n        labels2 = np.full(n_val, (i - 0.5) * 2)\n        X_val.append(np.column_stack((x2, y2)))\n        Y_val.append(labels2)\n    return (np.round(np.vstack(X_train), 4), np.round(np.vstack(X_val), 4), np.round(np.hstack(Y_train), 4), np.round(np.hstack(Y_val), 4))"}
{"task_id": 475, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * np.square(grad)\n    m_hat = m_new / (1 - np.power(b1, t))\n    v_hat = v_new / (1 - np.power(b2, t))\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 479, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    n_arms = len(rewards[0])\n    arm_values = [ev_prior] * n_arms\n    pull_counts = [0] * n_arms\n    for step in rewards:\n        if np.random.random() < epsilon:\n            arm = np.random.randint(0, n_arms)\n        else:\n            arm = np.random.choice(np.flatnonzero(arm_values == np.max(arm_values)))\n        reward = step[arm]\n        pull_counts[arm] += 1\n        arm_values[arm] += (reward - arm_values[arm]) / pull_counts[arm]\n    return [round(value, 4) for value in arm_values]"}
{"task_id": 481, "completion_id": 0, "solution": "import numpy as np\nfrom numpy.linalg import norm\nfrom typing import List, Tuple\nfrom collections import defaultdict\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> List[int]:\n    if data.size == 0:\n        return []\n    dists = np.sqrt(((data[:, None, :] - data) ** 2).sum(-1))\n    neighbors_list = [np.where(d < eps)[0] for d in dists]\n    labels = np.full(data.shape[0], -1)\n    cluster_id = 0\n    for point_id in range(data.shape[0]):\n        if labels[point_id] == -1:\n            neighbors = neighbors_list[point_id]\n            if len(neighbors) < min_samples:\n                labels[point_id] = -1\n            else:\n                labels[point_id] = cluster_id\n                queue = neighbors.tolist()\n                q_idx = 0\n                while q_idx < len(queue):\n                    next_point = queue[q_idx]\n                    if labels[next_point] == -1:\n                        labels[next_point] = cluster_id\n                        queue.extend(neighbors_list[next_point])\n                    q_idx += 1\n                cluster_id += 1\n    return labels.tolist()"}
{"task_id": 482, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.asarray(y, dtype='int')\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError('Invalid label found. Must be in range [0, num_classes).')\n    one_hot = np.zeros((y.shape[0], num_classes), dtype='int')\n    one_hot[np.arange(y.shape[0]), y] = 1\n    return one_hot"}
{"task_id": 485, "completion_id": 0, "solution": "import numpy as np\nclass Node:\n\n    def __init__(self, depth, max_depth):\n        self.depth = depth\n        self.max_depth = max_depth\n        self.feature = None\n        self.threshold = None\n        self.left = None\n        self.right = None\n        self.mean = None\n\n    def build(self, X, y):\n        if self.depth < self.max_depth and len(X) > 1:\n            self.feature = X.mean()\n            sse_min = np.inf\n            for feature in X:\n                left_index = X < feature\n                right_index = ~left_index\n                (y_left, y_right) = (y[left_index], y[right_index])\n                sse = np.sum((y_left - y_left.mean()) ** 2) + np.sum((y_right - y_right.mean()) ** 2)\n                if sse < sse_min:\n                    sse_min = sse\n                    self.threshold = feature\n            if self.threshold is not None:\n                left_index = X < self.threshold\n                right_index = ~left_index\n                (X_left, y_left) = (X[left_index], y[left_index])\n                (X_right, y_right) = (X[right_index], y[right_index])\n                self.left = Node(self.depth + 1, self.max_depth)\n                self.left.build(X_left, y_left)\n                self.right = Node(self.depth + 1, self.max_depth)\n                self.right.build(X_right, y_right)\n            else:\n                self.mean = y.mean()\n        else:\n            self.mean = y.mean()\n\n    def predict(self, x):\n        if self.mean is not None:\n            return self.mean\n        elif x[self.feature] < self.threshold:\n            return self.left.predict(x)\n        else:\n            return self.right.predict(x)\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    if len(X_train) == 0:\n        return []\n    root = Node(0, max_depth)\n    root.build(X_train, y_train)\n    predictions = []\n    for x in X_test:\n        predictions.append(root.predict(x))\n    return predictions"}
{"task_id": 490, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n    \n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n    \n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    x = np.array(x)\n    n = len(x)\n    if n == 0:\n        return []\n    matrix = np.zeros((n, n))\n    for i in range(n):\n        matrix[i, i] = x[i]\n    return matrix.tolist()\nx = [1, 2, 3, 4]"}
{"task_id": 491, "completion_id": 0, "solution": "from collections import defaultdict, namedtuple\nfrom itertools import combinations\nclass Node(namedtuple('Node', 'item count parent next')):\n    ...\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : list of lists or numpy.ndarray\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    freq_itemsets : list of tuples\n        All frequent item-sets sorted 1) by tuple length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    item_counts = defaultdict(int)\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] += 1\n    items = [item for (item, count) in item_counts.items() if count >= min_sup]\n    sorted_transactions = [sorted([item for item in transaction if item in items], key=lambda item: item_counts[item], reverse=True) for transaction in transactions]\n    root = Node(None, 0, None, defaultdict(Node))\n    for transaction in sorted_transactions:\n        node = root\n        for item in transaction:\n            child = node.next.get(item)\n            if child is None:\n                child = node.next[item] = Node(item, 1, node, defaultdict(Node))\n            else:\n                child._replace(count=child.count + 1)\n            node = child\n    freq_itemsets = []\n    for itemset in fp_tree_growth(root):\n        freq_itemsets.append((itemset, item_counts[itemset[-1]]))\n    freq_itemsets.sort()\n    return [t[0] for t in freq_itemsets]\ndef fp_tree_growth(root, prefix=()):\n    bases = []\n    for (item, nodes) in root.next.items():\n        itemset = prefix + (item,)\n        bases.append(frozenset(itemset))\n        bases.extend(fp_tree_growth(nodes, itemset))\n    return bases"}
{"task_id": 492, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    if degree < 0:\n        return -1\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    combinations = [sum((1 for _ in group)) for (key, group) in groupby(combinations_with_replacement(range(degree + 1), n_features), lambda x: sum(x))]\n    output = np.empty((n_samples, sum(combinations)))\n    output[:, 0] = 1\n    current_column = 1\n    for deg in range(1, degree + 1):\n        for indices in combinations_with_replacement(range(n_features), deg):\n            output[:, current_column] = np.prod(X[:, indices], axis=1)\n            current_column += 1\n    return output.tolist()\nX = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ndegree = 2"}
{"task_id": 493, "completion_id": 0, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1\n    y_bar = sum(y) / len(y)\n    mse = sum(((i - y_bar) ** 2 for i in y)) / len(y)\n    return round(mse, 4)"}
{"task_id": 496, "completion_id": 0, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    y = np.around(slope * x + intercept, decimals=4)\n    grad = np.around(np.full(np.shape(x), slope), decimals=4)\n    grad2 = np.around(np.zeros(np.shape(x)), decimals=4)\n    y = y.tolist()\n    grad = grad.tolist()\n    grad2 = grad2.tolist()\n    return (y, grad, grad2)\nx = [1, 2, 3]\nslope = 2.0\nintercept = 1.0"}
{"task_id": 499, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return -1.\n    \"\"\"\n    if k < 1 or k > min(data.shape):\n        return -1\n    mean_data = np.mean(data, axis=0)\n    std_data = np.std(data, axis=0, ddof=1)\n    std_data[std_data == 0] = 1\n    Z = (data - mean_data) / std_data\n    cov_Z = np.cov(Z, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(cov_Z)\n    idx = np.argsort(eigenvalues)[::-1]\n    eigenvalues = eigenvalues[idx]\n    eigenvectors = eigenvectors[:, idx]\n    max_abs_cols = np.argmax(np.abs(eigenvectors), axis=0)\n    signs = np.sign(eigenvectors[max_abs_cols, range(eigenvectors.shape[1])])\n    eigenvectors *= signs\n    proj_Z = np.dot(Z, eigenvectors)[:, :k]\n    return np.round(proj_Z, 4).tolist()"}
{"task_id": 500, "completion_id": 0, "solution": "import numpy as np\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.base import clone\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    models = []\n    F = np.mean(y_train)\n    y_train_p = y_train - F\n    for _ in range(n_estimators):\n        tree = DecisionTreeRegressor(max_depth=1)\n        tree.fit(X_train, y_train_p)\n        y_train_p -= learning_rate * tree.predict(X_train)\n        models.append(tree)\n    F_test = np.full(X_test.shape[0], F)\n    for tree in models:\n        F_test += learning_rate * tree.predict(X_test)\n    y_pred = (F_test > 0.5).astype(int)\n    return y_pred.tolist()"}
{"task_id": 505, "completion_id": 0, "solution": "import numpy as np\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    if X.size == 0:\n        return []\n    else:\n        positive_hidden_probs = sigmoid(np.dot(X, W) + hbias)\n        hidden_states = np.where(positive_hidden_probs > 0.5, 1, 0)\n        for _ in range(k):\n            visible_probs = sigmoid(np.dot(hidden_states, W.T) + vbias)\n            hidden_probs = sigmoid(np.dot(visible_probs, W) + hbias)\n            hidden_states = np.where(hidden_probs > 0.5, 1, 0)\n        v_k_prob = visible_probs\n        h_k_prob = hidden_probs\n        pos_grad = np.dot(X.T, positive_hidden_probs)\n        neg_grad = np.dot(v_k_prob.T, h_k_prob)\n        W_new = W + learning_rate * ((pos_grad - neg_grad) / X.shape[0])\n    return np.round(W_new, 4).tolist()\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))"}
{"task_id": 509, "completion_id": 0, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    x = np.array(x)\n    y = np.array(y)\n    if x.shape != y.shape:\n        return -1\n    return round(np.max(np.abs(x - y)), 4)"}
{"task_id": 510, "completion_id": 0, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    eps = np.finfo(float).eps\n    y_pred = np.clip(y_pred, eps, 1 - eps)\n    recon_loss = -np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred), axis=-1)\n    kl_loss = -0.5 * np.sum(1 + 2 * t_log_var - np.square(t_mean) - np.exp(2 * t_log_var), axis=-1)\n    vae_loss = np.mean(recon_loss + kl_loss)\n    return round(vae_loss, 6)"}
{"task_id": 513, "completion_id": 0, "solution": "import numpy as np\ndef fm_predict(X, w0, w, V):\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    linear_weights = np.sum(X * w, axis=1)\n    interactions = np.sum(np.square(np.dot(X, V)), axis=1) - np.sum(np.square(V), axis=0)\n    y_pred = w0 + linear_weights + 0.5 * interactions\n    y_pred = np.round(y_pred, 4)\n    return y_pred.tolist()"}
{"task_id": 517, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    z = np.array(z)\n    sig = 1.0 / (1.0 + np.exp(-z))\n    sig = np.round(sig, 4)\n    if sig.shape == ():\n        return float(sig)\n    else:\n        return sig.tolist()"}
{"task_id": 518, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Callable\nimport numpy as np\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 520, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, list):\n        return [sigmoid_grad(zi) for zi in z]\n    elif isinstance(z, np.ndarray):\n        return np.round(z * (1 - z), 4)\n    elif isinstance(z, (int, float)):\n        return float(np.round(z * (1 - z), 4))\n    else:\n        raise ValueError('Invalid input type')"}
{"task_id": 528, "completion_id": 0, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with -1 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and -1, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    (x1_min, x2_min) = np.min(X, axis=0)\n    (x1_max, x2_max) = np.max(X, axis=0)\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (x1_mesh, x2_mesh) = np.meshgrid(x1_plot, x2_plot)\n    labels = np.zeros((grid_n, grid_n))\n    for i in range(grid_n):\n        for j in range(grid_n):\n            (x1, x2) = (x1_mesh[i, j], x2_mesh[i, j])\n            label = W[0] * x1 + W[1] * x2 + b\n            labels[i, j] = 1 if label >= 0 else -1\n    labels = labels.tolist()\n    return labels"}
{"task_id": 537, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    class_labels = np.unique(y_train)\n    n_classes = len(class_labels)\n    (n_samples, n_features) = X_train.shape\n    class_priors = np.zeros(n_classes)\n    log_class_priors = np.zeros(n_classes)\n    mean_parameters = np.zeros((n_classes, n_features))\n    std_parameters = np.zeros((n_classes, n_features))\n    for (idx, class_label) in enumerate(class_labels):\n        samples = X_train[y_train == class_label]\n        class_priors[idx] = len(samples) / n_samples\n        log_class_priors[idx] = -np.log(class_priors[idx])\n        mean_parameters[idx, :] = np.mean(samples, axis=0)\n        std_parameters[idx, :] = np.std(samples, axis=0)\n    std_parameters[std_parameters == 0] = 1e-09\n    posterior = np.zeros((X_test.shape[0], n_classes))\n    for (idx, class_label) in enumerate(class_labels):\n        likelihood = -0.5 * (np.sum(np.square((X_test - mean_parameters[idx, :]) / std_parameters[idx, :]), axis=1) + n_features * np.log(2 * np.pi) + np.sum(np.log(std_parameters[idx, :]), axis=0))\n        posterior[:, idx] = likelihood + log_class_priors[idx]\n    return [int(label) for label in np.argmax(posterior, axis=1)]"}
{"task_id": 539, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    m = Y.shape[0]\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    cost = -(1 / m) * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    return round(cost, 4)\nAL = np.array([0.9, 0.1, 0.7, 0.3])\nY = np.array([1, 0, 1, 0])"}
{"task_id": 552, "completion_id": 0, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    if t < 0 or t >= len(observations):\n        return []\n    pi = hmm['pi']\n    A = hmm['A']\n    B = hmm['B']\n    M = A.shape[0]\n    N = len(observations)\n    alpha = np.zeros((N, M))\n    beta = np.zeros((N, M))\n    alpha[0] = pi * B[:, observations[0]]\n    for i in range(1, N):\n        alpha[i] = np.sum(alpha[i - 1] * A.T, axis=1) * B[:, observations[i]]\n    beta[-1] = 1\n    for i in range(N - 2, -1, -1):\n        beta[i] = np.sum(A * B[:, observations[i + 1]] * beta[i + 1], axis=1)\n    gamma_t = alpha[t] * beta[t]\n    gamma_t = gamma_t / np.sum(gamma_t)\n    return np.round(gamma_t, 4).tolist()"}
{"task_id": 555, "completion_id": 0, "solution": "import numpy as np\nfrom collections import deque\ndef euclidean_distance(x, y):\n    return np.sqrt(np.sum((x - y) ** 2))\ndef region_query(data, p, eps):\n    neighbours = []\n    for i in range(data.shape[0]):\n        if euclidean_distance(data[p], data[i]) < eps:\n            neighbours.append(i)\n    return neighbours\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  \n        Noise points receive the label \u20131 while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    labels = np.zeros(data.shape[0])\n    cluster_id = 0\n    for i in range(data.shape[0]):\n        if labels[i] != 0:\n            continue\n        neighbours = region_query(data, i, eps)\n        if len(neighbours) < min_samples:\n            labels[i] = -1\n            continue\n        cluster_id += 1\n        labels[i] = cluster_id\n        queue = deque()\n        queue.extend(neighbours)\n        while queue:\n            p = queue.popleft()\n            if labels[p] == -1:\n                labels[p] = cluster_id\n            if labels[p] != 0:\n                continue\n            labels[p] = cluster_id\n            neighbours = region_query(data, p, eps)\n            if len(neighbours) >= min_samples:\n                queue.extend(neighbours)\n    return labels.tolist()"}
{"task_id": 561, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.stats import multivariate_normal\nimport random\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    \"\"\"Your docstring here.\"\"\"\n    if k == 1:\n        return [0] * len(data)\n    np.random.seed(0)\n    means = data[np.random.choice(data.shape[0], k, replace=False), :]\n    weights = np.ones(k) / k\n    covariances = [np.eye(data.shape[1])] * k\n    posterior_probs = np.zeros((data.shape[0], k))\n    for _ in range(max_iter):\n        for i in range(k):\n            posterior_probs[:, i] = weights[i] * multivariate_normal.pdf(data, means[i], covariances[i])\n        posterior_probs /= np.sum(posterior_probs, axis=1, keepdims=True)\n        previous_weights = weights.copy()\n        weights = np.sum(posterior_probs, axis=0) / data.shape[0]\n        if np.abs(previous_weights - weights).max() < epsilon:\n            break\n        means = np.dot(posterior_probs.T, data) / np.sum(posterior_probs, axis=0)[:, None]\n        covariances = [np.dot((data - means[i]).T, np.dot(np.diag(posterior_probs[:, i]), data - means[i])) / np.sum(posterior_probs, axis=0)[i] for i in range(k)]\n    labels = np.argmax(posterior_probs, axis=1)\n    indices = np.argsort(means[:, 0])\n    sorted_labels = [indices[label] for label in labels]\n    return sorted_labels"}
{"task_id": 562, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.spatial.distance import pdist, squareform\nfrom scipy.linalg import eigh\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    sq_dists = squareform(pdist(data, 'sqeuclidean'))\n    affinity = np.exp(-gamma * sq_dists)\n    D = np.diag(np.sum(affinity, axis=1))\n    L = D - affinity\n    if method == 'normalized':\n        D_norm = np.linalg.inv(np.sqrt(D))\n        L = np.identity(affinity.shape[0]) - np.matmul(np.matmul(D_norm, affinity), D_norm)\n    (_, eig_vecs) = eigh(L, eigvals=(0, n_cluster - 1))\n    if method == 'normalized':\n        eig_vecs = eig_vecs / np.linalg.norm(eig_vecs, axis=1)[:, np.newaxis]\n    centroids = eig_vecs[:n_cluster]\n    labels = np.argmin(np.sum((eig_vecs[:, np.newaxis, :] - centroids) ** 2, axis=-1), axis=1)\n    new_labels = np.empty_like(labels)\n    for i in range(n_cluster):\n        new_labels[labels == i] = np.where(np.argsort(np.sum(data[labels == i], axis=1)) == np.argmin(np.sum(data, axis=1)))[0][0]\n    labels = new_labels\n    return list(map(int, labels))"}
{"task_id": 563, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    alpha = np.zeros(X_data.shape[0])\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        updates = 0\n        for i in range(X_data.shape[0]):\n            g = np.dot(alpha * y_data, G[i, :])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updates += 1\n        if updates == 0:\n            break\n    w = np.dot(alpha * y_data, X_data)\n    return (w.round(4).tolist(), round(b, 4))\nX_data = np.array([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]])\ny_data = np.array([-1, -1, 1, 1, 1])"}
{"task_id": 564, "completion_id": 0, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    if root.prediction is not None:\n        return root.prediction\n    if task_type == 'classification':\n        for child in root.children:\n            if child.value == features[root.feature_index]:\n                return predict_sample(child, features, task_type)\n        if len(root.children) > 1:\n            return predict_sample(root.children[1], features, task_type)\n    elif task_type == 'regression':\n        if features[root.feature_index] <= root.split_point:\n            return predict_sample(root.children[0], features, task_type)\n        else:\n            return predict_sample(root.children[1], features, task_type)"}
{"task_id": 565, "completion_id": 0, "solution": "import numpy as np\ndef entropy(labels):\n    if len(labels) < 1:\n        return 0\n    label_counts = np.bincount(labels)\n    label_probs = label_counts[np.nonzero(label_counts)] / len(labels)\n    return -np.sum(label_probs * np.log2(label_probs))\ndef conditional_entropy(feature, labels):\n    if len(feature) < 1:\n        return 0\n    feature_vals = np.unique(feature)\n    feature_entropy = 0.0\n    for val in feature_vals:\n        val_labels = labels[np.where(feature == val)]\n        feature_entropy += entropy(val_labels) * len(val_labels) / len(feature)\n    return feature_entropy\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    y_entropy = entropy(y)\n    best_feature = None\n    best_information_gain = -np.inf\n    for feature in X.T:\n        feature_entropy = conditional_entropy(feature, y)\n        information_gain = y_entropy - feature_entropy\n        if information_gain > best_information_gain:\n            best_feature = feature\n            best_information_gain = information_gain\n    return (np.where(X.T == best_feature)[0][0], round(best_information_gain, 6))"}
{"task_id": 566, "completion_id": 0, "solution": "import numpy as np\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    c = np.zeros(len(data) + 1)\n    for n in range(2, len(data) + 1):\n        c[n] = 2 * (np.log(n - 1) + 0.5772156649) - 2 * (n - 1) / n\n    trees = []\n    for _ in range(n_trees):\n        idxs = np.random.choice(len(data), size=sample_size, replace=False)\n        sample = data[idxs]\n        tree = grow_tree(sample, c, 0)\n        trees.append(tree)\n    scores = np.zeros(len(data))\n    for (i, obs) in enumerate(data):\n        for tree in trees:\n            scores[i] += path_length(obs, tree, 0)\n        scores[i] /= len(trees)\n    phi = 2 * (np.log(sample_size) - 1) - 2 * (sample_size - 1) / sample_size\n    s = np.power(2, -scores / phi)\n    outliers = np.argsort(s)[::-1][:int(epsilon * len(s))]\n    return sorted(outliers)\ndef grow_tree(sample: np.ndarray, c: np.ndarray, e: int) -> dict:\n    \"\"\"Recursively grows a random binary tree.\n\n    Args:\n        sample: The data sample from which to grow a tree.\n        c: Correction factors for the path lengths.\n        e: The current depth of the tree.\n\n    Returns:\n        The root node of the grown tree.\n    \"\"\"\n    node = {'size': len(sample), 'e': e}\n    if e >= len(bin(len(sample))) - 2 or len(sample) <= 1:\n        return node\n    else:\n        feature = np.random.randint(len(sample[0]))\n        threshold = np.random.uniform(np.min(sample[:, feature]), np.max(sample[:, feature]))\n        left = sample[sample[:, feature] < threshold]\n        right = sample[sample[:, feature] >= threshold]\n        node['feature'] = feature\n        node['threshold'] = threshold\n        node['left'] = grow_tree(left, c, e + 1)\n        node['right'] = grow_tree(right, c, e + 1)\n        return node\ndef path_length(obs: np.ndarray, tree: dict, e: int) -> float:\n    \"\"\"Computes the path length of an observation in a tree.\n\n    Args:\n        obs: The observation.\n        tree: The tree where the observation will be searched.\n        e: The current depth of the tree.\n\n    Returns:\n        The path length of the observation in the tree.\n    \"\"\"\n    if 'left' in tree and 'right' in tree:\n        if obs[tree['feature']] < tree['threshold']:\n            return path_length(obs, tree['left'], e + 1)\n        else:\n            return path_length(obs, tree['right'], e + 1)\n    else:\n        h = 0\n        size = tree.get('size', 1.0)\n        if size > 2:\n            h = c[size] + e\n        elif size == 2:\n            h = e\n        else:\n            h = c[size] + e\n        return h"}
{"task_id": 568, "completion_id": 0, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    (n_samples, n_features) = X_train.shape\n    label_set = np.unique(y_train)\n    n_labels = len(label_set)\n    label_dict = {label: i for (i, label) in enumerate(label_set)}\n    feature_freq = defaultdict(lambda : defaultdict(int))\n    label_freq = defaultdict(int)\n    joint_freq = defaultdict(int)\n    empirical_feature_vals = set()\n    empirical_labels = set()\n    for (sample, label) in zip(X_train, y_train):\n        label_freq[label] += 1\n        for feature in sample:\n            joint_freq[label, feature] += 1\n            feature_freq[label][feature] += 1\n            empirical_labels.add(label)\n            empirical_feature_vals.add(feature)\n    n_joint_features = sum([len(x) for x in feature_freq.values()])\n    feature_joint_dict = {j: i for (i, j) in enumerate(joint_freq.keys())}\n    J = len(joint_freq)\n    w = np.zeros(J)\n    for _ in range(n_iter):\n        exp_fg = np.exp(np.array([w[feature_joint_dict[y, x_j]] for ((y, x_j), cnt) in joint_freq.items()]))\n        Z = np.sum(exp_fg)\n        gradient = np.zeros(J)\n        for ((y_i, x_j), cnt) in joint_freq.items():\n            p_fg_y_given_x = 1.0 / Z * exp_fg[feature_joint_dict[y_i, x_j]]\n            gradient[feature_joint_dict[y_i, x_j]] = cnt / n_samples - p_fg_y_given_x\n        w += epsilon * gradient\n    prediction = []\n    for sample in X_test:\n        probs = np.zeros(len(label_set))\n        for y in empirical_labels:\n            for f in sample:\n                if (y, f) in joint_freq:\n                    idx = feature_joint_dict[y, f]\n                    probs[label_dict[y]] += math.exp(w[idx])\n        y_pred = label_set[np.argmax(probs)]\n        prediction.append(y_pred)\n    return prediction"}
{"task_id": 569, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    word_counter = Counter()\n    total_documents = len(data)\n    for doc in data:\n        words = set(doc[1])\n        word_counter.update(words)\n    word_ratios = [(word, round(count / total_documents, 4)) for (word, count) in word_counter.items()]\n    word_ratios.sort(key=lambda x: x[1], reverse=True)\n    common_words = [word for (word, _) in word_ratios[:cut_off]]\n    return (word_ratios, set(common_words))"}
{"task_id": 571, "completion_id": 0, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           -1).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = X.T @ (alpha * y)\n    b = (y - np.dot(X, w)).sum() / len(y)\n    w_list = w.tolist()\n    if len(w_list) == 1:\n        w_list = w_list[0]\n    return (round(w_list, 4), round(b, 4))"}
{"task_id": 572, "completion_id": 0, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    n = len(data)\n    distances = np.zeros((n, n))\n    k_distances = np.zeros(n)\n    lof_scores = np.ones(n) * 10000000000.0\n    outlier_indices = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            distances[i][j] = distances[j][i] = np.linalg.norm(data[i] - data[j])\n    for i in range(n):\n        index_distance_pairs = [(index, distance) for (index, distance) in enumerate(distances[i])]\n        index_distance_pairs.sort(key=lambda x: x[1])\n        k_distances[i] = index_distance_pairs[k - 1][1]\n    reach_distances = np.maximum(distances, np.tile(k_distances, (n, 1)))\n    for i in range(n):\n        lrd = np.mean(reach_distances[i, np.argpartition(reach_distances[i], k)[:k + 1]])\n        lof_scores[i] = np.mean(reach_distances[i, np.argpartition(reach_distances[i], k)[1:k + 1]] / lrd)\n    lof_scores = np.round(lof_scores, 4)\n    outlier_indices = np.where(lof_scores > epsilon)[0].tolist()\n    return (lof_scores, outlier_indices)"}
{"task_id": 574, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n    for c in range(m):\n        base = 10 * np.floor(c / 2) + 5\n        X_train_c = np.random.uniform(low=base + 1, high=base + 9, size=(n_train, 2))\n        y_train_c = np.full(shape=n_train, fill_value=float(c))\n        X_val_c = np.random.uniform(low=base + 1, high=base + 9, size=(n_val, 2))\n        y_val_c = np.full(shape=n_val, fill_value=float(c))\n        X_train.append(X_train_c)\n        y_train.append(y_train_c)\n        X_val.append(X_val_c)\n        y_val.append(y_val_c)\n    X_train = np.around(np.concatenate(X_train), decimals=4)\n    X_val = np.around(np.concatenate(X_val), decimals=4)\n    y_train = np.around(np.concatenate(y_train), decimals=4)\n    y_val = np.around(np.concatenate(y_val), decimals=4)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 579, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    (m, d) = X.shape\n    centres = np.copy(X[:k])\n    labels = np.zeros(m, dtype=int)\n    for _ in range(max_iters):\n        for i in range(m):\n            distances = np.linalg.norm(centres - X[i], axis=1)\n            labels[i] = np.argmin(distances)\n        old_centres = np.copy(centres)\n        for j in range(k):\n            assigned_points = X[labels == j]\n            if assigned_points.size > 0:\n                centres[j] = np.mean(assigned_points, axis=0)\n        if np.allclose(old_centres, centres):\n            break\n    centres = np.round(centres, 4).tolist()\n    return (labels.tolist(), centres)"}
{"task_id": 581, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    weights = np.zeros(X.shape[1])\n    bias = 0.0\n    if learning_rate == 0 or iterations == 0:\n        return ([round(w, 4) for w in weights], round(bias, 4))\n    for _ in range(iterations):\n        y_pred = np.dot(X, weights) + bias\n        residuals = y - y_pred\n        if l1_penalty == 0:\n            gradient_weights = -2 * np.dot(X.T, residuals) + 2 * l2_penalty * weights\n        else:\n            gradient_weights = -2 * np.dot(X.T, residuals) + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights\n        gradient_bias = -2 * np.sum(residuals)\n        weights -= learning_rate * gradient_weights / X.shape[0]\n        bias -= learning_rate * gradient_bias / X.shape[0]\n    weights = [round(w, 4) for w in weights]\n    bias = round(bias, 4)\n    return (weights, bias)"}
{"task_id": 591, "completion_id": 0, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\"\"\"\n    x = np.array(x)\n    for (i, layer) in enumerate(weights):\n        x = np.append(x, 1)\n        z = np.dot(layer, x)\n        x = np.maximum(z, 0)\n        if i == len(weights) - 1:\n            return [float(np.round(output, 4)) for output in z]\n    return float(np.round(x, 4))"}
{"task_id": 595, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Your task: implement here. See docstring in the description.\"\"\"\n    centroids = X[:k]\n    for _ in range(max_iters):\n        distances = cdist(X, centroids)\n        labels = distances.argmin(axis=1)\n        new_centroids = np.array([x[labels == i].mean(axis=0) if x[labels == i].size > 0 else centroids[i] for (i, x) in enumerate(X.T)])\n        if np.allclose(new_centroids, centroids, atol=0.0001):\n            break\n        centroids = new_centroids\n    centroids = sorted(centroids.tolist())\n    centroids = [[round(val, 4) for val in centroid] for centroid in centroids]\n    return centroids"}
