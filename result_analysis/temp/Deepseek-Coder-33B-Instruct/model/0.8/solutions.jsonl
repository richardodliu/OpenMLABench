{"task_id": 0, "completion_id": 0, "solution": "import numpy as np\ndef ridge_regression(data: np.ndarray, alpha: float=0.0) -> list[float]:\n    \"\"\"\n    Implements Ridge Regression using its closed-form solution.\n    Given an ndarray where the last column is the target 'y' and all preceding columns are the features 'X',\n    add a bias (intercept) term, then compute the weight vector.\n\n    The weight vector 'w' is calculated as:\n\n    w = (X^T * X + alpha * I)^-1 * X^T * y,\n\n    where alpha >= 0 is the regularisation strength and I is the identity matrix with a size equal to the number of columns in X (after adding the bias).\n\n    If the matrix (X^T * X + alpha * I) is not invertible (numerical determinant equal to 0), return -1.\n\n    This function returns the weight vector rounded to 4 decimal places as a Python list.\n\n    Parameters:\n    data (np.ndarray): 2D array where last column is the target 'y' and the others are features 'X'.\n    alpha (float): Regularisation strength (default is 0.0).\n\n    Returns:\n    list[float]: Weight vector 'w' or -1 if (X^T * X + alpha * I) is not invertible.\n    \"\"\"\n    data = np.c_[np.ones(data.shape[0]), data]\n    y = data[:, -1]\n    X = data[:, :-1]\n    X_transpose_X_plus_alpha_I = np.linalg.inv(np.dot(X.T, X) + alpha * np.eye(X.shape[1]))\n    if np.linalg.matrix_rank(X_transpose_X_plus_alpha_I) != X.shape[1]:\n        return -1\n    X_transpose_y = np.dot(X.T, y)\n    w = np.dot(X_transpose_X_plus_alpha_I, X_transpose_y)\n    return [round(coef, 4) for coef in w]"}
{"task_id": 1, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual(X_train: np.ndarray, y_train: np.ndarray, eta: float=1.0, n_iter: int=10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    K = np.dot(X_train, X_train.T)\n    alpha = np.zeros(len(y_train))\n    b = 0.0\n    updates = 0\n    while True:\n        updated = False\n        for i in range(len(y_train)):\n            activation = np.dot(alpha * y_train, K[i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n        if not updated or updates >= n_iter:\n            break\n        updates += 1\n    w = np.dot(alpha * y_train, X_train)\n    return (list(np.round(w, 4)), round(b, 4))"}
{"task_id": 2, "completion_id": 0, "solution": "import numpy as np\ndef identity_link():\n\n    def link(mu):\n        return mu\n\n    def inv_link(eta):\n        return eta\n\n    def derivative(mu):\n        return np.ones_like(mu)\n    return {'link': link, 'inv_link': inv_link, 'derivative': derivative}\ndef log_link():\n\n    def link(mu):\n        return np.log(mu)\n\n    def inv_link(eta):\n        return np.exp(eta)\n\n    def derivative(mu):\n        return 1 / mu\n    return {'link': link, 'inv_link': inv_link, 'derivative': derivative}\ndef logit_link():\n\n    def link(mu):\n        return np.log(mu / (1 - mu))\n\n    def inv_link(eta):\n        return 1 / (1 + np.exp(-eta))\n\n    def derivative(mu):\n        return 1 / (mu * (1 - mu))\n    return {'link': link, 'inv_link': inv_link, 'derivative': derivative}\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    return {'identity': identity_link(), 'log': log_link(), 'logit': logit_link()}\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links['logit']['link'](mu)"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    np.random.seed(0)\n    indices = list(range(data.shape[0]))\n    depths = [0] * data.shape[0]\n\n    def isolation_tree(indices, depth):\n        if len(indices) < 3:\n            for i in indices:\n                depths[i] = depth\n            return\n        f = np.random.choice(data.shape[1])\n        (down, up) = (np.min(data[indices, f]), np.max(data[indices, f]))\n        v = np.random.uniform(down, up)\n        left_indices = [i for i in indices if data[i, f] <= v]\n        right_indices = [i for i in indices if data[i, f] > v]\n        if len(left_indices) > 0:\n            isolation_tree(left_indices, depth + 1)\n        if len(right_indices) > 0:\n            isolation_tree(right_indices, depth + 1)\n    isolation_tree(indices, 0)\n    return depths"}
{"task_id": 7, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    n = len(transactions)\n    min_count = math.ceil(minsup * n)\n    itemsets = Counter()\n    for transaction in transactions:\n        for i in range(1, len(transaction) + 1):\n            itemsets.update(combinations(sorted(transaction), i))\n    frequent_itemsets = {itemset: count for (itemset, count) in itemsets.items() if count >= min_count}\n    return frequent_itemsets"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, k: int, epsilon: float=0.001, max_iter: int=2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    if k <= 0 or k > len(data):\n        raise ValueError('Invalid number of clusters')\n    if epsilon < 0:\n        raise ValueError('Invalid epsilon value')\n    if max_iter <= 0:\n        raise ValueError('Invalid max_iter value')\n    centroids = data[:k]\n    n_features = data.shape[1]\n    labels = np.zeros(len(data), dtype=int)\n    for _ in range(max_iter):\n        for (i, sample) in enumerate(data):\n            distances = np.linalg.norm(centroids - sample, axis=1)\n            label = np.argmin(distances)\n            labels[i] = label\n        new_centroids = np.zeros((k, n_features))\n        for i in range(k):\n            if np.any(labels == i):\n                new_centroids[i] = np.mean(data[labels == i], axis=0)\n            else:\n                new_centroids[i] = data[np.random.randint(len(data))]\n        if np.linalg.norm(new_centroids - centroids) < epsilon:\n            break\n        centroids = new_centroids\n    centroids = np.round(centroids, 4).tolist()\n    labels = labels.tolist()\n    return (centroids, labels)"}
{"task_id": 13, "completion_id": 0, "solution": "import numpy as np\nfrom collections import defaultdict\ndef knn_recommend(data: np.ndarray, user_ind: int, k: int, criterion: str='cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    (n_users, n_items) = data.shape\n    rated_items = defaultdict(list)\n    for i in range(n_users):\n        rated_items[i] = np.where(data[i, :] > 0)[0]\n    item_ratings = defaultdict(dict)\n    for i in range(n_users):\n        for rated_item in rated_items[i]:\n            item_ratings[rated_item][i] = data[i, rated_item]\n    S = np.zeros((n_items, n_items))\n    for i in range(n_items):\n        for j in range(i, n_items):\n            if i == j:\n                S[i, j] = 1\n            else:\n                common_users = set(item_ratings[i].keys()).intersection(set(item_ratings[j].keys()))\n                if len(common_users) > 0:\n                    v1 = np.array([item_ratings[i][user] for user in common_users])\n                    v2 = np.array([item_ratings[j][user] for user in common_users])\n                    if criterion == 'cosine':\n                        v1_mean = np.mean(v1)\n                        v2_mean = np.mean(v2)\n                        v1 = v1 - v1_mean if np.std(v1) > 0.001 else v1\n                        v2 = v2 - v2_mean if np.std(v2) > 0.001 else v2\n                        S[i, j] = S[j, i] = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n                    elif criterion == 'pearson':\n                        S[i, j] = S[j, i] = np.corrcoef(v1, v2)[0, 1]\n    unrated_items = np.where(data[user_ind, :] == 0)[0]\n    scores = {}\n    for item in unrated_items:\n        numerator = np.sum([data[user_ind, i] * S[item, i] for i in rated_items[user_ind]])\n        denominator = np.sum(np.abs(S[item, :]))\n        score = numerator / denominator if denominator > 0 else 0\n        scores[item] = score\n    top_items = sorted(scores.items(), key=lambda x: (-x[1], x[0]))[:k]\n    return [item for (item, score) in top_items]"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef best_split(X: np.ndarray, g: np.ndarray, h: np.ndarray, gamma: float, lam: float) -> tuple[int, float] | None:\n    (n_samples, n_features) = X.shape\n    total_g = np.sum(g)\n    total_h = np.sum(h)\n    total_loss = -0.5 * total_g ** 2 / (total_h + lam) + gamma\n    best_gain = -np.inf\n    best_split = None\n    for i in range(n_features):\n        thresholds = np.unique(X[:, i])\n        thresholds = np.sort(thresholds)\n        left_indices = X[:, i] <= thresholds[0]\n        right_indices = ~left_indices\n        left_g = np.sum(g[left_indices])\n        left_h = np.sum(h[left_indices])\n        right_g = np.sum(g[right_indices])\n        right_h = np.sum(h[right_indices])\n        for j in range(1, len(thresholds)):\n            left_g += g[right_indices]\n            left_h += h[right_indices]\n            right_g -= g[right_indices]\n            right_h -= h[right_indices]\n            loss = -0.5 * left_g ** 2 / (left_h + lam) - 0.5 * right_g ** 2 / (right_h + lam) + gamma\n            gain = total_loss - loss\n            if gain > best_gain:\n                best_gain = gain\n                best_split = (i, thresholds[j])\n    if best_gain <= 0:\n        return None\n    else:\n        return best_split"}
{"task_id": 20, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    x = np.array(x)\n    sigmoid = 1 / (1 + np.exp(-x))\n    gradient = sigmoid * (1 - sigmoid)\n    sigmoid = np.round(sigmoid, 4)\n    gradient = np.round(gradient, 4)\n    if isinstance(x, list):\n        sigmoid = sigmoid.tolist()\n        gradient = gradient.tolist()\n    return (sigmoid, gradient)"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\nimport math\nfrom collections import defaultdict\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float=0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    N = len(y_train)\n    D = np.ones(N) / N\n    stumps = []\n    stump_weights = []\n    while True:\n        weights = D\n        (best_stump, error, predictions) = (None, float('inf'), None)\n        for d in [0, 1]:\n            for i in range(N):\n                theta = (x_train[i] + x_train[i + 1]) / 2\n                predictions = np.ones(N)\n                predictions[x_train <= theta] = -1 if d == 0 else 1\n                error = np.sum(weights[predictions != y_train])\n                if error < best_stump_error:\n                    best_stump_error = error\n                    best_stump = (d, theta)\n                    predictions = predictions.tolist()\n                    if error < epsilon:\n                        break\n        stumps.append(best_stump)\n        alpha = 0.5 * math.log((1 - error) / error)\n        stump_weights.append(alpha)\n        D = D * np.exp(-alpha * y_train * predictions)\n        D = D / np.sum(D)\n        if np.sum(D[predictions != y_train]) < epsilon:\n            break\n    final_predictions = []\n    for x in x_test:\n        total = 0\n        for ((d, theta), alpha) in zip(stumps, stump_weights):\n            prediction = -1 if d == 0 and x <= theta or (d == 1 and x > theta) else 1\n            total += alpha * prediction\n        final_predictions.append(np.sign(total))\n    return final_predictions"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_svm_predict(X_train: np.ndarray, y_train: np.ndarray, alpha: np.ndarray, b: float, gamma: float, X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    dist = np.sum(X_test ** 2, axis=1, keepdims=True) + np.sum(X_train ** 2, axis=1) - 2 * X_test @ X_train.T\n    K = np.exp(-gamma * dist)\n    g = np.sum(alpha * y_train * K, axis=1) + b\n    y_pred = [1 if g_i >= 0 else -1 for g_i in g]\n    return y_pred"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X = np.array(X)\n    if k < 1 or k > min(X.shape):\n        return -1\n    (U, S, Vt) = np.linalg.svd(X, full_matrices=False)\n    S_k = np.diag(S[:k])\n    U_k = U[:, :k]\n    Vt_k = Vt[:k, :]\n    X_hat = U_k @ S_k @ Vt_k\n    mse = np.mean((X - X_hat) ** 2)\n    X_hat = np.round(X_hat, 4).tolist()\n    mse = round(mse, 4)\n    return (X_hat, mse)"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef predict_boosting_tree(x_train: list[float] | np.ndarray, y_train: list[float] | np.ndarray, x_query: float, epsilon: float=0.01) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    (x_train, y_train) = (np.array(x_train), np.array(y_train))\n    idx = np.argsort(x_train)\n    (x_train, y_train) = (x_train[idx], y_train[idx])\n    residuals = y_train.copy()\n    stumps = []\n    while np.sum(residuals ** 2) > epsilon ** 2:\n        split_points = (x_train[1:] + x_train[:-1]) / 2\n        best_split = None\n        best_rss = np.inf\n        for s in split_points:\n            mask = x_train <= s\n            c1 = np.mean(residuals[mask])\n            c2 = np.mean(residuals[~mask])\n            y_pred = np.where(x_train <= s, c1, c2)\n            rss = np.sum((y_train - y_pred) ** 2)\n            if rss < best_rss:\n                best_split = s\n                best_rss = rss\n                best_c1 = c1\n                best_c2 = c2\n        stumps.append((best_split, best_c1, best_c2))\n        residuals = y_train - np.where(x_train <= best_split, best_c1, best_c2)\n    pred = np.sum([c1 if x_query <= s else c2 for (s, c1, c2) in stumps])\n    return round(pred, 4)\nx_train = [1, 2, 3, 4, 5]\ny_train = [1, 3, 2, 4, 5]\nx_query = 3.5"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef random_binary_tensor(shape: tuple[int, ...], sparsity: float=0.5, seed: int | None=None):\n    \"\"\"\n    Generate a NumPy tensor filled with 0.0s and 1.0s.\n\n    Parameters:\n    shape (tuple[int, ...]): The shape of the tensor to generate.\n    sparsity (float): The probability of generating a 1.0.\n    seed (int or None): The seed for the random number generator.\n\n    Returns:\n    tensor (numpy.ndarray): A NumPy array filled with 0.0s and 1.0s of the specified shape.\n    If sparsity is outside the legal range, the function returns -1.\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n    if seed is not None:\n        np.random.seed(seed)\n    tensor = np.random.rand(*shape)\n    tensor = np.where(tensor < sparsity, 1.0, 0.0)\n    return tensor"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    n_samples = data.shape[0]\n    median_idx = n_samples // 2\n    column = data[:, d]\n    indices = np.argpartition(column, median_idx)\n    pivot = indices[median_idx]\n    left = indices[:median_idx].tolist()\n    right = indices[median_idx + 1:].tolist()\n    return (pivot, left, right)"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nfrom numpy.lib.stride_tricks import as_strided\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool=False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n\n    Raises\n    ------\n    AssertionError\n        If any of the assertions in the description are violated.\n    \"\"\"\n    assert x.ndim == 1, 'Input array must be one-dimensional'\n    assert stride > 0, 'Stride must be a positive integer'\n    assert len(x) >= frame_width, 'Input array length must be greater than or equal to the frame width'\n    n_frames = (len(x) - frame_width) // stride + 1\n    shape = (n_frames, frame_width)\n    strides = (x.strides[0] * stride, x.strides[0])\n    view = as_strided(x, shape=shape, strides=strides)\n    view.flags.writeable = writeable and x.flags.writeable\n    return view\nx = np.arange(10)"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef is_stochastic(X: list[list[float]] | 'np.ndarray') -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    X = np.array(X)\n    if X.ndim != 2:\n        return False\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    row_sums = np.sum(X, axis=1)\n    if not np.allclose(row_sums, np.ones_like(row_sums), rtol=0, atol=1e-08):\n        return False\n    return True"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef rms_prop(X: np.ndarray, y: np.ndarray, epsilon: float=0.0001, max_iter: int=10000, eta: float=0.01, rho: float=0.9, batch_size: int=32, eps_station: float=1e-08) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\"\"\"\n    (n, d) = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    for i in range(max_iter):\n        shuffle_idx = np.random.permutation(n)\n        X_shuffle = X[shuffle_idx]\n        y_shuffle = y[shuffle_idx]\n        for j in range(0, n, batch_size):\n            batch_X = X_shuffle[j:j + batch_size]\n            batch_y = y_shuffle[j:j + batch_size]\n            grad = 1 / len(batch_y) * batch_X.T @ (batch_X @ w - batch_y)\n            s = rho * s + (1 - rho) * grad ** 2\n            w = w - eta * grad / np.sqrt(s + eps_station)\n        if np.linalg.norm(grad) < epsilon:\n            break\n    return [round(weight, 4) for weight in w]"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef softplus(x, deriv: bool=False):\n    \"\"\"Implementation of Softplus function and its derivative.\"\"\"\n    x = np.array(x)\n    if deriv:\n        s = 1 / (1 + np.exp(-x))\n    else:\n        s = np.log1p(np.exp(x))\n    if isinstance(x, np.ndarray) and x.size > 1:\n        return np.round(s, 4).tolist()\n    else:\n        return np.round(s, 4).item()"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    corpus_counter = Counter(corpus)\n    sequence_counter = Counter(sequence)\n    if N == 1:\n        total_log_prob = 0.0\n        for word in sequence:\n            count = sequence_counter[word]\n            corpus_count = corpus_counter[word]\n            if corpus_count == 0:\n                return float('-inf')\n            prob = count / len(corpus)\n            log_prob = np.log(prob)\n            total_log_prob += log_prob\n        return round(total_log_prob, 4)\n    else:\n        total_log_prob = 0.0\n        for i in range(len(sequence) - N + 1):\n            n_gram = tuple(sequence[i:i + N])\n            n_gram_count = sequence_counter[n_gram]\n            if i == 0:\n                prefix_count = corpus_counter[n_gram[0]]\n            else:\n                prefix_count = corpus_counter[n_gram[:-1]]\n            if prefix_count == 0:\n                return float('-inf')\n            prob = n_gram_count / prefix_count\n            log_prob = np.log(prob)\n            total_log_prob += log_prob\n        return round(total_log_prob, 4)"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\ndef build_design_matrix(X, degree):\n    X_new = np.ones(X.shape[0])\n    for i in range(1, degree + 1):\n        X_new = np.column_stack((X_new, X ** i))\n    return X_new\ndef soft_threshold(rho, lamda):\n    return np.sign(rho) * np.maximum(np.abs(rho) - lamda, 0)\ndef lasso_regression(X, y, degree, reg_factor, n_iterations=1000, tol=1e-06):\n    X = np.array(X)\n    y = np.array(y)\n    X = build_design_matrix(X, degree)\n    weights = np.zeros(degree + 1)\n    m = X.shape[0]\n    for _ in range(n_iterations):\n        old_weights = np.copy(weights)\n        weights[0] = np.mean(y - np.dot(X[:, 1:], weights[1:]))\n        for j in range(1, degree + 1):\n            rho = np.dot(X[:, j], y - np.dot(X[:, np.arange(degree + 1) != j], weights[np.arange(degree + 1) != j]))\n            weights[j] = soft_threshold(rho, reg_factor) / np.dot(X[:, j], X[:, j])\n        if np.max(np.abs(weights - old_weights)) < tol:\n            break\n    return [round(w, 4) for w in weights]"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    This function calculates the backward probability vector for a given time index in a Hidden Markov Model.\n\n    Parameters:\n    A (list[list[float]]): Transition-probability matrix of shape (N, N).\n    B (list[list[float]]): Emission-probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices (length T).\n    t (int): Integer time index (0 \u2264 t < T).\n\n    Returns:\n    beta_t (list[float]): List of backward probabilities rounded to 4 decimal places.\n\n    Constraints:\n    Make sure all results are rounded to the nearest 4th decimal.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    N = A.shape[0]\n    beta = np.ones(N)\n    for i in range(t, -1, -1):\n        beta = np.dot(A, beta * B[:, obs[i]])\n    return [round(val, 4) for val in beta]"}
{"task_id": 65, "completion_id": 0, "solution": "import numpy as np\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    if len(A) == 0 or len(B) == 0 or len(pi) == 0 or (len(obs) == 0):\n        return 0.0\n    N = A.shape[0]\n    T = len(obs)\n    beta = np.zeros((T, N))\n    beta[T - 1, :] = 1.0\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t + 1]] * beta[t + 1, :])\n    prob = np.sum(pi * B[:, obs[0]] * beta[0, :])\n    prob = round(prob, 6)\n    return prob"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef forward_algorithm(S: list[float], A: list[list[float]], B: list[list[float]], observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n    (n, m) = A.shape\n    if S.shape != (n,) or A.shape != (n, n) or B.shape[0] != n or any((not 0 <= i < m for i in observations)) or (len(observations) == 0):\n        return -1\n    alpha = S * B[:, observations[0]]\n    for z in observations[1:]:\n        alpha = alpha @ A * B[:, z]\n    return round(alpha.sum(), 4)"}
{"task_id": 70, "completion_id": 0, "solution": "from collections import Counter, defaultdict\nfrom itertools import chain, combinations\nclass FPTree(object):\n    \"\"\"Frequent Pattern Tree.\"\"\"\n\n    def __init__(self):\n        self.root = FPNode(None)\n        self.header_table = {}\n\n    def add(self, transaction):\n        point = self.root\n        for item in transaction:\n            next_point = point.search(item)\n            if next_point:\n                next_point.count += 1\n            else:\n                next_point = FPNode(item, point)\n                if self.header_table.get(item):\n                    self.header_table[item].append(next_point)\n                else:\n                    self.header_table[item] = [next_point]\n                point.link(next_point)\n            point = next_point\n\n    def items(self):\n        for item in self.header_table:\n            yield (item, self.frequency(item))\n\n    def frequency(self, item):\n        return sum((node.count for node in self.nodes(item)))\n\n    def nodes(self, item):\n        try:\n            return self.header_table[item]\n        except KeyError:\n            return []\nclass FPNode(object):\n    \"\"\"A node in an FP tree.\"\"\"\n\n    def __init__(self, item, parent):\n        self.item = item\n        self.count = 1\n        self.parent = parent\n        self.children = {}\n        self.neighbor = None\n\n    def search(self, item):\n        try:\n            return self.children[item]\n        except KeyError:\n            return None\n\n    def link(self, node):\n        self.children[node.item] = node\ndef conditional_tree_from_paths(paths, min_support):\n    \"\"\"Build a conditional FP-tree from the given paths.\"\"\"\n    tree = FPTree()\n    condition_item = None\n    items = set()\n    for path in paths:\n        if condition_item is None:\n            condition_item = path[-1].item\n        point = tree.root\n        for node in path:\n            next_point = point.search(node.item)\n            if not next_point:\n                items.add(node.item)\n                count = node.count if node.item == condition_item else 0\n                next_point = FPNode(node.item, point)\n                next_point.count += count\n                point.link(next_point)\n            point = next_point\n    assert condition_item is not None\n    for path in paths:\n        point = tree.root\n        for node in path:\n            if node.item != condition_item:\n                point = point.search(node.item)\n                condition_item_count = node.count\n        point.count += condition_item_count\n    for path in tree.nodes(condition_item):\n        support = path.count\n        if support < min_support:\n            continue\n        itemset = set((node.item for node in tree.prefixes(path)))\n        yield itemset\ndef fp_growth(transactions, min_support):\n    items = set()\n    for transaction in transactions:\n        items.update(transaction)\n    items = list(items)\n    items.sort()\n    transactions = list(map(sorted, map(set, transactions)))\n    for k in range(len(transactions)):\n        t = []\n        for item in items:\n            if item in transactions[k]:\n                t.append(item)\n        transactions[k] = t\n\n    def tree_growth(tree, suffix):\n        for (item, nodes) in sorted(tree.items(), key=lambda x: tree.frequency(x[0]), reverse=True):\n            support = sum((n.count for n in nodes))\n            if support >= min_support and item not in suffix:\n                found_set = [item] + suffix\n                yield found_set\n                cond_tree = conditional_tree_from_paths(nodes, min_support)\n                for s in tree_growth(cond_tree, found_set):\n                    yield s\n    freq_sets = []\n    cond_tree = conditional_tree_from_paths(tree.nodes(None), min_support)\n    for itemset in tree_growth(cond_tree, []):\n        freq_sets.append(itemset)\n    return freq_sets"}
{"task_id": 75, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    if not isinstance(k, int) or k < 1 or k > len(X_train):\n        return -1\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    distances = np.sqrt(((X_train[None, :, :] - X_test[:, None, :]) ** 2).sum(axis=-1))\n    k_nearest = np.argpartition(distances, k - 1, axis=1)[:, :k]\n    k_nearest_labels = y_train[k_nearest]\n    y_pred = []\n    for i in range(len(X_test)):\n        (labels, counts) = np.unique(k_nearest_labels[i], return_counts=True)\n        max_count = np.max(counts)\n        max_labels = labels[counts == max_count]\n        y_pred.append(np.min(max_labels))\n    return y_pred"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    y_pred = np.clip(y_pred, np.finfo(float).eps, 1 - np.finfo(float).eps)\n    loss = -np.sum(y * np.log(y_pred))\n    return round(loss, 4)"}
{"task_id": 77, "completion_id": 0, "solution": "import numpy as np\ndef L_model_forward(X: np.ndarray, parameters: dict[str, np.ndarray]) -> list[list[float]]:\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Input matrix of shape (n_x, m).\n    parameters : dict[str, np.ndarray]\n        Dictionary containing the network parameters W1\u2026WL and b1\u2026bL.\n\n    Returns\n    -------\n    list[list[float]]\n        The final activation AL rounded to 4 decimals and converted to a plain Python list. The shape is (1, m).\n    \"\"\"\n    A = X\n    caches = []\n    L = len(parameters) // 2\n    for l in range(1, L):\n        A_prev = A\n        W = parameters['W' + str(l)]\n        b = parameters['b' + str(l)]\n        Z = np.dot(W, A_prev) + b\n        linear_cache = (A_prev, W, b)\n        activation_cache = Z\n        A = np.maximum(0, Z)\n        caches.append((linear_cache, activation_cache))\n    W = parameters['W' + str(L)]\n    b = parameters['b' + str(L)]\n    Z = np.dot(W, A) + b\n    linear_cache = (A, W, b)\n    activation_cache = Z\n    AL = 1 / (1 + np.exp(-Z))\n    caches.append((linear_cache, activation_cache))\n    return AL.round(4).tolist()"}
{"task_id": 81, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    eps = 1e-15\n    A2 = np.clip(A2, eps, 1 - eps)\n    m = Y.shape[0]\n    J = -(1 / m) * (np.dot(Y, np.log(A2).T) + np.dot(1 - Y, np.log(1 - A2).T))\n    return np.round(J, 6)"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef epsilon_soft(Q: list[float] | 'np.ndarray', epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    greedy_index = np.argmax(Q)\n    probabilities = np.ones_like(Q, dtype=float) * epsilon / len(Q)\n    probabilities[greedy_index] += 1 - epsilon\n    return probabilities.round(4)"}
{"task_id": 86, "completion_id": 0, "solution": "from collections import Counter\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    final_predictions = []\n    for sample in zip(*predictions):\n        vote_counts = Counter(sample)\n        max_vote = max(vote_counts.values())\n        max_vote_labels = [label for (label, count) in vote_counts.items() if count == max_vote]\n        final_predictions.append(min(max_vote_labels))\n    return final_predictions"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input's shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    z = np.asarray(z)\n    sp = np.logaddexp(0.0, z)\n    sp = np.round(sp, 4)\n    if isinstance(z, (list, np.ndarray)):\n        sp = sp.tolist()\n    else:\n        sp = float(sp)\n    return sp"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\ndef mse(bandit: Any, policy: Any) -> float:\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    arm_indices_policy = sorted(policy.ev_estimates.keys())\n    true_expectations = [bandit.arm_evs[i] for i in arm_indices_policy]\n    estimated_expectations = [policy.ev_estimates[i] for i in arm_indices_policy]\n    return round(np.mean(np.square(np.subtract(true_expectations, estimated_expectations))), 4)"}
{"task_id": 96, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float=1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    corpus = [sentence.split() for sentence in corpus]\n    sequence = sequence.split()\n    if len(sequence) < N:\n        return 0.0\n    ngram_counts = defaultdict(Counter)\n    for sentence in corpus:\n        for i in range(len(sentence) - N + 1):\n            ngram = tuple(sentence[i:i + N])\n            ngram_counts[ngram[:-1]][ngram[-1]] += 1\n    vocabulary = set((word for sentence in corpus for word in sentence))\n    vocabulary.add('<UNK>')\n    V = len(vocabulary)\n    log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i + N])\n        if ngram[:-1] in ngram_counts:\n            count = ngram_counts[ngram[:-1]][ngram[-1]]\n        else:\n            count = 0\n        prob = (count + K) / (sum(ngram_counts[ngram[:-1]].values()) + K * V)\n        log_prob += math.log(prob)\n    return round(log_prob, 4)"}
{"task_id": 108, "completion_id": 0, "solution": "import numpy as np\ndef als_factorization(X: np.ndarray, K: int, alpha: float=1.0, max_iter: int=200, tol: float=0.0001) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    (N, M) = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    for _ in range(max_iter):\n        H_prev = H\n        W = X @ H.T @ np.linalg.inv(H @ H.T + alpha * np.eye(K))\n        H = (np.linalg.inv(W.T @ W + alpha * np.eye(K)) @ W.T @ X).T\n        loss = np.linalg.norm(X - W @ H) ** 2 + alpha * (np.linalg.norm(W) ** 2 + np.linalg.norm(H) ** 2)\n        if _ > 0 and np.abs(loss - prev_loss) < tol:\n            break\n        prev_loss = loss\n    return np.round(W @ H, 4).tolist()"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef kmeans(X: np.ndarray, K: int, max_iter: int=100, random_state: int | None=None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n    centroids = [X[np.random.choice(range(X.shape[0]))]]\n    for _ in range(1, K):\n        dist_sq = np.array([min([np.inner(c - x, c - x) for c in centroids]) for x in X])\n        probs = dist_sq / dist_sq.sum()\n        cumulative_probs = probs.cumsum()\n        r = random.random()\n        for (j, p) in enumerate(cumulative_probs):\n            if r < p:\n                i = j\n                break\n        centroids.append(X[i])\n    for _ in range(max_iter):\n        clusters = [[] for _ in range(K)]\n        for x in X:\n            distances = [np.linalg.norm(x - c) for c in centroids]\n            cluster_index = np.argmin(distances)\n            clusters[cluster_index].append(x)\n        new_centroids = []\n        for i in range(K):\n            if clusters[i]:\n                new_centroids.append(np.mean(clusters[i], axis=0))\n            else:\n                new_centroids.append(centroids[i])\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n    centroids = sorted((c.round(4).tolist() for c in centroids), key=lambda c: (c[0], c))\n    return centroids"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\nTIME_STEPS = 20\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes the raw text into a fixed-length list of integer token ids.\"\"\"\n    encoded_ids = []\n    for char in text:\n        if char in vocabulary:\n            encoded_ids.append(vocabulary[char])\n        else:\n            encoded_ids.append(0)\n    while len(encoded_ids) < time_steps:\n        encoded_ids.append(0)\n    return encoded_ids[:time_steps]\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list/array of integer ids back to text using an inverse vocabulary.\"\"\"\n    decoded_text = ''\n    for id in indices:\n        if id != 0 and id in inverse_vocab:\n            decoded_text += inverse_vocab[id]\n    return decoded_text\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Puts everything together to encode the input text, predict the output, and decode the output.\"\"\"\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)\n    encoded_text = np.array(encoded_text).reshape(1, -1)\n    output_ids = model.predict(encoded_text)\n    output_ids = np.argmax(output_ids, axis=-1).tolist()[0]\n    output_text = int_to_string(output_ids, inv_output_vocabulary)\n    return output_text"}
{"task_id": 113, "completion_id": 0, "solution": "def run_examples(model, input_vocabulary, inv_output_vocabulary, examples):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\"\"\"\n    global EXAMPLES\n    if examples is None:\n        examples = EXAMPLES\n    outputs = []\n    for example in examples:\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        output_string = ''.join(output_chars)\n        print(f'input:  {example}')\n        print(f'output: {output_string}')\n        outputs.append(output_string)\n    return outputs"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    eps = 1e-20\n    (m, n) = X.shape\n    w = w.reshape(-1, 1)\n    assert (m, n) == X.shape\n    assert (m, 1) == y.shape\n    assert (n, 1) == w.shape\n    z = np.dot(X, w)\n    p = 1 / (1 + np.exp(-z))\n    p = np.maximum(eps, np.minimum(1 - eps, p))\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    grad = 1 / m * np.dot(X.T, p - y)\n    return (round(loss, 4), np.round(grad, 4).tolist())"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    if n_clf < 1:\n        n_clf = 1\n    weights = np.ones(len(y_train)) / len(y_train)\n    f_out = np.zeros(len(y_train))\n    stumps = []\n    for _ in range(n_clf):\n        (best_feature, best_threshold, best_error) = (np.inf, np.inf, np.inf)\n        for feature in range(X_train.shape[1]):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                predictions = np.ones(len(y_train))\n                predictions[X_train[:, feature] < threshold] = -1\n                errors = weights[predictions != y_train]\n                error = np.sum(errors)\n                if error > 0.5:\n                    error = 1 - error\n                    predictions *= -1\n                if error < best_error:\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_error = error\n                    f_out = predictions.copy()\n        eps = best_error\n        alpha = 0.5 * np.log((1.0 - eps) / (eps + 1e-10))\n        weights *= np.exp(-alpha * y_train * f_out)\n        weights /= np.sum(weights)\n        stumps.append((best_feature, best_threshold, alpha))\n    predict = np.zeros(len(X_test))\n    for (feature, threshold, alpha) in stumps:\n        predict_i = np.ones(len(X_test))\n        predict_i[X_test[:, feature] < threshold] = -1\n        predict += alpha * predict_i\n    predict = [1 if p > 0 else -1 for p in predict]\n    return predict"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    class_labels = np.unique(y)\n    if n_components == 0 or n_components > len(class_labels) - 1:\n        return []\n    mean_vectors = []\n    for c in class_labels:\n        mean_vectors.append(np.mean(X[y == c], axis=0))\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    for (c, mv) in zip(class_labels, mean_vectors):\n        class_sc_mat = np.zeros((X.shape[1], X.shape[1]))\n        for row in X[y == c]:\n            (row, mv) = (row.reshape(X.shape[1], 1), mv.reshape(X.shape[1], 1))\n            class_sc_mat += (row - mv).dot((row - mv).T)\n        S_W += class_sc_mat\n    overall_mean = np.mean(X, axis=0)\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    for (c, mv) in zip(class_labels, mean_vectors):\n        n = X[y == c, :].shape[0]\n        mv = mv.reshape(X.shape[1], 1)\n        overall_mean = overall_mean.reshape(X.shape[1], 1)\n        S_B += n * (mv - overall_mean).dot((mv - overall_mean).T)\n    (eig_vals, eig_vecs) = np.linalg.eig(np.linalg.pinv(S_W).dot(S_B))\n    eig_pairs = [(np.abs(eig_vals[i]), eig_vecs[:, i]) for i in range(len(eig_vals))]\n    eig_pairs = sorted(eig_pairs, key=lambda k: k[0], reverse=True)\n    projection_matrix = np.hstack([eig_pairs[i][1].reshape(X.shape[1], 1) for i in range(n_components)])\n    X_lda = np.dot(X, projection_matrix)\n    return np.round(X_lda, 4).tolist()\nX = np.array([[1, 1], [1, 2], [2, 1], [2, 2], [8, 8], [9, 8], [8, 9], [9, 9]])\ny = np.array([0, 0, 0, 0, 1, 1, 1, 1])\nn_components = 1"}
{"task_id": 140, "completion_id": 0, "solution": "from collections import deque\ndef escape_fire_maze(grid: list[str]) -> int:\n    n = len(grid)\n    DIR = [0, 1, 0, -1, 0]\n\n    def is_valid(x: int, y: int) -> bool:\n        return 0 <= x < n and 0 <= y < n\n    fire_time = [[float('inf')] * n for _ in range(n)]\n    agent_time = [[float('inf')] * n for _ in range(n)]\n    fire = deque()\n    agent = deque()\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'F':\n                fire.append((i, j))\n                fire_time[i][j] = 0\n            elif grid[i][j] == '.' and (i == 0 or j == 0 or i == n - 1 or (j == n - 1)):\n                agent.append((i, j))\n                agent_time[i][j] = 0\n    while fire:\n        (x, y) = fire.popleft()\n        for i in range(4):\n            (nx, ny) = (x + DIR[i], y + DIR[i + 1])\n            if is_valid(nx, ny) and grid[nx][ny] == '.':\n                if fire_time[nx][ny] == float('inf'):\n                    fire.append((nx, ny))\n                    fire_time[nx][ny] = fire_time[x][y] + 1\n    while agent:\n        (x, y) = agent.popleft()\n        for i in range(4):\n            (nx, ny) = (x + DIR[i], y + DIR[i + 1])\n            if is_valid(nx, ny) and grid[nx][ny] == '.' and (agent_time[nx][ny] == float('inf')) and (fire_time[nx][ny] > agent_time[x][y] + 1):\n                agent.append((nx, ny))\n                agent_time[nx][ny] = agent_time[x][y] + 1\n                if nx == 0 or ny == 0 or nx == n - 1 or (ny == n - 1):\n                    return agent_time[nx][ny]\n    return -1"}
{"task_id": 141, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.spatial import distance\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str='euclidean') -> np.ndarray:\n    if metric not in ['euclidean', 'manhattan', 'cosine']:\n        metric = 'euclidean'\n    predictions = np.zeros(X_test.shape[0])\n    for (i, test_sample) in enumerate(X_test):\n        distances = []\n        for train_sample in X_train:\n            if metric == 'euclidean':\n                dist = distance.euclidean(test_sample, train_sample)\n            elif metric == 'manhattan':\n                dist = distance.cityblock(test_sample, train_sample)\n            elif metric == 'cosine':\n                dist = distance.cosine(test_sample, train_sample)\n            distances.append(dist)\n        k_nearest = np.argsort(distances)[:k]\n        labels = y_train[k_nearest]\n        (unique_labels, counts) = np.unique(labels, return_counts=True)\n        if len(counts) > 1 and np.max(counts) == np.min(counts):\n            prediction = np.min(unique_labels)\n        else:\n            prediction = unique_labels[np.argmax(counts)]\n        predictions[i] = prediction\n    return predictions.astype(int)"}
{"task_id": 146, "completion_id": 0, "solution": "import numpy as np\ndef knn_predict(X: np.ndarray, y: np.ndarray, X_test: np.ndarray, k: int=3, metric: str='euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n\n    def euclidean_distance(x, y):\n        return np.sqrt(np.sum((x - y) ** 2))\n\n    def manhattan_distance(x, y):\n        return np.sum(np.abs(x - y))\n\n    def cosine_distance(x, y):\n        epsilon = 1e-12\n        return 1 - np.dot(x, y) / (np.linalg.norm(x) * np.linalg.norm(y) + epsilon)\n    if metric == 'euclidean':\n        distance_func = euclidean_distance\n    elif metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        raise ValueError(\"Invalid metric. Expected one of: 'euclidean', 'manhattan', 'cosine'\")\n    y_pred = []\n    for x_test in X_test:\n        distances = []\n        for (x, label) in zip(X, y):\n            distances.append((distance_func(x_test, x), label))\n        distances.sort()\n        k_nearest = distances[:k if k <= len(distances) else len(distances)]\n        labels = [label for (_, label) in k_nearest]\n        y_pred.append(max(set(labels), key=labels.count))\n    return y_pred"}
{"task_id": 155, "completion_id": 0, "solution": "import numpy as np\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    z1 = np.dot(state, weights['W1']) + weights['b1']\n    a1 = np.maximum(0, z1)\n    z2 = np.dot(a1, weights['W2']) + weights['b2']\n    a2 = np.maximum(0, z2)\n    z3 = np.dot(a2, weights['W3']) + weights['b3']\n    action = np.tanh(z3)\n    return [round(x, 4) for x in action]\nstate = np.array([0.1, 0.2, 0.3])\nweights = {'W1': np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]), 'b1': np.array([0.1, 0.2]), 'W2': np.array([[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]]), 'b2': np.array([0.1, 0.2, 0.3]), 'W3': np.array([[0.1, 0.2, 0.3]]), 'b3': np.array([0.1])}"}
{"task_id": 160, "completion_id": 0, "solution": "import numpy as np"}
{"task_id": 165, "completion_id": 0, "solution": "import numpy as np\ndef hamming_distance(x: list[int] | 'np.ndarray', y: list[int] | 'np.ndarray') -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    if isinstance(x, list):\n        x = np.array(x)\n    if isinstance(y, list):\n        y = np.array(y)\n    if x.shape[0] != y.shape[0]:\n        return -1\n    distance = np.sum(x != y) / x.shape[0]\n    return round(distance, 4)"}
{"task_id": 169, "completion_id": 0, "solution": "import numpy as np\ndef generate_window(window: str, N: int, coefficients: list[float] | None=None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer')\n    n = np.arange(N)\n    if window == 'hamming':\n        return np.round(0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1)), 4).tolist()\n    elif window == 'hann':\n        return np.round(0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1)), 4).tolist()\n    elif window == 'blackman_harris':\n        (a0, a1, a2, a3) = (0.35875, 0.48829, 0.14128, 0.01168)\n        return np.round(a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1)), 4).tolist()\n    elif window == 'generalized_cosine':\n        if coefficients is None:\n            raise ValueError('Coefficients must be provided for generalized cosine window')\n        w = np.zeros_like(n, dtype=float)\n        for (k, a) in enumerate(coefficients):\n            w += a * np.cos(2 * np.pi * k * n / (N - 1))\n        return np.round(w, 4).tolist()\n    else:\n        raise ValueError(f'Unknown window type: {window}')"}
{"task_id": 171, "completion_id": 0, "solution": "import numpy as np\ndef logistic_regression_train_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], epochs: int=5000, learning_rate: float=0.1, batch_size: int=32) -> list[int]:\n    y_train_map = list(map(lambda x: 1 if x == y_train[0] else 0, y_train))\n    y_train = np.array(y_train_map)\n    X_train = np.array(X_train)\n    X_train = np.hstack((np.ones((X_train.shape[0], 1)), X_train))\n    X_test = np.array(X_test)\n    X_test = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n    if len(set(y_train)) == 1:\n        return [y_train[0]] * len(X_test)\n    weights = np.zeros(X_train.shape[1])\n    for epoch in range(epochs):\n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train[i:i + batch_size]\n            y_batch = y_train[i:i + batch_size]\n            z = np.dot(X_batch, weights)\n            predictions = 1 / (1 + np.exp(-z))\n            gradient = np.dot(X_batch.T, predictions - y_batch) / len(y_batch)\n            weights -= learning_rate * gradient\n    z = np.dot(X_test, weights)\n    predictions_proba = 1 / (1 + np.exp(-z))\n    predictions = [y_train[0] if p < 0.5 else y_train[-1] for p in predictions_proba]\n    return predictions"}
{"task_id": 176, "completion_id": 0, "solution": "import numpy as np\nclass DecisionStump:\n\n    def __init__(self):\n        self.polarity = 1\n        self.feature_index = None\n        self.threshold = None\n        self.alpha = None\nclass Adaboost:\n\n    def __init__(self, n_estimators):\n        self.n_estimators = n_estimators\n\n    def fit(self, X, y):\n        (n_samples, n_features) = np.shape(X)\n        w = np.full(n_samples, 1 / n_samples)\n        self.estimators = []\n        for _ in range(self.n_estimators):\n            clf = DecisionStump()\n            min_error = float('inf')\n            for feature_i in range(n_features):\n                feature_values = np.expand_dims(X[:, feature_i], axis=1)\n                unique_values = np.unique(feature_values)\n                for threshold in unique_values:\n                    polarity = 1\n                    prediction = np.ones(np.shape(y))\n                    prediction[X[:, feature_i] < threshold] = -1\n                    error = sum(w[y != prediction])\n                    if error > 0.5:\n                        error = 1 - error\n                        polarity = -1\n                    if error < min_error:\n                        clf.polarity = polarity\n                        clf.threshold = threshold\n                        clf.feature_index = feature_i\n                        min_error = error\n            clf.alpha = 0.5 * np.log((1.0 - min_error) / (min_error + 1e-10))\n            predictions = np.ones(np.shape(y))\n            negative_idx = clf.polarity * X[:, clf.feature_index] < clf.polarity * clf.threshold\n            predictions[negative_idx] = -1\n            w *= np.exp(-clf.alpha * y * predictions)\n            w /= np.sum(w)\n            self.estimators.append(clf)\n\n    def predict(self, X):\n        n_samples = np.shape(X)[0]\n        y_pred = np.zeros((n_samples, 1))\n        for clf in self.estimators:\n            predictions = np.ones(np.shape(y_pred))\n            negative_idx = clf.polarity * X[:, clf.feature_index] < clf.polarity * clf.threshold\n            predictions[negative_idx] = -1\n            y_pred += clf.alpha * predictions\n        y_pred = np.sign(y_pred).flatten().tolist()\n        return y_pred\ndef adaboost_predict(X_train, y_train, X_test, n_estimators):\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    clf = Adaboost(n_estimators=n_estimators)\n    clf.fit(X_train, y_train)\n    predictions = clf.predict(X_test)\n    return predictions"}
{"task_id": 178, "completion_id": 0, "solution": "import numpy as np\ndef particle_swarm_optimisation(n_dims: int, num_particles: int, num_iterations: int, seed: int=1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n    rng = np.random.default_rng(seed)\n    particles = rng.uniform(low=-1.0, high=1.0, size=(num_particles, n_dims))\n    velocities = rng.uniform(low=-1.0, high=1.0, size=(num_particles, n_dims))\n    p_best = particles.copy()\n    g_best = particles[np.argmin(np.sum(particles ** 2, axis=1))]\n    (w, c1, c2) = (0.5, 1.5, 1.5)\n    for _ in range(num_iterations):\n        velocities = w * velocities + c1 * rng.uniform(size=(num_particles, n_dims)) * (p_best - particles) + c2 * rng.uniform(size=(num_particles, n_dims)) * (g_best - particles)\n        particles += velocities\n        particles = np.clip(particles, -1.0, 1.0)\n        for i in range(num_particles):\n            if np.sum(particles[i] ** 2) < np.sum(p_best[i] ** 2):\n                p_best[i] = particles[i]\n        g_best = p_best[np.argmin(np.sum(p_best ** 2, axis=1))]\n    best_value = np.sum(g_best ** 2)\n    return round(best_value, 4)"}
{"task_id": 180, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef knn_predict(X_train: list[list[float]], y_train: list, X_test: list[list[float]], k: int=5, task: str='classification') -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    predictions = []\n    for test_sample in X_test:\n        distances = []\n        for train_sample in X_train:\n            dist = np.linalg.norm(np.array(test_sample) - np.array(train_sample))\n            distances.append(dist)\n        k_nearest_indices = np.argsort(distances)[:k if k else len(X_train)]\n        k_nearest_labels = [y_train[i] for i in k_nearest_indices]\n        if task == 'classification':\n            counter = Counter(k_nearest_labels)\n            most_common_labels = counter.most_common()\n            most_common_labels.sort(key=lambda x: (-x[1], x[0]))\n            predictions.append(most_common_labels[0][0])\n        elif task == 'regression':\n            predictions.append(round(sum(k_nearest_labels) / len(k_nearest_labels), 4))\n    return predictions"}
{"task_id": 184, "completion_id": 0, "solution": "import numpy as np\nclass Node:\n\n    def __init__(self, feature=None, threshold=None, left=None, right=None, *, value=None):\n        self.feature = feature\n        self.threshold = threshold\n        self.left = left\n        self.right = right\n        self.value = value\n\n    def is_leaf_node(self) -> bool:\n        return self.value is not None\nclass DecisionTree:\n\n    def __init__(self, min_samples_split=2, max_depth=100, n_feats=None):\n        self.min_samples_split = min_samples_split\n        self.max_depth = max_depth\n        self.n_feats = n_feats\n        self.root = None\n\n    def fit(self, X, y):\n        self.n_feats = X.shape[1] if not self.n_feats else min(self.n_feats, X.shape[1])\n        self.root = self._grow_tree(X, y)\n\n    def _grow_tree(self, X, y, depth=0):\n        (n_samples, n_features) = X.shape\n        n_labels = len(np.unique(y))\n        if depth >= self.max_depth or n_labels == 1 or n_samples < self.min_samples_split:\n            most_common_label = np.argmax(np.bincount(y))\n            return Node(value=most_common_label)\n        feat_idxs = np.random.choice(n_features, self.n_feats, replace=False)\n        (best_feat, best_thresh) = self._best_criteria(X, y, feat_idxs)\n        (left_idxs, right_idxs) = self._split(X[:, best_feat], best_thresh)\n        left = self._grow_tree(X[left_idxs, :], y[left_idxs], depth + 1)\n        right = self._grow_tree(X[right_idxs, :], y[right_idxs], depth + 1)\n        return Node(best_feat, best_thresh, left, right)\n\n    def _best_criteria(self, X, y, feat_idxs):\n        best_gain = -1\n        (split_idx, split_thresh) = (None, None)\n        for feat_idx in feat_idxs:\n            X_column = X[:, feat_idx]\n            thresholds = np.unique(X_column)\n            for threshold in thresholds:\n                gain = self._gain(y, X_column, threshold)\n                if gain > best_gain:\n                    best_gain = gain\n                    split_idx = feat_idx\n                    split_thresh = threshold\n        return (split_idx, split_thresh)\n\n    def _gain(self, y, X_column, split_thresh):\n        parent_gini = self._gini(y)\n        (left_idxs, right_idxs) = self._split(X_column, split_thresh)\n        if len(left_idxs) == 0 or len(right_idxs) == 0:\n            return 0\n        n = len(y)\n        (n_l, n_r) = (len(left_idxs), len(right_idxs))\n        (e_l, e_r) = (n_l / n, n_r / n)\n        gini = e_l * self._gini(y[left_idxs]) + e_r * self._gini(y[right_idxs])\n        gini_gain = parent_gini - gini\n        return gini_gain\n\n    def _split(self, X_column, split_thresh):\n        left_idxs = np.argwhere(X_column <= split_thresh).flatten()\n        right_idxs = np.argwhere(X_column > split_thresh).flatten()\n        return (left_idxs, right_idxs)\n\n    def _gini(self, y):\n        labels = np.bincount(y)\n        impurity = 1 - np.sum(np.square(labels / len(y)))\n        return impurity\n\n    def predict(self, X):\n        return np.array([self._traverse_tree(x, self.root) for x in X])\n\n    def _traverse_tree(self, x, node):\n        if node.is_leaf_node():\n            return node.value\n        if x[node.feature] <= node.threshold:\n            return self._traverse_tree(x, node.left)\n        return self._traverse_tree(x, node.right)\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None=None) -> list[int]:\n    tree = DecisionTree(max_depth=max_depth)\n    tree.fit(X_train, y_train)\n    return tree.predict(X_test).tolist()"}
{"task_id": 190, "completion_id": 0, "solution": "import numpy as np\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\n\n    Parameters\n    ----------\n    X : list[list[float]] or numpy.ndarray\n        A 2-D structure where each inner list/row contains the numerical\n        feature values of one sample.\n    y : list[int] or numpy.ndarray\n        A 1-D structure containing the class labels corresponding to the rows\n        of X.\n\n    Returns\n    -------\n    tuple\n        A tuple `(best_feature_index, best_threshold_value, best_gini)` where\n        `best_gini` is rounded to 4 decimal places.  If no valid split exists\n        the function must return `(-1, None, round(G_whole_dataset, 4))`.\n    \"\"\"\n\n    def gini(y):\n        \"\"\"Compute the Gini impurity of a vector y.\"\"\"\n        (_, counts) = np.unique(y, return_counts=True)\n        probabilities = counts / len(y)\n        return 1 - np.sum(np.square(probabilities))\n\n    def split_gini(left, right):\n        \"\"\"Compute the Gini impurity of a split.\"\"\"\n        n_total = len(left) + len(right)\n        return len(left) / n_total * gini(left) + len(right) / n_total * gini(right)\n    X = np.array(X)\n    y = np.array(y)\n    (n_samples, n_features) = X.shape\n    if len(np.unique(y)) == 1:\n        return (-1, None, round(gini(y), 4))\n    (best_feature_index, best_threshold_value, best_gini) = (-1, None, np.inf)\n    for feature in range(n_features):\n        sorted_indices = np.argsort(X[:, feature])\n        sorted_X = X[sorted_indices, feature]\n        sorted_y = y[sorted_indices]\n        unique_values = np.unique(sorted_X)\n        if len(unique_values) == 1:\n            continue\n        for threshold in unique_values[:-1]:\n            left_indices = sorted_X <= threshold\n            right_indices = sorted_X > threshold\n            left = sorted_y[left_indices]\n            right = sorted_y[right_indices]\n            if len(left) == 0 or len(right) == 0:\n                continue\n            split_impurity = split_gini(left, right)\n            if split_impurity < best_gini or (np.isclose(split_impurity, best_gini) and feature < best_feature_index) or (np.isclose(split_impurity, best_gini) and feature == best_feature_index and (threshold < best_threshold_value)):\n                (best_feature_index, best_threshold_value, best_gini) = (feature, threshold, split_impurity)\n    if best_feature_index == -1:\n        return (-1, None, round(gini(y), 4))\n    return (best_feature_index, best_threshold_value, round(best_gini, 4))"}
{"task_id": 191, "completion_id": 0, "solution": "import numpy as np\ndef metric(name: str):\n    metrics = {'euclidean': lambda x, y: np.sqrt(np.sum((np.array(x) - np.array(y)) ** 2)), 'manhattan': lambda x, y: np.sum(np.abs(np.array(x) - np.array(y))), 'chebyshev': lambda x, y: np.max(np.abs(np.array(x) - np.array(y))), 'cosine': lambda x, y: 1 - np.dot(np.array(x), np.array(y)) / (np.linalg.norm(np.array(x)) * np.linalg.norm(np.array(y)))}\n\n    def is_valid(x, y):\n        if not (isinstance(x, (list, tuple, np.ndarray)) and isinstance(y, (list, tuple, np.ndarray))):\n            return False\n        try:\n            (x, y) = (np.array(x, dtype=float), np.array(y, dtype=float))\n        except ValueError:\n            return False\n        if x.ndim != 1 or y.ndim != 1 or x.size == 0 or (y.size == 0) or (x.size != y.size):\n            return False\n        if name == 'cosine' and (np.linalg.norm(x) == 0 or np.linalg.norm(y) == 0):\n            return False\n        return True\n    if name not in metrics:\n        return -1\n\n    def d(x, y):\n        return round(metrics[name](x, y), 4) if is_valid(x, y) else -1\n    return d"}
{"task_id": 197, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n    if not md_action:\n        if not cont_action:\n            n_actions_per_dim.append(env.action_space.n)\n            action_ids = list(range(env.action_space.n))\n        else:\n            n_actions_per_dim.append(np.inf)\n        action_dim = 1\n    else:\n        for subspace in env.action_space.spaces:\n            if not cont_action:\n                n_actions_per_dim.append(subspace.n)\n            else:\n                n_actions_per_dim.append(np.inf)\n                action_ids = None\n        action_dim = len(env.action_space.spaces)\n    if all((isinstance(x, int) for x in n_actions_per_dim)):\n        action_ids = list(product(*[range(n) for n in n_actions_per_dim]))\n    return (n_actions_per_dim, action_ids, action_dim)"}
{"task_id": 198, "completion_id": 0, "solution": "import numpy as np\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    T = len(phi[0][0])\n    beta = np.zeros((V, T))\n    for (d, doc) in enumerate(phi):\n        for (n, phi_nd) in enumerate(doc):\n            v = corpus[d][n]\n            beta[v] += phi_nd\n    beta /= beta.sum(axis=0)\n    beta = np.round(beta, decimals=4)\n    return beta.tolist()"}
{"task_id": 202, "completion_id": 0, "solution": "import numpy as np\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    medoids = X[:k]\n    labels = np.empty(len(X), dtype=int)\n    cost = np.inf\n    while True:\n        new_cost = 0\n        for (i, sample) in enumerate(X):\n            distances = np.linalg.norm(medoids - sample, axis=1)\n            label = np.argmin(distances)\n            labels[i] = label\n            new_cost += distances[label] ** 2\n        if new_cost >= cost:\n            break\n        cost = new_cost\n        for (i, medoid) in enumerate(medoids):\n            for (j, non_medoid) in enumerate(X):\n                if non_medoid in medoids:\n                    continue\n                new_medoids = medoids.copy()\n                new_medoids[i] = non_medoid\n                new_cost = 0\n                for (l, sample) in enumerate(X):\n                    distances = np.linalg.norm(new_medoids - sample, axis=1)\n                    label = np.argmin(distances)\n                    new_cost += distances[label] ** 2\n                if new_cost < cost:\n                    medoids = new_medoids\n                    cost = new_cost\n    return labels.tolist()"}
{"task_id": 216, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    if x_train.shape[1] != x_test.shape[1] or n_iterations < 1:\n        return -1\n    x_train_poly = np.concatenate([x_train ** (j + 1) for j in range(degree)], axis=1)\n    x_test_poly = np.concatenate([x_test ** (j + 1) for j in range(degree)], axis=1)\n    x_train_poly = np.insert(x_train_poly, 0, 1, axis=1)\n    x_test_poly = np.insert(x_test_poly, 0, 1, axis=1)\n    mean = np.mean(x_train_poly[:, 1:], axis=0)\n    std = np.std(x_train_poly[:, 1:], axis=0)\n    x_train_poly[:, 1:] = (x_train_poly[:, 1:] - mean) / std\n    x_test_poly[:, 1:] = (x_test_poly[:, 1:] - mean) / std\n    w = np.random.randn(x_train_poly.shape[1])\n    for _ in range(n_iterations):\n        y_pred = x_train_poly @ w\n        residuals = y_pred - y_train\n        grad_lasso = l1_ratio * np.sign(w)\n        grad_ridge = 2 * (1 - l1_ratio) * w\n        gradients = 2 / x_train.shape[0] * (x_train_poly.T @ residuals) + reg_factor * (grad_lasso + grad_ridge)\n        w = w - learning_rate * gradients\n    y_pred_test = x_test_poly @ w\n    return np.round(y_pred_test, 4).tolist()"}
{"task_id": 217, "completion_id": 0, "solution": "import numpy as np\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    sigmoid = 1 / (1 + np.exp(-predicted))\n    gradient = actual * sigmoid - (1 - sigmoid)\n    hessian = sigmoid * (1 - sigmoid)\n    gradient = np.round(gradient, 6)\n    hessian = np.round(hessian, 6)\n    sigmoid = np.round(sigmoid, 6)\n    gradient = gradient.tolist()\n    hessian = hessian.tolist()\n    sigmoid = sigmoid.tolist()\n    return (gradient, hessian, sigmoid)\nactual = [1, -1, 1, -1]\npredicted = [0.5, -0.5, 1.5, -1.5]"}
{"task_id": 218, "completion_id": 0, "solution": "def blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\"\"\"\n\n    def get_hand_value(hand):\n        total = sum(hand)\n        if 1 in hand and total + 10 <= 21:\n            total += 10\n        return total\n    player_value = get_hand_value(player)\n    dealer_value = get_hand_value(dealer)\n    if player_value > 21:\n        return -1\n    elif player_value == 21 and len(player) == 2:\n        return 1.5 if dealer_value < 21 else 1\n    elif dealer_value > 21:\n        return 1\n    if player_value > dealer_value:\n        return 1\n    elif player_value < dealer_value:\n        return -1\n    else:\n        return 0"}
{"task_id": 221, "completion_id": 0, "solution": "import numpy as np\ndef squared_log_error(actual, predicted):\n    \"\"\"TODO: implement helper that returns element-wise squared log errors.\"\"\"\n    return (np.log(1 + actual) - np.log(1 + predicted)) ** 2\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns \u20111.\n    \"\"\"\n    (actual, predicted) = (np.array(actual), np.array(predicted))\n    if actual.shape != predicted.shape:\n        return -1\n    if (actual < 0).any() or (predicted < 0).any():\n        return -1\n    squared_log_errors = squared_log_error(actual, predicted)\n    return round(squared_log_errors.mean(), 4)"}
{"task_id": 222, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    z = np.array(z)\n    sigmoid_z = np.where(z >= 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n    sigmoid_z = np.round(sigmoid_z, 4)\n    if sigmoid_z.shape:\n        return sigmoid_z.tolist()\n    else:\n        return float(sigmoid_z)"}
{"task_id": 224, "completion_id": 0, "solution": "import numpy as np\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, np.ndarray):\n        z = z.tolist()\n    elif isinstance(z, list):\n        z = list(map(lambda x: x if not isinstance(x, list) else leaky_relu(x, a), z))\n    else:\n        return max(z, a * z)\n    return z"}
{"task_id": 226, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    (n_samples, n_features) = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    clfs = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        (best_feature, best_threshold, best_polarity) = (None, None, None)\n        for feature_i in range(n_features):\n            feature_values = X_train[:, feature_i]\n            thresholds = np.unique(feature_values)\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = polarity * np.where(feature_values <= threshold, -1, 1)\n                    error = np.sum(weights[predictions != y_train])\n                    if error > 0.5:\n                        error = 1 - error\n                        polarity *= -1\n                    if error < min_error:\n                        min_error = error\n                        best_feature = feature_i\n                        best_threshold = threshold\n                        best_polarity = polarity\n        alpha = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n        predictions = best_polarity * np.where(X_train[:, best_feature] <= best_threshold, -1, 1)\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n        clfs.append((best_feature, best_threshold, best_polarity, alpha))\n    y_pred = np.zeros(X_test.shape[0])\n    for clf in clfs:\n        (feature_i, threshold, polarity, alpha) = clf\n        y_pred += alpha * np.where(X_test[:, feature_i] <= threshold, -1, 1)\n    return [np.sign(y) for y in y_pred]"}
{"task_id": 241, "completion_id": 0, "solution": "import numpy as np\ndef orthogonal(shape: tuple[int, ...], scale: float=0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    np.random.seed(0)\n    if len(shape) < 2:\n        return -1\n    else:\n        A = np.random.normal(size=(shape[0], np.product(shape[1:])))\n        (U, _, Vt) = np.linalg.svd(A, full_matrices=False)\n        Q = U if U.shape == A.shape else Vt\n        result = Q.reshape(shape) * scale\n        return result.tolist()\nshape = (2, 2)\nscale = 0.5\nresult = orthogonal(shape, scale)"}
{"task_id": 243, "completion_id": 0, "solution": "import numpy as np\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    weights = np.ones((4, 4))\n    biases = np.zeros((4, 1))\n    actor_weights = np.ones((4, 3))\n    actor_bias = np.zeros(3)\n    critic_weights = np.ones((4, 1))\n    critic_bias = np.zeros(1)\n    state = np.array(state).reshape((-1, 1))\n    z1 = np.maximum(0, np.dot(weights, state) + biases)\n    z2 = np.maximum(0, np.dot(weights, z1) + biases)\n    z3 = np.maximum(0, np.dot(weights, z2) + biases)\n    logits = np.dot(actor_weights.T, z3) + actor_bias\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n    state_value = (np.dot(critic_weights.T, z3) + critic_bias)[0][0]\n    action_probs = [round(prob, 4) for prob in action_probs.tolist()]\n    state_value = round(state_value, 4)\n    return (action_probs, state_value)"}
{"task_id": 249, "completion_id": 0, "solution": "import numpy as np\ndef softmax(x):\n    \"\"\"Compute softmax values for each sets of scores in x.\"\"\"\n    e_x = np.exp(x - np.max(x))\n    return e_x / e_x.sum(axis=0)\ndef relu(x):\n    \"\"\"Compute rectified linear units for each element in x.\"\"\"\n    return np.maximum(0, x)\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    hidden_1 = np.dot(params['W1'], state) + params['b1']\n    hidden_1 = relu(hidden_1)\n    hidden_2 = np.dot(params['W2'], hidden_1) + params['b2']\n    hidden_2 = relu(hidden_2)\n    hidden_3 = np.dot(params['W3'], hidden_2) + params['b3']\n    hidden_3 = relu(hidden_3)\n    actor_scores = np.dot(params['Wa'], hidden_3) + params['ba']\n    action_probs = softmax(actor_scores)\n    state_value = np.dot(params['Wc'], hidden_3) + params['bc']\n    action_probs = [round(prob, 4) for prob in action_probs]\n    state_value = round(float(state_value), 4)\n    return (action_probs, state_value)"}
{"task_id": 253, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l1_penalty = l1_ratio * np.linalg.norm(w, 1)\n    l2_penalty = (1 - l1_ratio) * 0.5 * np.linalg.norm(w) ** 2\n    penalty = alpha * (l1_penalty + l2_penalty)\n    if gradient:\n        return (alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)).round(4).tolist()\n    else:\n        return round(penalty, 4)"}
{"task_id": 256, "completion_id": 0, "solution": "import numpy as np\nfrom copy import deepcopy\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float=1e-07):\n    if param_name in ['X', 'y']:\n        return None\n    param_name = param_name.lower() if param_name in ['Ba', 'Bx'] else param_name\n    param_orig = model.parameters[param_name]\n    grads = np.zeros_like(param_orig, dtype=np.float64)\n    it = np.nditer(param_orig, flags=['multi_index'], op_flags=['readwrite'])\n    while not it.finished:\n        param_orig[it.multi_index] += epsilon\n        preds_plus_epsilon = [model.forward(X[:, :, t]) for t in range(n_t)]\n        loss_plus_epsilon = loss_func(preds_plus_epsilon)\n        param_orig[it.multi_index] -= 2 * epsilon\n        preds_minus_epsilon = [model.forward(X[:, :, t]) for t in range(n_t)]\n        loss_minus_epsilon = loss_func(preds_minus_epsilon)\n        grads[it.multi_index] = (loss_plus_epsilon - loss_minus_epsilon) / (2 * epsilon)\n        param_orig[it.multi_index] += epsilon\n        it.iternext()\n    return grads.T"}
{"task_id": 257, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int=5) -> list[int]:\n    if n_clf < 1:\n        n_clf = 1\n    (m, n) = X_train.shape\n    weights = np.ones(m) / m\n    clfs = []\n    for _ in range(n_clf):\n        min_error = float('inf')\n        (best_clf, best_error, best_index, best_predict) = (None, None, None, None)\n        for index in range(n):\n            (threshold, error) = Decision_Stump(X_train, y_train, weights, index)\n            if error < min_error:\n                min_error = error\n                best_clf = threshold\n                best_error = error\n                best_index = index\n        alpha = 0.5 * np.log((1 - best_error) / best_error)\n        predictions = np.ones(m)\n        negative = X_train[:, best_index] <= best_clf\n        predictions[negative] = -1\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n        clfs.append((best_clf, alpha, best_index))\n    predicts = np.ones(X_test.shape[0])\n    for clf in clfs:\n        (threshold, alpha, index) = clf\n        predicts_clf = np.ones(X_test.shape[0])\n        negative = X_test[:, index] <= threshold\n        predicts_clf[negative] = -1\n        predicts += alpha * predicts_clf\n    predicts = [-1 if val < 0 else 1 for val in predicts]\n    return predicts\ndef Decision_Stump(X_train: np.ndarray, y_train: np.ndarray, weights: np.ndarray, index: int):\n    m = X_train.shape[0]\n    unique_values = np.sort(np.unique(X_train[:, index]))\n    min_error = float('inf')\n    (best_threshold, best_error) = (None, None)\n    for i in range(len(unique_values) - 1):\n        threshold = (unique_values[i] + unique_values[i + 1]) / 2\n        predictions = np.ones(m)\n        negative = X_train[:, index] <= threshold\n        predictions[negative] = -1\n        error = np.sum(weights[predictions != y_train])\n        if error > 0.5:\n            error = 1 - error\n            predictions *= -1\n        if error < min_error:\n            min_error = error\n            best_threshold = threshold\n            best_error = error\n    return (best_threshold, best_error)"}
{"task_id": 261, "completion_id": 0, "solution": "import numpy as np\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError('Shape must have at least 2 dimensions')\n    fan_in = shape[0]\n    receptive_field_size = np.prod(shape[2:])\n    fan_out = shape[1] * receptive_field_size\n    s = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(loc=0, scale=s, size=shape)"}
{"task_id": 266, "completion_id": 0, "solution": "from typing import Any, List, Tuple\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    adj_list = [[] for _ in range(len(V))]\n    for (u, v) in E:\n        if V.index(u) not in adj_list[V.index(v)]:\n            adj_list[V.index(v)].append(V.index(u))\n        if V.index(v) not in adj_list[V.index(u)]:\n            adj_list[V.index(u)].append(V.index(v))\n    for i in range(len(adj_list)):\n        adj_list[i] = sorted(adj_list[i], key=lambda x: V.index(x))\n    return adj_list\nV = ['A', 'B', 'C', 'D']\nE = [('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'A'), ('B', 'D')]"}
{"task_id": 267, "completion_id": 0, "solution": "import numpy as np\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    (best_feature_index, best_threshold, best_polarity, best_error) = (0, 0, 0, np.inf)\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        sorted_indices = np.argsort(feature_values)\n        sorted_feature_values = feature_values[sorted_indices]\n        sorted_labels = y[sorted_indices]\n        sorted_weights = sample_weights[sorted_indices]\n        cumulative_weights = np.cumsum(sorted_weights)\n        cumulative_weights /= cumulative_weights[-1]\n        min_error = np.inf\n        for threshold_index in range(n_samples):\n            for polarity in [1, -1]:\n                if threshold_index > 0:\n                    error_positive = cumulative_weights[threshold_index - 1] - sorted_weights[sorted_labels[threshold_index:] == +1].sum()\n                    error_negative = cumulative_weights[threshold_index - 1] - sorted_weights[sorted_labels[threshold_index:] == -1].sum()\n                else:\n                    error_positive = 1.0 - sorted_weights[sorted_labels == +1].sum()\n                    error_negative = sorted_weights[sorted_labels == -1].sum()\n                error = min(error_positive, error_negative)\n                if error < min_error:\n                    min_error = error\n                    best_feature_index = feature_index\n                    best_threshold = sorted_feature_values[threshold_index]\n                    best_polarity = polarity if error == error_positive else -polarity\n    return {'feature_index': best_feature_index, 'threshold': round(best_threshold, 4), 'polarity': best_polarity, 'weighted_error': round(min_error, 4)}"}
{"task_id": 273, "completion_id": 0, "solution": "import math\nimport numpy as np\nfrom collections import Counter\ndef entropy(class_y):\n    \"\"\"\n    Compute entropy\n    \"\"\"\n    hist = np.bincount(class_y)\n    ps = hist / len(class_y)\n    return -np.sum([p * np.log2(p) for p in ps if p > 0])\ndef best_split(feature, target):\n    \"\"\"\n    Determine the numerical threshold that produces the highest information gain.\n    \"\"\"\n    (feature, target) = (np.array(feature), np.array(target))\n    parent_entropy = entropy(target)\n    sorted_indices = np.argsort(feature)\n    (sorted_feature, sorted_target) = (feature[sorted_indices], target[sorted_indices])\n    max_information_gain = 0\n    best_threshold = None\n    for i in range(1, len(sorted_feature)):\n        if sorted_feature[i] != sorted_feature[i - 1]:\n            threshold = (sorted_feature[i] + sorted_feature[i - 1]) / 2\n            left_indices = feature < threshold\n            right_indices = feature >= threshold\n            left_entropy = entropy(sorted_target[left_indices])\n            right_entropy = entropy(sorted_target[right_indices])\n            information_gain = parent_entropy - sum(left_indices) / len(sorted_feature) * left_entropy - sum(right_indices) / len(sorted_feature) * right_entropy\n            if information_gain > max_information_gain:\n                max_information_gain = information_gain\n                best_threshold = threshold\n    return (round(best_threshold, 4), round(max_information_gain, 4)) if best_threshold is not None else (None, 0.0)"}
{"task_id": 286, "completion_id": 0, "solution": "import random\nfrom typing import Callable, Tuple, List\ndef get_initializer(name: str) -> Callable:\n    if name not in globals() or not callable(globals()[name]):\n        raise ValueError('Invalid initialization function.')\n    return globals()[name]\nname = 'ones_init'"}
{"task_id": 287, "completion_id": 0, "solution": "import numpy as np\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    (N, C, H, W) = X.shape\n    (p_h, p_w) = pool_shape\n    (s_h, s_w) = stride\n    out_h = (H - p_h) // s_h + 1\n    out_w = (W - p_w) // s_w + 1\n    pooled_output = np.zeros((N, C, out_h, out_w))\n    grad_input = np.zeros_like(X)\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    h_start = i * s_h\n                    h_end = i * s_h + p_h\n                    w_start = j * s_w\n                    w_end = j * s_w + p_w\n                    pooled_output[n, c, i, j] = np.mean(X[n, c, h_start:h_end, w_start:w_end])\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += accum_grad[n, c, i, j] / (p_h * p_w)\n    return (pooled_output.round(4).tolist(), grad_input.round(4).tolist())"}
{"task_id": 290, "completion_id": 0, "solution": "import numpy as np\nfrom dataclasses import dataclass\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object\n    right: object\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, rtol=1e-08)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature:\n            return False\n        if not np.isclose(tree_a.threshold, tree_b.threshold, rtol=1e-08):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    else:\n        return False"}
{"task_id": 292, "completion_id": 0, "solution": "import numpy as np\ndef single_point_crossover(parent1: list[list[int | float]], parent2: list[list[int | float]], cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    parent1 = np.array(parent1, dtype=float)\n    parent2 = np.array(parent2, dtype=float)\n    if parent1.shape != parent2.shape:\n        return -1\n    child1 = np.hstack((parent1[:, :cutoff], parent2[:, cutoff:])).tolist()\n    child2 = np.hstack((parent2[:, :cutoff], parent1[:, cutoff:])).tolist()\n    return (child1, child2)"}
{"task_id": 294, "completion_id": 0, "solution": "from typing import Any, Dict, List, Tuple\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    adj = {label: [] for label in G['_V2I'].keys()}\n    for u in G['_G']:\n        for edge in u:\n            (source_label, target_label, weight) = edge\n            adj[source_label].append((target_label, weight))\n            if not G['is_directed']:\n                adj[target_label].append((source_label, weight))\n    for label in adj:\n        adj[label] = sorted(adj[label], key=lambda x: x[0])\n    return adj"}
{"task_id": 296, "completion_id": 0, "solution": "import numpy as np\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    x = np.asarray(x).flatten()\n    return np.all(np.logical_or(x == 0, x == 1))"}
{"task_id": 298, "completion_id": 0, "solution": "import math\nfrom collections import Counter, defaultdict\nfrom typing import List\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    ngram_counter = Counter()\n    prefix_counter = Counter()\n    if N == 1:\n        padding = []\n    else:\n        padding = ['<bol>'] * (N - 1)\n    for sentence in corpus:\n        tokens = padding + sentence.split() + ['<eol>']\n        for i in range(len(tokens) - N + 1):\n            ngram = tuple(tokens[i:i + N])\n            prefix = tuple(tokens[i:i + N - 1])\n            ngram_counter[ngram] += 1\n            prefix_counter[prefix] += 1\n    total_log_prob = 0\n    tokens = padding + query.split() + ['<eol>']\n    for i in range(len(tokens) - N + 1):\n        ngram = tuple(tokens[i:i + N])\n        prefix = tuple(tokens[i:i + N - 1])\n        if ngram_counter[ngram] == 0 or prefix_counter[prefix] == 0:\n            return float('-inf')\n        else:\n            prob = ngram_counter[ngram] / prefix_counter[prefix]\n            total_log_prob += math.log(prob)\n    return round(total_log_prob, 4)"}
{"task_id": 302, "completion_id": 0, "solution": "import numpy as np\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    (n, d) = X.shape\n    dists = np.sqrt(((X[None, :] - X[:, None]) ** 2).sum(-1))\n    W = 1 / (1 + dists)\n    np.fill_diagonal(W, 0)\n    D = np.diag(W.sum(axis=1))\n    L = D - W\n    (_, eigenvectors) = np.linalg.eigh(L)\n    eigenvectors = eigenvectors[:, np.argsort(np.linalg.eigvalsh(L))]\n    E = eigenvectors[:, :k]\n    E = E / np.linalg.norm(E, axis=1)[:, None]\n    centroids = E[:k]\n    labels = np.zeros(n, dtype=int)\n    for _ in range(100):\n        distances = np.linalg.norm(E[:, None, :] - centroids[None, :, :], axis=-1)\n        new_labels = np.argmin(distances, axis=1)\n        if np.all(new_labels == labels):\n            break\n        labels = new_labels\n        for i in range(k):\n            centroids[i] = E[labels == i].mean(axis=0)\n    return labels.tolist()"}
{"task_id": 303, "completion_id": 0, "solution": "def err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    (prev_mine, prev_label) = params[max(ix - 1, 0)]\n    (curr_mine, curr_label) = params[ix]\n    return f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_mine}\\n\\nTheirs (prev) [{prev_label}]:\\n{golds[prev_label]}\\n\\nMine [{curr_label}]:\\n{curr_mine}\\n\\nTheirs [{curr_label}]:\\n{golds[curr_label]}{warn_str}\\n----------------------- END DEBUG -----------------------'"}
{"task_id": 304, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_posterior_mean(X: np.ndarray, y: np.ndarray, alpha: float=1.0, beta: float=1.0, mu=0.0, V=None, fit_intercept: bool=True) -> np.ndarray:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.c_[np.ones(X.shape[0]), X]\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif np.isscalar(V):\n        V *= np.eye(X.shape[1])\n    elif isinstance(V, (list, tuple)):\n        V = np.diag(V)\n    if np.isscalar(mu):\n        mu = mu * np.ones(X.shape[1])\n    V_inv = np.linalg.inv(V)\n    post_cov_b = np.linalg.inv(V_inv + np.dot(X.T, X))\n    post_mean_b = np.dot(post_cov_b, np.dot(V_inv, mu) + np.dot(X.T, y))\n    return [round(i, 4) for i in post_mean_b]"}
{"task_id": 308, "completion_id": 0, "solution": "import numpy as np\ndef mel_filterbank(N: int, n_filters: int=20, fs: int=44000, min_freq: int=0, max_freq: int | None=None, normalize: bool=True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs // 2\n    mel_min = 2595 * np.log10(1 + min_freq / 700)\n    mel_max = 2595 * np.log10(1 + max_freq / 700)\n    mel_values = np.linspace(mel_min, mel_max, n_filters + 2)\n    freq_values = 700 * (10 ** (mel_values / 2595) - 1)\n    freq_bins = np.arange(0, N // 2 + 1) * fs / N\n    F = np.zeros((n_filters, N // 2 + 1))\n    for i in range(n_filters):\n        f_left = freq_values[i]\n        f_center = freq_values[i + 1]\n        f_right = freq_values[i + 2]\n        for k in range(N // 2 + 1):\n            if f_left <= freq_bins[k] < f_center:\n                F[i, k] = (freq_bins[k] - f_left) / (f_center - f_left)\n            elif f_center <= freq_bins[k] < f_right:\n                F[i, k] = (f_right - freq_bins[k]) / (f_right - f_center)\n        if normalize:\n            F[i, :] *= 2 / (f_right - f_left)\n    return F.tolist()"}
{"task_id": 312, "completion_id": 0, "solution": "import numpy as np\ndef blackman_harris(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    n = np.arange(window_len)\n    if symmetric:\n        window = a0 - a1 * np.cos(2 * np.pi * n / (window_len - 1)) + a2 * np.cos(4 * np.pi * n / (window_len - 1)) - a3 * np.cos(6 * np.pi * n / (window_len - 1))\n    else:\n        window = a0 - a1 * np.cos(2 * np.pi * n / (window_len - 1)) + a2 * np.cos(4 * np.pi * n / (window_len - 1)) - a3 * np.cos(6 * np.pi * n / (window_len - 1))\n    window = [round(x, 4) for x in window]\n    return window"}
{"task_id": 313, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef digamma_recursion(x):\n    \"\"\"Digamma function approximation using recursion.\n\n    Parameters\n    ----------\n    x : float\n        Input value.\n\n    Returns\n    -------\n    float\n        Approximation of digamma function.\n    \"\"\"\n    if x < 6:\n        return digamma_recursion(x + 1) - 1 / x\n    else:\n        return math.log(x) - 1 / (2 * x) - 1 / (12 * x ** 2) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\ndef digamma_asymptotic(x):\n    \"\"\"Digamma function approximation using asymptotic expansion.\n\n    Parameters\n    ----------\n    x : float\n        Input value.\n\n    Returns\n    -------\n    float\n        Approximation of digamma function.\n    \"\"\"\n    return math.log(x) - 1 / (2 * x) - 1 / (12 * x ** 2) + 1 / (120 * x ** 4) - 1 / (252 * x ** 6)\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    gamma = np.array(gamma)\n    gamma_d_sum = np.sum(gamma[d, :])\n    expected_log = digamma_recursion(gamma[d, t]) - digamma_asymptotic(gamma_d_sum)\n    return round(expected_log, 4)"}
{"task_id": 317, "completion_id": 0, "solution": "from typing import List, Tuple, Dict\ndef err_fmt(params: List[Tuple[str, str]], golds: Dict[str, str], ix: int, warn_str: str='') -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    (prev_pred, prev_label) = params[prev_ix]\n    prev_gold = golds[prev_label]\n    (curr_pred, curr_label) = params[ix]\n    curr_gold = golds[curr_label]\n    report = f'------------------------- DEBUG -------------------------\\nMine (prev) [{prev_label}]:\\n{prev_pred}\\n\\nTheirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\nMine [{curr_label}]:\\n{curr_pred}\\n\\nTheirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n----------------------- END DEBUG -----------------------\\n'\n    return report"}
{"task_id": 318, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    (m, n) = X_train.shape\n    weights = np.full(m, 1 / m)\n    alphas = []\n    hs = []\n    for _ in range(n_estimators):\n        min_error = float('inf')\n        for j in range(n):\n            for theta in np.unique(X_train[:, j]):\n                for p in [-1, 1]:\n                    pred = p * np.sign(X_train[:, j] - theta)\n                    error = np.sum(weights[pred != y_train])\n                    if error < min_error:\n                        min_error = error\n                        best_j = j\n                        best_theta = theta\n                        best_p = p\n        best_pred = best_p * np.sign(X_train[:, best_j] - best_theta)\n        alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n        alphas.append(alpha)\n        hs.append((best_j, best_theta, best_p))\n        weights = weights * np.exp(-alpha * y_train * best_pred)\n        weights /= np.sum(weights)\n    y_pred = np.zeros(X_test.shape[0])\n    for (alpha, h) in zip(alphas, hs):\n        (j, theta, p) = h\n        y_pred += alpha * p * np.sign(X_test[:, j] - theta)\n    y_pred = np.where(y_pred > 0, 1, -1)\n    return y_pred.tolist()"}
{"task_id": 329, "completion_id": 0, "solution": "import numpy as np\ndef dft_bins(N: int, fs: int=44000, positive_only: bool=True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    freq_bins = []\n    if positive_only:\n        for k in range(N // 2 + 1):\n            freq_bins.append(round(k * (fs / N), 4))\n    else:\n        for k in range(N):\n            if k <= N // 2:\n                freq_bins.append(round(k * (fs / N), 4))\n            else:\n                freq_bins.append(round((k - N) * (fs / N), 4))\n    return freq_bins"}
{"task_id": 331, "completion_id": 0, "solution": "import numpy as np\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n    avg_preds = np.average(predictions, weights=oob_mask, axis=1)\n    sq_errors = np.square(y_true - avg_preds)\n    if np.sum(oob_mask) > 0:\n        return round(np.mean(sq_errors), 4)\n    else:\n        return -1"}
{"task_id": 332, "completion_id": 0, "solution": "def build_fp_tree(transactions, min_support):\n\n    def update_tree(node, transactions):\n        for tran in transactions:\n            if tran[0] in node['children']:\n                node['children'][tran[0]]['support'] += 1\n            else:\n                node['children'][tran[0]] = {'support': 1, 'children': {}}\n            if len(tran) > 1:\n                update_tree(node['children'][tran[0]], [tran[i:] for i in range(1, len(tran))])\n    item_support = Counter((item for sublist in transactions for item in sublist))\n    item_support = {k: v for (k, v) in item_support.items() if v >= min_support}\n    ordered_items = sorted(item_support, key=lambda x: (-item_support[x], x))\n    sorted_transactions = [[item for item in tran if item in item_support] for tran in transactions]\n    sorted_transactions = [sorted(tran, key=lambda x: ordered_items.index(x)) for tran in sorted_transactions]\n    fp_tree = {'support': 0, 'children': {}}\n    for tran in sorted_transactions:\n        update_tree(fp_tree, tran)\n    return fp_tree"}
{"task_id": 336, "completion_id": 0, "solution": "import numpy as np\ndef linear_kernel(X: list[list[int | float]] | 'np.ndarray', Y: list[list[int | float]] | 'np.ndarray' | None=None, c0: int | float=0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    K = np.dot(X, Y.T) + c0\n    K = np.round(K, 4)\n    K = K.tolist()\n    return K"}
{"task_id": 340, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(param: np.ndarray, grad: np.ndarray, t: int, m: np.ndarray, v: np.ndarray, lr: float=0.001, beta1: float=0.9, beta2: float=0.999, eps: float=1e-08) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    m_t = beta1 * m + (1 - beta1) * grad\n    v_t = beta2 * v + (1 - beta2) * np.square(grad)\n    m_cap = m_t / (1 - beta1 ** t)\n    v_cap = v_t / (1 - beta2 ** t)\n    param_new = param - lr * m_cap / (np.sqrt(v_cap) + eps)\n    return [np.round(param_new, 8).tolist(), np.round(m_t, 8).tolist(), np.round(v_t, 8).tolist()]"}
{"task_id": 343, "completion_id": 0, "solution": "import numpy as np\ndef cross_entropy_update(theta_samples: np.ndarray, rewards: list[float] | np.ndarray, retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    if isinstance(rewards, list):\n        rewards = np.array(rewards)\n    N = len(rewards)\n    retain_num = int(retain_prcnt * N)\n    indices = np.argsort(rewards)[-retain_num:]\n    retained_samples = theta_samples[indices]\n    mean = np.mean(retained_samples, axis=0).tolist()\n    variance = np.var(retained_samples, axis=0).tolist()\n    mean = [round(x, 4) for x in mean]\n    variance = [round(x, 4) for x in variance]\n    return (mean, variance)\ntheta_samples = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nrewards = [0.1, 0.2, 0.3]\nretain_prcnt = 0.5"}
{"task_id": 353, "completion_id": 0, "solution": "import math\nfrom collections import Counter\nimport numpy as np\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    label_counts = Counter(labels)\n    total_labels = len(labels)\n    if total_labels <= 0:\n        return 0.0\n    probabilities = [count / total_labels for count in label_counts.values()]\n    entropy = -sum((p * math.log2(p) for p in probabilities))\n    return round(entropy, 5)"}
{"task_id": 354, "completion_id": 0, "solution": "import numpy as np\ndef im2col(X, kernel_size, stride, pad, dilation):\n    (n_ex, in_rows, in_cols, in_ch) = X.shape\n    (kernel_rows, kernel_cols, _, _) = kernel_size\n    out_rows = (in_rows + pad * 2 - dilation * (kernel_rows - 1) - 1) // stride + 1\n    out_cols = (in_cols + pad * 2 - dilation * (kernel_cols - 1) - 1) // stride + 1\n    X_padded = np.pad(X, ((0, 0), (pad, pad), (pad, pad), (0, 0)))\n    output = np.zeros((n_ex, out_rows, out_cols, kernel_rows, kernel_cols, in_ch))\n    for r in range(out_rows):\n        for c in range(out_cols):\n            r_start = r * stride\n            r_end = r_start + kernel_rows * dilation\n            c_start = c * stride\n            c_end = c_start + kernel_cols * dilation\n            output[:, r, c, :, :, :] = X_padded[:, r_start:r_end:dilation, c_start:c_end:dilation, :]\n    return output\ndef conv2D(X, W, stride, pad, dilation=0):\n    if isinstance(pad, int):\n        pad_top = pad_bottom = pad_left = pad_right = pad\n    elif isinstance(pad, tuple):\n        if len(pad) == 2:\n            pad_top = pad_bottom = pad[0]\n            pad_left = pad_right = pad[1]\n        elif len(pad) == 4:\n            (pad_top, pad_bottom, pad_left, pad_right) = pad\n        else:\n            raise ValueError('Invalid padding specification')\n    elif pad == 'same':\n        pad_top = pad_bottom = (W.shape[0] - 1) // 2\n        pad_left = pad_right = (W.shape[1] - 1) // 2\n    else:\n        raise ValueError('Invalid padding specification')\n    X_col = im2col(X, W.shape, stride, (pad_top, pad_bottom, pad_left, pad_right), dilation)\n    out = np.tensordot(X_col, W, axes=((3, 4, 5), (0, 1, 2)))\n    out = out.transpose(0, 3, 1, 2)\n    return out.tolist()\nX = np.random.randn(2, 5, 5, 3)\nW = np.random.randn(3, 3, 3, 2)\nstride = 1\npad = 'same'\ndilation = 0"}
{"task_id": 355, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, n_components: int, solver: str='svd') -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    data_centred = data - np.mean(data, axis=0)\n    if solver == 'svd':\n        (_, _, vt) = np.linalg.svd(data_centred)\n        principal_directions = vt\n    elif solver == 'eigen':\n        cov_matrix = np.cov(data_centred, rowvar=False, ddof=1)\n        (_, v) = np.linalg.eigh(cov_matrix)\n        principal_directions = v.T\n    else:\n        raise ValueError(f\"Invalid solver: {solver}. Use either 'svd' or 'eigen'\")\n    importance_order = np.argsort(np.sum(principal_directions ** 2, axis=0))[::-1]\n    principal_directions = principal_directions[:, importance_order]\n    if n_components < principal_directions.shape[1]:\n        principal_directions = principal_directions[:, :n_components]\n    deterministic_sign = np.where(np.apply_along_axis(lambda x: x[np.nonzero(x)[0][0]] < 0, 0, principal_directions), -1, 1)\n    principal_directions *= deterministic_sign\n    scores = np.dot(data_centred, principal_directions)\n    explained_variance_ratio = np.sum(principal_directions ** 2, axis=0)\n    total_variance = np.sum(explained_variance_ratio)\n    explained_variance_ratio = np.round(explained_variance_ratio / total_variance, 4).tolist()\n    return (np.round(scores, 4).tolist(), explained_variance_ratio)"}
{"task_id": 356, "completion_id": 0, "solution": "def leaf_predict(leaf: 'Leaf', classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return leaf.value.index(max(leaf.value))\n    else:\n        return leaf.value"}
{"task_id": 357, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(data: np.ndarray, K: int, max_iters: int=100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    centroids = data[:K].copy()\n    for _ in range(max_iters):\n        distances = np.sqrt(((data - centroids[:, np.newaxis]) ** 2).sum(axis=2))\n        labels = np.argmin(distances, axis=0)\n        new_centroids = np.array([data[labels == k].mean(axis=0) for k in range(K)])\n        if np.allclose(centroids, new_centroids, atol=1e-06):\n            break\n        centroids = new_centroids\n    centroids = sorted(centroids.tolist())\n    centroids = [[round(y, 4) for y in x] for x in centroids]\n    return centroids"}
{"task_id": 362, "completion_id": 0, "solution": "import numpy as np\ndef row_stochastic_matrix(data: list[list[int | float]] | 'np.ndarray') -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    data = np.array(data, dtype=float)\n    row_sums = data.sum(axis=1)\n    if np.any(row_sums == 0):\n        return -1\n    data = data / row_sums[:, np.newaxis]\n    return np.round(data, 4).tolist()"}
{"task_id": 363, "completion_id": 0, "solution": "from typing import Any, Dict, Iterable, Tuple as PyTuple\nclass Space:\n    pass\nclass Box(Space):\n\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\nclass Tuple(Space):\n\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\nclass Dict(Space):\n\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n\n    def check_space(space, is_tuple):\n        if is_tuple:\n            if isinstance(space, Tuple) or isinstance(space, Dict):\n                for s in space.spaces.values() if isinstance(space, Dict) else space.spaces:\n                    if not check_space(s, False):\n                        return False\n            else:\n                return False\n        elif not isinstance(space, Box):\n            return False\n        return True\n    return (check_space(env.action_space, tuple_action), check_space(env.observation_space, tuple_obs))"}
{"task_id": 369, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for u in updates:\n        running_pred -= learning_rate * u\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        probabilities = np.exp(running_pred) / np.sum(np.exp(running_pred), axis=1, keepdims=True)\n        return np.argmax(probabilities, axis=1)"}
{"task_id": 371, "completion_id": 0, "solution": "import numpy as np\ndef conv1D(X, W, stride, pad, dilation=0):\n    (n_examples, signal_length, in_channels) = X.shape\n    (kernel_width, _, out_channels) = W.shape\n    if pad == 'same':\n        output_length = int(np.ceil(signal_length / stride))\n        total_pad = max(0, (output_length - 1) * stride + (kernel_width - 1) * dilation + 1 - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    elif isinstance(pad, int):\n        p_left = pad\n        p_right = pad\n        output_length = (signal_length + p_left + p_right - (kernel_width - 1) * dilation - 1) // stride + 1\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        (p_left, p_right) = pad\n        output_length = (signal_length + p_left + p_right - (kernel_width - 1) * dilation - 1) // stride + 1\n    else:\n        raise ValueError('Invalid padding parameter')\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)))\n    Z = np.zeros((n_examples, output_length, out_channels))\n    for example in range(n_examples):\n        for out_channel in range(out_channels):\n            for i in range(output_length):\n                start = i * stride\n                end = start + (kernel_width - 1) * dilation + 1\n                Z[example, i, out_channel] = np.sum(X_padded[example, start:end:dilation + 1, :] * W[:, :, out_channel])\n    return Z.tolist()"}
{"task_id": 373, "completion_id": 0, "solution": "import numpy as np\ndef gini(y: list[int] | 'np.ndarray') -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    (_, counts) = np.unique(y, return_counts=True)\n    p = counts / len(y)\n    gini = 1 - np.sum(np.square(p))\n    return round(gini, 4)"}
{"task_id": 374, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float=0.01, n_iterations: int=10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n    (m, n) = X.shape\n    theta = np.zeros(n)\n    bias = 0.0\n    y = np.array(y).reshape(m, 1)\n    for _ in range(n_iterations):\n        y_pred = np.dot(X, theta) + bias\n        residuals = y_pred - y\n        gradient_theta = 2 / m * np.dot(X.T, residuals)\n        gradient_bias = 2 / m * np.sum(residuals)\n        theta -= learning_rate * gradient_theta\n        bias -= learning_rate * gradient_bias\n    return ([round(num, 4) for num in list(theta)], round(bias, 4))"}
{"task_id": 376, "completion_id": 0, "solution": "import numpy as np\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    X = np.array(X)\n    if X.shape[0] != X.shape[1]:\n        return False\n    return np.allclose(X, X.T)"}
{"task_id": 377, "completion_id": 0, "solution": "import numpy as np\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Computes the negative gradient for Logistic (Binomial deviance) loss.\n    \n    Takes two one-dimensional arrays (or Python lists) \n    - y: binary class labels (0 or 1)\n    - f: current prediction scores (floats).\n    \n    Returns a list of negative gradients g rounded to four decimal places.\n    \"\"\"\n    (y, f) = (np.array(y), np.array(f))\n    if not np.all((y == 0) | (y == 1)):\n        return -1\n    y_prime = 2 * y - 1\n    g = y_prime / (1 + np.exp(y_prime * f))\n    return np.round(g, 4).tolist()"}
{"task_id": 380, "completion_id": 0, "solution": "import numpy as np\nALPHA = 1.6732632423543772\nSCALE = 1.0507009873554805\ndef selu(x, order: int=0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    x = np.asarray(x)\n    if order == 0:\n        result = np.where(x > 0, x, ALPHA * (np.exp(x) - 1))\n        result = SCALE * result\n    elif order == 1:\n        result = np.where(x > 0, SCALE, ALPHA * SCALE * np.exp(x))\n    elif order == 2:\n        result = np.where(x > 0, np.zeros_like(x), ALPHA * SCALE * np.exp(x))\n    else:\n        raise ValueError(f'Invalid order: {order}. Order must be 0, 1, or 2.')\n    result = np.round(result, 4).tolist()\n    return result"}
{"task_id": 387, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float=0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    (x, y) = (np.array(x), np.array(y))\n    predictions = np.full(y.shape, np.mean(y))\n    for _ in range(n_estimators):\n        residuals = y - predictions\n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        sorted_residuals = residuals[sorted_indices]\n        split_candidates = (sorted_x[1:] + sorted_x[:-1]) / 2\n        left_residuals = np.cumsum(sorted_residuals) / np.arange(1, len(sorted_residuals) + 1)\n        right_residuals = (np.cumsum(sorted_residuals[::-1]) / np.arange(1, len(sorted_residuals) + 1)[::-1])[::-1]\n        stump_predictions = np.where(sorted_x[:-1].reshape(-1, 1) <= split_candidates, left_residuals, right_residuals)\n        best_split = np.argmin(np.sum((stump_predictions - sorted_residuals.reshape(-1, 1)) ** 2, axis=0))\n        t_star = split_candidates[best_split]\n        stump_prediction = np.where(x <= t_star, left_residuals[best_split], right_residuals[best_split])\n        predictions += learning_rate * stump_prediction\n    return np.round(predictions, 4).tolist()"}
{"task_id": 394, "completion_id": 0, "solution": "import numpy as np\ndef rmsprop_update(w: np.ndarray, grad: np.ndarray, Eg: np.ndarray | None=None, learning_rate: float=0.01, rho: float=0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    Eg = rho * Eg + (1 - rho) * np.square(grad)\n    w = w - learning_rate * grad / np.sqrt(Eg + 1e-08)\n    return (np.round(w, 4).tolist(), np.round(Eg, 4).tolist())\nw = np.array([0.1, 0.2, 0.3])\ngrad = np.array([0.4, 0.5, 0.6])\nEg = np.array([0.7, 0.8, 0.9])"}
{"task_id": 398, "completion_id": 0, "solution": "import numpy as np\ndef elu(x, alpha: float=0.1, derivative: bool=False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if derivative:\n        results = np.where(x >= 0, 1, elu(x, alpha=alpha) + alpha)\n    else:\n        results = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    return [round(val, 4) for val in results]"}
{"task_id": 411, "completion_id": 0, "solution": "import numpy as np\ndef env_stats(actions: list, observations: list) -> dict:\n\n    def get_dims_and_ids(data):\n        flattened_data = []\n        for item in data:\n            if isinstance(item, (list, tuple, np.ndarray)):\n                flattened_data.extend(list(item))\n            else:\n                flattened_data.append(item)\n        dims = [len(item) if isinstance(item, (list, tuple, np.ndarray)) else 1 for item in data]\n        ids = [sorted(set(item) if isinstance(item, (list, tuple, np.ndarray)) else {item}) for item in data]\n        return (dims, ids)\n    (action_dims, action_ids) = get_dims_and_ids(actions)\n    (obs_dims, obs_ids) = get_dims_and_ids(observations)\n    multidim_actions = any((dim > 1 for dim in action_dims))\n    multidim_observations = any((dim > 1 for dim in obs_dims))\n    continuous_actions = any((any((isinstance(val, float) and (not val.is_integer()) for val in ids)) for ids in action_ids))\n    continuous_observations = any((any((isinstance(val, float) and (not val.is_integer()) for val in ids)) for ids in obs_ids))\n    return {'tuple_actions': any((dim > 1 for dim in action_dims)), 'tuple_observations': any((dim > 1 for dim in obs_dims)), 'multidim_actions': multidim_actions, 'multidim_observations': multidim_observations, 'continuous_actions': continuous_actions, 'continuous_observations': continuous_observations, 'n_actions_per_dim': [len(ids) for ids in action_ids], 'action_dim': len(action_dims), 'n_obs_per_dim': [len(ids) for ids in obs_ids], 'obs_dim': len(obs_dims), 'action_ids': action_ids, 'obs_ids': obs_ids}"}
{"task_id": 413, "completion_id": 0, "solution": "import numpy as np\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int=10, learning_rate: float=0.1, max_depth: int=3) -> list[float]:\n\n    def stump_regression(X, y, w) -> tuple:\n        (best_feature, best_threshold, min_error, left_pred, right_pred) = (None, None, np.inf, None, None)\n        for feature in range(X.shape[1]):\n            for threshold in np.unique(X[:, feature]):\n                (left_indices, right_indices) = (X[:, feature] <= threshold, X[:, feature] > threshold)\n                left_error = np.sum(w[left_indices] * (y[left_indices] - np.mean(y[left_indices])))\n                right_error = np.sum(w[right_indices] * (y[right_indices] - np.mean(y[right_indices])))\n                total_error = left_error + right_error\n                if total_error < min_error:\n                    min_error = total_error\n                    (best_feature, best_threshold, left_pred, right_pred) = (feature, threshold, np.mean(y[left_indices]), np.mean(y[right_indices]))\n        return (best_feature, best_threshold, min_error, left_pred, right_pred)\n\n    def predict(X, y_pred):\n        predictions = np.full(X.shape[0], np.mean(y_pred))\n        (left_indices, right_indices) = (X[:, best_feature] <= best_threshold, X[:, best_feature] > best_threshold)\n        predictions[left_indices] = left_pred\n        predictions[right_indices] = right_pred\n        return predictions\n\n    def create_tree(X, y, w, depth=0):\n        nonlocal best_feature, best_threshold, left_pred, right_pred\n        if depth == max_depth or min_error < 0.0001:\n            return\n        (best_feature, best_threshold, min_error, left_pred, right_pred) = stump_regression(X, y, w)\n        (left_indices, right_indices) = (X[:, best_feature] <= best_threshold, X[:, best_feature] > best_threshold)\n        create_tree(X[left_indices], y[left_indices], w[left_indices], depth + 1)\n        create_tree(X[right_indices], y[right_indices], w[right_indices], depth + 1)\n\n    def update_prediction(X, y_pred, w):\n        y_pred += learning_rate * predict(X, y_pred)\n        residuals = y - y_pred\n        w = np.exp(-y * residuals)\n        return (y_pred, w)\n    y_pred = np.full(y_train.shape[0], np.mean(y_train))\n    w = np.ones_like(y_pred)\n    for _ in range(n_estimators):\n        create_tree(X_train, y_train, w)\n        (y_pred, w) = update_prediction(X_train, y_pred, w)\n    return [round(x, 4) for x in predict(X_test, y_pred)]"}
{"task_id": 416, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    This function implements the probability density function (PDF) \n    of a multivariate Gaussian (Normal) distribution without using any third-party libraries.\n\n    Parameters:\n    X (NumPy array): n_samples x n_features data points to evaluate.\n    mean (NumPy array): mean vector of the distribution with length n_features.\n    cov (NumPy array): n_features x n_features positive-definite matrix.\n\n    Returns:\n    A list with every element rounded to the nearest 4th decimal.\n    \"\"\"\n    if len(X.shape) == 1:\n        X = np.array([X])\n    (n_samples, n_features) = X.shape\n    mean = np.array(mean)\n    cov = np.array(cov)\n    cov += np.eye(n_features) * 1e-06\n    cov_det = np.linalg.det(cov)\n    cov_inv = np.linalg.inv(cov)\n    result = []\n    for x in X:\n        x_mu = x - mean\n        exponent = -0.5 * np.dot(np.dot(x_mu, cov_inv), x_mu.T)\n        denominator = math.pow(2 * math.pi, n_features / 2) * math.sqrt(cov_det)\n        pdf_value = np.exp(exponent) / denominator\n        result.append(round(pdf_value, 4))\n    return result"}
{"task_id": 419, "completion_id": 0, "solution": "import numpy as np\ndef bayesian_linear_regression_pred(X: np.ndarray, y: np.ndarray, X_new: np.ndarray, mu: float | np.ndarray=0.0, sigma: float=1.0, V: float | np.ndarray | None=None, fit_intercept: bool=True) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    if fit_intercept:\n        X = np.c_[np.ones(X.shape[0]), X]\n        X_new = np.c_[np.ones(X_new.shape[0]), X_new]\n    mu = np.array(mu) if isinstance(mu, list) else np.full(X.shape[1], mu)\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, float):\n        V = np.eye(X.shape[1]) * V\n    elif isinstance(V, list):\n        V = np.diag(V)\n    else:\n        V = np.array(V)\n    V_inv = np.linalg.inv(V)\n    Sigma_post = np.linalg.inv(V_inv + X.T @ X)\n    Mu_post = Sigma_post @ (V_inv @ mu + X.T @ y)\n    y_new = X_new @ Mu_post\n    return [round(y, 4) for y in y_new]"}
{"task_id": 423, "completion_id": 0, "solution": "import numpy as np\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Computes the Root Mean Squared Logarithmic Error (RMSLE).\"\"\"\n    if len(actual) != len(predicted) or any((a < 0 or p < 0 for (a, p) in zip(actual, predicted))):\n        return -1\n    rmsle = np.sqrt(np.mean(np.square(np.log1p(predicted) - np.log1p(actual))))\n    return round(rmsle, 4)\nactual = [1, 2, 3, 4, 5]\npredicted = [1.1, 1.9, 3.2, 4.1, 5.1]\nrmsle = root_mean_squared_log_error(actual, predicted)"}
{"task_id": 428, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef hann(window_len: int, symmetric: bool=False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    window = np.array([0.5 - 0.5 * np.cos(2 * np.pi * n / (window_len - 1)) for n in range(window_len)])\n    if not symmetric:\n        window = window[:-1]\n    return np.round(window, 4).tolist()"}
{"task_id": 433, "completion_id": 0, "solution": "import numpy as np\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        fan_in = float(shape[1] * shape[2] * shape[3])\n        fan_out = float(shape[0] * shape[2] * shape[3])\n    else:\n        fan_in = float(shape[0])\n        fan_out = float(shape[1])\n    return (fan_in, fan_out)"}
{"task_id": 435, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(X, y, n_estimators=10, learning_rate=0.1):\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    y_pred = np.full(y.shape, y.mean())\n    if n_estimators <= 0 or learning_rate == 0:\n        return y_pred.round(4).tolist()\n    for t in range(n_estimators):\n        residuals = y - y_pred\n        (coef, intercept) = np.linalg.lstsq(np.c_[np.ones(X.shape[0]), X], residuals, rcond=None)[0]\n        h = np.dot(X, coef) + intercept\n        y_pred += learning_rate * h\n    return y_pred.round(4).tolist()"}
{"task_id": 437, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x, order: int=0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    s = 1 / (1 + np.exp(-x))\n    if order == 0:\n        result = s\n    elif order == 1:\n        result = s * (1 - s)\n    elif order == 2:\n        result = s * (1 - s) * (1 - 2 * s)\n    else:\n        return -1\n    result = np.round(result, 4)\n    if result.size == 1:\n        return result.item()\n    else:\n        return result.tolist()"}
{"task_id": 438, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    if isinstance(y, list):\n        y = np.array(y)\n    if num_classes is None:\n        num_classes = max(y) + 1\n    if num_classes < max(y) + 1:\n        return -1\n    one_hot_matrix = np.zeros((y.size, num_classes))\n    one_hot_matrix[np.arange(y.size), y] = 1\n    return one_hot_matrix.tolist()"}
{"task_id": 439, "completion_id": 0, "solution": "import itertools\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    frequent_itemsets = []\n    unique_items = set()\n    for transaction in transactions:\n        for item in transaction:\n            unique_items.add(item)\n    unique_items = list(unique_items)\n    one_itemsets = {item: sum((1 for transaction in transactions if item in transaction)) for item in unique_items}\n    one_itemsets = {item: sup for (item, sup) in one_itemsets.items() if sup / len(transactions) >= min_sup}\n    frequent_itemsets.extend([(item,) for item in one_itemsets.keys()])\n    k = 2\n    while True:\n        candidates = list(itertools.combinations(one_itemsets.keys(), k))\n        if not candidates:\n            break\n        candidate_counts = {candidate: sum((1 for transaction in transactions if set(candidate).issubset(transaction))) for candidate in candidates}\n        for candidate in candidates:\n            for subset in itertools.combinations(candidate, k - 1):\n                if subset not in one_itemsets:\n                    candidate_counts[candidate] = 0\n                    break\n        frequent_itemsets.extend([candidate for (candidate, count) in candidate_counts.items() if count / len(transactions) >= min_sup])\n        one_itemsets = {item: count for (item, count) in candidate_counts.items() if count / len(transactions) >= min_sup}\n        k += 1\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets"}
{"task_id": 440, "completion_id": 0, "solution": "import numpy as np\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    predictions = np.array(predictions)\n    averaged_predictions = np.mean(predictions, axis=0)\n    averaged_predictions = np.round(averaged_predictions, 4)\n    predicted_classes = np.argmax(averaged_predictions, axis=1)\n    return (averaged_predictions.tolist(), predicted_classes.tolist())"}
{"task_id": 444, "completion_id": 0, "solution": "import numpy as np\ndef rbf_kernel(X: list[list[int | float]], Y: list[list[int | float]] | None=None, sigma: float | list[float] | None=None) -> list[list[float]]:\n    if sigma is None:\n        sigma = np.sqrt(len(X[0]) / 2)\n    if isinstance(sigma, (int, float)):\n        sigma = [sigma] * len(X[0])\n    if not isinstance(sigma, list) or len(sigma) != len(X[0]) or any((s <= 0 for s in sigma)):\n        return -1\n    X = np.array(X)\n    Y = np.array(Y) if Y is not None else X\n    sigma = np.array(sigma)\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    kernel_matrix = np.zeros((X.shape[0], Y.shape[0]))\n    for (i, x) in enumerate(X):\n        for (j, y) in enumerate(Y):\n            kernel_matrix[i, j] = np.exp(-0.5 * np.sum(((x - y) / sigma) ** 2))\n    kernel_matrix = np.round(kernel_matrix, 4)\n    return kernel_matrix.tolist()"}
{"task_id": 446, "completion_id": 0, "solution": "import numpy as np\ndef entropy(labels):\n    (_, counts) = np.unique(labels, return_counts=True)\n    p = counts / np.sum(counts)\n    return -np.sum(p * np.log2(p))\ndef decision_stump(X, y):\n    X = np.array(X)\n    y = np.array(y)\n    H_parent = entropy(y)\n    majority_label = np.argmax(np.bincount(y))\n    best_gain = -np.inf\n    best_feature_index = -1\n    best_threshold = None\n    labels = np.unique(y)\n    for j in range(X.shape[1]):\n        values = np.sort(np.unique(X[:, j]))\n        thresholds = (values[:-1] + values[1:]) / 2\n        for t in thresholds:\n            y_left = y[X[:, j] <= t]\n            y_right = y[X[:, j] > t]\n            H_left = entropy(y_left)\n            H_right = entropy(y_right)\n            gain = H_parent - len(y_left) / len(y) * H_left - len(y_right) / len(y) * H_right\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = round(t, 4)\n    if best_gain <= 0:\n        return (-1, None, majority_label, majority_label)\n    y_left = y[X[:, best_feature_index] <= best_threshold]\n    y_right = y[X[:, best_feature_index] > best_threshold]\n    left_majority_label = np.argmax(np.bincount(y_left))\n    right_majority_label = np.argmax(np.bincount(y_right))\n    return (best_feature_index, best_threshold, left_majority_label, right_majority_label)"}
{"task_id": 452, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Union\ndef divide_on_feature(X: Union[np.ndarray, List[list]], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    X = np.array(X)\n    mask = X[:, feature_i] >= threshold if isinstance(threshold, (int, float)) else X[:, feature_i] == threshold\n    return [X[mask].tolist(), X[~mask].tolist()]"}
{"task_id": 453, "completion_id": 0, "solution": "import numpy as np\ndef update_q_values(Q: 'np.ndarray', Q_next: 'np.ndarray', actions: list[int], rewards: list[float], dones: list[bool], gamma: float) -> list[list[float]]:\n    try:\n        assert 0 <= gamma <= 1\n        assert Q.shape == Q_next.shape\n        assert Q.shape[0] == len(actions) == len(rewards) == len(dones)\n        y = Q.copy()\n        for i in range(len(Q)):\n            target = rewards[i] if dones[i] else rewards[i] + gamma * max(Q_next[i])\n            y[i, actions[i]] = target\n        return np.round(y, 4).tolist()\n    except Exception as e:\n        return -1"}
{"task_id": 458, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None=None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    labels = np.array(labels)\n    if np.any(labels < 0):\n        return -1\n    if num_classes is None:\n        num_classes = np.max(labels) + 1\n    elif np.max(labels) >= num_classes:\n        return -1\n    one_hot_labels = np.zeros((len(labels), num_classes), dtype=int)\n    one_hot_labels[np.arange(len(labels)), labels] = 1\n    return one_hot_labels.tolist()"}
{"task_id": 461, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_regressor(x: list[float], y: list[float], n_estimators: int=200, learning_rate: float=0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n = len(y)\n    pred = np.full(n, np.mean(y))\n    if n_estimators <= 0:\n        return np.round(pred, 4).tolist()\n    for _ in range(n_estimators):\n        res = y - pred\n        unique_x = np.sort(np.unique(x))\n        if len(unique_x) == 1:\n            stump_pred = np.mean(res)\n        else:\n            min_sse = np.inf\n            for t in unique_x[:-1]:\n                left_mask = x <= t\n                right_mask = ~left_mask\n                if np.any(left_mask) and np.any(right_mask):\n                    v_l = np.mean(res[left_mask])\n                    v_r = np.mean(res[right_mask])\n                    stump_pred = np.where(x <= t, v_l, v_r)\n                    sse = np.sum(np.square(res - stump_pred))\n                    if sse < min_sse:\n                        min_sse = sse\n                        best_t = t\n                        best_v_l = v_l\n                        best_v_r = v_r\n            stump_pred = np.where(x <= best_t, best_v_l, best_v_r)\n        pred += learning_rate * stump_pred\n    return np.round(pred, 4).tolist()"}
{"task_id": 471, "completion_id": 0, "solution": "import numpy as np\ndef expected_sarsa_update(q_table: list[list[float]], state: int, action: int, reward: float, next_state: int | None, epsilon: float, lr: float, gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    num_actions = len(q_table[0])\n    if next_state is None:\n        target = reward\n    else:\n        max_q_value = max(q_table[next_state])\n        expectation = sum((q_table[next_state][a] * (1 - epsilon + epsilon / num_actions) if q_table[next_state][a] == max_q_value else q_table[next_state][a] * (epsilon / num_actions) for a in range(num_actions)))\n        target = reward + gamma * expectation\n    q_table[state][action] += lr * (target - q_table[state][action])\n    q_table = [[round(val, 4) for val in row] for row in q_table]\n    return q_table"}
{"task_id": 474, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, interval: float, seed: int | None=None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n    for i in range(m):\n        lower = i // 2 * 10 + 1\n        upper = i // 2 * 10 + 9\n        for _ in range(n_train):\n            x = round(random.uniform(lower, upper), 4)\n            y = round(random.uniform(i % 2 * interval + 0.1, i % 2 * interval + 0.9) * 10, 4)\n            X_train.append([x, y])\n            Y_train.append((i - 0.5) * 2)\n        for _ in range(n_val):\n            x = round(random.uniform(lower, upper), 4)\n            y = round(random.uniform(i % 2 * interval + 0.1, i % 2 * interval + 0.9) * 10, 4)\n            X_val.append([x, y])\n            Y_val.append((i - 0.5) * 2)\n    return (np.array(X_train), np.array(X_val), np.array(Y_train), np.array(Y_val))"}
{"task_id": 475, "completion_id": 0, "solution": "import numpy as np\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-08):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * np.square(grad)\n    m_hat = m_new / (1 - b1 ** t)\n    v_hat = v_new / (1 - b2 ** t)\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n    return (w_new, m_new, v_new)"}
{"task_id": 479, "completion_id": 0, "solution": "import numpy as np\nfrom typing import List, Optional\ndef epsilon_greedy_bandit(rewards: List[List[float]], epsilon: float=0.05, ev_prior: float=0.5, seed: Optional[int]=None) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(seed)\n    num_arms = len(rewards[0])\n    arm_values = [ev_prior for _ in range(num_arms)]\n    pull_counts = [0 for _ in range(num_arms)]\n    for (t, reward_list) in enumerate(rewards):\n        if np.random.random() < epsilon:\n            chosen_arm = np.random.choice(num_arms)\n        else:\n            max_value = max(arm_values)\n            chosen_arms = [i for (i, value) in enumerate(arm_values) if value == max_value]\n            chosen_arm = min(chosen_arms)\n        chosen_reward = reward_list[chosen_arm]\n        pull_counts[chosen_arm] += 1\n        arm_values[chosen_arm] += (chosen_reward - arm_values[chosen_arm]) / pull_counts[chosen_arm]\n    return [round(value, 4) for value in arm_values]\nrewards = [[0.2, 0.1, 0.5], [0.3, 0.4, 0.2], [0.1, 0.3, 0.6]]"}
{"task_id": 481, "completion_id": 0, "solution": "import numpy as np\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    labels = np.full(data.shape[0], -1)\n    cluster_id = 0\n    for point_id in range(data.shape[0]):\n        if labels[point_id] != -1:\n            continue\n        neighbors = get_neighbors(data, point_id, eps)\n        if len(neighbors) < min_samples:\n            labels[point_id] = -1\n            continue\n        labels[point_id] = cluster_id\n        expand_cluster(data, labels, point_id, neighbors, cluster_id, eps, min_samples)\n        cluster_id += 1\n    return labels.tolist()\ndef get_neighbors(data: np.ndarray, point_id: int, eps: float) -> np.ndarray:\n    \"\"\"Return indices of all points within `eps` from `point_id`.\"\"\"\n    point = data[point_id]\n    distances = np.linalg.norm(data - point, axis=1)\n    return np.where(distances <= eps)[0]"}
{"task_id": 482, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.asarray(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    elif num_classes < np.max(y):\n        raise ValueError('Provided `num_classes` is less than the maximum value in `y` (got {}).'.format(num_classes))\n    one_hot = np.zeros((y.size, num_classes), dtype=np.int)\n    one_hot[np.arange(y.size), y] = 1\n    return one_hot"}
{"task_id": 485, "completion_id": 0, "solution": "import numpy as np\nclass Node:\n\n    def __init__(self, split_point=None, left=None, right=None, value=None):\n        self.split_point = split_point\n        self.left = left\n        self.right = right\n        self.value = value\ndef build_tree(X, y, depth=0, max_depth=3):\n    if depth == max_depth or len(X) < 2:\n        return Node(value=np.mean(y))\n    split_point = np.mean(X)\n    left_idx = np.where(X <= split_point)\n    right_idx = np.where(X > split_point)\n    left = build_tree(X[left_idx], y[left_idx], depth + 1, max_depth)\n    right = build_tree(X[right_idx], y[right_idx], depth + 1, max_depth)\n    return Node(split_point, left, right)\ndef predict(tree, X):\n    if tree.value is not None:\n        return tree.value\n    elif X <= tree.split_point:\n        return predict(tree.left, X)\n    else:\n        return predict(tree.right, X)\ndef regression_tree_predict(X_train: list[float | int], y_train: list[float | int], X_test: list[float | int], max_depth: int=3) -> list[float]:\n    if not X_train:\n        return []\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    tree = build_tree(X_train, y_train, max_depth=max_depth)\n    return [predict(tree, x) for x in X_test]"}
{"task_id": 490, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    if x.size == 0:\n        return []\n    mat = np.diag(x).tolist()\n    return mat"}
{"task_id": 491, "completion_id": 0, "solution": "from collections import Counter, defaultdict\nimport itertools\nclass FPTree(object):\n\n    def __init__(self):\n        self.root = FPNode(None, None)\n        self.header_table = {}\n\n    def add(self, transaction):\n        point = self.root\n        for item in transaction:\n            next_point = point.search(item)\n            if next_point is not None:\n                next_point.counter += 1\n            else:\n                next_point = point.add(item)\n                self.update_header_table(next_point)\n            point = next_point\n\n    def update_header_table(self, point):\n        if point.item in self.header_table:\n            self.header_table[point.item][1].neighbor = point\n            self.header_table[point.item] = (self.header_table[point.item][0], self.header_table[point.item][1], point)\n        else:\n            self.header_table[point.item] = (point.counter, point.counter, point)\n\n    def items(self):\n        return self.header_table.keys()\nclass FPNode(object):\n\n    def __init__(self, item, counter):\n        self.item = item\n        self.counter = counter\n        self.children = {}\n        self.neighbor = None\n        self.parent = None\n\n    def add(self, child):\n        if not isinstance(child, FPNode):\n            child = FPNode(child, 1)\n        if child.item in self.children:\n            self.children[child.item].counter += child.counter\n        else:\n            child.parent = self\n            self.children[child.item] = child\n        return child\n\n    def search(self, item):\n        return self.children.get(item, None)\ndef fp_growth(transactions, min_sup):\n    items = set((item for transaction in transactions for item in transaction))\n    transaction_count = len(transactions)\n    transaction_counts = Counter((item for transaction in transactions for item in transaction))\n    items = sorted((item for item in items if transaction_counts[item] / transaction_count >= min_sup))\n    fp_tree = FPTree()\n    for transaction in transactions:\n        transaction = sorted((item for item in transaction if item in items), key=lambda x: transaction_counts[x], reverse=True)\n        fp_tree.add(transaction)\n\n    def mine_tree(tree, header_table, min_sup, prefix, frequent_item_sets):\n        items = [v[0] for v in sorted(header_table.values(), key=lambda x: x[0])]\n        for item in items:\n            new_prefix = prefix.copy()\n            new_prefix.add(item)\n            frequent_item_sets.append(tuple(sorted(new_prefix)))\n            conditional_pattern_base = get_prefix_paths(header_table, item)\n            (_, conditional_tree) = construct_tree(conditional_pattern_base, min_sup)\n            if conditional_tree is not None:\n                mine_tree(conditional_tree, conditional_tree.header_table, min_sup, new_prefix, frequent_item_sets)\n\n    def construct_tree(transactions, min_sup):\n        header_table = defaultdict(int)\n        for transaction in transactions:\n            for item in transaction:\n                header_table[item] += 1\n        header_table = {k: v for (k, v) in header_table.items() if v >= min_sup}\n        if len(header_table) == 0:\n            return (None, None)\n        for k in header_table.keys():\n            header_table[k] = [header_table[k], None, None]\n        fp_tree = FPTree()\n        for transaction in transactions:\n            transaction = sorted((item for item in transaction if item in header_table), key=lambda x: header_table[x][0], reverse=True)\n            fp_tree.add(transaction)\n        return (header_table, fp_tree)\n\n    def get_prefix_paths(tree, item):\n        conditional_patterns = []\n        node = tree[item][1]\n        path = []\n    while node is not None:\n        prefix_path = []\n        ascend_tree(tree, node, prefix_path)\n        if len(prefix_path) > 1:\n            conditional_patterns.append(prefix_path[1:])\n        node = node.neighbor\n    return conditional_patterns\n\n    def ascend_tree(tree, node, prefix_path):\n        if node.parent is not None:\n            prefix_path.append(node.item)\n            ascend_tree(tree, node.parent, prefix_path)\n    frequent_item_sets = []\n    mine_tree(fp_tree, fp_tree.header_table, min_sup, set(), frequent_item_sets)\n    return frequent_item_sets"}
{"task_id": 492, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    if degree < 0:\n        return -1\n    X = np.array(X)\n    (n_samples, n_features) = X.shape\n    feature_matrix = np.ones((n_samples, 1))\n    for deg in range(1, degree + 1):\n        for items in combinations_with_replacement(range(n_features), deg):\n            new_column = np.ones(n_samples)\n            for item in items:\n                new_column *= X[:, item]\n            feature_matrix = np.column_stack((feature_matrix, new_column))\n    return feature_matrix.tolist()"}
{"task_id": 493, "completion_id": 0, "solution": "import numpy as np\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1\n    else:\n        y = np.array(y)\n        mean = np.mean(y)\n        return round(np.mean((y - mean) ** 2), 4)"}
{"task_id": 496, "completion_id": 0, "solution": "import numpy as np\ndef apply_affine(x, slope: float=1.0, intercept: float=0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    x = np.array(x)\n    y = np.round(slope * x + intercept, 4)\n    grad = np.round(np.full(x.shape, slope), 4)\n    grad2 = np.round(np.zeros(x.shape), 4)\n    return (y.tolist(), grad.tolist(), grad2.tolist())"}
{"task_id": 499, "completion_id": 0, "solution": "import numpy as np\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    if not 1 <= k <= data.shape[1]:\n        return -1\n    data_standard = (data - np.mean(data, axis=0)) / np.std(data, axis=0, ddof=1)\n    cov_matrix = np.cov(data_standard, rowvar=False, ddof=1)\n    (eig_values, eig_vectors) = np.linalg.eig(cov_matrix)\n    idx = eig_values.argsort()[::-1]\n    eig_values = eig_values[idx]\n    eig_vectors = eig_vectors[:, idx]\n    eig_vectors = eig_vectors[:, :k]\n    max_abs_cols = np.argmax(np.abs(eig_vectors), axis=0)\n    signs = np.sign(eig_vectors[max_abs_cols, range(eig_vectors.shape[1])])\n    eig_vectors *= signs\n    projected_data = np.dot(data_standard, eig_vectors)\n    return np.round(projected_data, 4).tolist()"}
{"task_id": 500, "completion_id": 0, "solution": "import numpy as np\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int=20, learning_rate: float=0.1) -> list[int]:\n    (X_train, y_train, X_test) = (np.array(X_train), np.array(y_train), np.array(X_test))\n    c = np.mean(y_train)\n    F = np.full(X_train.shape[0], fill_value=c)\n    stumps = []\n    for _ in range(n_estimators):\n        negative_gradient = y_train - F\n        stump = Stump().fit(X_train, negative_gradient)\n        stumps.append(stump)\n        F += learning_rate * stump.predict(X_train)\n    predictions = c + sum((learning_rate * stump.predict(X_test) for stump in stumps))\n    return (predictions > 0.5).astype(int).tolist()"}
{"task_id": 505, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\ndef contrastive_divergence(X: np.ndarray, W: np.ndarray, hbias: np.ndarray, vbias: np.ndarray, learning_rate: float, k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n    pos_hidden_probs = sigmoid(np.dot(X, W) + hbias)\n    pos_hidden_states = pos_hidden_probs > np.random.rand(*pos_hidden_probs.shape)\n    h_start = pos_hidden_states\n    for step in range(k):\n        v_prob = sigmoid(np.dot(pos_hidden_states, W.T) + vbias)\n        h_prob = sigmoid(np.dot(v_prob, W) + hbias)\n        h_states = h_prob > np.random.rand(*h_prob.shape)\n    pos_gradient = np.dot(X.T, pos_hidden_probs)\n    neg_gradient = np.dot(v_prob.T, h_prob)\n    W_new = W + learning_rate * (pos_gradient - neg_gradient) / X.shape[0]\n    return np.round(W_new, 4).tolist()"}
{"task_id": 509, "completion_id": 0, "solution": "import numpy as np\ndef chebyshev(x: list[float] | 'np.ndarray', y: list[float] | 'np.ndarray') -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    (x, y) = (np.array(x), np.array(y))\n    if len(x) != len(y):\n        return -1\n    return round(np.max(np.abs(x - y)), 4)"}
{"task_id": 510, "completion_id": 0, "solution": "import numpy as np\ndef vae_loss(y: np.ndarray, y_pred: np.ndarray, t_mean: np.ndarray, t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    y_pred_clipped = np.clip(y_pred, np.finfo(float).eps, 1 - np.finfo(float).eps)\n    reconstruction_loss = -np.sum(y * np.log(y_pred_clipped) + (1 - y) * np.log(1 - y_pred_clipped))\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - t_mean ** 2 - np.exp(t_log_var))\n    batch_loss = reconstruction_loss + kl_divergence\n    batch_avg_loss = batch_loss / y.shape[0]\n    return round(batch_avg_loss, 6)"}
{"task_id": 513, "completion_id": 0, "solution": "import numpy as np\ndef fm_predict(X: list[list[int | float]], w0: float, w: list[float], V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    linear_term = np.dot(X, w)\n    interaction_term = 0.5 * np.sum(np.power(np.dot(X, V), 2) - np.dot(np.power(X, 2), np.power(V, 2)), axis=1)\n    predictions = w0 + linear_term + interaction_term\n    predictions = np.round(predictions, 4)\n    predictions = predictions.tolist()\n    return predictions"}
{"task_id": 517, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    z = np.array(z)\n    sigmoid = 1 / (1 + np.exp(-z))\n    if z.size > 1:\n        return np.round(sigmoid, 4).tolist()\n    else:\n        return np.round(sigmoid.item(), 4)"}
{"task_id": 518, "completion_id": 0, "solution": "import numpy as np\nfrom typing import Callable\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n    return wrapper\nactual = np.array([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\npredicted = np.array([[0, 1, 0], [0, 1, 0], [0, 0, 1]])"}
{"task_id": 520, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  \n    The derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return np.round(z * (1 - z), 4)\n    elif isinstance(z, list):\n        return [sigmoid_grad(subz) for subz in z]\n    elif isinstance(z, np.ndarray):\n        return np.round(z * (1 - z), 4)\n    else:\n        raise TypeError(f'Unsupported type: {type(z).__name__}')"}
{"task_id": 528, "completion_id": 0, "solution": "import numpy as np\ndef decision_boundary_grid(X: list[list[int | float]], W: list[int | float], b: float, grid_n: int=100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    (x1_min, x1_max) = (X[:, 0].min(), X[:, 0].max())\n    (x2_min, x2_max) = (X[:, 1].min(), X[:, 1].max())\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    (x1_mesh, x2_mesh) = np.meshgrid(x1_plot, x2_plot)\n    predictions = []\n    for (x1, x2) in zip(x1_mesh, x2_mesh):\n        labels = []\n        for i in range(grid_n):\n            z = W[0] * x1[i] + W[1] * x2[i] + b\n            if z >= 0:\n                labels.append(1)\n            else:\n                labels.append(-1)\n        predictions.append(labels)\n    return predictions\nX = [[0, 1], [2, 3], [4, 5]]\nW = [1, 2]\nb = -1\ngrid_n = 4"}
{"task_id": 537, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    n_features = X_train.shape[1]\n    params = np.zeros((2, n_features, 2))\n    for c in range(2):\n        X_train_c = X_train[y_train == c]\n        params[c, :, 0] = np.mean(X_train_c, axis=0)\n        params[c, :, 1] = np.std(X_train_c, axis=0)\n    params[:, :, 1] += 1e-09\n    priors = np.zeros(2)\n    for c in range(2):\n        priors[c] = np.mean(y_train == c)\n    posteriors = np.zeros((X_test.shape[0], 2))\n    for i in range(X_test.shape[0]):\n        for c in range(2):\n            likelihoods = 1 / np.sqrt(2 * np.pi * params[c, :, 1] ** 2) * np.exp(-(X_test[i] - params[c, :, 0]) ** 2 / (2 * params[c, :, 1] ** 2))\n            posteriors[i, c] = np.prod(likelihoods) * priors[c]\n    y_pred = np.argmax(posteriors, axis=1)\n    return y_pred.tolist()"}
{"task_id": 539, "completion_id": 0, "solution": "import numpy as np\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost.\n    \n    Parameters:\n    AL (numpy.ndarray): Output probabilities of the model.\n    Y (numpy.ndarray): True labels.\n    \n    Returns:\n    float: The binary cross-entropy cost.\n    \"\"\"\n    epsilon = 1e-15\n    AL = np.clip(AL, epsilon, 1 - epsilon)\n    m = AL.shape[1]\n    cost = -(1 / m) * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    return round(float(cost), 4)\nAL = np.array([0.3, 0.7, 0.9, 0.1])\nY = np.array([0, 1, 1, 0])\ncost = compute_cost(AL, Y)"}
{"task_id": 552, "completion_id": 0, "solution": "import numpy as np\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    if t < 0 or t >= len(observations):\n        return []\n    pi = hmm['pi']\n    A = hmm['A']\n    B = hmm['B']\n\n    def forward(pi, A, B, obs):\n        N = len(pi)\n        T = len(obs)\n        alpha = np.zeros((N, T))\n        alpha[:, 0] = pi * B[:, obs[0]]\n        for t in range(1, T):\n            alpha[:, t] = np.dot(alpha[:, t - 1], A) * B[:, obs[t]]\n        return alpha\n\n    def backward(A, B, obs):\n        N = len(pi)\n        T = len(obs)\n        beta = np.zeros((N, T))\n        beta[:, -1] = 1\n        for t in range(T - 2, -1, -1):\n            beta[:, t] = np.sum(A * B[:, obs[t + 1]] * beta[:, t + 1], axis=1)\n        return beta\n    alpha = forward(pi, A, B, observations[:t + 1])\n    beta = backward(A, B, observations[t:])\n    gamma = np.multiply(alpha[:, t], beta[:, 0])\n    gamma = gamma / np.sum(gamma)\n    return np.round(gamma, 4).tolist()"}
{"task_id": 555, "completion_id": 0, "solution": "import numpy as np\nfrom collections import deque\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    labels = [0] * data.shape[0]\n    cluster_id = 0\n    for i in range(len(data)):\n        if not labels[i] == 0:\n            continue\n        neighbors = get_neighbors(data, i, eps)\n        if len(neighbors) < min_samples:\n            labels[i] = -1\n            continue\n        cluster_id += 1\n        labels[i] = cluster_id\n        q = deque(neighbors)\n        while len(q) > 0:\n            point_idx = q.popleft()\n            if labels[point_idx] == -1:\n                labels[point_idx] = cluster_id\n            if labels[point_idx] != 0:\n                continue\n            labels[point_idx] = cluster_id\n            new_neighbors = get_neighbors(data, point_idx, eps)\n            if len(new_neighbors) >= min_samples:\n                q.extend(new_neighbors)\n    return labels\ndef get_neighbors(data: np.ndarray, idx: int, eps: float) -> list[int]:\n    \"\"\"Get all points within eps distance from data[idx].\"\"\"\n    points = []\n    for i in range(len(data)):\n        if i == idx:\n            continue\n        if np.linalg.norm(data[idx] - data[i]) < eps:\n            points.append(i)\n    return points"}
{"task_id": 561, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.stats import multivariate_normal\ndef gmm_em(data: np.ndarray, k: int, max_iter: int=200, epsilon: float=0.0001) -> list[int]:\n    (n, d) = data.shape\n    if k == 1:\n        return [0] * n\n    mixture_weights = np.random.uniform(size=k)\n    mixture_weights /= mixture_weights.sum()\n    means = np.random.uniform(size=(k, d))\n    covariances = np.array([np.eye(d) for _ in range(k)])\n    responsibility = np.zeros((n, k))\n    for _ in range(max_iter):\n        for i in range(n):\n            for j in range(k):\n                responsibility[i, j] = mixture_weights[j] * multivariate_normal.pdf(data[i], mean=means[j], cov=covariances[j])\n        responsibility /= responsibility.sum(axis=1, keepdims=True)\n        prev_mixture_weights = mixture_weights.copy()\n        mixture_weights = responsibility.mean(axis=0)\n        reorder = np.argsort(means[:, 0])\n        mixture_weights = mixture_weights[reorder]\n        means = means[reorder]\n        covariances = covariances[reorder]\n        for j in range(k):\n            mean = (responsibility[:, j, np.newaxis] * data).sum(axis=0) / responsibility[:, j].sum()\n            covariance = ((data - means[j]).T * responsibility[:, j, np.newaxis] * (data - means[j])).sum(axis=1) / responsibility[:, j].sum()\n            np.fill_diagonal(covariance, np.diagonal(covariance) + epsilon)\n            means[j] = mean\n            covariances[j] = covariance\n        if np.linalg.norm(prev_mixture_weights - mixture_weights) < epsilon:\n            break\n    labels = np.argmax(responsibility, axis=1)\n    for i in range(k):\n        labels[labels == i] = np.where(mixture_weights == mixture_weights[i])[0][0]\n    return labels.tolist()"}
{"task_id": 562, "completion_id": 0, "solution": "import numpy as np\nfrom scipy.spatial.distance import pdist, squareform\nfrom scipy.linalg import eigh\nfrom sklearn.cluster import KMeans\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float=2.0, method: str='unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n    sq_dists = squareform(pdist(data, 'sqeuclidean'))\n    affinity_matrix = np.exp(-gamma * sq_dists)\n    deg_matrix = np.diag(np.sum(affinity_matrix, axis=1))\n    if method == 'unnormalized':\n        laplacian = deg_matrix - affinity_matrix\n    elif method == 'normalized':\n        sqrt_inv_deg_matrix = np.diag(1.0 / np.sqrt(np.diag(deg_matrix)))\n        laplacian = np.eye(affinity_matrix.shape[0]) - sqrt_inv_deg_matrix @ affinity_matrix @ sqrt_inv_deg_matrix\n    (_, eigenvectors) = eigh(laplacian)\n    sorted_indices = np.argsort(np.abs(eigenvectors[0]))\n    eigenvectors = eigenvectors[:, sorted_indices]\n    kmeans = KMeans(n_clusters=n_cluster, n_init=1, random_state=42)\n    labels = kmeans.fit_predict(eigenvectors[:, 1:n_cluster])\n    relabeled_labels = np.zeros_like(labels)\n    for i in range(n_cluster):\n        mask = labels == i\n        original_indices = np.where(mask)[0]\n        smallest_original_index = data.shape[0] - original_indices.sum()\n        relabeled_labels[mask] = smallest_original_index\n    return relabeled_labels.tolist()"}
{"task_id": 563, "completion_id": 0, "solution": "import numpy as np\ndef perceptron_dual_train(X_data: np.ndarray, y_data: np.ndarray, eta: float=1.0, max_iter: int=1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    (N, d) = X_data.shape\n    alpha = np.zeros(N)\n    b = 0\n    G = np.dot(X_data, X_data.T)\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.dot(alpha * y_data, G[i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    w = np.dot(alpha * y_data, X_data)\n    w = np.round(w, 4).tolist()\n    b = np.round(b, 4)\n    return (w, b)"}
{"task_id": 564, "completion_id": 0, "solution": "def predict_sample(root: 'Node', features: list | tuple, task_type: str):\n    if root.y is not None:\n        return root.y\n    if task_type == 'classification':\n        for child in root.child:\n            if child.x == features[root.label]:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n    if task_type == 'regression':\n        if features[root.label] <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)"}
{"task_id": 565, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef entropy(labels):\n    if len(labels) == 0:\n        return 0\n    counts = np.bincount(labels)\n    probs = counts[np.nonzero(counts)] / float(len(labels))\n    return -np.sum(probs * np.log2(probs))\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    original_entropy = entropy(y)\n    max_info_gain = -math.inf\n    best_feature_index = -1\n    for feature_index in range(X.shape[1]):\n        feature_values = X[:, feature_index]\n        feature_entropy = 0.0\n        for feature_value in set(feature_values):\n            instances_with_feature_value = y[feature_values == feature_value]\n            feature_value_entropy = entropy(instances_with_feature_value)\n            feature_entropy += float(len(instances_with_feature_value)) / float(len(y)) * feature_value_entropy\n        info_gain = original_entropy - feature_entropy\n        if info_gain > max_info_gain:\n            max_info_gain = info_gain\n            best_feature_index = feature_index\n    return (best_feature_index, round(max_info_gain, 6))"}
{"task_id": 566, "completion_id": 0, "solution": "import numpy as np\nimport math\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    np.random.seed(42)\n    (n_samples, n_features) = data.shape\n    phi = 2 * math.log(n_samples - 1) - 2 * (n_samples - 1) / n_samples\n    c = lambda n: 0 if n == 1 else 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n_samples\n    trees = []\n    for _ in range(n_trees):\n        indices = np.random.choice(n_samples, sample_size, replace=True)\n        tree = build_tree(data[indices], 0, n_features, c(sample_size))\n        trees.append(tree)\n    outlier_scores = np.empty(n_samples)\n    for i in range(n_samples):\n        average_path_length_sum = 0\n        for tree in trees:\n            average_path_length_sum += path_length(tree, data[i])\n        average_path_length = average_path_length_sum / n_trees\n        outlier_scores[i] = 2 ** (-average_path_length / phi)\n    if epsilon == 0:\n        return []\n    else:\n        outliers = np.argsort(outlier_scores)[::-1][:int(epsilon * n_samples)]\n        return sorted(outliers.tolist())\ndef build_tree(data: np.ndarray, height_limit: int, n_features: int, correction: float):\n    if len(data) <= 1 or height_limit == 0:\n        return {'correction': correction, 'size': len(data)}\n    else:\n        feature_index = np.random.choice(n_features)\n        threshold = np.random.uniform(np.min(data[:, feature_index]), np.max(data[:, feature_index]))\n        (left, right) = partition(data, feature_index, threshold)\n        return {'correction': correction, 'feature_index': feature_index, 'threshold': threshold, 'left': build_tree(left, height_limit - 1, n_features, c(len(left))), 'right': build_tree(right, height_limit - 1, n_features, c(len(right)))}\ndef partition(data: np.ndarray, feature_index: int, threshold: float):\n    left = data[data[:, feature_index] < threshold]\n    right = data[data[:, feature_index] >= threshold]\n    return (left, right)\ndef path_length(tree, observation: np.ndarray, path=0):\n    if 'left' not in tree:\n        return path + tree['correction']\n    elif observation[tree['feature_index']] < tree['threshold']:\n        return path_length(tree['left'], observation, path + 1)\n    else:\n        return path_length(tree['right'], observation, path + 1)"}
{"task_id": 568, "completion_id": 0, "solution": "import math\nfrom collections import defaultdict\nimport numpy as np\ndef maxent_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, epsilon: float=0.001, n_iter: int=100) -> list[int]:\n    \"\"\"Fill in here.\"\"\"\n    label_weights = defaultdict(float)\n    label_counts = defaultdict(int)\n    feature_weights = defaultdict(float)\n    feature_counts = defaultdict(int)\n    feature_values = defaultdict(set)\n    for (x, y) in zip(X_train, y_train):\n        label_counts[y] += 1\n        for (i, feature) in enumerate(x):\n            feature_values[i].add(feature)\n            feature_counts[i, feature, y] += 1\n    for y in label_counts:\n        label_weights[y] = 0.0\n    for (i, feature, y) in feature_counts:\n        feature_weights[i, feature, y] = 0.0\n    for iteration in range(n_iter):\n        label_weight_changes = defaultdict(float)\n        feature_weight_changes = defaultdict(lambda : defaultdict(float))\n        Zs = defaultdict(float)\n        for x in X_train:\n            Zs[tuple(x)] = 0.0\n            for y in label_counts:\n                Zs[tuple(x)] += math.exp(sum((feature_weights[i, feature, y] * ((x[i] == feature) - 0.5) for (i, feature) in enumerate(x))))\n            Zs[tuple(x)] = label_counts[y] / Zs[tuple(x)]\n        for (x, y) in zip(X_train, y_train):\n            for (i, feature) in enumerate(x):\n                feature_weight_changes[y][i, feature] += (x[i] == feature) - 0.5 - feature_weights[i, feature, y] / Zs[tuple(x)]\n            label_weight_changes[y] += 1 - sum((feature_weights[i, feature, y] * ((x[i] == feature) - 0.5) for (i, feature) in enumerate(x))) / Zs[tuple(x)]\n        max_change = 0.0\n        for y in label_counts:\n            label_weights[y] += label_weight_changes[y]\n            max_change = max(max_change, abs(label_weight_changes[y]))\n        for (i, feature, y) in feature_counts:\n            feature_weights[i, feature, y] += feature_weight_changes[y][i, feature]\n            max_change = max(max_change, abs(feature_weight_changes[y][i, feature]))\n        if max_change < epsilon:\n            break\n    predictions = []\n    for x in X_test:\n        log_probabilities = dict()\n        for y in label_counts:\n            log_probabilities[y] = label_weights[y] + sum((feature_weights[i, feature, y] * ((x[i] == feature) - 0.5) for (i, feature) in enumerate(x)))\n        predictions.append(max(log_probabilities, key=log_probabilities.get))\n    return predictions"}
{"task_id": 569, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\ndef statistic_key_word(data: List[Tuple[Any, Iterable[str]]], cut_off: int | None=None) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    total_docs = len(data)\n    word_counts = Counter()\n    for (_, words) in data:\n        word_counts.update(set(words))\n    word_ratios = {word: round(count / total_docs, 4) for (word, count) in word_counts.items()}\n    top_words = set()\n    if cut_off is not None and cut_off > 0:\n        top_words = set((word for (word, _) in word_ratios.most_common(cut_off)))\n    word_list = sorted(word_ratios.items(), key=lambda x: (-x[1], x[0]))\n    return (word_list, top_words)"}
{"task_id": 571, "completion_id": 0, "solution": "import numpy as np\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           -1).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    w = np.dot(X.T, alpha * y)\n    b = np.mean(y - np.dot(X, w))\n    w = np.round(w, 4).tolist()\n    b = np.round(b, 4)\n    return (w, b)"}
{"task_id": 572, "completion_id": 0, "solution": "import numpy as np\ndef local_outlier_factor(data, k, epsilon=1.5):\n    n_samples = data.shape[0]\n    pairwise_distances = np.zeros((n_samples, n_samples))\n    k_distances = np.zeros(n_samples)\n    neighbor_indices = np.zeros((n_samples, k), dtype=int)\n    for i in range(n_samples):\n        for j in range(i, n_samples):\n            pairwise_distances[i, j] = pairwise_distances[j, i] = np.linalg.norm(data[i] - data[j])\n    for i in range(n_samples):\n        k_dist_and_neighbors = sorted([(pairwise_distances[i, j], j) for j in range(n_samples) if i != j])\n        k_distances[i] = k_dist_and_neighbors[k - 1][0]\n        neighbor_indices[i] = [neighbor for (_, neighbor) in sorted(k_dist_and_neighbors[:k])]\n    reachability_distances = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            reachability_distances[i, j] = max(k_distances[j], pairwise_distances[i, j])\n    lrd = np.zeros(n_samples)\n    for i in range(n_samples):\n        lrd[i] = k / np.sum(reachability_distances[i, neighbor_indices[i]])\n    lof = np.zeros(n_samples)\n    for i in range(n_samples):\n        lof[i] = np.sum(lrd[neighbor_indices[i]] / lrd[i]) / k\n    lof = np.round(lof, 4)\n    outlier_indices = np.where(lof > epsilon)[0].tolist()\n    return (lof.tolist(), outlier_indices)"}
{"task_id": 574, "completion_id": 0, "solution": "import numpy as np\nimport random\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None=None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n    for c in range(m):\n        base = 10 * np.floor(c / 2)\n        X_train.append(np.random.uniform(base + 1, base + 9, (n_train, 2)))\n        y_train.append(np.full(n_train, c))\n        X_val.append(np.random.uniform(base + 1, base + 9, (n_val, 2)))\n        y_val.append(np.full(n_val, c))\n    X_train = np.concatenate(X_train).round(4)\n    y_train = np.concatenate(y_train)\n    X_val = np.concatenate(X_val).round(4)\n    y_val = np.concatenate(y_val)\n    return (X_train, X_val, y_train, y_val)"}
{"task_id": 579, "completion_id": 0, "solution": "import numpy as np\ndef kmeans(X: np.ndarray, k: int, max_iters: int=100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    centers = X[:k].tolist()\n    for _ in range(max_iters):\n        labels = [np.argmin([np.linalg.norm(x - c) for c in centers]) for x in X]\n        new_centers = [np.mean(X[np.array(labels) == i], axis=0).tolist() for i in range(k)]\n        if all((np.linalg.norm(centers[i] - new_centers[i]) < 1e-05 for i in range(k))):\n            break\n        centers = new_centers\n    rounded_centers = [[round(x, 4) for x in center] for center in centers]\n    return (labels, rounded_centers)"}
{"task_id": 581, "completion_id": 0, "solution": "import numpy as np\ndef elastic_net_regression(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int, l1_penalty: float, l2_penalty: float) -> tuple[list[float], float]:\n    if learning_rate == 0 or iterations == 0:\n        return ([0.0 for _ in range(X.shape[1])], 0.0)\n    weights = np.zeros(X.shape[1])\n    bias = 0.0\n    for _ in range(iterations):\n        predictions = np.dot(X, weights) + bias\n        residuals = y - predictions\n        gradient_weights = (-2 * np.dot(X.T, residuals) + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights) / X.shape[0]\n        gradient_bias = -2 * np.sum(residuals) / X.shape[0]\n        weights -= learning_rate * gradient_weights\n        bias -= learning_rate * gradient_bias\n    return ([round(weight, 4) for weight in weights], round(bias, 4))"}
{"task_id": 591, "completion_id": 0, "solution": "import numpy as np\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    x = np.array(x)\n    for layer_weights in weights[:-1]:\n        x = np.array([max(0, np.dot(neuron_weights[1:], x) + neuron_weights[0]) for neuron_weights in layer_weights])\n    output = np.array([np.dot(neuron_weights[1:], x) + neuron_weights[0] for neuron_weights in weights[-1]])\n    if len(output) == 1:\n        return round(output[0], 4)\n    else:\n        return [round(out, 4) for out in output]"}
{"task_id": 595, "completion_id": 0, "solution": "import numpy as np\ndef kmeans_centroids(X: 'np.ndarray', k: int, max_iters: int=100) -> list[list[float]]:\n    centroids = X[:k]\n    (n_samples, n_features) = X.shape\n    labels = np.zeros(n_samples, dtype=int)\n    for _ in range(max_iters):\n        for (i, sample) in enumerate(X):\n            distances = np.sum((centroids - sample) ** 2, axis=1)\n            labels[i] = np.argmin(distances)\n        new_centroids = np.zeros_like(centroids)\n        counts = np.zeros(k, dtype=int)\n        for (i, sample) in enumerate(X):\n            label = labels[i]\n            new_centroids[label] += sample\n            counts[label] += 1\n        new_centroids[counts == 0] = centroids[counts == 0]\n        counts[counts == 0] = 1\n        new_centroids /= counts[:, None]\n        if np.allclose(centroids, new_centroids, atol=0.0001):\n            break\n        centroids = new_centroids\n    centroids = sorted(centroids.tolist())\n    centroids = [[round(x, 4) for x in centroid] for centroid in centroids]\n    return centroids"}
