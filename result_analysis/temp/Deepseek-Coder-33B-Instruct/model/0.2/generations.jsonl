{"task_id": 0, "completion_id": 0, "completion": "Here is the Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Implement Ridge (L2-regularised) Linear Regression using its closed-form solution.\n    Given an ndarray where the last column is the target y and all preceding columns are the features X, add a bias (intercept) term, then compute the weight vector.\n\n    Parameters:\n    data (np.ndarray): The input data\n    alpha (float): The regularisation strength (default: 0.0)\n\n    Returns:\n    list[float]: The weight vector rounded to 4 decimal places\n    \"\"\"\n    # Add a bias term to the input data\n    X = np.c_[np.ones(data.shape[0]), data[:, :-1]]\n    y = data[:, -1]\n\n    # Compute the weight vector\n    try:\n        weights = np.linalg.inv(X.T @ X + alpha * np.eye(X.shape[1])) @ X.T @ y\n    except np.linalg.LinAlgError:\n        return -1\n\n    # Return the weight vector rounded to 4 decimal places\n    return [round(weight, 4) for weight in weights]\n```\n\nThis script first adds a bias term to the input data, then computes the weight vector using the closed-form solution for Ridge Regression. If the matrix `X.T @ X + alpha * np.eye(X.shape[1])` is not invertible, the function returns `-1`. Otherwise, it returns the weight vector rounded to 4 decimal places.\n"}
{"task_id": 1, "completion_id": 0, "completion": "Here is the Python script that implements the dual-form perceptron learning algorithm:\n\n```python\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    K = np.dot(X_train, X_train.T)\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    updates = 0\n\n    while updates < n_iter:\n        updated = False\n        for i in range(n_samples):\n            activation = np.dot(K[i], y_train * alpha)\n            if y_train[i] * (activation + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n                updates += 1\n                if updates >= n_iter:\n                    break\n        if not updated:\n            break\n\n    w = np.dot(alpha * y_train, X_train)\n    return (np.round(w, 4).tolist(), round(b, 4))\n```\n\nThis script first computes the Gram matrix `K`, which is the dot product of the training samples. Then it initializes the `alpha` vector and the bias `b` to zero. It then enters a loop where it scans the samples in the order 0 \u2026 n-1. For each sample, it computes the activation and checks if the margin is \u2264 0. If it is, the sample is mis-classified and the algorithm updates `alpha` and `b`. If no update is made in a complete pass over the data, the algorithm stops. Finally, it computes the primal weight vector `w` from the final `alpha` and returns it along with the bias `b`.\n"}
{"task_id": 2, "completion_id": 0, "completion": "Here is the Python code that implements the required GLM link functions:\n\n```python\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    # Define the link functions\n    def identity_link(mu):\n        return mu\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    # Define the inverse link functions\n    def identity_inv_link(eta):\n        return eta\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def logit_inv_link(eta):\n        return 1 / (1 + np.exp(-eta))\n\n    # Define the derivative of the link functions\n    def identity_link_deriv(mu):\n        return np.ones_like(mu)\n\n    def log_link_deriv(mu):\n        return 1 / mu\n\n    def logit_link_deriv(mu):\n        return 1 / (mu * (1 - mu))\n\n    # Return the link functions in a dictionary\n    return {\n        \"identity\": {\n            \"link\": np.vectorize(identity_link),\n            \"inv_link\": np.vectorize(identity_inv_link),\n            \"link_deriv\": np.vectorize(identity_link_deriv),\n        },\n        \"log\": {\n            \"link\": np.vectorize(log_link),\n            \"inv_link\": np.vectorize(log_inv_link),\n            \"link_deriv\": np.vectorize(log_link_deriv),\n        },\n        \"logit\": {\n            \"link\": np.vectorize(logit_link),\n            \"inv_link\": np.vectorize(logit_inv_link),\n            \"link_deriv\": np.vectorize(logit_link_deriv),\n        },\n    }\n```\n\nThis script defines the three link functions (identity, log, and logit) and their inverses and derivatives. The `np.vectorize` function is used to make these functions work with numpy arrays. The functions are then returned in a dictionary.\n"}
{"task_id": 3, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\nclass Node:\n    def __init__(self, indices):\n        self.indices = indices\n        self.left = None\n        self.right = None\n        self.is_leaf = False\n\nclass IsolationTree:\n    def __init__(self, data):\n        self.data = data\n        self.root = Node(list(range(len(data))))\n        self.n_features = data.shape[1]\n        self.depths = [0] * len(data)\n\n    def build_tree(self, node, depth):\n        if len(node.indices) < 3 or depth >= 20:\n            node.is_leaf = True\n            for index in node.indices:\n                self.depths[index] = depth\n            return\n\n        f = np.random.choice(self.n_features)\n        down, up = np.min(self.data[node.indices, f]), np.max(self.data[node.indices, f])\n        v = np.random.uniform(down, up)\n\n        left_indices = [i for i in node.indices if self.data[i, f] <= v]\n        right_indices = [i for i in node.indices if self.data[i, f] > v]\n\n        node.left = Node(left_indices)\n        node.right = Node(right_indices)\n\n        self.build_tree(node.left, depth + 1)\n        self.build_tree(node.right, depth + 1)\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    np.random.seed(0)\n    tree = IsolationTree(data)\n    tree.build_tree(tree.root, 0)\n    return tree.depths\n```\n\nThis script first defines a `Node` class that represents a node in the isolation tree. Each node contains a list of indices of samples that reach it, and pointers to its left and right children. The `IsolationTree` class represents the isolation tree itself. It contains the data, the root node, the number of features, and a list to store the depths of each sample. The `build_tree` method is used to build the tree recursively. The `isolation_tree_path_length` function creates an `IsolationTree` object, builds the tree, and returns the depths of each sample.\n"}
{"task_id": 7, "completion_id": 0, "completion": "Here is a Python script that solves the task using the Apriori algorithm. The Apriori algorithm is a popular algorithm for mining frequent itemsets. It is based on the principle that if an itemset is frequent, then all of its subsets must also be frequent.\n\n```python\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    # Count the occurrence of each item\n    item_counts = Counter()\n    for transaction in transactions:\n        item_counts.update(transaction)\n\n    # Filter out items that do not meet the minimum support threshold\n    min_count = math.ceil(minsup * len(transactions))\n    frequent_items = set(item for item, count in item_counts.items() if count >= min_count)\n\n    # Filter out transactions that do not contain any frequent items\n    frequent_transactions = [transaction for transaction in transactions if any(item in transaction for item in frequent_items)]\n\n    # Initialize the frequent itemsets with the frequent items\n    frequent_itemsets = {(item,): count for item, count in item_counts.items() if item in frequent_items}\n\n    # Generate and count candidate itemsets of increasing size\n    k = 2\n    while frequent_itemsets:\n        candidate_itemsets = Counter()\n        for itemset in combinations(frequent_itemsets.keys(), k):\n            # Check if all subsets of the itemset are frequent\n            if all(subset in frequent_itemsets for subset in combinations(itemset, k - 1)):\n                # Count the occurrences of the itemset in the transactions\n                count = sum(all(item in transaction for item in itemset) for transaction in frequent_transactions)\n                if count >= min_count:\n                    candidate_itemsets[itemset] = count\n        frequent_itemsets = candidate_itemsets\n        k += 1\n\n    return frequent_itemsets\n```\n\nThis script first counts the occurrence of each item in the transactions. It then filters out items that do not meet the minimum support threshold. It also filters out transactions that do not contain any frequent items. The script then initializes the frequent itemsets with the frequent items. It generates and counts candidate itemsets of increasing size, checking if all subsets of the itemset are frequent. If the count of the itemset in the transactions is greater than or equal to the minimum support threshold, the itemset is added to the frequent itemsets. The script returns the frequent itemsets.\n"}
{"task_id": 11, "completion_id": 0, "completion": "Here is a Python script that implements the K-Means clustering algorithm from scratch:\n\n```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    # Initialize the centers as the first k samples\n    centers = data[:k].tolist()\n\n    for _ in range(max_iter):\n        # Assign each sample to the nearest center\n        labels = [np.argmin([np.linalg.norm(sample - center) for center in centers]) for sample in data]\n\n        # Compute the new centers as the mean of the samples in each cluster\n        new_centers = [np.mean(data[np.array(labels) == i], axis=0).tolist() for i in range(k)]\n\n        # Check for empty clusters and reinitialize the center with a random sample\n        for i, center in enumerate(new_centers):\n            if np.isnan(center).any():\n                new_centers[i] = data[np.random.randint(0, len(data))].tolist()\n\n        # Round the coordinates of the centers to 4 decimal places\n        new_centers = [[round(coord, 4) for coord in center] for center in new_centers]\n\n        # Check for convergence\n        if np.max(np.abs(np.array(new_centers) - np.array(centers))) < epsilon:\n            break\n\n        centers = new_centers\n\n    return centers, labels\n```\n\nThis script first initializes the centers as the first `k` samples. It then enters a loop where it assigns each sample to the nearest center, recomputes the centers as the mean of the samples in each cluster, checks for empty clusters and reinitializes the center with a random sample if necessary, rounds the coordinates of the centers to 4 decimal places, and checks for convergence. If the maximum change of any center between two consecutive iterations is smaller than `epsilon`, the loop breaks and the function returns the centers and the labels.\n"}
{"task_id": 13, "completion_id": 0, "completion": "Here is a Python script that implements the item-based k-NN collaborative filtering recommender:\n\n```python\nimport numpy as np\nfrom collections import defaultdict\nfrom scipy.spatial.distance import cosine\nfrom scipy.stats import pearsonr\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_users, n_items = data.shape\n    rated_items = np.where(data[user_ind] > 0)[0]\n    unrated_items = np.where(data[user_ind] == 0)[0]\n\n    if len(unrated_items) == 0:\n        return []\n\n    S = np.zeros((n_items, n_items))\n    for i in range(n_items):\n        for j in range(i, n_items):\n            common_users = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(common_users) > 0:\n                if criterion == 'cosine':\n                    v1 = data[common_users, i]\n                    v2 = data[common_users, j]\n                    if np.std(v1) > 1e-3:\n                        v1 = v1 - np.mean(v1)\n                    if np.std(v2) > 1e-3:\n                        v2 = v2 - np.mean(v2)\n                    S[i, j] = S[j, i] = 1 - cosine(v1, v2)\n                elif criterion == 'pearson':\n                    S[i, j] = S[j, i] = pearsonr(data[common_users, i], data[common_users, j])[0]\n\n    scores = {}\n    for t in unrated_items:\n        numerator = np.sum(data[user_ind, rated_items] * S[t, rated_items])\n        denominator = np.sum(np.abs(S[t, rated_items]))\n        if denominator > 0:\n            scores[t] = numerator / denominator\n        else:\n            scores[t] = 0\n\n    sorted_scores = sorted(scores.items(), key=lambda x: (-x[1], x[0]))\n    return [item[0] for item in sorted_scores[:k]]\n```\n\nThis script first computes the similarity matrix `S` between all pairs of items. It then computes the predicted attractiveness score for each unrated item by summing the product of the rating of the user for each rated item and the similarity between the unrated item and the rated item. The items are then sorted by decreasing score and the indices of the top `k` items are returned.\n"}
{"task_id": 19, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    n_samples, n_features = X.shape\n    total_gain = -np.inf\n    best_split = None\n\n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        for threshold in unique_values:\n            left_indices = X[:, feature_index] <= threshold\n            right_indices = ~left_indices\n            if np.sum(left_indices) < 2 or np.sum(right_indices) < 2:\n                continue\n            left_g = np.sum(g[left_indices])\n            left_h = np.sum(h[left_indices])\n            right_g = np.sum(g[right_indices])\n            right_h = np.sum(h[right_indices])\n            parent_loss = -0.5 * (np.sum(g) ** 2) / (np.sum(h) + lam) + gamma\n            left_loss = -0.5 * (left_g ** 2) / (left_h + lam) + gamma\n            right_loss = -0.5 * (right_g ** 2) / (right_h + lam) + gamma\n            gain = parent_loss - left_loss - right_loss\n            if gain > total_gain:\n                total_gain = gain\n                best_split = (feature_index, threshold)\n\n    if total_gain <= 0:\n        return None\n    else:\n        return best_split\n```\n\nThis script iterates over all features and all unique values of each feature as potential split thresholds. For each potential split, it computes the gain and updates the best split if the gain is larger than the current best gain. If no split achieves a positive gain, it returns `None`.\n"}
{"task_id": 20, "completion_id": 0, "completion": "Here is the Python code that implements the sigmoid activation function and its gradient:\n\n```python\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Convert input to numpy array if it's a list\n    if isinstance(x, list):\n        x = np.array(x)\n\n    # Compute sigmoid and its gradient\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n\n    # Round to 4 decimal places\n    sigmoid_x = np.round(sigmoid_x, 4)\n    gradient_x = np.round(gradient_x, 4)\n\n    # Convert numpy arrays to lists if necessary\n    if isinstance(sigmoid_x, np.ndarray):\n        sigmoid_x = sigmoid_x.tolist()\n    if isinstance(gradient_x, np.ndarray):\n        gradient_x = gradient_x.tolist()\n\n    return sigmoid_x, gradient_x\n```\n\nThis function first checks if the input is a list and converts it to a numpy array if necessary. Then it computes the sigmoid and its gradient using the sigmoid function and its derivative. The results are rounded to 4 decimal places and returned as a tuple. If the input was a numpy array, the results are converted back to lists.\n"}
{"task_id": 21, "completion_id": 0, "completion": "Here is a Python script that implements the AdaBoost algorithm with one-dimensional decision stumps.\n\n```python\nimport numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float],\n                        y_train: list[int],\n                        x_test: list[float],\n                        epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    # Sort the training data\n    sorted_train = sorted(zip(x_train, y_train))\n    x_train, y_train = zip(*sorted_train)\n\n    # Initialize weights\n    weights = np.ones(len(x_train)) / len(x_train)\n\n    # Initialize stumps and their weights\n    stumps = []\n    stump_weights = []\n\n    # Initialize error\n    error = float('inf')\n\n    while error > epsilon:\n        # Find the best stump\n        best_stump = None\n        best_error = float('inf')\n        for i in range(1, len(x_train)):\n            for d in [0, 1]:\n                theta = (x_train[i-1] + x_train[i]) / 2\n                prediction = np.where(np.array(x_train) <= theta, 1-d, d-1)\n                error = np.sum(weights[prediction != y_train])\n                if error < best_error:\n                    best_error = error\n                    best_stump = (d, theta)\n\n        # Compute the weight of the stump\n        stump_weight = 0.5 * math.log((1 - best_error) / best_error)\n\n        # Update weights\n        prediction = np.where(np.array(x_train) <= best_stump[1], 1-best_stump[0], best_stump[0]-1)\n        weights = weights * np.exp(-stump_weight * y_train * prediction)\n        weights = weights / np.sum(weights)\n\n        # Add the stump and its weight\n        stumps.append(best_stump)\n        stump_weights.append(stump_weight)\n\n        # Update error\n        error = 1 - np.sum(weights[np.array(y_train) == np.sign(np.sum([stump_weights[i] * (1-stumps[i][0] if x <= stumps[i][1] else stumps[i][0]-1) for i, x in enumerate(x_train)]))])\n\n    # Predict the labels for the test set\n    predictions = []\n    for x in x_test:\n        prediction = np.sign(np.sum([stump_weights[i] * (1-stumps[i][0] if x <= stumps[i][1] else stumps[i][0]-1) for i in range(len(stumps))]))\n        predictions.append(prediction)\n\n    return predictions\n```\n\nThis script first sorts the training data and initializes the weights. It then enters a loop where it finds the best stump (i.e., the stump with the smallest weighted error), computes its weight, updates the weights, and adds the stump and its weight to the ensemble. The loop continues until the training error is less than or equal to the user-supplied value `epsilon`. Finally, it predicts the labels for the test set and returns them.\n"}
{"task_id": 25, "completion_id": 0, "completion": "Here is the Python code that implements the Gaussian kernel SVM prediction:\n\n```python\nimport numpy as np\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    # Compute the pairwise Euclidean distances between all training samples and test samples\n    distances = np.sqrt(np.sum(X_train**2, axis=1)[:, None] + np.sum(X_test**2, axis=1) - 2 * np.dot(X_train, X_test.T))\n\n    # Compute the Gaussian kernel matrix\n    kernel_matrix = np.exp(-gamma * distances)\n\n    # Compute the decision function for each test sample\n    decision_function = np.dot(kernel_matrix.T, y_train * alpha) + b\n\n    # Predict the labels for each test sample\n    y_pred = np.sign(decision_function)\n\n    return y_pred.tolist()\n```\n\nThis function first computes the pairwise Euclidean distances between all training samples and test samples. Then it computes the Gaussian kernel matrix using these distances and the Gaussian kernel parameter `gamma`. The decision function for each test sample is then computed as the dot product of the kernel matrix and the vector of training labels, multiplied by the vector of Lagrange multipliers, and added to the bias term. Finally, the predicted labels for each test sample are computed as the sign of the decision function.\n"}
{"task_id": 28, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    X = np.array(X)\n    m, n = X.shape\n\n    if k < 1 or k > min(m, n):\n        return -1\n\n    U, s, Vt = np.linalg.svd(X, full_matrices=False)\n    S = np.zeros((m, n))\n    S[:k, :k] = np.diag(s[:k])\n\n    X_hat = U.dot(S.dot(Vt))\n    mse = np.mean((X - X_hat)**2)\n\n    return np.round(X_hat, 4).tolist(), round(mse, 4)\n```\n\nThis script first checks if the provided `k` is valid. If it is not, the function returns `-1`. Then it computes the SVD of the input matrix `X`. The SVD is a factorization of `X` into three matrices `U`, `S`, and `Vt` such that `X = U * S * Vt`. The `S` matrix is a diagonal matrix with the singular values of `X` on its diagonal. The `U` and `Vt` matrices are orthogonal. The function then computes the optimal rank-`k` reconstruction of `X` by keeping only the first `k` rows and columns of `U`, `S`, and `Vt`. The mean squared error (MSE) is then computed as the average of the squared differences between the original matrix `X` and its reconstruction `X_hat`. The function returns the reconstructed matrix `X_hat` and the MSE, both rounded to four decimals.\n"}
{"task_id": 29, "completion_id": 0, "completion": "Here is a Python script that implements the gradient boosting algorithm with decision stumps:\n\n```python\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                           y_train: list[float] | np.ndarray,\n                           x_query: float,\n                           epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    residuals = y_train.copy()\n    stumps = []\n\n    while np.sum(residuals**2) > epsilon:\n        split_points = (x_train[:-1] + x_train[1:]) / 2\n        best_stump = None\n        min_rss = np.inf\n\n        for s in split_points:\n            mask = x_train <= s\n            c1 = np.mean(residuals[mask])\n            c2 = np.mean(residuals[~mask])\n            pred = np.where(x_train <= s, c1, c2)\n            rss = np.sum((residuals - pred)**2)\n\n            if rss < min_rss:\n                min_rss = rss\n                best_stump = (s, c1, c2)\n\n        stumps.append(best_stump)\n        residuals = y_train - np.where(x_train <= best_stump[0], best_stump[1], best_stump[2])\n\n    prediction = np.sum([stump[1] if x_query <= stump[0] else stump[2] for stump in stumps])\n\n    return round(prediction, 4)\n```\nThis script first initializes the residuals as the target values. It then enters a loop that continues until the residual sum of squares is less than the provided tolerance. In each iteration, it calculates the split points, and for each split point, it calculates the mean of the residuals for the left and right sides, and computes the residual sum of squares for the stump defined by these constants. It keeps track of the stump that minimizes the residual sum of squares, and adds it to the list of stumps. It then updates the residuals. After the loop, it calculates the prediction for the query point by summing the constants contributed by all the stumps. Finally, it returns the prediction rounded to 4 decimal places.\n"}
{"task_id": 34, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None):\n    \"\"\"\n    Generate a NumPy tensor filled with 0.0s and 1.0s.\n\n    Parameters:\n    shape (tuple[int, ...]): The shape of the tensor to be generated.\n    sparsity (float): The probability of generating a 1.0.\n    seed (int | None): The seed for the random number generator.\n\n    Returns:\n    numpy.ndarray: A NumPy array of the specified shape filled with 0.0s and 1.0s.\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n\n    if seed is not None:\n        np.random.seed(seed)\n\n    tensor = np.random.rand(*shape)\n    threshold = 1 - sparsity\n    tensor = np.where(tensor < threshold, 0.0, 1.0)\n\n    return tensor\n```\n\nThis script first checks if the sparsity value is within the legal range. If not, it returns -1. If a seed is provided, it sets the random seed. Then it generates a tensor of the specified shape filled with random numbers between 0 and 1. It then sets a threshold based on the sparsity value and uses NumPy's `where` function to convert the tensor to a binary tensor.\n"}
{"task_id": 39, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    # Get the median value of the column d\n    median = np.median(data[:, d])\n    \n    # Get the indices of the samples with values in column d that are equal to the median\n    median_indices = np.where(data[:, d] == median)[0]\n    \n    # If there are multiple samples with the same median value, choose the one with the smallest index\n    pivot = np.min(median_indices)\n    \n    # Get the indices of the samples with values in column d that are less than the median\n    left = np.where(data[:, d] < median)[0].tolist()\n    \n    # Get the indices of the samples with values in column d that are greater than the median\n    right = np.where(data[:, d] > median)[0].tolist()\n    \n    # Remove the pivot from the left or right list (whichever it belongs to)\n    if pivot in left:\n        left.remove(pivot)\n    else:\n        right.remove(pivot)\n    \n    # Sort the lists of indices\n    left.sort()\n    right.sort()\n    \n    return pivot, left, right\n```\n\nThis script first calculates the median value of the column `d`. It then finds the indices of the samples with values in column `d` that are equal to the median. If there are multiple samples with the same median value, it chooses the one with the smallest index. The indices of the samples with values in column `d` that are less than the median and the indices of the samples with values in column `d` that are greater than the median are then found. The pivot is removed from the left or right list (whichever it belongs to). Finally, the lists of indices are sorted and returned.\n"}
{"task_id": 40, "completion_id": 0, "completion": "Here is the Python script that solves the task:\n\n```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, \"Input array must be one-dimensional\"\n    assert stride >= 1, \"Stride must be a positive integer\"\n    assert len(x) >= frame_width, \"Frame width must be less than or equal to the length of the input array\"\n\n    n_frames = (len(x) - frame_width) // stride + 1\n    shape = (n_frames, frame_width)\n    strides = (stride * x.itemsize, x.itemsize)\n    result = as_strided(x, shape=shape, strides=strides)\n\n    if not writeable:\n        result.flags.writeable = False\n\n    return result\n```\n\nThis script first checks the preconditions and then uses `numpy.lib.stride_tricks.as_strided` to create a view on the input array with the desired shape and strides. The `writeable` parameter is used to set the `writeable` flag of the returned array.\n"}
{"task_id": 48, "completion_id": 0, "completion": "Here is a Python function that verifies whether a given matrix is row-stochastic:\n\n```python\nimport numpy as np\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Convert the input to a numpy array\n    X = np.array(X)\n\n    # Check if the matrix is two-dimensional\n    if X.ndim != 2:\n        return False\n\n    # Check if every element is between 0 and 1 inclusive\n    if not np.all((0 <= X) & (X <= 1)):\n        return False\n\n    # Check if each row sums to 1 up to a numerical tolerance of 1e-8\n    row_sums = np.sum(X, axis=1)\n    if not np.allclose(row_sums, np.ones_like(row_sums), rtol=0, atol=1e-8):\n        return False\n\n    return True\n```\n\nThis function first checks if the input matrix is two-dimensional. If not, it returns `False`. Then it checks if every element in the matrix is between 0 and 1 inclusive. If not, it returns `False`. Finally, it checks if the sum of each row is close to 1 (within a numerical tolerance of `1e-8`). If not, it returns `False`. If all these conditions are met, it returns `True`.\n"}
{"task_id": 55, "completion_id": 0, "completion": "Here is a Python script that implements the RMSprop optimisation algorithm for ordinary least-squares (OLS) linear regression:\n\n```python\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n, d = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n\n    for _ in range(max_iter):\n        for i in range(0, n, batch_size):\n            X_batch = X[i:i+batch_size]\n            y_batch = y[i:i+batch_size]\n\n            grad = (1/len(X_batch)) * X_batch.T @ (X_batch @ w - y_batch)\n            s = rho * s + (1 - rho) * grad ** 2\n            w = w - eta * grad / np.sqrt(s + eps_station)\n\n        if np.linalg.norm(grad) < epsilon:\n            break\n\n    return [round(weight, 4) for weight in w]\n```\n\nThis script first initializes the weight vector and the running average of squared gradients to zero. Then, for each iteration, it processes mini-batches of the data and updates the weight vector using the RMSprop rule. The algorithm stops when the \u2113\u2082-norm of the gradient becomes smaller than the given threshold or when the maximum number of iterations is reached. Finally, it returns the learned weight vector rounded to four decimal places.\n"}
{"task_id": 56, "completion_id": 0, "completion": "Here is the Python script that implements the SoftPlus activation function and its derivative:\n\n```python\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n    \"\"\"\n    Implements the SoftPlus activation function and its derivative.\n\n    Args:\n        x: A scalar, Python list, or NumPy array containing real values.\n        deriv: A Boolean flag. When False, it returns SoftPlus(x) for every element of x.\n               When True, it returns the gradient, i.e. the element-wise sigmoid of x.\n\n    Returns:\n        A Python list (or a single float when the input is a scalar) of the rounded values.\n    \"\"\"\n    x = np.array(x)\n    if deriv:\n        # Compute the sigmoid of x\n        sigmoid = 1 / (1 + np.exp(-x))\n        return np.round(sigmoid, 4).tolist()\n    else:\n        # Compute the SoftPlus of x\n        softplus = np.log1p(np.exp(x))\n        return np.round(softplus, 4).tolist()\n```\n\nThis script uses `np.log1p` to compute `log(1 + exp(x))` in a numerically stable way, which helps to avoid overflow for very large positive inputs. It also uses `np.exp` to compute `exp(x)`, which is numerically stable for very large negative inputs. The `np.round` function is used to round the results to the nearest 4th decimal.\n"}
{"task_id": 58, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    # Create N-grams from the corpus\n    ngrams = [tuple(corpus[i:i+N]) for i in range(len(corpus)-N+1)]\n    n_minus_grams = [tuple(corpus[i:i+N-1]) for i in range(len(corpus)-N+2)]\n\n    # Count N-grams and (N-1)-grams\n    ngram_counter = Counter(ngrams)\n    n_minus_gram_counter = Counter(n_minus_grams)\n\n    # Create N-grams from the sequence\n    sequence_ngrams = [tuple(sequence[i:i+N]) for i in range(len(sequence)-N+1)]\n\n    # Compute the total log-probability\n    total_log_prob = 0\n    for ngram in sequence_ngrams:\n        ngram_count = ngram_counter[ngram]\n        n_minus_gram_count = n_minus_gram_counter[ngram[:-1]]\n\n        # If any count is zero return `float('-inf')`\n        if ngram_count == 0 or n_minus_gram_count == 0:\n            return float('-inf')\n\n        # Compute the log-probability of the ngram\n        log_prob = np.log2(ngram_count) - np.log2(n_minus_gram_count)\n        total_log_prob += log_prob\n\n    return round(total_log_prob, 4)\n```\n\nThis script first creates N-grams and (N-1)-grams from the corpus and counts their occurrences. Then it creates N-grams from the sequence and computes the log-probability of each N-gram under the unsmoothed language model. If any count is zero, it immediately returns `float('-inf')`. Finally, it returns the total log-probability of the sequence, rounded to 4 decimal places.\n"}
{"task_id": 62, "completion_id": 0, "completion": "Here is a Python script that implements the Lasso regression with polynomial features using coordinate descent:\n\n```python\nimport numpy as np\n\ndef lasso_regression(X: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\", degree: int, reg_factor: float, n_iterations: int = 1000, tol: float = 1e-6) -> list[float]:\n    X = np.array(X)\n    y = np.array(y)\n\n    # Create design matrix\n    X_poly = np.empty((X.shape[0], degree+1))\n    X_poly[:, 0] = 1\n    for i in range(1, degree+1):\n        X_poly[:, i] = X ** i\n\n    # Initialize weights\n    weights = np.zeros(degree+1)\n\n    # Coordinate descent\n    for _ in range(n_iterations):\n        max_change = 0\n        weights_prev = weights.copy()\n\n        # Update bias\n        weights[0] = np.mean(y - np.dot(X_poly[:, 1:], weights[1:]))\n\n        # Update other coefficients\n        for j in range(1, degree+1):\n            xj = X_poly[:, j]\n            rho = np.dot(xj, y - np.dot(X_poly, weights) + weights[j] * xj)\n            weights[j] = soft_threshold(rho, reg_factor) / np.dot(xj, xj)\n\n            # Update max change\n            max_change = max(max_change, np.abs(weights[j] - weights_prev[j]))\n\n        # Check for early stopping\n        if max_change < tol:\n            break\n\n    # Round weights to 4 decimal places\n    weights = [round(w, 4) for w in weights]\n\n    return weights\n\ndef soft_threshold(rho: float, lambda_: float) -> float:\n    \"\"\"Compute the soft threshold function.\"\"\"\n    if rho < -lambda_:\n        return rho + lambda_\n    elif rho > lambda_:\n        return rho - lambda_\n    else:\n        return 0\n```\n\nThis script first creates a design matrix that includes a column of ones followed by x\u2071 for i from 1 to the specified degree. It then initializes the weights to zero and performs coordinate descent to update the weights. The bias is updated exactly in every iteration, and the other coefficients are updated using the soft threshold function. The algorithm stops when the largest absolute weight change falls below the specified tolerance or after the specified number of iterations. Finally, the weights are rounded to four decimal places and returned as a list.\n"}
{"task_id": 63, "completion_id": 0, "completion": "Here is the Python function that solves the task:\n\n```python\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    This function calculates the backward probability vector beta_t for a given time index t.\n    It receives the transition-probability matrix A, emission-probability matrix B, list of observation indices obs, and integer time index t.\n    It returns a Python list containing the N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    N = A.shape[0]\n    beta = np.ones(N)\n\n    for i in range(t, -1, -1):\n        beta = np.dot(A, beta * B[:, obs[i]])\n\n    return [round(b, 4) for b in beta]\n```\n\nThis function first initializes the backward variable beta to an array of ones. Then, it iterates from t to 0 (inclusive), updating the backward variable at each step by taking the dot product of the transition matrix A and the element-wise product of the current backward variable and the emission probabilities for the current observation. Finally, it returns the backward variable as a list of rounded values to 4 decimal places.\n"}
{"task_id": 65, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    if not A or not B or not pi or not obs:\n        return 0.0\n\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    obs = np.array(obs)\n\n    N = len(A)\n    T = len(obs)\n\n    beta = np.zeros((T, N))\n\n    # base case for backward algorithm\n    beta[T - 1] = np.ones((N))\n\n    # recursive case for backward algorithm\n    for t in range(T - 2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t + 1]] * beta[t + 1, :])\n\n    # compute the probability of the observation sequence\n    prob = np.sum(pi * B[:, obs[0]] * beta[0, :])\n\n    return round(prob, 6)\n```\n\nThis script first checks if any of the input lists are empty. If they are, it returns 0.0. It then converts the input lists to numpy arrays for easier manipulation. It initializes a numpy array `beta` to store the backward variables. The base case for the backward algorithm is set, and then the recursive case is implemented in a nested loop. Finally, the probability of the observation sequence is computed and returned, rounded to 6 decimal places.\n"}
{"task_id": 69, "completion_id": 0, "completion": "Here is a Python script that implements the forward algorithm for Hidden Markov Models:\n\n```python\nimport numpy as np\n\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # Convert lists to numpy arrays for easier computation\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n\n    # Validate input dimensions\n    if (S.ndim != 1 or A.ndim != 2 or B.ndim != 2 or\n        S.shape[0] != A.shape[0] != B.shape[0] or\n        S.shape[0] != A.shape[1] or\n        np.any(S < 0) or np.any(A < 0) or np.any(B < 0) or\n        np.sum(S) != 1 or np.allclose(np.sum(A, axis=1), np.ones(A.shape[0])) or\n        np.allclose(np.sum(B, axis=1), np.ones(B.shape[0])) or\n        np.any(observations) < 0 or np.any(observations) >= B.shape[1]):\n        return -1\n\n    # Initialize alpha\n    alpha = np.zeros_like(B.T)\n    alpha[:, 0] = S * B[:, observations[0]]\n\n    # Forward algorithm\n    for t in range(1, len(observations)):\n        for j in range(A.shape[0]):\n            alpha[j, t] = np.sum(alpha[:, t - 1] * A[:, j] * B[j, observations[t]])\n\n    # Return the sum of the last column of alpha as the sequence likelihood\n    return round(np.sum(alpha[:, -1]), 4)\n```\n\nThis script first validates the input dimensions and checks that every observation index is in the valid range. If the input is invalid, it returns -1. Otherwise, it implements the forward algorithm and returns the result rounded to 4 decimal places.\n"}
{"task_id": 70, "completion_id": 0, "completion": "Here is a Python script that implements the FP-Growth algorithm:\n\n```python\nfrom collections import Counter, defaultdict\n\nclass Node:\n    def __init__(self, item, count, parent):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.next = None\n\n    def increment(self, count):\n        self.count += count\n\ndef construct_tree(transactions, min_support):\n    header_table = defaultdict(int)\n    for trans in transactions:\n        for item in trans:\n            header_table[item] += 1\n\n    header_table = {k: v for k, v in header_table.items() if v >= min_support}\n    frequent = set(header_table.keys())\n    if len(frequent) == 0:\n        return None, None\n\n    for k in header_table:\n        header_table[k] = [header_table[k], None]\n\n    ret_tree = Node('Null Set', 1, None)\n    for trans in transactions:\n        local_d = {}\n        for item in trans:\n            if item in frequent:\n                local_d[item] = header_table[item][0]\n\n        if len(local_d) > 0:\n            ordered_items = [v[0] for v in sorted(local_d.items(), key=lambda kv: kv[1], reverse=True)]\n            update_tree(ordered_items, ret_tree, header_table, 1)\n    return ret_tree, header_table\n\ndef update_tree(items, in_tree, header_table, count):\n    if items[0] in in_tree.children:\n        in_tree.children[items[0]].increment(count)\n    else:\n        in_tree.children[items[0]] = Node(items[0], count, in_tree)\n\n        if header_table[items[0]][1] is None:\n            header_table[items[0]][1] = in_tree.children[items[0]]\n        else:\n            update_header(header_table[items[0]][1], in_tree.children[items[0]])\n\n    if len(items) > 1:\n        update_tree(items[1::], in_tree.children[items[0]], header_table, count)\n\ndef update_header(node_to_test, target_node):\n    while node_to_test.next is not None:\n        node_to_test = node_to_test.next\n    node_to_test.next = target_node\n\ndef ascend_tree(leaf_node, prefix_path):\n    if leaf_node.parent is not None:\n        prefix_path.append(leaf_node.item)\n        ascend_tree(leaf_node.parent, prefix_path)\n\ndef find_prefix_path(base_pat, tree_node):\n    cond_pats = {}\n    while tree_node is not None:\n        prefix_path = []\n        ascend_tree(tree_node, prefix_path)\n        if len(prefix_path) > 1:\n            cond_pats[frozenset(prefix_path[1:])] = tree_node.count\n        tree_node = tree_node.next\n    return cond_pats\n\ndef mine_tree(in_tree, header_table, min_support, pre_fix, freq_item_list):\n    big_l = [v[0] for v in sorted(header_table.items(), key=lambda p: p[1][0])]\n    for base_pat in big_l:\n        new_freq_set = pre_fix.copy()\n        new_freq_set.add(base_pat)\n        freq_item_list.append(sorted(list(new_freq_set)))\n        cond_patt_bases = find_prefix_path(base_pat, header_table[base_pat][1])\n        my_cond_tree, my_head = construct_tree(cond_patt_bases, min_support)\n        if my_head is not None:\n            mine_tree(my_cond_tree, my_head, min_support, new_freq_set, freq_item_list)\n\ndef fp_growth(transactions, min_support):\n    item_set_list = []\n    for transaction in transactions:\n        for item in transaction:\n            item_set_list.append([item])\n\n    init_set = list(map(frozenset, item_set_list))\n    tree, header_table = construct_tree(init_set, min_support)\n    if tree is None:\n        return []\n\n    freq_items = []\n    mine_tree(tree, header_table, min_support, set([]), freq_items)\n    return freq_items\n```\n\nThis script first constructs the FP-tree and the header table. Then it mines the FP-tree to find frequent item-sets. The `fp_growth` function returns a list of all frequent item-sets.\n"}
{"task_id": 75, "completion_id": 0, "completion": "Here is a Python script that implements the k-Nearest Neighbour (k-NN) classifier:\n\n```python\nimport numpy as np\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    # Check if k is valid\n    if k < 1 or k > len(X_train):\n        return -1\n\n    # Convert lists to numpy arrays for easier computation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    # Initialize an empty list to store the predicted class labels\n    y_pred = []\n\n    # Iterate over each test sample\n    for test_sample in X_test:\n        # Compute the Euclidean distance between the test sample and all training samples\n        distances = np.sqrt(np.sum((X_train - test_sample) ** 2, axis=1))\n\n        # Get the indices of the k nearest training samples\n        k_nearest_indices = np.argsort(distances)[:k]\n\n        # Get the class labels of the k nearest training samples\n        k_nearest_labels = y_train[k_nearest_indices]\n\n        # Get the unique class labels and their counts\n        unique_labels, counts = np.unique(k_nearest_labels, return_counts=True)\n\n        # Get the class label with the highest count\n        highest_count_label = unique_labels[np.argmax(counts)]\n\n        # If there is a tie, get the smallest class label among the tied ones\n        if len(unique_labels) > 1 and np.max(counts) == np.min(counts):\n            highest_count_label = np.min(unique_labels)\n\n        # Append the predicted class label to the list\n        y_pred.append(highest_count_label)\n\n    return y_pred\n```\n\nThis script first checks if the input `k` is valid. If it is not, it returns `-1`. Then it converts the input lists to NumPy arrays for easier computation. It initializes an empty list to store the predicted class labels. For each test sample, it computes the Euclidean distance between the test sample and all training samples, gets the indices of the `k` nearest training samples, gets the class labels of the `k` nearest training samples, gets the unique class labels and their counts, gets the class label with the highest count, and if there is a tie, it gets the smallest class label among the tied ones. Finally, it appends the predicted class label to the list and returns the list.\n"}
{"task_id": 76, "completion_id": 0, "completion": "Here is a Python script that implements the function `cross_entropy_loss`:\n\n```python\nimport numpy as np\n\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n\n    # Add machine epsilon to avoid log(0)\n    eps = np.finfo(float).eps\n    log_y_pred = np.log(y_pred + eps)\n\n    # Compute the cross-entropy loss\n    loss = -np.sum(y * log_y_pred)\n\n    return round(loss, 4)\n```\n\nThis function first converts the input lists to NumPy arrays for easier manipulation. It then computes the logarithm of `y_pred`, adding a small value `eps` to avoid taking the logarithm of zero. The cross-entropy loss is then computed as the sum of the element-wise product of `y` and `log_y_pred`, and the result is negated because we want to minimize the loss. Finally, the loss is rounded to 4 decimal places and returned.\n"}
{"task_id": 77, "completion_id": 0, "completion": "Here is a Python script that implements forward propagation for an L-layer neural network:\n\n```python\nimport numpy as np\n\ndef sigmoid(Z):\n    \"\"\"\n    Implements the sigmoid activation function.\n    \"\"\"\n    A = 1/(1+np.exp(-Z))\n    cache = Z\n    return A, cache\n\ndef relu(Z):\n    \"\"\"\n    Implements the ReLU activation function.\n    \"\"\"\n    A = np.maximum(0,Z)\n    assert(A.shape == Z.shape)\n    cache = Z \n    return A, cache\n\ndef relu_backward(dA, cache):\n    \"\"\"\n    Implements the backward propagation for a single RELU unit.\n    \"\"\"\n    Z = cache\n    dZ = np.array(dA, copy=True)\n    dZ[Z <= 0] = 0\n    assert (dZ.shape == Z.shape)\n    return dZ\n\ndef linear_forward(A, W, b):\n    \"\"\"\n    Implements the linear part of a layer's forward propagation.\n    \"\"\"\n    Z = W.dot(A) + b\n    assert(Z.shape == (W.shape[0], A.shape[1]))\n    cache = (A, W, b)\n    return Z, cache\n\ndef linear_activation_forward(A_prev, W, b, activation):\n    \"\"\"\n    Implement the forward propagation for the LINEAR->ACTIVATION layer\n    \"\"\"\n    if activation == \"sigmoid\":\n        Z, linear_cache = linear_forward(A_prev, W, b)\n        A, activation_cache = sigmoid(Z)\n    \n    elif activation == \"relu\":\n        Z, linear_cache = linear_forward(A_prev, W, b)\n        A, activation_cache = relu(Z)\n    \n    assert (A.shape == (W.shape[0], A_prev.shape[1]))\n    cache = (linear_cache, activation_cache)\n\n    return A, cache\n\ndef L_model_forward(X, parameters):\n    \"\"\"\n    Implement forward propagation for the [LINEAR->RELU]*(L-1)->LINEAR->SIGMOID computation\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2                  # number of layers in the neural network\n    \n    # Implement [LINEAR -> RELU]*(L-1). Add \"cache\" to the \"caches\" list.\n    for l in range(1, L):\n        A_prev = A \n        A, cache = linear_activation_forward(A_prev, parameters['W' + str(l)], parameters['b' + str(l)], activation = \"relu\")\n        caches.append(cache)\n    \n    # Implement LINEAR -> SIGMOID. Add \"cache\" to the \"caches\" list.\n    AL, cache = linear_activation_forward(A, parameters['W' + str(L)], parameters['b' + str(L)], activation = \"sigmoid\")\n    caches.append(cache)\n    \n    assert(AL.shape == (1,X.shape[1]))\n            \n    return AL.round(4).tolist(), caches\n```\n\nThis script first defines the activation functions and their backward propagation. Then it defines the forward propagation for a single layer. The `L_model_forward` function uses these to implement forward propagation for an L-layer neural network. It iterates through each layer, applying the linear and activation steps, and storing the caches for each layer. Finally, it returns the final activation and the caches.\n"}
{"task_id": 81, "completion_id": 0, "completion": "Here is the Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    # Clip A2 to the interval [\u03b5, 1\u2013\u03b5]\n    epsilon = 1e-15\n    A2 = np.clip(A2, epsilon, 1.0 - epsilon)\n\n    # Compute the binary cross-entropy cost\n    m = Y.shape[0]\n    cost = -1/m * np.sum(Y * np.log(A2) + (1 - Y) * np.log(1 - A2))\n\n    # Return the cost rounded to 6 decimal places\n    return round(cost, 6)\n```\n\nThis script first clips the predicted probabilities `A2` to the interval `[\u03b5, 1\u2013\u03b5]` to avoid taking the logarithm of zero. Then it computes the binary cross-entropy cost using the given formula and returns it rounded to 6 decimal places.\n"}
{"task_id": 82, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | \"np.ndarray\", epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    # Convert Q to numpy array\n    Q = np.array(Q)\n\n    # Find the greedy action\n    greedy_action = np.argmax(Q)\n\n    # Calculate the base probability\n    base = epsilon / len(Q)\n\n    # Initialize probabilities with base probability\n    probabilities = np.full(len(Q), base)\n\n    # Set the greedy action's probability to 1 - \u03b5 + base\n    probabilities[greedy_action] = 1 - epsilon + base\n\n    # Round probabilities to 4 decimal places\n    probabilities = np.round(probabilities, 4)\n\n    # Normalize probabilities to sum to 1\n    probabilities /= np.sum(probabilities)\n\n    return list(probabilities)\n```\n\nThis script first converts the input list to a numpy array for easier manipulation. It then finds the greedy action by finding the index of the maximum Q-value. The base probability is calculated as \u03b5 divided by the number of actions. The probabilities are initialized as a numpy array of base probabilities, and the greedy action's probability is set to 1 - \u03b5 + base. The probabilities are then rounded to 4 decimal places and normalized to sum to 1. The final probabilities are returned as a list.\n"}
{"task_id": 86, "completion_id": 0, "completion": "Here is a Python function that solves the task:\n\n```python\nfrom collections import Counter\n\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    # Transpose the predictions to get a list of votes for each sample\n    votes = list(map(list, zip(*predictions)))\n\n    # For each sample, count the votes and select the class with the highest count\n    final_predictions = []\n    for sample_votes in votes:\n        vote_counts = Counter(sample_votes)\n        max_vote_count = max(vote_counts.values())\n        max_vote_classes = [cls for cls, count in vote_counts.items() if count == max_vote_count]\n        final_predictions.append(min(max_vote_classes))\n\n    return final_predictions\n```\n\nThis function first transposes the input list of lists to get a list of votes for each sample. Then, for each sample, it counts the votes and selects the class with the highest count. In case of ties, it breaks the tie by choosing the smallest label.\n"}
{"task_id": 88, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return round(np.logaddexp(0.0, z), 4)\n    else:\n        z = np.array(z)\n        result = np.logaddexp(0.0, z)\n        return np.round(result, 4).tolist()\n```\n\nThis function first checks if the input `z` is a scalar (either an integer or a float). If it is, it computes the softplus of `z` using `np.logaddexp` and rounds the result to 4 decimal places. If `z` is not a scalar, it converts `z` to a NumPy array, computes the softplus of each element in the array, rounds each element to 4 decimal places, and converts the result to a Python list using `np.round` and `tolist`.\n"}
{"task_id": 90, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Check if policy has estimates\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n\n    # Get true and estimated expectations\n    true_evs = bandit.arm_evs\n    estimated_evs = [policy.ev_estimates[i] for i in sorted(policy.ev_estimates.keys())]\n\n    # Compute squared errors\n    squared_errors = [(estimated_ev - true_ev) ** 2 for estimated_ev, true_ev in zip(estimated_evs, true_evs)]\n\n    # Compute and return mean squared error\n    mse = np.mean(squared_errors)\n    return round(mse, 4)\n```\n\nThis script first checks if the policy has any estimates. If not, it returns `numpy.nan`. Then it gets the true and estimated expectations, computes the squared errors, and finally computes and returns the mean squared error, rounded to 4 decimal places.\n"}
{"task_id": 96, "completion_id": 0, "completion": "Here is a Python script that implements the additive-smoothed N-gram log-probability function:\n\n```python\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # Build all 1-,\u2026,N-gram frequency tables from the corpus\n    ngram_counts = defaultdict(Counter)\n    for sentence in corpus:\n        words = sentence.split()\n        for n in range(1, N+1):\n            for ngram in zip(*[words[i:] for i in range(n)]):\n                ngram_counts[n][ngram] += 1\n                ngram_counts[n]['<UNK>'] += 1\n\n    # Estimate the probability of every contiguous N-gram in the target sentence\n    words = sequence.split()\n    if len(words) < N:\n        return 0.0\n\n    log_prob = 0.0\n    for ngram in zip(*[words[i:] for i in range(N)]):\n        context, word = ngram[:-1], ngram[-1]\n        context_count = sum(ngram_counts[N-1][context].values())\n        word_count = ngram_counts[N-1][context][word]\n        V = len(ngram_counts[N-1][context])\n        prob = (word_count + K) / (context_count + K * V)\n        log_prob += math.log(prob)\n\n    return round(log_prob, 4)\n```\n\nThis script first builds all 1-,\u2026,N-gram frequency tables from the corpus, then estimates the probability of every contiguous N-gram in the target sentence. If the sentence length is smaller than N, it returns 0.0. Finally, it returns the natural logarithm of the sentence probability rounded to 4 decimals.\n"}
{"task_id": 108, "completion_id": 0, "completion": "Here is a Python script that implements the regularized Alternating Least Squares (ALS) algorithm to factorize a real-valued matrix.\n\n```python\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)\n    N, M = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n\n    for _ in range(max_iter):\n        H_new = np.linalg.solve(np.dot(W.T, W) + alpha * np.eye(K), np.dot(W.T, X))\n        W_new = np.linalg.solve(np.dot(H_new, H_new.T) + alpha * np.eye(K), np.dot(X, H_new.T).T).T\n\n        if np.linalg.norm(W_new - W) < tol and np.linalg.norm(H_new - H) < tol:\n            break\n\n        W, H = W_new, H_new\n\n    X_hat = np.dot(W, H)\n    return X_hat.round(4).tolist()\n```\n\nThis script first initializes the factor matrices W and H with random values. Then, it alternates between updating W and H until either the maximum number of iterations is reached or the loss drops below the desired tolerance level. The loss is computed as the sum of the squared Frobenius norms of the difference between X and the product of W and H, and the squared Frobenius norms of W and H, multiplied by the regularization weight alpha. The script returns the reconstructed matrix X_hat, rounded to 4 decimal places and converted to a standard Python list of lists.\n"}
{"task_id": 109, "completion_id": 0, "completion": "Here is a Python script that implements the K-Means++ algorithm:\n\n```python\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n\n    # K-Means++ initialization\n    centroids = [random.choice(X)]\n    for _ in range(1, K):\n        dist_sq = np.array([min([np.inner(c-x,c-x) for c in centroids]) for x in X])\n        probs = dist_sq / dist_sq.sum()\n        cumulative_probs = probs.cumsum()\n        r = random.random()\n        for j, p in enumerate(cumulative_probs):\n            if r < p:\n                i = j\n                break\n        centroids.append(X[i])\n\n    # Lloyd's iterations\n    for _ in range(max_iter):\n        clusters = [[] for _ in range(K)]\n        for x in X:\n            distances = [np.linalg.norm(x - c) for c in centroids]\n            cluster_index = np.argmin(distances)\n            clusters[cluster_index].append(x)\n\n        new_centroids = []\n        for cluster in clusters:\n            if cluster:\n                new_centroid = np.mean(cluster, axis=0)\n                new_centroids.append(new_centroid.round(4).tolist())\n            else:\n                new_centroids.append(centroids[clusters.index(cluster)])\n\n        new_centroids.sort()\n        if new_centroids == centroids:\n            break\n        centroids = new_centroids\n\n    return centroids\n```\n\nThis script first initializes the centroids using the K-Means++ algorithm. Then it performs the Lloyd's iterations until either the cluster assignments stop changing or the maximum number of iterations is reached. The centroids are then returned, rounded to four decimal places and sorted in ascending order by their first coordinate.\n"}
{"task_id": 111, "completion_id": 0, "completion": "Here is the Python script that solves the task:\n\n```python\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes every character of the input string using a provided vocabulary.\"\"\"\n    encoded = np.zeros(time_steps, dtype=int)\n    for i, char in enumerate(text):\n        if i >= time_steps:\n            break\n        encoded[i] = vocabulary.get(char, 0)\n    return encoded.tolist()\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list/array of integer ids back to text using an inverse vocabulary.\"\"\"\n    return ''.join(inverse_vocab.get(i, '') for i in indices if i != 0)\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Puts everything together.\"\"\"\n    encoded = string_to_int(text, TIME_STEPS, input_vocabulary)\n    prediction = model.predict(np.array([encoded]))\n    decoded = int_to_string(np.argmax(prediction, axis=-1).flatten(), inv_output_vocabulary)\n    return decoded\n```\n\nThis script first encodes the input text into a fixed-length sequence of integers using the `string_to_int` function. It then uses the provided model to predict the output sequence. The predicted sequence is then decoded back into a string using the `int_to_string` function. The `run_example` function puts everything together and returns the decoded prediction string.\n"}
{"task_id": 113, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str], optional\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        global EXAMPLES\n        examples = EXAMPLES\n\n    predictions = []\n    for example in examples:\n        prediction = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        prediction_str = ''.join(prediction)\n        print(f\"input: {example}\\noutput: {prediction_str}\")\n        predictions.append(prediction_str)\n\n    return predictions\n```\n\nThis script defines a function `run_examples` that takes a model, input and output vocabularies, and a list of examples. It then iterates over the examples, calls the `run_example` function on each example, joins the resulting list of characters into a string, prints the input and output, and appends the output string to a list of predictions. Finally, it returns the list of predictions.\n\nPlease note that the `run_example` function is not defined in this script. It is assumed to be defined elsewhere in the runtime.\n"}
{"task_id": 115, "completion_id": 0, "completion": "Here is a Python script that implements the logistic_loss_and_gradient function as described in the task:\n\n```python\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    # Compute z\n    z = np.dot(X, w)\n    \n    # Compute p\n    p = 1 / (1 + np.exp(-z))\n    \n    # Replace 0 and 1 probabilities with a small constant\n    eps = 1e-20\n    p = np.clip(p, eps, 1 - eps)\n    \n    # Compute loss\n    loss = -np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))\n    \n    # Compute gradient\n    gradient = np.dot(X.T, (p - y)) / X.shape[0]\n    \n    return round(loss, 4), np.around(gradient, 4).tolist()\n```\n\nThis function first computes the z values, then the p values, and replaces any 0 or 1 probabilities with a small constant to avoid numerical issues. It then computes the loss and the gradient, and returns them rounded to 4 decimal places. The gradient is converted to a (nested) Python list via the `tolist()` method.\n"}
{"task_id": 118, "completion_id": 0, "completion": "Here is a Python script that implements the AdaBoost algorithm with decision stumps:\n\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    m, n = X_train.shape\n    weights = np.ones(m) / m\n    clfs = []\n\n    for _ in range(n_clf):\n        best_clf, best_error, best_pred = None, float('inf'), None\n\n        for feature in range(n):\n            thresholds = np.sort(X_train[:, feature])\n            for threshold in thresholds:\n                pred = np.ones(m)\n                pred[X_train[:, feature] < threshold] = -1\n\n                error = np.sum(weights[pred != y_train])\n\n                if error > 0.5:\n                    error = 1 - error\n                    pred = -pred\n\n                if error < best_error:\n                    best_clf = (feature, threshold)\n                    best_error = error\n                    best_pred = pred\n\n        alpha = 0.5 * np.log((1 - best_error) / best_error)\n        weights *= np.exp(-alpha * y_train * best_pred)\n        weights /= np.sum(weights)\n\n        clfs.append((best_clf, alpha))\n\n    y_pred = np.zeros(X_test.shape[0])\n    for clf, alpha in clfs:\n        feature, threshold = clf\n        y_pred += alpha * (2 * ((X_test[:, feature] >= threshold) - 0.5))\n\n    return [1 if y > 0 else -1 for y in y_pred]\n```\n\nThis script first initializes the weights of the training examples to be equal. Then, for each weak classifier, it finds the best decision stump (i.e., the one that minimizes the weighted classification error) and updates the weights of the training examples. Finally, it aggregates the votes of all the decision stumps to make predictions for the test examples.\n"}
{"task_id": 128, "completion_id": 0, "completion": "Here is a Python script that implements the multi-class Linear Discriminant Analysis (LDA) transformation:\n\n```python\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    class_labels = np.unique(y)\n    if n_components <= 0 or n_components > X.shape[1]:\n        return []\n\n    # Compute within-class scatter matrix\n    within_class_scatter = np.zeros((X.shape[1], X.shape[1]))\n    for c in class_labels:\n        X_c = X[y == c]\n        within_class_scatter += np.cov(X_c.T) * (X_c.shape[0] - 1)\n\n    # Compute between-class scatter matrix\n    overall_mean = np.mean(X, axis=0)\n    between_class_scatter = np.zeros((X.shape[1], X.shape[1]))\n    for c in class_labels:\n        X_c = X[y == c]\n        n_c = X_c.shape[0]\n        mean_c = np.mean(X_c, axis=0)\n        between_class_scatter += n_c * np.outer(mean_c - overall_mean, mean_c - overall_mean)\n\n    # Compute A = pinv(S_W) * S_B\n    A = np.dot(np.linalg.pinv(within_class_scatter), between_class_scatter)\n\n    # Perform eigen-decomposition and sort eigen-pairs in descending order of the eigen-values\n    eigen_values, eigen_vectors = np.linalg.eigh(A)\n    idx = np.argsort(eigen_values)[::-1]\n    eigen_vectors = eigen_vectors[:, idx]\n\n    # Deterministic sign\n    for i in range(eigen_vectors.shape[1]):\n        if eigen_vectors[0, i] < 0:\n            eigen_vectors[:, i] *= -1\n\n    # Project X on the first n_components eigenvectors\n    projection = np.dot(X, eigen_vectors[:, :n_components])\n\n    # Round every element to four decimal places\n    projection = np.round(projection, 4)\n\n    return projection.tolist()\n```\n\nThis script first computes the within-class and between-class scatter matrices, then forms the matrix A = pinv(S_W) * S_B. It performs eigen-decomposition of A and sorts the eigen-pairs in descending order of the eigen-values. It flips the sign of every eigenvector if the first non-zero element is negative to remove the sign ambiguity. It projects the data on the first `n_components` eigenvectors and rounds every element to four decimal places. Finally, it returns the projected data as a list of lists.\n"}
{"task_id": 140, "completion_id": 0, "completion": "Here is a Python solution using Breadth-First Search (BFS) algorithm. The idea is to use two queues, one for the agent and one for the fire. We start by adding the agent's starting position and all the fire sources to their respective queues. Then, we perform a BFS on both queues simultaneously. For each minute, we process all the cells in the agent's queue first, then all the cells in the fire's queue. If the agent reaches the goal cell, we return the current minute. If the agent encounters a cell that is on fire, we ignore it. If the agent reaches a cell that is not on fire, we add it to the agent's queue. After processing all the cells in the agent's queue, we process all the cells in the fire's queue. If a cell is not on fire, we spread the fire to its neighbours and add them to the fire's queue. If the agent's queue is empty, it means the agent cannot reach the goal, so we return -1.\n\n```python\nfrom collections import deque\nimport math\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    agent_queue = deque([(0, 0)])\n    fire_queue = deque([(i, j) for i in range(n) for j in range(n) if grid[i][j] == 'F'])\n    agent_visited = [[False]*n for _ in range(n)]\n    fire_visited = [[False]*n for _ in range(n)]\n    agent_visited[0][0] = True\n\n    for i, j in fire_queue:\n        fire_visited[i][j] = True\n\n    minutes = 0\n    while agent_queue:\n        for _ in range(len(agent_queue)):\n            x, y = agent_queue.popleft()\n            if (x, y) == (n-1, n-1):\n                return minutes\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == '.' and not agent_visited[nx][ny] and not fire_visited[nx][ny]:\n                    agent_visited[nx][ny] = True\n                    agent_queue.append((nx, ny))\n        minutes += 1\n\n        for _ in range(len(fire_queue)):\n            x, y = fire_queue.popleft()\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == '.' and not fire_visited[nx][ny]:\n                    fire_visited[nx][ny] = True\n                    fire_queue.append((nx, ny))\n\n    return -1\n```\nThis solution has a time complexity of O(n^2) and a space complexity of O(n^2) where n is the size of the grid.\n"}
{"task_id": 141, "completion_id": 0, "completion": "Here is a Python script that implements the k-Nearest Neighbors (k-NN) classifier as a single function.\n\n```python\nimport numpy as np\nfrom scipy.spatial import distance\nfrom collections import Counter\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n\n    # Define the distance metrics\n    metrics = {\n        'euclidean': 'euclidean',\n        'manhattan': 'cityblock',\n        'cosine': 'cosine'\n    }\n\n    # If an unknown metric is supplied, fall back to the Euclidean metric\n    if metric not in metrics:\n        metric = 'euclidean'\n\n    # Compute the distance between each test sample and every training sample\n    distances = distance.cdist(X_test, X_train, metric=metrics[metric])\n\n    # For every test sample find the k training samples with the smallest distance\n    k_nearest_indices = np.argsort(distances)[:, :k]\n\n    # Predict the class by majority vote among those k neighbours\n    y_pred = []\n    for row in k_nearest_indices:\n        counts = Counter(y_train[row])\n        label, _ = counts.most_common(1)[0]\n        y_pred.append(label)\n\n    return np.array(y_pred)\n```\n\nThis script uses the `scipy.spatial.distance.cdist` function to compute the pairwise distances between the test samples and the training samples. The `np.argsort` function is used to find the indices of the k nearest neighbors for each test sample. The predicted labels are then determined by a majority vote among the k nearest neighbors. If there is a tie, the smallest label value is returned.\n"}
{"task_id": 146, "completion_id": 0, "completion": "Here is a Python script that implements the k-Nearest Neighbours (k-NN) classifier from scratch:\n\n```python\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((x1 - x2) ** 2))\n\n    def manhattan_distance(x1, x2):\n        return np.sum(np.abs(x1 - x2))\n\n    def cosine_distance(x1, x2):\n        eps = 1e-12\n        return 1 - np.dot(x1, x2) / (np.linalg.norm(x1) * np.linalg.norm(x2) + eps)\n\n    if metric == 'euclidean':\n        distance_func = euclidean_distance\n    elif metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        raise ValueError(\"Invalid metric. Choose from 'euclidean', 'manhattan', or 'cosine'.\")\n\n    y_pred = []\n    for x_test in X_test:\n        distances = [distance_func(x_test, x) for x in X]\n        k_nearest_indices = np.argsort(distances)[:k]\n        k_nearest_labels = y[k_nearest_indices]\n        values, counts = np.unique(k_nearest_labels, return_counts=True)\n        y_pred.append(values[np.argmax(counts)])\n\n    return y_pred\n```\n\nThis script first defines three distance functions: `euclidean_distance`, `manhattan_distance`, and `cosine_distance`. It then uses a dictionary to map the metric string to the corresponding distance function. It then iterates over each test sample, calculates the distance to every training sample, sorts the distances, and picks the k smallest distances. It performs a majority vote on the labels of the k nearest neighbours, and appends the predicted label to the `y_pred` list. Finally, it returns the `y_pred` list.\n"}
{"task_id": 155, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Convert state to numpy array\n    state = np.array(state)\n\n    # First affine transformation\n    z1 = np.dot(state, weights['W1']) + weights['b1']\n\n    # ReLU nonlinearity\n    a1 = np.maximum(0, z1)\n\n    # Second affine transformation\n    z2 = np.dot(a1, weights['W2']) + weights['b2']\n\n    # ReLU nonlinearity\n    a2 = np.maximum(0, z2)\n\n    # Output affine transformation\n    z3 = np.dot(a2, weights['W3']) + weights['b3']\n\n    # tanh nonlinearity\n    action = np.tanh(z3)\n\n    # Round action to 4 decimal places\n    action = [round(x, 4) for x in action.tolist()]\n\n    return action\n```\n\nThis script first converts the state to a numpy array, then performs the three affine transformations and the two nonlinearities (ReLU and tanh) as specified in the task. The resulting action vector is then rounded to the nearest 4th decimal and returned as a Python list.\n"}
{"task_id": 160, "completion_id": 0, "completion": "Here is a Python script that implements Lasso regression via coordinate descent as described in the task.\n\n```python\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    m, n = X.shape\n    if fit_intercept:\n        X = np.c_[np.ones(m), X]\n        n += 1\n    else:\n        X = np.c_[np.zeros(m), X]\n\n    w = np.zeros(n)\n    b = 0.0\n\n    for _ in range(max_iters):\n        for j in range(n):\n            if j == 0:\n                r = y - np.dot(X[:, 1:], w[1:])\n            else:\n                r = y - np.dot(X[:, :j], w[:j]) - np.dot(X[:, j+1:], w[j+1:])\n\n            if j == 0:\n                w[j] = np.sum(r) / (m * lambda_param)\n            else:\n                w[j] = soft_thresholding(np.dot(X[:, j], r), lambda_param * m) / np.sum(X[:, j]**2)\n\n        if fit_intercept:\n            b = np.mean(y - np.dot(X[:, 1:], w[1:]))\n\n    return [round(weight, 4) for weight in w], round(b, 4)\n\ndef soft_thresholding(a, tau):\n    return np.sign(a) * max(abs(a) - tau, 0)\n```\n\nThis script first checks if an intercept should be fitted. If so, it adds a column of ones to the feature matrix `X`, otherwise it adds a column of zeros. It then initializes the weight vector `w` and the bias `b` to zero.\n\nThe main loop iterates over the number of iterations specified by `max_iters`. For each iteration, it iterates over each weight in `w` (excluding the intercept). For each weight, it computes the partial residual `r`, updates the weight using the soft-thresholding operator, and updates the bias if an intercept is fitted.\n\nFinally, it returns the weights and bias, rounded to 4 decimal places.\n"}
{"task_id": 165, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    # Convert lists to numpy arrays\n    if isinstance(x, list):\n        x = np.array(x)\n    if isinstance(y, list):\n        y = np.array(y)\n\n    # Check if the vectors have the same length\n    if x.shape[0] != y.shape[0]:\n        return -1\n\n    # Compute the Hamming distance\n    distance = np.sum(x != y) / x.shape[0]\n\n    # Return the distance rounded to 4 decimal places\n    return round(distance, 4)\n```\n\nThis script first checks if the inputs are lists and converts them to numpy arrays if they are. Then it checks if the vectors have the same length. If they do not, it returns -1. If they do, it computes the Hamming distance and returns it rounded to 4 decimal places.\n"}
{"task_id": 169, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError(\"N must be a positive integer\")\n\n    if window == \"hamming\":\n        return [round(0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == \"hann\":\n        return [round(0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == \"blackman_harris\":\n        a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n        return [round(a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == \"generalized_cosine\":\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be provided for generalized cosine window\")\n        return [round(sum(a * np.cos(2 * np.pi * k * n / (N - 1)) for k, a in enumerate(coefficients)), 4) for n in range(N)]\n    else:\n        raise ValueError(f\"Unknown window type: {window}\")\n```\n\nThis script first checks if the input `N` is a positive integer. If not, it raises a `ValueError`. Then it checks the `window` type and generates the corresponding window coefficients using the appropriate mathematical formula. If the `window` type is \"generalized_cosine\", it checks if the `coefficients` list is provided, and if not, it raises a `ValueError`. Finally, it rounds each coefficient to 4 decimal places and returns the list of coefficients.\n"}
{"task_id": 171, "completion_id": 0, "completion": "Here is a Python script that implements a binary Logistic Regression classifier using mini-batch Gradient Descent.\n\n```python\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    # Convert lists to numpy arrays\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    # Add intercept term to the data\n    X_train = np.hstack((np.ones((X_train.shape[0], 1)), X_train))\n    X_test = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n\n    # Map labels to {0,1}\n    unique_labels = np.unique(y_train)\n    y_train = np.where(y_train == unique_labels[0], 0, 1)\n\n    # If all labels are the same, return the label for all test samples\n    if np.all(y_train == 0):\n        return [unique_labels[0]] * X_test.shape[0]\n    elif np.all(y_train == 1):\n        return [unique_labels[1]] * X_test.shape[0]\n\n    # Initialize weights\n    weights = np.zeros(X_train.shape[1])\n\n    # Train the weight vector\n    for _ in range(epochs):\n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train[i:i+batch_size]\n            y_batch = y_train[i:i+batch_size]\n\n            # Compute gradient\n            z = np.dot(X_batch, weights)\n            predictions = 1 / (1 + np.exp(-z))\n            gradient = np.dot(X_batch.T, (predictions - y_batch)) / y_batch.size\n\n            # Update weights\n            weights -= learning_rate * gradient\n\n    # Predict labels for test set\n    z = np.dot(X_test, weights)\n    predictions = 1 / (1 + np.exp(-z))\n    y_pred = np.where(predictions < 0.5, unique_labels[0], unique_labels[1])\n\n    return y_pred.tolist()\n```\n\nThis script first converts the input lists to numpy arrays for easier manipulation. It then adds an intercept term to the data and maps the labels to {0,1}. If all labels are the same, it simply returns the label for all test samples. Otherwise, it initializes the weights and trains the weight vector using mini-batch Gradient Descent. Finally, it predicts labels for the test set and returns them.\n"}
{"task_id": 176, "completion_id": 0, "completion": "Here is a Python script that implements the AdaBoost algorithm with decision stumps from scratch:\n\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    n_samples, n_features = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    stumps = []\n\n    for _ in range(n_estimators):\n        min_error = float('inf')\n        best_stump = None\n\n        for feature_index in range(n_features):\n            thresholds = np.unique(X_train[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(y_train.shape)\n                    predictions[X_train[:, feature_index] * polarity < threshold * polarity] = -1\n\n                    error = sum(weights[y_train != predictions])\n                    if error < min_error:\n                        min_error = error\n                        best_stump = {\n                            'feature_index': feature_index,\n                            'threshold': threshold,\n                            'polarity': polarity,\n                            'error': error\n                        }\n\n        if best_stump['error'] == 0:\n            break\n\n        alpha = 0.5 * np.log((1 - best_stump['error']) / (best_stump['error'] + 1e-10))\n        stumps.append((best_stump, alpha))\n\n        predictions = np.ones(y_train.shape)\n        feature_index = best_stump['feature_index']\n        threshold = best_stump['threshold']\n        polarity = best_stump['polarity']\n        predictions[X_train[:, feature_index] * polarity < threshold * polarity] = -1\n\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n\n    predictions = np.zeros(X_test.shape[0])\n    for stump, alpha in stumps:\n        feature_index = stump['feature_index']\n        threshold = stump['threshold']\n        polarity = stump['polarity']\n        predictions[X_test[:, feature_index] * polarity < threshold * polarity] += alpha\n\n    return [1 if prediction > 0 else 0 for prediction in predictions]\n```\n\nThis script first initializes the weights of all samples to be equal. Then it iterates over the number of estimators (decision stumps) to be trained. For each stump, it iterates over all features, thresholds, and polarities to find the best stump that minimizes the weighted error. The best stump is then added to the list of stumps and the weights are updated. Finally, the predictions for the test set are made by aggregating the predictions of all stumps.\n"}
{"task_id": 178, "completion_id": 0, "completion": "Here is a Python script that implements the Particle Swarm Optimization (PSO) algorithm to minimize the Sphere function.\n\n```python\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimizes the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimization iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    # Check if arguments are positive integers\n    if not all(isinstance(arg, int) and arg > 0 for arg in [n_dims, num_particles, num_iterations]):\n        return -1\n\n    # Initialize the random number generator\n    rng = np.random.default_rng(seed)\n\n    # Initialize the swarm\n    particles = rng.uniform(-1, 1, (num_particles, n_dims))\n    velocities = rng.uniform(-1, 1, (num_particles, n_dims))\n    p_best = particles.copy()\n    g_best = particles[np.argmin(np.sum(particles**2, axis=1))]\n\n    # Set the PSO parameters\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n\n    # Run the PSO algorithm\n    for _ in range(num_iterations):\n        # Update the velocities\n        velocities = w * velocities + c1 * rng.uniform(0, 1, (num_particles, n_dims)) * (p_best - particles) + c2 * rng.uniform(0, 1, (num_particles, n_dims)) * (g_best - particles)\n\n        # Update the positions\n        particles += velocities\n        particles = np.clip(particles, -1, 1)\n\n        # Update the personal bests\n        p_best[np.sum(particles**2, axis=1) < np.sum(p_best**2, axis=1)] = particles[np.sum(particles**2, axis=1) < np.sum(p_best**2, axis=1)]\n\n        # Update the global best\n        g_best = p_best[np.argmin(np.sum(p_best**2, axis=1))]\n\n    # Return the best objective value found\n    return round(np.min(np.sum(p_best**2, axis=1)), 4)\n```\n\nThis script first checks if the input arguments are positive integers. If not, it returns -1. Then it initializes the swarm of particles and velocities, and the personal and global best positions. The PSO parameters are set, and the PSO algorithm is run for the specified number of iterations. At each iteration, the velocities and positions of the particles are updated, and the personal and global best positions are updated if necessary. Finally, the best objective value found is returned, rounded to the nearest 4th decimal.\n"}
{"task_id": 180, "completion_id": 0, "completion": "Here is a Python script that implements the k-Nearest Neighbours algorithm as described in the task:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    predictions = []\n    for test_sample in X_test:\n        distances = []\n        for train_sample, train_target in zip(X_train, y_train):\n            distance = np.linalg.norm(np.array(test_sample) - np.array(train_sample))\n            distances.append((distance, train_target))\n        distances.sort()\n        if k == 0 or k > len(X_train):\n            k = len(X_train)\n        neighbours = distances[:k]\n        if task == \"classification\":\n            labels = [target for _, target in neighbours]\n            prediction = Counter(labels).most_common(1)[0][0]\n        else:\n            prediction = round(sum(target for _, target in neighbours) / k, 4)\n        predictions.append(prediction)\n    return predictions\n```\n\nThis script first calculates the Euclidean distance between the test sample and each training sample. It then sorts these distances and selects the k smallest ones. Depending on the task, it either selects the most common label among the neighbours (for classification) or calculates the average of the neighbours' target values (for regression), rounding to 4 decimal places. The predictions are then returned in the same order as the test samples.\n"}
{"task_id": 184, "completion_id": 0, "completion": "Here is a Python script that implements a binary decision tree classifier from scratch using the CART algorithm. The script uses Gini impurity as the impurity measure and recursive binary splitting to build the decision tree.\n\n```python\nimport numpy as np\n\nclass Node:\n    def __init__(self, predicted_class):\n        self.predicted_class = predicted_class\n        self.feature_index = 0\n        self.threshold = 0\n        self.left = None\n        self.right = None\n\ndef gini_impurity(y):\n    _, counts = np.unique(y, return_counts=True)\n    probabilities = counts / counts.sum()\n    return 1 - np.sum(np.square(probabilities))\n\ndef split_data(X, y, feature_index, threshold):\n    left_mask = X[:, feature_index] < threshold\n    right_mask = X[:, feature_index] >= threshold\n    return (X[left_mask], y[left_mask]), (X[right_mask], y[right_mask])\n\ndef find_best_split(X, y):\n    best_gain = -np.inf\n    best_feature, best_threshold = None, None\n    parent_gini = gini_impurity(y)\n    for feature_index in range(X.shape[1]):\n        sorted_indices = np.argsort(X[:, feature_index])\n        sorted_X, sorted_y = X[sorted_indices], y[sorted_indices]\n        thresholds = (sorted_X[1:] + sorted_X[:-1]) / 2\n        for threshold, y_left, y_right in zip(thresholds, sorted_y, sorted_y[1:]):\n            left_gini = gini_impurity(y_left)\n            right_gini = gini_impurity(y_right)\n            child_gini = (len(y_left) * left_gini + len(y_right) * right_gini) / len(y)\n            gain = parent_gini - child_gini\n            if gain > best_gain:\n                best_gain = gain\n                best_feature = feature_index\n                best_threshold = threshold\n    return best_feature, best_threshold\n\ndef build_tree(X, y, depth=0, max_depth=None):\n    if len(set(y)) == 1 or (max_depth is not None and depth == max_depth):\n        return Node(y[0])\n    feature_index, threshold = find_best_split(X, y)\n    if feature_index is None:\n        return Node(np.argmax(np.bincount(y)))\n    (X_left, y_left), (X_right, y_right) = split_data(X, y, feature_index, threshold)\n    node = Node(np.argmax(np.bincount(y)))\n    node.feature_index = feature_index\n    node.threshold = threshold\n    node.left = build_tree(X_left, y_left, depth + 1, max_depth)\n    node.right = build_tree(X_right, y_right, depth + 1, max_depth)\n    return node\n\ndef predict_one(x, tree):\n    if tree.predicted_class is not None:\n        return tree.predicted_class\n    if x[tree.feature_index] < tree.threshold:\n        return predict_one(x, tree.left)\n    else:\n        return predict_one(x, tree.right)\n\ndef decision_tree_predict(X_train, y_train, X_test, max_depth=None):\n    tree = build_tree(X_train, y_train, max_depth=max_depth)\n    return [predict_one(x, tree) for x in X_test]\n```\n\nThis script defines a `Node` class to represent a node in the decision tree. The `gini_impurity` function calculates the Gini impurity of a set of labels. The `split_data` function splits a dataset into two based on a feature and a threshold. The `find_best_split` function finds the best feature and threshold to split a dataset based on the Gini gain. The `build_tree` function recursively builds the decision tree. The `predict_one` function predicts the class of a single sample. Finally, the `decision_tree_predict` function builds the decision tree on the training data and predicts the class of each sample in the test data.\n"}
{"task_id": 190, "completion_id": 0, "completion": "Here is a Python script that implements the `best_gini_split` function. This function first calculates the Gini impurity of the whole dataset. Then, it iterates over all features and all unique values in those features to find the best split. It uses a helper function `gini_impurity` to calculate the Gini impurity of a node.\n\n```python\nimport numpy as np\n\ndef gini_impurity(y):\n    \"\"\"Calculate the Gini impurity of a node.\"\"\"\n    _, counts = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    impurity = 1 - np.sum(np.square(probabilities))\n    return impurity\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\"\"\"\n    # Calculate the Gini impurity of the whole dataset\n    G_whole_dataset = gini_impurity(y)\n\n    # Initialize the best split\n    best_feature_index = -1\n    best_threshold_value = None\n    best_gini = round(G_whole_dataset, 4)\n\n    # Iterate over all features\n    for feature_index in range(X.shape[1]):\n        # Get the unique values of the feature\n        unique_values = np.unique(X[:, feature_index])\n\n        # Iterate over all unique values\n        for threshold_value in unique_values:\n            # Split the data\n            left_indices = X[:, feature_index] <= threshold_value\n            right_indices = X[:, feature_index] > threshold_value\n\n            # Skip if either child node is empty\n            if np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n                continue\n\n            # Calculate the weighted Gini impurity\n            left_gini = gini_impurity(y[left_indices])\n            right_gini = gini_impurity(y[right_indices])\n            G_split = (np.sum(left_indices) / len(y)) * left_gini + (np.sum(right_indices) / len(y)) * right_gini\n\n            # Update the best split if necessary\n            if G_split < best_gini or (np.isclose(G_split, best_gini) and (feature_index < best_feature_index or (feature_index == best_feature_index and threshold_value < best_threshold_value))):\n                best_feature_index = feature_index\n                best_threshold_value = threshold_value\n                best_gini = round(G_split, 4)\n\n    return (best_feature_index, best_threshold_value, best_gini)\n```\n\nThis script assumes that `X` and `y` are numpy arrays. If they are not, you can convert them to numpy arrays at the beginning of the function using `np.array(X)` and `np.array(y)`.\n"}
{"task_id": 191, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\nfrom typing import Iterable\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    def euclidean(x, y):\n        return round(np.sqrt(np.sum((np.array(x) - np.array(y)) ** 2)), 4)\n\n    def manhattan(x, y):\n        return round(np.sum(np.abs(np.array(x) - np.array(y))), 4)\n\n    def chebyshev(x, y):\n        return round(np.max(np.abs(np.array(x) - np.array(y))), 4)\n\n    def cosine(x, y):\n        x, y = np.array(x), np.array(y)\n        norm_x, norm_y = np.linalg.norm(x), np.linalg.norm(y)\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        return round(1 - np.dot(x, y) / (norm_x * norm_y), 4)\n\n    metrics = {\n        'euclidean': euclidean,\n        'manhattan': manhattan,\n        'chebyshev': chebyshev,\n        'cosine': cosine\n    }\n\n    def d(x, y):\n        if name not in metrics:\n            return -1\n        try:\n            x, y = np.array(x, dtype=float), np.array(y, dtype=float)\n            if x.ndim != 1 or y.ndim != 1 or x.size == 0 or y.size == 0 or x.size != y.size:\n                return -1\n        except ValueError:\n            return -1\n        return metrics[name](x, y)\n\n    return d\n```\n\nThis Python script defines a factory function `metric` that takes a string `name` as input and returns a callable `d`. The callable `d` computes the distance between two numeric vectors based on the metric name. The factory function also includes validation checks for the input vectors and the metric name. If the validation checks fail, the callable returns `-1`.\n"}
{"task_id": 197, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n\n    if md_action:\n        action_dim = len(env.action_space.spaces)\n        for space in env.action_space.spaces:\n            if hasattr(space, 'n'):\n                n_actions_per_dim.append(space.n)\n            else:\n                n_actions_per_dim.append(np.inf)\n                cont_action = True\n\n        if not cont_action:\n            action_ids = list(product(*[range(n) for n in n_actions_per_dim]))\n    else:\n        action_dim = 1\n        if hasattr(env.action_space, 'n'):\n            n_actions_per_dim.append(env.action_space.n)\n            if not cont_action:\n                action_ids = list(range(env.action_space.n))\n        else:\n            n_actions_per_dim.append(np.inf)\n\n    return n_actions_per_dim, action_ids, action_dim\n```\n\nThis script first checks if the action space is multi-dimensional. If it is, it iterates over each sub-space and checks if it is discrete or continuous. If it is discrete, it adds the number of actions to `n_actions_per_dim`. If it is continuous, it sets the corresponding entry in `n_actions_per_dim` to `numpy.inf` and sets `cont_action` to `True`. If `cont_action` is `False` after the loop, it calculates all possible actions via the cartesian product of the ranges for each dimension and adds them to `action_ids`. If the action space is not multi-dimensional, it checks if it is discrete or continuous in the same way.\n"}
{"task_id": 198, "completion_id": 0, "completion": "Here is a Python script that implements the \u03b2-maximisation step in Latent Dirichlet Allocation:\n\n```python\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # Initialize \u03b2\n    beta = np.zeros((V, len(phi[0][0])))\n\n    # Compute the proportionality\n    for d in range(len(phi)):\n        for n in range(len(phi[d])):\n            beta[corpus[d][n]] += phi[d][n]\n\n    # Normalize \u03b2\n    beta /= np.sum(beta, axis=0)\n\n    # Round \u03b2 to 4 decimal places\n    beta = np.round(beta, 4)\n\n    # Convert to list of lists\n    beta = beta.tolist()\n\n    return beta\n```\n\nThis script first initializes \u03b2 as a V x T matrix of zeros. It then computes the proportionality of \u03b2 by iterating over all documents, tokens, and topics, and adding the variational parameter \u03d5 to the corresponding entry in \u03b2. After normalizing \u03b2, it rounds all entries to 4 decimal places and converts the NumPy array to a list of lists before returning it.\n"}
{"task_id": 202, "completion_id": 0, "completion": "Here is a Python script that implements the PAM clustering algorithm:\n\n```python\nimport numpy as np\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    def compute_cost(X, medoids, labels):\n        cost = 0\n        for i, medoid in enumerate(medoids):\n            for j, label in enumerate(labels):\n                if i == label:\n                    cost += np.linalg.norm(X[j] - medoid)\n        return cost\n\n    def assign_labels(X, medoids):\n        labels = np.argmin([[np.linalg.norm(sample - medoid) for medoid in medoids] for sample in X], axis=1)\n        return labels\n\n    medoids = X[:k].copy()\n    labels = assign_labels(X, medoids)\n    cost = compute_cost(X, medoids, labels)\n\n    while True:\n        best_swap = None\n        best_cost = cost\n        for i, medoid in enumerate(medoids):\n            for j, sample in enumerate(X):\n                if sample not in medoids:\n                    new_medoids = medoids.copy()\n                    new_medoids[i] = sample\n                    new_labels = assign_labels(X, new_medoids)\n                    new_cost = compute_cost(X, new_medoids, new_labels)\n                    if new_cost < best_cost:\n                        best_cost = new_cost\n                        best_swap = (i, j)\n        if best_swap is not None:\n            i, j = best_swap\n            medoids[i] = X[j]\n            labels = assign_labels(X, medoids)\n            cost = best_cost\n        else:\n            break\n\n    return labels.tolist()\n```\n\nThis script first defines two helper functions: `compute_cost` and `assign_labels`. The `compute_cost` function computes the total cost of the current clustering, and the `assign_labels` function assigns each sample to the closest medoid.\n\nThe main function `pam_clustering` initializes the medoids and labels, then enters a loop where it attempts to find the best swap that reduces the total cost. If a swap is found that reduces the cost, it updates the medoids and labels accordingly. If no swap can reduce the cost, it breaks the loop and returns the final labels.\n"}
{"task_id": 216, "completion_id": 0, "completion": "Here is a Python script that implements the Elastic Net Regression from scratch using batch gradient descent.\n\n```python\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    # Check if the shapes of x_train and x_test are compatible\n    if len(x_train[0]) != len(x_test[0]):\n        return -1\n\n    # Check if n_iterations is smaller than 1\n    if n_iterations < 1:\n        return -1\n\n    # Convert the inputs to numpy arrays\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n\n    # Generate polynomial features\n    x_train = np.hstack([x_train**(i+1) for i in range(degree)])\n    x_test = np.hstack([x_test**(i+1) for i in range(degree)])\n\n    # Standardize the features\n    x_train[:,1:] = (x_train[:,1:] - np.mean(x_train[:,1:], axis=0)) / np.std(x_train[:,1:], axis=0)\n    x_test = (x_test - np.mean(x_test, axis=0)) / np.std(x_test, axis=0)\n\n    # Add a bias column to the feature matrix\n    x_train = np.hstack([np.ones((x_train.shape[0], 1)), x_train])\n    x_test = np.hstack([np.ones((x_test.shape[0], 1)), x_test])\n\n    # Initialize the weight vector\n    weights = np.zeros(x_train.shape[1])\n\n    # Train the model\n    for _ in range(n_iterations):\n        y_pred = np.dot(x_train, weights)\n        residuals = y_pred - y_train\n        gradient = np.dot(x_train.T, residuals) + reg_factor * (l1_ratio * np.sign(weights) + (1 - l1_ratio) * weights)\n        weights -= learning_rate * gradient\n\n    # Make predictions for x_test\n    y_pred = np.dot(x_test, weights)\n\n    # Return the predictions rounded to 4 decimals\n    return np.round(y_pred, 4).tolist()\n```\n\nThis script first checks if the shapes of `x_train` and `x_test` are compatible and if `n_iterations` is smaller than 1. If not, it returns `-1`. Then it converts the inputs to numpy arrays and generates polynomial features of the given degree. It standardizes the features and adds a bias column to the feature matrix. It initializes the weight vector and trains the model for `n_iterations` passes of batch gradient descent. Finally, it makes predictions for `x_test` and returns the predictions rounded to 4 decimals.\n"}
{"task_id": 217, "completion_id": 0, "completion": "Here is a Python script that implements the function `logistic_components` as described in the task:\n\n```python\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to numpy arrays\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n\n    # Compute sigmoid\n    sigmoid = 1 / (1 + np.exp(-predicted))\n\n    # Compute gradient\n    grad = actual * sigmoid - actual * predicted * sigmoid\n\n    # Compute Hessian\n    hess = sigmoid * (1 - sigmoid)\n\n    # Round to 6 decimal places\n    grad = np.round(grad, 6)\n    hess = np.round(hess, 6)\n    sigmoid = np.round(sigmoid, 6)\n\n    # Convert back to Python lists\n    grad = grad.tolist()\n    hess = hess.tolist()\n    sigmoid = sigmoid.tolist()\n\n    return grad, hess, sigmoid\n```\n\nThis function first converts the inputs to `numpy.ndarray` for vectorized computation. It then computes the sigmoid, gradient, and Hessian for each observation. The results are rounded to 6 decimal places and converted back to Python lists before being returned.\n"}
{"task_id": 218, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    def get_score(hand):\n        total = sum(hand)\n        if total + 10 <= 21 and 1 in hand:\n            total += 10\n        return total if total <= 21 else -1\n\n    player_score = get_score(player)\n    dealer_score = get_score(dealer)\n\n    if player_score == -1:\n        return -1\n    elif dealer_score == -1:\n        return 1\n    elif player_score > dealer_score:\n        return 1 if (len(player) == 2 and player_score == 21) else 1\n    elif player_score < dealer_score:\n        return -1\n    else:\n        return 0\n```\n\nThis script defines a helper function `get_score` that calculates the score of a hand. It first sums the cards in the hand. If the sum is less than or equal to 11 (the value of an Ace), it adds 10 to the sum (this is the effect of counting an Ace as 11 instead of 1). If the resulting sum is greater than 21, it returns -1 (indicating a bust).\n\nThe main function `blackjack_outcome` first calculates the scores of the player's and dealer's hands. If the player's score is -1 (indicating a bust), it returns -1 (indicating a loss). If the dealer's score is -1 (indicating a bust), it returns 1 (indicating a win). Otherwise, it compares the scores. If the player's score is higher, it returns 1 (indicating a win) unless the player has a natural blackjack (a two-card hand consisting of an Ace and a 10-value card), in which case it returns 1.5. If the dealer's score is higher, it returns -1 (indicating a loss). If the scores are equal, it returns 0 (indicating a draw).\n"}
{"task_id": 221, "completion_id": 0, "completion": "Here is a Python script that implements the MSLE metric:\n\n```python\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper that returns element-wise squared log errors.\"\"\"\n    return (np.log(1 + actual) - np.log(1 + predicted)) ** 2\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\"\"\"\n    # Input validation\n    if len(actual) != len(predicted):\n        return -1\n    if any(x < 0 for x in actual) or any(x < 0 for x in predicted):\n        return -1\n\n    # Calculate squared log errors\n    squared_log_errors = squared_log_error(np.array(actual), np.array(predicted))\n\n    # Return mean of squared errors, rounded to 4 decimal places\n    return round(np.mean(squared_log_errors), 4)\n```\n\nThis script first defines a helper function `squared_log_error` that calculates the squared logarithmic error for each pair of actual and predicted values. It then defines the main function `mean_squared_log_error` that first checks if the inputs are valid, and if they are, it calculates the squared log errors and returns their mean, rounded to 4 decimal places. If the inputs are invalid, it returns -1.\n"}
{"task_id": 222, "completion_id": 0, "completion": "Here is the Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    z = np.array(z)\n    positive = np.where(z >= 0, 1 / (1 + np.exp(-z)), np.exp(z) / (1 + np.exp(z)))\n    return np.round(positive, 4).tolist()\n```\n\nThis function first converts the input to a NumPy array. Then it computes the sigmoid function element-wise for positive and negative values separately to avoid overflow for large inputs. Finally, it rounds the result to 4 decimal places and converts the NumPy array back to a Python list.\n"}
{"task_id": 224, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, (list, np.ndarray)):\n        return [leaky_relu(zi, a) for zi in z]\n    else:\n        return max(z, a*z)\n```\n\nThis function works by recursively applying the Leaky ReLU activation to each element of the input `z`. If `z` is a list or `numpy.ndarray`, it applies the function to each element. If `z` is a scalar, it applies the Leaky ReLU activation to `z`.\n\nThe Leaky ReLU activation is applied by taking the maximum of `z` and `a*z`. If `z` is greater than or equal to 0, this is just `z`. If `z` is less than 0, this is `a*z`.\n\nThe function returns a list with the same structure as the input, where each value has been transformed by the Leaky ReLU activation.\n"}
{"task_id": 226, "completion_id": 0, "completion": "Here is a Python script that implements the AdaBoost algorithm with decision stumps:\n\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    n_samples, n_features = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    clfs = []\n\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_feature, best_threshold, best_polarity = None, None, None\n\n        for feature_i in range(n_features):\n            feature_values = X_train[:, feature_i]\n            unique_values = np.unique(feature_values)\n\n            for threshold in unique_values:\n                polarity = 1\n                predictions = np.ones(n_samples)\n                predictions[feature_values < threshold] = -1\n\n                error = np.sum(weights[predictions != y_train])\n\n                if error > 0.5:\n                    error = 1 - error\n                    polarity = -1\n\n                if error < best_error:\n                    best_error = error\n                    best_feature = feature_i\n                    best_threshold = threshold\n                    best_polarity = polarity\n\n        alpha = 0.5 * np.log((1 - best_error) / (best_error + 1e-10))\n        predictions = np.ones(n_samples)\n        negative_idx = X_train[:, best_feature] < best_threshold\n        predictions[negative_idx] = -1\n        predictions *= best_polarity\n\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n\n        clfs.append((best_feature, best_threshold, best_polarity, alpha))\n\n    y_pred = np.zeros(X_test.shape[0])\n    for clf in clfs:\n        feature_i, threshold, polarity, alpha = clf\n        predictions = np.ones(X_test.shape[0])\n        negative_idx = X_test[:, feature_i] < threshold\n        predictions[negative_idx] = -1\n        predictions *= polarity\n        y_pred += alpha * predictions\n\n    y_pred = [1 if p > 0 else -1 for p in y_pred]\n    return y_pred\n```\n\nThis script first initializes the weights of all samples to be equal. Then, for each weak learner (decision stump), it finds the feature, threshold, and polarity that minimizes the weighted classification error. The learner weight is computed based on the error. The sample weights are then updated based on the misclassified samples. Finally, the ensemble of decision stumps is used to predict the labels of the test data.\n"}
{"task_id": 241, "completion_id": 0, "completion": "Here is a Python script that implements the orthogonal weight initializer as described:\n\n```python\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n\n    d0, d1 = shape[0], np.prod(shape[1:])\n    A = np.random.normal(size=(d0, d1))\n    U, _, Vt = np.linalg.svd(A, full_matrices=False)\n\n    Q = U if U.shape == A.shape else Vt\n    result = Q.reshape(shape) * scale\n\n    return result.tolist()\n```\n\nThis script first checks if the input shape has at least two dimensions. If not, it returns -1. Then it generates a random matrix A, computes its singular value decomposition, and chooses the factor that has the same size as A. The chosen factor is then reshaped to the desired shape and scaled by the given factor. The resulting matrix is returned as a list of lists.\n\nPlease note that the orthogonality condition is not checked in this script. It is assumed that the SVD of a random matrix will always yield an orthogonal matrix.\n"}
{"task_id": 243, "completion_id": 0, "completion": "Here is a Python script that implements the forward pass of the Actor-Critic network as described in the task:\n\n```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Convert state to numpy array\n    state = np.array(state)\n\n    # Calculate z1\n    z1 = np.maximum(0, np.sum(state))\n\n    # Calculate z2\n    z2 = 4 * z1\n\n    # Calculate z3\n    z3 = 16 * z1\n\n    # Calculate logits\n    logits = 64 * z1\n\n    # Calculate action probabilities\n    action_probs = np.full(3, 1/3)\n\n    # Calculate state value\n    state_value = 4 * z3\n\n    # Round action probabilities and state value to 4 decimal places\n    action_probs = np.round(action_probs, 4)\n    state_value = np.round(state_value, 4)\n\n    return action_probs.tolist(), state_value\n```\n\nThis script first converts the input state to a numpy array for easier computation. Then it calculates the intermediate values z1, z2, and z3 using the given formulas. The logits are calculated as the product of z3 and a constant (64). The action probabilities are set to be equal for all actions (1/3), and the state value is calculated as the product of z3 and another constant (4). Finally, the action probabilities and state value are rounded to 4 decimal places and returned as a tuple.\n"}
{"task_id": 249, "completion_id": 0, "completion": "Here is a Python script that implements the `actor_critic_forward` function:\n\n```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    # Convert state and parameters to numpy arrays\n    state = np.array(state)\n    W1, b1, W2, b2, W3, b3, Wa, ba, Wc, bc = [np.array(params[key]) for key in ['W1', 'b1', 'W2', 'b2', 'W3', 'b3', 'Wa', 'ba', 'Wc', 'bc']]\n\n    # Perform three affine transformations followed by ReLU on the shared part\n    hidden = np.maximum(0, np.dot(W1, state) + b1)\n    hidden = np.maximum(0, np.dot(W2, hidden) + b2)\n    hidden = np.maximum(0, np.dot(W3, hidden) + b3)\n\n    # Feed the final hidden vector into the actor head and convert the resulting raw scores into a probability distribution with the soft-max function\n    actor_output = np.dot(Wa, hidden) + ba\n    actor_output = np.exp(actor_output)\n    probabilities = actor_output / np.sum(actor_output)\n\n    # Feed the same hidden vector into the critic head to obtain the scalar state value\n    critic_output = np.dot(Wc, hidden) + bc\n    value = critic_output[0]\n\n    # Round every probability and the state value to 4 decimal places before returning\n    probabilities = [round(prob, 4) for prob in probabilities]\n    value = round(float(value), 4)\n\n    return probabilities, value\n```\n\nThis script first converts the state and parameters to NumPy arrays for easier manipulation. It then performs the three affine transformations followed by ReLU on the shared part of the network. The final hidden vector is then fed into the actor head to obtain raw scores, which are converted into a probability distribution using the soft-max function. The same hidden vector is then fed into the critic head to obtain the scalar state value. Finally, the probabilities and the state value are rounded to 4 decimal places before being returned.\n"}
{"task_id": 253, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l1_penalty = l1_ratio * np.linalg.norm(w, 1)\n    l2_penalty = (1 - l1_ratio) * 0.5 * np.linalg.norm(w) ** 2\n    penalty = alpha * (l1_penalty + l2_penalty)\n    if gradient:\n        gradient = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n        return np.round(gradient, 4).tolist()\n    else:\n        return round(penalty, 4)\n```\n\nThis function first converts the weight vector to a NumPy array for easier manipulation. It then calculates the L1 and L2 penalties, adds them together, and multiplies by the regularization strength to get the total penalty. If the `gradient` flag is set to `True`, it calculates the gradient and rounds each element to 4 decimal places before returning it as a list. If the `gradient` flag is `False`, it simply returns the penalty rounded to 4 decimal places.\n"}
{"task_id": 256, "completion_id": 0, "completion": "Here is a Python script that implements the `grad_check_RNN` function as described in the task:\n\n```python\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in [\"X\", \"y\"]:\n        return None\n\n    if param_name in [\"Ba\", \"Bx\"]:\n        param_name = param_name.lower()\n\n    param = model.parameters[param_name]\n    grads = np.zeros_like(param, dtype=np.float64)\n\n    for idx, _ in np.ndenumerate(param):\n        param[idx] += epsilon\n        preds = [model.forward(X[:, :, t]) for t in range(n_t)]\n        loss_plus = loss_func(preds)\n\n        param[idx] -= 2 * epsilon\n        preds = [model.forward(X[:, :, t]) for t in range(n_t)]\n        loss_minus = loss_func(preds)\n\n        grads[idx] = (loss_plus - loss_minus) / (2 * epsilon)\n        param[idx] += epsilon\n\n    return grads.T\n```\n\nThis script first checks if the parameter name is \"X\" or \"y\", and if so, it returns None. If the parameter name is \"Ba\" or \"Bx\", it redirects to the lower-case keys. Then it iterates over every element of the chosen parameter, perturbs it by epsilon, runs the forward loop n_t times for each perturbation, collects the predictions and evaluates the loss, and approximates the partial derivative using the centred finite-difference formula. The numerical gradient is stored in grads and returned as the transpose of the accumulated array.\n"}
{"task_id": 257, "completion_id": 0, "completion": "Here is a Python script that implements the AdaBoost algorithm with decision stumps:\n\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    # Initialize weights\n    m, n = X_train.shape\n    w = np.ones(m) / m\n    clfs = []\n\n    # Train weak classifiers\n    for _ in range(n_clf):\n        best_clf, best_error, best_pred = None, float('inf'), None\n\n        # Find the best decision stump\n        for d in range(n):\n            for sign in [-1, 1]:\n                pred = sign * X_train[:, d]\n                error = sum(w[y_train != pred])\n\n                if error < best_error:\n                    best_clf, best_error, best_pred = (d, sign), error, pred\n\n        # Compute alpha\n        alpha = 0.5 * np.log((1 - best_error) / best_error)\n        clfs.append((best_clf, alpha))\n\n        # Update weights\n        w *= np.exp(-alpha * y_train * best_pred)\n        w /= np.sum(w)\n\n    # Predict labels\n    y_pred = np.zeros(X_test.shape[0])\n    for clf, alpha in clfs:\n        d, sign = clf\n        y_pred += alpha * sign * X_test[:, d]\n\n    return [1 if y > 0 else -1 for y in y_pred]\n```\n\nThis script first initializes the weights for each training example. It then trains `n_clf` weak classifiers, each time choosing the decision stump that minimizes the weighted classification error. The weight of each stump is computed as $\\alpha_t = \\frac12 \\ln\\!\\left(\\frac{1-\\varepsilon_t}{\\varepsilon_t}\\right)$, where $\\varepsilon_t$ is the stump\u2019s weighted error. Finally, it predicts the labels for `X_test` by aggregating the votes of all stumps.\n"}
{"task_id": 261, "completion_id": 0, "completion": "Here is the Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError(\"Shape must have at least two dimensions\")\n\n    fan_in = shape[0]\n    fan_out = shape[1]\n\n    if len(shape) > 2:\n        receptive_field_size = np.prod(shape[2:])\n        fan_in *= receptive_field_size\n        fan_out *= receptive_field_size\n\n    stddev = np.sqrt(2 / (fan_in + fan_out))\n    return np.random.normal(loc=0.0, scale=stddev, size=shape)\n```\n\nThis script first checks if the shape has at least two dimensions. If not, it raises a ValueError. Then it calculates the fan_in and fan_out values based on the shape. If the shape has more than two dimensions, it also calculates the receptive field size and adjusts the fan_in and fan_out accordingly. Finally, it calculates the standard deviation and returns a NumPy array of the requested shape, filled with random numbers drawn from a normal distribution with mean 0 and the calculated standard deviation.\n"}
{"task_id": 266, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    adj_list = [[] for _ in V]\n    for u, v in E:\n        adj_list[V.index(u)].append(v)\n        adj_list[V.index(v)].append(u)\n    for i in range(len(adj_list)):\n        adj_list[i] = sorted(list(set(adj_list[i])), key=V.index)\n    return adj_list\n```\n\nThis script first initializes an empty list for each vertex in `V`. Then, for each edge in `E`, it appends the vertices to the corresponding adjacency list. Finally, it removes duplicates and sorts the lists according to the order of `V`.\n\nPlease note that this script assumes that the vertices in `E` are present in `V`. If this is not the case, you might want to add some error checking to handle this situation.\n"}
{"task_id": 267, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_feature, best_threshold, best_polarity, best_error = None, None, None, None\n\n    # Check all features\n    for feature in range(n_features):\n        feature_values = X[:, feature]\n        unique_values = np.unique(feature_values)\n\n        # Check all unique feature values as thresholds\n        for threshold in unique_values:\n            # Try both polarities\n            for polarity in [1, -1]:\n                predictions = polarity * ((X[:, feature] < threshold) * 2 - 1)\n                errors = (predictions != y) * sample_weights\n                error = np.sum(errors)\n\n                # Update best stump if necessary\n                if best_error is None or error < best_error:\n                    best_feature = feature\n                    best_threshold = threshold\n                    best_polarity = polarity\n                    best_error = error\n\n    return {\n        \"feature_index\": best_feature,\n        \"threshold\": round(best_threshold, 4),\n        \"polarity\": best_polarity,\n        \"weighted_error\": round(best_error, 4)\n    }\n```\n\nThis script works by iterating over all features, all unique feature values as thresholds, and both polarities. For each combination, it calculates the weighted error and updates the best stump if necessary.\n"}
{"task_id": 273, "completion_id": 0, "completion": "Here is a Python script that implements the `best_split` function as described:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef entropy(labels):\n    \"\"\"Calculate the entropy of a set of labels.\"\"\"\n    n = len(labels)\n    counts = Counter(labels)\n    return -sum(count / n * math.log2(count / n) for count in counts.values())\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\"\"\"\n    feature, target = np.array(feature), np.array(target)\n    assert len(feature) == len(target)\n\n    # Sort the feature and target arrays together\n    sorted_indices = np.argsort(feature)\n    sorted_feature, sorted_target = feature[sorted_indices], target[sorted_indices]\n\n    # Initialize variables to keep track of the best split\n    best_threshold, best_information_gain = None, 0.0\n\n    # Calculate the entropy of the parent node\n    parent_entropy = entropy(target)\n\n    # Iterate over each possible split point\n    for i in range(1, len(sorted_feature)):\n        # If the current and previous feature values are the same, skip this split\n        if sorted_feature[i] == sorted_feature[i - 1]:\n            continue\n\n        # Calculate the entropy of the left and right subsets\n        left_entropy = entropy(sorted_target[:i])\n        right_entropy = entropy(sorted_target[i:])\n\n        # Calculate the information gain of this split\n        information_gain = parent_entropy - (i / len(sorted_feature)) * left_entropy - ((len(sorted_feature) - i) / len(sorted_feature)) * right_entropy\n\n        # If this split improves the best information gain so far, update the best split\n        if information_gain > best_information_gain:\n            best_threshold = (sorted_feature[i] + sorted_feature[i - 1]) / 2\n            best_information_gain = information_gain\n\n    # If no split improved the information gain, return (None, 0.0)\n    if best_threshold is None:\n        return None, 0.0\n\n    # Otherwise, return the best threshold and information gain, rounded to 4 decimal places\n    return round(best_threshold, 4), round(best_information_gain, 4)\n```\n\nThis script first sorts the feature and target arrays together, then iterates over each possible split point. For each split point, it calculates the entropy of the left and right subsets, and the information gain of the split. If this split improves the best information gain so far, it updates the best split. If no split improved the information gain, it returns (None, 0.0). Otherwise, it returns the best threshold and information gain, rounded to 4 decimal places.\n"}
{"task_id": 286, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    return [[0.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    return [[1.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    return [[random.uniform(low, high) for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    if name in globals() and callable(globals()[name]):\n        return globals()[name]\n    else:\n        raise ValueError(\"Invalid initialization function.\")\n```\n\nThis script first defines three initializer functions: `zeros_init`, `ones_init`, and `random_uniform_init`. Then it defines the `get_initializer` function that retrieves the initializer function based on the name provided. If the name does not correspond to a valid initializer, it raises a `ValueError`.\n"}
{"task_id": 287, "completion_id": 0, "completion": "Here is a Python script that implements the forward and backward passes of a 2-D average-pooling layer:\n\n```python\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n\n    # Compute output shape\n    out_h = (H - p_h) // s_h + 1\n    out_w = (W - p_w) // s_w + 1\n\n    # Initialize output and gradient arrays\n    pooled_output = np.zeros((N, C, out_h, out_w))\n    grad_input = np.zeros_like(X)\n\n    # Perform forward pass\n    for n in range(N):\n        for c in range(C):\n            for h in range(out_h):\n                for w in range(out_w):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n\n                    pooled_output[n, c, h, w] = np.mean(X[n, c, h_start:h_end, w_start:w_end])\n\n    # Perform backward pass\n    for n in range(N):\n        for c in range(C):\n            for h in range(out_h):\n                for w in range(out_w):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n\n                    grad_input[n, c, h_start:h_end, w_start:w_end] = accum_grad[n, c, h, w] / (p_h * p_w)\n\n    # Round and convert to list\n    pooled_output = np.round(pooled_output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n\n    return pooled_output, grad_input\n```\n\nThis script first computes the output shape of the pooling layer, then initializes the output and gradient arrays. It then performs the forward pass by iterating over the input array and computing the average of each pooling window. The backward pass is performed by distributing the gradient equally to each element in each pooling window. Finally, the arrays are rounded to the nearest 4-th decimal and converted to Python lists using `tolist()`.\n"}
{"task_id": 290, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value)\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature:\n            return False\n        if not np.isclose(tree_a.threshold, tree_b.threshold):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    else:\n        return False\n```\n\nThis code first checks if both trees are leaves. If they are, it compares their values using numpy's `allclose` function. If they are not leaves, it checks if both trees are nodes. If they are, it checks if their features and thresholds are equal (or close, for the threshold). If they are, it recursively compares their left and right children. If they are not nodes, it returns False.\n"}
{"task_id": 292, "completion_id": 0, "completion": "Here is the Python function that performs the single-point column crossover for a single layer\u2019s weight matrix:\n\n```python\nimport numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                            parent2: list[list[int | float]],\n                            cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    # Convert the input lists to numpy arrays\n    parent1 = np.array(parent1)\n    parent2 = np.array(parent2)\n\n    # Check if the shapes of the parents are the same\n    if parent1.shape != parent2.shape:\n        return -1\n\n    # Create the children matrices\n    child1 = np.hstack((parent1[:, :cutoff], parent2[:, cutoff:]))\n    child2 = np.hstack((parent2[:, :cutoff], parent1[:, cutoff:]))\n\n    # Convert the children matrices back to lists\n    child1 = child1.tolist()\n    child2 = child2.tolist()\n\n    return (child1, child2)\n```\n\nThis function first converts the input lists to numpy arrays for easier manipulation. It then checks if the shapes of the parents are the same. If they are not, it returns -1. If they are, it creates the children matrices by concatenating the appropriate columns from each parent. Finally, it converts the children matrices back to lists and returns them as a tuple.\n"}
{"task_id": 294, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {}\n    for i, edges in enumerate(G['_G']):\n        label = list(G['_V2I'].keys())[list(G['_V2I'].values()).index(i)]\n        adj[label] = []\n        for edge in edges:\n            adj[label].append((edge[1], edge[2]))\n            if not G['is_directed']:\n                adj[edge[1]].append((label, edge[2]))\n        adj[label] = sorted(adj[label], key=lambda x: x[0])\n    return adj\n```\n\nThis script first initializes an empty dictionary `adj`. Then it iterates over the adjacency lists in `G['_G']`. For each adjacency list, it finds the corresponding vertex label using the `_V2I` dictionary and adds it to the `adj` dictionary. Then it iterates over the edges in the adjacency list and adds them to the list of neighbours of the corresponding vertex in `adj`. If the graph is undirected, it also adds the reverse edge to the list of neighbours of the target vertex. Finally, it sorts the list of neighbours of each vertex in `adj` in lexicographical order by the neighbour label.\n"}
{"task_id": 296, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    # Convert the input to a numpy array\n    x = np.array(x)\n\n    # Check if all elements are either 0 or 1\n    return np.all((x==0) | (x==1))\n```\n\nThis function works by converting the input to a numpy array and then checking if all elements are either 0 or 1. The `np.all` function is used to ensure that all elements satisfy the condition, and the `|` operator is used to combine the conditions for 0 and 1. If all elements are binary, the function returns `True`; otherwise, it returns `False`.\n"}
{"task_id": 298, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    # Preprocess the corpus\n    corpus = [[\"<bol>\"]*(N-1) + sentence.split() + [\"<eol>\"]*(N-1) for sentence in corpus]\n    query = [\"<bol>\"]*(N-1) + query.split() + [\"<eol>\"]*(N-1)\n\n    # Count N-grams and (N-1)-gram prefixes\n    ngram_counts = defaultdict(int)\n    prefix_counts = defaultdict(int)\n    for sentence in corpus:\n        for i in range(len(sentence) - N + 1):\n            ngram = tuple(sentence[i:i+N])\n            prefix = tuple(sentence[i:i+N-1])\n            ngram_counts[ngram] += 1\n            prefix_counts[prefix] += 1\n\n    # Compute the MLE conditional probability\n    log_prob = 0.0\n    for i in range(len(query) - N + 1):\n        ngram = tuple(query[i:i+N])\n        prefix = tuple(query[i:i+N-1])\n        if prefix_counts[prefix] == 0 or ngram_counts[ngram] == 0:\n            return float('-inf')\n        prob = ngram_counts[ngram] / prefix_counts[prefix]\n        log_prob += math.log(prob)\n\n    return round(log_prob, 4)\n```\n\nThis script first preprocesses the corpus and the query by splitting them into tokens and padding them with special tokens. It then counts the N-grams and their (N-1)-gram prefixes in the corpus. For each N-gram in the query, it computes the MLE conditional probability and adds the log of this probability to the total log-probability. If any necessary N-gram is unseen in the corpus, it returns float('-inf'). Finally, it returns the total log-probability rounded to 4 decimal places.\n"}
{"task_id": 302, "completion_id": 0, "completion": "Here is a Python script that implements the Spectral Clustering algorithm from scratch:\n\n```python\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n, d = X.shape\n\n    # Step 1: Build a weighted adjacency matrix W\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                W[i, j] = 1 / (1 + np.linalg.norm(X[i] - X[j]))\n\n    # Step 2: Compute the (unnormalised) graph Laplacian L\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n\n    # Step 3: Obtain the first k eigenvectors of L\n    _, eigenvectors = np.linalg.eig(L)\n    E = eigenvectors[:, :k]\n\n    # Step 4: Run k-means on the rows of E\n    centroids = E[:k]\n    assignments = np.zeros(n, dtype=int)\n    for _ in range(100):\n        # Assign each data point to the closest centroid\n        for i in range(n):\n            distances = np.linalg.norm(E[i] - centroids, axis=1)\n            assignments[i] = np.argmin(distances)\n\n        # Update the centroids\n        for j in range(k):\n            if np.any(assignments == j):\n                centroids[j] = np.mean(E[assignments == j], axis=0)\n            else:\n                # If a cluster becomes empty, re-initialize its centroid with a random row of E\n                centroids[j] = E[np.random.randint(n)]\n\n    return assignments.tolist()\n```\n\nPlease note that this is a simple implementation and may not work well for all types of data. For example, it does not handle the case where a cluster becomes empty, and it does not normalize the Laplacian matrix.\n"}
{"task_id": 303, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_mine, prev_label = params[prev_ix]\n    curr_mine, curr_label = params[ix]\n\n    return f\"\"\"------------------------- DEBUG -------------------------\nMine (prev) [{prev_label}]:\n{prev_mine}\n\nTheirs (prev) [{prev_label}]:\n{golds[prev_label]}\n\nMine [{curr_label}]:\n{curr_mine}\n\nTheirs [{curr_label}]:\n{golds[curr_label]}{warn_str}\n----------------------- END DEBUG -----------------------\"\"\"\n```\n\nThis script defines a function `err_fmt` that takes four arguments: `params`, `golds`, `ix`, and `warn_str`. It first calculates the index of the previous element in `params`. It then unpacks the previous mine and label, as well as the current mine and label. Finally, it returns a formatted string that follows the exact layout described in the task statement.\n"}
{"task_id": 304, "completion_id": 0, "completion": "Here is a Python script that implements the function `bayesian_posterior_mean` as described in the task.\n\n```python\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    # Add intercept column if necessary\n    if fit_intercept:\n        X = np.insert(X, 0, 1, axis=1)\n\n    # Broadcast mu to the correct length\n    if np.isscalar(mu):\n        mu = np.full(X.shape[1], mu)\n\n    # Convert V to the correct form\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif np.isscalar(V):\n        V *= np.eye(X.shape[1])\n    elif isinstance(V, (list, tuple)):\n        V = np.diag(V)\n\n    # Compute the posterior mean\n    V_inv = np.linalg.inv(V)\n    Sigma_b = np.linalg.inv(V_inv + X.T @ X)\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n\n    # Round to 4 decimal places\n    mu_b = [round(coef, 4) for coef in mu_b]\n\n    return mu_b\n```\n\nThis script first checks if an intercept column should be added to the design matrix `X`, then broadcasts the prior mean `mu` to the correct length, converts the prior scale `V` to the correct form, computes the posterior mean, and finally rounds the coefficients to 4 decimal places.\n"}
{"task_id": 308, "completion_id": 0, "completion": "Here is a Python script that implements the task:\n\n```python\nimport numpy as np\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs // 2\n\n    # Convert limits expressed in Hertz to the Mel scale\n    min_mel = 2595 * np.log10(1 + min_freq/700)\n    max_mel = 2595 * np.log10(1 + max_freq/700)\n\n    # Generate n_filters+2 equally-spaced values on the Mel axis\n    mels = np.linspace(min_mel, max_mel, n_filters + 2)\n\n    # Convert those Mel values back to Hertz\n    freqs = 700 * (10**(mels/2595) - 1)\n\n    # Compute the center frequencies of the triangular filters\n    center_freqs = np.floor(N * freqs / fs).astype(int)\n\n    # Initialize the filterbank\n    F = np.zeros((n_filters, N // 2 + 1))\n\n    for i in range(n_filters):\n        # Compute the left-hand and right-hand slopes of the triangle\n        left_slope = (freqs[i+1] - freqs[i]) / (center_freqs[i+1] - center_freqs[i])\n        right_slope = (freqs[i+2] - freqs[i+1]) / (center_freqs[i+2] - center_freqs[i+1])\n\n        # Compute the weights for each bin\n        for k in range(center_freqs[i], center_freqs[i+1]):\n            F[i, k] = max(0, 1 - (k - center_freqs[i]) * left_slope)\n        for k in range(center_freqs[i+1], center_freqs[i+2]):\n            F[i, k] = max(0, 1 - (k - center_freqs[i+1]) * right_slope)\n\n    # Normalize the filters\n    if normalize:\n        F *= 2 / (freqs[2:] - freqs[:-2])[:, np.newaxis]\n\n    return F.tolist()\n```\n\nThis script first converts the frequency limits from Hertz to Mel scale. It then generates `n_filters+2` equally-spaced values on the Mel axis, converts them back to Hertz to get the center frequencies of the triangular filters. The filterbank is initialized as a 2D NumPy array, and for each filter, the weights for each bin are computed based on the slopes of the triangular filter. If `normalize` is `True`, the filters are normalized so that their area in Mel space equals 1. The filterbank is then converted to a Python list and returned.\n"}
{"task_id": 312, "completion_id": 0, "completion": "Here is the Python function that generates a Blackman\u2013Harris window of arbitrary length:\n\n```python\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n\n    a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n    N = window_len - 1 if symmetric else window_len\n\n    n = np.arange(window_len)\n    window = a0 - a1*np.cos(2*np.pi*n/N) + a2*np.cos(4*np.pi*n/N) - a3*np.cos(6*np.pi*n/N)\n\n    return np.round(window, 4).tolist()\n```\n\nThis function first checks if the window length is less than or equal to 0 or equal to 1. If so, it returns an empty list or a list with a single element 1.0, respectively.\n\nThen it calculates the window coefficients using the given formula. If the `symmetric` parameter is `True`, it uses the symmetric form, otherwise it uses the periodic form.\n\nFinally, it rounds the window coefficients to four decimal places and returns them as a list.\n"}
{"task_id": 313, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport math\nimport numpy as np\n\ndef digamma(x):\n    \"\"\"Compute the digamma function using the recursion and asymptotic expansion.\n\n    Parameters\n    ----------\n    x : float\n        The input to the digamma function.\n\n    Returns\n    -------\n    float\n        The value of the digamma function at x.\n    \"\"\"\n    # Use the recursion \u03c8(x) = \u03c8(x+1) \u2212 1/x to shift small x up to a moderate value.\n    while x < 6:\n        x += 1\n        y = 1 / x\n        y -= y / x\n    # Apply the asymptotic expansion to obtain a good approximation for the remaining (now large) x.\n    return math.log(x) - 0.5 / x - 1 / (12 * x**2) + 1 / (120 * x**4) - 1 / (252 * x**6)\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    gamma_sum = np.sum(gamma[d,:])\n    return round(digamma(gamma[d,t]) - digamma(gamma_sum), 4)\n```\n\nThis script first defines a helper function `digamma` that computes the digamma function using the recursion and asymptotic expansion. Then it defines the main function `expected_log_dirichlet` that computes the expectation of the logarithm of the t-th component of the d-th Dirichlet parameter set using the formula provided in the task description. The result is rounded to 4 decimal places.\n"}
{"task_id": 317, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_prediction, prev_label = params[prev_ix]\n    prev_gold = golds[prev_label]\n    curr_prediction, curr_label = params[ix]\n    curr_gold = golds[curr_label]\n\n    return f\"\"\"------------------------- DEBUG -------------------------\nMine (prev) [{prev_label}]:\n{prev_prediction}\n\nTheirs (prev) [{prev_label}]:\n{prev_gold}\n\nMine [{curr_label}]:\n{curr_prediction}\n\nTheirs [{curr_label}]:\n{curr_gold}{warn_str}\n----------------------- END DEBUG -----------------------\n\"\"\"\n```\n\nThis script defines a function `err_fmt` that takes four arguments: `params`, `golds`, `ix`, and `warn_str`. It first computes the indices of the previous and current predictions, and then retrieves the corresponding predictions and gold values from the `params` and `golds` dictionaries. Finally, it formats these values into the required multi-line string and returns it.\n"}
{"task_id": 318, "completion_id": 0, "completion": "Here is a Python script that implements the AdaBoost algorithm using decision stumps as weak learners.\n\n```python\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    n_samples, n_features = X_train.shape\n    w = np.full(n_samples, 1/n_samples)\n    alphas = []\n    hs = []\n\n    for _ in range(n_estimators):\n        best_feature, best_threshold, best_polarity, min_error = None, None, None, float('inf')\n        for feature in range(n_features):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = polarity * np.sign(X_train[:, feature] - threshold)\n                    error = np.sum(w[predictions != y_train])\n                    if error < min_error:\n                        min_error = error\n                        best_feature, best_threshold, best_polarity = feature, threshold, polarity\n\n        alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n        alphas.append(alpha)\n        hs.append((best_feature, best_threshold, best_polarity))\n\n        predictions = alphas[-1] * hs[-1][2] * np.sign(X_train[:, hs[-1][0]] - hs[-1][1])\n        w = w * np.exp(-alpha * y_train * predictions)\n        w = w / np.sum(w)\n\n    final_predictions = np.zeros(X_test.shape[0])\n    for alpha, h in zip(alphas, hs):\n        final_predictions += alpha * h[2] * np.sign(X_test[:, h[0]] - h[1])\n    return [1 if p >= 0 else -1 for p in final_predictions]\n```\n\nThis script first initializes the weights of each sample to be equal. Then, for each boosting round, it finds the best decision stump (feature, threshold, polarity) that minimizes the weighted classification error. The weight of the misclassified samples are then updated and normalized. The final predictions are obtained by summing the weighted predictions of all decision stumps.\n"}
{"task_id": 329, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n\n    delta_f = fs / N\n    if positive_only:\n        return [round(k * delta_f, 4) for k in range(N // 2 + 1)]\n    else:\n        return [round(k * delta_f, 4) for k in range(-N // 2, N // 2 + 1)]\n```\n\nThis function first checks if `N` or `fs` is non-positive. If so, it returns an empty list. Then it calculates the frequency delta `delta_f` and depending on the `positive_only` flag, it either generates the non-negative frequencies or all frequencies. It rounds each frequency to 4 decimal places and returns the list.\n"}
{"task_id": 331, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n\n    oob_predictions = predictions[oob_mask.any(axis=1)]\n    oob_y_true = y_true[oob_mask.any(axis=1)]\n\n    if oob_predictions.size == 0:\n        return -1\n\n    oob_avg_predictions = np.mean(oob_predictions[oob_mask[oob_mask.any(axis=1)]], axis=1)\n    oob_mse = np.mean((oob_avg_predictions - oob_y_true) ** 2)\n\n    return round(oob_mse, 4)\n```\n\nThis function first converts the input lists to numpy arrays for easier manipulation. Then, it filters the predictions and true values to only include those for which there is at least one OOB prediction. If there are no such samples, it returns -1. Otherwise, it computes the average prediction for each sample and computes the mean squared error between the average predictions and the true values. The result is rounded to 4 decimal places and returned.\n"}
{"task_id": 332, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nfrom collections import Counter\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    def update_tree(tree, items):\n        if items[0] in tree['children']:\n            tree['children'][items[0]]['support'] += 1\n        else:\n            tree['children'][items[0]] = {'support': 1, 'children': {}}\n        if len(items) > 1:\n            update_tree(tree['children'][items[0]], items[1:])\n\n    item_counts = Counter()\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] += 1\n\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_support}\n    sorted_items = sorted(frequent_items.items(), key=lambda x: (-x[1], x[0]))\n\n    fp_tree = {'support': 0, 'children': {}}\n    for transaction in transactions:\n        frequent_transaction_items = [item for item in transaction if item in frequent_items]\n        sorted_transaction_items = sorted(frequent_transaction_items, key=lambda x: sorted_items.index(x))\n        update_tree(fp_tree, sorted_transaction_items)\n\n    return fp_tree\n```\n\nThis script first counts the occurrences of each item in the transactions and filters out the ones that do not meet the minimum support threshold. It then sorts the remaining items first by decreasing support and then alphabetically. For each transaction, it removes non-frequent items, sorts the remaining ones according to the global order, and updates the FP-Tree accordingly.\n"}
{"task_id": 336, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", Y: list[list[int | float]] | \"np.ndarray\" | None = None, c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    # Convert lists to numpy arrays\n    X = np.array(X)\n    Y = np.array(X) if Y is None else np.array(Y)\n\n    # Check if the number of columns in X and Y are the same\n    if X.shape[1] != Y.shape[1]:\n        return -1\n\n    # Compute the dot product of X and Y\n    dot_product = np.dot(X, Y.T)\n\n    # Add the constant c0\n    kernel_matrix = dot_product + c0\n\n    # Round the kernel matrix to 4 decimal places\n    kernel_matrix = np.round(kernel_matrix, 4)\n\n    return kernel_matrix.tolist()\n```\n\nThis script first converts the input lists to NumPy arrays. It then checks if the number of columns in X and Y are the same. If they are not, it returns -1. If they are, it computes the dot product of X and Y, adds the constant c0, rounds the result to 4 decimal places, and returns it as a list of lists.\n"}
{"task_id": 340, "completion_id": 0, "completion": "Here is the Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n\n    # Update the first moment estimate\n    m = beta1 * m + (1 - beta1) * grad\n\n    # Update the second moment estimate\n    v = beta2 * v + (1 - beta2) * np.square(grad)\n\n    # Bias correction\n    m_hat = m / (1 - np.power(beta1, t))\n    v_hat = v / (1 - np.power(beta2, t))\n\n    # Update the parameter\n    param = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n\n    return (np.round(param, 8).tolist(), np.round(m, 8).tolist(), np.round(v, 8).tolist())\n```\n\nThis script first updates the first and second moment estimates using the Adam update rule. Then it corrects the bias in these estimates using the time step. Finally, it updates the parameter using the corrected first and second moment estimates. The updated parameter, first moment, and second moment estimates are returned as lists, rounded to 8 decimal places.\n"}
{"task_id": 343, "completion_id": 0, "completion": "Here is a Python script that implements the function `cross_entropy_update` as described:\n\n```python\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                          rewards: list[float] | np.ndarray,\n                          retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # Convert rewards to numpy array\n    rewards = np.array(rewards)\n\n    # Get the number of samples to retain\n    N = len(rewards)\n    n_retain = int(retain_prcnt * N)\n\n    # Get the indices of the top n_retain samples\n    top_indices = np.argsort(rewards)[-n_retain:]\n\n    # Get the top n_retain samples\n    top_samples = theta_samples[top_indices]\n\n    # Compute the mean and variance of the top samples\n    mean = np.mean(top_samples, axis=0)\n    variance = np.var(top_samples, axis=0)\n\n    # Round the results to 4 decimal places\n    mean = [round(x, 4) for x in mean]\n    variance = [round(x, 4) for x in variance]\n\n    return mean, variance\n```\n\nThis script first converts the `rewards` list to a numpy array for easier manipulation. It then determines the number of samples to retain based on the `retain_prcnt` parameter. It then sorts the indices of the samples based on their corresponding rewards and selects the top `n_retain` indices. It then selects the top samples from the `theta_samples` array using these indices. Finally, it computes the mean and variance of these top samples and rounds them to four decimal places. The function returns these rounded mean and variance as Python lists.\n"}
{"task_id": 353, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    # Count the occurrences of each label\n    label_counts = Counter(labels)\n    total_labels = len(labels)\n\n    # If the input is empty, return 0.0\n    if total_labels <= 0:\n        return 0.0\n\n    # Calculate the entropy\n    entropy_val = -sum((count/total_labels) * math.log2(count/total_labels) \n                       for count in label_counts.values())\n\n    # Return the entropy rounded to five decimal places\n    return round(entropy_val, 5)\n```\n\nThis script first counts the occurrences of each label in the input sequence. If the input is empty, it returns 0.0. Otherwise, it calculates the entropy using the formula given in the task description and returns the result rounded to five decimal places.\n"}
{"task_id": 354, "completion_id": 0, "completion": "Here is a Python script that implements the 2-D convolution using the im2col strategy:\n\n```python\nimport numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kernel_rows, kernel_cols, _, out_ch = W.shape\n\n    if isinstance(pad, str):\n        if pad.lower() == 'same':\n            pad_rows = (stride * (in_rows - 1) + dilation * (kernel_rows - 1) + 1 - in_rows) // 2\n            pad_cols = (stride * (in_cols - 1) + dilation * (kernel_cols - 1) + 1 - in_cols) // 2\n        else:\n            raise ValueError(\"Invalid padding specification\")\n    elif isinstance(pad, int):\n        pad_rows = pad_cols = pad\n    elif isinstance(pad, tuple):\n        if len(pad) == 2:\n            pad_rows, pad_cols = pad\n        elif len(pad) == 4:\n            pad_rows, pad_cols = pad[0], pad[2]\n        else:\n            raise ValueError(\"Invalid padding specification\")\n    else:\n        raise ValueError(\"Invalid padding specification\")\n\n    out_rows = (in_rows + pad_rows * 2 - dilation * (kernel_rows - 1) - 1) // stride + 1\n    out_cols = (in_cols + pad_cols * 2 - dilation * (kernel_cols - 1) - 1) // stride + 1\n\n    X_padded = np.pad(X, ((0, 0), (pad_rows, pad_rows), (pad_cols, pad_cols), (0, 0)))\n\n    X_col = np.zeros((kernel_rows * kernel_cols * in_ch, out_rows * out_cols))\n\n    for y in range(out_rows):\n        for x in range(out_cols):\n            y_pad = y * stride\n            x_pad = x * stride\n\n            X_slice = X_padded[:, y_pad:y_pad+kernel_rows, x_pad:x_pad+kernel_cols, :]\n            X_col[:, y*out_cols + x] = X_slice.transpose(3, 1, 2, 0).reshape(-1)\n\n    W_col = W.transpose(3, 2, 0, 1).reshape(out_ch, -1)\n\n    out = (W_col @ X_col).reshape(out_ch, out_rows, out_cols, n_ex).transpose(3, 1, 2, 0)\n\n    return out.tolist()\n```\n\nThis script first computes the output dimensions and padding amounts based on the input dimensions, stride, and padding specification. It then pads the input batch and reshapes it into a 2-D array where each column corresponds to a region of the input that will be convolved with the kernels. The kernels are also reshaped into a 2-D array where each column corresponds to a kernel. The convolution is then performed by matrix multiplication of the reshaped kernels and the input. The result is reshaped back into the output shape and converted to a Python list.\n"}
{"task_id": 355, "completion_id": 0, "completion": "Here is a Python script that implements the PCA with deterministic sign fix as described:\n\n```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # Standardize the data\n    data_centered = data - np.mean(data, axis=0)\n\n    # Compute the principal directions\n    if solver == \"svd\":\n        _, _, vh = np.linalg.svd(data_centered, full_matrices=False)\n        directions = vh.T\n    elif solver == \"eigen\":\n        cov_matrix = np.cov(data_centered, rowvar=False, ddof=1)\n        _, v = np.linalg.eigh(cov_matrix)\n        directions = v.T[::-1]\n    else:\n        raise ValueError(\"Invalid solver. Choose either 'svd' or 'eigen'.\")\n\n    # Sort the directions in descending order of their importance\n    directions = directions[:, np.argsort(np.var(data_centered, axis=0))[::-1]]\n\n    # Keep the first n_components of them\n    if n_components > directions.shape[1]:\n        n_components = directions.shape[1]\n    directions = directions[:, :n_components]\n\n    # Make the sign of every kept direction deterministic\n    for i in range(directions.shape[1]):\n        if directions[0, i] < 0:\n            directions[:, i] *= -1\n            data_centered[:, i] *= -1\n\n    # Project the centred data onto the retained directions\n    scores = np.dot(data_centered, directions)\n\n    # Compute the explained variance ratio\n    explained_variance_ratio = np.var(scores, axis=0) / np.sum(np.var(data_centered, axis=0))\n\n    # Return the projected data and the explained variance ratio\n    return (np.round(scores, 4).tolist(), np.round(explained_variance_ratio, 4).tolist())\n```\n\nThis script first standardizes the data by subtracting the feature-wise mean. It then computes the principal directions using either singular value decomposition or eigen-decomposition of the covariance matrix, depending on the chosen solver. The directions are sorted in descending order of their importance and the first `n_components` are kept. The sign of each kept direction is made deterministic by checking the first non-zero loading and flipping the direction if it is negative. Finally, the centred data is projected onto the retained directions to obtain the scores, and the explained variance ratios are computed. The scores and explained variance ratios are returned as a tuple of lists.\n"}
{"task_id": 356, "completion_id": 0, "completion": "Here is the Python script that solves the task:\n\n```python\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        return leaf.value.index(max(leaf.value))\n    else:\n        return leaf.value\n```\n\nIn this script, we first define the `Leaf` class with a `value` attribute. Then we define the `leaf_predict` function. If `classifier` is `True`, we return the index of the maximum value in `leaf.value`, which represents the predicted class index for classification. If `classifier` is `False`, we simply return `leaf.value`, which represents the raw scalar stored in the leaf for regression.\n"}
{"task_id": 357, "completion_id": 0, "completion": "Here is a Python script that implements the K-Means clustering algorithm from scratch:\n\n```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    # Initialize centroids\n    centroids = data[:K].copy()\n\n    # Main loop\n    for _ in range(max_iters):\n        # Assign each sample to the closest centroid\n        clusters = np.argmin(np.linalg.norm(data[:, None] - centroids, axis=-1), axis=-1)\n\n        # Compute new centroids\n        new_centroids = np.array([data[clusters == k].mean(axis=0) for k in range(K)])\n\n        # Stop if centroids don't change\n        if np.allclose(centroids, new_centroids):\n            break\n\n        centroids = new_centroids\n\n    # Sort and round centroids\n    centroids = sorted(centroids.tolist())\n    centroids = [[round(x, 4) for x in centroid] for centroid in centroids]\n\n    return centroids\n```\n\nThis script first initializes the centroids as the first K samples in the data matrix. Then, it enters a loop where it assigns each sample to the closest centroid, recomputes the centroids as the mean of the samples currently assigned to it, and stops if none of the centroids changes any more. Finally, it sorts the centroids lexicographically and rounds each coordinate to four decimals before returning them.\n"}
{"task_id": 362, "completion_id": 0, "completion": "Here is the Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | \"np.ndarray\") -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert the data to a NumPy array\n    data = np.array(data, dtype=float)\n\n    # Compute the sum of every row\n    row_sums = np.sum(data, axis=1)\n\n    # If any row sums to 0, return -1\n    if np.any(row_sums == 0):\n        return -1\n\n    # Divide every element in a row by that row's sum\n    data = data / row_sums[:, np.newaxis]\n\n    # Round every entry of the resulting matrix to 4 decimal places\n    data = np.round(data, 4)\n\n    # Return the matrix as a native Python list\n    return data.tolist()\n```\n\nThis script first converts the input data to a NumPy array. It then computes the sum of every row. If any row sum is 0, the function returns -1. Otherwise, it divides every element in a row by that row's sum, rounds the resulting matrix to 4 decimal places, and returns it as a native Python list.\n"}
{"task_id": 363, "completion_id": 0, "completion": "Here is the Python script that solves the task:\n\n```python\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    def check_continuity(space):\n        if isinstance(space, Box):\n            return True\n        elif isinstance(space, Tuple) or isinstance(space, Dict):\n            return all(check_continuity(sub_space) for sub_space in space.spaces.values() if isinstance(space, Dict) else space.spaces)\n        else:\n            return False\n\n    cont_action = check_continuity(env.action_space) if tuple_action else isinstance(env.action_space, Box)\n    cont_obs = check_continuity(env.observation_space) if tuple_obs else isinstance(env.observation_space, Box)\n\n    return (cont_action, cont_obs)\n```\n\nThis script defines the `Space` classes and the `Env` class, then implements the `is_continuous` function. The `is_continuous` function uses a helper function `check_continuity` to recursively check the continuity of the spaces. If the space is a `Box`, it is continuous. If the space is a `Tuple` or `Dict`, it is continuous only if all its sub-spaces are `Box`. Otherwise, it is not continuous. The `is_continuous` function returns a tuple of booleans indicating whether the action and observation spaces are continuous.\n"}
{"task_id": 369, "completion_id": 0, "completion": "Here is the Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    running_pred = np.zeros_like(updates[0])\n    for u in updates:\n        running_pred -= learning_rate * u\n\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        probs = np.exp(running_pred) / np.exp(running_pred).sum(axis=-1, keepdims=True)\n        return np.argmax(probs, axis=-1)\n```\n\nThis script first initializes the running prediction with zeros of the same shape as the first update array. Then, for each update, it subtracts the scaled update from the running prediction. If the problem is regression, it returns the running prediction rounded to 4 decimal places. If the problem is classification, it first calculates the class probabilities using the softmax function, and then returns the indices of the maximum probabilities as the predicted class labels.\n"}
{"task_id": 371, "completion_id": 0, "completion": "Here is a Python script that implements the 1-D cross-correlation operation with stride, padding, and dilation:\n\n```python\nimport numpy as np\nimport math\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, _, out_channels = W.shape\n\n    if type(pad) == str:\n        out_len = math.ceil(signal_length / stride)\n        total_pad = max(0, (out_len - 1) * stride + (kernel_width - 1) * (dilation + 1) - signal_length + 1)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    elif type(pad) == int:\n        p_left = p_right = pad\n    elif type(pad) == tuple:\n        p_left, p_right = pad\n\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)))\n\n    output_length = (signal_length + p_left + p_right - (kernel_width - 1) * (dilation + 1) - 1) // stride + 1\n    output = np.zeros((n_examples, output_length, out_channels))\n\n    for i in range(output_length):\n        start = i * stride\n        end = start + (kernel_width - 1) * (dilation + 1) + 1\n        X_slice = X_padded[:, start:end:dilation+1, :]\n        output[:, i, :] = np.tensordot(X_slice, W, axes=([1, 2], [0, 1]))\n\n    return output.tolist()\n```\n\nThis script first calculates the padding based on the input parameters. It then pads the input signal with zeros. After that, it iterates over the signal, slices the signal at each position, and performs the cross-correlation operation with the kernel. The result is stored in the output array, which is converted to a list and returned.\n"}
{"task_id": 373, "completion_id": 0, "completion": "Here is a Python script that calculates the Gini impurity of a discrete label sequence:\n\n```python\nimport numpy as np\n\ndef gini(y: list[int] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n\n    _, counts = np.unique(y, return_counts=True)\n    probs = counts / len(y)\n    gini = 1 - np.sum(np.square(probs))\n\n    return round(gini, 4)\n```\n\nThis script first checks if the input sequence is empty. If it is, it returns 0.0. Otherwise, it calculates the relative frequencies of each class in the sequence and uses these to calculate the Gini impurity. The Gini impurity is then rounded to the nearest 4th decimal place and returned.\n"}
{"task_id": 374, "completion_id": 0, "completion": "Here is a Python script that implements the linear regression with batch gradient descent:\n\n```python\nimport numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    if X.shape[0] != y.shape[0]:\n        return -1\n\n    m, n = X.shape\n\n    # Initialize weights and bias\n    weights = np.zeros(n)\n    bias = 0.0\n\n    # Perform gradient descent\n    for _ in range(n_iterations):\n        y_pred = np.dot(X, weights) + bias\n\n        dw = (2 / m) * np.dot(X.T, (y_pred - y))\n        db = (2 / m) * np.sum(y_pred - y)\n\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n\n    return [round(weight, 4) for weight in weights], round(bias, 4)\n```\n\nThis script first checks if the number of samples in the feature matrix and the target vector are the same. If not, it returns -1. Then it initializes the weights and bias to zero. It then performs the gradient descent for the specified number of iterations. For each iteration, it calculates the predicted values, the gradients of the weights and the bias, and updates the weights and bias. Finally, it returns the learned parameters rounded to 4 decimal places.\n"}
{"task_id": 376, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Convert list of lists to numpy array\n    X = np.array(X)\n\n    # Check if the matrix is square\n    if X.shape[0] != X.shape[1]:\n        return False\n\n    # Check if the matrix is symmetric\n    return np.allclose(X, X.T, atol=1e-8)\n```\n\nThis script first converts the input list of lists to a numpy array. It then checks if the matrix is square by comparing the number of rows and columns. If the matrix is not square, the function returns `False`. If the matrix is square, the function checks if it is symmetric by comparing it to its transpose (`X.T`). The `np.allclose` function is used to compare the matrix and its transpose, allowing for a small rounding error (`atol=1e-8`). If the matrix is symmetric, the function returns `True`, otherwise it returns `False`.\n"}
{"task_id": 377, "completion_id": 0, "completion": "Here is the Python function that implements the negative gradient for logistic loss:\n\n```python\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    This function calculates the negative gradient for logistic loss.\n\n    Parameters:\n    y (list): Binary class labels (0 or 1)\n    f (list): Current prediction scores (floats)\n\n    Returns:\n    list: List of negative gradients g rounded to four decimal places.\n    \"\"\"\n    # Check if all labels are 0 or 1\n    if not all(i in [0, 1] for i in y):\n        return -1\n\n    # Convert labels to -1 and 1\n    y_prime = 2 * np.array(y) - 1\n\n    # Calculate the negative gradient\n    g = y_prime / (1 + np.exp(y_prime * np.array(f)))\n\n    # Round to 4 decimal places\n    g = [round(i, 4) for i in g]\n\n    return g\n```\n\nThis function first checks if all labels are 0 or 1. If not, it returns -1. Then it converts the labels to -1 and 1. After that, it calculates the negative gradient using the formula provided in the task description. Finally, it rounds each value in the gradient to 4 decimal places and returns the result.\n"}
{"task_id": 380, "completion_id": 0, "completion": "Here is the Python script that implements the SELU activation and its derivatives:\n\n```python\nimport numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    ALPHA = 1.6732632423543772848170429916717\n    SCALE = 1.0507009873554804934193349852946\n\n    x = np.asarray(x)\n\n    if order == 0:\n        # SELU(x) = scale * ELU(x, alpha)\n        # ELU(x, alpha) = x if x > 0 else alpha * (e^x - 1)\n        elu = np.where(x > 0, x, ALPHA * (np.exp(x) - 1))\n        selu = SCALE * elu\n    elif order == 1:\n        # d(SELU)/dx = scale * d(ELU)/dx\n        # d(ELU)/dx = 1 if x > 0 else alpha * e^x\n        d_elu = np.where(x > 0, 1, ALPHA * np.exp(x))\n        d_selu = SCALE * d_elu\n    elif order == 2:\n        # d\u00b2(SELU)/dx\u00b2 = scale * d\u00b2(ELU)/dx\u00b2\n        # d\u00b2(ELU)/dx\u00b2 = 0 if x > 0 else alpha * e^x\n        d2_elu = np.where(x > 0, 0, ALPHA * np.exp(x))\n        d2_selu = SCALE * d2_elu\n    else:\n        raise ValueError(\"Order must be 0, 1, or 2\")\n\n    return np.round(d_selu if order == 1 else d2_selu if order == 2 else selu, 4).tolist()\n```\n\nThis script first converts the input to a NumPy array, then computes the SELU, first derivative, and second derivative as per the given formulas. The results are then rounded to 4 decimal places and converted to a Python list via NumPy's `tolist()` method.\n"}
{"task_id": 387, "completion_id": 0, "completion": "Here is a Python script that implements the described algorithm:\n\n```python\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, np.mean(y), dtype=np.float64)\n\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        sorted_indices = np.argsort(x)\n        x_sorted = x[sorted_indices]\n        residuals_sorted = residuals[sorted_indices]\n\n        split_points = (x_sorted[1:] + x_sorted[:-1]) / 2\n        residuals_left = np.cumsum(residuals_sorted[:-1]) / np.arange(1, len(residuals_sorted))\n        residuals_right = (residuals_sorted.sum() - np.cumsum(residuals_sorted[:-1])) / (len(residuals_sorted) - np.arange(1, len(residuals_sorted)))\n        residuals_total = np.sum(residuals_sorted ** 2)\n\n        residuals_left_squared = np.cumsum(residuals_left ** 2)\n        residuals_right_squared = residuals_total - residuals_left_squared\n        total_residuals_squared = residuals_left_squared + residuals_right_squared\n\n        best_split_index = np.argmin(total_residuals_squared)\n        best_split = split_points[best_split_index]\n\n        y_pred += learning_rate * np.where(x <= best_split, residuals_left[best_split_index], residuals_right[best_split_index])\n\n    return np.round(y_pred, 4).tolist()\n```\n\nThis script first initializes the predictions to the mean of the target values. Then, for each boosting round, it computes the residuals, sorts them by the feature values, and iterates over all possible split points. For each split point, it computes the sum of squared residuals on both sides of the split, and chooses the split point that minimizes this sum. The predictions are then updated using the chosen split point and the learning rate. Finally, the predictions are rounded to 4 decimal places and returned as a list.\n"}
{"task_id": 394, "completion_id": 0, "completion": "Here is the Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n\n    Eg = rho * Eg + (1 - rho) * np.square(grad)\n    w = w - (learning_rate * grad) / np.sqrt(Eg + 1e-8)\n\n    return np.round(w, 4).tolist(), np.round(Eg, 4).tolist()\n```\n\nThis script first checks if the running average `Eg` is `None`. If it is, it initializes it as a zero array of the same shape as the gradient. Then it updates the running average by applying the RMSprop update rule and updates the parameter `w` accordingly. Finally, it rounds both `w` and `Eg` to 4 decimal places and converts them to regular Python lists before returning.\n"}
{"task_id": 398, "completion_id": 0, "completion": "Here is the Python code that implements the ELU activation function and its gradient as per the given task:\n\n```python\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if derivative:\n        return np.round((np.where(x >= 0, 1, elu(x, alpha) + alpha)).tolist(), 4)\n    else:\n        return np.round((np.where(x >= 0, x, alpha * (np.exp(x) - 1))).tolist(), 4)\n```\n\nThis function first converts the input list to a NumPy array for easier manipulation. Then it checks the `derivative` flag. If it's `True`, it computes the gradient of the ELU function for each element in the array and rounds the result to 4 decimal places. If `derivative` is `False`, it computes the ELU function for each element in the array and rounds the result to 4 decimal places.\n"}
{"task_id": 411, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\"\"\"\n\n    def get_stats(data):\n        tuple_data = any(isinstance(x, (list, tuple, np.ndarray)) for x in data)\n        multidim_data = any(isinstance(x, (list, tuple, np.ndarray)) and len(x) > 1 for x in data)\n        continuous_data = any(isinstance(x, (list, tuple, np.ndarray)) for x in data for y in x if isinstance(y, float) and y != int(y))\n        n_data_per_dim = [len(set(x for y in data if isinstance(y, (list, tuple, np.ndarray)) and len(y) > i for x in y[i])) for i in range(max(len(x) for x in data if isinstance(x, (list, tuple, np.ndarray))))]\n        data_dim = max(len(x) for x in data if isinstance(x, (list, tuple, np.ndarray))) if multidim_data else 1\n        data_ids = [[x for y in data if isinstance(y, (list, tuple, np.ndarray)) and len(y) > i for x in sorted(set(y[i]))] for i in range(data_dim)]\n        return tuple_data, multidim_data, continuous_data, n_data_per_dim, data_dim, data_ids\n\n    tuple_actions, multidim_actions, continuous_actions, n_actions_per_dim, action_dim, action_ids = get_stats(actions)\n    tuple_observations, multidim_observations, continuous_observations, n_obs_per_dim, obs_dim, obs_ids = get_stats(observations)\n\n    return {\n        'tuple_actions': tuple_actions,\n        'tuple_observations': tuple_observations,\n        'multidim_actions': multidim_actions,\n        'multidim_observations': multidim_observations,\n        'continuous_actions': continuous_actions,\n        'continuous_observations': continuous_observations,\n        'n_actions_per_dim': n_actions_per_dim,\n        'action_dim': action_dim,\n        'n_obs_per_dim': n_obs_per_dim,\n        'obs_dim': obs_dim,\n        'action_ids': action_ids,\n        'obs_ids': obs_ids\n    }\n```\n\nThis script defines a helper function `get_stats` that computes the statistics for a given list of data. It then uses this function to compute the statistics for both the actions and observations, and returns a dictionary with the computed statistics.\n"}
{"task_id": 413, "completion_id": 0, "completion": "Here is a Python script that implements a simplified Gradient Boosting Decision Tree (GBDT) regressor. This script uses NumPy for all computations and does not use any external libraries.\n\n```python\nimport numpy as np\n\nclass Node:\n    def __init__(self, feature=None, threshold=None, left=None, right=None, value=None):\n        self.feature = feature\n        self.threshold = threshold\n        self.left = left\n        self.right = right\n        self.value = value\n\nclass GBDT:\n    def __init__(self, n_estimators=10, learning_rate=0.1, max_depth=3):\n        self.n_estimators = n_estimators\n        self.learning_rate = learning_rate\n        self.max_depth = max_depth\n        self.trees = []\n\n    def fit(self, X, y):\n        self.mean = np.mean(y)\n        self.trees = []\n        residuals = y - self.mean\n\n        for _ in range(self.n_estimators):\n            tree = self.build_tree(X, residuals)\n            self.trees.append(tree)\n            prediction = self.predict(X, tree)\n            residuals = y - prediction\n\n    def predict(self, X, tree=None):\n        if tree is None:\n            return np.array([self.predict_tree(x, tree) for tree in self.trees for x in X]) + self.mean\n        return np.array([self.predict_tree(x, tree) for x in X])\n\n    def predict_tree(self, x, tree):\n        if tree.value is not None:\n            return tree.value\n        if x[tree.feature] < tree.threshold:\n            return self.predict_tree(x, tree.left)\n        else:\n            return self.predict_tree(x, tree.right)\n\n    def build_tree(self, X, y):\n        best_feature, best_threshold, min_error, left_indices, right_indices = self.best_split(X, y)\n        if best_feature is None:\n            return Node(value=np.mean(y))\n        if len(left_indices) == 0 or len(right_indices) == 0:\n            return Node(value=np.mean(y))\n        left = self.build_tree(X[left_indices], y[left_indices])\n        right = self.build_tree(X[right_indices], y[right_indices])\n        return Node(best_feature, best_threshold, left, right)\n\n    def best_split(self, X, y):\n        best_feature, best_threshold, min_error, left_indices, right_indices = None, None, float('inf'), None, None\n        for feature in range(X.shape[1]):\n            thresholds = np.unique(X[:, feature])\n            for threshold in thresholds:\n                left_indices = X[:, feature] < threshold\n                right_indices = X[:, feature] >= threshold\n                if len(np.unique(y[left_indices])) < 2 or len(np.unique(y[right_indices])) < 2:\n                    continue\n                error = self.mse(y[left_indices]) + self.mse(y[right_indices])\n                if error < min_error:\n                    best_feature, best_threshold, min_error, left_indices, right_indices = feature, threshold, error, left_indices, right_indices\n        return best_feature, best_threshold, min_error, left_indices, right_indices\n\n    def mse(self, y):\n        return np.mean((y - np.mean(y)) ** 2)\n\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list[float]:\n    gbdt = GBDT(n_estimators=n_estimators, learning_rate=learning_rate, max_depth=max_depth)\n    gbdt.fit(X_train, y_train)\n    predictions = gbdt.predict(X_test)\n    return [round(pred, 4) for pred in predictions]\n```\n\nThis script first defines a `Node` class to represent a node in the decision tree, and a `GBDT` class to represent the Gradient Boosting Decision Tree. The `GBDT` class has methods to fit the model to the training data, predict the output for a given input, and build a decision tree. The `gbdt_regression` function uses these classes to implement the GBDT regressor.\n"}
{"task_id": 416, "completion_id": 0, "completion": "Here is a Python script that implements the multivariate Gaussian PDF:\n\n```python\nimport numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    This function calculates the probability density function (PDF) of a multivariate Gaussian (Normal) distribution.\n\n    Parameters:\n    X (numpy array): A NumPy array of shape (n_samples, n_features) containing the data points for which the PDF values must be evaluated.\n    mean (numpy array): The mean vector of the distribution (length n_features).\n    cov (numpy array): The covariance matrix of shape (n_features, n_features) which must be positive-definite (invertible).\n\n    Returns:\n    list: A Python list whose i-th element is the PDF value for X[i] rounded to four decimal places.\n    \"\"\"\n\n    # Ensure X is a 2D array\n    X = np.atleast_2d(X)\n\n    # Number of samples and features\n    n_samples, n_features = X.shape\n\n    # Determinant of covariance matrix\n    det_cov = np.linalg.det(cov)\n\n    # Inverse of covariance matrix\n    inv_cov = np.linalg.inv(cov)\n\n    # Constant term in the PDF equation\n    const_term = 1 / (math.pow((2*math.pi), n_features/2) * math.sqrt(det_cov))\n\n    # List to store PDF values\n    pdf_values = []\n\n    # Calculate PDF for each data point\n    for x in X:\n        # Difference between data point and mean\n        diff = x - mean\n\n        # Exponent term in the PDF equation\n        exp_term = -0.5 * np.dot(np.dot(diff.T, inv_cov), diff)\n\n        # PDF value\n        pdf_value = const_term * math.exp(exp_term)\n\n        # Append to list, rounded to 4 decimal places\n        pdf_values.append(round(pdf_value, 4))\n\n    return pdf_values\n```\n\nThis function first ensures that the input data `X` is a 2D array. It then calculates the determinant and inverse of the covariance matrix, and the constant term in the PDF equation. It then iterates over each data point in `X`, calculates the difference between the data point and the mean, and uses these to calculate the exponent term in the PDF equation. The PDF value is then calculated and appended to the list `pdf_values`, which is returned at the end.\n"}
{"task_id": 419, "completion_id": 0, "completion": "Here is a Python script that implements the task:\n\n```python\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    # Add intercept column if fit_intercept is True\n    if fit_intercept:\n        X = np.c_[np.ones(X.shape[0]), X]\n        X_new = np.c_[np.ones(X_new.shape[0]), X_new]\n\n    # If V is None, set it to the identity matrix\n    if V is None:\n        V = np.eye(X.shape[1])\n\n    # If mu is a scalar, replicate it to a vector\n    if isinstance(mu, (int, float)):\n        mu = np.full(X.shape[1], mu)\n\n    # If V is a scalar, form a diagonal matrix\n    if isinstance(V, (int, float)):\n        V = np.eye(X.shape[1]) * V\n\n    # If V is a 1-D array, form a diagonal matrix\n    if isinstance(V, np.ndarray) and V.ndim == 1:\n        V = np.diag(V)\n\n    # Compute the posterior distribution\n    V_inv = np.linalg.inv(V)\n    Sigma_post = np.linalg.inv(V_inv + X.T @ X)\n    Mu_post = Sigma_post @ (V_inv @ mu + X.T @ y)\n\n    # Compute the MAP predictive means\n    y_new = X_new @ Mu_post\n\n    # Round the predicted values to 4 decimal places\n    y_new = [round(y, 4) for y in y_new]\n\n    return y_new\n```\n\nThis script first checks if `fit_intercept` is `True` and adds an intercept column to `X` and `X_new`. Then it checks if `V` is `None` and sets it to the identity matrix, or checks if `V` is a scalar and forms a diagonal matrix, or checks if `V` is a 1-D array and forms a diagonal matrix. If `mu` is a scalar, it replicates it to a vector. Then it computes the posterior distribution and the MAP predictive means. Finally, it rounds the predicted values to 4 decimal places and returns them as a list.\n"}
{"task_id": 423, "completion_id": 0, "completion": "Here is the Python function that solves the task:\n\n```python\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Stub for the RMSLE metric.  Complete the body of the function.\"\"\"\n    if len(actual) != len(predicted):\n        return -1\n    for i in range(len(actual)):\n        if actual[i] < 0 or predicted[i] < 0:\n            return -1\n    n = len(actual)\n    sum_log_diff = sum([(np.log(1 + predicted[i]) - np.log(1 + actual[i]))**2 for i in range(n)])\n    rmsle = np.sqrt((1/n) * sum_log_diff)\n    return round(rmsle, 4)\n```\n\nThis function first checks if the lengths of the `actual` and `predicted` lists are equal. If not, it returns -1. Then it checks if all the numbers in both lists are non-negative. If any number is negative, it returns -1. If all checks pass, it computes the RMSLE and returns it rounded to four decimal places.\n"}
{"task_id": 428, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    else:\n        if symmetric:\n            window_len += 1\n        window = [0.5 - 0.5 * math.cos(2 * math.pi * n / (window_len - 1)) for n in range(window_len)]\n        window = [round(x, 4) for x in window]\n        if symmetric:\n            window = window[:-1]\n        return window\n```\n\nThis script first checks if the window length is less than or equal to 0. If it is, it returns an empty list. If the window length is 1, it returns a list with a single element, 1.0. Otherwise, it calculates the Hann window coefficients using the formula provided in the task description. The coefficients are then rounded to 4 decimal places and returned as a list.\n"}
{"task_id": 433, "completion_id": 0, "completion": "Here is the Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        receptive_field_size = shape[2] * shape[3]\n        fan_in  = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n    else:\n        fan_in, fan_out = shape[0], shape[1]\n\n    return float(fan_in), float(fan_out)\n```\n\nThis function first checks if the shape has exactly 4 dimensions. If it does, it assumes that the shape corresponds to a 2-D convolutional kernel and calculates the fan-in and fan-out according to the rules for convolutional kernels. If the shape has fewer than 4 dimensions, it simply takes the first two dimensions as the fan-in and fan-out. The function then returns the fan-in and fan-out as floats.\n"}
{"task_id": 435, "completion_id": 0, "completion": "Here is a Python script that implements the task:\n\n```python\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]],\n                               y: list[float],\n                               n_estimators: int = 10,\n                               learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(y.mean(), 4)] * len(y)\n\n    y_hat = np.full(y.shape, y.mean())\n\n    for t in range(n_estimators):\n        residuals = y - y_hat\n        model = np.linalg.lstsq(X, residuals, rcond=None)[0]\n        y_hat += learning_rate * (X @ model)\n\n    return [round(y, 4) for y in y_hat.tolist()]\n```\n\nThis script first checks if the number of estimators is less than or equal to 0 or if the learning rate is 0. If either of these conditions is true, it returns a list of the mean of the target values.\n\nOtherwise, it initializes the prediction vector `y_hat` with the mean of the target values. It then iterates over the number of estimators, computing the residuals, fitting a linear model to the residuals, and updating the prediction vector.\n\nFinally, it rounds each predicted value to the nearest 4th decimal and returns it as a list.\n"}
{"task_id": 437, "completion_id": 0, "completion": "Here is the Python code that implements the logistic sigmoid function and its derivatives:\n\n```python\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    # Convert x to a numpy array if it's not already\n    x = np.array(x)\n\n    # Calculate the sigmoid function\n    s = 1 / (1 + np.exp(-x))\n\n    # Calculate the first and second derivatives\n    ds = s * (1 - s)\n    d2s = ds * (1 - 2 * s)\n\n    # Select the result based on the order\n    if order == 0:\n        result = s\n    elif order == 1:\n        result = ds\n    elif order == 2:\n        result = d2s\n    else:\n        return -1\n\n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n\n    # If the input was a scalar, return a float; otherwise, return a list\n    if np.isscalar(x):\n        return float(result)\n    else:\n        return result.tolist()\n```\n\nThis function first converts the input to a numpy array, then calculates the sigmoid function and its derivatives. It then selects the result based on the order parameter, rounds it to 4 decimal places, and returns it as a float if the input was a scalar, or as a list otherwise. If the order parameter is not 0, 1, or 2, the function returns -1.\n"}
{"task_id": 438, "completion_id": 0, "completion": "Here is a Python script that implements the `to_categorical` function as described:\n\n```python\nimport numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = max(y) + 1\n    elif num_classes < max(y) + 1:\n        return -1\n    one_hot = np.zeros((len(y), num_classes))\n    one_hot[np.arange(len(y)), y] = 1\n    return one_hot.tolist()\n```\n\nThis script first converts the input list or NumPy array to a NumPy array for easier manipulation. It then checks if `num_classes` is provided. If not, it is inferred as `max(y) + 1`. If `num_classes` is provided but is smaller than `max(y) + 1`, the function returns `-1` to signal an error. Otherwise, it creates a 2-D NumPy array of zeros with dimensions `(len(y), num_classes)`. It then sets the appropriate elements to 1 based on the class indices in `y`. Finally, it converts the 2-D NumPy array to a list of lists and returns it.\n\nYou can test this function with the following code:\n\n```python\nprint(to_categorical([0, 1, 2, 3], 4))  # [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]\nprint(to_categorical([0, 1, 2, 3], 3))  # -1\nprint(to_categorical([0, 1, 2, 3]))  # [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]\n```\n"}
{"task_id": 439, "completion_id": 0, "completion": "Here is a Python script that implements the Apriori algorithm to find all frequent itemsets in a transactional database.\n\n```python\nimport itertools\n\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    # Create a dictionary to store the support of each item\n    item_counts = {}\n    for transaction in transactions:\n        for item in transaction:\n            if item not in item_counts:\n                item_counts[item] = 1\n            else:\n                item_counts[item] += 1\n\n    # Create a list to store the frequent itemsets\n    frequent_itemsets = []\n    for item, count in item_counts.items():\n        if count / len(transactions) >= min_sup:\n            frequent_itemsets.append((item,))\n\n    # Generate size-k candidates by self-joining the frequent itemsets of size k-1\n    k = 2\n    while len(frequent_itemsets) > 0:\n        candidate_itemsets = []\n        for itemset1, itemset2 in itertools.combinations(frequent_itemsets, 2):\n            if itemset1[:k-2] == itemset2[:k-2] and itemset1[k-2:k-1] < itemset2[k-2:k-1]:\n                candidate_itemsets.append(itemset1 + itemset2[k-1:])\n        frequent_itemsets = []\n        for itemset in candidate_itemsets:\n            count = sum(set(itemset).issubset(transaction) for transaction in transactions)\n            if count / len(transactions) >= min_sup:\n                frequent_itemsets.append(itemset)\n        k += 1\n\n    # Sort the frequent itemsets by length and then lexicographically\n    frequent_itemsets.sort(key=lambda itemset: (len(itemset), itemset))\n    return frequent_itemsets\n```\n\nThis script first calculates the support of each item in the transactions and adds the frequent items to the `frequent_itemsets` list. Then it generates size-`k` candidates by self-joining the frequent itemsets of size `k-1` and prunes any candidate that contains an infrequent subset. The process is repeated until no new frequent itemsets are found. Finally, the frequent itemsets are sorted by length and then lexicographically and returned.\n"}
{"task_id": 440, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    # Convert the input list to a numpy array for easier manipulation\n    predictions_array = np.array(predictions)\n\n    # Average the probability vectors over all estimators for every sample\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n\n    # Round every averaged probability to four decimal places\n    averaged_probabilities = np.round(averaged_probabilities, 4)\n\n    # Get the index of the class with the highest average probability for each sample\n    predicted_classes = np.argmax(averaged_probabilities, axis=1)\n\n    # Convert the numpy arrays back to regular python lists\n    averaged_probabilities = averaged_probabilities.tolist()\n    predicted_classes = predicted_classes.tolist()\n\n    return averaged_probabilities, predicted_classes\n```\n\nThis script first converts the input list to a numpy array for easier manipulation. It then averages the probability vectors over all estimators for every sample and rounds the probabilities to four decimal places. Finally, it finds the index of the class with the highest average probability for each sample and converts the numpy arrays back to regular python lists.\n"}
{"task_id": 444, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    # Convert lists to numpy arrays\n    X = np.array(X)\n    Y = np.array(X) if Y is None else np.array(Y)\n\n    # Validate inputs\n    if sigma is None:\n        sigma = np.sqrt(X.shape[1] / 2)\n    elif isinstance(sigma, float):\n        if sigma <= 0:\n            return -1\n        sigma = np.full(X.shape[1], sigma)\n    elif isinstance(sigma, list):\n        if len(sigma) != X.shape[1] or any(s <= 0 for s in sigma):\n            return -1\n        sigma = np.array(sigma)\n    else:\n        return -1\n\n    # Compute kernel matrix\n    K = np.zeros((X.shape[0], Y.shape[0]))\n    for i in range(X.shape[0]):\n        for j in range(Y.shape[0]):\n            K[i, j] = np.exp(-0.5 * np.sum(((X[i] - Y[j]) / sigma) ** 2))\n\n    # Round to 4 decimal places\n    K = np.round(K, 4)\n\n    return K.tolist()\n```\n\nThis script first converts the input lists to numpy arrays for easier manipulation. It then validates the inputs, checking that the scale parameter is valid and that the feature dimensions of X and Y match. If the inputs are valid, it computes the kernel matrix and rounds all entries to 4 decimal places. If the inputs are invalid, it returns -1.\n"}
{"task_id": 446, "completion_id": 0, "completion": "Here is a Python script that implements the `decision_stump` function. It uses numpy for numerical computations and scipy for entropy computation.\n\n```python\nimport numpy as np\nfrom scipy.stats import entropy\n\ndef decision_stump(X, y):\n    X = np.array(X)\n    y = np.array(y)\n\n    # Compute the parent entropy\n    parent_entropy = entropy(np.unique(y, return_counts=True)[1])\n\n    # Initialize the best gain and split\n    best_gain = -np.inf\n    best_feature_index = -1\n    best_threshold = None\n    left_majority_label = None\n    right_majority_label = None\n\n    # Iterate over all features\n    for feature_index in range(X.shape[1]):\n        # Sort the feature values and labels\n        sorted_indices = np.argsort(X[:, feature_index])\n        sorted_X = X[sorted_indices, feature_index]\n        sorted_y = y[sorted_indices]\n\n        # Compute the mid-points between successive values\n        thresholds = (sorted_X[1:] + sorted_X[:-1]) / 2\n\n        # Iterate over all thresholds\n        for threshold in thresholds:\n            # Split the data\n            left_mask = sorted_X <= threshold\n            right_mask = ~left_mask\n\n            # Compute the entropy of the left and right child\n            left_entropy = entropy(np.unique(sorted_y[left_mask], return_counts=True)[1])\n            right_entropy = entropy(np.unique(sorted_y[right_mask], return_counts=True)[1])\n\n            # Compute the information gain\n            gain = parent_entropy - (left_mask.mean() * left_entropy + right_mask.mean() * right_entropy)\n\n            # Update the best gain and split\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = feature_index\n                best_threshold = threshold\n                left_majority_label = np.argmax(np.bincount(sorted_y[left_mask]))\n                right_majority_label = np.argmax(np.bincount(sorted_y[right_mask]))\n\n    # If no split can improve information gain, return (-1, None, majority_label, majority_label)\n    if best_gain <= 0:\n        majority_label = np.argmax(np.bincount(y))\n        return -1, None, majority_label, majority_label\n\n    # Round the threshold to 4 decimal places\n    best_threshold = round(best_threshold, 4)\n\n    return best_feature_index, best_threshold, left_majority_label, right_majority_label\n```\n\nThis script first computes the parent entropy, then iterates over all features and all thresholds to find the best split. It uses the `entropy` function from scipy to compute the entropy of the left and right child, and the information gain is computed as the difference between the parent entropy and the weighted sum of the left and right child entropies. If no split can improve information gain, it returns `(-1, None, majority_label, majority_label)`.\n"}
{"task_id": 452, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\nfrom typing import List\n\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    X = np.array(X)\n    subset1 = X[X[:, feature_i] >= threshold] if isinstance(threshold, (int, float)) else X[X[:, feature_i] == threshold]\n    subset2 = X[X[:, feature_i] < threshold] if isinstance(threshold, (int, float)) else X[X[:, feature_i] != threshold]\n    return [subset1.tolist(), subset2.tolist()]\n```\n\nThis script first converts the input list to a numpy array for easier manipulation. Then it uses numpy's boolean indexing to create the two subsets. The subsets are created based on whether the threshold is numeric or not. If the threshold is numeric, the first subset contains samples where the feature value is greater than or equal to the threshold, and the second subset contains the remaining samples. If the threshold is not numeric, the first subset contains samples where the feature value is exactly equal to the threshold, and the second subset contains the remaining samples. The subsets are then converted to regular Python lists and returned as a list of two lists.\n"}
{"task_id": 453, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    if len(Q) != len(Q_next) or len(Q) != len(actions) or len(Q) != len(rewards) or len(Q) != len(dones):\n        return -1\n    if gamma < 0 or gamma > 1:\n        return -1\n\n    y = Q.copy()\n    for i in range(len(Q)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * max(Q_next[i])\n        y[i][actions[i]] = round(target, 4)\n\n    return y.tolist()\n```\n\nThis function first checks if the input arrays have consistent lengths and if the discount factor is within the valid range [0, 1]. If not, it returns -1. Then it creates a copy of the Q matrix and updates the target Q-values for each state-action pair according to the formula you provided. Finally, it rounds each element of the updated matrix to 4 decimal places and returns it as a nested Python list.\n"}
{"task_id": 458, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    if num_classes is None:\n        num_classes = max(labels) + 1\n\n    if any(label < 0 for label in labels) or any(label >= num_classes for label in labels):\n        return -1\n\n    one_hot_matrix = [[0]*num_classes for _ in labels]\n    for i, label in enumerate(labels):\n        one_hot_matrix[i][label] = 1\n\n    return one_hot_matrix\n```\nThis script first checks if `num_classes` is `None` and if so, it infers it as `max(labels) + 1`. Then it checks if any label is negative or larger than or equal to `num_classes`, and if so, it returns -1. Otherwise, it creates a matrix of zeros with the shape of `(len(labels), num_classes)` and sets the corresponding index to 1 for each label. Finally, it returns the one-hot encoded matrix.\n"}
{"task_id": 461, "completion_id": 0, "completion": "Here is a Python script that implements the task:\n\n```python\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"    \n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, np.mean(y), dtype=float)\n    \n    if n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n    \n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        unique_x = np.unique(x)\n        if unique_x.shape[0] == 1:\n            y_pred += learning_rate * np.mean(residuals)\n            continue\n        \n        min_sse = np.inf\n        best_split = None\n        best_v_l = None\n        best_v_r = None\n        \n        for t in unique_x[:-1]:\n            left_mask = x <= t\n            right_mask = x > t\n            \n            if np.any(left_mask) and np.any(right_mask):\n                v_l = np.mean(residuals[left_mask])\n                v_r = np.mean(residuals[right_mask])\n                sse = np.sum((residuals[left_mask] - v_l) ** 2) + np.sum((residuals[right_mask] - v_r) ** 2)\n                \n                if sse < min_sse:\n                    min_sse = sse\n                    best_split = t\n                    best_v_l = v_l\n                    best_v_r = v_r\n        \n        if best_split is None:\n            y_pred += learning_rate * np.mean(residuals)\n        else:\n            y_pred += learning_rate * np.where(x <= best_split, best_v_l, best_v_r)\n    \n    return np.round(y_pred, 4).tolist()\n```\n\nThis script first initializes the predictions to the mean of the targets. Then, for each iteration, it computes the residuals, finds the best split, and updates the predictions. If no valid split exists, it sets the stump prediction to the mean residual of the whole data. The script returns the final predictions, rounded to four decimal places.\n"}
{"task_id": 471, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    # Calculate the target\n    if next_state is None:\n        target = reward\n    else:\n        # Calculate the expectation\n        expectation = 0\n        num_actions = len(q_table[next_state])\n        for a in range(num_actions):\n            if a == np.argmax(q_table[next_state]):\n                expectation += (1 - epsilon + epsilon / num_actions) * q_table[next_state][a]\n            else:\n                expectation += epsilon / num_actions * q_table[next_state][a]\n        target = reward + gamma * expectation\n\n    # Update the Q-table\n    q_table[state][action] += lr * (target - q_table[state][action])\n\n    # Round all entries to 4 decimal places\n    q_table = [[round(x, 4) for x in row] for row in q_table]\n\n    return q_table\n```\n\nThis script first calculates the target using the formula given in the task description. If there is no next state (i.e., the transition ends the episode), the target is just the immediate reward. If there is a next state, the target is calculated as the sum of the immediate reward, the discount factor, and the expectation of the Q-values of the next state.\n\nThe expectation is calculated as the sum of the Q-values of the next state, weighted by the probabilities of taking each action according to the \u03b5-soft policy. The \u03b5-soft policy is defined as follows: for each action, the probability of taking the action is 1 - \u03b5 + \u03b5 / |A| if the action is greedy (i.e., its Q-value is the maximum Q-value of the next state), and \u03b5 / |A| otherwise.\n\nFinally, the Q-table is updated by adding the product of the learning rate and the difference between the target and the current Q-value to the current Q-value. All entries in the Q-table are then rounded to four decimal places.\n"}
{"task_id": 474, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n\n    for i in range(m):\n        x_min = np.floor(i/2) + 0.1\n        x_max = np.floor(i/2) + 0.9\n        y_min = (i % 2) * interval + 0.1\n        y_max = (i % 2) * interval + 0.9\n\n        for _ in range(n_train):\n            x = round(random.uniform(x_min, x_max) * 10, 4)\n            y = round(random.uniform(y_min, y_max) * 10, 4)\n            X_train.append([x, y])\n            Y_train.append((i - 0.5) * 2)\n\n        for _ in range(n_val):\n            x = round(random.uniform(x_min, x_max) * 10, 4)\n            y = round(random.uniform(y_min, y_max) * 10, 4)\n            X_val.append([x, y])\n            Y_val.append((i - 0.5) * 2)\n\n    return np.array(X_train), np.array(X_val), np.array(Y_train), np.array(Y_val)\n```\n\nThis function generates the training and validation data for a binary classifier. It uses the provided parameters to generate the data and returns the data as NumPy arrays. The data is generated in a way that the classes are separated by a vertical distance of `interval` units. The function also accepts an optional seed parameter to make the output deterministic.\n"}
{"task_id": 475, "completion_id": 0, "completion": "Here is the Python code that implements the Adam optimizer:\n\n```python\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * np.square(grad)\n\n    m_hat = m_new / (1 - b1**t)\n    v_hat = v_new / (1 - b2**t)\n\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n\n    return w_new, m_new, v_new\n```\n\nThis function performs a single Adam update step. It takes the current parameters, gradient, previous first and second moments, time step, and Adam hyperparameters as input. It returns the updated parameters and the new first and second moments.\n"}
{"task_id": 479, "completion_id": 0, "completion": "Here is a Python script that implements the \u03b5-greedy algorithm for the stationary multi-armed bandit problem:\n\n```python\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    # Set the seed for reproducibility\n    if seed is not None:\n        np.random.seed(seed)\n\n    # Initialize the estimated value of every arm with the constant ev_prior and set all pull counters to 0\n    N = len(rewards[0])\n    estimated_values = [ev_prior for _ in range(N)]\n    pull_counters = [0 for _ in range(N)]\n\n    # For each time-step t (row in rewards)\n    for t in range(len(rewards)):\n        # With probability epsilon choose an arm uniformly at random\n        if np.random.random() < epsilon:\n            chosen_arm = np.random.choice(N)\n        # Otherwise choose the arm that currently has the largest estimated value (break ties by the smallest index)\n        else:\n            max_value = max(estimated_values)\n            chosen_arms = [i for i, value in enumerate(estimated_values) if value == max_value]\n            chosen_arm = min(chosen_arms)\n\n        # Receive the reward that corresponds to the chosen arm at this time-step\n        reward = rewards[t][chosen_arm]\n\n        # Update the chosen arm\u2019s estimate using the incremental sample mean\n        pull_counters[chosen_arm] += 1\n        estimated_values[chosen_arm] += (reward - estimated_values[chosen_arm]) / pull_counters[chosen_arm]\n\n    # After the last time-step return the list of arm value estimates rounded to 4 decimal places\n    return [round(value, 4) for value in estimated_values]\n```\n\nThis script first initializes the estimated values and pull counters for each arm. Then, for each time-step, it chooses an arm based on the \u03b5-greedy policy. The chosen arm's estimated value is then updated based on the observed reward. Finally, the estimated values for all arms are returned, rounded to 4 decimal places.\n"}
{"task_id": 481, "completion_id": 0, "completion": "Here is a Python script that implements the DBSCAN algorithm from scratch:\n\n```python\nimport numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if len(data) == 0:\n        return []\n\n    labels = [0]*len(data)\n    cluster_id = 0\n\n    for P_idx, P in enumerate(data):\n        if not (labels[P_idx] == 0):\n            continue\n\n        Neighbors_P = region_query(data, P_idx, eps)\n        if len(Neighbors_P) < min_samples:\n            labels[P_idx] = -1\n            continue\n\n        cluster_id += 1\n        grow_cluster(data, labels, P_idx, Neighbors_P, cluster_id, eps, min_samples)\n\n    return labels\n\ndef grow_cluster(data, labels, P_idx, Neighbors_P, cluster_id, eps, min_samples):\n    labels[P_idx] = cluster_id\n\n    i = 0\n    while i < len(Neighbors_P):\n        P_n_idx = Neighbors_P[i]\n        if labels[P_n_idx] == -1:\n            labels[P_n_idx] = cluster_id\n        elif labels[P_n_idx] != 0:\n            i += 1\n            continue\n\n        labels[P_n_idx] = cluster_id\n        Neighbors_P_n = region_query(data, P_n_idx, eps)\n        if len(Neighbors_P_n) >= min_samples:\n            Neighbors_P = Neighbors_P + Neighbors_P_n\n\n        i += 1\n\ndef region_query(data, P_idx, eps):\n    neighbors = []\n\n    for P_n_idx in range(0, len(data)):\n        if np.linalg.norm(data[P_idx] - data[P_n_idx]) < eps:\n            neighbors.append(P_n_idx)\n\n    return neighbors\n```\n\nThis script first checks if the data array is empty. If it is, it returns an empty list. Otherwise, it initializes a list of labels for each data point, all set to 0. It then iterates over each data point. If the point has already been assigned to a cluster, it skips it. Otherwise, it finds all points within the specified radius of the current point. If the number of such points is less than the specified minimum, it labels the current point as noise and continues to the next point. Otherwise, it starts a new cluster and grows it by adding all reachable points to it. The `grow_cluster` function is used to grow a cluster by adding all reachable points to it, and the `region_query` function is used to find all points within a specified radius of a given point.\n"}
{"task_id": 482, "completion_id": 0, "completion": "Here is a Python script that implements the one-hot encoding routine:\n\n```python\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    y = np.asarray(y, dtype='int')\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    else:\n        if np.any(y >= num_classes) or np.any(y < 0):\n            raise ValueError('Labels must be non-negative and smaller than num_classes.')\n\n    n = y.shape[0]\n    categorical = np.zeros((n, num_classes), dtype='int')\n    categorical[np.arange(n), y] = 1\n\n    return categorical\n```\n\nThis script first converts the input labels to a NumPy array of integers. If `num_classes` is not provided, it is set to `max(y) + 1`. Then it checks if any label is negative or not smaller than `num_classes`. If so, it raises a `ValueError`. Finally, it creates a matrix of zeros of shape `(len(y), num_classes)` and sets the corresponding elements to 1 based on the input labels.\n"}
{"task_id": 485, "completion_id": 0, "completion": "Here is a Python script that implements the univariate regression tree algorithm as described in the task.\n\n```python\nimport numpy as np\n\nclass Node:\n    def __init__(self, split_point=None, left=None, right=None, value=None):\n        self.split_point = split_point\n        self.left = left\n        self.right = right\n        self.value = value\n\ndef build_tree(X, y, depth=0, max_depth=3):\n    if len(X) < 2 or depth == max_depth:\n        return Node(value=np.mean(y))\n\n    best_split_point = None\n    best_sse = float('inf')\n    for split_point in X:\n        left_indices = np.where(X < split_point)[0]\n        right_indices = np.where(X >= split_point)[0]\n        if len(left_indices) == 0 or len(right_indices) == 0:\n            continue\n        left_y = y[left_indices]\n        right_y = y[right_indices]\n        sse = np.sum(np.square(left_y - np.mean(left_y))) + np.sum(np.square(right_y - np.mean(right_y)))\n        if sse < best_sse:\n            best_sse = sse\n            best_split_point = split_point\n\n    if best_split_point is None:\n        return Node(value=np.mean(y))\n\n    left_indices = np.where(X < best_split_point)[0]\n    right_indices = np.where(X >= best_split_point)[0]\n    left = build_tree(X[left_indices], y[left_indices], depth+1, max_depth)\n    right = build_tree(X[right_indices], y[right_indices], depth+1, max_depth)\n    return Node(best_split_point, left, right)\n\ndef predict(tree, X):\n    if tree.value is not None:\n        return tree.value\n    if X < tree.split_point:\n        return predict(tree.left, X)\n    else:\n        return predict(tree.right, X)\n\ndef regression_tree_predict(X_train, y_train, X_test, max_depth=3):\n    if len(X_train) == 0:\n        return []\n    tree = build_tree(np.array(X_train), np.array(y_train), max_depth=max_depth)\n    return [predict(tree, x) for x in X_test]\n```\n\nThis script first defines a `Node` class to represent the nodes of the tree. The `build_tree` function recursively builds the tree by finding the split point that minimizes the sum of squared errors (SSE) of the two children. The `predict` function traverses the tree to make a prediction for a given feature value. The `regression_tree_predict` function builds the tree and uses it to make predictions for the test set.\n"}
{"task_id": 490, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    if len(x) == 0:\n        return []\n    \n    # Convert the input to a NumPy array\n    x = np.array(x)\n    \n    # Create a square diagonal matrix with the input vector on the diagonal\n    diagonal_matrix = np.diag(x)\n    \n    # Convert the NumPy array to a list of lists and return it\n    return diagonal_matrix.tolist()\n```\n\nThis script first checks if the input list is empty. If it is, it returns an empty list. If not, it converts the input to a NumPy array, creates a diagonal matrix with the elements of the array on the diagonal, and then converts the resulting NumPy array to a list of lists.\n"}
{"task_id": 491, "completion_id": 0, "completion": "Here is a Python script that implements the FP-Growth algorithm:\n\n```python\nfrom collections import Counter, defaultdict\nimport itertools\n\nclass Node:\n    def __init__(self, item_name, count, parent):\n        self.item_name = item_name\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.next = None\n\n    def increment(self, count):\n        self.count += count\n\ndef construct_FP_tree(transactions, min_sup):\n    item_counts = Counter()\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] += 1\n\n    header_table = {k: v for k, v in item_counts.items() if v >= min_sup}\n    sorted_item_counts = sorted(header_table.items(), key=lambda kv: kv[1])\n    sorted_item_counts.reverse()\n\n    fp_tree = Node('Null', 1, None)\n    for transaction in transactions:\n        sorted_transaction = [k for k in transaction if k in header_table]\n        sorted_transaction.sort(key=lambda k: header_table[k], reverse=True)\n        current_tree_node = fp_tree\n        for item in sorted_transaction:\n            children = current_tree_node.children\n            if item in children:\n                children[item].increment(1)\n                current_tree_node = children[item]\n            else:\n                children[item] = Node(item, 1, current_tree_node)\n                if header_table[item][1] is None:\n                    header_table[item][1] = children[item]\n                else:\n                    update_header(header_table[item][1], children[item])\n                current_tree_node = children[item]\n    return fp_tree, header_table\n\ndef update_header(node_to_test, target_node):\n    while node_to_test.next is not None:\n        node_to_test = node_to_test.next\n    node_to_test.next = target_node\n\ndef mine_FP_tree(header_table, min_sup, frequent_item_sets, prefix):\n    for item in sorted(header_table.items(), key=lambda kv: kv[1][0]):\n        new_prefix = prefix.copy()\n        new_prefix.add(item[0])\n        frequent_item_sets.append(tuple(sorted(new_prefix)))\n        conditional_pattern_base = get_conditional_pattern_base(header_table, item[0])\n        conditional_tree, new_header_table = construct_FP_tree(conditional_pattern_base, min_sup)\n        if new_header_table is not None:\n            mine_FP_tree(new_header_table, min_sup, frequent_item_sets, new_prefix)\n\ndef get_conditional_pattern_base(header_table, item):\n    conditional_pattern_base = []\n    node = header_table[item][1]\n    while node is not None:\n        path = []\n        parent = node.parent\n        while parent.parent is not None:\n            path.append(parent.item_name)\n            parent = parent.parent\n        for i in range(node.count):\n            conditional_pattern_base.append(path)\n        node = node.next\n    return conditional_pattern_base\n\ndef fp_growth(transactions, min_sup):\n    fp_tree, header_table = construct_FP_tree(transactions, min_sup)\n    frequent_item_sets = []\n    mine_FP_tree(header_table, min_sup, frequent_item_sets, set())\n    return sorted(frequent_item_sets, key=lambda x: (len(x), x))\n```\n\nThis script first constructs the FP-tree and the header table. Then it mines the FP-tree to find all frequent item-sets. The `fp_growth` function is the main function that takes a list of transactions and a minimum support as input and returns a list of all frequent item-sets.\n"}
{"task_id": 492, "completion_id": 0, "completion": "Here is a Python script that implements the `polynomial_features` function as described:\n\n```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n\n    X = np.array(X)\n    n_samples, n_features = X.shape\n\n    # Initialize the output matrix with ones\n    output = np.ones((n_samples, 1))\n\n    # Generate all combinations of features up to the given degree\n    for deg in range(1, degree + 1):\n        for comb in combinations_with_replacement(range(n_features), deg):\n            # Compute the product of the features in the current combination\n            new_col = np.prod(X[:, comb], axis=1)\n            new_col = new_col.reshape(-1, 1)\n\n            # Add the new column to the output matrix\n            output = np.hstack((output, new_col))\n\n    return output.tolist()\n```\n\nThis script first checks if the degree is negative. If it is, it returns -1. Then it converts the input list to a numpy array for easier manipulation. It initializes the output matrix with ones, which represents the degree-0 term. Then it generates all combinations of features up to the given degree, computes the product of the features in each combination, and adds the new column to the output matrix. Finally, it converts the output matrix to a list of lists and returns it.\n"}
{"task_id": 493, "completion_id": 0, "completion": "Here is the Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    if len(y) == 0:\n        return -1\n    else:\n        y_bar = np.mean(y)\n        return round(np.mean([(i - y_bar)**2 for i in y]), 4)\n```\n\nThis script first checks if the input list or array is empty. If it is, it returns -1. If not, it calculates the mean of the list or array, then calculates the mean squared error by subtracting the mean from each element, squaring the result, and then taking the mean of those squared differences. The result is then rounded to 4 decimal places.\n"}
{"task_id": 496, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Ensure x is a numpy array\n    x = np.array(x)\n\n    # Compute the activation output\n    y = slope * x + intercept\n\n    # Compute the first and second derivatives\n    grad = np.full_like(x, slope)\n    grad2 = np.zeros_like(x)\n\n    # Round the output to 4 decimal places\n    y = np.round(y, 4)\n    grad = np.round(grad, 4)\n    grad2 = np.round(grad2, 4)\n\n    return y.tolist(), grad.tolist(), grad2.tolist()\n```\n\nThis script first ensures that the input `x` is a NumPy array. It then computes the activation output `y`, the first derivative `grad`, and the second derivative `grad2`. The derivatives are computed as constant vectors, because the affine activation function is linear. Finally, the output is rounded to 4 decimal places and converted back to lists.\n"}
{"task_id": 499, "completion_id": 0, "completion": "Here is a Python script that implements the PCA dimensionality reduction routine:\n\n```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    # Check if k is within the valid range\n    if k < 1 or k > data.shape[1]:\n        return -1\n\n    # Standardize the data\n    data_std = (data - np.mean(data, axis=0)) / np.std(data, axis=0, ddof=1)\n\n    # Compute the covariance matrix\n    cov_mat = np.cov(data_std.T, ddof=1)\n\n    # Perform an eigen-decomposition of the covariance matrix\n    eig_vals, eig_vecs = np.linalg.eig(cov_mat)\n\n    # Sort eigenvalues and eigenvectors in descending order\n    idx = eig_vals.argsort()[::-1]\n    eig_vals = eig_vals[idx]\n    eig_vecs = eig_vecs[:, idx]\n\n    # Fix the sign of the eigenvectors\n    eig_vecs = np.sign(eig_vecs[0, :]) * eig_vecs\n\n    # Project the data onto the first k eigenvectors\n    projection = np.dot(data_std, eig_vecs[:, :k])\n\n    # Return the projected data rounded to 4 decimal places\n    return np.round(projection, 4).tolist()\n```\n\nThis script first checks if `k` is within the valid range. If it is, it standardizes the data, computes the covariance matrix, performs an eigen-decomposition of the covariance matrix, sorts the eigenvalues and eigenvectors in descending order, fixes the sign of the eigenvectors, projects the data onto the first `k` eigenvectors, and returns the projected data rounded to 4 decimal places. If `k` is outside the valid range, it returns `-1`.\n"}
{"task_id": 500, "completion_id": 0, "completion": "Here is a Python script that implements a very small-scale Gradient Boosting binary classifier using decision stumps as weak learners and the squared-error loss. The script uses the scikit-learn library for the decision stump implementation.\n\n```python\nimport numpy as np\nfrom sklearn.tree import DecisionTreeRegressor\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    # Convert lists to numpy arrays\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    # Initialize the predictions with the average of the training labels\n    F = np.full(y_train.shape, np.mean(y_train))\n\n    # Build the ensemble\n    for _ in range(n_estimators):\n        # Compute the residuals\n        r = y_train - F\n\n        # Fit a decision stump to the residuals\n        h = DecisionTreeRegressor(max_depth=1)\n        h.fit(X_train, r)\n\n        # Update the predictions\n        F += learning_rate * h.predict(X_train)\n\n    # Threshold the final scores at 0.5 to get the predicted class labels\n    y_pred = [1 if score >= 0.5 else 0 for score in F]\n\n    return y_pred\n```\n\nThis script first initializes the predictions with the average of the training labels. Then, it builds the ensemble by fitting a decision stump to the residuals at each stage and updating the predictions. Finally, it thresholds the final scores at 0.5 to get the predicted class labels.\n"}
{"task_id": 505, "completion_id": 0, "completion": "Here is a Python script that implements the Contrastive Divergence (CD-k) algorithm for a Restricted Boltzmann Machine (RBM):\n\n```python\nimport numpy as np\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n\n    # Compute the positive phase hidden probabilities\n    h0_prob = sigmoid(np.dot(X, W) + hbias)\n\n    # Run k full Gibbs steps (hidden \u2192 visible \u2192 hidden) without stochastic sampling\n    v_k = X.copy()\n    for _ in range(k):\n        h_k_prob = sigmoid(np.dot(v_k, W) + hbias)\n        h_k = np.random.binomial(1, h_k_prob)\n        v_k_prob = sigmoid(np.dot(h_k, W.T) + vbias)\n        v_k = np.random.binomial(1, v_k_prob)\n\n    # Compute positive and negative gradients\n    pos_grad = np.dot(X.T, h0_prob)\n    neg_grad = np.dot(v_k_prob.T, h_k_prob)\n\n    # Update the weight matrix\n    W_new = W + learning_rate * (pos_grad - neg_grad) / X.shape[0]\n\n    # Return the updated weight matrix rounded to 4 decimal places and converted to a plain Python list of lists\n    return np.round(W_new, 4).tolist()\n```\n\nThis script first checks if the mini-batch is empty. If it is, it returns an empty list. Otherwise, it computes the positive phase hidden probabilities, runs `k` full Gibbs steps without stochastic sampling, computes the positive and negative gradients, updates the weight matrix, and returns the updated weight matrix rounded to 4 decimal places and converted to a plain Python list of lists.\n"}
{"task_id": 509, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Convert lists to numpy arrays\n    x = np.array(x)\n    y = np.array(y)\n\n    # Check if the vectors have the same length\n    if x.shape != y.shape:\n        return -1\n\n    # Compute the absolute differences\n    diff = np.abs(x - y)\n\n    # Return the maximum difference\n    return np.round(np.max(diff), 4)\n```\n\nThis script first converts the input lists to numpy arrays. It then checks if the arrays have the same length. If they don't, it returns -1. Otherwise, it computes the absolute differences between the arrays and returns the maximum difference, rounded to four decimal places.\n"}
{"task_id": 510, "completion_id": 0, "completion": "Here is a Python script that implements the VAE loss function:\n\n```python\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    # Clip y_pred into the open interval (eps, 1 - eps)\n    eps = np.finfo(float).eps\n    y_pred = np.clip(y_pred, eps, 1 - eps)\n\n    # Compute the reconstruction loss\n    reconstruction_loss = -np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred), axis=-1)\n\n    # Compute the KL divergence\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var), axis=-1)\n\n    # Compute the VAE loss\n    vae_loss = np.mean(reconstruction_loss + kl_divergence)\n\n    return round(vae_loss, 6)\n```\n\nThis function first clips the `y_pred` values to be in the open interval `(eps, 1 - eps)` to avoid numerical instability. Then it computes the reconstruction loss as the negative sum of the element-wise binary cross-entropy between `y` and `y_pred`. The KL divergence is computed as the negative half of the sum of `1 + t_log_var - np.square(t_mean) - np.exp(t_log_var)`. Finally, the VAE loss is the average of the reconstruction loss and the KL divergence, rounded to 6 decimal places.\n"}
{"task_id": 513, "completion_id": 0, "completion": "Here is a Python script that implements the Factorization Machine regression prediction formula:\n\n```python\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    # Convert lists to numpy arrays\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n\n    # Calculate linear and interaction terms\n    linear_terms = np.dot(X, w)\n    interaction_terms = 0.5 * np.sum(np.power(np.dot(X, V), 2) - np.dot(np.power(X, 2), np.power(V, 2)), axis=1)\n\n    # Calculate predictions and round to 4 decimal places\n    predictions = w0 + linear_terms + interaction_terms\n    predictions = np.round(predictions, 4)\n\n    return predictions.tolist()\n```\n\nThis function first converts the input lists to numpy arrays for easier and more efficient numerical computations. It then calculates the linear and interaction terms separately, and adds them together to get the final predictions. The predictions are rounded to 4 decimal places before being returned.\n"}
{"task_id": 517, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    z = np.array(z)\n    sigmoid_values = 1 / (1 + np.exp(-z))\n    rounded_values = np.round(sigmoid_values, 4)\n\n    if rounded_values.shape == (1,):\n        return float(rounded_values[0])\n    else:\n        return rounded_values.tolist()\n\n# Test the function\nprint(sigmoid([-1, 0, 1]))  # Expected output: [0.2689, 0.5, 0.7311]\n```\n\nThis code first converts the input `z` to a NumPy array. Then it computes the sigmoid values for each element in the array. The sigmoid function is defined as `1 / (1 + e^(\u2212z))`, which is computed using the `np.exp` function. The sigmoid values are then rounded to four decimal places using `np.round`. If the rounded values are a single-element array, it is converted to a float. Otherwise, it is converted to a Python list using `tolist()`.\n"}
{"task_id": 518, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n\n    return wrapper\n```\n\nThis code defines a decorator `unhot` that takes a function as an argument and returns a new function that performs the described conversion and then calls the original function. The conversion is performed by checking if the input arrays are 2-D and their second dimension is larger than one, and if so, replacing them with their `argmax` along axis 1.\n\nThe usage example provided in the task description is then correctly implemented using this decorator.\n"}
{"task_id": 520, "completion_id": 0, "completion": "Here is the Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, list):\n        return [sigmoid_grad(sub_z) for sub_z in z]\n    elif isinstance(z, np.ndarray):\n        return np.round(z * (1 - z), 4)\n    else:\n        return round(z * (1 - z), 4)\n```\n\nThis script defines a function `sigmoid_grad` that computes the derivative of the sigmoid function for a given input. If the input is a list, it recursively applies the function to each element of the list. If the input is a NumPy array, it computes the derivative element-wise and rounds the results to 4 decimal places. If the input is a scalar, it computes the derivative and rounds the result to 4 decimal places.\n"}
{"task_id": 528, "completion_id": 0, "completion": "Here is the Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    X = np.array(X)\n    x1_min, x1_max = X[:, 0].min(), X[:, 0].max()\n    x2_min, x2_max = X[:, 1].min(), X[:, 1].max()\n\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n\n    x1_mesh, x2_mesh = np.meshgrid(x1_plot, x2_plot)\n\n    Z = W[0]*x1_mesh + W[1]*x2_mesh + b\n    Z = np.sign(Z)\n\n    return Z.tolist()\n```\n\nThis script first converts the input list to a numpy array for easier manipulation. It then calculates the minimum and maximum values of the first and second columns of the array to determine the range of the grid. It then creates two equally spaced 1-D arrays, `x1_plot` and `x2_plot`, that range from the minimum to the maximum value of the corresponding column of `X`. It creates a mesh-grid from these arrays using `np.meshgrid`. The function then calculates the dot product of the weight vector with the mesh-grid and adds the bias term. The result is passed through the `np.sign` function to get the labels (-1 or 1) for each grid point. The labels are then converted back to a list and returned.\n"}
{"task_id": 537, "completion_id": 0, "completion": "Here is a Python script that implements a Gaussian Naive Bayes classifier from scratch:\n\n```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    # Compute class priors\n    priors = np.bincount(y_train) / len(y_train)\n\n    # Compute mean and standard deviation for each feature for each class\n    means = np.array([X_train[y_train == c].mean(axis=0) for c in np.unique(y_train)])\n    stds = np.array([X_train[y_train == c].std(axis=0) for c in np.unique(y_train)])\n\n    # Add a very small constant to avoid division by zero\n    eps = 1e-9\n    stds += eps\n\n    # Compute the Gaussian likelihood for each feature for each class\n    likelihoods = []\n    for x in X_test:\n        likelihood = []\n        for c in range(len(means)):\n            gaussian = (1 / (np.sqrt(2 * np.pi) * stds[c])) * np.exp(-((x - means[c]) ** 2) / (2 * stds[c] ** 2))\n            likelihood.append(np.prod(gaussian))\n        likelihoods.append(likelihood)\n\n    # Compute the posterior probability for each class\n    posteriors = np.array(likelihoods) * priors\n\n    # Return the class with the higher posterior probability for each test sample\n    return np.argmax(posteriors, axis=1).tolist()\n```\n\nThis script first computes the class priors, mean and standard deviation for each feature for each class. It then computes the Gaussian likelihood for each feature for each class and multiplies it by the class prior to get the posterior probability. Finally, it returns the class with the higher posterior probability for each test sample.\n"}
{"task_id": 539, "completion_id": 0, "completion": "Here is the Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost.\n\n    Parameters:\n    AL (np.ndarray): A vector of probabilities.\n    Y (np.ndarray): A vector of true labels.\n\n    Returns:\n    float: The binary cross-entropy cost.\n    \"\"\"\n\n    # Clip the probabilities to avoid numerical overflow\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n\n    # Compute the binary cross-entropy cost\n    cost = -1/Y.shape[1] * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n\n    # Return the cost as a plain Python float rounded to 4 decimal places\n    return round(float(cost), 4)\n```\n\nThis function first clips the input probabilities to avoid numerical overflow. Then it computes the binary cross-entropy cost using the provided formula. Finally, it returns the cost as a plain Python float rounded to 4 decimal places.\n"}
{"task_id": 552, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    if t < 0 or t >= len(observations):\n        return []\n\n    pi, A, B = hmm['pi'], hmm['A'], hmm['B']\n    N = len(pi)\n\n    # Forward probabilities\n    alpha = pi * B[:, observations[0]]\n    for i in range(1, t+1):\n        alpha = (alpha @ A) * B[:, observations[i]]\n\n    # Backward probabilities\n    beta = np.ones(N)\n    for i in range(len(observations)-1, t, -1):\n        beta = A @ (beta * B[:, observations[i]])\n\n    # Posterior probabilities\n    gamma = alpha * beta\n    gamma /= np.sum(gamma)\n\n    return [round(p, 4) for p in gamma]\n```\n\nThis script first checks if the given time step `t` is valid. If it's not, it returns an empty list. Then it extracts the initial distribution `pi`, transition matrix `A`, and emission matrix `B` from the HMM parameters.\n\nThe script then computes the forward probabilities `alpha` and backward probabilities `beta` up to time `t`. It then computes the posterior probabilities `gamma` as the product of `alpha` and `beta`, normalized by their sum.\n\nFinally, it rounds each posterior probability to four decimal places and returns the result as a list.\n"}
{"task_id": 555, "completion_id": 0, "completion": "Here is a Python script that implements the DBSCAN algorithm:\n\n```python\nimport numpy as np\nfrom collections import deque\nfrom scipy.spatial.distance import pdist, squareform\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    # Compute pairwise Euclidean distances\n    dists = squareform(pdist(data))\n\n    # Identify core points\n    core_points = np.sum(dists <= eps, axis=0) >= min_samples\n\n    # Initialize cluster labels\n    labels = np.full(data.shape[0], -1)\n\n    # Initialize cluster counter\n    cluster_id = 0\n\n    # Iterate over all points\n    for i in range(data.shape[0]):\n        # If the point is already assigned to a cluster, skip it\n        if labels[i] != -1:\n            continue\n\n        # If the point is not a core point, label it as noise\n        if not core_points[i]:\n            labels[i] = -1\n            continue\n\n        # If the point is a core point, start a new cluster\n        cluster_id += 1\n        labels[i] = cluster_id\n\n        # Initialize a queue for BFS\n        queue = deque([i])\n\n        # Perform BFS\n        while queue:\n            current_point = queue.popleft()\n\n            # Find all neighboring points\n            neighbors = np.where(dists[current_point] <= eps)[0]\n\n            # Iterate over all neighboring points\n            for neighbor in neighbors:\n                # If the neighbor is not assigned to a cluster, assign it to the current cluster\n                if labels[neighbor] == -1:\n                    labels[neighbor] = cluster_id\n\n                # If the neighbor is a core point, add it to the queue\n                if core_points[neighbor]:\n                    queue.append(neighbor)\n\n    return labels.tolist()\n```\n\nThis script first computes the pairwise Euclidean distances between all points. It then identifies the core points based on the supplied `eps` and `min_samples` parameters. The script initializes a list of cluster labels, where each label is initially set to -1 (noise). The script then iterates over all points. If a point is not already assigned to a cluster and is a core point, a new cluster is started and the point is assigned to this cluster. The script then performs a breadth-first search (BFS) from the current point, assigning all reachable points to the current cluster and adding them to the BFS queue if they are core points. The script continues until all points have been visited. Finally, the script returns the list of cluster labels.\n"}
{"task_id": 561, "completion_id": 0, "completion": "Here is a Python script that implements the Expectation\u2013Maximization (EM) algorithm for a Gaussian Mixture Model (GMM). The script uses the `numpy` and `scipy` libraries.\n\n```python\nimport numpy as np\nfrom scipy.stats import multivariate_normal\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    # Randomly initialize the parameters of K Gaussian components\n    np.random.seed(0)\n    n, d = data.shape\n    weights = np.random.rand(k)\n    weights /= weights.sum()\n    means = np.random.rand(k, d)\n    covariances = np.array([np.eye(d)] * k)\n\n    # Repeatedly perform the Expectation (E) and Maximization (M) steps\n    for _ in range(max_iter):\n        # E step: compute responsibilities\n        responsibilities = np.zeros((n, k))\n        for i in range(k):\n            responsibilities[:, i] = weights[i] * multivariate_normal.pdf(data, means[i], covariances[i])\n        responsibilities /= responsibilities.sum(axis=1, keepdims=True)\n\n        # M step: update parameters\n        new_weights = responsibilities.mean(axis=0)\n        new_means = responsibilities.T @ data / responsibilities.sum(axis=0)[:, None]\n        new_covariances = np.zeros((k, d, d))\n        for i in range(k):\n            diff = data - means[i]\n            new_covariances[i] = (responsibilities[:, i] * diff.T) @ diff / responsibilities.sum(axis=0)[i]\n\n        # Check for convergence\n        if np.max(np.abs(new_weights - weights)) < epsilon:\n            break\n\n        weights = new_weights\n        means = new_means\n        covariances = new_covariances\n\n    # Assign each sample to the component with the largest posterior probability\n    labels = np.argmax(responsibilities, axis=1)\n\n    # Sort the components by the first coordinate of their mean in ascending order and relabel\n    order = np.argsort(means[:, 0])\n    labels = order[labels]\n\n    return labels.tolist()\n```\n\nThis script first initializes the parameters of the Gaussian components randomly. Then it repeatedly performs the Expectation and Maximization steps until convergence or the maximum number of iterations is reached. After convergence, it assigns each sample to the component with the largest posterior probability. Finally, it sorts the components by the first coordinate of their mean in ascending order and relabels the cluster indices accordingly.\n\nThe output of this script is a list of length N containing the final cluster label of each sample. The list is deterministic for identical inputs.\n"}
{"task_id": 562, "completion_id": 0, "completion": "Here is a Python script that implements the Spectral Clustering algorithm as described:\n\n```python\nimport numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n\n    # Compute the pairwise squared distance\n    dist = np.sum(data**2, axis=1).reshape(-1, 1) + \\\n           np.sum(data**2, axis=1) - \\\n           2 * np.dot(data, data.T)\n\n    # Compute the similarity\n    W = np.exp(-gamma * dist)\n\n    # Compute the degree diagonal\n    D = np.diag(np.sum(W, axis=1))\n\n    # Compute the Laplacian\n    if method == 'unnormalized':\n        L = D - W\n    else:\n        D_inv_sqrt = np.diag(1 / np.sqrt(np.diag(D)))\n        L = np.eye(len(data)) - np.dot(np.dot(D_inv_sqrt, W), D_inv_sqrt)\n\n    # Compute the eigenvectors\n    _, V = np.linalg.eigh(L)\n\n    # Run k-means in the eigenvector space\n    centroids = V[:n_cluster]\n    labels = np.argmin(np.sum((V[:, :, None] - centroids.T) ** 2, axis=1), axis=1)\n\n    # Relabel clusters\n    label_order = np.argsort(np.argmin(np.sum((data - data[np.argsort(labels)]) ** 2, axis=1), axis=1))\n    labels = label_order[labels]\n\n    return labels.tolist()\n```\n\nThis script first computes the pairwise squared distance and the similarity matrix using the Gaussian kernel. It then computes the degree diagonal and the Laplacian matrix. Depending on the `method` parameter, it either uses the un-normalized Laplacian or the symmetric normalized Laplacian.\n\nNext, it computes the eigenvectors of the Laplacian matrix. These eigenvectors are used as the feature space for the k-means clustering algorithm. The k-means algorithm is run in this feature space to obtain the final cluster labels.\n\nFinally, the cluster labels are relabeled so that the cluster containing the smallest original index gets label 0, the next one 1, etc. The relabeled labels are returned as a list of integers.\n"}
{"task_id": 563, "completion_id": 0, "completion": "Here is a Python script that implements the Dual-form Perceptron learning algorithm:\n\n```python\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N, d = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.dot(alpha * y_data, G[i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n\n    w = np.dot(alpha * y_data, X_data)\n    w = np.round(w, 4).tolist()\n    b = np.round(b, 4)\n\n    return w, b\n```\n\nThis script first initializes the alpha and b parameters, then computes the Gram matrix G. It then enters a loop where it iterates over the data and updates alpha and b if a misclassification is found. If no misclassification is found in a complete pass over the data, the loop is broken. Finally, the weight vector is computed and returned, with each element rounded to 4 decimal places.\n"}
{"task_id": 564, "completion_id": 0, "completion": "Here is a Python script that implements the `predict_sample` function as described:\n\n```python\nclass Node:\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label\n        self.x = x\n        self.s = s\n        self.y = y\n        self.child = child\n\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n\n    if task_type == 'classification':\n        for child in root.child:\n            if child.x == features[root.label]:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n\n    elif task_type == 'regression':\n        if features[root.label] <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)\n```\n\nThis script first checks if the current node is a leaf node (i.e., if it stores a prediction `y`). If it does, it returns that prediction. If it doesn't, it checks the type of the decision tree and follows the appropriate traversal rules.\n\nPlease note that this script assumes that the tree is well-formed and every internal node has exactly the number of children required by its type. If these assumptions are not met, the script may not work correctly.\n"}
{"task_id": 565, "completion_id": 0, "completion": "Here is a Python script that implements the `choose_best_feature` function:\n\n```python\nimport numpy as np\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    def entropy(labels):\n        _, counts = np.unique(labels, return_counts=True)\n        p = counts / len(labels)\n        return -np.sum(p * np.log2(p))\n\n    def conditional_entropy(feature, labels):\n        _, counts = np.unique(feature, return_counts=True)\n        p = counts / len(feature)\n        entropy_values = []\n        for value in np.unique(feature):\n            subset_labels = labels[feature == value]\n            entropy_values.append(entropy(subset_labels))\n        return np.sum(p * entropy_values)\n\n    H_y = entropy(y)\n    max_information_gain = -np.inf\n    best_feature_index = -1\n\n    for feature_index in range(X.shape[1]):\n        H_y_given_A = conditional_entropy(X[:, feature_index], y)\n        information_gain = H_y - H_y_given_A\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = feature_index\n\n    return best_feature_index, round(max_information_gain, 6)\n```\n\nThis script first defines two helper functions: `entropy` and `conditional_entropy`. The `entropy` function calculates the entropy of a set of labels, while the `conditional_entropy` function calculates the conditional entropy of a feature given a set of labels.\n\nThe main function `choose_best_feature` calculates the entropy of the labels and initializes the maximum information gain and best feature index to negative infinity and -1, respectively. It then iterates over each feature in the data matrix, calculates the conditional entropy of the feature given the labels, and calculates the information gain as the difference between the entropy of the labels and the conditional entropy. If the information gain is greater than the maximum information gain, it updates the maximum information gain and the best feature index. Finally, it returns the best feature index and the maximum information gain rounded to 6 decimal places.\n"}
{"task_id": 566, "completion_id": 0, "completion": "Here is a Python script that implements the Isolation Forest algorithm as described in the task:\n\n```python\nimport numpy as np\nimport math\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n\n    n_samples, n_features = data.shape\n    phi = 2 * np.log(n_samples - 1) - 2 * (n_samples - 1) / n_samples\n    outlier_scores = np.zeros(n_samples)\n\n    for _ in range(n_trees):\n        subsample_indices = np.random.choice(n_samples, size=sample_size, replace=False)\n        subsample = data[subsample_indices]\n        tree = build_tree(subsample, 0, int(np.log2(sample_size)))\n        path_lengths = np.zeros(n_samples)\n\n        for i, sample in enumerate(data):\n            path_lengths[i] = path_length(tree, sample)\n\n        outlier_scores += 2 ** (-path_lengths / phi)\n\n    outlier_scores /= n_trees\n    outlier_threshold = np.percentile(outlier_scores, 100 * (1 - epsilon))\n    outlier_indices = np.where(outlier_scores > outlier_threshold)[0]\n\n    return sorted(outlier_indices.tolist())\n\n\ndef build_tree(data: np.ndarray, depth: int, height_limit: int) -> dict:\n    \"\"\"Recursively build a random binary tree.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        depth: Current depth of the tree.\n        height_limit: Maximum depth of the tree.\n\n    Returns:\n        A dictionary representing the tree.\n    \"\"\"\n    n_samples, n_features = data.shape\n    feature_index = np.random.choice(n_features)\n    threshold = np.random.uniform(data[:, feature_index].min(), data[:, feature_index].max())\n\n    left_indices = data[:, feature_index] < threshold\n    right_indices = np.logical_not(left_indices)\n\n    if depth == height_limit or left_indices.sum() <= 1 or right_indices.sum() <= 1:\n        return {'feature': feature_index, 'threshold': threshold}\n\n    return {\n        'feature': feature_index,\n        'threshold': threshold,\n        'left': build_tree(data[left_indices], depth + 1, height_limit),\n        'right': build_tree(data[right_indices], depth + 1, height_limit),\n    }\n\n\ndef path_length(tree: dict, sample: np.ndarray, depth: int = 0) -> float:\n    \"\"\"Compute the path length of a sample in a tree.\n\n    Args:\n        tree: A dictionary representing the tree.\n        sample: A 1-D NumPy array representing a sample.\n        depth: Current depth of the tree.\n\n    Returns:\n        The path length of the sample in the tree.\n    \"\"\"\n    if 'left' not in tree:\n        return c(tree['n_samples']) + depth\n\n    if sample[tree['feature']] < tree['threshold']:\n        return path_length(tree['left'], sample, depth + 1)\n    else:\n        return path_length(tree['right'], sample, depth + 1)\n\n\ndef c(n: int) -> float:\n    \"\"\"Approximation of the expected path length of unsuccessful searches in a binary search tree.\n\n    Args:\n        n: Number of samples in the node.\n\n    Returns:\n        The approximation of the expected path length.\n    \"\"\"\n    if n == 1:\n        return 0\n    else:\n        return 2 * np.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n```\n\nThis script first initializes the outlier scores to zero and then grows a number of random isolation trees. For each tree, it computes the path length of each sample and adds it to the outlier scores. After all trees have been grown, it computes the average outlier score and the outlier threshold. Finally, it finds the indices of the samples with an outlier score greater than the threshold and returns them sorted in ascending order.\n"}
{"task_id": 568, "completion_id": 0, "completion": "Here is a Python script that implements the Maximum Entropy classifier with Generalized Iterative Scaling (GIS) algorithm.\n\n```python\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    # Build the empirical distributions\n    empirical_dist = defaultdict(int)\n    for x, y in zip(X_train, y_train):\n        empirical_dist[(tuple(x), y)] += 1\n\n    # Initialize the weight vector\n    weights = np.zeros(len(empirical_dist))\n\n    # Iteratively update the weight vector\n    for _ in range(n_iter):\n        # Calculate the normalization factor\n        Z = np.array([math.exp(np.sum(weights[j] * empirical_dist[f_j] for j, f_j in enumerate(empirical_dist))) for _ in range(len(X_train))])\n\n        # Calculate the gradient\n        gradient = np.array([empirical_dist[f_j] * (np.sum(weights[j] * empirical_dist[f_j] for j, f_j in enumerate(empirical_dist)) - empirical_dist[(tuple(x), y)]) for x, y in zip(X_train, y_train)])\n\n        # Update the weights\n        weights_new = weights - epsilon * np.sum(gradient, axis=0) / len(X_train)\n\n        # Check for convergence\n        if np.max(np.abs(weights_new - weights)) < epsilon:\n            break\n\n        weights = weights_new\n\n    # Predict the labels for the test set\n    y_pred = []\n    for x in X_test:\n        scores = np.array([math.exp(np.sum(weights[j] * empirical_dist[(tuple(x), y)] for j, _ in enumerate(empirical_dist))) for y in np.unique(y_train)])\n        y_pred.append(np.argmax(scores))\n\n    return y_pred\n```\n\nThis script first builds the empirical distributions from the training data. It then initializes the weight vector and iteratively updates it until convergence. Finally, it predicts the labels for the test set by calculating the scores for each label and choosing the one with the highest score.\n\nPlease note that this is a simplified implementation and may not work for all types of data. The GIS algorithm is a complex algorithm and may require additional steps or modifications to work correctly.\n"}
{"task_id": 569, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    # Count the number of documents\n    num_docs = len(data)\n\n    # Count the number of documents each word appears in\n    word_counts = Counter()\n    for _, words in data:\n        word_counts.update(set(words))\n\n    # Calculate the document-frequency ratio for each word\n    word_ratios = {word: round(count / num_docs, 4) for word, count in word_counts.items()}\n\n    # Sort the words by their document-frequency ratio\n    sorted_words = sorted(word_ratios.items(), key=lambda x: x[1], reverse=True)\n\n    # Get the most common words\n    if cut_off is None:\n        common_words = set(word_ratios.keys())\n    else:\n        common_words = set(word for word, _ in sorted_words[:cut_off])\n\n    return sorted_words, common_words\n```\n\nThis script first counts the number of documents and the number of documents each word appears in. It then calculates the document-frequency ratio for each word and sorts the words by their ratio. Finally, it returns a list of (word, ratio) pairs and a set of the most common words.\n"}
{"task_id": 571, "completion_id": 0, "completion": "Here is the Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           -1).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute the weight vector\n    w = np.dot(X.T, alpha * y)\n    # Compute the bias term\n    b = np.mean(y - np.dot(w, X.T))\n    # Round all elements to 4 decimal places\n    w_list = np.round(w, 4).tolist()\n    b = np.round(b, 4)\n    return w_list, b\n```\n\nThis script first computes the weight vector and bias term using the formulas provided in the task description. It then rounds all elements of the weight vector and the bias term to 4 decimal places. The weight vector is returned as a Python list.\n"}
{"task_id": 572, "completion_id": 0, "completion": "Here is a Python script that implements the Local Outlier Factor (LOF) algorithm as described in the task.\n\n```python\nimport numpy as np\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"\n    Compute the Local Outlier Factor (LOF) for each sample in the data.\n    \n    Parameters:\n    data (numpy array): The data set to compute the LOF for.\n    k (int): The number of nearest neighbors to consider.\n    epsilon (float): The threshold for outlier detection.\n    \n    Returns:\n    tuple: A tuple consisting of the list of LOF scores rounded to four decimals and the ascending list of indices of all samples whose LOF score is strictly larger than `epsilon`.\n    \"\"\"\n    \n    # Compute the full pair\u2013wise Euclidean distance matrix\n    dist_matrix = np.sqrt(((data[:, np.newaxis] - data) ** 2).sum(axis=-1))\n    \n    # For every sample p obtain its k-distance and the index list of those k nearest neighbours Nk(p)\n    k_distances = np.partition(dist_matrix, k, axis=1)[:, k]\n    k_neighbors = np.argpartition(dist_matrix, k, axis=1)[:, :k+1]\n    \n    # Define the reachability distance between two points\n    reach_distances = np.maximum(k_distances[k_neighbors], dist_matrix[k_neighbors[:, 0], k_neighbors[:, 1]])\n    \n    # Compute the Local Reachability Density (LRD) of p\n    lrd = k / reach_distances.sum(axis=1)\n    \n    # Compute the Local Outlier Factor (LOF) of p\n    lof = ((reach_distances.sum(axis=1) / k) / lrd)\n    \n    # Round every LOF score to the nearest 4th decimal place\n    lof_scores = np.round(lof, 4)\n    \n    # Get the indices of all samples whose LOF score is strictly larger than `epsilon`\n    outlier_indices = np.where(lof_scores > epsilon)[0]\n    \n    return lof_scores.tolist(), outlier_indices.tolist()\n```\n\nThis script first computes the full pair\u2013wise Euclidean distance matrix for the data. Then, for each sample, it computes the *k*-distance and the index list of those *k* nearest neighbours. It defines the reachability distance between two points and computes the Local Reachability Density (LRD) of each sample. Finally, it computes the Local Outlier Factor (LOF) of each sample and rounds every LOF score to the nearest 4th decimal place. It returns a tuple consisting of the list of LOF scores and the ascending list of indices of all samples whose LOF score is strictly larger than `epsilon`.\n"}
{"task_id": 574, "completion_id": 0, "completion": "Here is a Python script that implements the `generate_data` function as described:\n\n```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n\n    for c in range(m):\n        base = 10 * (c // 2) + 5\n        X_train.append(np.random.uniform(base+1, base+9, (n_train, 2)))\n        y_train.append(np.full(n_train, c))\n        X_val.append(np.random.uniform(base+1, base+9, (n_val, 2)))\n        y_val.append(np.full(n_val, c))\n\n    X_train = np.round(np.concatenate(X_train), 4)\n    y_train = np.concatenate(y_train)\n    X_val = np.round(np.concatenate(X_val), 4)\n    y_val = np.concatenate(y_val)\n\n    return X_train, X_val, y_train, y_val\n```\n\nThis script first checks if a seed is provided. If so, it sets the random seed to ensure reproducibility. Then it initializes empty lists for the training and validation data and labels. For each class, it generates the training and validation data and labels, appends them to the respective lists, and then concatenates them into NumPy arrays. Finally, it rounds the coordinates to 4 decimal places and returns the arrays.\n"}
{"task_id": 579, "completion_id": 0, "completion": "Here is a Python script that implements the K-Means clustering algorithm as described:\n\n```python\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    # Initialization\n    centres = X[:k].tolist()\n    labels = [0] * len(X)\n\n    for _ in range(max_iters):\n        # Assignment step\n        new_labels = []\n        for point in X:\n            distances = [np.linalg.norm(point - np.array(centre)) for centre in centres]\n            new_labels.append(np.argmin(distances))\n\n        # Update step\n        if new_labels == labels:\n            break\n        labels = new_labels\n        for i in range(k):\n            points_in_cluster = [x for x, label in zip(X, labels) if label == i]\n            if points_in_cluster:\n                centres[i] = np.mean(points_in_cluster, axis=0).tolist()\n\n    # Round centres to 4 decimals\n    centres = [[round(coord, 4) for coord in centre] for centre in centres]\n\n    return labels, centres\n```\n\nThis script first initializes the cluster centres as the first *k* points in the dataset and assigns each point to the nearest cluster centre. Then it updates the cluster centres as the mean of the points in each cluster. This process is repeated until the assignments stop changing or the maximum number of iterations is reached. The final cluster centres are rounded to 4 decimal places.\n"}
{"task_id": 581, "completion_id": 0, "completion": "Here is a Python script that implements the Elastic-Net regularised linear regression with batch gradient descent:\n\n```python\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    m, n = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n\n    if learning_rate == 0 or iterations == 0:\n        return (weights.tolist(), round(bias, 4))\n\n    for _ in range(iterations):\n        y_pred = np.dot(X, weights) + bias\n        residuals = y - y_pred\n\n        dL_dw = (-2 * np.dot(X.T, residuals) + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights) / m\n        dL_db = -2 * np.sum(residuals) / m\n\n        weights -= learning_rate * dL_dw\n        bias -= learning_rate * dL_db\n\n    return ([round(w, 4) for w in weights.tolist()], round(bias, 4))\n```\n\nThis script first initializes the weights and bias to zero. Then, it performs the specified number of iterations of gradient descent. In each iteration, it computes the predictions, residuals, and gradients. The weights and bias are then updated using these gradients. Finally, it returns the learned weights and bias, rounded to four decimal places.\n"}
{"task_id": 591, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    x = np.array(x)\n    for layer_weights in weights[:-1]:\n        x = np.array([max(0, np.dot(x, neuron_weights[1:]) + neuron_weights[0]) for neuron_weights in layer_weights])\n    output = np.dot(x, weights[-1][0][1:]) + weights[-1][0][0]\n    return round(output, 4)\n```\n\nThis script first converts the input vector `x` to a numpy array. Then, for each layer (except the last one), it computes the dot product of the input vector with the weights of each neuron in the layer, adds the bias weight, and applies the ReLU function to the result. The output of each layer is then used as the input for the next layer. Finally, the output of the last layer is computed and returned, rounded to four decimal places.\n"}
{"task_id": 595, "completion_id": 0, "completion": "Here is a Python script that implements the K-Means clustering algorithm from scratch:\n\n```python\nimport numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Your task: implement here. See docstring in the description.\"\"\"\n    # Initialise the centroids with the first k samples in X\n    centroids = X[:k]\n    \n    # Repeat for at most max_iters iterations\n    for _ in range(max_iters):\n        # Assign every sample to the nearest centroid using the squared Euclidean distance\n        distances = np.sqrt(((X - centroids[:, np.newaxis])**2).sum(axis=-1))\n        labels = np.argmin(distances, axis=0)\n        \n        # Update each centroid to the arithmetic mean of the samples currently assigned to it\n        new_centroids = np.array([X[labels==i].mean(axis=0) for i in range(k)])\n        \n        # Stop early if all centroids move less than 1e-4 in a full iteration\n        if np.all(np.abs(new_centroids - centroids) < 1e-4):\n            break\n        \n        # If a cluster becomes empty during an update, keep its centroid unchanged\n        new_centroids = np.where(np.isnan(new_centroids), centroids, new_centroids)\n        \n        centroids = new_centroids\n    \n    # After convergence, sort the centroids in ascending lexicographical order\n    centroids = centroids[np.lexsort(centroids.T[::-1])]\n    \n    # Round every coordinate to 4 decimal places\n    centroids = np.round(centroids, 4).tolist()\n    \n    return centroids\n```\n\nThis script first initializes the centroids with the first `k` samples in `X`. Then, it repeats for at most `max_iters` iterations. In each iteration, it assigns every sample to the nearest centroid using the squared Euclidean distance, and updates each centroid to the arithmetic mean of the samples currently assigned to it. If all centroids move less than `1e-4` in a full iteration, it stops early. If a cluster becomes empty during an update, it keeps its centroid unchanged. After convergence, it sorts the centroids in ascending lexicographical order and rounds every coordinate to 4 decimal places. Finally, it returns the sorted, rounded centroids as a Python list of lists.\n"}
