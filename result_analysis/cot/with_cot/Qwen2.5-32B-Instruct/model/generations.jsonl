{"task_id": 0, "completion_id": 0, "completion": "To implement the Ridge Regression closed-form solver, we need to follow these steps:\n\n1. Separate the input data into features $\\mathbf X$ and target $\\mathbf y$.\n2. Add a bias (intercept) term to the features.\n3. Compute the weight vector using the closed-form solution.\n4. Check if the matrix $(\\mathbf X^\\top\\mathbf X+\\alpha\\,\\mathbf I)$ is invertible.\n5. Return the weight vector rounded to 4 decimal places as a Python list.\n\nHere is the Python script that accomplishes this:\n\n```python\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Implements Ridge Regression using the closed-form solution.\n    \n    Parameters:\n    - data: np.ndarray, the input data where the last column is the target y and all preceding columns are the features X.\n    - alpha: float, the regularization strength.\n    \n    Returns:\n    - list[float], the weight vector rounded to 4 decimal places.\n    If the matrix is not invertible, returns -1.\n    \"\"\"\n    # Separate the features and the target\n    X = data[:, :-1]\n    y = data[:, -1]\n    \n    # Add a bias term to the features\n    X = np.column_stack((np.ones(X.shape[0]), X))\n    \n    # Compute the matrix to be inverted\n    n_features = X.shape[1]\n    matrix = np.dot(X.T, X) + alpha * np.eye(n_features)\n    \n    # Check if the matrix is invertible\n    if np.linalg.det(matrix) == 0:\n        return -1\n    \n    # Compute the weight vector\n    weights = np.dot(np.linalg.inv(matrix), np.dot(X.T, y))\n    \n    # Return the weights rounded to 4 decimal places\n    return [round(w, 4) for w in weights]\n\n# Example usage\ndata = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nalpha = 0.1\nweights = ridge_regression(data, alpha)\nprint(weights)\n```\n\nThis script defines the `ridge_regression` function that takes a numpy array `data` and a regularization strength `alpha` as inputs. It separates the features and the target, adds a bias term, computes the weight vector using the closed-form solution, and checks for matrix invertibility. If the matrix is not invertible, it returns -1. Otherwise, it returns the weight vector rounded to 4 decimal places."}
{"task_id": 1, "completion_id": 0, "completion": "To implement the dual-form perceptron learning algorithm, we need to follow the steps outlined in the task description. The key points are to initialize the dual parameters `\u03b1` and the bias `b`, compute the activation for each sample, check the margin, and update the parameters if the sample is misclassified. We also need to compute the primal weight vector `w` from the final `\u03b1` after training.\n\nHere is the self-contained Python script that implements the dual-form perceptron learning algorithm:\n\n```python\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    updates = 0\n\n    # Compute the Gram matrix\n    K = np.dot(X_train, X_train.T)\n\n    while updates < n_iter:\n        updated = False\n        for i in range(n_samples):\n            activation = np.sum(alpha * y_train * K[:, i])\n            margin = y_train[i] * (activation + b)\n            if margin <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n                updates += 1\n        if not updated:\n            break\n\n    # Compute the primal weight vector w\n    w = np.dot(alpha * y_train, X_train).tolist()\n    w = [round(x, 4) for x in w]\n    b = round(b, 4)\n\n    return w, b\n\n# Example usage\nif __name__ == \"__main__\":\n    X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n    y_train = np.array([1, 1, -1, -1])\n    w, b = perceptron_dual(X_train, y_train)\n    print(f\"Weight vector w: {w}\")\n    print(f\"Bias b: {b}\")\n```\n\nThis script defines the `perceptron_dual` function that implements the dual-form perceptron learning algorithm. It initializes the dual parameters `\u03b1` and the bias `b`, computes the Gram matrix, and iterates over the samples to update the parameters if a sample is misclassified. After training, it computes the primal weight vector `w` and returns it along with the bias `b`, both rounded to four decimal places."}
{"task_id": 2, "completion_id": 0, "completion": "To solve the given task, we need to implement the `glm_links` function that returns a dictionary containing the link functions, their inverses, and their derivatives for the identity, log, and logit links. We will use numpy for element-wise operations to ensure that the functions work with scalars, 1-D, and 2-D numpy arrays.\n\nHere's the step-by-step implementation:\n\n1. **Identity Link**: The link function is `g(\u03bc) = \u03bc`, the inverse is `g\u207b\u00b9(\u03b7) = \u03b7`, and the derivative is `g\u2032(\u03bc) = 1`.\n2. **Log Link**: The link function is `g(\u03bc) = log(\u03bc)`, the inverse is `g\u207b\u00b9(\u03b7) = exp(\u03b7)`, and the derivative is `g\u2032(\u03bc) = 1/\u03bc`.\n3. **Logit Link**: The link function is `g(\u03bc) = log(\u03bc / (1 - \u03bc))`, the inverse is `g\u207b\u00b9(\u03b7) = 1 / (1 + exp(-\u03b7))`, and the derivative is `g\u2032(\u03bc) = 1 / (\u03bc * (1 - \u03bc))`.\n\nLet's write the code:\n\n```python\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    # Identity link\n    identity = {\n        \"link\": lambda mu: mu,\n        \"inv_link\": lambda eta: eta,\n        \"derivative\": lambda mu: np.ones_like(mu)\n    }\n    \n    # Log link\n    log = {\n        \"link\": lambda mu: np.log(mu),\n        \"inv_link\": lambda eta: np.exp(eta),\n        \"derivative\": lambda mu: 1 / mu\n    }\n    \n    # Logit link\n    logit = {\n        \"link\": lambda mu: np.log(mu / (1 - mu)),\n        \"inv_link\": lambda eta: 1 / (1 + np.exp(-eta)),\n        \"derivative\": lambda mu: 1 / (mu * (1 - mu))\n    }\n    \n    return {\n        \"identity\": identity,\n        \"log\": log,\n        \"logit\": logit\n    }\n\n# Example usage\nlinks = glm_links()\nmu = np.array([0.2, 0.8])\neta = links[\"logit\"][\"link\"](mu)\nmu2 = links[\"logit\"][\"inv_link\"](eta)\n\n# Output the results rounded to four decimal places\nprint(\"Original mu:\", np.round(mu, 4))\nprint(\"Transformed eta:\", np.round(eta, 4))\nprint(\"Recovered mu:\", np.round(mu2, 4))\n```\n\nThis script defines the `glm_links` function that returns a dictionary with the required link functions, their inverses, and derivatives. The example usage demonstrates how to use the returned functions to transform and recover the values of `mu` using the logit link."}
{"task_id": 3, "completion_id": 0, "completion": "To solve the given task, we need to implement a function that builds an isolation tree and calculates the depth of each sample in the tree. The function will follow the rules specified in the task description. Here's a step-by-step approach to achieve this:\n\n1. **Initialize the Tree**: Start with the root node containing all sample indices.\n2. **Recursive Splitting**: Recursively split the nodes based on random feature values until the stopping condition is met (fewer than three samples).\n3. **Record Depths**: Track the depth of each sample as it traverses the tree.\n4. **Return Depths**: Return a list of depths corresponding to each sample.\n\nBelow is the Python code implementing the above steps:\n\n```python\nimport numpy as np\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    np.random.seed(0)  # Ensure reproducibility\n    \n    def build_tree(indices, depth=0):\n        if len(indices) < 3:\n            # Leaf node: record the depth for each sample in this leaf\n            for idx in indices:\n                depths[idx] = depth\n            return\n        \n        # Randomly choose a feature\n        feature = np.random.randint(data.shape[1])\n        # Determine the split value\n        down = np.min(data[indices, feature])\n        up = np.max(data[indices, feature])\n        split_value = np.random.uniform(down, up)\n        \n        # Split the indices into left and right children\n        left_indices = [idx for idx in indices if data[idx, feature] <= split_value]\n        right_indices = [idx for idx in indices if data[idx, feature] > split_value]\n        \n        # Recursively build the left and right subtrees\n        build_tree(left_indices, depth + 1)\n        build_tree(right_indices, depth + 1)\n    \n    # Initialize the list to store the depth of each sample\n    depths = [0] * data.shape[0]\n    # Start building the tree with all indices at the root\n    build_tree(list(range(data.shape[0])))\n    \n    return depths\n\n# Example usage\ndata = np.arange(5).reshape(-1, 1)\nprint(isolation_tree_path_length(data))\n```\n\n### Explanation:\n- **Initialization**: The function `isolation_tree_path_length` initializes the random seed to ensure reproducibility and sets up the `depths` list to store the depth of each sample.\n- **Recursive Tree Building**: The `build_tree` function is a recursive function that splits the data based on a randomly chosen feature and value. It stops when fewer than three samples are left in a node.\n- **Depth Recording**: When a leaf node is reached, the depth of each sample in that leaf is recorded in the `depths` list.\n- **Return Depths**: Finally, the function returns the list of depths.\n\nThis implementation ensures that the tree is built according to the specified rules and that the depth of each sample is correctly recorded and returned."}
{"task_id": 7, "completion_id": 0, "completion": "To solve the problem of finding frequent itemsets, we can use the Apriori algorithm, which is a classic algorithm for frequent itemset mining. The Apriori algorithm works by iteratively generating candidate itemsets of increasing size and then pruning those that do not meet the minimum support threshold. Here's how we can implement it:\n\n1. **Generate Candidate Itemsets**: Start with individual items and generate candidate itemsets of increasing size.\n2. **Count Support**: For each candidate itemset, count how many transactions contain all items in the set.\n3. **Prune**: Remove candidate itemsets that do not meet the minimum support threshold.\n4. **Repeat**: Continue the process until no more frequent itemsets can be found.\n\nHere's the Python code implementing the Apriori algorithm for the given task:\n\n```python\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                      itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    # Calculate the minimum support count\n    min_support_count = math.ceil(minsup * len(transactions))\n    \n    # Flatten the list of transactions to get all unique items\n    all_items = set(item for transaction in transactions for item in transaction)\n    \n    # Initialize the frequent itemsets dictionary\n    frequent_itemsets = {}\n    \n    # Generate candidate itemsets of size 1\n    candidates = {item: 0 for item in all_items}\n    \n    # Count the support for each candidate itemset\n    for transaction in transactions:\n        for item in candidates:\n            if item in transaction:\n                candidates[item] += 1\n    \n    # Filter out infrequent itemsets\n    frequent_itemsets.update({(item,): count for item, count in candidates.items() if count >= min_support_count})\n    \n    # Generate candidate itemsets of size k from frequent itemsets of size k-1\n    k = 2\n    while True:\n        # Generate candidate itemsets of size k\n        candidates = set()\n        for itemset1 in frequent_itemsets:\n            for itemset2 in frequent_itemsets:\n                if itemset1 != itemset2:\n                    candidate = tuple(sorted(set(itemset1).union(set(itemset2))))\n                    if len(candidate) == k and all(subset in frequent_itemsets for subset in combinations(candidate, k-1)):\n                        candidates.add(candidate)\n        \n        # Count the support for each candidate itemset\n        candidates_support = Counter()\n        for transaction in transactions:\n            for candidate in candidates:\n                if set(candidate).issubset(set(transaction)):\n                    candidates_support[candidate] += 1\n        \n        # Filter out infrequent itemsets\n        frequent_itemsets.update({itemset: count for itemset, count in candidates_support.items() if count >= min_support_count})\n        \n        # If no new frequent itemsets are found, break the loop\n        if not frequent_itemsets:\n            break\n        \n        k += 1\n    \n    return frequent_itemsets\n\n# Example usage\ntransactions = [\n    ['bread', 'milk'],\n    ['bread', 'diaper', 'beer', 'egg'],\n    ['milk', 'diaper', 'beer', 'coke'],\n    ['bread', 'milk', 'diaper', 'beer'],\n    ['bread', 'milk', 'diaper', 'coke']\n]\nminsup = 0.6\nprint(find_frequent_itemsets(transactions, minsup))\n```\n\nThis code defines the `find_frequent_itemsets` function, which implements the Apriori algorithm to find all frequent itemsets in the given transactions that meet the minimum support threshold. The function returns a dictionary mapping each frequent itemset to its support count."}
{"task_id": 11, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    n_samples, n_features = data.shape\n    # Initialize centroids to the first k samples\n    centroids = data[:k].copy()\n    labels = np.zeros(n_samples, dtype=int)\n    for _ in range(max_iter):\n        # Assign each sample to the nearest centroid\n        for i, sample in enumerate(data):\n            distances = np.sum((sample - centroids) ** 2, axis=1)\n            labels[i] = np.argmin(distances)\n        \n        # Recompute centroids\n        new_centroids = np.zeros((k, n_features))\n        counts = np.zeros(k)\n        for i, label in enumerate(labels):\n            new_centroids[label] += data[i]\n            counts[label] += 1\n        \n        for i in range(k):\n            if counts[i] > 0:\n                new_centroids[i] /= counts[i]\n            else:\n                # If a cluster is empty, reinitialize its centroid\n                new_centroids[i] = data[np.random.randint(n_samples)]\n        \n        # Check for convergence\n        max_change = np.max(np.linalg.norm(centroids - new_centroids, axis=1))\n        if max_change < epsilon:\n            break\n        centroids = new_centroids\n    \n    # Round centroids to 4 decimal places\n    centroids = np.round(centroids, 4).tolist()\n    return centroids, labels.tolist()\n\n# Example usage:\n# data = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# k = 2\n# centroids, labels = kmeans(data, k)\n# print(\"Centroids:\", centroids)\n# print(\"Labels:\", labels)\n```\n\nThis script defines a `kmeans` function that implements the K-Means clustering algorithm from scratch, adhering to the requirements specified in the task description. It initializes centroids, assigns samples to the nearest centroid, recomputes centroids, and checks for convergence. If a cluster becomes empty, it reinitializes the centroid with a random sample. The function returns the centroids and labels, with centroids rounded to 4 decimal places."}
{"task_id": 13, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_users, n_items = data.shape\n    S = np.zeros((n_items, n_items))\n    \n    # Step 1: Build the item-item similarity matrix\n    for i in range(n_items):\n        for j in range(i, n_items):\n            common_users = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n            if len(common_users) == 0:\n                S[i, j] = S[j, i] = 0\n            else:\n                v1 = data[common_users, i]\n                v2 = data[common_users, j]\n                if criterion == 'cosine':\n                    if np.std(v1) > 1e-3:\n                        v1 = v1 - np.mean(v1)\n                    if np.std(v2) > 1e-3:\n                        v2 = v2 - np.mean(v2)\n                    S[i, j] = S[j, i] = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n                elif criterion == 'pearson':\n                    S[i, j] = S[j, i] = np.corrcoef(v1, v2)[0, 1]\n    \n    # Step 2: Collect the indices of the items the active user has rated\n    rated_items = np.where(data[user_ind] > 0)[0]\n    ratings = data[user_ind, rated_items]\n    \n    # Step 3: Compute the predicted attractiveness for each unrated item\n    scores = defaultdict(float)\n    for t in range(n_items):\n        if t not in rated_items:\n            numerator = 0\n            denominator = 0\n            for i, r in zip(rated_items, ratings):\n                numerator += r * S[t, i]\n                denominator += abs(S[t, i])\n            if denominator != 0:\n                scores[t] = numerator / denominator\n    \n    # Step 4: Return the indices of the k most promising items\n    top_items = sorted(scores.items(), key=lambda x: (-x[1], x[0]))[:k]\n    return [item[0] for item in top_items]\n\n# Example usage\ndata = np.array([\n    [5, 3, 0, 1],\n    [4, 0, 0, 1],\n    [1, 1, 0, 5],\n    [1, 0, 0, 4],\n    [0, 1, 5, 4]\n])\nuser_ind = 0\nk = 2\ncriterion = 'cosine'\nprint(knn_recommend(data, user_ind, k, criterion))\n```\n\nThis script implements the item-based k-NN collaborative filtering recommender as described in the task. It first builds an item-item similarity matrix based on the specified criterion, then computes the predicted attractiveness for each unrated item for the active user, and finally returns the indices of the most promising items."}
{"task_id": 19, "completion_id": 0, "completion": "To solve the task, we need to implement the `best_split` function that will evaluate all possible splits for each feature and return the one that maximizes the gain. The function will follow these steps:\n\n1. Calculate the initial loss for the entire set of instances.\n2. For each feature, consider all unique values as potential thresholds.\n3. For each threshold, split the instances into left and right children and calculate the gain.\n4. Track the best split that yields the highest gain.\n5. Return the best split if the gain is positive, otherwise return `None`.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_gain = -np.inf\n    best_split = None\n\n    # Calculate initial loss for the entire set\n    total_g = np.sum(g)\n    total_h = np.sum(h)\n    initial_loss = -0.5 * (total_g ** 2) / (total_h + lam) + gamma\n\n    for feature_index in range(n_features):\n        # Sort the feature values and corresponding gradients and Hessians\n        sorted_indices = np.argsort(X[:, feature_index])\n        sorted_g = g[sorted_indices]\n        sorted_h = h[sorted_indices]\n        sorted_X = X[sorted_indices, feature_index]\n\n        # Calculate cumulative sums for gradients and Hessians\n        cum_g = np.cumsum(sorted_g)\n        cum_h = np.cumsum(sorted_h)\n\n        # Evaluate all possible splits\n        for i in range(1, n_samples - 1):\n            left_g = cum_g[i - 1]\n            left_h = cum_h[i - 1]\n            right_g = total_g - left_g\n            right_h = total_h - left_h\n\n            # Calculate losses for left and right children\n            left_loss = -0.5 * (left_g ** 2) / (left_h + lam) + gamma\n            right_loss = -0.5 * (right_g ** 2) / (right_h + lam) + gamma\n\n            # Calculate gain\n            gain = initial_loss - left_loss - right_loss\n\n            # Update best split if current gain is higher\n            if gain > best_gain:\n                best_gain = gain\n                best_split = (feature_index, (sorted_X[i - 1] + sorted_X[i]) / 2)\n\n    # Return the best split if gain is positive\n    return best_split if best_gain > 0 else None\n```\n\nThis function iterates over each feature and each possible threshold, calculates the gain for each split, and keeps track of the best split. If no split yields a positive gain, it returns `None`."}
{"task_id": 20, "completion_id": 0, "completion": "To solve the given task, we need to implement the sigmoid function and its derivative (gradient). The sigmoid function is defined as:\n\n\\[ \\sigma(x) = \\frac{1}{1 + e^{-x}} \\]\n\nThe derivative of the sigmoid function is:\n\n\\[ \\sigma'(x) = \\sigma(x) \\cdot (1 - \\sigma(x)) \\]\n\nWe will use NumPy for efficient computation, especially when dealing with arrays. The function will handle different types of inputs (scalar, list, or NumPy array) and return the results in the specified format.\n\nHere is the Python script that accomplishes this:\n\n```python\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Convert input to NumPy array if it's a list\n    if isinstance(x, list):\n        x = np.array(x)\n    \n    # Compute sigmoid\n    sigmoid_x = 1 / (1 + np.exp(-x))\n    \n    # Compute gradient\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n    \n    # Round results to 4 decimal places\n    sigmoid_x = np.round(sigmoid_x, 4)\n    gradient_x = np.round(gradient_x, 4)\n    \n    # Convert back to list if input was list or array\n    if isinstance(x, (list, np.ndarray)):\n        sigmoid_x = sigmoid_x.tolist()\n        gradient_x = gradient_x.tolist()\n    else:\n        sigmoid_x = float(sigmoid_x)\n        gradient_x = float(gradient_x)\n    \n    return sigmoid_x, gradient_x\n\n# Example usage:\n# scalar\nprint(sigmoid_activation(0))  # (0.5, 0.25)\n# list\nprint(sigmoid_activation([0, 1]))  # ([0.5, 0.7311], [0.25, 0.1966])\n# numpy array\nprint(sigmoid_activation(np.array([0, -1])))  # ([0.5, 0.2689], [0.25, 0.1966])\n```\n\nThis script defines the `sigmoid_activation` function that computes the sigmoid and its gradient for the given input `x`. It handles different types of inputs and ensures the output is in the correct format as specified."}
{"task_id": 21, "completion_id": 0, "completion": "To implement the AdaBoost algorithm with one-dimensional decision stumps, we need to follow the steps outlined in the task description. Below is the Python code that accomplishes this:\n\n```python\nimport numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float], y_train: list[int], x_test: list[float], epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    n_samples = len(x_train)\n    sample_weights = np.ones(n_samples) / n_samples\n    stumps = []\n    alphas = []\n\n    # Sort the training data\n    sorted_indices = np.argsort(x_train)\n    x_train_sorted = np.array(x_train)[sorted_indices]\n    y_train_sorted = np.array(y_train)[sorted_indices]\n\n    while True:\n        min_error = float('inf')\n        best_stump = None\n        best_alpha = None\n\n        # Enumerate all possible stumps\n        for i in range(n_samples - 1):\n            threshold = (x_train_sorted[i] + x_train_sorted[i + 1]) / 2\n            for d in [0, 1]:\n                stump = (d, threshold)\n                error = 0\n                for j in range(n_samples):\n                    if (d == 0 and x_train_sorted[j] > threshold) or (d == 1 and x_train_sorted[j] <= threshold):\n                        prediction = -1\n                    else:\n                        prediction = 1\n                    if prediction != y_train_sorted[j]:\n                        error += sample_weights[sorted_indices[j]]\n                if error < min_error:\n                    min_error = error\n                    best_stump = stump\n                    best_alpha = 0.5 * math.log((1 - error) / error)\n\n        # Update the sample weights\n        for i in range(n_samples):\n            if (best_stump[0] == 0 and x_train[i] > best_stump[1]) or (best_stump[0] == 1 and x_train[i] <= best_stump[1]):\n                prediction = -1\n            else:\n                prediction = 1\n            if prediction == y_train[i]:\n                sample_weights[i] *= math.exp(-best_alpha)\n            else:\n                sample_weights[i] *= math.exp(best_alpha)\n        sample_weights /= np.sum(sample_weights)\n\n        # Append the best stump and its alpha to the list\n        stumps.append(best_stump)\n        alphas.append(best_alpha)\n\n        # Check the training error\n        predictions = np.zeros(n_samples)\n        for i in range(len(stumps)):\n            for j in range(n_samples):\n                if (stumps[i][0] == 0 and x_train[j] > stumps[i][1]) or (stumps[i][0] == 1 and x_train[j] <= stumps[i][1]):\n                    predictions[j] += -alphas[i]\n                else:\n                    predictions[j] += alphas[i]\n        training_error = np.mean(np.sign(predictions) != y_train)\n        if training_error <= epsilon:\n            break\n\n    # Make predictions on the test set\n    test_predictions = np.zeros(len(x_test))\n    for i in range(len(stumps)):\n        for j in range(len(x_test)):\n            if (stumps[i][0] == 0 and x_test[j] > stumps[i][1]) or (stumps[i][0] == 1 and x_test[j] <= stumps[i][1]):\n                test_predictions[j] += -alphas[i]\n            else:\n                test_predictions[j] += alphas[i]\n    return np.sign(test_predictions).astype(int).tolist()\n\n# Example usage:\nx_train = [1.0, 2.0, 3.0, 4.0, 5.0]\ny_train = [1, -1, 1, -1, 1]\nx_test = [1.5, 3.5, 4.5]\nepsilon = 0.0\npredictions = adaboost_1d_predict(x_train, y_train, x_test, epsilon)\nprint(predictions)  # Output should be the predictions for x_test\n```\n\nThis code defines the `adaboost_1d_predict` function which trains an AdaBoost ensemble using one-dimensional decision stumps and returns predictions for a given test set. The function iteratively selects the best stump, updates the sample weights, and stops when the training error is less than or equal to the specified `epsilon`."}
{"task_id": 25, "completion_id": 0, "completion": "To solve the given task, we need to implement the `gaussian_svm_predict` function. This function will compute the decision function for each test sample using the provided training data, Lagrange multipliers, bias term, and the Gaussian kernel parameter. The decision function will be computed in a vectorized manner to ensure efficiency.\n\nHere's the step-by-step implementation:\n\n1. **Import necessary libraries**: We need `numpy` for numerical operations.\n2. **Define the function**: The function will take the training data, labels, Lagrange multipliers, bias, Gaussian kernel parameter, and test data as inputs.\n3. **Compute the Gaussian kernel**: For each test sample, compute the Gaussian kernel values with all training samples.\n4. **Compute the decision function**: Use the computed kernel values, Lagrange multipliers, and labels to compute the decision function for each test sample.\n5. **Determine the predicted labels**: Apply the sign function to the decision function to get the predicted labels.\n6. **Return the predicted labels**: Return the predicted labels as a list of integers.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    n, d = X_train.shape\n    m = X_test.shape[0]\n    \n    # Compute the Gaussian kernel matrix between X_train and X_test\n    kernel_matrix = np.exp(-gamma * np.sum((X_train[:, np.newaxis, :] - X_test) ** 2, axis=2))\n    \n    # Compute the decision function for each test sample\n    decision_function = np.sum(alpha[:, np.newaxis] * y_train[:, np.newaxis] * kernel_matrix, axis=0) + b\n    \n    # Determine the predicted labels\n    predicted_labels = np.sign(decision_function)\n    \n    # Convert to list of integers\n    return predicted_labels.astype(int).tolist()\n```\n\nThis function uses vectorized operations to efficiently compute the Gaussian kernel and the decision function for each test sample. The `np.sign` function is used to determine the predicted labels based on the sign of the decision function. The result is then converted to a list of integers and returned."}
{"task_id": 28, "completion_id": 0, "completion": "To solve the given task, we need to follow these steps:\n\n1. Validate the input `k` to ensure it is within the valid range.\n2. Convert the input list `X` to a NumPy array for easier manipulation.\n3. Compute the truncated SVD of the matrix `X` to get the matrices `U`, `S`, and `V`.\n4. Reconstruct the matrix using the first `k` singular values and vectors.\n5. Calculate the mean squared error (MSE) between the original matrix `X` and the reconstructed matrix `X_hat`.\n6. Convert the reconstructed matrix back to a list of lists and round the values to four decimal places.\n7. Return the reconstructed matrix and the MSE.\n\nHere is the Python script that accomplishes this:\n\n```python\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    # Convert the list of lists to a NumPy array\n    X_np = np.array(X)\n    m, n = X_np.shape\n    \n    # Validate k\n    if k < 1 or k > min(m, n):\n        return -1\n    \n    # Compute the truncated SVD\n    U, S, Vt = np.linalg.svd(X_np, full_matrices=False)\n    \n    # Reconstruct the matrix using the first k singular values and vectors\n    S_k = np.diag(S[:k])\n    U_k = U[:, :k]\n    Vt_k = Vt[:k, :]\n    X_hat_np = U_k @ S_k @ Vt_k\n    \n    # Calculate the mean squared error\n    mse = np.mean((X_np - X_hat_np) ** 2)\n    \n    # Convert the reconstructed matrix back to a list of lists and round to 4 decimals\n    X_hat = np.round(X_hat_np, 4).tolist()\n    mse = round(mse, 4)\n    \n    return X_hat, mse\n```\n\nThis script defines the function `linear_autoencoder` which performs the required operations and returns the reconstructed matrix and the MSE as specified."}
{"task_id": 29, "completion_id": 0, "completion": "To implement the `predict_boosting_tree` function, we need to follow the steps outlined in the task description. We will start by sorting the training data, then iteratively find the best split point and update the residuals until the residual sum of squares (RSS) is below the specified tolerance. Here is the complete implementation:\n\n```python\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                           y_train: list[float] | np.ndarray,\n                           x_query: float,\n                           epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    \n    # Sort the training data by x_train\n    sorted_indices = np.argsort(x_train)\n    x_train = x_train[sorted_indices]\n    y_train = y_train[sorted_indices]\n    \n    # Initialize residuals and prediction\n    residuals = y_train.copy()\n    prediction = 0.0\n    \n    # Determine all possible split points\n    split_points = (x_train[:-1] + x_train[1:]) / 2\n    \n    while True:\n        best_rss = float('inf')\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n        \n        for s in split_points:\n            left_mask = x_train <= s\n            right_mask = x_train > s\n            \n            c1 = np.mean(residuals[left_mask])\n            c2 = np.mean(residuals[right_mask])\n            \n            rss = np.sum((residuals[left_mask] - c1) ** 2) + np.sum((residuals[right_mask] - c2) ** 2)\n            \n            if rss < best_rss:\n                best_rss = rss\n                best_split = s\n                best_c1 = c1\n                best_c2 = c2\n        \n        # Update prediction and residuals\n        prediction += best_c1 if x_query <= best_split else best_c2\n        residuals -= best_c1 if x_train <= best_split else best_c2\n        \n        # Check if the RSS is below the tolerance\n        if best_rss < epsilon:\n            break\n    \n    return round(prediction, 4)\n\n# Example usage:\nx_train = [1.0, 2.0, 3.0, 4.0, 5.0]\ny_train = [1.1, 2.1, 2.9, 4.1, 5.1]\nx_query = 3.5\nprint(predict_boosting_tree(x_train, y_train, x_query))\n```\n\nThis script defines the `predict_boosting_tree` function that implements the gradient boosting algorithm with decision stumps for one-dimensional data. The function sorts the training data, iteratively finds the best split point, and updates the residuals until the RSS is below the specified tolerance. Finally, it returns the prediction for the query point, rounded to four decimal places."}
{"task_id": 34, "completion_id": 0, "completion": "To solve the given task, we need to follow these steps:\n\n1. Validate the sparsity value to ensure it is within the range [0, 1].\n2. Set the random seed if provided.\n3. Generate a tensor of random numbers using `np.random.rand` with the specified shape.\n4. Convert the random numbers to binary values based on the sparsity threshold.\n5. Return the binary tensor.\n\nHere is the Python script that accomplishes this:\n\n```python\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None) -> np.ndarray:\n    \"\"\"\n    Generates a NumPy tensor filled with 0.0s and 1.0s based on the specified shape and sparsity.\n    \n    Parameters:\n    - shape: A tuple of integers representing the desired shape of the tensor.\n    - sparsity: A float in the range [0, 1] representing the probability of generating a 1.0.\n    - seed: An optional integer seed for reproducibility.\n    \n    Returns:\n    - A numpy.ndarray of the specified shape containing only 0.0 and 1.0.\n    - Returns -1 if sparsity is outside the range [0, 1].\n    \"\"\"\n    # Validate sparsity\n    if not (0 <= sparsity <= 1):\n        return -1\n    \n    # Set the seed if provided\n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Generate random numbers and convert to binary based on sparsity\n    random_tensor = np.random.rand(*shape)\n    binary_tensor = (random_tensor < sparsity).astype(float)\n    \n    return binary_tensor\n\n# Example usage\nshape = (2, 3)\nsparsity = 0.3\nseed = 42\nresult = random_binary_tensor(shape, sparsity, seed)\nprint(result)\n```\n\nThis script defines the `random_binary_tensor` function that generates a binary tensor according to the specified rules. It includes validation for the sparsity value, optional seed setting for reproducibility, and the conversion of random numbers to binary values based on the sparsity threshold."}
{"task_id": 39, "completion_id": 0, "completion": "To solve the given task, we need to implement a function that performs a median split on a dataset. The function will use `numpy.argpartition` to find the median in O(n) time, and then it will partition the data into left and right parts based on the median value. The row indices of the left and right parts will be sorted to ensure deterministic output.\n\nHere is the self-contained Python script that accomplishes this:\n\n```python\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    # Use numpy.argpartition to find the median index in O(n) time\n    median_index = np.argpartition(data[:, d], len(data) // 2)[len(data) // 2]\n    pivot = median_index\n\n    # Get the median value\n    median_value = data[median_index, d]\n\n    # Find the indices of the left and right partitions\n    left_indices = np.where(data[:, d] < median_value)[0]\n    right_indices = np.where(data[:, d] > median_value)[0]\n\n    # Convert to lists and sort them\n    left = sorted(left_indices.tolist())\n    right = sorted(right_indices.tolist())\n\n    return pivot, left, right\n\n# Example usage\nif __name__ == \"__main__\":\n    # Create a sample dataset\n    np.random.seed(0)\n    data = np.random.rand(10, 2)\n    print(\"Data:\\n\", data)\n\n    # Perform the median split\n    pivot, left, right = get_split(data, 0)\n    print(\"Pivot index:\", pivot)\n    print(\"Left indices:\", left)\n    print(\"Right indices:\", right)\n```\n\nThis script defines the `get_split` function that performs the required median split operation. It uses `numpy.argpartition` to find the median index efficiently, and then it partitions the data into left and right parts based on the median value. The indices of the left and right parts are sorted to ensure the output is deterministic. The example usage at the end demonstrates how to use the function with a sample dataset."}
{"task_id": 40, "completion_id": 0, "completion": "To implement the `to_frames` function, we need to use the `as_strided` function from `numpy.lib.stride_tricks`. This function allows us to create a view on the original array with a different shape and strides, which is perfect for our use case of creating overlapping frames.\n\nHere's the step-by-step implementation:\n\n1. **Check Pre-conditions**: Ensure that the input array `x` is one-dimensional, the `stride` is at least 1, and the length of `x` is greater than or equal to `frame_width`.\n\n2. **Calculate the Number of Frames**: The number of frames is calculated as `(len(x) - frame_width) // stride + 1`.\n\n3. **Create the View**: Use `as_strided` to create a view on the original array with the desired shape and strides.\n\n4. **Set Writeability**: Depending on the `writeable` parameter, set the writeability of the returned array.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    # Check pre-conditions\n    assert x.ndim == 1, \"Input array must be one-dimensional.\"\n    assert stride >= 1, \"Stride must be at least 1.\"\n    assert len(x) >= frame_width, \"Input array length must be at least frame_width.\"\n\n    # Calculate the number of frames\n    n_frames = (len(x) - frame_width) // stride + 1\n\n    # Create the view using as_strided\n    framed_signal = as_strided(x, shape=(n_frames, frame_width), strides=(stride * x.itemsize, x.itemsize))\n\n    # Set writeability\n    framed_signal.setflags(write=writeable)\n\n    return framed_signal\n```\n\nThis function will return a view on the original array `x` with the specified shape and strides, ensuring that the frames overlap according to the `stride` parameter. The `writeable` flag controls whether the returned array can be modified."}
{"task_id": 48, "completion_id": 0, "completion": "To solve this task, we need to follow these steps:\n\n1. **Check if the input is a list of lists or a NumPy array**: We will convert the input to a NumPy array if it is a list of lists to make the subsequent operations easier.\n2. **Check if the matrix is two-dimensional**: We can use the `ndim` attribute of a NumPy array to check this.\n3. **Check if all elements are between 0 and 1 inclusive**: We can use NumPy's `all` function combined with logical operators to check this.\n4. **Check if each row sums to 1 within a tolerance**: We will use `numpy.allclose` to check if the sum of each row is close to 1 within a tolerance of `1e-8`.\n\nHere is the Python script that implements the above logic:\n\n```python\nimport numpy as np\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Convert to NumPy array if input is a list of lists\n    if isinstance(X, list):\n        X = np.array(X)\n    \n    # Check if the matrix is two-dimensional\n    if X.ndim != 2:\n        return False\n    \n    # Check if all elements are between 0 and 1 inclusive\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n    \n    # Check if each row sums to 1 within a tolerance\n    row_sums = X.sum(axis=1)\n    if not np.allclose(row_sums, 1, atol=1e-8):\n        return False\n    \n    return True\n```\n\nThis function will return `True` if the input matrix is row-stochastic according to the given criteria, and `False` otherwise."}
{"task_id": 55, "completion_id": 0, "completion": "To implement the RMSprop optimizer for linear regression, we need to follow these steps:\n\n1. Initialize the weight vector `w` to zeros.\n2. Initialize the running average of squared gradients `s` to zeros.\n3. Calculate the gradient `g` using the formula `g = (1/n) * X.T @ (X @ w - y)`.\n4. Update the running average of squared gradients `s` using the formula `s = \u03c1 * s + (1 - \u03c1) * g**2`.\n5. Update the weight vector `w` using the formula `w = w - \u03b7 * g / (np.sqrt(s) + \u03f5_station)`.\n6. Check if the L2 norm of the gradient is smaller than `epsilon` or if the maximum number of iterations `max_iter` is reached. If either condition is met, stop the optimization.\n7. If the number of samples `n` is less than the batch size, use the full dataset as one batch. Otherwise, process mini-batches by slicing successive blocks of rows and wrap around when the end of the matrix is reached.\n8. Return the final weight vector rounded to four decimal places and converted to a Python list.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n, d = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n    \n    for _ in range(max_iter):\n        # Determine the batch size\n        if n < batch_size:\n            batch_size = n\n        \n        # Create mini-batches\n        for start in range(0, n, batch_size):\n            end = min(start + batch_size, n)\n            X_batch = X[start:end]\n            y_batch = y[start:end]\n            \n            # Compute the gradient\n            g = (1 / batch_size) * X_batch.T @ (X_batch @ w - y_batch)\n            \n            # Update the running average of squared gradients\n            s = rho * s + (1 - rho) * g**2\n            \n            # Update the weights\n            w = w - eta * g / (np.sqrt(s) + eps_station)\n        \n        # Check for early stopping\n        if np.linalg.norm(g) < epsilon:\n            break\n    \n    return [round(wi, 4) for wi in w]\n```\n\nThis function implements the RMSprop algorithm for linear regression, including the handling of mini-batches and early stopping based on the gradient's L2 norm."}
{"task_id": 56, "completion_id": 0, "completion": "To implement the `softplus` function as described, we need to consider the following steps:\n\n1. **Input Handling**: The function should be able to handle scalars, Python lists, and NumPy arrays. We will convert the input to a NumPy array for easier computation and then convert it back to a list or scalar as needed.\n2. **Numerical Stability**: We need to ensure that the function is numerically stable, especially for very large or very small values of `x`. This can be achieved by using the `log1p` function from NumPy, which computes `log(1 + x)` in a way that is accurate for small `x`.\n3. **SoftPlus and Sigmoid Calculation**: Depending on the value of the `deriv` flag, we will either compute the SoftPlus function or its derivative (the sigmoid function).\n4. **Rounding**: After computing the values, we will round them to the nearest 4th decimal place.\n5. **Output Conversion**: Convert the result back to a Python list or a scalar float as required.\n\nHere is the implementation:\n\n```python\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n    \"\"\"Compute the SoftPlus function or its derivative (sigmoid) for the input x.\n    \n    Args:\n        x: A scalar, Python list, or NumPy array of real values.\n        deriv: A boolean flag indicating whether to compute the derivative (sigmoid).\n               Default is False.\n    \n    Returns:\n        A Python list or a single float with the computed values rounded to the nearest 4th decimal.\n    \"\"\"\n    # Convert input to a NumPy array for easier computation\n    x = np.array(x)\n    \n    if deriv:\n        # Compute the derivative (sigmoid function)\n        result = 1 / (1 + np.exp(-x))\n    else:\n        # Compute the SoftPlus function\n        # Use a numerically stable formulation\n        result = np.log1p(np.exp(-np.abs(x))) + np.maximum(x, 0)\n    \n    # Round the result to the nearest 4th decimal\n    result = np.round(result, 4)\n    \n    # Convert back to a Python list or scalar float\n    if result.size == 1:\n        return float(result)\n    else:\n        return result.tolist()\n\n# Example usage:\nprint(softplus(0))  # Scalar input\nprint(softplus([0, 1, -1]))  # List input\nprint(softplus(np.array([0, 1, -1]), deriv=True))  # NumPy array input with derivative\n```\n\nThis script defines the `softplus` function that meets all the requirements specified in the task. It handles different types of inputs, ensures numerical stability, computes the SoftPlus function or its derivative, rounds the results, and returns them in the required format."}
{"task_id": 58, "completion_id": 0, "completion": "To solve this task, we need to follow these steps:\n\n1. **Tokenize the Corpus and Sequence**: We will use the provided lists of word tokens directly as our corpus and sequence.\n\n2. **Build N-gram Count Tables**: We need to create two `Counter` objects: one for the N-grams and another for the (N-1)-grams. These will help us calculate the probabilities.\n\n3. **Calculate Log-Probability**: For each N-gram in the sequence, we will calculate its probability using the counts from the tables. If any count is zero, we return `-inf`. Otherwise, we sum the log-probabilities of all N-grams in the sequence.\n\n4. **Return the Result**: The final result should be rounded to 4 decimal places.\n\nHere is the complete Python script implementing the above steps:\n\n```python\nfrom collections import Counter\nimport numpy as np\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    # Helper function to create n-grams from a list of tokens\n    def create_ngrams(tokens, n):\n        return [tuple(tokens[i:i+n]) for i in range(len(tokens) - n + 1)]\n    \n    # Create N-grams and (N-1)-grams from the corpus\n    ngrams = create_ngrams(corpus, N)\n    n_minus_1_grams = create_ngrams(corpus, N-1)\n    \n    # Count the occurrences of each N-gram and (N-1)-gram\n    ngram_counts = Counter(ngrams)\n    n_minus_1_gram_counts = Counter(n_minus_1_grams)\n    \n    # Calculate the log-probability of the sequence\n    log_prob = 0.0\n    for i in range(len(sequence) - N + 1):\n        ngram = tuple(sequence[i:i+N])\n        n_minus_1_gram = tuple(sequence[i:i+N-1])\n        \n        # Check if the n-gram or its prefix is not observed in the corpus\n        if ngram_counts[ngram] == 0 or n_minus_1_gram_counts[n_minus_1_gram] == 0:\n            return float('-inf')\n        \n        # Calculate the probability of the n-gram\n        prob = ngram_counts[ngram] / n_minus_1_gram_counts[n_minus_1_gram]\n        log_prob += np.log(prob)\n    \n    # Return the log-probability rounded to 4 decimal places\n    return round(log_prob, 4)\n\n# Example usage\ncorpus = [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\nsequence = [\"the\", \"quick\", \"brown\", \"fox\"]\nN = 3\nprint(unsmoothed_ngram_log_prob(corpus, sequence, N))\n```\n\nThis script defines the function `unsmoothed_ngram_log_prob` which calculates the unsmoothed MLE N-gram log-probability of a given sequence based on a provided corpus. The function uses `Counter` to count the occurrences of N-grams and (N-1)-grams, and then calculates the log-probability of the sequence. If any required count is zero, it returns `-inf`."}
{"task_id": 62, "completion_id": 0, "completion": "To implement the univariate Lasso regression with polynomial features using coordinate descent, we need to follow the steps outlined in the task description. Here's a step-by-step breakdown of the implementation:\n\n1. **Input Validation and Initialization**: Convert inputs to numpy arrays if they are not already, and initialize the design matrix.\n2. **Design Matrix Construction**: Create a matrix with columns for the intercept and polynomial features up to the specified degree.\n3. **Coordinate Descent Optimization**: Implement the coordinate descent algorithm to minimize the Lasso objective function.\n4. **Stopping Criteria**: Check for convergence based on the tolerance or the maximum number of iterations.\n5. **Return Coefficients**: Return the learned coefficients rounded to four decimal places.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef lasso_regression(X: list[float] | np.ndarray, y: list[float] | np.ndarray, degree: int, reg_factor: float, n_iterations: int = 1000, tol: float = 1e-6) -> list[float]:\n    \"\"\"Train a univariate Lasso regression model.\n\n    The function must build polynomial features up to *degree*, optimise the\n    Lasso objective with coordinate descent, and return the learned\n    coefficients rounded to four decimal places.\n\n    Parameters\n    ----------\n    X : list[float] | np.ndarray\n        One-dimensional input samples.\n    y : list[float] | np.ndarray\n        Target values with the same length as *X*.\n    degree : int\n        Highest exponent of *x* to include (gives *degree+1* coefficients in\n        total counting the bias).\n    reg_factor : float\n        L1 regularisation strength \u03bb.\n    n_iterations : int, default=1000\n        Maximum number of coordinate descent passes.\n    tol : float, default=1e-6\n        Early stopping criterion. The algorithm terminates when the largest\n        absolute change in any coefficient between two consecutive passes is\n        smaller than *tol*.\n\n    Returns\n    -------\n    list[float]\n        The learned weights [w0, w1, \u2026, w_degree] rounded to 4 decimals.\n    \"\"\"\n    # Convert inputs to numpy arrays if necessary\n    X = np.array(X)\n    y = np.array(y)\n    \n    # Create the design matrix\n    X_design = np.vander(X, degree + 1, increasing=True)\n    \n    # Initialize weights\n    w = np.zeros(degree + 1)\n    \n    # Coordinate descent\n    for _ in range(n_iterations):\n        w_prev = w.copy()\n        \n        # Update bias (w0)\n        w[0] = np.mean(y - X_design[:, 1:].dot(w[1:]))\n        \n        # Update other coefficients\n        for j in range(1, degree + 1):\n            rho = X_design[:, j].T.dot(y - X_design.dot(w) + w[j] * X_design[:, j])\n            w[j] = np.sign(rho) * max(abs(rho) - reg_factor, 0) / (X_design[:, j].T.dot(X_design[:, j]))\n        \n        # Check for convergence\n        if np.max(np.abs(w - w_prev)) < tol:\n            break\n    \n    # Return coefficients rounded to 4 decimal places\n    return [round(coef, 4) for coef in w]\n\n# Example usage\nX = [1, 2, 3, 4, 5]\ny = [2, 4, 6, 8, 10]\ndegree = 2\nreg_factor = 0.1\nprint(lasso_regression(X, y, degree, reg_factor))\n```\n\nThis script defines the `lasso_regression` function that performs univariate Lasso regression with polynomial features using coordinate descent. The function takes the specified inputs, constructs the design matrix, and iteratively updates the weights until convergence or the maximum number of iterations is reached. The learned coefficients are then returned, rounded to four decimal places."}
{"task_id": 63, "completion_id": 0, "completion": "To solve the given task, we need to implement the backward algorithm for a Hidden Markov Model (HMM). The backward algorithm calculates the backward probabilities, which are the probabilities of observing the future sequence of observations given the current state. The algorithm is defined recursively, starting from the end of the observation sequence and moving backward.\n\nHere's a step-by-step breakdown of the implementation:\n\n1. **Initialization**: Set the backward probabilities for the last time step to 1 for all states.\n2. **Recursion**: For each time step from \\(T-2\\) to \\(t\\), calculate the backward probabilities using the transition and emission probabilities.\n3. **Return**: Return the backward probabilities for the specified time step \\(t\\).\n\nLet's implement this in Python:\n\n```python\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    Calculate the backward probability vector for a given time index in a Hidden Markov Model.\n    \n    Parameters:\n    A (list[list[float]]): Transition probability matrix of shape (N, N).\n    B (list[list[float]]): Emission probability matrix of shape (N, M).\n    obs (list[int]): List of observation indices (length T).\n    t (int): Integer time index (0 \u2264 t < T).\n    \n    Returns:\n    list[float]: List containing the N backward probabilities rounded to 4 decimal places.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    A = np.array(A)\n    B = np.array(B)\n    obs = np.array(obs)\n    \n    # Number of states\n    N = A.shape[0]\n    # Length of the observation sequence\n    T = len(obs)\n    \n    # Initialize the backward probabilities\n    beta = np.zeros((T, N))\n    beta[T-1, :] = 1.0  # Set the last time step to 1 for all states\n    \n    # Calculate the backward probabilities from T-2 to t\n    for i in range(T-2, t-1, -1):\n        for j in range(N):\n            beta[i, j] = np.sum(A[j, :] * B[:, obs[i+1]] * beta[i+1, :])\n    \n    # Return the backward probabilities for the specified time step t, rounded to 4 decimal places\n    return [round(prob, 4) for prob in beta[t, :]]\n\n# Example usage:\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.5, 0.5], [0.3, 0.7]]\nobs = [0, 1, 0]\nt = 1\nprint(backward_beta(A, B, obs, t))\n```\n\nThis script defines the `backward_beta` function, which calculates the backward probabilities for a given time index \\(t\\) in a Hidden Markov Model. The function takes the transition probability matrix \\(A\\), the emission probability matrix \\(B\\), the list of observation indices `obs`, and the time index `t` as inputs. It returns the backward probabilities for the specified time step \\(t\\), rounded to 4 decimal places."}
{"task_id": 65, "completion_id": 0, "completion": "To solve the given task, we need to implement the backward algorithm for a Hidden Markov Model (HMM). The backward algorithm calculates the probability of an observation sequence given the model parameters. The steps to implement this are as follows:\n\n1. **Check for empty inputs**: If any of the input lists are empty, return `0.0` as no valid probability can be computed.\n2. **Initialize the backward variables**: Set the backward variables for the last time step to 1.\n3. **Compute the backward variables recursively**: For each time step from the second last to the first, compute the backward variables using the recursive formula.\n4. **Calculate the sequence probability**: Use the initial state probabilities, the emission probabilities, and the backward variables to compute the final probability of the observation sequence.\n5. **Return the result**: Round the result to six decimal places and return it.\n\nHere is the complete Python script implementing the above steps:\n\n```python\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    # Check for empty inputs\n    if not A or not B or not pi or not obs:\n        return 0.0\n\n    # Convert lists to numpy arrays for easier manipulation\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n    obs = np.array(obs)\n\n    # Number of states\n    N = A.shape[0]\n    # Length of the observation sequence\n    T = len(obs)\n\n    # Initialize the backward variables\n    beta = np.zeros((T, N))\n    beta[T-1, :] = 1.0\n\n    # Compute the backward variables recursively\n    for t in range(T-2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t+1]] * beta[t+1, :])\n\n    # Calculate the sequence probability\n    sequence_prob = np.sum(pi * B[:, obs[0]] * beta[0, :])\n\n    # Return the result rounded to six decimal places\n    return round(sequence_prob, 6)\n```\n\nThis script defines the `backward_prob` function which takes the transition matrix `A`, emission matrix `B`, initial state distribution `pi`, and the observation sequence `obs` as inputs. It then computes the probability of the observation sequence using the backward algorithm and returns the result rounded to six decimal places."}
{"task_id": 69, "completion_id": 0, "completion": "To implement the forward algorithm for Hidden Markov Models (HMMs), we need to follow these steps:\n\n1. Validate the input dimensions and check for any invalid conditions.\n2. Initialize the forward variables.\n3. Compute the forward variables for each observation using the forward algorithm.\n4. Sum the forward variables for the final state to get the probability of the observation sequence.\n5. Return the result rounded to 4 decimal places.\n\nHere is the Python script that implements the forward algorithm:\n\n```python\nimport numpy as np\n\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # Validate input dimensions\n    n = len(S)\n    if not (len(A) == n and len(A[0]) == n and len(B) == n):\n        return -1\n    \n    m = len(B[0])\n    if not observations or any(obs < 0 or obs >= m for obs in observations):\n        return -1\n    \n    # Initialize the forward variables\n    T = len(observations)\n    alpha = np.zeros((T, n))\n    \n    # Initialize the first step of the forward algorithm\n    alpha[0, :] = S * B[:, observations[0]]\n    \n    # Run the forward algorithm for the rest of the observations\n    for t in range(1, T):\n        for j in range(n):\n            alpha[t, j] = np.sum(alpha[t-1, :] * A[:, j]) * B[j, observations[t]]\n    \n    # Compute the probability of the observation sequence\n    prob = np.sum(alpha[T-1, :])\n    \n    return round(prob, 4)\n\n# Example usage:\nS = [0.5, 0.5]\nA = [[0.7, 0.3], [0.4, 0.6]]\nB = [[0.1, 0.4, 0.5], [0.6, 0.3, 0.1]]\nobservations = [0, 1, 2]\n\nprint(forward_algorithm(S, A, B, observations))\n```\n\nThis script defines the `forward_algorithm` function that implements the forward algorithm for HMMs. It includes input validation and returns the probability of the observation sequence rounded to 4 decimal places."}
{"task_id": 70, "completion_id": 0, "completion": "To implement the FP-Growth algorithm, we need to follow the steps outlined in the task description. The algorithm involves creating a frequency table, building an FP-tree, and recursively mining the tree to find frequent item-sets. Below is the Python code that accomplishes this:\n\n```python\nfrom collections import Counter, defaultdict\n\ndef fp_growth(transactions: list[list[str]], min_support: int) -> list[list[str]]:\n    \"\"\"Discover every frequent item-set in *transactions* with FP-Growth.\n\n    A *transaction* is represented by a list of items (strings).  `min_support`\n    is the minimum number of transactions an item-set has to appear in.  The\n    function returns **all** frequent item-sets where\n        support(itemset) >= min_support.\n\n    The result must be deterministic:\n      \u2022 Inside each item-set the items have to be sorted alphabetically.\n      \u2022 The outer list has to be sorted by `(len(itemset), itemset)`.\n    If *transactions* is empty or no item-set meets the threshold return an\n    empty list.\n    \"\"\"\n    # Step 1: Count the support of every single item and discard infrequent ones.\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_support}\n    if not frequent_items:\n        return []\n\n    # Sort items by frequency and then lexicographically\n    sorted_items = sorted(frequent_items.keys(), key=lambda x: (-frequent_items[x], x))\n\n    # Step 2: Build the FP-tree\n    root = FPNode(None, None)\n    for transaction in transactions:\n        frequent_items_in_transaction = [item for item in transaction if item in frequent_items]\n        frequent_items_in_transaction.sort(key=lambda x: sorted_items.index(x))\n        if frequent_items_in_transaction:\n            update_tree(root, frequent_items_in_transaction, 1)\n\n    # Step 3: Mine the FP-tree\n    frequent_itemsets = []\n    mine_tree(root, None, frequent_items, sorted_items, frequent_itemsets)\n\n    # Sort the result\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\n\nclass FPNode:\n    def __init__(self, item, count, parent):\n        self.item = item\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.link = None\n\ndef update_tree(root, items, count):\n    current = root\n    for item in items:\n        if item not in current.children:\n            current.children[item] = FPNode(item, count, current)\n            link = root\n            while link:\n                if link.item == item:\n                    link.link = current.children[item]\n                    break\n                link = link.link\n        else:\n            current.children[item].count += count\n        current = current.children[item]\n\ndef mine_tree(node, prefix, frequent_items, sorted_items, frequent_itemsets):\n    if node.item is not None:\n        new_prefix = prefix + [node.item]\n        frequent_itemsets.append(new_prefix)\n        conditional_patterns = get_conditional_patterns(node)\n        conditional_tree, header_table = build_conditional_tree(conditional_patterns, frequent_items)\n        if conditional_tree.children:\n            mine_tree(conditional_tree, new_prefix, frequent_items, sorted_items, frequent_itemsets)\n\ndef get_conditional_patterns(node):\n    patterns = []\n    while node:\n        pattern = []\n        current = node\n        while current.parent and current.parent.item is not None:\n            pattern.append(current.parent.item)\n            current = current.parent\n        if pattern:\n            patterns.append((pattern, node.count))\n        node = node.link\n    return patterns\n\ndef build_conditional_tree(patterns, frequent_items):\n    root = FPNode(None, None)\n    header_table = defaultdict(lambda: None)\n    for pattern, count in patterns:\n        pattern.sort(key=lambda x: frequent_items.index(x))\n        update_tree(root, pattern, count)\n        for item in pattern:\n            if header_table[item] is None:\n                header_table[item] = root.children[item]\n            else:\n                current = header_table[item]\n                while current.link:\n                    current = current.link\n                current.link = root.children[item]\n    return root, header_table\n\n# Example usage\ntransactions = [\n    ['a', 'b', 'c', 'd'],\n    ['b', 'c', 'e'],\n    ['a', 'b', 'c', 'e'],\n    ['a', 'b', 'd', 'e'],\n    ['a', 'b', 'c', 'd']\n]\nmin_support = 2\nprint(fp_growth(transactions, min_support))\n```\n\nThis code defines the `fp_growth` function that implements the FP-Growth algorithm. It includes a helper class `FPNode` for the FP-tree nodes and several helper functions to build and mine the tree. The example usage at the end demonstrates how to call the function with a sample set of transactions and a minimum support threshold."}
{"task_id": 75, "completion_id": 0, "completion": "To implement the k-Nearest Neighbour (k-NN) classifier, we need to follow these steps:\n\n1. **Input Validation**: Check if `k` is a positive integer and not larger than the number of training samples.\n2. **Distance Calculation**: For each test sample, calculate the Euclidean distance to all training samples.\n3. **Nearest Neighbours**: Identify the `k` nearest training samples for each test sample.\n4. **Majority Voting**: Determine the class label by majority voting among the `k` nearest neighbours. If there is a tie, return the smallest class label.\n5. **Return Predictions**: Return the predicted class labels for all test samples.\n\nHere is the Python script implementing the k-NN classifier:\n\n```python\nimport numpy as np\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    # Input validation\n    if not (1 <= k <= len(X_train)):\n        return -1\n\n    # Convert lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    # Initialize the list to store predictions\n    predictions = []\n\n    # Iterate over each test sample\n    for test_sample in X_test:\n        # Compute the squared Euclidean distances to all training samples\n        distances = np.sum((X_train - test_sample) ** 2, axis=1)\n        \n        # Get the indices of the k nearest training samples\n        k_nearest_indices = np.argsort(distances)[:k]\n        \n        # Get the labels of the k nearest training samples\n        k_nearest_labels = y_train[k_nearest_indices]\n        \n        # Count the occurrences of each label\n        label_counts = np.bincount(k_nearest_labels)\n        \n        # Find the label with the highest count (and the smallest label in case of a tie)\n        predicted_label = np.argmax(label_counts)\n        \n        # Append the predicted label to the predictions list\n        predictions.append(predicted_label)\n\n    return predictions\n```\n\nThis script defines the `knn_predict` function which takes the training data, test data, and the number of neighbours `k` as input and returns the predicted class labels for the test data. The function first validates the input `k`, then computes the distances, finds the nearest neighbours, and performs majority voting to determine the class label for each test sample."}
{"task_id": 76, "completion_id": 0, "completion": "To solve the given task, we need to implement the `cross_entropy_loss` function that calculates the categorical cross-entropy loss for a batch of one-hot encoded targets. The function will take two parameters: `y` (true labels) and `y_pred` (predicted probabilities). We will use NumPy for efficient array operations.\n\nHere's a step-by-step breakdown of the solution:\n1. Convert the input lists to NumPy arrays if they are not already.\n2. Ensure the shapes of `y` and `y_pred` are the same.\n3. Add a small value (machine epsilon) to `y_pred` to avoid taking the log of zero.\n4. Compute the element-wise product of `y` and the log of `y_pred`.\n5. Sum the results over all elements to get the total loss.\n6. Return the loss rounded to four decimal places.\n\nHere is the complete Python script:\n\n```python\nimport numpy as np\n\ndef cross_entropy_loss(y: list | np.ndarray, y_pred: list | np.ndarray) -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n    \n    # Ensure the shapes are the same\n    if y.shape != y_pred.shape:\n        raise ValueError(\"Shapes of y and y_pred must be the same.\")\n    \n    # Add a small value to y_pred to avoid log(0)\n    epsilon = np.finfo(float).eps\n    y_pred = y_pred + epsilon\n    \n    # Compute the element-wise product of y and log(y_pred)\n    loss = -np.sum(y * np.log(y_pred))\n    \n    # Return the loss rounded to 4 decimal places\n    return round(loss, 4)\n\n# Example usage\ny = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\ny_pred = [[0.7, 0.2, 0.1], [0.1, 0.8, 0.1], [0.2, 0.2, 0.6]]\nprint(cross_entropy_loss(y, y_pred))\n```\n\nThis script defines the `cross_entropy_loss` function and includes an example usage that demonstrates how to call the function with sample data. The function ensures numerical stability by adding machine epsilon to the predicted probabilities before taking the logarithm."}
{"task_id": 77, "completion_id": 0, "completion": "To solve the given task, we need to implement the forward propagation for an L-layer neural network. The network uses ReLU activation in all hidden layers and a sigmoid activation in the output layer. The parameters for each layer are stored in a dictionary, and we need to return the final activation and a cache for each layer.\n\nHere's a step-by-step breakdown of the implementation:\n\n1. **Import necessary libraries**: We need `numpy` for matrix operations.\n2. **Define the activation functions**: We need the ReLU and sigmoid functions.\n3. **Implement the forward propagation for a single layer**: This involves the linear step and the activation step.\n4. **Iterate through all layers**: Apply the forward propagation for each layer, storing the cache for each layer.\n5. **Return the final activation and the caches**: Ensure the final activation is rounded to 4 decimal places and converted to a Python list.\n\nHere is the complete Python script:\n\n```python\nimport numpy as np\n\ndef relu(Z):\n    \"\"\"ReLU activation function.\"\"\"\n    return np.maximum(0, Z)\n\ndef sigmoid(Z):\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + np.exp(-Z))\n\ndef linear_activation_forward(A_prev, W, b, activation):\n    \"\"\"Forward propagation for a single layer.\"\"\"\n    Z = np.dot(W, A_prev) + b\n    if activation == \"relu\":\n        A = relu(Z)\n    elif activation == \"sigmoid\":\n        A = sigmoid(Z)\n    cache = (A_prev, W, b, Z)\n    return A, cache\n\ndef L_model_forward(X, parameters):\n    \"\"\"Forward propagation for an L-layer neural network (ReLU\u2026ReLU \u2192 Sigmoid).\"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2  # number of layers in the neural network\n    \n    # Implement [LINEAR -> RELU]*(L-1). Add \"cache\" to the \"caches\" list.\n    for l in range(1, L):\n        A_prev = A\n        A, cache = linear_activation_forward(A_prev, parameters[f'W{l}'], parameters[f'b{l}'], \"relu\")\n        caches.append(cache)\n    \n    # Implement LINEAR -> SIGMOID. Add \"cache\" to the \"caches\" list.\n    AL, cache = linear_activation_forward(A, parameters[f'W{L}'], parameters[f'b{L}'], \"sigmoid\")\n    caches.append(cache)\n    \n    # Round the final activation to 4 decimal places and convert to a Python list\n    AL_rounded = np.round(AL, 4).tolist()\n    \n    return AL_rounded, caches\n```\n\nThis script defines the necessary functions and implements the forward propagation for an L-layer neural network as specified. The final activation is rounded to 4 decimal places and converted to a Python list before being returned."}
{"task_id": 81, "completion_id": 0, "completion": "To solve the given task, we need to implement the `compute_cost` function that calculates the binary cross-entropy cost. The function will take two NumPy arrays as input: `A2` which contains the predicted probabilities, and `Y` which contains the ground-truth binary labels. The function will then compute the cost using the provided formula, ensuring to clip the values of `A2` to avoid taking the logarithm of zero or one.\n\nHere is the step-by-step implementation:\n\n1. Import the necessary package (`numpy`).\n2. Define the `compute_cost` function with the specified parameters.\n3. Clip the values of `A2` to the interval `[\u03b5, 1\u2013\u03b5]` to avoid undefined logarithms.\n4. Compute the binary cross-entropy cost using the provided formula.\n5. Return the cost rounded to six decimal places.\n\nBelow is the complete Python script:\n\n```python\nimport numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    # Clip A2 to avoid log(0) and log(1)\n    epsilon = 1e-15\n    A2_clipped = np.clip(A2, epsilon, 1 - epsilon)\n    \n    # Compute the binary cross-entropy cost\n    m = Y.shape[1] if len(Y.shape) == 2 else Y.size\n    cost = -1/m * np.sum(Y * np.log(A2_clipped) + (1 - Y) * np.log(1 - A2_clipped))\n    \n    # Return the cost rounded to 6 decimal places\n    return round(cost, 6)\n\n# Example usage:\n# A2 = np.array([[0.9, 0.1, 0.8]])  # Example predicted probabilities\n# Y = np.array([[1, 0, 1]])         # Example ground-truth labels\n# print(compute_cost(A2, Y))        # Output the computed cost\n```\n\nThis script defines the `compute_cost` function that computes the binary cross-entropy cost as required, ensuring to handle edge cases where the logarithm might be undefined."}
{"task_id": 82, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | np.ndarray, epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    # Number of actions\n    n = len(Q)\n    \n    # Calculate the base probability for each action\n    base_prob = epsilon / n\n    \n    # Find the index of the greedy action (first occurrence in case of ties)\n    greedy_index = np.argmax(Q)\n    \n    # Initialize the probabilities list with base probabilities\n    probabilities = [base_prob] * n\n    \n    # Adjust the probability of the greedy action\n    probabilities[greedy_index] = 1 - epsilon + base_prob\n    \n    # Round the probabilities to 4 decimal places\n    probabilities = [round(p, 4) for p in probabilities]\n    \n    # Ensure the probabilities sum to 1 (within numerical tolerance)\n    if abs(sum(probabilities) - 1) > 1e-12:\n        # Adjust the last probability to ensure the sum is exactly 1\n        probabilities[-1] = 1 - sum(probabilities[:-1])\n    \n    return probabilities\n\n# Example usage\nQ = [1.2, 0.3, 1.2, -0.1]\nepsilon = 0.1\nprint(epsilon_soft(Q, epsilon))\n```\n\nThis script defines the `epsilon_soft` function that calculates the \u03b5-soft probabilities for a given set of Q-values and an exploration parameter \u03b5. The function ensures that the probabilities sum to 1 within a specified tolerance and rounds the probabilities to 4 decimal places."}
{"task_id": 86, "completion_id": 0, "completion": "To solve the task, we will follow these steps:\n\n1. Transpose the `predictions` list so that each inner list represents the predictions for a single sample across all trees.\n2. For each sample, count the occurrences of each prediction using the `Counter` class from the `collections` module.\n3. Find the prediction with the highest count. In case of a tie, choose the smallest label.\n4. Collect the final predictions for all samples and return them as a list.\n\nHere is the Python script that implements the solution:\n\n```python\nfrom collections import Counter\n\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    # Transpose the predictions list to group predictions by sample\n    transposed_predictions = list(zip(*predictions))\n    \n    # Initialize the list to store the final predictions\n    final_predictions = []\n    \n    # Iterate over each sample's predictions\n    for sample_predictions in transposed_predictions:\n        # Count the occurrences of each prediction\n        prediction_counts = Counter(sample_predictions)\n        \n        # Find the prediction with the highest count\n        # In case of a tie, the smallest label is chosen by default\n        most_common_prediction = prediction_counts.most_common(1)[0][0]\n        \n        # Append the final prediction for this sample to the list\n        final_predictions.append(most_common_prediction)\n    \n    return final_predictions\n\n# Example usage:\npredictions = [\n    [1, 2, 1, 2],\n    [1, 1, 2, 2],\n    [2, 2, 1, 1]\n]\nprint(aggregate_random_forest_votes(predictions))  # Output: [1, 2, 1, 2]\n```\n\nThis script defines the `aggregate_random_forest_votes` function that takes a list of lists as input and returns a list of aggregated predictions based on majority voting. The `zip(*predictions)` function is used to transpose the list, making it easier to process predictions for each sample. The `Counter` class is used to count occurrences of each prediction, and the `most_common(1)` method is used to find the prediction with the highest count, with ties broken by choosing the smallest label."}
{"task_id": 88, "completion_id": 0, "completion": "To solve the given task, we need to implement the `softplus` function using the numerically stable `np.logaddexp` function. The steps are as follows:\n\n1. Import the necessary `numpy` library.\n2. Define the `softplus` function that accepts a scalar, Python list, or NumPy `ndarray`.\n3. Inside the function, use `np.logaddexp(0.0, z)` to compute the softplus values in a numerically stable way.\n4. Round the results to 4 decimal places.\n5. Convert the result to a pure Python list if the input was a list or an array, or return a single float if the input was a scalar.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    # Convert input to a NumPy array if it's a list\n    if isinstance(z, list):\n        z = np.array(z)\n    \n    # Compute the softplus values using np.logaddexp\n    result = np.logaddexp(0.0, z)\n    \n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n    \n    # Convert back to a list if the input was a list or an array\n    if isinstance(z, (list, np.ndarray)):\n        return result.tolist()\n    else:\n        # Return a single float if the input was a scalar\n        return float(result)\n\n# Example usage\nz = np.array([-1000, 0, 3])\nprint(softplus(z))  # Output: [0.0, 0.6931, 3.0486]\n```\n\nThis script defines the `softplus` function as required, ensuring numerical stability and correct handling of both scalar and array-like inputs."}
{"task_id": 90, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Check if the policy has any estimates\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n    \n    # Extract the true expected values and the policy's estimates\n    true_values = bandit.arm_evs\n    estimates = policy.ev_estimates\n    \n    # Sort the estimates by arm index\n    sorted_estimates = [estimates[i] for i in sorted(estimates.keys())]\n    \n    # Calculate the squared errors\n    squared_errors = [(true - est) ** 2 for true, est in zip(true_values, sorted_estimates)]\n    \n    # Compute the mean squared error\n    mse_value = np.mean(squared_errors)\n    \n    # Return the MSE rounded to 4 decimal places\n    return round(mse_value, 4)\n\n# Example usage\nbandit = {\"arm_evs\": [0.5, 0.2, 0.9]}\npolicy = {\"ev_estimates\": {0: 0.4, 1: 0.25, 2: 0.8}}\n\n# Assuming the bandit and policy objects are instances of a class or have the required attributes\n# For the sake of this example, we will use dictionaries directly\nmse_value = mse(bandit, policy)\nprint(mse_value)  # Expected output: 0.0075\n```\n\nThis script defines the `mse` function as required, which computes the mean-squared error between the true expected payouts of each arm and the policy's estimates. It handles the case where the policy does not provide any estimates by returning `numpy.nan`. The function also ensures that the estimates are sorted by arm index before computing the MSE."}
{"task_id": 96, "completion_id": 0, "completion": "To implement the `additive_ngram_log_prob` function, we need to follow these steps:\n\n1. **Tokenize the corpus and the target sentence**: Split each sentence into words.\n2. **Build N-gram frequency tables**: For each order from 1 to N, count the occurrences of each N-gram in the corpus.\n3. **Handle unknown words**: Replace words in the target sentence that do not appear in the corpus with the `<UNK>` token.\n4. **Calculate smoothed probabilities**: Use the additive smoothing formula to estimate the probability of each N-gram in the target sentence.\n5. **Compute the log-probability**: Sum the natural logarithms of the probabilities of all N-grams in the target sentence.\n6. **Return the result**: Round the final log-probability to 4 decimal places.\n\nHere is the complete implementation:\n\n```python\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # Tokenize the corpus and build vocabulary\n    vocab = set()\n    ngram_counts = [defaultdict(int) for _ in range(N)]\n    for sentence in corpus:\n        words = sentence.split()\n        vocab.update(words)\n        for n in range(1, N + 1):\n            for i in range(len(words) - n + 1):\n                ngram = tuple(words[i:i+n])\n                ngram_counts[n-1][ngram] += 1\n    \n    # Add <UNK> token to the vocabulary\n    vocab.add(\"<UNK>\")\n    vocab_size = len(vocab)\n    \n    # Tokenize the target sequence and replace unknown words with <UNK>\n    sequence_words = sequence.split()\n    for i, word in enumerate(sequence_words):\n        if word not in vocab:\n            sequence_words[i] = \"<UNK>\"\n    \n    # Calculate the log-probability of the sequence\n    log_prob = 0.0\n    for i in range(len(sequence_words) - N + 1):\n        context = tuple(sequence_words[i:i+N-1])\n        word = sequence_words[i+N-1]\n        context_count = sum(ngram_counts[N-2][ngram] for ngram in ngram_counts[N-2] if ngram[:-1] == context)\n        ngram = context + (word,)\n        ngram_count = ngram_counts[N-1][ngram]\n        smoothed_prob = (ngram_count + K) / (context_count + K * vocab_size)\n        log_prob += math.log(smoothed_prob)\n    \n    # Return the log-probability rounded to 4 decimal places\n    return round(log_prob, 4)\n```\n\nThis function first tokenizes the corpus and builds frequency tables for N-grams of different orders. It then tokenizes the target sequence, replacing unknown words with `<UNK>`. Finally, it calculates the additive-smoothed log-probability of the sequence and returns the result rounded to 4 decimal places."}
{"task_id": 108, "completion_id": 0, "completion": "To implement the regularized Alternating Least Squares (ALS) algorithm for matrix factorization, we need to follow these steps:\n\n1. Initialize the factor matrices `W` and `H` with random values.\n2. Iteratively update `W` and `H` by solving the regularized least squares problem for each matrix while keeping the other fixed.\n3. Calculate the regularized Frobenius reconstruction loss after each iteration.\n4. Stop the iteration if the loss is below the tolerance level or if the maximum number of iterations is reached.\n5. Return the reconstructed matrix `X_hat = WH` rounded to 4 decimal places and converted to a Python list of lists.\n\nHere is the Python script implementing the above steps:\n\n```python\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    np.random.seed(0)  # Ensure deterministic results\n    N, M = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n    \n    for _ in range(max_iter):\n        # Update W\n        HHT = H @ H.T + alpha * np.eye(K)\n        W = X @ H.T @ np.linalg.inv(HHT)\n        \n        # Update H\n        WWT = W.T @ W + alpha * np.eye(K)\n        H = W.T @ X @ np.linalg.inv(WWT)\n        \n        # Calculate the regularized loss\n        X_hat = W @ H\n        loss = np.linalg.norm(X - X_hat) ** 2 + alpha * (np.linalg.norm(W) ** 2 + np.linalg.norm(H) ** 2)\n        \n        if loss < tol:\n            break\n    \n    X_hat = (W @ H).round(4)\n    return X_hat.tolist()\n\n# Example usage\nX = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nK = 2\nX_hat = als_factorization(X, K)\nprint(X_hat)\n```\n\nThis script defines the `als_factorization` function that performs the ALS algorithm with the specified parameters and constraints. The example usage at the end demonstrates how to call the function with a sample matrix `X` and a target rank `K`."}
{"task_id": 109, "completion_id": 0, "completion": "To implement the K-Means clustering algorithm with K-Means++ initialization, we need to follow these steps:\n\n1. **Initialization**: Set the random seed for both Python's `random` module and NumPy's random generator to ensure reproducibility.\n2. **K-Means++ Initialization**: Choose the initial centroids using the K-Means++ procedure.\n3. **Lloyd's Algorithm**: Perform the assign-update steps until convergence or until the maximum number of iterations is reached.\n4. **Return the Result**: Return the final centroids rounded to four decimal places and sorted by their first coordinate.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n\n    m, n = X.shape\n    centroids = np.zeros((K, n))\n\n    # K-Means++ Initialization\n    centroids[0] = X[random.randint(0, m-1)]\n    for k in range(1, K):\n        dists = np.array([min([np.linalg.norm(x - c) for c in centroids[:k]]) for x in X])\n        probs = dists / dists.sum()\n        cumprobs = probs.cumsum()\n        r = random.random()\n        for j, p in enumerate(cumprobs):\n            if r < p:\n                i = j\n                break\n        centroids[k] = X[i]\n\n    # Lloyd's Algorithm\n    for _ in range(max_iter):\n        clusters = [[] for _ in range(K)]\n        for x in X:\n            dists = np.array([np.linalg.norm(x - c) for c in centroids])\n            cluster_idx = np.argmin(dists)\n            clusters[cluster_idx].append(x)\n\n        new_centroids = np.zeros((K, n))\n        for k in range(K):\n            if clusters[k]:  # Avoid empty clusters\n                new_centroids[k] = np.mean(clusters[k], axis=0)\n            else:\n                new_centroids[k] = centroids[k]  # Keep the centroid unchanged if the cluster is empty\n\n        if np.allclose(centroids, new_centroids):\n            break\n        centroids = new_centroids\n\n    # Round to 4 decimal places and sort by the first coordinate\n    centroids = np.round(centroids, 4)\n    centroids = sorted(centroids, key=lambda c: (c[0], tuple(c)))\n\n    return centroids.tolist()\n\n# Example usage\nif __name__ == \"__main__\":\n    X = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n    K = 2\n    random_state = 42\n    centroids = kmeans(X, K, random_state=random_state)\n    print(centroids)\n```\n\nThis script defines the `kmeans` function that implements the K-Means clustering algorithm with K-Means++ initialization. The function takes a dataset `X`, the number of clusters `K`, the maximum number of iterations `max_iter`, and a `random_state` for reproducibility. The function returns the final centroids rounded to four decimal places and sorted by their first coordinate."}
{"task_id": 111, "completion_id": 0, "completion": "To solve the given task, we will implement the three functions as described. We will use NumPy for handling the fixed-length sequence and for any necessary array manipulations. The `string_to_int` function will encode the input string into a fixed-length list of integers, the `int_to_string` function will decode the list of integers back into a string, and the `run_example` function will tie everything together by encoding the input, running a mock prediction, and decoding the output.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes a string into a fixed-length list of integer token ids.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text]  # Encode each character, use 0 for unknown characters\n    if len(encoded) < time_steps:\n        encoded += [0] * (time_steps - len(encoded))  # Pad with 0s if shorter than time_steps\n    else:\n        encoded = encoded[:time_steps]  # Truncate if longer than time_steps\n    return encoded\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Decodes a list of integer ids back into a string, ignoring padding tokens.\"\"\"\n    return ''.join(inverse_vocab.get(idx, '') for idx in indices if idx != 0)  # Ignore padding tokens\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Encodes the input text, runs a mock prediction, and decodes the output.\"\"\"\n    encoded_text = string_to_int(text, TIME_STEPS, input_vocabulary)  # Encode the input text\n    encoded_text = np.array(encoded_text).reshape(1, -1)  # Reshape for model input\n    # Mock prediction: replace with actual model.predict call\n    prediction = model.predict(encoded_text)  # Mock prediction step\n    predicted_ids = np.argmax(prediction, axis=-1).flatten()  # Apply argmax to get predicted ids\n    decoded_text = int_to_string(predicted_ids, inv_output_vocabulary)  # Decode the predicted ids\n    return decoded_text\n\n# Mock model for demonstration purposes\nclass MockModel:\n    def predict(self, x):\n        # Mock prediction logic: return a random array of shape (1, TIME_STEPS, num_classes)\n        return np.random.rand(1, TIME_STEPS, 10)\n\n# Example usage\nif __name__ == \"__main__\":\n    input_vocabulary = {char: idx for idx, char in enumerate('abcdefghijklmnopqrstuvwxyz', 1)}\n    inv_output_vocabulary = {idx: char for char, idx in input_vocabulary.items()}\n    model = MockModel()\n    text = \"hello world\"\n    print(run_example(model, input_vocabulary, inv_output_vocabulary, text))\n```\n\nThis script includes a mock model to demonstrate how the `run_example` function would work with a real model. The `MockModel` class simulates the `predict` method by returning a random array, which is then processed to simulate a prediction. The actual model's `predict` method would replace the mock prediction logic."}
{"task_id": 113, "completion_id": 0, "completion": "```python\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str], optional\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    # If examples is not provided, use the global constant EXAMPLES\n    if examples is None:\n        examples = EXAMPLES\n    \n    predictions = []\n    for example in examples:\n        # Call the helper function to get the model's output as a list of characters\n        output_chars = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        # Concatenate the characters into a single string\n        predicted_string = ''.join(output_chars)\n        # Print the input and output\n        print(f\"input:  {example}\")\n        print(f\"output: {predicted_string}\")\n        # Collect the predicted string\n        predictions.append(predicted_string)\n    \n    return predictions\n\n# Assuming the global constant EXAMPLES is defined somewhere in the environment\n# EXAMPLES = [\"example1\", \"example2\", \"example3\"]\n```"}
{"task_id": 115, "completion_id": 0, "completion": "To solve the given task, we need to implement the `logistic_loss_and_gradient` function that computes the binary cross-entropy loss and its gradient for logistic regression. The function will follow these steps:\n\n1. Compute the dot product of the feature matrix `X` and the weight vector `w` to get the logits `z`.\n2. Apply the sigmoid function to the logits to get the predicted probabilities `p`.\n3. Handle numerical stability by replacing any predicted probabilities that are exactly 0 or 1 with a small constant `\u03b5`.\n4. Compute the binary cross-entropy loss using the formula provided.\n5. Compute the gradient of the loss with respect to the weights.\n6. Return the loss and gradient as specified.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    m = X.shape[0]  # Number of samples\n    z = X @ w  # Compute logits\n    p = 1 / (1 + np.exp(-z))  # Apply sigmoid function\n    \n    # Handle numerical stability\n    epsilon = 1e-20\n    p = np.clip(p, epsilon, 1 - epsilon)\n    \n    # Compute the binary cross-entropy loss\n    loss = -1/m * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n    loss = round(loss, 4)\n    \n    # Compute the gradient of the loss with respect to the weights\n    gradient = 1/m * X.T @ (p - y)\n    gradient = np.round(gradient, 4).tolist()\n    \n    return loss, gradient\n\n# Example usage:\n# X = np.array([[1, 2], [3, 4]])\n# y = np.array([0, 1])\n# w = np.array([0.1, 0.2])\n# print(logistic_loss_and_gradient(X, y, w))\n```\n\nThis script defines the `logistic_loss_and_gradient` function that computes the required loss and gradient, ensuring numerical stability and rounding as specified."}
{"task_id": 118, "completion_id": 0, "completion": "To implement the AdaBoost algorithm with decision stumps, we need to follow these steps:\n\n1. Initialize the weights of the training examples.\n2. For each iteration (up to `n_clf`):\n   - Train a decision stump on the weighted training data.\n   - Calculate the weighted error of the stump.\n   - Compute the stump's weight (`alpha`).\n   - Update the weights of the training examples.\n3. Aggregate the predictions of all stumps for the test data.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\ndef decision_stump(X, y, weights):\n    \"\"\"Train a decision stump on the weighted data.\"\"\"\n    m, n = X.shape\n    min_error = float('inf')\n    best_theta = 0\n    best_feature = 0\n    best_polarity = 1\n    \n    for feature in range(n):\n        thresholds = np.unique(X[:, feature])\n        for threshold in thresholds:\n            for polarity in [-1, 1]:\n                prediction = polarity * np.where(X[:, feature] > threshold, 1, -1)\n                error = np.sum(weights[prediction != y])\n                if error < min_error:\n                    min_error = error\n                    best_theta = threshold\n                    best_feature = feature\n                    best_polarity = polarity\n    \n    return best_feature, best_theta, best_polarity, min_error\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\"\"\"\n    m, n = X_train.shape\n    k = X_test.shape[0]\n    weights = np.full(m, 1 / m)\n    classifiers = []\n    alphas = []\n    \n    for _ in range(max(1, n_clf)):\n        feature, theta, polarity, error = decision_stump(X_train, y_train, weights)\n        alpha = 0.5 * np.log((1 - error) / error)\n        classifiers.append((feature, theta, polarity))\n        alphas.append(alpha)\n        \n        # Update weights\n        prediction = polarity * np.where(X_train[:, feature] > theta, 1, -1)\n        weights *= np.exp(-alpha * y_train * prediction)\n        weights /= np.sum(weights)\n    \n    # Predict for test data\n    predictions = np.zeros(k)\n    for (feature, theta, polarity), alpha in zip(classifiers, alphas):\n        prediction = polarity * np.where(X_test[:, feature] > theta, 1, -1)\n        predictions += alpha * prediction\n    \n    return list(np.sign(predictions))\n```\n\nThis script defines a function `adaboost_predict` that implements the AdaBoost algorithm using decision stumps as weak learners. The function takes training and test data, along with the number of classifiers to build, and returns a list of predicted labels for the test data."}
{"task_id": 128, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    # Step 1: Compute the within-class scatter matrix S_W\n    S_W = np.zeros((X.shape[1], X.shape[1]))\n    for c in np.unique(y):\n        X_c = X[y == c]\n        mu_c = np.mean(X_c, axis=0)\n        S_W += (X_c - mu_c).T.dot(X_c - mu_c)\n\n    # Step 2: Compute the between-class scatter matrix S_B\n    overall_mean = np.mean(X, axis=0)\n    S_B = np.zeros((X.shape[1], X.shape[1]))\n    for c in np.unique(y):\n        X_c = X[y == c]\n        mu_c = np.mean(X_c, axis=0)\n        S_B += X_c.shape[0] * (mu_c - overall_mean).T.dot(mu_c - overall_mean)\n\n    # Step 3: Compute the matrix A = pinv(S_W) * S_B\n    A = np.linalg.pinv(S_W).dot(S_B)\n\n    # Step 4: Perform eigen-decomposition of A\n    eigenvalues, eigenvectors = np.linalg.eigh(A)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n\n    # Step 5: Apply deterministic sign fix\n    for i in range(sorted_eigenvectors.shape[1]):\n        first_non_zero_index = np.argmax(sorted_eigenvectors[:, i] != 0)\n        if sorted_eigenvectors[first_non_zero_index, i] < 0:\n            sorted_eigenvectors[:, i] *= -1\n\n    # Step 6: Project X on the first n_components eigenvectors\n    W = sorted_eigenvectors[:, :n_components]\n    projected_data = X.dot(W)\n\n    # Step 7: Round every element to four decimal places and convert to list of lists\n    return np.round(projected_data, 4).tolist()\n\n# Example usage\nX = np.array([[1,1],[1,2],[2,1],[2,2],[8,8],[9,8],[8,9],[9,9]])\ny = np.array([0,0,0,0,1,1,1,1])\nn_components = 1\nprint(multi_class_lda(X, y, n_components))\n```\n\nThis script implements the multi-class Linear Discriminant Analysis (LDA) as described in the task. It computes the within-class and between-class scatter matrices, solves the generalised eigen-value problem, applies a deterministic sign fix to the eigenvectors, and projects the data onto the first `n_components` eigenvectors. The result is rounded to four decimal places and returned as a list of lists."}
{"task_id": 140, "completion_id": 0, "completion": "To solve this problem, we can use a breadth-first search (BFS) approach to simulate the movement of both the agent and the fire. The BFS will help us find the shortest path for the agent to reach the goal while avoiding the fire. We will use a queue to keep track of the agent's possible positions and a separate queue to track the fire's spread. We will also maintain a time variable to keep track of the number of minutes passed.\n\nHere's the step-by-step plan:\n1. Check if the start or goal cell is on fire. If so, return -1 immediately.\n2. Initialize the BFS for both the agent and the fire.\n3. For each minute, first spread the fire to all possible neighboring cells.\n4. Then, move the agent to all possible neighboring cells that are not on fire.\n5. If the agent reaches the goal, return the time taken.\n6. If the agent cannot move to any safe cell, return -1.\n\nHere is the Python code implementing this approach:\n\n```python\nfrom collections import deque\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    \"\"\"Escape from a maze with spreading fire.\n\n    Parameters\n    ----------\n    grid : list[str]\n        Square maze represented as a list of strings. Each character must be\n        '.', '#', or 'F'.  The agent starts at the upper-left corner (0,0) and\n        wishes to reach the lower-right corner (n-1,n-1).  Fire starts in every\n        cell marked with 'F' and spreads to the four neighbouring cells every\n        minute.  The fire spreads first, then the agent moves.\n\n    Returns\n    -------\n    int\n        Minimum number of minutes required for the agent to reach the goal\n        without entering a burning cell, or -1 if this is impossible.\n    \"\"\"\n    n = len(grid)\n    if grid[0][0] == 'F' or grid[n-1][n-1] == 'F':\n        return -1\n\n    # Directions for moving in the grid\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    # Initialize the fire and agent positions\n    fire_queue = deque()\n    agent_queue = deque([(0, 0)])\n    visited = set([(0, 0)])\n    time = 0\n\n    # Add initial fire positions to the fire queue\n    for r in range(n):\n        for c in range(n):\n            if grid[r][c] == 'F':\n                fire_queue.append((r, c))\n\n    while agent_queue:\n        # Spread the fire\n        for _ in range(len(fire_queue)):\n            fr, fc = fire_queue.popleft()\n            for dr, dc in directions:\n                nr, nc = fr + dr, fc + dc\n                if 0 <= nr < n and 0 <= nc < n and grid[nr][nc] == '.':\n                    grid[nr][nc] = 'F'\n                    fire_queue.append((nr, nc))\n\n        # Move the agent\n        for _ in range(len(agent_queue)):\n            ar, ac = agent_queue.popleft()\n            if (ar, ac) == (n-1, n-1):\n                return time\n            for dr, dc in directions:\n                nr, nc = ar + dr, ac + dc\n                if 0 <= nr < n and 0 <= nc < n and grid[nr][nc] == '.' and (nr, nc) not in visited:\n                    visited.add((nr, nc))\n                    agent_queue.append((nr, nc))\n        time += 1\n\n    return -1\n```\n\nThis code initializes the BFS for both the agent and the fire, and it ensures that the fire spreads before the agent moves. It checks if the agent can reach the goal and returns the minimum time required or -1 if it is impossible."}
{"task_id": 141, "completion_id": 0, "completion": "To implement the k-Nearest Neighbors (k-NN) classifier, we need to follow the steps outlined in the task description. We will use NumPy for efficient numerical computations. Here's a step-by-step breakdown of the implementation:\n\n1. **Distance Calculation**: Depending on the metric provided, we will calculate the distance between each test sample and every training sample.\n2. **Finding Neighbors**: For each test sample, we will find the k nearest neighbors based on the calculated distances.\n3. **Majority Vote**: We will predict the class of each test sample by taking a majority vote among its k nearest neighbors. In case of a tie, we will return the smallest label value.\n4. **Fallback Metric**: If an unknown metric is provided, we will use the Euclidean metric as a fallback.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\ndef knn_predict(\n        X_train: np.ndarray,\n        y_train: np.ndarray,\n        X_test: np.ndarray,\n        k: int,\n        metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"\n    Implement the k-Nearest Neighbors classifier.\n    \n    Parameters:\n    X_train (np.ndarray): Training samples.\n    y_train (np.ndarray): Training labels.\n    X_test (np.ndarray): Test samples.\n    k (int): Number of neighbors to consider.\n    metric (str): Distance metric to use ('euclidean', 'manhattan', 'cosine').\n    \n    Returns:\n    np.ndarray: Predicted labels for the test samples.\n    \"\"\"\n    # Determine the distance metric to use\n    if metric not in ['euclidean', 'manhattan', 'cosine']:\n        metric = 'euclidean'\n    \n    # Initialize the array to store predictions\n    predictions = np.zeros(X_test.shape[0], dtype=y_train.dtype)\n    \n    # Compute distances and find k nearest neighbors for each test sample\n    for i, test_sample in enumerate(X_test):\n        if metric == 'euclidean':\n            distances = np.linalg.norm(X_train - test_sample, axis=1)\n        elif metric == 'manhattan':\n            distances = np.sum(np.abs(X_train - test_sample), axis=1)\n        elif metric == 'cosine':\n            dot_products = np.dot(X_train, test_sample)\n            norms = np.linalg.norm(X_train, axis=1) * np.linalg.norm(test_sample)\n            distances = 1 - dot_products / norms\n        \n        # Find the indices of the k nearest neighbors\n        nearest_indices = np.argsort(distances)[:k]\n        \n        # Get the labels of the k nearest neighbors\n        nearest_labels = y_train[nearest_indices]\n        \n        # Predict the label by majority vote\n        unique_labels, counts = np.unique(nearest_labels, return_counts=True)\n        predictions[i] = unique_labels[np.argmax(counts)]\n        if np.count_nonzero(counts == counts.max()) > 1:\n            # In case of a tie, return the smallest label value\n            predictions[i] = unique_labels[counts == counts.max()].min()\n    \n    return predictions\n```\n\nThis function `knn_predict` takes the training data, test data, the number of neighbors `k`, and the distance metric as input, and returns the predicted labels for the test samples. The implementation handles the three specified distance metrics and falls back to the Euclidean metric if an unknown metric is provided."}
{"task_id": 146, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    def euclidean_distance(a, b):\n        return np.sqrt(np.sum((a - b) ** 2, axis=1))\n    \n    def manhattan_distance(a, b):\n        return np.sum(np.abs(a - b), axis=1)\n    \n    def cosine_distance(a, b):\n        dot_product = np.sum(a * b, axis=1)\n        norm_a = np.sqrt(np.sum(a ** 2, axis=1))\n        norm_b = np.sqrt(np.sum(b ** 2, axis=1))\n        return 1 - dot_product / (norm_a * norm_b + 1e-12)\n    \n    # Choose the distance metric\n    if metric == 'euclidean':\n        distance_func = euclidean_distance\n    elif metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        raise ValueError(\"Invalid metric. Choose 'euclidean', 'manhattan', or 'cosine'.\")\n    \n    # Predict labels for each test sample\n    predictions = []\n    for test_sample in X_test:\n        # Compute distances to all training samples\n        distances = distance_func(X, test_sample)\n        # Get indices of the k nearest neighbours\n        nearest_indices = np.argsort(distances)[:k]\n        # Get labels of the k nearest neighbours\n        nearest_labels = y[nearest_indices]\n        # Perform majority vote\n        unique_labels, counts = np.unique(nearest_labels, return_counts=True)\n        majority_label = unique_labels[np.argmax(counts)]\n        predictions.append(majority_label)\n    \n    return predictions\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [6, 7], [7, 8], [8, 9]])\n# y_train = np.array([0, 0, 0, 1, 1, 1])\n# X_test = np.array([[2, 2], [7, 7]])\n# predictions = knn_predict(X_train, y_train, X_test, k=3, metric='euclidean')\n# print(predictions)  # Output: [0, 1]\n```"}
{"task_id": 155, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Ensure the state is a NumPy array\n    state = np.array(state)\n    \n    # First layer: Linear transformation followed by ReLU\n    hidden1 = np.maximum(0, np.dot(state, weights['W1']) + weights['b1'])\n    \n    # Second layer: Linear transformation followed by ReLU\n    hidden2 = np.maximum(0, np.dot(hidden1, weights['W2']) + weights['b2'])\n    \n    # Output layer: Linear transformation followed by tanh\n    action = np.tanh(np.dot(hidden2, weights['W3']) + weights['b3'])\n    \n    # Convert the action to a list and round to 4 decimal places\n    return [round(x, 4) for x in action]\n\n# Example usage:\n# Define the weights and biases for the network\nweights = {\n    'W1': np.array([[0.1, 0.2], [0.3, 0.4]]),\n    'b1': np.array([0.5, 0.6]),\n    'W2': np.array([[0.7, 0.8], [0.9, 1.0]]),\n    'b2': np.array([1.1, 1.2]),\n    'W3': np.array([[1.3, 1.4], [1.5, 1.6]]),\n    'b3': np.array([1.7, 1.8])\n}\n\n# Define a state vector\nstate = [1.0, 2.0]\n\n# Perform the forward pass\naction = actor_forward(state, weights)\nprint(action)\n```\n\nThis script defines the `actor_forward` function that performs the forward pass of a two-hidden-layer actor network as described in the task. The function takes a state vector and a dictionary of weights and biases, and returns the action vector as a list of floats, each rounded to four decimal places. The example usage at the end demonstrates how to use the function with a set of weights and a state vector."}
{"task_id": 160, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    m, n = X.shape\n    # Add intercept column\n    if fit_intercept:\n        X = np.hstack([np.ones((m, 1)), X])\n    else:\n        X = np.hstack([np.zeros((m, 1)), X])\n    n += 1  # Adjust n to include intercept column\n\n    # Initialize weights\n    w = np.zeros(n)\n    for _ in range(max_iters):\n        if fit_intercept:\n            w[0] = np.mean(y - X[:, 1:] @ w[1:])\n        for j in range(1, n):  # Exclude intercept\n            X_j = X[:, j]\n            r_j = y - X @ w + w[j] * X_j\n            z_j = X_j.T @ r_j\n            u_j = np.sum(X_j ** 2)\n            w[j] = soft_threshold(z_j, lambda_param * m) / u_j\n\n    bias = w[0]\n    weights = w[1:].tolist()\n    return [round(w, 4) for w in weights], round(bias, 4)\n\ndef soft_threshold(a, tau):\n    return np.sign(a) * max(abs(a) - tau, 0)\n\n# Example usage\nX = np.array([[1, 2], [2, 3], [3, 4]])\ny = np.array([1, 2, 3])\nweights, bias = fit_lasso(X, y, lambda_param=0.1, max_iters=100, fit_intercept=True)\nprint(\"Weights:\", weights)\nprint(\"Bias:\", bias)\n```\n\nThis script defines a function `fit_lasso` that implements Lasso regression using the coordinate descent method. It includes the necessary steps to handle the intercept, initialize weights, and update them according to the algorithm described. The `soft_threshold` function is used to apply the soft-thresholding operator during the weight updates. The example usage at the end demonstrates how to call the function and print the resulting weights and bias."}
{"task_id": 165, "completion_id": 0, "completion": "To solve the task, we need to follow these steps:\n\n1. Check if the lengths of the two input vectors are the same. If not, return -1.\n2. Convert the inputs to NumPy arrays if they are not already, to make use of NumPy's efficient element-wise operations.\n3. Compute the element-wise inequality between the two vectors.\n4. Calculate the proportion of differing elements.\n5. Round the result to 4 decimal places and return it.\n\nHere is the Python script that accomplishes this:\n\n```python\nimport numpy as np\n\ndef hamming_distance(x: list[int] | np.ndarray, y: list[int] | np.ndarray) -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return -1.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or -1 if the inputs have different lengths.\n    \"\"\"\n    # Convert inputs to NumPy arrays if they are not already\n    x = np.array(x) if not isinstance(x, np.ndarray) else x\n    y = np.array(y) if not isinstance(y, np.ndarray) else y\n    \n    # Check if the lengths of the vectors are the same\n    if x.shape != y.shape:\n        return -1\n    \n    # Compute the element-wise inequality\n    differences = x != y\n    \n    # Calculate the proportion of differing elements\n    distance = np.mean(differences)\n    \n    # Round the result to 4 decimal places\n    return round(distance, 4)\n\n# Example usage:\n# x = [1, 0, 1, 0, 1]\n# y = [1, 1, 1, 0, 0]\n# print(hamming_distance(x, y))  # Output: 0.4\n```\n\nThis script defines the `hamming_distance` function that meets all the specified requirements. It handles both Python lists and NumPy arrays as inputs, checks for equal lengths, computes the normalized Hamming distance, and rounds the result to 4 decimal places."}
{"task_id": 169, "completion_id": 0, "completion": "To solve the given task, we will follow these steps:\n\n1. Validate the input parameters `N` and `window`.\n2. Define the mathematical formulas for each window type.\n3. Implement the `generate_window` function to calculate the coefficients based on the specified window type.\n4. Ensure the coefficients are rounded to 4 decimal places and returned as a list.\n\nHere is the complete Python script:\n\n```python\nimport numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if N <= 0:\n        raise ValueError(\"N must be a positive integer\")\n    \n    if window not in [\"hamming\", \"hann\", \"blackman_harris\", \"generalized_cosine\"]:\n        raise ValueError(\"Unknown window type\")\n    \n    if N == 1:\n        return [1.0]\n    \n    n = np.arange(N)\n    w = np.zeros(N)\n    \n    if window == \"hamming\":\n        w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == \"hann\":\n        w = 0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1))\n    elif window == \"blackman_harris\":\n        a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n        w = a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1))\n    elif window == \"generalized_cosine\":\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be provided for generalized_cosine window\")\n        for k, a_k in enumerate(coefficients):\n            w += a_k * np.cos(2 * np.pi * k * n / (N - 1))\n    \n    return [round(x, 4) for x in w]\n\n# Example usage:\n# print(generate_window(\"hamming\", 5))\n# print(generate_window(\"hann\", 5))\n# print(generate_window(\"blackman_harris\", 5))\n# print(generate_window(\"generalized_cosine\", 5, [0.5, 0.5]))\n```\n\nThis script defines the `generate_window` function that calculates the coefficients for the specified window type and returns them as a list of floats rounded to 4 decimal places. The function handles the special cases and raises `ValueError` for invalid inputs."}
{"task_id": 171, "completion_id": 0, "completion": "To implement the binary Logistic Regression classifier using mini-batch Gradient Descent, we will follow these steps:\n\n1. **Preprocess the Data**: Add an intercept term to the data and map the labels to `{0, 1}`.\n2. **Initialize Parameters**: Initialize the weight vector.\n3. **Mini-Batch Gradient Descent**: Implement the training loop using mini-batch gradient descent.\n4. **Prediction**: Predict the labels for the test set.\n5. **Handle Special Case**: If all training labels are identical, predict that label for all test samples.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    \"\"\"Train a binary Logistic Regression classifier using mini-batch Gradient\n    Descent and return predictions for the provided test set.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature matrix where each inner list corresponds to one sample.\n    y_train : list[int]\n        Training labels \u2013 exactly two distinct numeric values are required.\n    X_test  : list[list[float]]\n        Feature matrix for which predictions are requested.\n    epochs : int, default 5000\n        Number of passes over the training data during optimization.\n    learning_rate : float, default 0.1\n        Step size used in Gradient Descent updates.\n    batch_size : int, default 32\n        Number of samples per mini-batch.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels for each sample in `X_test`, expressed in the same\n        value set that appears in `y_train`.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Add intercept term (bias)\n    X_train = np.hstack([np.ones((X_train.shape[0], 1)), X_train])\n    X_test = np.hstack([np.ones((X_test.shape[0], 1)), X_test])\n    \n    # Map labels to {0, 1}\n    unique_labels = np.unique(y_train)\n    if len(unique_labels) != 2:\n        raise ValueError(\"y_train must contain exactly two distinct labels\")\n    label_map = {unique_labels[0]: 0, unique_labels[1]: 1}\n    y_train_mapped = np.array([label_map[label] for label in y_train])\n    \n    # Initialize weights\n    weights = np.zeros(X_train.shape[1])\n    \n    # Handle special case where all labels are the same\n    if len(np.unique(y_train_mapped)) == 1:\n        return [unique_labels[0]] * len(X_test)\n    \n    # Mini-batch Gradient Descent\n    for epoch in range(epochs):\n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train[i:i + batch_size]\n            y_batch = y_train_mapped[i:i + batch_size]\n            predictions = sigmoid(np.dot(X_batch, weights))\n            gradient = np.dot(X_batch.T, (predictions - y_batch)) / len(X_batch)\n            weights -= learning_rate * gradient\n    \n    # Predictions\n    test_predictions = sigmoid(np.dot(X_test, weights))\n    test_predictions = [unique_labels[1] if p >= 0.5 else unique_labels[0] for p in test_predictions]\n    \n    return test_predictions\n\ndef sigmoid(z):\n    return 1 / (1 + np.exp(-z))\n```\n\nThis script defines the `logistic_regression_train_predict` function that implements the binary Logistic Regression classifier using mini-batch Gradient Descent. The function handles the preprocessing of data, training the model, and making predictions on the test set. The `sigmoid` function is used to compute the logistic function, which is essential for the logistic regression model."}
{"task_id": 176, "completion_id": 0, "completion": "To implement the AdaBoost algorithm with decision stumps as weak learners, we need to follow these steps:\n\n1. **Initialize the sample weights**: Start with equal weights for each sample.\n2. **Train the weak learners**: For each estimator, find the best decision stump that minimizes the weighted classification error.\n3. **Update the sample weights**: Adjust the weights based on the error of the current stump.\n4. **Aggregate the predictions**: Combine the predictions of all stumps to make the final prediction.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    # Convert lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Initialize sample weights\n    n_samples = X_train.shape[0]\n    weights = np.full(n_samples, 1 / n_samples)\n    \n    # Initialize the list of stumps and their weights\n    stumps = []\n    stump_weights = []\n    \n    for _ in range(n_estimators):\n        # Find the best stump\n        best_stump = None\n        best_error = float('inf')\n        for feature_index in range(X_train.shape[1]):\n            for threshold in np.unique(X_train[:, feature_index]):\n                for polarity in [1, -1]:\n                    stump = (feature_index, threshold, polarity)\n                    predictions = np.where(X_train[:, feature_index] < threshold, 1, -1) if polarity == 1 else np.where(X_train[:, feature_index] >= threshold, 1, -1)\n                    error = np.sum(weights * (predictions != y_train))\n                    if error < best_error:\n                        best_error = error\n                        best_stump = stump\n        \n        # If a perfect stump is found, stop early\n        if best_error == 0:\n            break\n        \n        # Calculate the stump weight\n        alpha = 0.5 * np.log((1 - best_error) / (best_error + 1e-10))\n        \n        # Update the sample weights\n        feature_index, threshold, polarity = best_stump\n        predictions = np.where(X_train[:, feature_index] < threshold, 1, -1) if polarity == 1 else np.where(X_train[:, feature_index] >= threshold, 1, -1)\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n        \n        # Store the stump and its weight\n        stumps.append(best_stump)\n        stump_weights.append(alpha)\n    \n    # Make predictions on the test set\n    test_predictions = np.zeros(X_test.shape[0])\n    for stump, alpha in zip(stumps, stump_weights):\n        feature_index, threshold, polarity = stump\n        predictions = np.where(X_test[:, feature_index] < threshold, 1, -1) if polarity == 1 else np.where(X_test[:, feature_index] >= threshold, 1, -1)\n        test_predictions += alpha * predictions\n    \n    # Convert the aggregated sign back to class labels {0,1}\n    final_predictions = np.where(test_predictions >= 0, 1, 0)\n    \n    # Return the predictions as a list of integers\n    return list(final_predictions)\n```\n\nThis implementation follows the AdaBoost algorithm closely, using decision stumps as weak learners. The stumps are trained sequentially, and the sample weights are updated after each round to focus more on the misclassified samples. The final prediction is made by aggregating the weighted votes of all stumps."}
{"task_id": 178, "completion_id": 0, "completion": "Let's break down the implementation of the Particle Swarm Optimization (PSO) algorithm for the Sphere function step by step. We'll start by defining the function and then proceed to implement the PSO algorithm according to the provided specifications.\n\n1. **Initialization**: Initialize the positions and velocities of the particles randomly within the given bounds. Also, initialize the personal best and global best positions.\n2. **Iteration**: For each iteration, update the velocities and positions of the particles based on the PSO update rules. Update the personal best and global best positions if a better solution is found.\n3. **Termination**: After the specified number of iterations, return the best Sphere function value found.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n\n    rng = np.random.default_rng(seed)\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n    lower_bound = -1\n    upper_bound = 1\n\n    # Initialize positions and velocities\n    positions = rng.uniform(lower_bound, upper_bound, (num_particles, n_dims))\n    velocities = rng.uniform(-0.1, 0.1, (num_particles, n_dims))\n\n    # Initialize personal best and global best\n    personal_best_positions = positions.copy()\n    personal_best_values = np.array([np.sum(x**2) for x in positions])\n    global_best_index = np.argmin(personal_best_values)\n    global_best_position = personal_best_positions[global_best_index]\n\n    for _ in range(num_iterations):\n        # Update velocities\n        r1 = rng.uniform(0, 1, (num_particles, n_dims))\n        r2 = rng.uniform(0, 1, (num_particles, n_dims))\n        velocities = w * velocities + c1 * r1 * (personal_best_positions - positions) + c2 * r2 * (global_best_position - positions)\n\n        # Update positions\n        positions = np.clip(positions + velocities, lower_bound, upper_bound)\n\n        # Update personal best\n        current_values = np.array([np.sum(x**2) for x in positions])\n        improved = current_values < personal_best_values\n        personal_best_positions[improved] = positions[improved]\n        personal_best_values[improved] = current_values[improved]\n\n        # Update global best\n        global_best_index = np.argmin(personal_best_values)\n        global_best_position = personal_best_positions[global_best_index]\n\n    return round(np.min(personal_best_values), 4)\n```\n\nThis function initializes the particles' positions and velocities, then iteratively updates them according to the PSO rules. The best Sphere function value found during the optimization process is returned, rounded to four decimal places. If any of the input parameters are non-positive, the function returns -1."}
{"task_id": 180, "completion_id": 0, "completion": "To implement the k-Nearest Neighbours (k-NN) algorithm as described, we need to follow these steps:\n\n1. Calculate the Euclidean distance between each test sample and all training samples.\n2. Sort the training samples based on their distance to the test sample.\n3. Select the k nearest neighbours.\n4. For classification, return the most frequent label among the k neighbours.\n5. For regression, return the average of the target values of the k neighbours, rounded to 4 decimal places.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    predictions = []\n    n_train = len(X_train)\n    \n    # If k is 0 or larger than the number of training samples, use all training samples\n    if k <= 0 or k > n_train:\n        k = n_train\n    \n    for x_test in X_test:\n        # Calculate Euclidean distances\n        distances = [np.linalg.norm(np.array(x_train) - np.array(x_test)) for x_train in X_train]\n        \n        # Sort the distances and get the indices of the k nearest neighbours\n        sorted_indices = np.argsort(distances)[:k]\n        \n        # Get the labels of the k nearest neighbours\n        k_nearest_labels = [y_train[i] for i in sorted_indices]\n        \n        if task == \"classification\":\n            # For classification, return the most frequent label\n            prediction = Counter(k_nearest_labels).most_common(1)[0][0]\n        else:\n            # For regression, return the average of the labels\n            prediction = round(np.mean(k_nearest_labels), 4)\n        \n        predictions.append(prediction)\n    \n    return predictions\n```\n\nThis function `knn_predict` takes the training data, test data, the number of neighbours `k`, and the task type as input. It calculates the Euclidean distance between each test sample and all training samples, sorts the distances, and then selects the k nearest neighbours. Depending on the task type, it either returns the most frequent label (for classification) or the average of the labels (for regression) for each test sample."}
{"task_id": 184, "completion_id": 0, "completion": "To implement a binary decision tree classifier using the CART algorithm from scratch, we need to follow these steps:\n\n1. **Define the Gini Impurity Function**: This function will calculate the Gini impurity for a given set of labels.\n2. **Define the Splitting Function**: This function will find the best split for a given set of features and labels.\n3. **Define the Tree Node Structure**: This will help in building the tree structure.\n4. **Define the Tree Building Function**: This function will recursively build the tree based on the splitting rules and stopping criteria.\n5. **Define the Prediction Function**: This function will traverse the tree to make predictions for the test data.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\ndef gini_impurity(labels):\n    \"\"\"Calculate the Gini impurity for a set of labels.\"\"\"\n    _, counts = np.unique(labels, return_counts=True)\n    probabilities = counts / len(labels)\n    return 1 - np.sum(probabilities ** 2)\n\ndef best_split(X, y):\n    \"\"\"Find the best split for a given set of features and labels.\"\"\"\n    best_gini_gain = -1\n    best_feature = None\n    best_threshold = None\n    n_samples, n_features = X.shape\n    \n    for feature in range(n_features):\n        sorted_indices = np.argsort(X[:, feature])\n        for i in range(1, n_samples):\n            if X[sorted_indices[i], feature] != X[sorted_indices[i-1], feature]:\n                threshold = (X[sorted_indices[i], feature] + X[sorted_indices[i-1], feature]) / 2\n                left_labels = y[sorted_indices[:i]]\n                right_labels = y[sorted_indices[i:]]\n                gini_left = gini_impurity(left_labels)\n                gini_right = gini_impurity(right_labels)\n                gini_gain = gini_impurity(y) - (len(left_labels) * gini_left + len(right_labels) * gini_right) / len(y)\n                if gini_gain > best_gini_gain:\n                    best_gini_gain = gini_gain\n                    best_feature = feature\n                    best_threshold = threshold\n    \n    return best_feature, best_threshold\n\ndef majority_class(labels):\n    \"\"\"Return the majority class in a set of labels.\"\"\"\n    values, counts = np.unique(labels, return_counts=True)\n    return values[np.argmax(counts)]\n\nclass TreeNode:\n    \"\"\"A node in the decision tree.\"\"\"\n    def __init__(self, feature=None, threshold=None, left=None, right=None, *, value=None):\n        self.feature = feature\n        self.threshold = threshold\n        self.left = left\n        self.right = right\n        self.value = value\n\n    def is_leaf_node(self):\n        return self.value is not None\n\ndef build_tree(X, y, depth=0, max_depth=None):\n    \"\"\"Recursively build the decision tree.\"\"\"\n    if len(np.unique(y)) == 1 or (max_depth is not None and depth >= max_depth):\n        return TreeNode(value=majority_class(y))\n    \n    feature, threshold = best_split(X, y)\n    if feature is None:\n        return TreeNode(value=majority_class(y))\n    \n    left_indices = X[:, feature] < threshold\n    right_indices = X[:, feature] >= threshold\n    \n    left_tree = build_tree(X[left_indices], y[left_indices], depth + 1, max_depth)\n    right_tree = build_tree(X[right_indices], y[right_indices], depth + 1, max_depth)\n    \n    return TreeNode(feature=feature, threshold=threshold, left=left_tree, right=right_tree)\n\ndef predict(node, x):\n    \"\"\"Predict the class for a single sample.\"\"\"\n    if node.is_leaf_node():\n        return node.value\n    if x[node.feature] < node.threshold:\n        return predict(node.left, x)\n    return predict(node.right, x)\n\ndef decision_tree_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, max_depth: int | None = None) -> list[int]:\n    \"\"\"Build a CART decision tree on (X_train, y_train) and predict labels for X_test.\"\"\"\n    tree = build_tree(X_train, y_train, max_depth=max_depth)\n    return [predict(tree, x) for x in X_test]\n\n# Example usage:\n# X_train = np.array([[0, 0], [1, 1]])\n# y_train = np.array([0, 1])\n# X_test = np.array([[2., 2.], [-1, -1]])\n# predictions = decision_tree_predict(X_train, y_train, X_test, max_depth=2)\n# print(predictions)\n```\n\nThis script defines a decision tree classifier using the CART algorithm. It includes functions to calculate Gini impurity, find the best split, and build the tree recursively. The `decision_tree_predict` function builds the tree on the training data and makes predictions on the test data."}
{"task_id": 190, "completion_id": 0, "completion": "To solve the task of finding the best Gini split, we need to follow these steps:\n\n1. Calculate the Gini impurity of the whole dataset.\n2. Iterate over each feature and each unique value in that feature to consider it as a potential split point.\n3. For each potential split, calculate the Gini impurity of the left and right subsets.\n4. Compute the weighted Gini impurity for the split.\n5. Track the split with the minimum Gini impurity.\n6. Return the best split details or the Gini impurity of the whole dataset if no valid split is found.\n\nHere is the Python code that implements the above logic:\n\n```python\nimport numpy as np\n\ndef gini_impurity(labels):\n    \"\"\"Calculate the Gini impurity for a set of labels.\"\"\"\n    _, counts = np.unique(labels, return_counts=True)\n    proportions = counts / len(labels)\n    return 1 - np.sum(proportions ** 2)\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n    \n    # Calculate Gini impurity of the whole dataset\n    G_whole = gini_impurity(y)\n    \n    best_gini = G_whole\n    best_feature_index = -1\n    best_threshold_value = None\n    \n    for feature_index in range(n_features):\n        unique_values = np.unique(X[:, feature_index])\n        for threshold in unique_values:\n            left_indices = X[:, feature_index] <= threshold\n            right_indices = X[:, feature_index] > threshold\n            \n            if np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n                continue\n            \n            left_labels = y[left_indices]\n            right_labels = y[right_indices]\n            \n            n_left = len(left_labels)\n            n_right = len(right_labels)\n            n_total = n_left + n_right\n            \n            G_left = gini_impurity(left_labels)\n            G_right = gini_impurity(right_labels)\n            \n            G_split = (n_left / n_total) * G_left + (n_right / n_total) * G_right\n            \n            if G_split < best_gini or (np.abs(G_split - best_gini) < 1e-12 and feature_index < best_feature_index) or (np.abs(G_split - best_gini) < 1e-12 and feature_index == best_feature_index and threshold < best_threshold_value):\n                best_gini = G_split\n                best_feature_index = feature_index\n                best_threshold_value = threshold\n    \n    return (best_feature_index, best_threshold_value, round(best_gini, 4))\n```\n\nThis code defines a function `best_gini_split` that takes a feature matrix `X` and a label vector `y` as input and returns the best feature index, threshold value, and the corresponding Gini impurity. The function first calculates the Gini impurity of the whole dataset and then iterates over each feature and each unique value in that feature to find the split that minimizes the weighted Gini impurity. The function handles ties according to the specified rules and returns the appropriate values."}
{"task_id": 191, "completion_id": 0, "completion": "To solve the given task, we need to implement a function `metric` that returns a callable function based on the metric name provided. The callable function will compute the distance between two vectors according to the specified metric. We also need to validate the input vectors and the metric name.\n\nHere's a step-by-step breakdown of the solution:\n\n1. **Import necessary libraries**: We need `numpy` for vector operations.\n2. **Define the `metric` function**: This function will return a callable function based on the metric name.\n3. **Implement validation**: Check if the vectors are valid (same length, non-empty, numeric, etc.).\n4. **Implement distance calculations**: For each supported metric, compute the distance and round the result to four decimal places.\n5. **Return -1 for invalid inputs**: If the metric name is not supported or the vectors are invalid, the callable function should return -1.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\"\"\"\n    \n    def validate_vectors(x, y):\n        if not (isinstance(x, (list, tuple, np.ndarray)) and isinstance(y, (list, tuple, np.ndarray))):\n            return False\n        if len(x) != len(y) or len(x) == 0:\n            return False\n        try:\n            x = np.array(x, dtype=float)\n            y = np.array(y, dtype=float)\n        except ValueError:\n            return False\n        return x, y\n    \n    def euclidean(x, y):\n        return round(np.sqrt(np.sum((x - y) ** 2)), 4)\n    \n    def manhattan(x, y):\n        return round(np.sum(np.abs(x - y)), 4)\n    \n    def chebyshev(x, y):\n        return round(np.max(np.abs(x - y)), 4)\n    \n    def cosine(x, y):\n        norm_x = np.linalg.norm(x)\n        norm_y = np.linalg.norm(y)\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        return round(1 - np.dot(x, y) / (norm_x * norm_y), 4)\n    \n    def distance_function(x, y):\n        x, y = validate_vectors(x, y)\n        if x is False:\n            return -1\n        if name == 'euclidean':\n            return euclidean(x, y)\n        elif name == 'manhattan':\n            return manhattan(x, y)\n        elif name == 'chebyshev':\n            return chebyshev(x, y)\n        elif name == 'cosine':\n            return cosine(x, y)\n        else:\n            return -1\n    \n    return distance_function\n```\n\nThis script defines the `metric` function which returns a callable function that computes the distance based on the specified metric. The callable function includes validation checks to ensure the input vectors are valid and the metric name is supported. If the validation fails or the metric name is not supported, the function returns -1."}
{"task_id": 197, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n\n    if cont_action:\n        if md_action:\n            # Multi-dimensional continuous space\n            action_dim = len(env.action_space.shape)\n            n_actions_per_dim = [np.inf] * action_dim\n        else:\n            # Single-dimensional continuous space\n            action_dim = 1\n            n_actions_per_dim = [np.inf]\n    else:\n        if md_action:\n            # Multi-dimensional discrete space\n            action_dim = len(env.action_space.spaces)\n            n_actions_per_dim = [space.n for space in env.action_space.spaces]\n            action_ids = list(product(*[range(n) for n in n_actions_per_dim]))\n        else:\n            # Single-dimensional discrete space\n            action_dim = 1\n            n_actions_per_dim = [env.action_space.n]\n            action_ids = [(i,) for i in range(env.action_space.n)]\n\n    return n_actions_per_dim, action_ids, action_dim\n\n# Example usage:\n# Assuming `env` is an environment object with an action space that mimics OpenAI Gym\n# env = ...\n# md_action = ...\n# cont_action = ...\n# stats = action_stats(env, md_action, cont_action)\n# print(stats)\n```\n\nThis script defines the `action_stats` function as required, which handles both continuous and discrete action spaces, as well as single and multi-dimensional cases. It returns the required statistics about the action space of the given environment."}
{"task_id": 198, "completion_id": 0, "completion": "To solve the given task, we need to follow these steps:\n\n1. Initialize a matrix to store the sum of the variational parameters for each word and topic.\n2. Iterate over each document and its tokens, updating the matrix based on the variational parameters.\n3. Normalize each column of the matrix so that the sum of each column equals 1.\n4. Convert the matrix to a list of lists and round each value to 4 decimal places.\n\nHere is the Python code that implements the above steps:\n\n```python\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # Determine the number of topics T from the shape of the first phi array\n    T = phi[0].shape[1]\n    \n    # Initialize the beta matrix with zeros\n    beta = np.zeros((V, T))\n    \n    # Iterate over each document and its tokens\n    for d, doc in enumerate(corpus):\n        for n, word in enumerate(doc):\n            # Update the beta matrix using the variational parameters\n            beta[word] += phi[d][n]\n    \n    # Normalize each column of the beta matrix\n    beta /= beta.sum(axis=0, keepdims=True)\n    \n    # Convert the beta matrix to a list of lists and round to 4 decimal places\n    beta_list = [[round(val, 4) for val in row] for row in beta]\n    \n    return beta_list\n```\n\nThis function first initializes a zero matrix `beta` with dimensions `V x T`. It then iterates over each document and its tokens, updating the `beta` matrix based on the variational parameters stored in `phi`. After updating, it normalizes each column of the `beta` matrix to ensure that the sum of each column equals 1. Finally, it converts the matrix to a list of lists and rounds each value to 4 decimal places before returning it."}
{"task_id": 202, "completion_id": 0, "completion": "To implement the Partitioning Around Medoids (PAM) clustering algorithm, we need to follow the steps outlined in the task description. The algorithm will initialize the medoids as the first `k` samples, then iteratively try to reduce the total clustering cost by swapping medoids with non-medoids. The process stops when no swap can further decrease the cost. Finally, each sample is assigned to the cluster of the closest medoid.\n\nHere is the Python code implementing the PAM algorithm:\n\n```python\nimport numpy as np\n\ndef euclidean_distance(x, y):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((x - y) ** 2))\n\ndef total_cost(X, medoids, labels):\n    \"\"\"Calculate the total cost of the clustering.\"\"\"\n    cost = 0\n    for i, label in enumerate(labels):\n        cost += euclidean_distance(X[i], X[medoids[label]])\n    return cost\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\"\"\"\n    \n    n_samples = X.shape[0]\n    medoids = list(range(k))  # Initialize medoids as the first k samples\n    labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - X[medoids], axis=2), axis=1)\n    current_cost = total_cost(X, medoids, labels)\n    \n    improved = True\n    while improved:\n        improved = False\n        best_cost = current_cost\n        best_swap = None\n        \n        for i in range(k):\n            for j in range(n_samples):\n                if j not in medoids:\n                    new_medoids = medoids[:]\n                    new_medoids[i] = j\n                    new_labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - X[new_medoids], axis=2), axis=1)\n                    new_cost = total_cost(X, new_medoids, new_labels)\n                    if new_cost < best_cost:\n                        best_cost = new_cost\n                        best_swap = (i, j)\n        \n        if best_swap is not None:\n            i, j = best_swap\n            medoids[i] = j\n            labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - X[medoids], axis=2), axis=1)\n            current_cost = best_cost\n            improved = True\n    \n    return labels.tolist()\n\n# Example usage\nX = np.array([[0,0], [1,0], [0,1], [5,5], [6,5], [5,6]])\nk = 2\nprint(pam_clustering(X, k))  # Output: [0, 0, 0, 1, 1, 1]\n```\n\n### Explanation:\n1. **Initialization**: The medoids are initialized as the first `k` samples.\n2. **Cost Calculation**: The `total_cost` function calculates the total clustering cost.\n3. **Iterative Improvement**: The algorithm iteratively tries to swap each medoid with each non-medoid to see if the total cost can be reduced. If a swap reduces the cost, it is accepted.\n4. **Label Assignment**: After convergence, each sample is assigned to the cluster of the closest medoid.\n5. **Output**: The function returns a list of cluster labels.\n\nThis implementation ensures that the algorithm is deterministic and follows the specified rules."}
{"task_id": 216, "completion_id": 0, "completion": "To implement the Elastic Net regression from scratch, we need to follow these steps:\n\n1. **Feature Expansion**: Generate polynomial features of the specified degree.\n2. **Standardization**: Standardize the features to have zero mean and unit variance.\n3. **Gradient Descent**: Implement batch gradient descent to minimize the mean squared error with an Elastic Net penalty.\n4. **Prediction**: Use the learned weights to predict the target values for the test set.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    \"\"\"Elastic Net regression implemented with batch gradient descent.\n    \n    Parameters\n    ----------\n    x_train : list[list[float]] | np.ndarray\n        Training feature matrix where each sub-list is a sample.\n    y_train : list[float] | np.ndarray\n        Target values for every row in `x_train`.\n    x_test : list[list[float]] | np.ndarray\n        Matrix of samples to predict after training.\n    degree : int, default 1\n        Degree of polynomial expansion applied to every original feature.\n    reg_factor : float, default 0.05\n        Overall regularisation strength (alpha).\n    l1_ratio : float, default 0.5\n        Portion of L1 penalty in Elastic Net (0 = pure ridge, 1 = pure lasso).\n    n_iterations : int, default 3000\n        Number of gradient descent iterations.\n    learning_rate : float, default 0.01\n        Step size used in each gradient update.\n    \n    Returns\n    -------\n    list[float]\n        Predictions for `x_test` rounded to 4 decimals. Returns `-1` if the\n        inputs are invalid (different feature counts, or non-positive\n        `n_iterations`).\n    \"\"\"\n    # Convert inputs to numpy arrays\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n    \n    # Check for valid input shapes\n    if x_train.shape[1] != x_test.shape[1] or n_iterations <= 0:\n        return -1\n    \n    # Polynomial feature expansion\n    def polynomial_features(X, degree):\n        n_samples, n_features = X.shape\n        combinations = [np.prod(X[:, c], axis=1) for c in combinations_with_replacement(range(n_features), degree)]\n        return np.column_stack(combinations)\n    \n    # Standardize features\n    def standardize(X):\n        mean = np.mean(X, axis=0)\n        std = np.std(X, axis=0)\n        return (X - mean) / std\n    \n    # Add bias term\n    x_train = np.c_[np.ones(x_train.shape[0]), standardize(polynomial_features(x_train, degree))]\n    x_test = np.c_[np.ones(x_test.shape[0]), standardize(polynomial_features(x_test, degree))]\n    \n    # Initialize weights\n    n_features = x_train.shape[1]\n    weights = np.zeros(n_features)\n    \n    # Gradient descent\n    for _ in range(n_iterations):\n        predictions = x_train.dot(weights)\n        error = predictions - y_train\n        gradient = x_train.T.dot(error) / len(y_train)\n        \n        # Regularization\n        l1_penalty = l1_ratio * reg_factor * np.sign(weights)\n        l2_penalty = (1 - l1_ratio) * reg_factor * weights\n        l2_penalty[0] = 0  # No regularization for bias term\n        \n        gradient += l1_penalty + l2_penalty\n        weights -= learning_rate * gradient\n    \n    # Predictions\n    predictions = x_test.dot(weights)\n    return np.round(predictions, 4).tolist()\n```\n\nThis script defines the `elastic_net_regression` function that performs the required operations. It includes polynomial feature expansion, standardization, batch gradient descent with Elastic Net regularization, and prediction. The function returns the predictions for the test set rounded to four decimal places."}
{"task_id": 217, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to numpy arrays for vectorized computation\n    actual = np.array(actual, dtype=float)\n    predicted = np.array(predicted, dtype=float)\n    \n    # Compute sigmoid\n    sigmoid_pred = 1 / (1 + np.exp(-predicted))\n    \n    # Compute gradient\n    grad = actual * (sigmoid( - actual * predicted ))\n    \n    # Compute Hessian\n    hess = sigmoid_pred * (1 - sigmoid_pred)\n    \n    # Compute probability\n    prob = sigmoid_pred\n    \n    # Round results to 6 decimal places\n    grad_rounded = np.round(grad, 6)\n    hess_rounded = np.round(hess, 6)\n    prob_rounded = np.round(prob, 6)\n    \n    # Convert back to Python lists\n    gradient_list = grad_rounded.tolist()\n    hessian_list = hess_rounded.tolist()\n    probability_list = prob_rounded.tolist()\n    \n    return (gradient_list, hessian_list, probability_list)\n\n# Helper function for sigmoid\ndef sigmoid(z):\n    return 1 / (1 + np.exp(-z))\n\n# Example usage\nactual = [1, -1, 1]\npredicted = [0.5, -0.5, 1.0]\ngradient, hessian, probability = logistic_components(actual, predicted)\nprint(\"Gradient:\", gradient)\nprint(\"Hessian:\", hessian)\nprint(\"Probability:\", probability)\n```\n\nThis script defines the `logistic_components` function that computes the gradient, Hessian, and probability for logistic loss, as per the task description. It also includes an example usage of the function."}
{"task_id": 218, "completion_id": 0, "completion": "To solve this task, we need to follow these steps:\n\n1. Define a function to calculate the score of a hand, taking into account the special rule for Aces.\n2. Check if either the player or the dealer has busted.\n3. Determine if the player has a natural blackjack.\n4. Compare the scores of the player and the dealer to determine the outcome.\n\nHere is the Python code that implements the solution:\n\n```python\ndef calculate_score(hand: list[int]) -> int:\n    \"\"\"Calculate the score of a hand, considering the special rule for Aces.\"\"\"\n    score = sum(hand)\n    aces = hand.count(1)\n    while aces > 0 and score + 10 <= 21:\n        score += 10\n        aces -= 1\n    return score\n\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    player_score = calculate_score(player)\n    dealer_score = calculate_score(dealer)\n    \n    # Check if the player has busted\n    if player_score > 21:\n        return -1\n    \n    # Check if the dealer has busted\n    if dealer_score > 21:\n        return 1\n    \n    # Check for natural blackjack\n    if player_score == 21 and len(player) == 2:\n        if dealer_score == 21 and len(dealer) == 2:\n            return 0  # Draw\n        return 1.5  # Player wins with natural blackjack\n    \n    # Compare scores\n    if player_score > dealer_score:\n        return 1\n    elif player_score < dealer_score:\n        return -1\n    else:\n        return 0  # Draw\n\n# Example usage:\nplayer_hand = [1, 10]  # Ace and 10, natural blackjack\ndealer_hand = [10, 6]  # 10 and 6, total 16\nprint(blackjack_outcome(player_hand, dealer_hand))  # Output: 1.5\n```\n\nThis code defines a helper function `calculate_score` to compute the score of a hand, taking into account the special rule for Aces. The main function `blackjack_outcome` then uses this score to determine the outcome of the game according to the rules provided."}
{"task_id": 221, "completion_id": 0, "completion": "To solve the given task, we need to implement two functions: `squared_log_error` and `mean_squared_log_error`. The `squared_log_error` function will calculate the squared logarithmic error for each pair of actual and predicted values. The `mean_squared_log_error` function will use the helper function to compute the mean of these squared errors, ensuring that the inputs are valid and non-negative.\n\nHere is the step-by-step implementation:\n\n1. **Import necessary libraries**: We need `numpy` for array operations.\n2. **Implement the helper function**: This function will calculate the squared logarithmic error for each pair of actual and predicted values.\n3. **Implement the main function**: This function will validate the inputs, call the helper function, and compute the mean of the squared errors.\n\nLet's write the code:\n\n```python\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper function that returns element-wise squared log errors.\"\"\"\n    # Convert inputs to numpy arrays for element-wise operations\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    # Calculate squared log errors\n    return (np.log1p(actual) - np.log1p(predicted)) ** 2\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\n\n    Parameters\n    ----------\n    actual : list | tuple | np.ndarray\n        Sequence of true values.  All elements must be non-negative.\n    predicted : list | tuple | np.ndarray\n        Sequence of predicted values.  Must be the same length as\n        `actual` and contain only non-negative numbers.\n\n    Returns\n    -------\n    float\n        The MSLE rounded to 4 decimals.  If the inputs are invalid the\n        function returns -1.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n    \n    # Input validation\n    if actual.shape != predicted.shape:\n        return -1\n    if np.any(actual < 0) or np.any(predicted < 0):\n        return -1\n    \n    # Calculate squared log errors\n    squared_errors = squared_log_error(actual, predicted)\n    \n    # Calculate mean of squared errors\n    msle = np.mean(squared_errors)\n    \n    # Return the result rounded to 4 decimal places\n    return round(msle, 4)\n```\n\nThis implementation ensures that the inputs are validated for shape and non-negativity, and the MSLE is computed correctly and rounded to the required precision."}
{"task_id": 222, "completion_id": 0, "completion": "To implement the sigmoid function as described, we need to consider the following steps:\n\n1. **Check the Input Type**: Determine if the input is a scalar, a list, or a NumPy array.\n2. **Numerical Stability**: Implement the sigmoid function in a numerically stable way, especially for large values of `z`.\n3. **Element-wise Operation**: Apply the sigmoid function element-wise for array-like inputs.\n4. **Return Type**: Ensure the return type matches the input type, with all values rounded to 4 decimal places.\n\nHere is the Python script that accomplishes the task:\n\n```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    # Helper function for numerical stability\n    def stable_sigmoid(x):\n        if x >= 0:\n            return 1 / (1 + np.exp(-x))\n        else:\n            return np.exp(x) / (1 + np.exp(x))\n    \n    # Check if input is a scalar\n    if isinstance(z, (int, float)):\n        return round(stable_sigmoid(z), 4)\n    # Check if input is a list\n    elif isinstance(z, list):\n        return [round(stable_sigmoid(item), 4) for item in z]\n    # Check if input is a NumPy array\n    elif isinstance(z, np.ndarray):\n        result = np.vectorize(stable_sigmoid)(z)\n        return result.round(4).tolist()\n    else:\n        raise TypeError(\"Input must be a scalar, list, or NumPy array.\")\n\n# Example usage:\nprint(sigmoid(0))  # Scalar input\nprint(sigmoid([0, 1000, -1000]))  # List input\nprint(sigmoid(np.array([0, 1000, -1000])))  # NumPy array input\n```\n\nThis script defines a `sigmoid` function that handles scalar, list, and NumPy array inputs. It uses a helper function `stable_sigmoid` to ensure numerical stability for large values of `z`. The function returns the result in the same format as the input, with all values rounded to 4 decimal places."}
{"task_id": 224, "completion_id": 0, "completion": "To solve the given task, we need to implement the Leaky ReLU activation function. The function should handle inputs of various types (scalars, lists, and `numpy.ndarray`), apply the Leaky ReLU transformation, and return the result in the same structure as the input.\n\nHere's a step-by-step approach to achieve this:\n\n1. **Check the type of the input `z`**:\n   - If `z` is a scalar, apply the Leaky ReLU directly.\n   - If `z` is a list, recursively apply the function to each element.\n   - If `z` is a `numpy.ndarray`, apply the Leaky ReLU using `numpy` operations and convert the result back to a list.\n\n2. **Apply the Leaky ReLU transformation**:\n   - For each element, if it is non-negative, return the element itself.\n   - If it is negative, return `a * element`.\n\n3. **Return the result in the same structure as the input**.\n\nHere is the complete Python script implementing the above logic:\n\n```python\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    def apply_leaky_relu(x):\n        \"\"\"Apply the Leaky ReLU activation to a single value.\"\"\"\n        return x if x >= 0 else a * x\n\n    if isinstance(z, (int, float)):\n        # z is a scalar\n        return apply_leaky_relu(z)\n    elif isinstance(z, list):\n        # z is a list, possibly nested\n        return [leaky_relu(item, a) for item in z]\n    elif isinstance(z, np.ndarray):\n        # z is a numpy array\n        result = np.where(z >= 0, z, a * z)\n        return result.tolist()\n    else:\n        raise TypeError(\"Input must be a scalar, list, or numpy.ndarray\")\n\n# Example usage:\n# Scalar input\nprint(leaky_relu(1))  # Output: 1\nprint(leaky_relu(-1))  # Output: -0.01\n\n# List input\nprint(leaky_relu([1, -1, [2, -2]]))  # Output: [1, -0.01, [2, -0.02]]\n\n# Numpy array input\nprint(leaky_relu(np.array([1, -1, 2, -2])))  # Output: [1.0, -0.01, 2.0, -0.02]\n```\n\nThis script defines the `leaky_relu` function that handles different types of inputs and applies the Leaky ReLU activation function accordingly. The function uses recursion to handle nested lists and leverages `numpy` for efficient array operations."}
{"task_id": 226, "completion_id": 0, "completion": "To implement the AdaBoost algorithm with decision stumps as weak learners, we need to follow these steps:\n\n1. Initialize the sample weights.\n2. For each boosting round, find the best decision stump that minimizes the weighted classification error.\n3. Compute the weight of the stump based on its error.\n4. Update the sample weights to focus more on the misclassified samples.\n5. After training, use the ensemble of stumps to predict the labels of the test data.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\nimport math\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train an AdaBoost ensemble of decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D numpy array of shape (n_samples, n_features) with training data.\n        y_train: 1-D numpy array of shape (n_samples,) containing class labels (-1 or 1).\n        X_test:  2-D numpy array of unseen samples to classify.\n        n_clf:   Number of weak learners (decision stumps) to use in the ensemble.\n\n    Returns:\n        A Python list with one element per row in *X_test*. Each element must be\n        either -1 or 1 indicating the predicted class label.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    sample_weights = np.full(n_samples, 1 / n_samples)\n    stumps = []\n    alphas = []\n\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_stump = None\n        for feature_index in range(n_features):\n            for threshold in np.unique(X_train[:, feature_index]):\n                for polarity in [-1, 1]:\n                    predictions = np.where(X_train[:, feature_index] < threshold, polarity, -polarity)\n                    error = np.sum(sample_weights * (predictions != y_train))\n                    if error < best_error:\n                        best_error = error\n                        best_stump = (feature_index, threshold, polarity)\n        \n        feature_index, threshold, polarity = best_stump\n        predictions = np.where(X_train[:, feature_index] < threshold, polarity, -polarity)\n        error = np.sum(sample_weights * (predictions != y_train))\n        alpha = 0.5 * math.log((1 - error) / (error + 1e-10))\n        alphas.append(alpha)\n        stumps.append(best_stump)\n        \n        # Update sample weights\n        sample_weights *= np.exp(-alpha * y_train * predictions)\n        sample_weights /= np.sum(sample_weights)\n\n    # Prediction on test data\n    test_predictions = np.zeros(X_test.shape[0])\n    for alpha, stump in zip(alphas, stumps):\n        feature_index, threshold, polarity = stump\n        predictions = np.where(X_test[:, feature_index] < threshold, polarity, -polarity)\n        test_predictions += alpha * predictions\n\n    return [1 if pred > 0 else -1 for pred in test_predictions]\n\n# Example usage:\n# X_train = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y_train = np.array([-1, -1, 1, 1])\n# X_test = np.array([[1.5, 2.5], [3.5, 4.5]])\n# predictions = adaboost_predict(X_train, y_train, X_test, n_clf=3)\n# print(predictions)  # Output: [-1, 1]\n```\n\nThis script defines the `adaboost_predict` function that trains an AdaBoost ensemble using decision stumps and predicts the labels for the test data. The function iterates over the specified number of classifiers, finds the best stump for each round, and updates the sample weights accordingly. Finally, it predicts the labels for the test data based on the weighted sum of the stump decisions."}
{"task_id": 241, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n    \n    # Step 2: Create a 2-D matrix A filled with i.i.d. samples from the standard normal distribution.\n    flat_shape = (shape[0], np.prod(shape[1:]))\n    A = np.random.randn(*flat_shape)\n    \n    # Step 3: Compute the singular value decomposition (SVD) of A.\n    U, _, Vt = np.linalg.svd(A, full_matrices=False)\n    \n    # Step 4: Choose the SVD factor that has the same size as A.\n    Q = U if U.shape == A.shape else Vt\n    \n    # Step 5: Reshape Q back to the requested tensor shape and multiply it by scale.\n    result = (Q * scale).reshape(shape)\n    \n    return result.tolist()\n\n# Example usage\nnp.random.seed(0)\nshape = (2, 2)\nscale = 0.5\nresult = orthogonal(shape, scale)\nprint(result)\n```\n\nThis script defines the `orthogonal` function that generates an orthogonally initialized tensor according to the specified shape and scale. The function first checks if the shape has at least two dimensions. It then creates a 2-D matrix filled with samples from the standard normal distribution, computes the SVD, and selects the appropriate orthogonal matrix. Finally, it reshapes the matrix to the desired shape, scales it, and returns the result as a Python list."}
{"task_id": 243, "completion_id": 0, "completion": "To solve the given task, we need to implement the forward pass of a small fully-connected Actor\u2013Critic network using NumPy. The network architecture and the operations are described in detail in the task description. We will follow the steps to compute the output for the given state vector.\n\nHere is the self-contained Python script:\n\n```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Convert the state list to a NumPy array for easier manipulation\n    state = np.array(state)\n    \n    # Define the weights and biases (all weights = 1.0, all biases = 0.0)\n    W1 = np.ones((3, 4))  # Input to Dense-1\n    b1 = np.zeros(4)\n    W2 = np.ones((4, 4))  # Dense-1 to Dense-2\n    b2 = np.zeros(4)\n    W3 = np.ones((4, 4))  # Dense-2 to Dense-3\n    b3 = np.zeros(4)\n    Wa = np.ones((4, 3))  # Dense-3 to Actor head\n    ba = np.zeros(3)\n    Wc = np.ones((4, 1))  # Dense-3 to Critic head\n    bc = np.zeros(1)\n    \n    # Compute the forward pass\n    z1 = np.maximum(0, np.dot(state, W1) + b1)  # ReLU activation\n    z2 = np.maximum(0, np.dot(z1, W2) + b2)  # ReLU activation\n    z3 = np.maximum(0, np.dot(z2, W3) + b3)  # ReLU activation\n    logits = np.dot(z3, Wa) + ba\n    state_value = np.dot(z3, Wc) + bc\n    \n    # Compute action probabilities using softmax\n    exp_logits = np.exp(logits)\n    action_probs = exp_logits / np.sum(exp_logits)\n    \n    # Round the action probabilities and state value to 4 decimal places\n    action_probs = [round(prob, 4) for prob in action_probs]\n    state_value = round(state_value[0], 4)\n    \n    return action_probs, state_value\n\n# Example usage\nstate = [1.0, 2.0, 3.0]\naction_probs, state_value = actor_critic_forward(state)\nprint(\"Action Probabilities:\", action_probs)\nprint(\"State Value:\", state_value)\n```\n\nThis script defines the `actor_critic_forward` function that takes a state vector as input and computes the action probabilities and state value according to the specified network architecture. The weights and biases are set to 1.0 and 0.0, respectively, as per the task description. The output is rounded to four decimal places as required."}
{"task_id": 249, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    # Convert state and params to numpy arrays for easier manipulation\n    state = np.array(state)\n    for key in params:\n        params[key] = np.array(params[key])\n\n    # Shared layers\n    x = np.maximum(0, state @ params['W1'] + params['b1'])  # ReLU activation\n    x = np.maximum(0, x @ params['W2'] + params['b2'])      # ReLU activation\n    x = np.maximum(0, x @ params['W3'] + params['b3'])      # ReLU activation\n\n    # Actor head\n    actor_output = x @ params['Wa'] + params['ba']\n    exp_scores = np.exp(actor_output - np.max(actor_output))  # Subtract max for numerical stability\n    probabilities = exp_scores / np.sum(exp_scores)\n\n    # Critic head\n    value = x @ params['Wc'] + params['bc']\n\n    # Round the results\n    probabilities = np.round(probabilities, 4)\n    value = np.round(value, 4)\n\n    # Ensure that if the result is exactly 0 or 1, it is kept as 0.0 or 1.0\n    probabilities = [float(f'{p:.1f}') if p == 0 or p == 1 else p for p in probabilities]\n    value = float(f'{value:.1f}') if value == 0 or value == 1 else value\n\n    return probabilities.tolist(), float(value)\n\n# Example usage\nparams = {\n    'W1': [[0.1, 0.2], [0.3, 0.4]],\n    'b1': [0.1, 0.2],\n    'W2': [[0.5, 0.6], [0.7, 0.8]],\n    'b2': [0.3, 0.4],\n    'W3': [[0.9, 1.0], [1.1, 1.2]],\n    'b3': [0.5, 0.6],\n    'Wa': [[1.3, 1.4], [1.5, 1.6]],\n    'ba': [0.7, 0.8],\n    'Wc': [[1.7], [1.8]],\n    'bc': [0.9]\n}\nstate = [1.0, 2.0]\nprobabilities, value = actor_critic_forward(state, params)\nprint(\"Probabilities:\", probabilities)\nprint(\"Value:\", value)\n```\n\nThis script defines the `actor_critic_forward` function that performs the forward pass through a three-layer Actor-Critic network using NumPy. The function takes the current state and a dictionary of parameters, and returns the action probabilities and the state value, both rounded to four decimal places."}
{"task_id": 253, "completion_id": 0, "completion": "To solve the given task, we need to implement the `elastic_net_regularization` function that computes the Elastic-Net penalty and its gradient. The function will take a weight vector `w`, a regularisation strength `alpha`, an L1 ratio `l1_ratio`, and a Boolean flag `gradient`. Depending on the value of `gradient`, the function will either return the penalty value or the gradient.\n\nHere's a step-by-step breakdown of the implementation:\n\n1. **Import NumPy**: We need NumPy for vector operations.\n2. **Define the Function**: The function will accept the weight vector `w`, `alpha`, `l1_ratio`, and `gradient`.\n3. **Compute the Penalty**: If `gradient` is `False`, compute the Elastic-Net penalty using the given formula.\n4. **Compute the Gradient**: If `gradient` is `True`, compute the gradient of the Elastic-Net penalty.\n5. **Return the Result**: Return the penalty value as a float or the gradient as a list of floats, rounded to 4 decimal places.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)  # Convert input to NumPy array for easier operations\n    l2_ratio = 1 - l1_ratio  # Calculate L2 ratio\n\n    if not gradient:\n        # Compute the Elastic-Net penalty\n        l1_penalty = l1_ratio * np.linalg.norm(w, ord=1)\n        l2_penalty = l2_ratio * 0.5 * np.dot(w, w)\n        penalty = alpha * (l1_penalty + l2_penalty)\n        return round(penalty, 4)\n    else:\n        # Compute the gradient of the Elastic-Net penalty\n        l1_gradient = l1_ratio * np.sign(w)\n        l2_gradient = l2_ratio * w\n        gradient = alpha * (l1_gradient + l2_gradient)\n        return [round(x, 4) for x in gradient.tolist()]\n\n# Example usage:\nweights = [1.0, -2.0, 3.0]\nalpha = 0.5\nl1_ratio = 0.7\n\n# Compute penalty\npenalty = elastic_net_regularization(weights, alpha, l1_ratio)\nprint(\"Penalty:\", penalty)\n\n# Compute gradient\ngradient = elastic_net_regularization(weights, alpha, l1_ratio, gradient=True)\nprint(\"Gradient:\", gradient)\n```\n\nThis script defines the `elastic_net_regularization` function and demonstrates its usage to compute both the penalty and the gradient for a given set of weights, `alpha`, and `l1_ratio`. The results are rounded to 4 decimal places as required."}
{"task_id": 256, "completion_id": 0, "completion": "To implement the numerical gradient checker for a vanilla RNN parameter, we need to follow the steps outlined in the task description. The key steps are:\n\n1. Check if the parameter name is \"X\" or \"y\" and return `None` if so.\n2. Handle the special case where the parameter name is \"Ba\" or \"Bx\" by converting it to the lower-case variant.\n3. Iterate over every element of the chosen parameter, perturb it by `+\u03b5` and `\u2013\u03b5`, and run the forward loop for each perturbation.\n4. Collect the predictions and evaluate the loss for each perturbation.\n5. Approximate the partial derivative using the centred finite-difference formula.\n6. Store the numerical gradient in `grads` and return `grads.T`.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model,\n                   loss_func,\n                   param_name: str,\n                   n_t: int,\n                   X,\n                   epsilon: float = 1e-7):\n    \"\"\"Numerically estimate the gradient of an RNN parameter using centred finite differences.\n\n    Args:\n        model:        A model exposing a ``parameters`` dict, a ``forward``\n                       method (single time-step) and a ``flush_gradients``\n                       method.\n        loss_func:    Callable that maps the list of predictions to a scalar\n                       loss value.\n        param_name:   Name of the parameter to be checked.  \"Ba\" and \"Bx\" must\n                       be redirected to the lower-case keys.  If the name is\n                       \"X\" or \"y\" the function should immediately return None.\n        n_t:          Number of time-steps to unroll the network for.\n        X:            Input tensor of shape (batch, input_dim, n_t).\n        epsilon:      Small perturbation added/subtracted to the parameter.\n\n    Returns:\n        NumPy array containing the *transposed* numerical gradient of the\n        chosen parameter or None for the non-trainable names.\n    \"\"\"\n    if param_name in [\"X\", \"y\"]:\n        return None\n\n    # Handle special cases for parameter names\n    if param_name in [\"Ba\", \"Bx\"]:\n        param_name = param_name.lower()\n\n    # Get the parameter to be checked\n    param = model.parameters[param_name]\n\n    # Initialize the gradient array\n    grads = np.zeros_like(param, dtype=np.float64)\n\n    # Iterate over every element of the parameter\n    for i in range(param.shape[0]):\n        for j in range(param.shape[1]):\n            # Perturb the parameter by +\u03b5\n            param[i, j] += epsilon\n            model.parameters[param_name] = param\n            model.flush_gradients()\n            predictions = []\n            for t in range(n_t):\n                predictions.append(model.forward(X[:, :, t]))\n            loss_pos = loss_func(predictions)\n\n            # Perturb the parameter by -\u03b5\n            param[i, j] -= 2 * epsilon\n            model.parameters[param_name] = param\n            model.flush_gradients()\n            predictions = []\n            for t in range(n_t):\n                predictions.append(model.forward(X[:, :, t]))\n            loss_neg = loss_func(predictions)\n\n            # Restore the original parameter value\n            param[i, j] += epsilon\n            model.parameters[param_name] = param\n\n            # Approximate the partial derivative\n            grads[i, j] = (loss_pos - loss_neg) / (2 * epsilon)\n\n    return grads.T\n```\n\nThis function performs the numerical gradient check for a specified parameter in a vanilla RNN model. It handles special cases for parameter names and ensures that the gradient is returned in the correct format."}
{"task_id": 257, "completion_id": 0, "completion": "To implement the AdaBoost algorithm with decision stumps, we need to follow these steps:\n\n1. Initialize the weights for each training example.\n2. For each iteration (up to `n_clf`):\n   - Train a decision stump on the weighted training data.\n   - Calculate the weighted error of the stump.\n   - Compute the stump's weight (`alpha`).\n   - Update the weights of the training examples.\n3. Aggregate the predictions of all stumps for the test data.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\ndef decision_stump(X, y, weights):\n    \"\"\"Train a decision stump on the weighted data.\"\"\"\n    m, n = X.shape\n    min_error = float('inf')\n    best_theta = 0\n    best_feature = 0\n    best_polarity = 1\n    \n    for feature in range(n):\n        thresholds = np.unique(X[:, feature])\n        for threshold in thresholds:\n            for polarity in [-1, 1]:\n                prediction = polarity * np.where(X[:, feature] > threshold, 1, -1)\n                error = np.sum(weights[prediction != y])\n                if error < min_error:\n                    min_error = error\n                    best_theta = threshold\n                    best_feature = feature\n                    best_polarity = polarity\n    \n    return best_feature, best_theta, best_polarity, min_error\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\"\"\"\n    m, n = X_train.shape\n    k = X_test.shape[0]\n    weights = np.full(m, 1 / m)\n    classifiers = []\n    alphas = []\n    \n    for _ in range(max(1, n_clf)):\n        feature, theta, polarity, error = decision_stump(X_train, y_train, weights)\n        alpha = 0.5 * np.log((1 - error) / error)\n        classifiers.append((feature, theta, polarity))\n        alphas.append(alpha)\n        \n        # Update weights\n        prediction = polarity * np.where(X_train[:, feature] > theta, 1, -1)\n        weights *= np.exp(-alpha * y_train * prediction)\n        weights /= np.sum(weights)\n    \n    # Predict for test data\n    predictions = np.zeros(k)\n    for (feature, theta, polarity), alpha in zip(classifiers, alphas):\n        prediction = polarity * np.where(X_test[:, feature] > theta, 1, -1)\n        predictions += alpha * prediction\n    \n    return list(np.sign(predictions))\n```\n\nThis script defines a function `adaboost_predict` that implements the AdaBoost algorithm using decision stumps as weak learners. The `decision_stump` function is a helper that finds the best decision stump for a given set of weights. The main function iteratively trains stumps, updates the weights, and aggregates the predictions for the test data."}
{"task_id": 261, "completion_id": 0, "completion": "To implement the Glorot (Xavier) normal weight-initialisation function, we need to follow the steps outlined in the task description. We will compute the `fan_in` and `fan_out` values based on the shape of the tensor, calculate the standard deviation, and then generate a NumPy array with the appropriate distribution. Here is the complete implementation:\n\n```python\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    if len(shape) < 2:\n        raise ValueError(\"Shape must have at least two dimensions.\")\n    \n    # Compute fan_in and fan_out\n    if len(shape) == 2:\n        fan_in, fan_out = shape\n    else:\n        fan_in = shape[1] * np.prod(shape[2:])\n        fan_out = shape[0] * np.prod(shape[2:])\n    \n    # Calculate the standard deviation\n    s = np.sqrt(2 / (fan_in + fan_out))\n    \n    # Generate the array with the specified distribution\n    return np.random.normal(loc=0, scale=s, size=shape)\n\n# Example usage\nshape = (3, 4, 5, 6)  # Example shape for a 4D tensor\nweights = glorot_normal(shape)\nprint(\"Generated weights shape:\", weights.shape)\nprint(\"Mean:\", np.mean(weights))\nprint(\"Standard deviation:\", np.std(weights))\n```\n\nThis script defines the `glorot_normal` function which takes a shape tuple as input and returns a NumPy array with the Glorot/Xavier normal initialisation. The function first checks if the shape has at least two dimensions, then computes `fan_in` and `fan_out` based on the shape's dimensions, calculates the standard deviation, and finally generates the array using `np.random.normal`. The example usage demonstrates how to call the function and print the mean and standard deviation of the generated weights to verify the correctness of the implementation."}
{"task_id": 266, "completion_id": 0, "completion": "To solve this task, we need to create an adjacency list for an undirected graph. The adjacency list will be a list of lists where each sublist contains the neighbors of the corresponding vertex in the order they appear in the vertex list `V`. We need to ensure that each neighbor appears exactly once and that the order of neighbors is preserved according to their order in `V`.\n\nHere's a step-by-step approach to achieve this:\n\n1. **Initialize the adjacency list**: Create an empty list `G` with the same length as `V`, where each element is an initially empty list.\n2. **Process each edge**: For each edge `(u, v)` in `E`, add `v` to the sublist corresponding to `u` and `u` to the sublist corresponding to `v`.\n3. **Remove duplicates and sort**: For each sublist in `G`, remove any duplicates and sort the sublist according to the order of vertices in `V`.\n\nLet's implement this in Python:\n\n```python\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    # Initialize the adjacency list with empty lists\n    G = [[] for _ in V]\n    \n    # Create a dictionary to map vertex to its index in V\n    vertex_index = {vertex: index for index, vertex in enumerate(V)}\n    \n    # Process each edge\n    for u, v in E:\n        # Add v to the adjacency list of u\n        if v not in G[vertex_index[u]]:\n            G[vertex_index[u]].append(v)\n        # Add u to the adjacency list of v\n        if u not in G[vertex_index[v]]:\n            G[vertex_index[v]].append(u)\n    \n    # Sort each sublist according to the order in V\n    for i in range(len(G)):\n        G[i] = sorted(G[i], key=lambda x: vertex_index[x])\n    \n    return G\n\n# Example usage\nV = ['A', 'B', 'C', 'D']\nE = [('A', 'B'), ('B', 'C'), ('A', 'C'), ('C', 'D'), ('A', 'D')]\nprint(build_adj_list(V, E))\n```\n\nThis code will output the adjacency list for the given graph, ensuring that each neighbor appears exactly once and is sorted according to the order in `V`."}
{"task_id": 267, "completion_id": 0, "completion": "To solve the task of finding the optimal weighted decision stump, we need to iterate over all features and all unique feature values to find the best threshold and polarity that minimizes the weighted classification error. Here's a step-by-step approach to achieve this:\n\n1. Iterate over each feature.\n2. For each feature, sort the unique values to consider as potential thresholds.\n3. For each threshold, calculate the weighted error for both polarities (1 and -1).\n4. Track the best feature, threshold, polarity, and the corresponding weighted error.\n5. Return the best stump configuration.\n\nBelow is the Python code implementing this approach:\n\n```python\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_error = np.inf\n    best_stump = {\"feature_index\": None, \"threshold\": None, \"polarity\": None, \"weighted_error\": None}\n\n    for feature_index in range(n_features):\n        # Get unique values for the current feature\n        unique_values = np.unique(X[:, feature_index])\n        thresholds = (unique_values[:-1] + unique_values[1:]) / 2.0\n\n        for threshold in thresholds:\n            for polarity in [1, -1]:\n                # Predict labels based on the current threshold and polarity\n                predictions = np.where(X[:, feature_index] < threshold, 1, -1) * polarity\n                # Calculate the weighted error\n                error = np.sum(sample_weights * (predictions != y))\n                # Update the best stump if the current one is better\n                if error < best_error:\n                    best_error = error\n                    best_stump = {\n                        \"feature_index\": feature_index,\n                        \"threshold\": np.round(threshold, 4),\n                        \"polarity\": polarity,\n                        \"weighted_error\": np.round(best_error, 4)\n                    }\n\n    return best_stump\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n# y = np.array([1, -1, 1, -1])\n# sample_weights = np.array([0.25, 0.25, 0.25, 0.25])\n# print(train_decision_stump(X, y, sample_weights))\n```\n\nThis code defines the `train_decision_stump` function which iterates over each feature and each possible threshold to find the optimal decision stump. It returns a dictionary with the best feature index, threshold, polarity, and the corresponding weighted error, all rounded to the nearest 4th decimal place."}
{"task_id": 273, "completion_id": 0, "completion": "To solve the given task, we need to implement the `best_split` function that will calculate the best split threshold for a given feature and target labels. The function will calculate the information gain for each possible threshold and return the one with the highest information gain. If no useful split exists, it will return `(None, 0.0)`.\n\nHere's a step-by-step breakdown of the solution:\n\n1. **Calculate the entropy of the parent node**.\n2. **Sort the feature values and find all possible thresholds**.\n3. **Calculate the information gain for each threshold**.\n4. **Return the threshold with the highest information gain**.\n\nLet's implement this in Python:\n\n```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of labels.\"\"\"\n    label_counts = Counter(labels)\n    total = len(labels)\n    entropy = 0.0\n    for count in label_counts.values():\n        p = count / total\n        entropy -= p * math.log2(p)\n    return entropy\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\n\n    Parameters\n    ----------\n    feature : list[int | float] | 1-D numpy.ndarray\n        Numerical values of a single attribute.\n    target  : list[int] | 1-D numpy.ndarray\n        Corresponding class labels.\n\n    Returns\n    -------\n    tuple\n        (threshold, information_gain) where\n        * threshold \u2013 float rounded to 4 decimals or None when no useful split exists;\n        * information_gain \u2013 float rounded to 4 decimals.\n    \"\"\"\n    # Convert inputs to numpy arrays for easier manipulation\n    feature = np.array(feature)\n    target = np.array(target)\n    \n    # Calculate the entropy of the parent node\n    parent_entropy = entropy(target)\n    \n    # Sort the feature and target based on feature values\n    sorted_indices = np.argsort(feature)\n    sorted_feature = feature[sorted_indices]\n    sorted_target = target[sorted_indices]\n    \n    # Find all possible thresholds\n    thresholds = []\n    for i in range(len(sorted_feature) - 1):\n        if sorted_feature[i] != sorted_feature[i + 1]:\n            thresholds.append((sorted_feature[i] + sorted_feature[i + 1]) / 2)\n    \n    # If no legal thresholds exist, return (None, 0.0)\n    if not thresholds:\n        return (None, 0.0)\n    \n    # Initialize variables to track the best split\n    best_threshold = None\n    best_gain = 0.0\n    \n    # Evaluate each threshold\n    for threshold in thresholds:\n        left_indices = sorted_feature < threshold\n        right_indices = sorted_feature >= threshold\n        \n        left_target = sorted_target[left_indices]\n        right_target = sorted_target[right_indices]\n        \n        left_entropy = entropy(left_target)\n        right_entropy = entropy(right_target)\n        \n        left_weight = len(left_target) / len(target)\n        right_weight = len(right_target) / len(target)\n        \n        gain = parent_entropy - (left_weight * left_entropy + right_weight * right_entropy)\n        \n        if gain > best_gain:\n            best_gain = gain\n            best_threshold = threshold\n    \n    # Round the best threshold and gain to 4 decimal places\n    best_threshold = round(best_threshold, 4) if best_threshold is not None else None\n    best_gain = round(best_gain, 4)\n    \n    return (best_threshold, best_gain)\n\n# Example usage\nfeature = [1, 2, 3, 4, 5]\ntarget = [0, 0, 1, 1, 1]\nprint(best_split(feature, target))\n```\n\nThis script defines the `best_split` function, which calculates the best split threshold for a given feature and target labels. It uses the `entropy` function to calculate the Shannon entropy of the labels. The function sorts the feature values, finds all possible thresholds, and evaluates the information gain for each threshold. Finally, it returns the threshold with the highest information gain, rounded to 4 decimal places."}
{"task_id": 286, "completion_id": 0, "completion": "To solve the task, we need to implement the three initializer functions (`zeros_init`, `ones_init`, and `random_uniform_init`) and the `get_initializer` function. The `get_initializer` function will look up the global namespace for a callable object that matches the given name and return it if found. If not found, it will raise a `ValueError`.\n\nHere is the complete implementation:\n\n```python\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    return [[0.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    return [[1.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    return [[random.uniform(low, high) for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    initializer = globals().get(name)\n    if callable(initializer):\n        return initializer\n    else:\n        raise ValueError(\"Invalid initialization function.\")\n```\n\n### Explanation:\n1. **Initializers (`zeros_init`, `ones_init`, `random_uniform_init`)**:\n   - `zeros_init` and `ones_init` create matrices filled with zeros and ones, respectively.\n   - `random_uniform_init` creates a matrix with random numbers uniformly distributed between `low` and `high`. The `seed` parameter ensures that the random numbers are reproducible.\n\n2. **`get_initializer` Function**:\n   - The function uses `globals().get(name)` to retrieve the object with the given name from the global namespace.\n   - It checks if the retrieved object is callable using `callable(initializer)`.\n   - If the object is callable, it returns the object.\n   - If the object is not callable or does not exist, it raises a `ValueError` with the message \"Invalid initialization function.\""}
{"task_id": 287, "completion_id": 0, "completion": "To implement the 2-D average pooling forward and backward pass, we need to follow these steps:\n\n1. **Forward Pass**:\n   - Iterate over the input tensor `X` using the given `pool_shape` and `stride`.\n   - For each window, compute the average and store it in the output tensor.\n\n2. **Backward Pass**:\n   - Distribute the gradient from `accum_grad` back to the original input shape.\n   - Each element in the original input that contributed to a pooled value should receive an equal share of the gradient.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n    out_h = (H - p_h) // s_h + 1\n    out_w = (W - p_w) // s_w + 1\n\n    # Initialize output and gradient input\n    output = np.zeros((N, C, out_h, out_w))\n    grad_input = np.zeros_like(X)\n\n    # Forward pass\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    h_start, w_start = i * s_h, j * s_w\n                    h_end, w_end = h_start + p_h, w_start + p_w\n                    window = X[n, c, h_start:h_end, w_start:w_end]\n                    output[n, c, i, j] = np.mean(window)\n\n    # Backward pass\n    for n in range(N):\n        for c in range(C):\n            for i in range(out_h):\n                for j in range(out_w):\n                    h_start, w_start = i * s_h, j * s_w\n                    h_end, w_end = h_start + p_h, w_start + p_w\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += accum_grad[n, c, i, j] / (p_h * p_w)\n\n    # Round and convert to list\n    output_rounded = np.round(output, decimals=4).tolist()\n    grad_input_rounded = np.round(grad_input, decimals=4).tolist()\n\n    return output_rounded, grad_input_rounded\n```\n\n### Explanation:\n- **Forward Pass**:\n  - We iterate over each batch, channel, and spatial position to compute the average of the pooling window.\n  - The output tensor is filled with these averages.\n\n- **Backward Pass**:\n  - We distribute the gradient from `accum_grad` back to the original input shape.\n  - Each element in the original input that contributed to a pooled value receives an equal share of the gradient, which is the gradient divided by the number of elements in the pooling window.\n\n- **Output**:\n  - The output and gradient input are rounded to the nearest 4th decimal and converted to Python lists before returning."}
{"task_id": 290, "completion_id": 0, "completion": "To solve the task, we need to recursively compare the two trees. We will check if both nodes are of the same type (both are `Node` or both are `Leaf`). If they are both `Node`, we will compare their `feature` and `threshold` attributes, and then recursively compare their `left` and `right` children. If they are both `Leaf`, we will compare their `value` attributes using `numpy.allclose` to account for numerical tolerance.\n\nHere is the complete Python script:\n\n```python\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    # Check if both are Leaf nodes\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value)\n    \n    # Check if both are Node nodes\n    if isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        # Compare feature and threshold\n        if tree_a.feature != tree_b.feature or not np.isclose(tree_a.threshold, tree_b.threshold):\n            return False\n        # Recursively compare left and right children\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n    \n    # If one is a Leaf and the other is a Node, they are not equivalent\n    return False\n```\n\nThis script defines the `Leaf` and `Node` classes and implements the `compare_trees` function as required. The function uses recursion to compare the structure and values of the two trees, ensuring that they are equivalent according to the specified criteria."}
{"task_id": 292, "completion_id": 0, "completion": "To solve the given task, we will follow these steps:\n\n1. Convert the input lists to NumPy arrays for easier manipulation.\n2. Validate the shapes of the input matrices.\n3. Perform the crossover operation by slicing the matrices at the given cutoff point.\n4. Convert the resulting NumPy arrays back to Python lists.\n5. Return the two children matrices as a tuple.\n\nHere is the complete Python script:\n\n```python\nimport numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                           parent2: list[list[int | float]],\n                           cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    # Convert the input lists to NumPy arrays\n    parent1_array = np.array(parent1)\n    parent2_array = np.array(parent2)\n    \n    # Validate the shapes of the input matrices\n    if parent1_array.shape != parent2_array.shape:\n        return -1\n    \n    # Get the number of columns\n    num_columns = parent1_array.shape[1]\n    \n    # Ensure the cutoff is within the valid range\n    cutoff = max(0, min(cutoff, num_columns))\n    \n    # Perform the crossover\n    child1 = np.hstack((parent1_array[:, :cutoff], parent2_array[:, cutoff:]))\n    child2 = np.hstack((parent2_array[:, :cutoff], parent1_array[:, cutoff:]))\n    \n    # Convert the resulting arrays back to Python lists\n    child1_list = child1.tolist()\n    child2_list = child2.tolist()\n    \n    return (child1_list, child2_list)\n\n# Example usage:\nparent1 = [[1, 2, 3], [4, 5, 6]]\nparent2 = [[7, 8, 9], [10, 11, 12]]\ncutoff = 1\nchildren = single_point_crossover(parent1, parent2, cutoff)\nprint(children)\n```\n\nThis script defines the `single_point_crossover` function that performs the crossover operation as described. It includes validation for the input shapes and ensures the cutoff is within the valid range. The example usage demonstrates how to call the function and print the resulting children matrices."}
{"task_id": 294, "completion_id": 0, "completion": "To solve this task, we need to follow these steps:\n\n1. Initialize an empty adjacency dictionary `adj`.\n2. Iterate over each vertex label in `G['_V2I']` and add it to `adj` with an empty list as its value.\n3. For each vertex, iterate over its outgoing edges in `G['_G']` and add the corresponding tuples `(target_label, weight)` to the adjacency list of the source vertex.\n4. If the graph is undirected, also add the reverse edge `(source_label, weight)` to the adjacency list of the target vertex.\n5. Sort the adjacency lists alphabetically by the neighbor label.\n\nHere is the Python code that implements the above steps:\n\n```python\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {label: [] for label in G['_V2I']}\n    \n    for i, edges in enumerate(G['_G']):\n        for edge in edges:\n            source_label, target_label, weight = edge\n            adj[source_label].append((target_label, weight))\n            if not G['is_directed']:\n                adj[target_label].append((source_label, weight))\n    \n    for label in adj:\n        adj[label].sort(key=lambda x: x[0])\n    \n    return adj\n```\n\nThis function first initializes the adjacency dictionary with all vertex labels and empty lists. It then iterates over the edges, adding them to the adjacency lists and, if the graph is undirected, also adding the reverse edges. Finally, it sorts the adjacency lists alphabetically by the neighbor labels."}
{"task_id": 296, "completion_id": 0, "completion": "To solve this task, we need to create a function `is_binary` that checks if all elements in a given NumPy array are either `0` or `1`. The function will first convert the input array to a NumPy array if it isn't already one, and then it will check each element to see if it is either `0` or `1`. If all elements are binary, the function will return `True`; otherwise, it will return `False`.\n\nHere's the step-by-step plan:\n1. Convert the input to a NumPy array if it isn't already one.\n2. Use a NumPy operation to check if all elements are either `0` or `1`.\n3. Return `True` if all elements are binary, otherwise return `False`.\n\nNow, let's implement this plan in the code.\n\n```python\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    # Convert input to a NumPy array if it isn't already one\n    x = np.asarray(x)\n    \n    # Check if all elements are either 0 or 1\n    return np.all(np.logical_or(x == 0, x == 1))\n\n# Test cases to verify the correctness of the function\nif __name__ == \"__main__\":\n    # Test with a binary array\n    print(is_binary(np.array([0, 1, 1, 0])))  # Expected output: True\n    \n    # Test with a non-binary array\n    print(is_binary(np.array([0, 2, 1, 0])))  # Expected output: False\n    \n    # Test with a boolean array\n    print(is_binary(np.array([True, False, True])))  # Expected output: True\n    \n    # Test with a float array\n    print(is_binary(np.array([0.0, 1.0, 1.0, 0.0])))  # Expected output: True\n    \n    # Test with a non-binary float array\n    print(is_binary(np.array([0.0, 1.5, 1.0, 0.0])))  # Expected output: False\n```"}
{"task_id": 298, "completion_id": 0, "completion": "To solve the given task, we need to follow these steps:\n\n1. **Tokenize the Corpus and Query**: Split each sentence in the corpus and the query into tokens.\n2. **Pad the Tokens**: For N-grams of order greater than 1, pad the tokens with `<bol>` and `<eol>` tokens.\n3. **Count N-grams and (N-1)-grams**: Count the occurrences of each N-gram and (N-1)-gram in the corpus.\n4. **Calculate MLE Probabilities**: Compute the MLE conditional probabilities for each N-gram.\n5. **Compute Log-Probability for Query**: Calculate the log-probability of the query sentence using the computed probabilities.\n6. **Return the Result**: Return the total log-probability rounded to 4 decimal places or `float('-inf')` if any N-gram has zero probability.\n\nHere is the complete Python script implementing the above steps:\n\n```python\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    # Tokenize the corpus\n    tokenized_corpus = [sentence.split() for sentence in corpus]\n    \n    # Pad the tokens for N-grams of order > 1\n    if N > 1:\n        tokenized_corpus = [['<bol>'] * (N-1) + sentence + ['<eol>'] for sentence in tokenized_corpus]\n    \n    # Count N-grams and (N-1)-grams\n    ngram_counts = Counter()\n    prefix_counts = Counter()\n    \n    for sentence in tokenized_corpus:\n        for i in range(len(sentence) - N + 1):\n            ngram = tuple(sentence[i:i+N])\n            ngram_counts[ngram] += 1\n            prefix_counts[ngram[:-1]] += 1\n    \n    # Tokenize and pad the query\n    tokenized_query = query.split()\n    if N > 1:\n        tokenized_query = ['<bol>'] * (N-1) + tokenized_query + ['<eol>']\n    \n    # Compute the log-probability for the query\n    log_prob = 0.0\n    for i in range(len(tokenized_query) - N + 1):\n        ngram = tuple(tokenized_query[i:i+N])\n        prefix = ngram[:-1]\n        if ngram_counts[ngram] == 0 or prefix_counts[prefix] == 0:\n            return float('-inf')\n        prob = ngram_counts[ngram] / prefix_counts[prefix]\n        log_prob += math.log(prob)\n    \n    return round(log_prob, 4)\n\n# Example usage\ncorpus = [\"a b a\", \"b a b\"]\nquery = \"a b\"\nN = 1\nprint(ngram_log_prob(corpus, query, N))  # Output: -1.3863\n```\n\nThis script defines the `ngram_log_prob` function that computes the total log-probability of a query sentence under an N-gram MLE model trained on a given corpus. The function handles tokenization, padding, counting, probability calculation, and log-probability computation as described."}
{"task_id": 302, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    n_samples, _ = X.shape\n    \n    # Step 1: Build the weighted adjacency matrix W\n    W = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(i+1, n_samples):\n            dist = np.linalg.norm(X[i] - X[j])\n            W[i, j] = W[j, i] = 1 / (1 + dist)\n    \n    # Step 2: Compute the graph Laplacian L = D - W\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n    \n    # Step 3: Obtain the first k eigenvectors of L\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n    \n    # Step 4: Run k-means on the rows of E\n    centroids = E[:k].copy()\n    labels = np.zeros(n_samples, dtype=int)\n    for _ in range(100):\n        # Assign each point to the nearest centroid\n        distances = np.linalg.norm(E[:, np.newaxis] - centroids, axis=2)\n        new_labels = np.argmin(distances, axis=1)\n        \n        # Check for convergence\n        if np.array_equal(labels, new_labels):\n            break\n        \n        labels = new_labels\n        \n        # Update centroids\n        for i in range(k):\n            cluster_points = E[labels == i]\n            if len(cluster_points) > 0:\n                centroids[i] = np.mean(cluster_points, axis=0)\n            else:\n                # Reinitialize empty cluster centroid\n                centroids[i] = E[np.random.choice(n_samples)]\n    \n    return labels.tolist()\n\n# Example usage:\n# X = np.array([[1, 2], [1, 4], [1, 0], [10, 2], [10, 4], [10, 0]])\n# k = 2\n# print(spectral_clustering(X, k))\n```\n\nThis script implements the Spectral Clustering algorithm from scratch, adhering to the constraints and requirements specified in the task. It manually computes the adjacency matrix, the graph Laplacian, and performs k-means clustering on the eigenvectors of the Laplacian. The script is self-contained and uses only NumPy for numerical operations."}
{"task_id": 303, "completion_id": 0, "completion": "To solve the given task, we need to follow these steps:\n\n1. Extract the `prev_label` and `prev_mine` from the `params` list at index `max(ix-1, 0)`.\n2. Extract the `curr_label` and `curr_mine` from the `params` list at index `ix`.\n3. Retrieve the expected outputs (`prev_gold` and `curr_gold`) from the `golds` dictionary using the `prev_label` and `curr_label`.\n4. Format the string according to the specified layout, including the `warn_str` if provided.\n5. Return the formatted string.\n\nHere is the Python code that accomplishes this:\n\n```python\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    # Determine the previous index\n    prev_ix = max(ix - 1, 0)\n    # Extract the previous and current elements\n    prev_mine, prev_label = params[prev_ix]\n    curr_mine, curr_label = params[ix]\n    # Retrieve the gold-standard outputs\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    # Format the string\n    formatted_str = (\n        \"------------------------- DEBUG -------------------------\\n\"\n        f\"Mine (prev) [{prev_label}]:\\n{prev_mine}\\n\\n\"\n        f\"Theirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\n\"\n        f\"Mine [{curr_label}]:\\n{curr_mine}\\n\\n\"\n        f\"Theirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n\"\n        \"----------------------- END DEBUG -----------------------\"\n    )\n    return formatted_str\n```\n\nThis function follows the exact layout and constraints specified in the task description. It ensures that the output string is formatted precisely as required, including the correct number of dashes, line breaks, and the inclusion of `warn_str` exactly as provided."}
{"task_id": 304, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.column_stack((np.ones(X.shape[0]), X))\n    \n    N, M = X.shape\n    \n    # Handle prior mean mu\n    if np.isscalar(mu):\n        mu = np.full(M, mu)\n    \n    # Handle prior covariance V\n    if V is None:\n        V = np.eye(M)\n    elif np.isscalar(V):\n        V = V * np.eye(M)\n    elif isinstance(V, (list, tuple)):\n        V = np.diag(V)\n    V_inv = np.linalg.inv(V)\n    \n    # Compute posterior covariance (up to sigma^2)\n    Sigma_b = np.linalg.inv(V_inv + X.T @ X)\n    \n    # Compute posterior mean\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n    \n    return [round(x, 4) for x in mu_b]\n\n# Example usage\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([2, 4, 6])\nmu = 0.0\nV = 1.0\nfit_intercept = True\nprint(bayesian_posterior_mean(X, y, mu=mu, V=V, fit_intercept=fit_intercept))\n```\n\nThis script defines the function `bayesian_posterior_mean` that computes the posterior mean of the coefficients in Bayesian linear regression with an unknown noise variance. The function handles the different cases for the prior covariance `V` and prior mean `mu`, and it optionally adds an intercept column to the design matrix `X`. The result is rounded to 4 decimal places as required."}
{"task_id": 308, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef hz_to_mel(f):\n    \"\"\"Convert a value in Hertz to Mels.\"\"\"\n    return 2595.0 * np.log10(1.0 + f / 700.0)\n\ndef mel_to_hz(mel):\n    \"\"\"Convert a value in Mels to Hertz.\"\"\"\n    return 700.0 * (10.0**(mel / 2595.0) - 1.0)\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs // 2\n\n    # Convert limits to Mel scale\n    min_mel = hz_to_mel(min_freq)\n    max_mel = hz_to_mel(max_freq)\n\n    # Generate n_filters+2 equally-spaced values on the Mel axis\n    mels = np.linspace(min_mel, max_mel, n_filters + 2)\n\n    # Convert Mel values back to Hertz\n    freqs = mel_to_hz(mels)\n\n    # Initialize the filterbank matrix\n    filterbank = np.zeros((n_filters, N // 2 + 1))\n\n    # Compute the center frequencies of each DFT bin\n    bin_freqs = np.linspace(0, fs, N // 2 + 1)\n\n    for i in range(n_filters):\n        # Find the indices of the bins that fall within the current filter\n        left_idx = np.searchsorted(bin_freqs, freqs[i])\n        center_idx = np.searchsorted(bin_freqs, freqs[i + 1])\n        right_idx = np.searchsorted(bin_freqs, freqs[i + 2])\n\n        # Compute the slopes of the triangle\n        for k in range(left_idx, center_idx):\n            filterbank[i, k] = (bin_freqs[k] - freqs[i]) / (freqs[i + 1] - freqs[i])\n        for k in range(center_idx, right_idx):\n            filterbank[i, k] = (freqs[i + 2] - bin_freqs[k]) / (freqs[i + 2] - freqs[i + 1])\n\n    # Normalize the filters if required\n    if normalize:\n        for i in range(n_filters):\n            filterbank[i] *= 2.0 / (freqs[i + 2] - freqs[i])\n\n    # Convert to list and round to 4 decimal places\n    filterbank = filterbank.tolist()\n    for i in range(n_filters):\n        filterbank[i] = [round(x, 4) for x in filterbank[i]]\n\n    return filterbank\n\n# Example usage\nN = 512\nn_filters = 20\nfs = 44100\nmin_freq = 0\nmax_freq = None\nnormalize = True\n\nfilterbank = mel_filterbank(N, n_filters, fs, min_freq, max_freq, normalize)\nprint(filterbank)\n```\n\nThis script defines the `mel_filterbank` function that constructs a Mel filterbank matrix according to the specifications provided. The function uses helper functions `hz_to_mel` and `mel_to_hz` to convert between Hertz and Mel scales. The resulting filterbank matrix is returned as a list of lists, with each element rounded to 4 decimal places as required."}
{"task_id": 312, "completion_id": 0, "completion": "To solve the given task, we need to implement the `blackman_harris` function that generates a Blackman\u2013Harris window of a specified length. The function should handle both symmetric and periodic forms of the window. Here's a step-by-step approach to achieve this:\n\n1. **Import necessary libraries**: We need `numpy` for mathematical operations.\n2. **Define the function**: The function should take `window_len` and `symmetric` as parameters.\n3. **Handle special cases**: If `window_len` is less than or equal to 0, return an empty list. If `window_len` is 1, return `[1.0]`.\n4. **Calculate the window coefficients**: Use the provided formula to calculate the coefficients for the Blackman\u2013Harris window.\n5. **Adjust for periodic or symmetric form**: If `symmetric` is `False`, adjust the window length to `L+1` and discard the last value to make it periodic.\n6. **Return the result**: Round the coefficients to 4 decimal places and return them as a list.\n\nHere is the complete Python script:\n\n```python\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n    \n    # Coefficients for the Blackman\u2013Harris window\n    a0 = 0.35875\n    a1 = 0.48829\n    a2 = 0.14128\n    a3 = 0.01168\n    \n    # Adjust window length for periodic form\n    if not symmetric:\n        window_len += 1\n    \n    # Generate the window\n    n = np.arange(window_len)\n    N = window_len - 1\n    bh_window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n    \n    # Adjust for periodic form\n    if not symmetric:\n        bh_window = bh_window[:-1]\n    \n    # Round to 4 decimal places and convert to list\n    return [round(x, 4) for x in bh_window]\n\n# Example usage\nprint(blackman_harris(5, symmetric=False))\nprint(blackman_harris(5, symmetric=True))\n```\n\nThis script defines the `blackman_harris` function that generates the Blackman\u2013Harris window according to the specified parameters and constraints. The function handles both periodic and symmetric forms and ensures the output is rounded to 4 decimal places."}
{"task_id": 313, "completion_id": 0, "completion": "To solve the given task, we need to implement the `expected_log_dirichlet` function. This function will require us to implement the digamma function ourselves, as specified in the task description. We will use the recursion and asymptotic expansion methods to approximate the digamma function. Here is the complete implementation:\n\n```python\nimport math\nimport numpy as np\n\ndef digamma(x):\n    \"\"\"Approximate the digamma function using recursion and asymptotic expansion.\"\"\"\n    # Use recursion to shift x to a larger value\n    if x < 6:\n        return digamma(x + 1) - 1 / x\n    \n    # Apply the asymptotic expansion for large x\n    return math.log(x) - 1 / (2 * x) - 1 / (12 * x**2) + 1 / (120 * x**4) - 1 / (252 * x**6)\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    # Convert gamma to a numpy array if it's a list of lists\n    if isinstance(gamma, list):\n        gamma = np.array(gamma)\n    \n    # Compute the digamma values\n    digamma_t = digamma(gamma[d, t])\n    digamma_sum = digamma(np.sum(gamma[d, :]))\n    \n    # Compute the expectation of log X_t\n    expectation = digamma_t - digamma_sum\n    \n    # Round the result to 4 decimal places\n    return round(expectation, 4)\n\n# Example usage:\ngamma = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]\nd = 0\nt = 1\nprint(expected_log_dirichlet(gamma, d, t))  # Example output\n```\n\nThis script defines the `digamma` function to approximate the digamma function using recursion and asymptotic expansion. It then uses this function within `expected_log_dirichlet` to compute the expected value of the logarithm of the Dirichlet component, rounding the result to four decimal places."}
{"task_id": 317, "completion_id": 0, "completion": "```python\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    # Determine the previous and current indices\n    prev_ix = max(ix - 1, 0)\n    curr_ix = ix\n    \n    # Extract the previous and current predictions and labels\n    prev_prediction, prev_label = params[prev_ix]\n    curr_prediction, curr_label = params[curr_ix]\n    \n    # Get the gold texts for the previous and current labels\n    prev_gold = golds[prev_label]\n    curr_gold = golds[curr_label]\n    \n    # Format the debug report\n    report = f\"------------------------- DEBUG -------------------------\\n\"\n    report += f\"Mine (prev) [{prev_label}]:\\n{prev_prediction}\\n\\n\"\n    report += f\"Theirs (prev) [{prev_label}]:\\n{prev_gold}\\n\\n\"\n    report += f\"Mine [{curr_label}]:\\n{curr_prediction}\\n\\n\"\n    report += f\"Theirs [{curr_label}]:\\n{curr_gold}{warn_str}\\n\"\n    report += \"----------------------- END DEBUG -----------------------\"\n    \n    return report\n\n# Example usage\nparams = [(\"Prediction1\", \"Label1\"), (\"Prediction2\", \"Label2\"), (\"Prediction3\", \"Label3\")]\ngolds = {\"Label1\": \"Gold1\", \"Label2\": \"Gold2\", \"Label3\": \"Gold3\"}\nix = 1\nwarn_str = \" (WARNING: mismatch)\"\nprint(err_fmt(params, golds, ix, warn_str))\n```\n\nThis script defines the `err_fmt` function as specified in the task description. It takes the `params`, `golds`, `ix`, and an optional `warn_str` as inputs and returns a formatted multi-line string for debugging purposes. The example usage at the end demonstrates how to call the function with sample data."}
{"task_id": 318, "completion_id": 0, "completion": "To implement the AdaBoost.M1 algorithm from scratch using decision stumps as weak learners, we need to follow these steps:\n\n1. Initialize the weights for each training sample.\n2. For each boosting round, train a decision stump on the weighted training data.\n3. Calculate the weighted error of the stump and its weight in the final classifier.\n4. Update the weights of the training samples based on the stump's performance.\n5. After all boosting rounds, use the ensemble of stumps to predict the labels of the test data.\n\nHere is the Python code that implements the AdaBoost.M1 algorithm:\n\n```python\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    \"\"\"Train AdaBoost on the training set and predict the labels of X_test.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        2-D array of shape (n_samples, n_features) containing the training data.\n    y_train : numpy.ndarray\n        1-D array of length n_samples containing the training labels. Each label\n        is either -1 or 1.\n    X_test : numpy.ndarray\n        2-D array whose rows are the samples to classify.\n    n_estimators : int, default=50\n        Number of boosting rounds (weak learners) to use.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (-1 or 1) for each sample in X_test.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    stumps = []\n    stump_weights = []\n\n    for _ in range(n_estimators):\n        best_stump = None\n        best_error = float('inf')\n        best_weight = 0\n\n        for feature in range(n_features):\n            for threshold in np.unique(X_train[:, feature]):\n                for polarity in [-1, 1]:\n                    stump = (feature, threshold, polarity)\n                    predictions = np.where(X_train[:, feature] > threshold, polarity, -polarity)\n                    error = np.sum(weights * (predictions != y_train))\n                    if error < best_error:\n                        best_stump = stump\n                        best_error = error\n\n        stump_weight = 0.5 * math.log((1 - best_error) / best_error)\n        stump_weights.append(stump_weight)\n        stumps.append(best_stump)\n\n        # Update weights\n        feature, threshold, polarity = best_stump\n        predictions = np.where(X_train[:, feature] > threshold, polarity, -polarity)\n        weights *= np.exp(-stump_weight * y_train * predictions)\n        weights /= np.sum(weights)\n\n    # Predict on test data\n    test_predictions = np.zeros(X_test.shape[0])\n    for i, stump in enumerate(stumps):\n        feature, threshold, polarity = stump\n        predictions = np.where(X_test[:, feature] > threshold, polarity, -polarity)\n        test_predictions += stump_weights[i] * predictions\n\n    return [1 if pred > 0 else -1 for pred in test_predictions]\n```\n\nThis code defines the `adaboost_predict` function that trains an AdaBoost classifier using decision stumps and predicts the labels of the test data. The function iterates over the specified number of boosting rounds, each time finding the best decision stump based on the current weights, updating the weights, and storing the stump and its weight. Finally, it uses the ensemble of stumps to predict the labels of the test data and returns the predictions as a list of `-1` and `1`."}
{"task_id": 329, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n    \n    # Calculate the frequency resolution (delta f)\n    delta_f = fs / N\n    \n    # Generate the full list of frequencies\n    full_freqs = np.fft.fftfreq(N, 1/fs)\n    \n    # Round the frequencies to 4 decimal places\n    rounded_freqs = np.round(full_freqs, 4)\n    \n    if positive_only:\n        # Return only the non-negative frequencies\n        return rounded_freqs[:N//2 + 1].tolist()\n    else:\n        # Return all frequencies\n        return rounded_freqs.tolist()\n\n# Example usage:\nprint(dft_bins(8, 100, positive_only=True))  # Example with positive_only=True\nprint(dft_bins(8, 100, positive_only=False)) # Example with positive_only=False\n```\n\nThis script defines the `dft_bins` function as requested, which computes the centre frequency of each DFT bin based on the provided parameters. It handles both modes of operation and ensures that the output is a list of frequencies rounded to four decimal places. The function also checks for non-positive values of `N` and `fs`, returning an empty list in such cases."}
{"task_id": 331, "completion_id": 0, "completion": "To solve this task, we need to follow these steps:\n\n1. Convert the input lists to NumPy arrays for easier manipulation.\n2. Identify the samples that have at least one OOB prediction.\n3. For each of these samples, compute the average of their OOB predictions.\n4. Calculate the squared error between the average OOB prediction and the true value.\n5. Compute the mean of these squared errors.\n6. If no sample has an OOB prediction, return -1.\n\nHere is the Python code that implements the above steps:\n\n```python\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n\n    # Identify samples with at least one OOB prediction\n    oob_samples = np.any(oob_mask, axis=1)\n    \n    if not np.any(oob_samples):\n        return -1\n    \n    # Compute the average OOB prediction for each sample\n    oob_predictions = predictions[oob_samples][oob_mask[oob_samples]]\n    oob_counts = np.sum(oob_mask[oob_samples], axis=1)\n    oob_averages = np.array([np.mean(oob_predictions[oob_counts == i]) for i in range(1, oob_counts.max() + 1)])\n    \n    # Compute the squared error for each sample\n    squared_errors = (oob_averages - y_true[oob_samples]) ** 2\n    \n    # Compute the mean of the squared errors\n    mse = np.mean(squared_errors)\n    \n    return round(mse, 4)\n\n# Example usage\ny_true = [1.0, 2.0, 3.0, 4.0]\npredictions = [[1.1, 1.2, 1.3], [1.9, 2.1, 2.2], [2.9, 3.1, 3.2], [3.9, 4.1, 4.2]]\noob_mask = [[0, 1, 1], [1, 0, 1], [1, 1, 0], [0, 0, 0]]\nprint(oob_mse(y_true, predictions, oob_mask))\n```\n\nThis code will compute the OOB-MSE for the given inputs and return the result rounded to 4 decimal places. If no sample has an OOB prediction, it will return -1."}
{"task_id": 332, "completion_id": 0, "completion": "To solve the task of constructing an FP-Tree without using classes, we will follow the steps outlined in the task description. We will use dictionaries to represent the tree structure and the `collections.Counter` class to count item frequencies. Here is the step-by-step implementation:\n\n1. **Count Item Support**: We will count the occurrence of each item across all transactions.\n2. **Filter Items**: We will filter out items that do not meet the minimum support threshold.\n3. **Sort Items**: We will sort the items by their support in descending order and alphabetically for ties.\n4. **Build the Tree**: We will construct the tree by iterating over each transaction, updating the tree structure according to the sorted items.\n\nHere is the complete Python script:\n\n```python\nfrom collections import Counter\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    # Step 1: Count item support\n    item_counts = Counter(item for transaction in transactions for item in set(transaction))\n    \n    # Step 2: Filter items by min_support\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_support}\n    \n    # Step 3: Sort items by support and alphabetically\n    sorted_items = sorted(frequent_items.items(), key=lambda x: (-x[1], x[0]))\n    \n    # Step 4: Build the FP-Tree\n    root = {\"support\": 0, \"children\": {}}\n    \n    for transaction in transactions:\n        # Filter and sort transaction items\n        filtered_transaction = [item for item in transaction if item in frequent_items]\n        sorted_transaction = sorted(filtered_transaction, key=lambda x: sorted_items.index((x, frequent_items[x])))\n        \n        # Update the tree\n        current_node = root\n        for item in sorted_transaction:\n            if item not in current_node[\"children\"]:\n                current_node[\"children\"][item] = {\"support\": 0, \"children\": {}}\n            current_node = current_node[\"children\"][item]\n            current_node[\"support\"] += 1\n    \n    return root\n\n# Example usage\ntransactions = [\n    [\"a\", \"b\", \"c\"],\n    [\"a\", \"b\", \"d\"],\n    [\"a\", \"b\", \"c\"],\n    [\"a\", \"b\", \"d\"],\n    [\"a\", \"b\", \"c\"],\n    [\"a\", \"b\", \"d\"],\n    [\"a\", \"b\", \"c\"],\n    [\"a\", \"b\", \"d\"],\n    [\"a\", \"b\", \"c\"],\n    [\"a\", \"b\", \"d\"],\n    [\"a\", \"b\", \"c\"],\n    [\"a\", \"b\", \"d\"],\n    [\"a\", \"b\", \"c\"],\n    [\"a\", \"b\", \"d\"],\n    [\"a\", \"b\", \"c\"],\n    [\"a\", \"b\", \"d\"],\n    [\"a\", \"b\", \"c\"],\n    [\"a\", \"b\", \"d\"],\n    [\"a\", \"b\", \"c\"],\n    [\"a\", \"b\", \"d\"],\n]\nmin_support = 2\nfp_tree = build_fp_tree(transactions, min_support)\nprint(fp_tree)\n```\n\nThis script defines the `build_fp_tree` function that constructs the FP-Tree according to the given specifications. The example usage at the end demonstrates how to call the function with a list of transactions and a minimum support threshold."}
{"task_id": 336, "completion_id": 0, "completion": "To solve the given task, we need to implement the `linear_kernel` function that computes the linear kernel matrix for two sets of input vectors, `X` and `Y`. The function should handle both Python lists and NumPy arrays, and it should return a list of lists of floats representing the kernel matrix, rounded to 4 decimal places. If the input dimensions are incompatible, the function should return -1.\n\nHere's a step-by-step approach to implement the function:\n\n1. **Check Input Types and Convert to NumPy Arrays**: Ensure that both `X` and `Y` are NumPy arrays for easier manipulation. If `Y` is `None`, set `Y` to `X`.\n\n2. **Check Dimensions**: Verify that the number of columns in `X` and `Y` are the same. If not, return -1.\n\n3. **Compute the Kernel Matrix**: Use NumPy operations to compute the dot product between each pair of vectors from `X` and `Y`, and add the constant `c0`.\n\n4. **Round the Results**: Round the results to 4 decimal places.\n\n5. **Return the Result**: Return the kernel matrix as a list of lists of floats.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", Y: list[list[int | float]] | \"np.ndarray\" | None = None, c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    # Convert inputs to NumPy arrays\n    X = np.array(X, dtype=float)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y, dtype=float)\n    \n    # Check dimensions\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # Compute the kernel matrix\n    K = np.dot(X, Y.T) + c0\n    \n    # Round the results to 4 decimal places\n    K_rounded = np.round(K, decimals=4)\n    \n    # Convert back to list of lists\n    return K_rounded.tolist()\n\n# Example usage\nX = [[1, 2], [3, 4]]\nY = [[5, 6], [7, 8]]\nc0 = 1\nprint(linear_kernel(X, Y, c0))\n```\n\nThis script defines the `linear_kernel` function and includes an example usage. The function handles both Python lists and NumPy arrays, checks for compatible dimensions, computes the kernel matrix, rounds the results, and returns the matrix as a list of lists of floats."}
{"task_id": 340, "completion_id": 0, "completion": "To implement the Adam optimizer's single-step update, we need to follow the equations provided in the task description. The key steps are:\n\n1. Update the first moment estimate `m`.\n2. Update the second moment estimate `v`.\n3. Correct the bias in the first and second moment estimates.\n4. Update the parameter `\u03b8` using the corrected moment estimates.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n    \n    # Update the first moment estimate\n    m_t = beta1 * m + (1 - beta1) * grad\n    \n    # Update the second moment estimate\n    v_t = beta2 * v + (1 - beta2) * (grad ** 2)\n    \n    # Bias correction\n    m_t_hat = m_t / (1 - beta1 ** t)\n    v_t_hat = v_t / (1 - beta2 ** t)\n    \n    # Update the parameter\n    param_t = param - lr * m_t_hat / (np.sqrt(v_t_hat) + eps)\n    \n    # Convert to lists and round to 8 decimal places\n    updated_param = np.round(param_t.flatten(), 8).tolist()\n    new_m = np.round(m_t.flatten(), 8).tolist()\n    new_v = np.round(v_t.flatten(), 8).tolist()\n    \n    return (updated_param, new_m, new_v)\n```\n\nThis function takes the current parameter value, its gradient, the time step, and the previous moment estimates as inputs. It then performs the Adam update step and returns the updated parameter and moment estimates as lists rounded to 8 decimal places."}
{"task_id": 343, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                         rewards: list[float] | np.ndarray,\n                         retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # Calculate the number of samples to retain\n    num_retain = int(retain_prcnt * len(rewards))\n    \n    # Sort the rewards and get the indices of the top rewards\n    sorted_indices = np.argsort(rewards)[::-1][:num_retain]\n    \n    # Select the top theta_samples based on the sorted indices\n    elite_samples = theta_samples[sorted_indices]\n    \n    # Calculate the mean and variance of the elite samples\n    mean = np.mean(elite_samples, axis=0).tolist()\n    variance = np.var(elite_samples, axis=0).tolist()\n    \n    # Round the results to four decimal places\n    mean_rounded = [round(x, 4) for x in mean]\n    variance_rounded = [round(x, 4) for x in variance]\n    \n    return mean_rounded, variance_rounded\n\n# Example usage\ntheta_samples = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\nrewards = [10, 20, 30, 40]\nretain_prcnt = 0.5\nmean, variance = cross_entropy_update(theta_samples, rewards, retain_prcnt)\nprint(\"Mean:\", mean)\nprint(\"Variance:\", variance)\n```\n\nThis script defines the `cross_entropy_update` function that implements the core numerical step of the Cross-Entropy Method (CEM) for updating the sampling distribution based on the best-scoring parameter vectors. The function takes in the sampled parameter vectors, their corresponding rewards, and the fraction of top samples to retain. It then calculates and returns the mean and variance of the retained samples, rounded to four decimal places."}
{"task_id": 353, "completion_id": 0, "completion": "To solve the task, we need to follow these steps:\n\n1. Import the necessary modules: `math` for the logarithm function, `Counter` from `collections` to count the frequency of each label, and `numpy` for handling arrays.\n2. Define the function `entropy` that takes a sequence of labels as input.\n3. Check if the input is empty and return `0.0` if it is.\n4. Use `Counter` to count the frequency of each label in the input.\n5. Calculate the probability of each label by dividing its frequency by the total number of labels.\n6. Compute the entropy using the formula provided, taking care to handle the case where a label's probability is zero.\n7. Round the result to 5 decimal places and return it.\n\nHere is the complete Python script:\n\n```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    # Check if the input is empty\n    if not labels:\n        return 0.0\n    \n    # Count the frequency of each label\n    label_counts = Counter(labels)\n    total_labels = len(labels)\n    \n    # Calculate the entropy\n    entropy_value = 0.0\n    for count in label_counts.values():\n        probability = count / total_labels\n        if probability > 0:\n            entropy_value -= probability * math.log2(probability)\n    \n    # Round the result to 5 decimal places\n    return round(entropy_value, 5)\n\n# Example usage:\n# labels = [1, 1, 0, 0, 1, 2, 2, 2, 2, 0]\n# print(entropy(labels))  # Output should be the entropy of the given labels\n```\n\nThis script defines the `entropy` function that computes the Shannon entropy of a given sequence of class labels, following the steps outlined above."}
{"task_id": 354, "completion_id": 0, "completion": "To implement the 2-D convolution using the `im2col + GEMM` strategy, we need to follow these steps:\n\n1. **Padding**: Apply the specified padding to the input images.\n2. **Dilation**: Apply dilation to the kernels if specified.\n3. **Im2col**: Convert the input images into a matrix where each column represents a receptive field of the kernel.\n4. **GEMM**: Perform matrix multiplication between the im2col matrix and the flattened kernels.\n5. **Reshape**: Reshape the result back into the desired output shape.\n6. **Return**: Convert the final result to a Python list.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kernel_rows, kernel_cols, _, out_ch = W.shape\n\n    # Apply dilation to the kernel\n    if dilation > 0:\n        W = np.pad(W, ((0, dilation * (kernel_rows - 1)), (0, dilation * (kernel_cols - 1)), (0, 0), (0, 0)), mode='constant')\n\n    # Adjust kernel size after dilation\n    kernel_rows, kernel_cols = W.shape[0], W.shape[1]\n\n    # Calculate padding\n    if isinstance(pad, int):\n        pad = (pad, pad, pad, pad)\n    elif isinstance(pad, tuple) and len(pad) == 2:\n        pad = (pad[0], pad[0], pad[1], pad[1])\n    elif pad == 'same':\n        pad = ((kernel_rows - 1) // 2, (kernel_rows - 1) // 2, (kernel_cols - 1) // 2, (kernel_cols - 1) // 2)\n\n    # Apply padding to the input\n    X = np.pad(X, ((0, 0), (pad[0], pad[1]), (pad[2], pad[3]), (0, 0)), mode='constant')\n\n    # Calculate output dimensions\n    out_rows = (in_rows + pad[0] + pad[1] - kernel_rows) // stride + 1\n    out_cols = (in_cols + pad[2] + pad[3] - kernel_cols) // stride + 1\n\n    # Initialize the output array\n    output = np.zeros((n_ex, out_rows, out_cols, out_ch))\n\n    # Convert the input images to columns\n    im2col = np.zeros((n_ex, out_rows * out_cols, kernel_rows * kernel_cols * in_ch))\n    for i in range(out_rows):\n        for j in range(out_cols):\n            im2col[:, i * out_cols + j, :] = X[:, i * stride:i * stride + kernel_rows, j * stride:j * stride + kernel_cols, :].reshape(n_ex, -1)\n\n    # Flatten the kernels\n    W_col = W.reshape(-1, out_ch)\n\n    # Perform the matrix multiplication\n    output = np.dot(im2col, W_col).reshape(n_ex, out_rows, out_cols, out_ch)\n\n    # Convert the output to a Python list\n    return output.tolist()\n```\n\nThis function performs the convolution using the `im2col + GEMM` strategy, which is efficient for this type of operation. The padding and dilation are handled appropriately, and the final result is returned as a Python list."}
{"task_id": 355, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # Step 1: Standardize the data by subtracting the feature-wise mean\n    centered_data = data - np.mean(data, axis=0)\n    \n    # Step 2: Obtain the principal directions (eigen-vectors)\n    if solver == \"svd\":\n        _, _, Vt = np.linalg.svd(centered_data, full_matrices=False)\n        eigenvectors = Vt\n    elif solver == \"eigen\":\n        cov_matrix = np.cov(centered_data, rowvar=False, ddof=1)\n        eigenvalues, eigenvectors = np.linalg.eigh(cov_matrix)\n        # Sort eigenvectors by eigenvalues in descending order\n        idx = eigenvalues.argsort()[::-1]\n        eigenvectors = eigenvectors[:, idx]\n    else:\n        raise ValueError(\"Solver must be either 'svd' or 'eigen'\")\n    \n    # Step 3: Keep the first n_components of them\n    eigenvectors = eigenvectors[:n_components]\n    \n    # Step 4: Make the sign of every kept direction deterministic\n    for i in range(n_components):\n        if eigenvectors[i][0] < 0:\n            eigenvectors[i] *= -1\n    \n    # Step 5: Project the centred data onto the retained directions\n    scores = np.dot(centered_data, eigenvectors.T)\n    \n    # Step 6: Calculate explained variance ratio\n    if solver == \"svd\":\n        explained_variance = np.sum(centered_data**2, axis=0) / (centered_data.shape[0] - 1)\n    else:\n        explained_variance = eigenvalues[idx]\n    total_variance = np.sum(explained_variance)\n    explained_variance_ratio = (explained_variance[:n_components] / total_variance).tolist()\n    \n    # Round the final results\n    scores = np.round(scores, 4).tolist()\n    explained_variance_ratio = [round(ratio, 4) for ratio in explained_variance_ratio]\n    \n    return scores, explained_variance_ratio\n```\n\nThis script implements the PCA with the specified constraints and requirements. It uses either SVD or eigen-decomposition based on the solver parameter and ensures the sign of the principal components is deterministic. The final results are rounded to the nearest 4th decimal as required."}
{"task_id": 356, "completion_id": 0, "completion": "To solve the given task, we need to implement the `leaf_predict` function that takes a `Leaf` object and a boolean `classifier` as input. The function should return the prediction stored in the leaf. If `classifier` is `True`, the function should return the index of the class with the highest probability. If `classifier` is `False`, the function should return the scalar value stored in the leaf.\n\nHere's the step-by-step implementation:\n\n1. Define the `Leaf` class with an `__init__` method that initializes the `value` attribute.\n2. Define the `leaf_predict` function that checks the `classifier` flag and returns the appropriate prediction.\n\nHere is the complete Python script:\n\n```python\nimport numpy as np\n\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # For classification, return the index of the class with the highest probability\n        return np.argmax(leaf.value)\n    else:\n        # For regression, return the scalar value stored in the leaf\n        return leaf.value\n\n# Example usage:\n# Classification leaf\nclassification_leaf = Leaf([0.1, 0.3, 0.6])\nprint(leaf_predict(classification_leaf, True))  # Output: 2\n\n# Regression leaf\nregression_leaf = Leaf(42.5)\nprint(leaf_predict(regression_leaf, False))  # Output: 42.5\n```\n\nThis script defines the `Leaf` class and the `leaf_predict` function as required. The `leaf_predict` function uses `numpy.argmax` to find the index of the highest probability in the `value` list for classification tasks and simply returns the `value` for regression tasks."}
{"task_id": 357, "completion_id": 0, "completion": "To implement the K-Means clustering algorithm from scratch, we need to follow the steps outlined in the task description. Here's a step-by-step breakdown of the implementation:\n\n1. **Initialization**: The centroids are initialized with the first `K` samples from the data.\n2. **Iteration**: For each iteration, we:\n   - Assign each sample to the nearest centroid.\n   - Recalculate the centroids as the mean of the samples assigned to each centroid.\n   - Check for convergence by comparing the new centroids with the old ones.\n3. **Termination**: The process stops either when the centroids do not change significantly (within a tolerance) or when the maximum number of iterations is reached.\n4. **Output**: The final centroids are sorted lexicographically and rounded to four decimal places.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    # Initialize centroids with the first K samples\n    centroids = data[:K].copy()\n    \n    for _ in range(max_iters):\n        # Assign each sample to the nearest centroid\n        distances = np.linalg.norm(data[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n        \n        # Recompute centroids\n        new_centroids = np.array([data[labels == k].mean(axis=0) if np.any(labels == k) else centroids[k] for k in range(K)])\n        \n        # Check for convergence\n        if np.all(np.abs(new_centroids - centroids) < 1e-6):\n            break\n        \n        centroids = new_centroids\n    \n    # Sort centroids lexicographically and round to 4 decimal places\n    sorted_centroids = np.round(np.sort(centroids, axis=0), decimals=4)\n    \n    # Convert to list of lists\n    return sorted_centroids.tolist()\n\n# Example usage\ndata = np.array([[1, 1],\n                 [1, 2],\n                 [2, 1],\n                 [8, 8],\n                 [9, 8],\n                 [8, 9]])\nK = 2\nprint(kmeans(data, K))\n```\n\nThis script defines the `kmeans` function that implements the K-Means clustering algorithm as described. It initializes the centroids, iteratively assigns samples to the nearest centroid, recalculates the centroids, and checks for convergence. Finally, it sorts the centroids and rounds them to four decimal places before returning them."}
{"task_id": 362, "completion_id": 0, "completion": "To solve the given task, we will follow the steps outlined in the description. We will use the NumPy library to handle the matrix operations efficiently. Here is the step-by-step approach:\n\n1. Convert the input data to a NumPy array of floats.\n2. Compute the sum of each row.\n3. Check if any row sums to 0. If so, return -1.\n4. Normalize each row by dividing each element by the row's sum.\n5. Round the elements to 4 decimal places.\n6. Convert the NumPy array back to a Python list of lists and return it.\n\nHere is the complete Python script:\n\n```python\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | np.ndarray) -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert the input data to a NumPy array of floats\n    matrix = np.array(data, dtype=float)\n    \n    # Compute the sum of each row\n    row_sums = matrix.sum(axis=1)\n    \n    # Check if any row sums to 0\n    if np.any(row_sums == 0):\n        return -1\n    \n    # Normalize each row\n    matrix /= row_sums[:, np.newaxis]\n    \n    # Round the elements to 4 decimal places\n    matrix = np.round(matrix, decimals=4)\n    \n    # Convert the NumPy array back to a Python list of lists\n    return matrix.tolist()\n\n# Example usage:\ndata = [[1, 2, 3], [4, 5, 6], [0, 0, 0]]\nresult = row_stochastic_matrix(data)\nprint(result)  # Should return -1 because the last row sums to 0\n```\n\nThis script defines the function `row_stochastic_matrix` that performs the required operations and handles the case where normalization is impossible due to a row summing to 0."}
{"task_id": 363, "completion_id": 0, "completion": "To solve the given task, we need to implement the `is_continuous` function that checks if the action and observation spaces of an environment are continuous. The function should handle both simple and composite spaces (Tuple and Dict). Here's a step-by-step approach to implement the function:\n\n1. **Check if the action space is continuous**:\n   - If `tuple_action` is `True`, we need to check if all sub-spaces of the action space are instances of `Box`.\n   - If `tuple_action` is `False`, we simply check if the action space itself is an instance of `Box`.\n\n2. **Check if the observation space is continuous**:\n   - If `tuple_obs` is `True`, we need to check if all sub-spaces of the observation space are instances of `Box`.\n   - If `tuple_obs` is `False`, we simply check if the observation space itself is an instance of `Box`.\n\n3. **Helper function to check if all sub-spaces are continuous**:\n   - We can create a helper function that recursively checks if all sub-spaces in a `Tuple` or `Dict` are instances of `Box`.\n\nHere is the complete implementation:\n\n```python\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool) -> Tuple[bool, bool]:\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    def all_boxes(space: Space) -> bool:\n        if isinstance(space, Box):\n            return True\n        elif isinstance(space, Tuple):\n            return all(all_boxes(sub_space) for sub_space in space.spaces)\n        elif isinstance(space, Dict):\n            return all(all_boxes(sub_space) for sub_space in space.spaces.values())\n        return False\n\n    cont_action = all_boxes(env.action_space) if tuple_action else isinstance(env.action_space, Box)\n    cont_obs = all_boxes(env.observation_space) if tuple_obs else isinstance(env.observation_space, Box)\n\n    return (cont_action, cont_obs)\n\n# Example usage:\naction_space = Tuple([Box(0.0, 1.0, (2,)), Box(-1.0, 1.0, (3,))])\nobservation_space = Dict({'position': Box(-10.0, 10.0, (2,)), 'velocity': Box(-1.0, 1.0, (2,))})\nenv = Env(action_space, observation_space)\nprint(is_continuous(env, True, True))  # Output: (True, True)\n```\n\nThis script defines the `is_continuous` function and includes an example usage that demonstrates how to check if the action and observation spaces are continuous. The helper function `all_boxes` is used to recursively check if all sub-spaces in a composite space are instances of `Box`."}
{"task_id": 369, "completion_id": 0, "completion": "To solve the given task, we need to implement the `gradient_boosting_predict` function that aggregates the outputs of Gradient Boosting trees. The function will follow the rules specified for both regression and classification tasks. We will use NumPy for vectorized operations to ensure efficiency.\n\nHere is the step-by-step implementation:\n\n1. **Initialize the running prediction**: Start with a zero array of the same shape as the first update array.\n2. **Aggregate the updates**: For each update, subtract the scaled update from the running prediction.\n3. **Finalize the prediction**:\n   - For regression, return the running prediction rounded to 4 decimal places.\n   - For classification, apply the softmax function to convert logits to probabilities, then use `argmax` to get the predicted class labels.\n\nLet's write the code:\n\n```python\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    # Initialize the running prediction\n    running_pred = np.zeros_like(updates[0])\n    \n    # Aggregate the updates\n    for update in updates:\n        running_pred -= learning_rate * update\n    \n    # Finalize the prediction\n    if regression:\n        return np.round(running_pred, 4)\n    else:\n        # Apply softmax to convert logits to probabilities\n        exp_scores = np.exp(running_pred - np.max(running_pred, axis=1, keepdims=True))\n        probabilities = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)\n        # Return the predicted class labels\n        return np.argmax(probabilities, axis=1)\n\n# Example usage:\n# For regression\nupdates_regression = [np.array([1.0, 2.0, 3.0]), np.array([0.5, 1.5, 2.5])]\nlearning_rate = 0.1\nregression = True\nprint(gradient_boosting_predict(updates_regression, learning_rate, regression))\n\n# For classification\nupdates_classification = [np.array([[1.0, 2.0], [2.0, 1.0]]), np.array([[0.5, 1.5], [1.5, 0.5]])]\nlearning_rate = 0.1\nregression = False\nprint(gradient_boosting_predict(updates_classification, learning_rate, regression))\n```\n\nThis script defines the `gradient_boosting_predict` function and provides example usage for both regression and classification tasks. The function correctly handles the aggregation of updates and applies the necessary transformations based on the type of problem (regression or classification)."}
{"task_id": 371, "completion_id": 0, "completion": "To implement the 1-D cross-correlation function with support for batches, multiple input/output channels, padding, stride, and dilation, we need to follow these steps:\n\n1. **Calculate the effective kernel width** considering the dilation.\n2. **Determine the padding** based on the input type (integer, tuple, or \"same\").\n3. **Apply padding** to the input signals.\n4. **Compute the output length** based on the padded input length, stride, and effective kernel width.\n5. **Perform the cross-correlation** for each example and channel combination.\n6. **Return the result** as a nested Python list.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, _, out_channels = W.shape\n    effective_kernel_width = kernel_width + (kernel_width - 1) * dilation\n\n    # Calculate padding\n    if isinstance(pad, int):\n        p_left = p_right = pad\n    elif isinstance(pad, tuple):\n        p_left, p_right = pad\n    elif pad == \"same\":\n        out_len = int(np.ceil(signal_length / stride))\n        total_pad = max(0, (out_len - 1) * stride + effective_kernel_width - signal_length)\n        p_left = total_pad // 2\n        p_right = total_pad - p_left\n    else:\n        raise ValueError(\"Invalid padding type\")\n\n    # Apply padding\n    X_padded = np.pad(X, ((0, 0), (p_left, p_right), (0, 0)), mode='constant')\n\n    # Calculate output length\n    output_length = (signal_length + p_left + p_right - effective_kernel_width) // stride + 1\n\n    # Initialize output volume\n    output = np.zeros((n_examples, output_length, out_channels))\n\n    # Perform cross-correlation\n    for i in range(n_examples):\n        for j in range(out_channels):\n            for k in range(output_length):\n                start = k * stride\n                end = start + effective_kernel_width\n                for l in range(in_channels):\n                    output[i, k, j] += np.sum(X_padded[i, start:end:dilation+1, l] * W[:, l, j])\n\n    return output.tolist()\n\n# Example usage\nX = np.random.rand(2, 10, 3)  # 2 examples, 10 signal length, 3 input channels\nW = np.random.rand(3, 3, 2)   # 3 kernel width, 3 input channels, 2 output channels\nstride = 2\npad = \"same\"\ndilation = 1\n\nresult = conv1D(X, W, stride, pad, dilation)\nprint(result)\n```\n\nThis script defines the `conv1D` function that performs the 1-D cross-correlation with the specified parameters and returns the result as a nested Python list. The example usage at the end demonstrates how to call the function with random input data."}
{"task_id": 373, "completion_id": 0, "completion": "To solve the task of calculating the Gini impurity, we will follow these steps:\n\n1. Check if the input list `y` is empty. If it is, return `0.0` as specified.\n2. Calculate the total number of samples `N`.\n3. Determine the number of distinct classes `C` and the count of each class `n_c`.\n4. Calculate the relative frequency of each class `p_c`.\n5. Compute the Gini impurity using the formula provided.\n6. Return the Gini impurity rounded to 4 decimal places.\n\nHere is the Python script that implements the above steps:\n\n```python\nimport numpy as np\n\ndef gini(y: list[int] | np.ndarray) -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    if len(y) == 0:\n        return 0.0\n    \n    # Convert to numpy array for easier manipulation\n    y = np.array(y)\n    \n    # Calculate the total number of samples\n    N = len(y)\n    \n    # Calculate the unique classes and their counts\n    unique_classes, counts = np.unique(y, return_counts=True)\n    \n    # Calculate the relative frequency of each class\n    p_c = counts / N\n    \n    # Calculate the Gini impurity\n    gini_impurity = 1 - np.sum(p_c ** 2)\n    \n    # Return the Gini impurity rounded to 4 decimal places\n    return round(gini_impurity, 4)\n\n# Example usage:\n# y = [1, 1, 2, 2, 3, 3, 3]\n# print(gini(y))  # Output should be the Gini impurity of the given list\n```\n\nThis script defines the `gini` function that calculates the Gini impurity of a given list or NumPy array of integer labels. It uses NumPy for efficient computation of unique elements and their counts, and then applies the Gini impurity formula."}
{"task_id": 374, "completion_id": 0, "completion": "To solve the given task, we need to implement a function that performs batch gradient descent to train a multiple linear regression model. The function will take as input a feature matrix `X`, a target vector `y`, a learning rate, and the number of iterations. It will return the learned parameters (weights and bias) after performing the specified number of gradient descent steps.\n\nHere's a step-by-step breakdown of the implementation:\n\n1. **Initialization**: Initialize the weight vector `\u03b8` and the bias `b` to zeros.\n2. **Gradient Descent Loop**: For each iteration, compute the predictions `\u0177`, calculate the gradients `dw` and `db`, and update the weights and bias.\n3. **Return the Parameters**: After completing the iterations, return the learned parameters rounded to 4 decimal places.\n\nLet's write the Python code for this:\n\n```python\nimport numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Parameters:\n    X (np.ndarray): Feature matrix of shape (m, n).\n    y (np.ndarray): Target vector of shape (m,).\n    learning_rate (float): Learning rate for gradient descent.\n    n_iterations (int): Number of iterations for gradient descent.\n\n    Returns:\n    tuple[list[float], float]: A tuple containing the learned weights and bias.\n    \"\"\"\n    # Check if the input data are consistent\n    if X.shape[0] != y.shape[0]:\n        return -1\n    \n    m, n = X.shape\n    theta = np.zeros(n)\n    b = 0.0\n    \n    for _ in range(n_iterations):\n        y_pred = np.dot(X, theta) + b\n        error = y_pred - y\n        \n        dw = 2/m * np.dot(X.T, error)\n        db = 2/m * np.sum(error)\n        \n        theta -= learning_rate * dw\n        b -= learning_rate * db\n    \n    # Round the parameters to 4 decimal places\n    theta_rounded = [round(w, 4) for w in theta]\n    b_rounded = round(b, 4)\n    \n    return (theta_rounded, b_rounded)\n\n# Example usage:\n# X = np.array([[1, 1], [1, 2], [2, 2], [2, 3]])\n# y = np.array([6, 8, 9, 11])\n# weights, bias = linear_regression_gd(X, y)\n# print(\"Weights:\", weights)\n# print(\"Bias:\", bias)\n```\n\nThis function first checks if the number of samples in `X` and `y` are consistent. If not, it returns `-1`. Otherwise, it initializes the parameters, performs the gradient descent updates for the specified number of iterations, and finally returns the learned parameters rounded to 4 decimal places."}
{"task_id": 376, "completion_id": 0, "completion": "To solve the given task, we need to follow these steps:\n\n1. **Check if the matrix is square**: A matrix is square if the number of rows is equal to the number of columns.\n2. **Check if the matrix is symmetric**: A matrix is symmetric if it is equal to its transpose. We can use NumPy's `allclose` function to compare the matrix with its transpose, considering a tolerance for floating-point precision.\n\nHere is the Python script that accomplishes this:\n\n```python\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Convert the list of lists to a NumPy array\n    X_np = np.array(X)\n    \n    # Check if the matrix is square\n    if X_np.shape[0] != X_np.shape[1]:\n        return False\n    \n    # Check if the matrix is symmetric\n    return np.allclose(X_np, X_np.T, atol=1e-8)\n\n# Example usage:\n# matrix = [[1, 2.00000001], [2, 1]]\n# print(is_symmetric(matrix))  # Output: True\n```\n\nThis script defines the `is_symmetric` function which first converts the input list of lists into a NumPy array. It then checks if the matrix is square. If it is, the function proceeds to check if the matrix is symmetric by comparing it to its transpose using `np.allclose` with a tolerance of `1e-8`."}
{"task_id": 377, "completion_id": 0, "completion": "To solve the given task, we need to follow these steps:\n\n1. **Check the Input Validity**: Ensure that the labels in the `y` list are either 0 or 1. If any other value is found, return -1.\n2. **Convert Labels**: Convert the binary labels (0 or 1) to the set {-1, 1} using the formula `y' = 2y - 1`.\n3. **Calculate the Negative Gradient**: For each sample, compute the negative gradient using the formula `g\u1d62 = y\u2032\u1d62 / (1 + exp(y\u2032\u1d62 f\u1d62))`.\n4. **Round the Results**: Round each computed gradient to four decimal places.\n5. **Return the Result**: Return the list of negative gradients.\n\nHere is the Python script that implements the above steps:\n\n```python\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    Computes the negative gradient for the logistic loss function used in Gradient Boosting.\n    \n    Parameters:\n    y (list): A list of binary class labels (0 or 1).\n    f (list): A list of current prediction scores (floats).\n    \n    Returns:\n    list: A list of negative gradients rounded to four decimal places.\n    If the label array contains values other than 0 or 1, returns -1.\n    \"\"\"\n    # Check if all labels are either 0 or 1\n    if not all(label in [0, 1] for label in y):\n        return -1\n    \n    # Convert labels to {-1, 1}\n    y_prime = [2 * label - 1 for label in y]\n    \n    # Calculate the negative gradient\n    gradients = [y_prime_i / (1 + np.exp(y_prime_i * f_i)) for y_prime_i, f_i in zip(y_prime, f)]\n    \n    # Round the gradients to four decimal places\n    rounded_gradients = [round(gradient, 4) for gradient in gradients]\n    \n    return rounded_gradients\n```\n\nThis script defines the function `logistic_negative_gradient` which takes two lists as input: `y` for the binary labels and `f` for the current prediction scores. It first checks if the labels are valid (0 or 1), then converts them to {-1, 1}, computes the negative gradient for each sample, rounds the results, and finally returns the list of rounded gradients. If the labels are not valid, it returns -1."}
{"task_id": 380, "completion_id": 0, "completion": "To implement the SELU activation function and its derivatives, we will follow these steps:\n\n1. Define the SELU function using the given formula.\n2. Define the first derivative of SELU.\n3. Define the second derivative of SELU.\n4. Ensure the function works for scalars, 1-D arrays, and multi-D arrays.\n5. Round the results to 4 decimal places and convert to Python lists.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    # Constants from the original SELU paper\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n\n    # Convert input to numpy array if it's not already\n    x = np.array(x)\n\n    if order == 0:\n        # SELU(x) = scale * ELU(x, alpha)\n        elu = np.where(x > 0, x, alpha * (np.exp(x) - 1))\n        result = scale * elu\n    elif order == 1:\n        # First derivative of SELU\n        first_derivative = np.where(x > 0, scale, scale * alpha * np.exp(x))\n        result = first_derivative\n    elif order == 2:\n        # Second derivative of SELU\n        second_derivative = np.where(x > 0, 0, scale * alpha * np.exp(x))\n        result = second_derivative\n    else:\n        raise ValueError(\"Order must be 0, 1, or 2\")\n\n    # Round to 4 decimal places and convert to list\n    result = np.round(result, 4).tolist()\n\n    return result\n```\n\nThis function `selu` takes an input `x` and an integer `order` to compute the SELU activation or its derivatives. It handles scalar, 1-D, and multi-D inputs by converting them to NumPy arrays and applying the appropriate mathematical operations. The results are rounded to 4 decimal places and returned as Python lists."}
{"task_id": 387, "completion_id": 0, "completion": "To implement the described Gradient Boosting Regressor with one-dimensional stumps, we will follow the steps outlined in the task description. We will use `numpy` for numerical operations and ensure that the code is self-contained and follows the specified constraints.\n\nHere is the implementation:\n\n```python\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(x)\n    predictions = np.full(n_samples, np.mean(y))\n    \n    for _ in range(n_estimators):\n        residuals = y - predictions\n        \n        # Sort the samples by their x value\n        sorted_indices = np.argsort(x)\n        sorted_x = x[sorted_indices]\n        sorted_residuals = residuals[sorted_indices]\n        \n        # Evaluate every possible split\n        best_split = None\n        best_error = float('inf')\n        for i in range(1, n_samples):\n            if sorted_x[i] != sorted_x[i-1]:\n                split_point = (sorted_x[i] + sorted_x[i-1]) / 2\n                left_indices = sorted_indices[x <= split_point]\n                right_indices = sorted_indices[x > split_point]\n                \n                if len(left_indices) > 0 and len(right_indices) > 0:\n                    left_mean = np.mean(sorted_residuals[:i])\n                    right_mean = np.mean(sorted_residuals[i:])\n                    error = np.sum((sorted_residuals[:i] - left_mean) ** 2) + np.sum((sorted_residuals[i:] - right_mean) ** 2)\n                    \n                    if error < best_error:\n                        best_error = error\n                        best_split = (split_point, left_mean, right_mean)\n        \n        # If no valid split found, predict the global mean residual\n        if best_split is None:\n            stump_prediction = np.full(n_samples, np.mean(residuals))\n        else:\n            split_point, left_mean, right_mean = best_split\n            stump_prediction = np.where(x <= split_point, left_mean, right_mean)\n        \n        # Update the running prediction\n        predictions += learning_rate * stump_prediction\n    \n    return np.round(predictions, 4).tolist()\n\n# Example usage:\nx = [1.0, 2.0, 3.0, 4.0, 5.0]\ny = [1.1, 2.2, 3.3, 4.4, 5.5]\nn_estimators = 100\nlearning_rate = 0.1\npredictions = gradient_boosting_1d(x, y, n_estimators, learning_rate)\nprint(predictions)\n```\n\nThis script defines the `gradient_boosting_1d` function that implements the gradient boosting algorithm with one-dimensional stumps. It sorts the samples by their feature values, evaluates all possible splits, and updates the predictions based on the residuals and the learning rate. The final predictions are rounded to four decimal places and returned as a list."}
{"task_id": 394, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    # Initialize running average if it is None\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n    \n    # Update running average of squared gradients\n    Eg = rho * Eg + (1 - rho) * np.square(grad)\n    \n    # Update parameters\n    w = w - (learning_rate * grad) / (np.sqrt(Eg) + 1e-8)\n    \n    # Convert to lists and round to 4 decimal places\n    w_next = np.round(w, decimals=4).tolist()\n    Eg_next = np.round(Eg, decimals=4).tolist()\n    \n    return w_next, Eg_next\n\n# Example usage\nw = np.array([1.0, 2.0, 3.0])\ngrad = np.array([0.1, 0.2, 0.3])\nEg = np.array([0.01, 0.02, 0.03])\n\nw_next, Eg_next = rmsprop_update(w, grad, Eg)\nprint(\"Updated parameters:\", w_next)\nprint(\"Updated running average:\", Eg_next)\n```\n\nThis script defines the `rmsprop_update` function which performs one update step of the RMSprop optimizer. It initializes the running average of squared gradients if it is not provided, updates the parameters according to the RMSprop algorithm, and returns the updated parameters and running average as lists rounded to four decimal places."}
{"task_id": 398, "completion_id": 0, "completion": "To implement the ELU activation function and its gradient, we will follow these steps:\n\n1. Import the necessary libraries.\n2. Define the `elu` function with the specified parameters.\n3. Inside the function, check if the input is a list or a NumPy array and convert it to a NumPy array if necessary.\n4. Apply the ELU function or its derivative based on the `derivative` flag.\n5. Round the results to 4 decimal places and return them as a list.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    # Convert input to NumPy array if it's a list\n    x = np.array(x)\n    \n    if derivative:\n        # Compute the derivative of ELU\n        result = np.where(x >= 0, 1, alpha * np.exp(x) + alpha)\n    else:\n        # Compute the ELU activation\n        result = np.where(x >= 0, x, alpha * (np.exp(x) - 1))\n    \n    # Round the result to 4 decimal places and convert to list\n    return [round(float(num), 4) for num in result]\n\n# Example usage:\nx = [-1.0, 0.0, 1.0]\nalpha = 0.1\nprint(elu(x, alpha, derivative=False))  # Activation\nprint(elu(x, alpha, derivative=True))   # Gradient\n```\n\nThis script defines the `elu` function which computes the ELU activation or its derivative based on the `derivative` flag. The function handles both list and NumPy array inputs, applies the appropriate computation, rounds the results to 4 decimal places, and returns them as a list."}
{"task_id": 411, "completion_id": 0, "completion": "To solve the given task, we need to implement the `env_stats` function that will analyze the `actions` and `observations` lists and return a dictionary with the required statistics. We will follow these steps:\n\n1. Check if the elements in the `actions` and `observations` lists are tuples or lists (indicating multidimensional data).\n2. Determine if the data is multidimensional by checking the length of the elements.\n3. Check if the data is continuous by looking for non-integer floats.\n4. Calculate the number of unique values per dimension.\n5. Determine the dimensionality of the action and observation spaces.\n6. Collect the unique values for each dimension.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    def is_iterable(x):\n        return isinstance(x, (list, tuple, np.ndarray))\n    \n    def is_continuous(x):\n        return any(isinstance(i, float) and not i.is_integer() for i in x)\n    \n    def unique_values_per_dim(x):\n        if is_iterable(x[0]):\n            return [len(set(i)) for i in zip(*x)]\n        else:\n            return [len(set(x))]\n    \n    def unique_ids_per_dim(x):\n        if is_iterable(x[0]):\n            return [sorted(set(i)) for i in zip(*x)]\n        else:\n            return [sorted(set(x))]\n    \n    tuple_actions = any(is_iterable(a) for a in actions)\n    tuple_observations = any(is_iterable(o) for o in observations)\n    \n    multidim_actions = tuple_actions and len(actions[0]) > 1 if tuple_actions else False\n    multidim_observations = tuple_observations and len(observations[0]) > 1 if tuple_observations else False\n    \n    continuous_actions = is_continuous(actions) if tuple_actions else any(isinstance(a, float) and not a.is_integer() for a in actions)\n    continuous_observations = is_continuous(observations) if tuple_observations else any(isinstance(o, float) and not o.is_integer() for o in observations)\n    \n    n_actions_per_dim = unique_values_per_dim(actions)\n    n_obs_per_dim = unique_values_per_dim(observations)\n    \n    action_dim = len(actions[0]) if tuple_actions else 1\n    obs_dim = len(observations[0]) if tuple_observations else 1\n    \n    action_ids = unique_ids_per_dim(actions)\n    obs_ids = unique_ids_per_dim(observations)\n    \n    return {\n        'tuple_actions': tuple_actions,\n        'tuple_observations': tuple_observations,\n        'multidim_actions': multidim_actions,\n        'multidim_observations': multidim_observations,\n        'continuous_actions': continuous_actions,\n        'continuous_observations': continuous_observations,\n        'n_actions_per_dim': n_actions_per_dim,\n        'action_dim': action_dim,\n        'n_obs_per_dim': n_obs_per_dim,\n        'obs_dim': obs_dim,\n        'action_ids': action_ids,\n        'obs_ids': obs_ids\n    }\n\n# Example usage\nactions = [(0, 1), (1, 0), (1, 1)]\nobservations = [10.0, 11.5, 12.0]\nprint(env_stats(actions, observations))\n```\n\nThis script defines the `env_stats` function and includes an example usage that matches the provided example. The function checks for the required conditions and calculates the necessary statistics, returning them in a dictionary as specified."}
{"task_id": 413, "completion_id": 0, "completion": "To implement a simplified Gradient Boosting Decision Tree (GBDT) regressor from scratch, we need to follow these steps:\n\n1. **Initial Prediction**: Start with an initial prediction equal to the mean of the training targets.\n2. **Boosting Iterations**: For each boosting iteration, compute the residuals (negative gradients of the squared-error loss), fit a CART regression tree to those residuals, and update the running prediction by adding the tree\u2019s output multiplied by the learning rate.\n3. **Tree Construction**: Implement a binary-splitting CART regression tree that uses mean-squared-error as the split criterion and stops growing when the maximum depth is reached or no further reduction in error is possible.\n4. **Prediction**: After completing the boosting iterations, return the final prediction for every sample in `X_test`.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\ndef gbdt_regression(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_estimators: int = 10, learning_rate: float = 0.1, max_depth: int = 3) -> list[float]:\n    \"\"\"Gradient Boosting Decision Tree (GBDT) regressor.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        2-D array with shape (n_samples, n_features) containing the training\n        features.\n    y_train : np.ndarray\n        1-D array of length n_samples containing the training targets.\n    X_test : np.ndarray\n        2-D array with shape (m_samples, n_features) containing the test\n        features to predict.\n    n_estimators : int, default=10\n        Number of boosting iterations.\n    learning_rate : float, default=0.1\n        Shrinkage factor applied to each tree\u2019s prediction.\n    max_depth : int, default=3\n        Maximum depth of every individual regression tree.\n\n    Returns\n    -------\n    list[float]\n        Predictions for every sample in *X_test*, rounded to 4 decimal places.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    y_pred = np.full_like(y_train, np.mean(y_train))\n    predictions = np.zeros(X_test.shape[0])\n\n    for _ in range(n_estimators):\n        residuals = y_train - y_pred\n        tree = build_tree(X_train, residuals, max_depth=max_depth)\n        y_pred += learning_rate * predict_tree(X_train, tree)\n        predictions += learning_rate * predict_tree(X_test, tree)\n\n    return [round(float(pred), 4) for pred in predictions]\n\ndef build_tree(X, y, depth=0, max_depth=3):\n    if depth == max_depth or len(np.unique(y)) == 1:\n        return np.mean(y)\n    \n    best_split = find_best_split(X, y)\n    if best_split is None:\n        return np.mean(y)\n    \n    left_mask = X[:, best_split['feature']] <= best_split['threshold']\n    right_mask = ~left_mask\n    \n    left_tree = build_tree(X[left_mask], y[left_mask], depth + 1, max_depth)\n    right_tree = build_tree(X[right_mask], y[right_mask], depth + 1, max_depth)\n    \n    return {'feature': best_split['feature'], 'threshold': best_split['threshold'], 'left': left_tree, 'right': right_tree}\n\ndef find_best_split(X, y):\n    best_split = None\n    best_mse = np.inf\n    for feature in range(X.shape[1]):\n        thresholds = np.unique(X[:, feature])\n        for threshold in thresholds:\n            left_mask = X[:, feature] <= threshold\n            right_mask = ~left_mask\n            if np.sum(left_mask) == 0 or np.sum(right_mask) == 0:\n                continue\n            mse = np.mean((y[left_mask] - np.mean(y[left_mask]))**2) + np.mean((y[right_mask] - np.mean(y[right_mask]))**2)\n            if mse < best_mse:\n                best_mse = mse\n                best_split = {'feature': feature, 'threshold': threshold}\n    return best_split\n\ndef predict_tree(X, tree):\n    if isinstance(tree, float):\n        return np.full(X.shape[0], tree)\n    \n    left_mask = X[:, tree['feature']] <= tree['threshold']\n    right_mask = ~left_mask\n    \n    predictions = np.zeros(X.shape[0])\n    predictions[left_mask] = predict_tree(X[left_mask], tree['left'])\n    predictions[right_mask] = predict_tree(X[right_mask], tree['right'])\n    \n    return predictions\n```\n\nThis script defines a simplified GBDT regressor that fits a series of decision trees to the residuals of the previous predictions. Each tree is a binary CART tree that splits based on the feature and threshold that minimize the mean squared error. The final predictions are the sum of the predictions from each tree, scaled by the learning rate, and rounded to four decimal places."}
{"task_id": 416, "completion_id": 0, "completion": "To implement the multivariate Gaussian PDF, we need to follow these steps:\n\n1. **Check the dimensions of the input data**: Ensure that the input data `X` is in the correct shape and that the mean and covariance matrix are compatible with the data.\n2. **Calculate the determinant and inverse of the covariance matrix**: These are required for the normalization factor and the exponent in the PDF formula.\n3. **Compute the normalization factor**: This is the term \\(\\frac{1}{\\sqrt{(2\\pi)^d\\det(\\Sigma)}}\\).\n4. **Calculate the exponent term**: This involves computing the Mahalanobis distance squared, \\((x-\\mu)^\\top\\Sigma^{-1}(x-\\mu)\\).\n5. **Compute the PDF values**: Multiply the normalization factor by the exponential of the negative half of the exponent term.\n6. **Return the results**: Ensure the results are rounded to four decimal places.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    Computes the multivariate Gaussian probability density function (PDF) for a given set of data points.\n    \n    Parameters:\n    X (np.ndarray): A NumPy array of shape (n_samples, n_features) containing the data points.\n    mean (np.ndarray): The mean vector of the distribution.\n    cov (np.ndarray): The covariance matrix of the distribution.\n    \n    Returns:\n    list: A list of PDF values for each data point in X, rounded to 4 decimal places.\n    \"\"\"\n    # Ensure X is a 2D array\n    if X.ndim == 1:\n        X = X[:, np.newaxis]\n    \n    n_samples, n_features = X.shape\n    assert len(mean) == n_features, \"Mean vector length does not match the number of features.\"\n    assert cov.shape == (n_features, n_features), \"Covariance matrix shape does not match the number of features.\"\n    \n    # Calculate the determinant and inverse of the covariance matrix\n    cov_det = np.linalg.det(cov)\n    cov_inv = np.linalg.inv(cov)\n    \n    # Compute the normalization factor\n    norm_factor = 1.0 / np.sqrt((2 * np.pi) ** n_features * cov_det)\n    \n    # Initialize the list to store PDF values\n    pdf_values = []\n    \n    # Compute the PDF for each data point\n    for x in X:\n        # Compute the exponent term\n        diff = x - mean\n        exponent = -0.5 * np.dot(np.dot(diff, cov_inv), diff)\n        \n        # Compute the PDF value\n        pdf_value = norm_factor * np.exp(exponent)\n        \n        # Append the PDF value to the list, rounded to 4 decimal places\n        pdf_values.append(round(pdf_value, 4))\n    \n    return pdf_values\n```\n\nThis function takes the data points `X`, the mean vector `mean`, and the covariance matrix `cov` as inputs and returns a list of PDF values for each data point in `X`, rounded to four decimal places."}
{"task_id": 419, "completion_id": 0, "completion": "To solve the given task, we will follow the steps outlined in the description. We will implement the Bayesian linear regression with a conjugate Gaussian prior and known observation variance. The steps include adding an intercept column if required, computing the posterior distribution, and then predicting the MAP (Maximum A Posteriori) predictive mean for new data points.\n\nHere is the self-contained Python script:\n\n```python\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    # Add intercept column if required\n    if fit_intercept:\n        X = np.column_stack((np.ones(X.shape[0]), X))\n        X_new = np.column_stack((np.ones(X_new.shape[0]), X_new))\n    \n    # Ensure mu is a vector of appropriate length\n    if isinstance(mu, (int, float)):\n        mu = np.full(X.shape[1], mu)\n    \n    # Ensure V is a matrix of appropriate size\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, (int, float)):\n        V = V * np.eye(X.shape[1])\n    elif V.ndim == 1:\n        V = np.diag(V)\n    \n    # Compute the posterior distribution\n    V_inv = np.linalg.inv(V)\n    Sigma_p = np.linalg.inv(V_inv + X.T @ X)\n    mu_p = Sigma_p @ (V_inv @ mu + X.T @ y)\n    \n    # Predict the MAP predictive mean for new data points\n    y_pred = X_new @ mu_p\n    \n    # Round predictions to 4 decimal places and return as a list\n    return [round(pred, 4) for pred in y_pred]\n\n# Example usage\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([1, 2, 3])\nX_new = np.array([[7, 8], [9, 10]])\nmu = 0.0\nsigma = 1.0\nV = 1.0\nfit_intercept = True\n\npredictions = bayesian_linear_regression_pred(X, y, X_new, mu, sigma, V, fit_intercept)\nprint(predictions)\n```\n\nThis script defines the function `bayesian_linear_regression_pred` which performs Bayesian linear regression with the specified parameters and returns the MAP predictive means for the new data points `X_new`. The function handles the addition of an intercept column, ensures the prior mean `mu` and covariance `V` are in the correct form, computes the posterior distribution, and finally predicts the MAP predictive means for the new data points. The predictions are rounded to 4 decimal places and returned as a list."}
{"task_id": 423, "completion_id": 0, "completion": "To solve the given task, we need to follow these steps:\n\n1. Validate the inputs to ensure they are of the same length and contain only non-negative numbers.\n2. Compute the RMSLE using the provided formula.\n3. Return the result rounded to four decimal places.\n\nHere is the Python script that accomplishes this:\n\n```python\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    # Validate input lengths\n    if len(actual) != len(predicted):\n        return -1\n    \n    # Validate non-negative numbers\n    if any(x < 0 for x in actual) or any(x < 0 for x in predicted):\n        return -1\n    \n    # Compute RMSLE\n    n = len(actual)\n    log_diff_squared = [(np.log(1 + predicted[i]) - np.log(1 + actual[i])) ** 2 for i in range(n)]\n    rmsle = np.sqrt(np.mean(log_diff_squared))\n    \n    # Return the result rounded to four decimal places\n    return round(rmsle, 4)\n\n# Example usage\nactual = [1.0, 2.0, 3.0, 4.0]\npredicted = [1.1, 1.9, 3.1, 3.9]\nprint(root_mean_squared_log_error(actual, predicted))  # Output should be a float rounded to 4 decimal places\n```\n\nThis script defines the `root_mean_squared_log_error` function, which first checks if the inputs are valid (same length and non-negative). If the inputs are valid, it computes the RMSLE using the provided formula and returns the result rounded to four decimal places."}
{"task_id": 428, "completion_id": 0, "completion": "```python\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    else:\n        if symmetric:\n            n = np.arange(window_len)\n        else:\n            n = np.arange(window_len + 1)[:-1]\n        hann_window = 0.5 - 0.5 * np.cos(2 * math.pi * n / (window_len - 1 if symmetric else window_len))\n        return [round(x, 4) for x in hann_window]\n\n# Example usage:\nprint(hann(5, symmetric=True))  # Symmetric Hann window\nprint(hann(5, symmetric=False)) # Periodic Hann window\n```\n\nThis Python script defines a function `hann` that generates a Hann window of a specified length, with an option to generate either a symmetric or periodic window. The function handles special cases for window lengths of 0 or 1 and rounds the window coefficients to 4 decimal places as required."}
{"task_id": 433, "completion_id": 0, "completion": "To solve the given task, we need to implement the `glorot_fan` function according to the rules provided. The function will check the length of the shape to determine if it's a 4-dimensional convolutional kernel or not. If it is, it will calculate the `fan_in` and `fan_out` based on the convolutional kernel's layout. Otherwise, it will directly use the first two dimensions of the shape for `fan_in` and `fan_out`.\n\nHere is the Python script that accomplishes this:\n\n```python\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:  # Convolutional kernel\n        out_channels, in_channels, kernel_height, kernel_width = shape\n        receptive_field_size = kernel_height * kernel_width\n        fan_in = in_channels * receptive_field_size\n        fan_out = out_channels * receptive_field_size\n    else:  # Dense layer or other tensors\n        fan_in, fan_out = shape[0], shape[1]\n    \n    return float(fan_in), float(fan_out)\n\n# Example usage:\n# For a 4D convolutional kernel\nprint(glorot_fan((32, 64, 3, 3)))  # Expected output: (576.0, 288.0)\n\n# For a dense layer\nprint(glorot_fan((100, 200)))  # Expected output: (100.0, 200.0)\n```\n\nThis script defines the `glorot_fan` function that calculates `fan_in` and `fan_out` based on the provided shape. It handles both 4D convolutional kernels and other tensor shapes according to the rules specified."}
{"task_id": 435, "completion_id": 0, "completion": "To implement the described Gradient Boosting Regressor, we will follow the steps outlined in the task description. We will use NumPy for the necessary mathematical operations and ensure that the final predictions are rounded to 4 decimal places and returned as a regular Python list.\n\nHere is the implementation:\n\n```python\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]],\n                                y: list[float],\n                                n_estimators: int = 10,\n                                learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    # Convert X and y to NumPy arrays of type float\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n    \n    # Initialize the current prediction with the mean of y\n    y_pred = np.full_like(y, np.mean(y), dtype=float)\n    \n    # If n_estimators <= 0 or learning_rate = 0, return a vector filled with the target mean\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(np.mean(y), 4) for _ in range(len(y))]\n    \n    # Gradient Boosting loop\n    for t in range(n_estimators):\n        # Compute the residuals\n        residuals = y - y_pred\n        \n        # Fit an OLS linear model to predict the residuals\n        # Add a column of ones to X for the intercept\n        X_with_intercept = np.column_stack((np.ones(X.shape[0]), X))\n        # Solve the normal equation to get the coefficients\n        coefficients = np.linalg.lstsq(X_with_intercept, residuals, rcond=None)[0]\n        \n        # Obtain the weak-learner prediction\n        h_t = X_with_intercept @ coefficients\n        \n        # Update the overall prediction\n        y_pred += learning_rate * h_t\n    \n    # Return the final prediction vector rounded to 4 decimal places and converted to a regular Python list\n    return [round(pred, 4) for pred in y_pred]\n```\n\nThis function follows the steps described in the task:\n1. Converts the input data to NumPy arrays.\n2. Initializes the prediction with the mean of the target values.\n3. Iterates over the specified number of estimators, computing residuals, fitting a linear model to these residuals, and updating the predictions.\n4. Returns the final predictions as a list of floats, each rounded to 4 decimal places."}
{"task_id": 437, "completion_id": 0, "completion": "To solve the given task, we need to implement a function that can handle different types of inputs (scalar, list, or NumPy array) and compute the logistic sigmoid function or its derivatives based on the `order` parameter. The function should also handle the case where the `order` is not 0, 1, or 2 by returning -1. Here's how we can approach this:\n\n1. **Check the `order` parameter**: If it's not 0, 1, or 2, return -1.\n2. **Handle different input types**: Convert the input to a NumPy array if it's a list or scalar for easier computation.\n3. **Compute the sigmoid function and its derivatives**: Use NumPy for efficient computation.\n4. **Round the results**: Ensure the results are rounded to 4 decimal places.\n5. **Return the result**: Convert the result back to a list if the input was a list or return a float if the input was a scalar.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    # Check if order is valid\n    if order not in [0, 1, 2]:\n        return -1\n    \n    # Convert input to numpy array for easier computation\n    x = np.array(x)\n    \n    # Compute the sigmoid function\n    sig = 1 / (1 + np.exp(-x))\n    \n    # Compute the derivatives based on the order\n    if order == 0:\n        result = sig\n    elif order == 1:\n        result = sig * (1 - sig)\n    elif order == 2:\n        result = sig * (1 - sig) * (1 - 2 * sig)\n    \n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n    \n    # Convert back to list if input was a list, otherwise return float\n    if isinstance(x, (list, np.ndarray)):\n        return result.tolist()\n    else:\n        return float(result)\n\n# Example usage:\nprint(sigmoid(0))  # Scalar input\nprint(sigmoid([0, 1, -1], 1))  # List input with first derivative\nprint(sigmoid(np.array([0, 1, -1]), 2))  # NumPy array input with second derivative\n```\n\nThis function should meet all the requirements specified in the task."}
{"task_id": 438, "completion_id": 0, "completion": "To solve the given task, we need to implement a function `to_categorical` that converts a list or NumPy array of class labels into a one-hot encoded matrix. The function should handle the case where the number of classes is not provided and also check if the provided number of classes is sufficient for the given labels.\n\nHere's a step-by-step breakdown of the implementation:\n\n1. **Determine the number of classes**: If `num_classes` is `None`, calculate it as `max(y) + 1`.\n2. **Check if `num_classes` is sufficient**: If `num_classes` is provided and is smaller than `max(y) + 1`, return `-1`.\n3. **Create the one-hot encoded matrix**: Use NumPy to create a matrix where each row corresponds to a label in `y` and has a `1` at the column corresponding to the label.\n4. **Convert the matrix to a list of lists**: Use the `tolist()` method to convert the NumPy array to a list of lists before returning it.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    # Convert y to a NumPy array if it's a list\n    y = np.array(y)\n    \n    # Determine the number of classes if not provided\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    \n    # Check if num_classes is sufficient\n    if num_classes < np.max(y) + 1:\n        return -1\n    \n    # Create the one-hot encoded matrix\n    one_hot = np.eye(num_classes)[y]\n    \n    # Convert the matrix to a list of lists\n    return one_hot.tolist()\n\n# Example usage:\ny = [0, 1, 2, 0, 1]\nnum_classes = 3\nprint(to_categorical(y, num_classes))  # Output: [[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0], [0, 1, 0]]\n\ny = [0, 1, 2, 0, 1]\nnum_classes = 2\nprint(to_categorical(y, num_classes))  # Output: -1\n```\n\nThis implementation ensures that the function behaves as expected, handling both the automatic determination of `num_classes` and the error case when `num_classes` is too small."}
{"task_id": 439, "completion_id": 0, "completion": "To implement the Apriori algorithm for frequent itemset mining, we need to follow the steps outlined in the task description. The algorithm will generate candidate itemsets of increasing size, check their frequency, and prune those that do not meet the minimum support threshold. Here's a step-by-step implementation:\n\n1. **Initialize the frequent itemsets with single items** that meet the minimum support threshold.\n2. **Iteratively generate candidate itemsets** of increasing size by self-joining the frequent itemsets of the previous size.\n3. **Prune candidates** that contain infrequent subsets.\n4. **Check the support** of the remaining candidates and add those that meet the threshold to the list of frequent itemsets.\n5. **Repeat until no new frequent itemsets** are found.\n\nHere's the complete implementation:\n\n```python\nimport itertools\n\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    # Calculate the minimum support count\n    min_sup_count = len(transactions) * min_sup\n    \n    # Step 1: Generate frequent 1-itemsets\n    item_counts = {}\n    for transaction in transactions:\n        for item in transaction:\n            item_counts[item] = item_counts.get(item, 0) + 1\n    \n    frequent_itemsets = {frozenset([item]): count for item, count in item_counts.items() if count >= min_sup_count}\n    \n    # Step 2: Generate frequent k-itemsets for k > 1\n    k = 2\n    while True:\n        # Generate candidate itemsets\n        candidates = set()\n        for itemset1, itemset2 in itertools.combinations(frequent_itemsets.keys(), 2):\n            candidate = itemset1.union(itemset2)\n            if len(candidate) == k:\n                candidates.add(candidate)\n        \n        # Prune candidates that contain infrequent subsets\n        candidates = {c for c in candidates if all(frozenset(subset) in frequent_itemsets for subset in itertools.combinations(c, k-1))}\n        \n        # Count the support of each candidate\n        candidate_counts = {c: 0 for c in candidates}\n        for transaction in transactions:\n            transaction_set = frozenset(transaction)\n            for candidate in candidates:\n                if candidate.issubset(transaction_set):\n                    candidate_counts[candidate] += 1\n        \n        # Filter candidates to get frequent itemsets\n        new_frequent_itemsets = {c: count for c, count in candidate_counts.items() if count >= min_sup_count}\n        \n        if not new_frequent_itemsets:\n            break\n        \n        frequent_itemsets.update(new_frequent_itemsets)\n        k += 1\n    \n    # Convert frozensets to sorted tuples and sort the result\n    result = sorted((tuple(sorted(itemset)) for itemset in frequent_itemsets), key=lambda x: (len(x), x))\n    \n    return result\n```\n\nThis implementation follows the Apriori algorithm closely, ensuring that only itemsets meeting the minimum support threshold are considered. The result is a list of frequent itemsets, each represented as a tuple, sorted first by length and then lexicographically."}
{"task_id": 440, "completion_id": 0, "completion": "To solve the given task, we will follow these steps:\n\n1. Convert the input list `predictions` to a NumPy array for easier manipulation.\n2. Compute the average of the probability vectors over all estimators for each sample.\n3. Round the averaged probabilities to four decimal places.\n4. Determine the predicted class for each sample by finding the index of the maximum probability.\n5. Convert the averaged probabilities and the predicted classes back to Python lists before returning them.\n\nHere is the Python script that accomplishes this:\n\n```python\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    # Convert the list to a NumPy array for easier manipulation\n    predictions_array = np.array(predictions)\n    \n    # Compute the average probabilities over all estimators for each sample\n    avg_probabilities = np.mean(predictions_array, axis=0)\n    \n    # Round the averaged probabilities to four decimal places\n    avg_probabilities_rounded = np.round(avg_probabilities, decimals=4)\n    \n    # Determine the predicted class for each sample\n    predicted_classes = np.argmax(avg_probabilities_rounded, axis=1)\n    \n    # Convert the averaged probabilities and predicted classes back to Python lists\n    avg_probabilities_list = avg_probabilities_rounded.tolist()\n    predicted_classes_list = predicted_classes.tolist()\n    \n    return avg_probabilities_list, predicted_classes_list\n\n# Example usage\npredictions = [\n    [[0.1, 0.2, 0.7], [0.3, 0.4, 0.3]],\n    [[0.2, 0.3, 0.5], [0.4, 0.2, 0.4]],\n    [[0.3, 0.1, 0.6], [0.5, 0.1, 0.4]]\n]\n\navg_probs, predicted_classes = aggregate_predictions(predictions)\nprint(\"Averaged Probabilities:\", avg_probs)\nprint(\"Predicted Classes:\", predicted_classes)\n```\n\nThis script defines the `aggregate_predictions` function that takes a nested list of predictions and returns the averaged probabilities and the predicted classes as specified in the task. The example usage at the end demonstrates how to call the function and print the results."}
{"task_id": 444, "completion_id": 0, "completion": "To solve the given task, we need to follow these steps:\n\n1. Validate the inputs: Ensure that the feature dimensions of X and Y match, and that the \u03c3 parameter is valid.\n2. Compute the RBF kernel matrix.\n3. Round the entries to 4 decimal places.\n4. Return the result as a nested Python list.\n\nHere is the Python script that accomplishes this:\n\n```python\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    X = np.array(X)\n    if Y is None:\n        Y = X\n    else:\n        Y = np.array(Y)\n    \n    # Validate the input dimensions\n    if X.shape[1] != Y.shape[1]:\n        return -1\n    \n    # Validate and prepare the sigma parameter\n    if sigma is None:\n        sigma = np.sqrt(X.shape[1] / 2)\n    elif isinstance(sigma, (int, float)):\n        sigma = np.array([sigma] * X.shape[1])\n    elif isinstance(sigma, list):\n        sigma = np.array(sigma)\n        if len(sigma) != X.shape[1]:\n            return -1\n    else:\n        return -1\n    \n    if np.any(sigma <= 0):\n        return -1\n    \n    # Compute the RBF kernel matrix\n    N, C = X.shape\n    M, _ = Y.shape\n    kernel_matrix = np.zeros((N, M))\n    \n    for i in range(N):\n        for j in range(M):\n            diff = (X[i] - Y[j]) / sigma\n            kernel_matrix[i, j] = np.exp(-0.5 * np.sum(diff ** 2))\n    \n    # Round the kernel matrix to 4 decimal places\n    kernel_matrix = np.round(kernel_matrix, 4)\n    \n    # Convert the numpy array back to a nested list\n    return kernel_matrix.tolist()\n\n# Example usage\nX = [[1, 0], [0, 1]]\nY = [[1, 0], [0, 1]]\nsigma = 1.0\nprint(rbf_kernel(X, Y, sigma))\n```\n\nThis script follows the given specifications and handles the input validation, computation of the RBF kernel matrix, and rounding of the results. It returns the kernel matrix as a nested Python list, or -1 if the input is invalid."}
{"task_id": 446, "completion_id": 0, "completion": "To solve the given task, we need to implement a function `decision_stump` that finds the best single-level split (decision stump) according to information gain. The function will compute the Shannon entropy for each potential split and select the one with the highest information gain. Here's a step-by-step approach to achieve this:\n\n1. **Import necessary libraries**: We need `numpy` for numerical operations and `collections.Counter` to count label occurrences.\n2. **Define the Shannon entropy function**: This function will calculate the entropy of a given set of labels.\n3. **Define the decision stump function**: This function will iterate over all features and possible thresholds, compute the information gain for each split, and keep track of the best split.\n4. **Handle ties and no-improvement cases**: If there are ties, we resolve them by choosing the smallest feature index and threshold. If no split improves the information gain, we return the majority label.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef entropy(labels):\n    \"\"\"Calculate the Shannon entropy of a list of labels.\"\"\"\n    label_counts = Counter(labels)\n    total_samples = len(labels)\n    entropy = 0.0\n    for count in label_counts.values():\n        p = count / total_samples\n        entropy -= p * np.log2(p)\n    return entropy\n\ndef decision_stump(X: list[list[float]], y: list[int]) -> tuple:\n    \"\"\"Find a decision stump that maximises information gain.\"\"\"\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n    best_gain = -1\n    best_feature_index = -1\n    best_threshold = None\n    left_majority_label = None\n    right_majority_label = None\n    parent_entropy = entropy(y)\n    \n    # If all labels are the same, return the majority label\n    if parent_entropy == 0:\n        majority_label = Counter(y).most_common(1)[0][0]\n        return (-1, None, majority_label, majority_label)\n    \n    for j in range(n_features):\n        # Sort unique values and find midpoints\n        unique_values = np.unique(X[:, j])\n        thresholds = (unique_values[:-1] + unique_values[1:]) / 2\n        \n        for t in thresholds:\n            left_indices = X[:, j] <= t\n            right_indices = X[:, j] > t\n            \n            if not left_indices.any() or not right_indices.any():\n                continue\n            \n            left_labels = y[left_indices]\n            right_labels = y[right_indices]\n            \n            p_left = len(left_labels) / n_samples\n            p_right = len(right_labels) / n_samples\n            \n            left_entropy = entropy(left_labels)\n            right_entropy = entropy(right_labels)\n            \n            gain = parent_entropy - p_left * left_entropy - p_right * right_entropy\n            \n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = j\n                best_threshold = round(t, 4)\n                left_majority_label = Counter(left_labels).most_common(1)[0][0]\n                right_majority_label = Counter(right_labels).most_common(1)[0][0]\n    \n    return (best_feature_index, best_threshold, left_majority_label, right_majority_label)\n```\n\nThis script defines the `decision_stump` function that computes the best decision stump according to the information gain criterion. It handles ties and cases where no split improves the information gain by returning the majority label."}
{"task_id": 452, "completion_id": 0, "completion": "To solve the given task, we need to implement the `divide_on_feature` function that will split the data set `X` into two subsets based on the value of a specific feature column (`feature_i`) and a threshold. The function should handle both numeric and non-numeric thresholds and return the subsets in their original order.\n\nHere's a step-by-step approach to implement the function:\n\n1. **Check the type of the threshold**: Determine if the threshold is numeric (int or float) or non-numeric (categorical).\n2. **Initialize the subsets**: Create two empty lists to hold the samples that meet the condition and those that do not.\n3. **Iterate through the data set**: For each sample in `X`, check if it meets the condition based on the type of the threshold.\n4. **Append to the appropriate subset**: Depending on whether the sample meets the condition, append it to the first or second subset.\n5. **Return the subsets**: Convert the subsets to regular Python lists and return them as a list of two lists.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\nfrom typing import List\n\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    # Initialize subsets\n    subset1 = []\n    subset2 = []\n\n    # Determine if the threshold is numeric\n    is_numeric = isinstance(threshold, (int, float))\n\n    # Iterate through the data set\n    for sample in X:\n        # Check the condition based on the type of the threshold\n        if (is_numeric and sample[feature_i] >= threshold) or (not is_numeric and sample[feature_i] == threshold):\n            subset1.append(sample)\n        else:\n            subset2.append(sample)\n\n    # Convert subsets to regular Python lists\n    subset1 = np.array(subset1).tolist()\n    subset2 = np.array(subset2).tolist()\n\n    return [subset1, subset2]\n\n# Example usage\nX = np.array([[1, 5], [3, 2], [4, 6], [2, 1]])\nfeature_i = 0\nthreshold = 3\nprint(divide_on_feature(X, feature_i, threshold))  # \u279c  [[ [3, 2], [4, 6] ], [ [1, 5], [2, 1] ]]\n\nX = np.array([[1, \"A\"], [2, \"B\"], [3, \"A\"], [4, \"C\"]])\nfeature_i = 1\nthreshold = \"A\"\nprint(divide_on_feature(X, feature_i, threshold))  # \u279c  [[ [1, \"A\"], [3, \"A\"] ], [ [2, \"B\"], [4, \"C\"] ]]\n```\n\nThis implementation ensures that the subsets are created based on the specified conditions and returned in their original order."}
{"task_id": 453, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    # Check for input consistency and validity\n    batch_size = Q.shape[0]\n    if (Q.shape != Q_next.shape or\n        len(actions) != batch_size or\n        len(rewards) != batch_size or\n        len(dones) != batch_size or\n        not (0 <= gamma <= 1)):\n        return -1\n    \n    # Initialize the target Q-values\n    Q_targets = Q.copy()\n    \n    # Compute the target Q-values\n    for i in range(batch_size):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * np.max(Q_next[i])\n        Q_targets[i, actions[i]] = target\n    \n    # Round the Q-values to 4 decimal places and convert to list\n    Q_targets_rounded = np.round(Q_targets, 4).tolist()\n    \n    return Q_targets_rounded\n\n# Example usage\nQ = np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]])\nQ_next = np.array([[0.2, 0.3, 0.4], [0.5, 0.6, 0.7]])\nactions = [0, 1]\nrewards = [1.0, 2.0]\ndones = [False, True]\ngamma = 0.9\n\nprint(update_q_values(Q, Q_next, actions, rewards, dones, gamma))\n```\n\nThis script defines the `update_q_values` function that computes the target Q-values for a batch of samples in a Deep Q-Network (DQN) setting. It checks for input consistency and validity, computes the target Q-values based on the provided formula, rounds them to four decimal places, and returns the result as a nested list."}
{"task_id": 458, "completion_id": 0, "completion": "To solve the task, we will follow these steps:\n\n1. Import the necessary package (`numpy`).\n2. Define the function `to_categorical` with the required parameters.\n3. Check if the `num_classes` is provided and if it is smaller than `max(labels) + 1` or if any label is negative. If so, return `-1`.\n4. If `num_classes` is not provided, calculate it as `max(labels) + 1`.\n5. Create a list of lists where each inner list represents a one-hot encoded label.\n6. Return the list of lists.\n\nHere is the complete code:\n\n```python\nimport numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    # Convert input to a list if it's not already\n    labels = list(labels)\n    \n    # Check for negative labels\n    if any(label < 0 for label in labels):\n        return -1\n    \n    # Determine the number of classes\n    if num_classes is None:\n        num_classes = max(labels) + 1\n    elif num_classes < max(labels) + 1:\n        return -1\n    \n    # Create the one-hot encoded list\n    one_hot = []\n    for label in labels:\n        row = [0] * num_classes\n        row[label] = 1\n        one_hot.append(row)\n    \n    return one_hot\n\n# Example usage:\nlabels = [0, 1, 2, 0, 1]\nnum_classes = 3\nprint(to_categorical(labels, num_classes))\n```\n\nThis script defines the `to_categorical` function that takes a list of labels and an optional number of classes, and returns a one-hot encoded list of lists. It also includes a check for negative labels and ensures that the number of classes is sufficient."}
{"task_id": 461, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    n_samples = len(x)\n    \n    # Initial prediction is the mean of the targets\n    y_pred = np.full(n_samples, np.mean(y))\n    \n    if n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n    \n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y - y_pred\n        \n        # If all residuals are zero, stop early\n        if np.all(residuals == 0):\n            break\n        \n        # Find unique x values for splitting\n        unique_x = np.unique(x)[:-1]  # Exclude the greatest value\n        \n        best_sse = float('inf')\n        best_split = None\n        best_left_mean = None\n        best_right_mean = None\n        \n        for t in unique_x:\n            left_mask = x <= t\n            right_mask = x > t\n            \n            if np.any(left_mask) and np.any(right_mask):\n                left_residuals = residuals[left_mask]\n                right_residuals = residuals[right_mask]\n                \n                left_mean = np.mean(left_residuals)\n                right_mean = np.mean(right_residuals)\n                \n                sse = np.sum((left_residuals - left_mean) ** 2) + np.sum((right_residuals - right_mean) ** 2)\n                \n                if sse < best_sse:\n                    best_sse = sse\n                    best_split = t\n                    best_left_mean = left_mean\n                    best_right_mean = right_mean\n        \n        # If no valid split was found, use the mean residual of the whole data\n        if best_split is None:\n            stump_prediction = np.mean(residuals)\n        else:\n            stump_prediction = np.where(x <= best_split, best_left_mean, best_right_mean)\n        \n        # Update the ensemble prediction\n        y_pred += learning_rate * stump_prediction\n    \n    return np.round(y_pred, 4).tolist()\n\n# Example usage\nx = [1.0, 2.0, 3.0, 4.0, 5.0]\ny = [1.1, 2.2, 3.3, 4.4, 5.5]\npredictions = gradient_boosting_regressor(x, y, n_estimators=100, learning_rate=0.1)\nprint(predictions)\n```\n\nThis script implements the gradient boosting algorithm for one-dimensional regression data using decision stumps as weak learners. It follows the algorithm described in the task, including the special cases and constraints."}
{"task_id": 471, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    # Number of actions\n    num_actions = len(q_table[0])\n    \n    # Calculate the target\n    if next_state is not None:\n        # Find the maximum Q-value in the next state\n        max_q_next = max(q_table[next_state])\n        # Count the number of actions that have the maximum Q-value\n        max_actions = [a for a, q in enumerate(q_table[next_state]) if q == max_q_next]\n        num_max_actions = len(max_actions)\n        \n        # Calculate the expected value of Q(s', a')\n        expected_q_next = 0\n        for a in range(num_actions):\n            if a in max_actions:\n                expected_q_next += ((1 - epsilon) / num_max_actions + epsilon / num_actions) * q_table[next_state][a]\n            else:\n                expected_q_next += (epsilon / num_actions) * q_table[next_state][a]\n        \n        target = reward + gamma * expected_q_next\n    else:\n        target = reward\n    \n    # Update the Q-table\n    q_table[state][action] += lr * (target - q_table[state][action])\n    \n    # Round every entry to 4 decimal places\n    q_table = [[round(q, 4) for q in row] for row in q_table]\n    \n    return q_table\n\n# Example usage\nq_table = [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]\nstate = 0\naction = 1\nreward = 1.0\nnext_state = 1\nepsilon = 0.1\nlr = 0.5\ngamma = 0.9\n\nupdated_q_table = expected_sarsa_update(q_table, state, action, reward, next_state, epsilon, lr, gamma)\nprint(updated_q_table)\n```\n\nThis script defines the `expected_sarsa_update` function which performs one step of the Expected\u2013SARSA algorithm. It takes the current Q-table, the state and action taken, the reward received, the next state (or `None` if the episode ends), and the SARSA hyperparameters as inputs. The function then calculates the expected value of the next state's Q-values according to the \u03b5-soft policy, updates the Q-table, and returns the updated Q-table with all entries rounded to four decimal places."}
{"task_id": 474, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n\n    for i in range(m):\n        label = (i - 0.5) * 2\n        x_min = (i // 2 + 0.1) * 10\n        x_max = (i // 2 + 0.9) * 10\n        y_min = ((i % 2) * interval + 0.1) * 10\n        y_max = ((i % 2) * interval + 0.9) * 10\n\n        # Generate training data\n        x_train = np.random.uniform(x_min, x_max, n_train)\n        y_train = np.random.uniform(y_min, y_max, n_train)\n        X_train.append(np.column_stack((x_train, y_train)))\n        Y_train.extend([label] * n_train)\n\n        # Generate validation data\n        x_val = np.random.uniform(x_min, x_max, n_val)\n        y_val = np.random.uniform(y_min, y_max, n_val)\n        X_val.append(np.column_stack((x_val, y_val)))\n        Y_val.extend([label] * n_val)\n\n    X_train = np.round(np.concatenate(X_train), 4)\n    X_val = np.round(np.concatenate(X_val), 4)\n    Y_train = np.array(Y_train)\n    Y_val = np.array(Y_val)\n\n    return X_train, X_val, Y_train, Y_val\n\n# Example usage:\nm = 2\nn_train = 100\nn_val = 50\ninterval = 1\nseed = 42\n\nX_train, X_val, Y_train, Y_val = generate_data(m, n_train, n_val, interval, seed)\nprint(\"X_train:\", X_train)\nprint(\"X_val:\", X_val)\nprint(\"Y_train:\", Y_train)\nprint(\"Y_val:\", Y_val)\n```\n\nThis script defines the `generate_data` function that generates a 2-D toy data set for a binary or multi-class classifier. The function accepts parameters for the number of classes, the number of training and validation samples per class, the vertical distance between class clusters, and an optional seed for reproducibility. The function returns four NumPy arrays: `X_train`, `X_val`, `Y_train`, and `Y_val`, which represent the training and validation data and their corresponding labels. The coordinates are rounded to four decimal places as required."}
{"task_id": 475, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    # Initialize m_prev and v_prev to zero if they are None\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n    \n    # Update the first moment estimate\n    m_t = b1 * m_prev + (1 - b1) * grad\n    \n    # Update the second moment estimate\n    v_t = b2 * v_prev + (1 - b2) * (grad ** 2)\n    \n    # Bias correction\n    m_t_hat = m_t / (1 - b1 ** t)\n    v_t_hat = v_t / (1 - b2 ** t)\n    \n    # Update parameters\n    w_new = w - learning_rate * m_t_hat / (np.sqrt(v_t_hat) + eps)\n    \n    return w_new, m_t, v_t\n\n# Example usage\nw_new, m_new, v_new = adam_update(1.0, 0.1, 0.0, 0.0, 1)\nprint(round(w_new, 9))  # \u2248 0.999000001\n```"}
{"task_id": 479, "completion_id": 0, "completion": "To implement the \u03b5-greedy multi-armed bandit simulation, we will follow the steps outlined in the task description. We will use NumPy for efficient array operations and to handle the random number generation. Here is the complete implementation:\n\n```python\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    \n    num_arms = len(rewards[0])\n    estimated_values = np.full(num_arms, ev_prior)\n    pull_counts = np.zeros(num_arms)\n    \n    for t in range(len(rewards)):\n        if np.random.rand() < epsilon:\n            # Exploration: choose a random arm\n            chosen_arm = np.random.randint(num_arms)\n        else:\n            # Exploitation: choose the arm with the highest estimated value\n            chosen_arm = np.argmax(estimated_values)\n        \n        reward = rewards[t][chosen_arm]\n        pull_counts[chosen_arm] += 1\n        estimated_values[chosen_arm] += (reward - estimated_values[chosen_arm]) / pull_counts[chosen_arm]\n    \n    return [round(value, 4) for value in estimated_values]\n\n# Example usage:\nrewards = [\n    [1.0, 0.0, 0.0],\n    [0.0, 1.0, 0.0],\n    [0.0, 0.0, 1.0],\n    [1.0, 0.0, 0.0],\n    [0.0, 1.0, 0.0],\n    [0.0, 0.0, 1.0],\n]\nprint(epsilon_greedy_bandit(rewards, epsilon=0.1, ev_prior=0.5, seed=42))\n```\n\nThis script defines the `epsilon_greedy_bandit` function that simulates the \u03b5-greedy strategy for a given set of rewards. The function initializes the estimated values and pull counts for each arm, then iterates over each time-step, choosing an arm based on the \u03b5-greedy policy, updating the estimated values, and finally returning the estimated values rounded to four decimal places."}
{"task_id": 481, "completion_id": 0, "completion": "To implement the DBSCAN algorithm from scratch, we need to follow these steps:\n\n1. **Calculate the distance matrix**: We need to calculate the Euclidean distance between every pair of points in the dataset.\n2. **Identify core points**: A point is a core point if it has at least `min_samples` points within its `eps` radius.\n3. **Expand clusters**: For each core point, we expand the cluster by adding all reachable points (points within `eps` distance) to the cluster.\n4. **Label border points**: Points that are reachable from a core point but are not core points themselves are labeled with the same cluster label as the core point.\n5. **Label noise points**: Points that are not reachable from any core point are labeled as noise (-1).\n\nHere is the Python code implementing the DBSCAN algorithm:\n\n```python\nimport numpy as np\n\ndef euclidean_distance(point1, point2):\n    \"\"\"Calculate the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((point1 - point2) ** 2))\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled -1 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    if data.size == 0:\n        return []\n\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples  # Initialize all points as noise\n    cluster_id = 0\n\n    for i in range(n_samples):\n        if labels[i] != -1:\n            continue  # Skip already processed points\n\n        # Find all points within eps distance from point i\n        neighbors = [j for j in range(n_samples) if euclidean_distance(data[i], data[j]) <= eps]\n\n        if len(neighbors) < min_samples:\n            continue  # Point i is noise\n\n        # Expand the cluster\n        labels[i] = cluster_id\n        seeds = neighbors[1:]  # Exclude the point itself\n\n        while seeds:\n            current = seeds.pop(0)\n            if labels[current] == -1:\n                labels[current] = cluster_id\n            elif labels[current] == -2:  # Border point\n                labels[current] = cluster_id\n                continue\n\n            current_neighbors = [j for j in range(n_samples) if euclidean_distance(data[current], data[j]) <= eps]\n            if len(current_neighbors) >= min_samples:\n                for neighbor in current_neighbors:\n                    if labels[neighbor] == -1:\n                        seeds.append(neighbor)\n                        labels[neighbor] = -2  # Mark as border point\n\n        cluster_id += 1\n\n    return labels\n\n# Example usage:\n# data = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\n# eps = 3\n# min_samples = 2\n# print(dbscan(data, eps, min_samples))\n```\n\nThis implementation follows the DBSCAN algorithm closely, ensuring that core points are identified, clusters are expanded, and noise points are labeled correctly. The `euclidean_distance` function is used to calculate the distance between points, and the main logic of the algorithm is implemented in the `dbscan` function."}
{"task_id": 482, "completion_id": 0, "completion": "To implement the `to_categorical` function, we need to follow these steps:\n\n1. **Determine the number of classes**: If `num_classes` is not provided, we will calculate it as `max(y) + 1`. If it is provided, we will use that value.\n2. **Check for invalid labels**: If any label in `y` is negative or not smaller than `num_classes`, we will raise a `ValueError`.\n3. **Create the one-hot encoded matrix**: We will create a matrix of zeros with the shape `(len(y), num_classes)`. Then, for each label in `y`, we will set the corresponding column in the matrix to 1.\n\nHere is the implementation:\n\n```python\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    # Convert y to a NumPy array if it's not already one\n    y = np.array(y)\n    \n    # Check if y is a 1-D array\n    if y.ndim != 1:\n        raise ValueError(\"y must be a 1-D array\")\n    \n    # Determine the number of classes\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    else:\n        if np.any(y < 0) or np.any(y >= num_classes):\n            raise ValueError(\"y contains labels that are negative or not smaller than num_classes\")\n    \n    # Create the one-hot encoded matrix\n    one_hot = np.zeros((y.size, num_classes), dtype=int)\n    one_hot[np.arange(y.size), y] = 1\n    \n    return one_hot\n```\n\nThis function first checks if `y` is a 1-D array and then determines the number of classes. It then checks for any invalid labels and finally creates the one-hot encoded matrix. The `np.zeros` function initializes the matrix with zeros, and the `one_hot[np.arange(y.size), y] = 1` line sets the appropriate elements to 1."}
{"task_id": 485, "completion_id": 0, "completion": "To implement the univariate regression tree as described, we need to follow these steps:\n\n1. **Define the Node Structure**: We need a structure to represent each node in the tree. Each node will store the split value, the left and right children, and the mean value of the target for leaf nodes.\n\n2. **Recursive Splitting**: We will recursively split the data based on the feature value that minimizes the sum of squared errors (SSE) until we reach the maximum depth or the node contains fewer than two samples.\n\n3. **Prediction**: For each test point, we will traverse the tree to find the corresponding leaf node and return the mean value stored in that leaf.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\nclass Node:\n    def __init__(self, split_value=None, left=None, right=None, mean=None):\n        self.split_value = split_value\n        self.left = left\n        self.right = right\n        self.mean = mean\n\ndef regression_tree_predict(X_train: list[float | int],\n                            y_train: list[float | int],\n                            X_test:  list[float | int],\n                            max_depth: int = 3) -> list[float]:\n    \"\"\"Fit a univariate regression tree of depth *max_depth* and predict.\n\n    Parameters\n    ----------\n    X_train : list[float | int]\n        1-D feature values for the training set.\n    y_train : list[float | int]\n        Continuous target values for the training set.\n    X_test : list[float | int]\n        1-D feature values for which predictions are required.\n    max_depth : int, default 3\n        Maximum depth of the binary tree (root has depth 0).\n\n    Returns\n    -------\n    list[float]\n        Predictions for every element in *X_test*.\n    \"\"\"\n    if not X_train or not y_train:\n        return []\n\n    def build_tree(X, y, depth):\n        if depth == max_depth or len(X) < 2:\n            return Node(mean=np.mean(y))\n        \n        best_sse = float('inf')\n        best_split = None\n        \n        for i in range(len(X)):\n            left_y = y[X <= X[i]]\n            right_y = y[X > X[i]]\n            sse = np.sum((left_y - np.mean(left_y))**2) + np.sum((right_y - np.mean(right_y))**2)\n            if sse < best_sse:\n                best_sse = sse\n                best_split = X[i]\n        \n        left_mask = X <= best_split\n        right_mask = X > best_split\n        \n        left_node = build_tree(X[left_mask], y[left_mask], depth + 1)\n        right_node = build_tree(X[right_mask], y[right_mask], depth + 1)\n        \n        return Node(split_value=best_split, left=left_node, right=right_node)\n    \n    def predict(node, x):\n        if node.mean is not None:\n            return node.mean\n        if x <= node.split_value:\n            return predict(node.left, x)\n        else:\n            return predict(node.right, x)\n    \n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    root = build_tree(X_train, y_train, 0)\n    predictions = [predict(root, x) for x in X_test]\n    \n    return predictions\n```\n\nThis script defines a `Node` class to represent each node in the tree and implements the `regression_tree_predict` function to build the tree and make predictions. The tree is built by recursively splitting the data based on the feature value that minimizes the SSE, and predictions are made by traversing the tree for each test point."}
{"task_id": 490, "completion_id": 0, "completion": "To solve the given task, we will follow these steps:\n\n1. Import the necessary package, `numpy`, which will help us in creating the diagonal matrix.\n2. Define the function `make_diagonal` that takes a one-dimensional vector as input.\n3. Check if the input vector is empty. If it is, return an empty list.\n4. Use `numpy.diag` to create a diagonal matrix from the input vector.\n5. Convert the resulting NumPy array to a list of lists using the `tolist()` method.\n6. Return the resulting list of lists.\n\nHere is the complete Python script implementing the above steps:\n\n```python\nimport numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    # Check if the input vector is empty\n    if not x:\n        return []\n    \n    # Convert the input to a NumPy array if it's not already one\n    if not isinstance(x, np.ndarray):\n        x = np.array(x)\n    \n    # Create a diagonal matrix using numpy.diag\n    diagonal_matrix = np.diag(x)\n    \n    # Convert the NumPy array to a list of lists\n    return diagonal_matrix.tolist()\n\n# Example usage:\nvector = [1, 2, 3]\nprint(make_diagonal(vector))  # Output: [[1, 0, 0], [0, 2, 0], [0, 0, 3]]\n```\n\nThis script defines the function `make_diagonal` that takes a one-dimensional vector and returns a square diagonal matrix as a list of lists, adhering to the task requirements."}
{"task_id": 491, "completion_id": 0, "completion": "To implement the FP-Growth algorithm, we need to follow the two major stages as described: constructing the FP-tree and recursively mining the tree to find frequent item-sets. Below is a self-contained Python script that accomplishes this task.\n\n```python\nfrom collections import Counter, defaultdict\nimport itertools\n\ndef fp_growth(transactions, min_sup):\n    \"\"\"Mine all frequent item-sets using the FP-Growth algorithm.\n\n    Parameters\n    ----------\n    transactions : Iterable[Iterable[Hashable]]\n        A collection of transactions.  Each transaction is an iterable containing hashable items.\n    min_sup : int\n        Minimum number of occurrences an item-set must have to be considered frequent.\n\n    Returns\n    -------\n    list[tuple]\n        All frequent item-sets sorted 1) by length, 2) lexicographically.  Every\n        tuple itself is sorted lexicographically.\n    \"\"\"\n    # Step 1: Scan transactions to count item frequencies and filter out infrequent items\n    item_counts = Counter(item for transaction in transactions for item in transaction)\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_sup}\n    \n    # Sort items by frequency (descending) and lexicographical order\n    sorted_items = sorted(frequent_items, key=lambda x: (-frequent_items[x], x))\n    \n    # Step 2: Construct the FP-tree\n    root = FPNode(None, None)\n    for transaction in transactions:\n        transaction = sorted([item for item in transaction if item in frequent_items], key=lambda x: sorted_items.index(x))\n        if transaction:\n            insert_transaction(root, transaction, frequent_items)\n    \n    # Step 3: Mine the FP-tree\n    frequent_itemsets = []\n    for item in frequent_items:\n        conditional_tree = build_conditional_tree(root, item)\n        if conditional_tree:\n            conditional_itemsets = mine_tree(conditional_tree, [item], frequent_items[item])\n            frequent_itemsets.extend(conditional_itemsets)\n    \n    # Sort the result by length and lexicographically\n    frequent_itemsets.sort(key=lambda x: (len(x), x))\n    return frequent_itemsets\n\ndef insert_transaction(root, transaction, item_counts):\n    \"\"\"Insert a transaction into the FP-tree.\"\"\"\n    current_node = root\n    for item in transaction:\n        if item in current_node.children:\n            child_node = current_node.children[item]\n        else:\n            child_node = FPNode(item, current_node)\n            current_node.children[item] = child_node\n            if item_counts[item] > 0:\n                item_counts[item] -= 1\n                if item_counts[item] == 0:\n                    del item_counts[item]\n        current_node = child_node\n        current_node.count += 1\n\ndef build_conditional_tree(root, item):\n    \"\"\"Build a conditional FP-tree for a given item.\"\"\"\n    conditional_tree = FPNode(None, None)\n    for path in find_paths(root, item):\n        count = path[-1].count\n        for node in reversed(path[:-1]):\n            insert_transaction(conditional_tree, [node.item], {node.item: count})\n    return conditional_tree\n\ndef find_paths(root, item):\n    \"\"\"Find all paths ending with the given item.\"\"\"\n    paths = []\n    for node in root.children.values():\n        if node.item == item:\n            paths.append([node])\n        else:\n            for path in find_paths(node, item):\n                paths.append([node] + path)\n    return paths\n\ndef mine_tree(tree, prefix, min_sup):\n    \"\"\"Recursively mine the tree to find frequent item-sets.\"\"\"\n    itemsets = []\n    for item in tree.children:\n        new_prefix = prefix + [item]\n        itemsets.append(tuple(new_prefix))\n        conditional_tree = build_conditional_tree(tree, item)\n        if conditional_tree:\n            itemsets.extend(mine_tree(conditional_tree, new_prefix, min_sup))\n    return itemsets\n\nclass FPNode:\n    \"\"\"A node in the FP-tree.\"\"\"\n    def __init__(self, item, parent):\n        self.item = item\n        self.parent = parent\n        self.children = {}\n        self.count = 0\n\n# Example usage\ntransactions = [\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"D\", \"E\"],\n    [\"A\", \"B\", \"C\", \"E\"],\n    [\"A\", \"B\", \"C\", \"D\", \"E\"],\n    [\"B\", \"C\", \"D\"]\n]\nmin_sup = 3\nprint(fp_growth(transactions, min_sup))\n```\n\nThis script defines the `fp_growth` function, which implements the FP-Growth algorithm to find all frequent item-sets in a given set of transactions. The `FPNode` class is used to represent nodes in the FP-tree. The script also includes helper functions for inserting transactions into the tree, building conditional trees, and recursively mining the tree."}
{"task_id": 492, "completion_id": 0, "completion": "To solve the given task, we need to generate all possible combinations of the original features up to a given degree. We will use `itertools.combinations_with_replacement` to generate the combinations of feature indices and then compute the corresponding monomials for each sample in the input data matrix `X`.\n\nHere is the step-by-step approach to implement the function:\n\n1. **Check if the degree is negative**: If the degree is negative, return `-1`.\n2. **Generate the combinations of feature indices**: Use `itertools.combinations_with_replacement` to generate all possible combinations of feature indices up to the given degree.\n3. **Compute the monomials**: For each combination of feature indices, compute the corresponding monomial for each sample in the input data matrix `X`.\n4. **Return the result**: Return the resulting matrix as a list of lists.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    \"\"\"Generate a full polynomial feature matrix up to a given degree.\n\n    The function should take a 2-D list *X* whose rows correspond to\n    observations and columns correspond to original features.  It must\n    return a new list of lists containing, for every observation, all\n    monomials of the original features whose total degree does not exceed\n    the supplied *degree*.  The very first element in every row should be\n    1 (the degree-0 term).\n\n    If *degree* is negative the function must return -1.\n\n    Args:\n        X: Input data of shape (n_samples, n_features).\n        degree: Maximum total degree of the generated polynomial terms.\n\n    Returns:\n        A 2-D Python list with the enriched feature matrix, or \u20111 when\n        *degree* is negative.\n    \"\"\"\n    if degree < 0:\n        return -1\n\n    # Convert the input list of lists to a numpy array for easier manipulation\n    X = np.array(X)\n    n_samples, n_features = X.shape\n\n    # Generate all combinations of feature indices up to the given degree\n    feature_indices = list(range(n_features))\n    combinations = [comb for d in range(degree + 1) for comb in combinations_with_replacement(feature_indices, d)]\n\n    # Initialize the result matrix\n    result = np.ones((n_samples, len(combinations)))\n\n    # Compute the monomials for each sample\n    for i, comb in enumerate(combinations):\n        if i == 0:\n            continue  # Skip the first column which is all 1's\n        for j in range(n_samples):\n            result[j, i] = np.prod(X[j, list(comb)])\n\n    # Convert the result back to a list of lists\n    return result.tolist()\n\n# Example usage:\nX = [[1, 2], [3, 4]]\ndegree = 2\nprint(polynomial_features(X, degree))\n```\n\nThis script defines the `polynomial_features` function that generates the polynomial feature matrix as described. It handles the case where the degree is negative by returning `-1`. The function uses `numpy` for efficient computation and `itertools.combinations_with_replacement` to generate the required combinations of feature indices."}
{"task_id": 493, "completion_id": 0, "completion": "To solve the given task, we need to follow these steps:\n\n1. Check if the input `y` is empty. If it is, return `-1`.\n2. Calculate the mean of the sample `y`.\n3. Compute the squared differences between each element in `y` and the mean.\n4. Calculate the average of these squared differences to get the MSE.\n5. Round the result to four decimal places and return it.\n\nHere is the Python script that implements the above steps:\n\n```python\nimport numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    # Check if the input is empty\n    if len(y) == 0:\n        return -1\n    \n    # Convert the input to a NumPy array if it's not already one\n    y = np.array(y)\n    \n    # Calculate the mean of the sample\n    mean_y = np.mean(y)\n    \n    # Compute the squared differences from the mean\n    squared_diffs = (y - mean_y) ** 2\n    \n    # Calculate the mean of the squared differences (MSE)\n    mse_value = np.mean(squared_diffs)\n    \n    # Round the MSE to four decimal places\n    mse_rounded = round(mse_value, 4)\n    \n    return mse_rounded\n```\n\nThis script defines the `mse` function that computes the mean-squared error of a given 1-D numeric sample, handling the case of an empty input by returning `-1`. The function uses NumPy for efficient computation of the mean and squared differences."}
{"task_id": 496, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Convert input to a NumPy array if it's not already\n    x = np.array(x)\n    \n    # Compute the affine activation\n    y = slope * x + intercept\n    \n    # The first derivative of an affine function is the slope\n    grad = np.full_like(x, slope, dtype=float)\n    \n    # The second derivative of an affine function is always 0\n    grad2 = np.zeros_like(x, dtype=float)\n    \n    # Round the results to 4 decimal places\n    y_rounded = np.round(y, 4).tolist()\n    grad_rounded = np.round(grad, 4).tolist()\n    grad2_rounded = np.round(grad2, 4).tolist()\n    \n    return y_rounded, grad_rounded, grad2_rounded\n\n# Example usage:\nx = [1.0, 2.0, 3.0]\nslope = 2.0\nintercept = 1.0\ny, grad, grad2 = apply_affine(x, slope, intercept)\nprint(\"y:\", y)\nprint(\"grad:\", grad)\nprint(\"grad2:\", grad2)\n```\n\nThis script defines the `apply_affine` function as requested, which computes the affine activation and its first and second derivatives for a given input vector `x`, slope, and intercept. The results are rounded to 4 decimal places and returned as a tuple of three lists. The example usage demonstrates how to call the function and print the results."}
{"task_id": 499, "completion_id": 0, "completion": "To implement the PCA dimensionality reduction routine as described, we will follow the steps outlined in the task description. Here is the Python script that accomplishes this:\n\n```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    # Check if k is within the valid range\n    n_features = data.shape[1]\n    if k < 1 or k > n_features:\n        return -1\n\n    # Step 1: Standardize each feature\n    means = np.mean(data, axis=0)\n    stds = np.std(data, axis=0, ddof=1)  # Population variance (ddof=0), but we use ddof=1 for sample variance\n    std_data = (data - means) / np.where(stds != 0, stds, 1)  # Avoid division by zero\n\n    # Step 2: Compute the sample covariance matrix\n    cov_matrix = np.cov(std_data, rowvar=False, bias=False)  # rowvar=False means each row is a sample\n\n    # Step 3: Perform eigen-decomposition\n    eigenvalues, eigenvectors = np.linalg.eigh(cov_matrix)\n\n    # Step 4: Sort eigenvalues and eigenvectors in descending order\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    sorted_eigenvalues = eigenvalues[sorted_indices]\n    sorted_eigenvectors = eigenvectors[:, sorted_indices]\n\n    # Step 5: Fix the sign of every eigenvector\n    max_abs_indices = np.argmax(np.abs(sorted_eigenvectors), axis=0)\n    signs = np.sign(sorted_eigenvectors[max_abs_indices, np.arange(sorted_eigenvectors.shape[1])])\n    sorted_eigenvectors = sorted_eigenvectors * signs\n\n    # Step 6: Project the standardized data onto the first k eigenvectors\n    projection_matrix = sorted_eigenvectors[:, :k]\n    projected_data = np.dot(std_data, projection_matrix)\n\n    # Return the projected data as a list of lists, rounded to 4 decimal places\n    return np.round(projected_data, 4).tolist()\n\n# Example usage:\n# data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n# k = 2\n# print(pca_transform(data, k))\n```\n\nThis script defines the `pca_transform` function that performs PCA on the given data and returns the projection onto the first `k` principal components. The function checks if `k` is within the valid range, standardizes the data, computes the covariance matrix, performs eigen-decomposition, sorts the eigenvalues and eigenvectors, fixes the sign of the eigenvectors, and finally projects the data onto the selected eigenvectors. The result is rounded to four decimal places and returned as a list of lists."}
{"task_id": 500, "completion_id": 0, "completion": "To implement the described Gradient Boosting binary classifier, we will follow these steps:\n\n1. Initialize the model with the average of the training labels.\n2. For each boosting stage, compute the residuals, fit a decision stump to these residuals, and update the model.\n3. Predict the class labels for the test set by thresholding the final score at 0.5.\n\nHere is the Python code that implements the above steps:\n\n```python\nimport numpy as np\n\ndef find_best_split(X, y):\n    \"\"\"Find the best split for a decision stump.\"\"\"\n    best_split = None\n    best_error = float('inf')\n    for feature_idx in range(X.shape[1]):\n        for threshold in np.unique(X[:, feature_idx]):\n            left_mask = X[:, feature_idx] <= threshold\n            left_error = np.sum((y[left_mask] - np.mean(y[left_mask])) ** 2)\n            right_error = np.sum((y[~left_mask] - np.mean(y[~left_mask])) ** 2)\n            total_error = left_error + right_error\n            if total_error < best_error:\n                best_error = total_error\n                best_split = (feature_idx, threshold, np.mean(y[left_mask]), np.mean(y[~left_mask]))\n    return best_split\n\ndef predict_stump(X, stump):\n    \"\"\"Predict using a decision stump.\"\"\"\n    feature_idx, threshold, left_value, right_value = stump\n    predictions = np.where(X[:, feature_idx] <= threshold, left_value, right_value)\n    return predictions\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n    \n    # Initialize model with the average of the training labels\n    F = np.mean(y_train)\n    stumps = []\n    \n    for _ in range(n_estimators):\n        # Compute residuals\n        residuals = y_train - F\n        \n        # Fit a decision stump to the residuals\n        stump = find_best_split(X_train, residuals)\n        stumps.append(stump)\n        \n        # Update the model\n        F += learning_rate * predict_stump(X_train, stump)\n    \n    # Predict on the test set\n    F_test = np.mean(y_train)  # Initialize with the average of the training labels\n    for stump in stumps:\n        F_test += learning_rate * predict_stump(X_test, stump)\n    \n    # Threshold the final score at 0.5 to get class labels\n    predictions = (F_test > 0.5).astype(int)\n    \n    return predictions.tolist()\n```\n\nThis code defines a simple Gradient Boosting classifier using decision stumps as weak learners. It fits the model to the training data and then predicts the class labels for the test set. The predictions are returned as a list of integers (0 or 1)."}
{"task_id": 505, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef sigmoid(x):\n    \"\"\"Compute the sigmoid function.\"\"\"\n    return 1 / (1 + np.exp(-x))\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n\n    m, n_v = X.shape\n    n_h = hbias.shape[0]\n\n    # Positive phase: compute hidden probabilities\n    h0_prob = sigmoid(X @ W + hbias)\n\n    # Initialize the hidden and visible probabilities for Gibbs sampling\n    v_k_prob = X\n    h_k_prob = h0_prob\n\n    # Run k Gibbs sampling steps\n    for _ in range(k):\n        v_k_prob = sigmoid(h_k_prob @ W.T + vbias)\n        h_k_prob = sigmoid(v_k_prob @ W + hbias)\n\n    # Compute positive and negative gradients\n    pos_grad = X.T @ h0_prob\n    neg_grad = v_k_prob.T @ h_k_prob\n\n    # Update the weight matrix\n    W_new = W + learning_rate * (pos_grad - neg_grad) / m\n\n    # Return the updated weight matrix rounded to 4 decimal places\n    return np.round(W_new, 4).tolist()\n\n# Example usage\nX = np.array([[0, 1], [1, 0]])\nW = np.array([[0.1, 0.2], [0.3, 0.4]])\nhbias = np.array([0.5, 0.6])\nvbias = np.array([0.7, 0.8])\nlearning_rate = 0.1\nk = 1\n\nupdated_W = contrastive_divergence(X, W, hbias, vbias, learning_rate, k)\nprint(updated_W)\n```\n\nThis script defines a function `contrastive_divergence` that performs a single weight update step for a binary Restricted Boltzmann Machine (RBM) using the Contrastive Divergence (CD-k) algorithm. The function takes as input a mini-batch of visible vectors, the current weight matrix, visible and hidden biases, a learning rate, and the number of Gibbs sampling steps. It returns the updated weight matrix as a list of lists, with each value rounded to the nearest 4th decimal place."}
{"task_id": 509, "completion_id": 0, "completion": "To solve the given task, we need to follow these steps:\n\n1. Import the necessary package, which is `numpy` for handling arrays and performing operations on them.\n2. Define the function `chebyshev` that takes two parameters, `x` and `y`, which can be either Python lists or NumPy arrays.\n3. Check if the lengths of `x` and `y` are the same. If not, return `-1`.\n4. Calculate the absolute differences between corresponding elements of `x` and `y`.\n5. Find the maximum value from these differences.\n6. Return the maximum value rounded to four decimal places.\n\nHere is the Python script that accomplishes this:\n\n```python\nimport numpy as np\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Convert inputs to numpy arrays if they are not already\n    x = np.array(x)\n    y = np.array(y)\n    \n    # Check if the lengths of the vectors are the same\n    if x.shape != y.shape:\n        return -1\n    \n    # Calculate the absolute differences\n    differences = np.abs(x - y)\n    \n    # Find the maximum difference\n    max_difference = np.max(differences)\n    \n    # Return the maximum difference rounded to four decimal places\n    return round(max_difference, 4)\n\n# Example usage\nx = [1, 2, 3]\ny = [2, 4, 6]\nprint(chebyshev(x, y))  # Output: 3.0\n```\n\nThis script defines the `chebyshev` function as required, checks the lengths of the input vectors, calculates the Chebyshev distance, and returns the result rounded to four decimal places."}
{"task_id": 510, "completion_id": 0, "completion": "To implement the VAE loss function, we need to follow these steps:\n\n1. Clip the predicted values `y_pred` to avoid taking the logarithm of zero or one, which would result in `-inf` or `+inf`.\n2. Calculate the binary cross-entropy (BCE) between the true input `y` and the reconstructed output `y_pred`.\n3. Calculate the KL divergence between the approximate posterior `q(t|x)` and the unit Gaussian prior `p(t)`.\n4. Sum the BCE and KL divergence to get the total loss.\n5. Compute the average loss over the mini-batch and round the result to six decimal places.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    # Clip y_pred to avoid log(0) and log(1)\n    epsilon = np.finfo(float).eps\n    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)\n    \n    # Calculate the binary cross-entropy\n    bce = -np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred), axis=1)\n    \n    # Calculate the KL divergence\n    kl_div = -0.5 * np.sum(1 + t_log_var - np.square(t_mean) - np.exp(t_log_var), axis=1)\n    \n    # Total loss is the sum of BCE and KL divergence\n    total_loss = bce + kl_div\n    \n    # Average over the batch and round to 6 decimal places\n    avg_loss = np.mean(total_loss)\n    return round(avg_loss, 6)\n\n# Example usage\ny = np.array([[0, 1], [1, 0]])\ny_pred = np.array([[0.1, 0.9], [0.9, 0.1]])\nt_mean = np.array([[0.5, -0.5], [-0.5, 0.5]])\nt_log_var = np.array([[-1, -1], [-1, -1]])\n\nprint(vae_loss(y, y_pred, t_mean, t_log_var))\n```\n\nThis script defines the `vae_loss` function that computes the VAE loss as described. The example usage at the end demonstrates how to call the function with sample data."}
{"task_id": 513, "completion_id": 0, "completion": "To implement the Factorization Machine (FM) regression prediction, we need to follow the formula provided. The function will take a design matrix `X`, a scalar bias `w0`, a vector of linear weights `w`, and a matrix of latent factors `V`. We will use `numpy` for efficient numerical computations.\n\nHere's the step-by-step implementation:\n\n1. Convert the input lists to `numpy` arrays for efficient computation.\n2. Compute the linear part of the FM formula.\n3. Compute the interaction part of the FM formula.\n4. Combine the linear and interaction parts to get the final prediction.\n5. Round the predictions to 4 decimal places.\n\nLet's write the code:\n\n```python\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n    \n    # Number of samples and features\n    n_samples, n_features = X.shape\n    \n    # Linear part of the FM formula\n    linear_part = w0 + np.dot(X, w)\n    \n    # Interaction part of the FM formula\n    interaction_part = 0.5 * np.sum((np.dot(X, V) ** 2) - np.dot(X ** 2, V ** 2), axis=1)\n    \n    # Combine linear and interaction parts\n    predictions = linear_part + interaction_part\n    \n    # Round predictions to 4 decimal places\n    predictions = np.round(predictions, 4)\n    \n    return predictions.tolist()\n```\n\nThis function first converts the input lists to `numpy` arrays for efficient computation. It then calculates the linear and interaction parts of the FM formula separately and combines them to get the final predictions. The predictions are rounded to 4 decimal places before being returned as a list of floats."}
{"task_id": 517, "completion_id": 0, "completion": "To solve the task, we need to implement a numerically stable sigmoid function that can handle different types of inputs (scalars, lists, tuples, and NumPy arrays). The function should return the result in the same structure as the input, with each element rounded to four decimal places.\n\nHere's a step-by-step approach to implement the `sigmoid` function:\n\n1. **Check the type of the input** to determine if it's a scalar, list, tuple, or NumPy array.\n2. **Convert the input to a NumPy array** if it's a list or tuple for easier computation.\n3. **Apply the sigmoid function** in a numerically stable way. This can be done by using the identity `sigmoid(z) = 1 / (1 + exp(-z))` and handling large values of `z` to avoid overflow.\n4. **Round the results** to four decimal places.\n5. **Convert the result back to the original input type** (scalar, list, or tuple).\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # Convert input to numpy array if it's a list or tuple\n    if isinstance(z, (list, tuple)):\n        z = np.array(z)\n    elif isinstance(z, (int, float)):\n        z = np.array([z])\n    elif not isinstance(z, np.ndarray):\n        raise TypeError(\"Input must be a scalar, list, tuple, or numpy.ndarray\")\n\n    # Numerically stable sigmoid function\n    def stable_sigmoid(x):\n        return np.where(x >= 0, 1 / (1 + np.exp(-x)), np.exp(x) / (1 + np.exp(x)))\n\n    # Apply the sigmoid function\n    result = stable_sigmoid(z)\n\n    # Round the result to four decimal places\n    result = np.round(result, 4)\n\n    # Convert back to the original input type\n    if isinstance(z, np.ndarray) and z.size == 1:\n        return float(result)\n    elif isinstance(z, np.ndarray):\n        return result.tolist()\n    else:\n        return result\n\n# Example usage\nprint(sigmoid([-1, 0, 1]))  # Output: [0.2689, 0.5, 0.7311]\n```\n\nThis implementation ensures that the sigmoid function is applied in a numerically stable way, handles different input types, and returns the result in the same structure as the input, with each element rounded to four decimal places."}
{"task_id": 518, "completion_id": 0, "completion": "```python\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    def wrapper(actual: np.ndarray, predicted: np.ndarray) -> float:\n        # Check and convert actual if necessary\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        # Check and convert predicted if necessary\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        # Call the original function with the processed arrays\n        return function(actual, predicted)\n    return wrapper\n\n# Example usage\n@unhot\ndef accuracy(actual: np.ndarray, predicted: np.ndarray) -> float:\n    \"\"\"Simple accuracy rounded to 4 decimals.\"\"\"\n    return float(np.round(np.mean(actual == predicted), 4))\n\nactual    = np.array([[0,1,0], [1,0,0], [0,0,1]])  # one-hot\npredicted = np.array([[0,1,0], [0,1,0], [0,0,1]])  # one-hot\nprint(accuracy(actual, predicted))  # 0.6667\n```"}
{"task_id": 520, "completion_id": 0, "completion": "To solve the given task, we need to implement a function `sigmoid_grad` that computes the derivative of the sigmoid function given its output. The function should handle scalar, 1-D, and 2-D inputs, and return the result in the same format as the input. We will use NumPy for handling arrays and performing the necessary computations.\n\nHere's a step-by-step approach to implement the function:\n\n1. **Check the type of the input**: If the input is a scalar, handle it directly. If it's a list or a NumPy array, proceed with the computation.\n2. **Convert the input to a NumPy array if necessary**: This will allow us to perform element-wise operations easily.\n3. **Compute the derivative**: Use the formula $g'(z) = g(z) \\cdot (1 - g(z))$.\n4. **Round the results**: Use `np.round` to round the results to 4 decimal places.\n5. **Convert the result back to the original format**: If the input was a list, convert the result back to a list with the same structure.\n\nHere's the complete implementation:\n\n```python\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    # Check if the input is a scalar\n    if isinstance(z, (int, float)):\n        return round(z * (1 - z), 4)\n    \n    # Convert the input to a NumPy array if it's a list\n    if isinstance(z, list):\n        z = np.array(z)\n    \n    # Compute the derivative\n    grad = z * (1 - z)\n    \n    # Round the results to 4 decimal places\n    grad = np.round(grad, 4)\n    \n    # Convert back to list if the original input was a list\n    if isinstance(z, np.ndarray) and z.dtype == object:\n        return grad.tolist()\n    \n    return grad\n\n# Example usage:\nprint(sigmoid_grad(0.5))  # Scalar input\nprint(sigmoid_grad([0.5, 0.75]))  # 1-D list input\nprint(sigmoid_grad([[0.5, 0.75], [0.25, 0.1]]))  # 2-D list input\nprint(sigmoid_grad(np.array([0.5, 0.75])))  # 1-D NumPy array input\nprint(sigmoid_grad(np.array([[0.5, 0.75], [0.25, 0.1]])))  # 2-D NumPy array input\n```\n\nThis script defines the `sigmoid_grad` function that computes the derivative of the sigmoid function for scalar, 1-D, and 2-D inputs, and returns the result in the same format as the input. The results are rounded to 4 decimal places as required."}
{"task_id": 528, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Convert X to a NumPy array for easier manipulation\n    X = np.array(X)\n    \n    # Extract the min and max values for each dimension\n    x1_min, x1_max = X[:, 0].min(), X[:, 0].max()\n    x2_min, x2_max = X[:, 1].min(), X[:, 1].max()\n    \n    # Create the equally spaced arrays for the grid\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n    \n    # Create the mesh grid\n    x1_mesh, x2_mesh = np.meshgrid(x1_plot, x2_plot)\n    \n    # Initialize the result list\n    result = []\n    \n    # Classify each grid point\n    for i in range(grid_n):\n        row = []\n        for j in range(grid_n):\n            # Calculate the linear combination\n            z = W[0] * x1_mesh[i, j] + W[1] * x2_mesh[i, j] + b\n            # Apply the sign function\n            label = 1 if z >= 0 else -1\n            row.append(label)\n        result.append(row)\n    \n    return result\n\n# Example usage:\nX = [[1, 2], [2, 3], [3, 4], [4, 5]]\nW = [1, -1]\nb = 0\ngrid_n = 10\ngrid = decision_boundary_grid(X, W, b, grid_n)\nprint(grid)\n```\n\nThis script defines the `decision_boundary_grid` function as specified in the task. It first converts the input data set `X` into a NumPy array for easier manipulation. It then calculates the minimum and maximum values for each dimension to create the equally spaced arrays `x1_plot` and `x2_plot`. These arrays are used to create a mesh grid, which is then used to classify each grid point according to the given linear classifier rule. The result is a nested list containing the predicted labels for each grid point."}
{"task_id": 537, "completion_id": 0, "completion": "To implement a Gaussian Naive Bayes classifier from scratch, we need to follow these steps:\n\n1. **Estimate Parameters**: Calculate the mean and standard deviation for each feature in the training data, separately for each class.\n2. **Class Priors**: Calculate the prior probability of each class, which is the relative frequency of each class in the training set.\n3. **Likelihood Calculation**: For each test sample, calculate the likelihood of the sample belonging to each class using the Gaussian distribution.\n4. **Posterior Probability**: Compute the posterior probability for each class using Bayes' theorem and the likelihoods.\n5. **Prediction**: Assign the class with the highest posterior probability to each test sample.\n\nHere is the Python code implementing the Gaussian Naive Bayes classifier:\n\n```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    # Step 1: Estimate parameters\n    n_samples, n_features = X_train.shape\n    classes = np.unique(y_train)\n    class_priors = np.zeros(len(classes))\n    means = np.zeros((len(classes), n_features))\n    stds = np.zeros((len(classes), n_features))\n    \n    for i, c in enumerate(classes):\n        X_c = X_train[y_train == c]\n        means[i, :] = X_c.mean(axis=0)\n        stds[i, :] = X_c.std(axis=0) + 1e-9  # Add a small constant to avoid division by zero\n        class_priors[i] = X_c.shape[0] / n_samples\n    \n    # Step 2: Prediction phase\n    predictions = []\n    for x in X_test:\n        posteriors = []\n        for i, c in enumerate(classes):\n            likelihood = np.prod(np.exp(-(x - means[i])**2 / (2 * stds[i]**2)) / (np.sqrt(2 * np.pi) * stds[i]))\n            posterior = likelihood * class_priors[i]\n            posteriors.append(posterior)\n        predictions.append(np.argmax(posteriors))\n    \n    return predictions\n```\n\nThis code defines a function `gaussian_naive_bayes` that takes training data `X_train` and `y_train`, and test data `X_test`, and returns a list of predicted class labels for the test data. The function calculates the mean and standard deviation for each feature in the training data for each class, computes the class priors, and then uses these to predict the class of each test sample based on the Gaussian likelihood and Bayes' theorem."}
{"task_id": 539, "completion_id": 0, "completion": "To solve the given task, we need to implement the binary cross-entropy cost function. The function will take two NumPy arrays, `AL` and `Y`, as input. `AL` contains the predicted probabilities, and `Y` contains the true labels. The function will compute the cost using the binary cross-entropy formula and return the result as a Python float.\n\nHere are the steps to implement the function:\n1. Clip the values in `AL` to avoid numerical issues when taking the logarithm.\n2. Compute the binary cross-entropy cost using the provided formula.\n3. Return the cost as a Python float.\n\nLet's write the code:\n\n```python\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    # Clip the probabilities to avoid numerical issues\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n    \n    # Number of training examples\n    m = Y.shape[1] if len(Y.shape) == 2 else Y.size\n    \n    # Compute the binary cross-entropy cost\n    cost = -1/m * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n    \n    # Convert the cost to a Python float and return\n    return float(np.squeeze(cost))\n\n# Example usage\nif __name__ == \"__main__\":\n    AL = np.array([[0.9, 0.1, 0.8]])  # Predicted probabilities\n    Y = np.array([[1, 0, 1]])         # True labels\n    cost = compute_cost(AL, Y)\n    print(f\"Cost: {cost:.4f}\")\n```\n\nThis script defines the `compute_cost` function that implements the binary cross-entropy cost calculation. The `np.clip` function is used to ensure that the probabilities are within a safe range to avoid taking the logarithm of zero or one, which would result in numerical issues. The cost is then computed using the provided formula and returned as a Python float. The example usage at the end demonstrates how to call the function and print the cost rounded to 4 decimal places."}
{"task_id": 552, "completion_id": 0, "completion": "To solve the given task, we need to implement the forward-backward algorithm for a Hidden Markov Model (HMM). The forward-backward algorithm is used to compute the posterior state probabilities (\u03b3) for each state at a given time step t. The algorithm involves computing the forward probabilities (\u03b1) and the backward probabilities (\u03b2) and then combining them to get the posterior probabilities.\n\nHere's a step-by-step breakdown of the implementation:\n\n1. **Forward Probabilities (\u03b1):** These are the probabilities of the partial observation sequence up to time t and being in state i at time t.\n2. **Backward Probabilities (\u03b2):** These are the probabilities of the remaining observation sequence from time t+1 given that the state at time t is i.\n3. **Posterior Probabilities (\u03b3):** These are computed as the product of the forward and backward probabilities normalized by the sum of the product over all states.\n\nLet's implement this in Python:\n\n```python\nimport numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    pi = hmm['pi']\n    A = hmm['A']\n    B = hmm['B']\n    T = len(observations)\n    \n    if t < 0 or t >= T:\n        return []\n    \n    # Step 1: Compute forward probabilities (\u03b1)\n    alpha = np.zeros((T, len(pi)))\n    alpha[0] = pi * B[:, observations[0]]\n    for i in range(1, T):\n        alpha[i] = np.dot(alpha[i-1], A) * B[:, observations[i]]\n    \n    # Step 2: Compute backward probabilities (\u03b2)\n    beta = np.zeros((T, len(pi)))\n    beta[-1] = 1\n    for i in range(T-2, -1, -1):\n        beta[i] = np.dot(A, B[:, observations[i+1]] * beta[i+1])\n    \n    # Step 3: Compute posterior probabilities (\u03b3)\n    gamma = (alpha * beta) / np.sum(alpha * beta, axis=1)[:, np.newaxis]\n    \n    # Return the posterior probabilities for time step t, rounded to 4 decimal places\n    return [round(x, 4) for x in gamma[t]]\n\n# Example usage:\nhmm = {\n    'pi': np.array([0.6, 0.4]),\n    'A': np.array([[0.7, 0.3], [0.4, 0.6]]),\n    'B': np.array([[0.5, 0.5], [0.3, 0.7]])\n}\nobservations = [0, 1, 0]\nt = 1\nprint(gamma_probabilities(hmm, observations, t))\n```\n\nThis script defines the `gamma_probabilities` function that computes the posterior state probabilities for a given HMM, observation sequence, and time step. The function uses the forward-backward algorithm to calculate the forward and backward probabilities and then combines them to get the posterior probabilities, which are rounded to four decimal places before being returned."}
{"task_id": 555, "completion_id": 0, "completion": "To implement the DBSCAN algorithm from scratch, we need to follow the steps outlined in the task description. We will use the `numpy` library for efficient numerical operations and `collections.deque` for the breadth-first search (BFS) queue. Here is the complete implementation:\n\n```python\nimport numpy as np\nfrom collections import deque\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    n_samples = data.shape[0]\n    labels = [-1] * n_samples  # Initialize all labels as noise (-1)\n    cluster_id = 0  # Start cluster numbering from 1\n\n    # Step 1: Compute every pairwise Euclidean distance\n    distances = np.linalg.norm(data[:, np.newaxis] - data, axis=2)\n\n    # Step 2: Build the neighborhood list for each sample using the supplied \u03b5\n    neighborhoods = [np.where(distances[i] <= eps)[0] for i in range(n_samples)]\n\n    # Step 3: Identify core points (|neighborhood| \u2265 min_samples)\n    core_points = [i for i, neighbors in enumerate(neighborhoods) if len(neighbors) >= min_samples]\n\n    # Step 4: Starting with the first unlabeled core point, expand a cluster with BFS\n    for point in core_points:\n        if labels[point] == -1:  # If the point is unlabeled\n            cluster_id += 1\n            labels[point] = cluster_id\n            queue = deque([point])\n\n            while queue:\n                current_point = queue.popleft()\n                for neighbor in neighborhoods[current_point]:\n                    if labels[neighbor] == -1:  # If the neighbor is unlabeled\n                        labels[neighbor] = cluster_id\n                        if neighbor in core_points:  # If the neighbor is a core point\n                            queue.append(neighbor)\n\n    return labels\n```\n\nThis implementation follows the DBSCAN algorithm closely:\n1. It computes the pairwise Euclidean distances between all points.\n2. It builds a list of neighbors for each point within the specified radius `eps`.\n3. It identifies core points based on the number of neighbors.\n4. It uses BFS to expand clusters starting from the first unlabeled core point.\n5. It labels all points, assigning cluster IDs to core points and their density-reachable neighbors, and `-1` to noise points."}
{"task_id": 561, "completion_id": 0, "completion": "To implement the Expectation-Maximization (EM) algorithm for a Gaussian Mixture Model (GMM), we need to follow these steps:\n\n1. **Initialization**: Randomly initialize the parameters of the Gaussian components (mixture weights, means, and covariance matrices).\n2. **E-step**: Calculate the responsibilities (posterior probabilities) of each sample belonging to each Gaussian component.\n3. **M-step**: Update the parameters of the Gaussian components based on the responsibilities.\n4. **Convergence Check**: Check if the change in mixture weights is smaller than a prescribed tolerance or if the maximum number of iterations is reached.\n5. **Label Assignment**: Assign each sample to the component with the largest posterior probability.\n6. **Sorting**: Sort the components by the first coordinate of their mean in ascending order and re-label the cluster indices accordingly.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\nfrom scipy.stats import multivariate_normal\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    \"\"\"\n    Perform Expectation-Maximization for Gaussian Mixture Model.\n    \n    Parameters:\n    data (np.ndarray): 2-D array of shape (N, D) containing N samples with D features.\n    k (int): Number of Gaussian components.\n    max_iter (int): Maximum number of iterations.\n    epsilon (float): Tolerance for convergence.\n    \n    Returns:\n    list[int]: List of length N containing the final cluster label of each sample.\n    \"\"\"\n    N, D = data.shape\n    \n    # Initialize parameters\n    np.random.seed(0)  # For deterministic results\n    weights = np.ones(k) / k\n    means = data[np.random.choice(N, k, replace=False)]\n    covariances = [np.cov(data.T) for _ in range(k)]\n    \n    for _ in range(max_iter):\n        # E-step: Calculate responsibilities\n        responsibilities = np.zeros((N, k))\n        for i in range(k):\n            responsibilities[:, i] = weights[i] * multivariate_normal.pdf(data, mean=means[i], cov=covariances[i])\n        responsibilities /= responsibilities.sum(axis=1, keepdims=True)\n        \n        # M-step: Update parameters\n        new_weights = responsibilities.sum(axis=0) / N\n        new_means = np.dot(responsibilities.T, data) / responsibilities.sum(axis=0)[:, np.newaxis]\n        new_covariances = []\n        for i in range(k):\n            diff = data - new_means[i]\n            new_covariances.append(np.dot(responsibilities[:, i] * diff.T, diff) / responsibilities[:, i].sum())\n        \n        # Check for convergence\n        if np.linalg.norm(new_weights - weights) < epsilon:\n            break\n        \n        weights = new_weights\n        means = new_means\n        covariances = new_covariances\n    \n    # Assign each sample to the component with the largest posterior probability\n    labels = np.argmax(responsibilities, axis=1)\n    \n    # Sort components by the first coordinate of their mean in ascending order\n    sorted_indices = np.argsort(means[:, 0])\n    sorted_labels = np.zeros_like(labels)\n    for i, idx in enumerate(sorted_indices):\n        sorted_labels[labels == idx] = i\n    \n    return sorted_labels.tolist()\n```\n\nThis script initializes the parameters, iterates through the E-step and M-step, checks for convergence, assigns labels, and sorts the components to ensure deterministic output."}
{"task_id": 562, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    N = data.shape[0]\n    if n_cluster == 1:\n        return [0] * N\n\n    # Step 1: Build a fully-connected similarity graph using the Gaussian kernel\n    pairwise_distances = np.sum(data**2, axis=1, keepdims=True) + np.sum(data**2, axis=1) - 2 * np.dot(data, data.T)\n    W = np.exp(-gamma * pairwise_distances)\n\n    # Step 2: Construct the un-normalised Laplacian L = D - W\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n\n    if method == 'normalized':\n        D_inv_sqrt = np.diag(1.0 / np.sqrt(np.diag(D)))\n        L = np.dot(np.dot(D_inv_sqrt, L), D_inv_sqrt)\n\n    # Step 3: Compute the eigenvectors that correspond to the n_cluster smallest eigen-values\n    eigenvalues, eigenvectors = np.linalg.eigh(L)\n    eigenvectors = eigenvectors[:, :n_cluster]\n\n    if method == 'normalized':\n        eigenvectors = eigenvectors / np.linalg.norm(eigenvectors, axis=0)\n\n    # Step 4: Run k-means in the eigenvector space to obtain final cluster labels\n    centroids = eigenvectors[:n_cluster]\n    labels = np.zeros(N, dtype=int)\n\n    for _ in range(100):  # Maximum number of iterations for k-means\n        old_labels = labels.copy()\n        distances = np.linalg.norm(eigenvectors[:, np.newaxis] - centroids, axis=2)\n        labels = np.argmin(distances, axis=1)\n\n        if np.array_equal(labels, old_labels):\n            break\n\n        for i in range(n_cluster):\n            centroids[i] = np.mean(eigenvectors[labels == i], axis=0)\n\n    # Relabel clusters so that the cluster containing the smallest original index gets label 0, the next one 1, etc.\n    sorted_indices = np.argsort(np.argmax(labels == np.arange(n_cluster)[:, np.newaxis], axis=1))\n    relabel_map = {old_label: new_label for new_label, old_label in enumerate(sorted_indices)}\n    labels = [relabel_map[label] for label in labels]\n\n    return labels\n```"}
{"task_id": 563, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N, d = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n    \n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.sum(alpha * y_data * G[:, i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n    \n    w = np.round(np.sum(alpha[:, np.newaxis] * y_data[:, np.newaxis] * X_data, axis=0), 4).tolist()\n    b = np.round(b, 4)\n    \n    return w, b\n\n# Example usage\nif __name__ == \"__main__\":\n    X_data = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\n    y_data = np.array([-1, -1, 1, 1])\n    w, b = perceptron_dual_train(X_data, y_data)\n    print(\"Weight vector:\", w)\n    print(\"Bias term:\", b)\n```\n\nThis script defines the `perceptron_dual_train` function that implements the dual-form perceptron learning algorithm as specified. It includes the necessary steps to compute the weight vector and bias term, and rounds the results to 4 decimal places as required. The example usage at the end demonstrates how to call the function with a sample dataset."}
{"task_id": 564, "completion_id": 0, "completion": "To solve the given task, we need to implement the `predict_sample` function that traverses a decision tree based on the type of task (classification or regression) and the provided features. The function will recursively traverse the tree until it reaches a leaf node and returns the prediction stored in that leaf.\n\nHere's a step-by-step breakdown of the implementation:\n\n1. **Check if the current node is a leaf**: If the node has a `y` attribute, return the value of `y`.\n2. **Classification Tree Traversal**:\n   - If the node has a `label` attribute, inspect the feature at the index specified by `label`.\n   - Find the first child whose `x` attribute matches the inspected feature value.\n   - If no child matches, default to the second child.\n3. **Regression Tree Traversal**:\n   - If the node has a `label` attribute, inspect the feature at the index specified by `label`.\n   - Compare the feature value with the split point `s`.\n   - If the feature value is less than or equal to `s`, continue with the first child.\n   - Otherwise, continue with the second child.\n\nHere is the complete Python script implementing the `predict_sample` function:\n\n```python\nclass Node:\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label\n        self.x = x\n        self.s = s\n        self.y = y\n        self.child = child if child is not None else []\n\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n    \n    if task_type == 'classification':\n        feature_value = features[root.label]\n        for child in root.child:\n            if child.x == feature_value:\n                return predict_sample(child, features, task_type)\n        # Default to the second child if no match is found\n        return predict_sample(root.child[1], features, task_type)\n    elif task_type == 'regression':\n        feature_value = features[root.label]\n        if feature_value <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)\n\n# Example usage:\n# root = Node(label=0, child=[Node(y=1), Node(y=2)])\n# features = [0.5]\n# task_type = 'regression'\n# print(predict_sample(root, features, task_type))  # Output: 1\n```\n\nThis script defines the `Node` class and the `predict_sample` function, which handles both classification and regression tasks as described. The function recursively traverses the tree based on the type of task and the feature values, returning the prediction stored in the appropriate leaf node."}
{"task_id": 565, "completion_id": 0, "completion": "To solve this task, we need to implement the `choose_best_feature` function that calculates the information gain for each feature and returns the feature with the maximum information gain. The steps involved are:\n\n1. Calculate the entropy of the label distribution `H(y)`.\n2. For each feature, calculate the conditional entropy `H(y|A)`.\n3. Compute the information gain for each feature as `IG(A) = H(y) - H(y|A)`.\n4. Return the feature index with the maximum information gain, and the gain itself rounded to 6 decimal places.\n\nHere is the complete implementation:\n\n```python\nimport numpy as np\nimport math\n\ndef entropy(labels):\n    \"\"\"Calculate the entropy of a label distribution.\"\"\"\n    value, counts = np.unique(labels, return_counts=True)\n    probabilities = counts / counts.sum()\n    return -np.sum(probabilities * np.log2(probabilities))\n\ndef conditional_entropy(X, y):\n    \"\"\"Calculate the conditional entropy H(y|X).\"\"\"\n    total_entropy = 0\n    total_samples = X.shape[0]\n    for value in np.unique(X):\n        subset_y = y[X == value]\n        subset_entropy = entropy(subset_y)\n        total_entropy += (subset_y.size / total_samples) * subset_entropy\n    return total_entropy\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    # Calculate the entropy of the label distribution\n    H_y = entropy(y)\n    \n    # Initialize variables to store the best feature and its information gain\n    best_feature_index = 0\n    max_information_gain = -1\n    \n    # Iterate over each feature to calculate information gain\n    for feature_index in range(X.shape[1]):\n        H_y_given_A = conditional_entropy(X[:, feature_index], y)\n        information_gain = H_y - H_y_given_A\n        \n        # Update the best feature and its information gain if necessary\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = feature_index\n    \n    return (best_feature_index, round(max_information_gain, 6))\n\n# Example usage:\n# X = np.array([[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 1, 1]])\n# y = np.array([0, 1, 0, 1])\n# print(choose_best_feature(X, y))\n```\n\nThis script defines the `choose_best_feature` function that calculates the information gain for each feature and returns the feature with the maximum information gain. The `entropy` and `conditional_entropy` helper functions are used to compute the necessary entropies."}
{"task_id": 566, "completion_id": 0, "completion": "To implement the mini Isolation Forest for outlier detection, we need to follow the steps outlined in the task description. We will start by defining the function `detect_outliers` and then implement the necessary helper functions to build the isolation trees and compute the anomaly scores.\n\nHere is the step-by-step implementation:\n\n1. **Set the random seed** to ensure reproducibility.\n2. **Define the helper functions** for building the isolation trees and computing the path lengths.\n3. **Build the isolation trees** and compute the average path lengths for each observation.\n4. **Convert the average path lengths to anomaly scores**.\n5. **Identify the outliers** based on the anomaly scores and the given epsilon value.\n\nLet's implement this in Python:\n\n```python\nimport numpy as np\nimport math\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n    \n    n_samples, n_features = data.shape\n    height_limit = math.ceil(math.log2(sample_size))\n    \n    def build_tree(data_subset, depth=0):\n        if depth >= height_limit or len(data_subset) <= 1:\n            return len(data_subset)\n        \n        feature_idx = np.random.randint(n_features)\n        threshold = np.random.uniform(data_subset[:, feature_idx].min(), data_subset[:, feature_idx].max())\n        \n        left_indices = data_subset[:, feature_idx] <= threshold\n        right_indices = data_subset[:, feature_idx] > threshold\n        \n        left_tree = build_tree(data_subset[left_indices], depth + 1)\n        right_tree = build_tree(data_subset[right_indices], depth + 1)\n        \n        return (feature_idx, threshold, left_tree, right_tree)\n    \n    def path_length(tree, x, depth=0):\n        if isinstance(tree, int):\n            return depth + c(tree)\n        \n        feature_idx, threshold, left_tree, right_tree = tree\n        if x[feature_idx] <= threshold:\n            return path_length(left_tree, x, depth + 1)\n        else:\n            return path_length(right_tree, x, depth + 1)\n    \n    def c(n):\n        if n == 1:\n            return 0\n        return 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n\n    \n    def compute_scores(data, trees):\n        scores = np.zeros(n_samples)\n        for tree in trees:\n            for i, x in enumerate(data):\n                scores[i] += path_length(tree, x)\n        scores /= n_trees\n        scores = 2 ** (-scores / (2 * math.log(n_samples - 1) - 2 * (n_samples - 1) / n_samples))\n        return scores\n    \n    trees = []\n    for _ in range(n_trees):\n        if sample_size >= n_samples:\n            sample = data\n        else:\n            sample = data[np.random.choice(n_samples, sample_size, replace=False)]\n        trees.append(build_tree(sample))\n    \n    scores = compute_scores(data, trees)\n    threshold = np.percentile(scores, (1 - epsilon) * 100)\n    outliers = np.where(scores > threshold)[0]\n    \n    return sorted(outliers.tolist())\n```\n\nThis implementation follows the steps outlined in the task description. It builds the isolation trees, computes the path lengths, converts them to anomaly scores, and identifies the outliers based on the given epsilon value."}
{"task_id": 568, "completion_id": 0, "completion": "To implement the Maximum Entropy (MaxEnt) classifier using the Generalized Iterative Scaling (GIS) algorithm, we need to follow these steps:\n\n1. **Build the empirical distributions**: This involves counting the occurrences of each feature-value pair for each label in the training data.\n2. **Iteratively update the weight vector**: We will use the GIS algorithm to update the weights until the largest absolute update is smaller than `epsilon` or the number of iterations reaches `n_iter`.\n3. **Predict the labels**: For each test sample, we will compute the conditional probability for each label and return the label with the highest probability.\n\nHere is the complete implementation:\n\n```python\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    # Step 1: Build the empirical distributions\n    feature_values = defaultdict(lambda: defaultdict(int))\n    label_counts = defaultdict(int)\n    for x, y in zip(X_train, y_train):\n        for feature_index, feature_value in enumerate(x):\n            feature_values[(feature_index, feature_value)][y] += 1\n        label_counts[y] += 1\n    \n    # Step 2: Initialize weights and iterate to update them\n    weights = defaultdict(float)\n    for _ in range(n_iter):\n        max_update = 0\n        for (feature_index, feature_value), label_counts in feature_values.items():\n            for label, count in label_counts.items():\n                empirical_prob = count / label_counts[label]\n                model_prob = math.exp(sum(weights[(feature_index, feature_value, y)] for y in label_counts)) / sum(math.exp(sum(weights[(feature_index, feature_value, y)] for y in label_counts)) for y in label_counts)\n                update = math.log(empirical_prob / model_prob)\n                weights[(feature_index, feature_value, label)] += update\n                max_update = max(max_update, abs(update))\n        if max_update < epsilon:\n            break\n    \n    # Step 3: Predict the labels for the test set\n    predictions = []\n    for x in X_test:\n        label_probs = defaultdict(float)\n        for label in label_counts:\n            prob = 0\n            for feature_index, feature_value in enumerate(x):\n                prob += weights[(feature_index, feature_value, label)]\n            label_probs[label] = math.exp(prob)\n        predictions.append(max(label_probs, key=label_probs.get))\n    \n    return predictions\n```\n\n### Explanation:\n1. **Empirical Distributions**: We count the occurrences of each feature-value pair for each label and the total occurrences of each label.\n2. **Weight Updates**: We initialize the weights to zero and iteratively update them using the GIS algorithm. The update is based on the difference between the empirical and model probabilities.\n3. **Predictions**: For each test sample, we compute the conditional probability for each label using the learned weights and return the label with the highest probability.\n\nThis implementation ensures that the model is trained using the GIS algorithm and makes predictions based on the learned weights."}
{"task_id": 569, "completion_id": 0, "completion": "To solve the given task, we need to follow these steps:\n\n1. Parse the input data to extract all the words from each document.\n2. Count the number of documents in which each word appears.\n3. Calculate the document-frequency ratio for each word by dividing the count by the total number of documents.\n4. Sort the words based on their document-frequency ratio in descending order.\n5. Create a set of the `cut_off` most common words, or all words if `cut_off` is `None`.\n6. Return the list of (word, ratio) pairs and the set of most common words.\n\nHere is the Python code that implements the above steps:\n\n```python\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    # Count the number of documents each word appears in\n    word_doc_count = Counter()\n    for _, words in data:\n        word_doc_count.update(set(words))\n\n    # Calculate the document-frequency ratio for each word\n    total_docs = len(data)\n    word_freq_ratios = [(word, round(count / total_docs, 4)) for word, count in word_doc_count.items()]\n\n    # Sort the words based on their document-frequency ratio in descending order\n    word_freq_ratios.sort(key=lambda x: x[1], reverse=True)\n\n    # Create a set of the cut_off most common words, or all words if cut_off is None\n    most_common_words = set(word for word, _ in word_freq_ratios[:cut_off]) if cut_off is not None else set(word for word, _ in word_freq_ratios)\n\n    return word_freq_ratios, most_common_words\n```\n\nThis function should meet the requirements of the task, including handling the `cut_off` parameter correctly and rounding the ratios to four decimal places."}
{"task_id": 571, "completion_id": 0, "completion": "To solve the given task, we need to implement the function `compute_svm_parameters` that computes the weight vector `w` and the bias term `b` for a linear SVM using the provided formulas. We will use NumPy for matrix operations and ensure that the results are rounded to 4 decimal places.\n\nHere is the step-by-step implementation:\n\n1. **Import necessary libraries**: We need `numpy` for array operations.\n2. **Compute the weight vector `w`**: Using the formula $\\mathbf{w} = X^\\top(\\boldsymbol{\\alpha} \\odot \\mathbf{y})$.\n3. **Compute the bias term `b`**: Using the formula $b = \\frac{1}{n}\\sum_{i=1}^{n}\\bigl(y_i - \\mathbf{w}^\\top \\mathbf{x}_i\\bigr)$.\n4. **Round the results**: Ensure that `w` and `b` are rounded to 4 decimal places.\n5. **Return the results**: Return `w` as a list and `b` as a float.\n\nHere is the complete Python script:\n\n```python\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           \u22121).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute the weight vector w\n    w = np.dot(X.T, alpha * y)\n    \n    # Compute the bias term b\n    b = np.mean(y - np.dot(X, w))\n    \n    # Round the results to 4 decimal places\n    w_rounded = np.round(w, 4).tolist()\n    b_rounded = np.round(b, 4)\n    \n    return w_rounded, b_rounded\n\n# Example usage:\n# X = np.array([[1, 2], [2, 3], [3, 4]])\n# y = np.array([1, -1, 1])\n# alpha = np.array([0.5, 0.2, 0.3])\n# w_list, b = compute_svm_parameters(X, y, alpha)\n# print(w_list, b)\n```\n\nThis script defines the function `compute_svm_parameters` which takes the training matrix `X`, the label vector `y`, and the Lagrange multipliers `alpha` as inputs, and returns the weight vector `w` and the bias term `b` as specified."}
{"task_id": 572, "completion_id": 0, "completion": "To implement the Local Outlier Factor (LOF) algorithm from scratch, we will follow the steps outlined in the task description. We will use basic Python and `numpy` for numerical operations. Here is the step-by-step implementation:\n\n1. Compute the full pair-wise Euclidean distance matrix.\n2. For every sample, obtain its k-distance and the index list of its k nearest neighbors.\n3. Define the reachability distance between two points.\n4. Calculate the Local Reachability Density (LRD) for each sample.\n5. Compute the Local Outlier Factor (LOF) for each sample.\n6. Return the list of LOF scores and the indices of samples whose LOF score is strictly larger than `epsilon`.\n\nHere is the complete Python script:\n\n```python\nimport numpy as np\n\ndef euclidean_distance(p1, p2):\n    \"\"\"Compute the Euclidean distance between two points.\"\"\"\n    return np.sqrt(np.sum((p1 - p2) ** 2))\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    n_samples, n_features = data.shape\n    distances = np.zeros((n_samples, n_samples))\n    \n    # Step 1: Compute the full pair-wise Euclidean distance matrix\n    for i in range(n_samples):\n        for j in range(i, n_samples):\n            distances[i, j] = euclidean_distance(data[i], data[j])\n            distances[j, i] = distances[i, j]\n    \n    # Step 2: For every sample, obtain its k-distance and the index list of its k nearest neighbors\n    k_distances = np.zeros(n_samples)\n    k_nearest_neighbors = [None] * n_samples\n    for i in range(n_samples):\n        sorted_indices = np.argsort(distances[i])\n        k_nearest_neighbors[i] = sorted_indices[1:k+1]\n        k_distances[i] = distances[i, sorted_indices[k]]\n    \n    # Step 3: Define the reachability distance between two points\n    reachability_distances = np.zeros((n_samples, n_samples))\n    for i in range(n_samples):\n        for j in range(n_samples):\n            reachability_distances[i, j] = max(k_distances[j], distances[i, j])\n    \n    # Step 4: Calculate the Local Reachability Density (LRD) for each sample\n    lrd = np.zeros(n_samples)\n    for i in range(n_samples):\n        lrd[i] = k / np.sum(reachability_distances[i, k_nearest_neighbors[i]])\n    \n    # Step 5: Compute the Local Outlier Factor (LOF) for each sample\n    lof_scores = np.zeros(n_samples)\n    for i in range(n_samples):\n        lof_scores[i] = np.sum(lrd[k_nearest_neighbors[i]]) / (k * lrd[i])\n    \n    # Round every LOF score to the nearest 4th decimal place\n    lof_scores = np.round(lof_scores, 4)\n    \n    # Step 6: Return the list of LOF scores and the indices of samples whose LOF score is strictly larger than epsilon\n    outlier_indices = np.where(lof_scores > epsilon)[0].tolist()\n    \n    return (lof_scores.tolist(), outlier_indices)\n\n# Example usage:\n# data = np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])\n# k = 2\n# epsilon = 1.5\n# print(local_outlier_factor(data, k, epsilon))\n```\n\nThis script defines the `local_outlier_factor` function that computes the LOF scores for each sample in the dataset and identifies outliers based on the `epsilon` threshold. The function returns a tuple containing the list of LOF scores and the list of indices of samples that are considered outliers."}
{"task_id": 574, "completion_id": 0, "completion": "To solve the given task, we will follow these steps:\n\n1. Import the necessary libraries.\n2. Define the function `generate_data` with the required parameters.\n3. Initialize the random seed if provided.\n4. Loop over each class label `c` from `0` to `m-1`.\n5. For each class, calculate the base position for the square.\n6. Generate the training and validation points for each class.\n7. Append the generated points and their labels to the respective lists.\n8. Convert the lists to NumPy arrays and round the coordinates to 4 decimal places.\n9. Return the generated data as a tuple of NumPy arrays.\n\nHere is the complete Python script:\n\n```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int, n_train: int, n_val: int, seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    \n    X_train, y_train = [], []\n    X_val, y_val = [], []\n    \n    for c in range(m):\n        base = 10 * (c // 2)\n        for _ in range(n_train):\n            x = round(random.uniform(base + 1, base + 9), 4)\n            y = round(random.uniform(base + 1, base + 9), 4)\n            X_train.append([x, y])\n            y_train.append(c)\n        for _ in range(n_val):\n            x = round(random.uniform(base + 1, base + 9), 4)\n            y = round(random.uniform(base + 1, base + 9), 4)\n            X_val.append([x, y])\n            y_val.append(c)\n    \n    X_train = np.array(X_train)\n    X_val = np.array(X_val)\n    y_train = np.array(y_train)\n    y_val = np.array(y_val)\n    \n    return X_train, X_val, y_train, y_val\n\n# Example usage:\nm = 3\nn_train = 5\nn_val = 2\nseed = 42\nX_train, X_val, y_train, y_val = generate_data(m, n_train, n_val, seed)\nprint(\"X_train:\", X_train)\nprint(\"X_val:\", X_val)\nprint(\"y_train:\", y_train)\nprint(\"y_val:\", y_val)\n```\n\nThis script defines the `generate_data` function that generates synthetic 2-D data for a specified number of classes, with a given number of training and validation points per class. The function ensures that the coordinates are rounded to 4 decimal places and that the data generation is reproducible if a seed is provided."}
{"task_id": 579, "completion_id": 0, "completion": "```python\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    m, d = X.shape\n    # Initialize the centres as the first k points\n    centres = X[:k].copy()\n    labels = np.zeros(m, dtype=int)\n    \n    for _ in range(max_iters):\n        # Assignment step\n        new_labels = np.argmin(np.linalg.norm(X[:, np.newaxis] - centres, axis=2), axis=1)\n        if np.array_equal(labels, new_labels):\n            break\n        labels = new_labels\n        \n        # Update step\n        for i in range(k):\n            if np.any(labels == i):\n                centres[i] = np.mean(X[labels == i], axis=0)\n    \n    # Round the centres to 4 decimal places\n    rounded_centres = np.round(centres, 4).tolist()\n    return labels.tolist(), rounded_centres\n\n# Example usage\nX = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\nk = 2\nlabels, centres = kmeans(X, k)\nprint(\"Labels:\", labels)\nprint(\"Centres:\", centres)\n```\n\nThis script implements the K-Means clustering algorithm from scratch, following the steps outlined in the task description. It uses NumPy for efficient numerical operations and ensures that the results are deterministic by using the first `k` points as initial centres. The centres are rounded to 4 decimal places as required."}
{"task_id": 581, "completion_id": 0, "completion": "To implement the Elastic-Net regularized linear regression using batch gradient descent, we need to follow these steps:\n\n1. Initialize the weights and bias to zero.\n2. For each iteration, compute the predictions and residuals.\n3. Calculate the gradients for the weights and bias.\n4. Update the weights and bias using the gradients and the learning rate.\n5. After all iterations, return the learned weights and bias, rounded to four decimal places.\n\nHere is the complete Python script implementing the above steps:\n\n```python\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Your task is to complete this function so that it performs batch gradient\n    descent for the given number of iterations and returns the learned weight\n    vector and bias.  All returned values must be rounded to 4 decimal places.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    m, n = X.shape\n    w = np.zeros(n)\n    b = 0.0\n\n    if learning_rate == 0 or iterations == 0:\n        return [round(0.0, 4)] * n, round(0.0, 4)\n\n    for _ in range(iterations):\n        y_pred = np.dot(X, w) + b\n        residuals = y - y_pred\n\n        # Compute gradients\n        grad_w = -2 * np.dot(X.T, residuals) / m\n        grad_b = -2 * np.sum(residuals) / m\n\n        # Add regularization terms\n        for j in range(n):\n            grad_w[j] += l1_penalty * np.sign(w[j]) + 2 * l2_penalty * w[j]\n\n        # Update parameters\n        w -= learning_rate * grad_w\n        b -= learning_rate * grad_b\n\n    # Round the results to 4 decimal places\n    weights = [round(weight, 4) for weight in w]\n    bias = round(b, 4)\n\n    return weights, bias\n```\n\nThis script defines the `elastic_net_regression` function that performs the specified task. It initializes the weights and bias, computes the predictions and residuals, calculates the gradients, updates the parameters, and finally returns the learned weights and bias rounded to four decimal places."}
{"task_id": 591, "completion_id": 0, "completion": "To solve the given task, we need to implement a forward pass through a fully-connected feed-forward neural network with ReLU activation functions for the hidden layers and a linear activation function for the output layer. The weights are provided in a nested list structure, and we need to ensure that the bias term is correctly handled during the computation.\n\nHere is the self-contained Python script that accomplishes this:\n\n```python\nimport numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    # Convert the input vector to a numpy array and add the bias term\n    x = np.array(x)\n    x = np.insert(x, 0, 1)  # Add the bias term at the beginning\n\n    # Iterate over each layer\n    for layer_weights in weights[:-1]:  # Exclude the last layer\n        # Compute the dot product of the current input and the weights\n        x = np.dot(x, np.array([w[1:] for w in layer_weights]).T)\n        # Add the bias weights\n        x = x + np.array([w[0] for w in layer_weights])\n        # Apply ReLU activation function\n        x = np.maximum(x, 0)\n\n    # Process the last layer (linear activation)\n    last_layer_weights = weights[-1]\n    x = np.dot(x, np.array([w[1:] for w in last_layer_weights]).T)\n    x = x + np.array([w[0] for w in last_layer_weights])\n\n    # Round the output to 4 decimal places\n    x = np.round(x, 4)\n\n    # Return the result\n    if x.size == 1:\n        return float(x)\n    else:\n        return x.tolist()\n\n# Example usage:\nweights = [\n    [[1.0, 0.2, 0.3], [1.0, 0.4, 0.5]],  # Layer 0\n    [[1.0, 0.6, 0.7], [1.0, 0.8, 0.9]],  # Layer 1\n    [[1.0, 1.0, 1.1]]                    # Output layer\n]\nx = [0.5, 0.6]\nprint(neural_net_predict(weights, x))\n```\n\nThis script defines the `neural_net_predict` function that takes the weights and an input vector `x`, performs the forward pass through the network, and returns the prediction. The ReLU activation is applied to all hidden layers, and the output layer uses a linear activation. The result is rounded to four decimal places as required."}
{"task_id": 595, "completion_id": 0, "completion": "To solve the given task, we will follow the steps outlined in the description. We will implement the K-Means clustering algorithm from scratch, ensuring that we initialize centroids, assign samples to the nearest centroid, update centroids, and stop early if the centroids' movement is less than a specified threshold. Finally, we will sort the centroids and round them to 4 decimal places.\n\nHere is the step-by-step implementation:\n\n1. **Initialization**: Initialize centroids with the first `k` samples.\n2. **Assignment**: Assign each sample to the nearest centroid.\n3. **Update**: Update centroids to the mean of the samples assigned to them.\n4. **Convergence Check**: Check if the centroids have moved less than `1e-4` in a full iteration.\n5. **Sorting and Rounding**: Sort the centroids and round them to 4 decimal places.\n\nLet's implement this in Python:\n\n```python\nimport numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    # Initialize centroids with the first k samples\n    centroids = X[:k].copy()\n    \n    for _ in range(max_iters):\n        # Assign each sample to the nearest centroid\n        distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2) ** 2\n        labels = np.argmin(distances, axis=1)\n        \n        # Update centroids\n        new_centroids = np.zeros_like(centroids)\n        counts = np.zeros(k)\n        for i in range(k):\n            if np.any(labels == i):\n                new_centroids[i] = np.mean(X[labels == i], axis=0)\n                counts[i] = np.sum(labels == i)\n            else:\n                new_centroids[i] = centroids[i]\n        \n        # Check for convergence\n        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < 1e-4):\n            break\n        \n        centroids = new_centroids\n    \n    # Sort centroids and round to 4 decimal places\n    sorted_centroids = np.round(np.sort(centroids, axis=0), decimals=4)\n    \n    # Convert to list of lists\n    return sorted_centroids.tolist()\n\n# Example usage:\n# X = np.array([[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]])\n# k = 2\n# print(kmeans_centroids(X, k))\n```\n\nThis script defines the `kmeans_centroids` function that performs the K-Means clustering algorithm as specified. It initializes centroids, assigns samples to the nearest centroid, updates centroids, checks for convergence, and finally sorts and rounds the centroids before returning them."}
