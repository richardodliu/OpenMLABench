{"task_id": 1, "completion_id": 0, "solution": "def matrix_dot_vector(a: list[list[int | float]], b: list[int | float]) -> list[int | float]:\n    if not a or not b or len(a[0]) != len(b):\n        return -1\n    result = []\n    for row in a:\n        dot_product = sum((x * y for (x, y) in zip(row, b)))\n        result.append(dot_product)\n    return result"}
{"task_id": 2, "completion_id": 0, "solution": "def transpose_matrix(a: list[list[int | float]]) -> list[list[int | float]]:\n    rows = len(a)\n    cols = len(a[0]) if a else 0\n    transposed = [[0 for _ in range(rows)] for _ in range(cols)]\n    for i in range(rows):\n        for j in range(cols):\n            transposed[j][i] = a[i][j]\n    return transposed"}
{"task_id": 3, "completion_id": 0, "solution": "import numpy as np\ndef reshape_matrix(a: list[list[int | float]], new_shape: tuple[int, int]) -> list[list[int | float]]:\n    a_np = np.array(a)\n    original_size = a_np.size\n    new_size = new_shape[0] * new_shape[1]\n    if original_size != new_size:\n        return []\n    reshaped_np = a_np.reshape(new_shape)\n    reshaped_list = reshaped_np.tolist()\n    return reshaped_list"}
{"task_id": 4, "completion_id": 0, "solution": "from typing import List\nimport numpy as np\ndef calculate_matrix_mean(matrix: List[List[float]], mode: str) -> List[float]:\n    \"\"\"\n    Calculate the mean of a matrix either by row or by column.\n    \n    :param matrix: A list of lists of floats representing the matrix.\n    :param mode: A string indicating whether to calculate the mean by 'row' or 'column'.\n    :return: A list of means according to the specified mode.\n    \"\"\"\n    if mode == 'row':\n        means = [np.mean(row) for row in matrix]\n    elif mode == 'column':\n        transposed_matrix = np.array(matrix).T.tolist()\n        means = [np.mean(col) for col in transposed_matrix]\n    else:\n        raise ValueError(\"Mode must be 'row' or 'column'\")\n    return means\nmatrix = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]"}
{"task_id": 5, "completion_id": 0, "solution": "def scalar_multiply(matrix: list[list[int | float]], scalar: int | float) -> list[list[int | float]]:\n    \"\"\"\n    Multiplies each element of the given matrix by the scalar and returns the resulting matrix.\n    \n    :param matrix: A list of lists representing the matrix.\n    :param scalar: An integer or float representing the scalar value.\n    :return: A new matrix with each element multiplied by the scalar.\n    \"\"\"\n    return [[element * scalar for element in row] for row in matrix]"}
{"task_id": 6, "completion_id": 0, "solution": "import math\ndef calculate_eigenvalues(matrix: list[list[float | int]]) -> list[float]:\n    \"\"\"\n    Calculate the eigenvalues of a 2x2 matrix and return them sorted from highest to lowest.\n    \n    :param matrix: A 2x2 matrix represented as a list of lists.\n    :return: A list containing the eigenvalues, sorted from highest to lowest.\n    \"\"\"\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    A = 1\n    B = -(a + d)\n    C = a * d - b * c\n    discriminant = B ** 2 - 4 * A * C\n    eigenvalue1 = (-B + math.sqrt(discriminant)) / (2 * A)\n    eigenvalue2 = (-B - math.sqrt(discriminant)) / (2 * A)\n    return sorted([eigenvalue1, eigenvalue2], reverse=True)\nmatrix = [[4, 2], [1, 3]]"}
{"task_id": 7, "completion_id": 0, "solution": "import numpy as np\ndef transform_matrix(A: list[list[int | float]], T: list[list[int | float]], S: list[list[int | float]]) -> list[list[int | float]]:\n    A = np.array(A)\n    T = np.array(T)\n    S = np.array(S)\n    if T.shape[0] != T.shape[1] or S.shape[0] != S.shape[1]:\n        return -1\n    det_T = np.linalg.det(T)\n    det_S = np.linalg.det(S)\n    if det_T == 0 or det_S == 0:\n        return -1\n    T_inv = np.linalg.inv(T)\n    transformed_matrix = np.dot(T_inv, np.dot(A, S))\n    transformed_matrix = np.round(transformed_matrix, 4)\n    return transformed_matrix.tolist()\nA = [[1, 2], [3, 4]]\nT = [[1, 0], [0, 1]]\nS = [[1, 0], [0, 1]]"}
{"task_id": 8, "completion_id": 0, "solution": "def inverse_2x2(matrix: list[list[float]]) -> list[list[float]]:\n    if len(matrix) != 2 or len(matrix[0]) != 2 or len(matrix[1]) != 2:\n        raise ValueError('Input matrix must be 2x2')\n    (a, b) = matrix[0]\n    (c, d) = matrix[1]\n    determinant = a * d - b * c\n    if determinant == 0:\n        return None\n    inverse_matrix = [[d / determinant, -b / determinant], [-c / determinant, a / determinant]]\n    return inverse_matrix\nmatrix = [[4, 7], [2, 6]]"}
{"task_id": 9, "completion_id": 0, "solution": "def matrixmul(a: list[list[int | float]], b: list[list[int | float]]) -> list[list[int | float]] | int:\n    if len(a[0]) != len(b):\n        return -1\n    result = [[0 for _ in range(len(b[0]))] for _ in range(len(a))]\n    for i in range(len(a)):\n        for j in range(len(b[0])):\n            for k in range(len(b)):\n                result[i][j] += a[i][k] * b[k][j]\n    return result"}
{"task_id": 10, "completion_id": 0, "solution": "from typing import List\ndef calculate_covariance_matrix(vectors: List[List[float]]) -> List[List[float]]:\n    \"\"\"\n    Calculate the covariance matrix for a given set of vectors.\n    \n    :param vectors: A list of lists, where each inner list represents a feature with its observations.\n    :return: A covariance matrix as a list of lists.\n    \"\"\"\n    means = [sum(vector) / len(vector) for vector in vectors]\n    deviations = [[x - mean for x in vector] for (vector, mean) in zip(vectors, means)]\n    n = len(vectors[0])\n    covariance_matrix = [[sum((a * b for (a, b) in zip(dev1, dev2))) / (n - 1) for dev2 in deviations] for dev1 in deviations]\n    return covariance_matrix\nvectors = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\ncovariance_matrix = calculate_covariance_matrix(vectors)"}
{"task_id": 11, "completion_id": 0, "solution": "import numpy as np\ndef solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:\n    if A.shape[0] != A.shape[1]:\n        raise ValueError('Matrix A must be square.')\n    N = len(b)\n    x = np.zeros_like(b, dtype=np.float64)\n    for _ in range(n):\n        x_new = np.zeros_like(x)\n        for i in range(N):\n            s1 = np.dot(A[i, :i], x[:i])\n            s2 = np.dot(A[i, i + 1:], x[i + 1:])\n            x_new[i] = (b[i] - s1 - s2) / A[i, i]\n        x = x_new\n        x = np.round(x, decimals=4)\n    return x.tolist()\nA = np.array([[4, 1, 2], [3, 5, 1], [1, 1, 3]], dtype=np.float64)\nb = np.array([4, 7, 3], dtype=np.float64)\nn = 25"}
{"task_id": 12, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2_singular_values(A: np.ndarray) -> tuple:\n    \"\"\"\n    Approximates the singular values of a 2x2 matrix A using the characteristic equation.\n    \n    Parameters:\n    A (np.ndarray): A 2x2 matrix.\n    \n    Returns:\n    tuple: A tuple containing the two singular values of A, rounded to 4 decimal places.\n    \"\"\"\n    ATA = np.dot(A.T, A)\n    trace_ATA = np.trace(ATA)\n    det_ATA = np.linalg.det(ATA)\n    a = 1\n    b = -trace_ATA\n    c = det_ATA\n    discriminant = b ** 2 - 4 * a * c\n    lambda1 = (-b + np.sqrt(discriminant)) / (2 * a)\n    lambda2 = (-b - np.sqrt(discriminant)) / (2 * a)\n    sigma1 = np.sqrt(lambda1)\n    sigma2 = np.sqrt(lambda2)\n    sigma1 = round(sigma1, 4)\n    sigma2 = round(sigma2, 4)\n    return (sigma1, sigma2)\nA = np.array([[1, 2], [3, 4]])"}
{"task_id": 13, "completion_id": 0, "solution": "def determinant_3x3(matrix: list[list[int | float]]) -> float:\n    \"\"\"\n    Calculate the determinant of a 3x3 matrix.\n    \"\"\"\n    (a, b, c) = matrix[0]\n    (d, e, f) = matrix[1]\n    (g, h, i) = matrix[2]\n    return a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g)\ndef determinant_4x4(matrix: list[list[int | float]]) -> float:\n    \"\"\"\n    Calculate the determinant of a 4x4 matrix using Laplace's Expansion.\n    \"\"\"\n    det = 0\n    for col in range(4):\n        minor = [row[:col] + row[col + 1:] for row in matrix[1:]]\n        minor_det = determinant_3x3(minor)\n        det += (-1) ** col * matrix[0][col] * minor_det\n    return det"}
{"task_id": 14, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_normal_equation(X: list[list[float]], y: list[float]) -> list[float]:\n    X = np.array(X)\n    y = np.array(y)\n    X = np.c_[np.ones(X.shape[0]), X]\n    theta = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(y)\n    theta = np.round(theta, 4)\n    return theta.tolist()\nX = [[1, 2], [3, 4], [5, 6]]\ny = [2, 4, 6]"}
{"task_id": 15, "completion_id": 0, "solution": "import numpy as np\ndef linear_regression_gradient_descent(X: np.ndarray, y: np.ndarray, alpha: float, iterations: int) -> list:\n    m = len(y)\n    n = X.shape[1]\n    theta = np.zeros(n)\n    for _ in range(iterations):\n        predictions = np.dot(X, theta)\n        errors = predictions - y\n        gradient = np.dot(X.T, errors) / m\n        theta -= alpha * gradient\n    theta_rounded = np.round(theta, 4)\n    return theta_rounded.tolist()"}
{"task_id": 16, "completion_id": 0, "solution": "import numpy as np\ndef feature_scaling(data: np.ndarray) -> (list[list[float]], list[list[float]]):\n    standardized_data = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    standardized_data = np.round(standardized_data, 4)\n    min_max_normalized_data = (data - np.min(data, axis=0)) / (np.max(data, axis=0) - np.min(data, axis=0))\n    min_max_normalized_data = np.round(min_max_normalized_data, 4)\n    standardized_list = standardized_data.tolist()\n    min_max_normalized_list = min_max_normalized_data.tolist()\n    return (standardized_list, min_max_normalized_list)"}
{"task_id": 17, "completion_id": 0, "solution": "import numpy as np\ndef k_means_clustering(points: list[tuple[float, float]], k: int, initial_centroids: list[tuple[float, float]], max_iterations: int) -> list[tuple[float, float]]:\n    points_array = np.array(points)\n    centroids_array = np.array(initial_centroids)\n    for _ in range(max_iterations):\n        distances = np.sqrt(((points_array - centroids_array[:, np.newaxis]) ** 2).sum(axis=2))\n        closest_centroid = np.argmin(distances, axis=0)\n        new_centroids = np.array([points_array[closest_centroid == i].mean(axis=0) for i in range(k)])\n        if np.all(centroids_array == new_centroids):\n            break\n        centroids_array = new_centroids\n    final_centroids = [tuple(np.round(centroid, 4)) for centroid in centroids_array]\n    return final_centroids\npoints = [(1.0, 2.0), (1.5, 1.8), (5.0, 8.0), (8.0, 8.0), (1.0, 0.6), (9.0, 11.0)]\nk = 2\ninitial_centroids = [(1.0, 2.0), (8.0, 8.0)]\nmax_iterations = 100\nfinal_centroids = k_means_clustering(points, k, initial_centroids, max_iterations)"}
{"task_id": 18, "completion_id": 0, "solution": "import numpy as np\ndef k_fold_cross_validation(X: np.ndarray, y: np.ndarray, k=5, shuffle=True, random_seed=None):\n    if random_seed is not None:\n        np.random.seed(random_seed)\n    n_samples = X.shape[0]\n    indices = np.arange(n_samples)\n    if shuffle:\n        np.random.shuffle(indices)\n    fold_size = n_samples // k\n    remainder = n_samples % k\n    start = 0\n    folds = []\n    for i in range(k):\n        end = start + fold_size + (1 if i < remainder else 0)\n        folds.append(indices[start:end])\n        start = end\n    splits = []\n    for i in range(k):\n        test_indices = folds[i]\n        train_indices = np.concatenate(folds[:i] + folds[i + 1:])\n        splits.append((train_indices, test_indices))\n    return splits\nX = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]])\ny = np.array([0, 1, 0, 1, 0, 1])\nsplits = k_fold_cross_validation(X, y, k=3, shuffle=True, random_seed=42)"}
{"task_id": 19, "completion_id": 0, "solution": "import numpy as np\ndef pca(data: np.ndarray, k: int) -> list[list[float]]:\n    standardized_data = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n    covariance_matrix = np.cov(standardized_data, rowvar=False)\n    (eigenvalues, eigenvectors) = np.linalg.eig(covariance_matrix)\n    sorted_indices = np.argsort(eigenvalues)[::-1]\n    top_k_eigenvectors = eigenvectors[:, sorted_indices[:k]]\n    principal_components = top_k_eigenvectors.T.tolist()\n    return [[round(value, 4) for value in component] for component in principal_components]"}
{"task_id": 20, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef entropy(examples, target_attr):\n    \"\"\"Calculate the entropy of the dataset.\"\"\"\n    counts = Counter([example[target_attr] for example in examples])\n    total = len(examples)\n    return -sum((count / total * math.log2(count / total) for count in counts.values()))\ndef information_gain(examples, attribute, target_attr):\n    \"\"\"Calculate the information gain for a given attribute.\"\"\"\n    total_entropy = entropy(examples, target_attr)\n    attribute_values = set([example[attribute] for example in examples])\n    weighted_entropy = 0\n    for value in attribute_values:\n        subset = [example for example in examples if example[attribute] == value]\n        subset_entropy = entropy(subset, target_attr)\n        weighted_entropy += len(subset) / len(examples) * subset_entropy\n    return total_entropy - weighted_entropy\ndef best_attribute(examples, attributes, target_attr):\n    \"\"\"Choose the attribute with the highest information gain.\"\"\"\n    gains = {attr: information_gain(examples, attr, target_attr) for attr in attributes}\n    return max(gains, key=gains.get)\ndef learn_decision_tree(examples: list[dict], attributes: list[str], target_attr: str) -> dict:\n    \"\"\"Learn a decision tree from the given examples and attributes.\"\"\"\n    if len(set([example[target_attr] for example in examples])) == 1:\n        return examples[0][target_attr]\n    if not attributes:\n        return Counter([example[target_attr] for example in examples]).most_common(1)[0][0]\n    best_attr = best_attribute(examples, attributes, target_attr)\n    tree = {best_attr: {}}\n    for value in set([example[best_attr] for example in examples]):\n        subset = [example for example in examples if example[best_attr] == value]\n        if not subset:\n            tree[best_attr][value] = Counter([example[target_attr] for example in examples]).most_common(1)[0][0]\n        else:\n            remaining_attributes = [attr for attr in attributes if attr != best_attr]\n            tree[best_attr][value] = learn_decision_tree(subset, remaining_attributes, target_attr)\n    return tree\nexamples = [{'outlook': 'sunny', 'temperature': 'hot', 'humidity': 'high', 'wind': 'weak', 'play': 'no'}, {'outlook': 'sunny', 'temperature': 'hot', 'humidity': 'high', 'wind': 'strong', 'play': 'no'}, {'outlook': 'overcast', 'temperature': 'hot', 'humidity': 'high', 'wind': 'weak', 'play': 'yes'}, {'outlook': 'rain', 'temperature': 'mild', 'humidity': 'high', 'wind': 'weak', 'play': 'yes'}, {'outlook': 'rain', 'temperature': 'cool', 'humidity': 'normal', 'wind': 'weak', 'play': 'yes'}, {'outlook': 'rain', 'temperature': 'cool', 'humidity': 'normal', 'wind': 'strong', 'play': 'no'}, {'outlook': 'overcast', 'temperature': 'cool', 'humidity': 'normal', 'wind': 'strong', 'play': 'yes'}, {'outlook': 'sunny', 'temperature': 'mild', 'humidity': 'high', 'wind': 'weak', 'play': 'no'}, {'outlook': 'sunny', 'temperature': 'cool', 'humidity': 'normal', 'wind': 'weak', 'play': 'yes'}, {'outlook': 'rain', 'temperature': 'mild', 'humidity': 'normal', 'wind': 'weak', 'play': 'yes'}, {'outlook': 'sunny', 'temperature': 'mild', 'humidity': 'normal', 'wind': 'strong', 'play': 'yes'}, {'outlook': 'overcast', 'temperature': 'mild', 'humidity': 'high', 'wind': 'strong', 'play': 'yes'}, {'outlook': 'overcast', 'temperature': 'hot', 'humidity': 'normal', 'wind': 'weak', 'play': 'yes'}, {'outlook': 'rain', 'temperature': 'mild', 'humidity': 'high', 'wind': 'strong', 'play': 'no'}]\nattributes = ['outlook', 'temperature', 'humidity', 'wind']\ntarget_attr = 'play'\ntree = learn_decision_tree(examples, attributes, target_attr)"}
{"task_id": 21, "completion_id": 0, "solution": "import numpy as np\ndef kernel_matrix(data, kernel='linear', sigma=1.0):\n    n_samples = data.shape[0]\n    kernel_matrix = np.zeros((n_samples, n_samples))\n    if kernel == 'linear':\n        kernel_matrix = np.dot(data, data.T)\n    elif kernel == 'rbf':\n        for i in range(n_samples):\n            for j in range(n_samples):\n                diff = data[i] - data[j]\n                kernel_matrix[i, j] = np.exp(-np.dot(diff, diff) / (2 * sigma ** 2))\n    return kernel_matrix\ndef pegasos_kernel_svm(data: np.ndarray, labels: np.ndarray, kernel='linear', lambda_val=0.01, iterations=100, sigma=1.0):\n    n_samples = data.shape[0]\n    alphas = np.zeros(n_samples)\n    bias = 0.0\n    kernel_matrix = kernel_matrix(data, kernel, sigma)\n    for t in range(1, iterations + 1):\n        step_size = 1.0 / (lambda_val * t)\n        for i in range(n_samples):\n            prediction = np.sum(alphas * labels * kernel_matrix[i]) + bias\n            if labels[i] * prediction < 1:\n                alphas[i] = (1 - step_size * lambda_val) * alphas[i] + step_size * labels[i]\n            else:\n                alphas[i] = (1 - step_size * lambda_val) * alphas[i]\n        bias = bias + step_size * (1 - labels * (np.sum(alphas * labels * kernel_matrix, axis=1) + bias))\n    alphas = np.round(alphas, 4)\n    bias = np.round(bias, 4)\n    return (alphas.tolist(), bias.tolist())"}
{"task_id": 22, "completion_id": 0, "solution": "import math\ndef sigmoid(z: float) -> float:\n    sigmoid_value = 1 / (1 + math.exp(-z))\n    return round(sigmoid_value, 4)"}
{"task_id": 23, "completion_id": 0, "solution": "import math\ndef softmax(scores: list[float]) -> list[float]:\n    exp_scores = [math.exp(score) for score in scores]\n    sum_exp_scores = sum(exp_scores)\n    softmax_values = [round(exp_score / sum_exp_scores, 4) for exp_score in exp_scores]\n    return softmax_values\nscores = [1.0, 2.0, 3.0]"}
{"task_id": 24, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef sigmoid(x: float) -> float:\n    \"\"\"Sigmoid activation function.\"\"\"\n    return 1 / (1 + math.exp(-x))\ndef single_neuron_model(features: list[list[float]], labels: list[int], weights: list[float], bias: float) -> (list[float], float):\n    \"\"\"\n    Simulates a single neuron with a sigmoid activation function for binary classification.\n    \n    :param features: List of feature vectors.\n    :param labels: List of true binary labels.\n    :param weights: List of weights for each feature.\n    :param bias: Bias term.\n    :return: A tuple containing the predicted probabilities and the mean squared error.\n    \"\"\"\n    predictions = []\n    for feature_vector in features:\n        weighted_sum = sum((w * f for (w, f) in zip(weights, feature_vector))) + bias\n        prediction = sigmoid(weighted_sum)\n        predictions.append(prediction)\n    predictions_np = np.array(predictions)\n    labels_np = np.array(labels)\n    mse = np.mean((predictions_np - labels_np) ** 2)\n    predictions_rounded = np.round(predictions_np, 4).tolist()\n    mse_rounded = np.round(mse, 4)\n    return (predictions_rounded, mse_rounded)\nfeatures = [[0.5, 0.2], [0.8, 0.1], [0.1, 0.9]]\nlabels = [1, 0, 1]\nweights = [0.4, 0.6]\nbias = 0.1"}
{"task_id": 25, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\ndef train_neuron(features: np.ndarray, labels: np.ndarray, initial_weights: np.ndarray, initial_bias: float, learning_rate: float, epochs: int) -> (np.ndarray, float, list[float]):\n    weights = initial_weights\n    bias = initial_bias\n    mse_values = []\n    for epoch in range(epochs):\n        predictions = sigmoid(np.dot(features, weights) + bias)\n        mse = np.mean((predictions - labels) ** 2)\n        mse_values.append(round(mse, 4))\n        error = predictions - labels\n        gradient_weights = np.dot(features.T, error) * predictions * (1 - predictions)\n        gradient_bias = np.sum(error * predictions * (1 - predictions))\n        weights -= learning_rate * gradient_weights\n        bias -= learning_rate * gradient_bias\n    return (weights.tolist(), round(bias, 4), mse_values)\nfeatures = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\nlabels = np.array([0, 1, 1, 0])\ninitial_weights = np.array([0.5, -0.5])\ninitial_bias = 0.0\nlearning_rate = 0.1\nepochs = 1000"}
{"task_id": 26, "completion_id": 0, "solution": "class Value:\n\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda : None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __repr__(self):\n        return f'Value(data={self.data})'\n\n    def __add__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data + other.data, (self, other), '+')\n\n        def _backward():\n            self.grad += out.grad\n            other.grad += out.grad\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data * other.data, (self, other), '*')\n\n        def _backward():\n            self.grad += other.data * out.grad\n            other.grad += self.data * out.grad\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')\n\n        def _backward():\n            self.grad += (out.data > 0) * out.grad\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1\n        for node in reversed(topo):\n            node._backward()"}
{"task_id": 27, "completion_id": 0, "solution": "import numpy as np\ndef transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n    \"\"\"\n    Computes the transformation matrix P from basis B to C.\n    \n    Parameters:\n    B (list of list of int): Basis vectors in basis B.\n    C (list of list of int): Basis vectors in basis C.\n    \n    Returns:\n    list of list of float: The transformation matrix P from B to C.\n    \"\"\"\n    B_matrix = np.array(B)\n    C_matrix = np.array(C)\n    C_inv = np.linalg.inv(C_matrix)\n    P = np.dot(C_inv, B_matrix)\n    P_rounded = np.round(P, decimals=4)\n    return P_rounded.tolist()\nB = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\nC = [[1, 1, 0], [0, 1, 1], [1, 0, 1]]\nP = transform_basis(B, C)"}
{"task_id": 28, "completion_id": 0, "solution": "import numpy as np\ndef svd_2x2(A: np.ndarray) -> tuple:\n    ATA = np.dot(A.T, A)\n    (eigenvalues, eigenvectors) = np.linalg.eigh(ATA)\n    singular_values = np.sqrt(eigenvalues)\n    S = np.diag(singular_values)\n    V = eigenvectors\n    U = np.zeros_like(A)\n    for i in range(2):\n        if singular_values[i] != 0:\n            U[:, i] = np.dot(A, V[:, i]) / singular_values[i]\n        elif i == 0:\n            U[:, i] = np.array([1, 0])\n        else:\n            U[:, i] = np.array([0, 1])\n    (U, _) = np.linalg.qr(U)\n    U = np.round(U, 4).tolist()\n    S = np.round(S, 4).tolist()\n    V = np.round(V, 4).tolist()\n    return (U, S, V)\nA = np.array([[1, 2], [3, 4]])"}
{"task_id": 29, "completion_id": 0, "solution": "import numpy as np\ndef shuffle_data(X, y, seed=None):\n    \"\"\"\n    Shuffles the samples in two numpy arrays, X and y, while maintaining the corresponding order between them.\n    \n    Parameters:\n    X (numpy.ndarray): The feature dataset.\n    y (numpy.ndarray): The label dataset.\n    seed (int, optional): The seed for the random number generator for reproducibility.\n    \n    Returns:\n    tuple: A tuple containing two lists, the shuffled X and y.\n    \"\"\"\n    assert len(X) == len(y), 'X and y must have the same length'\n    if seed is not None:\n        np.random.seed(seed)\n    combined = np.c_[X.reshape(len(X), -1), y.reshape(len(y), -1)]\n    np.random.shuffle(combined)\n    shuffled_X = combined[:, :-1]\n    shuffled_y = combined[:, -1]\n    return (shuffled_X.tolist(), shuffled_y.tolist())\nX = np.array([[1, 2], [3, 4], [5, 6]])\ny = np.array([7, 8, 9])"}
{"task_id": 30, "completion_id": 0, "solution": "import numpy as np\ndef batch_iterator(X, y=None, batch_size=64):\n    \"\"\"\n    Yields batches of X and optionally y.\n    \n    Parameters:\n    X (np.ndarray): The input data.\n    y (np.ndarray, optional): The target data. Defaults to None.\n    batch_size (int): The size of each batch. Defaults to 64.\n    \n    Yields:\n    list or tuple: A batch of X, or a tuple of batches (X, y) if y is provided.\n    \"\"\"\n    num_samples = X.shape[0]\n    num_batches = int(np.ceil(num_samples / batch_size))\n    for i in range(num_batches):\n        start_idx = i * batch_size\n        end_idx = min(start_idx + batch_size, num_samples)\n        X_batch = X[start_idx:end_idx].tolist()\n        if y is not None:\n            y_batch = y[start_idx:end_idx].tolist()\n            yield (X_batch, y_batch)\n        else:\n            yield X_batch"}
{"task_id": 31, "completion_id": 0, "solution": "import numpy as np\ndef divide_on_feature(X, feature_i, threshold):\n    \"\"\"\n    Divides the dataset X into two subsets based on whether the value of the specified feature is\n    greater than or equal to a given threshold.\n\n    Parameters:\n    X (numpy.ndarray): The dataset.\n    feature_i (int): The index of the feature to divide the dataset on.\n    threshold (float): The threshold value to compare the feature values against.\n\n    Returns:\n    tuple: Two lists representing the subsets of the dataset.\n    \"\"\"\n    condition = X[:, feature_i] >= threshold\n    subset1 = X[condition].tolist()\n    subset2 = X[~condition].tolist()\n    return (subset1, subset2)"}
{"task_id": 32, "completion_id": 0, "solution": "import numpy as np\nfrom itertools import combinations_with_replacement\ndef polynomial_features(X, degree):\n    (n_samples, n_features) = X.shape\n    indices = list(combinations_with_replacement(range(n_features), degree))\n    n_combinations = len(indices)\n    poly_features = np.empty((n_samples, n_combinations))\n    for (i, index_combination) in enumerate(indices):\n        poly_features[:, i] = np.prod(X[:, index_combination], axis=1)\n    for i in range(1, degree):\n        poly_features = np.hstack([poly_features, polynomial_features(X, i)])\n    poly_features = np.hstack([poly_features, np.ones((n_samples, 1))])\n    return poly_features.tolist()\nX = np.array([[1, 2], [3, 4]])\ndegree = 2"}
{"task_id": 33, "completion_id": 0, "solution": "import numpy as np\ndef get_random_subsets(X, y, n_subsets, replacements=True, seed=42):\n    np.random.seed(seed)\n    subsets = []\n    n_samples = X.shape[0]\n    for _ in range(n_subsets):\n        if replacements:\n            indices = np.random.choice(n_samples, n_samples, replace=True)\n        else:\n            indices = np.random.choice(n_samples, n_samples, replace=False)\n        X_subset = X[indices]\n        y_subset = y[indices]\n        subsets.append((X_subset.tolist(), y_subset.tolist()))\n    return subsets\nX = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\ny = np.array([0, 1, 0, 1])\nn_subsets = 2\nsubsets = get_random_subsets(X, y, n_subsets, replacements=True)"}
{"task_id": 34, "completion_id": 0, "solution": "import numpy as np\ndef to_categorical(x, n_col=None):\n    \"\"\"\n    Converts a 1D numpy array of integer values into a one-hot encoded format.\n    \n    Parameters:\n    x (numpy.ndarray): 1D numpy array of integer values.\n    n_col (int, optional): Number of columns for the one-hot encoded array. Defaults to None.\n    \n    Returns:\n    list: A list of lists representing the one-hot encoded array.\n    \"\"\"\n    if n_col is None:\n        n_col = np.max(x) + 1\n    one_hot = np.zeros((x.size, n_col), dtype=int)\n    one_hot[np.arange(x.size), x] = 1\n    return one_hot.tolist()\nx = np.array([0, 1, 2, 1, 0])"}
{"task_id": 35, "completion_id": 0, "solution": "import numpy as np\ndef make_diagonal(x):\n    diagonal_matrix = np.diag(x)\n    diagonal_list = diagonal_matrix.tolist()\n    return diagonal_list"}
{"task_id": 36, "completion_id": 0, "solution": "import numpy as np\ndef accuracy_score(y_true, y_pred):\n    correct_predictions = np.sum(y_true == y_pred)\n    total_predictions = len(y_true)\n    accuracy = correct_predictions / total_predictions\n    accuracy_rounded = round(accuracy, 4)\n    return accuracy_rounded\ny_true = np.array([0, 1, 2, 2, 2])\ny_pred = np.array([0, 0, 2, 2, 1])"}
{"task_id": 37, "completion_id": 0, "solution": "import numpy as np\ndef calculate_correlation_matrix(X, Y=None):\n    if Y is None:\n        Y = X\n    X_centered = X - np.mean(X, axis=0)\n    Y_centered = Y - np.mean(Y, axis=0)\n    cov_matrix = np.dot(X_centered.T, Y_centered) / (X.shape[0] - 1)\n    std_X = np.std(X, axis=0)\n    std_Y = np.std(Y, axis=0)\n    correlation_matrix = cov_matrix / np.outer(std_X, std_Y)\n    correlation_matrix = np.round(correlation_matrix, 4)\n    return correlation_matrix.tolist()\nX = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nY = np.array([[10, 11, 12], [13, 14, 15], [16, 17, 18]])"}
{"task_id": 38, "completion_id": 0, "solution": "import numpy as np\ndef adaboost_fit(X, y, n_clf):\n    (n_samples, n_features) = X.shape\n    sample_weights = np.full(n_samples, 1 / n_samples)\n    classifiers = []\n    for _ in range(n_clf):\n        best_error = float('inf')\n        best_clf = None\n        for feature in range(n_features):\n            feature_values = X[:, feature]\n            thresholds = np.unique(feature_values)\n            for threshold in thresholds:\n                pred = np.where(feature_values <= threshold, -1, 1)\n                error = np.sum(sample_weights * (pred != y))\n                if error < best_error:\n                    best_error = error\n                    best_clf = {'feature': feature, 'threshold': threshold, 'prediction': pred}\n        clf_weight = 0.5 * np.log((1 - best_error) / best_error)\n        sample_weights *= np.exp(-clf_weight * y * best_clf['prediction'])\n        sample_weights /= np.sum(sample_weights)\n        best_clf['weight'] = clf_weight\n        classifiers.append(best_clf)\n    return classifiers\nX = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\ny = np.array([1, 1, -1, -1])\nn_clf = 2\nclassifiers = adaboost_fit(X, y, n_clf)"}
{"task_id": 39, "completion_id": 0, "solution": "import numpy as np\ndef log_softmax(scores: list):\n    scores_array = np.array(scores)\n    exp_scores = np.exp(scores_array - np.max(scores_array))\n    softmax_scores = exp_scores / np.sum(exp_scores)\n    log_softmax_scores = np.log(softmax_scores)\n    log_softmax_scores_rounded = np.round(log_softmax_scores, 4)\n    return log_softmax_scores_rounded.tolist()\nscores = [1.0, 2.0, 3.0]"}
{"task_id": 40, "completion_id": 0, "solution": "import numpy as np\nimport math\nclass Layer(object):\n\n    def set_input_shape(self, shape):\n        self.input_shape = shape\n\n    def layer_name(self):\n        return self.__class__.__name__\n\n    def parameters(self):\n        return 0\n\n    def forward_pass(self, X, training):\n        raise NotImplementedError()\n\n    def backward_pass(self, accum_grad):\n        raise NotImplementedError()\n\n    def output_shape(self):\n        raise NotImplementedError()\nclass Dense(Layer):\n\n    def __init__(self, n_units, input_shape=None):\n        self.layer_input = None\n        self.input_shape = input_shape\n        self.n_units = n_units\n        self.trainable = True\n        self.W = None\n        self.w0 = None\n        self.optimizer_W = None\n        self.optimizer_w0 = None\n\n    def initialize(self, optimizer):\n        limit = 1 / math.sqrt(self.input_shape[0])\n        self.W = np.random.uniform(-limit, limit, (self.input_shape[0], self.n_units))\n        self.w0 = np.zeros((1, self.n_units))\n        self.optimizer_W = copy.deepcopy(optimizer)\n        self.optimizer_w0 = copy.deepcopy(optimizer)\n\n    def parameters(self):\n        return np.prod(self.W.shape) + np.prod(self.w0.shape)\n\n    def forward_pass(self, X, training):\n        self.layer_input = X\n        return np.dot(X, self.W) + self.w0\n\n    def backward_pass(self, accum_grad):\n        w_grad = np.dot(self.layer_input.T, accum_grad)\n        w0_grad = np.sum(accum_grad, axis=0, keepdims=True)\n        if self.trainable:\n            self.W = self.optimizer_W.update(self.W, w_grad)\n            self.w0 = self.optimizer_w0.update(self.w0, w0_grad)\n        return np.dot(accum_grad, self.W.T)\n\n    def output_shape(self):\n        return (self.n_units,)"}
{"task_id": 41, "completion_id": 0, "solution": "import numpy as np\ndef simple_conv2d(input_matrix: np.ndarray, kernel: np.ndarray, padding: int, stride: int):\n    padded_input = np.pad(input_matrix, padding, mode='constant')\n    (kernel_height, kernel_width) = kernel.shape\n    (input_height, input_width) = padded_input.shape\n    output_height = (input_height - kernel_height) // stride + 1\n    output_width = (input_width - kernel_width) // stride + 1\n    output = np.zeros((output_height, output_width))\n    for i in range(0, input_height - kernel_height + 1, stride):\n        for j in range(0, input_width - kernel_width + 1, stride):\n            output[i // stride, j // stride] = np.sum(padded_input[i:i + kernel_height, j:j + kernel_width] * kernel)\n    output = np.round(output, decimals=4)\n    return output.tolist()\ninput_matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nkernel = np.array([[1, 0], [0, 1]])\npadding = 1\nstride = 1"}
{"task_id": 42, "completion_id": 0, "solution": "def relu(z: float) -> float:\n    if z > 0:\n        return z\n    else:\n        return 0"}
{"task_id": 43, "completion_id": 0, "solution": "import numpy as np\ndef ridge_loss(X: np.ndarray, w: np.ndarray, y_true: np.ndarray, alpha: float) -> float:\n    y_pred = np.dot(X, w)\n    mse = np.mean((y_true - y_pred) ** 2)\n    reg_term = alpha * np.sum(w ** 2)\n    ridge_loss = mse + reg_term\n    return round(ridge_loss, 4)"}
{"task_id": 44, "completion_id": 0, "solution": "def leaky_relu(z: float, alpha: float=0.01) -> float:\n    \"\"\"\n    Implements the Leaky Rectified Linear Unit (Leaky ReLU) activation function.\n    \n    Parameters:\n    z (float): The input value.\n    alpha (float): The slope for negative inputs. Default is 0.01.\n    \n    Returns:\n    float: The output of the Leaky ReLU function.\n    \"\"\"\n    if z > 0:\n        return z\n    else:\n        return alpha * z"}
{"task_id": 45, "completion_id": 0, "solution": "import numpy as np\ndef kernel_function(x1, x2):\n    \"\"\"\n    Computes the linear kernel between two vectors x1 and x2.\n    \n    Parameters:\n    x1 (np.ndarray): First input vector.\n    x2 (np.ndarray): Second input vector.\n    \n    Returns:\n    float: The linear kernel value, which is the dot product of x1 and x2.\n    \"\"\"\n    kernel_value = np.dot(x1, x2)\n    return kernel_value\nx1 = np.array([1, 2, 3])\nx2 = np.array([4, 5, 6])"}
{"task_id": 46, "completion_id": 0, "solution": "import numpy as np\ndef precision(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    TP = np.sum((y_true == 1) & (y_pred == 1))\n    FP = np.sum((y_true == 0) & (y_pred == 1))\n    if TP + FP == 0:\n        return 0\n    else:\n        return TP / (TP + FP)\ny_true = np.array([1, 0, 1, 1, 0, 1])\ny_pred = np.array([1, 1, 1, 0, 0, 1])"}
{"task_id": 47, "completion_id": 0, "solution": "import numpy as np\ndef gradient_descent(X, y, weights, learning_rate, n_iterations, batch_size=1, method='batch'):\n    X = np.array(X)\n    y = np.array(y)\n    X = np.hstack([np.ones((X.shape[0], 1)), X])\n    weights = np.array(weights)\n    n_samples = X.shape[0]\n    for iteration in range(n_iterations):\n        if method == 'stochastic':\n            for i in range(n_samples):\n                gradient = 2 * X[i] * (X[i] @ weights - y[i])\n                weights -= learning_rate * gradient\n        elif method == 'batch':\n            gradient = 2 * X.T @ (X @ weights - y) / n_samples\n            weights -= learning_rate * gradient\n        elif method == 'mini-batch':\n            for i in range(0, n_samples, batch_size):\n                X_batch = X[i:i + batch_size]\n                y_batch = y[i:i + batch_size]\n                gradient = 2 * X_batch.T @ (X_batch @ weights - y_batch) / batch_size\n                weights -= learning_rate * gradient\n        else:\n            raise ValueError(\"Invalid method. Choose 'stochastic', 'batch', or 'mini-batch'.\")\n    weights = np.round(weights, 4)\n    return weights.tolist()"}
{"task_id": 48, "completion_id": 0, "solution": "import numpy as np\ndef rref(matrix):\n    matrix = np.array(matrix, dtype=float)\n    (rows, cols) = matrix.shape\n    row = 0\n    for col in range(cols):\n        if row >= rows:\n            break\n        pivot_row = row\n        while pivot_row < rows and matrix[pivot_row, col] == 0:\n            pivot_row += 1\n        if pivot_row == rows:\n            continue\n        matrix[[row, pivot_row]] = matrix[[pivot_row, row]]\n        pivot = matrix[row, col]\n        matrix[row] /= pivot\n        for other_row in range(rows):\n            if other_row != row:\n                factor = matrix[other_row, col]\n                matrix[other_row] -= factor * matrix[row]\n        row += 1\n    return matrix.tolist()\nmatrix = [[1, 2, -1, -4], [2, 3, -1, -11], [-2, 0, -3, 22]]"}
{"task_id": 49, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(f, grad, x0, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08, num_iterations=1000):\n    m = np.zeros_like(x0)\n    v = np.zeros_like(x0)\n    t = 0\n    for _ in range(num_iterations):\n        t += 1\n        g = grad(x0)\n        m = beta1 * m + (1 - beta1) * g\n        v = beta2 * v + (1 - beta2) * g ** 2\n        m_hat = m / (1 - beta1 ** t)\n        v_hat = v / (1 - beta2 ** t)\n        x0 = x0 - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    return np.round(x0, 4).tolist()\ndef grad(x):\n    return np.array([2 * x[0], 2 * x[1]])\nx0 = np.array([1.0, 1.0])"}
{"task_id": 50, "completion_id": 0, "solution": "import numpy as np\ndef l1_regularization_gradient_descent(X: np.array, y: np.array, alpha: float=0.1, learning_rate: float=0.01, max_iter: int=1000, tol: float=0.0001) -> tuple:\n    X = np.hstack([np.ones((X.shape[0], 1)), X])\n    (n_samples, n_features) = X.shape\n    weights = np.zeros(n_features)\n    prev_loss = float('inf')\n    for iteration in range(max_iter):\n        y_pred = X.dot(weights)\n        loss = 1 / (2 * n_samples) * np.sum((y - y_pred) ** 2) + alpha * np.sum(np.abs(weights))\n        if np.abs(prev_loss - loss) < tol:\n            break\n        prev_loss = loss\n        gradients = 1 / n_samples * X.T.dot(y_pred - y) + alpha * np.sign(weights)\n        weights -= learning_rate * gradients\n    bias = weights[0]\n    weights = weights[1:]\n    bias = round(float(bias), 4)\n    weights = np.round(weights, 4).tolist()\n    return (weights, bias)\nX = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\ny = np.array([2, 3, 4, 5])"}
{"task_id": 51, "completion_id": 0, "solution": "import numpy as np\ndef OSA(source: str, target: str) -> int:\n    len_source = len(source)\n    len_target = len(target)\n    dp = np.zeros((len_source + 1, len_target + 1), dtype=int)\n    for i in range(len_source + 1):\n        dp[i][0] = i\n    for j in range(len_target + 1):\n        dp[0][j] = j\n    for i in range(1, len_source + 1):\n        for j in range(1, len_target + 1):\n            cost = 0 if source[i - 1] == target[j - 1] else 1\n            dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + cost)\n            if i > 1 and j > 1 and (source[i - 1] == target[j - 2]) and (source[i - 2] == target[j - 1]):\n                dp[i][j] = min(dp[i][j], dp[i - 2][j - 2] + 1)\n    return dp[len_source][len_target]\nsource = 'caper'\ntarget = 'acer'"}
{"task_id": 52, "completion_id": 0, "solution": "import numpy as np\ndef recall(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    TP = np.sum((y_true == 1) & (y_pred == 1))\n    FN = np.sum((y_true == 1) & (y_pred == 0))\n    if TP + FN == 0:\n        return 0.0\n    else:\n        recall_value = TP / (TP + FN)\n        return round(recall_value, 3)\ny_true = [1, 0, 1, 1, 0, 1]\ny_pred = [1, 0, 1, 0, 0, 1]"}
{"task_id": 53, "completion_id": 0, "solution": "import numpy as np\ndef self_attention(X, W_q, W_k, W_v):\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    attention_scores = np.dot(Q, K.T) / np.sqrt(K.shape[1])\n    attention_weights = np.exp(attention_scores) / np.sum(np.exp(attention_scores), axis=-1, keepdims=True)\n    output = np.dot(attention_weights, V)\n    output_rounded = np.round(output, decimals=4).tolist()\n    return output_rounded\nX = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\nW_q = np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]])\nW_k = np.array([[0.9, 0.8, 0.7], [0.6, 0.5, 0.4], [0.3, 0.2, 0.1]])\nW_v = np.array([[0.2, 0.3, 0.4], [0.5, 0.6, 0.7], [0.8, 0.9, 1.0]])\noutput = self_attention(X, W_q, W_k, W_v)"}
{"task_id": 54, "completion_id": 0, "solution": "import numpy as np\ndef rnn_forward(input_sequence: list[list[float]], initial_hidden_state: list[float], Wx: list[list[float]], Wh: list[list[float]], b: list[float]) -> list[float]:\n    input_sequence = np.array(input_sequence)\n    initial_hidden_state = np.array(initial_hidden_state)\n    Wx = np.array(Wx)\n    Wh = np.array(Wh)\n    b = np.array(b)\n    hidden_state = initial_hidden_state\n    for x in input_sequence:\n        hidden_state = np.tanh(np.dot(x, Wx) + np.dot(hidden_state, Wh) + b)\n    final_hidden_state = np.round(hidden_state, 4).tolist()\n    return final_hidden_state\ninput_sequence = [[1.0, 2.0], [3.0, 4.0]]\ninitial_hidden_state = [0.0, 0.0]\nWx = [[0.1, 0.2], [0.3, 0.4]]\nWh = [[0.5, 0.6], [0.7, 0.8]]\nb = [0.1, 0.1]"}
{"task_id": 55, "completion_id": 0, "solution": "import numpy as np\ndef translate_object(points, tx, ty):\n    \"\"\"\n    Translates a list of 2D points by a specified distance in the x and y directions.\n    \n    Parameters:\n    points (list of [x, y]): List of points to be translated.\n    tx (float): Translation distance in the x direction.\n    ty (float): Translation distance in the y direction.\n    \n    Returns:\n    list: List of translated points.\n    \"\"\"\n    points_array = np.array(points)\n    translation_matrix = np.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]])\n    ones_column = np.ones((points_array.shape[0], 1))\n    points_with_ones = np.hstack((points_array, ones_column))\n    translated_points = np.dot(points_with_ones, translation_matrix.T)\n    translated_points_list = translated_points[:, :2].tolist()\n    return translated_points_list\npoints = [[1, 2], [3, 4], [5, 6]]\ntx = 2\nty = 3\ntranslated_points = translate_object(points, tx, ty)"}
{"task_id": 56, "completion_id": 0, "solution": "import numpy as np\ndef kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q):\n    \"\"\"\n    Computes the Kullback-Leibler divergence between two normal distributions.\n    \n    Parameters:\n    - mu_p: Mean of distribution P.\n    - sigma_p: Standard deviation of distribution P.\n    - mu_q: Mean of distribution Q.\n    - sigma_q: Standard deviation of distribution Q.\n    \n    Returns:\n    - The KL divergence as a float.\n    \"\"\"\n    if sigma_p <= 0 or sigma_q <= 0:\n        raise ValueError('Standard deviations must be positive.')\n    term1 = np.log(sigma_q / sigma_p)\n    term2 = (sigma_p ** 2 + (mu_p - mu_q) ** 2) / (2 * sigma_q ** 2)\n    kl_div = term1 + term2 - 0.5\n    return kl_div\nmu_p = 0\nsigma_p = 1\nmu_q = 1\nsigma_q = 2\nkl_div = kl_divergence_normal(mu_p, sigma_p, mu_q, sigma_q)"}
{"task_id": 57, "completion_id": 0, "solution": "import numpy as np\ndef gauss_seidel(A, b, n, x_ini=None):\n    A = np.array(A)\n    b = np.array(b)\n    n_eq = A.shape[0]\n    if x_ini is None:\n        x = np.zeros(n_eq)\n    else:\n        x = np.array(x_ini)\n    for _ in range(n):\n        for i in range(n_eq):\n            x[i] = (b[i] - np.dot(A[i, :i], x[:i]) - np.dot(A[i, i + 1:], x[i + 1:])) / A[i, i]\n    x = np.round(x, 4)\n    return x.tolist()\nA = [[4, 1, 2], [3, 5, 1], [1, 1, 3]]\nb = [4, 7, 3]\nn = 100\nx_ini = [0, 0, 0]"}
{"task_id": 58, "completion_id": 0, "solution": "import numpy as np\ndef gaussian_elimination(A, b):\n    n = len(b)\n    Ab = np.hstack([A, b.reshape(-1, 1)])\n    for i in range(n):\n        max_row = i + np.argmax(np.abs(Ab[i:, i]))\n        Ab[[i, max_row]] = Ab[[max_row, i]]\n        for j in range(i + 1, n):\n            factor = Ab[j, i] / Ab[i, i]\n            Ab[j, i:] -= factor * Ab[i, i:]\n    x = np.zeros(n)\n    for i in range(n - 1, -1, -1):\n        x[i] = (Ab[i, -1] - np.dot(Ab[i, :-1], x)) / Ab[i, i]\n    return np.round(x, 4).tolist()\nA = np.array([[2, 1, -1], [-3, -1, 2], [-2, 1, 2]], dtype=float)\nb = np.array([8, -11, -3], dtype=float)"}
{"task_id": 59, "completion_id": 0, "solution": "import numpy as np\nclass LSTM:\n\n    def __init__(self, input_size, hidden_size):\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)\n        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)\n        self.bf = np.zeros((hidden_size, 1))\n        self.bi = np.zeros((hidden_size, 1))\n        self.bc = np.zeros((hidden_size, 1))\n        self.bo = np.zeros((hidden_size, 1))\n\n    def sigmoid(self, x):\n        return 1 / (1 + np.exp(-x))\n\n    def tanh(self, x):\n        return np.tanh(x)\n\n    def forward(self, x, initial_hidden_state, initial_cell_state):\n        \"\"\"\n        Processes a sequence of inputs and returns the hidden states, final hidden state, final cell state.\n        \"\"\"\n        h = initial_hidden_state\n        c = initial_cell_state\n        hidden_states = []\n        for t in range(x.shape[1]):\n            concat = np.concatenate((x[:, t].reshape(-1, 1), h), axis=0)\n            f = self.sigmoid(self.Wf @ concat + self.bf)\n            i = self.sigmoid(self.Wi @ concat + self.bi)\n            c_tilde = self.tanh(self.Wc @ concat + self.bc)\n            o = self.sigmoid(self.Wo @ concat + self.bo)\n            c = f * c + i * c_tilde\n            h = o * self.tanh(c)\n            hidden_states.append(h)\n        hidden_states = np.array(hidden_states).round(4).tolist()\n        final_hidden_state = h.round(4).tolist()\n        final_cell_state = c.round(4).tolist()\n        return (hidden_states, final_hidden_state, final_cell_state)"}
{"task_id": 60, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef compute_tf_idf(corpus, query):\n    if not corpus:\n        raise ValueError('Corpus cannot be empty.')\n\n    def term_frequency(doc):\n        doc_count = Counter(doc)\n        return {term: count / len(doc) for (term, count) in doc_count.items()}\n\n    def inverse_document_frequency(corpus, term):\n        df = sum((1 for doc in corpus if term in doc))\n        return np.log((1 + len(corpus)) / (1 + df)) + 1\n    tf_idf_scores = []\n    for doc in corpus:\n        tf = term_frequency(doc)\n        doc_scores = []\n        for term in query:\n            tf_idf = tf.get(term, 0) * inverse_document_frequency(corpus, term)\n            doc_scores.append(round(tf_idf, 4))\n        tf_idf_scores.append(doc_scores)\n    return np.array(tf_idf_scores).tolist()\ncorpus = [['the', 'quick', 'brown', 'fox'], ['the', 'lazy', 'dog'], ['the', 'quick', 'dog']]\nquery = ['the', 'quick', 'dog']"}
{"task_id": 61, "completion_id": 0, "solution": "import numpy as np\ndef f_score(y_true, y_pred, beta):\n    \"\"\"\n    Calculate F-Score for a binary classification task.\n\n    :param y_true: Numpy array of true labels\n    :param y_pred: Numpy array of predicted labels\n    :param beta: The weight of precision in the harmonic mean\n    :return: F-Score rounded to three decimal places\n    \"\"\"\n    tp = np.sum((y_pred == 1) & (y_true == 1))\n    fp = np.sum((y_pred == 1) & (y_true == 0))\n    fn = np.sum((y_pred == 0) & (y_true == 1))\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0\n    if precision + recall == 0:\n        f_beta = 0\n    else:\n        f_beta = (1 + beta ** 2) * (precision * recall) / (beta ** 2 * precision + recall)\n    return round(f_beta, 3)\ny_true = np.array([1, 0, 1, 1, 0, 1])\ny_pred = np.array([1, 1, 1, 0, 0, 1])\nbeta = 1.0"}
{"task_id": 62, "completion_id": 0, "solution": "import numpy as np\nclass SimpleRNN:\n\n    def __init__(self, input_size, hidden_size, output_size):\n        \"\"\"\n        Initializes the RNN with random weights and zero biases.\n        \"\"\"\n        self.hidden_size = hidden_size\n        self.W_xh = np.random.randn(hidden_size, input_size) * 0.01\n        self.W_hh = np.random.randn(hidden_size, hidden_size) * 0.01\n        self.W_hy = np.random.randn(output_size, hidden_size) * 0.01\n        self.b_h = np.zeros((hidden_size, 1))\n        self.b_y = np.zeros((output_size, 1))\n\n    def forward(self, input_sequence):\n        \"\"\"\n        Forward pass through the RNN for a given sequence of inputs.\n        \"\"\"\n        T = len(input_sequence)\n        hidden_states = [np.zeros((self.hidden_size, 1))]\n        outputs = []\n        last_inputs = []\n        for t in range(T):\n            x = np.array(input_sequence[t]).reshape(-1, 1)\n            last_inputs.append(x)\n            h_prev = hidden_states[-1]\n            h = np.tanh(self.W_xh @ x + self.W_hh @ h_prev + self.b_h)\n            y = self.W_hy @ h + self.b_y\n            hidden_states.append(h)\n            outputs.append(y)\n        return (outputs, last_inputs, hidden_states)\n\n    def backward(self, input_sequence, expected_output, outputs, last_inputs, hidden_states, learning_rate):\n        \"\"\"\n        Backward pass through the RNN for a given sequence of inputs and expected outputs.\n        \"\"\"\n        T = len(input_sequence)\n        dW_xh = np.zeros_like(self.W_xh)\n        dW_hh = np.zeros_like(self.W_hh)\n        dW_hy = np.zeros_like(self.W_hy)\n        db_h = np.zeros_like(self.b_h)\n        db_y = np.zeros_like(self.b_y)\n        dh_next = np.zeros_like(hidden_states[0])\n        for t in reversed(range(T)):\n            x = last_inputs[t]\n            h = hidden_states[t + 1]\n            h_prev = hidden_states[t]\n            y = outputs[t]\n            dy = y - np.array(expected_output[t]).reshape(-1, 1)\n            dW_hy += dy @ h.T\n            db_y += dy\n            dh = self.W_hy.T @ dy + dh_next\n            dh_raw = (1 - h ** 2) * dh\n            dW_xh += dh_raw @ x.T\n            dW_hh += dh_raw @ h_prev.T\n            db_h += dh_raw\n            dh_next = self.W_hh.T @ dh_raw\n        for dparam in [dW_xh, dW_hh, dW_hy, db_h, db_y]:\n            np.clip(dparam, -5, 5, out=dparam)\n        self.W_xh -= learning_rate * dW_xh\n        self.W_hh -= learning_rate * dW_hh\n        self.W_hy -= learning_rate * dW_hy\n        self.b_h -= learning_rate * db_h\n        self.b_y -= learning_rate * db_y\n\n    def train(self, input_sequence, expected_output, learning_rate, epochs):\n        for epoch in range(epochs):\n            (outputs, last_inputs, hidden_states) = self.forward(input_sequence)\n            self.backward(input_sequence, expected_output, outputs, last_inputs, hidden_states, learning_rate)\n            loss = 0.5 * np.sum((np.array(expected_output) - np.array(outputs)) ** 2)\n            print(f'Epoch {epoch + 1}, Loss: {loss}')\ninput_size = 2\nhidden_size = 3\noutput_size = 2\ninput_sequence = [[1, 2], [2, 3], [3, 4]]\nexpected_output = [[2, 3], [3, 4], [4, 5]]\nlearning_rate = 0.01\nepochs = 1000"}
{"task_id": 63, "completion_id": 0, "solution": "import numpy as np\ndef conjugate_gradient(A: np.array, b: np.array, n: int, x0: np.array=None, tol=1e-08):\n    \"\"\"\n    Solve the system Ax = b using the Conjugate Gradient method.\n\n    :param A: Symmetric positive-definite matrix\n    :param b: Right-hand side vector\n    :param n: Maximum number of iterations\n    :param x0: Initial guess for solution (default is zero vector)\n    :param tol: Convergence tolerance\n    :return: Solution vector x\n    \"\"\"\n    if x0 is None:\n        x0 = np.zeros_like(b)\n    x = x0\n    r = b - np.dot(A, x)\n    p = r\n    r_norm = np.linalg.norm(r)\n    for _ in range(n):\n        Ap = np.dot(A, p)\n        alpha = np.dot(r, r) / np.dot(p, Ap)\n        x = x + alpha * p\n        r = r - alpha * Ap\n        r_norm_new = np.linalg.norm(r)\n        if r_norm_new < tol:\n            break\n        beta = r_norm_new ** 2 / r_norm ** 2\n        p = r + beta * p\n        r_norm = r_norm_new\n    return np.round(x, 8).tolist()"}
{"task_id": 64, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef gini_impurity(y: list[int]) -> float:\n    \"\"\"\n    Calculate Gini Impurity for a list of class labels.\n\n    :param y: List of class labels\n    :return: Gini Impurity rounded to three decimal places\n    \"\"\"\n    class_counts = Counter(y)\n    total_samples = len(y)\n    gini = 1.0\n    for count in class_counts.values():\n        probability = count / total_samples\n        gini -= probability ** 2\n    return round(gini, 3)"}
{"task_id": 65, "completion_id": 0, "solution": "def compressed_row_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix to its Compressed Row Sparse (CSR) representation.\n\n    :param dense_matrix: 2D list representing a dense matrix\n    :return: A tuple containing (values array, column indices array, row pointer array)\n    \"\"\"\n    values = []\n    col_indices = []\n    row_pointers = [0]\n    for row in dense_matrix:\n        non_zero_count = 0\n        for (col_index, value) in enumerate(row):\n            if value != 0:\n                values.append(value)\n                col_indices.append(col_index)\n                non_zero_count += 1\n        row_pointers.append(row_pointers[-1] + non_zero_count)\n    return (values, col_indices, row_pointers)\ndense_matrix = [[1, 0, 0, 2], [0, 3, 0, 0], [4, 0, 5, 0]]"}
{"task_id": 66, "completion_id": 0, "solution": "def orthogonal_projection(v, L):\n    \"\"\"\n    Compute the orthogonal projection of vector v onto line L.\n\n    :param v: The vector to be projected\n    :param L: The line vector defining the direction of projection\n    :return: List representing the projection of v onto L\n    \"\"\"\n    dot_product_vL = sum((x * y for (x, y) in zip(v, L)))\n    dot_product_LL = sum((x * x for x in L))\n    scalar_projection = dot_product_vL / dot_product_LL\n    projection = [scalar_projection * x for x in L]\n    projection = [round(x, 3) for x in projection]\n    return projection"}
{"task_id": 67, "completion_id": 0, "solution": "def compressed_col_sparse_matrix(dense_matrix):\n    \"\"\"\n    Convert a dense matrix into its Compressed Column Sparse (CSC) representation.\n\n    :param dense_matrix: List of lists representing the dense matrix\n    :return: Tuple of (values, row indices, column pointer)\n    \"\"\"\n    values = []\n    row_indices = []\n    column_pointer = [0]\n    num_rows = len(dense_matrix)\n    num_cols = len(dense_matrix[0]) if num_rows > 0 else 0\n    for col in range(num_cols):\n        for row in range(num_rows):\n            value = dense_matrix[row][col]\n            if value != 0:\n                values.append(value)\n                row_indices.append(row)\n        column_pointer.append(len(values))\n    return (values, row_indices, column_pointer)\ndense_matrix = [[0, 2, 0], [3, 0, 0], [0, 0, 4], [5, 0, 0]]"}
{"task_id": 68, "completion_id": 0, "solution": "import numpy as np\ndef matrix_image(A):\n    A_ref = np.array(A, dtype=float)\n    (m, n) = A_ref.shape\n    pivot_cols = []\n    for col in range(n):\n        row = col\n        while row < m and A_ref[row, col] == 0:\n            row += 1\n        if row == m:\n            continue\n        A_ref[[row, col]] = A_ref[[col, row]]\n        pivot = A_ref[col, col]\n        A_ref[col] /= pivot\n        for row in range(col + 1, m):\n            factor = A_ref[row, col]\n            A_ref[row] -= factor * A_ref[col]\n        pivot_cols.append(col)\n    basis_vectors = A[:, pivot_cols]\n    return np.round(basis_vectors, 8).tolist()\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])"}
{"task_id": 69, "completion_id": 0, "solution": "import numpy as np\ndef r_squared(y_true, y_pred):\n    y_true_mean = np.mean(y_true)\n    tss = np.sum((y_true - y_true_mean) ** 2)\n    rss = np.sum((y_true - y_pred) ** 2)\n    r2 = 1 - rss / tss\n    return round(r2, 3)\ny_true = np.array([3, -0.5, 2, 7])\ny_pred = np.array([2.5, 0.0, 2, 8])"}
{"task_id": 70, "completion_id": 0, "solution": "def calculate_brightness(img):\n    if not img or not img[0]:\n        return -1\n    row_length = len(img[0])\n    if any((len(row) != row_length for row in img)):\n        return -1\n    total_brightness = 0\n    pixel_count = 0\n    for row in img:\n        for pixel in row:\n            if pixel < 0 or pixel > 255:\n                return -1\n            total_brightness += pixel\n            pixel_count += 1\n    if pixel_count == 0:\n        return -1\n    average_brightness = total_brightness / pixel_count\n    return round(average_brightness, 2)"}
{"task_id": 71, "completion_id": 0, "solution": "import numpy as np\ndef rmse(y_true, y_pred):\n    if not (isinstance(y_true, np.ndarray) and isinstance(y_pred, np.ndarray)):\n        raise ValueError('Inputs must be numpy arrays.')\n    if y_true.size == 0 or y_pred.size == 0:\n        raise ValueError('Input arrays cannot be empty.')\n    if y_true.shape != y_pred.shape:\n        raise ValueError('Input arrays must have the same shape.')\n    squared_diff = (y_true - y_pred) ** 2\n    mean_squared_diff = np.mean(squared_diff)\n    rmse_value = np.sqrt(mean_squared_diff)\n    return round(rmse_value, 3)"}
{"task_id": 72, "completion_id": 0, "solution": "import numpy as np\ndef jaccard_index(y_true, y_pred):\n    \"\"\"\n    Calculate the Jaccard Index between two binary arrays.\n    \n    Parameters:\n    y_true (np.array): True binary labels.\n    y_pred (np.array): Predicted binary labels.\n    \n    Returns:\n    float: Jaccard Index rounded to three decimal places.\n    \"\"\"\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    intersection = np.sum(np.logical_and(y_true, y_pred))\n    union = np.sum(np.logical_or(y_true, y_pred))\n    if union == 0:\n        return 0.0\n    jaccard = intersection / union\n    return round(jaccard, 3)\ny_true = np.array([1, 1, 0, 0])\ny_pred = np.array([1, 0, 1, 0])"}
{"task_id": 73, "completion_id": 0, "solution": "import numpy as np\ndef dice_score(y_true, y_pred):\n    y_true = np.array(y_true)\n    y_pred = np.array(y_pred)\n    intersection = np.sum(y_true & y_pred)\n    num_true = np.sum(y_true)\n    num_pred = np.sum(y_pred)\n    if num_true == 0 and num_pred == 0:\n        dice = 1.0\n    else:\n        dice = 2.0 * intersection / (num_true + num_pred)\n    return round(dice, 3)\ny_true = [1, 0, 1, 1, 0, 1]\ny_pred = [1, 1, 1, 0, 0, 1]"}
{"task_id": 74, "completion_id": 0, "solution": "import numpy as np\ndef create_row_hv(row, dim, random_seeds):\n    composite_hv = np.zeros(dim)\n    for (feature, value) in row.items():\n        feature_hv = np.random.RandomState(seed=random_seeds[feature]).randint(2, size=dim) * 2 - 1\n        value_hv = np.random.RandomState(seed=random_seeds[feature]).randint(2, size=dim) * 2 - 1\n        bound_hv = feature_hv * value_hv\n        composite_hv += bound_hv\n    return composite_hv.tolist()\nrow = {'feature1': 10, 'feature2': 20}\ndim = 100\nrandom_seeds = {'feature1': 42, 'feature2': 24}\ncomposite_hv = create_row_hv(row, dim, random_seeds)"}
{"task_id": 75, "completion_id": 0, "solution": "from collections import Counter\ndef confusion_matrix(data):\n    counts = Counter()\n    for (y_true, y_pred) in data:\n        counts[y_true, y_pred] += 1\n    tp = counts[1, 1]\n    tn = counts[0, 0]\n    fp = counts[0, 1]\n    fn = counts[1, 0]\n    matrix = [[tn, fp], [fn, tp]]\n    return matrix\ndata = [[0, 0], [0, 1], [1, 0], [1, 1], [0, 0], [1, 1]]"}
{"task_id": 76, "completion_id": 0, "solution": "import numpy as np\ndef cosine_similarity(v1, v2):\n    if v1.shape != v2.shape:\n        raise ValueError('Vectors must have the same shape')\n    if v1.size == 0 or v2.size == 0 or np.linalg.norm(v1) == 0 or (np.linalg.norm(v2) == 0):\n        raise ValueError('Vectors cannot be empty or have zero magnitude')\n    dot_product = np.dot(v1, v2)\n    magnitude_v1 = np.linalg.norm(v1)\n    magnitude_v2 = np.linalg.norm(v2)\n    cos_sim = dot_product / (magnitude_v1 * magnitude_v2)\n    return round(cos_sim, 3)\nv1 = np.array([1, 2, 3])\nv2 = np.array([4, 5, 6])"}
{"task_id": 77, "completion_id": 0, "solution": "from collections import Counter\nfrom typing import List, Tuple\ndef performance_metrics(actual: List[int], predicted: List[int]) -> Tuple[List[List[int]], float, float, float, float]:\n    if len(actual) != len(predicted):\n        raise ValueError('The length of actual and predicted lists must be the same.')\n    if not all((x in [0, 1] for x in actual + predicted)):\n        raise ValueError('All elements in actual and predicted lists must be either 0 or 1.')\n    confusion_matrix = [[0, 0], [0, 0]]\n    for (a, p) in zip(actual, predicted):\n        confusion_matrix[a][p] += 1\n    (tp, fp) = (confusion_matrix[1][1], confusion_matrix[0][1])\n    (fn, tn) = (confusion_matrix[1][0], confusion_matrix[0][0])\n    accuracy = round((tp + tn) / (tp + tn + fp + fn), 3)\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0\n    f1_score = round(2 * (precision * recall) / (precision + recall), 3) if precision + recall > 0 else 0\n    specificity = round(tn / (tn + fp), 3) if tn + fp > 0 else 0\n    negative_predictive_value = round(tn / (tn + fn), 3) if tn + fn > 0 else 0\n    return (confusion_matrix, accuracy, f1_score, specificity, negative_predictive_value)\nactual = [1, 0, 1, 1, 0, 1, 0, 0, 1, 0]\npredicted = [1, 0, 1, 0, 0, 1, 1, 0, 1, 0]"}
{"task_id": 78, "completion_id": 0, "solution": "import numpy as np\nfrom scipy import stats\ndef descriptive_statistics(data):\n    data = np.array(data)\n    mean = np.mean(data)\n    median = np.median(data)\n    mode = stats.mode(data)[0][0]\n    variance = np.var(data, ddof=1)\n    standard_deviation = np.std(data, ddof=1)\n    percentile_25 = np.percentile(data, 25)\n    percentile_50 = np.percentile(data, 50)\n    percentile_75 = np.percentile(data, 75)\n    interquartile_range = percentile_75 - percentile_25\n    output = {'mean': round(mean, 4), 'median': round(median, 4), 'mode': mode, 'variance': round(variance, 4), 'standard_deviation': round(standard_deviation, 4), '25th_percentile': round(percentile_25, 4), '50th_percentile': round(percentile_50, 4), '75th_percentile': round(percentile_75, 4), 'interquartile_range': round(interquartile_range, 4)}\n    return output\ndata = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": 79, "completion_id": 0, "solution": "import math\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of achieving exactly k successes in n independent Bernoulli trials,\n    each with probability p of success, using the Binomial distribution formula.\n    :param n: Total number of trials\n    :param k: Number of successes\n    :param p: Probability of success on each trial\n    :return: Probability of k successes in n trials\n    \"\"\"\n    binom_coeff = math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n    probability = binom_coeff * p ** k * (1 - p) ** (n - k)\n    return round(probability, 5)\nn = 10\nk = 3\np = 0.5"}
{"task_id": 80, "completion_id": 0, "solution": "import math\ndef normal_pdf(x, mean, std_dev):\n    \"\"\"\n    Calculate the probability density function (PDF) of the normal distribution.\n    :param x: The value at which the PDF is evaluated.\n    :param mean: The mean (\u03bc) of the distribution.\n    :param std_dev: The standard deviation (\u03c3) of the distribution.\n    \"\"\"\n    exponent = -(x - mean) ** 2 / (2 * std_dev ** 2)\n    denominator = std_dev * math.sqrt(2 * math.pi)\n    pdf_value = math.exp(exponent) / denominator\n    return round(pdf_value, 5)"}
{"task_id": 81, "completion_id": 0, "solution": "import math\ndef poisson_probability(k, lam):\n    \"\"\"\n    Calculate the probability of observing exactly k events in a fixed interval,\n    given the mean rate of events lam, using the Poisson distribution formula.\n    :param k: Number of events (non-negative integer)\n    :param lam: The average rate (mean) of occurrences in a fixed interval\n    \"\"\"\n    lambda_k = lam ** k\n    e_neg_lambda = math.exp(-lam)\n    k_factorial = math.factorial(k)\n    probability = lambda_k * e_neg_lambda / k_factorial\n    return round(probability, 5)\nk = 3\nlam = 2.5"}
{"task_id": 82, "completion_id": 0, "solution": "import numpy as np\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        int: The contrast of the image, defined as the difference between the maximum and minimum pixel values.\n    \"\"\"\n    max_pixel_value = np.max(img)\n    min_pixel_value = np.min(img)\n    contrast = max_pixel_value - min_pixel_value\n    return contrast"}
{"task_id": 83, "completion_id": 0, "solution": "import numpy as np\ndef calculate_dot_product(vec1, vec2):\n    \"\"\"\n    Calculate the dot product of two vectors.\n    \n    Args:\n        vec1 (numpy.ndarray): 1D array representing the first vector.\n        vec2 (numpy.ndarray): 1D array representing the second vector.\n    \n    Returns:\n        float: The dot product of the two vectors.\n    \"\"\"\n    dot_product = np.dot(vec1, vec2)\n    return dot_product"}
{"task_id": 84, "completion_id": 0, "solution": "import numpy as np\ndef phi_transform(data: list[float], degree: int):\n    \"\"\"\n    Perform a Phi Transformation to map input features into a higher-dimensional space by generating polynomial features.\n\n    Args:\n        data (list[float]): A list of numerical values to transform.\n        degree (int): The degree of the polynomial expansion.\n    \"\"\"\n    if degree < 0:\n        return []\n    data_array = np.array(data)\n    transformed_features = []\n    for value in data_array:\n        feature_vector = [1]\n        for d in range(1, degree + 1):\n            feature_vector.append(value ** d)\n        transformed_features.append(feature_vector)\n    transformed_features = np.round(transformed_features, 8).tolist()\n    return transformed_features\ndata = [1.0, 2.0, 3.0]\ndegree = 3"}
{"task_id": 85, "completion_id": 0, "solution": "import numpy as np\ndef pos_encoding(position: int, d_model: int):\n    if position == 0 or d_model <= 0:\n        return -1\n    pe = np.zeros((position, d_model), dtype=np.float16)\n    for pos in range(position):\n        for i in range(d_model):\n            if i % 2 == 0:\n                pe[pos, i] = np.sin(pos / 10000 ** (2 * i / d_model))\n            else:\n                pe[pos, i] = np.cos(pos / 10000 ** (2 * (i - 1) / d_model))\n    return pe.tolist()\nposition = 5\nd_model = 4"}
{"task_id": 86, "completion_id": 0, "solution": "def model_fit_quality(training_accuracy, test_accuracy):\n    \"\"\"\n    Determine if the model is overfitting, underfitting, or a good fit based on training and test accuracy.\n    :param training_accuracy: float, training accuracy of the model (0 <= training_accuracy <= 1)\n    :param test_accuracy: float, test accuracy of the model (0 <= test_accuracy <= 1)\n    :return: int, one of '1', '-1', or '0'.\n    \"\"\"\n    if training_accuracy - test_accuracy > 0.2:\n        return 1\n    elif training_accuracy < 0.7 and test_accuracy < 0.7:\n        return -1\n    else:\n        return 0"}
{"task_id": 87, "completion_id": 0, "solution": "import numpy as np\ndef adam_optimizer(parameter, grad, m, v, t, learning_rate=0.001, beta1=0.9, beta2=0.999, epsilon=1e-08):\n    \"\"\"\n    Update parameters using the Adam optimizer.\n    Adjusts the learning rate based on the moving averages of the gradient and squared gradient.\n    :param parameter: Current parameter value\n    :param grad: Current gradient\n    :param m: First moment estimate\n    :param v: Second moment estimate\n    :param t: Current timestep\n    :param learning_rate: Learning rate (default=0.001)\n    :param beta1: First moment decay rate (default=0.9)\n    :param beta2: Second moment decay rate (default=0.999)\n    :param epsilon: Small constant for numerical stability (default=1e-8)\n    :return: tuple: (updated_parameter, updated_m, updated_v)\n    \"\"\"\n    m = beta1 * m + (1 - beta1) * grad\n    v = beta2 * v + (1 - beta2) * grad ** 2\n    m_hat = m / (1 - beta1 ** t)\n    v_hat = v / (1 - beta2 ** t)\n    parameter = parameter - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)\n    if isinstance(parameter, np.ndarray):\n        return (parameter.round(5).tolist(), m.round(5).tolist(), v.round(5).tolist())\n    else:\n        return (round(parameter, 5), round(m, 5), round(v, 5))\nparameter = np.array([0.1, 0.2, 0.3])\ngrad = np.array([0.01, 0.02, 0.03])\nm = np.array([0.0, 0.0, 0.0])\nv = np.array([0.0, 0.0, 0.0])\nt = 1"}
{"task_id": 88, "completion_id": 0, "solution": "import numpy as np\ndef load_encoder_hparams_and_params(model_size: str='124M', models_dir: str='models'):\n\n    class DummyBPE:\n\n        def __init__(self):\n            self.encoder_dict = {'hello': 1, 'world': 2, '<UNK>': 0}\n\n        def encode(self, text: str):\n            tokens = text.strip().split()\n            return [self.encoder_dict.get(token, self.encoder_dict['<UNK>']) for token in tokens]\n\n        def decode(self, token_ids: list):\n            reversed_dict = {v: k for (k, v) in self.encoder_dict.items()}\n            return ' '.join([reversed_dict.get(tok_id, '<UNK>') for tok_id in token_ids])\n    hparams = {'n_ctx': 1024, 'n_head': 12}\n    params = {'wte': np.random.rand(3, 10), 'wpe': np.random.rand(1024, 10), 'blocks': [], 'ln_f': {'g': np.ones(10), 'b': np.zeros(10)}}\n    encoder = DummyBPE()\n    return (encoder, hparams, params)\ndef gen_text(prompt: str, n_tokens_to_generate: int=40):\n    (encoder, hparams, params) = load_encoder_hparams_and_params()\n    token_ids = encoder.encode(prompt)\n    token_embeddings = params['wte'][token_ids]\n    pos_embeddings = params['wpe'][:len(token_ids)]\n    embeddings = token_embeddings + pos_embeddings\n\n    def multi_head_attention(x):\n        return x\n\n    def feed_forward(x):\n        return x\n\n    def layer_norm(x, g, b, eps=1e-05):\n        mean = np.mean(x, axis=-1, keepdims=True)\n        std = np.std(x, axis=-1, keepdims=True)\n        return g * (x - mean) / (std + eps) + b\n    for _ in range(n_tokens_to_generate):\n        x = multi_head_attention(embeddings)\n        x = feed_forward(x)\n        x = layer_norm(x, params['ln_f']['g'], params['ln_f']['b'])\n        next_token_id = np.argmax(x[-1])\n        token_ids.append(next_token_id)\n        embeddings = np.concatenate([embeddings, params['wte'][next_token_id:next_token_id + 1] + pos_embeddings[len(token_ids) - 1:len(token_ids)]], axis=0)\n    return encoder.decode(token_ids)"}
{"task_id": 89, "completion_id": 0, "solution": "import numpy as np\ndef pattern_weaver(n, crystal_values, dimension):\n\n    def softmax(values):\n        e_x = np.exp(values - np.max(values))\n        return e_x / e_x.sum(axis=0)\n    crystal_values = np.array(crystal_values)\n    attention_scores = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                attention_scores[i, j] = np.dot(crystal_values[i], crystal_values[j])\n    attention_weights = softmax(attention_scores)\n    weighted_patterns = np.dot(attention_weights, crystal_values)\n    return [round(pattern, 4) for pattern in weighted_patterns]\nn = 3\ncrystal_values = [[1, 2], [3, 4], [5, 6]]"}
{"task_id": 90, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef calculate_bm25_scores(corpus, query, k1=1.5, b=0.75):\n    avgdl = np.mean([len(doc.split()) for doc in corpus])\n    query_terms = set(query.split())\n    tf = []\n    for doc in corpus:\n        doc_words = doc.split()\n        doc_tf = {term: Counter(doc_words)[term] for term in query_terms}\n        tf.append(doc_tf)\n    idf = {}\n    for term in query_terms:\n        df = sum((1 for doc in corpus if term in doc))\n        idf[term] = np.log((len(corpus) - df + 0.5) / (df + 0.5))\n    scores = []\n    for (i, doc) in enumerate(corpus):\n        doc_words = doc.split()\n        dl = len(doc_words)\n        score = 0\n        for term in query_terms:\n            if term in doc:\n                tfi = tf[i][term]\n                score += idf[term] * (tfi * (k1 + 1)) / (tfi + k1 * (1 - b + b * dl / avgdl))\n        scores.append(score)\n    return [round(score, 3) for score in scores]\ncorpus = ['the cat in the hat', 'a cat and a hat', 'the quick brown fox jumps over the lazy dog']\nquery = 'cat hat'\nscores = calculate_bm25_scores(corpus, query)"}
{"task_id": 91, "completion_id": 0, "solution": "def calculate_f1_score(y_true, y_pred):\n    \"\"\"\n    Calculate the F1 score based on true and predicted labels.\n\n    Args:\n        y_true (list): True labels (ground truth).\n        y_pred (list): Predicted labels.\n\n    Returns:\n        float: The F1 score rounded to three decimal places.\n    \"\"\"\n    tp = 0\n    fp = 0\n    fn = 0\n    for (true, pred) in zip(y_true, y_pred):\n        if true == 1 and pred == 1:\n            tp += 1\n        elif true == 0 and pred == 1:\n            fp += 1\n        elif true == 1 and pred == 0:\n            fn += 1\n    precision = tp / (tp + fp) if tp + fp > 0 else 0\n    recall = tp / (tp + fn) if tp + fn > 0 else 0\n    f1_score = 2 * (precision * recall) / (precision + recall) if precision + recall > 0 else 0\n    return round(f1_score, 3)"}
{"task_id": 92, "completion_id": 0, "solution": "import math\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nPI = 3.14159\ndef power_grid_forecast(consumption_data):\n    days = np.array(range(1, len(consumption_data) + 1)).reshape(-1, 1)\n    fluctuation = 10 * np.sin(2 * PI * days / 10)\n    detrended_data = consumption_data - fluctuation.flatten()\n    model = LinearRegression()\n    model.fit(days, detrended_data)\n    day_15 = np.array([15]).reshape(-1, 1)\n    base_consumption_day_15 = model.predict(day_15)\n    fluctuation_day_15 = 10 * math.sin(2 * PI * 15 / 10)\n    predicted_consumption_day_15 = base_consumption_day_15 + fluctuation_day_15\n    final_consumption = math.ceil(predicted_consumption_day_15 * 1.05)\n    return int(final_consumption)\nconsumption_data = np.array([100, 105, 110, 115, 120, 125, 130, 135, 140, 145])"}
{"task_id": 93, "completion_id": 0, "solution": "import numpy as np\ndef mae(y_true, y_pred):\n    \"\"\"\n    Calculate Mean Absolute Error between two arrays.\n\n    Parameters:\n    y_true (numpy.ndarray): Array of true values\n    y_pred (numpy.ndarray): Array of predicted values\n\n    Returns:\n    float: Mean Absolute Error rounded to 3 decimal places\n    \"\"\"\n    absolute_differences = np.abs(y_true - y_pred)\n    mean_absolute_error = np.mean(absolute_differences)\n    return round(mean_absolute_error, 3)"}
{"task_id": 94, "completion_id": 0, "solution": "import numpy as np\ndef compute_qkv(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray) -> tuple:\n    Q = np.dot(X, W_q)\n    K = np.dot(X, W_k)\n    V = np.dot(X, W_v)\n    return (Q, K, V)\ndef self_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray) -> np.ndarray:\n    d_k = K.shape[-1]\n    scores = np.dot(Q, K.T) / np.sqrt(d_k)\n    attention = np.dot(np.exp(scores) / np.sum(np.exp(scores), axis=-1, keepdims=True), V)\n    return attention\ndef multi_head_attention(X: np.ndarray, W_q: np.ndarray, W_k: np.ndarray, W_v: np.ndarray, n_heads: int) -> list:\n    (batch_size, seq_len, d_model) = X.shape\n    d_k = d_model // n_heads\n    (Q, K, V) = compute_qkv(X, W_q, W_k, W_v)\n    Q_heads = np.split(Q, n_heads, axis=-1)\n    K_heads = np.split(K, n_heads, axis=-1)\n    V_heads = np.split(V, n_heads, axis=-1)\n    heads = [self_attention(Q_head, K_head, V_head) for (Q_head, K_head, V_head) in zip(Q_heads, K_heads, V_heads)]\n    concatenated = np.concatenate(heads, axis=-1)\n    concatenated = np.round(concatenated, 4)\n    return concatenated.tolist()\nX = np.random.rand(2, 4, 8)\nW_q = np.random.rand(8, 8)\nW_k = np.random.rand(8, 8)\nW_v = np.random.rand(8, 8)\nn_heads = 2"}
{"task_id": 95, "completion_id": 0, "solution": "from typing import List\ndef phi_corr(x: List[int], y: List[int]) -> float:\n    \"\"\"\n    Calculate the Phi coefficient between two binary variables.\n\n    Args:\n    x (List[int]): A list of binary values (0 or 1).\n    y (List[int]): A list of binary values (0 or 1).\n\n    Returns:\n    float: The Phi coefficient rounded to 4 decimal places.\n    \"\"\"\n    n11 = sum((a == 1 and b == 1 for (a, b) in zip(x, y)))\n    n00 = sum((a == 0 and b == 0 for (a, b) in zip(x, y)))\n    n10 = sum((a == 1 and b == 0 for (a, b) in zip(x, y)))\n    n01 = sum((a == 0 and b == 1 for (a, b) in zip(x, y)))\n    n1_dot = n11 + n10\n    n0_dot = n00 + n01\n    n_dot1 = n11 + n01\n    n_dot0 = n00 + n10\n    numerator = n11 * n00 - n10 * n01\n    denominator = (n1_dot * n0_dot * n_dot1 * n_dot0) ** 0.5\n    if denominator == 0:\n        return 0.0\n    phi = numerator / denominator\n    return round(phi, 4)\nx = [1, 0, 1, 0, 1, 1, 0, 0]\ny = [1, 0, 0, 1, 1, 1, 0, 0]"}
{"task_id": 96, "completion_id": 0, "solution": "def hard_sigmoid(x: float) -> float:\n    \"\"\"\n    Implements the Hard Sigmoid activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Hard Sigmoid of the input\n    \"\"\"\n    intermediate_value = (x + 1) / 2\n    return max(0.0, min(1.0, intermediate_value))"}
{"task_id": 97, "completion_id": 0, "solution": "import math\ndef elu(x: float, alpha: float=1.0) -> float:\n    \"\"\"\n    Compute the ELU activation function.\n\n    Args:\n        x (float): Input value\n        alpha (float): ELU parameter for negative values (default: 1.0)\n\n    Returns:\n        float: ELU activation value\n    \"\"\"\n    if x > 0:\n        return round(x, 4)\n    else:\n        return round(alpha * (math.exp(x) - 1), 4)"}
{"task_id": 98, "completion_id": 0, "solution": "def prelu(x: float, alpha: float=0.25) -> float:\n    \"\"\"\n    Implements the PReLU (Parametric ReLU) activation function.\n\n    Args:\n        x: Input value\n        alpha: Slope parameter for negative values (default: 0.25)\n\n    Returns:\n        float: PReLU activation value\n    \"\"\"\n    if x > 0:\n        return x\n    else:\n        return alpha * x"}
{"task_id": 99, "completion_id": 0, "solution": "import math\ndef softplus(x: float) -> float:\n    \"\"\"\n    Compute the softplus activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The softplus value: log(1 + e^x)\n    \"\"\"\n    if x > 18:\n        return x\n    elif x < -37:\n        return math.exp(x)\n    else:\n        return math.log(1 + math.exp(x))\n    return round(result, 4)"}
{"task_id": 100, "completion_id": 0, "solution": "def softsign(x: float) -> float:\n    \"\"\"\n    Implements the Softsign activation function.\n\n    Args:\n        x (float): Input value\n\n    Returns:\n        float: The Softsign of the input\n    \"\"\"\n    abs_x = abs(x)\n    result = x / (1 + abs_x)\n    return round(result, 4)"}
{"task_id": 101, "completion_id": 0, "solution": "import numpy as np\ndef grpo_objective(rhos, A, pi_theta_old, pi_theta_ref, epsilon=0.2, beta=0.01) -> float:\n    \"\"\"\n    Compute the GRPO objective function.\n\n    Args:\n        rhos: List of likelihood ratios (p_i) = pi_theta(o_i | q) / pi_theta_old(o_i | q).\n        A: List of advantage estimates (A_i).\n        pi_theta_old: List representing the old policy probabilities pi_theta_old(o_i | q).\n        pi_theta_ref: List representing the reference policy probabilities pi_ref(o_i | q).\n        epsilon: Clipping parameter (eps).\n        beta: KL divergence penalty coefficient (beta).\n\n    Returns:\n        The computed GRPO objective value.\n    \"\"\"\n    rhos = np.array(rhos)\n    A = np.array(A)\n    pi_theta_old = np.array(pi_theta_old)\n    pi_theta_ref = np.array(pi_theta_ref)\n    clipped_rhos = np.clip(rhos, 1 - epsilon, 1 + epsilon)\n    grpo_obj = np.mean(np.minimum(rhos * A, clipped_rhos * A))\n    kl_divergence = np.mean(pi_theta_old * np.log(pi_theta_old / pi_theta_ref))\n    grpo_obj -= beta * kl_divergence\n    return round(grpo_obj, 6)\nrhos = [1.2, 0.8, 1.5, 0.5]\nA = [0.3, -0.2, 0.4, -0.1]\npi_theta_old = [0.7, 0.3, 0.6, 0.4]\npi_theta_ref = [0.6, 0.4, 0.5, 0.5]"}
{"task_id": 102, "completion_id": 0, "solution": "import math\ndef swish(x: float) -> float:\n    \"\"\"\n    Implements the Swish activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        The Swish activation value\n    \"\"\"\n    swish_value = x / (1 + math.exp(-x))\n    return round(swish_value, 4)"}
{"task_id": 103, "completion_id": 0, "solution": "import math\nimport numpy as np\ndef selu(x: float) -> float:\n    \"\"\"\n    Implements the SELU (Scaled Exponential Linear Unit) activation function.\n\n    Args:\n        x: Input value\n\n    Returns:\n        SELU activation value\n    \"\"\"\n    alpha = 1.6732632423543772\n    scale = 1.0507009873554805\n    if x > 0:\n        return round(scale * x, 4)\n    else:\n        return round(scale * alpha * (math.exp(x) - 1), 4)"}
{"task_id": 104, "completion_id": 0, "solution": "import numpy as np\ndef predict_logistic(X: np.ndarray, weights: np.ndarray, bias: float) -> list:\n    \"\"\"\n    Implements binary classification prediction using Logistic Regression.\n\n    Args:\n        X: Input feature matrix (shape: N x D)\n        weights: Model weights (shape: D)\n        bias: Model bias\n\n    Returns:\n        Binary predictions (0 or 1)\n    \"\"\"\n    linear_combination = np.dot(X, weights) + bias\n    probabilities = 1 / (1 + np.exp(-linear_combination))\n    predictions = (probabilities > 0.5).astype(int)\n    return predictions.tolist()\nX_sample = np.array([[1, 2], [2, 3], [3, 4]])\nweights_sample = np.array([0.5, -0.5])\nbias_sample = 0.1\npredictions = predict_logistic(X_sample, weights_sample, bias_sample)"}
{"task_id": 105, "completion_id": 0, "solution": "import numpy as np\ndef softmax(z):\n    \"\"\"Compute softmax values for each sets of scores in z.\"\"\"\n    e_z = np.exp(z - np.max(z, axis=1, keepdims=True))\n    return e_z / e_z.sum(axis=1, keepdims=True)\ndef cross_entropy_loss(y_true, y_pred):\n    \"\"\"Compute the cross entropy loss.\"\"\"\n    return -np.sum(y_true * np.log(y_pred + 1e-10)) / y_true.shape[0]\ndef train_softmaxreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for Softmax regression, optimizing parameters with Cross Entropy loss.\n\n    Returns:\n        B : list[float], CxM updated parameter vector rounded to 4 floating points\n        losses : list[float], collected values of a Cross Entropy rounded to 4 floating points\n    \"\"\"\n    (n_samples, n_features) = X.shape\n    n_classes = len(np.unique(y))\n    y = np.eye(n_classes)[y]\n    B = np.random.randn(n_features, n_classes)\n    losses = []\n    for _ in range(iterations):\n        scores = X @ B\n        probabilities = softmax(scores)\n        loss = cross_entropy_loss(y, probabilities)\n        losses.append(round(loss, 4))\n        gradients = X.T @ (probabilities - y) / n_samples\n        B -= learning_rate * gradients\n    B = np.round(B, 4).tolist()\n    losses = [round(loss, 4) for loss in losses]\n    return (B, losses)"}
{"task_id": 106, "completion_id": 0, "solution": "import numpy as np\ndef sigmoid(z):\n    \"\"\"\n    Sigmoid function to map predicted values to probabilities.\n    \"\"\"\n    return 1 / (1 + np.exp(-z))\ndef binary_cross_entropy(y_true, y_pred):\n    \"\"\"\n    Binary Cross Entropy loss function.\n    \"\"\"\n    return -np.mean(y_true * np.log(y_pred) + (1 - y_true) * np.log(1 - y_pred))\ndef train_logreg(X: np.ndarray, y: np.ndarray, learning_rate: float, iterations: int) -> tuple[list[float], list[float]]:\n    \"\"\"\n    Gradient-descent training algorithm for logistic regression, optimizing parameters with Binary Cross Entropy loss.\n    \"\"\"\n    X = np.hstack([np.ones((X.shape[0], 1)), X])\n    weights = np.zeros(X.shape[1])\n    loss_values = []\n    for i in range(iterations):\n        z = np.dot(X, weights)\n        y_pred = sigmoid(z)\n        gradient = np.dot(X.T, y_pred - y) / y.size\n        weights -= learning_rate * gradient\n        loss = binary_cross_entropy(y, y_pred)\n        loss_values.append(round(loss, 4))\n    return (weights.tolist(), loss_values)\nX = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])\ny = np.array([0, 0, 1, 1])\nlearning_rate = 0.1\niterations = 1000"}
{"task_id": 107, "completion_id": 0, "solution": "import numpy as np\ndef masked_attention(Q: np.ndarray, K: np.ndarray, V: np.ndarray, mask: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute masked self-attention.\n    \"\"\"\n    d_k = K.shape[-1]\n    scores = np.dot(Q, K.T) / np.sqrt(d_k)\n    scores = np.where(mask, scores, -np.inf)\n    weights = np.exp(scores) / np.sum(np.exp(scores), axis=-1, keepdims=True)\n    output = np.dot(weights, V)\n    return output.tolist()\nmask = np.array([[True, False], [True, True]])\noutput = masked_attention(Q, K, V, mask)"}
{"task_id": 108, "completion_id": 0, "solution": "import math\nfrom collections import Counter\ndef disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    \"\"\"\n    color_counts = Counter(apples)\n    total_apples = len(apples)\n    entropy = 0.0\n    for count in color_counts.values():\n        probability = count / total_apples\n        entropy -= probability * math.log2(probability)\n    return round(entropy, 4)"}
{"task_id": 109, "completion_id": 0, "solution": "import numpy as np\ndef layer_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05) -> list:\n    \"\"\"\n    Perform Layer Normalization on a 3D input tensor X.\n    \n    Parameters:\n    X (np.ndarray): Input tensor of shape (batch_size, seq_length, feature_dim).\n    gamma (np.ndarray): Scaling parameter of shape (feature_dim,).\n    beta (np.ndarray): Shifting parameter of shape (feature_dim,).\n    epsilon (float): Small constant to avoid division by zero.\n    \n    Returns:\n    list: Normalized tensor rounded to 5 decimal places.\n    \"\"\"\n    mean = np.mean(X, axis=-1, keepdims=True)\n    var = np.var(X, axis=-1, keepdims=True)\n    X_norm = (X - mean) / np.sqrt(var + epsilon)\n    X_scaled = X_norm * gamma + beta\n    return np.round(X_scaled, decimals=5).tolist()"}
{"task_id": 110, "completion_id": 0, "solution": "import numpy as np\nfrom collections import Counter\ndef meteor_score(reference, candidate, alpha=0.9, beta=3, gamma=0.5):\n    ref_tokens = reference.split()\n    cand_tokens = candidate.split()\n    ref_counter = Counter(ref_tokens)\n    cand_counter = Counter(cand_tokens)\n    matches = sum((ref_counter & cand_counter).values())\n    precision = matches / len(cand_tokens) if len(cand_tokens) > 0 else 0\n    recall = matches / len(ref_tokens) if len(ref_tokens) > 0 else 0\n    f_mean = (1 + beta ** 2) * (precision * recall) / (beta ** 2 * precision + recall) if precision + recall > 0 else 0\n    penalty = max(0, 1 - gamma * abs(len(ref_tokens) - len(cand_tokens)) / (len(ref_tokens) + len(cand_tokens)))\n    meteor = alpha * f_mean + (1 - alpha) * penalty\n    return round(meteor, 3)"}
{"task_id": 111, "completion_id": 0, "solution": "import numpy as np\ndef compute_pmi(joint_counts, total_counts_x, total_counts_y, total_samples):\n    \"\"\"\n    Computes the Pointwise Mutual Information (PMI) given the joint occurrence count of two events,\n    their individual counts, and the total number of samples.\n    \n    Parameters:\n    - joint_counts: int, the number of times both events x and y occur together.\n    - total_counts_x: int, the total number of occurrences of event x.\n    - total_counts_y: int, the total number of occurrences of event y.\n    - total_samples: int, the total number of samples.\n    \n    Returns:\n    - float, the PMI value rounded to 3 decimal places.\n    \"\"\"\n    p_x_y = joint_counts / total_samples\n    p_x = total_counts_x / total_samples\n    p_y = total_counts_y / total_samples\n    pmi = np.log2(p_x_y / (p_x * p_y))\n    return round(pmi, 3)\njoint_counts = 100\ntotal_counts_x = 200\ntotal_counts_y = 300\ntotal_samples = 1000"}
{"task_id": 112, "completion_id": 0, "solution": "def min_max(x: list[int]) -> list[float]:\n    if not x:\n        return []\n    min_val = min(x)\n    max_val = max(x)\n    if min_val == max_val:\n        return [0.0] * len(x)\n    normalized = [(val - min_val) / (max_val - min_val) for val in x]\n    return [round(val, 4) for val in normalized]"}
{"task_id": 113, "completion_id": 0, "solution": "import numpy as np\ndef residual_block(x: np.ndarray, w1: np.ndarray, w2: np.ndarray) -> list:\n    \"\"\"\n    Implements a simple residual block with a shortcut connection.\n    \n    Parameters:\n    x (np.ndarray): The input array.\n    w1 (np.ndarray): The first weight matrix.\n    w2 (np.ndarray): The second weight matrix.\n    \n    Returns:\n    list: The output of the residual block, rounded to 4 decimal places and converted to a list.\n    \"\"\"\n    y = np.dot(x, w1)\n    y = np.maximum(y, 0)\n    y = np.dot(y, w2)\n    y = y + x\n    y = np.maximum(y, 0)\n    y = np.round(y, 4).tolist()\n    return y\nx = np.array([1, 2, 3])\nw1 = np.array([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]])\nw2 = np.array([[0.9, 0.8, 0.7], [0.6, 0.5, 0.4], [0.3, 0.2, 0.1]])"}
{"task_id": 114, "completion_id": 0, "solution": "import numpy as np\ndef global_avg_pool(x: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Perform global average pooling on a 3D NumPy array.\n    \n    Parameters:\n    x (np.ndarray): A 3D array of shape (height, width, channels).\n    \n    Returns:\n    np.ndarray: A 1D array of shape (channels,) containing the average of each channel.\n    \"\"\"\n    avg_values = np.mean(x, axis=(0, 1))\n    return avg_values"}
{"task_id": 115, "completion_id": 0, "solution": "import numpy as np\ndef batch_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, epsilon: float=1e-05) -> list:\n    \"\"\"\n    Performs batch normalization on a 4D NumPy array in BCHW format.\n    \n    Parameters:\n    X (np.ndarray): Input array of shape (batch, channels, height, width).\n    gamma (np.ndarray): Scale parameter of shape (channels,).\n    beta (np.ndarray): Shift parameter of shape (channels,).\n    epsilon (float): Small value to ensure numerical stability.\n    \n    Returns:\n    list: Normalized array rounded to 4 decimal places and converted to a list.\n    \"\"\"\n    mean = np.mean(X, axis=(0, 2, 3), keepdims=True)\n    var = np.var(X, axis=(0, 2, 3), keepdims=True)\n    X_normalized = (X - mean) / np.sqrt(var + epsilon)\n    X_normalized = gamma[np.newaxis, :, np.newaxis, np.newaxis] * X_normalized + beta[np.newaxis, :, np.newaxis, np.newaxis]\n    return np.round(X_normalized, decimals=4).tolist()"}
{"task_id": 116, "completion_id": 0, "solution": "def poly_term_derivative(c: float, x: float, n: float) -> float:\n    derivative = n * c * x ** (n - 1)\n    return round(derivative, 4)"}
{"task_id": 117, "completion_id": 0, "solution": "import numpy as np\ndef orthonormal_basis(vectors: list[list[float]], tol: float=1e-10) -> list[list[float]]:\n    \"\"\"\n    Computes an orthonormal basis for the subspace spanned by a list of 2D vectors using the Gram-Schmidt process.\n    \n    Parameters:\n    vectors (list of list of float): A list of 2D vectors.\n    tol (float): Tolerance value to determine linear independence.\n    \n    Returns:\n    list of list of float: A list of orthonormal vectors.\n    \"\"\"\n    vectors = np.array(vectors)\n    basis = []\n    for v in vectors:\n        for b in basis:\n            v -= np.dot(v, b) * b\n        if np.linalg.norm(v) > tol:\n            v = v / np.linalg.norm(v)\n            basis.append(v)\n    basis = [np.round(np.array(b), 4).tolist() for b in basis]\n    return basis\nvectors = [[1, 2], [2, 4], [1, 0]]"}
{"task_id": 118, "completion_id": 0, "solution": "import numpy as np\ndef cross_product(a, b):\n    cross = np.cross(a, b)\n    rounded_cross = np.round(cross, decimals=4)\n    return rounded_cross.tolist()"}
{"task_id": 119, "completion_id": 0, "solution": "import numpy as np\ndef cramers_rule(A, b):\n    A = np.array(A)\n    b = np.array(b)\n    det_A = np.linalg.det(A)\n    if det_A == 0:\n        return -1\n    x = []\n    for i in range(A.shape[1]):\n        A_i = A.copy()\n        A_i[:, i] = b\n        det_A_i = np.linalg.det(A_i)\n        x_i = det_A_i / det_A\n        x.append(round(x_i, 4))\n    return x\nA = [[3, 2, -1], [2, -2, 4], [-1, 0.5, -1]]\nb = [1, -2, 0]"}
{"task_id": 120, "completion_id": 0, "solution": "import numpy as np\ndef bhattacharyya_distance(p: list[float], q: list[float]) -> float:\n    if not p or not q or len(p) != len(q):\n        return 0.0\n    bc = sum((np.sqrt(pi * qi) for (pi, qi) in zip(p, q)))\n    bd = -np.log(bc)\n    return round(bd, 4)\np = [0.1, 0.2, 0.3, 0.4]\nq = [0.4, 0.3, 0.2, 0.1]"}
{"task_id": 121, "completion_id": 0, "solution": "def vector_sum(a: list[int | float], b: list[int | float]) -> list[int | float] | int:\n    if len(a) != len(b):\n        return -1\n    result = []\n    for i in range(len(a)):\n        result.append(a[i] + b[i])\n    return result"}
{"task_id": 122, "completion_id": 0, "solution": "import numpy as np\ndef softmax(x):\n    \"\"\"Compute softmax values for each sets of scores in x.\"\"\"\n    e_x = np.exp(x - np.max(x))\n    return e_x / e_x.sum(axis=0)\ndef compute_policy_gradient(theta: np.ndarray, episodes: list[list[tuple[int, int, float]]]):\n    (num_states, num_actions) = theta.shape\n    gradient = np.zeros_like(theta)\n    for episode in episodes:\n        returns = np.zeros(len(episode))\n        G = 0\n        for t in reversed(range(len(episode))):\n            (state, action, reward) = episode[t]\n            G = reward + G\n            returns[t] = G\n        for (t, (state, action, _)) in enumerate(episode):\n            policy = softmax(theta[state, :])\n            log_policy = np.log(policy[action])\n            gradient[state, action] += log_policy * returns[t]\n    gradient /= len(episodes)\n    gradient = np.round(gradient, 4)\n    return gradient.tolist()\ntheta = np.array([[1, 2, 3], [4, 5, 6]])\nepisodes = [[(0, 1, 1.0), (1, 2, 1.0)], [(0, 2, 1.0), (1, 1, 1.0)]]"}
{"task_id": 123, "completion_id": 0, "solution": "def compute_efficiency(n_experts, k_active, d_in, d_out):\n    \"\"\"\n    Calculate the computational cost savings of an MoE layer compared to a dense layer.\n    \n    :param n_experts: Total number of experts in the MoE layer.\n    :param k_active: Number of active experts in the MoE layer.\n    :param d_in: Input dimension.\n    :param d_out: Output dimension.\n    :return: Savings percentage rounded to the nearest 1th decimal.\n    \"\"\"\n    flops_dense = n_experts * d_in * d_out\n    flops_moe = k_active * d_in * d_out\n    savings = (flops_dense - flops_moe) / flops_dense * 100\n    savings_rounded = round(savings, 1)\n    return savings_rounded\nn_experts = 10\nk_active = 2\nd_in = 512\nd_out = 512"}
{"task_id": 124, "completion_id": 0, "solution": "import numpy as np\ndef noisy_topk_gating(X: np.ndarray, W_g: np.ndarray, W_noise: np.ndarray, N: np.ndarray, k: int) -> list:\n    logits = X @ W_g\n    noisy_logits = logits + W_noise * N\n    exp_noisy_logits = np.exp(noisy_logits - np.max(noisy_logits, axis=1, keepdims=True))\n    probabilities = exp_noisy_logits / np.sum(exp_noisy_logits, axis=1, keepdims=True)\n    topk_indices = np.argsort(probabilities, axis=1)[:, -k:]\n    topk_probabilities = np.zeros_like(probabilities)\n    for (i, indices) in enumerate(topk_indices):\n        topk_probabilities[i, indices] = probabilities[i, indices]\n    topk_probabilities /= np.sum(topk_probabilities, axis=1, keepdims=True)\n    return np.round(topk_probabilities, decimals=4).tolist()"}
{"task_id": 125, "completion_id": 0, "solution": "import numpy as np\ndef moe(x: np.ndarray, We: np.ndarray, Wg: np.ndarray, n_experts: int, top_k: int):\n    gating_scores = x @ Wg\n    gating_probs = np.exp(gating_scores) / np.sum(np.exp(gating_scores), axis=-1, keepdims=True)\n    top_k_indices = np.argsort(gating_probs, axis=-1)[:, :, -top_k:]\n    top_k_probs = np.take_along_axis(gating_probs, top_k_indices, axis=-1)\n    x_expanded = np.expand_dims(x, axis=-2)\n    x_expanded = np.repeat(x_expanded, n_experts, axis=-2)\n    expert_outputs = x_expanded @ We\n    top_k_expert_outputs = np.take_along_axis(expert_outputs, np.expand_dims(top_k_indices, axis=-1), axis=-2)\n    aggregated_output = np.sum(top_k_probs[..., np.newaxis] * top_k_expert_outputs, axis=-2)\n    return np.round(aggregated_output, decimals=4).tolist()"}
{"task_id": 126, "completion_id": 0, "solution": "import numpy as np\ndef group_normalization(X: np.ndarray, gamma: np.ndarray, beta: np.ndarray, num_groups: int, epsilon: float=1e-05):\n    (B, C, H, W) = X.shape\n    if C % num_groups != 0:\n        raise ValueError('Number of channels must be divisible by num_groups')\n    G = num_groups\n    X = X.reshape(B, G, C // G, H, W)\n    mean = X.mean(axis=(2, 3, 4), keepdims=True)\n    var = X.var(axis=(2, 3, 4), keepdims=True)\n    X_norm = (X - mean) / np.sqrt(var + epsilon)\n    X_norm = X_norm.reshape(B, C, H, W)\n    gamma = gamma.reshape(1, C, 1, 1)\n    beta = beta.reshape(1, C, 1, 1)\n    X_out = X_norm * gamma + beta\n    X_out = X_out.round(4)\n    return X_out.tolist()"}
{"task_id": 127, "completion_id": 0, "solution": "import numpy as np\ndef find_treasure(start_x: float, learning_rate: float=0.1, tolerance: float=1e-06, max_iters: int=10000) -> float:\n\n    def f(x):\n        return x ** 4 - 3 * x ** 3 + 2\n\n    def df(x):\n        return 4 * x ** 3 - 9 * x ** 2\n    x = start_x\n    for _ in range(max_iters):\n        gradient = df(x)\n        x_new = x - learning_rate * gradient\n        if abs(x_new - x) < tolerance:\n            break\n        x = x_new\n    return round(x, 4)\nstart_x = 1.0"}
{"task_id": 128, "completion_id": 0, "solution": "import numpy as np\ndef dynamic_tanh(x: np.ndarray, alpha: float, gamma: float, beta: float) -> list[float]:\n    dyt_result = gamma * np.tanh(alpha * x + beta)\n    dyt_rounded = np.round(dyt_result, 4)\n    return dyt_rounded.tolist()\nx = np.array([0.1, 0.5, 1.0, 1.5, 2.0])\nalpha = 1.0\ngamma = 1.0\nbeta = 0.0"}
