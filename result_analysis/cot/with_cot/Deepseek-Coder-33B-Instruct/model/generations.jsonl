{"task_id": 0, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef ridge_regression(data: np.ndarray, alpha: float = 0.0) -> list[float]:\n    \"\"\"\n    Implement Ridge (L2-regularised) Linear Regression using its closed-form solution.\n    Given an ndarray where the last column is the target y and all preceding columns are the features X,\n    add a bias (intercept) term, then compute the weight vector.\n\n    Parameters:\n    data (np.ndarray): ndarray where the last column is the target y and all preceding columns are the features X.\n    alpha (float): regularisation strength. Default is 0.0.\n\n    Returns:\n    list[float]: weight vector rounded to 4 decimal places as a Python list.\n    If the matrix (X^T X + alpha I) is not invertible, return -1.\n    \"\"\"\n\n    # Add a bias (intercept) term\n    data = np.insert(data, 0, 1, axis=1)\n\n    # Split data into X and y\n    X = data[:, :-1]\n    y = data[:, -1]\n\n    # Compute the weight vector\n    try:\n        # Compute (X^T X + alpha I)^-1\n        inverse_term = np.linalg.inv(np.dot(X.T, X) + alpha * np.eye(X.shape[1]))\n        # Compute X^T y\n        xty = np.dot(X.T, y)\n        # Compute the weight vector\n        w = np.dot(inverse_term, xty)\n        # Round every coefficient to the nearest 4th decimal and return a Python list\n        return np.round(w, 4).tolist()\n    except np.linalg.LinAlgError:\n        # If the matrix (X^T X + alpha I) is not invertible, return -1\n        return -1\n```\n\nThis script first adds a bias (intercept) term to the data, then splits the data into features X and target y. It then computes the weight vector using the closed-form solution for Ridge Regression. If the matrix (X^T X + alpha I) is not invertible, it catches the `LinAlgError` exception and returns -1. Otherwise, it rounds every coefficient to the nearest 4th decimal and returns the weight vector as a Python list.\n"}
{"task_id": 1, "completion_id": 0, "completion": "Here is a Python script that implements the dual-form perceptron learning algorithm:\n\n```python\nimport numpy as np\n\ndef perceptron_dual(X_train: np.ndarray,\n                    y_train: np.ndarray,\n                    eta: float = 1.0,\n                    n_iter: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Dual-form perceptron.\n\n    Parameters\n    ----------\n    X_train : np.ndarray\n        Training samples of shape (n_samples, n_features).\n    y_train : np.ndarray\n        Binary labels (+1 or \u20111) of length n_samples.\n    eta : float, optional\n        Learning rate, by default 1.0.\n    n_iter : int, optional\n        Maximum number of updates, by default 10 000.\n\n    Returns\n    -------\n    tuple[list[float], float]\n        The weight vector (as a list) and the bias; both rounded to 4 decimals.\n    \"\"\"\n    n_samples, n_features = X_train.shape\n    K = np.dot(X_train, X_train.T)\n    alpha = np.zeros(n_samples)\n    b = 0.0\n    updates = 0\n\n    while updates < n_iter:\n        updated = False\n        for i in range(n_samples):\n            activation = np.dot(K[i], y_train * alpha)\n            if y_train[i] * (activation + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_train[i]\n                updated = True\n                updates += 1\n                if updates >= n_iter:\n                    break\n        if not updated:\n            break\n\n    w = np.dot(alpha * y_train, X_train)\n    return (np.round(w, 4).tolist(), np.round(b, 4))\n```\n\nThis script first computes the Gram matrix `K`, which is the matrix of all pairwise dot products of the training samples. Then it initializes the dual parameters `alpha` and the bias `b` to zero. It then enters a loop where it scans the training samples in order. For each sample, it computes the activation and checks if the margin is less than or equal to zero. If it is, the sample is misclassified and the dual parameters and bias are updated. The loop continues until no update is made in a complete pass over the data or until the maximum number of updates is reached. Finally, it computes the weight vector `w` from the final dual parameters and returns it along with the bias, both rounded to four decimal places.\n"}
{"task_id": 2, "completion_id": 0, "completion": "Here is the Python script that implements the required GLM link functions:\n\n```python\nimport numpy as np\n\ndef glm_links():\n    \"\"\"Construct and return standard GLM link functions.\n\n    Returns\n    -------\n    dict\n        A three-entry dictionary (identity, log, logit) where each entry is a\n        dictionary containing callables for the link, its inverse and its\n        derivative with respect to \u03bc. All functions must work with numpy\n        scalars as well as 1-D/2-D numpy arrays via element-wise operations.\n    \"\"\"\n    def identity_link(mu):\n        return mu\n\n    def identity_inv_link(eta):\n        return eta\n\n    def identity_derivative(mu):\n        return np.ones_like(mu)\n\n    def log_link(mu):\n        return np.log(mu)\n\n    def log_inv_link(eta):\n        return np.exp(eta)\n\n    def log_derivative(mu):\n        return 1 / mu\n\n    def logit_link(mu):\n        return np.log(mu / (1 - mu))\n\n    def logit_inv_link(eta):\n        return 1 / (1 + np.exp(-eta))\n\n    def logit_derivative(mu):\n        return 1 / (mu * (1 - mu))\n\n    return {\n        \"identity\": {\n            \"link\": identity_link,\n            \"inv_link\": identity_inv_link,\n            \"derivative\": identity_derivative\n        },\n        \"log\": {\n            \"link\": log_link,\n            \"inv_link\": log_inv_link,\n            \"derivative\": log_derivative\n        },\n        \"logit\": {\n            \"link\": logit_link,\n            \"inv_link\": logit_inv_link,\n            \"derivative\": logit_derivative\n        }\n    }\n```\n\nThis script defines the three link functions and their inverses and derivatives for the identity, log, and logit links. It then returns a dictionary where each key is a string representing the link function and the value is another dictionary containing the link, inverse link, and derivative functions.\n\nThe functions are designed to work with numpy arrays, allowing for element-wise operations. The identity link function simply returns the input, the log link function returns the natural logarithm of the input, and the logit link function returns the logit of the input. The inverse link functions are the inverses of these, and the derivative functions return the derivative of the link function with respect to the input.\n"}
{"task_id": 3, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\nclass Node:\n    def __init__(self, indices):\n        self.indices = indices\n        self.left = None\n        self.right = None\n        self.is_leaf = False\n\nclass IsolationTree:\n    def __init__(self, data):\n        self.data = data\n        self.root = Node(list(range(len(data))))\n        self.n_features = data.shape[1]\n        self.depths = [0] * len(data)\n\n    def build_tree(self, node, depth):\n        if len(node.indices) < 3:\n            node.is_leaf = True\n            for i in node.indices:\n                self.depths[i] = depth\n            return\n\n        feature = np.random.choice(self.n_features)\n        down = np.min(self.data[node.indices, feature])\n        up = np.max(self.data[node.indices, feature])\n        v = np.random.uniform(down, up)\n\n        left_indices = [i for i in node.indices if self.data[i, feature] <= v]\n        right_indices = [i for i in node.indices if self.data[i, feature] > v]\n\n        node.left = Node(left_indices)\n        node.right = Node(right_indices)\n\n        self.build_tree(node.left, depth + 1)\n        self.build_tree(node.right, depth + 1)\n\ndef isolation_tree_path_length(data: np.ndarray) -> list[int]:\n    np.random.seed(0)\n    tree = IsolationTree(data)\n    tree.build_tree(tree.root, 0)\n    return tree.depths\n```\n\nThis script first defines a `Node` class to represent a node in the isolation tree. Each node contains a list of indices of samples that reach it, and pointers to its left and right children. The `IsolationTree` class represents the isolation tree itself. It contains a `build_tree` method that recursively builds the tree following the rules described in the task statement. The `isolation_tree_path_length` function creates an `IsolationTree` object, builds the tree, and returns the depths of the leaves that each sample ends up in.\n"}
{"task_id": 7, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport math\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict, Tuple, Hashable\n\ndef find_frequent_itemsets(transactions: List[List[Hashable]], minsup: float) -> Dict[Tuple[Hashable, ...], int]:\n    \"\"\"Return all frequent itemsets in **transactions**.\n\n    Args:\n        transactions: List where each element represents a transaction and is\n                       itself a list of items (hashable Python objects).\n        minsup:       Minimum support given as a fraction between 0 and 1.\n\n    Returns:\n        A dictionary that maps every frequent itemset (stored as a tuple of\n        sorted items) to its absolute support count.  If no itemset reaches\n        the threshold the function must return an empty dictionary.\n    \"\"\"\n    # Count the occurrence of each item\n    item_counts = Counter()\n    for transaction in transactions:\n        item_counts.update(transaction)\n\n    # Filter out items that do not meet the minimum support threshold\n    min_count = math.ceil(minsup * len(transactions))\n    frequent_items = {item for item, count in item_counts.items() if count >= min_count}\n\n    # Generate all possible itemsets and count their occurrences\n    itemsets = Counter()\n    for transaction in transactions:\n        for length in range(1, len(frequent_items) + 1):\n            for itemset in combinations(transaction, length):\n                if all(item in frequent_items for item in itemset):\n                    itemsets[itemset] += 1\n\n    # Filter out itemsets that do not meet the minimum support threshold\n    frequent_itemsets = {itemset: count for itemset, count in itemsets.items() if count >= min_count}\n\n    return frequent_itemsets\n```\n\nThis script first counts the occurrence of each item in the transactions. It then filters out items that do not meet the minimum support threshold. It then generates all possible itemsets of length 1 to the number of frequent items and counts their occurrences. It finally filters out itemsets that do not meet the minimum support threshold. The function returns a dictionary that maps each frequent itemset to its absolute support count.\n"}
{"task_id": 11, "completion_id": 0, "completion": "Here is a Python script that implements the K-Means clustering algorithm from scratch:\n\n```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, k: int, epsilon: float = 1e-3, max_iter: int = 2000) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Cluster *data* into *k* groups using the K-Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column a feature.\n    k : int\n        Desired number of clusters (1 \u2264 k \u2264 number of samples).\n    epsilon : float, optional (default=1e-3)\n        Threshold on the maximum centre movement used as the convergence\n        criterion.\n    max_iter : int, optional (default=2000)\n        Maximum number of iterations allowed.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[int]]\n        A pair consisting of\n        \u2022 a list with *k* centres (each rounded to 4 decimals) and\n        \u2022 a list with the cluster index of every input sample.\n    \"\"\"\n    # Initialize the centers as the first k samples\n    centers = data[:k]\n\n    # Initialize the labels\n    labels = np.zeros(data.shape[0], dtype=int)\n\n    # Iterate until convergence or max_iter\n    for _ in range(max_iter):\n        # Assign each sample to the nearest center\n        for i, sample in enumerate(data):\n            distances = np.linalg.norm(centers - sample, axis=1)\n            labels[i] = np.argmin(distances)\n\n        # Compute the new centers as the mean of the samples in each cluster\n        new_centers = np.array([data[labels == i].mean(axis=0) for i in range(k)])\n\n        # Check for empty clusters\n        for i in range(k):\n            if np.isnan(new_centers[i]).any():\n                # Re-initialize the center with a random sample\n                new_centers[i] = data[np.random.randint(0, data.shape[0])]\n\n        # Check for convergence\n        if np.linalg.norm(new_centers - centers) < epsilon:\n            break\n\n        # Update the centers\n        centers = new_centers\n\n    # Round the centers to 4 decimal places\n    centers = [list(map(lambda x: round(x, 4), center)) for center in centers]\n\n    return centers, labels.tolist()\n```\n\nThis script first initializes the centers as the first `k` samples. It then iterates until convergence or `max_iter` iterations have been executed. In each iteration, it assigns each sample to the nearest center, computes the new centers as the mean of the samples in each cluster, checks for empty clusters, checks for convergence, and updates the centers. Finally, it rounds the centers to 4 decimal places and returns them together with the list of cluster labels for the samples.\n"}
{"task_id": 13, "completion_id": 0, "completion": "Here is a Python script that implements the item-based k-NN collaborative filtering recommender:\n\n```python\nimport numpy as np\nfrom collections import defaultdict\n\ndef knn_recommend(data: np.ndarray,\n                  user_ind: int,\n                  k: int,\n                  criterion: str = 'cosine') -> list[int]:\n    \"\"\"Item-based k-NN collaborative filtering recommender.\n\n    The function must build an item\u2013item similarity matrix and then predict\n    the attractiveness of every yet unrated item for the specified user.  It\n    finally returns the indices of the *k* most promising items.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D rating matrix of shape (n_user, n_item) containing **positive**\n        ratings; a value of *0* means *not rated*.\n    user_ind : int\n        Index (0-based) of the active user for whom we want to obtain\n        recommendations.\n    k : int\n        Maximal number of items that must be recommended.\n    criterion : str, optional\n        Similarity metric to employ \u2013 either ``'cosine'`` (default) or\n        ``'pearson'``.\n\n    Returns\n    -------\n    list[int]\n        A list with at most ``k`` item indices ordered from the highest to\n        the lowest predicted score.\n    \"\"\"\n    n_user, n_item = data.shape\n    rated_items = np.where(data[user_ind] > 0)[0]\n    unrated_items = np.where(data[user_ind] == 0)[0]\n\n    if len(unrated_items) == 0:\n        return []\n\n    S = np.zeros((n_item, n_item))\n    for i in range(n_item):\n        for j in range(i, n_item):\n            if i == j:\n                S[i, j] = 1\n            else:\n                common_users = np.where((data[:, i] > 0) & (data[:, j] > 0))[0]\n                if len(common_users) == 0:\n                    continue\n                v1 = data[common_users, i]\n                v2 = data[common_users, j]\n                if criterion == 'cosine':\n                    v1 = v1 - np.mean(v1)\n                    v2 = v2 - np.mean(v2)\n                    if np.std(v1) > 1e-3:\n                        v1 = v1 / np.std(v1)\n                    if np.std(v2) > 1e-3:\n                        v2 = v2 / np.std(v2)\n                    S[i, j] = S[j, i] = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n                elif criterion == 'pearson':\n                    S[i, j] = S[j, i] = np.corrcoef(v1, v2)[0, 1]\n\n    scores = defaultdict(float)\n    for t in unrated_items:\n        for i in rated_items:\n            scores[t] += data[user_ind, i] * S[t, i]\n        scores[t] /= np.sum(np.abs(S[t, rated_items]))\n\n    top_k_items = sorted(scores.items(), key=lambda x: x[1], reverse=True)[:k]\n    top_k_items = [item[0] for item in top_k_items]\n\n    return top_k_items\n```\n\nThis script first identifies the items that the user has already rated and the items that the user has not yet rated. If the user has rated all items, it returns an empty list. It then computes the item-item similarity matrix using the specified similarity measure. Finally, it computes the predicted attractiveness score for each unrated item and returns the indices of the top k items with the highest scores.\n"}
{"task_id": 19, "completion_id": 0, "completion": "Here is a Python script that implements the `best_split` function. This function iterates over all possible feature thresholds and computes the gain for each split. It then returns the split that maximizes the gain.\n\n```python\nimport numpy as np\n\ndef best_split(X: np.ndarray,\n               g: np.ndarray,\n               h: np.ndarray,\n               gamma: float,\n               lam: float) -> tuple[int, float] | None:\n    \"\"\"Return the best (feature, threshold) split for a tree node.\n\n    The split is chosen to maximise the reduction in the regularised loss used\n    by gradient-boosting decision-trees.  If no split achieves a positive gain\n    the function returns ``None``.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape *(n_samples, n_features)* containing the feature\n        values of all training instances that reach the current node.\n    g : np.ndarray\n        1-D array with the first-order gradients for each training instance.\n    h : np.ndarray\n        1-D array with the second-order gradients (Hessians).\n    gamma : float\n        Complexity regularisation term added to every leaf.\n    lam : float\n        L2 regularisation term added to the denominator when computing the\n        weight of a leaf.\n\n    Returns\n    -------\n    tuple[int, float] | None\n        A pair *(feature_index, threshold)* describing the optimal split, or\n        ``None`` if no valid split yields a positive gain.\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_gain = -np.inf\n    best_split = None\n\n    # Iterate over all features\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n\n        # Iterate over all unique feature values\n        for threshold in unique_values:\n            left_indices = np.where(feature_values <= threshold)[0]\n            right_indices = np.where(feature_values > threshold)[0]\n\n            # Check if the split is valid\n            if len(left_indices) < 2 or len(right_indices) < 2:\n                continue\n\n            # Compute the gain for the current split\n            gain = compute_gain(g, h, gamma, lam, left_indices, right_indices)\n\n            # Update the best split if the current split has the highest gain\n            if gain > best_gain:\n                best_gain = gain\n                best_split = (feature_index, threshold)\n\n    return best_split\n\n\ndef compute_gain(g, h, gamma, lam, left_indices, right_indices):\n    \"\"\"Compute the gain for a split.\"\"\"\n    left_g = g[left_indices].sum()\n    left_h = h[left_indices].sum()\n    right_g = g[right_indices].sum()\n    right_h = h[right_indices].sum()\n\n    parent_loss = -0.5 * (g.sum() ** 2) / (h.sum() + lam) + gamma\n    left_loss = -0.5 * (left_g ** 2) / (left_h + lam) + gamma\n    right_loss = -0.5 * (right_g ** 2) / (right_h + lam) + gamma\n\n    gain = parent_loss - left_loss - right_loss\n\n    return gain\n```\n\nThis script first computes the gain for each possible split, and then returns the split that maximizes the gain. If no split achieves a positive gain, the function returns `None`.\n"}
{"task_id": 20, "completion_id": 0, "completion": "Here is the Python code that implements the sigmoid activation function and its gradient:\n\n```python\nimport numpy as np\n\ndef sigmoid_activation(x):\n    \"\"\"Compute the sigmoid of *x* and its gradient.\n\n    Parameters\n    ----------\n    x : float | int | list | numpy.ndarray\n        Input data that can be a scalar, a Python list, or a NumPy array.\n\n    Returns\n    -------\n    tuple\n        A tuple (sigmoid_x, gradient_x)\n        where each element is rounded to 4 decimal places and returned as:\n        \u2022 float when *x* is scalar\n        \u2022 Python list when *x* is array-like\n    \"\"\"\n    # Convert the input to a numpy array\n    x = np.array(x)\n\n    # Compute the sigmoid\n    sigmoid_x = 1 / (1 + np.exp(-x))\n\n    # Compute the gradient\n    gradient_x = sigmoid_x * (1 - sigmoid_x)\n\n    # Round the results to 4 decimal places\n    sigmoid_x = np.round(sigmoid_x, 4)\n    gradient_x = np.round(gradient_x, 4)\n\n    # If the input was a scalar, convert the results to floats\n    if np.isscalar(x):\n        sigmoid_x = float(sigmoid_x)\n        gradient_x = float(gradient_x)\n    else:\n        # If the input was an array, convert the results to lists\n        sigmoid_x = sigmoid_x.tolist()\n        gradient_x = gradient_x.tolist()\n\n    return sigmoid_x, gradient_x\n```\n\nThis function first converts the input to a numpy array. It then computes the sigmoid and gradient of the input using the sigmoid function and its derivative. The results are rounded to 4 decimal places. If the input was a scalar, the results are converted to floats. If the input was an array, the results are converted to lists. The function then returns a tuple of the sigmoid and gradient.\n"}
{"task_id": 21, "completion_id": 0, "completion": "Here is a Python script that implements the AdaBoost algorithm with one-dimensional decision stumps:\n\n```python\nimport numpy as np\nimport math\nfrom collections import defaultdict\n\ndef adaboost_1d_predict(x_train: list[float],\n                        y_train: list[int],\n                        x_test: list[float],\n                        epsilon: float = 0.0) -> list[int]:\n    \"\"\"Trains a 1-D AdaBoost ensemble and returns predictions.\n\n    Parameters\n    ----------\n    x_train : list[float]\n        Training sample values (one-dimensional).\n    y_train : list[int]\n        Labels corresponding to *x_train* (each value must be 1 or \u20131).\n    x_test : list[float]\n        Sample values to classify after training.\n    epsilon : float, default 0.0\n        Upper bound on the allowed training error.  Training stops once\n        the ensemble\u2019s training error \u2264 *epsilon*.\n\n    Returns\n    -------\n    list[int]\n        Predicted labels (1 or \u20131) for every value in *x_test*.\n    \"\"\"\n    # Sort the training data\n    sorted_train = sorted(zip(x_train, y_train))\n    x_train, y_train = zip(*sorted_train)\n\n    # Initialize the weights\n    weights = np.ones(len(x_train)) / len(x_train)\n\n    # Initialize the ensemble\n    ensemble = []\n\n    # Initialize the error\n    error = float('inf')\n\n    while error > epsilon:\n        # Find the best stump\n        best_stump = None\n        best_error = float('inf')\n        for i in range(1, len(x_train)):\n            # Compute the error for the stump\n            stump_error = sum(weights[j] for j in range(len(x_train)) if y_train[j] != (1 if x_train[j] > x_train[i-1] else -1))\n            if stump_error < best_error:\n                best_stump = (i-1, 1 if x_train[i-1] > x_train[i] else -1)\n                best_error = stump_error\n\n        # Compute the coefficient\n        alpha = 0.5 * math.log((1 - best_error) / best_error)\n\n        # Update the weights\n        weights = weights * np.exp(-alpha * np.array(y_train) * np.array([1 if x < x_train[best_stump[0]] else -1 for x in x_train]))\n        weights /= np.sum(weights)\n\n        # Add the stump to the ensemble\n        ensemble.append((best_stump, alpha))\n\n        # Compute the error of the ensemble\n        error = sum(weights[j] for j in range(len(x_train)) if y_train[j] != sum(alpha * (1 if x < x_train[stump[0]] else -1) for stump, alpha in ensemble))\n\n    # Compute the predictions\n    predictions = []\n    for x in x_test:\n        predictions.append(1 if sum(alpha * (1 if x < x_train[stump[0]] else -1) for stump, alpha in ensemble) > 0 else -1)\n\n    return predictions\n```\n\nThis script first sorts the training data and initializes the weights. It then enters a loop where it finds the best stump (i.e., the stump with the smallest weighted error), computes its coefficient, updates the weights, and adds the stump to the ensemble. The loop continues until the training error of the ensemble is less than or equal to the user-supplied value `epsilon`. Finally, it computes the predictions for the test set and returns them.\n"}
{"task_id": 25, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\n\ndef gaussian_svm_predict(X_train: np.ndarray,\n                         y_train: np.ndarray,\n                         alpha: np.ndarray,\n                         b: float,\n                         gamma: float,\n                         X_test: np.ndarray) -> list[int]:\n    \"\"\"Predict labels for test samples using a Gaussian-kernel SVM.\n\n    Parameters\n    ----------\n    X_train : numpy.ndarray\n        The (n, d) matrix of training samples used to fit the SVM.\n    y_train : numpy.ndarray\n        The length-n vector of training labels. Each entry is either 1 or -1.\n    alpha : numpy.ndarray\n        The length-n vector of Lagrange multipliers obtained during training.\n    b : float\n        The scalar bias term obtained during training.\n    gamma : float\n        The positive Gaussian (RBF) kernel parameter.\n    X_test : numpy.ndarray\n        The (m, d) matrix of samples whose labels must be predicted.\n\n    Returns\n    -------\n    list[int]\n        The predicted labels for all m test samples. Each element is exactly\n        1 or -1.\n    \"\"\"\n    # Compute the pairwise Euclidean distances between all training samples and test samples\n    distances = np.sum(X_train**2, axis=1)[:, np.newaxis] + np.sum(X_test**2, axis=1) - 2 * np.dot(X_train, X_test.T)\n\n    # Compute the Gaussian kernel matrix\n    kernel_matrix = np.exp(-gamma * distances)\n\n    # Compute the decision function for each test sample\n    decision_function = np.dot(kernel_matrix.T, y_train * alpha) + b\n\n    # Predict the labels for each test sample\n    y_pred = np.sign(decision_function)\n\n    return y_pred.tolist()\n```\n\nThis function first computes the pairwise Euclidean distances between all training samples and test samples. Then it computes the Gaussian kernel matrix using these distances. The decision function for each test sample is then computed as the dot product of the kernel matrix and the vector of training labels, scaled by the vector of Lagrange multipliers, and shifted by the bias term. Finally, the predicted labels for each test sample are computed as the sign of the decision function.\n"}
{"task_id": 28, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef linear_autoencoder(X: list[list[int | float]], k: int) -> tuple[list[list[float]], float]:\n    \"\"\"Return the optimal rank-k reconstruction of X using truncated SVD.\n\n    Parameters\n    ----------\n    X : list[list[int | float]]\n        Two-dimensional numeric data matrix (m \u00d7 n).\n    k : int\n        Number of latent dimensions to retain.\n\n    Returns\n    -------\n    tuple[list[list[float]], float]\n        A tuple (X_hat, mse) where `X_hat` is the reconstructed matrix and\n        `mse` is the mean squared reconstruction error.  Both are rounded to\n        four decimals.  If `k` is invalid the function returns -1.\n    \"\"\"\n    # Convert list of lists to numpy array\n    X = np.array(X)\n\n    # Check if k is valid\n    if k < 1 or k > min(X.shape):\n        return -1\n\n    # Perform SVD\n    U, s, Vt = np.linalg.svd(X, full_matrices=False)\n\n    # Truncate SVD\n    s[k:] = 0\n    S = np.diag(s)\n\n    # Reconstruct X\n    X_hat = np.dot(U, np.dot(S, Vt))\n\n    # Compute MSE\n    mse = np.mean((X - X_hat)**2)\n\n    # Round X_hat and mse to 4 decimal places\n    X_hat = np.round(X_hat, 4).tolist()\n    mse = round(mse, 4)\n\n    return X_hat, mse\n```\n\nThis script first converts the input list of lists to a numpy array. It then checks if the input k is valid. If it is not, the function returns -1. If k is valid, the script performs the SVD of the input matrix and truncates it to the first k singular values. It then reconstructs the original matrix using the truncated SVD and computes the mean squared error between the original and reconstructed matrices. Finally, it rounds the reconstructed matrix and the MSE to 4 decimal places and returns them as a tuple.\n"}
{"task_id": 29, "completion_id": 0, "completion": "Here is a Python script that implements the described algorithm:\n\n```python\nimport numpy as np\n\ndef predict_boosting_tree(x_train: list[float] | np.ndarray,\n                           y_train: list[float] | np.ndarray,\n                           x_query: float,\n                           epsilon: float = 1e-2) -> float:\n    \"\"\"Fit a simple 1-D gradient boosting model (decision stumps) and predict a value.\n\n    The function must:  \n    1. Determine all possible split points (mid-points between consecutive *x_train* values).  \n    2. Iteratively add the stump that minimises the squared residuals until the total\n       residual sum of squares becomes smaller than *epsilon*.  \n    3. Return the prediction for *x_query* obtained by summing the constants contributed\n       by every learnt stump.  \n\n    Args:\n        x_train: One-dimensional training features.\n        y_train: Training targets (same length as *x_train*).\n        x_query: Feature value to predict.\n        epsilon: Stopping tolerance on the residual sum of squares (default 1e-2).\n\n    Returns:\n        Single floating point number \u2013 the predicted target for *x_query*, rounded to\n        four decimal places.\n    \"\"\"\n    # Convert lists to numpy arrays\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n\n    # Sort the training samples by the single feature x\n    sorted_indices = np.argsort(x_train)\n    x_train = x_train[sorted_indices]\n    y_train = y_train[sorted_indices]\n\n    # Initialize residuals and prediction\n    residuals = y_train.copy()\n    prediction = np.zeros_like(y_train)\n\n    # Candidate split points are the mid-points between every two consecutive feature values\n    split_points = (x_train[:-1] + x_train[1:]) / 2\n\n    while np.sum(residuals**2) > epsilon:\n        min_rss = np.inf\n        best_split = None\n        best_c1 = None\n        best_c2 = None\n\n        # For every candidate split s\n        for s in split_points:\n            # let c1 be the mean of the current residuals whose feature values are \u2264 s\n            c1 = np.mean(residuals[x_train <= s])\n            # let c2 be the mean of the current residuals whose feature values are > s\n            c2 = np.mean(residuals[x_train > s])\n\n            # compute the RSS that would be obtained by adding the stump defined by *(s, c1, c2)*\n            rss = np.sum((residuals - (c1 * (x_train <= s) + c2 * (x_train > s)))**2)\n\n            # If this RSS is smaller than the current minimum, update the best split\n            if rss < min_rss:\n                min_rss = rss\n                best_split = s\n                best_c1 = c1\n                best_c2 = c2\n\n        # Add to the ensemble the stump that produces the smallest RSS\n        prediction += best_c1 * (x_train <= best_split) + best_c2 * (x_train > best_split)\n\n        # Update the residuals (real target minus current ensemble prediction)\n        residuals = y_train - prediction\n\n    # Return the prediction for x_query obtained by summing the constants contributed by every learnt stump\n    return round(np.mean(prediction[x_train <= x_query]) + np.mean(prediction[x_train > x_query]), 4)\n```\n\nThis script first sorts the training data by the feature values, then iteratively adds the stump that minimizes the squared residuals until the total residual sum of squares becomes smaller than the specified tolerance. The prediction for a new point is obtained by summing the constants contributed by every learned stump. The function returns the prediction for the query point, rounded to four decimal places.\n"}
{"task_id": 34, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef random_binary_tensor(shape: tuple[int, ...],\n                         sparsity: float = 0.5,\n                         seed: int | None = None):\n    \"\"\"\n    Generate a NumPy tensor filled with 0.0s and 1.0s.\n\n    Parameters:\n    shape (tuple[int, ...]): The desired shape of the tensor.\n    sparsity (float): The probability of generating a 1.0.\n    seed (int | None): The seed for the random number generator.\n\n    Returns:\n    numpy.ndarray: A NumPy array of the desired shape filled with 0.0s and 1.0s.\n    \"\"\"\n    if not 0 <= sparsity <= 1:\n        return -1\n\n    if seed is not None:\n        np.random.seed(seed)\n\n    tensor = np.random.rand(*shape)\n    threshold = 1 - sparsity\n    tensor = np.where(tensor < threshold, 0.0, 1.0)\n\n    return tensor.astype(np.float64)\n```\n\nThis script first checks if the sparsity is within the legal range. If not, it returns -1. Then, if a seed is provided, it sets the seed for the random number generator. It generates a tensor of the desired shape filled with random numbers between 0 and 1. It then sets a threshold based on the sparsity and uses NumPy's `where` function to convert the numbers in the tensor to 0.0 or 1.0 based on whether they are below or above the threshold. Finally, it converts the tensor to a NumPy array of floating point numbers and returns it.\n"}
{"task_id": 39, "completion_id": 0, "completion": "Here is a Python script that implements the median split for KD-Tree construction:\n\n```python\nimport numpy as np\n\ndef get_split(data: np.ndarray, d: int) -> tuple[int, list[int], list[int]]:\n    \"\"\"Split *data* along column *d* by its median value.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array of shape (n_samples, n_features).\n    d : int\n        Index of the column to use for the split.\n\n    Returns\n    -------\n    tuple\n        (pivot, left, right) where\n        \u2022 pivot is the row index whose value in column *d* is the median;\n        \u2022 left  is a list of row indices with smaller values;\n        \u2022 right is a list of row indices with larger  values.\n    \"\"\"\n    # Get the column to split\n    column = data[:, d]\n\n    # Find the median index\n    median_index = np.argpartition(column, len(column) // 2)[len(column) // 2]\n\n    # Get the median value\n    median = column[median_index]\n\n    # Split the data into left and right\n    left = [i for i in range(len(column)) if column[i] < median]\n    right = [i for i in range(len(column)) if column[i] > median]\n\n    # Return the pivot, left, and right\n    return median_index, left, right\n```\n\nThis script first extracts the column to split from the data. It then finds the index of the median value in this column using `np.argpartition`. The median value is then used to split the data into two lists: `left` for values less than the median, and `right` for values greater than the median. The function then returns the index of the median value, and the lists of indices for values less than and greater than the median.\n"}
{"task_id": 40, "completion_id": 0, "completion": "Here is a Python script that implements the `to_frames` function as described:\n\n```python\nimport numpy as np\nfrom numpy.lib.stride_tricks import as_strided\n\ndef to_frames(x: np.ndarray, frame_width: int, stride: int, writeable: bool = False) -> np.ndarray:\n    \"\"\"Convert a 1-D signal into overlapping frames.\n\n    Parameters\n    ----------\n    x : np.ndarray\n        One-dimensional input signal of length *N*.\n    frame_width : int\n        The length (*in samples*) of each output frame.\n    stride : int\n        Hop length \u2013 number of samples between the starts of successive frames.\n    writeable : bool, default=False\n        If *False* the returned view is read-only; if *True* it is writeable\n        whenever the source array was writeable.\n\n    Returns\n    -------\n    np.ndarray\n        A view on *x* with shape ``(n_frames, frame_width)`` where\n        ``n_frames = (len(x) - frame_width) // stride + 1``.\n    \"\"\"\n    assert x.ndim == 1, \"Input array must be one-dimensional\"\n    assert stride >= 1, \"Stride must be a positive integer\"\n    assert len(x) >= frame_width, \"Frame width must be less than or equal to the length of the input array\"\n\n    n_frames = (len(x) - frame_width) // stride + 1\n    shape = (n_frames, frame_width)\n    strides = (x.strides[0] * stride, x.strides[0])\n\n    result = as_strided(x, shape=shape, strides=strides)\n    result.flags.writeable = writeable and x.flags.writeable\n\n    return result\n```\n\nThis function first checks that the input array `x` is one-dimensional, that the stride is a positive integer, and that the frame width is less than or equal to the length of `x`. It then calculates the number of frames and the shape of the output array. The strides of the output array are calculated based on the stride of `x` and the desired hop length. Finally, the `as_strided` function is used to create a view on `x` with the calculated shape and strides. The writability of the output array is set based on the `writeable` argument and the writability of `x`.\n"}
{"task_id": 48, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef is_stochastic(X: list[list[float]] | \"np.ndarray\") -> bool:\n    \"\"\"Return True if *X* is a row-stochastic matrix, otherwise False.\n\n    A matrix is row-stochastic when every element is a probability (0 \u2264 p \u2264 1)\n    and each row sums to 1 (within a small numerical tolerance).\n\n    Args:\n        X: Matrix given as a list of lists or a NumPy array.\n\n    Returns:\n        bool: True if *X* is row-stochastic, False otherwise.\n    \"\"\"\n    # Convert the input to a numpy array\n    X = np.array(X)\n\n    # Check if the matrix is two-dimensional\n    if X.ndim != 2:\n        return False\n\n    # Check if every element is between 0 and 1 inclusive\n    if not np.all((X >= 0) & (X <= 1)):\n        return False\n\n    # Check if each row sums to 1 up to a numerical tolerance of 1e-8\n    row_sums = np.sum(X, axis=1)\n    if not np.allclose(row_sums, np.ones_like(row_sums), rtol=0, atol=1e-8):\n        return False\n\n    return True\n```\n\nThis function first converts the input to a numpy array. It then checks if the matrix is two-dimensional and if every element is between 0 and 1 inclusive. Finally, it checks if each row sums to 1 up to a numerical tolerance of 1e-8. If all these conditions are met, the function returns True, otherwise it returns False.\n"}
{"task_id": 55, "completion_id": 0, "completion": "Here is a Python script that implements the RMSprop optimisation algorithm for ordinary least-squares (OLS) linear regression:\n\n```python\nimport numpy as np\n\ndef rms_prop(\n    X: np.ndarray,\n    y: np.ndarray,\n    epsilon: float = 1e-4,\n    max_iter: int = 10_000,\n    eta: float = 0.01,\n    rho: float = 0.9,\n    batch_size: int = 32,\n    eps_station: float = 1e-8,\n) -> list[float]:\n    \"\"\"Train a linear regression model with RMSprop.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix where each row is a sample and each column is a feature.\n    y : np.ndarray\n        Target values.\n    epsilon : float, optional\n        Norm threshold for early stopping.\n    max_iter : int, optional\n        Maximum number of iterations.\n    eta : float, optional\n        Learning rate.\n    rho : float, optional\n        Decay factor for the squared gradient running average.\n    batch_size : int, optional\n        Number of samples per mini-batch.\n    eps_station : float, optional\n        Small constant added for numerical stability.\n\n    Returns\n    -------\n    list[float]\n        The learned weight vector rounded to four decimal places.\n    \"\"\"\n    n, d = X.shape\n    w = np.zeros(d)\n    s = np.zeros(d)\n\n    for _ in range(max_iter):\n        for i in range(0, n, batch_size):\n            X_batch = X[i:i+batch_size]\n            y_batch = y[i:i+batch_size]\n\n            grad = (1/n) * X_batch.T @ (X_batch @ w - y_batch)\n            s = rho * s + (1 - rho) * grad ** 2\n            w = w - eta * grad / np.sqrt(s + eps_station)\n\n        if np.linalg.norm(grad) < epsilon:\n            break\n\n    return [round(weight, 4) for weight in w]\n```\n\nThis script first initializes the weight vector `w` and the running average of squared gradients `s` to zero. Then it enters a loop that iterates for `max_iter` times. In each iteration, it processes mini-batches of the data and updates the weight vector `w` using the RMSprop rule. If the norm of the gradient is smaller than `epsilon`, the loop is broken and the final weight vector is returned.\n"}
{"task_id": 56, "completion_id": 0, "completion": "Here is a Python script that implements the SoftPlus activation function and its derivative:\n\n```python\nimport numpy as np\n\ndef softplus(x, deriv: bool = False):\n    \"\"\"\n    Implements the SoftPlus activation function and its derivative.\n\n    Parameters:\n    x (scalar, list, or numpy array): Input values.\n    deriv (bool): If True, returns the derivative of the SoftPlus function.\n\n    Returns:\n    list or float: The SoftPlus function or its derivative applied to x, rounded to the nearest 4th decimal.\n    \"\"\"\n    # Convert x to a numpy array\n    x = np.array(x)\n\n    if deriv:\n        # Compute the derivative of the SoftPlus function\n        # The derivative of SoftPlus(x) is the logistic (sigmoid) function\n        # sigma(x) = 1 / (1 + e^-x)\n        # We use np.exp to compute e^-x in a numerically stable way\n        result = 1 / (1 + np.exp(-x))\n    else:\n        # Compute the SoftPlus function\n        # SoftPlus(x) = log(1 + e^x)\n        # We use np.log1p to compute log(1 + e^x) in a numerically stable way\n        result = np.log1p(np.exp(x))\n\n    # Round the result to the nearest 4th decimal\n    result = np.round(result, 4)\n\n    # If the input was a scalar, return a scalar\n    if np.isscalar(x):\n        return result.item()\n    else:\n        return result.tolist()\n```\n\nThis script first converts the input `x` to a numpy array. It then computes the SoftPlus function or its derivative, depending on the value of `deriv`. The result is rounded to the nearest 4th decimal using `np.round`. If the input was a scalar, the result is converted to a scalar using `.item()`. Otherwise, the result is converted to a list using `.tolist()`.\n"}
{"task_id": 58, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef unsmoothed_ngram_log_prob(corpus: list[str], sequence: list[str], N: int) -> float:\n    \"\"\"Compute the unsmoothed MLE N-gram log-probability of *sequence*.\n\n    Your task is to complete this function so that it builds N-gram count\n    tables from *corpus* and then returns the total log-probability of\n    *sequence* under the resulting unsmoothed language model.\n\n    The return value must be rounded to 4 decimal places.  If any required\n    count is zero you should immediately return ``float('-inf')``.\n    \"\"\"\n    # Create N-grams from the corpus\n    ngrams = [tuple(corpus[i:i+N]) for i in range(len(corpus)-N+1)]\n    n_minus_grams = [tuple(corpus[i:i+N-1]) for i in range(len(corpus)-N+2)]\n\n    # Count N-grams and (N-1)-grams\n    ngram_counts = Counter(ngrams)\n    n_minus_gram_counts = Counter(n_minus_grams)\n\n    # Compute the total log-probability\n    total_log_prob = 0.0\n    for i in range(len(sequence)-N+1):\n        ngram = tuple(sequence[i:i+N])\n        n_minus_gram = tuple(sequence[i:i+N-1])\n\n        # If either the numerator or the denominator is zero, return float('-inf')\n        if ngram_counts[ngram] == 0 or n_minus_gram_counts[n_minus_gram] == 0:\n            return float('-inf')\n\n        # Compute the log-probability of the ngram\n        log_prob = np.log(ngram_counts[ngram] / n_minus_gram_counts[n_minus_gram])\n        total_log_prob += log_prob\n\n    return round(total_log_prob, 4)\n```\n\nThis script first creates N-grams and (N-1)-grams from the corpus. It then counts the occurrences of these N-grams and (N-1)-grams. It computes the log-probability of each N-gram in the sequence and sums these probabilities. If at any point either the numerator or the denominator is zero, it immediately returns `float('-inf')`. Finally, it returns the total log-probability rounded to 4 decimal places.\n"}
{"task_id": 62, "completion_id": 0, "completion": "Here is a Python script that implements the Lasso regression with polynomial features using coordinate descent.\n\n```python\nimport numpy as np\n\ndef lasso_regression(X, y, degree, reg_factor, n_iterations=1000, tol=1e-6):\n    # Convert input to numpy arrays\n    X = np.array(X)\n    y = np.array(y)\n\n    # Build design matrix\n    X_poly = np.ones((X.shape[0], degree+1))\n    for i in range(1, degree+1):\n        X_poly[:, i] = X**i\n\n    # Initialize weights\n    weights = np.zeros(degree+1)\n\n    # Coordinate descent\n    for _ in range(n_iterations):\n        weights_prev = weights.copy()\n\n        # Update bias\n        weights[0] = np.mean(y - np.dot(X_poly[:, 1:], weights[1:]))\n\n        # Update other coefficients\n        for j in range(1, degree+1):\n            rho = np.dot(X_poly[:, j], y - np.dot(X_poly, weights) + weights[j]*X_poly[:, j])\n            weights[j] = soft_threshold(rho, reg_factor) / np.dot(X_poly[:, j], X_poly[:, j])\n\n        # Check for early stopping\n        if np.max(np.abs(weights - weights_prev)) < tol:\n            break\n\n    # Round weights to 4 decimal places\n    weights = [round(w, 4) for w in weights]\n\n    return weights\n\ndef soft_threshold(rho, lambda_):\n    if rho < -lambda_:\n        return rho + lambda_\n    elif rho > lambda_:\n        return rho - lambda_\n    else:\n        return 0\n```\n\nThis script first builds the design matrix by raising each input to the power from 1 to the specified degree. It then initializes the weights to zero and performs coordinate descent. In each iteration, it first updates the bias and then updates the weights for each feature. The algorithm stops when the largest absolute weight change falls below the specified tolerance. Finally, it rounds the weights to 4 decimal places and returns them.\n"}
{"task_id": 63, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef backward_beta(A: list[list[float]], B: list[list[float]], obs: list[int], t: int) -> list[float]:\n    \"\"\"\n    This function calculates the backward probability vector beta_t for a given time index t.\n\n    Parameters:\n    A (list[list[float]]): transition-probability matrix of shape (N, N)\n    B (list[list[float]]): emission-probability matrix of shape (N, M)\n    obs (list[int]): list of observation indices (length T)\n    t (int): integer time index (0 \u2264 t < T)\n\n    Returns:\n    list[float]: list of backward probabilities rounded to 4 decimal places\n    \"\"\"\n    A = np.array(A)\n    B = np.array(B)\n    N = A.shape[0]\n    beta = np.ones(N)\n\n    for i in range(t, -1, -1):\n        beta = np.dot(A, beta * B[:, obs[i]])\n\n    return [round(b, 4) for b in beta]\n```\n\nThis function first converts the input lists to numpy arrays for easier manipulation. It then initializes the backward vector `beta` to an array of ones. The function then iterates from `t` to `0` (inclusive), updating `beta` at each step using the formula given in the task description. Finally, it returns the backward vector `beta`, rounded to 4 decimal places.\n"}
{"task_id": 65, "completion_id": 0, "completion": "Here is a Python script that implements the backward algorithm for a Hidden Markov Model (HMM).\n\n```python\nimport numpy as np\n\ndef backward_prob(A: list[list[float]], B: list[list[float]], pi: list[float], obs: list[int]) -> float:\n    \"\"\"Hidden Markov Model backward algorithm.\n\n    Given an HMM defined by transition matrix `A`, emission matrix `B`, and\n    initial distribution `pi`, compute the probability that the model\n    generates the observation sequence `obs`.\n\n    The method uses the recursive backward procedure and returns the result\n    rounded to six decimal places.\n\n    Args:\n        A: Square matrix where `A[i][j]` is the transition probability from\n           state *i* to state *j*.\n        B: Matrix where `B[i][k]` is the probability of emitting symbol *k*\n           from state *i*.\n        pi: Initial probability distribution over states.\n        obs: List of integer observation indices.\n\n    Returns:\n        A float \u2013 the sequence probability rounded to 6 decimals.\n    \"\"\"\n    # Convert lists to numpy arrays for easier computation\n    A = np.array(A)\n    B = np.array(B)\n    pi = np.array(pi)\n\n    # Check if any of the input lists are empty\n    if len(A) == 0 or len(B) == 0 or len(pi) == 0 or len(obs) == 0:\n        return 0.0\n\n    # Get the number of states and observations\n    N = len(A)\n    T = len(obs)\n\n    # Initialize the backward variables\n    beta = np.zeros((T, N))\n    beta[T-1, :] = 1.0\n\n    # Compute the backward variables recursively\n    for t in range(T-2, -1, -1):\n        for i in range(N):\n            beta[t, i] = np.sum(A[i, :] * B[:, obs[t+1]] * beta[t+1, :])\n\n    # Compute the sequence probability\n    prob = np.sum(pi * B[:, obs[0]] * beta[0, :])\n\n    # Return the sequence probability rounded to 6 decimals\n    return round(prob, 6)\n```\n\nThis script first checks if any of the input lists are empty. If they are, it returns 0.0 because no valid probability can be computed. It then converts the input lists to numpy arrays for easier computation. It initializes the backward variables and computes them recursively. Finally, it computes the sequence probability and returns it rounded to 6 decimals.\n"}
{"task_id": 69, "completion_id": 0, "completion": "Here is a Python script that implements the forward algorithm for Hidden Markov Models:\n\n```python\nimport numpy as np\n\ndef forward_algorithm(S: list[float],\n                      A: list[list[float]],\n                      B: list[list[float]],\n                      observations: list[int]) -> float:\n    \"\"\"Forward algorithm for Hidden Markov Models.\n\n    Args:\n        S (list[float]): Initial state probabilities.\n        A (list[list[float]]): State\u2013transition probabilities.\n        B (list[list[float]]): Emission probabilities.\n        observations (list[int]): Observation index sequence.\n\n    Returns:\n        float: Sequence likelihood rounded to 4 decimals, or \u22121 on invalid input.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    S = np.array(S)\n    A = np.array(A)\n    B = np.array(B)\n\n    # Check if the input dimensions are valid\n    if (S.ndim != 1 or A.ndim != 2 or B.ndim != 2 or\n        S.shape[0] != A.shape[0] != B.shape[0] or\n        S.shape[0] != A.shape[1] or\n        np.any(S < 0) or np.any(A < 0) or np.any(B < 0) or\n        np.sum(S) != 1 or np.allclose(np.sum(A, axis=1), np.ones(A.shape[0])) or\n        np.allclose(np.sum(B, axis=1), np.ones(B.shape[0])) or\n        np.any(observations) < 0 or np.any(observations) >= B.shape[1]):\n        return -1\n\n    # Initialize alpha\n    alpha = np.zeros_like(B.T)\n    alpha[0] = S * B[:, observations[0]]\n\n    # Forward algorithm\n    for t in range(1, len(observations)):\n        for j in range(A.shape[0]):\n            alpha[t, j] = np.sum(alpha[t - 1] * A[:, j] * B[j, observations[t]])\n\n    # Return the sum of the last column of alpha as the sequence likelihood\n    return round(np.sum(alpha[-1]), 4)\n```\n\nThis script first checks if the input dimensions are valid. If they are not, it returns -1. Then it initializes the alpha matrix and performs the forward algorithm. Finally, it returns the sum of the last column of alpha as the sequence likelihood, rounded to 4 decimal places.\n"}
{"task_id": 70, "completion_id": 0, "completion": "Here is a Python implementation of the FP-Growth algorithm. This implementation uses the `collections` module to count the support of items and to build the FP-tree. The `defaultdict` is used to build the FP-tree and the `Counter` is used to count the support of items.\n\n```python\nfrom collections import Counter, defaultdict\n\nclass FPTree(object):\n    def __init__(self):\n        self.root = FPNode(None)\n\n        self.header_table = defaultdict(None)\n        self.item_counts = Counter()\n\n    def add(self, transaction):\n        current_node = self.root\n        for item in transaction:\n            self.item_counts[item] += 1\n            current_node = current_node.add(item)\n\n    def build_header_table(self):\n        for item, count in self.item_counts.items():\n            if count >= min_support:\n                self.header_table[item] = self.root.search(item)\n\n    def mine(self):\n        if self.root.children:\n            self.header_table = sorted(self.header_table.items(), key=lambda x: x[1].count, reverse=True)\n            for item, node in self.header_table:\n                suffix = []\n                current_node = node.parent\n                while current_node.parent is not None:\n                    suffix.append(current_node.item)\n                    current_node = current_node.parent\n                if suffix:\n                    yield (suffix, node.count)\n                conditional_tree = FPTree()\n                for item in reversed(suffix):\n                    conditional_tree.add(self.root.search(item).prefix())\n                for result in conditional_tree.mine():\n                    yield result\n\nclass FPNode(object):\n    def __init__(self, item):\n        self.item = item\n        self.count = 1\n        self.parent = None\n        self.children = {}\n        self.next = None\n\n    def add(self, child):\n        if child.item in self.children:\n            node = self.children[child.item]\n            node.count += 1\n        else:\n            child.parent = self\n            self.children[child.item] = child\n            if self.next is not None:\n                current_node = self.next\n                while current_node.item != child.item:\n                    if current_node.item is None:\n                        current_node.item = child.item\n                        child.next = current_node.next\n                        current_node.next = child\n                        return child\n                    current_node = current_node.next\n                current_node.count += 1\n            else:\n                self.next = child\n        return child\n\n    def search(self, item):\n        if self.item == item:\n            return self\n        else:\n            current_node = self.next\n            while current_node is not None:\n                if current_node.item == item:\n                    return current_node\n                current_node = current_node.next\n            return None\n\n    def prefix(self):\n        prefix = []\n        current_node = self\n        while current_node.item is not None:\n            prefix.append(current_node.item)\n            current_node = current_node.parent\n        return list(reversed(prefix))\n\ndef fp_growth(transactions, min_support):\n    tree = FPTree()\n    for transaction in transactions:\n        transaction.sort()\n        tree.add(transaction)\n    tree.build_header_table()\n    return list(tree.mine())\n```\n\nThis script first builds the FP-tree from the transactions. Then it mines the FP-tree to find all frequent item-sets. The `fp_growth` function returns a list of all frequent item-sets. Each item-set is represented as a tuple where the first element is a list of items and the second element is the support count of the item-set.\n\nPlease note that this implementation assumes that the input transactions are a list of lists where each inner list represents a transaction and contains the items purchased in that transaction. The `min_support` parameter is an integer that specifies the minimum number of transactions an item-set has to appear in to be considered frequent.\n"}
{"task_id": 75, "completion_id": 0, "completion": "Here is a Python script that implements the k-Nearest Neighbour (k-NN) classifier:\n\n```python\nimport numpy as np\n\ndef knn_predict(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], k: int) -> list[int]:\n    \"\"\"Predicts class labels for a test set using the k-Nearest Neighbour algorithm.\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training samples where each inner list is a feature vector.\n    y_train : list[int]\n        Integer class labels corresponding to `X_train`.\n    X_test : list[list[float]]\n        Samples to classify.\n    k : int\n        Number of neighbours to use (must satisfy 1 \u2264 k \u2264 len(X_train)).\n\n    Returns\n    -------\n    list[int]\n        Predicted class label for every sample in `X_test`.\n        If `k` is invalid the function returns -1.\n    \"\"\"\n    # Check if k is valid\n    if k < 1 or k > len(X_train):\n        return -1\n\n    # Convert lists to numpy arrays for easier computation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    # Initialize an empty list to store the predicted labels\n    y_pred = []\n\n    # Iterate over each test sample\n    for test_sample in X_test:\n        # Compute the Euclidean distance between the test sample and each training sample\n        distances = np.sqrt(np.sum((X_train - test_sample) ** 2, axis=1))\n\n        # Get the indices of the k nearest training samples\n        k_nearest_indices = np.argsort(distances)[:k]\n\n        # Get the class labels of the k nearest training samples\n        k_nearest_labels = y_train[k_nearest_indices]\n\n        # Get the unique class labels and their counts\n        unique_labels, counts = np.unique(k_nearest_labels, return_counts=True)\n\n        # If there is a tie, choose the smallest class label\n        if len(unique_labels) > 1 and np.max(counts) == np.min(counts):\n            y_pred.append(np.min(unique_labels))\n        else:\n            # Otherwise, choose the class label with the highest count\n            y_pred.append(unique_labels[np.argmax(counts)])\n\n    return y_pred\n```\n\nThis script first checks if the provided `k` is valid. If it is not, it returns `-1`. Then it converts the input lists to NumPy arrays for easier computation. It initializes an empty list to store the predicted labels. For each test sample, it computes the Euclidean distance between the test sample and each training sample. It then gets the indices of the `k` nearest training samples and their corresponding class labels. If there is a tie, it chooses the smallest class label. Otherwise, it chooses the class label with the highest count. The predicted label is then appended to the list of predicted labels. Finally, the list of predicted labels is returned.\n"}
{"task_id": 76, "completion_id": 0, "completion": "Here is a Python script that implements the function `cross_entropy_loss` as described in the task.\n\n```python\nimport numpy as np\n\ndef cross_entropy_loss(y: list | 'np.ndarray', y_pred: list | 'np.ndarray') -> float:\n    \"\"\"Compute the unnormalised categorical cross-entropy loss.\n\n    Parameters\n    ----------\n    y : list | np.ndarray\n        One-hot encoded true labels of shape (n_samples, n_classes).\n    y_pred : list | np.ndarray\n        Predicted probabilities of the same shape produced by a model.\n\n    Returns\n    -------\n    float\n        Total cross-entropy loss for the batch, rounded to 4 decimal places.\n    \"\"\"\n    # Convert input to numpy arrays\n    y = np.array(y)\n    y_pred = np.array(y_pred)\n\n    # Compute the cross-entropy loss\n    loss = -np.sum(y * np.log(y_pred + np.finfo(float).eps))\n\n    # Round to 4 decimal places\n    loss = round(loss, 4)\n\n    return loss\n```\n\nThis function first converts the input lists to numpy arrays for easier computation. It then computes the cross-entropy loss by summing the product of `y` and the natural logarithm of `y_pred` (with a small epsilon added for numerical stability). Finally, it rounds the loss to 4 decimal places and returns it.\n"}
{"task_id": 77, "completion_id": 0, "completion": "Here is a Python script that implements forward propagation for an L-layer neural network:\n\n```python\nimport numpy as np\n\ndef sigmoid(Z):\n    \"\"\"\n    Implements the sigmoid activation function.\n    \"\"\"\n    A = 1/(1+np.exp(-Z))\n    return A\n\ndef relu(Z):\n    \"\"\"\n    Implements the ReLU activation function.\n    \"\"\"\n    A = np.maximum(0,Z)\n    return A\n\ndef linear_forward(A, W, b):\n    \"\"\"\n    Implement the linear part of a layer's forward propagation.\n    \"\"\"\n    Z = np.dot(W, A) + b\n    return Z\n\ndef linear_activation_forward(A_prev, W, b, activation):\n    \"\"\"\n    Implement the forward propagation for the LINEAR->ACTIVATION layer\n    \"\"\"\n    Z = linear_forward(A_prev, W, b)\n    if activation == \"sigmoid\":\n        A = sigmoid(Z)\n    elif activation == \"relu\":\n        A = relu(Z)\n    return A, Z\n\ndef L_model_forward(X, parameters):\n    \"\"\"\n    Implement forward propagation for the [LINEAR->RELU]*(L-1)->LINEAR->SIGMOID computation\n    \"\"\"\n    caches = []\n    A = X\n    L = len(parameters) // 2  # number of layers in the neural network\n    \n    # Implement [LINEAR -> RELU]*(L-1). Add \"cache\" to the \"caches\" list.\n    for l in range(1, L):\n        A_prev = A \n        A, cache = linear_activation_forward(A_prev, parameters['W' + str(l)], parameters['b' + str(l)], activation = \"relu\")\n        caches.append(cache)\n    \n    # Implement LINEAR -> SIGMOID. Add \"cache\" to the \"caches\" list.\n    AL, cache = linear_activation_forward(A, parameters['W' + str(L)], parameters['b' + str(L)], activation = \"sigmoid\")\n    caches.append(cache)\n    \n    assert(AL.shape == (1,X.shape[1]))\n            \n    return AL.round(4).tolist(), caches\n```\n\nThis script first defines the activation functions (sigmoid and ReLU) and the linear forward step. Then it defines the linear activation forward step, which combines the linear and activation steps. Finally, it defines the forward propagation for the entire network, which iterates over each layer and applies the linear activation forward step. The caches are stored in a list for each layer, and the final activation is returned, rounded to 4 decimal places and converted to a list.\n"}
{"task_id": 81, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef compute_cost(A2: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"Compute the binary cross-entropy cost.\n\n    Args:\n        A2 (np.ndarray): Predicted probabilities, shape (1, m) or (m,).\n        Y  (np.ndarray): Ground-truth labels (0 or 1), same shape as ``A2``.\n\n    Returns:\n        float: The cross-entropy cost rounded to 6 decimal places.\n    \"\"\"\n    # Clip A2 to the interval [\u03b5, 1\u2013\u03b5]\n    eps = 1e-15\n    A2 = np.clip(A2, eps, 1 - eps)\n\n    # Compute the binary cross-entropy cost\n    m = Y.shape[0]\n    cost = -1/m * (np.dot(Y, np.log(A2).T) + np.dot(1-Y, np.log(1-A2).T))\n\n    # Return the cost rounded to 6 decimal places\n    return np.round(cost, 6)\n```\n\nThis script first clips the predicted probabilities to the interval [\u03b5, 1\u2013\u03b5] to avoid taking the log of 0. Then it computes the binary cross-entropy cost using the formula provided in the task description. Finally, it returns the cost rounded to 6 decimal places.\n"}
{"task_id": 82, "completion_id": 0, "completion": "Here is a Python script that implements the `epsilon_soft` function as described:\n\n```python\nimport numpy as np\n\ndef epsilon_soft(Q: list[float] | \"np.ndarray\", epsilon: float) -> list[float]:\n    \"\"\"Return the \u03b5-soft probabilities for a set of Q-values.\n\n    Q is a sequence containing the Q-values for each possible action in a\n    single state.  epsilon (0 \u2264 \u03b5 \u2264 1) is the exploration parameter.\n\n    The returned list must contain the probability of selecting every action\n    under the \u03b5-soft policy, rounded to 4 decimal places.\n    \"\"\"\n    # Convert Q to numpy array\n    Q = np.array(Q)\n\n    # Find the greedy action\n    greedy_action = np.argmax(Q)\n\n    # Calculate the base probability\n    base = epsilon / len(Q)\n\n    # Initialize probabilities with base probability\n    probabilities = np.full(len(Q), base)\n\n    # Set the greedy action's probability to (1 - epsilon) + base\n    probabilities[greedy_action] = (1 - epsilon) + base\n\n    # Round probabilities to 4 decimal places\n    probabilities = np.round(probabilities, 4)\n\n    # Normalize probabilities to sum to 1\n    probabilities /= np.sum(probabilities)\n\n    return list(probabilities)\n```\n\nThis function first converts the input Q-values to a numpy array for easier manipulation. It then finds the greedy action by finding the index of the maximum Q-value. The base probability is calculated as epsilon divided by the number of actions.\n\nThe probabilities are initialized as a numpy array of base probabilities, and the greedy action's probability is set to (1 - epsilon) + base. The probabilities are then rounded to 4 decimal places and normalized to sum to 1. The result is returned as a list.\n"}
{"task_id": 86, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nfrom collections import Counter\n\ndef aggregate_random_forest_votes(predictions: list[list[int | float | str]]) -> list:\n    \"\"\"Aggregate individual tree predictions using majority voting.\n\n    Parameters\n    ----------\n    predictions : list[list[int | float | str]]\n        A two-dimensional list where each inner list holds the predictions of a\n        single decision tree for **all** samples. All inner lists have the same\n        length.\n\n    Returns\n    -------\n    list\n        A list with the final prediction for every sample after majority\n        voting. In case of ties the smallest label is chosen.\n    \"\"\"\n    # Transpose the predictions to iterate over samples instead of trees\n    transposed_predictions = list(map(list, zip(*predictions)))\n\n    # Initialize an empty list to store the final predictions\n    final_predictions = []\n\n    # Iterate over each sample\n    for sample_predictions in transposed_predictions:\n        # Count the votes for each class label\n        vote_counts = Counter(sample_predictions)\n\n        # Find the class label(s) with the highest vote count\n        max_vote_count = max(vote_counts.values())\n        max_vote_labels = [label for label, count in vote_counts.items() if count == max_vote_count]\n\n        # Choose the smallest label in case of ties\n        final_prediction = min(max_vote_labels)\n\n        # Append the final prediction for the current sample to the final predictions list\n        final_predictions.append(final_prediction)\n\n    return final_predictions\n```\n\nThis script first transposes the input list of lists so that we can iterate over the samples instead of the trees. For each sample, it counts the votes for each class label using a `Counter` object. It then finds the class label(s) with the highest vote count and chooses the smallest one in case of ties. The final prediction for the current sample is then appended to the `final_predictions` list. Finally, the function returns the `final_predictions` list.\n"}
{"task_id": 88, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\n\ndef softplus(z):\n    \"\"\"Compute the numerically stable softplus activation.\n\n    The softplus function is defined as ln(1 + e**z).  This implementation\n    uses ``numpy.logaddexp`` to avoid overflow/underflow issues.\n\n    Args:\n        z (int | float | list | np.ndarray): Scalar or array-like input.\n\n    Returns:\n        float | list: Softplus value(s) rounded to 4 decimal places. For\n        array-like inputs the returned structure mirrors the input\u2019s shape but\n        is converted to a pure Python ``list``. For scalar inputs a single\n        ``float`` is returned.\n    \"\"\"\n    # Convert the input to a numpy array\n    z = np.array(z)\n\n    # Compute the softplus values\n    result = np.logaddexp(0.0, z)\n\n    # Round the result to 4 decimal places\n    result = np.round(result, 4)\n\n    # Convert the result to a Python list\n    result = result.tolist()\n\n    return result\n```\n\nThis function first converts the input to a numpy array. Then it computes the softplus values using `np.logaddexp`. The result is rounded to 4 decimal places using `np.round`. Finally, the result is converted to a Python list using `tolist()`.\n\nYou can test this function with the following code:\n\n```python\nprint(softplus(-1000))  # Output: [0.0]\nprint(softplus(0))  # Output: [0.6931]\nprint(softplus(3))  # Output: [3.0486]\nprint(softplus([-1000, 0, 3]))  # Output: [0.0, 0.6931, 3.0486]\n```\n"}
{"task_id": 90, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\nfrom typing import Any\n\ndef mse(bandit: Any, policy: Any) -> float:\n    \"\"\"Compute the mean-squared error between a policy's estimates and truth.\n\n    Parameters\n    ----------\n    bandit : Any\n        Object or dictionary that stores the true expected payout of each arm\n        under the key/attribute ``arm_evs``.\n    policy : Any\n        Object or dictionary that stores the policy's current estimate of each\n        arm's expectation under the key/attribute ``ev_estimates``. The field\n        must be a dictionary mapping an arm index (int) to a float value.\n\n    Returns\n    -------\n    float\n        The mean-squared error rounded to 4 decimal places. If the policy does\n        not provide any estimates the function returns ``numpy.nan``.\n    \"\"\"\n    # Check if policy has any estimates\n    if not hasattr(policy, 'ev_estimates') or not policy.ev_estimates:\n        return np.nan\n\n    # Sort the estimates and true expected payouts\n    sorted_evs = sorted(bandit.arm_evs)\n    sorted_estimates = [policy.ev_estimates[i] for i in sorted(policy.ev_estimates)]\n\n    # Compute the squared error for every arm\n    squared_errors = [(estimate - ev)**2 for estimate, ev in zip(sorted_estimates, sorted_evs)]\n\n    # Average these values and round the result to 4 decimal places\n    mse = round(sum(squared_errors) / len(squared_errors), 4)\n\n    return mse\n```\n\nThis script first checks if the policy has any estimates. If not, it returns `numpy.nan`. Then it sorts the estimates and true expected payouts. It computes the squared error for every arm and averages these values, rounding the result to 4 decimal places.\n"}
{"task_id": 96, "completion_id": 0, "completion": "Here is a Python script that implements the additive-smoothed N-gram log-probability function:\n\n```python\nimport math\nfrom collections import Counter, defaultdict\n\ndef additive_ngram_log_prob(corpus: list[str], sequence: str, N: int, K: float = 1.0) -> float:\n    \"\"\"Compute the additive-smoothed log-probability of *sequence* given a corpus.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        Training sentences (white-space separated).\n    sequence : str\n        Sentence whose probability must be evaluated.\n    N : int\n        Order of the N-gram model.\n    K : float, default = 1.0\n        Smoothing constant (Laplace when 1.0).\n\n    Returns\n    -------\n    float\n        Natural logarithm of the sentence probability rounded to 4 decimals.\n    \"\"\"\n    # Build all 1-,\u2026,N-gram frequency tables from the corpus\n    ngram_counts = defaultdict(Counter)\n    for sentence in corpus:\n        words = sentence.split()\n        for n in range(1, N+1):\n            for ngram in zip(*[words[i:] for i in range(n)]):\n                ngram_counts[n][ngram] += 1\n\n    # Add an explicit \u201c<UNK>\u201d token to the vocabulary to handle unseen words\n    vocab = set(word for words in corpus for word in words.split())\n    vocab.add(\"<UNK>\")\n\n    # Estimate the probability of every contiguous N-gram in the target sentence\n    words = sequence.split()\n    if len(words) < N:\n        return 0.0\n\n    log_prob = 0.0\n    for ngram in zip(*[words[i:] for i in range(N)]):\n        context = ngram[:-1]\n        word = ngram[-1]\n        if word not in vocab:\n            word = \"<UNK>\"\n        count_context_word = ngram_counts[N][ngram]\n        count_context = sum(ngram_counts[N][context + (w,)] for w in vocab)\n        prob = (count_context_word + K) / (count_context + K * len(vocab))\n        log_prob += math.log(prob)\n\n    return round(log_prob, 4)\n```\n\nThis script first builds all 1-,\u2026,N-gram frequency tables from the corpus. It then adds an explicit \u201c<UNK>\u201d token to the vocabulary to handle unseen words. It estimates the probability of every contiguous N-gram in the target sentence with additive smoothing. If the sentence length is smaller than N, no N-grams exist, in that case it returns 0.0. Finally, it returns the natural logarithm of the sentence probability (i.e. the sum of log-probabilities of all N-grams) rounded to 4 decimals.\n"}
{"task_id": 108, "completion_id": 0, "completion": "Here is a Python script that implements the regularized Alternating Least Squares (ALS) algorithm for matrix factorization:\n\n```python\nimport numpy as np\n\ndef als_factorization(X: np.ndarray,\n                      K: int,\n                      alpha: float = 1.0,\n                      max_iter: int = 200,\n                      tol: float = 1e-4) -> list[list[float]]:\n    \"\"\"Factorise a real-valued matrix using regularised Alternating Least Squares.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        The input matrix of shape (N, M).\n    K : int\n        Target rank (number of latent factors).\n    alpha : float, optional\n        L2 regularisation weight. Default is 1.0.\n    max_iter : int, optional\n        Maximum number of ALS iterations. Default is 200.\n    tol : float, optional\n        Desired value of the regularised loss at which to stop. Default is 1e-4.\n\n    Returns\n    -------\n    list[list[float]]\n        The reconstructed matrix X_hat rounded to 4 decimals.\n    \"\"\"\n    # Initialize W and H with random values\n    np.random.seed(0)\n    N, M = X.shape\n    W = np.random.rand(N, K)\n    H = np.random.rand(K, M)\n\n    # Perform ALS\n    for _ in range(max_iter):\n        # Update H\n        W_t_X = W.T @ X\n        W_t_W_H = W.T @ W @ H + alpha * np.eye(K)\n        H_new = H * (W_t_X / np.maximum(W_t_W_H, 1e-9))\n\n        # Update W\n        X_H_t = X @ H_new.T\n        W_H_H_t_H_new = W @ H_new @ H_new.T + alpha * np.eye(K)\n        W_new = W * (X_H_t / np.maximum(W_H_H_t_H_new, 1e-9))\n\n        # Check for convergence\n        loss = np.linalg.norm(X - W_new @ H_new, 'fro') + alpha * (np.linalg.norm(W_new, 'fro') + np.linalg.norm(H_new, 'fro'))\n        if loss < tol:\n            break\n\n        W, H = W_new, H_new\n\n    # Return the reconstructed matrix\n    X_hat = W @ H\n    return X_hat.round(4).tolist()\n```\n\nThis script first initializes the factor matrices W and H with random values. It then performs the ALS iterations, updating W and H in turn. The algorithm stops when the loss drops below the desired tolerance or the maximum number of iterations is reached. The reconstructed matrix X_hat is returned as a Python list of lists.\n"}
{"task_id": 109, "completion_id": 0, "completion": "Here is a Python script that implements the K-Means++ algorithm:\n\n```python\nimport numpy as np\nimport random\n\ndef kmeans(X: np.ndarray, K: int, max_iter: int = 100, random_state: int | None = None) -> list[list[float]]:\n    \"\"\"Perform K-Means clustering with K-Means++ initialisation.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array with shape (m, n) where *m* is the number of samples and *n* is the\n        number of features.\n    K : int\n        The number of clusters to form.\n    max_iter : int, default = 100\n        Maximum number of iterations for the Lloyd refinement loop.\n    random_state : int | None, default = None\n        Seed for both Python's `random` module and NumPy's RNG to make the result\n        reproducible. If *None*, no seed is set.\n\n    Returns\n    -------\n    list[list[float]]\n        A list of K centroids (each centroid is a list of floats) rounded to 4 decimal\n        places and sorted in ascending order by their first coordinate.\n    \"\"\"\n    if random_state is not None:\n        np.random.seed(random_state)\n        random.seed(random_state)\n\n    # Step 1: Initialize centroids\n    centroids = [X[np.random.choice(range(X.shape[0]))]]\n    for _ in range(1, K):\n        dist_sq = np.array([min([np.inner(c-x,c-x) for c in centroids]) for x in X])\n        probs = dist_sq/dist_sq.sum()\n        cumulative_probs = probs.cumsum()\n        r = random.random()\n        for j, p in enumerate(cumulative_probs):\n            if r < p:\n                i = j\n                break\n        centroids.append(X[i])\n\n    # Step 2: Lloyd's iterations\n    for _ in range(max_iter):\n        clusters = [[] for _ in range(K)]\n        for x in X:\n            distances = [np.linalg.norm(x - c) for c in centroids]\n            cluster_index = np.argmin(distances)\n            clusters[cluster_index].append(x)\n\n        new_centroids = []\n        for i, cluster in enumerate(clusters):\n            if cluster:\n                new_centroid = np.mean(cluster, axis=0)\n                new_centroids.append(new_centroid)\n            else:\n                new_centroids.append(centroids[i])\n\n        if np.allclose(centroids, new_centroids):\n            break\n\n        centroids = new_centroids\n\n    # Step 3: Sort and round centroids\n    centroids = sorted(centroids, key=lambda x: (x[0], x))\n    centroids = [[round(c, 4) for c in centroid] for centroid in centroids]\n\n    return centroids\n```\n\nThis script first initializes the centroids using the K-Means++ algorithm. Then it performs the Lloyd's iterations until either the cluster assignments stop changing or the maximum number of iterations is reached. Finally, it sorts the centroids by their first coordinate and rounds them to the nearest 4th decimal.\n"}
{"task_id": 111, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\nTIME_STEPS = 20  # length of the fixed-size sequence expected by the model\n\ndef string_to_int(text: str, time_steps: int, vocabulary: dict[str, int]) -> list[int]:\n    \"\"\"Encodes every character of the input string using a provided vocabulary.\"\"\"\n    encoded = [vocabulary.get(char, 0) for char in text]\n    if len(encoded) < time_steps:\n        encoded += [0] * (time_steps - len(encoded))\n    else:\n        encoded = encoded[:time_steps]\n    return encoded\n\ndef int_to_string(indices, inverse_vocab: dict[int, str]) -> str:\n    \"\"\"Converts a list/array of integer ids back to text using an inverse vocabulary.\"\"\"\n    return ''.join(inverse_vocab.get(i, '') for i in indices if i != 0)\n\ndef run_example(model, input_vocabulary: dict[str, int], inv_output_vocabulary: dict[int, str], text: str) -> str:\n    \"\"\"Puts everything together: encodes the raw text, calls model.predict, applies argmax, and decodes the ids.\"\"\"\n    encoded = string_to_int(text, TIME_STEPS, input_vocabulary)\n    prediction = model.predict(np.array([encoded]))\n    decoded = int_to_string(np.argmax(prediction, axis=-1)[0], inv_output_vocabulary)\n    return decoded\n```\n\nThis script first encodes the input text into a list of integers using the `string_to_int` function. It then uses the provided model to make a prediction on this encoded input. The predicted output is then decoded back into a string using the `int_to_string` function.\n\nPlease note that this script assumes that the model's `predict` method takes a 2D numpy array as input and returns a 3D numpy array as output. The `argmax` function is used to select the most probable character at each time step.\n\nAlso, the `string_to_int` function pads the input with zeros if it is shorter than `TIME_STEPS`, and truncates it if it is longer. Any character that does not exist in the vocabulary is also encoded as the padding token 0.\n\nThe `int_to_string` function ignores padding tokens (id 0) during decoding.\n"}
{"task_id": 113, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\ndef run_examples(model, input_vocabulary, inv_output_vocabulary, examples=None):\n    \"\"\"Run a prediction model on multiple examples and collect its outputs.\n\n    Parameters\n    ----------\n    model : callable\n        A function that receives a single input string and returns the\n        corresponding predicted string.\n    input_vocabulary : dict\n        Mapping from characters to integer indices.  Provided only for API\n        compatibility \u2013 *run_examples* does not need it.\n    inv_output_vocabulary : dict\n        Mapping from integer indices back to characters.  Also unused inside\n        this helper but kept for API compatibility.\n    examples : iterable[str]\n        A collection of input strings.  If *None*, the function should use the\n        global constant `EXAMPLES`.\n\n    Returns\n    -------\n    list[str]\n        The list of model predictions, one for each input example, in the same\n        order.\n    \"\"\"\n    if examples is None:\n        examples = EXAMPLES\n\n    predictions = []\n    for example in examples:\n        prediction = run_example(model, input_vocabulary, inv_output_vocabulary, example)\n        prediction_str = ''.join(prediction)\n        print(f\"input: {example}\\noutput: {prediction_str}\")\n        predictions.append(prediction_str)\n\n    return predictions\n```\n\nThis script first checks if `examples` is `None`. If it is, it uses the global constant `EXAMPLES`. Then it iterates over each example, calls the `run_example` function to get the prediction, joins the prediction characters into a string, prints the input and output, and appends the prediction string to the `predictions` list. Finally, it returns the `predictions` list.\n"}
{"task_id": 115, "completion_id": 0, "completion": "Here is a Python script that implements the logistic_loss_and_gradient function as described in the task:\n\n```python\nimport numpy as np\n\ndef logistic_loss_and_gradient(X: np.ndarray, y: np.ndarray, w: np.ndarray) -> tuple[float, list[list[float]]]:\n    \"\"\"Compute binary cross-entropy loss and its gradient for logistic regression.\n\n    Args:\n        X (np.ndarray): Feature matrix of shape (m, n).\n        y (np.ndarray): Binary target vector of shape (m,) or (m, 1).\n        w (np.ndarray): Weight vector of shape (n,) or (n, 1).\n\n    Returns:\n        tuple: A tuple containing\n            1. The average cross-entropy loss rounded to 4 decimals (float).\n            2. The gradient of the loss with respect to the weights rounded to 4 decimals and\n               converted to a (nested) Python list via ``tolist()``.\n    \"\"\"\n    # Compute z\n    z = np.dot(X, w)\n\n    # Compute p\n    p = 1 / (1 + np.exp(-z))\n\n    # Replace 0 and 1 probabilities with a small constant\n    eps = 1e-20\n    p = np.clip(p, eps, 1 - eps)\n\n    # Compute the loss\n    m = X.shape[0]\n    loss = -1/m * np.sum(y * np.log(p) + (1 - y) * np.log(1 - p))\n\n    # Compute the gradient\n    grad = 1/m * np.dot(X.T, (p - y))\n\n    return round(loss, 4), np.around(grad, 4).tolist()\n```\n\nThis function first computes the z values, then the p values. It replaces any 0 or 1 probabilities with a small constant to avoid numerical issues. It then computes the loss and the gradient, and returns them rounded to 4 decimal places.\n"}
{"task_id": 118, "completion_id": 0, "completion": "Here is a Python script that implements the AdaBoost algorithm with decision stumps. The script uses NumPy for numerical computations and scikit-learn's DecisionTreeClassifier for the decision stumps.\n\n```python\nimport numpy as np\nfrom sklearn.tree import DecisionTreeClassifier\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    # Ensure n_clf is at least 1\n    n_clf = max(1, n_clf)\n\n    # Initialize weights to 1/m\n    m = X_train.shape[0]\n    w = np.ones(m) / m\n\n    # Initialize list to store stumps and their weights\n    clfs = []\n    alphas = []\n\n    # Build decision stumps\n    for _ in range(n_clf):\n        # Fit a decision stump\n        clf = DecisionTreeClassifier(max_depth=1, random_state=0)\n        clf.fit(X_train, y_train, sample_weight=w)\n\n        # Compute error\n        predictions = clf.predict(X_train)\n        error = np.sum(w[predictions != y_train])\n\n        # Compute weight\n        alpha = 0.5 * np.log((1 - error) / error)\n\n        # Update weights\n        w *= np.exp(-alpha * y_train * predictions)\n        w /= np.sum(w)\n\n        # Store stump and its weight\n        clfs.append(clf)\n        alphas.append(alpha)\n\n    # Aggregate stump votes\n    predictions = np.zeros(X_test.shape[0])\n    for clf, alpha in zip(clfs, alphas):\n        predictions += alpha * clf.predict(X_test)\n\n    # Return sign of aggregated votes\n    return [1 if p > 0 else -1 for p in predictions]\n```\n\nThis script first initializes the weights to be equal for all training examples. Then it builds the decision stumps and updates the weights. The weights are updated based on the weighted classification error of each stump. Finally, it aggregates the votes of all stumps and returns the sign of the aggregated votes.\n"}
{"task_id": 128, "completion_id": 0, "completion": "Here is a Python script that implements the multi-class Linear Discriminant Analysis (LDA) transformation:\n\n```python\nimport numpy as np\n\ndef multi_class_lda(X: np.ndarray, y: np.ndarray, n_components: int) -> list[list[float]]:\n    \"\"\"Perform multi-class Linear Discriminant Analysis and project the data.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Two-dimensional array of shape (n_samples, n_features) containing the\n        input data.\n    y : np.ndarray\n        One-dimensional array of shape (n_samples,) containing the integer\n        class labels.\n    n_components : int\n        The number of discriminant components to keep (must be between 1 and\n        ``n_features``).\n\n    Returns\n    -------\n    list[list[float]]\n        The data projected onto the first ``n_components`` LDA directions. Each\n        inner list corresponds to one sample. All values are rounded to four\n        decimal places.\n    \"\"\"\n    class_labels = np.unique(y)\n    n_features = X.shape[1]\n    n_samples = X.shape[0]\n\n    # Compute the within-class scatter matrix\n    within_class_scatter = np.zeros((n_features, n_features))\n    X_mean = X.mean(0)\n    for c in class_labels:\n        X_c = X[y == c]\n        X_c_mean = X_c.mean(0)\n        within_class_scatter += np.sum([np.outer(x - X_c_mean, x - X_c_mean) for x in X_c])\n\n    # Compute the between-class scatter matrix\n    between_class_scatter = np.zeros((n_features, n_features))\n    for c in class_labels:\n        X_c = X[y == c]\n        X_c_mean = X_c.mean(0)\n        n_c = X_c.shape[0]\n        between_class_scatter += n_c * np.outer(X_c_mean - X_mean, X_c_mean - X_mean)\n\n    # Compute the matrix A\n    A = np.dot(np.linalg.pinv(within_class_scatter), between_class_scatter)\n\n    # Perform eigen-decomposition of A\n    eig_vals, eig_vecs = np.linalg.eigh(A)\n\n    # Sort the eigen-pairs in descending order of the eigen-values\n    idx = np.argsort(eig_vals)[::-1]\n    eig_vecs = eig_vecs[:, idx]\n\n    # Deterministic sign\n    for i in range(n_features):\n        if eig_vecs[0, i] < 0:\n            eig_vecs[:, i] *= -1\n\n    # Project X on the first n_components eigenvectors\n    W = eig_vecs[:, :n_components]\n    X_lda = np.dot(X, W)\n\n    # Round every element to four decimal places\n    X_lda = np.round(X_lda, 4)\n\n    return X_lda.tolist()\n```\n\nThis script first computes the within-class scatter matrix and the between-class scatter matrix. Then it computes the matrix A and performs eigen-decomposition of A. The eigen-vectors are sorted in descending order of the eigen-values. The deterministic sign is then applied to the eigen-vectors. Finally, the data is projected onto the first `n_components` eigenvectors and the result is returned as a list of lists.\n"}
{"task_id": 140, "completion_id": 0, "completion": "Here is a Python solution using Breadth-First Search (BFS) algorithm. The idea is to use two queues, one for the agent and one for the fire. We start by adding the agent's initial position and all the fire sources to their respective queues. Then, we perform a BFS on both queues simultaneously. For each minute, we process all the cells that are currently in the agent's queue. If the agent reaches the goal, we return the current minute. If the agent can move to a cell and it is not on fire, we add it to the agent's queue. We also process all the cells that are currently in the fire's queue and add all the cells that are not on fire to the fire's queue. If the agent's queue is empty, it means that the agent cannot reach the goal, so we return -1.\n\n```python\nfrom collections import deque\n\ndef escape_fire_maze(grid: list[str]) -> int:\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    # Initialize the queues for the agent and the fire\n    agent_queue = deque([(0, 0)])\n    fire_queue = deque([(i, j) for i in range(n) for j in range(n) if grid[i][j] == 'F'])\n\n    # Initialize the visited sets for the agent and the fire\n    agent_visited = set([(0, 0)])\n    fire_visited = set(fire_queue)\n\n    # Perform BFS\n    minutes = 0\n    while agent_queue:\n        # Process all the cells that are currently in the agent's queue\n        for _ in range(len(agent_queue)):\n            i, j = agent_queue.popleft()\n\n            # If the agent reaches the goal, return the current minute\n            if (i, j) == (n - 1, n - 1):\n                return minutes\n\n            # Process all the neighbouring cells\n            for di, dj in directions:\n                ni, nj = i + di, j + dj\n\n                # If the cell is within the grid and it is not on fire, add it to the agent's queue\n                if 0 <= ni < n and 0 <= nj < n and grid[ni][nj] != '#' and (ni, nj) not in fire_visited:\n                    agent_queue.append((ni, nj))\n                    agent_visited.add((ni, nj))\n\n        # Process all the cells that are currently in the fire's queue\n        for _ in range(len(fire_queue)):\n            i, j = fire_queue.popleft()\n\n            # Process all the neighbouring cells\n            for di, dj in directions:\n                ni, nj = i + di, j + dj\n\n                # If the cell is within the grid and it is not on fire, add it to the fire's queue\n                if 0 <= ni < n and 0 <= nj < n and grid[ni][nj] != '#' and (ni, nj) not in fire_visited:\n                    fire_queue.append((ni, nj))\n                    fire_visited.add((ni, nj))\n\n        minutes += 1\n\n    # If the agent cannot reach the goal, return -1\n    return -1\n```\n\nThis solution has a time complexity of O(n^2) and a space complexity of O(n^2), where n is the size of the grid.\n"}
{"task_id": 141, "completion_id": 0, "completion": "Here is a Python script that implements the k-Nearest Neighbors (k-NN) classifier as a single function.\n\n```python\nimport numpy as np\nfrom scipy.spatial import distance\nfrom collections import Counter\n\ndef knn_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, k: int, metric: str = 'euclidean') -> np.ndarray:\n    \"\"\"Implement your code here.\"\"\"\n    # Compute the distance between each test sample and every training sample\n    if metric == 'euclidean':\n        dist_matrix = distance.cdist(X_test, X_train, 'euclidean')\n    elif metric == 'manhattan':\n        dist_matrix = distance.cdist(X_test, X_train, 'cityblock')\n    elif metric == 'cosine':\n        dist_matrix = distance.cdist(X_test, X_train, 'cosine')\n    else:\n        dist_matrix = distance.cdist(X_test, X_train, 'euclidean')\n\n    # For every test sample find the k training samples with the smallest distance\n    k_nearest_indices = np.argsort(dist_matrix)[:, :k]\n\n    # Predict the class by majority vote among those k neighbours\n    y_pred = []\n    for row in k_nearest_indices:\n        knn = y_train[row]\n        most_common = Counter(knn).most_common()\n        most_common.sort(key=lambda x: (-x[1], x[0]))\n        y_pred.append(most_common[0][0])\n\n    return np.array(y_pred)\n```\n\nThis script first computes the distance matrix between the test and training samples using the specified metric. Then, for each test sample, it finds the k nearest training samples and predicts the class by majority vote. In case of a tie, it returns the smallest label value. If an unknown metric string is supplied, it falls back to the Euclidean metric.\n"}
{"task_id": 146, "completion_id": 0, "completion": "Here is a Python script that implements the k-Nearest Neighbours (k-NN) classifier from scratch.\n\n```python\nimport numpy as np\n\ndef knn_predict(X: np.ndarray,\n                y: np.ndarray,\n                X_test: np.ndarray,\n                k: int = 3,\n                metric: str = 'euclidean') -> list:\n    \"\"\"Predict labels for *X_test* using the k-Nearest Neighbours algorithm.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training features.\n        y: 1-D NumPy array of length *n_samples* containing the training labels.\n        X_test: 2-D NumPy array of shape (m_samples, n_features) with the test\n                 samples whose labels are to be predicted.\n        k: Number of neighbours to consider (default: 3).  If *k* exceeds the\n           number of training samples, use all samples instead.\n        metric: Distance metric to use \u2013 'euclidean', 'manhattan', or 'cosine'.\n\n    Returns:\n        A Python list containing the predicted label for each test sample, in\n        the same order as *X_test*.\n    \"\"\"\n    def euclidean_distance(x1, x2):\n        return np.sqrt(np.sum((x1 - x2) ** 2))\n\n    def manhattan_distance(x1, x2):\n        return np.sum(np.abs(x1 - x2))\n\n    def cosine_distance(x1, x2):\n        eps = 1e-12\n        return 1 - np.dot(x1, x2) / (np.linalg.norm(x1) * np.linalg.norm(x2) + eps)\n\n    if metric == 'euclidean':\n        distance_func = euclidean_distance\n    elif metric == 'manhattan':\n        distance_func = manhattan_distance\n    elif metric == 'cosine':\n        distance_func = cosine_distance\n    else:\n        raise ValueError(\"Invalid metric. Choose from 'euclidean', 'manhattan', or 'cosine'.\")\n\n    y_pred = []\n    for x_test in X_test:\n        distances = [distance_func(x_test, x) for x in X]\n        k_nearest_indices = np.argsort(distances)[:k]\n        k_nearest_labels = y[k_nearest_indices]\n        unique_labels, counts = np.unique(k_nearest_labels, return_counts=True)\n        max_count_indices = np.where(counts == np.max(counts))[0]\n        if len(max_count_indices) == 1:\n            y_pred.append(unique_labels[max_count_indices[0]])\n        else:\n            y_pred.append(np.min(unique_labels[max_count_indices]))\n\n    return y_pred\n```\n\nThis script first defines three distance functions: Euclidean, Manhattan, and Cosine. It then uses a list comprehension to compute the distance between each test sample and every training sample, and uses NumPy's `argsort` function to get the indices of the *k* nearest training samples. It then uses NumPy's `unique` function to find the unique labels of the *k* nearest training samples and their counts, and uses NumPy's `where` function to find the indices of the labels with the maximum count. If there is only one such label, it is appended to the list of predicted labels; otherwise, the smallest such label is appended. The list of predicted labels is then returned.\n"}
{"task_id": 155, "completion_id": 0, "completion": "Here is a Python script that implements the forward pass of an actor network as described in the task.\n\n```python\nimport numpy as np\n\ndef actor_forward(state, weights: dict) -> list[float]:\n    \"\"\"Perform the forward pass of a two-hidden-layer actor network.\n\n    The network architecture is:  Linear \u2192 ReLU \u2192 Linear \u2192 ReLU \u2192 Linear \u2192 tanh.\n\n    Args:\n        state (list[float] | np.ndarray): 1-D vector representing the state.\n        weights (dict): Dictionary with NumPy arrays under the keys\n            'W1', 'b1', 'W2', 'b2', 'W3', 'b3'.\n\n    Returns:\n        list[float]: Action vector (each component rounded to 4 decimals).\n    \"\"\"\n    # Convert state to numpy array\n    state = np.array(state)\n\n    # First affine transformation\n    z1 = np.dot(state, weights['W1']) + weights['b1']\n\n    # First nonlinearity (ReLU)\n    a1 = np.maximum(0, z1)\n\n    # Second affine transformation\n    z2 = np.dot(a1, weights['W2']) + weights['b2']\n\n    # Second nonlinearity (ReLU)\n    a2 = np.maximum(0, z2)\n\n    # Third affine transformation\n    z3 = np.dot(a2, weights['W3']) + weights['b3']\n\n    # Output nonlinearity (tanh)\n    action = np.tanh(z3)\n\n    # Round action to 4 decimal places\n    action = [round(x, 4) for x in action.tolist()]\n\n    return action\n```\n\nThis script first converts the state to a numpy array for easy matrix multiplication. Then it performs the three affine transformations and the two nonlinearities (ReLU and tanh) as described in the task. Finally, it rounds the action vector to 4 decimal places and returns it as a list.\n"}
{"task_id": 160, "completion_id": 0, "completion": "Here is a Python script that implements Lasso regression via coordinate descent as described in the task.\n\n```python\nimport numpy as np\n\ndef fit_lasso(X: np.ndarray,\n              y: np.ndarray,\n              lambda_param: float = 1.0,\n              max_iters: int = 100,\n              fit_intercept: bool = True) -> tuple[list[float], float]:\n    \"\"\"Fit Lasso (L1-regularised) linear regression using coordinate descent.\n\n    The function should learn a weight vector and optional intercept that\n    minimise squared loss + \u03bb\u2006\u00b7\u2006L1-norm.  **Do not** use scikit-learn; rely\n    solely on NumPy and the algorithm described in the task description.\n\n    Args:\n        X:   2-D array of shape (m, n) \u2013 feature matrix.\n        y:   1-D array of length m \u2013 target values.\n        lambda_param: Regularisation strength \u03bb (non-negative).\n        max_iters: Number of full passes over the coordinates.\n        fit_intercept: Whether to fit an intercept term.\n\n    Returns:\n        Tuple (weights, bias) where `weights` is a list of length n and `bias`\n        is a float.  Round all returned numbers to 4 decimal places.\n    \"\"\"\n    m, n = X.shape\n    if fit_intercept:\n        X = np.column_stack((np.ones(m), X))\n    else:\n        X = np.column_stack((np.zeros(m), X))\n\n    w = np.zeros(n + fit_intercept)\n    b = 0.0\n\n    for _ in range(max_iters):\n        for j in range(n + fit_intercept):\n            if j == 0 and fit_intercept:\n                b = np.mean(y - np.dot(X[:, 1:], w[1:]))\n                continue\n\n            tmp_w = w.copy()\n            tmp_w[j] = 0.0\n            r_j = y - np.dot(X, tmp_w)\n            w[j] = soft_thresholding(np.dot(X[:, j], r_j), lambda_param * m) / np.sum(X[:, j]**2)\n\n    return [round(i, 4) for i in w], round(b, 4)\n\n\ndef soft_thresholding(a: float, tau: float) -> float:\n    \"\"\"Soft thresholding operator.\"\"\"\n    return np.sign(a) * max(abs(a) - tau, 0)\n```\n\nThis script first checks if an intercept should be fitted. If so, it adds a column of ones to the feature matrix `X`. If not, it adds a column of zeros. Then it initializes the weight vector `w` and the bias `b` to zero.\n\nThe main loop runs for `max_iters` iterations. In each iteration, it goes through each weight (and the intercept if `fit_intercept` is `True`). For each weight, it temporarily sets the weight to zero, computes the partial residual `r_j`, and updates the weight using the soft-thresholding operator.\n\nFinally, it returns the rounded weights and bias.\n"}
{"task_id": 165, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef hamming_distance(x: list[int] | \"np.ndarray\", y: list[int] | \"np.ndarray\") -> float | int:\n    \"\"\"Compute the normalized Hamming distance between two equal-length integer vectors.\n\n    The distance is the proportion of indices at which the corresponding\n    elements are different. If the two vectors have unequal length, the\n    function must return \u20111.\n\n    Args:\n        x: A 1-D Python list or NumPy array of integers.\n        y: A 1-D Python list or NumPy array of integers.\n\n    Returns:\n        A float rounded to 4 decimal places representing the Hamming distance,\n        or \u20111 if the inputs have different lengths.\n    \"\"\"\n    # Convert lists to numpy arrays if necessary\n    if isinstance(x, list):\n        x = np.array(x)\n    if isinstance(y, list):\n        y = np.array(y)\n\n    # Check if the vectors have the same length\n    if x.shape[0] != y.shape[0]:\n        return -1\n\n    # Compute the Hamming distance\n    distance = np.sum(x != y) / x.shape[0]\n\n    # Return the distance rounded to 4 decimal places\n    return round(distance, 4)\n```\n\nThis script first checks if the inputs are lists and converts them to NumPy arrays if necessary. It then checks if the two vectors have the same length. If they do not, it returns -1. Otherwise, it computes the Hamming distance and returns it rounded to 4 decimal places.\n"}
{"task_id": 169, "completion_id": 0, "completion": "Here is a Python script that implements the `generate_window` function as described:\n\n```python\nimport numpy as np\n\ndef generate_window(window: str, N: int, coefficients: list[float] | None = None) -> list[float]:\n    \"\"\"Generate coefficients for several common symmetric window functions.\n\n    Parameters\n    ----------\n    window : str\n        Name of the desired window. Supported values are\n        \"hamming\", \"hann\", \"blackman_harris\" and \"generalized_cosine\".\n    N : int\n        Number of coefficients to generate. Must be a positive integer.\n    coefficients : list[float] | None, optional\n        List of cosine\u2013series coefficients used **only** when\n        window == \"generalized_cosine\". The default is ``None``.\n\n    Returns\n    -------\n    list[float]\n        List with *N* floats rounded to 4 decimal places.\n    \"\"\"\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError(\"N must be a positive integer\")\n\n    if window == \"hamming\":\n        return [round(0.54 - 0.46 * np.cos(2 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == \"hann\":\n        return [round(0.5 - 0.5 * np.cos(2 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == \"blackman_harris\":\n        a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n        return [round(a0 - a1 * np.cos(2 * np.pi * n / (N - 1)) + a2 * np.cos(4 * np.pi * n / (N - 1)) - a3 * np.cos(6 * np.pi * n / (N - 1)), 4) for n in range(N)]\n    elif window == \"generalized_cosine\":\n        if coefficients is None:\n            raise ValueError(\"Coefficients must be provided for generalized cosine window\")\n        return [round(sum(a * np.cos(2 * np.pi * k * n / (N - 1)) for k, a in enumerate(coefficients)), 4) for n in range(N)]\n    else:\n        raise ValueError(f\"Unknown window type: {window}\")\n```\n\nThis script first checks if `N` is a positive integer. If not, it raises a `ValueError`. Then it checks the `window` type and generates the corresponding window coefficients. If the window type is \"generalized_cosine\", it checks if `coefficients` is provided. If not, it raises a `ValueError`. Finally, it rounds the coefficients to 4 decimal places and returns them as a list.\n"}
{"task_id": 171, "completion_id": 0, "completion": "Here is a Python script that implements a binary Logistic Regression classifier using mini-batch Gradient Descent.\n\n```python\nimport numpy as np\n\ndef logistic_regression_train_predict(\n    X_train: list[list[float]],\n    y_train: list[int],\n    X_test: list[list[float]],\n    epochs: int = 5000,\n    learning_rate: float = 0.1,\n    batch_size: int = 32,\n) -> list[int]:\n    # Convert lists to numpy arrays\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    # Add intercept term to the data\n    X_train = np.hstack((np.ones((X_train.shape[0], 1)), X_train))\n    X_test = np.hstack((np.ones((X_test.shape[0], 1)), X_test))\n\n    # Map labels to {0,1}\n    unique_labels = np.unique(y_train)\n    y_train = np.where(y_train == unique_labels[0], 0, 1)\n\n    # If all training labels are identical, return the unique label for all test samples\n    if np.all(y_train == 0):\n        return [unique_labels[0]] * X_test.shape[0]\n    elif np.all(y_train == 1):\n        return [unique_labels[1]] * X_test.shape[0]\n\n    # Initialize weight vector\n    weights = np.zeros(X_train.shape[1])\n\n    # Train the weight vector using mini-batch Gradient Descent\n    for _ in range(epochs):\n        for i in range(0, X_train.shape[0], batch_size):\n            X_batch = X_train[i:i+batch_size]\n            y_batch = y_train[i:i+batch_size]\n\n            # Compute the gradient of the negative log-likelihood loss\n            y_pred = 1 / (1 + np.exp(-X_batch.dot(weights)))\n            gradient = X_batch.T.dot(y_pred - y_batch)\n\n            # Update the weights\n            weights -= learning_rate * gradient / batch_size\n\n    # Predict labels for the test set\n    y_pred = 1 / (1 + np.exp(-X_test.dot(weights)))\n    y_pred = np.where(y_pred < 0.5, unique_labels[0], unique_labels[1])\n\n    return y_pred.tolist()\n```\n\nThis script first converts the input lists to numpy arrays for easier manipulation. It then adds an intercept term to the data and maps the labels to {0,1}. If all training labels are identical, it simply returns the unique label for all test samples. Otherwise, it initializes the weight vector and trains it using mini-batch Gradient Descent. Finally, it predicts labels for the test set and returns them.\n"}
{"task_id": 176, "completion_id": 0, "completion": "Here is a Python script that implements the AdaBoost algorithm with decision stumps from scratch:\n\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: list[list[int | float]],\n                     y_train: list[int],\n                     X_test: list[list[int | float]],\n                     n_estimators: int = 10) -> list[int]:\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    n_samples, n_features = X_train.shape\n    weights = np.full(n_samples, 1 / n_samples)\n    stumps = []\n\n    for _ in range(n_estimators):\n        min_error = float('inf')\n        best_stump = None\n\n        for feature_index in range(n_features):\n            thresholds = np.unique(X_train[:, feature_index])\n            for threshold in thresholds:\n                for polarity in [1, -1]:\n                    predictions = np.ones(y_train.shape)\n                    predictions[X_train[:, feature_index] * polarity < threshold * polarity] = -1\n\n                    error = np.sum(weights[predictions != y_train])\n\n                    if error < min_error:\n                        min_error = error\n                        best_stump = {\n                            'feature_index': feature_index,\n                            'threshold': threshold,\n                            'polarity': polarity,\n                            'error': error\n                        }\n\n        if best_stump['error'] == 0:\n            break\n\n        alpha = 0.5 * np.log((1 - best_stump['error']) / (best_stump['error'] + 1e-10))\n        stumps.append((best_stump, alpha))\n\n        predictions = np.ones(y_train.shape)\n        feature_index = best_stump['feature_index']\n        threshold = best_stump['threshold']\n        polarity = best_stump['polarity']\n        predictions[X_train[:, feature_index] * polarity < threshold * polarity] = -1\n\n        weights *= np.exp(-alpha * y_train * predictions)\n        weights /= np.sum(weights)\n\n    predictions = np.zeros(X_test.shape[0])\n    for stump, alpha in stumps:\n        feature_index = stump['feature_index']\n        threshold = stump['threshold']\n        polarity = stump['polarity']\n        predictions[X_test[:, feature_index] * polarity < threshold * polarity] += alpha\n\n    return [1 if prediction > 0 else 0 for prediction in predictions]\n```\n\nThis script first initializes the weights of the samples to be equal. Then, for each boosting round, it iterates over all possible decision stumps (i.e., all possible feature indices, thresholds, and polarities). It computes the weighted classification error of each stump and keeps the stump with the smallest error. If a perfect stump is found (i.e., the error is zero), the training stops early. After finding the best stump, it computes the weight of the stump and updates the weights of the samples. Finally, it makes predictions for the test set by aggregating the predictions of all stumps.\n"}
{"task_id": 178, "completion_id": 0, "completion": "Here is a Python script that implements the Particle Swarm Optimization (PSO) algorithm to minimize the Sphere function.\n\n```python\nimport numpy as np\n\ndef particle_swarm_optimisation(n_dims: int,\n                                num_particles: int,\n                                num_iterations: int,\n                                seed: int = 1) -> float:\n    \"\"\"Minimises the n-dimensional Sphere function using Particle Swarm Optimisation.\n\n    Args:\n        n_dims: Dimensionality of the search space (>0).\n        num_particles: Number of particles in the swarm (>0).\n        num_iterations: Number of optimisation iterations (>0).\n        seed: Random-number-generator seed for reproducibility.\n\n    Returns:\n        The best objective value found, rounded to four decimals, or -1 on\n        invalid input.\n    \"\"\"\n    if n_dims <= 0 or num_particles <= 0 or num_iterations <= 0:\n        return -1\n\n    rng = np.random.default_rng(seed)\n\n    # Initialize particles\n    particles = rng.uniform(-1, 1, (num_particles, n_dims))\n    velocities = rng.uniform(-1, 1, (num_particles, n_dims))\n    p_best = particles.copy()\n    g_best = particles[np.argmin(np.sum(particles**2, axis=1))]\n\n    w = 0.5\n    c1 = 1.5\n    c2 = 1.5\n\n    for _ in range(num_iterations):\n        # Update velocities\n        velocities = w * velocities + c1 * rng.uniform(0, 1, (num_particles, n_dims)) * (p_best - particles) + c2 * rng.uniform(0, 1, (num_particles, n_dims)) * (g_best - particles)\n\n        # Update positions\n        particles = np.clip(particles + velocities, -1, 1)\n\n        # Update personal bests\n        p_best[np.sum(particles**2, axis=1) < np.sum(p_best**2, axis=1)] = particles[np.sum(particles**2, axis=1) < np.sum(p_best**2, axis=1)]\n\n        # Update global best\n        g_best = p_best[np.argmin(np.sum(p_best**2, axis=1))]\n\n    return round(np.sum(g_best**2), 4)\n```\n\nThis script first checks if the input arguments are positive. If not, it returns -1. Then it initializes the particles and velocities randomly within the search space. The algorithm then iterates for the specified number of iterations, updating the velocities and positions of the particles, and updating the personal and global bests. Finally, it returns the best objective value found, rounded to four decimals.\n"}
{"task_id": 180, "completion_id": 0, "completion": "Here is a Python script that implements the k-Nearest Neighbours algorithm as described in the task:\n\n```python\nimport numpy as np\nfrom collections import Counter\n\ndef knn_predict(X_train: list[list[float]],\n                y_train: list,\n                X_test: list[list[float]],\n                k: int = 5,\n                task: str = \"classification\") -> list:\n    \"\"\"k-Nearest Neighbours prediction (classification or regression).\n\n    Parameters\n    ----------\n    X_train : list[list[float]]\n        Training feature vectors.\n    y_train : list\n        Targets associated with *X_train*.\n    X_test : list[list[float]]\n        Feature vectors for which predictions are requested.\n    k : int, default 5\n        Number of neighbours to consider; if 0 uses every training sample.\n    task : str, default \"classification\"\n        Either \"classification\" for majority voting or \"regression\" for\n        numeric averaging.\n\n    Returns\n    -------\n    list\n        Predicted labels/values for every vector in *X_test*.\n    \"\"\"\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    predictions = []\n\n    for test_sample in X_test:\n        distances = np.sqrt(np.sum((X_train - test_sample)**2, axis=1))\n        nearest_indices = np.argsort(distances)[:k if k > 0 else None]\n        nearest_labels = y_train[nearest_indices]\n\n        if task == \"classification\":\n            label_counts = Counter(nearest_labels)\n            most_common_label = max(label_counts.items(), key=lambda x: (x[1], -x[0]))[0]\n            predictions.append(most_common_label)\n        elif task == \"regression\":\n            mean_value = np.mean(nearest_labels)\n            predictions.append(round(mean_value, 4))\n\n    return predictions\n```\n\nThis script first converts the input lists to numpy arrays for easier manipulation. Then, for each test sample, it calculates the Euclidean distance to all training samples. It sorts these distances and selects the k smallest ones (or all if k is 0). It then uses these indices to get the corresponding labels from the training set.\n\nIf the task is classification, it counts the occurrences of each label among the k nearest neighbours and chooses the one with the highest count. If there is a tie, it chooses the smallest label.\n\nIf the task is regression, it calculates the mean of the labels among the k nearest neighbours and rounds it to 4 decimal places.\n\nFinally, it returns the list of predictions in the same order as the test samples.\n"}
{"task_id": 184, "completion_id": 0, "completion": "Here is a Python script that implements a CART decision tree classifier from scratch. The script uses the Gini impurity and recursive binary splitting to build the decision tree. The stopping criteria are: if all labels at a node are identical, if `max_depth` is reached, or if a split produces an empty child. The splitting rule is to pick the (feature, threshold) pair with the largest Gini-gain.\n\n```python\nimport numpy as np\n\nclass Node:\n    def __init__(self, predicted_class):\n        self.predicted_class = predicted_class\n        self.feature_index = 0\n        self.threshold = 0\n        self.left = None\n        self.right = None\n\n\ndef gini_impurity(y):\n    _, counts = np.unique(y, return_counts=True)\n    probabilities = counts / counts.sum()\n    return 1 - np.sum(np.square(probabilities))\n\n\ndef split_data(X, y, feature_index, threshold):\n    left_mask = X[:, feature_index] < threshold\n    right_mask = X[:, feature_index] >= threshold\n    return (X[left_mask], y[left_mask]), (X[right_mask], y[right_mask])\n\n\ndef find_best_split(X, y):\n    best_gain = -np.inf\n    best_feature_index, best_threshold = None, None\n    parent_gini = gini_impurity(y)\n\n    for feature_index in range(X.shape[1]):\n        sorted_indices = np.argsort(X[:, feature_index])\n        sorted_X, sorted_y = X[sorted_indices], y[sorted_indices]\n        thresholds = (sorted_X[1:] + sorted_X[:-1]) / 2\n\n        for threshold in thresholds:\n            (_, left_y), (_, right_y) = split_data(sorted_X, sorted_y, feature_index, threshold)\n            if len(left_y) == 0 or len(right_y) == 0:\n                continue\n\n            left_gini = gini_impurity(left_y)\n            right_gini = gini_impurity(right_y)\n            child_gini = len(left_y) / len(y) * left_gini + len(right_y) / len(y) * right_gini\n            gain = parent_gini - child_gini\n\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = feature_index\n                best_threshold = threshold\n\n    return best_feature_index, best_threshold\n\n\ndef build_tree(X, y, depth=0, max_depth=None):\n    if len(np.unique(y)) == 1 or (max_depth is not None and depth == max_depth):\n        return Node(np.argmax(np.bincount(y)))\n\n    feature_index, threshold = find_best_split(X, y)\n    if feature_index is None:\n        return Node(np.argmax(np.bincount(y)))\n\n    (X_left, y_left), (X_right, y_right) = split_data(X, y, feature_index, threshold)\n    left = build_tree(X_left, y_left, depth + 1, max_depth)\n    right = build_tree(X_right, y_right, depth + 1, max_depth)\n\n    return Node(np.argmax(np.bincount(y))).fit(feature_index, threshold, left, right)\n\n\ndef predict_one(x, tree):\n    if tree.left is None and tree.right is None:\n        return tree.predicted_class\n\n    if x[tree.feature_index] < tree.threshold:\n        return predict_one(x, tree.left)\n    else:\n        return predict_one(x, tree.right)\n\n\ndef predict(X, tree):\n    return [predict_one(x, tree) for x in X]\n\n\ndef decision_tree_predict(X_train, y_train, X_test, max_depth=None):\n    tree = build_tree(X_train, y_train, max_depth=max_depth)\n    return predict(X_test, tree)\n```\n\nThis script first defines a `Node` class to represent a node in the decision tree. The `gini_impurity` function calculates the Gini impurity of a set of labels. The `split_data` function splits the data based on a feature and a threshold. The `find_best_split` function finds the best feature and threshold to split the data. The `build_tree` function recursively builds the decision tree. The `predict_one` and `predict` functions make predictions for a single sample and a set of samples, respectively. The `decision_tree_predict` function builds the decision tree and makes predictions for the test data.\n"}
{"task_id": 190, "completion_id": 0, "completion": "Here is a Python script that implements the `best_gini_split` function. This function first calculates the Gini impurity of the whole dataset. Then, for each feature and each unique value, it calculates the Gini impurity of the split and keeps track of the best split found so far.\n\n```python\nimport numpy as np\n\ndef gini_impurity(y):\n    \"\"\"Calculate the Gini impurity of a set of labels.\"\"\"\n    _, counts = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    impurity = 1 - np.sum(np.square(probabilities))\n    return impurity\n\ndef best_gini_split(X, y):\n    \"\"\"Find the best feature index and threshold that minimise the weighted Gini impurity.\"\"\"\n    # Calculate the Gini impurity of the whole dataset\n    G_whole_dataset = gini_impurity(y)\n\n    # Initialize the best split\n    best_feature_index = -1\n    best_threshold_value = None\n    best_gini = round(G_whole_dataset, 4)\n\n    # Iterate over all features\n    for feature_index in range(X.shape[1]):\n        # Get the unique values of the feature\n        unique_values = np.unique(X[:, feature_index])\n\n        # Iterate over all unique values\n        for threshold_value in unique_values:\n            # Split the data\n            left_indices = X[:, feature_index] <= threshold_value\n            right_indices = X[:, feature_index] > threshold_value\n\n            # Skip if either child node is empty\n            if np.sum(left_indices) == 0 or np.sum(right_indices) == 0:\n                continue\n\n            # Calculate the Gini impurity of the split\n            G_left = gini_impurity(y[left_indices])\n            G_right = gini_impurity(y[right_indices])\n            G_split = (np.sum(left_indices) / len(y)) * G_left + (np.sum(right_indices) / len(y)) * G_right\n\n            # Update the best split if necessary\n            if G_split < best_gini or (np.isclose(G_split, best_gini) and (feature_index < best_feature_index or (feature_index == best_feature_index and threshold_value < best_threshold_value))):\n                best_feature_index = feature_index\n                best_threshold_value = threshold_value\n                best_gini = round(G_split, 4)\n\n    return (best_feature_index, best_threshold_value, best_gini)\n```\n\nThis script assumes that `X` and `y` are numpy arrays. If they are not, you can convert them to numpy arrays at the beginning of the function using `np.array(X)` and `np.array(y)`.\n"}
{"task_id": 191, "completion_id": 0, "completion": "Here is a Python script that implements the requested factory function:\n\n```python\nimport numpy as np\nfrom typing import Iterable\n\ndef metric(name: str):\n    \"\"\"Factory producing a validated distance function.\n\n    The function creates and returns a callable *d* that computes one of four\n    classical distances (Euclidean, Manhattan, Chebyshev, Cosine) between two\n    numeric vectors.  All numeric outputs are rounded to four decimal places.\n\n    Validation rules inside the returned callable:\n    * Both arguments must be one-dimensional, non-empty, equal-length numeric\n      iterables (list, tuple or NumPy array).\n    * Metric *name* must be one of the supported strings.\n    * For the cosine distance, zero-norm vectors are rejected.\n\n    If the metric name is unsupported or validation fails, *d* returns -1.\n\n    Args:\n        name (str): Name of the desired metric.\n\n    Returns:\n        Callable[[Iterable, Iterable], float | int]: A distance function with\n        integrated validation.\n    \"\"\"\n    def euclidean(x, y):\n        return round(np.sqrt(np.sum((np.array(x) - np.array(y)) ** 2)), 4)\n\n    def manhattan(x, y):\n        return round(np.sum(np.abs(np.array(x) - np.array(y))), 4)\n\n    def chebyshev(x, y):\n        return round(np.max(np.abs(np.array(x) - np.array(y))), 4)\n\n    def cosine(x, y):\n        x, y = np.array(x), np.array(y)\n        norm_x, norm_y = np.linalg.norm(x), np.linalg.norm(y)\n        if norm_x == 0 or norm_y == 0:\n            return -1\n        return round(1 - np.dot(x, y) / (norm_x * norm_y), 4)\n\n    metrics = {\n        'euclidean': euclidean,\n        'manhattan': manhattan,\n        'chebyshev': chebyshev,\n        'cosine': cosine\n    }\n\n    def d(x, y):\n        if name not in metrics:\n            return -1\n        try:\n            x, y = np.array(x, dtype=float), np.array(y, dtype=float)\n            if x.ndim != 1 or y.ndim != 1 or x.size == 0 or y.size == 0 or x.size != y.size:\n                return -1\n        except ValueError:\n            return -1\n        return metrics[name](x, y)\n\n    return d\n```\n\nThis script defines a factory function `metric` that takes a string `name` as input and returns a callable `d`. The callable `d` computes the requested distance metric between two numeric vectors. The function `d` also validates the input vectors and returns -1 if the validation fails.\n"}
{"task_id": 197, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\nfrom itertools import product\nfrom typing import Any, List, Tuple, Union\n\ndef action_stats(env: Any, md_action: bool, cont_action: bool) -> Tuple[List[Union[int, float]], Union[List[Tuple[int, ...]], None], int]:\n    \"\"\"Summarise an RL environment's action space.\n\n    Args:\n        env: Environment instance exposing an ``action_space`` attribute mimicking OpenAI Gym.\n        md_action: ``True`` if the action space is multi-dimensional.\n        cont_action: ``True`` if the action space is continuous (infinite number of actions).\n\n    Returns:\n        A tuple ``(n_actions_per_dim, action_ids, action_dim)`` where\n            \u2022 n_actions_per_dim: list with the number of actions in every dimension\n                                  (``numpy.inf`` for continuous ones),\n            \u2022 action_ids: list of all discrete actions (cartesian product) or ``None`` if\n                           any dimension is continuous,\n            \u2022 action_dim: number of action dimensions.\n    \"\"\"\n    n_actions_per_dim = []\n    action_ids = None\n    action_dim = 0\n\n    if md_action:\n        action_dim = len(env.action_space.spaces)\n        for space in env.action_space.spaces:\n            if hasattr(space, 'n'):  # Discrete space\n                n_actions_per_dim.append(space.n)\n            else:  # Continuous space\n                n_actions_per_dim.append(np.inf)\n                cont_action = True\n\n        if not cont_action:\n            action_ids = list(product(*[range(n) for n in n_actions_per_dim]))\n    else:\n        if hasattr(env.action_space, 'n'):  # Discrete space\n            n_actions_per_dim.append(env.action_space.n)\n            action_dim = 1\n            if not cont_action:\n                action_ids = list(range(n_actions_per_dim[0]))\n        else:  # Continuous space\n            n_actions_per_dim.append(np.inf)\n            action_dim = env.action_space.shape[0]\n            cont_action = True\n\n    return n_actions_per_dim, action_ids, action_dim\n```\n\nThis script first checks if the action space is multi-dimensional. If it is, it iterates over each sub-space and checks if it is discrete or continuous. If it is discrete, it adds the number of actions to `n_actions_per_dim`. If it is continuous, it sets the corresponding entry in `n_actions_per_dim` to `numpy.inf` and sets `cont_action` to `True`. If `cont_action` is `False` (i.e., all dimensions are discrete), it calculates all possible actions via the cartesian product of the ranges for each dimension and adds them to `action_ids`.\n\nIf the action space is not multi-dimensional, it checks if it is discrete or continuous. If it is discrete, it adds the number of actions to `n_actions_per_dim` and sets `action_dim` to 1. If it is continuous, it sets the corresponding entry in `n_actions_per_dim` to `numpy.inf`, sets `action_dim` to the dimensionality of the space, and sets `cont_action` to `True`. If `cont_action` is `False` (i.e., the dimension is discrete), it adds all possible actions to `action_ids`.\n\nFinally, it returns `n_actions_per_dim`, `action_ids`, and `action_dim`.\n"}
{"task_id": 198, "completion_id": 0, "completion": "Here is a Python script that implements the \u03b2-maximisation step in Latent Dirichlet Allocation:\n\n```python\nimport numpy as np\n\ndef update_beta(phi: list[np.ndarray], corpus: list[list[int]], V: int) -> list[list[float]]:\n    \"\"\"Update the word\u2013topic distribution \u03b2 in Latent Dirichlet Allocation.\n\n    Parameters\n    ----------\n    phi : list[np.ndarray]\n        A list with one 2-D NumPy array per document. The array of document *d*\n        has shape (N_d, T) and stores the variational parameter \u03d5 for this\n        document. Row *n* contains the probabilities that token *n* is\n        generated by each of the *T* topics.\n    corpus : list[list[int]]\n        Tokenised corpus. ``corpus[d][n]`` is the integer index of the *n*-th\n        token of document *d*.\n    V : int\n        Vocabulary size, i.e. the number of distinct word indices (rows of \u03b2).\n\n    Returns\n    -------\n    list[list[float]]\n        The updated \u03b2 matrix as a (V \u00d7 T) nested list, column-normalised and\n        rounded to four decimal places.\n    \"\"\"\n    # Initialize \u03b2 with zeros\n    beta = np.zeros((V, len(phi[0][0])))\n\n    # Iterate over documents\n    for d in range(len(phi)):\n        # Iterate over tokens in document\n        for n in range(len(corpus[d])):\n            # Increment \u03b2 for the word index and topic\n            beta[corpus[d][n], :] += phi[d][n, :]\n\n    # Normalize \u03b2 to sum to 1 for each topic\n    beta /= np.sum(beta, axis=0)\n\n    # Round to 4 decimal places\n    beta = np.round(beta, 4)\n\n    # Convert to list of lists\n    beta = beta.tolist()\n\n    return beta\n```\n\nThis script first initializes \u03b2 with zeros. It then iterates over the documents and tokens in the corpus, incrementing \u03b2 for each word index and topic. After that, it normalizes \u03b2 to sum to 1 for each topic and rounds the values to 4 decimal places. Finally, it converts the NumPy array to a list of lists and returns it.\n"}
{"task_id": 202, "completion_id": 0, "completion": "Here is a Python script that implements the PAM clustering algorithm:\n\n```python\nimport numpy as np\n\ndef pam_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster *X* into *k* groups using a deterministic PAM algorithm.\n\n    The function must follow these rules:\n    1. Use the first *k* samples of *X* as the initial medoids.\n    2. Repeatedly try all possible single swaps between a medoid and a non-\n       medoid, accepting the swap that strictly reduces the total cost the\n       most.  Stop when no swap can further decrease the cost.\n    3. After convergence label every sample with the index (0 \u2026 k\u22121) of the\n       closest medoid (ties are broken by the medoid that appears first in the\n       current medoid list).\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features).\n        k: Number of clusters to form.\n\n    Returns:\n        A Python list of length *n_samples* containing integer cluster labels.\n    \"\"\"\n    # Initialize medoids\n    medoids = X[:k]\n    labels = np.zeros(len(X), dtype=int)\n\n    # Calculate total cost\n    def total_cost(medoids, labels):\n        return sum(np.linalg.norm(X[i] - medoids[labels[i]]) for i in range(len(X)))\n\n    # Main loop\n    while True:\n        # Assign each sample to the closest medoid\n        for i in range(len(X)):\n            labels[i] = np.argmin(np.linalg.norm(X[i] - medoids, axis=1))\n\n        # Try all possible single swaps\n        best_medoids = medoids.copy()\n        best_cost = total_cost(medoids, labels)\n        for i in range(k):\n            for j in range(k, len(X)):\n                medoids[i], X[j] = X[j], medoids[i]\n                cost = total_cost(medoids, labels)\n                if cost < best_cost:\n                    best_medoids = medoids.copy()\n                    best_cost = cost\n                medoids[i], X[j] = X[j], medoids[i]\n\n        # If no swap can further decrease the cost, stop\n        if np.array_equal(medoids, best_medoids):\n            break\n\n        medoids = best_medoids\n\n    # Assign each sample to the closest medoid\n    for i in range(len(X)):\n        labels[i] = np.argmin(np.linalg.norm(X[i] - medoids, axis=1))\n\n    return labels.tolist()\n```\n\nThis script first initializes the medoids as the first *k* samples of *X*. It then enters a main loop where it repeatedly tries all possible single swaps between a medoid and a non-medoid, accepting the swap that strictly reduces the total cost the most. If no swap can further decrease the cost, it stops. After convergence, it assigns each sample to the closest medoid and returns the cluster labels as a Python list.\n"}
{"task_id": 216, "completion_id": 0, "completion": "Here is a Python script that implements Elastic Net regression from scratch using batch gradient descent.\n\n```python\nimport numpy as np\n\ndef elastic_net_regression(x_train, y_train, x_test, degree=1, reg_factor=0.05, l1_ratio=0.5, n_iterations=3000, learning_rate=0.01):\n    # Check if the shapes of x_train and x_test are compatible\n    if len(x_train[0]) != len(x_test[0]):\n        return -1\n\n    # Check if n_iterations is smaller than 1\n    if n_iterations < 1:\n        return -1\n\n    # Convert the inputs to numpy arrays\n    x_train = np.array(x_train)\n    y_train = np.array(y_train)\n    x_test = np.array(x_test)\n\n    # Generate polynomial features\n    x_train = np.hstack([x_train**(i+1) for i in range(degree)])\n    x_test = np.hstack([x_test**(i+1) for i in range(degree)])\n\n    # Standardize the features\n    x_train[:,1:] = (x_train[:,1:] - np.mean(x_train[:,1:], axis=0)) / np.std(x_train[:,1:], axis=0)\n    x_test = (x_test - np.mean(x_test, axis=0)) / np.std(x_test, axis=0)\n\n    # Add a column of ones to the feature matrix for the bias term\n    x_train = np.hstack((np.ones((x_train.shape[0], 1)), x_train))\n    x_test = np.hstack((np.ones((x_test.shape[0], 1)), x_test))\n\n    # Initialize the weight vector\n    weights = np.zeros(x_train.shape[1])\n\n    # Train the model\n    for _ in range(n_iterations):\n        y_pred = np.dot(x_train, weights)\n        residuals = y_pred - y_train\n        gradient = np.dot(x_train.T, residuals) + reg_factor * (l1_ratio * np.sign(weights) + (1 - l1_ratio) * weights)\n        weights -= learning_rate * gradient\n\n    # Make predictions\n    y_pred = np.dot(x_test, weights)\n\n    # Return the predictions rounded to 4 decimals\n    return np.round(y_pred, 4).tolist()\n```\n\nThis script first checks if the shapes of `x_train` and `x_test` are compatible and if `n_iterations` is smaller than 1. If not, it returns `-1`. Then it converts the inputs to numpy arrays and generates polynomial features of the given degree. It standardizes the features and adds a column of ones to the feature matrix for the bias term. It initializes the weight vector and trains the model for `n_iterations` passes of batch gradient descent. Finally, it makes predictions for `x_test` and returns the predictions rounded to 4 decimals.\n"}
{"task_id": 217, "completion_id": 0, "completion": "Here is a Python script that implements the function `logistic_components` as described in the task:\n\n```python\nimport numpy as np\n\ndef logistic_components(actual, predicted):\n    \"\"\"Compute gradient, Hessian and probability for logistic loss.\n\n    The function receives the ground-truth labels (expected to be +1 or \u22121) and\n    the raw model scores, and returns three lists:\n        1. gradient of the logistic loss for each observation,\n        2. Hessian (second derivative) for each observation,\n        3. sigmoid transformation (probability) of each raw score.\n\n    All outputs must be rounded to exactly 6 decimal places.\n\n    Args:\n        actual: 1-D container (list, tuple, or NumPy array) of integers.\n        predicted: 1-D container (list, tuple, or NumPy array) of floats.\n\n    Returns:\n        A tuple (gradient_list, hessian_list, probability_list).\n    \"\"\"\n    # Convert inputs to numpy arrays\n    actual = np.array(actual)\n    predicted = np.array(predicted)\n\n    # Compute sigmoid\n    sigmoid = 1 / (1 + np.exp(-predicted))\n\n    # Compute gradient\n    grad = actual * sigmoid - (1 - sigmoid)\n\n    # Compute Hessian\n    hess = sigmoid * (1 - sigmoid)\n\n    # Round all results to 6 decimal places\n    sigmoid = np.round(sigmoid, 6)\n    grad = np.round(grad, 6)\n    hess = np.round(hess, 6)\n\n    # Convert results back to Python lists\n    sigmoid = sigmoid.tolist()\n    grad = grad.tolist()\n    hess = hess.tolist()\n\n    return grad, hess, sigmoid\n```\n\nThis function first converts the inputs to NumPy arrays for vectorized computation. It then computes the sigmoid, gradient, and Hessian for each observation. The results are rounded to 6 decimal places and converted back to Python lists before being returned.\n"}
{"task_id": 218, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\ndef blackjack_outcome(player: list[int], dealer: list[int]) -> float:\n    \"\"\"Evaluate the outcome of a finished round of Blackjack.\n\n    The function **must** follow the rules presented in the task description.\n\n    Args:\n        player: List of integers (1\u201310) representing the player's final hand. 1 is Ace.\n        dealer: List of integers (1\u201310) representing the dealer's final hand.\n\n    Returns:\n        The player's reward as a float. Possible values are -1, 0, 1 or 1.5.\n    \"\"\"\n    def get_score(hand):\n        score = sum(hand)\n        if 1 in hand and score + 10 <= 21:\n            score += 10\n        return score if score <= 21 else -1\n\n    player_score = get_score(player)\n    dealer_score = get_score(dealer)\n\n    if player_score == -1:\n        return -1\n    elif dealer_score == -1:\n        return 1\n    elif player_score > dealer_score:\n        return 1 if (len(player) == 2 and player_score == 21) else 1\n    elif player_score < dealer_score:\n        return -1\n    else:\n        return 0\n```\n\nThis script first defines a helper function `get_score` that calculates the score of a hand. It sums the cards in the hand and if there is an Ace and the score is less than or equal to 11, it adds 10 to the score. If the score is greater than 21, it returns -1 (bust).\n\nThen it calculates the scores of the player's and dealer's hands. If the player's score is -1 (bust), it returns -1 (player loses). If the dealer's score is -1 (bust), it returns 1 (player wins). Otherwise, it compares the scores. If the player's score is higher, it returns 1.5 if the player has a natural blackjack (two cards: an Ace and a 10-value card), otherwise it returns 1. If the dealer's score is higher, it returns -1 (player loses). If the scores are equal, it returns 0 (draw).\n"}
{"task_id": 221, "completion_id": 0, "completion": "Here is a Python script that implements the MSLE metric:\n\n```python\nimport numpy as np\n\ndef squared_log_error(actual, predicted):\n    \"\"\"Helper that returns element-wise squared log errors.\"\"\"\n    return (np.log(1 + actual) - np.log(1 + predicted)) ** 2\n\ndef mean_squared_log_error(actual, predicted):\n    \"\"\"Calculate Mean Squared Logarithmic Error (MSLE).\"\"\"\n    # Input validation\n    if len(actual) != len(predicted):\n        return -1\n    if any(x < 0 for x in actual) or any(x < 0 for x in predicted):\n        return -1\n\n    # Calculate squared log errors and return their mean\n    squared_log_errors = squared_log_error(np.array(actual), np.array(predicted))\n    return round(np.mean(squared_log_errors), 4)\n```\n\nThis script first checks if the inputs are valid. If they are not, it returns -1. If they are valid, it calculates the squared log errors and returns their mean, rounded to 4 decimal places.\n"}
{"task_id": 222, "completion_id": 0, "completion": "Here is a Python script that implements the sigmoid function as per the requirements:\n\n```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the element-wise sigmoid (logistic) function.\n\n    The function must work for scalar numbers, Python lists and NumPy arrays and\n    must be numerically stable for very large positive or negative inputs.\n\n    Args:\n        z: A scalar (int/float) or array-like object (list or np.ndarray)\n           containing numeric values.\n\n    Returns:\n        float | list: The sigmoid of the input rounded to 4 decimal places.\n        If `z` is a scalar the return value is a float, otherwise it is a Python\n        list with the same shape as the input.\n    \"\"\"\n    z = np.array(z)\n    mask = (z >= 0)\n    neg_mask = (z < 0)\n\n    z_pos = np.zeros(z.shape)\n    z_neg = np.zeros(z.shape)\n\n    z_pos[mask] = np.exp(-z[mask])\n    z_neg[neg_mask] = np.exp(z[neg_mask])\n\n    result = np.ones(z.shape)\n    result = result + z_pos\n    result = 1 / result\n    result[neg_mask] = z_neg[neg_mask]\n\n    if np.isscalar(z):\n        return round(float(result), 4)\n    else:\n        return np.round(result, 4).tolist()\n```\n\nThis script first converts the input to a NumPy array. It then creates two masks, one for positive values and one for negative values. It then computes the sigmoid function for positive and negative values separately, using the identity `1 / (1 + exp(-x))` for positive values and `exp(x) / (1 + exp(x))` for negative values. The results are then combined using the masks. If the input was a scalar, it returns a single float, otherwise it returns a list.\n"}
{"task_id": 224, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef leaky_relu(z, a=0.01):\n    \"\"\"Apply the Leaky ReLU activation to every element in *z*.\n\n    Args:\n        z: A scalar, list (possibly nested) or ``numpy.ndarray`` of numbers.\n        a: Optional float in [0,1) \u2014 the slope for negative inputs. Defaults to 0.01.\n\n    Returns:\n        A Python list with the same structure as *z* where each value has been transformed\n        by the Leaky ReLU activation.\n    \"\"\"\n    if isinstance(z, (list, np.ndarray)):\n        return [leaky_relu(zi, a) for zi in z]\n    else:\n        return max(z, a*z)\n\n# Test the function\nz = np.array([[1, -2, 3], [-4, 5, -6]])\nprint(leaky_relu(z))\n```\n\nThis script first checks if the input `z` is a list or a `numpy.ndarray`. If it is, it applies the `leaky_relu` function to each element of `z` recursively. If `z` is not a list or a `numpy.ndarray`, it applies the Leaky ReLU activation function to `z`. The Leaky ReLU activation function is defined as `max(z, a*z)`.\n\nThe output of the script is a Python list containing the activated values with the same nested structure as the input.\n"}
{"task_id": 226, "completion_id": 0, "completion": "Here is a Python script that implements the AdaBoost algorithm with decision stumps:\n\n```python\nimport numpy as np\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    n_samples, n_features = X_train.shape\n    weights = np.full(n_samples, 1/n_samples)\n    clfs = []\n\n    for _ in range(n_clf):\n        min_error = float('inf')\n        best_clf = None\n\n        for feature_i in range(n_features):\n            feature_values = X_train[:, feature_i]\n            thresholds = np.unique(feature_values)\n\n            for threshold in thresholds:\n                polarity = 1\n                predictions = np.ones(n_samples)\n                predictions[X_train[:, feature_i] < threshold] = -1\n\n                error = np.sum(weights[y_train != predictions])\n\n                if error > 0.5:\n                    error = 1 - error\n                    polarity = -1\n\n                if error < min_error:\n                    min_error = error\n                    best_clf = (feature_i, threshold, polarity)\n\n        clf_weight = 0.5 * np.log((1 - min_error) / (min_error + 1e-10))\n        clfs.append((best_clf, clf_weight))\n\n        predictions = np.ones(n_samples)\n        feature_i, threshold, polarity = best_clf\n        predictions[polarity * X_train[:, feature_i] < polarity * threshold] = -1\n\n        weights *= np.exp(-clf_weight * y_train * predictions)\n        weights /= np.sum(weights)\n\n    y_pred = np.zeros(X_test.shape[0])\n    for clf, clf_weight in clfs:\n        feature_i, threshold, polarity = clf\n        y_pred += clf_weight * polarity * (2 * (X_test[:, feature_i] > threshold) - 1)\n\n    return [1 if y > 0 else -1 for y in y_pred]\n```\n\nThis script first initializes the weights of all samples to be equal. Then, for each weak learner (decision stump), it iterates over all features and thresholds to find the one that minimizes the weighted classification error. The learner weight is then computed and the sample weights are updated. Finally, the predictions for the test set are made by summing the weighted predictions of all weak learners.\n"}
{"task_id": 241, "completion_id": 0, "completion": "Here is a Python script that implements the orthogonal weight initializer as described in the task:\n\n```python\nimport numpy as np\n\ndef orthogonal(shape: tuple[int, ...], scale: float = 0.5) -> list[list[float]]:\n    \"\"\"Initialise a tensor with an orthogonal matrix.\n\n    Args:\n        shape: The desired output shape as a tuple of integers.  Must have\n            length \u2265 2.\n        scale: A scaling factor that is multiplied with the orthogonal\n            matrix.  Defaults to 0.5.\n\n    Returns:\n        A python list representing the tensor whose first two dimensions are\n        orthogonal up to the given scaling factor.  If `shape` has fewer than\n        two dimensions the function returns -1.\n    \"\"\"\n    if len(shape) < 2:\n        return -1\n\n    # Step 1: Create a 2-D matrix A filled with i.i.d. samples from the standard normal distribution.\n    A = np.random.normal(size=(shape[0], np.prod(shape[1:])))\n\n    # Step 2: Compute the singular value decomposition of A\n    U, _, Vt = np.linalg.svd(A, full_matrices=False)\n\n    # Step 3: Choose the SVD factor that has the same size as A\n    Q = U if U.shape == A.shape else Vt\n\n    # Step 4: Reshape Q back to the requested tensor shape and multiply it by scale\n    result = Q.reshape(shape).astype(np.float32) * scale\n\n    # Check the orthogonality condition\n    flat = result.reshape(shape[0], -1)\n    if shape[0] <= flat.shape[1]:\n        assert np.allclose(flat @ flat.T, scale**2 * np.eye(shape[0]), atol=1e-6)\n    else:\n        assert np.allclose(flat.T @ flat, scale**2 * np.eye(np.prod(shape[1:])), atol=1e-6)\n\n    return result.tolist()\n```\n\nThis script first checks if the input shape has at least two dimensions. If not, it returns -1. Then it generates a 2-D matrix A filled with i.i.d. samples from the standard normal distribution. It computes the singular value decomposition of A and chooses the SVD factor that has the same size as A. It reshapes this factor back to the requested tensor shape and multiplies it by the scaling factor. Finally, it checks the orthogonality condition and returns the result as a python list.\n"}
{"task_id": 243, "completion_id": 0, "completion": "Here is a Python script that implements the forward pass of the Actor\u2013Critic network as described in the task:\n\n```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float]) -> tuple[list[float], float]:\n    \"\"\"Forward pass of a small fully-connected Actor\u2013Critic network.\n\n    Args:\n        state: List of three floats representing the environment state.\n\n    Returns:\n        Tuple containing:\n            1. List of three action probabilities (rounded to 4 decimals).\n            2. Scalar state value (rounded to 4 decimals).\n    \"\"\"\n    # Convert state to numpy array\n    state = np.array(state)\n\n    # Define weights and biases\n    W1 = W2 = W3 = Wa = Wc = np.ones((4, 4))\n    b1 = b2 = b3 = ba = bc = np.zeros(4)\n    Wa = Wc = np.ones((4, 3))\n    ba = bc = np.zeros(3)\n\n    # Perform forward pass\n    z1 = np.maximum(0, np.dot(state, W1) + b1)\n    z2 = np.maximum(0, np.dot(z1, W2) + b2)\n    z3 = np.maximum(0, np.dot(z2, W3) + b3)\n    logits = np.dot(z3, Wa) + ba\n    action_probs = np.exp(logits) / np.sum(np.exp(logits))\n    state_value = np.dot(z3, Wc) + bc\n\n    # Round action probabilities and state value to 4 decimal places\n    action_probs = [round(prob, 4) for prob in action_probs[0]]\n    state_value = round(state_value[0], 4)\n\n    return action_probs, state_value\n```\n\nThis script first converts the input state to a numpy array for easier manipulation. It then defines the weights and biases for the network. The forward pass is performed by calculating the dot product of the state with the weights and adding the biases for each layer. The ReLU activation function is applied by taking the maximum of 0 and the dot product. The logits are calculated by taking the dot product of the final layer with the weights and adding the biases. The action probabilities are calculated by applying the softmax function to the logits. The state value is calculated by taking the dot product of the final layer with the weights and adding the biases. Finally, the action probabilities and state value are rounded to 4 decimal places and returned.\n"}
{"task_id": 249, "completion_id": 0, "completion": "Here is a Python script that implements the `actor_critic_forward` function as described:\n\n```python\nimport numpy as np\n\ndef actor_critic_forward(state: list[float], params: dict[str, list]) -> tuple[list[float], float]:\n    \"\"\"Compute a forward pass through a three-layer Actor\u2013Critic network.\n\n    The network topology is\n        state \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192 Dense \u2192 ReLU \u2192\n        \u251c\u2500 actor head  (Dense \u2192 soft-max)  \u2192 action probabilities\n        \u2514\u2500 critic head (Dense)             \u2192 state value\n\n    Args:\n        state: 1-D list or array containing the current environment state.\n        params: Dictionary with the following keys (all values are Python lists\n                 that describe NumPy-compatible arrays):\n                 'W1', 'b1', 'W2', 'b2', 'W3', 'b3' \u2013 shared layers\n                 'Wa', 'ba'                    \u2013 actor head\n                 'Wc', 'bc'                    \u2013 critic head\n\n    Returns:\n        A tuple (probabilities, value)\n        probabilities : list of floats \u2013 soft-max of the actor head\n        value         : float          \u2013 scalar output of the critic head\n    \"\"\"\n    # Convert state and parameters to numpy arrays\n    state = np.array(state)\n    W1, b1, W2, b2, W3, b3, Wa, ba, Wc, bc = [np.array(params[key]) for key in ['W1', 'b1', 'W2', 'b2', 'W3', 'b3', 'Wa', 'ba', 'Wc', 'bc']]\n\n    # Perform three affine transformations followed by ReLU on the shared part\n    hidden = np.maximum(0, np.dot(W1, state) + b1)\n    hidden = np.maximum(0, np.dot(W2, hidden) + b2)\n    hidden = np.maximum(0, np.dot(W3, hidden) + b3)\n\n    # Feed the final hidden vector into the actor head and convert the resulting raw scores into a probability distribution with the soft-max function\n    logits = np.dot(Wa, hidden) + ba\n    probabilities = np.exp(logits) / np.sum(np.exp(logits))\n\n    # Feed the same hidden vector into the critic head to obtain the scalar state value\n    value = np.dot(Wc, hidden) + bc\n\n    # Round every probability and the state value to 4 decimal places before returning\n    probabilities = [round(prob, 4) for prob in probabilities]\n    value = round(float(value), 4)\n\n    return probabilities, value\n```\n\nThis script first converts the state and parameters to NumPy arrays for easy manipulation. It then performs the three affine transformations and ReLU operations on the shared part of the network. The final hidden vector is then fed into the actor head to obtain the raw scores, which are converted into a probability distribution using the soft-max function. The same hidden vector is then fed into the critic head to obtain the scalar state value. Finally, the probabilities and the state value are rounded to 4 decimal places before being returned.\n"}
{"task_id": 253, "completion_id": 0, "completion": "Here is a Python script that implements the `elastic_net_regularization` function as described:\n\n```python\nimport numpy as np\n\ndef elastic_net_regularization(w, alpha, l1_ratio=0.5, gradient=False):\n    \"\"\"Compute Elastic-Net penalty or its gradient.\n\n    Args:\n        w: 1-D weight vector (list or NumPy array).\n        alpha: Regularisation strength (non-negative float).\n        l1_ratio: Fraction of L1 component (float in [0, 1]).\n        gradient: If True, return gradient, else return penalty value.\n\n    Returns:\n        float if *gradient* is False; list[float] if *gradient* is True.\n    \"\"\"\n    w = np.array(w)\n    l1_penalty = l1_ratio * np.linalg.norm(w, 1)\n    l2_penalty = (1 - l1_ratio) * 0.5 * np.linalg.norm(w) ** 2\n    penalty = alpha * (l1_penalty + l2_penalty)\n\n    if gradient:\n        gradient = alpha * (l1_ratio * np.sign(w) + (1 - l1_ratio) * w)\n        return [round(g, 4) for g in gradient.tolist()]\n    else:\n        return round(penalty, 4)\n```\n\nThis function first converts the input weight vector to a NumPy array for easier manipulation. It then calculates the L1 and L2 penalties, and combines them with the overall regularisation strength to get the penalty value. If the `gradient` flag is set to `True`, it calculates the gradient of the penalty with respect to the weight vector and returns it as a list of floats. If the `gradient` flag is `False`, it simply returns the penalty value.\n\nThe penalties and gradients are rounded to 4 decimal places as required.\n"}
{"task_id": 256, "completion_id": 0, "completion": "Here is a Python script that implements the `grad_check_RNN` function as described:\n\n```python\nimport numpy as np\nfrom copy import deepcopy\n\ndef grad_check_RNN(model, loss_func, param_name: str, n_t: int, X, epsilon: float = 1e-7):\n    if param_name in [\"X\", \"y\"]:\n        return None\n\n    if param_name in [\"Ba\", \"Bx\"]:\n        param_name = param_name.lower()\n\n    # Get the parameter from the model\n    param = model.parameters[param_name]\n\n    # Initialize the gradient array\n    grads = np.zeros_like(param, dtype=np.float64)\n\n    # Iterate over every element of the parameter\n    for idx, _ in np.ndenumerate(param):\n        # Perturb the parameter by +\u03b5 and -\u03b5\n        param[idx] += epsilon\n        preds_plus = [model.forward(X[:, :, t]) for t in range(n_t)]\n        loss_plus = loss_func(preds_plus)\n\n        param[idx] -= 2 * epsilon\n        preds_minus = [model.forward(X[:, :, t]) for t in range(n_t)]\n        loss_minus = loss_func(preds_minus)\n\n        # Approximate the partial derivative\n        grads[idx] = (loss_plus - loss_minus) / (2 * epsilon)\n\n        # Reset the parameter to its original value\n        param[idx] += epsilon\n\n    return grads.T\n```\n\nThis function first checks if the parameter is trainable (i.e., not \"X\" or \"y\"). If it is, it then gets the parameter from the model and initializes the gradient array. It then iterates over every element of the parameter, perturbing the parameter by `epsilon`, running the forward loop `n_t` times for each perturbation, and evaluating the loss. It then approximates the partial derivative and stores it in the gradient array. Finally, it resets the parameter to its original value and returns the transposed gradient array.\n"}
{"task_id": 257, "completion_id": 0, "completion": "Here is a Python script that implements the AdaBoost algorithm with decision stumps. The script uses NumPy for numerical computations and scikit-learn's DecisionTreeClassifier for the decision stumps.\n\n```python\nimport numpy as np\nfrom sklearn.tree import DecisionTreeClassifier\n\ndef adaboost_predict(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray, n_clf: int = 5) -> list[int]:\n    \"\"\"Train AdaBoost with decision stumps and predict labels for X_test.\n\n    Args:\n        X_train: 2-D NumPy array of shape (m, n) containing the training features.\n        y_train: 1-D NumPy array of length m with labels **-1** or **1**.\n        X_test: 2-D NumPy array of shape (k, n) containing test features.\n        n_clf:   Number of weak classifiers (decision stumps) to build. Must be > 0.\n\n    Returns:\n        A Python list of length k, each element being either -1 or 1, the\n        predicted class for the corresponding row in `X_test`.\n    \"\"\"\n    # Ensure n_clf is at least 1\n    n_clf = max(1, n_clf)\n\n    # Initialize weights to 1/m\n    m = X_train.shape[0]\n    w = np.ones(m) / m\n\n    # Initialize list to store stumps and their weights\n    stumps = []\n    stump_weights = []\n\n    for _ in range(n_clf):\n        # Train a decision stump\n        stump = DecisionTreeClassifier(max_depth=1, random_state=0)\n        stump.fit(X_train, y_train, sample_weight=w)\n\n        # Compute error\n        stump_pred = stump.predict(X_train)\n        err = w[(stump_pred != y_train)].sum()\n\n        # Compute weight\n        stump_weight = 0.5 * np.log((1 - err) / err)\n\n        # Update weights\n        w *= np.exp(-stump_weight * y_train * stump_pred)\n        w /= w.sum()\n\n        # Store stump and its weight\n        stumps.append(stump)\n        stump_weights.append(stump_weight)\n\n    # Aggregate stump votes\n    stump_preds = np.array([stump.predict(X_test) for stump in stumps])\n    pred = np.sign(np.dot(stump_weights, stump_preds))\n\n    return pred.tolist()\n```\n\nThis script first initializes the weights to be equal for all training examples. Then, for each weak classifier, it trains a decision stump, computes its error, and updates the weights. Finally, it aggregates the votes of all stumps and returns the predicted labels.\n"}
{"task_id": 261, "completion_id": 0, "completion": "Here is a Python script that implements the Glorot/Xavier normal weight-initialisation function:\n\n```python\nimport numpy as np\n\ndef glorot_normal(shape: tuple[int, ...]) -> np.ndarray:\n    \"\"\"Generate a NumPy array with Glorot/Xavier normal initialisation.\n\n    Args:\n        shape: Tuple describing the desired tensor shape.  Must have at least\n            two dimensions for well-defined fan_in and fan_out.\n\n    Returns:\n        NumPy ndarray of floats initialised with mean 0 and variance\n        2/(fan_in + fan_out).\n    \"\"\"\n    # Compute fan_in and fan_out\n    if len(shape) < 2:\n        raise ValueError(\"Shape must have at least two dimensions\")\n    fan_in, fan_out = shape[:2]\n    receptive_field_size = 1\n    for dim in shape[2:]:\n        receptive_field_size *= dim\n    fan_in *= receptive_field_size\n    fan_out *= receptive_field_size\n\n    # Compute standard deviation\n    s = np.sqrt(2 / (fan_in + fan_out))\n\n    # Generate and return array\n    return np.random.normal(0, s, size=shape)\n```\n\nThis script first checks that the shape has at least two dimensions. It then computes the fan_in and fan_out values, which are the number of input and output connections to a neuron, respectively. If the shape has more than two dimensions, it also computes the receptive field size, which is the number of input connections to a neuron.\n\nThe standard deviation is then computed as sqrt(2 / (fan_in + fan_out)). Finally, the function generates a NumPy array of the requested shape, with elements drawn from a normal distribution with mean 0 and standard deviation s.\n"}
{"task_id": 266, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nfrom typing import Any, List, Tuple\n\ndef build_adj_list(V: List[Any], E: List[Tuple[Any, Any]]) -> List[List[Any]]:\n    \"\"\"Convert an undirected graph given by (V, E) to an adjacency list.\n\n    Parameters\n    ----------\n    V : List[Any]\n        A list of *unique* vertex identifiers. The order in this list must be\n        preserved in the returned adjacency list.\n    E : List[Tuple[Any, Any]]\n        A list of 2-tuples `(u, v)` describing undirected edges that connect\n        vertices `u` and `v`.\n\n    Returns\n    -------\n    List[List[Any]]\n        A list `G` where `G[i]` contains all vertices adjacent to `V[i]`.\n        \u2022 The outer list has the same length and order as `V`.\n        \u2022 Inner lists contain no duplicates and are ordered by their\n          appearance order in `V`.\n    \"\"\"\n    # Initialize adjacency list with empty lists\n    adj_list = [[] for _ in V]\n\n    # Iterate over edges\n    for u, v in E:\n        # Find indices of vertices in V\n        i = V.index(u)\n        j = V.index(v)\n\n        # Add vertices to adjacency list\n        if v not in adj_list[i]:\n            adj_list[i].append(v)\n        if u not in adj_list[j]:\n            adj_list[j].append(u)\n\n    # Sort inner lists by order of appearance in V\n    for i in range(len(adj_list)):\n        adj_list[i] = sorted(adj_list[i], key=V.index)\n\n    return adj_list\n```\n\nThis script first initializes the adjacency list with empty lists for each vertex. It then iterates over the edges, finding the indices of the vertices in `V` and adding the vertices to the adjacency list. It ensures that each neighbour appears exactly once by checking if the neighbour is already in the adjacency list before adding it. Finally, it sorts the inner lists by the order of appearance in `V`.\n"}
{"task_id": 267, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef train_decision_stump(X: np.ndarray, y: np.ndarray, sample_weights: np.ndarray) -> dict:\n    \"\"\"Find the optimal weighted decision stump.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        Feature matrix of shape (n_samples, n_features).\n    y : np.ndarray\n        Binary label vector with values -1 or 1.\n    sample_weights : np.ndarray\n        Non-negative weight for every sample.\n\n    Returns\n    -------\n    dict\n        Dictionary describing the best stump (see task description).\n    \"\"\"\n    n_samples, n_features = X.shape\n    best_stump = {\"feature_index\": None, \"threshold\": None, \"polarity\": None, \"weighted_error\": np.inf}\n\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n\n        for threshold in unique_values:\n            for polarity in [-1, 1]:\n                predictions = polarity * ((X[:, feature_index] < threshold) * 2 - 1)\n                misclassified = predictions != y\n                weighted_error = np.sum(sample_weights[misclassified])\n\n                if weighted_error < best_stump[\"weighted_error\"]:\n                    best_stump = {\n                        \"feature_index\": feature_index,\n                        \"threshold\": threshold,\n                        \"polarity\": polarity,\n                        \"weighted_error\": weighted_error,\n                    }\n\n    best_stump[\"threshold\"] = round(best_stump[\"threshold\"], 4)\n    best_stump[\"weighted_error\"] = round(best_stump[\"weighted_error\"], 4)\n\n    return best_stump\n```\n\nThis script first initializes the best stump with an error of infinity. It then iterates over all features, all unique feature values as thresholds, and both polarities. For each combination, it calculates the weighted error of the stump and updates the best stump if the error is smaller. Finally, it rounds the threshold and error to the nearest 4th decimal place and returns the best stump.\n"}
{"task_id": 273, "completion_id": 0, "completion": "Here is a Python script that implements the `best_split` function as described:\n\n```python\nimport math\nimport numpy as np\nfrom collections import Counter\n\ndef entropy(labels):\n    \"\"\"Calculate the entropy of a list of labels.\"\"\"\n    n = len(labels)\n    counts = Counter(labels)\n    return -sum(count / n * math.log2(count / n) for count in counts.values())\n\ndef best_split(feature, target):\n    \"\"\"Determine the numerical threshold that produces the highest information gain.\"\"\"\n    # Convert to numpy arrays for easier manipulation\n    feature = np.array(feature)\n    target = np.array(target)\n\n    # Sort the feature and target arrays together\n    sorted_indices = np.argsort(feature)\n    feature = feature[sorted_indices]\n    target = target[sorted_indices]\n\n    # Calculate the parent entropy\n    parent_entropy = entropy(target)\n\n    # Initialize variables to keep track of the best split\n    best_threshold = None\n    best_information_gain = 0.0\n\n    # Iterate over all possible thresholds\n    for i in range(1, len(feature)):\n        if feature[i] != feature[i - 1]:  # Only consider distinct values\n            # Split the data at the current threshold\n            left_labels = target[:i]\n            right_labels = target[i:]\n\n            # Calculate the information gain for the current split\n            left_entropy = entropy(left_labels)\n            right_entropy = entropy(right_labels)\n            information_gain = parent_entropy - (len(left_labels) / len(feature)) * left_entropy - (len(right_labels) / len(feature)) * right_entropy\n\n            # Update the best split if the current split is better\n            if information_gain > best_information_gain:\n                best_threshold = feature[i]\n                best_information_gain = information_gain\n\n    # If no useful split was found, return (None, 0.0)\n    if best_threshold is None:\n        return None, 0.0\n\n    # Round the threshold and information gain to 4 decimal places\n    best_threshold = round(best_threshold, 4)\n    best_information_gain = round(best_information_gain, 4)\n\n    return best_threshold, best_information_gain\n```\n\nThis script first sorts the feature and target arrays together. It then calculates the parent entropy. It then iterates over all possible thresholds, splitting the data at each threshold and calculating the information gain for the current split. If the current split is better than the best split so far, it updates the best split. If no useful split was found, it returns (None, 0.0). Finally, it rounds the threshold and information gain to 4 decimal places and returns them.\n"}
{"task_id": 286, "completion_id": 0, "completion": "Here is a Python script that implements the `get_initializer` function as described in the task:\n\n```python\nimport random\nfrom typing import Callable, Tuple, List\n\ndef zeros_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with zeros of the requested shape.\"\"\"\n    return [[0.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef ones_init(shape: Tuple[int, int]) -> List[List[float]]:\n    \"\"\"Returns a matrix filled with ones of the requested shape.\"\"\"\n    return [[1.0 for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef random_uniform_init(\n        shape: Tuple[int, int],\n        low: float = 0.0,\n        high: float = 1.0,\n        seed: int = 42) -> List[List[float]]:\n    \"\"\"Returns a matrix with uniformly distributed random numbers.\"\"\"\n    random.seed(seed)\n    return [[random.uniform(low, high) for _ in range(shape[1])] for _ in range(shape[0])]\n\ndef get_initializer(name: str) -> Callable:\n    \"\"\"Returns the initializer function that matches *name*.\n\n    Args:\n        name: The name of the initializer (e.g. \"zeros_init\").\n    Returns:\n        A callable initializer.\n    Raises:\n        ValueError: If the name does not correspond to a valid initializer.\n    \"\"\"\n    if name in globals() and callable(globals()[name]):\n        return globals()[name]\n    else:\n        raise ValueError(\"Invalid initialization function.\")\n```\n\nThis script first defines three initializer functions: `zeros_init`, `ones_init`, and `random_uniform_init`. Then, it defines the `get_initializer` function, which checks if the provided name corresponds to a valid initializer function in the global namespace. If it does, the function returns the corresponding callable; otherwise, it raises a `ValueError`.\n"}
{"task_id": 287, "completion_id": 0, "completion": "Here is a Python script that implements the forward and backward pass of a 2-D average-pooling layer:\n\n```python\nimport numpy as np\n\ndef average_pool2d(X: np.ndarray, pool_shape: tuple[int, int], stride: tuple[int, int], accum_grad: np.ndarray) -> tuple[list, list]:\n    \"\"\"Performs forward and backward passes of a 2-D average-pooling layer.\n\n    The function must return a tuple (pooled_output, grad_input), both rounded\n    to the nearest 4-th decimal and converted to regular Python lists using\n    `tolist()`.\n    \"\"\"\n    N, C, H, W = X.shape\n    p_h, p_w = pool_shape\n    s_h, s_w = stride\n\n    # Compute the output shape\n    out_h = (H - p_h) // s_h + 1\n    out_w = (W - p_w) // s_w + 1\n\n    # Initialize the output and gradient arrays\n    pooled_output = np.zeros((N, C, out_h, out_w))\n    grad_input = np.zeros_like(X)\n\n    # Perform the forward pass\n    for n in range(N):\n        for c in range(C):\n            for h in range(out_h):\n                for w in range(out_w):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n\n                    pooled_output[n, c, h, w] = np.mean(X[n, c, h_start:h_end, w_start:w_end])\n\n    # Perform the backward pass\n    for n in range(N):\n        for c in range(C):\n            for h in range(out_h):\n                for w in range(out_w):\n                    h_start = h * s_h\n                    h_end = h_start + p_h\n                    w_start = w * s_w\n                    w_end = w_start + p_w\n\n                    grad_input[n, c, h_start:h_end, w_start:w_end] += accum_grad[n, c, h, w] / (p_h * p_w)\n\n    # Round and convert to Python lists\n    pooled_output = np.round(pooled_output, 4).tolist()\n    grad_input = np.round(grad_input, 4).tolist()\n\n    return pooled_output, grad_input\n```\n\nThis script first computes the output shape of the pooling layer, then initializes the output and gradient arrays. It then performs the forward pass by iterating over the input array and computing the average of each pooling window. The backward pass is performed by distributing the gradient of the loss with respect to each pooled value equally to all elements that took part in each average. Finally, the output and gradient arrays are rounded to the nearest 4-th decimal and converted to Python lists using `tolist()`.\n"}
{"task_id": 290, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\nfrom dataclasses import dataclass\n\n@dataclass\nclass Leaf:\n    \"\"\"A terminal node that stores a prediction value.\"\"\"\n    value: object  # int, float, list or np.ndarray\n\n@dataclass\nclass Node:\n    \"\"\"An internal decision-tree node.\n\n    Attributes:\n        feature (int):   Index of the feature to test.\n        threshold (float): Threshold that splits the data.\n        left (Node | Leaf):  Sub-tree for samples with feature value < threshold.\n        right (Node | Leaf): Sub-tree for samples with feature value \u2265 threshold.\n    \"\"\"\n    feature: int\n    threshold: float\n    left: object   # Node | Leaf\n    right: object  # Node | Leaf\n\ndef compare_trees(tree_a, tree_b):\n    \"\"\"Recursively checks whether *tree_a* and *tree_b* are equivalent.\n\n    Args:\n        tree_a: Root node of the first decision tree (Node or Leaf).\n        tree_b: Root node of the second decision tree (Node or Leaf).\n\n    Returns:\n        True if the two trees are equivalent, False otherwise.\n    \"\"\"\n    # If both are Leaf nodes, compare their values\n    if isinstance(tree_a, Leaf) and isinstance(tree_b, Leaf):\n        return np.allclose(tree_a.value, tree_b.value, atol=1e-8)\n\n    # If both are Node, compare their attributes\n    elif isinstance(tree_a, Node) and isinstance(tree_b, Node):\n        if tree_a.feature != tree_b.feature:\n            return False\n        if not np.isclose(tree_a.threshold, tree_b.threshold, atol=1e-8):\n            return False\n        return compare_trees(tree_a.left, tree_b.left) and compare_trees(tree_a.right, tree_b.right)\n\n    # If one is Leaf and the other is Node, they are not equivalent\n    else:\n        return False\n```\n\nThis script first checks if both trees are Leaf nodes. If they are, it compares their values using numpy's allclose function with a tolerance of 1e-8. If both trees are Node nodes, it compares their attributes (feature and threshold) and recursively checks their left and right children. If one tree is a Leaf and the other is a Node, they are not equivalent.\n"}
{"task_id": 292, "completion_id": 0, "completion": "Here is a Python function that performs the single-point column crossover for a single layer\u2019s weight matrix:\n\n```python\nimport numpy as np\n\ndef single_point_crossover(parent1: list[list[int | float]],\n                            parent2: list[list[int | float]],\n                            cutoff: int) -> tuple[list[list[float]], list[list[float]]]:\n    \"\"\"Single-point column crossover of two weight matrices.\n\n    Args:\n        parent1: First parent weight matrix as a list of lists.\n        parent2: Second parent weight matrix with the same shape as *parent1*.\n        cutoff:  Column index at which crossover starts (inclusive).\n\n    Returns:\n        A tuple containing the two children matrices as lists. If the parent\n        matrices do not have the same shape, the function must return ``-1``.\n    \"\"\"\n    # Convert the input lists to numpy arrays\n    parent1 = np.array(parent1)\n    parent2 = np.array(parent2)\n\n    # Check if the two parent matrices have the same shape\n    if parent1.shape != parent2.shape:\n        return -1\n\n    # Create two new children matrices\n    child1 = parent1.copy()\n    child2 = parent2.copy()\n\n    # Swap the columns after the cutoff\n    child1[:, cutoff:] = parent2[:, cutoff:]\n    child2[:, cutoff:] = parent1[:, cutoff:]\n\n    # Convert the children matrices back to ordinary Python lists\n    child1 = child1.tolist()\n    child2 = child2.tolist()\n\n    return (child1, child2)\n```\n\nThis function first checks if the two parent matrices have the same shape. If not, it returns -1. Then it creates two new children matrices by copying the parent matrices. It then swaps the columns after the cutoff in both children matrices. Finally, it converts the children matrices back to ordinary Python lists and returns them as a tuple.\n"}
{"task_id": 294, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nfrom typing import Any, Dict, List, Tuple\n\ndef to_networkx(G: Dict[str, Any]) -> Dict[Any, List[Tuple[Any, float]]]:\n    \"\"\"Convert a custom graph dictionary into a plain adjacency dictionary.\n\n    Parameters\n    ----------\n    G : dict\n        A graph represented as a dictionary with the keys:\n          * 'is_directed' (bool)\n          * '_V2I'        (dict mapping vertex label -> index)\n          * '_G'          (list of adjacency lists, each edge is a\n                           tuple (source_label, target_label, weight))\n\n    Returns\n    -------\n    dict\n        A dictionary where each key is a vertex label and the value is a list\n        of `(neighbour, weight)` tuples.  For undirected graphs every edge\n        appears once in each direction and the neighbour lists are sorted\n        alphabetically.\n    \"\"\"\n    adj = {}\n    for i, edges in enumerate(G['_G']):\n        label = list(G['_V2I'].keys())[list(G['_V2I'].values()).index(i)]\n        adj[label] = []\n        for edge in edges:\n            adj[label].append((edge[1], edge[2]))\n            if not G['is_directed']:\n                adj[edge[1]].append((label, edge[2]))\n        adj[label] = sorted(adj[label], key=lambda x: x[0])\n    return adj\n```\n\nThis script first initializes an empty dictionary `adj`. Then it iterates over the adjacency lists in `G['_G']`. For each adjacency list, it finds the corresponding vertex label using the `_V2I` dictionary. It then adds an empty list to `adj` for this label.\n\nNext, it iterates over the edges in the adjacency list. For each edge, it adds a tuple `(target_label, weight)` to the list of `adj[label]`. If the graph is undirected, it also adds a tuple `(label, weight)` to the list of `adj[target_label]`.\n\nFinally, it sorts the list of `adj[label]` by the neighbour label and returns `adj`.\n"}
{"task_id": 296, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef is_binary(x):\n    \"\"\"Check if a NumPy array contains only binary values (0 or 1).\n\n    Parameters\n    ----------\n    x : np.ndarray or array-like\n        Input array to validate.\n\n    Returns\n    -------\n    bool\n        ``True`` if all elements are 0 or 1, otherwise ``False``.\n    \"\"\"\n    # Convert the input to a NumPy array\n    x = np.array(x)\n\n    # Check if all elements are 0 or 1\n    return np.array_equal(x, x.astype(bool))\n```\n\nThis function works by converting the input to a NumPy array and then comparing it to a boolean version of the array. The `astype(bool)` function converts the array to boolean, where `True` corresponds to `1` and `False` corresponds to `0`. If the original array and the boolean version are equal, then all elements of the original array are either `0` or `1`, and the function returns `True`. Otherwise, it returns `False`.\n"}
{"task_id": 298, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport math\nfrom collections import Counter, defaultdict\nfrom typing import List\n\ndef ngram_log_prob(corpus: List[str], query: str, N: int) -> float:\n    \"\"\"Return the total log-probability of *query* under an N-gram MLE model.\n\n    Parameters\n    ----------\n    corpus : list[str]\n        A list of training sentences. Each sentence is a plain string; tokens\n        are assumed to be separated by white-spaces.\n    query : str\n        The sentence whose probability should be calculated.\n    N : int\n        The order of the N-gram model (N \u2265 1).\n\n    Returns\n    -------\n    float\n        The sum of natural logarithms of the probabilities of every\n        consecutive N-gram occurring in *query*, rounded to 4 decimal places.\n        If any necessary N-gram is unseen in the corpus the function returns\n        float('-inf').\n    \"\"\"\n    # Preprocess the corpus\n    corpus = [[\"<bol>\"]*(N-1) + sentence.split() + [\"<eol>\"]*(N-1) for sentence in corpus]\n    query = [\"<bol>\"]*(N-1) + query.split() + [\"<eol>\"]*(N-1)\n\n    # Count N-grams and (N-1)-gram prefixes\n    ngram_counts = defaultdict(int)\n    prefix_counts = defaultdict(int)\n    for sentence in corpus:\n        for i in range(len(sentence) - N + 1):\n            ngram = tuple(sentence[i:i+N])\n            prefix = tuple(sentence[i:i+N-1])\n            ngram_counts[ngram] += 1\n            prefix_counts[prefix] += 1\n\n    # Compute the MLE conditional probability\n    log_prob = 0.0\n    for i in range(len(query) - N + 1):\n        ngram = tuple(query[i:i+N])\n        prefix = tuple(query[i:i+N-1])\n        if prefix_counts[prefix] == 0 or ngram_counts[ngram] == 0:\n            return float('-inf')\n        prob = ngram_counts[ngram] / prefix_counts[prefix]\n        log_prob += math.log(prob)\n\n    return round(log_prob, 4)\n```\n\nThis script first preprocesses the corpus and query by splitting them into tokens and padding them with special tokens. It then counts the N-grams and (N-1)-gram prefixes in the corpus. For each N-gram in the query, it computes the MLE conditional probability and adds the natural logarithm of this probability to the total log-probability. If any necessary N-gram is unseen in the corpus, the function returns float('-inf'). Finally, the function returns the total log-probability, rounded to 4 decimal places.\n"}
{"task_id": 302, "completion_id": 0, "completion": "Here is a Python script that implements the Spectral Clustering algorithm from scratch:\n\n```python\nimport numpy as np\n\ndef spectral_clustering(X: np.ndarray, k: int) -> list[int]:\n    \"\"\"Cluster data using Spectral Clustering.\n\n    Args:\n        X: 2-D NumPy array where each row is a data sample.\n        k: Desired number of clusters.\n\n    Returns:\n        List of length n_samples containing an integer cluster label for each sample.\n    \"\"\"\n    # Step 1: Build a weighted adjacency matrix W\n    n = X.shape[0]\n    W = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i+1, n):\n            dist = np.linalg.norm(X[i] - X[j])\n            weight = 1 / (1 + dist)\n            W[i, j] = weight\n            W[j, i] = weight\n\n    # Step 2: Compute the (unnormalised) graph Laplacian L\n    D = np.diag(np.sum(W, axis=1))\n    L = D - W\n\n    # Step 3: Obtain the first k eigenvectors of L\n    _, eigenvectors = np.linalg.eigh(L)\n    E = eigenvectors[:, :k]\n\n    # Step 4: Run k-means on the rows of E\n    centroids = E[:k]\n    labels = np.zeros(n, dtype=int)\n    for _ in range(100):\n        # Assign each sample to the closest centroid\n        for i in range(n):\n            labels[i] = np.argmin(np.linalg.norm(E[i] - centroids, axis=1))\n\n        # Update the centroids\n        for j in range(k):\n            centroids[j] = np.mean(E[labels == j], axis=0)\n\n        # If a cluster becomes empty, re-initialise its centroid with a random row of E\n        for j in range(k):\n            if np.sum(labels == j) == 0:\n                centroids[j] = E[np.random.randint(n)]\n\n    return labels.tolist()\n```\n\nThis script first builds the weighted adjacency matrix W, then computes the graph Laplacian L. It then obtains the first k eigenvectors of L and uses them as the projection matrix E. Finally, it runs k-means on the rows of E, returning the resulting cluster labels as a Python list.\n\nPlease note that this script assumes that the input data X is a 2-D NumPy array where each row is a data sample. The desired number of clusters k is an integer. The output is a Python list of length n_samples containing an integer cluster label for each sample.\n"}
{"task_id": 303, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\ndef err_fmt(params: list[tuple[str, str]], golds: dict[str, str], ix: int, warn_str: str = \"\") -> str:\n    \"\"\"Format a detailed debugging string comparing your output to gold output.\n\n    The function must follow the exact layout described in the task statement.\n\n    Args:\n        params: List of tuples `(mine, label)`.\n        golds:  Dictionary mapping `label` to expected output.\n        ix:     Current index in `params`.\n        warn_str: Optional extra warning string.\n\n    Returns:\n        A single, multi-line string following the required format.\n    \"\"\"\n    prev_ix = max(ix-1, 0)\n    prev_mine, prev_label = params[prev_ix]\n    curr_mine, curr_label = params[ix]\n\n    return f\"\"\"------------------------- DEBUG -------------------------\nMine (prev) [{prev_label}]:\n{prev_mine}\n\nTheirs (prev) [{prev_label}]:\n{golds[prev_label]}\n\nMine [{curr_label}]:\n{curr_mine}\n\nTheirs [{curr_label}]:\n{golds[curr_label]}{warn_str}\n----------------------- END DEBUG -----------------------\"\"\"\n```\n\nThis function first calculates the index of the previous element in `params`. It then unpacks the `mine` and `label` values from the previous and current elements in `params`. It uses these values to format the output string as described in the task statement. The `warn_str` is appended to the end of the string as it is.\n"}
{"task_id": 304, "completion_id": 0, "completion": "Here is a Python script that implements the function `bayesian_posterior_mean` as described in the task.\n\n```python\nimport numpy as np\n\ndef bayesian_posterior_mean(\n    X: np.ndarray,\n    y: np.ndarray,\n    alpha: float = 1.0,\n    beta: float = 1.0,\n    mu = 0.0,\n    V = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Compute the posterior mean (MAP estimate) of the coefficients in\n    Bayesian linear regression with an unknown variance.\n\n    The model places a normal\u2013inverse-gamma prior on (*b*, \u03c3\u00b2), but the MAP\n    estimate of *b* does not depend on \u03c3\u00b2.  See the task description for the\n    closed-form formula used here.\n\n    Args:\n        X: Training design matrix of shape (N, M).\n        y: Target vector of shape (N,).\n        alpha: Shape parameter of the inverse-gamma prior on \u03c3\u00b2 (kept only for\n            API compatibility).\n        beta: Scale parameter of the inverse-gamma prior on \u03c3\u00b2 (unused).\n        mu: Prior mean for *b*. Scalar values are broadcast to the correct\n            length.\n        V: Prior scale for *b*. Accepts None (identity), a scalar (scalar\u00d7I), a\n            1-D sequence (treated as a diagonal), or a full 2-D array.\n        fit_intercept: If True, prepend a bias column of ones to X.\n\n    Returns:\n        A list of floats \u2013 the posterior mean of the coefficients, rounded to\n        4 decimal places.\n    \"\"\"\n    if fit_intercept:\n        X = np.c_[np.ones(X.shape[0]), X]\n\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif np.isscalar(V):\n        V *= np.eye(X.shape[1])\n    elif len(V) == X.shape[1]:\n        V = np.diag(V)\n    else:\n        V = np.asarray(V)\n\n    if np.isscalar(mu):\n        mu = np.full(X.shape[1], mu)\n    else:\n        mu = np.asarray(mu)\n\n    V_inv = np.linalg.inv(V)\n    Sigma_b = np.linalg.inv(V_inv + X.T @ X)\n    mu_b = Sigma_b @ (V_inv @ mu + X.T @ y)\n\n    return np.round(mu_b, 4).tolist()\n```\n\nThis function first checks if an intercept column should be added to the design matrix `X`. It then checks the type of the prior scale `V` and converts it to the appropriate form if necessary. The prior mean `mu` is also broadcast to the correct length if it is a scalar. The function then computes the posterior mean of the coefficients using the closed-form formula provided in the task description. The result is rounded to 4 decimal places and returned as a list of floats.\n"}
{"task_id": 308, "completion_id": 0, "completion": "Here is a Python script that implements the Mel filterbank matrix construction as per the given task description:\n\n```python\nimport numpy as np\n\ndef mel_filterbank(N: int,\n                   n_filters: int = 20,\n                   fs: int = 44_000,\n                   min_freq: int = 0,\n                   max_freq: int | None = None,\n                   normalize: bool = True) -> list[list[float]]:\n    \"\"\"Build a Mel filterbank transformation matrix.\n\n    The returned matrix has *n_filters* rows and *N//2 + 1* columns.  Each row\n    is a triangular filter defined on the Mel scale.  See the detailed task\n    description for the exact algorithm that has to be implemented.\n    \"\"\"\n    if max_freq is None:\n        max_freq = fs // 2\n\n    # Convert limits expressed in Hertz to the Mel scale and generate n_filters+2 equally\u2013spaced values on the Mel axis.\n    mel_min = 2595 * np.log10(1 + min_freq/700)\n    mel_max = 2595 * np.log10(1 + max_freq/700)\n    mel_values = np.linspace(mel_min, mel_max, n_filters + 2)\n\n    # Convert those Mel values back to Hertz - these are the (n_filters+2) corner frequencies of the triangular filters.\n    freq_values = 700 * (10**(mel_values/2595) - 1)\n\n    # For every DFT bin k (whose centre frequency is k*fs/N) and every Mel filter i compute the left\u2010hand and right\u2010hand slopes of the triangle and keep the *positive* minimum of both - this is the weight for filter i and bin k.\n    filterbank = np.zeros((n_filters, N//2 + 1))\n    for i in range(n_filters):\n        for k in range(N//2 + 1):\n            f_k = k * fs / N\n            left_slope = (freq_values[i+1] - f_k) / (freq_values[i+1] - freq_values[i])\n            right_slope = (f_k - freq_values[i]) / (freq_values[i+2] - freq_values[i])\n            filterbank[i, k] = max(0, min(left_slope, right_slope))\n\n    # If normalize is true scale every filter by w_i \u2190 2/(f_(i+2) - f_i) * w_i so that its area in Mel space equals 1.\n    if normalize:\n        filterbank = (2 / (freq_values[2:] - freq_values[:-2])[:, np.newaxis]) * filterbank\n\n    return filterbank.tolist()\n```\n\nThis script first converts the frequency limits from Hertz to Mel scale and generates `n_filters+2` equally spaced values on the Mel axis. It then converts these Mel values back to Hertz to get the corner frequencies of the triangular filters. For every DFT bin and every Mel filter, it computes the left-hand and right-hand slopes of the triangle and keeps the positive minimum of both. If `normalize` is True, it scales every filter by its area in Mel space equals 1. Finally, it returns the complete filterbank as a plain Python list.\n"}
{"task_id": 312, "completion_id": 0, "completion": "Here is a Python script that implements the `blackman_harris` function as described:\n\n```python\nimport numpy as np\n\ndef blackman_harris(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Blackman\u2013Harris window.\n\n    Parameters\n    ----------\n    window_len : int\n        Desired number of samples in the returned window.\n    symmetric : bool, optional (default=False)\n        If False, return the *periodic* form suitable for an FFT of length\n        `window_len`.  If True, return the *symmetric* form typically used in\n        filter design.\n\n    Returns\n    -------\n    list[float]\n        Window coefficients rounded to four decimal places.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    if window_len == 1:\n        return [1.0]\n\n    a0, a1, a2, a3 = 0.35875, 0.48829, 0.14128, 0.01168\n    N = window_len - 1 if symmetric else window_len\n\n    n = np.arange(window_len)\n    window = a0 - a1 * np.cos(2 * np.pi * n / N) + a2 * np.cos(4 * np.pi * n / N) - a3 * np.cos(6 * np.pi * n / N)\n\n    return np.round(window, 4).tolist()\n```\n\nThis function first checks if the window length is less than or equal to 0, in which case it returns an empty list. If the window length is 1, it returns a list with a single element, 1.0.\n\nThen it calculates the window coefficients for each sample in the window. The coefficients are calculated using the Blackman-Harris formula, and the `numpy` library is used to perform the cosine calculations.\n\nFinally, the window coefficients are rounded to four decimal places and returned as a list.\n"}
{"task_id": 313, "completion_id": 0, "completion": "Here is a Python script that implements the digamma function and computes the expected log of a Dirichlet component:\n\n```python\nimport math\nimport numpy as np\n\ndef digamma(x):\n    \"\"\"Compute the digamma function using a recursion and an asymptotic expansion.\n\n    Parameters\n    ----------\n    x : float\n        The argument of the digamma function.\n\n    Returns\n    -------\n    float\n        The value of the digamma function at x.\n    \"\"\"\n    # Use the recursion \u03c8(x) = \u03c8(x+1) \u2212 1/x to shift small x up to a moderate value.\n    result = 0\n    while x <= 5:\n        result -= 1 / x\n        x += 1\n\n    # Apply the asymptotic expansion to obtain a good approximation for the remaining (now large) x.\n    result += math.log(x) - 1 / (2 * x) - 1 / (12 * x**2) + 1 / (120 * x**4) - 1 / (252 * x**6)\n\n    return result\n\ndef expected_log_dirichlet(gamma, d, t):\n    \"\"\"Compute the expectation of log X_t for a Dirichlet-distributed vector.\n\n    A Dirichlet random vector X with parameters gamma[d,:] satisfies\n        E[log X_t] = \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])),\n    where \u03c8 is the digamma function.  External scientific libraries are not\n    permitted, therefore you must implement digamma yourself (see task\n    description for hints).\n\n    Parameters\n    ----------\n    gamma : list[list[float]] | np.ndarray\n        2-D structure holding the Dirichlet concentration parameters.  All\n        elements are positive.\n    d : int\n        Row index (0-based) identifying which Dirichlet parameter set to use.\n    t : int\n        Column index (0-based) identifying the component whose expected log is\n        requested.\n\n    Returns\n    -------\n    float\n        The value of \u03c8(gamma[d,t]) \u2212 \u03c8(sum(gamma[d,:])) rounded to 4 decimals.\n    \"\"\"\n    # Compute the expectation using the formula.\n    expectation = digamma(gamma[d][t]) - digamma(sum(gamma[d]))\n\n    # Round the result to four (4) decimal places and return it as a Python float.\n    return round(expectation, 4)\n```\n\nThis script first defines a function `digamma` that computes the digamma function using a recursion and an asymptotic expansion. Then it defines a function `expected_log_dirichlet` that computes the expectation of the logarithm of a Dirichlet component using the formula given in the task description and the `digamma` function. The result is rounded to four decimal places and returned as a Python float.\n"}
{"task_id": 317, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nfrom typing import List, Tuple, Dict\n\ndef err_fmt(params: List[Tuple[str, str]],\n            golds: Dict[str, str],\n            ix: int,\n            warn_str: str = \"\") -> str:\n    \"\"\"Return a formatted multi-line debug string comparing predictions to golds.\n\n    See the task description for the exact required format.\n\n    Args:\n        params: A list where every element is a tuple (prediction, label).\n        golds:  A dictionary mapping each label to its gold/expected string.\n        ix:     The index inside `params` for which the detailed comparison\n                 is built.\n        warn_str: Optional extra text appended before the footer.\n\n    Returns:\n        A string that follows the specified layout exactly.\n    \"\"\"\n    prev_ix = max(ix - 1, 0)\n    prev_prediction, prev_label = params[prev_ix]\n    prev_gold = golds[prev_label]\n    curr_prediction, curr_label = params[ix]\n    curr_gold = golds[curr_label]\n\n    return f\"\"\"------------------------- DEBUG -------------------------\nMine (prev) [{prev_label}]:\n{prev_prediction}\n\nTheirs (prev) [{prev_label}]:\n{prev_gold}\n\nMine [{curr_label}]:\n{curr_prediction}\n\nTheirs [{curr_label}]:\n{curr_gold}{warn_str}\n----------------------- END DEBUG -----------------------\n\"\"\"\n```\n\nThis script first calculates the previous index and retrieves the corresponding prediction, label, and gold from the `params` and `golds` lists and dictionaries. It then formats the output string using f-string formatting, which is a feature of Python 3.6 and later. The formatted string is then returned.\n"}
{"task_id": 318, "completion_id": 0, "completion": "Here is a Python script that implements the AdaBoost algorithm using decision stumps as weak learners.\n\n```python\nimport math\nimport numpy as np\n\ndef adaboost_predict(X_train, y_train, X_test, n_estimators=50):\n    n_samples, n_features = X_train.shape\n    w = np.full(n_samples, 1/n_samples)\n    alphas = []\n    hs = []\n\n    for _ in range(n_estimators):\n        best_feature, best_threshold, best_polarity, min_error = None, None, None, float('inf')\n        for feature in range(n_features):\n            thresholds = np.unique(X_train[:, feature])\n            for threshold in thresholds:\n                for polarity in [-1, 1]:\n                    predictions = polarity * np.sign(X_train[:, feature] - threshold)\n                    error = np.sum(w[predictions != y_train])\n                    if error < min_error:\n                        min_error = error\n                        best_feature, best_threshold, best_polarity = feature, threshold, polarity\n\n        alpha = 0.5 * math.log((1 - min_error) / (min_error + 1e-10))\n        alphas.append(alpha)\n        hs.append((best_feature, best_threshold, best_polarity))\n\n        predictions = alphas[-1] * hs[-1][2] * np.sign(X_train[:, hs[-1][0]] - hs[-1][1])\n        w = w * np.exp(-alpha * y_train * predictions)\n        w = w / np.sum(w)\n\n    final_predictions = np.zeros(X_test.shape[0])\n    for alpha, h in zip(alphas, hs):\n        final_predictions += alpha * h[2] * np.sign(X_test[:, h[0]] - h[1])\n    return [1 if p >= 0 else -1 for p in final_predictions]\n```\n\nThis script first initializes the weights of the samples to be equal. Then, for each boosting round, it finds the best decision stump (i.e., the one that minimizes the weighted classification error) and updates the weights of the samples. Finally, it makes the final predictions by summing the predictions of all the decision stumps, scaled by their weights.\n\nPlease note that this script assumes that the input data is numerical and that the labels are either -1 or 1. If the labels are not in this format, you may need to preprocess them accordingly.\n"}
{"task_id": 329, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef dft_bins(N: int, fs: int = 44000, positive_only: bool = True) -> list[float]:\n    \"\"\"Compute the centre frequency of each DFT bin.\n\n    Parameters\n    ----------\n    N : int\n        Number of DFT coefficients.\n    fs : int, optional\n        Sampling frequency in Hertz.  Default is 44 kHz.\n    positive_only : bool, optional\n        When *True* return only the non-negative frequency bins; when\n        *False* return all *N* bins.  Default is *True*.\n\n    Returns\n    -------\n    list[float]\n        List of bin frequencies (Hz) rounded to 4 decimals.  An empty\n        list is returned when *N* or *fs* is non-positive.\n    \"\"\"\n    if N <= 0 or fs <= 0:\n        return []\n\n    if positive_only:\n        k = np.arange(N // 2 + 1)\n    else:\n        k = np.arange(-N // 2, N // 2 + 1)\n\n    f_k = k * (fs / N)\n    return np.round(f_k, 4).tolist()\n```\n\nThis function first checks if `N` or `fs` is non-positive. If so, it returns an empty list.\n\nThen it calculates the bin indices `k` based on the `positive_only` flag. If `positive_only` is `True`, it generates indices from 0 to `N // 2`. If `positive_only` is `False`, it generates indices from `-N // 2` to `N // 2`.\n\nFinally, it calculates the center frequencies `f_k` for each bin and rounds them to 4 decimal places. The result is returned as a list.\n"}
{"task_id": 331, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef oob_mse(y_true, predictions, oob_mask):\n    \"\"\"Compute the out-of-bag mean squared error for a Random Forest regressor.\n\n    Parameters\n    ----------\n    y_true : list[float] | np.ndarray\n        True target values, shape (n_samples,).\n    predictions : list[list[float]] | np.ndarray\n        Predictions from each tree, shape (n_samples, n_estimators).\n    oob_mask : list[list[bool | int]] | np.ndarray\n        Boolean / binary matrix indicating whether a prediction was obtained\n        from an out-of-bag tree (True/1) or not (False/0), same shape as\n        *predictions*.\n\n    Returns\n    -------\n    float\n        The OOB mean squared error rounded to 4 decimal places, or -1 if the\n        OOB estimate cannot be computed.\n    \"\"\"\n    # Convert inputs to numpy arrays\n    y_true = np.array(y_true)\n    predictions = np.array(predictions)\n    oob_mask = np.array(oob_mask)\n\n    # Get the indices of samples that have at least one OOB prediction\n    oob_indices = np.where(oob_mask.sum(axis=1) > 0)[0]\n\n    # If no sample has an OOB prediction, return -1\n    if len(oob_indices) == 0:\n        return -1\n\n    # Compute the average OOB prediction for each sample\n    oob_avg_predictions = np.mean(predictions[oob_indices, :][:, oob_mask[oob_indices, :]], axis=1)\n\n    # Compute the squared error between the average OOB prediction and the true value\n    squared_errors = (oob_avg_predictions - y_true[oob_indices]) ** 2\n\n    # Compute the OOB mean squared error\n    oob_mse = np.mean(squared_errors)\n\n    # Return the OOB mean squared error rounded to 4 decimal places\n    return round(oob_mse, 4)\n```\n\nThis script first converts the inputs to numpy arrays for easier manipulation. It then identifies the indices of the samples that have at least one OOB prediction. If no sample has an OOB prediction, it returns -1. Otherwise, it computes the average OOB prediction for each sample and the squared error between the average OOB prediction and the true value. Finally, it computes the OOB mean squared error and returns it rounded to 4 decimal places.\n"}
{"task_id": 332, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nfrom collections import Counter\n\ndef build_fp_tree(transactions: list[list[str]], min_support: int) -> dict:\n    \"\"\"Construct an FP-Tree using only nested dictionaries.\n\n    Parameters\n    ----------\n    transactions : list[list[str]]\n        A list where each element is a list of items representing one transaction.\n    min_support : int\n        Minimum number of transactions an item has to appear in to be kept.\n\n    Returns\n    -------\n    dict\n        The root node of the FP-Tree.  Each node contains two keys:\n        \"support\" and \"children\" (the latter mapping item \u2192 child-node).\n    \"\"\"\n    # Compute the support for every item\n    item_support = Counter()\n    for transaction in transactions:\n        item_support.update(set(transaction))\n\n    # Discard the items whose support is smaller than min_support\n    frequent_items = {item for item, support in item_support.items() if support >= min_support}\n\n    # Create a global ordering of the remaining items\n    frequent_items = sorted(frequent_items, key=lambda item: (-item_support[item], item))\n\n    # Create the root node\n    root = {\"support\": 0, \"children\": {}}\n\n    # For every transaction\n    for transaction in transactions:\n        # Remove duplicates, keep only frequent items, and reorder them according to the global ordering\n        transaction = [item for item in frequent_items if item in transaction]\n\n        # Walk from the root and update/extend the path, increasing the support of every visited node by 1\n        node = root\n        for item in transaction:\n            if item not in node[\"children\"]:\n                node[\"children\"][item] = {\"support\": 0, \"children\": {}}\n            node = node[\"children\"][item]\n            node[\"support\"] += 1\n\n    return root\n```\n\nThis script first computes the support for every item, then discards the items whose support is smaller than `min_support`. It creates a global ordering of the remaining items, and then constructs the FP-Tree by walking through each transaction and updating the path accordingly.\n"}
{"task_id": 336, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef linear_kernel(X: list[list[int | float]] | \"np.ndarray\", Y: list[list[int | float]] | \"np.ndarray\" | None = None, c0: int | float = 0) -> list[list[float]] | int:\n    \"\"\"Return the linear kernel matrix k(x, y) = x\u00b7y + c0.\n\n    Parameters\n    ----------\n    X : 2-D list or NumPy array with shape (N, C)\n        Collection of N input vectors.\n    Y : 2-D list or NumPy array with shape (M, C) or None, optional\n        Collection of M input vectors.  If None, the function must set\n        ``Y = X``.  Default is None.\n    c0 : int or float, optional\n        Additive constant of the kernel.  Default is 0.\n\n    Returns\n    -------\n    list[list[float]] | int\n        The (N, M) kernel matrix where entry (i, j) equals\n        X[i]\u00b7Y[j] + c0, rounded to 4 decimals.  Return -1 when X and Y have\n        incompatible shapes (different number of columns).\n    \"\"\"\n    # Convert lists to numpy arrays\n    X = np.array(X)\n    Y = np.array(X) if Y is None else np.array(Y)\n\n    # Check if the number of columns in X and Y are the same\n    if X.shape[1] != Y.shape[1]:\n        return -1\n\n    # Compute the dot product of X and Y\n    dot_product = np.dot(X, Y.T)\n\n    # Add the constant c0\n    kernel_matrix = dot_product + c0\n\n    # Round the kernel matrix to 4 decimal places\n    kernel_matrix = np.round(kernel_matrix, 4)\n\n    return kernel_matrix.tolist()\n```\n\nThis script first converts the input lists to NumPy arrays for easier manipulation. It then checks if the number of columns in X and Y are the same, as required by the task. If they are not, it returns -1. If they are, it computes the dot product of X and Y, adds the constant c0, and rounds the result to 4 decimal places. Finally, it converts the result back to a list of lists and returns it.\n"}
{"task_id": 340, "completion_id": 0, "completion": "Here is a Python script that implements the Adam optimizer step:\n\n```python\nimport numpy as np\n\ndef adam_update(\n    param: np.ndarray,\n    grad: np.ndarray,\n    t: int,\n    m: np.ndarray,\n    v: np.ndarray,\n    lr: float = 0.001,\n    beta1: float = 0.9,\n    beta2: float = 0.999,\n    eps: float = 1e-8,\n) -> tuple[list, list, list]:\n    \"\"\"Perform **one** Adam optimisation step.\n\n    Args:\n        param: Current value of the parameter \u03b8 (NumPy array).\n        grad:  Current gradient \u2207\u03b8 (same shape as *param*).\n        t:     Time-step counter **starting at 1**.\n        m:     First moment estimate from the previous step (same shape).\n        v:     Second moment estimate from the previous step (same shape).\n        lr:    Learning rate \u03b1 (default 0.001).\n        beta1: Exponential decay rate for the first moment (default 0.9).\n        beta2: Exponential decay rate for the second moment (default 0.999).\n        eps:   Small constant to avoid division by zero (default 1e-8).\n\n    Returns:\n        Tuple containing (updated_parameter, new_moment, new_variance) **as\n        python lists**, each rounded to 8 decimal places.\n    \"\"\"\n\n    # Update biased first moment estimate\n    m = beta1 * m + (1 - beta1) * grad\n\n    # Update biased second raw moment estimate\n    v = beta2 * v + (1 - beta2) * np.square(grad)\n\n    # Compute bias-corrected first moment estimate\n    m_hat = m / (1 - beta1**t)\n\n    # Compute bias-corrected second raw moment estimate\n    v_hat = v / (1 - beta2**t)\n\n    # Update parameters\n    param = param - lr * m_hat / (np.sqrt(v_hat) + eps)\n\n    return (param.tolist(), m.tolist(), v.tolist())\n```\n\nThis function first updates the biased first and second moment estimates, then computes the bias-corrected first and second moment estimates. Finally, it updates the parameters using the Adam update rule and returns the updated parameter, first moment, and second moment estimates.\n"}
{"task_id": 343, "completion_id": 0, "completion": "Here is a Python script that implements the function `cross_entropy_update` as described:\n\n```python\nimport numpy as np\n\ndef cross_entropy_update(theta_samples: np.ndarray,\n                          rewards: list[float] | np.ndarray,\n                          retain_prcnt: float) -> tuple[list[float], list[float]]:\n    \"\"\"Compute the updated mean and variance for CEM.\n\n    Parameters\n    ----------\n    theta_samples : np.ndarray\n        2-D array of shape (N, D) containing N sampled parameter vectors.\n    rewards : list | np.ndarray\n        Sequence of length N with the return obtained by each sample.\n    retain_prcnt : float\n        Fraction (0, 1] \u2013 what portion of the best samples to keep.\n\n    Returns\n    -------\n    tuple[list, list]\n        Two Python lists containing the per-dimension mean and variance of the\n        retained (elite) samples, rounded to four decimals.\n    \"\"\"\n    # Convert rewards to numpy array\n    rewards = np.array(rewards)\n\n    # Get the number of samples to retain\n    N = len(rewards)\n    n_retain = int(retain_prcnt * N)\n\n    # Get the indices of the top n_retain samples\n    top_indices = np.argsort(rewards)[-n_retain:]\n\n    # Get the top n_retain samples\n    top_samples = theta_samples[top_indices]\n\n    # Compute the mean and variance of the top samples\n    mean = np.mean(top_samples, axis=0)\n    variance = np.var(top_samples, axis=0)\n\n    # Round the results to 4 decimal places\n    mean = [round(m, 4) for m in mean]\n    variance = [round(v, 4) for v in variance]\n\n    return mean, variance\n```\n\nThis function first converts the `rewards` list to a numpy array for easier manipulation. It then computes the number of samples to retain based on the `retain_prcnt` parameter. It then sorts the indices of the `rewards` array in descending order and takes the top `n_retain` indices. These indices are used to select the corresponding samples from `theta_samples`. The mean and variance of these top samples are then computed using numpy's `mean` and `var` functions, respectively. Finally, the results are rounded to 4 decimal places and returned as lists.\n"}
{"task_id": 353, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport math\nfrom collections import Counter\nimport numpy as np\n\ndef entropy(labels) -> float:\n    \"\"\"Compute the base-2 Shannon entropy of a 1-D sequence of class labels.\n\n    Args:\n        labels: A one-dimensional iterable (list, NumPy array, etc.) of hashable\n            class labels.\n\n    Returns:\n        The entropy value rounded to five decimal places.\n    \"\"\"\n    # Count the occurrences of each label\n    label_counts = Counter(labels)\n\n    # Calculate the total number of labels\n    total_labels = len(labels)\n\n    # If the input is empty, return 0.0\n    if total_labels <= 0:\n        return 0.0\n\n    # Calculate the probability of each label\n    probabilities = [count / total_labels for count in label_counts.values()]\n\n    # Calculate the entropy\n    entropy = -sum(p * math.log2(p) for p in probabilities)\n\n    # Return the entropy rounded to five decimal places\n    return round(entropy, 5)\n```\n\nThis script first counts the occurrences of each label using the `Counter` class from the `collections` module. It then calculates the total number of labels and the probability of each label. The entropy is then calculated as the sum of the product of each probability and its logarithm (base 2) times -1. Finally, the entropy is rounded to five decimal places and returned.\n"}
{"task_id": 354, "completion_id": 0, "completion": "Here is a Python script that implements the 2-D convolution using the im2col strategy. This script also includes a function to handle padding.\n\n```python\nimport numpy as np\n\ndef conv2D(X: \"np.ndarray\", W: \"np.ndarray\", stride: int, pad, dilation: int = 0):\n    \"\"\"Performs a 2-D convolution (cross-correlation).\n\n    Args:\n        X: NumPy array of shape ``(n_ex, in_rows, in_cols, in_ch)`` representing the input batch.\n        W: NumPy array of shape ``(kernel_rows, kernel_cols, in_ch, out_ch)`` containing the kernels.\n        stride: Stride of the convolution.\n        pad: Padding specification \u2013 integer, tuple or the string ``'same'``.\n        dilation: Optional dilation factor. ``0`` corresponds to a normal convolution.\n\n    Returns:\n        The convolution result **as a Python list** obtained through ``numpy.ndarray.tolist()``.\n    \"\"\"\n    n_ex, in_rows, in_cols, in_ch = X.shape\n    kernel_rows, kernel_cols, _, out_ch = W.shape\n\n    if isinstance(pad, str):\n        if pad == 'same':\n            pad_rows = (((in_rows - 1) * stride + dilation * (kernel_rows - 1) + 1 - in_rows) // 2)\n            pad_cols = (((in_cols - 1) * stride + dilation * (kernel_cols - 1) + 1 - in_cols) // 2)\n        else:\n            raise ValueError(\"Invalid padding specification\")\n    elif isinstance(pad, int):\n        pad_rows, pad_cols = pad, pad\n    elif isinstance(pad, tuple):\n        if len(pad) == 2:\n            pad_rows, pad_cols = pad\n        elif len(pad) == 4:\n            pad_rows, pad_cols = pad[0], pad[2]\n        else:\n            raise ValueError(\"Invalid padding specification\")\n    else:\n        raise ValueError(\"Invalid padding specification\")\n\n    out_rows = (in_rows + pad_rows * 2 - dilation * (kernel_rows - 1) - 1) // stride + 1\n    out_cols = (in_cols + pad_cols * 2 - dilation * (kernel_cols - 1) - 1) // stride + 1\n\n    X_padded = np.pad(X, ((0, 0), (pad_rows, pad_rows), (pad_cols, pad_cols), (0, 0)))\n\n    X_col = np.zeros((kernel_rows * kernel_cols * in_ch, out_rows * out_cols))\n    for y in range(out_rows):\n        for x in range(out_cols):\n            y_pad = y * stride\n            x_pad = x * stride\n            X_col[:, y * out_cols + x] = X_padded[:, y_pad:y_pad + kernel_rows * dilation:dilation, x_pad:x_pad + kernel_cols * dilation:dilation, :].ravel()\n\n    W_col = W.transpose(3, 2, 0, 1).reshape(out_ch, -1)\n\n    out = (W_col @ X_col).reshape(out_ch, out_rows, out_cols, n_ex).transpose(3, 1, 2, 0)\n\n    return out.tolist()\n```\n\nThis script first computes the output size of the convolution, then pads the input batch. It then reshapes the input batch and the kernels into 2-D arrays, performs the convolution using matrix multiplication, and reshapes the result back into the original 4-D shape. The result is then converted to a Python list and returned.\n"}
{"task_id": 355, "completion_id": 0, "completion": "Here is a Python script that implements the PCA with deterministic sign fix as described:\n\n```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, n_components: int, solver: str = \"svd\") -> tuple[list[list[float]], list[float]]:\n    \"\"\"Perform Principal Component Analysis (PCA) on *data*.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array in which rows correspond to samples and columns to features.\n    n_components : int\n        Number of principal components to retain (must be \u22651).\n    solver : str, optional (default=\"svd\")\n        ``\"svd\"`` to use singular value decomposition or ``\"eigen\"`` to use\n        eigen-decomposition of the covariance matrix.\n\n    Returns\n    -------\n    tuple[list[list[float]], list[float]]\n        \u2022 The projected data (scores) as a list of lists \u2013 each inner list is a\n          sample represented in the new sub-space.\n        \u2022 The list of explained variance ratios corresponding to the kept\n          components.\n    \"\"\"\n    # Standardize the data\n    data_centered = data - np.mean(data, axis=0)\n\n    # Compute the principal directions\n    if solver == \"svd\":\n        _, _, vh = np.linalg.svd(data_centered)\n        directions = vh\n    elif solver == \"eigen\":\n        cov_matrix = np.cov(data_centered, rowvar=False, ddof=1)\n        _, v = np.linalg.eigh(cov_matrix)\n        directions = v\n    else:\n        raise ValueError(\"Invalid solver. Choose 'svd' or 'eigen'.\")\n\n    # Sort the directions in descending order of their importance\n    directions = directions[:, ::-1]\n\n    # Keep the first n_components of them\n    if n_components > directions.shape[1]:\n        n_components = directions.shape[1]\n    directions = directions[:, :n_components]\n\n    # Make the sign of every kept direction deterministic\n    for i in range(directions.shape[1]):\n        if directions[0, i] < 0:\n            directions[:, i] *= -1\n            data_centered[:, i] *= -1\n\n    # Project the centred data onto the retained directions\n    scores = np.dot(data_centered, directions)\n\n    # Compute the explained variance ratio\n    explained_variance_ratio = np.var(scores, axis=0) / np.sum(np.var(scores, axis=0))\n\n    # Return the projected data and the explained variance ratio\n    return (scores.round(4).tolist(), np.round(explained_variance_ratio, 4).tolist())\n```\n\nThis script first standardizes the data by subtracting the feature-wise mean. It then computes the principal directions using either the SVD or the eigen-decomposition of the covariance matrix, depending on the chosen solver. The directions are sorted in descending order of their importance and the first `n_components` are kept. The sign of every kept direction is made deterministic by ensuring that the first non-zero loading of a direction is positive. Finally, the centred data is projected onto the retained directions to obtain the scores, and the explained variance ratio is computed. The scores and the explained variance ratio are returned as a tuple of lists.\n"}
{"task_id": 356, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nclass Leaf:\n    \"\"\"Simple container class for a tree leaf.\n\n    Args:\n        value: Either a list/tuple of class probabilities (for classification)\n               or a scalar representing the regional mean (for regression).\n    \"\"\"\n\n    def __init__(self, value):\n        self.value = value\n\n\ndef leaf_predict(leaf: \"Leaf\", classifier: bool):\n    \"\"\"Return the prediction stored in a decision-tree leaf.\n\n    Args:\n        leaf: A `Leaf` object whose `value` attribute is either a sequence of\n              class probabilities (classification) or a single number\n              (regression).\n        classifier: When *True* treat the leaf as belonging to a\n                     classification tree; otherwise treat it as regression.\n\n    Returns:\n        int | float: Predicted class index for classification; otherwise the\n                     raw scalar stored in the leaf.\n    \"\"\"\n    if classifier:\n        # If the leaf is a classification leaf, return the index of the maximum probability\n        return leaf.value.index(max(leaf.value))\n    else:\n        # If the leaf is a regression leaf, return the raw scalar stored in the leaf\n        return leaf.value\n```\n\nThis script defines a `Leaf` class that stores a value, which can be a list of class probabilities for classification or a single number for regression. The `leaf_predict` function takes a `Leaf` instance and a boolean indicating whether the leaf is a classification leaf or a regression leaf. If the leaf is a classification leaf, it returns the index of the maximum probability. If the leaf is a regression leaf, it returns the raw scalar stored in the leaf.\n"}
{"task_id": 357, "completion_id": 0, "completion": "Here is a Python script that implements the K-Means clustering algorithm from scratch:\n\n```python\nimport numpy as np\n\ndef kmeans(data: np.ndarray, K: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Cluster *data* into *K* groups using the K\u2013Means algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features) representing the data to\n        be clustered.\n    K : int\n        The number of clusters (centroids) to find.\n    max_iters : int, optional (default=100)\n        Maximum number of iterations before stopping.\n\n    Returns\n    -------\n    list[list[float]]\n        The sorted list of centroids rounded to four decimals.\n    \"\"\"\n    # Initialize centroids\n    centroids = data[:K].copy()\n\n    for _ in range(max_iters):\n        # Assign each sample to the closest centroid\n        clusters = np.argmin(np.linalg.norm(data[:, None] - centroids, axis=-1), axis=-1)\n\n        # Compute new centroids\n        new_centroids = np.array([data[clusters==k].mean(axis=0) for k in range(K)])\n\n        # Stop if centroids don't change\n        if np.allclose(centroids, new_centroids):\n            break\n\n        centroids = new_centroids\n\n    # Sort and round centroids\n    centroids = sorted(centroids.tolist())\n    centroids = [[round(x, 4) for x in centroid] for centroid in centroids]\n\n    return centroids\n```\n\nThis script first initializes the centroids with the first K samples in the data matrix. It then enters a loop where it assigns each sample to the closest centroid, recomputes the centroids as the mean of the samples currently assigned to it, and stops if none of the centroids changes any more. Finally, it sorts the centroids lexicographically and rounds each coordinate to four decimals before returning them as a plain Python list of lists.\n"}
{"task_id": 362, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef row_stochastic_matrix(data: list[list[int | float]] | \"np.ndarray\") -> list[list[float]]:\n    \"\"\"Convert a numeric 2-D structure into a row-stochastic matrix.\n\n    Each row must sum to 1 after transformation.  If a row has a sum of\n    0 the function should return -1.\n\n    Parameters\n    ----------\n    data : list[list[int | float]] | np.ndarray\n        The 2-D input data.\n\n    Returns\n    -------\n    list[list[float]]\n        The row-normalised matrix rounded to 4 decimals or -1 when\n        normalisation is impossible.\n    \"\"\"\n    # Convert the data to a float NumPy array\n    data = np.array(data, dtype=float)\n\n    # Compute the sum of every row\n    row_sums = data.sum(axis=1)\n\n    # If any row sums to 0, return -1\n    if np.any(row_sums == 0):\n        return -1\n\n    # Divide every element in a row by that row's sum\n    data = data / row_sums[:, np.newaxis]\n\n    # Round every entry of the resulting matrix to 4 decimal places\n    data = np.round(data, 4)\n\n    # Return the matrix as a native Python list\n    return data.tolist()\n```\n\nThis function first converts the input data to a NumPy array of floats. It then computes the sum of each row. If any row sum is 0, it returns -1. Otherwise, it divides each element in a row by the row's sum, rounds the resulting matrix to 4 decimal places, and returns it as a native Python list.\n"}
{"task_id": 363, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nfrom typing import Any, Dict, Iterable, Tuple as PyTuple\n\n# ------------------  Minimal imitation of Gym spaces (do not remove)  ------------------\nclass Space:  # abstract base class\n    pass\n\nclass Box(Space):\n    def __init__(self, low: float, high: float, shape: PyTuple[int, ...]):\n        self.low = low\n        self.high = high\n        self.shape = shape\n\nclass Discrete(Space):\n    def __init__(self, n: int):\n        self.n = n\n\nclass Tuple(Space):\n    def __init__(self, spaces: Iterable[Space]):\n        self.spaces = tuple(spaces)\n\nclass Dict(Space):\n    def __init__(self, spaces: Dict[str, Space]):\n        self.spaces = dict(spaces)\n\nclass Env:\n    \"\"\"Tiny environment that only stores two spaces.\"\"\"\n    def __init__(self, action_space: Space, observation_space: Space):\n        self.action_space = action_space\n        self.observation_space = observation_space\n\n# ----------------------------  Complete this function  ----------------------------\ndef is_continuous(env: Env, tuple_action: bool, tuple_obs: bool):\n    \"\"\"Determine whether the given environment's spaces are continuous.\n\n    A space is *continuous* if it is an instance of `Box`. For composite spaces\n    (`Tuple` or `Dict`) the space is continuous only if **all** its sub-spaces\n    are `Box`.\n\n    Args:\n        env:          Environment exposing `action_space` and `observation_space`.\n        tuple_action: Whether the *action* space is composite.\n        tuple_obs:    Whether the *observation* space is composite.\n\n    Returns:\n        A tuple `(cont_action, cont_obs)` of booleans.\n    \"\"\"\n    def check_continuity(space):\n        if isinstance(space, Box):\n            return True\n        elif isinstance(space, Tuple) or isinstance(space, Dict):\n            return all(check_continuity(sub_space) for sub_space in space.spaces.values())\n        else:\n            return False\n\n    cont_action = check_continuity(env.action_space) if tuple_action else isinstance(env.action_space, Box)\n    cont_obs = check_continuity(env.observation_space) if tuple_obs else isinstance(env.observation_space, Box)\n\n    return (cont_action, cont_obs)\n```\n\nThis script defines the `Space` classes and the `Env` class. The `is_continuous` function checks the continuity of the action and observation spaces based on the provided flags. It uses a helper function `check_continuity` to recursively check the continuity of composite spaces.\n"}
{"task_id": 369, "completion_id": 0, "completion": "Here is a Python script that implements the `gradient_boosting_predict` function as described:\n\n```python\nimport numpy as np\n\ndef gradient_boosting_predict(updates: list[np.ndarray], learning_rate: float, regression: bool) -> np.ndarray:\n    \"\"\"Aggregate the outputs of Gradient Boosting trees.\n\n    Parameters\n    ----------\n    updates : list[np.ndarray]\n        Each element is a NumPy array containing the predictions of one tree\n        for **all** samples.  For regression the array shape is\n        ``(n_samples,)``; for classification it is ``(n_samples, n_classes)``.\n    learning_rate : float\n        The learning-rate hyper-parameter used during training.  Every tree\u2019s\n        output is multiplied by this value before aggregation.\n    regression : bool\n        Set ``True`` for regression problems and ``False`` for multi-class\n        classification problems.\n\n    Returns\n    -------\n    np.ndarray\n        \u2022 Regression \u2013 1-D array of floats, rounded to 4 decimals.  \n        \u2022 Classification \u2013 1-D array of integers representing the predicted\n          class labels.\n    \"\"\"\n    # Start with a running prediction filled with zeros having the same shape as a single update array.\n    running_pred = np.zeros_like(updates[0])\n\n    # For every tree update `u` do `running_pred -= learning_rate * u`.\n    for u in updates:\n        running_pred -= learning_rate * u\n\n    # After all updates\n    if regression:\n        # Regression \u2192 return `running_pred`, rounded to 4 decimals.\n        return np.round(running_pred, 4)\n    else:\n        # Classification \u2192 apply the soft-max row-wise to obtain class probabilities, then return the vector of predicted class indices (`argmax`).\n        probs = np.exp(running_pred) / np.sum(np.exp(running_pred), axis=1, keepdims=True)\n        return np.argmax(probs, axis=1)\n```\n\nThis function first initializes a running prediction array filled with zeros. It then iterates over the updates, subtracting each one from the running prediction after scaling by the learning rate. If the problem is regression, it returns the running prediction rounded to 4 decimal places. If the problem is classification, it first computes the softmax probabilities of the running prediction, then returns the indices of the maximum probabilities.\n"}
{"task_id": 371, "completion_id": 0, "completion": "Here is a Python script that implements the 1-D cross-correlation operation as described in the task.\n\n```python\nimport numpy as np\nimport math\n\ndef conv1D(X: np.ndarray, W: np.ndarray, stride: int, pad, dilation: int = 0) -> list:\n    \"\"\"Perform a 1-D cross-correlation between *X* and *W*.\n\n    The function must support batches, multiple input/output channels, padding\n    (integer, tuple or \"same\"), arbitrary stride and dilation.  It should return\n    the output volume as *list* obtained via ``ndarray.tolist()``.\n\n    Args:\n        X: ndarray of shape (n_examples, signal_length, in_channels)\n        W: ndarray of shape (kernel_width, in_channels, out_channels)\n        stride: positive integer, the step size of the sliding window\n        pad:  int, 2-tuple, or the string \"same\" specifying the amount of zero\n              padding to add to the left and right of the signal\n        dilation: non-negative integer, number of points inserted between\n                   neighbouring kernel elements (0 \u21d2 standard convolution)\n\n    Returns:\n        A Python list representing the convolved volume with shape\n        (n_examples, output_length, out_channels).\n    \"\"\"\n    # Get the dimensions of the input\n    n_examples, signal_length, in_channels = X.shape\n    kernel_width, _, out_channels = W.shape\n\n    # Calculate the output length\n    output_length = math.ceil((signal_length + 2 * pad - dilation * (kernel_width - 1) - 1) / stride) + 1\n\n    # Initialize the output volume\n    Z = np.zeros((n_examples, output_length, out_channels))\n\n    # Add zero padding to the input\n    if isinstance(pad, int):\n        X = np.pad(X, ((0, 0), (pad, pad), (0, 0)))\n    elif isinstance(pad, tuple):\n        X = np.pad(X, ((0, 0), (pad[0], pad[1]), (0, 0)))\n    elif pad == \"same\":\n        total_pad = math.ceil(signal_length / stride) * stride - signal_length\n        pad_left = total_pad // 2\n        pad_right = total_pad - pad_left\n        X = np.pad(X, ((0, 0), (pad_left, pad_right), (0, 0)))\n\n    # Perform the cross-correlation\n    for i in range(output_length):\n        for j in range(out_channels):\n            Z[:, i, j] = np.sum(X[:, i * stride:i * stride + kernel_width:dilation + 1, :] * W[::-1, :, j], axis=(1, 2))\n\n    return Z.tolist()\n```\n\nThis script first calculates the output length based on the input signal length, kernel width, stride, padding, and dilation. It then initializes the output volume and adds zero padding to the input. Finally, it performs the cross-correlation by sliding the kernel over the input and computing the dot product of the overlapping parts. The result is returned as a Python list.\n"}
{"task_id": 373, "completion_id": 0, "completion": "Here is a Python function that calculates the Gini impurity of a discrete label sequence:\n\n```python\nimport numpy as np\n\ndef gini(y: list[int] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Gini impurity of a sequence of integer labels.\n\n    Args:\n        y: A one-dimensional list or NumPy array containing integer class labels.\n\n    Returns:\n        The Gini impurity of *y*, rounded to 4 decimal places. If *y* is empty\n        an impurity of 0.0 is returned.\n    \"\"\"\n    # Check if the input sequence is empty\n    if len(y) == 0:\n        return 0.0\n\n    # Count the number of occurrences of each class\n    _, class_counts = np.unique(y, return_counts=True)\n\n    # Compute the relative frequencies of each class\n    p_c = class_counts / len(y)\n\n    # Compute the Gini impurity\n    gini = 1 - np.sum(np.square(p_c))\n\n    # Return the Gini impurity rounded to 4 decimal places\n    return round(gini, 4)\n```\n\nThis function first checks if the input sequence is empty. If it is, it returns 0.0. Otherwise, it computes the relative frequencies of each class and uses these to compute the Gini impurity. The Gini impurity is then rounded to 4 decimal places and returned.\n"}
{"task_id": 374, "completion_id": 0, "completion": "Here is a Python function that implements the linear regression with batch gradient descent:\n\n```python\nimport numpy as np\n\ndef linear_regression_gd(X: np.ndarray, y: np.ndarray, learning_rate: float = 0.01, n_iterations: int = 10000) -> tuple[list[float], float]:\n    \"\"\"Train a multiple linear regression model using batch gradient descent.\n\n    Your task is to implement this function following the specification\n    provided in the problem statement.\n    \"\"\"\n    # Check if the input data are inconsistent\n    if X.shape[0] != y.shape[0]:\n        return -1\n\n    # Initialize the weights and bias\n    weights = np.zeros(X.shape[1])\n    bias = 0.0\n\n    # Perform the gradient descent updates\n    for _ in range(n_iterations):\n        # Compute the predicted values\n        y_pred = np.dot(X, weights) + bias\n\n        # Compute the gradients\n        dw = (2 / X.shape[0]) * np.dot(X.T, (y_pred - y))\n        db = (2 / X.shape[0]) * np.sum(y_pred - y)\n\n        # Update the weights and bias\n        weights -= learning_rate * dw\n        bias -= learning_rate * db\n\n    # Return the learned parameters rounded to 4 decimal places\n    return [round(weight, 4) for weight in weights], round(bias, 4)\n```\n\nThis function first checks if the input data are inconsistent. If they are, it returns -1. Otherwise, it initializes the weights and bias to zero. It then performs the gradient descent updates for the specified number of iterations. For each iteration, it computes the predicted values, computes the gradients, and updates the weights and bias. Finally, it returns the learned parameters rounded to 4 decimal places.\n"}
{"task_id": 376, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef is_symmetric(X: list[list[int | float]]) -> bool:\n    \"\"\"Check whether the given 2-D array *X* is symmetric.\n\n    A matrix is symmetric if it is square and equal to its own transpose.\n\n    Args:\n        X: Matrix represented as a list of lists containing numbers.\n\n    Returns:\n        True if the matrix is symmetric, otherwise False.\n    \"\"\"\n    # Convert the list of lists to a numpy array\n    X = np.array(X)\n\n    # Check if the array is square\n    if X.shape[0] != X.shape[1]:\n        return False\n\n    # Check if the array is symmetric\n    return np.allclose(X, X.T, atol=1e-8)\n```\n\nThis script first converts the input list of lists to a numpy array. It then checks if the array is square. If it is not, the function returns `False`. If the array is square, the function checks if it is symmetric by comparing it to its transpose (`X.T`). The `np.allclose` function is used to compare the array and its transpose, allowing for a small rounding error (`atol=1e-8`). If the array is symmetric, the function returns `True`; otherwise, it returns `False`.\n"}
{"task_id": 377, "completion_id": 0, "completion": "Here is a Python function that implements the negative gradient for logistic loss as described in the task:\n\n```python\nimport numpy as np\n\ndef logistic_negative_gradient(y: list, f: list) -> list:\n    \"\"\"\n    This function calculates the negative gradient for logistic loss.\n\n    Args:\n    y: A list of binary class labels (0 or 1).\n    f: A list of current prediction scores (floats).\n\n    Returns:\n    A list of negative gradients g rounded to four decimal places.\n    If the label array contains values other than 0 or 1, return -1.\n    \"\"\"\n    # Check if all labels are 0 or 1\n    if not all(i in [0, 1] for i in y):\n        return -1\n\n    # Convert labels to -1 and 1\n    y_prime = 2 * np.array(y) - 1\n\n    # Calculate the negative gradient\n    g = y_prime / (1 + np.exp(y_prime * f))\n\n    # Round to four decimal places\n    g = [round(i, 4) for i in g]\n\n    return g\n```\n\nThis function first checks if all labels are 0 or 1. If not, it returns -1. Then it converts the labels to -1 and 1. After that, it calculates the negative gradient using the formula provided in the task. Finally, it rounds each value in the gradient to four decimal places and returns the result.\n"}
{"task_id": 380, "completion_id": 0, "completion": "Here is the Python code that implements the SELU activation and its derivatives:\n\n```python\nimport numpy as np\n\ndef selu(x, order: int = 0):\n    \"\"\"Compute the SELU activation or its derivatives.\n\n    Parameters\n    ----------\n    x : float | list | np.ndarray\n        Input value(s). Can be a scalar, 1-D list/array, or multi-D list/array.\n    order : int, default 0\n        0 \u2192 SELU(x)\n        1 \u2192 first derivative d(SELU)/dx\n        2 \u2192 second derivative d\u00b2(SELU)/dx\u00b2\n\n    Returns\n    -------\n    list | float\n        A Python list (or scalar for scalar input) containing the element-wise\n        result, rounded to 4 decimals.\n    \"\"\"\n    # Convert input to numpy array\n    x = np.asarray(x)\n\n    # Define constants\n    alpha = 1.6732632423543772848170429916717\n    scale = 1.0507009873554804934193349852946\n\n    # Compute SELU\n    if order == 0:\n        result = scale * np.where(x > 0, x, alpha * (np.exp(x) - 1))\n    # Compute first derivative\n    elif order == 1:\n        result = scale * np.where(x > 0, 1, alpha * np.exp(x))\n    # Compute second derivative\n    elif order == 2:\n        result = scale * np.where(x > 0, 0, alpha * np.exp(x))\n    else:\n        raise ValueError(\"Order must be 0, 1, or 2\")\n\n    # Round to 4 decimal places and convert to list\n    result = np.round(result, 4).tolist()\n\n    return result\n```\n\nThis function first converts the input to a numpy array. It then computes the SELU, first derivative, or second derivative based on the value of the `order` parameter. The result is rounded to 4 decimal places and converted to a list via NumPy's `tolist()` method.\n"}
{"task_id": 387, "completion_id": 0, "completion": "Here is a Python script that implements the task:\n\n```python\nimport numpy as np\n\ndef gradient_boosting_1d(x: list[float], y: list[float], n_estimators: int, learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Train a 1-D gradient boosting regressor made of decision stumps.\n\n    Args:\n        x: A list with a single numeric feature for every sample.\n        y: Target values.\n        n_estimators: Number of boosting rounds.\n        learning_rate: Shrinkage applied to every stump (\u03b7).\n\n    Returns:\n        In-sample predictions rounded to 4 decimals and converted to a Python list.\n    \"\"\"\n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, np.mean(y), dtype=float)\n\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        sorted_indices = np.argsort(x)\n        x_sorted = x[sorted_indices]\n        residuals_sorted = residuals[sorted_indices]\n\n        split_points = (x_sorted[1:] + x_sorted[:-1]) / 2\n        residuals_left = np.cumsum(residuals_sorted[:-1]) / np.arange(1, len(x_sorted))\n        residuals_right = (np.sum(residuals_sorted) - np.cumsum(residuals_sorted)) / (len(x_sorted) - np.arange(1, len(x_sorted) + 1))\n        errors = np.square(residuals_left - residuals_right)\n\n        best_split_index = np.argmin(errors)\n        best_split = split_points[best_split_index]\n\n        y_pred += learning_rate * np.where(x <= best_split, residuals_left[best_split_index], residuals_right[best_split_index])\n\n    return np.round(y_pred, 4).tolist()\n```\n\nThis script first initializes the predictions to the mean of the target values. Then, for each boosting round, it computes the residuals, sorts the samples by their feature values, and evaluates every possible split. The split that minimizes the sum of squared errors is chosen. The predictions are then updated and the process is repeated for the specified number of boosting rounds. Finally, the predictions are rounded to 4 decimal places and returned as a Python list.\n"}
{"task_id": 394, "completion_id": 0, "completion": "Here is a Python script that implements the RMSprop update step:\n\n```python\nimport numpy as np\n\ndef rmsprop_update(w: np.ndarray,\n                   grad: np.ndarray,\n                   Eg: np.ndarray | None = None,\n                   learning_rate: float = 0.01,\n                   rho: float = 0.9) -> tuple[list, list]:\n    \"\"\"Perform one update step of the RMSprop optimiser.\n\n    Parameters\n    ----------\n    w : np.ndarray\n        Current parameter values.\n    grad : np.ndarray\n        Gradient of the loss with respect to ``w``.\n    Eg : np.ndarray | None, optional\n        Running average of the squared gradients. If *None* a zero array of the\n        same shape as ``grad`` should be used, by default *None*.\n    learning_rate : float, optional\n        Step size (\u03b1), by default 0.01.\n    rho : float, optional\n        Decay rate (\u03c1) controlling the influence of previous squared gradients,\n        by default 0.9.\n\n    Returns\n    -------\n    tuple[list, list]\n        A tuple ``(w_next, Eg_next)`` where both elements are converted to\n        regular Python lists **and** rounded to four decimal places.\n    \"\"\"\n    # Initialize the running average if it is None\n    if Eg is None:\n        Eg = np.zeros_like(grad)\n\n    # Perform the update\n    Eg = rho * Eg + (1 - rho) * np.square(grad)\n    w = w - learning_rate * grad / np.sqrt(Eg + 1e-8)\n\n    # Round and convert to regular Python lists\n    w_next = np.round(w, 4).tolist()\n    Eg_next = np.round(Eg, 4).tolist()\n\n    return w_next, Eg_next\n```\n\nThis function first checks if the running average `Eg` is `None`. If it is, it initializes it as a zero array of the same shape as the gradient. Then it performs the update step as specified in the problem description. Finally, it rounds the updated parameter vector and the new running average to four decimal places and converts them to regular Python lists before returning.\n"}
{"task_id": 398, "completion_id": 0, "completion": "Here is a Python script that implements the ELU activation function and its gradient:\n\n```python\nimport numpy as np\n\ndef elu(x, alpha: float = 0.1, derivative: bool = False) -> list[float]:\n    \"\"\"Compute the ELU activation function or its gradient.\n\n    Args:\n        x: 1-D list or NumPy array of numbers.\n        alpha: Positive constant that controls the value for negative saturation. Default 0.1.\n        derivative: If ``True`` return the gradient instead of the activation. Default False.\n\n    Returns:\n        List of floats rounded to 4 decimal places representing ELU(x) or ELU'(x).\n    \"\"\"\n    x = np.array(x)\n    if derivative:\n        return np.round((np.where(x >= 0, 1, elu(x, alpha) + alpha)).tolist(), 4)\n    else:\n        return np.round((np.where(x >= 0, x, alpha * (np.exp(x) - 1))).tolist(), 4)\n```\n\nThis script first converts the input list to a NumPy array for easier computation. Then it checks the `derivative` flag. If it's `True`, it computes the gradient of the ELU function for each element in the array. If it's `False`, it computes the ELU function for each element in the array. Finally, it rounds each element to 4 decimal places and returns the result as a Python list.\n"}
{"task_id": 411, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef env_stats(actions: list, observations: list) -> dict:\n    \"\"\"Compute statistics for collections of actions and observations.\n\n    The function inspects *actions* and *observations* and returns a dictionary\n    containing information about dimensionality, data type (discrete or\n    continuous) and the unique values appearing in every dimension.\n\n    Parameters\n    ----------\n    actions : list\n        A list with the actions that were taken.  Each element is either a\n        scalar or an iterable of scalars (for multi-dimensional spaces).\n    observations : list\n        A list with the corresponding observations.  Same structural\n        requirements as *actions*.\n\n    Returns\n    -------\n    dict\n        A dictionary with the keys described in the task description.\n    \"\"\"\n    def get_stats(data):\n        tuple_data = any(isinstance(d, (list, tuple, np.ndarray)) for d in data)\n        multidim_data = any(isinstance(d, (list, tuple, np.ndarray)) and len(d) > 1 for d in data)\n        continuous_data = any(isinstance(d, (list, tuple, np.ndarray)) for d in data for x in d if isinstance(x, float) and not x.is_integer())\n        n_data_per_dim = [len(set(d)) if isinstance(d, (list, tuple, np.ndarray)) else 1 for d in data]\n        data_dim = len(data[0]) if isinstance(data[0], (list, tuple, np.ndarray)) else 1\n        data_ids = [sorted(list(set(d))) if isinstance(d, (list, tuple, np.ndarray)) else [d] for d in data]\n        return tuple_data, multidim_data, continuous_data, n_data_per_dim, data_dim, data_ids\n\n    tuple_actions, multidim_actions, continuous_actions, n_actions_per_dim, action_dim, action_ids = get_stats(actions)\n    tuple_observations, multidim_observations, continuous_observations, n_obs_per_dim, obs_dim, obs_ids = get_stats(observations)\n\n    return {\n        'tuple_actions': tuple_actions,\n        'tuple_observations': tuple_observations,\n        'multidim_actions': multidim_actions,\n        'multidim_observations': multidim_observations,\n        'continuous_actions': continuous_actions,\n        'continuous_observations': continuous_observations,\n        'n_actions_per_dim': n_actions_per_dim,\n        'action_dim': action_dim,\n        'n_obs_per_dim': n_obs_per_dim,\n        'obs_dim': obs_dim,\n        'action_ids': action_ids,\n        'obs_ids': obs_ids\n    }\n```\n\nThis script defines a helper function `get_stats` that computes the statistics for a given list of data. It then uses this function to compute the statistics for the actions and observations, and returns a dictionary with the computed statistics.\n"}
{"task_id": 413, "completion_id": 0, "completion": "Here is a Python script that implements a simplified Gradient Boosting Decision Tree (GBDT) regressor from scratch. The script uses NumPy for all computations and only uses the standard library. The script uses a binary-splitting approach for the internal regression trees, uses mean-squared-error as the split criterion, and stops growing when max_depth is reached or no further reduction in error is possible.\n\n```python\nimport numpy as np\n\nclass Node:\n    def __init__(self, feature=None, threshold=None, left=None, right=None, value=None):\n        self.feature = feature\n        self.threshold = threshold\n        self.left = left\n        self.right = right\n        self.value = value\n\nclass GBDT:\n    def __init__(self, n_estimators=10, learning_rate=0.1, max_depth=3):\n        self.n_estimators = n_estimators\n        self.learning_rate = learning_rate\n        self.max_depth = max_depth\n        self.trees = []\n\n    def fit(self, X, y):\n        y_pred = np.full(np.shape(y), np.mean(y))\n        for _ in range(self.n_estimators):\n            gradient = y - y_pred\n            tree = self._build_tree(X, gradient)\n            y_pred += np.multiply(self.learning_rate, self._predict(X, tree))\n            self.trees.append(tree)\n\n    def _build_tree(self, X, gradient, depth=0):\n        n_samples, n_features = X.shape\n        best_idx, best_thr = None, None\n        min_error = np.inf\n\n        for f in range(n_features):\n            thresholds = np.unique(X[:, f])\n            for threshold in thresholds:\n                left_idx = X[:, f] < threshold\n                right_idx = X[:, f] >= threshold\n                left_grad = gradient[left_idx]\n                right_grad = gradient[right_idx]\n                error = np.sum(left_grad ** 2) + np.sum(right_grad ** 2)\n                if error < min_error:\n                    min_error = error\n                    best_idx = f\n                    best_thr = threshold\n\n        if depth == self.max_depth or min_error == 0:\n            return Node(value=np.mean(gradient))\n\n        left_idx = X[:, best_idx] < best_thr\n        right_idx = X[:, best_idx] >= best_thr\n        left = self._build_tree(X[left_idx], gradient[left_idx], depth + 1)\n        right = self._build_tree(X[right_idx], gradient[right_idx], depth + 1)\n        return Node(best_idx, best_thr, left, right)\n\n    def _predict(self, X, tree):\n        if tree.value is not None:\n            return np.full(X.shape[0], tree.value)\n        if X[:, tree.feature] < tree.threshold:\n            return self._predict(X, tree.left)\n        else:\n            return self._predict(X, tree.right)\n\ndef gbdt_regression(X_train, y_train, X_test, n_estimators=10, learning_rate=0.1, max_depth=3):\n    gbdt = GBDT(n_estimators, learning_rate, max_depth)\n    gbdt.fit(X_train, y_train)\n    y_pred = np.zeros(X_test.shape[0])\n    for tree in gbdt.trees:\n        y_pred += gbdt._predict(X_test, tree) * learning_rate\n    return [round(y, 4) for y in y_pred.tolist()]\n```\n\nThis script first defines a Node class to represent a node in the decision tree, and a GBDT class to represent the entire gradient boosting decision tree. The fit method of the GBDT class builds the decision tree by recursively splitting the data based on the feature and threshold that minimizes the mean squared error. The _predict method is used to make predictions for a given set of features. The gbdt_regression function uses the GBDT class to fit the model and make predictions for the test set.\n"}
{"task_id": 416, "completion_id": 0, "completion": "Here is a Python script that implements the multivariate Gaussian PDF:\n\n```python\nimport numpy as np\nimport math\n\ndef multivariate_gaussian_pdf(X, mean, cov):\n    \"\"\"\n    This function calculates the probability density function (PDF) of a multivariate Gaussian (Normal) distribution.\n\n    Parameters:\n    X (numpy array): A NumPy array of shape (n_samples, n_features) containing the data points for which the PDF values must be evaluated.\n    mean (numpy array): The mean vector of the distribution (length n_features).\n    cov (numpy array): The covariance matrix of shape (n_features, n_features) which must be positive-definite (invertible).\n\n    Returns:\n    list: A Python list whose i-th element is the PDF value for X[i] rounded to four decimal places.\n    \"\"\"\n\n    # Ensure X is a 2D array\n    X = np.atleast_2d(X)\n\n    # Get the number of samples and features\n    n_samples, n_features = X.shape\n\n    # Calculate the determinant of the covariance matrix\n    det_cov = np.linalg.det(cov)\n\n    # Calculate the inverse of the covariance matrix\n    inv_cov = np.linalg.inv(cov)\n\n    # Initialize an empty list to store the PDF values\n    pdf_values = []\n\n    # Calculate the PDF for each data point\n    for x in X:\n        # Calculate the exponent of the Gaussian PDF\n        exponent = -0.5 * (x - mean).T.dot(inv_cov).dot(x - mean)\n\n        # Calculate the PDF value\n        pdf_value = (1 / np.sqrt((2 * np.pi) ** n_features * det_cov)) * np.exp(exponent)\n\n        # Append the PDF value to the list, rounded to four decimal places\n        pdf_values.append(round(pdf_value, 4))\n\n    return pdf_values\n```\n\nThis script first ensures that the input data `X` is a 2D array. It then calculates the determinant and inverse of the covariance matrix. For each data point in `X`, it calculates the exponent of the Gaussian PDF and uses this to calculate the PDF value. This value is then appended to the list of PDF values, rounded to four decimal places. The function finally returns this list of PDF values.\n"}
{"task_id": 419, "completion_id": 0, "completion": "Here is a Python script that implements the task:\n\n```python\nimport numpy as np\n\ndef bayesian_linear_regression_pred(\n    X: np.ndarray,\n    y: np.ndarray,\n    X_new: np.ndarray,\n    mu: float | np.ndarray = 0.0,\n    sigma: float = 1.0,\n    V: float | np.ndarray | None = None,\n    fit_intercept: bool = True,\n) -> list[float]:\n    \"\"\"Bayesian linear regression with known variance.\n\n    The function must return the MAP predictive means for every row in\n    `X_new`.  See the task description for full details.\n    \"\"\"\n    # Add intercept column if fit_intercept is True\n    if fit_intercept:\n        X = np.c_[np.ones(X.shape[0]), X]\n        X_new = np.c_[np.ones(X_new.shape[0]), X_new]\n\n    # Convert mu to a vector if it is a scalar\n    if isinstance(mu, (int, float)):\n        mu = np.full(X.shape[1], mu)\n\n    # Convert sigma to a matrix if it is a scalar\n    if isinstance(sigma, (int, float)):\n        sigma = np.full((X.shape[1], X.shape[1]), sigma)\n\n    # Convert V to a matrix if it is a scalar or 1D array\n    if V is None:\n        V = np.eye(X.shape[1])\n    elif isinstance(V, (int, float)):\n        V = np.full((X.shape[1], X.shape[1]), V)\n    elif isinstance(V, np.ndarray) and V.ndim == 1:\n        V = np.diag(V)\n\n    # Compute the posterior distribution\n    V_inv = np.linalg.inv(V)\n    Sigma_post = np.linalg.inv(V_inv + X.T @ X / sigma**2)\n    Mu_post = Sigma_post @ (V_inv @ mu + X.T @ y / sigma**2)\n\n    # Compute the MAP predictive mean\n    y_new = X_new @ Mu_post\n\n    # Round the predicted values to 4 decimal places\n    y_new = [round(y, 4) for y in y_new]\n\n    return y_new\n```\n\nThis script first adds an intercept column to `X` and `X_new` if `fit_intercept` is `True`. It then converts `mu` and `V` to matrices if they are scalars or 1D arrays. It computes the posterior distribution and uses it to compute the MAP predictive mean for `X_new`. Finally, it rounds the predicted values to 4 decimal places and returns them as a list.\n"}
{"task_id": 423, "completion_id": 0, "completion": "Here is a Python function that solves the task:\n\n```python\nimport numpy as np\n\ndef root_mean_squared_log_error(actual: list[float], predicted: list[float]) -> float:\n    \"\"\"Stub for the RMSLE metric.  Complete the body of the function.\"\"\"\n    # Check if both inputs have the same length\n    if len(actual) != len(predicted):\n        return -1\n\n    # Check if both inputs contain only non-negative numbers\n    for i in range(len(actual)):\n        if actual[i] < 0 or predicted[i] < 0:\n            return -1\n\n    # Compute the RMSLE\n    rmsle = np.sqrt(np.mean(np.square((np.log(predicted + 1) - np.log(actual + 1)))))\n\n    # Return the result rounded to four decimal places\n    return round(rmsle, 4)\n```\n\nThis function first checks if both input lists have the same length and if they contain only non-negative numbers. If not, it returns -1. Then it computes the RMSLE using the provided formula and returns the result rounded to four decimal places.\n"}
{"task_id": 428, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport math\nimport numpy as np\n\ndef hann(window_len: int, symmetric: bool = False) -> list[float]:\n    \"\"\"Generate a Hann (Hanning) window.\n\n    The function returns *window_len* coefficients of the Hann window, an\n    instance of the general cosine-sum windows where the first and last\n    samples smoothly reach zero.  When *symmetric* is ``True`` a classical\n    symmetric window is generated; when ``False`` the function instead\n    builds a periodic window suitable for FFT analysis.\n\n    Args:\n        window_len (int): Number of samples in the returned window.\n        symmetric (bool, optional): ``True`` for a symmetric window,\n            ``False`` for a periodic window. Defaults to ``False``.\n\n    Returns:\n        list[float]: The Hann window coefficients rounded to 4 decimal\n        places.  Returns an empty list when *window_len* \u2264 0.\n    \"\"\"\n    if window_len <= 0:\n        return []\n    elif window_len == 1:\n        return [1.0]\n    else:\n        if symmetric:\n            window_len_adjusted = window_len\n        else:\n            window_len_adjusted = window_len + 1\n\n        window = [0.5 - 0.5 * math.cos(2 * math.pi * n / (window_len_adjusted - 1))\n                  for n in range(window_len_adjusted)]\n\n        if not symmetric:\n            window = window[:-1]\n\n        return [round(x, 4) for x in window]\n```\n\nThis script first checks if the window length is less than or equal to 0. If it is, it returns an empty list. If the window length is 1, it returns a list with a single element, 1.0. Otherwise, it calculates the Hann window coefficients and rounds them to 4 decimal places. If the window is not symmetric, it discards the last element.\n"}
{"task_id": 433, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef glorot_fan(shape: tuple[int, ...] | list[int, ...]) -> tuple[float, float]:\n    \"\"\"Compute fan-in and fan-out for a given weight-tensor shape.\n\n    Args:\n        shape: A tuple or list whose first two elements correspond to the input\n            and output dimensions (for 4-D convolutional kernels the layout is\n            `(out_channels, in_channels, kernel_height, kernel_width)`).\n\n    Returns:\n        A tuple `(fan_in, fan_out)` with both values returned as floats.\n    \"\"\"\n    if len(shape) == 4:\n        # 2-D convolutional kernel\n        receptive_field_size = shape[2] * shape[3]\n        fan_in  = shape[1] * receptive_field_size\n        fan_out = shape[0] * receptive_field_size\n    else:\n        # Other tensors\n        fan_in, fan_out = shape[0], shape[1]\n\n    return float(fan_in), float(fan_out)\n```\n\nThis script first checks if the shape has exactly 4 dimensions. If it does, it assumes that the shape corresponds to a 2-D convolutional kernel and calculates the fan-in and fan-out accordingly. If the shape has fewer than 4 dimensions, it simply takes the first two dimensions as the fan-in and fan-out. The function then returns the fan-in and fan-out as a tuple of floats.\n"}
{"task_id": 435, "completion_id": 0, "completion": "Here is a Python script that implements the task:\n\n```python\nimport numpy as np\n\ndef gradient_boosting_regressor(X: list[list[float]],\n                               y: list[float],\n                               n_estimators: int = 10,\n                               learning_rate: float = 0.1) -> list[float]:\n    \"\"\"Return the training-set predictions of a tiny Gradient Boosting model.\n\n    The model uses linear regression weak learners and squared-error loss. The\n    algorithm proceeds exactly as described in the task description.  Every\n    returned value must be rounded to 4 decimal places and packed into a plain\n    Python list.\n    \"\"\"\n    X = np.array(X, dtype=float)\n    y = np.array(y, dtype=float)\n\n    if n_estimators <= 0 or learning_rate == 0:\n        return [round(y.mean(), 4)] * len(y)\n\n    y_hat = np.full(y.shape, y.mean())\n\n    for t in range(n_estimators):\n        residuals = y - y_hat\n        model = np.linalg.lstsq(X, residuals, rcond=None)[0]\n        y_hat += learning_rate * (X @ model)\n\n    return [round(y, 4) for y in y_hat.tolist()]\n```\n\nThis script first converts the input lists to NumPy arrays. It then checks if the number of estimators is less than or equal to zero or if the learning rate is zero. If either of these conditions is true, it returns a list of the mean of the target values.\n\nOtherwise, it initializes the prediction vector with the mean of the target values. It then iterates over the number of estimators, computing the residuals, fitting a linear model to the residuals, and updating the prediction vector. Finally, it returns the final prediction vector, rounded to 4 decimal places and converted to a regular Python list.\n"}
{"task_id": 437, "completion_id": 0, "completion": "Here is a Python script that implements the logistic sigmoid function and its derivatives:\n\n```python\nimport numpy as np\n\ndef sigmoid(x, order: int = 0):\n    \"\"\"Compute the logistic sigmoid or its derivatives.\n\n    Args:\n        x (float | int | list | np.ndarray): Input data. Can be a scalar, list, or NumPy array.\n        order (int, optional): 0 = function value, 1 = first derivative,\n            2 = second derivative. Defaults to 0.\n\n    Returns:\n        float | list: Result rounded to 4 decimals. Scalar input returns a float;\n            vector/matrix input returns a Python list preserving the shape.\n            If *order* is not 0, 1, or 2, the function returns -1.\n    \"\"\"\n    # Convert input to numpy array\n    x = np.array(x)\n\n    # Compute sigmoid function\n    s = 1 / (1 + np.exp(-x))\n\n    # Compute derivatives\n    if order == 0:\n        result = s\n    elif order == 1:\n        result = s * (1 - s)\n    elif order == 2:\n        result = s * (1 - s) * (1 - 2 * s)\n    else:\n        return -1\n\n    # Round to 4 decimal places and return\n    if np.isscalar(result):\n        return round(float(result), 4)\n    else:\n        return np.round(result, 4).tolist()\n```\n\nThis script first converts the input to a numpy array, then computes the sigmoid function and its derivatives. It then rounds the result to 4 decimal places and returns it. If the input is a scalar, it returns a float; otherwise, it returns a list. If the order is not 0, 1, or 2, it returns -1.\n"}
{"task_id": 438, "completion_id": 0, "completion": "Here is a Python script that implements the `to_categorical` function as described:\n\n```python\nimport numpy as np\n\ndef to_categorical(y: list[int] | np.ndarray, num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert class labels to one-hot encoding.\n\n    Parameters\n    ----------\n    y : list[int] | np.ndarray\n        A 1-D sequence of non-negative integer class indices.\n    num_classes : int | None, optional\n        Total number of classes. If ``None`` the value is inferred.\n\n    Returns\n    -------\n    list[list[int]]\n        A 2-D list of lists containing the one-hot encoded representation of\n        *y*, or ``-1`` when *num_classes* is smaller than required.\n    \"\"\"\n    y = np.array(y)\n    if num_classes is None:\n        num_classes = np.max(y) + 1\n    elif num_classes < np.max(y) + 1:\n        return -1\n    one_hot = np.zeros((y.shape[0], num_classes))\n    one_hot[np.arange(y.shape[0]), y] = 1\n    return one_hot.tolist()\n```\n\nThis script first converts the input list or NumPy array to a NumPy array for easier manipulation. It then checks if `num_classes` is provided. If it's not, it's set to the maximum class index in `y` plus one. If `num_classes` is provided but is smaller than the maximum class index in `y` plus one, the function returns -1 to signal an error.\n\nFinally, it creates a 2-D NumPy array of zeros with dimensions `(y.shape[0], num_classes)`. It then sets the elements at the indices specified by `y` to 1. The resulting 2-D NumPy array is converted to a list of lists and returned.\n"}
{"task_id": 439, "completion_id": 0, "completion": "Here is a Python script that implements the Apriori algorithm:\n\n```python\nimport itertools\n\ndef apriori_frequent_itemsets(transactions: list[list[int]], min_sup: float) -> list[tuple]:\n    \"\"\"Find frequent itemsets with the Apriori algorithm.\n\n    Parameters\n    ----------\n    transactions : list[list[Hashable]]\n        List of transactions; each transaction is itself a list of items.\n    min_sup : float\n        Minimum support threshold expressed as a fraction (>0 and \u22641).\n\n    Returns\n    -------\n    list[tuple]\n        Frequent itemsets ordered by length and then lexicographically.\n    \"\"\"\n    # Count the occurrence of each item\n    item_counts = {}\n    for transaction in transactions:\n        for item in transaction:\n            if item in item_counts:\n                item_counts[item] += 1\n            else:\n                item_counts[item] = 1\n\n    # Filter out items that do not meet the minimum support threshold\n    min_count = min_sup * len(transactions)\n    frequent_items = {item: count for item, count in item_counts.items() if count >= min_count}\n\n    # Generate frequent itemsets of size 1\n    frequent_itemsets = [(item,) for item in frequent_items]\n\n    k = 2\n    while len(frequent_itemsets) >= k - 1:\n        # Generate candidate itemsets of size k\n        candidate_itemsets = list(itertools.combinations(frequent_items, k))\n\n        # Count the occurrence of each candidate itemset\n        candidate_counts = {}\n        for transaction in transactions:\n            for candidate in candidate_itemsets:\n                if all(item in transaction for item in candidate):\n                    if candidate in candidate_counts:\n                        candidate_counts[candidate] += 1\n                    else:\n                        candidate_counts[candidate] = 1\n\n        # Filter out candidate itemsets that do not meet the minimum support threshold\n        frequent_itemsets = [itemset for itemset, count in candidate_counts.items() if count >= min_count]\n\n        k += 1\n\n    # Sort the frequent itemsets by length and then lexicographically\n    frequent_itemsets.sort(key=lambda itemset: (len(itemset), itemset))\n\n    return frequent_itemsets\n```\n\nThis script first counts the occurrence of each item in the transactions. It then filters out items that do not meet the minimum support threshold. It generates frequent itemsets of size 1 and starts the main loop of the Apriori algorithm. In each iteration of the loop, it generates candidate itemsets of size `k`, counts the occurrence of each candidate itemset in the transactions, and filters out those that do not meet the minimum support threshold. The loop continues until no new frequent itemsets are found. Finally, it sorts the frequent itemsets by length and then lexicographically and returns them.\n"}
{"task_id": 440, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef aggregate_predictions(predictions: list[list[list[float]]]) -> tuple[list[list[float]], list[int]]:\n    \"\"\"Aggregate per-tree class probability predictions in a random forest.\n\n    Parameters:\n        predictions: A three-level nested list where the first dimension corresponds to\n            estimators (n_estimators), the second to samples (n_samples) and the third\n            to class probabilities (n_classes). Each innermost list should form a valid\n            probability distribution summing to 1.0.\n\n    Returns:\n        A tuple consisting of:\n            1. A 2-D python list of shape (n_samples, n_classes) containing the averaged\n               class probabilities rounded to 4 decimal places.\n            2. A 1-D python list of length n_samples containing the predicted class index\n               for each sample obtained via arg-max on the averaged probabilities.\n    \"\"\"\n    # Convert the input list to a numpy array for easier manipulation\n    predictions_array = np.array(predictions)\n\n    # Average the probability vectors over all estimators for every sample\n    averaged_probabilities = np.mean(predictions_array, axis=0)\n\n    # Round every averaged probability to four decimal places\n    averaged_probabilities = np.round(averaged_probabilities, 4)\n\n    # Get the index of the class with the highest average probability\n    predicted_classes = np.argmax(averaged_probabilities, axis=1)\n\n    # Convert the numpy arrays back to python lists\n    averaged_probabilities = averaged_probabilities.tolist()\n    predicted_classes = predicted_classes.tolist()\n\n    return averaged_probabilities, predicted_classes\n```\n\nThis script first converts the input list to a numpy array for easier manipulation. It then averages the probability vectors over all estimators for every sample using the `np.mean` function. The averaged probabilities are then rounded to four decimal places using the `np.round` function. The index of the class with the highest average probability is obtained using the `np.argmax` function. Finally, the numpy arrays are converted back to python lists and returned as a tuple.\n"}
{"task_id": 444, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef rbf_kernel(X: list[list[int | float]],\n               Y: list[list[int | float]] | None = None,\n               sigma: float | list[float] | None = None) -> list[list[float]]:\n    \"\"\"Compute the Radial Basis Function (RBF) kernel matrix.\n\n    The function should follow the specifications given in the task\n    description. It must return -1 on invalid input, otherwise a nested list\n    containing the kernel matrix rounded to four decimal places.\n    \"\"\"\n    # Convert lists to numpy arrays\n    X = np.array(X)\n    if Y is not None:\n        Y = np.array(Y)\n\n    # Validate inputs\n    if sigma is None:\n        sigma = np.sqrt(X.shape[1] / 2)\n    elif isinstance(sigma, float):\n        if sigma <= 0:\n            return -1\n        sigma = np.full(X.shape[1], sigma)\n    elif isinstance(sigma, list):\n        if len(sigma) != X.shape[1] or any(s <= 0 for s in sigma):\n            return -1\n        sigma = np.array(sigma)\n    else:\n        return -1\n\n    if Y is None:\n        Y = X\n    elif X.shape[1] != Y.shape[1]:\n        return -1\n\n    # Compute kernel matrix\n    pairwise_dists = np.sum((X[:, np.newaxis, :] - Y[np.newaxis, :, :]) ** 2 / sigma ** 2, axis=-1)\n    kernel_matrix = np.exp(-0.5 * pairwise_dists)\n\n    # Round to 4 decimal places and convert to list\n    kernel_matrix = np.round(kernel_matrix, 4).tolist()\n\n    return kernel_matrix\n```\n\nThis script first converts the input lists to numpy arrays for easier manipulation. It then validates the inputs, checking that the scale parameter is valid and that the feature dimensions of X and Y (or Y and Y if Y is omitted) match. If the inputs are valid, it computes the pairwise squared Euclidean distances between all pairs of vectors in X and Y, scales these distances by the sigma parameter, and applies the RBF kernel function to each distance. The resulting kernel matrix is rounded to four decimal places and converted back to a list.\n"}
{"task_id": 446, "completion_id": 0, "completion": "Here is a Python script that implements the `decision_stump` function. It uses the `numpy` library for numerical computations.\n\n```python\nimport numpy as np\n\ndef decision_stump(X, y):\n    X = np.array(X)\n    y = np.array(y)\n    n_samples, n_features = X.shape\n\n    # Compute the entropy of the parent node\n    parent_entropy = entropy(y)\n\n    # Initialize the best gain, feature index and threshold\n    best_gain = -np.inf\n    best_feature_index = -1\n    best_threshold = None\n\n    # Iterate over all features\n    for feature_index in range(n_features):\n        feature_values = X[:, feature_index]\n        unique_values = np.unique(feature_values)\n        thresholds = (unique_values[:-1] + unique_values[1:]) / 2\n\n        # Iterate over all thresholds\n        for threshold in thresholds:\n            left_indices = feature_values <= threshold\n            right_indices = feature_values > threshold\n\n            # Compute the entropy of the left and right child nodes\n            left_entropy = entropy(y[left_indices])\n            right_entropy = entropy(y[right_indices])\n\n            # Compute the information gain\n            gain = parent_entropy - (left_indices.mean() * left_entropy + right_indices.mean() * right_entropy)\n\n            # Update the best gain, feature index and threshold if necessary\n            if gain > best_gain:\n                best_gain = gain\n                best_feature_index = feature_index\n                best_threshold = round(threshold, 4)\n\n    # If no split can improve information gain, return -1, None, majority_label, majority_label\n    if best_gain <= 0:\n        majority_label = np.argmax(np.bincount(y))\n        return -1, None, majority_label, majority_label\n\n    # Compute the majority labels of the left and right child nodes\n    left_indices = X[:, best_feature_index] <= best_threshold\n    right_indices = X[:, best_feature_index] > best_threshold\n    left_majority_label = np.argmax(np.bincount(y[left_indices]))\n    right_majority_label = np.argmax(np.bincount(y[right_indices]))\n\n    return best_feature_index, best_threshold, left_majority_label, right_majority_label\n\ndef entropy(y):\n    _, counts = np.unique(y, return_counts=True)\n    probabilities = counts / len(y)\n    return -np.sum(probabilities * np.log2(probabilities))\n```\n\nThis script first computes the entropy of the parent node. Then, it iterates over all features and all thresholds. For each feature-threshold pair, it computes the entropy of the left and right child nodes and the information gain. If the information gain is greater than the current best gain, it updates the best gain, feature index and threshold. Finally, it returns the best feature index, threshold, and the majority labels of the left and right child nodes. If no split can improve information gain, it returns -1, None, majority_label, majority_label.\n"}
{"task_id": 452, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\nfrom typing import List\n\ndef divide_on_feature(X: np.ndarray | List[list], feature_i: int, threshold) -> List[list]:\n    \"\"\"Split the data set *X* into two subsets using a given feature column and threshold.\n\n    The function must create two disjoint subsets:\n    1. For a numeric threshold (int or float) the first subset contains every\n       sample whose value in column *feature_i* is **greater than or equal** to\n       the threshold.\n    2. For any other type of threshold the first subset contains every sample\n       whose value in column *feature_i* is **exactly equal** to the threshold.\n\n    The second subset always contains the remaining samples.  Both subsets must\n    keep the original order of appearance in *X*.\n\n    Args:\n        X: 2-D iterable (list or ndarray) where each element is a sample.\n        feature_i: Index of the feature column used for the split.\n        threshold: Value that determines how the split is performed.\n\n    Returns:\n        A list of length two.  *result[0]* is the first subset, *result[1]* is\n        the second subset.  Each subset must be converted to a regular Python\n        list via ``ndarray.tolist()`` before returning.\n    \"\"\"\n    X = np.array(X)\n    subset1 = X[X[:, feature_i] >= threshold]\n    subset2 = X[X[:, feature_i] < threshold]\n    return [subset1.tolist(), subset2.tolist()]\n```\n\nThis script first converts the input list or ndarray to a numpy array for easier manipulation. Then it creates two subsets based on the threshold. If the threshold is numeric, it selects the rows where the feature value is greater than or equal to the threshold. If the threshold is not numeric, it selects the rows where the feature value is exactly equal to the threshold. Finally, it converts the subsets to lists and returns them in a list.\n"}
{"task_id": 453, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef update_q_values(\n    Q: \"np.ndarray\",\n    Q_next: \"np.ndarray\",\n    actions: list[int],\n    rewards: list[float],\n    dones: list[bool],\n    gamma: float,\n) -> list[list[float]]:\n    \"\"\"Fill in DQN targets for a training batch.\n\n    Parameters\n    ----------\n    Q : np.ndarray\n        Q-values predicted for the *current* states, shape (batch, n_actions).\n    Q_next : np.ndarray\n        Q-values predicted for the *next* states, same shape as ``Q``.\n    actions : list[int]\n        Action index taken in each state.\n    rewards : list[float]\n        Reward received after each action.\n    dones : list[bool]\n        Whether the next state is terminal for each sample.\n    gamma : float\n        Discount factor in the interval [0, 1].\n\n    Returns\n    -------\n    list[list[float]]\n        Updated Q matrix that can be used as supervised training targets.\n        Round every element to 4 decimals. If inputs are invalid return -1.\n    \"\"\"\n    # Check if inputs are valid\n    if len(Q) != len(Q_next) or len(Q) != len(actions) or len(Q) != len(rewards) or len(Q) != len(dones):\n        return -1\n    if gamma < 0 or gamma > 1:\n        return -1\n\n    # Copy the original Q\n    y = Q.copy()\n\n    # Update the target for each sample\n    for i in range(len(Q)):\n        if dones[i]:\n            target = rewards[i]\n        else:\n            target = rewards[i] + gamma * max(Q_next[i])\n        y[i][actions[i]] = round(target, 4)\n\n    # Convert the result to a nested Python list\n    y = y.tolist()\n\n    return y\n```\n\nThis script first checks if the inputs are valid. If they are not, it returns -1. Then it copies the original Q and updates the target for each sample according to the formula given in the task description. Finally, it converts the result to a nested Python list and returns it.\n"}
{"task_id": 458, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef to_categorical(labels: list | tuple | 'np.ndarray', num_classes: int | None = None) -> list[list[int]]:\n    \"\"\"Convert integer class labels to one-hot encoded format.\n\n    Args:\n        labels: 1-D sequence of non-negative integer labels.\n        num_classes: Total number of classes. If *None*, infer as\n            ``max(labels) + 1``.\n\n    Returns:\n        A list of lists representing the one-hot encoded labels, or -1\n        when the input is invalid (negative label or `num_classes` too\n        small).\n    \"\"\"\n    # Convert labels to numpy array\n    labels = np.array(labels)\n\n    # Check if labels are negative\n    if np.any(labels < 0):\n        return -1\n\n    # Infer num_classes if not provided\n    if num_classes is None:\n        num_classes = np.max(labels) + 1\n\n    # Check if num_classes is smaller than max(labels) + 1\n    if num_classes < np.max(labels) + 1:\n        return -1\n\n    # Create an empty matrix of shape (len(labels), num_classes)\n    one_hot_matrix = np.zeros((len(labels), num_classes), dtype=int)\n\n    # Fill the one_hot_matrix with 1's at the indices specified by labels\n    one_hot_matrix[np.arange(len(labels)), labels] = 1\n\n    # Convert numpy array to list of lists\n    one_hot_matrix = one_hot_matrix.tolist()\n\n    return one_hot_matrix\n```\n\nThis script first checks if any label is negative or if `num_classes` is smaller than `max(labels) + 1`. If either of these conditions is true, it returns -1. Otherwise, it creates an empty matrix of shape `(len(labels), num_classes)` and fills it with 1's at the indices specified by `labels`. Finally, it converts the numpy array to a list of lists and returns it.\n"}
{"task_id": 461, "completion_id": 0, "completion": "Here is a Python script that implements the gradient boosting regressor with decision stumps:\n\n```python\nimport numpy as np\n\ndef gradient_boosting_regressor(\n        x: list[float],\n        y: list[float],\n        n_estimators: int = 200,\n        learning_rate: float = 0.5) -> list[float]:\n    \"\"\"Gradient Boosting with decision stumps for 1-D regression.\n\n    Parameters\n    ----------\n    x : list[float]\n        Feature values (one-dimensional).\n    y : list[float]\n        Target values.\n    n_estimators : int, default 200\n        Number of boosting iterations.\n    learning_rate : float, default 0.5\n        Shrinkage applied to each weak learner.\n\n    Returns\n    -------\n    list[float]\n        Final predictions for the training data, rounded to four decimals.\n    \"\"\"    \n    x = np.array(x)\n    y = np.array(y)\n    y_pred = np.full_like(y, np.mean(y), dtype=float)\n\n    if n_estimators <= 0:\n        return np.round(y_pred, 4).tolist()\n\n    for _ in range(n_estimators):\n        residuals = y - y_pred\n        unique_x = np.unique(x)\n        if unique_x.shape[0] == 1:\n            v = np.mean(residuals)\n        else:\n            split_values = (unique_x[:-1] + unique_x[1:]) / 2\n            sse = np.full_like(split_values, np.inf, dtype=float)\n            for i, t in enumerate(split_values):\n                left_mask = x <= t\n                right_mask = x > t\n                if np.any(left_mask) and np.any(right_mask):\n                    v_L = np.mean(residuals[left_mask])\n                    v_R = np.mean(residuals[right_mask])\n                    sse[i] = np.sum((residuals[left_mask] - v_L)**2) + np.sum((residuals[right_mask] - v_R)**2)\n            best_split_index = np.argmin(sse)\n            t = split_values[best_split_index]\n            v_L = np.mean(residuals[x <= t])\n            v_R = np.mean(residuals[x > t])\n            y_pred += learning_rate * np.where(x <= t, v_L, v_R)\n\n    return np.round(y_pred, 4).tolist()\n```\n\nThis script first initializes the predictions to the mean of the targets. Then, for each iteration, it computes the residuals, finds the best split, and updates the predictions. If no valid split exists, it sets the stump prediction to the mean residual of the whole data. If *n_estimators* is 0 or negative, it simply returns the mean target for every sample. Finally, it returns the final predictions rounded to four decimal places.\n"}
{"task_id": 471, "completion_id": 0, "completion": "Here is a Python script that implements the Expected SARSA TD(0) update:\n\n```python\nimport numpy as np\n\ndef expected_sarsa_update(q_table: list[list[float]],\n                          state: int,\n                          action: int,\n                          reward: float,\n                          next_state: int | None,\n                          epsilon: float,\n                          lr: float,\n                          gamma: float) -> list[list[float]]:\n    \"\"\"One step Expected\u2013SARSA TD(0) update for a tabular Q function.\n\n    Parameters\n    ----------\n    q_table : list[list[float]]\n        Current Q-table; q_table[s][a] is Q(s,a).\n    state : int\n        Index of the state *s* where the action was taken.\n    action : int\n        Index of the action *a* taken in state *s*.\n    reward : float\n        Immediate reward received after executing the action.\n    next_state : int | None\n        The successor state *s'*.  Use ``None`` if the transition ended the\n        episode.\n    epsilon : float\n        \u03b5 in the \u03b5-soft policy used to compute the expectation.\n    lr : float\n        Learning-rate \u03b7.\n    gamma : float\n        Discount factor \u03b3.\n\n    Returns\n    -------\n    list[list[float]]\n        The updated Q-table (all entries rounded to four decimals).\n    \"\"\"\n    # Get the number of actions\n    num_actions = len(q_table[0])\n\n    # Compute the target\n    if next_state is None:\n        target = reward\n    else:\n        # Compute the expectation\n        expectation = sum(\n            (1 - epsilon + epsilon / num_actions) * q_table[next_state][a] if a == np.argmax(q_table[next_state])\n            else epsilon / num_actions * q_table[next_state][a]\n            for a in range(num_actions)\n        )\n        target = reward + gamma * expectation\n\n    # Update the Q-table\n    q_table[state][action] += lr * (target - q_table[state][action])\n\n    # Round all entries to 4 decimal places\n    q_table = [[round(val, 4) for val in row] for row in q_table]\n\n    return q_table\n```\n\nThis script first computes the target using the given formula. If there is no next state (i.e., the transition ends the episode), the target is just the immediate reward. Otherwise, it computes the expectation using the \u03b5-soft policy. Finally, it updates the Q-table entry for the taken action and the state, and rounds all entries to 4 decimal places.\n"}
{"task_id": 474, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  interval: float,\n                  seed: int | None = None) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a 2-D toy data set for a binary (or multi-class) classifier.\n\n    Args:\n        m:         Number of distinct classes.\n        n_train:   Number of training samples per class.\n        n_val:     Number of validation samples per class.\n        interval:  Vertical distance (in units of 10) between the two rows\n                    of class clusters.\n        seed:      Optional random seed to make the output deterministic.\n\n    Returns:\n        A tuple (X_train, X_val, Y_train, Y_val) where each element is a\n        NumPy array.  All coordinates must be rounded to 4 decimal places.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n\n    X_train = []\n    Y_train = []\n    X_val = []\n    Y_val = []\n\n    for i in range(m):\n        x_min = round((i//2 + 0.1) * 10, 4)\n        x_max = round((i//2 + 0.9) * 10, 4)\n        y_min = round((i%2 * interval + 0.1) * 10, 4)\n        y_max = round((i%2 * interval + 0.9) * 10, 4)\n\n        for _ in range(n_train):\n            X_train.append([round(random.uniform(x_min, x_max), 4), round(random.uniform(y_min, y_max), 4)])\n            Y_train.append((i - 0.5) * 2)\n\n        for _ in range(n_val):\n            X_val.append([round(random.uniform(x_min, x_max), 4), round(random.uniform(y_min, y_max), 4)])\n            Y_val.append((i - 0.5) * 2)\n\n    return np.array(X_train), np.array(X_val), np.array(Y_train), np.array(Y_val)\n```\n\nThis script first checks if a seed is provided. If it is, it sets the random seed to the provided value. Then it initializes empty lists for the training and validation data and labels. For each class, it calculates the minimum and maximum x and y values for the class, and then generates the specified number of training and validation samples for that class. The samples are uniformly distributed within the calculated range, and the labels are calculated based on the class index. Finally, it returns the training and validation data and labels as NumPy arrays.\n"}
{"task_id": 475, "completion_id": 0, "completion": "Here is a Python script that implements the Adam update step:\n\n```python\nimport numpy as np\n\ndef adam_update(w, grad, m_prev, v_prev, t, learning_rate=0.001, b1=0.9, b2=0.999, eps=1e-8):\n    \"\"\"Perform a single Adam optimisation step.\n\n    Parameters\n    ----------\n    w : float | np.ndarray\n        Current value of the parameter(s) to be updated.\n    grad : float | np.ndarray\n        Gradient of the loss with respect to ``w``.\n    m_prev : float | np.ndarray | None\n        Previous estimate of the first moment (mean of gradients).\n    v_prev : float | np.ndarray | None\n        Previous estimate of the second moment (uncentred variance of gradients).\n    t : int\n        Time step (must start at 1 and increase by one on every call).\n    learning_rate : float, default 0.001\n        Step size ``\u03b1``.\n    b1 : float, default 0.9\n        Exponential decay rate for the first moment.\n    b2 : float, default 0.999\n        Exponential decay rate for the second moment.\n    eps : float, default 1e-8\n        Small constant added to the denominator for numerical stability.\n\n    Returns\n    -------\n    tuple\n        ``(w_new, m_new, v_new)`` where:\n        * ``w_new`` \u2013 updated parameters (same shape as ``w``)\n        * ``m_new`` \u2013 updated first moment\n        * ``v_new`` \u2013 updated second moment\n    \"\"\"\n    # Initialize m_prev and v_prev if they are None\n    if m_prev is None:\n        m_prev = np.zeros_like(grad)\n    if v_prev is None:\n        v_prev = np.zeros_like(grad)\n\n    # Compute the first and second moments\n    m_new = b1 * m_prev + (1 - b1) * grad\n    v_new = b2 * v_prev + (1 - b2) * np.square(grad)\n\n    # Compute the bias-corrected moments\n    m_hat = m_new / (1 - b1**t)\n    v_hat = v_new / (1 - b2**t)\n\n    # Update the parameters\n    w_new = w - learning_rate * m_hat / (np.sqrt(v_hat) + eps)\n\n    return w_new, m_new, v_new\n```\n\nThis script first checks if `m_prev` or `v_prev` are `None` and initializes them as zero arrays of the same shape as `grad` if they are. Then it computes the first and second moments of the gradients, applies the bias correction, and finally updates the parameters. The updated parameters, first moment, and second moment are returned as a tuple.\n"}
{"task_id": 479, "completion_id": 0, "completion": "Here is a Python script that implements the \u03b5-greedy algorithm for the stationary multi-armed bandit problem:\n\n```python\nimport numpy as np\nfrom typing import List, Optional\n\ndef epsilon_greedy_bandit(\n    rewards: List[List[float]],\n    epsilon: float = 0.05,\n    ev_prior: float = 0.5,\n    seed: Optional[int] = None,\n) -> List[float]:\n    \"\"\"Simulate one run of the \u03b5-greedy policy on a stationary multi-armed bandit.\n\n    Parameters\n    ----------\n    rewards : List[List[float]]\n        A matrix where ``rewards[t][i]`` is the reward for arm *i* at time-step\n        *t*.\n    epsilon : float, optional\n        Exploration probability (default 0.05).\n    ev_prior : float, optional\n        Initial expected value for each arm (default 0.5).\n    seed : int | None, optional\n        Random seed for reproducible experiments (default None).\n\n    Returns\n    -------\n    List[float]\n        The final estimated value for every arm rounded to 4 decimals.\n    \"\"\"\n    # Set the random seed\n    if seed is not None:\n        np.random.seed(seed)\n\n    # Initialize the estimated value of every arm with the constant ev_prior\n    # and set all pull counters to 0\n    N = len(rewards[0])\n    estimated_values = [ev_prior] * N\n    pull_counters = [0] * N\n\n    # For each time-step t (row in rewards):\n    for t in range(len(rewards)):\n        # With probability epsilon choose an arm uniformly at random\n        if np.random.random() < epsilon:\n            arm = np.random.choice(N)\n        # Otherwise choose the arm that currently has the largest estimated value\n        # (break ties by the smallest index)\n        else:\n            max_value = max(estimated_values)\n            arm = np.random.choice(\n                [i for i, value in enumerate(estimated_values) if value == max_value]\n            )\n\n        # Receive the reward that corresponds to the chosen arm at this time-step\n        reward = rewards[t][arm]\n\n        # Update the chosen arm\u2019s estimate using the incremental sample mean\n        pull_counters[arm] += 1\n        estimated_values[arm] += (reward - estimated_values[arm]) / pull_counters[arm]\n\n    # After the last time-step return the list of arm value estimates rounded to 4 decimal places\n    return [round(value, 4) for value in estimated_values]\n```\n\nThis script first initializes the estimated values and pull counters for each arm. Then, for each time-step, it either chooses a random arm with probability epsilon, or the arm with the highest estimated value. It then updates the chosen arm's estimated value based on the observed reward. Finally, it returns the final estimated values for each arm, rounded to 4 decimal places.\n"}
{"task_id": 481, "completion_id": 0, "completion": "Here is a Python script that implements the DBSCAN algorithm from scratch:\n\n```python\nimport numpy as np\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Cluster *data* with the DBSCAN algorithm.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        Two-dimensional array where each row is a sample and columns are\n        features.\n    eps : float\n        Maximum radius of the neighborhood to be considered reachable.\n    min_samples : int\n        Minimum number of samples (including the point itself) required to form\n        a dense region.\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for each sample. Noise points are labeled \u20111 and cluster\n        indices start at 0 and increase sequentially in discovery order.\n    \"\"\"\n    labels = [0]*len(data)\n    cluster_id = 0\n    for P_idx, P in enumerate(data):\n        if not (labels[P_idx] == 0):\n            continue\n        Neighbors_P = region_query(data, P_idx, eps)\n        if len(Neighbors_P) < min_samples:\n            labels[P_idx] = -1\n            continue\n        cluster_id += 1\n        grow_cluster(data, labels, P_idx, Neighbors_P, cluster_id, eps, min_samples)\n    return labels\n\ndef grow_cluster(data, labels, P_idx, Neighbors_P, cluster_id, eps, min_samples):\n    labels[P_idx] = cluster_id\n    i = 0\n    while i < len(Neighbors_P):\n        P_n_idx = Neighbors_P[i]\n        if labels[P_n_idx] == -1:\n            labels[P_n_idx] = cluster_id\n        elif labels[P_n_idx] != 0:\n            i += 1\n            continue\n        labels[P_n_idx] = cluster_id\n        Neighbors_P_n = region_query(data, P_n_idx, eps)\n        if len(Neighbors_P_n) >= min_samples:\n            Neighbors_P = Neighbors_P + Neighbors_P_n\n        i += 1\n\ndef region_query(data, P_idx, eps):\n    neighbors = []\n    for P_n_idx in range(0, len(data)):\n        if np.linalg.norm(data[P_idx] - data[P_n_idx]) < eps:\n            neighbors.append(P_n_idx)\n    return neighbors\n```\n\nThis script first initializes all labels to 0. Then, for each point in the data, it checks if the point has been visited before. If it has, it skips to the next point. If it hasn't, it finds all points within the neighborhood of the current point. If the number of points in the neighborhood is less than the minimum number of samples, the point is labeled as noise and skipped. If the number of points in the neighborhood is greater than or equal to the minimum number of samples, a new cluster is created and the current point is added to the cluster. The function `grow_cluster` is then called to expand the cluster by adding all reachable points to the cluster. The function `region_query` is used to find all points within the neighborhood of a given point.\n"}
{"task_id": 482, "completion_id": 0, "completion": "Here is a Python script that implements the one-hot encoding routine:\n\n```python\nimport numpy as np\n\ndef to_categorical(y, num_classes=None):\n    \"\"\"Convert integer labels to one-hot encoded format.\n\n    This function receives a vector (1-D) of non-negative integer labels and\n    returns a two-dimensional NumPy array where each row corresponds to the\n    one-hot representation of the matching label.\n\n    Args:\n        y (array_like): Sequence of integer labels. Accepted types are list,\n            tuple or NumPy ndarray.\n        num_classes (int | None, optional): Total number of distinct classes.\n            If ``None`` (default), the number is inferred automatically as\n            ``max(y) + 1``.\n\n    Returns:\n        np.ndarray: A matrix of shape ``(len(y), num_classes)`` filled with 0s\n        and 1s (dtype = int), representing the one-hot encoding of the input\n        labels.\n    \"\"\"\n    # Convert input to numpy array\n    y = np.array(y)\n\n    # If num_classes is not provided, set it to max(y) + 1\n    if num_classes is None:\n        num_classes = max(y) + 1\n\n    # Check if any label is negative or not smaller than num_classes\n    if np.any(y < 0) or np.any(y >= num_classes):\n        raise ValueError(\"Labels must be non-negative and smaller than num_classes\")\n\n    # Create a 2D array of zeros\n    one_hot = np.zeros((len(y), num_classes), dtype=int)\n\n    # Set the corresponding index of each row to 1\n    one_hot[np.arange(len(y)), y] = 1\n\n    return one_hot\n```\n\nThis script first converts the input labels to a numpy array. If `num_classes` is not provided, it is set to `max(y) + 1`. Then it checks if any label is negative or not smaller than `num_classes`, and raises a `ValueError` if so. Finally, it creates a 2D array of zeros, and sets the corresponding index of each row to 1, which represents the one-hot encoding of the input labels.\n"}
{"task_id": 485, "completion_id": 0, "completion": "Here is a Python script that implements the univariate regression tree algorithm as described in the task.\n\n```python\nimport numpy as np\n\nclass Node:\n    def __init__(self, split_point=None, left=None, right=None, value=None):\n        self.split_point = split_point\n        self.left = left\n        self.right = right\n        self.value = value\n\ndef build_tree(X, y, depth=0, max_depth=3):\n    if len(X) < 2 or depth == max_depth:\n        return Node(value=np.mean(y))\n\n    best_split_point = None\n    best_sse = float('inf')\n    for split_point in X:\n        left_indices = np.where(X < split_point)[0]\n        right_indices = np.where(X >= split_point)[0]\n        if len(left_indices) == 0 or len(right_indices) == 0:\n            continue\n        left_y = y[left_indices]\n        right_y = y[right_indices]\n        sse = np.sum((left_y - np.mean(left_y))**2) + np.sum((right_y - np.mean(right_y))**2)\n        if sse < best_sse:\n            best_sse = sse\n            best_split_point = split_point\n\n    if best_split_point is None:\n        return Node(value=np.mean(y))\n\n    left_indices = np.where(X < best_split_point)[0]\n    right_indices = np.where(X >= best_split_point)[0]\n    left = build_tree(X[left_indices], y[left_indices], depth=depth+1, max_depth=max_depth)\n    right = build_tree(X[right_indices], y[right_indices], depth=depth+1, max_depth=max_depth)\n    return Node(best_split_point, left, right)\n\ndef predict(tree, X):\n    if tree.value is not None:\n        return tree.value\n    if X < tree.split_point:\n        return predict(tree.left, X)\n    else:\n        return predict(tree.right, X)\n\ndef regression_tree_predict(X_train, y_train, X_test, max_depth=3):\n    if len(X_train) == 0:\n        return []\n    tree = build_tree(np.array(X_train), np.array(y_train), max_depth=max_depth)\n    return [predict(tree, x) for x in X_test]\n```\n\nThis script first defines a `Node` class to represent the nodes of the tree. The `build_tree` function recursively builds the tree by finding the best split point that minimizes the sum of squared errors (SSE) of the two children. The `predict` function traverses the tree to make a prediction for a given feature value. The `regression_tree_predict` function builds the tree and uses it to make predictions for the test set.\n"}
{"task_id": 490, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef make_diagonal(x: list | tuple | 'np.ndarray') -> list[list[int | float]]:\n    \"\"\"Convert a one-dimensional vector into a square diagonal matrix.\n\n    Args:\n        x: A one-dimensional structure (list, tuple, or NumPy array) containing\n           numeric values.\n\n    Returns:\n        A list of lists representing the diagonal matrix. If *x* is empty,\n        return an empty list.\n    \"\"\"\n    # Convert the input to a numpy array\n    x = np.array(x)\n    \n    # If the input array is empty, return an empty list\n    if x.size == 0:\n        return []\n    \n    # Create a square diagonal matrix with the input values on the diagonal\n    # and zeros elsewhere\n    matrix = np.diag(x)\n    \n    # Convert the numpy array to a list of lists and return it\n    return matrix.tolist()\n```\n\nThis script first converts the input to a NumPy array. If the array is empty, it returns an empty list. Otherwise, it creates a square diagonal matrix with the input values on the diagonal and zeros elsewhere. Finally, it converts the NumPy array to a list of lists and returns it.\n"}
{"task_id": 491, "completion_id": 0, "completion": "Here is a Python script that implements the FP-Growth algorithm:\n\n```python\nfrom collections import Counter, defaultdict\nimport itertools\n\nclass Node:\n    def __init__(self, item_name, count, parent):\n        self.item_name = item_name\n        self.count = count\n        self.parent = parent\n        self.children = {}\n        self.next = None\n\n    def increment(self, count):\n        self.count += count\n\ndef construct_FP_tree(transactions, min_sup):\n    header_table = defaultdict(int)\n    for trans in transactions:\n        for item in trans:\n            header_table[item] += 1\n\n    header_table = {k: v for k, v in header_table.items() if v >= min_sup}\n    frequent_items = list(header_table.keys())\n    frequent_items.sort(key=lambda x: header_table[x], reverse=True)\n\n    if len(frequent_items) == 0:\n        return None, None\n\n    fp_tree = Node(frequent_items[0], header_table[frequent_items[0]], None)\n    for trans in transactions:\n        sorted_trans = [item for item in trans if item in frequent_items]\n        sorted_trans.sort(key=lambda x: header_table[x], reverse=True)\n        current_node = fp_tree\n        for item in sorted_trans:\n            current_node = update_tree(item, current_node)\n    return fp_tree, header_table\n\ndef update_tree(item, tree_node):\n    if item in tree_node.children:\n        tree_node.children[item].increment(1)\n    else:\n        tree_node.children[item] = Node(item, 1, tree_node)\n\n        if tree_node.item_name is not None:\n            update_header(tree_node.children[item], header_table[tree_node.item_name])\n\n    return tree_node.children[item]\n\ndef update_header(node_to_test, target_node):\n    while node_to_test.item_name is not None:\n        node_to_test = node_to_test.next\n    node_to_test.next = target_node\n\ndef mine_FP_tree(header_table, prefix, frequent_item_set):\n    sorted_items = [v[0] for v in sorted(header_table.items(), key=lambda kv: kv[1])]\n    for base in sorted_items:\n        new_frequent_set = prefix.copy()\n        new_frequent_set.add(base)\n        frequent_item_set.append(new_frequent_set)\n        conditional_pattern_base = get_prefix_path(base, header_table)\n        conditional_tree, conditional_header = construct_FP_tree(conditional_pattern_base, min_sup)\n        if conditional_header is not None:\n            mine_FP_tree(conditional_header, new_frequent_set, frequent_item_set)\n\ndef get_prefix_path(base_pat, header_table):\n    tree_node = header_table[base_pat][1]\n    cond_pats = []\n    frequency = tree_node.count\n    while tree_node is not None:\n        prefix_path = []\n        ascend_tree(tree_node, prefix_path)\n        if len(prefix_path) > 1:\n            cond_pats.append(prefix_path[1:])\n        tree_node = tree_node.next\n    return cond_pats\n\ndef ascend_tree(tree_node, prefix_path):\n    if tree_node.item_name is not None:\n        prefix_path.append(tree_node.item_name)\n        ascend_tree(tree_node.parent, prefix_path)\n\ndef fp_growth(transactions, min_sup):\n    global header_table\n    fp_tree, header_table = construct_FP_tree(transactions, min_sup)\n    if fp_tree is None:\n        return []\n    frequent_item_set = []\n    mine_FP_tree(header_table, set(), frequent_item_set)\n    return sorted(frequent_item_set, key=lambda x: (len(x), x))\n```\n\nThis script first constructs the FP-tree and the header table. Then it mines the FP-tree to find all frequent item-sets. The frequent item-sets are sorted first by length and then lexicographically.\n"}
{"task_id": 492, "completion_id": 0, "completion": "Here is a Python script that implements the `polynomial_features` function:\n\n```python\nimport numpy as np\nfrom itertools import combinations_with_replacement\n\ndef polynomial_features(X: list[list[int | float]], degree: int) -> list[list[float]]:\n    if degree < 0:\n        return -1\n\n    X = np.array(X)\n    n_samples, n_features = X.shape\n\n    # Initialize the output matrix with ones\n    output = np.ones((n_samples, 1))\n\n    # Generate all combinations of features up to the given degree\n    for deg in range(1, degree + 1):\n        for items in combinations_with_replacement(range(n_features), deg):\n            # Compute the product of the features in the current combination\n            new_col = np.prod(X[:, items], axis=1)\n            new_col = new_col.reshape(-1, 1)\n\n            # Append the new column to the output matrix\n            output = np.hstack((output, new_col))\n\n    return output.tolist()\n```\n\nThis script first checks if the degree is negative. If it is, it returns -1. Then it converts the input list to a numpy array for easier manipulation. It initializes the output matrix with ones. Then it generates all combinations of features up to the given degree, computes the product of the features in each combination, reshapes the result to a column vector, and appends it to the output matrix. Finally, it converts the output matrix to a list of lists and returns it.\n"}
{"task_id": 493, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef mse(y):\n    \"\"\"Compute the mean-squared error (MSE) of a 1-D numeric sample.\n\n    The MSE is the average of squared differences between each element\n    and the sample mean.  If the input sequence is empty the function\n    should return -1.\n\n    Args:\n        y (list[int | float] | numpy.ndarray): 1-D collection of numbers.\n\n    Returns:\n        float: Mean-squared error rounded to 4 decimal places, or -1 when\n            *y* is empty.\n    \"\"\"\n    # Convert the input to a numpy array if it is a list\n    if isinstance(y, list):\n        y = np.array(y)\n\n    # Check if the input sequence is empty\n    if y.size == 0:\n        return -1\n\n    # Compute the mean of the sequence\n    y_mean = np.mean(y)\n\n    # Compute the squared differences and their mean\n    mse = np.mean((y - y_mean) ** 2)\n\n    # Return the MSE rounded to 4 decimal places\n    return round(mse, 4)\n```\n\nThis script first checks if the input is a list and converts it to a numpy array if it is. Then it checks if the array is empty and returns -1 if it is. Otherwise, it computes the mean of the array, computes the squared differences between each element and the mean, computes the mean of these squared differences, and returns this mean rounded to 4 decimal places.\n"}
{"task_id": 496, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef apply_affine(x, slope: float = 1.0, intercept: float = 0.0):\n    \"\"\"Apply an affine activation and return its first and second derivatives.\n\n    Args:\n        x: 1-D list or NumPy array containing numeric values.\n        slope: The slope of the affine function. Defaults to 1.0.\n        intercept: The intercept of the affine function. Defaults to 0.0.\n\n    Returns:\n        tuple[list[float], list[float], list[float]]: A tuple containing three\n        lists \u2013 the activation output, the first derivative, and the second\n        derivative \u2013 each rounded to 4 decimal places.\n    \"\"\"\n    # Convert x to a numpy array if it's not already\n    x = np.array(x)\n\n    # Compute the activation output\n    y = slope * x + intercept\n\n    # Compute the first derivative\n    grad = np.full_like(x, slope)\n\n    # Compute the second derivative\n    grad2 = np.zeros_like(x)\n\n    # Round all elements to 4 decimal places\n    y = np.round(y, 4)\n    grad = np.round(grad, 4)\n    grad2 = np.round(grad2, 4)\n\n    return y.tolist(), grad.tolist(), grad2.tolist()\n```\n\nThis function first converts the input `x` to a numpy array if it's not already. Then it computes the activation output, the first derivative, and the second derivative. All elements are rounded to 4 decimal places. The results are returned as lists.\n"}
{"task_id": 499, "completion_id": 0, "completion": "Here is a Python script that implements the PCA dimensionality reduction routine:\n\n```python\nimport numpy as np\n\ndef pca_transform(data: np.ndarray, k: int) -> list[list[float]]:\n    \"\"\"Project *data* onto its first *k* principal components.\n\n    Parameters\n    ----------\n    data : np.ndarray\n        2-D array where each row is a sample and each column is a feature.\n    k : int\n        Number of principal components to retain (1 \u2264 k \u2264 n_features).\n\n    Returns\n    -------\n    list[list[float]]\n        The projected data rounded to 4 decimal places. If *k* is outside the\n        valid range, return \u22121.\n    \"\"\"\n    # Step 1: Standardise each feature (zero mean, unit population variance)\n    data_std = (data - np.mean(data, axis=0)) / np.std(data, axis=0)\n\n    # Step 2: Compute the sample covariance matrix of the standardised data\n    cov_mat = np.cov(data_std.T, bias=True)\n\n    # Step 3: Perform an eigen-decomposition of the covariance matrix\n    eig_vals, eig_vecs = np.linalg.eig(cov_mat)\n\n    # Step 4: Sort eigenvalues in descending order and arrange the corresponding eigenvectors accordingly\n    idx = eig_vals.argsort()[::-1]\n    eig_vals = eig_vals[idx]\n    eig_vecs = eig_vecs[:, idx]\n\n    # Step 5: Fix the sign of every eigenvector so that its entry with the largest absolute value is positive\n    eig_vecs = np.array([vec if vec[np.argmax(np.abs(vec))] > 0 else -vec for vec in eig_vecs.T]).T\n\n    # Step 6: Project the standardised data on the first k eigenvectors\n    if 1 <= k <= data.shape[1]:\n        data_pca = np.dot(data_std, eig_vecs[:, :k])\n        return np.round(data_pca, 4).tolist()\n    else:\n        return -1\n```\n\nThis script first standardizes the data, then computes the covariance matrix of the standardized data. It then performs an eigen-decomposition of the covariance matrix to get the eigenvalues and eigenvectors. The eigenvectors are sorted in descending order according to their corresponding eigenvalues. The sign of each eigenvector is fixed so that its entry with the largest absolute value is positive. Finally, the standardized data is projected onto the first `k` eigenvectors. If `k` is not in the valid range, the function returns `-1`.\n"}
{"task_id": 500, "completion_id": 0, "completion": "Here is a Python script that implements a very small-scale Gradient Boosting binary classifier using decision stumps as weak learners and the squared-error loss.\n\n```python\nimport numpy as np\n\ndef gradient_boosting_classifier(X_train: list[list[float]], y_train: list[int], X_test: list[list[float]], n_estimators: int = 20, learning_rate: float = 0.1) -> list[int]:\n    \"\"\"Train a tiny Gradient Boosting model using decision stumps and predict labels.\n\n    The ensemble minimises the squared-error on the *binary* targets and turns the\n    final regression score into a class label by thresholding at 0.5.\n\n    Args:\n        X_train: Training samples, each sample being a list of feature values.\n        y_train: Binary labels (0 or 1) for the training samples.\n        X_test: Samples to predict \u2013 identical structure to X_train.\n        n_estimators: Number of boosting stages to perform.\n        learning_rate: Shrinkage factor (\u03b7) applied to each weak learner.\n\n    Returns:\n        A list containing the predicted class (0 or 1) for every sample in\n        X_test.\n    \"\"\"\n    # Convert lists to numpy arrays for easier manipulation\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    X_test = np.array(X_test)\n\n    # Initialize the predictions with the average of the training labels\n    F = np.full(y_train.shape, np.mean(y_train))\n\n    for _ in range(n_estimators):\n        # Compute the residuals\n        r = y_train - F\n\n        # Initialize the best stump\n        best_stump = None\n        min_error = float('inf')\n\n        # Try all possible stumps\n        for feature in range(X_train.shape[1]):\n            for threshold in np.unique(X_train[:, feature]):\n                # Compute the predictions for the left and right samples\n                left_mask = X_train[:, feature] <= threshold\n                right_mask = ~left_mask\n                left_pred = np.mean(r[left_mask])\n                right_pred = np.mean(r[right_mask])\n\n                # Compute the total squared error\n                error = np.sum((r[left_mask] - left_pred) ** 2) + np.sum((r[right_mask] - right_pred) ** 2)\n\n                # Update the best stump if necessary\n                if error < min_error:\n                    min_error = error\n                    best_stump = (feature, threshold, left_pred, right_pred)\n\n        # Update the predictions\n        feature, threshold, left_pred, right_pred = best_stump\n        F += learning_rate * np.where(X_train[:, feature] <= threshold, left_pred, right_pred)\n\n    # Return the predicted class labels for the test set\n    return [int(f >= 0.5) for f in F]\n```\n\nThis script first initializes the predictions with the average of the training labels. Then, for each boosting stage, it computes the residuals and tries all possible decision stumps. The stump that minimizes the total squared error is chosen, and the predictions are updated accordingly. Finally, the predicted class labels for the test set are returned.\n"}
{"task_id": 505, "completion_id": 0, "completion": "Here is a Python script that implements the Contrastive Divergence (CD-k) algorithm for a Restricted Boltzmann Machine (RBM).\n\n```python\nimport numpy as np\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n\ndef contrastive_divergence(\n        X: np.ndarray,\n        W: np.ndarray,\n        hbias: np.ndarray,\n        vbias: np.ndarray,\n        learning_rate: float,\n        k: int) -> list[list[float]]:\n    \"\"\"Perform one CD-k weight update for a binary RBM.\n\n    Args:\n        X: A 2-D NumPy array of shape (batch_size, n_visible) containing the\n           mini-batch of visible units. Values are expected to be in [0,1].\n        W: Weight matrix of shape (n_visible, n_hidden).\n        hbias: 1-D NumPy array (length n_hidden) with hidden unit biases.\n        vbias: 1-D NumPy array (length n_visible) with visible unit biases.\n        learning_rate: Scalar learning-rate used for the update.\n        k: Number of Gibbs sampling steps to run (CD-k).\n\n    Returns:\n        The updated weight matrix **rounded to 4 decimal places** and converted\n        to a regular Python list of lists.\n    \"\"\"\n    if X.shape[0] == 0:\n        return []\n\n    # Compute the positive phase hidden probabilities\n    h0_prob = sigmoid(np.dot(X, W) + hbias)\n\n    # Run k full Gibbs steps (hidden \u2192 visible \u2192 hidden) without stochastic sampling\n    v_k = X.copy()\n    for _ in range(k):\n        h_k_prob = sigmoid(np.dot(v_k, W) + hbias)\n        h_k = np.random.binomial(1, h_k_prob)\n        v_k_prob = sigmoid(np.dot(h_k, W.T) + vbias)\n        v_k = np.random.binomial(1, v_k_prob)\n\n    # Compute positive and negative gradients\n    pos_grad = np.dot(X.T, h0_prob)\n    neg_grad = np.dot(v_k_prob.T, h_k_prob)\n\n    # Update the weight matrix\n    W_new = W + learning_rate * (pos_grad - neg_grad) / X.shape[0]\n\n    # Return the updated weight matrix rounded to 4 decimal places\n    return np.round(W_new, 4).tolist()\n```\n\nThis script first computes the positive phase hidden probabilities. Then it runs `k` full Gibbs steps (hidden \u2192 visible \u2192 hidden) without stochastic sampling. After that, it computes the positive and negative gradients and updates the weight matrix. Finally, it returns the updated weight matrix rounded to 4 decimal places and converted to a regular Python list of lists.\n"}
{"task_id": 509, "completion_id": 0, "completion": "Here is a Python function that computes the Chebyshev distance between two real-valued vectors:\n\n```python\nimport numpy as np\n\ndef chebyshev(x: list[float] | \"np.ndarray\", y: list[float] | \"np.ndarray\") -> float:\n    \"\"\"Compute the Chebyshev (maximum) distance between two real-valued vectors.\n\n    The input vectors *x* and *y* must be one-dimensional and of identical\n    length.  If the lengths differ, the function returns -1.\n\n    Parameters\n    ----------\n    x : list[float] | np.ndarray\n        First input vector.\n    y : list[float] | np.ndarray\n        Second input vector.\n\n    Returns\n    -------\n    float\n        The Chebyshev distance rounded to four decimal places, or -1 if the\n        vector lengths differ.\n    \"\"\"\n    # Convert lists to numpy arrays\n    x = np.array(x)\n    y = np.array(y)\n\n    # Check if the vectors have the same length\n    if len(x) != len(y):\n        return -1\n\n    # Compute the absolute differences\n    differences = np.abs(x - y)\n\n    # Return the maximum difference\n    return round(np.max(differences), 4)\n```\n\nThis function first converts the input lists to NumPy arrays. It then checks if the arrays have the same length. If they do not, it returns -1. If they do, it computes the absolute differences between the arrays and returns the maximum difference, rounded to four decimal places.\n"}
{"task_id": 510, "completion_id": 0, "completion": "Here is a Python script that implements the VAE loss function as described:\n\n```python\nimport numpy as np\n\ndef vae_loss(y: np.ndarray,\n             y_pred: np.ndarray,\n             t_mean: np.ndarray,\n             t_log_var: np.ndarray) -> float:\n    \"\"\"Compute the VAE loss for Bernoulli visible units.\n\n    The function must return the mini-batch average of binary cross-entropy\n    plus KL divergence, rounded to 6 decimal places.\n\n    Args:\n        y (np.ndarray): Ground-truth binary data of shape (batch_size, n_features).\n        y_pred (np.ndarray): Reconstructed probabilities with the same shape as *y*.\n        t_mean (np.ndarray): Mean of q(t|x) of shape (batch_size, latent_dim).\n        t_log_var (np.ndarray): Log-variance of q(t|x), same shape as *t_mean*.\n\n    Returns:\n        float: Average VAE loss rounded to 6 decimal places.\n    \"\"\"\n    # Clip y_pred into the open interval (eps, 1-eps)\n    eps = np.finfo(float).eps\n    y_pred = np.clip(y_pred, eps, 1 - eps)\n\n    # Compute reconstruction loss\n    reconstruction_loss = -np.sum(y * np.log(y_pred) + (1 - y) * np.log(1 - y_pred))\n\n    # Compute KL divergence\n    kl_divergence = -0.5 * np.sum(1 + t_log_var - t_mean**2 - np.exp(t_log_var))\n\n    # Compute total loss\n    total_loss = reconstruction_loss + kl_divergence\n\n    # Compute average loss\n    average_loss = total_loss / y.shape[0]\n\n    # Round to 6 decimal places\n    average_loss = round(average_loss, 6)\n\n    return average_loss\n```\n\nThis script first clips the `y_pred` values to the open interval `(eps, 1-eps)` to avoid numerical instability. Then it computes the reconstruction loss as the sum of the element-wise binary cross-entropy between `y` and `y_pred`. The KL divergence is computed as the sum of the terms in the formula given in the problem description. The total loss is the sum of the reconstruction loss and the KL divergence. The average loss is then computed by dividing the total loss by the batch size. Finally, the average loss is rounded to 6 decimal places and returned.\n"}
{"task_id": 513, "completion_id": 0, "completion": "Here is a Python function that implements the Factorization Machine regression prediction formula:\n\n```python\nimport numpy as np\n\ndef fm_predict(X: list[list[int | float]],\n               w0: float,\n               w: list[float],\n               V: list[list[int | float]]) -> list[float]:\n    \"\"\"Calculate Factorization Machine predictions for a batch of samples.\n\n    Args:\n        X: 2-D feature matrix of shape (n_samples, n_features) represented as a\n           list of lists where each inner list is a sample.\n        w0: Global bias term (float).\n        w: List of length n_features containing linear coefficients.\n        V: List of lists with shape (n_features, k) representing latent\n           interaction factors; k is the number of latent dimensions.\n\n    Returns:\n        A list of floats \u2013 one prediction for each sample \u2013 rounded to 4\n        decimal places.\n    \"\"\"\n    X = np.array(X)\n    w = np.array(w)\n    V = np.array(V)\n\n    linear_terms = X.dot(w)\n\n    interaction_terms = 0.5 * np.sum(np.power(X.dot(V), 2) - np.power(X.dot(np.power(V, 2)), 1/2), axis=1)\n\n    predictions = w0 + linear_terms + interaction_terms\n\n    return [round(pred, 4) for pred in predictions]\n```\n\nThis function first converts the input lists to numpy arrays for easier computation. It then calculates the linear and interaction terms separately, sums them up, and adds the bias term. Finally, it rounds each prediction to 4 decimal places and returns the result as a list.\n"}
{"task_id": 517, "completion_id": 0, "completion": "Here is a Python script that implements the sigmoid function as described:\n\n```python\nimport numpy as np\n\ndef sigmoid(z):\n    \"\"\"Compute the numerically stable, element-wise sigmoid activation.\n\n    The function must work for a scalar, list/tuple, or NumPy ndarray input.\n\n    Args:\n        z: int, float, list, tuple, or numpy.ndarray \u2013 input values.\n\n    Returns:\n        float if *z* is a scalar, otherwise a Python list obtained with\n        ``numpy.ndarray.tolist()``, where every element is the sigmoid of the\n        corresponding input value and is rounded to four decimal places.\n    \"\"\"\n    # Convert input to numpy array\n    z = np.array(z)\n\n    # Compute sigmoid\n    sigmoid_values = 1 / (1 + np.exp(-z))\n\n    # Round to 4 decimal places\n    sigmoid_values = np.round(sigmoid_values, 4)\n\n    # If input was scalar, return a float\n    if sigmoid_values.size == 1:\n        return sigmoid_values.item()\n    else:\n        # Otherwise return a list\n        return sigmoid_values.tolist()\n\n# Test the function\nprint(sigmoid([-1, 0, 1]))  # Output: [0.2689, 0.5, 0.7311]\n```\n\nThis script first converts the input to a numpy array, then computes the sigmoid function element-wise. It rounds the results to 4 decimal places and checks if the input was a scalar. If it was, it returns a float; otherwise, it returns a list.\n"}
{"task_id": 518, "completion_id": 0, "completion": "Here is the Python code that solves the task:\n\n```python\nimport numpy as np\nfrom typing import Callable\n\ndef unhot(function: Callable) -> Callable:\n    \"\"\"Decorator that converts one-hot encoded label arrays to 1-D class labels.\n\n    If either *actual* or *predicted* is a 2-D array whose second dimension is\n    larger than one, the array is assumed to be one-hot encoded and is replaced\n    by its ``argmax`` along axis 1 before the wrapped *function* is executed.\n\n    Args:\n        function: A metric function accepting two NumPy arrays ``(actual,\n            predicted)`` and returning a value of any type.\n\n    Returns:\n        Callable: A new function that performs the described conversion and then\n        calls *function*.\n    \"\"\"\n    def wrapper(actual: np.ndarray, predicted: np.ndarray):\n        if actual.ndim == 2 and actual.shape[1] > 1:\n            actual = actual.argmax(axis=1)\n        if predicted.ndim == 2 and predicted.shape[1] > 1:\n            predicted = predicted.argmax(axis=1)\n        return function(actual, predicted)\n\n    return wrapper\n```\n\nThis code defines a decorator `unhot` that takes a function as an argument and returns a new function that performs the described conversion and then calls the original function. The conversion is performed by checking if the input arrays are two-dimensional and their second dimension is larger than one, in which case they are assumed to be one-hot encoded and are replaced by their `argmax` along axis 1.\n"}
{"task_id": 520, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef sigmoid_grad(z):\n    \"\"\"Return the derivative of the sigmoid function given its output.\n\n    The input *z* already contains sigmoid values (numbers in [0,1]).  The\n    derivative is computed as z*(1-z) element-wise.\n\n    Args:\n        z: float, list or NumPy ndarray of sigmoid outputs.\n\n    Returns:\n        Same structure as *z* (float or nested list) with each value replaced\n        by its gradient, rounded to 4 decimal places.\n    \"\"\"\n    if isinstance(z, (int, float)):\n        return np.round(z * (1 - z), 4)\n    elif isinstance(z, list):\n        return [sigmoid_grad(sub_z) for sub_z in z]\n    elif isinstance(z, np.ndarray):\n        return np.round(z * (1 - z), 4)\n    else:\n        raise TypeError(\"Input must be a float, list, or NumPy ndarray.\")\n```\n\nThis script first checks the type of the input. If it's a scalar (either an integer or a float), it computes the gradient directly. If it's a list, it recursively applies the function to each element of the list. If it's a NumPy array, it computes the gradient element-wise and rounds the results. If the input is of any other type, it raises a TypeError.\n"}
{"task_id": 528, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef decision_boundary_grid(X: list[list[int | float]],\n                           W: list[int | float],\n                           b: float,\n                           grid_n: int = 100) -> list[list[int]]:\n    \"\"\"Generate a matrix of predictions for a 2-D linear classifier.\n\n    A point (x\u2081 , x\u2082) is labelled with 1 if w\u2081\u00b7x\u2081 + w\u2082\u00b7x\u2082 + b \u2265 0 and\n    with \u20111 otherwise.  The grid spans the bounding box of *X* and contains\n    *grid_n* points along each axis.\n\n    Args:\n        X: The original data set as a list of [x\u2081 , x\u2082] pairs.\n        W: List or tuple with exactly two weights [w\u2081 , w\u2082].\n        b: Bias term of the linear classifier.\n        grid_n: Number of grid points per axis (default 100).\n\n    Returns:\n        Nested Python list with shape *(grid_n \u00d7 grid_n)* containing only\n        1 and \u20111, the predicted labels of the grid points.\n    \"\"\"\n    # Convert X to numpy array for easier manipulation\n    X = np.array(X)\n\n    # Find the min and max values for each feature\n    x1_min, x1_max = X[:, 0].min(), X[:, 0].max()\n    x2_min, x2_max = X[:, 1].min(), X[:, 1].max()\n\n    # Create equally spaced arrays for each feature\n    x1_plot = np.linspace(x1_min, x1_max, grid_n)\n    x2_plot = np.linspace(x2_min, x2_max, grid_n)\n\n    # Create a mesh-grid from the arrays\n    x1_mesh, x2_mesh = np.meshgrid(x1_plot, x2_plot)\n\n    # Flatten the mesh-grid for easier computation\n    x1_flat = x1_mesh.flatten()\n    x2_flat = x2_mesh.flatten()\n\n    # Compute the predictions for each grid point\n    predictions = np.sign(W[0]*x1_flat + W[1]*x2_flat + b)\n\n    # Reshape the predictions to the original grid shape\n    predictions_grid = predictions.reshape(x1_mesh.shape)\n\n    # Convert the numpy array to a list of lists\n    predictions_list = predictions_grid.tolist()\n\n    return predictions_list\n```\n\nThis script first converts the input list of lists to a numpy array for easier manipulation. It then finds the minimum and maximum values for each feature in the data set. It creates equally spaced arrays for each feature using these min and max values. It creates a mesh-grid from these arrays. It then flattens the mesh-grid for easier computation. It computes the predictions for each grid point using the provided classifier rule. It reshapes the predictions to the original grid shape and converts the numpy array to a list of lists. Finally, it returns this list of lists.\n"}
{"task_id": 537, "completion_id": 0, "completion": "Here is a Python script that implements a Gaussian Naive Bayes classifier from scratch:\n\n```python\nimport numpy as np\n\ndef gaussian_naive_bayes(X_train: np.ndarray, y_train: np.ndarray, X_test: np.ndarray) -> list[int]:\n    \"\"\"Gaussian Naive Bayes binary classifier.\n\n    Training phase: estimate mean, standard deviation and class prior for\n    every feature of both classes.\n    Prediction phase: compute the posterior probability for each class\n    using the Gaussian likelihood (with feature independence assumption)\n    and return the most probable class (0 or 1) for every test sample.\n\n    Args:\n        X_train: 2-D NumPy array of shape (n_samples, n_features) containing\n                  the training features.\n        y_train: 1-D NumPy array of length n_samples with binary labels\n                  (each entry is 0 or 1).\n        X_test:  2-D NumPy array of shape (m_samples, n_features) containing\n                  the data to classify.\n\n    Returns:\n        A Python list of length m_samples where each element is the\n        predicted class label (0 or 1).\n    \"\"\"\n    # Compute class priors\n    priors = np.bincount(y_train) / len(y_train)\n\n    # Compute mean and standard deviation for each feature for each class\n    means = np.array([X_train[y_train == c].mean(axis=0) for c in range(2)])\n    stds = np.array([X_train[y_train == c].std(axis=0) for c in range(2)])\n\n    # Add a very small constant to avoid division by zero\n    eps = 1e-9\n    stds += eps\n\n    # Compute the Gaussian likelihood for each feature in each class\n    likelihoods = np.exp(-0.5 * ((X_test[:, :, None] - means) / stds) ** 2) / (np.sqrt(2 * np.pi) * stds)\n\n    # Compute the posterior probability for each class\n    posteriors = np.prod(likelihoods, axis=1) * priors\n\n    # Return the class with the higher posterior probability for each test sample\n    return np.argmax(posteriors, axis=1).tolist()\n```\n\nThis script first computes the class priors, which are the relative frequencies of each class in the training set. Then, it computes the mean and standard deviation for each feature for each class. It adds a very small constant to the standard deviations to avoid division by zero. The Gaussian likelihood for each feature in each class is then computed. Finally, the posterior probability for each class is computed and the class with the higher posterior probability is returned for each test sample.\n"}
{"task_id": 539, "completion_id": 0, "completion": "Here is a Python function that implements the binary cross-entropy cost function as described:\n\n```python\nimport numpy as np\n\ndef compute_cost(AL: np.ndarray, Y: np.ndarray) -> float:\n    \"\"\"\n    Compute the binary cross-entropy cost.\n\n    Parameters:\n    AL (np.ndarray): A vector of model probabilities.\n    Y (np.ndarray): A vector of true labels.\n\n    Returns:\n    float: The binary cross-entropy cost.\n    \"\"\"\n    # Clip the probabilities to avoid numerical overflow\n    AL = np.clip(AL, 1e-15, 1 - 1e-15)\n\n    # Compute the binary cross-entropy cost\n    cost = -1/Y.shape[1] * np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\n\n    return round(cost, 4)\n```\n\nThis function first clips the input probabilities to the range [1e-15, 1 - 1e-15] to avoid numerical overflow. It then computes the binary cross-entropy cost using the formula provided in the task description. Finally, it returns the cost as a plain Python float rounded to 4 decimal places.\n"}
{"task_id": 552, "completion_id": 0, "completion": "Here is a Python script that implements the Hidden Markov Model (HMM) and computes the posterior state distribution (\u03b3) as described in the task.\n\n```python\nimport numpy as np\n\ndef gamma_probabilities(hmm: dict, observations: list[int], t: int) -> list[float]:\n    \"\"\"Compute the posterior probability \u03b3\u209c for every hidden state in an HMM.\n\n    The implementation must use the forward-backward algorithm described in\n    the task description and return the resulting vector rounded to four\n    decimal places.\n\n    Args:\n        hmm (dict): HMM parameters with keys 'pi', 'A' and 'B'.\n        observations (list[int]): Sequence of observation indices.\n        t (int): Time step for which the posterior distribution is required.\n\n    Returns:\n        list[float]: Posterior probabilities for each state at time t.\n    \"\"\"\n    if t < 0 or t >= len(observations):\n        return []\n\n    pi, A, B = hmm['pi'], hmm['A'], hmm['B']\n    N = len(pi)\n    M = len(B[0])\n\n    # Forward probabilities\n    alpha = np.zeros((N, t+1))\n    alpha[:, 0] = pi * B[:, observations[0]]\n\n    for i in range(1, t+1):\n        for j in range(N):\n            alpha[j, i] = np.sum(alpha[:, i-1] * A[:, j] * B[j, observations[i]])\n\n    # Backward probabilities\n    beta = np.zeros((N, len(observations) - t))\n    beta[:, -1] = 1\n\n    for i in range(len(observations) - t - 1, 0, -1):\n        for j in range(N):\n            beta[j, i-1] = np.sum(beta[:, i] * A[j, :] * B[:, observations[i]])\n\n    # Posterior probabilities\n    gamma = alpha[:, t] * beta[:, 0]\n    gamma = gamma / np.sum(gamma)\n\n    return [round(p, 4) for p in gamma]\n```\n\nThis script first checks if the provided time step `t` is within the valid range. If it is not, it returns an empty list.\n\nThen it initializes the forward and backward probabilities and computes them using the provided HMM parameters and the observation sequence.\n\nFinally, it computes the posterior probabilities by multiplying the forward and backward probabilities at time `t` and normalizes them to sum up to 1. The result is then rounded to four decimal places and returned as a list.\n"}
{"task_id": 555, "completion_id": 0, "completion": "Here is a Python script that implements the DBSCAN algorithm:\n\n```python\nimport numpy as np\nfrom collections import deque\nfrom scipy.spatial.distance import pdist, squareform\n\ndef dbscan(data: np.ndarray, eps: float, min_samples: int) -> list[int]:\n    \"\"\"Density-Based Spatial Clustering (DBSCAN).\n\n    Parameters\n    ----------\n    data : np.ndarray\n        A 2-D array with shape (n_samples, n_features).\n    eps : float\n        Radius that defines the neighbourhood of a point.\n    min_samples : int\n        Minimum number of points required to form a dense region (core point).\n\n    Returns\n    -------\n    list[int]\n        Cluster labels for every sample.  Noise points receive the label \u20131\n        while clusters are numbered 1, 2, 3, \u2026 in the order they are found.\n    \"\"\"\n    # Compute pairwise Euclidean distances\n    dists = squareform(pdist(data, 'euclidean'))\n\n    # Identify core points\n    core_points = np.sum(dists <= eps, axis=0) >= min_samples\n\n    # Initialize cluster labels\n    labels = np.full(data.shape[0], -1)\n\n    # Initialize cluster counter\n    cluster_id = 0\n\n    # Iterate over all points\n    for point in range(data.shape[0]):\n        # If the point is not already assigned to a cluster\n        if labels[point] == -1:\n            # If the point is a core point\n            if core_points[point]:\n                # Start a new cluster\n                cluster_id += 1\n                labels[point] = cluster_id\n\n                # Initialize a queue for BFS\n                queue = deque([point])\n\n                # While the queue is not empty\n                while queue:\n                    # Pop a point from the queue\n                    current_point = queue.popleft()\n\n                    # Find all neighboring points\n                    neighbors = np.where(dists[current_point] <= eps)[0]\n\n                    # Iterate over all neighboring points\n                    for neighbor in neighbors:\n                        # If the neighbor is not already assigned to a cluster\n                        if labels[neighbor] == -1:\n                            # If the neighbor is a core point\n                            if core_points[neighbor]:\n                                # Assign the neighbor to the current cluster\n                                labels[neighbor] = cluster_id\n\n                                # Add the neighbor to the queue\n                                queue.append(neighbor)\n\n    return labels.tolist()\n```\n\nThis script first computes the pairwise Euclidean distances between all points. Then it identifies the core points, i.e., the points that have at least `min_samples` points within a distance of `eps`. The script then iterates over all points and, if a point is a core point and not yet assigned to a cluster, it starts a new cluster and assigns the point to the cluster. The script then adds all neighboring points to the queue and assigns them to the same cluster. The process continues until all points have been processed.\n"}
{"task_id": 561, "completion_id": 0, "completion": "Here is a Python script that implements the Expectation-Maximization (EM) algorithm for a Gaussian Mixture Model (GMM).\n\n```python\nimport numpy as np\nfrom scipy.stats import multivariate_normal\n\ndef gmm_em(data: np.ndarray, k: int, max_iter: int = 200, epsilon: float = 1e-4) -> list[int]:\n    N, D = data.shape\n\n    # Initialize parameters\n    np.random.seed(0)\n    weights = np.random.rand(k)\n    weights /= weights.sum()\n    means = np.random.rand(k, D)\n    covariances = np.array([np.eye(D)] * k)\n\n    for _ in range(max_iter):\n        # E step\n        responsibilities = np.zeros((N, k))\n        for i in range(k):\n            responsibilities[:, i] = weights[i] * multivariate_normal.pdf(data, means[i], covariances[i])\n        responsibilities /= responsibilities.sum(axis=1, keepdims=True)\n\n        # M step\n        N_k = responsibilities.sum(axis=0)\n        weights = N_k / N\n        means = responsibilities.T @ data / N_k.reshape(-1, 1)\n        for i in range(k):\n            diff = data - means[i]\n            covariances[i] = (responsibilities[:, i] * diff.T @ diff) / N_k[i]\n\n        # Check for convergence\n        if np.all(np.abs(weights - epsilon) < epsilon):\n            break\n\n    # Assign samples to components\n    labels = np.argmax(responsibilities, axis=1)\n\n    # Sort components by mean and relabel\n    order = np.argsort(means[:, 0])\n    labels = order[labels]\n\n    return labels.tolist()\n```\n\nThis script first initializes the parameters of the Gaussian components randomly. Then, it performs the E and M steps for a maximum number of iterations or until the mixture weights change by less than a prescribed tolerance. After convergence, it assigns each sample to the component with the largest posterior probability and sorts the components by the first coordinate of their mean. Finally, it returns a list of the final cluster labels for each sample.\n\nPlease note that this script uses the scipy library for the multivariate normal distribution and the numpy library for array operations.\n"}
{"task_id": 562, "completion_id": 0, "completion": "Here is a Python script that implements the Spectral Clustering algorithm:\n\n```python\nimport numpy as np\n\ndef spectral_clustering(data: np.ndarray, n_cluster: int, gamma: float = 2.0, method: str = 'unnormalized') -> list[int]:\n    \"\"\"Perform spectral clustering on the given dataset.\n\n    Args:\n        data: A NumPy array of shape (N, d) containing N samples with d features.\n        n_cluster: The number of clusters to form.\n        gamma: The gamma parameter of the Gaussian (RBF) kernel used to build the similarity graph.\n        method: Either 'unnormalized' or 'normalized' \u2013 specifies which Laplacian variant to use.\n\n    Returns:\n        A list of length N where the i-th element is an integer label identifying the\n        cluster assignment of the i-th sample (labels are 0-based).\n    \"\"\"\n    if n_cluster == 1:\n        return [0] * len(data)\n\n    # Compute the pairwise squared distance\n    dist = np.sum(data**2, axis=1).reshape(-1, 1) + \\\n           np.sum(data**2, axis=1) - \\\n           2 * np.dot(data, data.T)\n\n    # Compute the similarity\n    W = np.exp(-gamma * dist)\n\n    # Compute the degree diagonal\n    D = np.diag(np.sum(W, axis=1))\n\n    # Compute the Laplacian\n    if method == 'unnormalized':\n        L = D - W\n    else:\n        D_inv_sqrt = np.diag(1 / np.sqrt(np.diag(D)))\n        L = np.eye(len(data)) - np.dot(np.dot(D_inv_sqrt, W), D_inv_sqrt)\n\n    # Compute the eigenvectors\n    _, V = np.linalg.eigh(L)\n    V = V[:, :n_cluster]\n\n    # Normalize the eigenvectors\n    if method == 'normalized':\n        V /= np.linalg.norm(V, axis=1).reshape(-1, 1)\n\n    # Run k-means\n    centroids = V[:n_cluster]\n    labels = np.argmin(np.sum((V[:, np.newaxis, :] - centroids) ** 2, axis=2), axis=1)\n\n    # Relabel clusters\n    label_order = np.argsort(np.argmin(np.sum((data - centroids) ** 2, axis=1)))\n    labels = label_order[labels]\n\n    return labels.tolist()\n```\n\nThis script first computes the pairwise squared distance and the similarity matrix. Then it computes the degree diagonal and the Laplacian. Depending on the `method` parameter, it either uses the un-normalized or the symmetric normalized Laplacian. After that, it computes the eigenvectors of the Laplacian. If the normalized variant is chosen, it normalizes the eigenvectors. Finally, it runs k-means in the eigenvector space to obtain final cluster labels. The labels are then relabeled so that the cluster containing the smallest original index gets label 0, the next one 1, etc.\n"}
{"task_id": 563, "completion_id": 0, "completion": "Here is a Python script that implements the Dual-form Perceptron learning algorithm as described in the task:\n\n```python\nimport numpy as np\n\ndef perceptron_dual_train(X_data: np.ndarray,\n                          y_data: np.ndarray,\n                          eta: float = 1.0,\n                          max_iter: int = 1000) -> tuple[list[float], float]:\n    \"\"\"Train a binary (\u00b11) perceptron using the dual formulation.\n\n    Args:\n        X_data: 2-D NumPy array containing N samples (shape = N \u00d7 d).\n        y_data: 1-D NumPy array of length N with labels \u22121 or 1.\n        eta:    Learning rate (default 1.0).\n        max_iter: Maximum number of complete passes over the data.\n\n    Returns:\n        A tuple (w, b) where w is the learned weight vector converted to a\n        Python list (each element rounded to 4 decimals) and b is the rounded\n        bias term.\n    \"\"\"\n    N, d = X_data.shape\n    alpha = np.zeros(N)\n    b = 0.0\n    G = np.dot(X_data, X_data.T)\n\n    for _ in range(max_iter):\n        updated = False\n        for i in range(N):\n            g = np.dot(alpha * y_data, G[i])\n            if y_data[i] * (g + b) <= 0:\n                alpha[i] += eta\n                b += eta * y_data[i]\n                updated = True\n        if not updated:\n            break\n\n    w = np.dot(alpha * y_data, X_data)\n    w = np.round(w, 4).tolist()\n    b = np.round(b, 4)\n\n    return w, b\n```\n\nThis script first initializes the `alpha` and `b` parameters, then computes the Gram matrix `G`. It then enters a loop that iterates over the training set `max_iter` times. For each sample, it computes the inner product of the sample with the weight vector and updates `alpha` and `b` if the prediction is incorrect. If no update is made in a complete pass over the data, the loop is exited early. Finally, the weight vector is recovered and rounded to 4 decimal places, along with the bias term.\n"}
{"task_id": 564, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nclass Node:\n    def __init__(self, label=None, x=None, s=None, y=None, child=None):\n        self.label = label\n        self.x = x\n        self.s = s\n        self.y = y\n        self.child = child\n\ndef predict_sample(root: \"Node\", features: list | tuple, task_type: str):\n    \"\"\"Return the prediction for one sample by traversing the decision tree.\n\n    Args:\n        root (Node): The root node of the decision tree.\n        features (list | tuple): The feature values of the sample.\n        task_type (str): Either 'classification' or 'regression'.\n\n    Returns:\n        The value stored in the reached leaf node.\n    \"\"\"\n    if root.y is not None:\n        return root.y\n\n    if task_type == 'classification':\n        for child in root.child:\n            if child.x == features[root.label]:\n                return predict_sample(child, features, task_type)\n        return predict_sample(root.child[1], features, task_type)\n\n    elif task_type == 'regression':\n        if features[root.label] <= root.s:\n            return predict_sample(root.child[0], features, task_type)\n        else:\n            return predict_sample(root.child[1], features, task_type)\n```\n\nThis script first checks if the current node is a leaf node (i.e., if it stores `y`). If it does, it returns the value stored in `y`. If it's not a leaf node, it checks the `task_type`. If it's a classification task, it traverses the tree by inspecting the feature with index `node.label` and choosing the first child whose `x` attribute equals the inspected feature value. If no child matches, it defaults to the second child. If it's a regression task, it inspects the feature with index `node.label` and continues with the first child if the feature value is less than or equal to `node.s`, otherwise it continues with the second child.\n"}
{"task_id": 565, "completion_id": 0, "completion": "Here is a Python script that implements the `choose_best_feature` function. This function calculates the entropy and conditional entropy for each feature, and then selects the feature with the maximum information gain.\n\n```python\nimport numpy as np\n\ndef choose_best_feature(X: np.ndarray, y: np.ndarray) -> tuple[int, float]:\n    \"\"\"Return the feature index that yields maximal information gain.\n\n    Parameters\n    ----------\n    X : np.ndarray\n        2-D array of shape (n_samples, n_features) containing discrete feature\n        values encoded as non-negative integers starting from 0.\n    y : np.ndarray\n        1-D array of shape (n_samples,) containing integer class labels\n        starting from 0.\n\n    Returns\n    -------\n    tuple[int, float]\n        A tuple consisting of the index of the best feature and the maximum\n        information gain rounded to 6 decimal places.\n    \"\"\"\n    def entropy(labels):\n        _, counts = np.unique(labels, return_counts=True)\n        p = counts / len(labels)\n        return -np.sum(p * np.log2(p))\n\n    def conditional_entropy(feature, labels):\n        _, counts = np.unique(feature, return_counts=True)\n        p = counts / len(feature)\n        entropy = 0\n        for value in np.unique(feature):\n            subset_labels = labels[feature == value]\n            entropy += p[list(feature).index(value)] * entropy(subset_labels)\n        return entropy\n\n    H_y = entropy(y)\n    max_information_gain = -np.inf\n    best_feature_index = -1\n\n    for feature_index in range(X.shape[1]):\n        H_y_given_A = conditional_entropy(X[:, feature_index], y)\n        information_gain = H_y - H_y_given_A\n        if information_gain > max_information_gain:\n            max_information_gain = information_gain\n            best_feature_index = feature_index\n\n    return best_feature_index, round(max_information_gain, 6)\n```\n\nThis function first calculates the entropy of the label distribution `H_y`. Then, for each feature, it calculates the conditional entropy `H_y_given_A` and the information gain `H_y - H_y_given_A`. If the information gain is greater than the current maximum, it updates the maximum information gain and the best feature index. Finally, it returns the best feature index and the maximum information gain rounded to 6 decimal places.\n"}
{"task_id": 566, "completion_id": 0, "completion": "Here is a Python script that implements the Isolation Forest algorithm as described in the task.\n\n```python\nimport numpy as np\nimport math\n\ndef detect_outliers(data: np.ndarray, n_trees: int, sample_size: int, epsilon: float) -> list[int]:\n    \"\"\"Tiny Isolation Forest implementation.\n\n    Args:\n        data: 2-D NumPy array where each row is an observation and each column a feature.\n        n_trees: Number of random isolation trees that will be grown.\n        sample_size: Number of samples drawn (without replacement) to grow every tree.\n        epsilon: Fraction (0 \u2264 \u03b5 < 1) of observations that are considered outliers.\n\n    Returns:\n        A list with the zero-based indices of the detected outliers, sorted increasingly.\n    \"\"\"\n    np.random.seed(42)\n\n    n_samples, n_features = data.shape\n    phi = 2 * math.log(sample_size) - 2 * (sample_size - 1) / sample_size\n    c = lambda n: 2 * math.log(n - 1) + 0.5772156649 - 2 * (n - 1) / n if n > 1 else 0\n\n    def build_tree(data, height_limit):\n        if len(data) <= 1 or height_limit == 0:\n            return data\n        feature = np.random.choice(n_features)\n        min_val, max_val = np.min(data[:, feature]), np.max(data[:, feature])\n        threshold = np.random.uniform(min_val, max_val)\n        left_data = data[data[:, feature] < threshold]\n        right_data = data[data[:, feature] >= threshold]\n        return [feature, threshold, build_tree(left_data, height_limit - 1), build_tree(right_data, height_limit - 1)]\n\n    def path_length(tree, x, path):\n        if len(tree) == 3:\n            return path + c(len(tree[2]))\n        feature, threshold, left_tree, right_tree = tree\n        if x[feature] < threshold:\n            return path_length(left_tree, x, path + 1)\n        else:\n            return path_length(right_tree, x, path + 1)\n\n    trees = []\n    for _ in range(n_trees):\n        sample_indices = np.random.choice(n_samples, size=min(sample_size, n_samples), replace=False)\n        sample_data = data[sample_indices]\n        trees.append(build_tree(sample_data, math.ceil(math.log2(sample_size))))\n\n    scores = []\n    for x in data:\n        path_lengths = [path_length(tree, x, 0) for tree in trees]\n        score = 2 ** (-np.mean(path_lengths) / phi)\n        scores.append(score)\n\n    threshold = np.percentile(scores, 100 * (1 - epsilon))\n    outliers = [i for i, score in enumerate(scores) if score > threshold]\n    return sorted(outliers)\n```\n\nThis script first sets up the necessary constants and helper functions. It then builds the random isolation trees and computes the path lengths for each observation. Finally, it computes the anomaly scores and identifies the outliers.\n"}
{"task_id": 568, "completion_id": 0, "completion": "Here is a Python script that implements the Maximum Entropy Classifier with Generalized Iterative Scaling (GIS) algorithm:\n\n```python\nimport math\nfrom collections import defaultdict\nimport numpy as np\n\ndef maxent_predict(\n    X_train: np.ndarray,\n    y_train: np.ndarray,\n    X_test: np.ndarray,\n    epsilon: float = 1e-3,\n    n_iter: int = 100,\n) -> list[int]:\n    # Step 1: Build the empirical distributions\n    empirical_distributions = defaultdict(lambda: defaultdict(int))\n    for x, y in zip(X_train, y_train):\n        empirical_distributions[y][tuple(x)] += 1\n\n    # Step 2: Initialize the weight vector\n    weights = np.zeros(len(empirical_distributions))\n\n    # Step 3: Iteratively update the weight vector\n    for _ in range(n_iter):\n        # Compute the normalization factor Z(x)\n        Z = np.array([sum(math.exp(weights[y] * sum(empirical_distributions[y][tuple(x)] for y in empirical_distributions)) for x in X_train)])\n\n        # Compute the gradient\n        gradient = np.array([sum((empirical_distributions[y][tuple(x)] / Z[i]) * (y == np.arange(len(weights))) for i, x in enumerate(X_train)) for y in empirical_distributions])\n\n        # Update the weights\n        new_weights = weights + epsilon * gradient\n\n        # Check for convergence\n        if np.max(np.abs(new_weights - weights)) < epsilon:\n            break\n\n        weights = new_weights\n\n    # Step 4: Return the predicted label for every sample in the test set\n    predictions = []\n    for x in X_test:\n        # Compute the conditional probabilities\n        conditional_probabilities = np.array([math.exp(weights[y] * sum(empirical_distributions[y][tuple(x)] for y in empirical_distributions)) / sum(math.exp(weights[y] * sum(empirical_distributions[y][tuple(x)] for y in empirical_distributions)) for y in empirical_distributions) for y in empirical_distributions])\n\n        # Choose the label with the highest conditional probability\n        predictions.append(np.argmax(conditional_probabilities))\n\n    return predictions\n```\n\nThis script first builds the empirical distributions from the training data. It then initializes the weight vector and iteratively updates it until convergence. Finally, it computes the conditional probabilities for each label for each sample in the test set and chooses the label with the highest conditional probability as the prediction.\n"}
{"task_id": 569, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nfrom collections import Counter\nfrom typing import Iterable, Tuple, List, Set, Any\n\ndef statistic_key_word(\n    data: List[Tuple[Any, Iterable[str]]],\n    cut_off: int | None = None\n) -> Tuple[List[Tuple[str, float]], Set[str]]:\n    \"\"\"Calculate how often each word appears across documents.\n\n    The function returns a list with the document-frequency ratio of every word\n    (sorted from highest to lowest) and a set containing only the *cut_off*\n    most frequent words. When *cut_off* is ``None`` all words are placed in the\n    set. Every ratio must be rounded to four decimal places.\n\n    Args:\n        data: Iterable of documents. Each document is represented by a tuple\n              ``(label, words)`` where *label* is ignored and *words* is an\n              iterable of strings.\n        cut_off: Number of top words to include in the returned set, or\n                  ``None`` to include every word.\n\n    Returns:\n        Tuple with (1) a list of (word, ratio) pairs and (2) a set of the most\n        frequent words as described above.\n    \"\"\"\n    # Count the number of documents\n    num_docs = len(data)\n\n    # Count the number of documents each word appears in\n    word_counts = Counter()\n    for _, words in data:\n        word_counts.update(set(words))\n\n    # Calculate the document-frequency ratio for each word\n    word_ratios = {word: round(count / num_docs, 4) for word, count in word_counts.items()}\n\n    # Sort the words by their document-frequency ratio\n    sorted_words = sorted(word_ratios.items(), key=lambda x: x[1], reverse=True)\n\n    # Get the set of the most frequent words\n    if cut_off is None:\n        cut_off = len(word_ratios)\n    top_words = set(word for word, _ in sorted_words[:cut_off])\n\n    return sorted_words, top_words\n```\n\nThis script first counts the number of documents and the number of documents each word appears in. It then calculates the document-frequency ratio for each word and sorts the words by their ratio. Finally, it creates a set of the most frequent words according to the cut-off value. If the cut-off value is `None`, all words are included in the set.\n"}
{"task_id": 571, "completion_id": 0, "completion": "Here is a Python script that implements the function `compute_svm_parameters` as described in the task:\n\n```python\nimport numpy as np\n\ndef compute_svm_parameters(X: np.ndarray, y: np.ndarray, alpha: np.ndarray) -> tuple[list[float], float]:\n    \"\"\"Compute the weight vector and bias term of a linear SVM.\n\n    The function implements the final reconstruction step of the\n    Sequential Minimal Optimization (SMO) algorithm for a hard/soft\n    margin linear Support Vector Machine.\n\n    Args:\n        X: 2-D NumPy array of shape (n_samples, n_features) containing the\n           training samples.\n        y: 1-D NumPy array of shape (n_samples,) with class labels (+1 or\n           -1).\n        alpha: 1-D NumPy array of shape (n_samples,) containing the\n           optimized Lagrange multipliers.\n\n    Returns:\n        A tuple (w_list, b) where w_list is a Python list with the weight\n        vector and b is the bias term. Both w and b are rounded to four\n        decimal places.\n    \"\"\"\n    # Compute the weight vector\n    w = np.dot(X.T, alpha * y)\n    w_list = w.tolist()\n\n    # Compute the bias term\n    b = np.mean(y - np.dot(X, w))\n\n    # Round all elements to 4 decimal places\n    w_list = [round(elem, 4) for elem in w_list]\n    b = round(b, 4)\n\n    return w_list, b\n```\n\nThis function first computes the weight vector `w` using the formula given in the task description. It then computes the bias term `b` using the formula given in the task description. Finally, it rounds all elements of `w` and `b` to 4 decimal places and returns them as a tuple.\n"}
{"task_id": 572, "completion_id": 0, "completion": "Here is a Python script that implements the Local Outlier Factor (LOF) algorithm as described in the task.\n\n```python\nimport numpy as np\n\ndef local_outlier_factor(data, k, epsilon=1.5):\n    \"\"\"\n    Implementation of the Local Outlier Factor (LOF) algorithm.\n\n    Parameters:\n    data (numpy array): The data set to be analyzed.\n    k (int): The number of nearest neighbors to consider.\n    epsilon (float): The threshold for outlier detection.\n\n    Returns:\n    tuple: A tuple consisting of the list of LOF scores rounded to four decimals and the ascending list of indices of all samples whose LOF score is strictly larger than `epsilon`.\n    \"\"\"\n\n    # Compute the full pair\u2013wise Euclidean distance matrix\n    dist_matrix = np.sqrt(np.sum((data[None, :] - data[:, None])**2, -1))\n\n    # For every sample p obtain its k-distance and the index list of those k nearest neighbours Nk(p)\n    k_distances = np.sort(dist_matrix, axis=1)[:, k]\n    k_neighbors = np.argsort(dist_matrix, axis=1)[:, :k]\n\n    # Define the reachability distance between two points\n    reach_distances = np.maximum(dist_matrix, k_distances[:, None])\n\n    # Compute the Local Reachability Density (LRD) of p\n    lrd = k / np.sum(reach_distances, axis=1)\n\n    # Compute the Local Outlier Factor\n    lof = np.sum(lrd[k_neighbors] / (k * lrd[None, :]), axis=1) / k\n\n    # Round every LOF score to the nearest 4th decimal place\n    lof_scores = np.round(lof, 4)\n\n    # Get the indices of all samples whose LOF score is strictly larger than `epsilon`\n    outlier_indices = np.where(lof_scores > epsilon)[0]\n\n    return lof_scores.tolist(), outlier_indices.tolist()\n```\n\nThis script first computes the full pair-wise Euclidean distance matrix. Then, for each sample, it computes the k-distance and the indices of its k nearest neighbors. It defines the reachability distance between two points and computes the Local Reachability Density (LRD) of each sample. Finally, it computes the Local Outlier Factor (LOF) of each sample and returns the rounded LOF scores and the indices of the outliers.\n"}
{"task_id": 574, "completion_id": 0, "completion": "Here is a Python script that implements the `generate_data` function as described:\n\n```python\nimport numpy as np\nimport random\n\ndef generate_data(m: int,\n                  n_train: int,\n                  n_val: int,\n                  seed: int | None = None) -> tuple:\n    \"\"\"Generate synthetic 2-D data for *m* classes.\n\n    Parameters\n    ----------\n    m : int\n        Number of classes.\n    n_train : int\n        Points per class in the training set.\n    n_val : int\n        Points per class in the validation set.\n    seed : int | None, optional\n        Random seed for reproducibility.  If *None* the global random\n        state is used as is.\n\n    Returns\n    -------\n    tuple\n        (X_train, X_val, y_train, y_val) as NumPy arrays.\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n\n    for c in range(m):\n        base = 10 * (c // 2) + 5\n        X_train.append(np.round(np.random.uniform(base+1, base+9, (n_train, 2)), 4))\n        y_train.append(np.full(n_train, c))\n        X_val.append(np.round(np.random.uniform(base+1, base+9, (n_val, 2)), 4))\n        y_val.append(np.full(n_val, c))\n\n    return (np.vstack(X_train), np.vstack(X_val), np.hstack(y_train), np.hstack(y_val))\n```\n\nThis script first checks if a seed is provided. If so, it sets the random seed to the provided value. Then, it initializes empty lists for the training and validation data and labels. For each class, it generates `n_train` training points and `n_val` validation points, each with coordinates sampled from a uniform distribution within the specified square. The class labels are set to the current class value `c`. Finally, it returns the training and validation data and labels as NumPy arrays.\n"}
{"task_id": 579, "completion_id": 0, "completion": "Here is a Python script that implements the K-Means clustering algorithm as described:\n\n```python\nimport numpy as np\n\ndef kmeans(X: np.ndarray, k: int, max_iters: int = 100) -> tuple[list[int], list[list[float]]]:\n    \"\"\"Cluster the data points in `X` into `k` groups using the K-Means algorithm.\n\n    The first `k` points serve as the initial centres.  Lloyd iterations are\n    performed until the assignments cease to change or the iteration limit is\n    reached.  The function returns the final label of every point as well as the\n    coordinates of the cluster centres (rounded to 4 decimals).\n\n    Args:\n        X: 2-D NumPy array of shape (m, d) containing the data set.\n        k: Number of clusters (1 \u2264 k \u2264 m).\n        max_iters: Upper bound on the number of iterations to execute.\n\n    Returns:\n        A tuple `(labels, centres)` where\n            labels  \u2013 list of length *m* with the cluster index of each point.\n            centres \u2013 list with *k* inner lists, each the rounded coordinates\n                      of a centre.\n    \"\"\"\n    # Initialization\n    centres = X[:k].tolist()\n    labels = [0] * len(X)\n\n    for _ in range(max_iters):\n        # Assignment step\n        new_labels = []\n        for point in X:\n            distances = [np.linalg.norm(point - np.array(centre)) for centre in centres]\n            new_labels.append(np.argmin(distances))\n\n        # Update step\n        if labels == new_labels:\n            break\n        labels = new_labels\n        for i in range(k):\n            points_in_cluster = [x for x, label in zip(X, labels) if label == i]\n            if points_in_cluster:\n                centres[i] = np.mean(points_in_cluster, axis=0).round(4).tolist()\n\n    return labels, centres\n```\n\nThis script first initializes the cluster centers as the first *k* points in the dataset and assigns each point to the nearest center. Then, it updates the centers as the mean of the points in each cluster. This process is repeated until the assignments stop changing or the maximum number of iterations is reached. The final labels and centers are then returned.\n"}
{"task_id": 581, "completion_id": 0, "completion": "Here is a Python script that implements Elastic-Net regularised linear regression using batch gradient descent:\n\n```python\nimport numpy as np\n\ndef elastic_net_regression(X: np.ndarray,\n                           y: np.ndarray,\n                           learning_rate: float,\n                           iterations: int,\n                           l1_penalty: float,\n                           l2_penalty: float) -> tuple[list[float], float]:\n    \"\"\"Fits a linear model with Elastic-Net regularisation.\n\n    Args:\n        X: A 2-D NumPy array of shape (m, n) containing the input features.\n        y: A 1-D NumPy array of length m containing the target values.\n        learning_rate: Step size for gradient descent (\u03b1).\n        iterations: Number of optimisation steps to perform.\n        l1_penalty: L1 regularisation strength (\u03bb\u2081).\n        l2_penalty: L2 regularisation strength (\u03bb\u2082).\n\n    Returns:\n        Tuple (weights, bias) where weights is a list of length n and bias is a\n        float.  Every number must be rounded to four decimal places.\n    \"\"\"\n    m, n = X.shape\n    weights = np.zeros(n)\n    bias = 0.0\n\n    if learning_rate == 0 or iterations == 0:\n        return (weights.tolist(), round(bias, 4))\n\n    for _ in range(iterations):\n        y_pred = np.dot(X, weights) + bias\n        residuals = y - y_pred\n\n        dL_dw = (-2 * np.dot(X.T, residuals) + l1_penalty * np.sign(weights) + 2 * l2_penalty * weights) / m\n        dL_db = -2 * np.sum(residuals) / m\n\n        weights -= learning_rate * dL_dw\n        bias -= learning_rate * dL_db\n\n    return (np.round(weights, 4).tolist(), round(bias, 4))\n```\n\nThis script first initializes the weights and bias to zero. If the learning rate or the number of iterations is zero, it returns the initial parameters. Otherwise, it performs the specified number of iterations of gradient descent. For each iteration, it computes the predictions, the residuals, and the gradients of the loss function with respect to the weights and bias. It then updates the weights and bias using these gradients. Finally, it returns the learned weights and bias, rounded to four decimal places.\n"}
{"task_id": 591, "completion_id": 0, "completion": "Here is a Python script that solves the task:\n\n```python\nimport numpy as np\n\ndef neural_net_predict(weights: list[list[list[float]]], x: list[float]) -> float | list[float]:\n    \"\"\"Perform a forward pass through a fully-connected ReLU neural network.\n\n    The network topology and parameters are encoded in *weights* where:\n      \u2022 *weights[L]* \u2013 weight matrix of layer L,\n      \u2022 each *weights[L][i]* \u2013 list of weights of neuron i of layer L,\n      \u2022 the first weight of every neuron is its bias weight.\n\n    All hidden layers use ReLU, the last layer is linear.\n\n    Args:\n        weights: A three-level nested list containing the network\u2019s weights.\n        x:       Input feature vector (without the bias term).\n\n    Returns:\n        The prediction rounded to four decimals (float if the output layer has\n        one neuron, otherwise list of floats).\n    \"\"\"\n    # Add the bias term to the input vector\n    x = np.array([1] + x)\n\n    # Iterate over each layer\n    for layer in weights[:-1]:\n        # Compute the dot product of the input vector with the weight matrix\n        x = np.dot(x, layer)\n        # Apply ReLU to the result\n        x = np.maximum(x, 0)\n\n    # Compute the dot product of the input vector with the weight matrix for the last layer\n    x = np.dot(x, weights[-1])\n\n    # Round the final result to the nearest 4th decimal\n    x = np.round(x, 4)\n\n    # If the output layer has only one neuron, return a single float\n    if len(x) == 1:\n        return float(x)\n    # Otherwise, return a list of floats\n    else:\n        return list(x)\n```\n\nThis script first adds the bias term to the input vector, then iterates over each layer of the network, computing the dot product of the input vector with the weight matrix and applying ReLU to the result. After the last layer, it computes the dot product with the weight matrix and rounds the final result to the nearest 4th decimal. If the output layer has only one neuron, it returns a single float; otherwise, it returns a list of floats.\n"}
{"task_id": 595, "completion_id": 0, "completion": "Here is a Python script that implements the K-Means clustering algorithm from scratch:\n\n```python\nimport numpy as np\n\ndef kmeans_centroids(X: \"np.ndarray\", k: int, max_iters: int = 100) -> list[list[float]]:\n    \"\"\"Your task: implement here. See docstring in the description.\"\"\"\n    # Step 1: Initialise the centroids with the first k samples in X\n    centroids = X[:k]\n\n    # Step 2: Repeat for at most max_iters iterations\n    for _ in range(max_iters):\n        # Step 2.1: Assign every sample to the nearest centroid using the squared Euclidean distance\n        distances = np.sqrt(((X - centroids[:, np.newaxis])**2).sum(axis=-1))\n        labels = np.argmin(distances, axis=0)\n\n        # Step 2.2: Update each centroid to the arithmetic mean of the samples currently assigned to it\n        new_centroids = np.array([X[labels==i].mean(axis=0) if X[labels==i].any() else centroids[i] for i in range(k)])\n\n        # Step 3: Stop early if all centroids move less than 1e-4 in a full iteration\n        if np.allclose(centroids, new_centroids, atol=1e-4):\n            break\n\n        centroids = new_centroids\n\n    # Step 5: After convergence, sort the centroids in ascending lexicographical order and round every coordinate to 4 decimal places\n    centroids = sorted(centroids.tolist())\n    centroids = [[round(y, 4) for y in x] for x in centroids]\n\n    return centroids\n```\n\nThis script first initializes the centroids with the first `k` samples in `X`. Then it repeats for at most `max_iters` iterations. In each iteration, it assigns each sample to the nearest centroid and updates each centroid to the arithmetic mean of the samples currently assigned to it. If all centroids move less than `1e-4` in a full iteration, it stops early. After convergence, it sorts the centroids in ascending lexicographical order and rounds every coordinate to 4 decimal places.\n"}
